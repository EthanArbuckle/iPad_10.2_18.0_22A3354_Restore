void sub_1000F3958(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1000F397C(a1, a2, a3, (void (*)(uint64_t))sub_100013328, &qword_1002B1210, (uint64_t)&type metadata for ObjectIdentifier, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100023310);
}

void sub_1000F397C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t *a5, uint64_t a6, void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v16;
  void (*v17)(uint64_t);
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;

  sub_1000F424C();
  v17(v16);
  sub_1000F3C6C();
  if (v18)
  {
    __break(1u);
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(a6);
    __break(1u);
    return;
  }
  sub_1000F4044();
  sub_1000055B0(a5);
  if (sub_1000F40D8(v12 & 1))
  {
    a4(v8);
    sub_1000F3E60();
    if (!v20)
      goto LABEL_10;
    v10 = v19;
  }
  v21 = *v9;
  if ((v11 & 1) != 0)
  {
    v22 = *(_QWORD *)(v21 + 56);
    swift_release();
    *(_QWORD *)(v22 + 8 * v10) = v7;
    sub_100088BDC();
  }
  else
  {
    a7(v10, v8, v7, v21);
  }
}

uint64_t sub_1000F3A58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CompanionLinkDevice(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000F3A9C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B1240;
  if (!qword_1002B1240)
  {
    v1 = type metadata accessor for UniversalControlDisplayLayout(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for UniversalControlDisplayLayout, v1);
    atomic_store(result, (unint64_t *)&qword_1002B1240);
  }
  return result;
}

uint64_t sub_1000F3ADC(uint64_t a1, uint64_t a2)
{
  sub_100033A44(a2, a1);
  return a2;
}

uint64_t sub_1000F3B18(uint64_t a1, uint64_t a2)
{
  assignWithTake for ClientAssertionController.Assertion(a2, a1);
  return a2;
}

uint64_t sub_1000F3B54(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v4;

  v4 = a3(0);
  sub_10005FF0C(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16));
  return a2;
}

uint64_t sub_1000F3B90(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;

  v4 = sub_1000055B0(a3);
  sub_10005FF0C(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32));
  return a2;
}

void sub_1000F3BCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, int a16, char a17, int a18, char a19, int a20,char a21,int a22,char a23,int a24,char a25,int a26,char a27,int a28,char a29,int a30,char a31)
{
  unint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  uint64_t v40;
  _BYTE *v41;

  *(_QWORD *)(v33 + 8 * (v31 >> 6) + 64) |= 1 << v31;
  v41 = (_BYTE *)(*(_QWORD *)(v33 + 48) + 16 * v31);
  *v41 = v32;
  v41[1] = v39;
  v41[2] = v34;
  v41[3] = v36;
  v41[4] = v35;
  v41[5] = a23;
  v41[6] = a15;
  v41[7] = a17;
  v41[8] = a25;
  v41[9] = a27;
  v41[10] = v38;
  v41[11] = v37;
  v41[12] = a31;
  v41[13] = a29;
  v41[14] = a19;
  v41[15] = a21;
  *(_QWORD *)(*(_QWORD *)(v33 + 56) + 8 * v31) = *(_QWORD *)(v40 - 112);
}

BOOL sub_1000F3C80()
{
  Swift::Int v0;
  char v1;

  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v1 & 1, v0);
}

uint64_t sub_1000F3C94()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000F3CCC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return sub_1001A8C70(a2, a3);
}

uint64_t sub_1000F3D8C(uint64_t a1)
{
  return swift_bridgeObjectRetain(a1);
}

BOOL sub_1000F3DA0(Swift::Bool a1)
{
  Swift::Int v1;

  return _NativeDictionary.ensureUnique(isUnique:capacity:)(a1, v1);
}

uint64_t sub_1000F3DAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  *(_QWORD *)(v2 - 104) = v4 & *(_QWORD *)(a1 + 64);
  return swift_bridgeObjectRetain(a2);
}

uint64_t sub_1000F3DF8()
{
  unint64_t v0;
  uint64_t v1;

  return sub_1001A8C70(v0, v1);
}

unint64_t sub_1000F3E04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000055F0(a2, a3);
}

BOOL sub_1000F3E70(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, Swift::Int capacity, uint64_t a10, Swift::Bool isUnique)
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, capacity);
}

uint64_t sub_1000F3ED0()
{
  return UUID.init(uuid:)(0, 0, 0, 0, 0, 0, 0, 0);
}

uint64_t sub_1000F3EFC()
{
  uint64_t v0;
  unint64_t v1;

  return sub_1001A8C70(v1, v0);
}

uint64_t sub_1000F3F28@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1001A8C70(*(_QWORD *)(*(_QWORD *)(v1 + 48) + 16 * a1), *(_QWORD *)(*(_QWORD *)(v1 + 48) + 16 * a1 + 8));
}

uint64_t sub_1000F3F50@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1001A8C70(*(_QWORD *)(*(_QWORD *)(v1 + 48) + 16 * a1), *(_QWORD *)(*(_QWORD *)(v1 + 48) + 16 * a1 + 8));
}

unint64_t sub_1000F4018()
{
  uint64_t v0;
  uint64_t v1;

  return sub_1000055F0(v1, v0);
}

void sub_1000F4050()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 104) = (v0 - 1) & v0;
}

void sub_1000F4070()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 104) = (v0 - 1) & v0;
}

uint64_t sub_1000F40A0()
{
  uint64_t *v0;

  return sub_1000055B0(v0);
}

BOOL sub_1000F40D8(Swift::Bool a1)
{
  Swift::Int v1;

  return _NativeDictionary.ensureUnique(isUnique:capacity:)(a1, v1);
}

uint64_t sub_1000F40F0(uint64_t a1)
{
  uint64_t v1;

  return _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v1, 1, 1, a1);
}

void sub_1000F4104(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 88) = a1;
}

uint64_t sub_1000F4120(uint64_t a1, uint64_t a2)
{
  return a2;
}

BOOL sub_1000F413C()
{
  Swift::Int v0;
  char v1;

  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v1 & 1, v0);
}

unint64_t sub_1000F416C@<X0>(uint64_t a1@<X0>, char a2@<W8>)
{
  *(_BYTE *)(a1 + 47) = a2;
  *(_QWORD *)(a1 + 48) = 1;
  return sub_100033B3C();
}

uint64_t sub_1000F41CC()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 2);
}

uint64_t sub_1000F41DC()
{
  _QWORD *v0;

  return swift_bridgeObjectRetain(*v0);
}

uint64_t sub_1000F41EC(uint64_t *a1)
{
  return sub_1000055B0(a1);
}

uint64_t sub_1000F41F4()
{
  uint64_t v0;
  _QWORD *v1;

  sub_100005988(v1);
  return v0;
}

uint64_t sub_1000F4210()
{
  uint64_t v0;

  return swift_isUniquelyReferenced_nonNull_native(v0);
}

uint64_t sub_1000F422C()
{
  return swift_bridgeObjectRelease(0x8000000000000000);
}

uint64_t sub_1000F4260(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return a5;
}

uint64_t sub_1000F4274()
{
  uint64_t v0;

  return UniversalControlDeviceID.init(uuid:)(v0);
}

uint64_t sub_1000F42A4()
{
  uint64_t *v0;

  return sub_1000055B0(v0);
}

uint64_t sub_1000F42AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return static UniversalControlUUID.compare(lhs:rhs:)(a1, a2, v2, v3);
}

uint64_t sub_1000F42B8()
{
  uint64_t v0;

  return v0;
}

void sub_1000F42D8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_QWORD *)(a3 + 16))
    sub_1001A8C70(a1, a2);
  sub_1000050D4();
}

void sub_1000F4310()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  sub_1000FD2BC(OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_remoteData, v2);
  v1 = (_QWORD *)(v0 + *(int *)(sub_1000FD384() + 24));
  if (*v1)
    swift_bridgeObjectRetain(v1[1]);
  sub_1000DF7F4();
  sub_100015540();
}

void sub_1000F4360(uint64_t *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = v3;
  sub_1000055B0(a1);
  sub_10000E490();
  __chkstk_darwin(v8);
  sub_10002641C();
  v11 = v10 - v9;
  sub_1000FB4A8(v6, v10 - v9, a1);
  v12 = a2(0);
  v13 = 1;
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v11, 1, v12) != 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a3, v11, v12);
    v13 = 0;
  }
  _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(a3, v13, 1, v12);
  sub_10002644C();
}

void sub_1000F4418()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1000FD2BC(OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_remoteData, v2);
  v1 = sub_1000FD384();
  swift_retain(*(_QWORD *)(v0 + *(int *)(v1 + 28)));
  sub_100015540();
}

uint64_t sub_1000F444C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t v4;

  sub_1000FD2BC(OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_remoteData, v4);
  v1 = sub_1000FD384();
  result = 0;
  v3 = (_QWORD *)(v0 + *(int *)(v1 + 36));
  if (*v3 >= 2uLL)
    return v3[1];
  return result;
}

void sub_1000F44A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1000FD2BC(OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_remoteData, v2);
  v1 = *(_QWORD *)(v0 + *(int *)(sub_1000FD384() + 40));
  swift_bridgeObjectRetain(v1);
  sub_1000DF7F4();
  sub_100015540();
}

uint64_t sub_1000F44F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _WORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  Swift::String v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  sub_10002626C();
  v2 = v0;
  v4 = v3;
  v40 = v5;
  v7 = v6;
  v9 = v8;
  v27 = v8 >> 8;
  v28 = v8 >> 16;
  v35 = HIWORD(v8);
  v37 = HIBYTE(v8);
  v36 = v6 >> 8;
  v33 = v8 >> 40;
  v34 = v6 >> 16;
  v31 = HIDWORD(v8);
  v32 = v6 >> 24;
  v29 = v8 >> 24;
  v30 = HIDWORD(v6);
  v10 = v6 >> 40;
  v11 = HIWORD(v6);
  v12 = HIBYTE(v6);
  v13 = type metadata accessor for UUID(0);
  v38 = *(_QWORD *)(v13 - 8);
  v39 = v13;
  __chkstk_darwin(v13);
  sub_100026500();
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_WORD *)(v2 + 168) = 256;
  *(_OWORD *)(v2 + 186) = 0u;
  *(_OWORD *)(v2 + 202) = 0u;
  *(_OWORD *)(v2 + 218) = 0u;
  *(_WORD *)(v2 + 282) = 256;
  *(_OWORD *)(v2 + 170) = 0u;
  *(_OWORD *)(v2 + 234) = 0u;
  *(_OWORD *)(v2 + 266) = 0u;
  v14 = (_WORD *)(v2 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_remoteData);
  *(_OWORD *)(v2 + 250) = 0u;
  sub_100170198(v14);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_generation) = 0;
  v15 = (_QWORD *)(v2 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_label);
  *v15 = 0;
  v15[1] = 0xE000000000000000;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_state) = xmmword_10021DD40;
  swift_weakInit(v2 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_syncController, 0);
  v16 = type metadata accessor for Completions();
  swift_retain(v4);
  *(_QWORD *)(v2 + 16) = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for UInt64, v16, &protocol witness table for UInt64);
  *(_QWORD *)(v2 + 24) = v4;
  *(_QWORD *)(v2 + 32) = 0;
  *(_BYTE *)(v2 + 40) = v9;
  *(_BYTE *)(v2 + 41) = v27;
  *(_BYTE *)(v2 + 42) = v28;
  *(_BYTE *)(v2 + 43) = v29;
  *(_BYTE *)(v2 + 44) = v31;
  *(_BYTE *)(v2 + 45) = v33;
  *(_BYTE *)(v2 + 46) = v35;
  *(_BYTE *)(v2 + 47) = v37;
  *(_BYTE *)(v2 + 48) = v7;
  *(_BYTE *)(v2 + 49) = v36;
  *(_BYTE *)(v2 + 50) = v34;
  *(_BYTE *)(v2 + 51) = v32;
  *(_BYTE *)(v2 + 52) = v30;
  *(_BYTE *)(v2 + 53) = v10;
  *(_BYTE *)(v2 + 54) = v11;
  *(_BYTE *)(v2 + 55) = v12;
  v17 = UUID.init(uuid:)(v9, v27, v28, v29, v31, v33);
  v18 = UUID.uuidString.getter(v17);
  v20 = v19;
  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v1, v39);
  v21 = sub_1000599D0(8, v18, v20);
  static String._fromSubstring(_:)(v21);
  sub_10000E420();
  v22._countAndFlagsBits = sub_1000FD3C8();
  String.append(_:)(v22);
  sub_10000E50C();
  v23 = v15[1];
  *v15 = 542327881;
  v15[1] = 0xE400000000000000;
  swift_bridgeObjectRelease(v23);
  v24 = v2 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_logger;
  v25 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v24, v40, v25);
  swift_weakAssign(v2 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_syncController, v4);
  swift_release();
  return v2;
}

uint64_t sub_1000F47E8(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  Swift::String v5;
  void *object;
  Swift::String v7;
  _QWORD v8[6];

  if (a1 >> 62)
  {
    if (a1 >> 62 == 1)
    {
      return 0x657669746361;
    }
    else if (a1 ^ 0x8000000000000000 | a2)
    {
      return 0x6E6564646968;
    }
    else
    {
      return 0x6C616974696E69;
    }
  }
  else
  {
    v8[4] = v2;
    v8[5] = v3;
    strcpy((char *)v8, "initialSync(");
    BYTE5(v8[1]) = 0;
    HIWORD(v8[1]) = -5120;
    v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v5._object;
    String.append(_:)(v5);
    swift_bridgeObjectRelease(object);
    v7._countAndFlagsBits = 41;
    v7._object = (void *)0xE100000000000000;
    String.append(_:)(v7);
    return v8[0];
  }
}

uint64_t sub_1000F48CC()
{
  uint64_t v0;

  return sub_1000F47E8(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
}

void sub_1000F48D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = type metadata accessor for SyncCoordinator.Event(0);
  __chkstk_darwin(v6);
  v9 = (uint64_t *)((char *)&v10 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (*(_QWORD *)(a3 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_generation) == a2)
  {
    if (a1)
    {
      *v9 = a1;
      swift_storeEnumTagMultiPayload(v9, v7, 0);
      swift_errorRetain(a1);
    }
    else
    {
      swift_storeEnumTagMultiPayload(v9, v7, 4);
    }
    sub_1000F4994(v9);
    sub_1000255F0((uint64_t)v9, type metadata accessor for SyncCoordinator.Event);
  }
}

#error "1000F4A10: call analysis failed (funcsize=48)"

void sub_1000F4A64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  int EnumCaseMultiPayload;
  uint64_t v18;

  v2 = v1;
  v4 = sub_1000055B0(&qword_1002B1420);
  __chkstk_darwin(v4);
  v6 = (unint64_t *)((char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for SyncMessage(0);
  v8 = __chkstk_darwin(v7);
  __chkstk_darwin(v8);
  v10 = *(_QWORD *)(v2 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_state);
  v9 = *(_QWORD *)(v2 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_state + 8);
  v11 = (uint64_t)v6 + *(int *)(v4 + 48);
  *v6 = v10;
  v6[1] = v9;
  sub_1000FB33C(a1, v11, type metadata accessor for SyncCoordinator.Event);
  if (v10 >> 62)
  {
    if (v10 >> 62 == 1)
    {
      v12 = type metadata accessor for SyncCoordinator.Event(0);
      v13 = (char *)&loc_1000F4B90 + 4 * word_100225928[swift_getEnumCaseMultiPayload(v11, v12)];
      __asm { BR              X10 }
    }
    v16 = type metadata accessor for SyncCoordinator.Event(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v11, v16);
    if (!(v10 ^ 0x8000000000000000 | v9))
      __asm { BR              X10 }
    __asm { BR              X10 }
  }
  v14 = type metadata accessor for SyncCoordinator.Event(0);
  v15 = (char *)&loc_1000F4BE4 + 4 * word_100225934[swift_getEnumCaseMultiPayload(v11, v14)];
  __asm { BR              X10 }
}

void sub_1000F4DB8()
{
  _QWORD *v0;

  swift_errorRelease(*v0);
  JUMPOUT(0x1000F5378);
}

unint64_t sub_1000F4DC0()
{
  uint64_t *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v0;
  swift_retain();
  sub_1000F566C(v3, 0, 0, 1, v2);
  swift_release();
  return sub_1000F903C(v1);
}

void sub_1000F4E68()
{
  uint64_t v0;

  swift_retain();
  sub_1000F5D8C(v0);
  JUMPOUT(0x1000F5114);
}

#error "1000F4F10: call analysis failed (funcsize=192)"

void sub_1000F5090()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  sub_1000055B0(&qword_1002B1428);
  sub_1000FA720(v0, v2);
  swift_retain();
  sub_1000F5DF0();
  swift_release();
  sub_1000F903C(v1);
  JUMPOUT(0x1000F50F0);
}

void sub_1000F5124()
{
  uint64_t v0;
  uint64_t v1;

  sub_1000055B0(&qword_1002B1428);
  sub_1000FA720(v0, v1);
  sub_1000F53D4();
  sub_1000F5DF0();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  JUMPOUT(0x1000F5190);
}

void sub_1000F51C0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = sub_1000F53D4();
  sub_1000F566C(v2, 0, 0, 1, v1);
  JUMPOUT(0x1000F51E4);
}

void sub_1000F51F4()
{
  id v0;

  sub_1000136A0();
  v0 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(-71146, 0xD000000000000023, 0x8000000100257920, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Ensemble_executables/EnsembleAgent/SyncCoordinator.swift", 94, 2, 168);
  Completion.callAsFunction(_:)((uint64_t)v0);
  swift_release();

}

unint64_t sub_1000F525C()
{
  return sub_1000F5530();
}

uint64_t sub_1000F539C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_label);
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_label + 8));
  return v1;
}

uint64_t sub_1000F53D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v19[24];

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v19[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  result = swift_weakLoadStrong(v0 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_syncController);
  if (result)
  {
    v7 = result + OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView;
    swift_beginAccess(result + OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView, v19, 0, 0);
    v8 = v7 + *(int *)(type metadata accessor for SyncView(0) + 20);
    v9 = type metadata accessor for SyncViewLocalData(0);
    swift_retain(*(_QWORD *)(v8 + *(int *)(v9 + 28)));
    v10 = swift_release();
    v11 = dispatch thunk of UniversalControlDevice.id.getter(v10);
    v13 = v12;
    swift_release();
    v14 = *(_QWORD *)(v1 + 40);
    v15 = *(_QWORD *)(v1 + 48);
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_logger, v2);
    v16 = type metadata accessor for SyncContext(0);
    v17 = swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
    swift_retain(v1);
    return sub_1000FAF40(v11, v13, v14, v15, (uint64_t)v5, v1, v17);
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_1000F5530()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v1 = v0;
  v2 = (void *)(v0 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_logger);
  v3 = sub_1000404AC(v1);
  Logger.logObject.getter(v3);
  v4 = sub_10002D844();
  if (sub_1000403A4(v4))
  {
    v5 = sub_10000797C(12);
    v6 = sub_10000797C(32);
    v14 = v6;
    sub_1000FD3A4(4.8751e-34);
    v7 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_label);
    swift_bridgeObjectRetain();
    v13 = sub_1000E4C84(v7, v8, &v14);
    sub_1000FD2F4((uint64_t)&v13, (uint64_t)&v14);
    sub_10000F650(v1);
    sub_100075850();
    sub_1000FD27C((void *)&_mh_execute_header, v9, v10, "%{public}s: Activate");
    sub_1000B9B00((uint64_t)&type metadata for Any);
    sub_100007958(v6);
    sub_100007958(v5);
  }
  else
  {
    sub_10000F650(v1);
  }

  v11 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_state);
  *(_OWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_state) = xmmword_10021DD40;
  return sub_1000F903C(v11);
}

void sub_1000F566C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;

  v10 = *(_QWORD *)(v5 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_generation) + 1;
  do
  {
    v11 = v10;
    v10 = 1;
  }
  while (!v11);
  v12 = a4 & 1;
  *(_QWORD *)(v5 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_generation) = v11;
  v13 = (uint64_t *)(v5 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_state);
  v14 = *(_QWORD *)(v5 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_state);
  *v13 = a1 | 0x4000000000000000;
  v13[1] = 0;
  sub_1000F903C(v14);
  swift_retain();
  sub_1000F8C3C(v15, a2, a3, v12, a5);
}

uint64_t sub_1000F56FC(uint64_t a1, char a2)
{
  Swift::String v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  Swift::String v13;
  uint64_t v15;

  v15 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(15, 2);
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  String.append(_:)(v4);
  v5 = a1 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_label;
  v6 = *(_QWORD *)(a1 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_label);
  v7 = *(void **)(v5 + 8);
  swift_bridgeObjectRetain(v7);
  v8._countAndFlagsBits = v6;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(v7);
  v9._countAndFlagsBits = 0x616974696E49203ALL;
  v9._object = (void *)0xEF20636E7953206CLL;
  String.append(_:)(v9);
  if ((a2 & 1) != 0)
    v10 = 0x64656C65636E6143;
  else
    v10 = 0x64656C696146;
  if ((a2 & 1) != 0)
    v11 = 0xE800000000000000;
  else
    v11 = 0xE600000000000000;
  v12 = v11;
  String.append(_:)(*(Swift::String *)&v10);
  swift_bridgeObjectRelease(v11);
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  String.append(_:)(v13);
  return v15;
}

uint64_t sub_1000F57FC(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD v36[3];
  _BYTE v37[8];
  uint64_t v38;
  uint64_t v39;

  v3 = v2;
  v6 = *(_QWORD *)(v2 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_generation) + 1;
  do
  {
    v7 = v6;
    v6 = 1;
  }
  while (!v7);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_generation) = v7;
  type metadata accessor for P2PPeerCoordinator();
  if ((sub_10011197C((uint64_t)a2) & 1) == 0)
  {
    v17 = swift_retain_n(v2, 2);
    v18 = Logger.logObject.getter(v17);
    v20 = static os_log_type_t.default.getter(v18, v19);
    if (os_log_type_enabled(v18, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      v22 = swift_slowAlloc(32, -1);
      v39 = v22;
      *(_DWORD *)v21 = 136446210;
      v24 = *(_QWORD *)(v3 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_label);
      v23 = *(_QWORD *)(v3 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_label + 8);
      swift_bridgeObjectRetain(v23);
      v38 = sub_100006FCC(v24, v23, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v21 + 4);
      swift_release_n(v3, 2);
      swift_bridgeObjectRelease(v23);
      _os_log_impl((void *)&_mh_execute_header, v18, v20, "%{public}s: Hidden", v21, 0xCu);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);
    }
    else
    {
      swift_release_n(v3, 2);
    }

    v33 = *(_QWORD *)(v3 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_state);
    *(_OWORD *)(v3 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_state) = xmmword_100225900;
    goto LABEL_14;
  }
  v8 = (unint64_t *)(v2 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_state);
  if (!(*(_QWORD *)(v2 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_state) >> 62))
  {
    swift_getErrorValue(a2, v37, v36);
    if ((sub_100086BB4(4294960573, v36[1], v36[2]) & 1) != 0)
    {
      v9 = swift_retain_n(v2, 2);
      v10 = Logger.logObject.getter(v9);
      v12 = static os_log_type_t.default.getter(v10, v11);
      if (os_log_type_enabled(v10, v12))
      {
        v13 = (uint8_t *)swift_slowAlloc(12, -1);
        v14 = swift_slowAlloc(32, -1);
        v39 = v14;
        *(_DWORD *)v13 = 136446210;
        v15 = *(_QWORD *)(v3 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_label);
        v16 = *(_QWORD *)(v3 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_label + 8);
        swift_bridgeObjectRetain(v16);
        v38 = sub_100006FCC(v15, v16, &v39);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v13 + 4);
        swift_release_n(v3, 2);
        swift_bridgeObjectRelease(v16);
        _os_log_impl((void *)&_mh_execute_header, v10, v12, "%{public}s: Initial Sync Canceled", v13, 0xCu);
        swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v14, -1, -1);
        swift_slowDealloc(v13, -1, -1);
      }
      else
      {
        swift_release_n(v3, 2);
      }

      v33 = *v8;
      *(_OWORD *)v8 = xmmword_10021DD40;
LABEL_14:
      sub_1000F903C(v33);
      goto LABEL_17;
    }
  }
  v25 = swift_retain_n(v2, 2);
  v26 = Logger.logObject.getter(v25);
  v28 = static os_log_type_t.default.getter(v26, v27);
  if (os_log_type_enabled(v26, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc(12, -1);
    v30 = swift_slowAlloc(32, -1);
    v39 = v30;
    *(_DWORD *)v29 = 136446210;
    v31 = *(_QWORD *)(v3 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_label);
    v32 = *(_QWORD *)(v3 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_label + 8);
    swift_bridgeObjectRetain(v32);
    v38 = sub_100006FCC(v31, v32, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v29 + 4);
    swift_release_n(v3, 2);
    swift_bridgeObjectRelease(v32);
    _os_log_impl((void *)&_mh_execute_header, v26, v28, "%{public}s: Reset", v29, 0xCu);
    swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v29, -1, -1);
  }
  else
  {
    swift_release_n(v3, 2);
  }

  v34 = *v8;
  *v8 = a1 | 0x4000000000000000;
  v8[1] = 0;
  sub_1000F903C(v34);
  swift_retain(a1);
LABEL_17:
  sub_1001072AC(a2);
  return sub_1000F79DC((uint64_t)a2);
}

void sub_1000F5CF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;

  v7 = *(_QWORD *)(v3 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_generation) + 1;
  do
  {
    v8 = v7;
    v7 = 1;
  }
  while (!v8);
  *(_QWORD *)(v3 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_generation) = v8;
  v9 = (uint64_t *)(v3 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_state);
  v10 = *(_QWORD *)(v3 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_state);
  *v9 = a1;
  v9[1] = a2;
  swift_retain(a1);
  sub_1000F903C(v10);
  if (__OFSUB__(6, a2))
    __break(1u);
  else
    sub_1000F8C3C(a1, 6 - a2, 6, 0, a3);
}

uint64_t sub_1000F5D8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_generation) + 1;
  do
  {
    v4 = v3;
    v3 = 1;
  }
  while (!v4);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_generation) = v4;
  v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_state);
  v6 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_state);
  *v5 = a1 | 0x4000000000000000;
  v5[1] = 0;
  sub_1000F903C(v6);
  swift_retain();
  return sub_1000F79DC(0);
}

void sub_1000F5DF0()
{
  _QWORD *v0;
  os_log_type_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(_QWORD);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  os_log_type_t v34;
  _BOOL4 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  NSObject *v50;
  unint64_t *v51;
  unint64_t v52;
  NSObject *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  int *v71;
  _BYTE *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  NSObject *v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  NSObject *p_cache;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  os_log_type_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  id v118;
  uint64_t v119;
  int v120;
  int v121;
  int v122;
  int v123;
  id v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;
  os_log_type_t v128;
  _BOOL4 v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  os_log_type_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  objc_class *v146;
  uint64_t v147;
  os_log_type_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  __int128 v157;
  uint64_t v158;
  os_log_type_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  os_log_type_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  NSObject *v180;
  uint64_t v181;
  uint64_t v182;
  __int128 v183;
  uint64_t v184;
  os_log_type_t v185;
  uint64_t v186;
  uint64_t v187;
  NSObject *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  __int128 v200;
  uint64_t v201;
  os_log_type_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  NSObject *v215;
  uint64_t v216;
  int v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  unint64_t v223;
  NSObject *v224;
  uint64_t v225;
  uint64_t v226;
  void *v227;
  uint64_t v228;
  __int128 v229;
  uint64_t v230;
  os_log_type_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  void (*v241)(uint64_t);
  uint64_t v242;
  uint64_t v243;
  void *v244;
  NSObject *v245;
  uint64_t v246;
  os_log_type_t v247;
  int v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  unint64_t v258;
  __n128 v259;
  void (*v260)(uint64_t, void *);
  uint64_t v261;
  NSObject *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  NSObject *v271;
  char *v272;
  uint64_t v273;
  char *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t *v278;
  uint64_t v279;
  _QWORD *v280;
  _QWORD *v281;
  _BYTE *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  __int128 v289;
  uint64_t v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  uint64_t v294;
  __int128 v295;
  uint64_t v296;
  uint64_t v297;
  _BYTE *v298;
  NSObject *v299;
  uint64_t v300;
  NSObject *v301;
  _QWORD *v302;
  _QWORD *v303;
  int *v304;
  uint64_t v305;
  _BYTE *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  _BYTE v311[16];
  NSObject *v312;
  _BYTE v313[16];
  uint64_t v314;
  _BYTE v315[16];
  uint64_t v316[3];
  uint64_t v317;
  uint64_t v318;
  NSObject *v319;
  unsigned __int8 v320;
  unsigned __int8 v321;
  unsigned __int8 v322;
  unsigned __int8 v323;
  unsigned __int8 v324;
  unsigned __int8 v325;
  unsigned __int8 v326;
  unsigned __int8 v327;
  __int128 v328;
  __int128 v329;
  uint64_t v330;
  __int128 v331;
  uint64_t v332;
  __int128 v333;
  uint64_t v334;
  unsigned __int8 v335;
  uint64_t v336[16];

  sub_10002626C();
  v2 = v0;
  v283 = v3;
  v275 = v4;
  v301 = v5;
  v7 = v6;
  sub_1000055B0((uint64_t *)&unk_1002B3350);
  sub_10000E490();
  __chkstk_darwin(v8);
  sub_10000E5DC();
  v300 = v9;
  v281 = (_QWORD *)type metadata accessor for UniversalControlDisplayLayout(0);
  v273 = *(v281 - 1);
  __chkstk_darwin(v281);
  v11 = (char *)&v268 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v268 - v13;
  sub_1000055B0(&qword_1002B33B0);
  sub_10000E490();
  __chkstk_darwin(v15);
  sub_10000E5DC();
  v296 = v16;
  v297 = type metadata accessor for UniversalControlConfiguration(0);
  v277 = *(_QWORD *)(v297 - 8);
  __chkstk_darwin(v297);
  sub_10000E5DC();
  v276 = v17;
  v298 = (_BYTE *)sub_1000055B0((uint64_t *)&unk_1002B1E00);
  sub_10000E490();
  __chkstk_darwin(v18);
  sub_10000E5DC();
  v294 = v19;
  *(_QWORD *)&v295 = sub_1000055B0((uint64_t *)&unk_1002B1DF0);
  sub_10000E490();
  __chkstk_darwin(v20);
  sub_10000E5DC();
  *(_QWORD *)&v293 = v21;
  v304 = (int *)sub_1000FD384();
  sub_10000E490();
  __chkstk_darwin(v22);
  sub_10000E5DC();
  v306 = (_BYTE *)v23;
  type metadata accessor for SyncMessage(0);
  sub_10000E490();
  __chkstk_darwin(v24);
  v26 = (char *)&v268 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v28 = (uint64_t)v0 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_logger;
  v299 = v7;
  sub_1000FB33C((uint64_t)v7, (uint64_t)&v268 - v29, v30);
  v31 = sub_1000404AC((uint64_t)v2);
  v305 = v28;
  v32 = Logger.logObject.getter(v31);
  v34 = sub_1000C27A0(v32, v33);
  v35 = sub_1000C2698(v34);
  v302 = v2;
  v274 = v14;
  v272 = v11;
  if (v35)
  {
    v36 = sub_10000797C(22);
    v37 = sub_10000797C(64);
    v336[0] = v37;
    *(_DWORD *)v36 = 136446466;
    v38 = *(_QWORD *)((char *)v302 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_label);
    v39 = *(_QWORD *)((char *)v302 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_label + 8);
    swift_bridgeObjectRetain();
    v318 = sub_100006FCC(v38, v39, v336);
    sub_10004327C((uint64_t)&v318, (uint64_t)&v319, v40, v36 + 12);
    sub_10000F650((uint64_t)v302);
    swift_bridgeObjectRelease();
    *(_WORD *)(v36 + 12) = 2082;
    sub_10017847C();
    v318 = sub_100006FCC(v41, v42, v336);
    sub_1000FD3E0((uint64_t)&v318, (uint64_t)&v319, v43, v36 + 22);
    v44 = sub_10000E420();
    sub_1000FD41C(v44, type metadata accessor for SyncMessage);
    sub_100026A60((void *)&_mh_execute_header, v7, v1, "%{public}s: Receive Message: %{public}s", (uint8_t *)v36);
    sub_100026A58(v37, v45, (uint64_t)&type metadata for Any + 8);
    v2 = v302;
    sub_100007958(v37);
    sub_100007958(v36);

  }
  else
  {
    sub_10000F650((uint64_t)v2);

    sub_1000FD41C(v46, type metadata accessor for SyncMessage);
  }
  v303 = (_QWORD *)((char *)v2 + 258);
  v47 = *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_generation);
  do
  {
    v48 = __CFADD__(v47, 1);
    v49 = v47 + 1;
    v47 = 0;
  }
  while (v48);
  *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_generation) = v49;
  v50 = v301;
  v51 = (_QWORD *)((char *)v2 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_state);
  v52 = *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_state);
  *v51 = (unint64_t)v301 | 0x4000000000000000;
  v51[1] = 0;
  sub_1000F903C(v52);
  sub_10002679C();
  v53 = v299;
  v54 = sub_100170228();
  sub_1000F42D8((unint64_t)v50[3].isa, (uint64_t)v50[4].isa, v54);
  v56 = v55;
  sub_10000E420();
  sub_10000B2F8((uint64_t)(v2 + 2), (uint64_t)&v317, 1);
  v2[4] = v56;
  sub_1000FB33C((uint64_t)v53, (uint64_t)v26, type metadata accessor for SyncMessage);
  swift_bridgeObjectRelease();
  v301 = *((_QWORD *)v26 + 6);
  v57 = (int *)sub_1000055B0(&qword_1002B1430);
  v58 = (uint64_t)&v26[v57[16]];
  *(_QWORD *)&v292 = *(_QWORD *)&v26[v57[20] + 40];
  v59 = &v26[v57[24]];
  v60 = *((_QWORD *)v59 + 5);
  v61 = *((_QWORD *)v59 + 6);
  v62 = &v26[v57[28]];
  v291 = *(_OWORD *)(v62 + 40);
  v290 = *((_QWORD *)v62 + 7);
  v63 = (uint64_t)&v26[v57[32]];
  v64 = &v26[v57[36]];
  v65 = v64[33];
  v66 = v64[34];
  v67 = v293;
  sub_1000FB57C(v58, v293, (uint64_t *)&unk_1002B1DF0);
  v68 = v294;
  sub_1000FB57C(v63, v294, (uint64_t *)&unk_1002B1E00);
  if (v66)
    v69 = 0;
  else
    v69 = v65 & 1;
  v70 = v68 + *((int *)v298 + 14);
  v71 = v304;
  v72 = v306;
  v298 = &v306[v304[5]];
  sub_1000FB57C(v70, (uint64_t)v298, &qword_1002B1438);
  v73 = v67 + *(int *)(v295 + 56);
  v282 = &v72[v71[8]];
  sub_1000FB57C(v73, (uint64_t)v282, (uint64_t *)&unk_1002B3380);
  *v72 = v69;
  v72[1] = v66;
  v74 = &v72[v71[6]];
  *v74 = v60;
  v74[1] = v61;
  v280 = v74;
  v284 = v71[7];
  *(_QWORD *)&v72[v284] = v301;
  v75 = (uint64_t *)&v72[v71[9]];
  *(_OWORD *)v75 = v291;
  v278 = v75;
  v75[2] = v290;
  v279 = v71[10];
  *(_QWORD *)&v72[v279] = v292;
  sub_1001702F4();
  v76 = v318;
  v301 = v319;
  v294 = v320;
  *(_QWORD *)&v291 = v321;
  v290 = v322;
  v288 = v323;
  v77 = v324;
  v78 = v325;
  v79 = v326;
  v289 = v328;
  v295 = v329;
  v92 = v330;
  v292 = v333;
  v293 = v331;
  v286 = v334;
  v287 = v332;
  HIDWORD(v285) = v335;
  v80 = v327;
  sub_1001704C8();
  sub_1000FB57C((uint64_t)v336, (uint64_t)(v2 + 7), &qword_1002B1EF0);
  *(_QWORD *)((char *)v2 + 170) = v76;
  v81 = (char *)v2 + 170;
  v83 = *(_QWORD *)((char *)v2 + 186);
  v82 = *((_QWORD *)v81 + 3);
  v84 = v294 | ((_QWORD)v291 << 8) | (v290 << 16) | (v288 << 24) | (v77 << 32) | (v78 << 40);
  v294 = *((_QWORD *)v81 + 4);
  v269 = *((_QWORD *)v81 + 5);
  v85 = v84 | (v79 << 48) | (v80 << 56);
  v86 = *((_QWORD *)v81 + 6);
  v87 = *((_QWORD *)v81 + 8);
  v288 = *((_QWORD *)v81 + 7);
  *((_QWORD *)v81 + 1) = v301;
  *((_QWORD *)v81 + 2) = v85;
  *((_QWORD *)v81 + 3) = v289;
  v88 = *((_QWORD *)v81 + 9);
  v290 = *((_QWORD *)v81 + 10);
  *(_QWORD *)&v291 = v86;
  *((_QWORD *)v81 + 4) = *((_QWORD *)&v289 + 1);
  *((_QWORD *)v81 + 7) = v92;
  v89 = v303;
  v90 = v303[1];
  *(_QWORD *)&v289 = *v303;
  *((_QWORD *)&v289 + 1) = v90;
  *((_QWORD *)v81 + 10) = v287;
  v91 = v89[2];
  v89[2] = v286;
  v286 = v81[112];
  v287 = v91;
  v81[112] = BYTE4(v285);
  LODWORD(v92) = *((unsigned __int8 *)v89 + 25);
  *(_OWORD *)(v81 + 40) = v295;
  v301 = v81;
  *((_OWORD *)v81 + 4) = v293;
  *(_OWORD *)v89 = v292;
  *((_BYTE *)v89 + 25) = 0;
  v93 = v296;
  sub_1000F4360(&qword_1002B1438, (uint64_t (*)(_QWORD))&type metadata accessor for UniversalControlConfiguration, v296);
  v94 = v297;
  v95 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v93, 1, v297);
  p_cache = _TtC13EnsembleAgent18PasteboardContents.cache;
  LODWORD(v298) = v92;
  v270 = v88;
  if (v95 == 1)
  {
    v97 = (uint64_t)v302;
    sub_100025A28(v93, &qword_1002B33B0);
    v98 = &unk_10021B000;
    if ((v92 & 1) == 0)
    {
      *((_QWORD *)&v100 + 1) = v82;
      *(_QWORD *)&v100 = v83;
      v99 = v100 >> 8;
      *((_QWORD *)&v100 + 1) = v294;
      *(_QWORD *)&v100 = v82;
      if (!static UniversalControlUUID.compare(lhs:rhs:)(v99, v100 >> 8))
      {
        v114 = *(_QWORD *)&v306[v284];
        if (v114)
          goto LABEL_19;
        goto LABEL_22;
      }
    }
    v101 = sub_1000FD2A0();
    sub_1000FD30C(v101);
    v102 = sub_10002D844();
    if (sub_1000403A4(v102))
    {
      v103 = sub_10000797C(12);
      v104 = sub_10000797C(32);
      v271 = v87;
      v105 = v104;
      sub_1000FD3F4(v104, 4.8751e-34);
      sub_1000FD290(OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_label);
      v98 = (_QWORD *)&unk_10021B000;
      v314 = sub_1000E4C84((uint64_t)&unk_10021B000, v106, v316);
      sub_1000FD2F4((uint64_t)&v314, (uint64_t)v315);
      sub_1000FD270();
      sub_1000FD300();
      sub_1000FD27C((void *)&_mh_execute_header, v107, v108, "%{public}s: Reset Remote (no configuration data, mismatched signature)");
      sub_1000B9B00((uint64_t)&type metadata for Any);
      v109 = v105;
      v87 = v271;
      sub_100007958(v109);
      sub_100007958(v103);
    }
    else
    {
      sub_1000FD270();
    }

    sub_1000FD244();
  }
  else
  {
    v110 = v92;
    v92 = v276;
    v111 = v277;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v277 + 32))(v276, v93, v94);
    v97 = (uint64_t)v302;
    v112 = sub_1000FD414(OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_syncController);
    v98 = (_QWORD *)&unk_10021B000;
    if (!v112)
    {
      __break(1u);
      goto LABEL_89;
    }
    p_cache = v112;
    __chkstk_darwin(v112);
    *(&v268 - 4) = v97;
    *(&v268 - 3) = v92;
    v113 = v275;
    *(&v268 - 2) = (uint64_t)v299;
    *(&v268 - 1) = v113;
    sub_10014C7D8();
    sub_10000B348();
    (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v92, v94);
    LOBYTE(v92) = v110;
  }
  v114 = *(_QWORD *)&v306[v284];
  if (!v114)
  {
    if ((v92 & 1) != 0)
    {
LABEL_23:
      v127 = sub_1000FD2A0();
      sub_1000FD30C(v127);
      v128 = sub_10002D844();
      v129 = sub_1000403A4(v128);
      v271 = v87;
      if (v129)
      {
        v130 = sub_10000797C(12);
        v131 = sub_10000797C(32);
        sub_1000FD3F4(v131, 4.8751e-34);
        sub_1000FD290(OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_label);
        v132 = (uint64_t)v98;
        v98 = (_QWORD *)&unk_10021B000;
        v314 = sub_1000E4C84(v132, v133, v316);
        sub_1000FD2F4((uint64_t)&v314, (uint64_t)v315);
        sub_1000FD270();
        sub_1000FD300();
        sub_1000FD27C((void *)&_mh_execute_header, v134, v135, "%{public}s: Reset Remote (no device data, mismatched signature)");
        sub_1000B9B00((uint64_t)&type metadata for Any);
        sub_100007958(v131);
        sub_100007958(v130);
      }
      else
      {
        sub_1000FD270();
      }

      sub_1000FD244();
      goto LABEL_31;
    }
LABEL_22:
    *((_QWORD *)&v126 + 1) = v288;
    *(_QWORD *)&v126 = v291;
    v125 = v126 >> 8;
    *((_QWORD *)&v126 + 1) = v87;
    *(_QWORD *)&v126 = v288;
    if (!static UniversalControlUUID.compare(lhs:rhs:)(v125, v126 >> 8))
    {
      v271 = v87;
      v146 = *(objc_class **)&v306[v279];
      if (v146)
        goto LABEL_32;
LABEL_41:
      *((_QWORD *)&v157 + 1) = v287;
      *(_QWORD *)&v157 = *((_QWORD *)&v289 + 1);
      v156 = v157 >> 8;
      *((_QWORD *)&v157 + 1) = v286;
      *(_QWORD *)&v157 = v287;
      if (!static UniversalControlUUID.compare(lhs:rhs:)(v156, v157 >> 8))
      {
        v168 = v280;
        v169 = *v280;
        v167 = v300;
        if (*v280)
        {
LABEL_47:
          v170 = v168[1];
          sub_1000FD2A0();
          swift_bridgeObjectRetain_n(v169, 2);
          swift_bridgeObjectRetain_n(v170, 2);
          v171 = sub_100060238();
          v173 = sub_1000FB394(v171, v172);
          sub_1000FD30C(v173);
          v174 = sub_10002D844();
          if (sub_1000403A4(v174))
          {
            v175 = sub_10000797C(22);
            v299 = sub_10000797C(64);
            v312 = v299;
            *(_DWORD *)v175 = v98[63];
            LODWORD(v297) = v94;
            v92 = *(_QWORD *)(v97 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_label);
            sub_10002D9F8();
            v310 = sub_10002DA28(v92, v176, (uint64_t *)&v312);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v310, v311, v175 + 4);
            sub_1000FD270();
            sub_10002D89C();
            *(_WORD *)(v175 + 12) = 2082;
            sub_100043360();
            sub_1000432E0();
            sub_100060238();
            sub_10016F6B8();
            v178 = v177;
            sub_10000E50C();
            swift_bridgeObjectRelease();
            v310 = sub_10002DA28(v178, v179, (uint64_t *)&v312);
            LOBYTE(v92) = (_BYTE)v298;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v310, v311, v175 + 14);
            sub_1000FD408();
            sub_1000E49F0();
            v98 = (_QWORD *)&unk_10021B000;
            swift_bridgeObjectRelease();
            sub_100026A60((void *)&_mh_execute_header, p_cache, (os_log_type_t)v297, "%{public}s: Remote Connected Devices: [%{public}s]", (uint8_t *)v175);
            v180 = v299;
            sub_100026A58((uint64_t)v299, v181, (uint64_t)&type metadata for Any + 8);
            sub_100007958((uint64_t)v180);
            sub_100007958(v175);
          }
          else
          {
            sub_1000FD408();
            sub_1000E49F0();
            sub_1000FD270();
          }

          v194 = v97 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_remoteData;
          sub_10000B2F8(v97 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_remoteData, (uint64_t)&v312, 1);
          v195 = (uint64_t *)(v194 + v304[6]);
          v196 = *v195;
          v197 = v195[1];
          *v195 = v169;
          v195[1] = v170;
          sub_100043360();
          sub_1000432E0();
          sub_1000FB3C0(v196, v197);
          v198 = sub_1000FD414(OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_syncController);
          if (v198)
          {
            p_cache = v198;
            sub_100060238();
            sub_10014AFCC();
            sub_10000E50C();
            swift_bridgeObjectRelease();
            sub_10000B348();
            v167 = v300;
            goto LABEL_58;
          }
LABEL_89:
          __break(1u);
          goto LABEL_90;
        }
        goto LABEL_50;
      }
      goto LABEL_42;
    }
    goto LABEL_23;
  }
LABEL_19:
  v115 = sub_10002679C();
  v116 = dispatch thunk of UniversalControlDevice.id.getter(v115);
  if (static UniversalControlUUID.compare(lhs:rhs:)(v116, v117))
  {
    sub_1000136A0();
    v118 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(-6748, 0xD000000000000017, 0x8000000100257950, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Ensemble_executables/EnsembleAgent/SyncCoordinator.swift", 94, 2, 390);
    __chkstk_darwin(v118);
    *(&v268 - 2) = v119;
    sub_10005FF54();
    sub_1000E28FC((int)sub_100026210, (int)(&v268 - 4), v305, v97, v120, v121, v122, v123, v268, v269, v270, v271, (uint64_t)v272, v273, (uint64_t)v274, v275, v276, v277, (uint64_t)v278,
      v279,
      (uint64_t)v280,
      (uint64_t)v281,
      (uint64_t)v282,
      v283,
      v284,
      v285);
    v124 = v118;
    Completion.callAsFunction(_:)((uint64_t)v118);
    swift_release();

LABEL_85:
    sub_1000255F0((uint64_t)v306, type metadata accessor for SyncViewRemoteData);
    sub_10000E4E0();
    return;
  }
  v271 = v87;
  sub_1000FD2A0();
  v136 = sub_1000404AC(v114);
  v137 = sub_1000FD30C(v136);
  v139 = sub_1000C27A0(v137, v138);
  if (os_log_type_enabled(v87, v139))
  {
    v94 = sub_10000797C(22);
    v140 = sub_10000797C(64);
    v316[0] = v140;
    *(_DWORD *)v94 = v98[63];
    sub_1000FD290(OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_label);
    v314 = sub_1000E4C84((uint64_t)v98, v141, v316);
    sub_10004327C((uint64_t)&v314, (uint64_t)v315, v142, v94 + 12);
    sub_1000FD270();
    sub_100075850();
    *(_WORD *)(v94 + 12) = 2082;
    UniversalControlDevice.label.getter();
    v314 = sub_100006FCC(v143, v144, v316);
    v98 = (_QWORD *)&unk_10021B000;
    LOBYTE(v92) = (_BYTE)v298;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v314, v315, v94 + 14);
    sub_10000F650(v114);
    sub_10000E420();
    sub_100026A60((void *)&_mh_execute_header, v87, v139, "%{public}s: Remote Device: [%{public}s]", (uint8_t *)v94);
    sub_100026A58(v140, v145, (uint64_t)&type metadata for Any + 8);
    sub_100007958(v140);
    sub_100007958(v94);
  }
  else
  {
    sub_10000F650(v114);
    sub_1000FD270();
  }

  p_cache = (v97 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_remoteData);
  sub_10000B2F8(v97 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_remoteData, (uint64_t)v316, 1);
  *(Class *)((char *)&p_cache->isa + v304[7]) = (Class)v114;
  swift_release();
LABEL_31:
  v146 = *(objc_class **)&v306[v279];
  if (v146)
  {
LABEL_32:
    swift_bridgeObjectRetain_n(v146, 3);
    v147 = sub_1000FD2A0();
    sub_1000FD30C(v147);
    v148 = sub_10002D844();
    if (os_log_type_enabled(p_cache, v148))
    {
      v94 = sub_10000797C(22);
      v149 = sub_10000797C(64);
      v314 = v149;
      *(_DWORD *)v94 = v98[63];
      sub_1000FD290(OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_label);
      v312 = sub_1000E4C84((uint64_t)v98, v150, &v314);
      sub_1000FD3E0((uint64_t)&v312, (uint64_t)v313, v151, v94 + 12);
      sub_1000FD270();
      sub_100075850();
      *(_WORD *)(v94 + 12) = 2082;
      _sSa13EnsembleAgent16UniversalControl0cD8DeviceIDVRszlE5labelSSvg_0();
      LOBYTE(v92) = v152;
      v312 = sub_100006FCC(v153, v152, &v314);
      v98 = (_QWORD *)&unk_10021B000;
      sub_1000FD3E0((uint64_t)&v312, (uint64_t)v313, v154, v94 + 22);
      sub_1000E49F0();
      sub_1000FD300();
      sub_100026A60((void *)&_mh_execute_header, p_cache, v148, "%{public}s: Remote Synced Devices: [%{public}s]", (uint8_t *)v94);
      sub_100026A58(v149, v155, (uint64_t)&type metadata for Any + 8);
      sub_100007958(v149);
      sub_100007958(v94);
    }
    else
    {
      sub_1000E49F0();
      sub_1000FD270();
    }

    p_cache = (v97 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_remoteData);
    sub_10000B2F8(v97 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_remoteData, (uint64_t)&v314, 1);
    *(Class *)((char *)&p_cache->isa + v304[10]) = v146;
    swift_bridgeObjectRelease();
    goto LABEL_46;
  }
  if ((v92 & 1) == 0)
    goto LABEL_41;
LABEL_42:
  v158 = sub_1000FD2A0();
  sub_1000FD30C(v158);
  v159 = sub_10002D844();
  if (sub_1000403A4(v159))
  {
    v160 = sub_10000797C(12);
    v161 = sub_10000797C(32);
    sub_1000FD3A4(4.8751e-34);
    v314 = v162;
    sub_1000FD290(OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_label);
    v163 = (uint64_t)v98;
    v98 = (_QWORD *)&unk_10021B000;
    v312 = sub_1000E4C84(v163, v164, &v314);
    sub_1000FD2F4((uint64_t)&v312, (uint64_t)v313);
    sub_1000FD270();
    sub_1000FD300();
    sub_1000FD27C((void *)&_mh_execute_header, v165, v166, "%{public}s: Reset Remote (no synced devices, mismatched signature)");
    sub_1000B9B00((uint64_t)&type metadata for Any);
    sub_100007958(v161);
    sub_100007958(v160);
  }
  else
  {
    sub_1000FD270();
  }

  sub_1000FD244();
LABEL_46:
  v167 = v300;
  v168 = v280;
  v169 = *v280;
  if (*v280)
    goto LABEL_47;
  if ((v92 & 1) != 0)
  {
LABEL_51:
    v184 = sub_1000FD2A0();
    sub_1000FD30C(v184);
    v185 = sub_10002D844();
    if (sub_1000403A4(v185))
    {
      v186 = sub_10000797C(12);
      v187 = sub_10000797C(32);
      sub_1000FD3A4(4.8751e-34);
      v312 = v188;
      sub_1000FD290(OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_label);
      v189 = (uint64_t)v98;
      v98 = (_QWORD *)&unk_10021B000;
      v310 = sub_1000E4C84(v189, v190, (uint64_t *)&v312);
      sub_1000FD2F4((uint64_t)&v310, (uint64_t)v311);
      sub_1000FD270();
      sub_1000FD300();
      sub_1000FD27C((void *)&_mh_execute_header, v191, v192, "%{public}s: Reset Remote (no connected devices, mismatched signature)");
      sub_1000B9B00((uint64_t)&type metadata for Any);
      v193 = v187;
      v167 = v300;
      sub_100007958(v193);
      sub_100007958(v186);
    }
    else
    {
      sub_1000FD270();
    }

    sub_1000FD244();
    goto LABEL_58;
  }
LABEL_50:
  *((_QWORD *)&v183 + 1) = v269;
  *(_QWORD *)&v183 = v294;
  v182 = v183 >> 8;
  *((_QWORD *)&v183 + 1) = v291;
  *(_QWORD *)&v183 = v269;
  if (static UniversalControlUUID.compare(lhs:rhs:)(v182, v183 >> 8))
    goto LABEL_51;
LABEL_58:
  v199 = *v278;
  if (*v278 == 1)
  {
    if ((v92 & 1) != 0
      || (*((_QWORD *)&v200 + 1) = v289,
          *(_QWORD *)&v200 = v290,
          static UniversalControlUUID.compare(lhs:rhs:)(v200 >> 8, v289 >> 8)))
    {
      v201 = sub_1000FD2A0();
      sub_1000FD30C(v201);
      v202 = sub_10002D844();
      if (sub_1000403A4(v202))
      {
        v203 = sub_10000797C(12);
        v204 = sub_10000797C(32);
        sub_1000FD3A4(4.8751e-34);
        v310 = v205;
        sub_1000FD290(OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_label);
        v206 = (uint64_t)v98;
        v98 = (_QWORD *)&unk_10021B000;
        v307 = sub_1000E4C84(v206, v207, &v310);
        sub_1000FD2F4((uint64_t)&v307, (uint64_t)&v308);
        sub_1000FD270();
        sub_1000FD300();
        sub_1000FD27C((void *)&_mh_execute_header, v208, v209, "%{public}s: Reset Remote (no source device data, mismatched signature)");
        sub_1000B9B00((uint64_t)&type metadata for Any);
        v210 = v204;
        v167 = v300;
        sub_100007958(v210);
        sub_100007958(v203);
      }
      else
      {
        sub_1000FD270();
      }

      sub_1000FD244();
    }
    goto LABEL_73;
  }
  v211 = v278[1];
  v212 = v278[2];
  v213 = v97 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_remoteData;
  sub_10000B2F8(v97 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_remoteData, (uint64_t)&v310, 1);
  v214 = v213 + v304[9];
  v215 = *(NSObject **)v214;
  *(_QWORD *)v214 = v199;
  *(_QWORD *)(v214 + 8) = v211;
  *(_QWORD *)(v214 + 16) = v212;
  sub_1000FD360();
  sub_100043360();
  sub_1000FB3FC((uint64_t)v215);
  sub_10005FF54();
  sub_1000FD360();
  sub_10005FF54();
  v216 = sub_1000FD360();
  sub_1000FD30C(v216);
  v217 = sub_10002D844();
  v299 = v215;
  if (os_log_type_enabled(v215, (os_log_type_t)v217))
  {
    LODWORD(v297) = v217;
    v218 = sub_10000797C(22);
    v296 = sub_10000797C(64);
    v307 = v296;
    *(_DWORD *)v218 = v98[63];
    v220 = *(_QWORD *)(v97 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_label);
    v219 = *(_QWORD *)(v97 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_label + 8);
    swift_bridgeObjectRetain();
    v309 = sub_100006FCC(v220, v219, &v307);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, &v310, v218 + 4);
    sub_1000FD270();
    sub_10000E420();
    *(_WORD *)(v218 + 12) = 2082;
    if (v199)
    {
      sub_100043360();
      sub_10016FC9C();
      v92 = v221;
      v223 = v222;
      sub_1000FD314();
    }
    else
    {
      v223 = 0xE300000000000000;
      v92 = 7104878;
    }
    v309 = sub_100006FCC(v92, v223, &v307);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, &v310, v218 + 14);
    sub_10000E420();
    sub_1000FB3FC(v199);
    sub_1000FD314();
    v224 = v299;
    sub_100026A60((void *)&_mh_execute_header, v299, (os_log_type_t)v297, "%{public}s: Remote Source Device: %{public}s", (uint8_t *)v218);
    v225 = v296;
    sub_100026A58(v296, v226, (uint64_t)&type metadata for Any + 8);
    sub_100007958(v225);
    sub_100007958(v218);

    v98 = &unk_10021B000;
    LOBYTE(v92) = (_BYTE)v298;
  }
  else
  {
    sub_1000FD270();

    sub_1000FB3FC(v199);
    sub_1000FD314();
  }
  if (sub_1000FD414(OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_syncController))
  {
    sub_10014BE44();
    sub_10000B348();
    sub_1000FD314();
    v167 = v300;
LABEL_73:
    sub_1000F4360((uint64_t *)&unk_1002B3380, (uint64_t (*)(_QWORD))&type metadata accessor for UniversalControlDisplayLayout, v167);
    v227 = v281;
    if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v167, 1, (uint64_t)v281) == 1)
    {
      sub_100025A28(v167, (uint64_t *)&unk_1002B3350);
      if ((v92 & 1) != 0
        || (*((_QWORD *)&v229 + 1) = v270,
            *(_QWORD *)&v229 = v271,
            v228 = v229 >> 8,
            *((_QWORD *)&v229 + 1) = v290,
            *(_QWORD *)&v229 = v270,
            static UniversalControlUUID.compare(lhs:rhs:)(v228, v229 >> 8)))
      {
        v230 = sub_1000FD2A0();
        sub_1000FD30C(v230);
        v231 = sub_10002D844();
        if (sub_1000403A4(v231))
        {
          v232 = sub_10000797C(12);
          v233 = sub_10000797C(32);
          sub_1000FD3A4(4.8751e-34);
          v307 = v234;
          sub_1000FD290(OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_label);
          v309 = sub_1000E4C84((uint64_t)v98, v235, &v307);
          sub_1000FD2F4((uint64_t)&v309, (uint64_t)&v310);
          sub_1000FD270();
          sub_100075850();
          sub_1000FD27C((void *)&_mh_execute_header, v236, v237, "%{public}s: Reset Remote (no display layout, mismatched signature)");
          sub_1000B9B00((uint64_t)&type metadata for Any);
          sub_100007958(v233);
          sub_100007958(v232);
        }
        else
        {
          sub_1000FD270();
        }

        sub_1000FD244();
      }
    }
    else
    {
      v238 = v273;
      v239 = (uint64_t)v274;
      v240 = sub_1000FD3C8();
      v241(v240);
      v242 = (uint64_t)v272;
      (*(void (**)(char *, uint64_t, void *))(v238 + 16))(v272, v239, v227);
      v243 = sub_10005FF54();
      v244 = v227;
      v245 = sub_1000FD30C(v243);
      v247 = static os_log_type_t.default.getter(v245, v246);
      v248 = v247;
      if (os_log_type_enabled(v245, v247))
      {
        v249 = sub_10000797C(22);
        v305 = sub_10000797C(64);
        v307 = v305;
        *(_DWORD *)v249 = v98[63];
        LODWORD(v303) = v248;
        v301 = v245;
        v250 = *(_QWORD *)(v97 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_label);
        sub_10002D9F8();
        v309 = sub_10002DA28(v250, v251, &v307);
        sub_10004327C((uint64_t)&v309, (uint64_t)&v310, v252, v249 + 12);
        swift_release();
        v253 = sub_10002D89C();
        *(_WORD *)(v249 + 12) = 2082;
        UniversalControlDisplayLayout.devices.getter(v253);
        _sSa13EnsembleAgent16UniversalControl0cD8DeviceIDVRszlE5labelSSvg_0();
        v255 = v254;
        v256 = v97;
        v258 = v257;
        sub_10000E420();
        v309 = sub_100006FCC(v255, v258, &v307);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, &v310, v249 + 14);
        v97 = v256;
        v259 = swift_bridgeObjectRelease();
        v260 = *(void (**)(uint64_t, void *))(v238 + 8);
        v261 = (uint64_t)v281;
        ((void (*)(uint64_t, _QWORD *, __n128))v260)(v242, v281, v259);
        v262 = v301;
        sub_100026A60((void *)&_mh_execute_header, v301, (os_log_type_t)v303, "%{public}s: Remote Display Layout: [%{public}s]", (uint8_t *)v249);
        v263 = v305;
        sub_100026A58(v305, v264, (uint64_t)&type metadata for Any + 8);
        sub_100007958(v263);
        sub_100007958(v249);

        v265 = (uint64_t)v274;
        v266 = v261;
      }
      else
      {
        swift_release();
        v260 = *(void (**)(uint64_t, void *))(v238 + 8);
        v260(v242, v244);

        v265 = sub_1000FD3C8();
      }
      v260(v265, (void *)v266);
      v267 = v97 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_remoteData;
      sub_10000B2F8(v97 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_remoteData, (uint64_t)&v307, 33);
      sub_1000FB40C((uint64_t)v282, v267 + v304[8]);
      swift_endAccess(&v307);
    }
    Completion.callAsFunction(_:)(0);
    goto LABEL_85;
  }
LABEL_90:
  __break(1u);
}

uint64_t sub_1000F758C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v23[24];

  v2 = v1;
  v4 = v1[1];
  v5 = v4 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView;
  swift_beginAccess(v4 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView, v23, 0, 0);
  v6 = type metadata accessor for SyncView(0);
  v7 = v5 + *(int *)(v6 + 20);
  v8 = *(_QWORD *)(v7 + *(int *)(type metadata accessor for SyncViewLocalData(0) + 28));
  swift_retain(v4);
  swift_retain(v8);
  v10 = dispatch thunk of UniversalControlDevice.id.getter(v9);
  v12 = v11;
  swift_release();
  v13 = *(_QWORD *)(v5 + *(int *)(v6 + 24));
  swift_bridgeObjectRetain(v13);
  v14 = sub_100041D30(v10, v12, v13);
  LOBYTE(v6) = v15;
  swift_release();
  swift_bridgeObjectRelease(v13);
  if ((v6 & 1) != 0)
    v16 = 0;
  else
    v16 = v14;
  v17 = *v2;
  if (*(_QWORD *)(*v2 + 16) && (v18 = sub_1001AAE3C(v16), (v19 & 1) != 0))
  {
    v20 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v18);
    swift_retain(v20);
  }
  else
  {
    v21 = type metadata accessor for Completions();
    v20 = swift_allocObject(v21, 24, 7);
    *(_QWORD *)(v20 + 16) = _swiftEmptyArrayStorage;
  }
  sub_1000C4E20(a1);
  return sub_1001AA97C(v20, v16);
}

#error "1000F7780: call analysis failed (funcsize=141)"

uint64_t sub_1000F7938(uint64_t a1)
{
  Swift::String v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v9;

  v9 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(12, 1);
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  String.append(_:)(v2);
  v3 = a1 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_label;
  v4 = *(_QWORD *)(a1 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_label);
  v5 = *(void **)(v3 + 8);
  swift_bridgeObjectRetain(v5);
  v6._countAndFlagsBits = v4;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(v5);
  v7._countAndFlagsBits = 0x697463616544203ALL;
  v7._object = (void *)0xEC00000065746176;
  String.append(_:)(v7);
  return v9;
}

uint64_t sub_1000F79DC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v3[24];

  if (result)
  {
    v2 = result;
    swift_beginAccess(v1 + 16, v3, 33, 0);
    swift_errorRetain(v2);
    sub_1000F7A98(v2);
    swift_endAccess(v3);
    return swift_errorRelease(v2);
  }
  else if ((*(_BYTE *)(v1 + 283) & 1) == 0 && (*(_BYTE *)(v1 + 169) & 1) == 0)
  {
    result = static UniversalControlUUID.compare(lhs:rhs:)(*(__int128 *)(v1 + 186) >> 8, *(__int128 *)(v1 + 194) >> 8, *(_QWORD *)(v1 + 73), *(_QWORD *)(v1 + 81));
    if (!result)
    {
      swift_beginAccess(v1 + 16, v3, 33, 0);
      sub_1000F7B98();
      return swift_endAccess(v3);
    }
  }
  return result;
}

void sub_1000F7A98(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  char v10;
  uint64_t v11;

  v3 = *v1;
  swift_bridgeObjectRetain_n(*v1, 2);
  sub_100057F4C();
  v5 = v4;
  swift_bridgeObjectRelease(v3);
  v11 = v5;
  sub_1000FA770(&v11);
  swift_bridgeObjectRelease(v3);
  v6 = v11;
  v7 = *(_QWORD *)(v11 + 16);
  if (v7)
  {
    for (i = 0; i != v7; ++i)
    {
      if (*(_QWORD *)(v3 + 16))
      {
        v9 = sub_1001AAE3C(*(_QWORD *)(v6 + 8 * i + 32));
        if ((v10 & 1) != 0)
        {
          swift_retain(*(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v9));
          sub_1000C4E9C(a1);
          swift_release();
        }
      }
    }
  }
  swift_release();
  sub_1000055B0(&qword_1002B1440);
  Dictionary._Variant.removeAll(keepingCapacity:)(0);
}

uint64_t sub_1000F7B98()
{
  _QWORD *v0;
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  int64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v26;
  Swift::Int v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  _QWORD *v32;
  _QWORD v33[5];

  v1 = v0;
  v2 = v0[2];
  v3 = *v0;
  sub_100043078(v33, v3);
  v4 = v33[0];
  v5 = v33[1];
  v6 = v33[3];
  v7 = v33[4];
  v8 = (unint64_t)(v33[2] + 64) >> 6;
  swift_bridgeObjectRetain(v3);
  v9 = _swiftEmptyArrayStorage;
  while (v7)
  {
    v10 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v11 = v10 | (v6 << 6);
LABEL_22:
    v16 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v11);
    if (v2 >= v16)
    {
      v32 = v9;
      if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
      {
        sub_100058720();
        v9 = v32;
      }
      v17 = v9[2];
      v18 = v17 + 1;
      if (v17 >= v9[3] >> 1)
      {
        sub_100058720();
        v18 = v17 + 1;
        v9 = v32;
      }
      v9[2] = v18;
      v9[v17 + 4] = v16;
    }
  }
  v12 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    result = swift_release();
    __break(1u);
    return result;
  }
  if (v12 >= v8)
    goto LABEL_28;
  v13 = *(_QWORD *)(v5 + 8 * v12);
  v14 = v6 + 1;
  if (v13)
    goto LABEL_21;
  v14 = v6 + 2;
  if (v6 + 2 >= v8)
    goto LABEL_28;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
    goto LABEL_21;
  v14 = v6 + 3;
  if (v6 + 3 >= v8)
    goto LABEL_28;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
    goto LABEL_21;
  v14 = v6 + 4;
  if (v6 + 4 >= v8)
    goto LABEL_28;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
    goto LABEL_21;
  v14 = v6 + 5;
  if (v6 + 5 >= v8)
    goto LABEL_28;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
    goto LABEL_21;
  v14 = v6 + 6;
  if (v6 + 6 >= v8)
    goto LABEL_28;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
LABEL_21:
    v7 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v14 << 6);
    v6 = v14;
    goto LABEL_22;
  }
  v15 = v6 + 7;
  while (v15 < v8)
  {
    v13 = *(_QWORD *)(v5 + 8 * v15++);
    if (v13)
    {
      v14 = v15 - 1;
      goto LABEL_21;
    }
  }
LABEL_28:
  swift_release();
  v32 = v9;
  swift_retain(v9);
  sub_1000FA770(&v32);
  swift_release();
  v19 = v32[2];
  if (v19)
  {
    v20 = v32 + 4;
    do
    {
      v21 = *v20++;
      v22 = sub_1001AAE3C(v21);
      if ((v23 & 1) != 0)
      {
        v24 = v22;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
        v32 = (_QWORD *)*v1;
        v26 = v32;
        *v1 = 0x8000000000000000;
        v27 = v26[3];
        sub_1000055B0(&qword_1002B1220);
        _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v27);
        v28 = v32;
        v29 = type metadata accessor for Completions();
        _NativeDictionary._delete(at:)(v24, v28, &type metadata for UInt64, v29);
        v30 = *v1;
        *v1 = v28;
        swift_bridgeObjectRelease(v30);
        sub_1000C4E9C(0);
        swift_release();
      }
      --v19;
    }
    while (v19);
  }
  return swift_release();
}

void sub_1000F7E7C(uint64_t a1)
{
  sub_1000F8BC4(a1, 1);
}

void sub_1000F7E84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for SyncCoordinator.Event(0);
  sub_10000E490();
  __chkstk_darwin(v7);
  sub_10002641C();
  v10 = v9 - v8;
  v11 = sub_1000055B0(&qword_1002B1428);
  v12 = *(int *)(v11 + 48);
  v13 = *(int *)(v11 + 64);
  sub_1000FB33C(a1, v10, type metadata accessor for SyncMessage);
  *(_QWORD *)(v10 + v12) = a2;
  *(_QWORD *)(v10 + v13) = a3;
  swift_storeEnumTagMultiPayload(v10, v6, 2);
  sub_1000432E0();
  swift_retain();
  sub_1000F4A64(v10);
  sub_1000255F0(v10, type metadata accessor for SyncCoordinator.Event);
}

uint64_t sub_1000F7F60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t, __n128);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  uint64_t v37;
  os_log_type_t v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  __n128 v56;
  uint64_t (*v57)(char *, uint64_t, __n128);
  uint64_t v58;
  char *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  __n128 v69;
  os_log_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(char *, uint64_t);
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _BOOL4 v89;
  char *v90;
  void (*v91)(char *, uint64_t);
  char v92;
  char v93;
  uint64_t result;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  NSObject *v101;
  uint64_t v102;
  os_log_type_t v103;
  uint8_t *v104;
  uint64_t v105;
  void (*v106)(char *, uint64_t, uint64_t, __n128);
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  NSObject *v113;
  uint64_t v114;
  os_log_type_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  __n128 v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void (*v141)(char *, uint64_t);
  os_log_t v142;
  uint64_t v143;
  void (*v144)(char *, uint64_t, uint64_t, __n128);
  uint64_t v145;
  char *v146;
  int v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _BYTE v165[16];
  uint64_t v166[4];

  v154 = a4;
  v155 = a5;
  v151 = a6;
  v9 = sub_1000055B0(&qword_1002B1438);
  __chkstk_darwin(v9);
  v11 = (char *)&v141 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v158 = type metadata accessor for UUID(0);
  v150 = *(_QWORD *)(v158 - 8);
  __chkstk_darwin(v158);
  v149 = (char *)&v141 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UniversalControlConfiguration(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v148 = (char *)&v141 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v157 = (char *)&v141 - v17;
  __chkstk_darwin(v18);
  v156 = (char *)&v141 - v19;
  __chkstk_darwin(v20);
  v22 = (char *)&v141 - v21;
  __chkstk_darwin(v23);
  v25 = (char *)&v141 - v24;
  v27 = __chkstk_darwin(v26);
  v29 = (char *)&v141 - v28;
  v30 = a2 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_logger;
  v31 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v14 + 16);
  v159 = a1;
  v32 = a1;
  v34 = v33;
  v31((char *)&v141 - v28, v32, v33, v27);
  v160 = a3;
  v161 = v25;
  ((void (*)(char *, uint64_t, uint64_t))v31)(v25, a3, v34);
  v162 = a2;
  v35 = swift_retain_n(a2, 2);
  v152 = v30;
  v36 = Logger.logObject.getter(v35);
  v38 = static os_log_type_t.default.getter(v36, v37);
  v147 = v38;
  v39 = os_log_type_enabled(v36, v38);
  v153 = v22;
  v146 = v11;
  v145 = v14;
  if (v39)
  {
    v40 = swift_slowAlloc(32, -1);
    v144 = v31;
    v41 = v40;
    v143 = swift_slowAlloc(96, -1);
    v166[0] = v143;
    *(_DWORD *)v41 = 136446722;
    v42 = v162;
    v43 = *(_QWORD *)(v162 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_label);
    v44 = *(_QWORD *)(v162 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_label + 8);
    swift_bridgeObjectRetain();
    v164 = sub_100006FCC(v43, v44, v166);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v164, v165, v41 + 4);
    swift_release_n(v42, 2);
    swift_bridgeObjectRelease();
    *(_WORD *)(v41 + 12) = 2080;
    v46 = UniversalControlConfiguration.id.getter(v45);
    v142 = v36;
    v47 = v149;
    v48 = UUID.init(uuid:)(v46, v46 >> 8, v46 >> 16, v46 >> 24, HIDWORD(v46), v46 >> 40);
    v49 = UUID.uuidString.getter(v48);
    v51 = v50;
    v141 = *(void (**)(char *, uint64_t))(v150 + 8);
    v141(v47, v158);
    v52 = sub_1000599D0(8, v49, v51);
    v53 = static String._fromSubstring(_:)(v52);
    v55 = v54;
    swift_bridgeObjectRelease();
    v164 = sub_100006FCC(v53, v55, v166);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v164, v165, v41 + 14);
    v56 = swift_bridgeObjectRelease();
    v57 = *(uint64_t (**)(char *, uint64_t, __n128))(v14 + 8);
    v58 = v57(v29, v34, v56);
    *(_WORD *)(v41 + 22) = 2080;
    v59 = v161;
    v60 = UniversalControlConfiguration.id.getter(v58);
    v61 = UUID.init(uuid:)(v60, v60 >> 8, v60 >> 16, v60 >> 24, HIDWORD(v60), v60 >> 40);
    v62 = UUID.uuidString.getter(v61);
    v64 = v63;
    v141(v47, v158);
    v65 = sub_1000599D0(8, v62, v64);
    v66 = static String._fromSubstring(_:)(v65);
    v68 = v67;
    swift_bridgeObjectRelease();
    v164 = sub_100006FCC(v66, v68, v166);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v164, v165, v41 + 24);
    v22 = v153;
    v69 = swift_bridgeObjectRelease();
    v161 = (char *)v57;
    v57(v59, v34, v69);
    v70 = v142;
    _os_log_impl((void *)&_mh_execute_header, v142, (os_log_type_t)v147, "%{public}s: Merge Config: ours=%s, theirs=%s", (uint8_t *)v41, 0x20u);
    v71 = v143;
    swift_arrayDestroy(v143, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v71, -1, -1);
    v72 = v41;
    v31 = v144;
    swift_slowDealloc(v72, -1, -1);

  }
  else
  {
    swift_release_n(v162, 2);

    v73 = *(void (**)(char *, uint64_t))(v14 + 8);
    v73(v29, v34);
    v74 = v161;
    v161 = (char *)v73;
    v73(v74, v34);
  }
  v76 = v159;
  v75 = v160;
  v77 = UniversalControlConfiguration.merging(_:)(v160);
  v78 = UniversalControlConfiguration.id.getter(v77);
  v80 = v79;
  UniversalControlConfiguration.id.getter(v78);
  v81 = static UniversalControlUUID.compare(lhs:rhs:)(v78, v80);
  v82 = v156;
  ((void (*)(char *, uint64_t, uint64_t))v31)(v156, v75, v34);
  v83 = v157;
  v84 = v34;
  v85 = ((uint64_t (*)(char *, char *, uint64_t))v31)(v157, v22, v34);
  if (v81)
  {
    v86 = UniversalControlConfiguration.id.getter(v85);
    v88 = v87;
    UniversalControlConfiguration.id.getter(v86);
    v89 = static UniversalControlUUID.compare(lhs:rhs:)(v86, v88) != 0;
  }
  else
  {
    v89 = 0;
  }
  v90 = v83;
  v91 = (void (*)(char *, uint64_t))v161;
  ((void (*)(char *, uint64_t))v161)(v90, v84);
  v91(v82, v84);
  sub_100170228();
  sub_1000F0790();
  v93 = v92;
  swift_bridgeObjectRelease();
  result = swift_weakLoadStrong(v162 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_syncController);
  if (result)
  {
    swift_beginAccess(result + OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView, v166, 0, 0);
    type metadata accessor for SyncView(0);
    type metadata accessor for SyncViewLocalData(0);
    swift_retain();
    v95 = swift_release();
    v96 = dispatch thunk of UniversalControlDevice.id.getter(v95);
    v98 = v97;
    swift_release();
    v99 = static UniversalControlDeviceID.< infix(_:_:)(*(_QWORD *)(v162 + 40), *(_QWORD *)(v162 + 48), v96, v98);
    if (v89 && v93 == 3 && (v99 & 1) != 0)
    {
      swift_retain();
      v101 = Logger.logObject.getter(v100);
      v103 = static os_log_type_t.default.getter(v101, v102);
      if (os_log_type_enabled(v101, v103))
      {
        v104 = (uint8_t *)swift_slowAlloc(12, -1);
        v105 = swift_slowAlloc(32, -1);
        *(_DWORD *)v104 = 136446210;
        v164 = v105;
        v106 = v31;
        v107 = *(_QWORD *)(v162 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_label);
        v108 = *(_QWORD *)(v162 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_label + 8);
        swift_bridgeObjectRetain();
        v109 = v107;
        v31 = v106;
        v163 = sub_100006FCC(v109, v108, &v164);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v163, &v164, v104 + 4);
        swift_release();
        v76 = v159;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v101, v103, "%{public}s: Received a merge-required config via concurrent message, drop and let the peer handle the merge", v104, 0xCu);
        swift_arrayDestroy(v105, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v105, -1, -1);
        swift_slowDealloc(v104, -1, -1);

        v110 = v153;
      }
      else
      {

        swift_release();
        v110 = v22;
      }
      ((void (*)(char *, uint64_t))v161)(v110, v84);
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v31)(v151, v76, v84);
    }
    else
    {
      v111 = v148;
      ((void (*)(char *, char *, uint64_t))v31)(v148, v22, v84);
      v112 = swift_retain_n(v162, 2);
      v113 = Logger.logObject.getter(v112);
      v115 = static os_log_type_t.default.getter(v113, v114);
      if (os_log_type_enabled(v113, v115))
      {
        v116 = swift_slowAlloc(32, -1);
        v159 = swift_slowAlloc(96, -1);
        v164 = v159;
        *(_DWORD *)v116 = 136446722;
        v117 = v162;
        v144 = v31;
        v118 = *(_QWORD *)(v162 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_label);
        v119 = *(_QWORD *)(v162 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_label + 8);
        swift_bridgeObjectRetain();
        v163 = sub_100006FCC(v118, v119, &v164);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v163, &v164, v116 + 4);
        swift_release_n(v117, 2);
        swift_bridgeObjectRelease();
        *(_WORD *)(v116 + 12) = 2082;
        v157 = (char *)(v116 + 14);
        v121 = UniversalControlConfiguration.id.getter(v120);
        v122 = v84;
        v123 = v149;
        v124 = UUID.init(uuid:)(v121, v121 >> 8, v121 >> 16, v121 >> 24, HIDWORD(v121), v121 >> 40);
        v125 = UUID.uuidString.getter(v124);
        v127 = v126;
        (*(void (**)(char *, uint64_t))(v150 + 8))(v123, v158);
        v128 = sub_1000599D0(8, v125, v127);
        v129 = static String._fromSubstring(_:)(v128);
        v131 = v130;
        swift_bridgeObjectRelease();
        v163 = sub_100006FCC(v129, v131, &v164);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v163, &v164, v157);
        v132 = swift_bridgeObjectRelease();
        ((void (*)(char *, uint64_t, __n128))v161)(v148, v122, v132);
        *(_WORD *)(v116 + 22) = 2082;
        if (v89)
          v133 = 0x64656772654DLL;
        else
          v133 = 0x6772654D20746F4ELL;
        if (v89)
          v134 = 0xE600000000000000;
        else
          v134 = 0xEA00000000006465;
        v163 = sub_100006FCC(v133, v134, &v164);
        v22 = v153;
        v31 = v144;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v163, &v164, v116 + 24);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v113, v115, "%{public}s: New Config: %{public}s (%{public}s)", (uint8_t *)v116, 0x20u);
        v135 = v159;
        swift_arrayDestroy(v159, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v135, -1, -1);
        swift_slowDealloc(v116, -1, -1);

        v136 = v151;
        v137 = (uint64_t)v146;
        v138 = v145;
      }
      else
      {
        swift_release_n(v162, 2);

        ((void (*)(char *, uint64_t))v161)(v111, v84);
        v136 = v151;
        v137 = (uint64_t)v146;
        v138 = v145;
        v122 = v84;
      }
      ((void (*)(uint64_t, uint64_t, uint64_t))v31)(v137, v160, v122);
      _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v137, 0, 1, v122);
      v139 = v162 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_remoteData;
      swift_beginAccess(v162 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_remoteData, &v164, 33, 0);
      v140 = type metadata accessor for SyncViewRemoteData(0);
      sub_1000FB460(v137, v139 + *(int *)(v140 + 20));
      swift_endAccess(&v164);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v138 + 32))(v136, v22, v122);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1000F8BBC(uint64_t a1)
{
  sub_1000F8BC4(a1, 3);
}

void sub_1000F8BC4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;

  type metadata accessor for SyncCoordinator.Event(0);
  sub_10000E490();
  __chkstk_darwin(v5);
  sub_10000E478();
  *v2 = a1;
  swift_storeEnumTagMultiPayload(v2, v6, a2);
  sub_10002679C();
  sub_1000F4994(v2);
  sub_1000255F0((uint64_t)v2, type metadata accessor for SyncCoordinator.Event);
  sub_10002644C();
}

void sub_1000F8C3C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t Strong;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _BYTE v20[30];
  _BYTE v21[114];
  _BYTE v22[128];

  v6 = v5;
  v11 = type metadata accessor for SyncView(0);
  __chkstk_darwin(v11);
  v13 = &v20[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess(v6 + 16, v22, 33, 0);
  sub_1000F758C(a5);
  swift_endAccess(v22);
  Strong = swift_weakLoadStrong(v6 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_syncController);
  if (Strong)
  {
    v15 = Strong + OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView;
    swift_beginAccess(Strong + OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView, v20, 0, 0);
    sub_1000FB33C(v15, (uint64_t)v13, type metadata accessor for SyncView);
    swift_release();
    sub_1000FB57C(v6 + 56, (uint64_t)v21, &qword_1002B1EF0);
    sub_1000FB57C(v6 + 170, (uint64_t)v22, &qword_1002B1EF0);
    v16 = *(_QWORD *)(v6 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_generation);
    v17 = swift_allocObject(&unk_10028BB48, 32, 7);
    *(_QWORD *)(v17 + 16) = v16;
    *(_QWORD *)(v17 + 24) = v6;
    v18 = type metadata accessor for Completion();
    swift_allocObject(v18, 48, 7);
    swift_retain(v6);
    v19 = Completion.init(file:line:body:)(0xD00000000000005ELL, 0x8000000100257870, 485, (uint64_t)sub_1000FB38C, v17);
    sub_1001073A8(a2, a3, a4 & 1, (uint64_t)v13, (uint64_t)v21, (uint64_t)v22, (uint64_t)v19);
    swift_release();
    sub_1000255F0((uint64_t)v13, type metadata accessor for SyncView);
  }
  else
  {
    __break(1u);
  }
}

void sub_1000F8E38()
{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  swift_bridgeObjectRelease();
  sub_1000255F0(v0 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_remoteData, type metadata accessor for SyncViewRemoteData);
  swift_bridgeObjectRelease();
  v1 = type metadata accessor for Logger(0);
  sub_10002666C(v1);
  sub_1000F903C(*(_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_state));
  swift_weakDestroy(v0 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_syncController);
  sub_1000050D4();
}

uint64_t sub_1000F8EC8()
{
  uint64_t v0;

  sub_1000F8E38();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000F8EEC()
{
  return type metadata accessor for SyncCoordinator(0);
}

uint64_t type metadata accessor for SyncCoordinator(uint64_t a1)
{
  return sub_100021590(a1, qword_1002B1328, (uint64_t)&nominal type descriptor for SyncCoordinator);
}

uint64_t sub_1000F8F08(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[10];

  v5[0] = &unk_100225998;
  v5[1] = &unk_1002259B0;
  v5[2] = &unk_1002259C8;
  v5[3] = &unk_1002259C8;
  result = type metadata accessor for SyncViewRemoteData(319);
  if (v3 <= 0x3F)
  {
    v5[4] = *(_QWORD *)(result - 8) + 64;
    v5[5] = (char *)&value witness table for Builtin.Int64 + 64;
    v5[6] = &unk_1002259E0;
    result = type metadata accessor for Logger(319);
    if (v4 <= 0x3F)
    {
      v5[7] = *(_QWORD *)(result - 8) + 64;
      v5[8] = &unk_1002259F8;
      v5[9] = &unk_100225A10;
      return swift_updateClassMetadata2(a1, 256, 10, v5, a1 + 80);
    }
  }
  return result;
}

unint64_t *initializeBufferWithCopyOfBuffer for SyncCoordinator.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  sub_1000F9014(*a2);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

unint64_t sub_1000F9014(unint64_t result)
{
  if (result >> 62)
  {
    if (result >> 62 != 1)
      return result;
    result &= 0x3FFFFFFFFFFFFFFFuLL;
  }
  return swift_retain(result);
}

unint64_t destroy for SyncCoordinator.State(unint64_t *a1)
{
  return sub_1000F903C(*a1);
}

unint64_t sub_1000F903C(unint64_t result)
{
  if (result >> 62)
  {
    if (result >> 62 != 1)
      return result;
    result &= 0x3FFFFFFFFFFFFFFFuLL;
  }
  return swift_release(result);
}

unint64_t *assignWithCopy for SyncCoordinator.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  sub_1000F9014(*a2);
  v5 = *a1;
  *a1 = v3;
  a1[1] = v4;
  sub_1000F903C(v5);
  return a1;
}

unint64_t *assignWithTake for SyncCoordinator.State(unint64_t *a1, _OWORD *a2)
{
  unint64_t v3;

  v3 = *a1;
  *(_OWORD *)a1 = *a2;
  sub_1000F903C(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for SyncCoordinator.State(uint64_t a1, unsigned int a2)
{
  unsigned int v2;

  if (a2)
  {
    if (a2 >= 0x7E && *(_BYTE *)(a1 + 16))
    {
      v2 = *(_DWORD *)a1 + 125;
    }
    else
    {
      v2 = (((*(_QWORD *)a1 >> 57) >> 5) | (4 * ((*(_QWORD *)a1 >> 57) & 0x18 | *(_QWORD *)a1 & 7))) ^ 0x7F;
      if (v2 >= 0x7D)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return v2 + 1;
}

uint64_t storeEnumTagSinglePayload for SyncCoordinator.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7D)
  {
    *(_QWORD *)result = a2 - 126;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(_QWORD *)(result + 8) = 0;
    }
  }
  return result;
}

unint64_t *sub_1000F9178(unint64_t *result, uint64_t a2)
{
  unint64_t v2;

  if (a2 < 2)
  {
    v2 = *result & 0xFFFFFFFFFFFFFF8 | (a2 << 62);
  }
  else
  {
    v2 = (8 * (a2 - 2)) | 0x8000000000000000;
    result[1] = 0;
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for SyncCoordinator.State()
{
  return &type metadata for SyncCoordinator.State;
}

uint64_t destroy for SyncCompletions(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return swift_release(a1[1]);
}

void _s13EnsembleAgent15SyncCompletionsVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = a2[1];
  *a1 = *a2;
  a1[1] = v2;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1000050D4();
}

uint64_t *assignWithCopy for SyncCompletions(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  a1[2] = a2[2];
  return a1;
}

_QWORD *assignWithTake for SyncCompletions(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  swift_bridgeObjectRelease(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  a1[2] = *(_QWORD *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for SyncCompletions()
{
  return &type metadata for SyncCompletions;
}

unint64_t sub_1000F92D4()
{
  unint64_t result;

  result = qword_1002B13F8;
  if (!qword_1002B13F8)
  {
    result = swift_getWitnessTable(&unk_100225A84, &type metadata for SyncCoordinator.DiagnosticState);
    atomic_store(result, (unint64_t *)&qword_1002B13F8);
  }
  return result;
}

__n128 sub_1000F9310@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  __n128 result;

  result = *(__n128 *)(*(_QWORD *)v1 + 40);
  *a1 = result;
  return result;
}

void sub_1000F9320()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  sub_10002626C();
  v5 = v4;
  v7 = v6;
  type metadata accessor for SyncMessage(0);
  sub_10000E490();
  __chkstk_darwin(v8);
  sub_100026500();
  sub_1000FB33C(v7, v2, v9);
  v10 = sub_1000404AC(v0);
  v11 = Logger.logObject.getter(v10);
  v13 = sub_1000C27A0(v11, v12);
  if (sub_1000C2698(v13))
  {
    v14 = sub_10000797C(22);
    v15 = sub_10000797C(64);
    v25 = v15;
    *(_DWORD *)v14 = 136446466;
    v23 = v7;
    v16 = v5;
    v18 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_label);
    v17 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_label + 8);
    swift_bridgeObjectRetain(v17);
    v24 = sub_100006FCC(v18, v17, &v25);
    sub_10004327C((uint64_t)&v24, (uint64_t)&v25, v19, v14 + 12);
    sub_10000F650(v0);
    swift_bridgeObjectRelease(v17);
    *(_WORD *)(v14 + 12) = 2082;
    sub_10017847C();
    v24 = sub_100006FCC(v20, v21, &v25);
    v5 = v16;
    v7 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v14 + 14);
    sub_10000E420();
    sub_1000255F0(v2, type metadata accessor for SyncMessage);
    sub_100026A60((void *)&_mh_execute_header, v1, v3, "%{public}s: Send Message: %{public}s", (uint8_t *)v14);
    sub_100026A58(v15, v22, (uint64_t)&type metadata for Any + 8);
    sub_100007958(v15);
    sub_100007958(v14);

  }
  else
  {
    sub_10000F650(v0);

    sub_1000255F0(v2, type metadata accessor for SyncMessage);
  }
  if (swift_weakLoadStrong(v0 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_syncController))
  {
    sub_1000B9D8C(v7, *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), v5);
    sub_10000B348();
    sub_10000E4E0();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000F9518(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;
  char v15;

  if (a1 == 0x656369766564 && a2 == 0xE600000000000000)
  {
    v5 = 0xE600000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656369766564, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6769536C61636F6CLL && a2 == 0xEE0065727574616ELL)
  {
    v8 = 0xEE0065727574616ELL;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6769536C61636F6CLL, 0xEE0065727574616ELL, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0x695365746F6D6572 && a2 == 0xEF65727574616E67)
  {
    v10 = 0xEF65727574616E67;
    goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x695365746F6D6572, 0xEF65727574616E67, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2;
  }
  if (a1 == 0xD000000000000012)
  {
    v11 = 0x8000000100257970;
    if (a2 == 0x8000000100257970)
      goto LABEL_29;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000100257970, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
LABEL_29:
    swift_bridgeObjectRelease(v11);
    return 3;
  }
  if (a1 == 0x6574617473 && a2 == 0xE500000000000000)
  {
    v13 = 0xE500000000000000;
    goto LABEL_37;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6574617473, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
LABEL_37:
    swift_bridgeObjectRelease(v13);
    return 4;
  }
  if (a1 == 0x6465636E7973 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    return 5;
  }
  else
  {
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6465636E7973, 0xE600000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v15 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_1000F97B0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000F97E0 + 4 * byte_100225940[a1]))(0x656369766564, 0xE600000000000000);
}

uint64_t sub_1000F97E0()
{
  return 0x6769536C61636F6CLL;
}

uint64_t sub_1000F9804()
{
  return 0x695365746F6D6572;
}

unint64_t sub_1000F9828()
{
  return 0xD000000000000012;
}

uint64_t sub_1000F9844()
{
  return 0x6574617473;
}

uint64_t sub_1000F9858()
{
  return 0x6465636E7973;
}

void sub_1000F9868(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[115];
  char v20;
  _BYTE v21[114];
  _BYTE v22[114];
  _BYTE v23[88];
  _BYTE v24[8];

  v4 = v1;
  v6 = sub_1000055B0(&qword_1002B1448);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_10000E478();
  v8 = a1[3];
  v9 = a1[4];
  sub_10000DBE4(a1, v8);
  v10 = sub_1000FB4C8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SyncCoordinator.DiagnosticState.CodingKeys, &type metadata for SyncCoordinator.DiagnosticState.CodingKeys, v10, v8, v9);
  sub_1000FD34C(v4, (uint64_t)v23);
  sub_1000FD34C((uint64_t)v23, (uint64_t)v19);
  v20 = 0;
  sub_1000FB504();
  sub_1000FD354();
  if (!v2)
  {
    sub_1000FD34C(v4 + 80, (uint64_t)v22);
    sub_1000FD34C((uint64_t)v22, (uint64_t)v19);
    v20 = 1;
    sub_1000FB540();
    sub_1000FD354();
    sub_1000FD34C(v4 + 194, (uint64_t)v21);
    sub_1000FD34C((uint64_t)v21, (uint64_t)v19);
    v20 = 2;
    sub_1000FD354();
    sub_1000FD3B0(3);
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v11, v12, v13, v14);
    sub_1000FD3B0(4);
    KeyedEncodingContainer.encode(_:forKey:)(v15, v16, v17, v18);
    sub_1000FD34C(v4 + 344, (uint64_t)v24);
    sub_1000FD34C((uint64_t)v24, (uint64_t)v19);
    v20 = 5;
    sub_1000055B0(&qword_1002AA560);
    sub_1000FD1D8((unint64_t *)&qword_1002AD060, (void (*)(void))sub_10003668C, (uint64_t)&protocol conformance descriptor for <A> [A]);
    sub_1000FD354();
  }
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v3, v6);
  sub_10003AF60();
}

void sub_1000F9AA8(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98[44];
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _BYTE v133[54];
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char v139;
  uint64_t v140;
  char v141;
  char v142;
  uint64_t v143;

  v5 = sub_1000055B0(&qword_1002B1548);
  __chkstk_darwin(v5);
  sub_100026500();
  v142 = 1;
  v141 = 1;
  v6 = a1[3];
  v7 = a1[4];
  v93 = a1;
  sub_10000DBE4(a1, v6);
  v8 = sub_1000FB4C8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SyncCoordinator.DiagnosticState.CodingKeys, &type metadata for SyncCoordinator.DiagnosticState.CodingKeys, v8, v6, v7);
  if (v2)
  {
    v143 = v2;
    sub_100005988(a1);
    sub_10005F5EC(0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1000FD160();
    sub_1000FD370();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v14, v9, v10, v11, v12, v13, v15);
    v143 = 0;
    v88 = a2;
    v96 = v108;
    v97 = v107;
    v16 = sub_1000FD3C8();
    v95 = v17;
    v19 = v18;
    v21 = v20;
    v89 = v22;
    v90 = v23;
    v91 = v24;
    sub_10005F508(v16, v25, v17, v18, v20, v22, v23, v24, v107, v108);
    sub_1000FD19C();
    sub_1000FD370();
    v92 = v26;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v31, v27, v28, v29, v30, v26, v32);
    v94 = v99;
    v86 = v21;
    v87 = v100;
    v84 = v100;
    v85 = v19;
    v83 = v101;
    v81 = v99;
    v82 = v102;
    v79 = v104;
    v80 = v103;
    v77 = v106;
    v78 = v105;
    v75 = v108;
    v76 = v107;
    v73 = v110;
    v74 = v109;
    v142 = BYTE1(v113);
    LOBYTE(v98[0]) = 2;
    sub_1000FD370();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v37, v33, v34, v35, v36, v92, v38);
    v57 = BYTE1(v113);
    v70 = v113;
    v71 = v112;
    v72 = v111;
    v69 = v101;
    v67 = v100;
    v68 = v102;
    v65 = v99;
    v66 = v103;
    v63 = v105;
    v64 = v104;
    v61 = v107;
    v62 = v106;
    v59 = v109;
    v60 = v108;
    v58 = v110;
    v39 = v111;
    v40 = v112;
    v41 = v113;
    v141 = BYTE1(v113);
    LOBYTE(v99) = 3;
    v53 = BYTE1(v113);
    v54 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v99, v5);
    v55 = v41;
    v56 = v39;
    LOBYTE(v99) = 4;
    v43 = v42;
    swift_bridgeObjectRetain();
    v44 = KeyedDecodingContainer.decode(_:forKey:)(&v99, v5);
    v46 = v45;
    v47 = sub_1000055B0(&qword_1002AA560);
    v139 = 5;
    v48 = sub_1000FD1D8((unint64_t *)&unk_1002AD0F0, (void (*)(void))sub_10003A380, (uint64_t)&protocol conformance descriptor for <A> [A]);
    v49 = swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v140, v47, &v139, v5, v47, v48, v49);
    v143 = 0;
    sub_1000FD2AC();
    v52 = v140;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    BYTE1(v98[24]) = v57;
    *(uint64_t *)((char *)&v98[24] + 2) = v65;
    *(uint64_t *)((char *)&v98[25] + 2) = v67;
    *(uint64_t *)((char *)&v98[26] + 2) = v69;
    *(uint64_t *)((char *)&v98[27] + 2) = v68;
    *(uint64_t *)((char *)&v98[28] + 2) = v66;
    *(uint64_t *)((char *)&v98[29] + 2) = v64;
    *(uint64_t *)((char *)&v98[30] + 2) = v63;
    *(uint64_t *)((char *)&v98[31] + 2) = v62;
    BYTE3(v98[38]) = v53;
    *(uint64_t *)((char *)&v98[32] + 2) = v61;
    *(uint64_t *)((char *)&v98[33] + 2) = v60;
    *(uint64_t *)((char *)&v98[34] + 2) = v59;
    *(uint64_t *)((char *)&v98[35] + 2) = v58;
    *(uint64_t *)((char *)&v98[36] + 2) = v56;
    *(uint64_t *)((char *)&v98[37] + 2) = v40;
    v98[0] = v94;
    v98[1] = v87;
    v98[2] = v95;
    v98[3] = v85;
    v98[4] = v86;
    v98[5] = v89;
    v98[6] = v90;
    v98[7] = v91;
    v98[8] = v97;
    v98[9] = v96;
    v98[10] = v81;
    v98[11] = v84;
    v98[12] = v83;
    v98[13] = v82;
    v98[14] = v80;
    v98[15] = v79;
    v98[16] = v78;
    v98[17] = v77;
    v98[18] = v76;
    v98[19] = v75;
    v98[20] = v74;
    v98[21] = v73;
    v98[22] = v72;
    v98[23] = v71;
    LOBYTE(v98[24]) = v70;
    BYTE2(v98[38]) = v55;
    v98[39] = v54;
    v98[40] = v43;
    v98[41] = v44;
    v98[42] = v46;
    v98[43] = v52;
    sub_10005F650(v98);
    swift_bridgeObjectRelease();
    sub_10000E4A0();
    swift_bridgeObjectRelease();
    sub_1000FD38C();
    sub_10005F5EC(v94, v87, v95, v85, v86, v89, v90, v91, v44, (uint64_t)v133);
    sub_100005988(v93);
    v99 = v94;
    v100 = v87;
    v101 = v95;
    v102 = v85;
    v103 = v86;
    v104 = v89;
    v105 = v90;
    v106 = v91;
    v107 = v97;
    v108 = v96;
    v109 = v81;
    v110 = v84;
    v111 = v83;
    v112 = v82;
    v113 = v80;
    v114 = v79;
    v115 = v78;
    v116 = v77;
    v117 = v76;
    v118 = v75;
    v119 = v74;
    v120 = v73;
    v121 = v72;
    v122 = v71;
    v123 = v70;
    v124 = v142;
    v125 = v65;
    v126 = v67;
    v127 = v69;
    v128 = v68;
    v129 = v66;
    v130 = v64;
    v131 = v63;
    v132 = v62;
    *v51 = v61;
    v51[1] = v60;
    v51[2] = v59;
    v51[3] = v58;
    v51[4] = v56;
    v51[5] = v40;
    v133[48] = v55;
    v133[49] = v141;
    v134 = v54;
    v135 = v43;
    v136 = v50;
    v137 = v46;
    v138 = v52;
    sub_10005F57C(&v99);
    memcpy(v88, v98, 0x160uLL);
  }
  sub_10003AF60();
}

uint64_t sub_1000FA26C()
{
  unsigned __int8 *v0;

  return sub_1000F97B0(*v0);
}

uint64_t sub_1000FA274@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000F9518(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000FA298(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000FB4C8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000FA2C0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000FB4C8();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1000FA2E8(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  _BYTE v4[352];

  sub_1000F9AA8(a1, v4);
  if (!v2)
    memcpy(a2, v4, 0x160uLL);
}

void sub_1000FA338(_QWORD *a1)
{
  const void *v1;
  _BYTE v3[352];

  memcpy(v3, v1, sizeof(v3));
  sub_1000F9868(a1);
}

uint64_t type metadata accessor for SyncCoordinator.Event(uint64_t a1)
{
  return sub_100021590(a1, (uint64_t *)&unk_1002B14E0, (uint64_t)&nominal type descriptor for SyncCoordinator.Event);
}

void sub_1000FA39C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v61[14];

  sub_10002626C();
  v2 = v1;
  sub_1000F4418();
  if (v3)
  {
    sub_100148100();
    v58 = v61[4];
    v59 = v61[3];
    v56 = v61[6];
    v57 = v61[5];
    v55 = v61[7];
    v53 = v61[9];
    v54 = v61[8];
    v51 = v61[11];
    v52 = v61[10];
    v50 = v61[12];
  }
  else
  {
    v58 = 0;
    v59 = 0;
    v56 = 0;
    v57 = 0;
    v55 = 0;
    v53 = 0;
    v54 = 0;
    v51 = 0;
    v52 = 0;
    v50 = 0;
  }
  v24 = *(_QWORD *)(v0 + 64);
  v25 = *(_QWORD *)(v0 + 56);
  v22 = *(_QWORD *)(v0 + 80);
  v23 = *(_QWORD *)(v0 + 72);
  v20 = *(_QWORD *)(v0 + 96);
  v21 = *(_QWORD *)(v0 + 88);
  v35 = *(_QWORD *)(v0 + 112);
  v36 = *(_QWORD *)(v0 + 104);
  v33 = *(_QWORD *)(v0 + 128);
  v34 = *(_QWORD *)(v0 + 120);
  v31 = *(_QWORD *)(v0 + 144);
  v32 = *(_QWORD *)(v0 + 136);
  v29 = *(_QWORD *)(v0 + 160);
  v30 = *(_QWORD *)(v0 + 152);
  v28 = *(_BYTE *)(v0 + 168);
  v4 = *(_BYTE *)(v0 + 169);
  v48 = *(_QWORD *)(v0 + 178);
  v49 = *(_QWORD *)(v0 + 170);
  v46 = *(_QWORD *)(v0 + 194);
  v47 = *(_QWORD *)(v0 + 186);
  v44 = *(_QWORD *)(v0 + 210);
  v45 = *(_QWORD *)(v0 + 202);
  v42 = *(_QWORD *)(v0 + 226);
  v43 = *(_QWORD *)(v0 + 218);
  v40 = *(_QWORD *)(v0 + 242);
  v41 = *(_QWORD *)(v0 + 234);
  v38 = *(_QWORD *)(v0 + 266);
  v39 = *(_QWORD *)(v0 + 258);
  v37 = *(_QWORD *)(v0 + 274);
  v5 = *(_BYTE *)(v0 + 283);
  v6 = v0 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_remoteData;
  v26 = *(_QWORD *)(v0 + 250);
  v27 = *(_BYTE *)(v0 + 282);
  sub_10000B2F8(v0 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_remoteData, (uint64_t)v61, 0);
  v7 = *(_QWORD *)(v6 + *(int *)(sub_1000FD384() + 36));
  if (v7 >= 2)
  {
    sub_100043360();
    sub_10016FC9C();
    v9 = v10;
    v8 = v11;
    sub_1000FB3FC(v7);
  }
  else
  {
    v8 = 0xE300000000000000;
    v9 = 7104878;
  }
  v12 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_state);
  v13 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_state + 8);
  sub_1000F9014(v12);
  v14 = sub_1000F47E8(v12, v13);
  v16 = v15;
  sub_1000F903C(v12);
  sub_1000F44A8();
  swift_bridgeObjectRetain();
  sub_100057E2C();
  v18 = v17;
  sub_10000E420();
  v60 = v18;
  sub_100036DCC(&v60);
  sub_10000E420();
  *(_QWORD *)v2 = v59;
  *(_QWORD *)(v2 + 8) = v58;
  *(_QWORD *)(v2 + 16) = v57;
  *(_QWORD *)(v2 + 24) = v56;
  *(_QWORD *)(v2 + 32) = v55;
  *(_QWORD *)(v2 + 40) = v54;
  *(_QWORD *)(v2 + 48) = v53;
  *(_QWORD *)(v2 + 56) = v52;
  *(_QWORD *)(v2 + 64) = v51;
  *(_QWORD *)(v2 + 72) = v50;
  *(_QWORD *)(v2 + 80) = v25;
  *(_QWORD *)(v2 + 88) = v24;
  *(_QWORD *)(v2 + 96) = v23;
  *(_QWORD *)(v2 + 104) = v22;
  *(_QWORD *)(v2 + 112) = v21;
  *(_QWORD *)(v2 + 120) = v20;
  v19 = v60;
  *(_QWORD *)(v2 + 128) = v36;
  *(_QWORD *)(v2 + 136) = v35;
  *(_QWORD *)(v2 + 144) = v34;
  *(_QWORD *)(v2 + 152) = v33;
  *(_QWORD *)(v2 + 160) = v32;
  *(_QWORD *)(v2 + 168) = v31;
  *(_QWORD *)(v2 + 176) = v30;
  *(_QWORD *)(v2 + 184) = v29;
  *(_BYTE *)(v2 + 192) = v28;
  *(_BYTE *)(v2 + 193) = v4;
  *(_QWORD *)(v2 + 194) = v49;
  *(_QWORD *)(v2 + 202) = v48;
  *(_QWORD *)(v2 + 210) = v47;
  *(_QWORD *)(v2 + 218) = v46;
  *(_QWORD *)(v2 + 226) = v45;
  *(_QWORD *)(v2 + 234) = v44;
  *(_QWORD *)(v2 + 242) = v43;
  *(_QWORD *)(v2 + 250) = v42;
  *(_QWORD *)(v2 + 258) = v41;
  *(_QWORD *)(v2 + 266) = v40;
  *(_QWORD *)(v2 + 274) = v26;
  *(_QWORD *)(v2 + 282) = v39;
  *(_QWORD *)(v2 + 290) = v38;
  *(_QWORD *)(v2 + 298) = v37;
  *(_BYTE *)(v2 + 306) = v27;
  *(_BYTE *)(v2 + 307) = v5;
  *(_QWORD *)(v2 + 312) = v9;
  *(_QWORD *)(v2 + 320) = v8;
  *(_QWORD *)(v2 + 328) = v14;
  *(_QWORD *)(v2 + 336) = v16;
  *(_QWORD *)(v2 + 344) = v19;
  sub_10000E4E0();
}

uint64_t sub_1000FA710()
{
  uint64_t v0;

  return sub_1000F7938(v0);
}

uint64_t sub_1000FA718()
{
  uint64_t v0;

  return sub_1000F539C(v0);
}

uint64_t sub_1000FA720(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SyncMessage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000FA764()
{
  uint64_t v0;

  return sub_1000F56FC(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

void sub_1000FA770(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
  {
    sub_10006CB5C();
    v2 = v3;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v4;
  sub_1000FA7D8(v5);
  *a1 = v2;
}

void sub_1000FA7D8(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  Swift::Int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  Swift::Int v13;
  uint64_t v14;
  _QWORD *v15;
  Swift::Int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  Swift::Int v21;
  Swift::Int v22;
  uint64_t v23;
  Swift::Int v24;
  unint64_t *v25;
  unint64_t v26;
  Swift::Int v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  Swift::Int *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  unint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  char v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  unint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  unint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  unint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;

  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        sub_1000FAD70(0, v3, 1, a1);
      return;
    }
    goto LABEL_124;
  }
  v5 = v4;
  sub_10002222C(v3 / 2);
  v108 = a1;
  v109 = v11;
  v113 = v12;
  v111 = v3;
  if (v3 <= 0)
  {
    v15 = _swiftEmptyArrayStorage;
    v31 = _swiftEmptyArrayStorage[2];
LABEL_90:
    if (v31 < 2)
    {
LABEL_101:
      v98 = sub_10000E4A0();
      if (v111 >= -1)
      {
        sub_1000FD424(v98, v99, v100, v101, v102, v103, v104, v105, v106, v107, (uint64_t)v108, v109);
        return;
      }
      goto LABEL_129;
    }
    v91 = *v108;
    while (1)
    {
      v92 = v31 - 2;
      if (v31 < 2)
        break;
      if (!v91)
        goto LABEL_133;
      v93 = v15[2 * v92 + 4];
      v94 = v15[2 * v31 + 3];
      sub_1000FD3D4((char *)(v91 + 8 * v93), (char *)(v91 + 8 * v15[2 * v31 + 2]), v91 + 8 * v94, v6, v7, v8, v9, v10, v106, v107, (uint64_t)v108, v109, v110, v111, v112, v113);
      if (v1)
        goto LABEL_86;
      if (v94 < v93)
        goto LABEL_119;
      if ((swift_isUniquelyReferenced_nonNull_native(v15) & 1) == 0)
      {
        sub_10006CA50();
        v15 = v97;
      }
      if (v92 >= v15[2])
        goto LABEL_120;
      v95 = &v15[2 * v92 + 4];
      *v95 = v93;
      v95[1] = v94;
      v96 = v15[2];
      if (v31 > v96)
        goto LABEL_121;
      memmove(&v15[2 * v31 + 2], &v15[2 * v31 + 4], 16 * (v96 - v31));
      v15[2] = v96 - 1;
      v31 = v96 - 1;
      if (v96 <= 2)
        goto LABEL_101;
    }
LABEL_118:
    __break(1u);
LABEL_119:
    __break(1u);
LABEL_120:
    __break(1u);
LABEL_121:
    __break(1u);
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
LABEL_133:
    __break(1u);
    return;
  }
  v13 = 0;
  v14 = *a1;
  v107 = *a1 - 8;
  v15 = _swiftEmptyArrayStorage;
  v110 = v5;
  v112 = *a1;
  while (1)
  {
    v16 = v13++;
    if (v13 < v3)
    {
      v17 = *(_QWORD *)(v14 + 8 * v13);
      v18 = *(_QWORD *)(v14 + 8 * v16);
      v13 = v16 + 2;
      if (v16 + 2 < v3)
      {
        v19 = v17;
        while (1)
        {
          v20 = *(_QWORD *)(v14 + 8 * v13);
          if (v17 < v18 == v20 >= v19)
            break;
          ++v13;
          v19 = v20;
          if (v13 >= v3)
          {
            v13 = v3;
            break;
          }
        }
      }
      if (v17 < v18)
      {
        if (v13 < v16)
          goto LABEL_126;
        if (v16 < v13)
        {
          v21 = v13 - 1;
          v22 = v16;
          do
          {
            if (v22 != v21)
            {
              if (!v14)
                goto LABEL_132;
              v23 = *(_QWORD *)(v14 + 8 * v22);
              *(_QWORD *)(v14 + 8 * v22) = *(_QWORD *)(v14 + 8 * v21);
              *(_QWORD *)(v14 + 8 * v21) = v23;
            }
            v62 = ++v22 < v21--;
          }
          while (v62);
        }
      }
    }
    if (v13 < v3)
    {
      if (__OFSUB__(v13, v16))
        goto LABEL_123;
      if (v13 - v16 < v5)
      {
        v24 = v16 + v5;
        if (__OFADD__(v16, v5))
          goto LABEL_127;
        if (v24 >= v3)
          v24 = v3;
        if (v24 < v16)
          goto LABEL_128;
        if (v13 != v24)
        {
          v25 = (unint64_t *)(v107 + 8 * v13);
          do
          {
            v26 = *(_QWORD *)(v14 + 8 * v13);
            v27 = v16;
            v28 = v25;
            do
            {
              v29 = *v28;
              if (v26 >= *v28)
                break;
              if (!v14)
                goto LABEL_130;
              *v28 = v26;
              v28[1] = v29;
              --v28;
              ++v27;
            }
            while (v13 != v27);
            ++v13;
            ++v25;
          }
          while (v13 != v24);
          v13 = v24;
        }
      }
    }
    if (v13 < v16)
      goto LABEL_122;
    if ((swift_isUniquelyReferenced_nonNull_native(v15) & 1) == 0)
    {
      sub_1000FD3E8();
      v15 = v81;
    }
    v30 = v15[2];
    v31 = v30 + 1;
    v14 = v112;
    if (v30 >= v15[3] >> 1)
    {
      sub_1000FD3E8();
      v14 = v112;
      v15 = v82;
    }
    v15[2] = v31;
    v32 = v15 + 4;
    v33 = &v15[2 * v30 + 4];
    *v33 = v16;
    v33[1] = v13;
    if (v30)
      break;
    v31 = 1;
LABEL_81:
    v5 = v110;
    v3 = v111;
    if (v13 >= v111)
      goto LABEL_90;
  }
  while (1)
  {
    v34 = v31 - 1;
    if (v31 >= 4)
    {
      v39 = &v32[2 * v31];
      v40 = *(v39 - 8);
      v41 = *(v39 - 7);
      v45 = __OFSUB__(v41, v40);
      v42 = v41 - v40;
      if (v45)
        goto LABEL_107;
      v44 = *(v39 - 6);
      v43 = *(v39 - 5);
      v45 = __OFSUB__(v43, v44);
      v37 = v43 - v44;
      v38 = v45;
      if (v45)
        goto LABEL_108;
      v46 = v31 - 2;
      v47 = &v32[2 * v31 - 4];
      v49 = *v47;
      v48 = v47[1];
      v45 = __OFSUB__(v48, v49);
      v50 = v48 - v49;
      if (v45)
        goto LABEL_109;
      v45 = __OFADD__(v37, v50);
      v51 = v37 + v50;
      if (v45)
        goto LABEL_111;
      if (v51 >= v42)
      {
        v69 = &v32[2 * v34];
        v71 = *v69;
        v70 = v69[1];
        v45 = __OFSUB__(v70, v71);
        v72 = v70 - v71;
        if (v45)
          goto LABEL_117;
        v62 = v37 < v72;
        goto LABEL_70;
      }
    }
    else
    {
      if (v31 != 3)
      {
        v63 = v15[4];
        v64 = v15[5];
        v45 = __OFSUB__(v64, v63);
        v56 = v64 - v63;
        v57 = v45;
        goto LABEL_64;
      }
      v36 = v15[4];
      v35 = v15[5];
      v45 = __OFSUB__(v35, v36);
      v37 = v35 - v36;
      v38 = v45;
    }
    if ((v38 & 1) != 0)
      goto LABEL_110;
    v46 = v31 - 2;
    v52 = &v32[2 * v31 - 4];
    v54 = *v52;
    v53 = v52[1];
    v55 = __OFSUB__(v53, v54);
    v56 = v53 - v54;
    v57 = v55;
    if (v55)
      goto LABEL_112;
    v58 = &v32[2 * v34];
    v60 = *v58;
    v59 = v58[1];
    v45 = __OFSUB__(v59, v60);
    v61 = v59 - v60;
    if (v45)
      goto LABEL_114;
    if (__OFADD__(v56, v61))
      goto LABEL_116;
    if (v56 + v61 >= v37)
    {
      v62 = v37 < v61;
LABEL_70:
      if (v62)
        v34 = v46;
      goto LABEL_72;
    }
LABEL_64:
    if ((v57 & 1) != 0)
      goto LABEL_113;
    v65 = &v32[2 * v34];
    v67 = *v65;
    v66 = v65[1];
    v45 = __OFSUB__(v66, v67);
    v68 = v66 - v67;
    if (v45)
      goto LABEL_115;
    if (v68 < v56)
      goto LABEL_81;
LABEL_72:
    v73 = v15;
    v74 = v34 - 1;
    if (v34 - 1 >= v31)
    {
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
      goto LABEL_118;
    }
    if (!v14)
      goto LABEL_131;
    v75 = &v32[2 * v74];
    v76 = *v75;
    v77 = v32;
    v78 = &v32[2 * v34];
    v79 = v78[1];
    sub_1000FD3D4((char *)(v14 + 8 * *v75), (char *)(v14 + 8 * *v78), v14 + 8 * v79, v6, v7, v8, v9, v10, v106, v107, (uint64_t)v108, v109, v110, v111, v112, v113);
    if (v1)
      break;
    if (v79 < v76)
      goto LABEL_104;
    if (v34 > v73[2])
      goto LABEL_105;
    *v75 = v76;
    v77[2 * v74 + 1] = v79;
    v80 = v73[2];
    if (v34 >= v80)
      goto LABEL_106;
    v15 = v73;
    v31 = v80 - 1;
    memmove(v78, v78 + 2, 16 * (v80 - 1 - v34));
    v32 = v77;
    v73[2] = v80 - 1;
    v14 = v112;
    if (v80 <= 2)
      goto LABEL_81;
  }
LABEL_86:
  v83 = sub_10000E4A0();
  if (v111 < -1)
    goto LABEL_125;
  sub_1000FD424(v83, v84, v85, v86, v87, v88, v89, v90, v106, v107, (uint64_t)v108, v109);
}

uint64_t sub_1000FAD70(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  if (a3 != a2)
  {
    v4 = *a4;
    v5 = *a4 + 8 * a3 - 8;
    while (2)
    {
      v6 = *(_QWORD *)(v4 + 8 * a3);
      v7 = result;
      v8 = (unint64_t *)v5;
      do
      {
        v9 = *v8;
        if (v6 >= *v8)
          break;
        if (!v4)
        {
          __break(1u);
          return result;
        }
        *v8 = v6;
        v8[1] = v9;
        --v8;
        ++v7;
      }
      while (a3 != v7);
      ++a3;
      v5 += 8;
      if (a3 != a2)
        continue;
      break;
    }
  }
  return result;
}

uint64_t sub_1000FADC8(char *a1, char *a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;
  BOOL v15;
  char *v18;
  char *v19;
  unint64_t v20;
  BOOL v21;
  BOOL v22;

  v4 = a4;
  v6 = a2;
  v7 = a1;
  v8 = a2 - a1;
  v9 = (a2 - a1) / 8;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 8;
  if (v9 >= v11)
  {
    sub_100078D38(a2, (uint64_t)(a3 - (_QWORD)a2) / 8, a4);
    v12 = &v4[8 * v11];
    if (v7 >= v6 || v10 < 8)
      goto LABEL_39;
    v18 = (char *)(a3 - 8);
    while (1)
    {
      v19 = v18 + 8;
      v20 = *((_QWORD *)v6 - 1);
      if (*((_QWORD *)v12 - 1) >= v20)
      {
        v22 = v19 != v12 || v18 >= v12;
        v20 = *((_QWORD *)v12 - 1);
        v12 -= 8;
        if (!v22)
          goto LABEL_35;
      }
      else
      {
        v21 = v19 != v6 || v18 >= v6;
        v6 -= 8;
        if (!v21)
          goto LABEL_35;
      }
      *(_QWORD *)v18 = v20;
LABEL_35:
      v18 -= 8;
      if (v6 <= v7 || v12 <= v4)
        goto LABEL_39;
    }
  }
  sub_100078D38(a1, (a2 - a1) / 8, a4);
  v12 = &v4[8 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 8)
  {
    while (1)
    {
      v14 = *(_QWORD *)v6;
      if (*(_QWORD *)v6 < *(_QWORD *)v4)
        break;
      v14 = *(_QWORD *)v4;
      v15 = v7 == v4;
      v4 += 8;
      if (!v15)
        goto LABEL_11;
LABEL_12:
      v7 += 8;
      if (v4 >= v12 || (unint64_t)v6 >= a3)
        goto LABEL_17;
    }
    v15 = v7 == v6;
    v6 += 8;
    if (v15)
      goto LABEL_12;
LABEL_11:
    *(_QWORD *)v7 = v14;
    goto LABEL_12;
  }
LABEL_17:
  v6 = v7;
LABEL_39:
  sub_100078D38(v4, (v12 - v4) / 8, v6);
  return 1;
}

uint64_t sub_1000FAF40(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char v8;
  char v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  Swift::String v40;
  Swift::String v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;

  v74 = a5;
  v75 = a6;
  v8 = a4;
  v10 = a2;
  v11 = a1;
  v47 = a1 >> 8;
  v48 = a1 >> 16;
  v49 = a1 >> 24;
  v50 = HIDWORD(a1);
  v51 = a1 >> 40;
  v52 = HIWORD(a1);
  v53 = HIBYTE(a1);
  v54 = a2 >> 8;
  v55 = a2 >> 16;
  v56 = a2 >> 24;
  v57 = HIDWORD(a2);
  v58 = a2 >> 40;
  v59 = HIWORD(a2);
  v60 = HIBYTE(a2);
  v71 = a3 >> 16;
  v72 = a3 >> 8;
  v69 = HIDWORD(a3);
  v70 = a3 >> 24;
  v67 = HIWORD(a3);
  v68 = a3 >> 40;
  v64 = a4 >> 8;
  v65 = HIBYTE(a3);
  v62 = a4 >> 24;
  v63 = a4 >> 16;
  v61 = HIDWORD(a4);
  v12 = a4 >> 40;
  v13 = HIWORD(a4);
  v14 = HIBYTE(a4);
  v73 = type metadata accessor for UUID(0);
  v66 = *(_QWORD *)(v73 - 8);
  __chkstk_darwin(v73);
  v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Completions();
  v18 = swift_allocObject(v17, 24, 7);
  *(_QWORD *)(v18 + 16) = _swiftEmptyArrayStorage;
  *(_QWORD *)(a7 + 16) = v18;
  v19 = a7 + OBJC_IVAR____TtC13EnsembleAgent11SyncContext_messageSender;
  *(_QWORD *)(v19 + 8) = 0;
  swift_unknownObjectWeakInit(v19, 0);
  *(_QWORD *)(a7 + OBJC_IVAR____TtC13EnsembleAgent11SyncContext_generation) = 0;
  v20 = (_QWORD *)(a7 + OBJC_IVAR____TtC13EnsembleAgent11SyncContext_state);
  v21 = type metadata accessor for SyncContext.State(0);
  *v20 = 0;
  v20[1] = 0;
  swift_storeEnumTagMultiPayload(v20, v21, 0);
  *(_BYTE *)(a7 + 24) = v11;
  *(_BYTE *)(a7 + 25) = v47;
  *(_BYTE *)(a7 + 26) = v48;
  *(_BYTE *)(a7 + 27) = v49;
  *(_BYTE *)(a7 + 28) = v50;
  *(_BYTE *)(a7 + 29) = v51;
  *(_BYTE *)(a7 + 30) = v52;
  *(_BYTE *)(a7 + 31) = v53;
  *(_BYTE *)(a7 + 32) = v10;
  *(_BYTE *)(a7 + 33) = v54;
  *(_BYTE *)(a7 + 34) = v55;
  *(_BYTE *)(a7 + 35) = v56;
  *(_BYTE *)(a7 + 36) = v57;
  *(_BYTE *)(a7 + 37) = v58;
  *(_BYTE *)(a7 + 38) = v59;
  *(_BYTE *)(a7 + 39) = v60;
  v76 = 542327881;
  v77 = 0xE400000000000000;
  *(_BYTE *)(a7 + 40) = a3;
  v23 = v71;
  v22 = v72;
  *(_BYTE *)(a7 + 41) = v72;
  *(_BYTE *)(a7 + 42) = v23;
  v25 = v69;
  v24 = v70;
  *(_BYTE *)(a7 + 43) = v70;
  *(_BYTE *)(a7 + 44) = v25;
  v27 = v67;
  v26 = v68;
  *(_BYTE *)(a7 + 45) = v68;
  *(_BYTE *)(a7 + 46) = v27;
  v28 = v64;
  *(_BYTE *)(a7 + 47) = v65;
  *(_BYTE *)(a7 + 48) = v8;
  *(_BYTE *)(a7 + 49) = v28;
  v29 = v62;
  *(_BYTE *)(a7 + 50) = v63;
  *(_BYTE *)(a7 + 51) = v29;
  *(_BYTE *)(a7 + 52) = v61;
  *(_BYTE *)(a7 + 53) = v12;
  *(_BYTE *)(a7 + 54) = v13;
  *(_BYTE *)(a7 + 55) = v14;
  v30 = UUID.init(uuid:)(a3, v22, v23, v24, v25, v26);
  v31 = UUID.uuidString.getter(v30);
  v33 = v32;
  (*(void (**)(char *, uint64_t))(v66 + 8))(v16, v73);
  v34 = sub_1000599D0(8, v31, v33);
  v36 = v35;
  v37 = static String._fromSubstring(_:)(v34);
  v39 = v38;
  swift_bridgeObjectRelease(v36);
  v40._countAndFlagsBits = v37;
  v40._object = v39;
  String.append(_:)(v40);
  swift_bridgeObjectRelease(v39);
  v41._countAndFlagsBits = 0x434E59532FLL;
  v41._object = (void *)0xE500000000000000;
  String.append(_:)(v41);
  v42 = v77;
  *(_QWORD *)(a7 + 56) = v76;
  *(_QWORD *)(a7 + 64) = v42;
  v43 = a7 + OBJC_IVAR____TtC13EnsembleAgent11SyncContext_logger;
  v44 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 32))(v43, v74, v44);
  v45 = a7 + OBJC_IVAR____TtC13EnsembleAgent11SyncContext_messageSender;
  *(_QWORD *)(v45 + 8) = &off_10028BB28;
  swift_unknownObjectWeakAssign(v45, v75);
  swift_release();
  return a7;
}

void sub_1000FB33C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = a3(0);
  sub_1000265B0(v3);
  sub_1000050D4();
}

uint64_t sub_1000FB368()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1000FB38C(uint64_t a1)
{
  uint64_t v1;

  sub_1000F48D4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1000FB394(uint64_t result, uint64_t a2)
{
  if (result)
  {
    swift_bridgeObjectRetain(result);
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t sub_1000FB3C0(uint64_t result, uint64_t a2)
{
  if (result)
  {
    swift_bridgeObjectRelease(result);
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t sub_1000FB3EC(uint64_t result)
{
  if (result != 1)
    return swift_bridgeObjectRetain(result);
  return result;
}

uint64_t sub_1000FB3FC(uint64_t result)
{
  if (result != 1)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t sub_1000FB40C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000055B0((uint64_t *)&unk_1002B3380);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000FB454@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_1000F7F60(a1, v2[2], v2[3], v2[4], v2[5], a2);
}

uint64_t sub_1000FB460(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000055B0(&qword_1002B1438);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_1000FB4A8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_100060044(a1, a2, a3);
  sub_1000265B0(v3);
  sub_1000050D4();
}

unint64_t sub_1000FB4C8()
{
  unint64_t result;

  result = qword_1002B1450;
  if (!qword_1002B1450)
  {
    result = swift_getWitnessTable(&unk_100225CA8, &type metadata for SyncCoordinator.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B1450);
  }
  return result;
}

unint64_t sub_1000FB504()
{
  unint64_t result;

  result = qword_1002B33F0;
  if (!qword_1002B33F0)
  {
    result = swift_getWitnessTable(&unk_1002281FC, &unk_10028E040);
    atomic_store(result, (unint64_t *)&qword_1002B33F0);
  }
  return result;
}

unint64_t sub_1000FB540()
{
  unint64_t result;

  result = qword_1002B1460;
  if (!qword_1002B1460)
  {
    result = swift_getWitnessTable(&unk_10022042C, &type metadata for SyncViewSignature);
    atomic_store(result, (unint64_t *)&qword_1002B1460);
  }
  return result;
}

void sub_1000FB57C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = sub_100060044(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v3, v4, v5);
  sub_1000050D4();
}

uint64_t storeEnumTagSinglePayload for SyncCoordinator.DiagnosticState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1000FB5FC + 4 * byte_10022594B[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1000FB630 + 4 * byte_100225946[v4]))();
}

uint64_t sub_1000FB630(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000FB638(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000FB640);
  return result;
}

uint64_t sub_1000FB64C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000FB654);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1000FB658(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000FB660(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SyncCoordinator.DiagnosticState.CodingKeys()
{
  return &type metadata for SyncCoordinator.DiagnosticState.CodingKeys;
}

char *sub_1000FB67C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  __int128 v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  __int128 v51;
  uint64_t v52;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v12 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v12 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v8 = *(_QWORD *)a2;
        swift_errorRetain(v8);
        *(_QWORD *)a1 = v8;
        v9 = a1;
        v10 = a3;
        v11 = 0;
        goto LABEL_21;
      case 1u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_retain();
        v9 = a1;
        v10 = a3;
        v11 = 1;
        goto LABEL_21;
      case 2u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
        a1[40] = a2[40];
        *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
        swift_bridgeObjectRetain();
        swift_retain();
        v13 = (int *)sub_1000055B0(&qword_1002B1430);
        v14 = v13[16];
        v15 = &a1[v14];
        v16 = &a2[v14];
        v17 = *(_OWORD *)&a2[v14 + 16];
        *(_OWORD *)v15 = *(_OWORD *)&a2[v14];
        *((_OWORD *)v15 + 1) = v17;
        v15[32] = a2[v14 + 32];
        v18 = *(int *)(sub_1000055B0((uint64_t *)&unk_1002B1DF0) + 56);
        v19 = &v15[v18];
        v20 = &v16[v18];
        v21 = type metadata accessor for UniversalControlDisplayLayout(0);
        if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v20, 1, v21))
        {
          v22 = sub_1000055B0((uint64_t *)&unk_1002B3380);
          memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
          _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v19, 0, 1, v21);
        }
        v23 = v13[20];
        v24 = &a1[v23];
        v25 = &a2[v23];
        v26 = *((_OWORD *)v25 + 1);
        *(_OWORD *)v24 = *(_OWORD *)v25;
        *((_OWORD *)v24 + 1) = v26;
        v24[32] = v25[32];
        *((_QWORD *)v24 + 5) = *((_QWORD *)v25 + 5);
        v27 = v13[24];
        v28 = &a1[v27];
        v29 = &a2[v27];
        v30 = *(_OWORD *)&a2[v27 + 16];
        *(_OWORD *)v28 = *(_OWORD *)&a2[v27];
        *((_OWORD *)v28 + 1) = v30;
        v28[32] = a2[v27 + 32];
        v32 = &a2[v27 + 40];
        v31 = *(_QWORD *)v32;
        swift_bridgeObjectRetain();
        if (v31)
        {
          v33 = *((_QWORD *)v29 + 6);
          *((_QWORD *)v28 + 5) = v31;
          *((_QWORD *)v28 + 6) = v33;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)(v28 + 40) = *(_OWORD *)v32;
        }
        v34 = v13[28];
        v35 = &a1[v34];
        v36 = &a2[v34];
        v37 = *((_OWORD *)v36 + 1);
        *(_OWORD *)v35 = *(_OWORD *)v36;
        *((_OWORD *)v35 + 1) = v37;
        v35[32] = v36[32];
        v38 = *((_QWORD *)v36 + 5);
        if (v38 == 1)
        {
          *(_OWORD *)(v35 + 40) = *(_OWORD *)(v36 + 40);
          *((_QWORD *)v35 + 7) = *((_QWORD *)v36 + 7);
        }
        else
        {
          *((_QWORD *)v35 + 5) = v38;
          *((_OWORD *)v35 + 3) = *((_OWORD *)v36 + 3);
          swift_bridgeObjectRetain();
        }
        v39 = v13[32];
        v40 = &a1[v39];
        v41 = &a2[v39];
        v42 = *(_OWORD *)&a2[v39 + 16];
        *(_OWORD *)v40 = *(_OWORD *)&a2[v39];
        *((_OWORD *)v40 + 1) = v42;
        v40[32] = a2[v39 + 32];
        v43 = *(int *)(sub_1000055B0((uint64_t *)&unk_1002B1E00) + 56);
        v44 = &v40[v43];
        v45 = &v41[v43];
        v46 = type metadata accessor for UniversalControlConfiguration(0);
        if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v45, 1, v46))
        {
          v47 = sub_1000055B0(&qword_1002B1438);
          memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v44, v45, v46);
          _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v44, 0, 1, v46);
        }
        v48 = v13[36];
        v49 = &a1[v48];
        v50 = &a2[v48];
        v51 = *((_OWORD *)v50 + 1);
        *(_OWORD *)v49 = *(_OWORD *)v50;
        *((_OWORD *)v49 + 1) = v51;
        *(_DWORD *)(v49 + 31) = *(_DWORD *)(v50 + 31);
        v52 = sub_1000055B0(&qword_1002B1428);
        *(_QWORD *)&a1[*(int *)(v52 + 48)] = *(_QWORD *)&a2[*(int *)(v52 + 48)];
        *(_QWORD *)&a1[*(int *)(v52 + 64)] = *(_QWORD *)&a2[*(int *)(v52 + 64)];
        swift_bridgeObjectRetain();
        swift_retain();
        v9 = a1;
        v10 = a3;
        v11 = 2;
        goto LABEL_21;
      case 3u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_retain();
        v9 = a1;
        v10 = a3;
        v11 = 3;
LABEL_21:
        swift_storeEnumTagMultiPayload(v9, v10, v11);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_1000FBA38(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  int *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((int)result)
  {
    case 0:
      result = swift_errorRelease(*a1);
      break;
    case 1:
    case 3:
      goto LABEL_12;
    case 2:
      swift_bridgeObjectRelease();
      swift_release();
      v4 = (int *)sub_1000055B0(&qword_1002B1430);
      v5 = (char *)a1 + v4[16];
      v6 = (uint64_t)&v5[*(int *)(sub_1000055B0((uint64_t *)&unk_1002B1DF0) + 56)];
      v7 = type metadata accessor for UniversalControlDisplayLayout(0);
      if (!_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v6, 1, v7))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
      swift_bridgeObjectRelease();
      if (*(_QWORD *)((char *)a1 + v4[24] + 40))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      if (*(_QWORD *)((char *)a1 + v4[28] + 40) != 1)
        swift_bridgeObjectRelease();
      v8 = (char *)a1 + v4[32];
      v9 = (uint64_t)&v8[*(int *)(sub_1000055B0((uint64_t *)&unk_1002B1E00) + 56)];
      v10 = type metadata accessor for UniversalControlConfiguration(0);
      if (!_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v9, 1, v10))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
      sub_1000055B0(&qword_1002B1428);
      swift_bridgeObjectRelease();
LABEL_12:
      result = swift_release();
      break;
    default:
      return result;
  }
  return result;
}

char *sub_1000FBBD8(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  char *v25;
  char *v26;
  __int128 v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  __int128 v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  __int128 v48;
  uint64_t v49;

  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      v6 = *(_QWORD *)a2;
      swift_errorRetain(v6);
      *(_QWORD *)a1 = v6;
      v7 = a1;
      v8 = a3;
      v9 = 0;
      goto LABEL_19;
    case 1u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_retain();
      v7 = a1;
      v8 = a3;
      v9 = 1;
      goto LABEL_19;
    case 2u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      a1[40] = a2[40];
      *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
      swift_bridgeObjectRetain();
      swift_retain();
      v10 = (int *)sub_1000055B0(&qword_1002B1430);
      v11 = v10[16];
      v12 = &a1[v11];
      v13 = &a2[v11];
      v14 = *(_OWORD *)&a2[v11 + 16];
      *(_OWORD *)v12 = *(_OWORD *)&a2[v11];
      *((_OWORD *)v12 + 1) = v14;
      v12[32] = a2[v11 + 32];
      v15 = *(int *)(sub_1000055B0((uint64_t *)&unk_1002B1DF0) + 56);
      v16 = &v12[v15];
      v17 = &v13[v15];
      v18 = type metadata accessor for UniversalControlDisplayLayout(0);
      if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v17, 1, v18))
      {
        v19 = sub_1000055B0((uint64_t *)&unk_1002B3380);
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
        _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v16, 0, 1, v18);
      }
      v20 = v10[20];
      v21 = &a1[v20];
      v22 = &a2[v20];
      v23 = *((_OWORD *)v22 + 1);
      *(_OWORD *)v21 = *(_OWORD *)v22;
      *((_OWORD *)v21 + 1) = v23;
      v21[32] = v22[32];
      *((_QWORD *)v21 + 5) = *((_QWORD *)v22 + 5);
      v24 = v10[24];
      v25 = &a1[v24];
      v26 = &a2[v24];
      v27 = *(_OWORD *)&a2[v24 + 16];
      *(_OWORD *)v25 = *(_OWORD *)&a2[v24];
      *((_OWORD *)v25 + 1) = v27;
      v25[32] = a2[v24 + 32];
      v29 = &a2[v24 + 40];
      v28 = *(_QWORD *)v29;
      swift_bridgeObjectRetain();
      if (v28)
      {
        v30 = *((_QWORD *)v26 + 6);
        *((_QWORD *)v25 + 5) = v28;
        *((_QWORD *)v25 + 6) = v30;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)(v25 + 40) = *(_OWORD *)v29;
      }
      v31 = v10[28];
      v32 = &a1[v31];
      v33 = &a2[v31];
      v34 = *((_OWORD *)v33 + 1);
      *(_OWORD *)v32 = *(_OWORD *)v33;
      *((_OWORD *)v32 + 1) = v34;
      v32[32] = v33[32];
      v35 = *((_QWORD *)v33 + 5);
      if (v35 == 1)
      {
        *(_OWORD *)(v32 + 40) = *(_OWORD *)(v33 + 40);
        *((_QWORD *)v32 + 7) = *((_QWORD *)v33 + 7);
      }
      else
      {
        *((_QWORD *)v32 + 5) = v35;
        *((_OWORD *)v32 + 3) = *((_OWORD *)v33 + 3);
        swift_bridgeObjectRetain();
      }
      v36 = v10[32];
      v37 = &a1[v36];
      v38 = &a2[v36];
      v39 = *(_OWORD *)&a2[v36 + 16];
      *(_OWORD *)v37 = *(_OWORD *)&a2[v36];
      *((_OWORD *)v37 + 1) = v39;
      v37[32] = a2[v36 + 32];
      v40 = *(int *)(sub_1000055B0((uint64_t *)&unk_1002B1E00) + 56);
      v41 = &v37[v40];
      v42 = &v38[v40];
      v43 = type metadata accessor for UniversalControlConfiguration(0);
      if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v42, 1, v43))
      {
        v44 = sub_1000055B0(&qword_1002B1438);
        memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v41, v42, v43);
        _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v41, 0, 1, v43);
      }
      v45 = v10[36];
      v46 = &a1[v45];
      v47 = &a2[v45];
      v48 = *((_OWORD *)v47 + 1);
      *(_OWORD *)v46 = *(_OWORD *)v47;
      *((_OWORD *)v46 + 1) = v48;
      *(_DWORD *)(v46 + 31) = *(_DWORD *)(v47 + 31);
      v49 = sub_1000055B0(&qword_1002B1428);
      *(_QWORD *)&a1[*(int *)(v49 + 48)] = *(_QWORD *)&a2[*(int *)(v49 + 48)];
      *(_QWORD *)&a1[*(int *)(v49 + 64)] = *(_QWORD *)&a2[*(int *)(v49 + 64)];
      swift_bridgeObjectRetain();
      swift_retain();
      v7 = a1;
      v8 = a3;
      v9 = 2;
      goto LABEL_19;
    case 3u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_retain();
      v7 = a1;
      v8 = a3;
      v9 = 3;
LABEL_19:
      swift_storeEnumTagMultiPayload(v7, v8, v9);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

char *sub_1000FBF6C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  __int128 v34;
  uint64_t v35;
  char *v36;
  __int128 v37;
  uint64_t v38;
  char *v39;
  char *v40;
  __int128 v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;

  if (a1 != a2)
  {
    sub_1000255F0((uint64_t)a1, type metadata accessor for SyncCoordinator.Event);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v6 = *(_QWORD *)a2;
        swift_errorRetain(v6);
        *(_QWORD *)a1 = v6;
        v7 = a1;
        v8 = a3;
        v9 = 0;
        goto LABEL_20;
      case 1u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_retain();
        v7 = a1;
        v8 = a3;
        v9 = 1;
        goto LABEL_20;
      case 2u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        v10 = *(_OWORD *)(a2 + 24);
        a1[40] = a2[40];
        *(_OWORD *)(a1 + 24) = v10;
        *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
        swift_bridgeObjectRetain();
        swift_retain();
        v11 = (int *)sub_1000055B0(&qword_1002B1430);
        v12 = v11[16];
        v13 = &a1[v12];
        v14 = &a2[v12];
        *(_OWORD *)v13 = *(_OWORD *)&a2[v12];
        v15 = *(_OWORD *)&a2[v12 + 16];
        v13[32] = a2[v12 + 32];
        *((_OWORD *)v13 + 1) = v15;
        v16 = *(int *)(sub_1000055B0((uint64_t *)&unk_1002B1DF0) + 56);
        v17 = &v13[v16];
        v18 = &v14[v16];
        v19 = type metadata accessor for UniversalControlDisplayLayout(0);
        if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v18, 1, v19))
        {
          v20 = sub_1000055B0((uint64_t *)&unk_1002B3380);
          memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
          _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v17, 0, 1, v19);
        }
        v21 = v11[20];
        v22 = &a1[v21];
        v23 = &a2[v21];
        *(_OWORD *)v22 = *(_OWORD *)v23;
        v24 = *((_OWORD *)v23 + 1);
        v22[32] = v23[32];
        *((_OWORD *)v22 + 1) = v24;
        *((_QWORD *)v22 + 5) = *((_QWORD *)v23 + 5);
        v25 = v11[24];
        v26 = &a1[v25];
        v27 = &a2[v25];
        *(_OWORD *)v26 = *(_OWORD *)&a2[v25];
        v28 = *(_OWORD *)&a2[v25 + 16];
        v26[32] = a2[v25 + 32];
        *((_OWORD *)v26 + 1) = v28;
        v30 = &a2[v25 + 40];
        v29 = *(_QWORD *)v30;
        swift_bridgeObjectRetain();
        if (v29)
        {
          *((_QWORD *)v26 + 5) = v29;
          *((_QWORD *)v26 + 6) = *((_QWORD *)v27 + 6);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)(v26 + 40) = *(_OWORD *)v30;
        }
        v31 = v11[28];
        v32 = &a1[v31];
        v33 = &a2[v31];
        *(_OWORD *)v32 = *(_OWORD *)v33;
        v34 = *((_OWORD *)v33 + 1);
        v32[32] = v33[32];
        *((_OWORD *)v32 + 1) = v34;
        v35 = *((_QWORD *)v33 + 5);
        if (v35 == 1)
        {
          v36 = v32 + 40;
          v37 = *(_OWORD *)(v33 + 40);
          *((_QWORD *)v36 + 2) = *((_QWORD *)v33 + 7);
          *(_OWORD *)v36 = v37;
        }
        else
        {
          *((_QWORD *)v32 + 5) = v35;
          *((_OWORD *)v32 + 3) = *((_OWORD *)v33 + 3);
          swift_bridgeObjectRetain();
        }
        v38 = v11[32];
        v39 = &a1[v38];
        v40 = &a2[v38];
        *(_OWORD *)v39 = *(_OWORD *)&a2[v38];
        v41 = *(_OWORD *)&a2[v38 + 16];
        v39[32] = a2[v38 + 32];
        *((_OWORD *)v39 + 1) = v41;
        v42 = *(int *)(sub_1000055B0((uint64_t *)&unk_1002B1E00) + 56);
        v43 = &v39[v42];
        v44 = &v40[v42];
        v45 = type metadata accessor for UniversalControlConfiguration(0);
        if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v44, 1, v45))
        {
          v46 = sub_1000055B0(&qword_1002B1438);
          memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v43, v44, v45);
          _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v43, 0, 1, v45);
        }
        v47 = v11[36];
        v48 = &a1[v47];
        v49 = &a2[v47];
        v50 = *(_OWORD *)v49;
        v51 = *((_OWORD *)v49 + 1);
        *(_DWORD *)(v48 + 31) = *(_DWORD *)(v49 + 31);
        *(_OWORD *)v48 = v50;
        *((_OWORD *)v48 + 1) = v51;
        v52 = sub_1000055B0(&qword_1002B1428);
        *(_QWORD *)&a1[*(int *)(v52 + 48)] = *(_QWORD *)&a2[*(int *)(v52 + 48)];
        *(_QWORD *)&a1[*(int *)(v52 + 64)] = *(_QWORD *)&a2[*(int *)(v52 + 64)];
        swift_bridgeObjectRetain();
        swift_retain();
        v7 = a1;
        v8 = a3;
        v9 = 2;
        goto LABEL_20;
      case 3u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_retain();
        v7 = a1;
        v8 = a3;
        v9 = 3;
LABEL_20:
        swift_storeEnumTagMultiPayload(v7, v8, v9);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

char *sub_1000FC348(char *a1, char *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  __int128 v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char *v31;
  char *v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  __int128 v42;
  uint64_t v43;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 2)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    v6 = (int *)sub_1000055B0(&qword_1002B1430);
    v7 = v6[16];
    v8 = &a1[v7];
    v9 = &a2[v7];
    v10 = *(_OWORD *)&a2[v7 + 16];
    *(_OWORD *)v8 = *(_OWORD *)&a2[v7];
    *((_OWORD *)v8 + 1) = v10;
    v8[32] = a2[v7 + 32];
    v11 = *(int *)(sub_1000055B0((uint64_t *)&unk_1002B1DF0) + 56);
    v12 = &v8[v11];
    v13 = &v9[v11];
    v14 = type metadata accessor for UniversalControlDisplayLayout(0);
    if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v13, 1, v14))
    {
      v15 = sub_1000055B0((uint64_t *)&unk_1002B3380);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
      _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v12, 0, 1, v14);
    }
    v16 = v6[20];
    v17 = &a1[v16];
    v18 = &a2[v16];
    v19 = *((_OWORD *)v18 + 1);
    *(_OWORD *)v17 = *(_OWORD *)v18;
    *((_OWORD *)v17 + 1) = v19;
    *((_OWORD *)v17 + 2) = *((_OWORD *)v18 + 2);
    v20 = v6[24];
    v21 = &a1[v20];
    v22 = &a2[v20];
    *((_QWORD *)v21 + 6) = *((_QWORD *)v22 + 6);
    v23 = *((_OWORD *)v22 + 2);
    v24 = *(_OWORD *)v22;
    *((_OWORD *)v21 + 1) = *((_OWORD *)v22 + 1);
    *((_OWORD *)v21 + 2) = v23;
    *(_OWORD *)v21 = v24;
    v25 = v6[28];
    v26 = &a1[v25];
    v27 = &a2[v25];
    v28 = *((_OWORD *)v27 + 1);
    *(_OWORD *)v26 = *(_OWORD *)v27;
    *((_OWORD *)v26 + 1) = v28;
    v29 = *((_OWORD *)v27 + 3);
    *((_OWORD *)v26 + 2) = *((_OWORD *)v27 + 2);
    *((_OWORD *)v26 + 3) = v29;
    v30 = v6[32];
    v31 = &a1[v30];
    v32 = &a2[v30];
    v33 = *(_OWORD *)&a2[v30 + 16];
    *(_OWORD *)v31 = *(_OWORD *)&a2[v30];
    *((_OWORD *)v31 + 1) = v33;
    v31[32] = a2[v30 + 32];
    v34 = *(int *)(sub_1000055B0((uint64_t *)&unk_1002B1E00) + 56);
    v35 = &v31[v34];
    v36 = &v32[v34];
    v37 = type metadata accessor for UniversalControlConfiguration(0);
    if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v36, 1, v37))
    {
      v38 = sub_1000055B0(&qword_1002B1438);
      memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v35, v36, v37);
      _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v35, 0, 1, v37);
    }
    v39 = v6[36];
    v40 = &a1[v39];
    v41 = &a2[v39];
    v42 = *((_OWORD *)v41 + 1);
    *(_OWORD *)v40 = *(_OWORD *)v41;
    *((_OWORD *)v40 + 1) = v42;
    *(_DWORD *)(v40 + 31) = *(_DWORD *)(v41 + 31);
    v43 = sub_1000055B0(&qword_1002B1428);
    *(_QWORD *)&a1[*(int *)(v43 + 48)] = *(_QWORD *)&a2[*(int *)(v43 + 48)];
    *(_QWORD *)&a1[*(int *)(v43 + 64)] = *(_QWORD *)&a2[*(int *)(v43 + 64)];
    swift_storeEnumTagMultiPayload(a1, a3, 2);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *sub_1000FC5D8(char *a1, char *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  __int128 v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char *v31;
  char *v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  __int128 v42;
  uint64_t v43;

  if (a1 != a2)
  {
    sub_1000255F0((uint64_t)a1, type metadata accessor for SyncCoordinator.Event);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 2)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      v6 = (int *)sub_1000055B0(&qword_1002B1430);
      v7 = v6[16];
      v8 = &a1[v7];
      v9 = &a2[v7];
      v10 = *(_OWORD *)&a2[v7 + 16];
      *(_OWORD *)v8 = *(_OWORD *)&a2[v7];
      *((_OWORD *)v8 + 1) = v10;
      v8[32] = a2[v7 + 32];
      v11 = *(int *)(sub_1000055B0((uint64_t *)&unk_1002B1DF0) + 56);
      v12 = &v8[v11];
      v13 = &v9[v11];
      v14 = type metadata accessor for UniversalControlDisplayLayout(0);
      if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v13, 1, v14))
      {
        v15 = sub_1000055B0((uint64_t *)&unk_1002B3380);
        memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
        _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v12, 0, 1, v14);
      }
      v16 = v6[20];
      v17 = &a1[v16];
      v18 = &a2[v16];
      v19 = *((_OWORD *)v18 + 1);
      *(_OWORD *)v17 = *(_OWORD *)v18;
      *((_OWORD *)v17 + 1) = v19;
      *((_OWORD *)v17 + 2) = *((_OWORD *)v18 + 2);
      v20 = v6[24];
      v21 = &a1[v20];
      v22 = &a2[v20];
      *((_QWORD *)v21 + 6) = *((_QWORD *)v22 + 6);
      v23 = *((_OWORD *)v22 + 2);
      v24 = *(_OWORD *)v22;
      *((_OWORD *)v21 + 1) = *((_OWORD *)v22 + 1);
      *((_OWORD *)v21 + 2) = v23;
      *(_OWORD *)v21 = v24;
      v25 = v6[28];
      v26 = &a1[v25];
      v27 = &a2[v25];
      v28 = *((_OWORD *)v27 + 1);
      *(_OWORD *)v26 = *(_OWORD *)v27;
      *((_OWORD *)v26 + 1) = v28;
      v29 = *((_OWORD *)v27 + 3);
      *((_OWORD *)v26 + 2) = *((_OWORD *)v27 + 2);
      *((_OWORD *)v26 + 3) = v29;
      v30 = v6[32];
      v31 = &a1[v30];
      v32 = &a2[v30];
      v33 = *(_OWORD *)&a2[v30 + 16];
      *(_OWORD *)v31 = *(_OWORD *)&a2[v30];
      *((_OWORD *)v31 + 1) = v33;
      v31[32] = a2[v30 + 32];
      v34 = *(int *)(sub_1000055B0((uint64_t *)&unk_1002B1E00) + 56);
      v35 = &v31[v34];
      v36 = &v32[v34];
      v37 = type metadata accessor for UniversalControlConfiguration(0);
      if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v36, 1, v37))
      {
        v38 = sub_1000055B0(&qword_1002B1438);
        memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v35, v36, v37);
        _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v35, 0, 1, v37);
      }
      v39 = v6[36];
      v40 = &a1[v39];
      v41 = &a2[v39];
      v42 = *((_OWORD *)v41 + 1);
      *(_OWORD *)v40 = *(_OWORD *)v41;
      *((_OWORD *)v40 + 1) = v42;
      *(_DWORD *)(v40 + 31) = *(_DWORD *)(v41 + 31);
      v43 = sub_1000055B0(&qword_1002B1428);
      *(_QWORD *)&a1[*(int *)(v43 + 48)] = *(_QWORD *)&a2[*(int *)(v43 + 48)];
      *(_QWORD *)&a1[*(int *)(v43 + 64)] = *(_QWORD *)&a2[*(int *)(v43 + 64)];
      swift_storeEnumTagMultiPayload(a1, a3, 2);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

void sub_1000FC880(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[8];
  _BYTE v7[32];
  _BYTE v8[32];
  _QWORD v9[4];

  v9[0] = "\b";
  v9[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v6[0] = "\b";
  v6[1] = &unk_100225B58;
  sub_1000FC980(319);
  if (v3 <= 0x3F)
  {
    v6[2] = *(_QWORD *)(v2 - 8) + 64;
    v6[3] = &unk_100225B58;
    v6[4] = &unk_100225B70;
    v6[5] = &unk_100225B88;
    sub_1000FCA34(319);
    if (v5 <= 0x3F)
    {
      v6[6] = *(_QWORD *)(v4 - 8) + 64;
      v6[7] = &unk_100225BA0;
      swift_getTupleTypeLayout(v7, 0, 8, v6);
      swift_getTupleTypeLayout3(v8, v7, "\b", (char *)&value witness table for Builtin.NativeObject + 64);
      v9[2] = v8;
      v9[3] = (char *)&value witness table for Builtin.NativeObject + 64;
      swift_initEnumMetadataMultiPayload(a1, 256, 4, v9);
    }
  }
}

void sub_1000FC980(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  if (!qword_1002B1E90)
  {
    v2 = type metadata accessor for UniversalControlDisplayLayout(255);
    sub_10000E330(&qword_1002B14F0, (uint64_t (*)(uint64_t))&type metadata accessor for UniversalControlDisplayLayout, (uint64_t)&protocol conformance descriptor for UniversalControlDisplayLayout);
    v4 = v3;
    sub_10000E330((unint64_t *)&unk_1002B1EA0, (uint64_t (*)(uint64_t))&type metadata accessor for UniversalControlDisplayLayout, (uint64_t)&protocol conformance descriptor for UniversalControlDisplayLayout);
    v8[0] = v2;
    v8[1] = &protocol witness table for UniversalControlDisplayLayout;
    v8[2] = v4;
    v8[3] = v5;
    v6 = type metadata accessor for SyncAtom(a1, (uint64_t)v8);
    if (!v7)
      atomic_store(v6, (unint64_t *)&qword_1002B1E90);
  }
}

void sub_1000FCA34(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  if (!qword_1002B14F8)
  {
    v2 = type metadata accessor for UniversalControlConfiguration(255);
    sub_10000E330(qword_1002B1EB0, (uint64_t (*)(uint64_t))&type metadata accessor for UniversalControlConfiguration, (uint64_t)&protocol conformance descriptor for UniversalControlConfiguration);
    v4 = v3;
    sub_10000E330((unint64_t *)&unk_1002B1500, (uint64_t (*)(uint64_t))&type metadata accessor for UniversalControlConfiguration, (uint64_t)&protocol conformance descriptor for UniversalControlConfiguration);
    v8[0] = v2;
    v8[1] = &protocol witness table for UniversalControlConfiguration;
    v8[2] = v4;
    v8[3] = v5;
    v6 = type metadata accessor for SyncAtom(a1, (uint64_t)v8);
    if (!v7)
      atomic_store(v6, (unint64_t *)&qword_1002B14F8);
  }
}

uint64_t destroy for SyncCoordinator.DiagnosticState(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[3];
  if (v2)
  {
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRelease(a1[4]);
    swift_bridgeObjectRelease(a1[5]);
    swift_bridgeObjectRelease(a1[7]);
    swift_bridgeObjectRelease(a1[9]);
  }
  swift_bridgeObjectRelease(a1[40]);
  swift_bridgeObjectRelease(a1[42]);
  return swift_bridgeObjectRelease(a1[43]);
}

_QWORD *initializeWithCopy for SyncCoordinator.DiagnosticState(_QWORD *__dst, _QWORD *__src)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = __src[3];
  if (v4)
  {
    *(_OWORD *)__dst = *(_OWORD *)__src;
    __dst[2] = __src[2];
    __dst[3] = v4;
    v5 = __src[4];
    v6 = __src[5];
    __dst[4] = v5;
    __dst[5] = v6;
    v7 = __src[7];
    __dst[6] = __src[6];
    __dst[7] = v7;
    v8 = __src[9];
    __dst[8] = __src[8];
    __dst[9] = v8;
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
  }
  else
  {
    memcpy(__dst, __src, 0x50uLL);
  }
  memcpy(__dst + 10, __src + 10, 0x72uLL);
  memcpy((char *)__dst + 194, (char *)__src + 194, 0x72uLL);
  v9 = __src[40];
  __dst[39] = __src[39];
  __dst[40] = v9;
  v10 = __src[42];
  __dst[41] = __src[41];
  __dst[42] = v10;
  v11 = __src[43];
  __dst[43] = v11;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  return __dst;
}

_QWORD *assignWithCopy for SyncCoordinator.DiagnosticState(_QWORD *__dst, _QWORD *__src)
{
  uint64_t v4;

  v4 = __src[3];
  if (!__dst[3])
  {
    if (v4)
    {
      *(_OWORD *)__dst = *(_OWORD *)__src;
      __dst[2] = __src[2];
      __dst[3] = __src[3];
      __dst[4] = __src[4];
      __dst[5] = __src[5];
      __dst[6] = __src[6];
      __dst[7] = __src[7];
      __dst[8] = __src[8];
      __dst[9] = __src[9];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
LABEL_7:
    memcpy(__dst, __src, 0x50uLL);
    goto LABEL_8;
  }
  if (!v4)
  {
    sub_1000FCE84(__dst);
    goto LABEL_7;
  }
  *(_BYTE *)__dst = *(_BYTE *)__src;
  *((_BYTE *)__dst + 1) = *((_BYTE *)__src + 1);
  *((_BYTE *)__dst + 2) = *((_BYTE *)__src + 2);
  *((_BYTE *)__dst + 3) = *((_BYTE *)__src + 3);
  *((_BYTE *)__dst + 4) = *((_BYTE *)__src + 4);
  *((_BYTE *)__dst + 5) = *((_BYTE *)__src + 5);
  *((_BYTE *)__dst + 6) = *((_BYTE *)__src + 6);
  *((_BYTE *)__dst + 7) = *((_BYTE *)__src + 7);
  *((_BYTE *)__dst + 8) = *((_BYTE *)__src + 8);
  *((_BYTE *)__dst + 9) = *((_BYTE *)__src + 9);
  *((_BYTE *)__dst + 10) = *((_BYTE *)__src + 10);
  *((_BYTE *)__dst + 11) = *((_BYTE *)__src + 11);
  *((_BYTE *)__dst + 12) = *((_BYTE *)__src + 12);
  *((_BYTE *)__dst + 13) = *((_BYTE *)__src + 13);
  *((_BYTE *)__dst + 14) = *((_BYTE *)__src + 14);
  *((_BYTE *)__dst + 15) = *((_BYTE *)__src + 15);
  __dst[2] = __src[2];
  __dst[3] = __src[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[4] = __src[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[5] = __src[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[6] = __src[6];
  __dst[7] = __src[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[8] = __src[8];
  __dst[9] = __src[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_8:
  memcpy(__dst + 10, __src + 10, 0x72uLL);
  memcpy((char *)__dst + 194, (char *)__src + 194, 0x72uLL);
  __dst[39] = __src[39];
  __dst[40] = __src[40];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[41] = __src[41];
  __dst[42] = __src[42];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[43] = __src[43];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return __dst;
}

_QWORD *sub_1000FCE84(_QWORD *a1)
{
  sub_1001689F0(a1);
  return a1;
}

void *initializeWithTake for SyncCoordinator.DiagnosticState(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x160uLL);
}

_QWORD *assignWithTake for SyncCoordinator.DiagnosticState(_QWORD *__dst, _QWORD *__src)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!__dst[3])
    goto LABEL_5;
  v4 = __src[3];
  if (!v4)
  {
    sub_1000FCE84(__dst);
LABEL_5:
    memcpy(__dst, __src, 0x50uLL);
    goto LABEL_6;
  }
  *(_OWORD *)__dst = *(_OWORD *)__src;
  __dst[2] = __src[2];
  __dst[3] = v4;
  swift_bridgeObjectRelease();
  __dst[4] = __src[4];
  swift_bridgeObjectRelease();
  __dst[5] = __src[5];
  swift_bridgeObjectRelease();
  v5 = __src[7];
  __dst[6] = __src[6];
  __dst[7] = v5;
  swift_bridgeObjectRelease();
  v6 = __src[9];
  __dst[8] = __src[8];
  __dst[9] = v6;
  swift_bridgeObjectRelease();
LABEL_6:
  memcpy(__dst + 10, __src + 10, 0x72uLL);
  memcpy((char *)__dst + 194, (char *)__src + 194, 0x72uLL);
  v7 = __src[40];
  __dst[39] = __src[39];
  __dst[40] = v7;
  swift_bridgeObjectRelease();
  v8 = __src[42];
  __dst[41] = __src[41];
  __dst[42] = v8;
  swift_bridgeObjectRelease();
  __dst[43] = __src[43];
  swift_bridgeObjectRelease();
  return __dst;
}

uint64_t getEnumTagSinglePayload for SyncCoordinator.DiagnosticState(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 352))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 336);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SyncCoordinator.DiagnosticState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 344) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 352) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 336) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 352) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SyncCoordinator.DiagnosticState()
{
  return &type metadata for SyncCoordinator.DiagnosticState;
}

unint64_t sub_1000FD0A4()
{
  unint64_t result;

  result = qword_1002B1530;
  if (!qword_1002B1530)
  {
    result = swift_getWitnessTable(&unk_100225C80, &type metadata for SyncCoordinator.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B1530);
  }
  return result;
}

unint64_t sub_1000FD0E4()
{
  unint64_t result;

  result = qword_1002B1538;
  if (!qword_1002B1538)
  {
    result = swift_getWitnessTable(&unk_100225BF0, &type metadata for SyncCoordinator.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B1538);
  }
  return result;
}

unint64_t sub_1000FD124()
{
  unint64_t result;

  result = qword_1002B1540;
  if (!qword_1002B1540)
  {
    result = swift_getWitnessTable(&unk_100225C18, &type metadata for SyncCoordinator.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B1540);
  }
  return result;
}

unint64_t sub_1000FD160()
{
  unint64_t result;

  result = qword_1002B3590;
  if (!qword_1002B3590)
  {
    result = swift_getWitnessTable(&unk_100227DB4, &unk_10028E040);
    atomic_store(result, (unint64_t *)&qword_1002B3590);
  }
  return result;
}

unint64_t sub_1000FD19C()
{
  unint64_t result;

  result = qword_1002B1550;
  if (!qword_1002B1550)
  {
    result = swift_getWitnessTable(&unk_100220454, &type metadata for SyncViewSignature);
    atomic_store(result, (unint64_t *)&qword_1002B1550);
  }
  return result;
}

uint64_t sub_1000FD1D8(unint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_10000DCA0(&qword_1002AA560);
    a2();
    result = swift_getWitnessTable(a3, v7);
    atomic_store(result, a1);
  }
  return result;
}

double sub_1000FD244()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(v0 + 320);
  *(_BYTE *)(v1 + 112) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)v1 = 0u;
  *(_BYTE *)(*(_QWORD *)(v0 + 336) + 25) = 1;
  return result;
}

uint64_t sub_1000FD270()
{
  uint64_t v0;

  return swift_release_n(v0, 2);
}

void sub_1000FD27C(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t sub_1000FD290@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_bridgeObjectRetain(*(_QWORD *)(v1 + a1 + 8));
}

uint64_t sub_1000FD2A0()
{
  uint64_t v0;

  return swift_retain_n(v0, 2);
}

uint64_t sub_1000FD2AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t sub_1000FD2BC@<X0>(uint64_t a1@<X8>, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  return swift_beginAccess(v2 + a1, va, 0, 0);
}

uint64_t sub_1000FD2D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  return sub_10005F5EC(a1, a2, a3, v12, v11, v10[41], v10[42], v10[43], a9, a10);
}

uint64_t sub_1000FD2F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v3, v2);
}

uint64_t sub_1000FD300()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1000FD30C(uint64_t a1)
{
  return Logger.logObject.getter(a1);
}

uint64_t sub_1000FD314()
{
  uint64_t v0;

  return sub_1000FB3FC(v0);
}

uint64_t sub_1000FD324()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 368);
}

void sub_1000FD34C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_1000FB57C(a1, a2, v2);
}

uint64_t sub_1000FD354()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t sub_1000FD360()
{
  uint64_t v0;

  return sub_1000FB3EC(v0);
}

uint64_t sub_1000FD384()
{
  return type metadata accessor for SyncViewRemoteData(0);
}

void sub_1000FD3A4(float a1)
{
  float *v1;

  *v1 = a1;
}

void sub_1000FD3B0(char a1@<W8>)
{
  _BYTE *v1;

  *v1 = a1;
}

uint64_t sub_1000FD3C8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000FD3D4(char *a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char *a16)
{
  return sub_1000FADC8(a1, a2, a3, a16);
}

uint64_t sub_1000FD3E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v4, a4);
}

void sub_1000FD3E8()
{
  sub_10006C984();
}

uint64_t sub_1000FD3F4(uint64_t result, float a2)
{
  uint64_t v2;
  float *v3;

  *v3 = a2;
  *(_QWORD *)(v2 + 472) = result;
  return result;
}

uint64_t sub_1000FD408()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 2);
}

uint64_t sub_1000FD414@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_weakLoadStrong(v1 + a1);
}

void sub_1000FD41C(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_1000255F0(v2, a2);
}

uint64_t sub_1000FD424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  *(_QWORD *)(a12 + 16) = 0;
  return swift_bridgeObjectRelease(a12);
}

_QWORD *sub_1000FD430(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v3 = v2;
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v5);
    result = (_QWORD *)sub_10019D15C(a1);
    v9 = (uint64_t)result;
    v11 = v10 & 1;
    while ((v9 & 0x8000000000000000) == 0 && v9 < 1 << *(_BYTE *)(a1 + 32))
    {
      if (((*(_QWORD *)(a1 + 56 + (((unint64_t)v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_14;
      if (*(_DWORD *)(a1 + 36) != (_DWORD)v8)
        goto LABEL_15;
      v12 = v8;
      v13 = sub_1000FDECC(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v9), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v9 + 8));
      if (v3)
      {
        swift_release();
        swift_release();
        return _swiftEmptyArrayStorage;
      }
      v14 = v13;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
      v15 = a2;
      v16 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v16);
      v17 = v16;
      a2 = v15;
      v18 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v14);
      specialized ContiguousArray._endMutation()(v18);
      result = (_QWORD *)sub_10019D074(v9, v12, v11 & 1, a1);
      v9 = (uint64_t)result;
      v11 = v19 & 1;
      --v5;
      v3 = 0;
      if (!v5)
      {
        sub_100025618((uint64_t)result, v8, v19 & 1);
        swift_release();
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
  }
  else
  {
    swift_release();
    return _swiftEmptyArrayStorage;
  }
  return result;
}

void sub_1000FD5D8(uint64_t a1)
{
  uint64_t v1;
  os_log_type_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  BOOL v17;
  unint64_t v18;
  char v19;
  int64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  int64_t v27;
  char v28[24];

  v3 = v1;
  v4 = Logger.logObject.getter(a1);
  v6 = static os_log_type_t.default.getter(v4, v5);
  if (sub_100040394(v6))
  {
    v7 = (uint8_t *)sub_10000797C(2);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v2, "=== Disconnect ===", v7, 2u);
    sub_100007958((uint64_t)v7);
  }

  v8 = (uint64_t *)(v3 + OBJC_IVAR____TtC13EnsembleAgent13P2PController_peers);
  sub_1000C7F2C(v9, (uint64_t)v28);
  v10 = *v8;
  v26 = *v8 + 64;
  v11 = 1 << *(_BYTE *)(*v8 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(*v8 + 64);
  v27 = (unint64_t)(v11 + 63) >> 6;
  sub_100040544();
  v14 = 0;
  if (!v13)
    goto LABEL_7;
LABEL_6:
  v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (i = v15 | (v14 << 6); ; i = __clz(__rbit64(v18)) + (v14 << 6))
  {
    v21 = (unint64_t *)(*(_QWORD *)(v10 + 48) + 16 * i);
    v22 = *v21;
    v23 = v21[1];
    v24 = type metadata accessor for Completion();
    sub_1000088D8(v24, 48);
    v25 = Completion.init(file:line:)();
    sub_1000FE004(v22, v23, (uint64_t)v25);
    sub_10000B364();
    if (v13)
      goto LABEL_6;
LABEL_7:
    v17 = __OFADD__(v14++, 1);
    if (v17)
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v14 >= v27)
      goto LABEL_33;
    v18 = *(_QWORD *)(v26 + 8 * v14);
    if (!v18)
      break;
LABEL_26:
    v13 = (v18 - 1) & v18;
  }
  sub_10010188C();
  if (v19 == v17)
    goto LABEL_33;
  sub_100101880();
  if (v18)
    goto LABEL_25;
  sub_10010188C();
  if (v19 == v17)
    goto LABEL_33;
  sub_100101880();
  if (v18)
    goto LABEL_25;
  sub_10010188C();
  if (v19 == v17)
    goto LABEL_33;
  sub_100101880();
  if (v18)
    goto LABEL_25;
  sub_10010188C();
  if (v19 == v17)
    goto LABEL_33;
  sub_100101880();
  if (v18)
    goto LABEL_25;
  sub_10010188C();
  if (v19 == v17)
  {
LABEL_33:
    swift_release();
    return;
  }
  sub_100101880();
  if (v18)
  {
LABEL_25:
    v14 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v14 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v14 >= v27)
      goto LABEL_33;
    v18 = *(_QWORD *)(v26 + 8 * v14);
    ++v20;
    if (v18)
      goto LABEL_26;
  }
LABEL_35:
  __break(1u);
}

void sub_1000FD83C(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE v57[24];
  _BYTE v58[24];
  uint64_t v59[8];

  v2 = v1;
  v52 = sub_10000E440();
  sub_10010192C(*(_QWORD *)(v52 - 8));
  __chkstk_darwin(v4);
  sub_10002641C();
  sub_100101920(v6 - v5);
  v8 = *(_QWORD *)(v1 + 32);
  if (v8)
  {
    v9 = v8 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties;
    sub_1000C7F2C(v7, (uint64_t)v58);
    v10 = (uint64_t *)(v9 + *(int *)(type metadata accessor for P2PDevice.Properties(0) + 36));
    v11 = *v10;
    v12 = v10[1];
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v13 = *(_QWORD *)(sub_1000CB13C() + 48);
  swift_retain(v13);
  sub_10000B348();
  RapportStreamServer.description.getter();
  v15 = v14;
  v17 = v16;
  swift_release();
  v18 = sub_1000CB894();
  if (v18)
  {
    sub_100180AF4();
    v46 = v19;
    v18 = sub_10000B348();
  }
  else
  {
    v46 = 0;
  }
  v20 = (uint64_t *)(v2 + OBJC_IVAR____TtC13EnsembleAgent13P2PController_peers);
  sub_1000C7F2C(v18, (uint64_t)v57);
  v21 = *v20;
  swift_bridgeObjectRetain_n(v21, 2);
  v22 = sub_100058264(v21);
  sub_10000E420();
  v59[0] = v22;
  sub_100100170(v59);
  sub_10000E420();
  v23 = v59[0];
  if ((v59[0] & 0x8000000000000000) == 0 && (v59[0] & 0x4000000000000000) == 0)
  {
    v24 = *(_QWORD *)(v59[0] + 16);
    if (v24)
      goto LABEL_10;
LABEL_22:
    sub_1000269A0();
LABEL_23:
    sub_10004F6F4((uint64_t)_swiftEmptyArrayStorage);
    *(_QWORD *)a1 = 31;
    *(_QWORD *)(a1 + 8) = v11;
    *(_QWORD *)(a1 + 16) = v12;
    *(_BYTE *)(a1 + 24) = v8 == 0;
    *(_QWORD *)(a1 + 32) = v15;
    *(_QWORD *)(a1 + 40) = v17;
    *(_QWORD *)(a1 + 48) = v46;
    *(_QWORD *)(a1 + 56) = v39;
    sub_10000E4E0();
    return;
  }
  v38 = sub_100043360();
  v24 = _CocoaArrayWrapper.endIndex.getter(v38);
  sub_1000269A0();
  if (!v24)
    goto LABEL_22;
LABEL_10:
  sub_1000588E0();
  if ((v24 & 0x8000000000000000) == 0)
  {
    v40 = v17;
    v41 = v15;
    v42 = v12;
    v43 = v11;
    v44 = v8;
    v45 = a1;
    v25 = 0;
    v47 = v23 & 0xC000000000000001;
    v49 = v23;
    v48 = v24;
    do
    {
      if (v47)
      {
        v26 = (unsigned __int8 *)specialized _ArrayBuffer._getElementSlowPath(_:)(v25, v23);
      }
      else
      {
        v26 = *(unsigned __int8 **)(v23 + 8 * v25 + 32);
        sub_100060200();
      }
      v27 = UUID.init(uuid:)(v26[24], v26[25], v26[26], v26[27], v26[28], v26[29], v26[30], v26[31]);
      v28 = UUID.uuidString.getter(v27);
      v55 = v29;
      v56 = v28;
      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v50, v52);
      sub_100111DFC();
      v30 = v59[0];
      v31 = v59[1];
      v32 = v59[2];
      v33 = v59[4];
      v34 = v59[5];
      v35 = v59[6];
      v53 = v59[7];
      v54 = v59[3];
      swift_release();
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
        sub_1000588E0();
      v36 = _swiftEmptyArrayStorage[2];
      if (v36 >= _swiftEmptyArrayStorage[3] >> 1)
        sub_1000588E0();
      ++v25;
      _swiftEmptyArrayStorage[2] = v36 + 1;
      v37 = &_swiftEmptyArrayStorage[10 * v36];
      v37[4] = v56;
      v37[5] = v55;
      v37[6] = v30;
      v37[7] = v31;
      v37[8] = v32;
      v37[9] = v54;
      v37[10] = v33;
      v37[11] = v34;
      v37[12] = v35;
      v37[13] = v53;
      v23 = v49;
    }
    while (v48 != v25);
    sub_1000269A0();
    a1 = v45;
    v8 = v44;
    v11 = v43;
    v12 = v42;
    v15 = v41;
    v17 = v40;
    goto LABEL_23;
  }
  __break(1u);
  swift_release();
  __break(1u);
}

uint64_t sub_1000FDC0C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, _QWORD *))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  if (*(_QWORD *)(a1 + 16))
  {
    swift_bridgeObjectRetain();
    sub_1000DF7F4();
    v9 = v8;
    swift_retain();
    v10 = (uint64_t)sub_1000FD430(v9, v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = sub_1000FDFAC();
  }
  v11 = sub_1000088D8((uint64_t)&unk_10028BDE8, 24);
  v12 = sub_1000055B0(&qword_1002AA6B0);
  v13 = sub_100033B3C();
  *(_QWORD *)(v11 + 16) = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for UniversalControlDeviceID, v12, v13);
  v14 = (_QWORD *)sub_1000088D8((uint64_t)&unk_10028BE10, 40);
  v14[2] = a2;
  v14[3] = a3;
  v14[4] = v11;
  v15 = type metadata accessor for Completion();
  sub_1000088D8(v15, 48);
  sub_100026AE4();
  swift_retain();
  v16 = Completion.init(file:line:body:)(0xD00000000000005CLL, 0x8000000100256870, 95, (uint64_t)sub_1001012A4, (uint64_t)v14);
  v17 = type metadata accessor for CompletionGroup();
  v18 = sub_1000088D8(v17, 32);
  swift_retain();
  sub_1000C53B0(v10, 0xD00000000000005CLL, 0x8000000100256870, 97, (uint64_t)v16, v18, v11, a4);
  sub_1000269A0();
  return swift_release();
}

uint64_t sub_1000FDE1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  swift_unknownObjectRetain(a1);
  swift_unknownObjectRelease(v4);
  sub_1000FDE5C();
  return swift_unknownObjectRelease(a1);
}

uint64_t sub_1000FDE5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent13P2PController_sink);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent13P2PController_sink + 8);
    swift_getObjectType(v2);
    swift_bridgeObjectRetain(v1);
    swift_unknownObjectRetain(v2);
    OS_dispatch_source_data_add.add(data:)(1uLL);
    swift_unknownObjectRelease(v2);
    return swift_bridgeObjectRelease(v1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_1000FDECC(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  id v10;
  _BYTE v12[24];

  v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC13EnsembleAgent13P2PController_peers);
  sub_100101938((uint64_t)v5, (uint64_t)v12);
  v6 = *v5;
  if (*(_QWORD *)(v6 + 16) && (v7 = sub_1001A8C70(a1, a2), (v8 & 1) != 0))
  {
    v9 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v7);
    swift_endAccess(v12);
    swift_retain(v9);
  }
  else
  {
    swift_endAccess(v12);
    v9 = sub_1000136A0();
    v10 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(-6727, 0xD000000000000015, 0x80000001002579D0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Ensemble_executables/EnsembleAgent/P2PController.swift", 92, 2, 49);
    swift_willThrow(v10);
  }
  return v9;
}

uint64_t sub_1000FDFAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[24];

  sub_10000B2F8(v0 + OBJC_IVAR____TtC13EnsembleAgent13P2PController_peers, (uint64_t)v4, 0);
  swift_bridgeObjectRetain();
  v2 = sub_100058264(v1);
  sub_10000E410();
  return v2;
}

void sub_1000FE004(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint8_t *v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  id v30;
  _DWORD *v31;
  uint8_t *v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38[4];
  uint64_t v39;
  uint64_t v40;

  v7 = v4;
  v37 = *v4;
  type metadata accessor for UUID(0);
  sub_1001018E4();
  __chkstk_darwin(v11);
  sub_1000432FC();
  v13 = Logger.logObject.getter(v12);
  v36 = static os_log_type_t.default.getter(v13, v14);
  if (os_log_type_enabled(v13, v36))
  {
    v34 = v13;
    v35 = a3;
    sub_100101920(a2 >> 40);
    sub_10010192C(HIDWORD(a2));
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v33 = swift_slowAlloc(32, -1);
    v38[0] = v33;
    *(_DWORD *)v15 = 136446210;
    v16 = v15 + 12;
    v31 = v15 + 4;
    v32 = v15;
    v17 = UUID.init(uuid:)(a1, a1 >> 8, a1 >> 16, a1 >> 24, HIDWORD(a1), a1 >> 40, HIWORD(a1), HIBYTE(a1));
    v18 = UUID.uuidString.getter(v17);
    v20 = v19;
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v3);
    v21 = v20;
    a3 = v35;
    v22 = sub_1000599D0(8, v18, v21);
    v24 = v23;
    v25 = static String._fromSubstring(_:)(v22);
    v27 = v26;
    swift_bridgeObjectRelease(v24);
    v39 = sub_100006FCC(v25, v27, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v31, v16);
    swift_bridgeObjectRelease(v27);
    _os_log_impl((void *)&_mh_execute_header, v34, v36, "=== Disconnect %{public}s ===", v32, 0xCu);
    swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
    sub_100007958(v33);
    sub_100007958((uint64_t)v32);

  }
  else
  {

  }
  sub_10010119C();
  ObservableObject<>.objectWillChange.getter(v37);
  ObservableObjectPublisher.send()();
  swift_release();
  v28 = (_QWORD *)((char *)v7 + OBJC_IVAR____TtC13EnsembleAgent13P2PController_peers);
  sub_100101938((uint64_t)v7 + OBJC_IVAR____TtC13EnsembleAgent13P2PController_peers, (uint64_t)v38);
  sub_100041C38(a1, a2, *v28);
  if (v29)
  {
    swift_endAccess(v38);
    sub_100111C64(a3, 0);
    swift_release();
  }
  else
  {
    swift_endAccess(v38);
    sub_1000136A0();
    v30 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(-6727, 0, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Ensemble_executables/EnsembleAgent/P2PController.swift", 92, 2, 75);
    swift_willThrow(v30);
  }
  sub_10003AF60();
}

void sub_1000FE348()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release();
  swift_release();
  v1 = v0 + OBJC_IVAR____TtC13EnsembleAgent13P2PController_logger;
  v2 = sub_10000F6E4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  sub_10002D108(*(_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent13P2PController_sink), *(_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent13P2PController_sink + 8));
  swift_bridgeObjectRelease();
  sub_1000050D4();
}

uint64_t sub_1000FE3D4()
{
  uint64_t v0;

  sub_1000FE348();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000FE3F8()
{
  return type metadata accessor for P2PController(0);
}

uint64_t type metadata accessor for P2PController(uint64_t a1)
{
  uint64_t result;

  result = qword_1002B1598;
  if (!qword_1002B1598)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for P2PController);
  return result;
}

uint64_t sub_1000FE438(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = &unk_100225D38;
  v4[1] = &unk_100225D50;
  v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    v4[4] = &unk_100225D68;
    v4[5] = &unk_100225D38;
    v4[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 7, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1000FE4E0(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[24];

  swift_beginAccess(a4 + 16, v10, 0, 0);
  v7 = *(_QWORD *)(a4 + 16);
  v8 = swift_bridgeObjectRetain(v7);
  a2(v8, a1);
  return swift_bridgeObjectRelease(v7);
}

uint64_t sub_1000FE548(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[24];

  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(a3 + 32);
  sub_10000B2F8(a2 + 16, (uint64_t)v7, 33);
  swift_errorRetain(a1);
  sub_1001AAADC(a1, v4, v5);
  swift_endAccess(v7);
  return Completion.callAsFunction(_:)(0);
}

uint64_t sub_1000FE5C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  if (a2)
  {
    v2 = a2;
    swift_errorRetain(a2);
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_1000585F0();
    v4 = v3;
    sub_10000E594();
    v10 = v4;
    sub_1001001E8(&v10);
    v5 = v10;
    v6 = *(_QWORD *)(v10 + 16);
    if (v6)
    {
      sub_10002D790();
      v7 = 48;
      while (1)
      {
        v8 = *(_QWORD *)(v5 + v7);
        if (v8)
          break;
        sub_1001018DC();
        v7 += 24;
        if (!--v6)
        {
          sub_10000F644();
          goto LABEL_9;
        }
      }
      swift_errorRetain(*(_QWORD *)(v5 + v7));
      sub_10000F644();
      v2 = _convertErrorToNSError(_:)(v8);
      sub_10005FF90();
      sub_1001018DC();
    }
    else
    {
      swift_release();
LABEL_9:
      sub_1001018DC();
      v2 = 0;
    }
  }
  Completion.callAsFunction(_:)(v2);
  return swift_errorRelease(v2);
}

void sub_1000FE6B8(uint64_t a1, uint64_t a2)
{
  sub_1001158BC(0, 0, 1, a2 | 0x2000000000000000);
}

void sub_1000FE6F0(uint64_t a1, uint64_t a2)
{
  sub_100111C64(a2, 0);
}

uint64_t sub_1000FE720(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v9;
  unint64_t v11;
  char v13;

  if (a1 == 0xD000000000000014)
  {
    v4 = 0x8000000100257AA0;
    if (a2 == 0x8000000100257AA0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000100257AA0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v7 = 0xE200000000000000;
    goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 1802398060 && a2 == 0xE400000000000000)
  {
    v9 = 0xE400000000000000;
    goto LABEL_21;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1802398060, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_21:
    swift_bridgeObjectRelease(v9);
    return 2;
  }
  if (a1 == 0x6C61636F6CLL && a2 == 0xE500000000000000)
  {
    v11 = 0xE500000000000000;
    goto LABEL_29;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C61636F6CLL, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
LABEL_29:
    swift_bridgeObjectRelease(v11);
    return 3;
  }
  if (a1 == 0x7372656570 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 4;
  }
  else
  {
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7372656570, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v13 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_1000FE8F8(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1000FE930 + 4 * byte_100225CF8[a1]))(0xD000000000000014, 0x8000000100257AA0);
}

uint64_t sub_1000FE930()
{
  return 25705;
}

uint64_t sub_1000FE93C()
{
  return 1802398060;
}

uint64_t sub_1000FE94C()
{
  return 0x6C61636F6CLL;
}

uint64_t sub_1000FE960()
{
  return 0x7372656570;
}

uint64_t sub_1000FE974(_QWORD *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v29;
  _QWORD v30[3];
  _BYTE v31[15];
  _BYTE v32[17];

  v5 = v2;
  sub_1000055B0(&qword_1002B1670);
  sub_1001018E4();
  __chkstk_darwin(v7);
  sub_10002641C();
  v10 = v9 - v8;
  v11 = a1[3];
  v12 = a1[4];
  sub_10000DBE4(a1, v11);
  v13 = sub_1001000F8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for P2PController.DiagnosticState.CodingKeys, &type metadata for P2PController.DiagnosticState.CodingKeys, v13, v11, v12);
  v14 = *v5;
  LOBYTE(v30[0]) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v14, v30, v1);
  if (!v3)
  {
    sub_100101860((uint64_t)(v5 + 1), (uint64_t)v32);
    sub_100101860((uint64_t)v32, (uint64_t)v30);
    v29 = 1;
    v15 = sub_10003668C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v30, &v29, v1, &type metadata for UniversalControlDeviceID, v15);
    v16 = v5[4];
    v17 = v5[5];
    LOBYTE(v30[0]) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, v30, v1);
    sub_100101860((uint64_t)(v5 + 6), (uint64_t)v31);
    sub_100101860((uint64_t)v31, (uint64_t)v30);
    v29 = 3;
    sub_1000055B0((uint64_t *)&unk_1002AC160);
    sub_100101684((unint64_t *)&qword_1002B2910, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    v18 = sub_100101828();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v18, v19, v20, v21, v22);
    v30[0] = v5[7];
    v29 = 4;
    sub_1000055B0(&qword_1002B1680);
    sub_1001016E4(&qword_1002B1688, (void (*)(void))sub_100100134, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <> [A : B]);
    v23 = sub_100101828();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v23, v24, v25, v26, v27);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v10, v1);
}

void sub_1000FEB84(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  int v42;
  char v43;

  v5 = sub_1000055B0(&qword_1002B16A8);
  sub_10009C6E8();
  __chkstk_darwin(v6);
  sub_1000432FC();
  v7 = a1[3];
  v8 = a1[4];
  sub_10000DBE4(a1, v7);
  v9 = sub_1001000F8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for P2PController.DiagnosticState.CodingKeys, &type metadata for P2PController.DiagnosticState.CodingKeys, v9, v7, v8);
  if (v2)
  {
    v18 = 0;
  }
  else
  {
    LOBYTE(v40[0]) = 0;
    v10 = sub_100101904();
    v12 = KeyedDecodingContainer.decode(_:forKey:)(v10, v11);
    v43 = 1;
    v13 = sub_10003A380();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v40, &type metadata for UniversalControlDeviceID, &v43, v5, &type metadata for UniversalControlDeviceID, v13, v14);
    v38 = v40[1];
    v39 = v40[0];
    v42 = v41;
    LOBYTE(v40[0]) = 2;
    v15 = sub_100101904();
    v17 = KeyedDecodingContainer.decode(_:forKey:)(v15, v16);
    v20 = v19;
    v37 = v17;
    sub_1000055B0((uint64_t *)&unk_1002AC160);
    v43 = 3;
    v21 = sub_100101684(&qword_1002AD110, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    swift_bridgeObjectRetain();
    v22 = sub_1001017F4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v27, v22, v23, v24, v25, v26, v28);
    if (!v21)
    {
      v36 = a2;
      v29 = v40[0];
      sub_1000055B0(&qword_1002B1680);
      v43 = 4;
      v30 = sub_1001016E4(&qword_1002B16B0, (void (*)(void))sub_100101758, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <> [A : B]);
      swift_bridgeObjectRetain();
      v31 = sub_1001017F4();
      KeyedDecodingContainer.decode<A>(_:forKey:)(v31, v32, v33, v34);
      if (!v30)
      {
        sub_1001017E4();
        v35 = v40[0];
        swift_bridgeObjectRetain();
        sub_10003AFBC();
        sub_10000E4A0();
        sub_10008503C();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_10000E4A0();
        *(_QWORD *)v36 = v12;
        *(_QWORD *)(v36 + 8) = v39;
        *(_QWORD *)(v36 + 16) = v38;
        *(_BYTE *)(v36 + 24) = v42;
        *(_QWORD *)(v36 + 32) = v37;
        *(_QWORD *)(v36 + 40) = v20;
        *(_QWORD *)(v36 + 48) = v29;
        *(_QWORD *)(v36 + 56) = v35;
        goto LABEL_7;
      }
      sub_1001017E4();
      sub_10000E4A0();
      swift_bridgeObjectRelease();
      sub_10008503C();
      goto LABEL_5;
    }
    sub_1001017E4();
    sub_10000E4A0();
    v18 = 1;
  }
  sub_10008503C();
  if (v18)
LABEL_5:
    sub_10000E4A0();
  swift_bridgeObjectRelease();
LABEL_7:
  sub_10003AF60();
}

uint64_t sub_1000FEE08()
{
  unsigned __int8 *v0;

  return sub_1000FE8F8(*v0);
}

uint64_t sub_1000FEE10@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000FE720(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000FEE34(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001000F8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000FEE5C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001000F8();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1000FEE84@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[2];
  __int128 v8;
  __int128 v9;

  sub_1000FEB84(a1, (uint64_t)v7);
  if (!v2)
  {
    v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    result = *(double *)&v8;
    v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }
  return result;
}

uint64_t sub_1000FEEC4(_QWORD *a1)
{
  return sub_1000FE974(a1);
}

uint64_t sub_1000FEEFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 v6;
  uint64_t result;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v6 = swift_bridgeObjectRetain(a2);
  result = UniversalControlUUID.init(stringValue:)(a1, a2, v6);
  if ((v8 & 1) == 0)
  {
    v9 = UniversalControlDeviceID.init(rawValue:)(result);
    sub_1000FDECC(v9, v10);
    v11 = type metadata accessor for Completion();
    swift_allocObject(v11, 48, 7);
    v12 = Completion.init(file:line:)();
    sub_100111C64((uint64_t)v12, a3);
    swift_release();
    return swift_release();
  }
  return result;
}

void sub_1000FEFDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  os_log_type_t v37;
  int v38;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  id v71;
  unint64_t v72;
  id v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t *v90;
  NSObject *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;

  v9 = sub_10000F6E4();
  v100 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_10002641C();
  v12 = v11 - v10;
  v13 = sub_10000E440();
  sub_10009C6E8();
  __chkstk_darwin(v14);
  sub_1000A3710();
  sub_100040544();
  v99 = a3;
  v16 = UniversalControlUUID.init(stringValue:)(a3, a4, v15);
  if ((v17 & 1) != 0)
  {
    sub_100040400();
    v22 = sub_1001017B4();
    v28 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(v22, v23, v24, v25, v26, v27, 192);
    swift_willThrow(v28);
    v61 = v99;
    if (qword_1002A9800 != -1)
      swift_once(&qword_1002A9800, sub_100026BF4);
    v62 = sub_100006FB4(v9, (uint64_t)qword_1002B6D10);
    v63 = v100;
    v64 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v100 + 16))(v12, v62, v9);
    v65 = __chkstk_darwin(v64);
    *(&v72 - 4) = a1;
    *(&v72 - 3) = v61;
    __chkstk_darwin(v65);
    v71 = v28;
    sub_1000E45AC((int)sub_100101230, v66, (int)sub_10000B008, (int)(&v72 - 4), v67, v68, v69, v70, v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82,
      v83,
      v84,
      v85,
      v86,
      v87);
    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v12, v9);
    sub_1000FEEFC(v61, a4, (uint64_t)v28);
    swift_errorRelease(v28);
  }
  else
  {
    v97 = v13;
    v98 = a4;
    v18 = UniversalControlDeviceID.init(rawValue:)(v16);
    v20 = v19;
    v21 = sub_10003AFBC();
    v92 = v9;
    v95 = v20;
    v29 = sub_100089838(v21);
    v31 = v30;
    v33 = v32;
    swift_bridgeObjectRelease();
    sub_100060200();
    sub_1001018C8(v29);
    sub_100060200();
    v96 = v29;
    v93 = v33;
    v94 = v31;
    v34 = sub_1001018C8(v29);
    v35 = Logger.logObject.getter(v34);
    v37 = static os_log_type_t.default.getter(v35, v36);
    v38 = v37;
    v91 = v35;
    if (os_log_type_enabled(v35, v37))
    {
      v89 = v38;
      v40 = a1;
      v41 = v18;
      v85 = v18 >> 16;
      v86 = v18 >> 8;
      v84 = v18 >> 24;
      sub_10010192C(HIDWORD(v18));
      sub_100101920(v18 >> 40);
      v81 = HIWORD(v18);
      v80 = HIBYTE(v18);
      v42 = v95;
      v79 = v95 >> 8;
      v78 = v95 >> 16;
      v77 = v95 >> 24;
      v76 = HIDWORD(v95);
      v75 = v95 >> 40;
      v73 = (id)HIWORD(v95);
      v72 = HIBYTE(v95);
      v43 = sub_10000797C(32);
      v88 = sub_10000797C(96);
      v102 = v88;
      *(_DWORD *)v43 = 136446722;
      v87 = v40;
      sub_100043360();
      v101 = sub_100101818();
      v90 = &v102;
      sub_100101898((uint64_t)&v101, (uint64_t)&v102, v43 + 12, (uint64_t)&v103);
      sub_10000F644();
      sub_10000E594();
      *(_WORD *)(v43 + 12) = 2082;
      v74 = v43 + 14;
      HIBYTE(v71) = v72;
      BYTE6(v71) = (_BYTE)v73;
      BYTE5(v71) = v75;
      BYTE4(v71) = v76;
      BYTE3(v71) = v77;
      BYTE2(v71) = v78;
      BYTE1(v71) = v79;
      LOBYTE(v71) = v42;
      v44 = UUID.init(uuid:)(v41, v86, v85, v84, v83, v82);
      UUID.uuidString.getter(v44);
      (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v5, v97);
      v45 = sub_1001018A0();
      v35 = v46;
      static String._fromSubstring(_:)(v45);
      sub_10000E410();
      v101 = sub_100101818();
      sub_100101898((uint64_t)&v101, (uint64_t)v90, v43 + 22, (uint64_t)&v103);
      sub_10000E594();
      *(_WORD *)(v43 + 22) = 2082;
      v47 = sub_100101868();
      sub_10008A214(v47, v48, v49);
      sub_100089498(v5, v4, (unint64_t)v35);
      v51 = v50;
      v53 = v52;
      sub_1001017A4();
      v54 = v51;
      v55 = v41;
      v101 = sub_100006FCC(v54, v53, &v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, v90, v43 + 24);
      sub_10000E594();
      sub_1001017A4();
      sub_1001017A4();
      _os_log_impl((void *)&_mh_execute_header, v91, (os_log_type_t)v89, "%{public}s: Received Message from IDS %{public}s: %{public}s", (uint8_t *)v43, 0x20u);
      sub_1001018B0(v56, v57, (uint64_t)&type metadata for Any + 8);
      sub_100007958(v88);
      sub_100007958(v43);

      a1 = v87;
    }
    else
    {
      sub_10000F650(a1);

      v58 = sub_100101868();
      sub_100089820(v58, v59, v60);
      sub_1001017A4();
      v55 = v18;
      v42 = v95;
    }
    sub_1000FDECC(v55, v42);
    sub_100112174(a1, v5, v4, (unint64_t)v35);
    sub_10000B348();
    sub_1001017A4();
  }
  sub_10000E4E0();
}

void sub_1000FF580(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, _QWORD, id), uint64_t a7)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  id v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  uint64_t v58;
  os_log_type_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83[8];
  char v84;
  char v85;
  char v86;
  char v87;
  char v88;
  char v89;
  char v90;
  char v91;
  uint64_t v92;
  uint8_t *v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  NSObject *v110;
  uint64_t v111;
  void *v112;
  int v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t (*v123)(uint64_t, _QWORD, id);
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  id v128;

  v126 = a5;
  v15 = sub_10000F6E4();
  v16 = *(_QWORD *)(v15 - 8);
  v120 = v15;
  v121 = v16;
  __chkstk_darwin(v15);
  sub_1000A3710();
  v17 = sub_10000E440();
  sub_10009C6E8();
  __chkstk_darwin(v18);
  sub_1000432FC();
  v19 = sub_1000088D8((uint64_t)&unk_10028BDC0, 32);
  v123 = a6;
  v124 = v19;
  *(_QWORD *)(v19 + 16) = a6;
  *(_QWORD *)(v19 + 24) = a7;
  v125 = a7;
  v20 = a4;
  swift_retain();
  v21 = swift_bridgeObjectRetain(a4);
  v122 = a3;
  v22 = UniversalControlUUID.init(stringValue:)(a3, a4, v21);
  if ((v23 & 1) != 0)
  {
    sub_100040400();
    v28 = sub_1001017B4();
    v34 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(v28, v29, v30, v31, v32, v33, 217);
    swift_willThrow(v34);
    v128 = v34;
    v35 = sub_1000055B0((uint64_t *)&unk_1002AABA0);
    v36 = sub_100040400();
    swift_dynamicCast(&v127, &v128, v35, v36, 0);
    v37 = (void *)v127;
    if (qword_1002A9800 != -1)
      swift_once(&qword_1002A9800, sub_100026BF4);
    v38 = v120;
    v39 = sub_100006FB4(v120, (uint64_t)qword_1002B6D10);
    v40 = v121;
    v41 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v121 + 16))(v9, v39, v120);
    v42 = __chkstk_darwin(v41);
    v43 = v122;
    __chkstk_darwin(v42);
    sub_1000E45AC((int)sub_10010120C, v44, (int)sub_100026210, (int)v83, v45, v46, v47, v48, v83[0], (id)v83[1], (uint64_t)v37, v83[3], v83[4], v83[5], a1, v122, v20, v92, (uint64_t)v93,
      v94,
      v95,
      v96,
      v97,
      v98);
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v9, v38);
    v49 = v37;
    sub_1000FEEFC(v43, v20, (uint64_t)v49);

    v50 = v49;
    sub_10002B800((uint64_t)v49, 1, v123);

    swift_errorRelease(v128);
  }
  else
  {
    v119 = v17;
    v24 = UniversalControlDeviceID.init(rawValue:)(v22);
    v26 = v25;
    v27 = sub_10003AFBC();
    v118 = v26;
    v115 = v24;
    v51 = sub_100089838(v27);
    v53 = v52;
    v55 = v54;
    swift_bridgeObjectRelease();
    sub_10002D790();
    sub_1001018BC(v51);
    sub_10002D790();
    v116 = v53;
    v117 = v51;
    v114 = v55;
    v56 = sub_1001018BC(v51);
    v57 = Logger.logObject.getter(v56);
    v59 = static os_log_type_t.default.getter(v57, v58);
    if (sub_100040394(v59))
    {
      v113 = v55;
      v60 = a1;
      v61 = v115;
      v109 = v115 >> 8;
      sub_10010192C(v115 >> 16);
      sub_100101920(v115 >> 24);
      v106 = HIDWORD(v115);
      v105 = v115 >> 40;
      v104 = HIWORD(v115);
      v103 = HIBYTE(v115);
      v101 = v118 >> 8;
      v100 = v118 >> 16;
      v99 = v118 >> 24;
      v98 = HIDWORD(v118);
      v97 = v118 >> 40;
      v95 = HIWORD(v118);
      v94 = HIBYTE(v118);
      v53 = sub_10000797C(32);
      v112 = (void *)sub_10000797C(96);
      v128 = v112;
      *(_DWORD *)v53 = 136446722;
      v110 = v57;
      v111 = v60;
      sub_100043360();
      v127 = sub_100101818();
      v102 = (uint64_t *)&v128;
      sub_100101898((uint64_t)&v127, (uint64_t)&v128, v53 + 12, (uint64_t)&v128);
      sub_10000F650(v60);
      sub_10000E594();
      *(_WORD *)(v53 + 12) = 2082;
      v96 = v53 + 14;
      v91 = v94;
      v90 = v95;
      v89 = v97;
      v88 = v98;
      v87 = v99;
      v86 = v100;
      v85 = v101;
      v84 = v118;
      v62 = UUID.init(uuid:)(v61, v109, v108, v107, v106, v105);
      UUID.uuidString.getter(v62);
      (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v8, v119);
      v63 = sub_1001018A0();
      v64 = static String._fromSubstring(_:)(v63);
      v51 = v65;
      sub_10000E420();
      v127 = sub_100006FCC(v64, v51, (uint64_t *)&v128);
      v66 = (uint64_t)v102;
      sub_100101898((uint64_t)&v127, (uint64_t)v102, v53 + 22, (uint64_t)&v128);
      swift_bridgeObjectRelease();
      v93 = (uint8_t *)v53;
      *(_WORD *)(v53 + 22) = 2082;
      v119 = v53 + 24;
      v67 = sub_100101848();
      sub_10008A214(v67, v68, v69);
      sub_100089498(v8, v53, v51);
      v71 = v70;
      v73 = v72;
      sub_100101794();
      v127 = sub_100006FCC(v71, v73, (uint64_t *)&v128);
      v74 = v66;
      v75 = v61;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, v74, v53 + 24);
      swift_bridgeObjectRelease();
      sub_100101794();
      sub_100101794();
      _os_log_impl((void *)&_mh_execute_header, v110, (os_log_type_t)v113, "%{public}s: Received Request from IDS %{public}s: %{public}s", v93, 0x20u);
      sub_1001018B0(v76, v77, (uint64_t)&type metadata for Any + 8);
      sub_100007958((uint64_t)v112);
      sub_100007958((uint64_t)v93);

      v78 = v118;
      v79 = v124;
      a1 = v111;
    }
    else
    {
      sub_10000F644();

      v80 = sub_100101848();
      sub_100089820(v80, v81, v82);
      sub_100101794();
      v79 = v124;
      v75 = v115;
      v78 = v118;
    }
    sub_1000FDECC(v75, v78);
    sub_1001123C4(a1, v8, v53, v51, (uint64_t)sub_100101200, v79);
    sub_10000B348();
    sub_100101794();
  }
  swift_release();
  sub_100026AEC();
  sub_10000E4E0();
}

uint64_t sub_1000FFC10(Swift::String *a1, uint64_t a2, unint64_t a3, void *a4)
{
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v17;

  v17 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(26, 2);
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  String.append(_:)(v8);
  String.append(_:)(a1[2]);
  v9._countAndFlagsBits = 0xD000000000000013;
  v9._object = a4;
  String.append(_:)(v9);
  sub_100043360();
  v10 = sub_1000599D0(8, a2, a3);
  v11 = static String._fromSubstring(_:)(v10);
  v13 = v12;
  sub_10000E410();
  v14._countAndFlagsBits = v11;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 0x64656C69614620;
  v15._object = (void *)0xE700000000000000;
  String.append(_:)(v15);
  return v17;
}

void sub_1000FFCF0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45[2];
  uint64_t v46[7];

  v1 = v0;
  v2 = v0[5];
  v3 = sub_1000CB894();
  if (v3)
  {
    v4 = v3;
    if (!v0[4]
      || (type metadata accessor for P2PDevice(0),
          sub_100026AE4(),
          v5 = sub_1000600C0(),
          v6 = static P2PDevice.== infix(_:_:)(v5, v4),
          sub_10000B364(),
          sub_100026AEC(),
          (v6 & 1) == 0))
    {
      swift_retain_n(v4, 2);
      v7 = swift_retain_n(v1, 2);
      v8 = Logger.logObject.getter(v7);
      v10 = static os_log_type_t.default.getter(v8, v9);
      if (os_log_type_enabled(v8, v10))
      {
        v11 = sub_10000797C(22);
        v40 = sub_10000797C(64);
        v46[0] = v40;
        *(_DWORD *)v11 = 136446466;
        v12 = sub_1000CB13C();
        v13 = *(_QWORD *)(v12 + 32);
        v14 = *(_QWORD *)(v12 + 40);
        swift_bridgeObjectRetain();
        sub_10000B348();
        v44 = sub_100006FCC(v13, v14, v46);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, v45, v11 + 4);
        sub_10000F644();
        swift_bridgeObjectRelease();
        *(_WORD *)(v11 + 12) = 2082;
        sub_100026AE4();
        v15 = P2PDevice.description.getter();
        v17 = v16;
        sub_100026AEC();
        v44 = sub_100006FCC(v15, v17, v46);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, v45, v11 + 14);
        sub_10000F650(v4);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v8, v10, "%{public}s: Local Device Change: %{public}s", (uint8_t *)v11, 0x16u);
        swift_arrayDestroy(v40, 2, (char *)&type metadata for Any + 8);
        sub_100007958(v40);
        sub_100007958(v11);
      }
      else
      {
        sub_10000F650(v4);
        sub_10000F644();
      }

      sub_10010119C();
      sub_1000CD468();
      ObservableObjectPublisher.send()();
      sub_10000B348();
      v1[4] = v4;
    }
    swift_release();
  }
  v18 = v1[2];
  if (!v18)
  {
    sub_10010119C();
    sub_1000CD468();
    ObservableObjectPublisher.send()();
    sub_10000B348();
    return;
  }
  v41 = v1[3];
  v19 = *(_QWORD *)(v2 + 64);
  if ((unint64_t)v19 >> 62)
  {
    if (v19 < 0)
      v39 = v19;
    else
      v39 = v19 & 0xFFFFFFFFFFFFFF8;
    sub_1001018D4();
    sub_100040544();
    v20 = _CocoaArrayWrapper.endIndex.getter(v39);
    if (v20)
      goto LABEL_12;
LABEL_22:
    swift_unknownObjectRelease(v18);
    swift_bridgeObjectRelease();
    return;
  }
  v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
  sub_1001018D4();
  sub_100040544();
  if (!v20)
    goto LABEL_22;
LABEL_12:
  if (v20 >= 1)
  {
    v21 = 0;
    v22 = (uint64_t)v1 + OBJC_IVAR____TtC13EnsembleAgent13P2PController_peers;
    v43 = v19 & 0xC000000000000001;
    do
    {
      if (v43)
      {
        v23 = specialized _ArrayBuffer._getElementSlowPath(_:)(v21, v19);
        v24 = v23;
      }
      else
      {
        v24 = *(_QWORD *)(v19 + 8 * v21 + 32);
        v23 = sub_100060200();
      }
      v25 = v24 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties;
      sub_1000C7F2C(v23, (uint64_t)v46);
      v26 = (unint64_t *)(v25 + *(int *)(type metadata accessor for P2PDevice.Properties(0) + 36));
      v27 = *v26;
      v28 = v26[1];
      v29 = sub_10000B2F8(v22, (uint64_t)&v44, 32);
      if (*(_QWORD *)(*(_QWORD *)v22 + 16) && (v29 = sub_1001A8C70(v27, v28), (v30 & 1) != 0))
      {
        sub_100101918(v29, v30);
        sub_1000600C0();
      }
      else
      {
        sub_100101918(v29, v30, v41);
        v31 = type metadata accessor for P2PPeerCoordinator();
        sub_1000088D8(v31, 128);
        sub_1001018D4();
        sub_1001139F8(v27, v28, v18, v42, v32, v33, v34, v35, v42, v43, v44, v45[0], v45[1], v46[0], v46[1], v46[2], v46[3], v46[4], v46[5],
          v46[6]);
        sub_10000B2F8(v22, (uint64_t)&v44, 33);
        v36 = sub_1000600C0();
        v37 = sub_1001AAA30(v36, v27, v28);
        sub_100101918(v37, v38);
      }
      ++v21;
      P2PPeerCoordinator.setDevice(_:)(v24);
      swift_release();
      sub_10000B364();
    }
    while (v20 != v21);
    goto LABEL_22;
  }
  __break(1u);
}

unint64_t sub_1001000F8()
{
  unint64_t result;

  result = qword_1002B1678;
  if (!qword_1002B1678)
  {
    result = swift_getWitnessTable(&unk_100225F18, &type metadata for P2PController.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B1678);
  }
  return result;
}

unint64_t sub_100100134()
{
  unint64_t result;

  result = qword_1002B21E0;
  if (!qword_1002B21E0)
  {
    result = swift_getWitnessTable(&unk_100227124, &type metadata for P2PPeerCoordinator.DiagnosticState);
    atomic_store(result, (unint64_t *)&qword_1002B21E0);
  }
  return result;
}

uint64_t sub_100100170(uint64_t *a1)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v2 = sub_10006D08C(v2);
    *a1 = v2;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v7[0] = v2 + 32;
  v7[1] = v4;
  sub_100100250(v7);
  return specialized ContiguousArray._endMutation()(v5);
}

void sub_1001001E8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
  {
    sub_10006CCDC();
    v2 = v3;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v4;
  sub_10010085C(v5);
  *a1 = v2;
}

void sub_100100250(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  Swift::Int v5;
  _QWORD *v6;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  _QWORD *v10;
  Swift::Int v11;
  int v12;
  Swift::Int v13;
  Swift::Int v14;
  uint64_t *v15;
  Swift::Int v16;
  Swift::Int v17;
  uint64_t *v18;
  uint64_t v19;
  Swift::Int v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  Swift::Int v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  Swift::Int *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  char v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  unint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  _QWORD *v75;
  unint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  unint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t *v91;
  Swift::Int v92;
  uint64_t v93;
  Swift::Int v94;
  _QWORD *v95;
  uint64_t v96;

  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        sub_100100F64(0, v3, 1, a1);
      return;
    }
LABEL_129:
    __break(1u);
    goto LABEL_130;
  }
  v5 = v4;
  sub_10002235C(v3 / 2);
  v95 = v6;
  v96 = v7;
  v93 = v3;
  v91 = a1;
  if (v3 <= 0)
  {
LABEL_93:
    v10 = _swiftEmptyArrayStorage;
    v28 = _swiftEmptyArrayStorage[2];
LABEL_94:
    if (v28 < 2)
    {
LABEL_105:
      v82 = swift_bridgeObjectRelease(v10);
      if (v93 >= -1)
        goto LABEL_106;
      goto LABEL_133;
    }
    v83 = *v91;
    while (1)
    {
      v84 = v28 - 2;
      if (v28 < 2)
        break;
      if (!v83)
        goto LABEL_137;
      v85 = v10[2 * v84 + 4];
      v86 = v10[2 * v28 + 3];
      sub_100101008((_QWORD *)(v83 + 8 * v85), (_QWORD *)(v83 + 8 * v10[2 * v28 + 2]), v83 + 8 * v86, v95);
      if (v1)
        goto LABEL_91;
      if (v86 < v85)
        goto LABEL_124;
      if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
      {
        sub_10006CA50();
        v10 = v89;
      }
      if (v84 >= v10[2])
        goto LABEL_125;
      v87 = &v10[2 * v84 + 4];
      *v87 = v85;
      v87[1] = v86;
      v88 = v10[2];
      if (v28 > v88)
        goto LABEL_126;
      memmove(&v10[2 * v28 + 2], &v10[2 * v28 + 4], 16 * (v88 - v28));
      v10[2] = v88 - 1;
      v28 = v88 - 1;
      if (v88 <= 2)
        goto LABEL_105;
    }
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
    goto LABEL_129;
  }
  v92 = v5;
  v8 = 0;
  v9 = *a1;
  v90 = *a1 - 8;
  v10 = _swiftEmptyArrayStorage;
  while (1)
  {
    v11 = v8++;
    if (v8 >= v3)
      goto LABEL_20;
    v12 = static UniversalControlDeviceID.< infix(_:_:)(*(_QWORD *)(*(_QWORD *)(v9 + 8 * v8) + 24), *(_QWORD *)(*(_QWORD *)(v9 + 8 * v8) + 32), *(_QWORD *)(*(_QWORD *)(v9 + 8 * v11) + 24), *(_QWORD *)(*(_QWORD *)(v9 + 8 * v11) + 32));
    v8 = v11 + 2;
    if (v11 + 2 >= v3)
      goto LABEL_10;
    v13 = v11;
    do
    {
      if (((v12 ^ static UniversalControlDeviceID.< infix(_:_:)(*(_QWORD *)(*(_QWORD *)(v9 + 8 * v13 + 16) + 24), *(_QWORD *)(*(_QWORD *)(v9 + 8 * v13 + 16) + 32), *(_QWORD *)(*(_QWORD *)(v9 + 8 * v13 + 8) + 24), *(_QWORD *)(*(_QWORD *)(v9 + 8 * v13 + 8) + 32))) & 1) != 0)
      {
        v8 = v13 + 2;
        if ((v12 & 1) == 0)
          goto LABEL_20;
LABEL_13:
        if (v8 >= v11)
        {
          if (v11 < v8)
          {
            v15 = (uint64_t *)(v90 + 8 * v8);
            v16 = v8;
            v17 = v11;
            v18 = (uint64_t *)(v9 + 8 * v11);
            do
            {
              if (v17 != --v16)
              {
                if (!v9)
                  goto LABEL_136;
                v19 = *v18;
                *v18 = *v15;
                *v15 = v19;
              }
              ++v17;
              --v15;
              ++v18;
            }
            while (v17 < v16);
          }
          goto LABEL_20;
        }
LABEL_130:
        __break(1u);
LABEL_131:
        __break(1u);
LABEL_132:
        __break(1u);
LABEL_133:
        __break(1u);
LABEL_134:
        __break(1u);
LABEL_135:
        __break(1u);
LABEL_136:
        __break(1u);
LABEL_137:
        __break(1u);
        return;
      }
      v14 = v13 + 3;
      ++v13;
    }
    while (v14 < v3);
    v8 = v3;
LABEL_10:
    if ((v12 & 1) != 0)
      goto LABEL_13;
LABEL_20:
    if (v8 >= v3)
      goto LABEL_36;
    if (__OFSUB__(v8, v11))
      goto LABEL_128;
    if (v8 - v11 >= v92)
      goto LABEL_36;
    if (__OFADD__(v11, v92))
      goto LABEL_131;
    if (v11 + v92 >= v3)
      v20 = v3;
    else
      v20 = v11 + v92;
    if (v20 < v11)
      goto LABEL_132;
    if (v8 != v20)
    {
      v21 = v10;
      v22 = (_QWORD *)(v90 + 8 * v8);
      do
      {
        v23 = *(_QWORD *)(v9 + 8 * v8);
        v24 = v11;
        v25 = v22;
        do
        {
          if ((static UniversalControlDeviceID.< infix(_:_:)(*(_QWORD *)(v23 + 24), *(_QWORD *)(v23 + 32), *(_QWORD *)(*v25 + 24), *(_QWORD *)(*v25 + 32)) & 1) == 0)break;
          if (!v9)
            goto LABEL_134;
          v26 = *v25;
          v23 = v25[1];
          *v25 = v23;
          v25[1] = v26;
          --v25;
          ++v24;
        }
        while (v8 != v24);
        ++v8;
        ++v22;
      }
      while (v8 != v20);
      v8 = v20;
      v10 = v21;
    }
LABEL_36:
    if (v8 < v11)
      goto LABEL_127;
    if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
    {
      sub_10006C984();
      v10 = v80;
    }
    v27 = v10[2];
    v28 = v27 + 1;
    if (v27 >= v10[3] >> 1)
    {
      sub_10006C984();
      v10 = v81;
    }
    v10[2] = v28;
    v29 = v10 + 4;
    v30 = &v10[2 * v27 + 4];
    *v30 = v11;
    v30[1] = v8;
    if (v27)
      break;
    v28 = 1;
LABEL_85:
    v3 = v93;
    if (v8 >= v93)
      goto LABEL_94;
  }
  v94 = v8;
  while (1)
  {
    v31 = v28 - 1;
    if (v28 >= 4)
    {
      v36 = &v29[2 * v28];
      v37 = *(v36 - 8);
      v38 = *(v36 - 7);
      v42 = __OFSUB__(v38, v37);
      v39 = v38 - v37;
      if (v42)
        goto LABEL_112;
      v41 = *(v36 - 6);
      v40 = *(v36 - 5);
      v42 = __OFSUB__(v40, v41);
      v34 = v40 - v41;
      v35 = v42;
      if (v42)
        goto LABEL_113;
      v43 = v28 - 2;
      v44 = &v29[2 * v28 - 4];
      v46 = *v44;
      v45 = v44[1];
      v42 = __OFSUB__(v45, v46);
      v47 = v45 - v46;
      if (v42)
        goto LABEL_114;
      v42 = __OFADD__(v34, v47);
      v48 = v34 + v47;
      if (v42)
        goto LABEL_116;
      if (v48 >= v39)
      {
        v66 = &v29[2 * v31];
        v68 = *v66;
        v67 = v66[1];
        v42 = __OFSUB__(v67, v68);
        v69 = v67 - v68;
        if (v42)
          goto LABEL_122;
        v59 = v34 < v69;
        goto LABEL_74;
      }
    }
    else
    {
      if (v28 != 3)
      {
        v60 = v10[4];
        v61 = v10[5];
        v42 = __OFSUB__(v61, v60);
        v53 = v61 - v60;
        v54 = v42;
        goto LABEL_68;
      }
      v33 = v10[4];
      v32 = v10[5];
      v42 = __OFSUB__(v32, v33);
      v34 = v32 - v33;
      v35 = v42;
    }
    if ((v35 & 1) != 0)
      goto LABEL_115;
    v43 = v28 - 2;
    v49 = &v29[2 * v28 - 4];
    v51 = *v49;
    v50 = v49[1];
    v52 = __OFSUB__(v50, v51);
    v53 = v50 - v51;
    v54 = v52;
    if (v52)
      goto LABEL_117;
    v55 = &v29[2 * v31];
    v57 = *v55;
    v56 = v55[1];
    v42 = __OFSUB__(v56, v57);
    v58 = v56 - v57;
    if (v42)
      goto LABEL_119;
    if (__OFADD__(v53, v58))
      goto LABEL_121;
    if (v53 + v58 >= v34)
    {
      v59 = v34 < v58;
LABEL_74:
      if (v59)
        v31 = v43;
      goto LABEL_76;
    }
LABEL_68:
    if ((v54 & 1) != 0)
      goto LABEL_118;
    v62 = &v29[2 * v31];
    v64 = *v62;
    v63 = v62[1];
    v42 = __OFSUB__(v63, v64);
    v65 = v63 - v64;
    if (v42)
      goto LABEL_120;
    if (v65 < v53)
      goto LABEL_85;
LABEL_76:
    v70 = v9;
    v71 = v10;
    v72 = v31 - 1;
    if (v31 - 1 >= v28)
    {
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
      goto LABEL_123;
    }
    if (!v70)
      goto LABEL_135;
    v73 = &v29[2 * v72];
    v74 = *v73;
    v75 = v29;
    v76 = v31;
    v77 = &v29[2 * v31];
    v78 = v77[1];
    sub_100101008((_QWORD *)(v70 + 8 * *v73), (_QWORD *)(v70 + 8 * *v77), v70 + 8 * v78, v95);
    if (v1)
      break;
    if (v78 < v74)
      goto LABEL_109;
    if (v76 > v71[2])
      goto LABEL_110;
    *v73 = v74;
    v75[2 * v72 + 1] = v78;
    v79 = v71[2];
    if (v76 >= v79)
      goto LABEL_111;
    v10 = v71;
    v28 = v79 - 1;
    memmove(v77, v77 + 2, 16 * (v79 - 1 - v76));
    v29 = v75;
    v71[2] = v79 - 1;
    v9 = v70;
    v8 = v94;
    if (v79 <= 2)
      goto LABEL_85;
  }
  v10 = v71;
LABEL_91:
  v82 = swift_bridgeObjectRelease(v10);
  if (v93 < -1)
  {
    __break(1u);
    goto LABEL_93;
  }
LABEL_106:
  *(_QWORD *)((v96 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
  specialized Array._endMutation()(v82);
  swift_bridgeObjectRelease(v96);
}

void sub_10010085C(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  Swift::Int v5;
  uint64_t v6;
  char *v7;
  Swift::Int v8;
  uint64_t v9;
  int8x16_t v10;
  Swift::Int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  Swift::Int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  Swift::Int *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  char v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint16x8_t v75;
  Swift::Int v76;
  uint64_t v77;
  uint64_t v78;
  _OWORD *v79;
  uint32x4_t v80;
  uint64x2_t v81;
  uint64x2_t v82;
  int8x16_t v83;
  unint64_t v84;
  uint32x4_t v85;
  uint64x2_t v86;
  int8x16_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  unint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  unint64_t v97;
  _QWORD *v98;
  uint64_t *v99;
  Swift::Int v100;
  uint64_t v101;
  uint64_t v102;
  Swift::Int v103;
  char *v104;
  _QWORD *v105;

  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        sub_100065198(0, v3, 1, a1);
      return;
    }
    goto LABEL_126;
  }
  v5 = v4;
  sub_10002245C(v3 / 2);
  v101 = v6;
  v102 = v3;
  v104 = v7;
  v99 = a1;
  if (v3 <= 0)
  {
    v105 = _swiftEmptyArrayStorage;
    v25 = _swiftEmptyArrayStorage[2];
LABEL_92:
    if (v25 < 2)
    {
LABEL_103:
      swift_bridgeObjectRelease();
      if (v3 >= -1)
      {
        *(_QWORD *)(v101 + 16) = 0;
        swift_bridgeObjectRelease();
        return;
      }
      goto LABEL_131;
    }
    v91 = *v99;
    while (1)
    {
      v92 = v25 - 2;
      if (v25 < 2)
        break;
      if (!v91)
        goto LABEL_135;
      v93 = v105;
      v94 = v105[2 * v92 + 4];
      v95 = v105[2 * v25 + 3];
      sub_100065954((char *)(v91 + 24 * v94), (char *)(v91 + 24 * v105[2 * v25 + 2]), v91 + 24 * v95, v104);
      if (v1)
        goto LABEL_88;
      if (v95 < v94)
        goto LABEL_121;
      if ((swift_isUniquelyReferenced_nonNull_native(v105) & 1) == 0)
      {
        sub_10006CA50();
        v93 = v98;
      }
      if (v92 >= v93[2])
        goto LABEL_122;
      v96 = &v93[2 * v92 + 4];
      *v96 = v94;
      v96[1] = v95;
      v97 = v93[2];
      if (v25 > v97)
        goto LABEL_123;
      memmove(&v93[2 * v25 + 2], &v93[2 * v25 + 4], 16 * (v97 - v25));
      v105 = v93;
      v93[2] = v97 - 1;
      v25 = v97 - 1;
      v3 = v102;
      if (v97 <= 2)
        goto LABEL_103;
    }
LABEL_120:
    __break(1u);
LABEL_121:
    __break(1u);
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
LABEL_133:
    __break(1u);
LABEL_134:
    __break(1u);
LABEL_135:
    __break(1u);
    return;
  }
  v100 = v5;
  v8 = 0;
  v9 = *a1;
  v105 = _swiftEmptyArrayStorage;
  v10.i32[1] = 0;
  while (1)
  {
    v11 = v8++;
    if (v8 < v3)
    {
      v12 = static UniversalControlDeviceID.< infix(_:_:)(*(_QWORD *)(v9 + 24 * v8), *(_QWORD *)(v9 + 24 * v8 + 8), *(_QWORD *)(v9 + 24 * v11), *(_QWORD *)(v9 + 24 * v11 + 8));
      v8 = v11 + 2;
      if (v11 + 2 < v3)
      {
        v13 = v9 + 31 + 24 * v11;
        while (((v12 ^ static UniversalControlDeviceID.< infix(_:_:)(*(_QWORD *)(v13 + 17), *(_QWORD *)(v13 + 25), *(_QWORD *)(v13 - 7), *(_QWORD *)(v13 + 1))) & 1) == 0)
        {
          v13 += 24;
          if (++v8 >= v3)
          {
            v8 = v3;
            break;
          }
        }
      }
      if ((v12 & 1) != 0)
      {
        if (v8 < v11)
          goto LABEL_128;
        if (v11 < v8)
        {
          v14 = 24 * v8;
          v15 = 24 * v11;
          v16 = v8;
          v17 = v11;
          do
          {
            if (v17 != --v16)
            {
              if (!v9)
                goto LABEL_134;
              v18 = v9 + v15;
              v19 = v9 + v14;
              v20 = *(_QWORD *)(v9 + v15 + 16);
              v10 = *(int8x16_t *)(v9 + v15);
              v21 = *(_QWORD *)(v9 + v14 - 8);
              *(_OWORD *)v18 = *(_OWORD *)(v9 + v14 - 24);
              *(_QWORD *)(v18 + 16) = v21;
              *(int8x16_t *)(v19 - 24) = v10;
              *(_QWORD *)(v19 - 8) = v20;
            }
            ++v17;
            v14 -= 24;
            v15 += 24;
          }
          while (v17 < v16);
        }
      }
    }
    if (v8 >= v3)
      goto LABEL_27;
    if (__OFSUB__(v8, v11))
      goto LABEL_125;
    if (v8 - v11 >= v100)
      goto LABEL_27;
    if (__OFADD__(v11, v100))
      goto LABEL_129;
    if (v11 + v100 >= v3)
      v22 = v3;
    else
      v22 = v11 + v100;
    if (v22 < v11)
      goto LABEL_130;
    if (v8 == v22)
    {
LABEL_27:
      v23 = v105;
    }
    else
    {
      v73 = v9 + 16 + 24 * v8;
      v23 = v105;
      v103 = v11;
      do
      {
        v74 = v9 + 24 * v8;
        v10.i32[0] = *(_DWORD *)(v74 + 4);
        v75 = vmovl_u8(*(uint8x8_t *)v10.i8);
        v10.i32[0] = *(_DWORD *)(v74 + 12);
        v10 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v10.i8);
        v76 = v11;
        v77 = v73;
        do
        {
          v78 = v77 - 16;
          v79 = (_OWORD *)(v77 - 40);
          v80 = vmovl_u16((uint16x4_t)(v75.i64[0] & 0xFF00FF00FF00FFLL));
          v81.i64[0] = v80.u32[0];
          v81.i64[1] = v80.u32[1];
          v82 = v81;
          v81.i64[0] = v80.u32[2];
          v81.i64[1] = v80.u32[3];
          v83 = vorrq_s8((int8x16_t)vshlq_u64(v82, (uint64x2_t)xmmword_10021DA20), (int8x16_t)vshlq_u64(v81, (uint64x2_t)xmmword_10021DA10));
          v84 = *(unint64_t *)&vorr_s8(*(int8x8_t *)v83.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v83, v83, 8uLL)) | *(unsigned int *)(v77 - 16);
          v85 = vmovl_u16((uint16x4_t)(v10.i64[0] & 0xFF00FF00FF00FFLL));
          v81.i64[0] = v85.u32[0];
          v81.i64[1] = v85.u32[1];
          v86 = v81;
          v81.i64[0] = v85.u32[2];
          v81.i64[1] = v85.u32[3];
          v87 = vorrq_s8((int8x16_t)vshlq_u64(v86, (uint64x2_t)xmmword_10021DA20), (int8x16_t)vshlq_u64(v81, (uint64x2_t)xmmword_10021DA10));
          if ((static UniversalControlDeviceID.< infix(_:_:)(v84, *(unint64_t *)&vorr_s8(*(int8x8_t *)v87.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v87, v87, 8uLL)) | *(unsigned int *)(v77 - 8), *(_QWORD *)(v77 - 40), *(_QWORD *)(v77 - 32)) & 1) == 0)break;
          if (!v9)
            goto LABEL_132;
          v88 = *(_QWORD *)(v77 - 24);
          *(_QWORD *)(v77 - 24) = *(_QWORD *)v77;
          v77 -= 24;
          v10 = *(int8x16_t *)(v77 + 8);
          *(_OWORD *)v78 = *v79;
          *(_QWORD *)(v78 + 16) = v88;
          *(int8x16_t *)(v77 - 16) = v10;
          *(int8x8_t *)v75.i8 = vzip2_s8(*(int8x8_t *)v10.i8, *(int8x8_t *)v10.i8);
          v10.i64[0] = vextq_s8(v10, v10, 8uLL).u64[0];
          *(int8x8_t *)v10.i8 = vzip2_s8(*(int8x8_t *)v10.i8, *(int8x8_t *)v10.i8);
          ++v76;
        }
        while (v8 != v76);
        ++v8;
        v73 += 24;
        v11 = v103;
      }
      while (v8 != v22);
      v8 = v22;
    }
    if (v8 < v11)
      goto LABEL_124;
    if ((swift_isUniquelyReferenced_nonNull_native(v23) & 1) == 0)
    {
      sub_10006C984();
      v23 = v89;
    }
    v24 = v23[2];
    v25 = v24 + 1;
    if (v24 >= v23[3] >> 1)
    {
      sub_10006C984();
      v23 = v90;
    }
    v23[2] = v25;
    v26 = v23 + 4;
    v27 = &v23[2 * v24 + 4];
    *v27 = v11;
    v27[1] = v8;
    v105 = v23;
    if (v24)
      break;
    v25 = 1;
LABEL_76:
    v3 = v102;
    if (v8 >= v102)
      goto LABEL_92;
  }
  while (1)
  {
    v28 = v25 - 1;
    if (v25 >= 4)
    {
      v33 = &v26[2 * v25];
      v34 = *(v33 - 8);
      v35 = *(v33 - 7);
      v39 = __OFSUB__(v35, v34);
      v36 = v35 - v34;
      if (v39)
        goto LABEL_109;
      v38 = *(v33 - 6);
      v37 = *(v33 - 5);
      v39 = __OFSUB__(v37, v38);
      v31 = v37 - v38;
      v32 = v39;
      if (v39)
        goto LABEL_110;
      v40 = v25 - 2;
      v41 = &v26[2 * v25 - 4];
      v43 = *v41;
      v42 = v41[1];
      v39 = __OFSUB__(v42, v43);
      v44 = v42 - v43;
      if (v39)
        goto LABEL_111;
      v39 = __OFADD__(v31, v44);
      v45 = v31 + v44;
      if (v39)
        goto LABEL_113;
      if (v45 >= v36)
      {
        v63 = &v26[2 * v28];
        v65 = *v63;
        v64 = v63[1];
        v39 = __OFSUB__(v64, v65);
        v66 = v64 - v65;
        if (v39)
          goto LABEL_119;
        v56 = v31 < v66;
        goto LABEL_65;
      }
    }
    else
    {
      if (v25 != 3)
      {
        v57 = v23[4];
        v58 = v23[5];
        v39 = __OFSUB__(v58, v57);
        v50 = v58 - v57;
        v51 = v39;
        goto LABEL_59;
      }
      v30 = v23[4];
      v29 = v23[5];
      v39 = __OFSUB__(v29, v30);
      v31 = v29 - v30;
      v32 = v39;
    }
    if ((v32 & 1) != 0)
      goto LABEL_112;
    v40 = v25 - 2;
    v46 = &v26[2 * v25 - 4];
    v48 = *v46;
    v47 = v46[1];
    v49 = __OFSUB__(v47, v48);
    v50 = v47 - v48;
    v51 = v49;
    if (v49)
      goto LABEL_114;
    v52 = &v26[2 * v28];
    v54 = *v52;
    v53 = v52[1];
    v39 = __OFSUB__(v53, v54);
    v55 = v53 - v54;
    if (v39)
      goto LABEL_116;
    if (__OFADD__(v50, v55))
      goto LABEL_118;
    if (v50 + v55 >= v31)
    {
      v56 = v31 < v55;
LABEL_65:
      if (v56)
        v28 = v40;
      goto LABEL_67;
    }
LABEL_59:
    if ((v51 & 1) != 0)
      goto LABEL_115;
    v59 = &v26[2 * v28];
    v61 = *v59;
    v60 = v59[1];
    v39 = __OFSUB__(v60, v61);
    v62 = v60 - v61;
    if (v39)
      goto LABEL_117;
    if (v62 < v50)
      goto LABEL_76;
LABEL_67:
    v67 = v28 - 1;
    if (v28 - 1 >= v25)
    {
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
      goto LABEL_120;
    }
    if (!v9)
      goto LABEL_133;
    v68 = &v26[2 * v67];
    v69 = *v68;
    v70 = &v26[2 * v28];
    v71 = v70[1];
    sub_100065954((char *)(v9 + 24 * *v68), (char *)(v9 + 24 * *v70), v9 + 24 * v71, v104);
    if (v1)
      break;
    if (v71 < v69)
      goto LABEL_106;
    if (v28 > v105[2])
      goto LABEL_107;
    *v68 = v69;
    v26[2 * v67 + 1] = v71;
    v72 = v105[2];
    if (v28 >= v72)
      goto LABEL_108;
    v23 = v105;
    v25 = v72 - 1;
    memmove(&v26[2 * v28], v70 + 2, 16 * (v72 - 1 - v28));
    v105[2] = v72 - 1;
    if (v72 <= 2)
      goto LABEL_76;
  }
LABEL_88:
  swift_bridgeObjectRelease();
  if (v102 < -1)
    goto LABEL_127;
  *(_QWORD *)(v101 + 16) = 0;
  swift_bridgeObjectRelease();
}

uint64_t sub_100100F64(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 8 * a3 - 8;
    while (2)
    {
      v9 = *(_QWORD *)(v7 + 8 * v4);
      v10 = v6;
      v11 = (_QWORD *)v8;
      do
      {
        result = static UniversalControlDeviceID.< infix(_:_:)(*(_QWORD *)(v9 + 24), *(_QWORD *)(v9 + 32), *(_QWORD *)(*v11 + 24), *(_QWORD *)(*v11 + 32));
        if ((result & 1) == 0)
          break;
        if (!v7)
        {
          __break(1u);
          return result;
        }
        v12 = *v11;
        v9 = v11[1];
        *v11 = v9;
        v11[1] = v12;
        --v11;
        ++v10;
      }
      while (v4 != v10);
      ++v4;
      v8 += 8;
      if (v4 != a2)
        continue;
      break;
    }
  }
  return result;
}

uint64_t sub_100101008(_QWORD *a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v14;
  BOOL v15;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;
  BOOL v22;

  v4 = a4;
  v6 = a2;
  v7 = a1;
  v8 = (char *)a2 - (char *)a1;
  v9 = a2 - a1;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 8;
  if (v9 >= v11)
  {
    sub_100078D34(a2, (uint64_t)(a3 - (_QWORD)a2) / 8, a4);
    v12 = (unint64_t)&v4[v11];
    if (v7 >= v6 || v10 < 8)
      goto LABEL_39;
    v18 = (_QWORD *)(a3 - 8);
    while (1)
    {
      v19 = v18 + 1;
      v20 = v6 - 1;
      if ((static UniversalControlDeviceID.< infix(_:_:)(*(_QWORD *)(*(_QWORD *)(v12 - 8) + 24), *(_QWORD *)(*(_QWORD *)(v12 - 8) + 32), *(_QWORD *)(*(v6 - 1) + 24), *(_QWORD *)(*(v6 - 1) + 32)) & 1) != 0)
      {
        v21 = v19 != v6 || v18 >= v6;
        --v6;
        if (!v21)
          goto LABEL_35;
      }
      else
      {
        v22 = v19 != (_QWORD *)v12 || (unint64_t)v18 >= v12;
        v20 = (_QWORD *)(v12 - 8);
        v12 -= 8;
        if (!v22)
          goto LABEL_35;
      }
      *v18 = *v20;
LABEL_35:
      --v18;
      if (v6 <= v7 || v12 <= (unint64_t)v4)
        goto LABEL_39;
    }
  }
  sub_100078D34(a1, a2 - a1, a4);
  v12 = (unint64_t)&v4[v9];
  if ((unint64_t)v6 < a3 && v8 >= 8)
  {
    while ((static UniversalControlDeviceID.< infix(_:_:)(*(_QWORD *)(*v6 + 24), *(_QWORD *)(*v6 + 32), *(_QWORD *)(*v4 + 24), *(_QWORD *)(*v4 + 32)) & 1) == 0)
    {
      v14 = v4;
      v15 = v7 == v4++;
      if (!v15)
        goto LABEL_11;
LABEL_12:
      ++v7;
      if ((unint64_t)v4 >= v12 || (unint64_t)v6 >= a3)
        goto LABEL_17;
    }
    v14 = v6;
    v15 = v7 == v6++;
    if (v15)
      goto LABEL_12;
LABEL_11:
    *v7 = *v14;
    goto LABEL_12;
  }
LABEL_17:
  v6 = v7;
LABEL_39:
  sub_100078D34(v4, (uint64_t)(v12 - (_QWORD)v4) / 8, v6);
  return 1;
}

unint64_t sub_10010119C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002AC1B8;
  if (!qword_1002AC1B8)
  {
    v1 = type metadata accessor for P2PController(255);
    result = swift_getWitnessTable(&unk_100225DE4, v1);
    atomic_store(result, (unint64_t *)&qword_1002AC1B8);
  }
  return result;
}

uint64_t sub_1001011DC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100101200(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_10002B800(a1, a2 & 1, *(uint64_t (**)(uint64_t, _QWORD, id))(v2 + 16));
}

uint64_t sub_10010120C()
{
  uint64_t v0;

  return sub_1001018F8(*(Swift::String **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), (uint64_t)": Request from IDS ");
}

uint64_t sub_100101230()
{
  uint64_t v0;

  return sub_1001018F8(*(Swift::String **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), (uint64_t)": Message from IDS ");
}

uint64_t sub_100101254()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100101278()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001012A4(uint64_t a1)
{
  uint64_t v1;

  return sub_1000FE4E0(a1, *(void (**)(uint64_t, uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t storeEnumTagSinglePayload for P2PController.DiagnosticState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1001012FC + 4 * byte_100225D02[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100101330 + 4 * byte_100225CFD[v4]))();
}

uint64_t sub_100101330(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100101338(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100101340);
  return result;
}

uint64_t sub_10010134C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100101354);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_100101358(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100101360(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for P2PController.DiagnosticState.CodingKeys()
{
  return &type metadata for P2PController.DiagnosticState.CodingKeys;
}

uint64_t destroy for P2PController.DiagnosticState(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[6]);
  return swift_bridgeObjectRelease(a1[7]);
}

uint64_t initializeWithCopy for P2PController.DiagnosticState(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v3;
  v4 = *(_QWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 56) = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for P2PController.DiagnosticState(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v7);
  v9 = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  return a1;
}

__n128 initializeWithTake for P2PPeerCoordinator.DiagnosticState(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for P2PController.DiagnosticState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  v4 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for P2PController.DiagnosticState(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 64))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 40);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for P2PController.DiagnosticState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for P2PController.DiagnosticState()
{
  return &type metadata for P2PController.DiagnosticState;
}

unint64_t sub_1001015C8()
{
  unint64_t result;

  result = qword_1002B1690;
  if (!qword_1002B1690)
  {
    result = swift_getWitnessTable(&unk_100225EF0, &type metadata for P2PController.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B1690);
  }
  return result;
}

unint64_t sub_100101608()
{
  unint64_t result;

  result = qword_1002B1698;
  if (!qword_1002B1698)
  {
    result = swift_getWitnessTable(&unk_100225E60, &type metadata for P2PController.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B1698);
  }
  return result;
}

unint64_t sub_100101648()
{
  unint64_t result;

  result = qword_1002B16A0;
  if (!qword_1002B16A0)
  {
    result = swift_getWitnessTable(&unk_100225E88, &type metadata for P2PController.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B16A0);
  }
  return result;
}

uint64_t sub_100101684(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_10000DCA0((uint64_t *)&unk_1002AC160);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001016E4(unint64_t *a1, void (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_10000DCA0(&qword_1002B1680);
    a2();
    result = swift_getWitnessTable(a4, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100101758()
{
  unint64_t result;

  result = qword_1002B16B8;
  if (!qword_1002B16B8)
  {
    result = swift_getWitnessTable(&unk_1002270C4, &type metadata for P2PPeerCoordinator.DiagnosticState);
    atomic_store(result, (unint64_t *)&qword_1002B16B8);
  }
  return result;
}

uint64_t sub_100101794()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return sub_100089820(v1, v2, v0);
}

uint64_t sub_1001017A4()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return sub_100089820(v2, v1, v0);
}

uint64_t sub_1001017B4()
{
  return 4294960588;
}

uint64_t sub_1001017E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_1001017F4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100101818()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  return sub_100006FCC(v0, v1, (uint64_t *)(v2 - 104));
}

uint64_t sub_100101828()
{
  uint64_t v0;

  return v0 - 120;
}

uint64_t sub_100101848()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 192);
}

void sub_100101860(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_100084074(a1, a2, v2);
}

uint64_t sub_100101868()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 160);
}

uint64_t sub_100101898@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, *(_QWORD *)(a4 - 256), a3);
}

uint64_t sub_1001018A0()
{
  uint64_t v0;
  unint64_t v1;

  return sub_1000599D0(8, v0, v1);
}

uint64_t sub_1001018B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return swift_arrayDestroy(v3, 3, a3);
}

uint64_t sub_1001018BC(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;

  return sub_10008A214(a1, v1, v2);
}

uint64_t sub_1001018C8(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;

  return sub_10008A214(a1, v1, v2);
}

uint64_t sub_1001018D4()
{
  uint64_t v0;

  return swift_unknownObjectRetain(v0);
}

uint64_t sub_1001018DC()
{
  return swift_errorRelease(0);
}

uint64_t sub_1001018F8@<X0>(Swift::String *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1000FFC10(a1, a2, a3, (void *)((a4 - 32) | 0x8000000000000000));
}

uint64_t sub_100101904()
{
  uint64_t v0;

  return v0 - 104;
}

uint64_t sub_100101918(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  return swift_endAccess(va);
}

void sub_100101920(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 272) = a1;
}

void sub_10010192C(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 264) = a1;
}

uint64_t sub_100101938(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 32, 0);
}

_QWORD *sub_100101944()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *result;

  v0 = type metadata accessor for CloudPreferencesController();
  v1 = swift_allocObject(v0, 64, 7);
  result = sub_100101D60();
  qword_1002B7000 = v1;
  return result;
}

void sub_10010197C(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  NSString v7;
  uint64_t v8;
  uint64_t v9;
  os_log_type_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  os_log_type_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *osloga;
  NSObject *oslog;
  NSObject *oslogb;
  uint64_t v75;
  uint64_t v76;

  if (*(_BYTE *)(v1 + 16) != (a1 & 1))
  {
    v2 = v1;
    if (*(_BYTE *)(v1 + 48) == 1)
    {
      v4 = type metadata accessor for CloudPreferencesController();
      sub_100066C34(&qword_1002B17E0, v5, (uint64_t (*)(uint64_t))type metadata accessor for CloudPreferencesController, (uint64_t)&unk_100225FCC);
      ObservableObject<>.objectWillChange.getter(v4);
      ObservableObjectPublisher.send()();
      sub_10000B348();
      *(_BYTE *)(v2 + 16) = a1 & 1;
      v6 = *(void **)(v2 + 24);
      if (!v6)
      {
        __break(1u);
        return;
      }
      v7 = sub_100102554();
      objc_msgSend(v6, "setBool:forKey:", a1 & 1, v7);

      if (objc_msgSend(v6, "synchronize"))
      {
        if (qword_1002A9870 != -1)
          swift_once(&qword_1002A9870, sub_1000876CC);
        v8 = sub_10000F6E4();
        osloga = sub_10005FE9C(v8, (uint64_t)qword_1002B6EB0);
        v10 = static os_log_type_t.default.getter(osloga, v9);
        if (sub_100102544(v10, v11, v12, v13, v14, v15, v16, v17, v69, osloga))
        {
          v18 = (uint8_t *)sub_10000797C(18);
          v19 = sub_10000797C(32);
          v76 = v19;
          *(_DWORD *)v18 = 136315394;
          v23 = sub_100102534(v19, 0x8000000100257B30, v20, v21, v22);
          v26 = sub_100102518(v23, v24, v25);
          sub_1001024F4(v26, v27, v28, v29, v30, v31, v32, v33, v70, (uint64_t)oslog, v75);
          v34 = "Synchronized KVS value '%s':'%{BOOL}d'";
LABEL_17:
          _os_log_impl((void *)&_mh_execute_header, oslog, (os_log_type_t)v7, v34, v18, 0x12u);
          sub_1000263F4(v19, v68, (uint64_t)&type metadata for Any + 8);
          sub_100007958(v19);
          v44 = (uint64_t)v18;
          goto LABEL_18;
        }
      }
      else
      {
        if (qword_1002A9870 != -1)
          swift_once(&qword_1002A9870, sub_1000876CC);
        v45 = sub_10000F6E4();
        oslogb = sub_10005FE9C(v45, (uint64_t)qword_1002B6EB0);
        v46 = static os_log_type_t.error.getter();
        if (sub_100102544(v46, v47, v48, v49, v50, v51, v52, v53, v69, oslogb))
        {
          v18 = (uint8_t *)sub_10000797C(18);
          v19 = sub_10000797C(32);
          v76 = v19;
          *(_DWORD *)v18 = 136315394;
          v57 = sub_100102534(v19, 0x8000000100257B30, v54, v55, v56);
          v60 = sub_100102518(v57, v58, v59);
          sub_1001024F4(v60, v61, v62, v63, v64, v65, v66, v67, v71, (uint64_t)oslog, v75);
          v34 = "Failed to synchronize KVS value '%s':'%{BOOL}d'";
          goto LABEL_17;
        }
      }
    }
    else
    {
      if (qword_1002A9870 != -1)
        swift_once(&qword_1002A9870, sub_1000876CC);
      v35 = sub_10000F6E4();
      oslog = sub_10005FE9C(v35, (uint64_t)qword_1002B6EB0);
      v37 = static os_log_type_t.default.getter(oslog, v36);
      if (os_log_type_enabled(oslog, v37))
      {
        v38 = (uint8_t *)sub_10000797C(12);
        v39 = sub_10000797C(32);
        v76 = v39;
        *(_DWORD *)v38 = 136315138;
        v75 = sub_100102534(v39, 0x8000000100257B30, v40, v41, v42);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v38 + 4);
        _os_log_impl((void *)&_mh_execute_header, oslog, v37, "Deny updating '%s', the device has not yet unlocked", v38, 0xCu);
        sub_1000263F4(v39, v43, (uint64_t)&type metadata for Any + 8);
        sub_100007958(v39);
        v44 = (uint64_t)v38;
LABEL_18:
        sub_100007958(v44);

        return;
      }
    }

  }
}

id sub_100101CE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  id v6;
  NSString v7;
  id v8;

  v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v3));
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v8 = objc_msgSend(v6, "initWithStoreIdentifier:type:", v7, a3);

  return v8;
}

_QWORD *sub_100101D60()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[3];
  void *v24;

  v1 = (_QWORD *)v0;
  v2 = type metadata accessor for NSNotificationCenter.Publisher(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_BYTE *)(v0 + 16) = 0;
  sub_1000078E0(0, (unint64_t *)&unk_1002B17E8, NSUbiquitousKeyValueStore_ptr);
  v6 = sub_100101CE8(0xD00000000000001ALL, 0x8000000100251980, 1);
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 40) = 0;
  *(_QWORD *)(v0 + 24) = v6;
  *(_BYTE *)(v0 + 48) = 0;
  v7 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  NSNotificationCenter.publisher(for:object:)(NSUbiquitousKeyValueStoreDidChangeExternallyNotification, 0);

  v8 = type metadata accessor for KeyBagController();
  sub_100066CF4(v8);
  v1[7] = sub_1000C3F28();
  sub_1000078E0(0, (unint64_t *)&qword_1002AA660, OS_dispatch_queue_ptr);
  swift_retain();
  v10 = (void *)static OS_dispatch_queue.main.getter(v9);
  v11 = swift_allocObject(&unk_10028C050, 32, 7);
  *(_QWORD *)(v11 + 24) = &off_10028C030;
  swift_unknownObjectWeakInit(v11 + 16, v1);
  swift_retain();
  v12 = sub_1000C8454(v10, (uint64_t)sub_10002D0D4, v11);
  v14 = v13;
  swift_release();
  swift_release();
  v24 = v12;
  v15 = sub_100066CF4((uint64_t)&unk_10028C078);
  *(_QWORD *)(v15 + 16) = v14;
  v16 = sub_100066C34(&qword_1002B17F8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Publisher, (uint64_t)&protocol conformance descriptor for NSNotificationCenter.Publisher);
  sub_100102560();
  Publisher<>.sink(receiveValue:)(sub_1001024E8, v15, v2, v16);
  swift_release();
  AnyCancellable.store(in:)(&v24);
  swift_unknownObjectRelease(v14);
  sub_10000B348();
  sub_100066C34((unint64_t *)&qword_1002B1800, 255, (uint64_t (*)(uint64_t))type metadata accessor for KeyBagController, (uint64_t)&unk_100222C64);
  swift_retain();
  dispatch thunk of ObservableObject.objectWillChange.getter(v8);
  v23[1] = v23[2];
  v17 = sub_100066CF4((uint64_t)&unk_10028C0A0);
  *(_QWORD *)(v17 + 16) = v14;
  v18 = type metadata accessor for ObservableObjectPublisher(0);
  sub_100102560();
  Publisher<>.sink(receiveValue:)(sub_10005E230, v17, v18, &protocol witness table for ObservableObjectPublisher);
  swift_release();
  AnyCancellable.store(in:)(&v24);
  swift_release();
  swift_release();
  swift_unknownObjectRelease(v14);
  sub_10000B348();
  v19 = v24;
  v20 = v1[4];
  v21 = v1[5];
  v1[4] = v24;
  v1[5] = v14;
  swift_unknownObjectRetain(v14);
  swift_bridgeObjectRetain(v19);
  sub_10002D108(v20, v21);
  swift_getObjectType(v14);
  swift_unknownObjectRetain(v14);
  swift_bridgeObjectRetain(v19);
  OS_dispatch_source_data_add.add(data:)(1uLL);
  swift_unknownObjectRelease_n(v14, 2);
  swift_bridgeObjectRelease_n(v19, 2);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v1;
}

uint64_t sub_1001020D8()
{
  uint64_t v0;

  sub_10002D108(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  swift_release();
  return v0;
}

uint64_t sub_100102104()
{
  uint64_t v0;

  sub_1001020D8();
  return swift_deallocClassInstance(v0, 64, 7);
}

uint64_t type metadata accessor for CloudPreferencesController()
{
  return objc_opt_self(_TtC13EnsembleAgent26CloudPreferencesController);
}

uint64_t sub_100102144@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for CloudPreferencesController();
  result = ObservableObject<>.objectWillChange.getter(v2);
  *a1 = result;
  return result;
}

void sub_10010217C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  void *v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  void *v13;
  NSString v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = v0;
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v0 + 56) + 16);
  if (v2 == *(unsigned __int8 *)(v0 + 48))
  {
    if (!*(_BYTE *)(v0 + 48))
      return;
  }
  else
  {
    *(_BYTE *)(v0 + 48) = v2;
    if (v2)
    {
      if (qword_1002A9870 != -1)
        swift_once(&qword_1002A9870, sub_1000876CC);
      v3 = sub_10000F6E4();
      v4 = sub_10005FE9C(v3, (uint64_t)qword_1002B6EB0);
      v6 = static os_log_type_t.default.getter(v4, v5);
      if (os_log_type_enabled(v4, v6))
      {
        v7 = (uint8_t *)sub_10000797C(2);
        *(_WORD *)v7 = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, v6, "Keybag has unlocked, synchronize with KVS...", v7, 2u);
        sub_100007958((uint64_t)v7);
      }

      v8 = *(void **)(v0 + 24);
      if (!v8)
        goto LABEL_24;
      v9 = objc_msgSend(v8, "synchronize");
      if ((v9 & 1) == 0)
      {
        v10 = Logger.logObject.getter(v9);
        v11 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v10, v11))
        {
          v12 = (uint8_t *)sub_10000797C(2);
          *(_WORD *)v12 = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, v11, "Failed to synchronize KVS for initial load", v12, 2u);
          sub_100007958((uint64_t)v12);
        }

      }
    }
    if ((*(_BYTE *)(v1 + 48) & 1) == 0)
      return;
  }
  v13 = *(void **)(v1 + 24);
  if (!v13)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    return;
  }
  v14 = sub_100102554();
  v15 = objc_msgSend(v13, "BOOLForKey:", v14);

  if (v15 != *(unsigned __int8 *)(v1 + 16))
  {
    v16 = type metadata accessor for CloudPreferencesController();
    sub_100066C34(&qword_1002B17E0, v17, (uint64_t (*)(uint64_t))type metadata accessor for CloudPreferencesController, (uint64_t)&unk_100225FCC);
    ObservableObject<>.objectWillChange.getter(v16);
    ObservableObjectPublisher.send()();
    sub_10000B348();
    if (qword_1002A9870 != -1)
      swift_once(&qword_1002A9870, sub_1000876CC);
    v18 = sub_10000F6E4();
    v19 = sub_10005FE9C(v18, (uint64_t)qword_1002B6EB0);
    v21 = static os_log_type_t.default.getter(v19, v20);
    if (os_log_type_enabled(v19, v21))
    {
      v22 = sub_10000797C(18);
      v23 = sub_10000797C(32);
      v26 = v23;
      *(_DWORD *)v22 = 136315394;
      v25 = sub_100006FCC(0xD000000000000016, 0x8000000100257B30, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v22 + 4);
      *(_WORD *)(v22 + 12) = 1024;
      LODWORD(v25) = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, (char *)&v25 + 4, v22 + 14);
      _os_log_impl((void *)&_mh_execute_header, v19, v21, "Updated KVS value '%s':'%{BOOL}d'", (uint8_t *)v22, 0x12u);
      sub_1000263F4(v23, v24, (uint64_t)&type metadata for Any + 8);
      sub_100007958(v23);
      sub_100007958(v22);
    }

    *(_BYTE *)(v1 + 16) = v15;
  }
}

uint64_t sub_1001024A0()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001024C4()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_1001024E8(uint64_t a1)
{
  uint64_t v1;

  sub_10002C82C(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1001024F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11)
{
  char v11;
  uint64_t v12;
  uint64_t v13;

  *(_WORD *)(v12 + 12) = 1024;
  a11 = v11 & 1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(&a11, v13 + 4, v12 + 14, v12 + 18);
}

uint64_t sub_100102518(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  va_list va;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  va_arg(va1, _QWORD);
  v6 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)((uint64_t *)va, va1, v4, v3 + 12);
}

uint64_t sub_100102534(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  return sub_100006FCC(0xD000000000000016, a2, (uint64_t *)va);
}

BOOL sub_100102544(os_log_type_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_log_t oslog)
{
  return os_log_type_enabled(oslog, a1);
}

NSString sub_100102554()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_100102560()
{
  uint64_t v0;

  return swift_unknownObjectRetain_n(v0, 2);
}

void sub_10010256C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  void *v12;
  int v13;
  int v14;
  _QWORD *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = a1;
    sub_100058678();
    v3 = _swiftEmptyArrayStorage;
    v4 = sub_100071A78(v2);
    if ((v4 & 0x8000000000000000) == 0)
    {
      v6 = v4;
      if (v4 < 1 << *(_BYTE *)(v2 + 32))
      {
        v7 = v2 + 64;
        v24 = v2 + 64;
        v25 = v2;
        while ((*(_QWORD *)(v7 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
        {
          if (v5 != *(_DWORD *)(v2 + 36))
            goto LABEL_21;
          v26 = v1;
          v27 = v5;
          v8 = *(_QWORD *)(v2 + 56) + 32 * v6;
          v9 = *(_QWORD *)v8;
          v10 = *(_QWORD *)(v8 + 8);
          v11 = *(unsigned __int8 *)(v8 + 16);
          v12 = *(void **)(v8 + 24);
          if (*(_BYTE *)(v8 + 17))
            v13 = 256;
          else
            v13 = 0;
          v14 = v13 | v11;
          v15 = v3;
          v16 = v12;
          v17 = sub_1001027D4(v9, v10, v14, v12);
          v19 = v18;

          v3 = v15;
          v20 = v15[2];
          if (v20 >= v15[3] >> 1)
          {
            sub_100058678();
            v3 = v15;
          }
          v3[2] = v20 + 1;
          v21 = &v3[2 * v20];
          v21[4] = v17;
          v21[5] = v19;
          v2 = v25;
          v22 = -1 << *(_BYTE *)(v25 + 32);
          if ((uint64_t)v6 >= -v22)
            goto LABEL_22;
          v7 = v24;
          if ((*(_QWORD *)(v24 + 8 * (v6 >> 6)) & (1 << v6)) == 0)
            goto LABEL_23;
          if (v27 != *(_DWORD *)(v25 + 36))
            goto LABEL_24;
          v23 = _HashTable.occupiedBucket(after:)(v6, v24, ~v22);
          v1 = v26 - 1;
          if (v26 == 1)
            return;
          v6 = v23;
          if ((v23 & 0x8000000000000000) == 0)
          {
            v5 = *(_DWORD *)(v25 + 36);
            if (v23 < 1 << *(_BYTE *)(v25 + 32))
              continue;
          }
          goto LABEL_25;
        }
        __break(1u);
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
      }
    }
LABEL_25:
    __break(1u);
  }
}

uint64_t sub_100102768()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10000897C(v0, qword_1002B1810);
  sub_100006FB4(v0, (uint64_t)qword_1002B1810);
  return Logger.init(subsystem:category:)(0xD00000000000001ALL, 0x8000000100251980, 1481593424, 0xE400000000000000);
}

uint64_t sub_1001027D4(unint64_t a1, unint64_t a2, int a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  Swift::String v22;
  Swift::String v23;
  __int16 v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  Swift::String v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  Swift::String v32;
  void *object;
  Swift::String v34;
  _QWORD v36[2];
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  Swift::String v46;
  int v47;
  uint64_t v48;
  unint64_t v49;

  v47 = a3;
  v7 = type metadata accessor for UUID(0);
  v44 = *(_QWORD *)(v7 - 8);
  v45 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a4)
  {
    v10 = objc_msgSend(a4, "description");
    v46._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v46._object = v11;

  }
  else
  {
    v46._countAndFlagsBits = 0x74655320746F4ELL;
    v46._object = (void *)0xE700000000000000;
  }
  v42 = HIWORD(a1);
  v43 = HIBYTE(a1);
  v40 = HIDWORD(a1);
  v41 = a1 >> 40;
  v38 = a1 >> 16;
  v39 = a1 >> 24;
  v48 = 0;
  v49 = 0xE000000000000000;
  v36[1] = a2 >> 8;
  v37 = a1 >> 8;
  _StringGuts.grow(_:)(29);
  swift_bridgeObjectRelease(v49);
  v48 = 542327881;
  v49 = 0xE400000000000000;
  v12 = UUID.init(uuid:)(a1, v37, v38, v39, v40, v41, v42, v43);
  v13 = UUID.uuidString.getter(v12);
  v15 = v14;
  (*(void (**)(char *, uint64_t))(v44 + 8))(v9, v45);
  v16 = sub_1000599D0(8, v13, v15);
  v18 = v17;
  v19 = static String._fromSubstring(_:)(v16);
  v21 = v20;
  swift_bridgeObjectRelease(v18);
  v22._countAndFlagsBits = v19;
  v22._object = v21;
  String.append(_:)(v22);
  swift_bridgeObjectRelease(v21);
  v23._countAndFlagsBits = 0x204E49202CLL;
  v23._object = (void *)0xE500000000000000;
  String.append(_:)(v23);
  v24 = v47;
  if ((v47 & 1) != 0)
    v25 = 1702195828;
  else
    v25 = 0x65736C6166;
  if ((v47 & 1) != 0)
    v26 = 0xE400000000000000;
  else
    v26 = 0xE500000000000000;
  v27 = v26;
  String.append(_:)(*(Swift::String *)&v25);
  swift_bridgeObjectRelease(v26);
  v28._countAndFlagsBits = 0x20554F202CLL;
  v28._object = (void *)0xE500000000000000;
  String.append(_:)(v28);
  if ((v24 & 0x100) != 0)
    v29 = 1702195828;
  else
    v29 = 0x65736C6166;
  if ((v24 & 0x100) != 0)
    v30 = 0xE400000000000000;
  else
    v30 = 0xE500000000000000;
  v31 = v30;
  String.append(_:)(*(Swift::String *)&v29);
  swift_bridgeObjectRelease(v30);
  v32._countAndFlagsBits = 0x27205453202CLL;
  v32._object = (void *)0xE600000000000000;
  String.append(_:)(v32);
  object = v46._object;
  String.append(_:)(v46);
  swift_bridgeObjectRelease(object);
  v34._countAndFlagsBits = 39;
  v34._object = (void *)0xE100000000000000;
  String.append(_:)(v34);
  return v48;
}

uint64_t sub_100102A78()
{
  uint64_t v0;
  int v1;

  if (*(_BYTE *)(v0 + 17))
    v1 = 256;
  else
    v1 = 0;
  return sub_1001027D4(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), v1 | *(unsigned __int8 *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_100102A9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  id v7;
  objc_class *v8;
  id v9;
  char *v10;
  id v11;
  char *v12;
  id v13;
  char *v14;
  id v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  NSString v28;
  _QWORD v30[3];
  void *v31;

  v1 = v0;
  v2 = sub_10000F6E4();
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v1 + 16) = &_swiftEmptySetSingleton;
  *(_QWORD *)(v1 + 56) = 0;
  *(_QWORD *)(v1 + 64) = 0;
  if (qword_1002A98D0 != -1)
    swift_once(&qword_1002A98D0, sub_100102768);
  v6 = sub_100006FB4(v2, (uint64_t)qword_1002B1810);
  v7 = objc_msgSend(objc_allocWithZone((Class)SFClient), "init");
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  v8 = (objc_class *)type metadata accessor for ProximityController.SessionDelegate(0);
  v9 = objc_allocWithZone(v8);
  v10 = (char *)sub_1001034AC((uint64_t)v5);
  v11 = objc_msgSend(objc_allocWithZone((Class)NISession), "init");
  *(_QWORD *)(v1 + 24) = v7;
  *(_QWORD *)(v1 + 32) = v10;
  *(_QWORD *)(v1 + 40) = v11;
  *(_QWORD *)(v1 + 48) = 200;
  v12 = &v10[OBJC_IVAR____TtCC13EnsembleAgent19ProximityControllerP33_82913D7117FC4A225C49B8B63103147315SessionDelegate_lifecycleManager];
  *((_QWORD *)v12 + 1) = &off_10028C168;
  swift_unknownObjectWeakAssign(v12, v1);
  sub_1000078E0(0, (unint64_t *)&qword_1002AA660, OS_dispatch_queue_ptr);
  v13 = v7;
  v14 = v10;
  v15 = v11;
  v16 = sub_10002D790();
  v17 = (void *)static OS_dispatch_queue.main.getter(v16);
  v18 = swift_allocObject(&unk_10028C200, 32, 7);
  *(_QWORD *)(v18 + 24) = &off_10028C1B8;
  swift_unknownObjectWeakInit(v18 + 16, v1);
  swift_retain();
  v19 = sub_1000C8454(v17, (uint64_t)sub_10002D0D4, v18);
  v21 = v20;
  swift_release();
  sub_10002645C();
  v31 = v19;
  sub_100066C34(&qword_1002B19D0, 255, type metadata accessor for ProximityController.SessionDelegate, (uint64_t)&unk_100226164);
  dispatch thunk of ObservableObject.objectWillChange.getter(v8);
  v30[1] = v30[2];
  v22 = swift_allocObject(&unk_10028C228, 24, 7);
  *(_QWORD *)(v22 + 16) = v21;
  v23 = type metadata accessor for ObservableObjectPublisher(0);
  swift_unknownObjectRetain_n(v21, 2);
  Publisher<>.sink(receiveValue:)(sub_10005E230, v22, v23, &protocol witness table for ObservableObjectPublisher);
  swift_release();
  AnyCancellable.store(in:)(&v31);
  swift_release();
  swift_unknownObjectRelease(v21);
  sub_10000B348();
  v24 = v31;
  v25 = *(_QWORD *)(v1 + 56);
  v26 = *(_QWORD *)(v1 + 64);
  *(_QWORD *)(v1 + 56) = v31;
  *(_QWORD *)(v1 + 64) = v21;
  swift_unknownObjectRetain(v21);
  swift_bridgeObjectRetain(v24);
  sub_10002D108(v25, v26);
  v27 = *(id *)(v1 + 24);
  v28 = String._bridgeToObjectiveC()();
  objc_msgSend(v27, "activateAssertionWithIdentifier:", v28);

  sub_100102DF8(v15);
  swift_unknownObjectRelease(v21);
  swift_bridgeObjectRelease();

  return v1;
}

#error "100102F5C: call analysis failed (funcsize=144)"

id sub_10010306C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  id v6;
  NSString v7;
  id v8;

  v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v3));
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v8 = objc_msgSend(v6, "initWithName:devicePresencePreset:", v7, a3);

  return v8;
}

unint64_t sub_1001030E4()
{
  return 0xD000000000000024;
}

double sub_100103100()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  int64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  double result;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  char v36[24];
  _QWORD v37[5];

  v1 = v0;
  v32 = *v0;
  v2 = (uint64_t *)(v0[4]
                 + OBJC_IVAR____TtCC13EnsembleAgent19ProximityControllerP33_82913D7117FC4A225C49B8B63103147315SessionDelegate_devices);
  sub_10005FE28((uint64_t)v2, (uint64_t)v36);
  v3 = *v2;
  sub_100043078(v37, v3);
  v4 = v37[0];
  v5 = v37[1];
  v6 = v37[3];
  v7 = v37[4];
  v8 = (unint64_t)(v37[2] + 64) >> 6;
  swift_bridgeObjectRetain_n(v3, 2);
  v9 = _swiftEmptyArrayStorage;
  while (v7)
  {
    v10 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v11 = v10 | (v6 << 6);
LABEL_22:
    if (*(_BYTE *)(*(_QWORD *)(v4 + 56) + 32 * v11 + 16) == 1)
    {
      v33 = *(_OWORD *)(*(_QWORD *)(v4 + 48) + 16 * v11);
      if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
      {
        sub_100105FC0();
        v9 = v17;
      }
      v16 = v9[2];
      if (v16 >= v9[3] >> 1)
      {
        sub_100105FC0();
        v9 = v18;
      }
      v9[2] = v16 + 1;
      *(_OWORD *)&v9[2 * v16 + 4] = v33;
    }
  }
  v12 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    goto LABEL_36;
  }
  if (v12 >= v8)
    goto LABEL_28;
  v13 = *(_QWORD *)(v5 + 8 * v12);
  v14 = v6 + 1;
  if (v13)
    goto LABEL_21;
  v14 = v6 + 2;
  if (v6 + 2 >= v8)
    goto LABEL_28;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
    goto LABEL_21;
  v14 = v6 + 3;
  if (v6 + 3 >= v8)
    goto LABEL_28;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
    goto LABEL_21;
  v14 = v6 + 4;
  if (v6 + 4 >= v8)
    goto LABEL_28;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
    goto LABEL_21;
  v14 = v6 + 5;
  if (v6 + 5 >= v8)
    goto LABEL_28;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
    goto LABEL_21;
  v14 = v6 + 6;
  if (v6 + 6 >= v8)
    goto LABEL_28;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
LABEL_21:
    v7 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v14 << 6);
    v6 = v14;
    goto LABEL_22;
  }
  v15 = v6 + 7;
  while (v15 < v8)
  {
    v13 = *(_QWORD *)(v5 + 8 * v15++);
    if (v13)
    {
      v14 = v15 - 1;
      goto LABEL_21;
    }
  }
LABEL_28:
  sub_10000E420();
  swift_release();
  sub_1000DF7F4();
  v4 = v19;
  v20 = v1[2];
  swift_bridgeObjectRetain();
  v21 = sub_100198A54(v4, v20);
  sub_10000E420();
  if ((v21 & 1) != 0)
    goto LABEL_34;
  if (qword_1002A98D0 != -1)
LABEL_36:
    swift_once(&qword_1002A98D0, sub_100102768);
  v22 = sub_10000F6E4();
  v23 = sub_100006FB4(v22, (uint64_t)qword_1002B1810);
  v24 = swift_bridgeObjectRetain_n(v4, 2);
  Logger.logObject.getter(v24);
  v25 = sub_10002D844();
  if (os_log_type_enabled(v23, v25))
  {
    v26 = (uint8_t *)sub_10000797C(12);
    v27 = sub_10000797C(32);
    v35 = v27;
    *(_DWORD *)v26 = 136446210;
    v28 = sub_100061BB4(v4);
    v34 = sub_100006FCC(v28, v29, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v26 + 4);
    sub_100007998();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v23, v25, "Nearby: %{public}s", v26, 0xCu);
    swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
    sub_100007958(v27);
    sub_100007958((uint64_t)v26);

  }
  else
  {

    sub_100007998();
  }
  sub_100066C34(&qword_1002B19C8, v30, (uint64_t (*)(uint64_t))type metadata accessor for ProximityController, (uint64_t)&unk_1002261BC);
  ObservableObject<>.objectWillChange.getter(v32);
  ObservableObjectPublisher.send()();
  sub_10000B348();
  v1[2] = v4;
LABEL_34:
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

id sub_1001034AC(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  objc_super v12;

  v3 = OBJC_IVAR____TtCC13EnsembleAgent19ProximityControllerP33_82913D7117FC4A225C49B8B63103147315SessionDelegate_devices;
  v4 = sub_100033B3C();
  v5 = v1;
  *(_QWORD *)&v1[v3] = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for UniversalControlDeviceID, &type metadata for ProximityController.Device, v4);
  v6 = &v5[OBJC_IVAR____TtCC13EnsembleAgent19ProximityControllerP33_82913D7117FC4A225C49B8B63103147315SessionDelegate_lifecycleManager];
  *((_QWORD *)v6 + 1) = 0;
  swift_unknownObjectWeakInit(v6, 0);
  v7 = &v5[OBJC_IVAR____TtCC13EnsembleAgent19ProximityControllerP33_82913D7117FC4A225C49B8B63103147315SessionDelegate_logger];
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v7, a1, v8);

  v12.receiver = v5;
  v12.super_class = (Class)type metadata accessor for ProximityController.SessionDelegate(0);
  v10 = objc_msgSendSuper2(&v12, "init");
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
  return v10;
}

uint64_t sub_10010359C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t result;
  uint64_t v12;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1+ OBJC_IVAR____TtCC13EnsembleAgent19ProximityControllerP33_82913D7117FC4A225C49B8B63103147315SessionDelegate_logger, v2);
  v7 = Logger.logObject.getter(v6);
  v9 = static os_log_type_t.default.getter(v7, v8);
  if (os_log_type_enabled(v7, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v9, "NISession Running", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  result = swift_unknownObjectWeakLoadStrong(v1+ OBJC_IVAR____TtCC13EnsembleAgent19ProximityControllerP33_82913D7117FC4A225C49B8B63103147315SessionDelegate_lifecycleManager);
  if (result)
  {
    *(_QWORD *)(result + 48) = 200;
    return swift_unknownObjectRelease(result);
  }
  return result;
}

#error "1001037AC: call analysis failed (funcsize=77)"

unint64_t sub_100103864()
{
  return 0xD000000000000010;
}

#error "100103974: call analysis failed (funcsize=55)"

unint64_t sub_1001039C4()
{
  return 0xD000000000000015;
}

uint64_t sub_100103A40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2+ OBJC_IVAR____TtCC13EnsembleAgent19ProximityControllerP33_82913D7117FC4A225C49B8B63103147315SessionDelegate_logger, v4);
  v9 = Logger.logObject.getter(v8);
  v11 = static os_log_type_t.default.getter(v9, v10);
  if (os_log_type_enabled(v9, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v12 = 134217984;
    v15 = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v12 + 4, v12 + 12);
    _os_log_impl((void *)&_mh_execute_header, v9, v11, "NISession Suspended: %ld", v12, 0xCu);
    swift_slowDealloc(v12, -1, -1);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_100103BD4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = v3;
  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16))(v11, v4+ OBJC_IVAR____TtCC13EnsembleAgent19ProximityControllerP33_82913D7117FC4A225C49B8B63103147315SessionDelegate_logger, v7, v9);
  v13 = Logger.logObject.getter(v12);
  v15 = static os_log_type_t.default.getter(v13, v14);
  if (os_log_type_enabled(v13, v15))
  {
    v16 = swift_slowAlloc(18, -1);
    *(_DWORD *)v16 = 134218240;
    v20 = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v16 + 4);
    *(_WORD *)(v16 + 12) = 1024;
    HIDWORD(v19) = a3 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)((char *)&v19 + 4, &v20, v16 + 14);
    _os_log_impl((void *)&_mh_execute_header, v13, v15, "NISession Suspension Ended: %ld, isActive: %{BOOL}d", (uint8_t *)v16, 0x12u);
    swift_slowDealloc(v16, -1, -1);
  }

  result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  if ((a3 & 1) != 0)
  {
    result = swift_unknownObjectWeakLoadStrong(v4+ OBJC_IVAR____TtCC13EnsembleAgent19ProximityControllerP33_82913D7117FC4A225C49B8B63103147315SessionDelegate_lifecycleManager);
    if (result)
    {
      v18 = result;
      sub_10010586C();
      return swift_unknownObjectRelease(v18);
    }
  }
  return result;
}

uint64_t sub_100103DC8(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __n128 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint8_t *v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v29;
  uint8_t *v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v29 - v8;
  v10 = sub_100105EE8(a1);
  if (v11)
  {
    v12 = v10;
    v13 = v11;
    v14 = swift_bridgeObjectRetain();
    v15 = UniversalControlDeviceID.init(stringValue:)(v12, v13, v14);
    if ((v16 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v9, v1+ OBJC_IVAR____TtCC13EnsembleAgent19ProximityControllerP33_82913D7117FC4A225C49B8B63103147315SessionDelegate_logger, v3);
      swift_bridgeObjectRetain();
      v22 = Logger.logObject.getter(v21);
      v23 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v22, v23))
      {
        v24 = (uint8_t *)swift_slowAlloc(12, -1);
        v32 = swift_slowAlloc(32, -1);
        v34 = v32;
        v31 = v24;
        *(_DWORD *)v24 = 136446210;
        v30 = v24 + 4;
        swift_bridgeObjectRetain();
        v33 = sub_100006FCC(v12, v13, &v34);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v30);
        swift_bridgeObjectRelease_n(v13, 3);
        v25 = v31;
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "Nearby Device: %{public}s)", v31, 0xCu);
        v26 = v32;
        swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v26, -1, -1);
        swift_slowDealloc(v25, -1, -1);

        (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
      }
      else
      {

        v27 = swift_bridgeObjectRelease_n(v13, 2);
        (*(void (**)(char *, uint64_t, __n128))(v4 + 8))(v9, v3, v27);
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v1+ OBJC_IVAR____TtCC13EnsembleAgent19ProximityControllerP33_82913D7117FC4A225C49B8B63103147315SessionDelegate_logger, v3);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Nearby Device: (nil)", v20, 2u);
      swift_slowDealloc(v20, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    return 0;
  }
  return v15;
}

unint64_t sub_1001040C8(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t result;
  unint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unsigned __int8 *v21;
  unint64_t v22;
  int v23;
  void *v24;
  id v25;
  BOOL v26;
  int v27;
  void *v28;
  NSObject *v29;
  uint64_t v30;
  os_log_type_t v31;
  int v32;
  uint64_t v33;
  uint8_t *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint8_t *v44;
  uint64_t v45;
  id v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint8_t *v50;
  uint8_t *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  id v74;
  uint64_t v75;
  uint64_t v76[3];
  char v77[20];

  v3 = v2;
  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sub_100103DC8(a2);
  if ((v11 & 1) != 0)
    return result;
  v12 = result;
  v13 = v10;
  v61 = result;
  v62 = result >> 8;
  v63 = result >> 16;
  v64 = result >> 24;
  v65 = result >> 40;
  v66 = HIDWORD(result);
  v67 = HIBYTE(result);
  v68 = HIWORD(result);
  v69 = v10;
  v70 = v10 >> 8;
  v71 = v10 >> 16;
  v73 = v10 >> 24;
  v14 = HIDWORD(v10);
  v15 = v10 >> 40;
  v60 = HIWORD(v10);
  v16 = (_QWORD *)(v2
                 + OBJC_IVAR____TtCC13EnsembleAgent19ProximityControllerP33_82913D7117FC4A225C49B8B63103147315SessionDelegate_devices);
  v72 = HIBYTE(v10);
  v17 = swift_beginAccess(v16, v77, 0, 0);
  v59 = v16;
  v18 = *v16;
  if (!*(_QWORD *)(v18 + 16))
  {
    v57 = v15;
    v58 = v14;
LABEL_9:
    v56 = 0;
    v27 = 0;
    v24 = 0;
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  v19 = sub_1001A8C70(v12, v13);
  if ((v20 & 1) == 0)
  {
    v57 = v15;
    v58 = v14;
    v17 = swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  v21 = (unsigned __int8 *)(*(_QWORD *)(v18 + 56) + 32 * v19);
  v61 = *v21;
  v62 = v21[1];
  v63 = v21[2];
  v64 = v21[3];
  v66 = v21[4];
  v65 = v21[5];
  v68 = v21[6];
  v67 = v21[7];
  v69 = v21[8];
  v70 = v21[9];
  v71 = v21[10];
  v73 = v21[11];
  v58 = v21[12];
  v57 = v21[13];
  v60 = v21[14];
  v72 = v21[15];
  v56 = v21[16];
  v22 = v6;
  v23 = v21[17];
  v24 = (void *)*((_QWORD *)v21 + 3);
  v25 = v24;
  v17 = swift_bridgeObjectRelease();
  v26 = v23 == 0;
  v6 = v22;
  if (v26)
    v27 = 0;
  else
    v27 = 256;
LABEL_10:
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16))(v8, v3+ OBJC_IVAR____TtCC13EnsembleAgent19ProximityControllerP33_82913D7117FC4A225C49B8B63103147315SessionDelegate_logger, v5, v17);
  v74 = v24;
  v28 = v24;
  v29 = Logger.logObject.getter(v74);
  v31 = static os_log_type_t.default.getter(v29, v30);
  v32 = v31;
  if (os_log_type_enabled(v29, v31))
  {
    v54 = v5;
    v33 = swift_slowAlloc(12, -1);
    v52 = v32;
    HIDWORD(v49) = v27;
    v34 = (uint8_t *)v33;
    v53 = swift_slowAlloc(32, -1);
    v76[0] = v53;
    v55 = v3;
    v51 = v34;
    *(_DWORD *)v34 = 136315138;
    v50 = v34 + 4;
    v35 = v28;
    v68 = v61 | (unint64_t)(unsigned __int16)(v62 << 8) | ((unint64_t)v63 << 16) & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)v64 << 24) | ((unint64_t)v66 << 32) | ((unint64_t)v65 << 40) | ((unint64_t)v68 << 48) | (v67 << 56);
    v36 = v68;
    v37 = v69 | (unint64_t)(unsigned __int16)(v70 << 8) | ((unint64_t)v71 << 16) & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)v73 << 24) | ((unint64_t)v58 << 32) | ((unint64_t)v57 << 40) | ((unint64_t)v60 << 48) | (v72 << 56);
    v73 = v6;
    v38 = HIDWORD(v49) | v56;
    v39 = v74;
    v40 = sub_1001027D4(v36, v37, v38, v35);
    v72 = (unint64_t)v8;
    v41 = v40;
    v43 = v42;

    v75 = sub_100006FCC(v41, v43, v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76, v50);

    swift_bridgeObjectRelease();
    v44 = v51;
    _os_log_impl((void *)&_mh_execute_header, v29, (os_log_type_t)v52, "Device Discovered: %s", v51, 0xCu);
    v45 = v53;
    swift_arrayDestroy(v53, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v45, -1, -1);
    swift_slowDealloc(v44, -1, -1);

    (*(void (**)(unint64_t, uint64_t))(v73 + 8))(v72, v54);
  }
  else
  {

    v46 = v74;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  swift_beginAccess(v59, v76, 33, 0);
  v47 = v74;
  sub_1001AAAE8();
  swift_endAccess(v76);
  v48 = type metadata accessor for ProximityController.SessionDelegate(0);
  sub_100066C34(&qword_1002B19D0, 255, type metadata accessor for ProximityController.SessionDelegate, (uint64_t)&unk_100226164);
  ObservableObject<>.objectWillChange.getter(v48);
  ObservableObjectPublisher.send()();

  return swift_release();
}

uint64_t sub_100104754(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  void *v27;
  id v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  BOOL v33;
  __int16 v34;
  uint64_t v35;
  NSObject *v36;
  uint64_t v37;
  os_log_type_t v38;
  int v39;
  uint8_t *v40;
  __int128 v41;
  id v42;
  int v43;
  int v44;
  id v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint8_t *v49;
  uint64_t v50;
  id v51;
  id v52;
  uint64_t v53;
  BOOL v54;
  char *v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  int v59;
  uint8_t *v60;
  uint8_t *v61;
  uint64_t v62;
  uint8_t *v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  char *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  char v72[24];
  uint64_t v73;
  _BYTE v74[16];
  uint64_t v75[3];
  char v76[24];
  __int128 v77;
  __int16 v78;
  id v79;

  v70 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v70 - 8);
  __chkstk_darwin(v70);
  v8 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v63 - v10;
  v71 = v3;
  result = sub_100103DC8(a2);
  if ((v14 & 1) != 0)
    return result;
  v15 = result;
  v16 = v13;
  v17 = (uint64_t *)(v71
                  + OBJC_IVAR____TtCC13EnsembleAgent19ProximityControllerP33_82913D7117FC4A225C49B8B63103147315SessionDelegate_devices);
  swift_beginAccess(v71+ OBJC_IVAR____TtCC13EnsembleAgent19ProximityControllerP33_82913D7117FC4A225C49B8B63103147315SessionDelegate_devices, v76, 0, 0);
  v18 = *v17;
  v19 = *(_QWORD *)(*v17 + 16);
  v69 = v17;
  if (v19)
  {
    swift_bridgeObjectRetain();
    v20 = sub_1001A8C70(v15, v16);
    if ((v21 & 1) != 0)
    {
      v22 = v11;
      v23 = *(_QWORD *)(v18 + 56) + 32 * v20;
      v24 = *(_BYTE *)(v23 + 16);
      v68 = v8;
      v25 = v6;
      v26 = *(_BYTE *)(v23 + 17);
      v27 = *(void **)(v23 + 24);
      v28 = v27;
      v67 = *(_OWORD *)v23;
      v11 = v22;
      swift_bridgeObjectRelease();
      v77 = v67;
      LOBYTE(v78) = v24;
      HIBYTE(v78) = v26;
      v6 = v25;
      v8 = v68;
      goto LABEL_7;
    }
    swift_bridgeObjectRelease();
  }
  v27 = 0;
  *(_QWORD *)&v77 = v15;
  *((_QWORD *)&v77 + 1) = v16;
  v78 = 0;
LABEL_7:
  v79 = v27;
  if (a3)
  {
    v29 = objc_msgSend(a3, "name");
    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    v32 = v31;

    v33 = v30 == 0x72656E6E69 && v32 == 0xE500000000000000;
    if (v33
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0x72656E6E69, 0xE500000000000000, v30, v32, 0) & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v34 = 257;
    }
    else
    {
      v54 = v30 == 0x726574756FLL && v32 == 0xE500000000000000;
      if (!v54
        && (_stringCompareWithSmolCheck(_:_:expecting:)(0x726574756FLL, 0xE500000000000000, v30, v32, 0) & 1) == 0)
      {
        v55 = v11;
        (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v11, v71+ OBJC_IVAR____TtCC13EnsembleAgent19ProximityControllerP33_82913D7117FC4A225C49B8B63103147315SessionDelegate_logger, v70);
        swift_bridgeObjectRetain();
        v57 = Logger.logObject.getter(v56);
        v58 = static os_log_type_t.error.getter();
        v59 = v58;
        if (os_log_type_enabled(v57, v58))
        {
          v68 = v55;
          LODWORD(v67) = v59;
          v60 = (uint8_t *)swift_slowAlloc(12, -1);
          v66 = swift_slowAlloc(32, -1);
          v75[0] = v66;
          *(_DWORD *)v60 = 136446210;
          v65 = (uint64_t)(v60 + 4);
          v61 = v60;
          swift_bridgeObjectRetain();
          v73 = sub_100006FCC(v30, v32, v75);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74, v65);
          swift_bridgeObjectRelease_n(v32, 3);
          _os_log_impl((void *)&_mh_execute_header, v57, (os_log_type_t)v67, "Unexpected Region: %{public}s", v60, 0xCu);
          v62 = v66;
          swift_arrayDestroy(v66, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v62, -1, -1);
          swift_slowDealloc(v61, -1, -1);

          (*(void (**)(char *, uint64_t))(v6 + 8))(v68, v70);
        }
        else
        {

          swift_bridgeObjectRelease_n(v32, 2);
          (*(void (**)(char *, uint64_t))(v6 + 8))(v55, v70);
        }
        goto LABEL_17;
      }
      swift_bridgeObjectRelease();
      v34 = 256;
    }
    v78 = v34;
  }
  else
  {
    v78 = 0;
  }
LABEL_17:
  v35 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v71+ OBJC_IVAR____TtCC13EnsembleAgent19ProximityControllerP33_82913D7117FC4A225C49B8B63103147315SessionDelegate_logger, v70);
  v36 = Logger.logObject.getter(v35);
  v38 = static os_log_type_t.default.getter(v36, v37);
  v39 = v38;
  if (os_log_type_enabled(v36, v38))
  {
    LODWORD(v66) = v39;
    v40 = (uint8_t *)swift_slowAlloc(12, -1);
    v65 = swift_slowAlloc(32, -1);
    v75[0] = v65;
    *(_QWORD *)&v67 = v6;
    v64 = v40;
    *(_DWORD *)v40 = 136315138;
    v63 = v40 + 4;
    swift_beginAccess(&v77, v72, 0, 0);
    v41 = v77;
    v68 = v8;
    v42 = v79;
    if (HIBYTE(v78))
      v43 = 256;
    else
      v43 = 0;
    v44 = v43 | v78;
    v45 = v79;
    v46 = sub_1001027D4(v41, *((unint64_t *)&v41 + 1), v44, v42);
    v48 = v47;

    v73 = sub_100006FCC(v46, v48, v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74, v63);
    swift_bridgeObjectRelease();
    v49 = v64;
    _os_log_impl((void *)&_mh_execute_header, v36, (os_log_type_t)v66, "Region updated: %s", v64, 0xCu);
    v50 = v65;
    swift_arrayDestroy(v65, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v50, -1, -1);
    swift_slowDealloc(v49, -1, -1);

    (*(void (**)(char *, uint64_t))(v67 + 8))(v68, v70);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v70);
  }
  swift_beginAccess(&v77, v75, 0, 0);
  v51 = v79;
  swift_beginAccess(v69, &v73, 33, 0);
  v52 = v51;
  sub_1001AAAE8();
  swift_endAccess(&v73);
  v53 = type metadata accessor for ProximityController.SessionDelegate(0);
  sub_100066C34(&qword_1002B19D0, 255, type metadata accessor for ProximityController.SessionDelegate, (uint64_t)&unk_100226164);
  ObservableObject<>.objectWillChange.getter(v53);
  ObservableObjectPublisher.send()();

  return swift_release();
}

void sub_100104EFC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  char v22;
  id v23;
  id v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  os_log_type_t v28;
  uint8_t *v29;
  __int128 v30;
  id v31;
  int v32;
  int v33;
  id v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint8_t *v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  _BYTE v47[24];
  uint64_t v48;
  _BYTE v49[24];
  __int128 v50;
  __int16 v51;
  id v52;

  v4 = v3;
  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100103DC8(a3);
  if ((v13 & 1) != 0)
    return;
  v14 = v11;
  v15 = v12;
  v16 = (uint64_t *)(v4
                  + OBJC_IVAR____TtCC13EnsembleAgent19ProximityControllerP33_82913D7117FC4A225C49B8B63103147315SessionDelegate_devices);
  swift_beginAccess(v4+ OBJC_IVAR____TtCC13EnsembleAgent19ProximityControllerP33_82913D7117FC4A225C49B8B63103147315SessionDelegate_devices, v49, 0, 0);
  v17 = *v16;
  if (!*(_QWORD *)(*v16 + 16))
    goto LABEL_6;
  swift_bridgeObjectRetain();
  v18 = sub_1001A8C70(v14, v15);
  if ((v19 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_6:
    v23 = 0;
    *(_QWORD *)&v50 = v14;
    *((_QWORD *)&v50 + 1) = v15;
    v51 = 0;
    goto LABEL_7;
  }
  v20 = *(_QWORD *)(v17 + 56) + 32 * v18;
  v21 = *(_BYTE *)(v20 + 16);
  v22 = *(_BYTE *)(v20 + 17);
  v23 = *(id *)(v20 + 24);
  v45 = *(_OWORD *)v20;
  swift_bridgeObjectRelease();
  v50 = v45;
  LOBYTE(v51) = v21;
  HIBYTE(v51) = v22;
LABEL_7:
  v52 = a2;
  v24 = a2;

  v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v4+ OBJC_IVAR____TtCC13EnsembleAgent19ProximityControllerP33_82913D7117FC4A225C49B8B63103147315SessionDelegate_logger, v7);
  v26 = Logger.logObject.getter(v25);
  v28 = static os_log_type_t.default.getter(v26, v27);
  if (os_log_type_enabled(v26, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc(12, -1);
    v43 = swift_slowAlloc(32, -1);
    v48 = v43;
    *(_DWORD *)v29 = 136315138;
    v41 = v29 + 4;
    v42 = v29;
    swift_beginAccess(&v50, v47, 0, 0);
    v44 = v8;
    *(_QWORD *)&v45 = v7;
    v30 = v50;
    v31 = v52;
    if (HIBYTE(v51))
      v32 = 256;
    else
      v32 = 0;
    v33 = v32 | v51;
    v34 = v52;
    v35 = sub_1001027D4(v30, *((unint64_t *)&v30 + 1), v33, v31);
    v37 = v36;

    v46 = sub_100006FCC(v35, v37, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47, v41);
    swift_bridgeObjectRelease();
    v38 = v42;
    _os_log_impl((void *)&_mh_execute_header, v26, v28, "Algorithm state updated: %s", v42, 0xCu);
    v39 = v43;
    swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1, -1);
    swift_slowDealloc(v38, -1, -1);

    (*(void (**)(char *, _QWORD))(v44 + 8))(v10, v45);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  v40 = type metadata accessor for ProximityController.SessionDelegate(0);
  sub_100066C34(&qword_1002B19D0, 255, type metadata accessor for ProximityController.SessionDelegate, (uint64_t)&unk_100226164);
  ObservableObject<>.objectWillChange.getter(v40);
  ObservableObjectPublisher.send()();
  swift_release();

}

void sub_10010532C()
{
  _swift_stdlib_reportUnimplementedInitializer("EnsembleAgent.SessionDelegate", 29, "init()", 6, 0);
  __break(1u);
}

id sub_100105378()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ProximityController.SessionDelegate(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10010540C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for ProximityController.SessionDelegate(0);
  result = ObservableObject<>.objectWillChange.getter(v2);
  *a1 = result;
  return result;
}

uint64_t sub_100105448()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  sub_10002D108(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  return v0;
}

uint64_t sub_100105484()
{
  uint64_t v0;

  sub_100105448();
  return swift_deallocClassInstance(v0, 72, 7);
}

uint64_t type metadata accessor for ProximityController()
{
  return objc_opt_self(_TtC13EnsembleAgent19ProximityController);
}

uint64_t sub_1001054C4()
{
  return type metadata accessor for ProximityController.SessionDelegate(0);
}

uint64_t type metadata accessor for ProximityController.SessionDelegate(uint64_t a1)
{
  uint64_t result;

  result = qword_1002B1990;
  if (!qword_1002B1990)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ProximityController.SessionDelegate);
  return result;
}

uint64_t sub_100105504(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_1002260B8;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

void destroy for ProximityController.Device(uint64_t a1)
{

}

uint64_t initializeWithCopy for ProximityController.Device(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  v3 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v3;
  v4 = v3;
  return a1;
}

uint64_t assignWithCopy for ProximityController.Device(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(a1 + 6) = *(_BYTE *)(a2 + 6);
  *(_BYTE *)(a1 + 7) = *(_BYTE *)(a2 + 7);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  *(_BYTE *)(a1 + 11) = *(_BYTE *)(a2 + 11);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(a1 + 13) = *(_BYTE *)(a2 + 13);
  *(_BYTE *)(a1 + 14) = *(_BYTE *)(a2 + 14);
  *(_BYTE *)(a1 + 15) = *(_BYTE *)(a2 + 15);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  v3 = *(void **)(a1 + 24);
  v4 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = v4;

  return a1;
}

uint64_t assignWithTake for ProximityController.Device(uint64_t a1, uint64_t a2)
{
  void *v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  v3 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);

  return a1;
}

uint64_t getEnumTagSinglePayload for ProximityController.Device(uint64_t a1, unsigned int a2)
{
  int v2;
  unint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 32))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 24);
      if (v3 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ProximityController.Device(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ProximityController.Device()
{
  return &type metadata for ProximityController.Device;
}

uint64_t sub_100105798()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _BYTE v7[24];

  v1 = (_QWORD *)(*(_QWORD *)(v0 + 32)
                + OBJC_IVAR____TtCC13EnsembleAgent19ProximityControllerP33_82913D7117FC4A225C49B8B63103147315SessionDelegate_devices);
  sub_10005FE28((uint64_t)v1, (uint64_t)v7);
  v2 = swift_bridgeObjectRetain(*v1);
  sub_10010256C(v2);
  v4 = v3;
  sub_10000E420();
  v6 = v4;
  swift_bridgeObjectRetain(v4);
  sub_100063410(&v6);
  swift_bridgeObjectRelease(v4);
  return v6;
}

uint64_t sub_10010582C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  sub_100066C34(&qword_1002B19C8, a2, (uint64_t (*)(uint64_t))type metadata accessor for ProximityController, (uint64_t)&unk_1002261BC);
  return ObservableObject<>.objectWillChange.getter(v3);
}

void sub_10010586C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  id v6;

  v1 = v0;
  if (qword_1002A98D0 != -1)
    swift_once(&qword_1002A98D0, sub_100102768);
  v2 = sub_10000F6E4();
  v3 = sub_100006FB4(v2, (uint64_t)qword_1002B1810);
  Logger.logObject.getter(v3);
  v4 = sub_10002D844();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)sub_10000797C(2);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Resuming NISession", v5, 2u);
    sub_100007958((uint64_t)v5);
  }

  v6 = *(id *)(v1 + 40);
  sub_100102DF8(v6);

}

uint64_t sub_100105948()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  char *v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void **aBlock;
  _QWORD v44[5];

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v41 = *(_QWORD *)(v2 - 8);
  v42 = v2;
  __chkstk_darwin(v2);
  sub_10000E5DC();
  v40 = v3;
  v4 = type metadata accessor for DispatchQoS(0);
  v38 = *(_QWORD *)(v4 - 8);
  v39 = v4;
  __chkstk_darwin(v4);
  sub_10000E5DC();
  v37 = v5;
  v6 = type metadata accessor for DispatchTimeInterval(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (uint64_t *)((char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v36 = type metadata accessor for DispatchTime(0);
  v10 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v35 - v14;
  if (qword_1002A98D0 != -1)
    swift_once(&qword_1002A98D0, sub_100102768);
  v16 = sub_10000F6E4();
  v17 = sub_100006FB4(v16, (uint64_t)qword_1002B1810);
  v18 = sub_10002D790();
  Logger.logObject.getter(v18);
  v19 = sub_10002D844();
  if (os_log_type_enabled(v17, v19))
  {
    v20 = (uint8_t *)sub_10000797C(12);
    *(_DWORD *)v20 = 134217984;
    aBlock = *(void ***)(v1 + 48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v44, v20 + 4);
    sub_10002645C();
    _os_log_impl((void *)&_mh_execute_header, v17, v19, "Scheduling NISession recreation in %ldms", v20, 0xCu);
    sub_100007958((uint64_t)v20);

  }
  else
  {

    sub_10002645C();
  }
  v21 = sub_1000078E0(0, (unint64_t *)&qword_1002AA660, OS_dispatch_queue_ptr);
  v35 = static OS_dispatch_queue.main.getter(v21);
  static DispatchTime.now()(v35);
  *v9 = *(_QWORD *)(v1 + 48);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for DispatchTimeInterval.milliseconds(_:), v6);
  v22 = v15;
  + infix(_:_:)(v12, v9);
  sub_100105FB4(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
  v23 = *(void (**)(char *, uint64_t))(v10 + 8);
  v24 = v36;
  v23(v12, v36);
  v44[3] = sub_100105F48;
  v44[4] = v1;
  aBlock = _NSConcreteStackBlock;
  v44[0] = 1107296256;
  v44[1] = sub_10000E610;
  v44[2] = &unk_10028C1C8;
  v25 = _Block_copy(&aBlock);
  sub_10002D790();
  v26 = sub_10000B348();
  v27 = v37;
  static DispatchQoS.unspecified.getter(v26);
  aBlock = (void **)_swiftEmptyArrayStorage;
  v28 = sub_100066C34((unint64_t *)&qword_1002AA6C0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v29 = sub_1000055B0((uint64_t *)&unk_1002AC9A0);
  v30 = sub_10003228C();
  v31 = v40;
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v29, v30, v42, v28);
  v32 = (void *)v35;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v22, v27, v31, v25);
  _Block_release(v25);

  sub_100105FB4(*(uint64_t (**)(uint64_t, uint64_t))(v41 + 8));
  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v27, v39);
  result = ((uint64_t (*)(char *, uint64_t))v23)(v22, v24);
  v34 = *(_QWORD *)(v1 + 48);
  if (v34 + 0x4000000000000000 < 0)
    __break(1u);
  else
    *(_QWORD *)(v1 + 48) = 2 * v34;
  return result;
}

void sub_100105D04(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  id v8;
  void *v9;
  id v10;

  if (qword_1002A98D0 != -1)
    swift_once(&qword_1002A98D0, sub_100102768);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100006FB4(v2, (uint64_t)qword_1002B1810);
  v4 = Logger.logObject.getter(v3);
  v6 = static os_log_type_t.default.getter(v4, v5);
  if (os_log_type_enabled(v4, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v6, "NISession recreated", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  v8 = objc_msgSend(objc_allocWithZone((Class)NISession), "init");
  v9 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;

  v10 = *(id *)(a1 + 40);
  sub_100102DF8(v10);

}

id sub_100105E18(void *a1, void *a2)
{
  void *v2;
  void *v3;
  id v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  id v12;

  v3 = v2;
  v12 = 0;
  v6 = objc_msgSend(v3, "initWithInnerBoundary:outerBoundary:error:", a1, a2, &v12);
  v7 = v12;
  if (v6)
  {
    v8 = v12;
  }
  else
  {
    v9 = v12;
    _convertNSErrorToError(_:)(v7);

    swift_willThrow(v10);
  }

  return v6;
}

uint64_t sub_100105EE8(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, "deviceIdentifer");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

void sub_100105F48()
{
  uint64_t v0;

  sub_100105D04(v0);
}

uint64_t sub_100105F50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100105F60(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100105F68()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100105F8C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100105FB4@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

void sub_100105FC0()
{
  sub_100077ACC();
}

uint64_t sub_100105FCC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  os_log_type_t v10;
  _DWORD *v11;

  if (*(unsigned __int8 *)(v1 + 16) != result)
  {
    v2 = v1;
    v3 = result;
    v4 = type metadata accessor for _BaseLoginStatusController();
    sub_1001064E0();
    v5 = ObservableObject<>.objectWillChange.getter(v4);
    ObservableObjectPublisher.send()();
    swift_release(v5);
    if (qword_1002A98D8 != -1)
      swift_once(&qword_1002A98D8, sub_10010627C);
    v6 = type metadata accessor for Logger(0);
    sub_100006FB4(v6, (uint64_t)qword_1002B1A50);
    v7 = swift_retain_n(v2, 2);
    v8 = Logger.logObject.getter(v7);
    v10 = static os_log_type_t.default.getter(v8, v9);
    if (os_log_type_enabled(v8, v10))
    {
      v11 = (_DWORD *)swift_slowAlloc(22, -1);
      swift_slowAlloc(64, -1);
      *v11 = 136446466;
      __asm { BR              X10 }
    }

    result = sub_10000F644();
    *(_BYTE *)(v2 + 16) = v3;
  }
  return result;
}

uint64_t sub_10010627C()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10000897C(v0, qword_1002B1A50);
  sub_100006FB4(v0, (uint64_t)qword_1002B1A50);
  return Logger.init(subsystem:category:)(0xD00000000000001ALL, 0x8000000100251980, 1313296204, 0xE400000000000000);
}

uint64_t sub_1001062E8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10010631C + 4 * byte_100226218[a1]))(0x6E776F6E6B6E75, 0xE700000000000000);
}

uint64_t sub_10010631C()
{
  return 0x64656B636F6C6E75;
}

uint64_t sub_100106334()
{
  return 0x64656B636F6CLL;
}

uint64_t sub_100106348()
{
  return 0x6F736E6F4366666FLL;
}

uint64_t sub_100106364()
{
  unsigned __int8 *v0;

  return sub_1001062E8(*v0);
}

uint64_t sub_10010636C()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 17, 7);
}

uint64_t type metadata accessor for _BaseLoginStatusController()
{
  return objc_opt_self(_TtC13EnsembleAgent26_BaseLoginStatusController);
}

uint64_t storeEnumTagSinglePayload for _BaseLoginStatusController.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1001063E8 + 4 * byte_100226221[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10010641C + 4 * byte_10022621C[v4]))();
}

uint64_t sub_10010641C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100106424(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10010642CLL);
  return result;
}

uint64_t sub_100106438(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100106440);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100106444(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10010644C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for _BaseLoginStatusController.State()
{
  return &type metadata for _BaseLoginStatusController.State;
}

unint64_t sub_10010646C()
{
  unint64_t result;

  result = qword_1002B1B40;
  if (!qword_1002B1B40)
  {
    result = swift_getWitnessTable(&unk_1002262BC, &type metadata for _BaseLoginStatusController.State);
    atomic_store(result, (unint64_t *)&qword_1002B1B40);
  }
  return result;
}

uint64_t sub_1001064A8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for _BaseLoginStatusController();
  result = ObservableObject<>.objectWillChange.getter(v2);
  *a1 = result;
  return result;
}

unint64_t sub_1001064E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B1B48;
  if (!qword_1002B1B48)
  {
    v1 = type metadata accessor for _BaseLoginStatusController();
    result = swift_getWitnessTable(&unk_1002262E4, v1);
    atomic_store(result, (unint64_t *)&qword_1002B1B48);
  }
  return result;
}

uint64_t sub_10010651C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  a9 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(&a9, &a10, v10, a4);
}

void sub_100106534(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)(v2 + 32) != a1)
  {
    sub_100066C34((unint64_t *)&unk_1002B1CB8, a2, (uint64_t (*)(uint64_t))type metadata accessor for DisplayController_iOS, (uint64_t)&unk_100226400);
    sub_100066D20();
    sub_100043358();
    sub_10000B348();
    *(_QWORD *)(v2 + 32) = a1;
  }
  sub_10000B350();
}

void sub_100106590(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)(v2 + 40) != a1)
  {
    sub_100066C34((unint64_t *)&unk_1002B1CB8, a2, (uint64_t (*)(uint64_t))type metadata accessor for DisplayController_iOS, (uint64_t)&unk_100226400);
    sub_100066D20();
    sub_100043358();
    sub_10000B348();
    *(_QWORD *)(v2 + 40) = a1;
  }
  sub_10000B350();
}

_QWORD *sub_1001065EC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  objc_class *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _QWORD v23[7];
  void *v24;

  v3 = v2;
  v2[4] = 0;
  v2[5] = 0;
  v2[6] = _swiftEmptyArrayStorage;
  v2[9] = 0;
  v2[10] = 0;
  v2[2] = a1;
  v2[3] = a2;
  v4 = (objc_class *)type metadata accessor for AccelerometerObserver();
  v5 = objc_msgSend(objc_allocWithZone(v4), "init");
  v6 = objc_msgSend(objc_allocWithZone((Class)FBSOrientationObserver), "init");
  v3[7] = v5;
  v3[8] = v6;
  sub_10000B0EC();
  v7 = v5;
  v8 = v6;
  swift_retain();
  v10 = (void *)static OS_dispatch_queue.main.getter(v9);
  v11 = sub_1000088D8((uint64_t)&unk_10028C3E8, 32);
  *(_QWORD *)(v11 + 24) = &off_10028C3A0;
  swift_unknownObjectWeakInit(v11 + 16, v3);
  swift_retain();
  v12 = sub_1000C8454(v10, (uint64_t)sub_10002D0D4, v11);
  v14 = v13;
  swift_release();
  swift_release();
  v24 = v12;
  sub_100066C34(&qword_1002B1CC8, 255, (uint64_t (*)(uint64_t))type metadata accessor for AccelerometerObserver, (uint64_t)&unk_1002263B8);
  dispatch thunk of ObservableObject.objectWillChange.getter(v4);
  v23[6] = v23[0];
  v15 = sub_1000088D8((uint64_t)&unk_10028C410, 24);
  *(_QWORD *)(v15 + 16) = v14;
  v16 = type metadata accessor for ObservableObjectPublisher(0);
  swift_unknownObjectRetain_n(v14, 2);
  Publisher<>.sink(receiveValue:)(sub_10005E230, v15, v16, &protocol witness table for ObservableObjectPublisher);
  swift_release();
  AnyCancellable.store(in:)(&v24);
  swift_release();
  sub_10002DA70();
  sub_10000B348();
  v17 = v24;
  swift_getObjectType(v14);
  sub_1001018D4();
  sub_10005FFC0();
  OS_dispatch_source_data_add.add(data:)(1uLL);
  sub_10002DA70();
  swift_bridgeObjectRelease();
  v18 = v3[9];
  v19 = v3[10];
  v3[9] = v17;
  v3[10] = v14;
  sub_1001018D4();
  sub_10005FFC0();
  sub_10002D108(v18, v19);
  v20 = sub_1000088D8((uint64_t)&unk_10028C438, 32);
  *(_QWORD *)(v20 + 16) = v17;
  *(_QWORD *)(v20 + 24) = v14;
  v23[4] = sub_10010728C;
  v23[5] = v20;
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 1107296256;
  v23[2] = sub_10000A194;
  v23[3] = &unk_10028C450;
  v21 = _Block_copy(v23);
  sub_1001018D4();
  sub_10005FFC0();
  swift_release();
  objc_msgSend(v8, "setHandler:", v21);
  _Block_release(v21);

  sub_10002DA70();
  swift_bridgeObjectRelease();
  return v3;
}

void sub_10010692C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_getObjectType(a3);
  OS_dispatch_source_data_add.add(data:)(1uLL);
}

uint64_t sub_10010695C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  sub_10002D108(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
  return v0;
}

uint64_t sub_100106990()
{
  uint64_t v0;

  sub_10010695C();
  return swift_deallocClassInstance(v0, 88, 7);
}

uint64_t type metadata accessor for DisplayController_iOS()
{
  return objc_opt_self(_TtC13EnsembleAgent21DisplayController_iOS);
}

uint64_t sub_1001069D0()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 48));
}

uint64_t sub_1001069D8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  sub_100066C34((unint64_t *)&unk_1002B1CB8, a2, (uint64_t (*)(uint64_t))type metadata accessor for DisplayController_iOS, (uint64_t)&unk_100226400);
  return ObservableObject<>.objectWillChange.getter(v3);
}

uint64_t sub_100106A18()
{
  uint64_t v0;
  uint64_t result;

  switch(*(_QWORD *)(v0 + 40))
  {
    case 2:
      result = static UniversalControlDisplay.Orientation.down.getter();
      break;
    case 3:
      result = static UniversalControlDisplay.Orientation.left.getter();
      break;
    case 4:
      result = static UniversalControlDisplay.Orientation.right.getter();
      break;
    default:
      result = static UniversalControlDisplay.Orientation.up.getter();
      break;
  }
  return result;
}

void sub_100106A4C()
{
  _QWORD *v0;
  double v1;
  double v2;
  double v3;
  double v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  double v34;
  double v35;
  double v36;
  double v37;
  CGFloat v38;
  CGFloat v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  CGAffineTransform v57;
  _OWORD v58[2];
  double v59;
  double v60;
  _OWORD v61[2];
  char v62;
  CGRect v63;

  v5 = v0;
  v49 = *v0;
  v6 = sub_1000055B0(&qword_1002AA5F0);
  __chkstk_darwin(v6);
  sub_10002641C();
  v56 = v8 - v7;
  v9 = type metadata accessor for UniversalControlDisplay.Orientation(0);
  v55 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_10002641C();
  v12 = v11 - v10;
  v13 = sub_1000055B0((uint64_t *)&unk_1002B3320);
  __chkstk_darwin(v13);
  sub_10002641C();
  v16 = v15 - v14;
  v17 = type metadata accessor for UUID(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  sub_10002641C();
  v21 = v20 - v19;
  v22 = sub_100106F74(*(_QWORD *)(v0[7]
                                + OBJC_IVAR____TtC13EnsembleAgentP33_E744CF5210EDE89134C765150EF1117921AccelerometerObserver_deviceOrientation));
  v23 = sub_100106F84((uint64_t)objc_msgSend((id)v5[8], "activeInterfaceOrientation"));
  sub_100106534(v22, v24);
  sub_100106590(v23, v25);
  v26 = (void *)objc_opt_self(UIScreen);
  v27 = objc_msgSend(v26, "mainScreen");
  objc_msgSend(v27, "bounds");
  sub_1000602A0();

  v54 = v5[2];
  v53 = v5[3];
  v28 = UUID.init(uuid:)(0, 0, 0, 0, 0, 0);
  v30 = UUID.uuid.getter(v28, v29);
  v52 = UniversalControlUUID.init(rawValue:)(v30, v30 >> 8, v30 >> 16, v30 >> 24, HIDWORD(v30), v30 >> 40, HIWORD(v30), HIBYTE(v30));
  v32 = v31;
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v21, v17);
  memset(v61, 0, sizeof(v61));
  v62 = 1;
  sub_100106A18();
  _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v16, 0, 1, v9);
  v33 = objc_msgSend(v26, "mainScreen");
  objc_msgSend(v33, "nativeBounds");
  v35 = v34;
  v37 = v36;

  sub_100106A18();
  sub_1000626EC((uint64_t)v58, v3, v4);
  v51 = v58[0];
  v50 = v58[1];
  v38 = v59;
  v39 = v60;
  (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v12, v9);
  *(_OWORD *)&v57.a = v51;
  *(_OWORD *)&v57.c = v50;
  v57.tx = v38;
  v57.ty = v39;
  v63.origin.x = v1;
  v63.origin.y = v2;
  v63.size.width = v3;
  v63.size.height = v4;
  CGRectApplyAffineTransform(v63, &v57);
  sub_1000602A0();
  v40 = type metadata accessor for UTType(0);
  _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v56, 1, 1, v40);
  v41 = type metadata accessor for UniversalControlDisplay(0);
  swift_allocObject(v41, *(unsigned int *)(v41 + 48), *(unsigned __int16 *)(v41 + 52));
  LOBYTE(v57.a) = 1;
  v42 = UniversalControlDisplay.init(id:displayName:mirrorPrimary:orientation:physicalSize:pixelSize:screenRect:typeIdentifier:vendorID:productID:)(v54, v53, v52, v32, 0, 0, v61, v16, 0.0, 0.0, v35, v37, v1, v2, v3, v4, v56, 0x100000000, 0x100000000);
  dispatch thunk of UniversalControlDisplay.isBuiltIn.setter(1);
  dispatch thunk of UniversalControlDisplay.isMain.setter(1);
  v43 = sub_1000055B0(&qword_1002AC0E0);
  v44 = sub_1000088D8(v43, 40);
  *(_OWORD *)(v44 + 16) = xmmword_10021EFD0;
  *(_QWORD *)(v44 + 32) = v42;
  *(_QWORD *)&v57.a = v44;
  specialized Array._endMutation()(v44);
  v45 = *(_QWORD *)&v57.a;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_100071994(v46, v45);
  LOBYTE(v16) = v47;
  swift_bridgeObjectRelease();
  if ((v16 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    sub_100066C34((unint64_t *)&unk_1002B1CB8, v48, (uint64_t (*)(uint64_t))type metadata accessor for DisplayController_iOS, (uint64_t)&unk_100226400);
    ObservableObject<>.objectWillChange.getter(v49);
    sub_100043358();
    sub_10000B348();
    swift_release();
    v5[6] = v45;
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_100106F74(uint64_t result)
{
  if ((unint64_t)(result - 1) >= 6)
    return 0;
  return result;
}

uint64_t sub_100106F84(uint64_t result)
{
  if ((unint64_t)(result - 1) >= 4)
    return 0;
  return result;
}

id sub_100106F98()
{
  char *v0;
  objc_class *ObjectType;
  uint64_t v2;
  id v3;
  char *v4;
  id v5;
  id v6;
  id v7;
  objc_super v9;

  ObjectType = (objc_class *)swift_getObjectType(v0);
  v2 = OBJC_IVAR____TtC13EnsembleAgentP33_E744CF5210EDE89134C765150EF1117921AccelerometerObserver_deviceOrientation;
  *(_QWORD *)&v0[OBJC_IVAR____TtC13EnsembleAgentP33_E744CF5210EDE89134C765150EF1117921AccelerometerObserver_deviceOrientation] = 0;
  v3 = objc_allocWithZone((Class)BKSAccelerometer);
  v4 = v0;
  v5 = objc_msgSend(v3, "init");
  *(_QWORD *)&v4[OBJC_IVAR____TtC13EnsembleAgentP33_E744CF5210EDE89134C765150EF1117921AccelerometerObserver_accelerometer] = v5;
  v6 = v5;
  *(_QWORD *)&v0[v2] = objc_msgSend(v6, "currentDeviceOrientation");

  v9.receiver = v4;
  v9.super_class = ObjectType;
  v7 = objc_msgSendSuper2(&v9, "init");
  objc_msgSend(v6, "setDelegate:", v7);
  objc_msgSend(v6, "setOrientationEventsEnabled:", 1);

  return v7;
}

void sub_10010709C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;

  v3 = OBJC_IVAR____TtC13EnsembleAgentP33_E744CF5210EDE89134C765150EF1117921AccelerometerObserver_deviceOrientation;
  if (*(_QWORD *)(v2
                 + OBJC_IVAR____TtC13EnsembleAgentP33_E744CF5210EDE89134C765150EF1117921AccelerometerObserver_deviceOrientation) != a2)
  {
    v4 = v2;
    ObjectType = swift_getObjectType(v2);
    sub_100066C34(&qword_1002B1CC8, 255, (uint64_t (*)(uint64_t))type metadata accessor for AccelerometerObserver, (uint64_t)&unk_1002263B8);
    ObservableObject<>.objectWillChange.getter(ObjectType);
    ObservableObjectPublisher.send()();
    swift_release();
    *(_QWORD *)(v4 + v3) = a2;
  }
}

uint64_t type metadata accessor for AccelerometerObserver()
{
  return objc_opt_self(_TtC13EnsembleAgentP33_E744CF5210EDE89134C765150EF1117921AccelerometerObserver);
}

uint64_t sub_1001071DC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t result;

  ObjectType = swift_getObjectType(v1);
  result = ObservableObject<>.objectWillChange.getter(ObjectType);
  *a1 = result;
  return result;
}

uint64_t sub_100107218()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10010723C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100107260()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_10010728C(uint64_t a1)
{
  uint64_t v1;

  sub_10010692C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100107294(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001072A4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_1001072AC(void *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  id v5;

  v3 = type metadata accessor for SyncContext.Event(0);
  sub_10000E490();
  __chkstk_darwin(v4);
  sub_1000601B4();
  if (a1)
  {
    v5 = a1;
  }
  else
  {
    sub_1000078E0(0, (unint64_t *)&qword_1002AAB80, NSError_ptr);
    v5 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(-6723, 0xD000000000000018, 0x8000000100258030, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Ensemble_executables/EnsembleAgent/SyncContext.swift", 90, 2, 113);
  }
  *v1 = v5;
  swift_storeEnumTagMultiPayload(v1, v3, 0);
  swift_errorRetain(a1);
  swift_errorRetain(v5);
  sub_100107FB8((uint64_t)v1);
  swift_errorRelease(v5);
  sub_1000255F0((uint64_t)v1, type metadata accessor for SyncContext.Event);
}

void sub_1001073A8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  int *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v67 = a7;
  v68 = a4;
  v71 = a6;
  v69 = a5;
  v73 = a1;
  v74 = a2;
  v70 = type metadata accessor for SyncContext.Event(0);
  sub_10000E490();
  __chkstk_darwin(v10);
  sub_1000601B4();
  v11 = type metadata accessor for OSSignpostID(0);
  v63 = *(_QWORD *)(v11 - 8);
  v64 = v11;
  __chkstk_darwin(v11);
  sub_10000E5DC();
  v62 = v12;
  sub_1000055B0(&qword_1002B1CD0);
  sub_10000E490();
  __chkstk_darwin(v13);
  v15 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for OSSignposter(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  sub_10000E5DC();
  v59 = v18;
  v19 = sub_100026774();
  v65 = *(_QWORD *)(v19 - 8);
  v20 = *(_QWORD *)(v65 + 64);
  v21 = __chkstk_darwin(v19);
  v66 = (uint64_t)&v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v58 - v23;
  __chkstk_darwin(v22);
  v75 = (uint64_t)&v58 - v25;
  v26 = *(_QWORD *)(v7 + 40);
  v72 = v7;
  v60 = *(_QWORD *)(v7 + 48);
  v61 = v26;
  if (qword_1002A98A0 != -1)
    swift_once(&qword_1002A98A0, sub_1000C3010);
  v27 = a3 & 1;
  v28 = sub_100006FB4(v16, (uint64_t)qword_1002B6F70);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v24, v28, v16);
  _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v24, 0, 1, v16);
  v29 = &v24[*(int *)(v19 + 20)];
  *(_QWORD *)v29 = 0;
  *((_QWORD *)v29 + 1) = 0;
  *((_WORD *)v29 + 8) = 256;
  v30 = *(int *)(v19 + 24);
  *(_QWORD *)&v24[v30] = 0;
  sub_10002CA90((uint64_t)v24, (uint64_t)v15);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v15, 1, v16) == 1)
  {
    sub_1000C3130((uint64_t)v15);
  }
  else
  {
    v31 = v59;
    v32 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v17 + 32))(v59, v15, v16);
    *(_QWORD *)v29 = "sync";
    *((_QWORD *)v29 + 1) = 4;
    *((_WORD *)v29 + 8) = 2;
    v33 = v27;
    v34 = OSSignposter.logHandle.getter(v32);
    v35 = v62;
    OSSignpostID.init(log:)(v34);
    v36 = sub_10010AF84(v31, "sync", 4, 2, v35, v61, v60, v73, v74, v33);
    v37 = v35;
    v27 = v33;
    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v37, v64);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v31, v16);
    swift_release();
    *(_QWORD *)&v24[v30] = v36;
  }
  v38 = v27 != 0;
  v39 = v75;
  sub_10005F3FC((uint64_t)v24, v75, type metadata accessor for SignpostInterval);
  v40 = v66;
  sub_10005F428(v39, v66, type metadata accessor for SignpostInterval);
  v41 = *(unsigned __int8 *)(v65 + 80);
  v42 = (v41 + 16) & ~v41;
  v43 = (v20 + v42 + 7) & 0xFFFFFFFFFFFFFFF8;
  v44 = (v43 + 39) & 0xFFFFFFFFFFFFFFF8;
  v45 = swift_allocObject(&unk_10028C568, v44 + 8, v41 | 7);
  sub_10005F3FC(v40, v45 + v42, type metadata accessor for SignpostInterval);
  v46 = v72;
  v47 = v73;
  *(_QWORD *)(v45 + v43) = v72;
  v48 = v45 + ((v43 + 15) & 0xFFFFFFFFFFFFFFF8);
  v49 = v74;
  *(_QWORD *)v48 = v47;
  *(_QWORD *)(v48 + 8) = v49;
  *(_BYTE *)(v48 + 16) = v38;
  v50 = v67;
  *(_QWORD *)(v45 + v44) = v67;
  v51 = type metadata accessor for Completion();
  swift_allocObject(v51, 48, 7);
  swift_retain(v46);
  swift_retain(v50);
  v52 = Completion.init(file:line:body:)(0xD00000000000005ALL, 0x8000000100257F70, 266, (uint64_t)sub_10010DBC8, v45);
  v53 = (int *)sub_1000055B0(&qword_1002B1EE8);
  v54 = v8 + v53[12];
  v55 = v8 + v53[16];
  v56 = v8 + v53[20];
  v57 = v53[24];
  *(_QWORD *)v8 = v47;
  *(_QWORD *)(v8 + 8) = v49;
  *(_BYTE *)(v8 + 16) = v38;
  sub_10005F428(v68, v54, type metadata accessor for SyncView);
  sub_10010DC34(v69, v55);
  sub_10010DC34(v71, v56);
  *(_QWORD *)(v8 + v57) = v52;
  swift_storeEnumTagMultiPayload(v8, v70, 1);
  swift_retain(v52);
  sub_100107FB8(v8);
  swift_release();
  sub_1000255F0(v8, type metadata accessor for SyncContext.Event);
  sub_1000255F0(v75, type metadata accessor for SignpostInterval);
}

void sub_100107844(uint64_t a1, uint64_t a2, char a3)
{
  id v3;
  uint64_t v4;
  id v5;

  if ((a3 & 1) != 0)
  {
    v4 = a1 | a2;
    v5 = objc_msgSend((id)type metadata accessor for UniversalControlPreferences(0), "sharedPreferences");
    if (v4)
      UniversalControlPreferences.syncTimeout.getter();
    else
      UniversalControlPreferences.connectionSyncTimeout.getter();

  }
  else if (__OFSUB__(a1, 1))
  {
    __break(1u);
  }
  else
  {
    v3 = objc_msgSend((id)type metadata accessor for UniversalControlPreferences(0), "sharedPreferences");
    UniversalControlPreferences.syncTimeout.getter();

  }
}

uint64_t sub_100107900(uint64_t a1, uint64_t a2, char a3)
{
  Swift::String v3;
  void *object;
  Swift::String v5;
  Swift::String v6;
  void *v7;
  Swift::String v8;

  if ((a3 & 1) != 0)
  {
    if (a1 | a2)
      return 0x73616364616F7262;
    else
      return 0x72656972726162;
  }
  else
  {
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease(0xE000000000000000);
    v3._countAndFlagsBits = sub_10010ECD4();
    object = v3._object;
    String.append(_:)(v3);
    swift_bridgeObjectRelease(object);
    v5._countAndFlagsBits = 3026478;
    v5._object = (void *)0xE300000000000000;
    String.append(_:)(v5);
    v6._countAndFlagsBits = sub_10010ECD4();
    v7 = v6._object;
    String.append(_:)(v6);
    swift_bridgeObjectRelease(v7);
    v8._countAndFlagsBits = 41;
    v8._object = (void *)0xE100000000000000;
    String.append(_:)(v8);
    return 0x286C616974696E69;
  }
}

uint64_t sub_100107A20()
{
  uint64_t v0;

  return sub_100107900(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

uint64_t sub_100107A2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t (*v4)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = type metadata accessor for SyncContext.State(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005F428(v0, (uint64_t)v3, v4);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v3, v1);
  if (!EnumCaseMultiPayload)
    return 1701602409;
  if (EnumCaseMultiPayload == 1)
    v6 = 0x6465727265666564;
  else
    v6 = 0x676E69646E6573;
  v7 = sub_1000055B0((uint64_t *)&unk_1002B1DE0);
  v8 = (uint64_t)&v3[*(int *)(v7 + 48)];
  swift_unknownObjectRelease(*(_QWORD *)&v3[*(int *)(v7 + 96)]);
  sub_1000255F0(v8, type metadata accessor for SyncMessage);
  return v6;
}

uint64_t sub_100107B2C(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t ObjectType;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t result;
  double v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  void (*v41)(uint64_t *, uint64_t);
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD aBlock[7];

  v58 = a2;
  v59 = a3;
  v57 = a1;
  v52 = type metadata accessor for DispatchTimeInterval(0);
  v48 = *(_QWORD *)(v52 - 8);
  v5 = __chkstk_darwin(v52);
  v51 = (uint64_t *)((char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  v8 = (uint64_t *)((char *)&v45 - v7);
  v50 = type metadata accessor for DispatchTime(0);
  v47 = *(_QWORD *)(v50 - 8);
  v9 = __chkstk_darwin(v50);
  v46 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v49 = (char *)&v45 - v11;
  v12 = type metadata accessor for DispatchWorkItemFlags(0);
  v55 = *(_QWORD *)(v12 - 8);
  v56 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchQoS(0);
  v53 = *(_QWORD *)(v15 - 8);
  v54 = v15;
  __chkstk_darwin(v15);
  v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for OS_dispatch_source.TimerFlags(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000078E0(0, (unint64_t *)&qword_1002AAF50, OS_dispatch_source_ptr);
  v22 = sub_1000078E0(0, (unint64_t *)&qword_1002AA660, OS_dispatch_queue_ptr);
  v23 = (void *)static OS_dispatch_queue.main.getter(v22);
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_10000E330((unint64_t *)&unk_1002AC3B0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags, (uint64_t)&protocol conformance descriptor for OS_dispatch_source.TimerFlags);
  v25 = v24;
  v26 = sub_1000055B0(&qword_1002AEEC0);
  v27 = sub_1000B8594();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v26, v27, v18, v25);
  v28 = static OS_dispatch_source.makeTimerSource(flags:queue:)(v21, v23);

  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  ObjectType = swift_getObjectType(v28);
  v30 = (_QWORD *)swift_allocObject(&unk_10028C590, 40, 7);
  v31 = v59;
  v30[2] = v58;
  v30[3] = v31;
  v32 = v57;
  v30[4] = v57;
  aBlock[4] = sub_10010DCF4;
  aBlock[5] = v30;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000E610;
  aBlock[3] = &unk_10028C5A8;
  v33 = _Block_copy(aBlock);
  swift_retain(v31);
  swift_errorRetain(v32);
  j___s8Dispatch0A3QoSV11unspecifiedACvgZ(ObjectType);
  sub_10002DEB8();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)(v17, v14, v33, ObjectType);
  _Block_release(v33);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v14, v56);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v17, v54);
  result = swift_release();
  v35 = ceil(a4 * 1000.0);
  if ((~*(_QWORD *)&v35 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v35 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v35 < 9.22337204e18)
  {
    v36 = (uint64_t)v35;
    v37 = v46;
    static DispatchTime.now()(result);
    *v8 = v36;
    v38 = v48;
    v39 = v52;
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(v48 + 104))(v8, enum case for DispatchTimeInterval.milliseconds(_:), v52);
    v40 = v49;
    + infix(_:_:)(v37, v8);
    v41 = *(void (**)(uint64_t *, uint64_t))(v38 + 8);
    v41(v8, v39);
    v42 = *(void (**)(char *, uint64_t))(v47 + 8);
    v43 = v50;
    v42(v37, v50);
    sub_10007A0C4();
    v44 = v51;
    sub_10007A0F4(v51);
    OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v40, v8, v44, ObjectType);
    v41(v44, v39);
    v41(v8, v39);
    v42(v40, v43);
    OS_dispatch_source.activate()();
    return v28;
  }
LABEL_7:
  __break(1u);
  return result;
}

void sub_100107FB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD v17[5];
  uint64_t v18;
  uint64_t v19;

  v3 = type metadata accessor for SyncMessage(0);
  __chkstk_darwin(v3);
  v4 = type metadata accessor for SyncContext.State(0);
  __chkstk_darwin(v4);
  v17[2] = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SyncContext.Event(0);
  v7 = __chkstk_darwin(v6);
  __chkstk_darwin(v7);
  v17[1] = (char *)v17 - v8;
  v9 = type metadata accessor for SyncView(0);
  __chkstk_darwin(v9);
  v17[4] = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000055B0(&qword_1002B1EF8);
  __chkstk_darwin(v11);
  v13 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = v1;
  v14 = v1 + OBJC_IVAR____TtC13EnsembleAgent11SyncContext_state;
  swift_beginAccess(v1 + OBJC_IVAR____TtC13EnsembleAgent11SyncContext_state, &v19, 0, 0);
  v15 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_10005F428(v14, (uint64_t)v13, type metadata accessor for SyncContext.State);
  sub_10005F428(a1, v15, type metadata accessor for SyncContext.Event);
  v17[3] = v6;
  v16 = (char *)sub_1001081A0 + 4 * byte_100226460[swift_getEnumCaseMultiPayload(v15, v6)];
  __asm { BR              X10 }
}

void sub_1001081A0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *v1;
  if (swift_getEnumCaseMultiPayload(v2, v0))
  {
    v4 = (int *)sub_1000055B0((uint64_t *)&unk_1002B1DE0);
    v5 = v2 + v4[12];
    v6 = *(_QWORD *)(v2 + v4[16]);
    v7 = *(_QWORD *)(v2 + v4[20]);
    v8 = *(_QWORD *)(v2 + v4[24]);
    swift_getObjectType(v8);
    OS_dispatch_source.cancel()();
    ((void (*)(uint64_t, uint64_t, uint64_t))sub_100109C8C)(v3, v6, v7);
    swift_unknownObjectRelease(v8);
    swift_errorRelease(v3);
    sub_1000255F0(v5, type metadata accessor for SyncMessage);
  }
  else
  {
    swift_errorRelease(v3);
  }
}

void sub_10010881C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = type metadata accessor for SyncContext.Event(0);
  __chkstk_darwin(v6);
  v9 = (uint64_t *)((char *)&v10 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (*(_QWORD *)(a3 + OBJC_IVAR____TtC13EnsembleAgent11SyncContext_generation) == a2)
  {
    if (a1)
    {
      *v9 = a1;
      swift_storeEnumTagMultiPayload(v9, v7, 0);
      swift_errorRetain(a1);
    }
    else
    {
      swift_storeEnumTagMultiPayload(v9, v7, 2);
    }
    sub_100107FB8(v9);
    sub_1000255F0((uint64_t)v9, type metadata accessor for SyncContext.Event);
  }
}

_QWORD *sub_1001088DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *(_QWORD *)(v3 + OBJC_IVAR____TtC13EnsembleAgent11SyncContext_generation);
  v8 = swift_allocObject(&unk_10028C608, 32, 7);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v3;
  v9 = type metadata accessor for Completion();
  swift_allocObject(v9, 48, 7);
  swift_bridgeObjectRetain(a2);
  swift_retain(v3);
  return Completion.init(file:line:body:)(a1, a2, a3, (uint64_t)sub_10010ECD0, v8);
}

void sub_100108980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, unint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11)
{
  char *v11;
  char *v12;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char *v40;
  int v41;
  uint64_t v42;
  char *v43;
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  char v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  NSObject *v64;
  uint64_t v65;
  os_log_type_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  double v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  uint64_t v86;
  os_log_type_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  BOOL v101;
  int *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  NSObject *v115;
  uint64_t v116;
  os_log_type_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  char *v129;
  char *v130;
  unint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  unint64_t v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177[3];
  _QWORD v178[14];
  unsigned __int8 v179;
  unsigned __int8 v180;
  _QWORD v181[14];
  unsigned __int8 v182;
  unsigned __int8 v183;
  uint64_t v184;
  _BYTE v185[105];
  char v186;
  _BYTE v187[114];
  uint64_t v188[14];
  char v189;
  char v190;

  v12 = v11;
  v131 = a8;
  v172 = a5;
  v166 = a1;
  v168 = a11;
  v170 = a6 & 1;
  sub_10010DC34(a7, (uint64_t)v181);
  v151 = v181[1];
  v152 = v181[0];
  v149 = v181[3];
  v150 = v181[2];
  v163 = v181[5];
  v164 = v181[4];
  v161 = v181[8];
  v162 = v181[6];
  v159 = v181[9];
  v160 = v181[7];
  v157 = v181[12];
  v158 = v181[10];
  v155 = v181[13];
  v156 = v181[11];
  v153 = v183;
  v154 = v182;
  sub_10010DC34(a3, (uint64_t)v178);
  v135 = v178[1];
  v136 = v178[0];
  v133 = v178[3];
  v134 = v178[2];
  v147 = v178[5];
  v148 = v178[4];
  v145 = v178[8];
  v146 = v178[6];
  v143 = v178[9];
  v144 = v178[7];
  v141 = v178[12];
  v142 = v178[10];
  v139 = v178[13];
  v140 = v178[11];
  v137 = v180;
  v138 = v179;
  v127 = type metadata accessor for SyncContext.State(0);
  __chkstk_darwin(v127);
  v128 = (uint64_t *)((char *)&v125 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = type metadata accessor for SyncView(0);
  __chkstk_darwin(v19);
  v21 = (char *)&v125 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for Logger(0);
  v174 = *(_QWORD *)(v22 - 8);
  v175 = v22;
  v23 = __chkstk_darwin(v22);
  v167 = (char *)&v125 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v23);
  v130 = (char *)&v125 - v26;
  v27 = __chkstk_darwin(v25);
  v129 = (char *)&v125 - v28;
  __chkstk_darwin(v27);
  v30 = (char *)&v125 - v29;
  v31 = type metadata accessor for SyncMessage(0);
  __chkstk_darwin(v31);
  v173 = (uint64_t)&v125 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = *(int *)(v19 + 24);
  v165 = a2;
  v34 = *(_QWORD *)(a2 + v33);
  v35 = sub_100041D30(*((_QWORD *)v12 + 3), *((_QWORD *)v12 + 4), v34);
  if ((v36 & 1) != 0)
    v37 = 0;
  else
    v37 = v35;
  v169 = v37;
  v38 = sub_100041D30(*((_QWORD *)v12 + 5), *((_QWORD *)v12 + 6), v34);
  if ((v39 & 1) != 0)
    v40 = 0;
  else
    v40 = (char *)v38;
  v171 = a4;
  if ((a6 & 1) != 0)
  {
    v41 = 1;
    if (!(a4 | v172) || (unint64_t)v40 > a9)
      goto LABEL_16;
  }
  else if ((unint64_t)v40 > a9)
  {
LABEL_13:
    v41 = 1;
    goto LABEL_16;
  }
  sub_10010DC34(a7, (uint64_t)v187);
  if ((v187[113] & 1) != 0)
    goto LABEL_13;
  if (v169 <= v131)
  {
    v112 = v174;
    v111 = v175;
    v113 = v167;
    (*(void (**)(char *, char *, uint64_t))(v174 + 16))(v167, &v12[OBJC_IVAR____TtC13EnsembleAgent11SyncContext_logger], v175);
    swift_retain(v12);
    v115 = Logger.logObject.getter(v114);
    v117 = static os_log_type_t.default.getter(v115, v116);
    if (os_log_type_enabled(v115, v117))
    {
      v118 = swift_slowAlloc(42, -1);
      v119 = swift_slowAlloc(64, -1);
      v188[0] = v119;
      *(_DWORD *)v118 = 136446978;
      v120 = *((_QWORD *)v12 + 7);
      v121 = *((_QWORD *)v12 + 8);
      swift_bridgeObjectRetain(v121);
      v184 = sub_100006FCC(v120, v121, v188);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v184, v185, v118 + 4);
      swift_release();
      swift_bridgeObjectRelease(v121);
      *(_WORD *)(v118 + 12) = 2082;
      v122 = sub_100107900(v171, v172, v170);
      v124 = v123;
      v184 = sub_100006FCC(v122, v123, v188);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v184, v185, v118 + 14);
      swift_bridgeObjectRelease(v124);
      *(_WORD *)(v118 + 22) = 2048;
      v184 = v131;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v184, v185, v118 + 24);
      *(_WORD *)(v118 + 32) = 2048;
      v184 = a9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v184, v185, v118 + 34);
      _os_log_impl((void *)&_mh_execute_header, v115, v117, "%{public}s: Skipping Message Send: %{public}s, local=%llu, remote=%llu", (uint8_t *)v118, 0x2Au);
      swift_arrayDestroy(v119, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v119, -1, -1);
      swift_slowDealloc(v118, -1, -1);

      (*(void (**)(char *, uint64_t))(v174 + 8))(v167, v175);
    }
    else
    {

      swift_release();
      (*(void (**)(char *, uint64_t))(v112 + 8))(v113, v111);
    }
    Completion.callAsFunction(_:)(0);
    return;
  }
  v41 = 0;
LABEL_16:
  v132 = v41;
  v167 = v40;
  v126 = a9;
  v42 = *((_QWORD *)v12 + 8);
  v43 = &v12[OBJC_IVAR____TtC13EnsembleAgent11SyncContext_logger];
  v44 = *(void (**)(char *, char *, uint64_t))(v174 + 16);
  v44(v30, &v12[OBJC_IVAR____TtC13EnsembleAgent11SyncContext_logger], v175);
  sub_10010DC34(a7, (uint64_t)&v184);
  v45 = v152;
  if (!v186)
    v45 = v136;
  v46 = v151;
  if (!v186)
    v46 = v135;
  v47 = v150;
  if (!v186)
    v47 = v134;
  v48 = v149;
  if (!v186)
    v48 = v133;
  v188[0] = v45;
  v188[1] = v46;
  v49 = v164;
  if (!v186)
    v49 = v148;
  v50 = v163;
  if (!v186)
    v50 = v147;
  v51 = v162;
  if (!v186)
    v51 = v146;
  v52 = v160;
  if (!v186)
    v52 = v144;
  v188[2] = v47;
  v188[3] = v48;
  v53 = v161;
  if (!v186)
    v53 = v145;
  v54 = v159;
  if (!v186)
    v54 = v143;
  v55 = v158;
  if (!v186)
    v55 = v142;
  v56 = v156;
  if (!v186)
    v56 = v140;
  v188[4] = v49;
  v188[5] = v50;
  v57 = v157;
  if (!v186)
    v57 = v141;
  v58 = v155;
  if (!v186)
    v58 = v139;
  v59 = v154;
  if (!v186)
    v59 = v138;
  v60 = v153;
  if (!v186)
    v60 = v137;
  v188[6] = v51;
  v188[7] = v52;
  v188[8] = v53;
  v188[9] = v54;
  v188[10] = v55;
  v188[11] = v56;
  v188[12] = v57;
  v188[13] = v58;
  v189 = v59;
  v190 = v60;
  sub_10005F428(v165, (uint64_t)v21, type metadata accessor for SyncView);
  swift_bridgeObjectRetain(v42);
  sub_100170838();
  sub_1001116F8(v168);
  if (a10)
  {
    swift_getObjectType(a10);
    OS_dispatch_source.cancel()();
  }
  if (v132)
  {
    v61 = v175;
    if (v166)
    {
      swift_getObjectType(v166);
      OS_dispatch_source.cancel()();
    }
    v62 = v129;
    v44(v129, v43, v61);
    swift_retain(v12);
    v64 = Logger.logObject.getter(v63);
    v66 = static os_log_type_t.default.getter(v64, v65);
    v67 = v66;
    if (os_log_type_enabled(v64, v66))
    {
      v68 = swift_slowAlloc(62, -1);
      v168 = swift_slowAlloc(64, -1);
      v177[0] = v168;
      *(_DWORD *)v68 = 136447490;
      LODWORD(v166) = v67;
      v69 = *((_QWORD *)v12 + 7);
      v70 = *((_QWORD *)v12 + 8);
      swift_bridgeObjectRetain(v70);
      v176 = sub_100006FCC(v69, v70, v177);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, v177, v68 + 4);
      swift_release();
      swift_bridgeObjectRelease(v70);
      *(_WORD *)(v68 + 12) = 2082;
      v71 = v171;
      v72 = v172;
      v73 = v170;
      v74 = sub_100107900(v171, v172, v170);
      v76 = v75;
      v176 = sub_100006FCC(v74, v75, v177);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, v177, v68 + 14);
      swift_bridgeObjectRelease(v76);
      *(_WORD *)(v68 + 22) = 2048;
      v176 = v131;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, v177, v68 + 24);
      *(_WORD *)(v68 + 32) = 2048;
      v77 = v169;
      v176 = v169;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, v177, v68 + 34);
      *(_WORD *)(v68 + 42) = 2048;
      v176 = v126;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, v177, v68 + 44);
      *(_WORD *)(v68 + 52) = 2048;
      v78 = (uint64_t)v167;
      v176 = (uint64_t)v167;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, v177, v68 + 54);
      _os_log_impl((void *)&_mh_execute_header, v64, (os_log_type_t)v166, "%{public}s: Sending Message: %{public}s, local=%llu->%llu, remote=%llu->%llu", (uint8_t *)v68, 0x3Eu);
      v79 = v168;
      swift_arrayDestroy(v168, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v79, -1, -1);
      swift_slowDealloc(v68, -1, -1);

      (*(void (**)(char *, uint64_t))(v174 + 8))(v129, v175);
    }
    else
    {

      swift_release();
      (*(void (**)(char *, uint64_t))(v174 + 8))(v62, v61);
      v71 = v171;
      v72 = v172;
      v73 = v170;
      v77 = v169;
      v78 = (uint64_t)v167;
    }
    v96 = v173;
    sub_100109630(v173, v71, v72, v73, v77, v78);
    sub_1000255F0(v96, type metadata accessor for SyncMessage);
  }
  else
  {
    sub_10010AC8C();
    v81 = v80;
    v82 = v130;
    v83 = v175;
    v44(v130, v43, v175);
    swift_retain(v12);
    static HIDFixed.zero.getter();
    v84 = static HIDFixed.zero.getter();
    v85 = Logger.logObject.getter(v84);
    v87 = static os_log_type_t.default.getter(v85, v86);
    if (os_log_type_enabled(v85, v87))
    {
      v88 = swift_slowAlloc(78, -1);
      v89 = swift_slowAlloc(64, -1);
      v177[0] = v89;
      *(_DWORD *)v88 = 136448002;
      v90 = *((_QWORD *)v12 + 7);
      v91 = *((_QWORD *)v12 + 8);
      swift_bridgeObjectRetain(v91);
      v176 = sub_100006FCC(v90, v91, v177);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, v177, v88 + 4);
      swift_release();
      swift_bridgeObjectRelease(v91);
      *(_WORD *)(v88 + 12) = 2082;
      v92 = sub_100107900(v171, v172, v170);
      v94 = v93;
      v176 = sub_100006FCC(v92, v93, v177);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, v177, v88 + 14);
      swift_bridgeObjectRelease(v94);
      *(_WORD *)(v88 + 22) = 2048;
      v176 = v131;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, v177, v88 + 24);
      *(_WORD *)(v88 + 32) = 2048;
      v95 = v169;
      v176 = v169;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, v177, v88 + 34);
      *(_WORD *)(v88 + 42) = 2048;
      v176 = v126;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, v177, v88 + 44);
      *(_WORD *)(v88 + 52) = 2048;
      v176 = (uint64_t)v167;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, v177, v88 + 54);
      *(_WORD *)(v88 + 62) = 1040;
      LODWORD(v176) = 3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, (char *)&v176 + 4, v88 + 64);
      *(_WORD *)(v88 + 68) = 2048;
      v176 = *(_QWORD *)&v81;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, v177, v88 + 70);
      _os_log_impl((void *)&_mh_execute_header, v85, v87, "%{public}s: Deferring Message Send: %{public}s, local=%llu->%llu, remote=%llu->%llu, debounce=%.*fs", (uint8_t *)v88, 0x4Eu);
      swift_arrayDestroy(v89, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v89, -1, -1);
      swift_slowDealloc(v88, -1, -1);

      (*(void (**)(char *, uint64_t))(v174 + 8))(v130, v175);
    }
    else
    {

      swift_release();
      (*(void (**)(char *, uint64_t))(v174 + 8))(v82, v83);
      v95 = v169;
    }
    v97 = v166;
    if (v166)
    {
      v98 = v166;
    }
    else
    {
      swift_retain(v12);
      v98 = sub_100107B2C(0, (uint64_t)sub_10010DC7C, (uint64_t)v12, v81);
      swift_release();
    }
    v99 = *(_QWORD *)&v12[OBJC_IVAR____TtC13EnsembleAgent11SyncContext_generation] + 1;
    do
    {
      v100 = v99;
      v99 = 1;
    }
    while (!v100);
    v101 = v170 != 0;
    *(_QWORD *)&v12[OBJC_IVAR____TtC13EnsembleAgent11SyncContext_generation] = v100;
    v102 = (int *)sub_1000055B0((uint64_t *)&unk_1002B1DE0);
    v103 = (uint64_t)v128;
    v104 = (uint64_t)v128 + v102[12];
    v105 = v102[16];
    v106 = v102[20];
    v107 = v102[24];
    v109 = v172;
    v108 = v173;
    *v128 = v171;
    *(_QWORD *)(v103 + 8) = v109;
    *(_BYTE *)(v103 + 16) = v101;
    sub_10005F3FC(v108, v104, type metadata accessor for SyncMessage);
    *(_QWORD *)(v103 + v105) = v95;
    *(_QWORD *)(v103 + v106) = v167;
    *(_QWORD *)(v103 + v107) = v98;
    swift_storeEnumTagMultiPayload(v103, v127, 1);
    v110 = (uint64_t)&v12[OBJC_IVAR____TtC13EnsembleAgent11SyncContext_state];
    swift_beginAccess(&v12[OBJC_IVAR____TtC13EnsembleAgent11SyncContext_state], v177, 33, 0);
    swift_unknownObjectRetain(v97);
    sub_10010DC84(v103, v110);
    swift_endAccess(v177);
  }
}

uint64_t sub_100109630(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  int v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  double v20;
  double v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  os_log_type_t v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  NSObject *v38;
  uint64_t v39;
  NSObject *v40;
  char *v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t Strong;
  uint64_t v59;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(char *, uint64_t, uint64_t);
  int v77;
  char *v78;
  NSObject *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88[4];

  v7 = v6;
  v83 = a5;
  v84 = a6;
  v11 = a4 & 1;
  v82 = type metadata accessor for SyncContext.State(0);
  __chkstk_darwin(v82);
  v13 = (char *)&v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Logger(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v78 = (char *)&v72 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v19 = (char *)&v72 - v18;
  sub_100107844(a2, a3, v11);
  v21 = v20;
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v75 = v7 + OBJC_IVAR____TtC13EnsembleAgent11SyncContext_logger;
  v76 = v22;
  ((void (*)(char *))v22)(v19);
  swift_retain(v7);
  static HIDFixed.zero.getter();
  v23 = static HIDFixed.zero.getter();
  v24 = Logger.logObject.getter(v23);
  v26 = static os_log_type_t.default.getter(v24, v25);
  v79 = v24;
  v77 = v26;
  v27 = os_log_type_enabled(v24, v26);
  v85 = a1;
  v86 = v14;
  v80 = a2;
  v81 = a3;
  if (v27)
  {
    v28 = swift_slowAlloc(38, -1);
    v74 = v15;
    v29 = v28;
    v73 = swift_slowAlloc(64, -1);
    v88[0] = v73;
    *(_DWORD *)v29 = 136446978;
    v30 = a3;
    v32 = *(_QWORD *)(v7 + 56);
    v31 = *(_QWORD *)(v7 + 64);
    swift_bridgeObjectRetain(v31);
    v87 = sub_100006FCC(v32, v31, v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, v88, v29 + 4);
    swift_release();
    swift_bridgeObjectRelease(v31);
    *(_WORD *)(v29 + 12) = 2082;
    v33 = v30;
    v34 = v11;
    v35 = sub_100107900(a2, v33, v11);
    v37 = v36;
    v87 = sub_100006FCC(v35, v36, v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, v88, v29 + 14);
    swift_bridgeObjectRelease(v37);
    *(_WORD *)(v29 + 22) = 1040;
    LODWORD(v87) = 2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, (char *)&v87 + 4, v29 + 24);
    *(_WORD *)(v29 + 28) = 2048;
    v87 = *(_QWORD *)&v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, v88, v29 + 30);
    v38 = v79;
    _os_log_impl((void *)&_mh_execute_header, v79, (os_log_type_t)v77, "%{public}s: Send '%{public}s', timeout=%.*fs", (uint8_t *)v29, 0x26u);
    v39 = v73;
    swift_arrayDestroy(v73, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1, -1);
    swift_slowDealloc(v29, -1, -1);

    v40 = *(NSObject **)(v74 + 8);
    v41 = v19;
    v42 = v86;
  }
  else
  {
    v34 = v11;

    swift_release();
    v40 = *(NSObject **)(v15 + 8);
    v41 = v19;
    v42 = v14;
  }
  v79 = v40;
  ((void (*)(char *, uint64_t))v40)(v41, v42);
  sub_1000078E0(0, (unint64_t *)&qword_1002AAB80, NSError_ptr);
  v43 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(-6722, 0xD000000000000017, 0x8000000100257FF0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Ensemble_executables/EnsembleAgent/SyncContext.swift", 90, 2, 373);
  v44 = OBJC_IVAR____TtC13EnsembleAgent11SyncContext_generation;
  v45 = *(_QWORD *)(v7 + OBJC_IVAR____TtC13EnsembleAgent11SyncContext_generation);
  v46 = swift_allocObject(&unk_10028C5E0, 32, 7);
  *(_QWORD *)(v46 + 16) = v45;
  *(_QWORD *)(v46 + 24) = v7;
  swift_retain(v7);
  v47 = sub_100107B2C((uint64_t)v43, (uint64_t)sub_10010E044, v46, v21);

  swift_release();
  v48 = *(_QWORD *)(v7 + v44) + 1;
  do
  {
    v49 = v48;
    v48 = 1;
  }
  while (!v49);
  *(_QWORD *)(v7 + v44) = v49;
  v50 = (int *)sub_1000055B0((uint64_t *)&unk_1002B1DE0);
  v51 = (uint64_t)&v13[v50[12]];
  v52 = v50[16];
  v53 = v50[20];
  v54 = v50[24];
  v55 = v81;
  *(_QWORD *)v13 = v80;
  *((_QWORD *)v13 + 1) = v55;
  v13[16] = v34 != 0;
  sub_10005F428(v85, v51, type metadata accessor for SyncMessage);
  v56 = v82;
  *(_QWORD *)&v13[v52] = v83;
  *(_QWORD *)&v13[v53] = v84;
  *(_QWORD *)&v13[v54] = v47;
  swift_storeEnumTagMultiPayload(v13, v56, 2);
  v57 = v7 + OBJC_IVAR____TtC13EnsembleAgent11SyncContext_state;
  swift_beginAccess(v7 + OBJC_IVAR____TtC13EnsembleAgent11SyncContext_state, v88, 33, 0);
  swift_unknownObjectRetain(v47);
  sub_10010DC84((uint64_t)v13, v57);
  swift_endAccess(v88);
  Strong = swift_unknownObjectWeakLoadStrong(v7 + OBJC_IVAR____TtC13EnsembleAgent11SyncContext_messageSender);
  if (Strong)
  {
    v59 = Strong;
    sub_1001088DC(0xD00000000000005ALL, 0x8000000100257F70, 382);
    sub_1000F9320();
    swift_unknownObjectRelease(v59);
    swift_release();
    return swift_unknownObjectRelease(v47);
  }
  else
  {
    v61 = v78;
    v62 = v86;
    v76(v78, v75, v86);
    swift_retain(v7);
    v64 = Logger.logObject.getter(v63);
    v65 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v64, v65))
    {
      v66 = (uint8_t *)swift_slowAlloc(12, -1);
      v67 = swift_slowAlloc(32, -1);
      v88[0] = v67;
      *(_DWORD *)v66 = 136446210;
      v68 = *(_QWORD *)(v7 + 56);
      v69 = *(_QWORD *)(v7 + 64);
      swift_bridgeObjectRetain(v69);
      v87 = sub_100006FCC(v68, v69, v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, v88, v66 + 4);
      swift_release();
      swift_bridgeObjectRelease(v69);
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "%{public}s: Synchronization Failed: No Message Sender", v66, 0xCu);
      swift_arrayDestroy(v67, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v67, -1, -1);
      swift_slowDealloc(v66, -1, -1);
      swift_unknownObjectRelease(v47);

      v70 = v78;
      v71 = v86;
    }
    else
    {

      swift_release();
      swift_unknownObjectRelease(v47);
      v70 = v61;
      v71 = v62;
    }
    return ((uint64_t (*)(char *, uint64_t))v79)(v70, v71);
  }
}

#error "100109D28: call analysis failed (funcsize=54)"

uint64_t sub_100109D6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v3 = v2;
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v3 + OBJC_IVAR____TtC13EnsembleAgent11SyncContext_logger, v6);
  swift_retain(v3);
  v11 = Logger.logObject.getter(v10);
  v13 = static os_log_type_t.default.getter(v11, v12);
  if (os_log_type_enabled(v11, v13))
  {
    v14 = swift_slowAlloc(32, -1);
    v20 = swift_slowAlloc(32, -1);
    v24 = v20;
    *(_DWORD *)v14 = 136446722;
    v21 = v6;
    v22 = a2;
    v15 = *(_QWORD *)(v3 + 56);
    v16 = *(_QWORD *)(v3 + 64);
    swift_bridgeObjectRetain(v16);
    v23 = sub_100006FCC(v15, v16, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v14 + 4);
    swift_release();
    swift_bridgeObjectRelease(v16);
    *(_WORD *)(v14 + 12) = 2048;
    v23 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v14 + 14);
    *(_WORD *)(v14 + 22) = 2048;
    a2 = v22;
    v23 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v14 + 24);
    _os_log_impl((void *)&_mh_execute_header, v11, v13, "%{public}s: Successfully Sent: local=%llu, remote=%llu", (uint8_t *)v14, 0x20u);
    v17 = v20;
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v14, -1, -1);

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v21);
  }
  else
  {

    swift_release();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  return sub_10010A030(0, a1, a2);
}

uint64_t sub_100109F9C(uint64_t a1)
{
  Swift::String v2;
  void *v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v8;

  v8 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(25, 1);
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  String.append(_:)(v2);
  v4 = *(_QWORD *)(a1 + 56);
  v3 = *(void **)(a1 + 64);
  swift_bridgeObjectRetain(v3);
  v5._countAndFlagsBits = v4;
  v5._object = v3;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(v3);
  v6._object = (void *)0x8000000100258010;
  v6._countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v6);
  return v8;
}

uint64_t sub_10010A030(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v7 = type metadata accessor for SyncContext.State(0);
  __chkstk_darwin(v7);
  v10 = &v16[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v11 = *(_QWORD *)(v3 + OBJC_IVAR____TtC13EnsembleAgent11SyncContext_generation) + 1;
  do
  {
    v12 = v11;
    v11 = 1;
  }
  while (!v12);
  *(_QWORD *)(v3 + OBJC_IVAR____TtC13EnsembleAgent11SyncContext_generation) = v12;
  *v10 = a2;
  v10[1] = a3;
  swift_storeEnumTagMultiPayload(v10, v8, 0);
  v13 = v3 + OBJC_IVAR____TtC13EnsembleAgent11SyncContext_state;
  swift_beginAccess(v3 + OBJC_IVAR____TtC13EnsembleAgent11SyncContext_state, v16, 33, 0);
  sub_10010DC84((uint64_t)v10, v13);
  swift_endAccess(v16);
  return sub_1001116B8(a1);
}

uint64_t sub_10010A110@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char v25;
  char v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  int v37;
  int v38;
  char *v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  char *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;
  char v73;
  char v74;
  char v75;
  char v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int16 v85;
  uint64_t v86;
  uint64_t v87;

  v38 = a5;
  v60 = a4;
  v59 = a3;
  v61 = a6;
  v86 = a1;
  v87 = a2;
  v6 = a1;
  v37 = BYTE1(a1);
  v7 = BYTE2(a1);
  v8 = BYTE3(a1);
  v9 = BYTE4(a1);
  v51 = BYTE5(a1);
  v50 = BYTE6(a1);
  v49 = HIBYTE(a1);
  v48 = a2;
  v47 = BYTE1(a2);
  v46 = BYTE2(a2);
  v45 = BYTE3(a2);
  v44 = BYTE4(a2);
  v43 = BYTE5(a2);
  v42 = BYTE6(a2);
  v41 = HIBYTE(a2);
  v58 = type metadata accessor for OSSignpostID(0);
  v57 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58);
  v55 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000055B0(&qword_1002B1CD0);
  __chkstk_darwin(v11);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v36 - v15;
  v40 = type metadata accessor for SignpostInterval(0);
  __chkstk_darwin(v40);
  v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for OSSignposter(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v39 = (char *)&v36 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v24 = (char *)&v36 - v23;
  v56 = v6;
  v62 = v6;
  v25 = v37;
  v63 = v37;
  v54 = v7;
  v64 = v7;
  v53 = v8;
  v65 = v8;
  v52 = v9;
  v66 = v9;
  v67 = v51;
  v68 = v50;
  v69 = v49;
  v70 = v48;
  v71 = v47;
  v72 = v46;
  v73 = v45;
  v74 = v44;
  v75 = v43;
  v76 = v42;
  v77 = v41;
  v78 = v59;
  v26 = v38;
  v79 = v60;
  v80 = v38 & 1;
  v27 = sub_1000C3080();
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  v28(v24, v27, v19);
  v28(v16, (uint64_t)v24, v19);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v16, 0, 1, v19);
  v83 = 0;
  v84 = 0;
  v85 = 256;
  sub_1000C30C4((uint64_t)v16, 0, 0, 256, 0, (uint64_t)v18);
  sub_10002CA90((uint64_t)v18, (uint64_t)v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v13, 1, v19) == 1)
  {
    sub_1000C3130((uint64_t)v13);
  }
  else
  {
    v29 = (uint64_t)v39;
    v30 = (*(uint64_t (**)(char *, char *, uint64_t))(v20 + 32))(v39, v13, v19);
    v31 = v40;
    v32 = &v18[*(int *)(v40 + 20)];
    *(_QWORD *)v32 = "sync";
    *((_QWORD *)v32 + 1) = 4;
    v32[16] = 2;
    v32[17] = 0;
    v33 = (uint64_t)v55;
    OSSignposter.makeSignpostID()(v30);
    LOBYTE(v81) = v56;
    BYTE1(v81) = v25;
    BYTE2(v81) = v54;
    BYTE3(v81) = v53;
    BYTE4(v81) = v52;
    BYTE5(v81) = v51;
    BYTE6(v81) = v50;
    HIBYTE(v81) = v49;
    LOBYTE(v82) = v48;
    BYTE1(v82) = v47;
    BYTE2(v82) = v46;
    BYTE3(v82) = v45;
    BYTE4(v82) = v44;
    BYTE5(v82) = v43;
    BYTE6(v82) = v42;
    HIBYTE(v82) = v41;
    v34 = sub_10010AF84(v29, "sync", 4, 2, v33, v81, v82, v59, v60, v26 & 1);
    (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v33, v58);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v29, v19);
    *(_QWORD *)&v18[*(int *)(v31 + 24)] = v34;
    swift_release();
  }
  sub_10005F428((uint64_t)v18, v61, type metadata accessor for SignpostInterval);
  sub_1000255F0((uint64_t)v18, type metadata accessor for SignpostInterval);
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v24, v19);
}

uint64_t sub_10010A698(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v22 = a5;
  v23 = a4;
  v10 = sub_1000055B0(&qword_1002B1CD0);
  __chkstk_darwin(v10);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for OSSignposter(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(a3 + 40);
  v18 = *(_QWORD *)(a3 + 48);
  sub_10002CA90(a2, (uint64_t)v12);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v12, 1, v13) == 1)
  {
    sub_1000C3130((uint64_t)v12);
    return Completion.callAsFunction(_:)(a1);
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
  result = type metadata accessor for SignpostInterval(0);
  v20 = a2 + *(int *)(result + 20);
  if ((*(_BYTE *)(v20 + 17) & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v21 = *(_QWORD *)(a2 + *(int *)(result + 24));
    if (v21)
    {
      sub_10010B394((uint64_t)v16, *(const char **)v20, *(_QWORD *)(v20 + 8), *(unsigned __int8 *)(v20 + 16), v21, a1, v17, v18, v23, v22, a6 & 1);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      return Completion.callAsFunction(_:)(a1);
    }
  }
  __break(1u);
  return result;
}

void sub_10010A828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  char v21;
  char v22;
  char v23;
  char v24;
  unsigned int (*v25)(char *, uint64_t, uint64_t);
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  char *v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  char v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;
  char v73;
  char v74;
  char v75;
  char v76;
  char v77;
  char v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v60 = a5;
  v61 = a4;
  v59 = a3;
  v85 = a1;
  v86 = a2;
  v44 = a1;
  v7 = BYTE1(a1);
  v40 = BYTE2(a1);
  v42 = BYTE3(a1);
  v41 = BYTE4(a1);
  v39 = BYTE5(a1);
  v58 = BYTE6(a1);
  v57 = HIBYTE(a1);
  v8 = a2;
  v9 = BYTE1(a2);
  v10 = BYTE2(a2);
  v11 = BYTE3(a2);
  v54 = BYTE4(a2);
  v53 = BYTE5(a2);
  v12 = BYTE6(a2);
  v51 = HIBYTE(a2);
  v13 = sub_1000055B0(&qword_1002B1CD0);
  __chkstk_darwin(v13);
  v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for OSSignposter(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v43 = (char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_errorRetain(a6);
  v62 = a6;
  v63 = a6;
  v19 = v9;
  v20 = v8;
  v21 = v39;
  v22 = v41;
  v23 = v42;
  v64 = v44;
  v45 = v7;
  v65 = v7;
  v24 = v40;
  v66 = v40;
  v67 = v42;
  v68 = v41;
  v69 = v39;
  v70 = v58;
  v71 = v57;
  v47 = v20;
  v72 = v20;
  v49 = v19;
  v73 = v19;
  v74 = v10;
  v55 = v11;
  v75 = v11;
  v76 = v54;
  v77 = v53;
  v52 = v12;
  v78 = v12;
  v79 = v51;
  v80 = v59;
  v81 = v61;
  v82 = v60 & 1;
  sub_10002CA90(v46, (uint64_t)v15);
  v48 = v17;
  v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
  v50 = v16;
  if (v25(v15, 1, v16) == 1)
  {
    sub_1000C3130((uint64_t)v15);
    v34 = v62;
LABEL_9:
    swift_errorRelease(v34);
    return;
  }
  v26 = v22;
  v56 = v10;
  v27 = v44;
  v28 = v45;
  v29 = (uint64_t)v43;
  (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v43, v15, v50);
  v30 = type metadata accessor for SignpostInterval(0);
  v31 = v46 + *(int *)(v30 + 20);
  v32 = *(_QWORD *)(v31 + 8);
  v33 = *(unsigned __int8 *)(v31 + 16);
  if ((*(_BYTE *)(v31 + 17) & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v37 = *(const char **)v31;
    v38 = v33;
    v35 = *(_QWORD *)(v46 + *(int *)(v30 + 24));
    swift_retain();
    if (v35)
    {
      LOBYTE(v83) = v27;
      BYTE1(v83) = v28;
      BYTE2(v83) = v24;
      BYTE3(v83) = v23;
      BYTE4(v83) = v26;
      BYTE5(v83) = v21;
      BYTE6(v83) = v58;
      HIBYTE(v83) = v57;
      LOBYTE(v84) = v47;
      BYTE1(v84) = v49;
      BYTE2(v84) = v56;
      BYTE3(v84) = v55;
      BYTE4(v84) = v54;
      BYTE5(v84) = v53;
      BYTE6(v84) = v52;
      HIBYTE(v84) = v51;
      v34 = v62;
      sub_10010B394(v29, v37, v32, v38, v35, v62, v83, v84, v59, v61, v60 & 1);
      (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v29, v50);
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
}

unint64_t sub_10010AC8C()
{
  unsigned __int8 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String_optional v11;
  BOOL v12;
  unint64_t result;
  int v14;
  unsigned __int8 v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = UUID.init(uuid:)(v0[40], v0[41], v0[42], v0[43], v0[44], v0[45]);
  v6 = UUID.uuidString.getter(v5);
  v8 = v7;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v9 = HIBYTE(v8) & 0xF;
  v18 = v6;
  v19 = v8;
  if ((v8 & 0x2000000000000000) == 0)
    v9 = v6 & 0xFFFFFFFFFFFFLL;
  v20 = 0;
  v21 = v9;
  swift_bridgeObjectRetain(v8);
  v10 = 0;
  while (1)
  {
    v11 = String.Iterator.next()();
    if (!v11.value._object)
      goto LABEL_21;
    v12 = v11.value._countAndFlagsBits == 2573 && v11.value._object == (void *)0xE200000000000000;
    if (v12
      || (_stringCompareWithSmolCheck(_:_:expecting:)(v11.value._countAndFlagsBits, v11.value._object, 2573, 0xE200000000000000, 0) & 1) != 0)
    {
      swift_bridgeObjectRelease(v11.value._object);
      v15 = 10;
      goto LABEL_18;
    }
    if ((Character._isSingleScalar.getter(v11.value._countAndFlagsBits, v11.value._object) & 1) == 0)
      goto LABEL_17;
    result = sub_10010DD34(v11.value._countAndFlagsBits, (unint64_t)v11.value._object);
    if ((result & 0x100000000) != 0)
      goto LABEL_23;
    if ((result & 0xFFFFFF80) != 0)
    {
LABEL_17:
      swift_bridgeObjectRelease(v11.value._object);
      v15 = 0;
      goto LABEL_18;
    }
    result = sub_10010DD34(v11.value._countAndFlagsBits, (unint64_t)v11.value._object);
    if ((result & 0x100000000) != 0)
      goto LABEL_24;
    v14 = result;
    result = swift_bridgeObjectRelease(v11.value._object);
    if ((v14 & 0xFFFFFF00) != 0)
      break;
    v15 = v14;
LABEL_18:
    v16 = __OFADD__(v10, v15);
    v10 += v15;
    if (v16)
    {
      __break(1u);
LABEL_21:
      v17 = v19;
      swift_bridgeObjectRelease(v8);
      return swift_bridgeObjectRelease(v17);
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
  return result;
}

void sub_10010AE70()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;

  v0 = type metadata accessor for SyncContext.Event(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_storeEnumTagMultiPayload(v2, v3, 3);
  sub_100107FB8(v2);
  sub_1000255F0((uint64_t)v2, type metadata accessor for SyncContext.Event);
}

void sub_10010AEF8()
{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  swift_bridgeObjectRelease();
  v1 = type metadata accessor for Logger(0);
  sub_10002666C(v1);
  sub_10000AEBC(v0 + OBJC_IVAR____TtC13EnsembleAgent11SyncContext_messageSender);
  sub_1000255F0(v0 + OBJC_IVAR____TtC13EnsembleAgent11SyncContext_state, type metadata accessor for SyncContext.State);
  sub_1000050D4();
}

uint64_t sub_10010AF60()
{
  uint64_t v0;

  sub_10010AEF8();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10010AF84(uint64_t a1, const char *a2, uint64_t a3, char a4, uint64_t a5, unint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  NSObject *v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  os_signpost_id_t v41;
  os_log_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t, uint64_t);
  uint64_t v63;
  os_log_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;

  v68 = a8;
  v15 = type metadata accessor for UUID(0);
  v65 = *(_QWORD *)(v15 - 8);
  v66 = v15;
  __chkstk_darwin(v15);
  v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for OSSignpostID(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v45 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = OSSignposter.logHandle.getter(v20);
  v67 = static os_signpost_type_t.begin.getter();
  result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0)
  {

    (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v22, a5, v18);
LABEL_11:
    v44 = type metadata accessor for OSSignpostIntervalState(0);
    swift_allocObject(v44, *(unsigned int *)(v44 + 48), *(unsigned __int16 *)(v44 + 52));
    return OSSignpostIntervalState.init(id:isOpen:)(v22, 1);
  }
  v64 = v23;
  if ((a4 & 1) == 0)
  {
    if (a2)
    {
      v25 = v19;
      v46 = a2;
LABEL_10:
      v61 = a9;
      v57 = a6 >> 16;
      v58 = a6 >> 8;
      v55 = HIDWORD(a6);
      v56 = a6 >> 24;
      v54 = a6 >> 40;
      v51 = HIBYTE(a6);
      v52 = HIWORD(a6);
      v50 = a7 >> 8;
      v49 = a7 >> 16;
      v48 = a7 >> 24;
      v47 = HIDWORD(a7);
      v59 = a10 & 1;
      v62 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 16);
      v63 = v25;
      v62(v22, a5, v18);
      v26 = swift_slowAlloc(22, -1);
      v60 = swift_slowAlloc(64, -1);
      v70 = v60;
      *(_DWORD *)v26 = 136315394;
      v53 = v26 + 4;
      v27 = UUID.init(uuid:)(a6, v58, v57, v56, v55, v54);
      v28 = UUID.uuidString.getter(v27);
      v30 = v29;
      (*(void (**)(char *, uint64_t))(v65 + 8))(v17, v66);
      v31 = sub_1000599D0(8, v28, v30);
      v33 = v32;
      v34 = static String._fromSubstring(_:)(v31);
      v36 = v35;
      swift_bridgeObjectRelease(v33);
      v69 = sub_100006FCC(v34, v36, &v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v53);
      swift_bridgeObjectRelease(v36);
      *(_WORD *)(v26 + 12) = 2080;
      v37 = sub_100107900(v68, v61, v59);
      v39 = v38;
      v69 = sub_100006FCC(v37, v38, &v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v26 + 14);
      v40 = swift_bridgeObjectRelease(v39);
      v41 = OSSignpostID.rawValue.getter(v40);
      v42 = v64;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v64, (os_signpost_type_t)v67, v41, v46, "%s: reason=%s", (uint8_t *)v26, 0x16u);
      v43 = v60;
      swift_arrayDestroy(v60, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v26, -1, -1);

      (*(void (**)(char *, uint64_t))(v63 + 8))(v22, v18);
      v62(v22, a5, v18);
      goto LABEL_11;
    }
    __break(1u);
    goto LABEL_13;
  }
  if ((unint64_t)a2 >> 32)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (a2 >> 11 != 27)
  {
    if (a2 >> 16 <= 0x10)
    {
      v25 = v19;
      v46 = &v71;
      goto LABEL_10;
    }
    goto LABEL_14;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_10010B394(uint64_t a1, const char *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, unint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  const char *v30;
  int v31;
  char v32;
  char v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  os_signpost_id_t v53;
  os_log_t v54;
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  _QWORD v57[8];
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  os_log_t v66;
  char *v67;
  uint64_t v68;
  const char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char v80;

  v74 = a6;
  LODWORD(v75) = a4;
  v77 = (char *)a2;
  v14 = type metadata accessor for UUID(0);
  v71 = *(_QWORD *)(v14 - 8);
  v72 = v14;
  __chkstk_darwin(v14);
  v70 = (char *)v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = (const char *)type metadata accessor for OSSignpostError(0);
  v16 = *((_QWORD *)v69 - 1);
  __chkstk_darwin(v69);
  v18 = (char *)v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for OSSignpostID(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = __chkstk_darwin(v19);
  v76 = (char *)v57 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v21);
  v25 = (char *)v57 - v24;
  v26 = OSSignposter.logHandle.getter(v23);
  v27 = OSSignpostIntervalState.signpostID.getter();
  v73 = static os_signpost_type_t.end.getter(v27);
  result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0)
    goto LABEL_5;
  v66 = v26;
  v67 = v25;
  v68 = v20;
  if ((v75 & 1) == 0)
  {
    if (!v77)
    {
      __break(1u);
LABEL_5:

      return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v25, v19);
    }
    goto LABEL_10;
  }
  if ((unint64_t)v77 >> 32)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (v77 >> 11 == 27)
  {
LABEL_17:
    __break(1u);
    return result;
  }
  if (v77 >> 16 > 0x10)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v77 = &v80;
LABEL_10:
  v61 = a7 >> 16;
  v62 = a7 >> 8;
  v60 = a7 >> 24;
  v59 = HIDWORD(a7);
  v58 = a7 >> 40;
  v57[7] = HIWORD(a7);
  v57[6] = HIBYTE(a7);
  v57[5] = a8 >> 8;
  v57[4] = a8 >> 16;
  v57[3] = a8 >> 24;
  v57[2] = HIDWORD(a8);
  v57[1] = a8 >> 40;
  v63 = a11 & 1;
  swift_retain(a5);
  checkForErrorAndConsumeState(state:)(v29);
  swift_release();
  v30 = v69;
  v31 = (*(uint64_t (**)(char *, const char *))(v16 + 88))(v18, v69);
  v75 = a10;
  v65 = a9;
  if (v31 == enum case for OSSignpostError.doubleEnd(_:))
  {
    v33 = 0;
    v32 = 0;
    v69 = "[Error] Interval already ended";
  }
  else
  {
    (*(void (**)(char *, const char *))(v16 + 8))(v18, v30);
    v69 = "%s: reason=%s success=%{BOOL}d";
    v32 = 2;
    v33 = 3;
  }
  v34 = *(void (**)(char *, char *, uint64_t))(v68 + 16);
  v64 = v19;
  v34(v76, v67, v19);
  v35 = swift_slowAlloc(28, -1);
  v36 = swift_slowAlloc(64, -1);
  v79 = v36;
  *(_BYTE *)v35 = v32;
  *(_BYTE *)(v35 + 1) = v33;
  *(_WORD *)(v35 + 2) = 2080;
  v37 = v70;
  v38 = UUID.init(uuid:)(a7, v62, v61, v60, v59, v58);
  v39 = UUID.uuidString.getter(v38);
  v41 = v40;
  (*(void (**)(char *, uint64_t))(v71 + 8))(v37, v72);
  v42 = sub_1000599D0(8, v39, v41);
  v44 = v43;
  v45 = static String._fromSubstring(_:)(v42);
  v47 = v46;
  swift_bridgeObjectRelease(v44);
  v78 = sub_100006FCC(v45, v47, &v79);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v35 + 4);
  swift_bridgeObjectRelease(v47);
  *(_WORD *)(v35 + 12) = 2080;
  v48 = sub_100107900(v65, v75, v63);
  v50 = v49;
  v78 = sub_100006FCC(v48, v49, &v79);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v35 + 14);
  swift_bridgeObjectRelease(v50);
  *(_WORD *)(v35 + 22) = 1024;
  LODWORD(v78) = v74 == 0;
  v51 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, (char *)&v78 + 4, v35 + 24);
  v52 = v76;
  v53 = OSSignpostID.rawValue.getter(v51);
  v54 = v66;
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v66, (os_signpost_type_t)v73, v53, v77, v69, (uint8_t *)v35, 0x1Cu);
  swift_arrayDestroy(v36, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v36, -1, -1);
  swift_slowDealloc(v35, -1, -1);

  v55 = *(void (**)(char *, uint64_t))(v68 + 8);
  v56 = v64;
  v55(v67, v64);
  return ((uint64_t (*)(char *, uint64_t))v55)(v52, v56);
}

uint64_t sub_10010B8C8()
{
  return type metadata accessor for SyncContext(0);
}

uint64_t type metadata accessor for SyncContext(uint64_t a1)
{
  return sub_100021590(a1, qword_1002B1D20, (uint64_t)&nominal type descriptor for SyncContext);
}

uint64_t sub_10010B8E4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[8];

  v5[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v5[1] = &unk_1002264B8;
  v5[2] = &unk_1002264B8;
  v5[3] = &unk_1002264D0;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v5[4] = *(_QWORD *)(result - 8) + 64;
    v5[5] = &unk_1002264E8;
    v5[6] = (char *)&value witness table for Builtin.Int64 + 64;
    result = type metadata accessor for SyncContext.State(319);
    if (v4 <= 0x3F)
    {
      v5[7] = *(_QWORD *)(result - 8) + 64;
      result = swift_updateClassMetadata2(a1, 256, 8, v5, a1 + 80);
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for SyncContext.State(uint64_t a1)
{
  return sub_100021590(a1, (uint64_t *)&unk_1002B1E80, (uint64_t)&nominal type descriptor for SyncContext.State);
}

char *sub_10010B9BC(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  __int128 v39;
  uint64_t v40;
  char *v41;
  char *v42;
  __int128 v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  __int128 v50;
  uint64_t v51;
  char *v52;
  char *v53;
  __int128 v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  __int128 v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  int *v102;
  int *v103;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v22 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v22 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[16] = a2[16];
      v103 = (int *)sub_1000055B0((uint64_t *)&unk_1002B1DE0);
      v23 = v103[12];
      v24 = &a1[v23];
      v25 = &a2[v23];
      *(_QWORD *)v24 = *(_QWORD *)&a2[v23];
      *(_OWORD *)(v24 + 8) = *(_OWORD *)&a2[v23 + 8];
      v24[40] = a2[v23 + 40];
      *(_OWORD *)(v24 + 24) = *(_OWORD *)&a2[v23 + 24];
      *((_QWORD *)v24 + 6) = *(_QWORD *)&a2[v23 + 48];
      swift_bridgeObjectRetain();
      swift_retain();
      v26 = (int *)sub_1000055B0(&qword_1002B1430);
      v27 = v26[16];
      v28 = &v24[v27];
      v29 = &v25[v27];
      v30 = *(_OWORD *)&v25[v27 + 16];
      *(_OWORD *)v28 = *(_OWORD *)&v25[v27];
      *((_OWORD *)v28 + 1) = v30;
      v28[32] = v25[v27 + 32];
      v31 = *(int *)(sub_1000055B0((uint64_t *)&unk_1002B1DF0) + 56);
      v32 = &v28[v31];
      v33 = &v29[v31];
      v34 = type metadata accessor for UniversalControlDisplayLayout(0);
      if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v33, 1, v34))
      {
        v35 = sub_1000055B0((uint64_t *)&unk_1002B3380);
        memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v32, v33, v34);
        _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v32, 0, 1, v34);
      }
      v47 = v26[20];
      v48 = &v24[v47];
      v49 = &v25[v47];
      v50 = *((_OWORD *)v49 + 1);
      *(_OWORD *)v48 = *(_OWORD *)v49;
      *((_OWORD *)v48 + 1) = v50;
      v48[32] = v49[32];
      *((_QWORD *)v48 + 5) = *((_QWORD *)v49 + 5);
      v51 = v26[24];
      v52 = &v24[v51];
      v53 = &v25[v51];
      v54 = *(_OWORD *)&v25[v51 + 16];
      *(_OWORD *)v52 = *(_OWORD *)&v25[v51];
      *((_OWORD *)v52 + 1) = v54;
      v52[32] = v25[v51 + 32];
      v55 = &v25[v51 + 40];
      v56 = *(_QWORD *)v55;
      swift_bridgeObjectRetain();
      if (v56)
      {
        v57 = *((_QWORD *)v53 + 6);
        *((_QWORD *)v52 + 5) = v56;
        *((_QWORD *)v52 + 6) = v57;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)(v52 + 40) = *(_OWORD *)v55;
      }
      v72 = v26[28];
      v73 = &v24[v72];
      v74 = &v25[v72];
      v75 = *((_OWORD *)v74 + 1);
      *(_OWORD *)v73 = *(_OWORD *)v74;
      *((_OWORD *)v73 + 1) = v75;
      v73[32] = v74[32];
      v76 = *((_QWORD *)v74 + 5);
      if (v76 == 1)
      {
        *(_OWORD *)(v73 + 40) = *(_OWORD *)(v74 + 40);
        *((_QWORD *)v73 + 7) = *((_QWORD *)v74 + 7);
      }
      else
      {
        *((_QWORD *)v73 + 5) = v76;
        *((_OWORD *)v73 + 3) = *((_OWORD *)v74 + 3);
        swift_bridgeObjectRetain();
      }
      v77 = v26[32];
      v78 = &v24[v77];
      v79 = &v25[v77];
      v80 = *(_OWORD *)&v25[v77 + 16];
      *(_OWORD *)v78 = *(_OWORD *)&v25[v77];
      *((_OWORD *)v78 + 1) = v80;
      v78[32] = v25[v77 + 32];
      v81 = *(int *)(sub_1000055B0((uint64_t *)&unk_1002B1E00) + 56);
      v82 = &v78[v81];
      v83 = &v79[v81];
      v84 = type metadata accessor for UniversalControlConfiguration(0);
      if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v83, 1, v84))
      {
        v85 = sub_1000055B0(&qword_1002B1438);
        memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v84 - 8) + 16))(v82, v83, v84);
        _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v82, 0, 1, v84);
      }
      v95 = v26[36];
      v96 = &v24[v95];
      v97 = &v25[v95];
      v98 = *((_OWORD *)v97 + 1);
      *(_OWORD *)v96 = *(_OWORD *)v97;
      *((_OWORD *)v96 + 1) = v98;
      *(_DWORD *)(v96 + 31) = *(_DWORD *)(v97 + 31);
      *(_QWORD *)&a1[v103[16]] = *(_QWORD *)&a2[v103[16]];
      *(_QWORD *)&a1[v103[20]] = *(_QWORD *)&a2[v103[20]];
      v99 = v103[24];
      v100 = *(_QWORD *)&a2[v99];
      *(_QWORD *)&a1[v99] = v100;
      swift_unknownObjectRetain(v100);
      v92 = a1;
      v93 = a3;
      v94 = 2;
      goto LABEL_32;
    }
    if (EnumCaseMultiPayload == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[16] = a2[16];
      v102 = (int *)sub_1000055B0((uint64_t *)&unk_1002B1DE0);
      v9 = v102[12];
      v10 = &a1[v9];
      v11 = &a2[v9];
      *(_QWORD *)v10 = *(_QWORD *)&a2[v9];
      *(_OWORD *)(v10 + 8) = *(_OWORD *)&a2[v9 + 8];
      v10[40] = a2[v9 + 40];
      *(_OWORD *)(v10 + 24) = *(_OWORD *)&a2[v9 + 24];
      *((_QWORD *)v10 + 6) = *(_QWORD *)&a2[v9 + 48];
      swift_bridgeObjectRetain();
      swift_retain();
      v12 = (int *)sub_1000055B0(&qword_1002B1430);
      v13 = v12[16];
      v14 = &v10[v13];
      v15 = &v11[v13];
      v16 = *(_OWORD *)&v11[v13 + 16];
      *(_OWORD *)v14 = *(_OWORD *)&v11[v13];
      *((_OWORD *)v14 + 1) = v16;
      v14[32] = v11[v13 + 32];
      v17 = *(int *)(sub_1000055B0((uint64_t *)&unk_1002B1DF0) + 56);
      v18 = &v14[v17];
      v19 = &v15[v17];
      v20 = type metadata accessor for UniversalControlDisplayLayout(0);
      if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v19, 1, v20))
      {
        v21 = sub_1000055B0((uint64_t *)&unk_1002B3380);
        memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
        _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v18, 0, 1, v20);
      }
      v36 = v12[20];
      v37 = &v10[v36];
      v38 = &v11[v36];
      v39 = *((_OWORD *)v38 + 1);
      *(_OWORD *)v37 = *(_OWORD *)v38;
      *((_OWORD *)v37 + 1) = v39;
      v37[32] = v38[32];
      *((_QWORD *)v37 + 5) = *((_QWORD *)v38 + 5);
      v40 = v12[24];
      v41 = &v10[v40];
      v42 = &v11[v40];
      v43 = *(_OWORD *)&v11[v40 + 16];
      *(_OWORD *)v41 = *(_OWORD *)&v11[v40];
      *((_OWORD *)v41 + 1) = v43;
      v41[32] = v11[v40 + 32];
      v44 = &v11[v40 + 40];
      v45 = *(_QWORD *)v44;
      swift_bridgeObjectRetain();
      if (v45)
      {
        v46 = *((_QWORD *)v42 + 6);
        *((_QWORD *)v41 + 5) = v45;
        *((_QWORD *)v41 + 6) = v46;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)(v41 + 40) = *(_OWORD *)v44;
      }
      v58 = v12[28];
      v59 = &v10[v58];
      v60 = &v11[v58];
      v61 = *((_OWORD *)v60 + 1);
      *(_OWORD *)v59 = *(_OWORD *)v60;
      *((_OWORD *)v59 + 1) = v61;
      v59[32] = v60[32];
      v62 = *((_QWORD *)v60 + 5);
      if (v62 == 1)
      {
        *(_OWORD *)(v59 + 40) = *(_OWORD *)(v60 + 40);
        *((_QWORD *)v59 + 7) = *((_QWORD *)v60 + 7);
      }
      else
      {
        *((_QWORD *)v59 + 5) = v62;
        *((_OWORD *)v59 + 3) = *((_OWORD *)v60 + 3);
        swift_bridgeObjectRetain();
      }
      v63 = v12[32];
      v64 = &v10[v63];
      v65 = &v11[v63];
      v66 = *(_OWORD *)&v11[v63 + 16];
      *(_OWORD *)v64 = *(_OWORD *)&v11[v63];
      *((_OWORD *)v64 + 1) = v66;
      v64[32] = v11[v63 + 32];
      v67 = *(int *)(sub_1000055B0((uint64_t *)&unk_1002B1E00) + 56);
      v68 = &v64[v67];
      v69 = &v65[v67];
      v70 = type metadata accessor for UniversalControlConfiguration(0);
      if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v69, 1, v70))
      {
        v71 = sub_1000055B0(&qword_1002B1438);
        memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v70 - 8) + 16))(v68, v69, v70);
        _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v68, 0, 1, v70);
      }
      v86 = v12[36];
      v87 = &v10[v86];
      v88 = &v11[v86];
      v89 = *((_OWORD *)v88 + 1);
      *(_OWORD *)v87 = *(_OWORD *)v88;
      *((_OWORD *)v87 + 1) = v89;
      *(_DWORD *)(v87 + 31) = *(_DWORD *)(v88 + 31);
      *(_QWORD *)&a1[v102[16]] = *(_QWORD *)&a2[v102[16]];
      *(_QWORD *)&a1[v102[20]] = *(_QWORD *)&a2[v102[20]];
      v90 = v102[24];
      v91 = *(_QWORD *)&a2[v90];
      *(_QWORD *)&a1[v90] = v91;
      swift_unknownObjectRetain(v91);
      v92 = a1;
      v93 = a3;
      v94 = 1;
LABEL_32:
      swift_storeEnumTagMultiPayload(v92, v93, v94);
      return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  return a1;
}

uint64_t sub_10010C018(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  if ((_DWORD)result == 2 || (_DWORD)result == 1)
  {
    v4 = sub_1000055B0((uint64_t *)&unk_1002B1DE0);
    v5 = a1 + *(int *)(v4 + 48);
    swift_bridgeObjectRelease();
    swift_release();
    v6 = (int *)sub_1000055B0(&qword_1002B1430);
    v7 = v6[16];
    v8 = v5 + v7 + *(int *)(sub_1000055B0((uint64_t *)&unk_1002B1DF0) + 56);
    v9 = type metadata accessor for UniversalControlDisplayLayout(0);
    if (!_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v8, 1, v9))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v5 + v6[24] + 40))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (*(_QWORD *)(v5 + v6[28] + 40) != 1)
      swift_bridgeObjectRelease();
    v10 = v6[32];
    v11 = v5 + v10 + *(int *)(sub_1000055B0((uint64_t *)&unk_1002B1E00) + 56);
    v12 = type metadata accessor for UniversalControlConfiguration(0);
    if (!_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v11, 1, v12))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
    return swift_unknownObjectRelease(*(_QWORD *)(a1 + *(int *)(v4 + 96)));
  }
  return result;
}

char *sub_10010C190(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  int *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  __int128 v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  char *v41;
  __int128 v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  __int128 v49;
  uint64_t v50;
  char *v51;
  char *v52;
  __int128 v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  __int128 v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  __int128 v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v101;
  uint64_t v102;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 2)
  {
    v102 = a3;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[16] = a2[16];
    v21 = (int *)sub_1000055B0((uint64_t *)&unk_1002B1DE0);
    v22 = v21[12];
    v23 = &a1[v22];
    v24 = &a2[v22];
    *(_QWORD *)v23 = *(_QWORD *)&a2[v22];
    *(_OWORD *)(v23 + 8) = *(_OWORD *)&a2[v22 + 8];
    v23[40] = a2[v22 + 40];
    *(_OWORD *)(v23 + 24) = *(_OWORD *)&a2[v22 + 24];
    *((_QWORD *)v23 + 6) = *(_QWORD *)&a2[v22 + 48];
    swift_bridgeObjectRetain();
    swift_retain();
    v25 = (int *)sub_1000055B0(&qword_1002B1430);
    v26 = v25[16];
    v27 = &v23[v26];
    v28 = &v24[v26];
    v29 = *(_OWORD *)&v24[v26 + 16];
    *(_OWORD *)v27 = *(_OWORD *)&v24[v26];
    *((_OWORD *)v27 + 1) = v29;
    v27[32] = v24[v26 + 32];
    v30 = *(int *)(sub_1000055B0((uint64_t *)&unk_1002B1DF0) + 56);
    v31 = &v27[v30];
    v32 = &v28[v30];
    v33 = type metadata accessor for UniversalControlDisplayLayout(0);
    if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v32, 1, v33))
    {
      v34 = sub_1000055B0((uint64_t *)&unk_1002B3380);
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v31, v32, v33);
      _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v31, 0, 1, v33);
    }
    v46 = v25[20];
    v47 = &v23[v46];
    v48 = &v24[v46];
    v49 = *((_OWORD *)v48 + 1);
    *(_OWORD *)v47 = *(_OWORD *)v48;
    *((_OWORD *)v47 + 1) = v49;
    v47[32] = v48[32];
    *((_QWORD *)v47 + 5) = *((_QWORD *)v48 + 5);
    v50 = v25[24];
    v51 = &v23[v50];
    v52 = &v24[v50];
    v53 = *(_OWORD *)&v24[v50 + 16];
    *(_OWORD *)v51 = *(_OWORD *)&v24[v50];
    *((_OWORD *)v51 + 1) = v53;
    v51[32] = v24[v50 + 32];
    v54 = &v24[v50 + 40];
    v55 = *(_QWORD *)v54;
    swift_bridgeObjectRetain();
    if (v55)
    {
      v56 = *((_QWORD *)v52 + 6);
      *((_QWORD *)v51 + 5) = v55;
      *((_QWORD *)v51 + 6) = v56;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)(v51 + 40) = *(_OWORD *)v54;
    }
    v71 = v25[28];
    v72 = &v23[v71];
    v73 = &v24[v71];
    v74 = *((_OWORD *)v73 + 1);
    *(_OWORD *)v72 = *(_OWORD *)v73;
    *((_OWORD *)v72 + 1) = v74;
    v72[32] = v73[32];
    v75 = *((_QWORD *)v73 + 5);
    if (v75 == 1)
    {
      *(_OWORD *)(v72 + 40) = *(_OWORD *)(v73 + 40);
      *((_QWORD *)v72 + 7) = *((_QWORD *)v73 + 7);
    }
    else
    {
      *((_QWORD *)v72 + 5) = v75;
      *((_OWORD *)v72 + 3) = *((_OWORD *)v73 + 3);
      swift_bridgeObjectRetain();
    }
    v76 = v25[32];
    v77 = &v23[v76];
    v78 = &v24[v76];
    v79 = *(_OWORD *)&v24[v76 + 16];
    *(_OWORD *)v77 = *(_OWORD *)&v24[v76];
    *((_OWORD *)v77 + 1) = v79;
    v77[32] = v24[v76 + 32];
    v80 = *(int *)(sub_1000055B0((uint64_t *)&unk_1002B1E00) + 56);
    v81 = &v77[v80];
    v82 = &v78[v80];
    v83 = type metadata accessor for UniversalControlConfiguration(0);
    if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v82, 1, v83))
    {
      v84 = sub_1000055B0(&qword_1002B1438);
      memcpy(v81, v82, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v83 - 8) + 16))(v81, v82, v83);
      _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v81, 0, 1, v83);
    }
    v94 = v25[36];
    v95 = &v23[v94];
    v96 = &v24[v94];
    v97 = *((_OWORD *)v96 + 1);
    *(_OWORD *)v95 = *(_OWORD *)v96;
    *((_OWORD *)v95 + 1) = v97;
    *(_DWORD *)(v95 + 31) = *(_DWORD *)(v96 + 31);
    *(_QWORD *)&a1[v21[16]] = *(_QWORD *)&a2[v21[16]];
    *(_QWORD *)&a1[v21[20]] = *(_QWORD *)&a2[v21[20]];
    v98 = v21[24];
    v99 = *(_QWORD *)&a2[v98];
    *(_QWORD *)&a1[v98] = v99;
    swift_unknownObjectRetain(v99);
    v91 = a1;
    v92 = v102;
    v93 = 2;
    goto LABEL_30;
  }
  if (EnumCaseMultiPayload == 1)
  {
    v101 = a3;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[16] = a2[16];
    v7 = (int *)sub_1000055B0((uint64_t *)&unk_1002B1DE0);
    v8 = v7[12];
    v9 = &a1[v8];
    v10 = &a2[v8];
    *(_QWORD *)v9 = *(_QWORD *)&a2[v8];
    *(_OWORD *)(v9 + 8) = *(_OWORD *)&a2[v8 + 8];
    v9[40] = a2[v8 + 40];
    *(_OWORD *)(v9 + 24) = *(_OWORD *)&a2[v8 + 24];
    *((_QWORD *)v9 + 6) = *(_QWORD *)&a2[v8 + 48];
    swift_bridgeObjectRetain();
    swift_retain();
    v11 = (int *)sub_1000055B0(&qword_1002B1430);
    v12 = v11[16];
    v13 = &v9[v12];
    v14 = &v10[v12];
    v15 = *(_OWORD *)&v10[v12 + 16];
    *(_OWORD *)v13 = *(_OWORD *)&v10[v12];
    *((_OWORD *)v13 + 1) = v15;
    v13[32] = v10[v12 + 32];
    v16 = *(int *)(sub_1000055B0((uint64_t *)&unk_1002B1DF0) + 56);
    v17 = &v13[v16];
    v18 = &v14[v16];
    v19 = type metadata accessor for UniversalControlDisplayLayout(0);
    if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v18, 1, v19))
    {
      v20 = sub_1000055B0((uint64_t *)&unk_1002B3380);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
      _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v17, 0, 1, v19);
    }
    v35 = v11[20];
    v36 = &v9[v35];
    v37 = &v10[v35];
    v38 = *((_OWORD *)v37 + 1);
    *(_OWORD *)v36 = *(_OWORD *)v37;
    *((_OWORD *)v36 + 1) = v38;
    v36[32] = v37[32];
    *((_QWORD *)v36 + 5) = *((_QWORD *)v37 + 5);
    v39 = v11[24];
    v40 = &v9[v39];
    v41 = &v10[v39];
    v42 = *(_OWORD *)&v10[v39 + 16];
    *(_OWORD *)v40 = *(_OWORD *)&v10[v39];
    *((_OWORD *)v40 + 1) = v42;
    v40[32] = v10[v39 + 32];
    v43 = &v10[v39 + 40];
    v44 = *(_QWORD *)v43;
    swift_bridgeObjectRetain();
    if (v44)
    {
      v45 = *((_QWORD *)v41 + 6);
      *((_QWORD *)v40 + 5) = v44;
      *((_QWORD *)v40 + 6) = v45;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)(v40 + 40) = *(_OWORD *)v43;
    }
    v57 = v11[28];
    v58 = &v9[v57];
    v59 = &v10[v57];
    v60 = *((_OWORD *)v59 + 1);
    *(_OWORD *)v58 = *(_OWORD *)v59;
    *((_OWORD *)v58 + 1) = v60;
    v58[32] = v59[32];
    v61 = *((_QWORD *)v59 + 5);
    if (v61 == 1)
    {
      *(_OWORD *)(v58 + 40) = *(_OWORD *)(v59 + 40);
      *((_QWORD *)v58 + 7) = *((_QWORD *)v59 + 7);
    }
    else
    {
      *((_QWORD *)v58 + 5) = v61;
      *((_OWORD *)v58 + 3) = *((_OWORD *)v59 + 3);
      swift_bridgeObjectRetain();
    }
    v62 = v11[32];
    v63 = &v9[v62];
    v64 = &v10[v62];
    v65 = *(_OWORD *)&v10[v62 + 16];
    *(_OWORD *)v63 = *(_OWORD *)&v10[v62];
    *((_OWORD *)v63 + 1) = v65;
    v63[32] = v10[v62 + 32];
    v66 = *(int *)(sub_1000055B0((uint64_t *)&unk_1002B1E00) + 56);
    v67 = &v63[v66];
    v68 = &v64[v66];
    v69 = type metadata accessor for UniversalControlConfiguration(0);
    if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v68, 1, v69))
    {
      v70 = sub_1000055B0(&qword_1002B1438);
      memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v69 - 8) + 16))(v67, v68, v69);
      _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v67, 0, 1, v69);
    }
    v85 = v11[36];
    v86 = &v9[v85];
    v87 = &v10[v85];
    v88 = *((_OWORD *)v87 + 1);
    *(_OWORD *)v86 = *(_OWORD *)v87;
    *((_OWORD *)v86 + 1) = v88;
    *(_DWORD *)(v86 + 31) = *(_DWORD *)(v87 + 31);
    *(_QWORD *)&a1[v7[16]] = *(_QWORD *)&a2[v7[16]];
    *(_QWORD *)&a1[v7[20]] = *(_QWORD *)&a2[v7[20]];
    v89 = v7[24];
    v90 = *(_QWORD *)&a2[v89];
    *(_QWORD *)&a1[v89] = v90;
    swift_unknownObjectRetain(v90);
    v91 = a1;
    v92 = v101;
    v93 = 1;
LABEL_30:
    swift_storeEnumTagMultiPayload(v91, v92, v93);
    return a1;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

char *sub_10010C7CC(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  __int128 v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  char *v24;
  int *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  __int128 v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  char *v41;
  __int128 v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  __int128 v48;
  uint64_t v49;
  char *v50;
  char *v51;
  __int128 v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  __int128 v58;
  uint64_t v59;
  char *v60;
  __int128 v61;
  uint64_t v62;
  char *v63;
  char *v64;
  __int128 v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  __int128 v74;
  uint64_t v75;
  char *v76;
  __int128 v77;
  uint64_t v78;
  char *v79;
  char *v80;
  __int128 v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  int *v105;
  int *v106;

  if (a1 != a2)
  {
    sub_1000255F0((uint64_t)a1, type metadata accessor for SyncContext.State);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v21 = *(_OWORD *)a2;
      a1[16] = a2[16];
      *(_OWORD *)a1 = v21;
      v106 = (int *)sub_1000055B0((uint64_t *)&unk_1002B1DE0);
      v22 = v106[12];
      v23 = &a1[v22];
      v24 = &a2[v22];
      *(_QWORD *)v23 = *(_QWORD *)&a2[v22];
      *(_OWORD *)(v23 + 8) = *(_OWORD *)&a2[v22 + 8];
      LOBYTE(v22) = a2[v22 + 40];
      *(_OWORD *)(v23 + 24) = *(_OWORD *)(v24 + 24);
      v23[40] = v22;
      *((_QWORD *)v23 + 6) = *((_QWORD *)v24 + 6);
      swift_bridgeObjectRetain();
      swift_retain();
      v25 = (int *)sub_1000055B0(&qword_1002B1430);
      v26 = v25[16];
      v27 = &v23[v26];
      v28 = &v24[v26];
      *(_OWORD *)v27 = *(_OWORD *)&v24[v26];
      v29 = *(_OWORD *)&v24[v26 + 16];
      v27[32] = v24[v26 + 32];
      *((_OWORD *)v27 + 1) = v29;
      v30 = *(int *)(sub_1000055B0((uint64_t *)&unk_1002B1DF0) + 56);
      v31 = &v27[v30];
      v32 = &v28[v30];
      v33 = type metadata accessor for UniversalControlDisplayLayout(0);
      if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v32, 1, v33))
      {
        v34 = sub_1000055B0((uint64_t *)&unk_1002B3380);
        memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v31, v32, v33);
        _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v31, 0, 1, v33);
      }
      v45 = v25[20];
      v46 = &v23[v45];
      v47 = &v24[v45];
      *(_OWORD *)v46 = *(_OWORD *)v47;
      v48 = *((_OWORD *)v47 + 1);
      v46[32] = v47[32];
      *((_OWORD *)v46 + 1) = v48;
      *((_QWORD *)v46 + 5) = *((_QWORD *)v47 + 5);
      v49 = v25[24];
      v50 = &v23[v49];
      v51 = &v24[v49];
      *(_OWORD *)v50 = *(_OWORD *)&v24[v49];
      v52 = *(_OWORD *)&v24[v49 + 16];
      v50[32] = v24[v49 + 32];
      *((_OWORD *)v50 + 1) = v52;
      v53 = &v24[v49 + 40];
      v54 = *(_QWORD *)v53;
      swift_bridgeObjectRetain();
      if (v54)
      {
        *((_QWORD *)v50 + 5) = v54;
        *((_QWORD *)v50 + 6) = *((_QWORD *)v51 + 6);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)(v50 + 40) = *(_OWORD *)v53;
      }
      v71 = v25[28];
      v72 = &v23[v71];
      v73 = &v24[v71];
      *(_OWORD *)v72 = *(_OWORD *)v73;
      v74 = *((_OWORD *)v73 + 1);
      v72[32] = v73[32];
      *((_OWORD *)v72 + 1) = v74;
      v75 = *((_QWORD *)v73 + 5);
      if (v75 == 1)
      {
        v76 = v72 + 40;
        v77 = *(_OWORD *)(v73 + 40);
        *((_QWORD *)v76 + 2) = *((_QWORD *)v73 + 7);
        *(_OWORD *)v76 = v77;
      }
      else
      {
        *((_QWORD *)v72 + 5) = v75;
        *((_OWORD *)v72 + 3) = *((_OWORD *)v73 + 3);
        swift_bridgeObjectRetain();
      }
      v78 = v25[32];
      v79 = &v23[v78];
      v80 = &v24[v78];
      *(_OWORD *)v79 = *(_OWORD *)&v24[v78];
      v81 = *(_OWORD *)&v24[v78 + 16];
      v79[32] = v24[v78 + 32];
      *((_OWORD *)v79 + 1) = v81;
      v82 = *(int *)(sub_1000055B0((uint64_t *)&unk_1002B1E00) + 56);
      v83 = &v79[v82];
      v84 = &v80[v82];
      v85 = type metadata accessor for UniversalControlConfiguration(0);
      if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v84, 1, v85))
      {
        v86 = sub_1000055B0(&qword_1002B1438);
        memcpy(v83, v84, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v85 - 8) + 16))(v83, v84, v85);
        _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v83, 0, 1, v85);
      }
      v97 = v25[36];
      v98 = &v23[v97];
      v99 = &v24[v97];
      v100 = *(_OWORD *)v99;
      v101 = *((_OWORD *)v99 + 1);
      *(_DWORD *)(v98 + 31) = *(_DWORD *)(v99 + 31);
      *(_OWORD *)v98 = v100;
      *((_OWORD *)v98 + 1) = v101;
      *(_QWORD *)&a1[v106[16]] = *(_QWORD *)&a2[v106[16]];
      *(_QWORD *)&a1[v106[20]] = *(_QWORD *)&a2[v106[20]];
      v102 = v106[24];
      v103 = *(_QWORD *)&a2[v102];
      *(_QWORD *)&a1[v102] = v103;
      swift_unknownObjectRetain(v103);
      v94 = a1;
      v95 = a3;
      v96 = 2;
      goto LABEL_31;
    }
    if (EnumCaseMultiPayload == 1)
    {
      v7 = *(_OWORD *)a2;
      a1[16] = a2[16];
      *(_OWORD *)a1 = v7;
      v105 = (int *)sub_1000055B0((uint64_t *)&unk_1002B1DE0);
      v8 = v105[12];
      v9 = &a1[v8];
      v10 = &a2[v8];
      *(_QWORD *)v9 = *(_QWORD *)&a2[v8];
      *(_OWORD *)(v9 + 8) = *(_OWORD *)&a2[v8 + 8];
      LOBYTE(v8) = a2[v8 + 40];
      *(_OWORD *)(v9 + 24) = *(_OWORD *)(v10 + 24);
      v9[40] = v8;
      *((_QWORD *)v9 + 6) = *((_QWORD *)v10 + 6);
      swift_bridgeObjectRetain();
      swift_retain();
      v11 = (int *)sub_1000055B0(&qword_1002B1430);
      v12 = v11[16];
      v13 = &v9[v12];
      v14 = &v10[v12];
      *(_OWORD *)v13 = *(_OWORD *)&v10[v12];
      v15 = *(_OWORD *)&v10[v12 + 16];
      v13[32] = v10[v12 + 32];
      *((_OWORD *)v13 + 1) = v15;
      v16 = *(int *)(sub_1000055B0((uint64_t *)&unk_1002B1DF0) + 56);
      v17 = &v13[v16];
      v18 = &v14[v16];
      v19 = type metadata accessor for UniversalControlDisplayLayout(0);
      if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v18, 1, v19))
      {
        v20 = sub_1000055B0((uint64_t *)&unk_1002B3380);
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
        _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v17, 0, 1, v19);
      }
      v35 = v11[20];
      v36 = &v9[v35];
      v37 = &v10[v35];
      *(_OWORD *)v36 = *(_OWORD *)v37;
      v38 = *((_OWORD *)v37 + 1);
      v36[32] = v37[32];
      *((_OWORD *)v36 + 1) = v38;
      *((_QWORD *)v36 + 5) = *((_QWORD *)v37 + 5);
      v39 = v11[24];
      v40 = &v9[v39];
      v41 = &v10[v39];
      *(_OWORD *)v40 = *(_OWORD *)&v10[v39];
      v42 = *(_OWORD *)&v10[v39 + 16];
      v40[32] = v10[v39 + 32];
      *((_OWORD *)v40 + 1) = v42;
      v43 = &v10[v39 + 40];
      v44 = *(_QWORD *)v43;
      swift_bridgeObjectRetain();
      if (v44)
      {
        *((_QWORD *)v40 + 5) = v44;
        *((_QWORD *)v40 + 6) = *((_QWORD *)v41 + 6);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)(v40 + 40) = *(_OWORD *)v43;
      }
      v55 = v11[28];
      v56 = &v9[v55];
      v57 = &v10[v55];
      *(_OWORD *)v56 = *(_OWORD *)v57;
      v58 = *((_OWORD *)v57 + 1);
      v56[32] = v57[32];
      *((_OWORD *)v56 + 1) = v58;
      v59 = *((_QWORD *)v57 + 5);
      if (v59 == 1)
      {
        v60 = v56 + 40;
        v61 = *(_OWORD *)(v57 + 40);
        *((_QWORD *)v60 + 2) = *((_QWORD *)v57 + 7);
        *(_OWORD *)v60 = v61;
      }
      else
      {
        *((_QWORD *)v56 + 5) = v59;
        *((_OWORD *)v56 + 3) = *((_OWORD *)v57 + 3);
        swift_bridgeObjectRetain();
      }
      v62 = v11[32];
      v63 = &v9[v62];
      v64 = &v10[v62];
      *(_OWORD *)v63 = *(_OWORD *)&v10[v62];
      v65 = *(_OWORD *)&v10[v62 + 16];
      v63[32] = v10[v62 + 32];
      *((_OWORD *)v63 + 1) = v65;
      v66 = *(int *)(sub_1000055B0((uint64_t *)&unk_1002B1E00) + 56);
      v67 = &v63[v66];
      v68 = &v64[v66];
      v69 = type metadata accessor for UniversalControlConfiguration(0);
      if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v68, 1, v69))
      {
        v70 = sub_1000055B0(&qword_1002B1438);
        memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v69 - 8) + 16))(v67, v68, v69);
        _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v67, 0, 1, v69);
      }
      v87 = v11[36];
      v88 = &v9[v87];
      v89 = &v10[v87];
      v90 = *(_OWORD *)v89;
      v91 = *((_OWORD *)v89 + 1);
      *(_DWORD *)(v88 + 31) = *(_DWORD *)(v89 + 31);
      *(_OWORD *)v88 = v90;
      *((_OWORD *)v88 + 1) = v91;
      *(_QWORD *)&a1[v105[16]] = *(_QWORD *)&a2[v105[16]];
      *(_QWORD *)&a1[v105[20]] = *(_QWORD *)&a2[v105[20]];
      v92 = v105[24];
      v93 = *(_QWORD *)&a2[v92];
      *(_QWORD *)&a1[v92] = v93;
      swift_unknownObjectRetain(v93);
      v94 = a1;
      v95 = a3;
      v96 = 1;
LABEL_31:
      swift_storeEnumTagMultiPayload(v94, v95, v96);
      return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *sub_10010CE78(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  int *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  __int128 v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  char *v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  char *v50;
  char *v51;
  __int128 v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  __int128 v61;
  uint64_t v62;
  char *v63;
  char *v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  char *v68;
  char *v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  char *v73;
  char *v74;
  __int128 v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  __int128 v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  __int128 v91;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[16] = a2[16];
    v21 = (int *)sub_1000055B0((uint64_t *)&unk_1002B1DE0);
    v22 = v21[12];
    v23 = &a1[v22];
    v24 = &a2[v22];
    *(_QWORD *)v23 = *(_QWORD *)&a2[v22];
    *(_OWORD *)(v23 + 40) = *(_OWORD *)&a2[v22 + 40];
    *(_OWORD *)(v23 + 24) = *(_OWORD *)&a2[v22 + 24];
    *(_OWORD *)(v23 + 8) = *(_OWORD *)&a2[v22 + 8];
    v25 = (int *)sub_1000055B0(&qword_1002B1430);
    v26 = v25[16];
    v27 = &v23[v26];
    v28 = &v24[v26];
    v29 = *(_OWORD *)&v24[v26 + 16];
    *(_OWORD *)v27 = *(_OWORD *)&v24[v26];
    *((_OWORD *)v27 + 1) = v29;
    v27[32] = v24[v26 + 32];
    v30 = *(int *)(sub_1000055B0((uint64_t *)&unk_1002B1DF0) + 56);
    v31 = &v27[v30];
    v32 = &v28[v30];
    v33 = type metadata accessor for UniversalControlDisplayLayout(0);
    if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v32, 1, v33))
    {
      v34 = sub_1000055B0((uint64_t *)&unk_1002B3380);
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v31, v32, v33);
      _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v31, 0, 1, v33);
    }
    v58 = v25[20];
    v59 = &v23[v58];
    v60 = &v24[v58];
    v61 = *((_OWORD *)v60 + 1);
    *(_OWORD *)v59 = *(_OWORD *)v60;
    *((_OWORD *)v59 + 1) = v61;
    *((_OWORD *)v59 + 2) = *((_OWORD *)v60 + 2);
    v62 = v25[24];
    v63 = &v23[v62];
    v64 = &v24[v62];
    *((_QWORD *)v63 + 6) = *((_QWORD *)v64 + 6);
    v65 = *((_OWORD *)v64 + 2);
    v66 = *(_OWORD *)v64;
    *((_OWORD *)v63 + 1) = *((_OWORD *)v64 + 1);
    *((_OWORD *)v63 + 2) = v65;
    *(_OWORD *)v63 = v66;
    v67 = v25[28];
    v68 = &v23[v67];
    v69 = &v24[v67];
    v70 = *((_OWORD *)v69 + 1);
    *(_OWORD *)v68 = *(_OWORD *)v69;
    *((_OWORD *)v68 + 1) = v70;
    v71 = *((_OWORD *)v69 + 3);
    *((_OWORD *)v68 + 2) = *((_OWORD *)v69 + 2);
    *((_OWORD *)v68 + 3) = v71;
    v72 = v25[32];
    v73 = &v23[v72];
    v74 = &v24[v72];
    v75 = *(_OWORD *)&v24[v72 + 16];
    *(_OWORD *)v73 = *(_OWORD *)&v24[v72];
    *((_OWORD *)v73 + 1) = v75;
    v73[32] = v24[v72 + 32];
    v76 = *(int *)(sub_1000055B0((uint64_t *)&unk_1002B1E00) + 56);
    v77 = &v73[v76];
    v78 = &v74[v76];
    v79 = type metadata accessor for UniversalControlConfiguration(0);
    if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v78, 1, v79))
    {
      v80 = sub_1000055B0(&qword_1002B1438);
      memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v79 - 8) + 32))(v77, v78, v79);
      _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v77, 0, 1, v79);
    }
    v88 = v25[36];
    v89 = &v23[v88];
    v90 = &v24[v88];
    v91 = *((_OWORD *)v90 + 1);
    *(_OWORD *)v89 = *(_OWORD *)v90;
    *((_OWORD *)v89 + 1) = v91;
    *(_DWORD *)(v89 + 31) = *(_DWORD *)(v90 + 31);
    *(_QWORD *)&a1[v21[16]] = *(_QWORD *)&a2[v21[16]];
    *(_QWORD *)&a1[v21[20]] = *(_QWORD *)&a2[v21[20]];
    *(_QWORD *)&a1[v21[24]] = *(_QWORD *)&a2[v21[24]];
    v85 = a1;
    v86 = a3;
    v87 = 2;
    goto LABEL_18;
  }
  if (EnumCaseMultiPayload == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[16] = a2[16];
    v7 = (int *)sub_1000055B0((uint64_t *)&unk_1002B1DE0);
    v8 = v7[12];
    v9 = &a1[v8];
    v10 = &a2[v8];
    *(_QWORD *)v9 = *(_QWORD *)&a2[v8];
    *(_OWORD *)(v9 + 40) = *(_OWORD *)&a2[v8 + 40];
    *(_OWORD *)(v9 + 24) = *(_OWORD *)&a2[v8 + 24];
    *(_OWORD *)(v9 + 8) = *(_OWORD *)&a2[v8 + 8];
    v11 = (int *)sub_1000055B0(&qword_1002B1430);
    v12 = v11[16];
    v13 = &v9[v12];
    v14 = &v10[v12];
    v15 = *(_OWORD *)&v10[v12 + 16];
    *(_OWORD *)v13 = *(_OWORD *)&v10[v12];
    *((_OWORD *)v13 + 1) = v15;
    v13[32] = v10[v12 + 32];
    v16 = *(int *)(sub_1000055B0((uint64_t *)&unk_1002B1DF0) + 56);
    v17 = &v13[v16];
    v18 = &v14[v16];
    v19 = type metadata accessor for UniversalControlDisplayLayout(0);
    if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v18, 1, v19))
    {
      v20 = sub_1000055B0((uint64_t *)&unk_1002B3380);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
      _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v17, 0, 1, v19);
    }
    v35 = v11[20];
    v36 = &v9[v35];
    v37 = &v10[v35];
    v38 = *((_OWORD *)v37 + 1);
    *(_OWORD *)v36 = *(_OWORD *)v37;
    *((_OWORD *)v36 + 1) = v38;
    *((_OWORD *)v36 + 2) = *((_OWORD *)v37 + 2);
    v39 = v11[24];
    v40 = &v9[v39];
    v41 = &v10[v39];
    *((_QWORD *)v40 + 6) = *((_QWORD *)v41 + 6);
    v42 = *((_OWORD *)v41 + 2);
    v43 = *(_OWORD *)v41;
    *((_OWORD *)v40 + 1) = *((_OWORD *)v41 + 1);
    *((_OWORD *)v40 + 2) = v42;
    *(_OWORD *)v40 = v43;
    v44 = v11[28];
    v45 = &v9[v44];
    v46 = &v10[v44];
    v47 = *((_OWORD *)v46 + 1);
    *(_OWORD *)v45 = *(_OWORD *)v46;
    *((_OWORD *)v45 + 1) = v47;
    v48 = *((_OWORD *)v46 + 3);
    *((_OWORD *)v45 + 2) = *((_OWORD *)v46 + 2);
    *((_OWORD *)v45 + 3) = v48;
    v49 = v11[32];
    v50 = &v9[v49];
    v51 = &v10[v49];
    v52 = *(_OWORD *)&v10[v49 + 16];
    *(_OWORD *)v50 = *(_OWORD *)&v10[v49];
    *((_OWORD *)v50 + 1) = v52;
    v50[32] = v10[v49 + 32];
    v53 = *(int *)(sub_1000055B0((uint64_t *)&unk_1002B1E00) + 56);
    v54 = &v50[v53];
    v55 = &v51[v53];
    v56 = type metadata accessor for UniversalControlConfiguration(0);
    if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v55, 1, v56))
    {
      v57 = sub_1000055B0(&qword_1002B1438);
      memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 32))(v54, v55, v56);
      _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v54, 0, 1, v56);
    }
    v81 = v11[36];
    v82 = &v9[v81];
    v83 = &v10[v81];
    v84 = *((_OWORD *)v83 + 1);
    *(_OWORD *)v82 = *(_OWORD *)v83;
    *((_OWORD *)v82 + 1) = v84;
    *(_DWORD *)(v82 + 31) = *(_DWORD *)(v83 + 31);
    *(_QWORD *)&a1[v7[16]] = *(_QWORD *)&a2[v7[16]];
    *(_QWORD *)&a1[v7[20]] = *(_QWORD *)&a2[v7[20]];
    *(_QWORD *)&a1[v7[24]] = *(_QWORD *)&a2[v7[24]];
    v85 = a1;
    v86 = a3;
    v87 = 1;
LABEL_18:
    swift_storeEnumTagMultiPayload(v85, v86, v87);
    return a1;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

char *sub_10010D394(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  int *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  __int128 v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  char *v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  char *v50;
  char *v51;
  __int128 v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  __int128 v61;
  uint64_t v62;
  char *v63;
  char *v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  char *v68;
  char *v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  char *v73;
  char *v74;
  __int128 v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  __int128 v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  __int128 v91;

  if (a1 != a2)
  {
    sub_1000255F0((uint64_t)a1, type metadata accessor for SyncContext.State);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[16] = a2[16];
      v21 = (int *)sub_1000055B0((uint64_t *)&unk_1002B1DE0);
      v22 = v21[12];
      v23 = &a1[v22];
      v24 = &a2[v22];
      *(_QWORD *)v23 = *(_QWORD *)&a2[v22];
      *(_OWORD *)(v23 + 40) = *(_OWORD *)&a2[v22 + 40];
      *(_OWORD *)(v23 + 24) = *(_OWORD *)&a2[v22 + 24];
      *(_OWORD *)(v23 + 8) = *(_OWORD *)&a2[v22 + 8];
      v25 = (int *)sub_1000055B0(&qword_1002B1430);
      v26 = v25[16];
      v27 = &v23[v26];
      v28 = &v24[v26];
      v29 = *(_OWORD *)&v24[v26 + 16];
      *(_OWORD *)v27 = *(_OWORD *)&v24[v26];
      *((_OWORD *)v27 + 1) = v29;
      v27[32] = v24[v26 + 32];
      v30 = *(int *)(sub_1000055B0((uint64_t *)&unk_1002B1DF0) + 56);
      v31 = &v27[v30];
      v32 = &v28[v30];
      v33 = type metadata accessor for UniversalControlDisplayLayout(0);
      if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v32, 1, v33))
      {
        v34 = sub_1000055B0((uint64_t *)&unk_1002B3380);
        memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v31, v32, v33);
        _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v31, 0, 1, v33);
      }
      v58 = v25[20];
      v59 = &v23[v58];
      v60 = &v24[v58];
      v61 = *((_OWORD *)v60 + 1);
      *(_OWORD *)v59 = *(_OWORD *)v60;
      *((_OWORD *)v59 + 1) = v61;
      *((_OWORD *)v59 + 2) = *((_OWORD *)v60 + 2);
      v62 = v25[24];
      v63 = &v23[v62];
      v64 = &v24[v62];
      *((_QWORD *)v63 + 6) = *((_QWORD *)v64 + 6);
      v65 = *((_OWORD *)v64 + 2);
      v66 = *(_OWORD *)v64;
      *((_OWORD *)v63 + 1) = *((_OWORD *)v64 + 1);
      *((_OWORD *)v63 + 2) = v65;
      *(_OWORD *)v63 = v66;
      v67 = v25[28];
      v68 = &v23[v67];
      v69 = &v24[v67];
      v70 = *((_OWORD *)v69 + 1);
      *(_OWORD *)v68 = *(_OWORD *)v69;
      *((_OWORD *)v68 + 1) = v70;
      v71 = *((_OWORD *)v69 + 3);
      *((_OWORD *)v68 + 2) = *((_OWORD *)v69 + 2);
      *((_OWORD *)v68 + 3) = v71;
      v72 = v25[32];
      v73 = &v23[v72];
      v74 = &v24[v72];
      v75 = *(_OWORD *)&v24[v72 + 16];
      *(_OWORD *)v73 = *(_OWORD *)&v24[v72];
      *((_OWORD *)v73 + 1) = v75;
      v73[32] = v24[v72 + 32];
      v76 = *(int *)(sub_1000055B0((uint64_t *)&unk_1002B1E00) + 56);
      v77 = &v73[v76];
      v78 = &v74[v76];
      v79 = type metadata accessor for UniversalControlConfiguration(0);
      if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v78, 1, v79))
      {
        v80 = sub_1000055B0(&qword_1002B1438);
        memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v79 - 8) + 32))(v77, v78, v79);
        _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v77, 0, 1, v79);
      }
      v88 = v25[36];
      v89 = &v23[v88];
      v90 = &v24[v88];
      v91 = *((_OWORD *)v90 + 1);
      *(_OWORD *)v89 = *(_OWORD *)v90;
      *((_OWORD *)v89 + 1) = v91;
      *(_DWORD *)(v89 + 31) = *(_DWORD *)(v90 + 31);
      *(_QWORD *)&a1[v21[16]] = *(_QWORD *)&a2[v21[16]];
      *(_QWORD *)&a1[v21[20]] = *(_QWORD *)&a2[v21[20]];
      *(_QWORD *)&a1[v21[24]] = *(_QWORD *)&a2[v21[24]];
      v85 = a1;
      v86 = a3;
      v87 = 2;
      goto LABEL_19;
    }
    if (EnumCaseMultiPayload == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[16] = a2[16];
      v7 = (int *)sub_1000055B0((uint64_t *)&unk_1002B1DE0);
      v8 = v7[12];
      v9 = &a1[v8];
      v10 = &a2[v8];
      *(_QWORD *)v9 = *(_QWORD *)&a2[v8];
      *(_OWORD *)(v9 + 40) = *(_OWORD *)&a2[v8 + 40];
      *(_OWORD *)(v9 + 24) = *(_OWORD *)&a2[v8 + 24];
      *(_OWORD *)(v9 + 8) = *(_OWORD *)&a2[v8 + 8];
      v11 = (int *)sub_1000055B0(&qword_1002B1430);
      v12 = v11[16];
      v13 = &v9[v12];
      v14 = &v10[v12];
      v15 = *(_OWORD *)&v10[v12 + 16];
      *(_OWORD *)v13 = *(_OWORD *)&v10[v12];
      *((_OWORD *)v13 + 1) = v15;
      v13[32] = v10[v12 + 32];
      v16 = *(int *)(sub_1000055B0((uint64_t *)&unk_1002B1DF0) + 56);
      v17 = &v13[v16];
      v18 = &v14[v16];
      v19 = type metadata accessor for UniversalControlDisplayLayout(0);
      if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v18, 1, v19))
      {
        v20 = sub_1000055B0((uint64_t *)&unk_1002B3380);
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
        _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v17, 0, 1, v19);
      }
      v35 = v11[20];
      v36 = &v9[v35];
      v37 = &v10[v35];
      v38 = *((_OWORD *)v37 + 1);
      *(_OWORD *)v36 = *(_OWORD *)v37;
      *((_OWORD *)v36 + 1) = v38;
      *((_OWORD *)v36 + 2) = *((_OWORD *)v37 + 2);
      v39 = v11[24];
      v40 = &v9[v39];
      v41 = &v10[v39];
      *((_QWORD *)v40 + 6) = *((_QWORD *)v41 + 6);
      v42 = *((_OWORD *)v41 + 2);
      v43 = *(_OWORD *)v41;
      *((_OWORD *)v40 + 1) = *((_OWORD *)v41 + 1);
      *((_OWORD *)v40 + 2) = v42;
      *(_OWORD *)v40 = v43;
      v44 = v11[28];
      v45 = &v9[v44];
      v46 = &v10[v44];
      v47 = *((_OWORD *)v46 + 1);
      *(_OWORD *)v45 = *(_OWORD *)v46;
      *((_OWORD *)v45 + 1) = v47;
      v48 = *((_OWORD *)v46 + 3);
      *((_OWORD *)v45 + 2) = *((_OWORD *)v46 + 2);
      *((_OWORD *)v45 + 3) = v48;
      v49 = v11[32];
      v50 = &v9[v49];
      v51 = &v10[v49];
      v52 = *(_OWORD *)&v10[v49 + 16];
      *(_OWORD *)v50 = *(_OWORD *)&v10[v49];
      *((_OWORD *)v50 + 1) = v52;
      v50[32] = v10[v49 + 32];
      v53 = *(int *)(sub_1000055B0((uint64_t *)&unk_1002B1E00) + 56);
      v54 = &v50[v53];
      v55 = &v51[v53];
      v56 = type metadata accessor for UniversalControlConfiguration(0);
      if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v55, 1, v56))
      {
        v57 = sub_1000055B0(&qword_1002B1438);
        memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 32))(v54, v55, v56);
        _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v54, 0, 1, v56);
      }
      v81 = v11[36];
      v82 = &v9[v81];
      v83 = &v10[v81];
      v84 = *((_OWORD *)v83 + 1);
      *(_OWORD *)v82 = *(_OWORD *)v83;
      *((_OWORD *)v82 + 1) = v84;
      *(_DWORD *)(v82 + 31) = *(_DWORD *)(v83 + 31);
      *(_QWORD *)&a1[v7[16]] = *(_QWORD *)&a2[v7[16]];
      *(_QWORD *)&a1[v7[20]] = *(_QWORD *)&a2[v7[20]];
      *(_QWORD *)&a1[v7[24]] = *(_QWORD *)&a2[v7[24]];
      v85 = a1;
      v86 = a3;
      v87 = 1;
LABEL_19:
      swift_storeEnumTagMultiPayload(v85, v86, v87);
      return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void sub_10010D8C8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _BYTE v8[32];
  _BYTE v9[32];
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  _BYTE v18[32];
  void *v19;
  _BYTE *v20;
  char *v21;
  char *v22;
  void *v23;
  _BYTE v24[32];
  _QWORD v25[4];

  v25[0] = &unk_100226510;
  v19 = &unk_100226528;
  v10 = &unk_100226540;
  v11 = &unk_100226558;
  sub_1000FC980(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    v12 = v4;
    v13 = &unk_100226558;
    v14 = &unk_100226570;
    v15 = &unk_100226588;
    sub_1000FCA34(319);
    if (v6 <= 0x3F)
    {
      v16 = *(_QWORD *)(v5 - 8) + 64;
      v7 = v16;
      v17 = &unk_1002265A0;
      swift_getTupleTypeLayout(v18, 0, 8, &v10);
      v20 = v18;
      v21 = (char *)&value witness table for Builtin.Int64 + 64;
      v22 = (char *)&value witness table for Builtin.Int64 + 64;
      v23 = &unk_100226540;
      swift_getTupleTypeLayout(v24, 0, 5, &v19);
      v25[1] = v24;
      v19 = &unk_100226528;
      v10 = &unk_100226540;
      v11 = &unk_100226558;
      v12 = v4;
      v13 = &unk_100226558;
      v14 = &unk_100226570;
      v15 = &unk_100226588;
      v16 = v7;
      v17 = &unk_1002265A0;
      swift_getTupleTypeLayout(v8, 0, 8, &v10);
      v20 = v8;
      v21 = (char *)&value witness table for Builtin.Int64 + 64;
      v22 = (char *)&value witness table for Builtin.Int64 + 64;
      v23 = &unk_100226540;
      swift_getTupleTypeLayout(v9, 0, 5, &v19);
      v25[2] = v9;
      swift_initEnumMetadataMultiPayload(a1, 256, 3, v25);
    }
  }
}

uint64_t getEnumTagSinglePayload for SyncContext.SyncReason(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SyncContext.SyncReason(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_BYTE *)(result + 16) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 17) = v3;
  return result;
}

uint64_t sub_10010DAA0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10010DABC(uint64_t result, int a2)
{
  char v2;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    v2 = 1;
  }
  else
  {
    v2 = 0;
  }
  *(_BYTE *)(result + 16) = v2;
  return result;
}

ValueMetadata *type metadata accessor for SyncContext.SyncReason()
{
  return &type metadata for SyncContext.SyncReason;
}

uint64_t type metadata accessor for SyncContext.Event(uint64_t a1)
{
  return sub_100021590(a1, qword_1002B1F70, (uint64_t)&nominal type descriptor for SyncContext.Event);
}

uint64_t sub_10010DB00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(sub_100026774() - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v5 = type metadata accessor for OSSignposter(0);
  if (!_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v0 + v3, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v0 + v3, v5);
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, ((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_10010DBC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(sub_100026774() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10010A698(a1, v1 + v4, *(_QWORD *)(v1 + v5), *(_QWORD *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(_BYTE *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 16));
}

uint64_t sub_10010DC34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000055B0(&qword_1002B1EF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10010DC7C()
{
  sub_10010AE70();
}

uint64_t sub_10010DC84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SyncContext.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10010DCC8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_errorRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10010DCF4()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 16))(*(_QWORD *)(v0 + 32));
}

uint64_t sub_10010DD1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10010DD2C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_10010DD34(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v13;
  _QWORD v14[2];

  v2 = HIBYTE(a2) & 0xF;
  v3 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    v7 = sub_10010DE10(0xFuLL, a1, a2);
    if ((a2 & 0x1000000000000000) != 0)
    {
      v11 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)(v7 & 0xFFFFFFFFFFFF0000, a1, a2);
    }
    else
    {
      v8 = v7 >> 16;
      if ((a2 & 0x2000000000000000) != 0)
      {
        v14[0] = a1;
        v14[1] = a2 & 0xFFFFFFFFFFFFFFLL;
        v9 = v14;
        v10 = v2;
      }
      else
      {
        if ((a1 & 0x1000000000000000) != 0)
        {
          v9 = (_QWORD *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          v9 = (_QWORD *)_StringObject.sharedUTF8.getter(a1, a2);
          v3 = v13;
        }
        v10 = v3;
      }
      v11 = _decodeScalar(_:startingAt:)(v9, v10, v8);
    }
  }
  else
  {
    v11 = 0;
  }
  LOBYTE(v14[0]) = v4 == 0;
  return v11 | ((unint64_t)(v4 == 0) << 32);
}

unint64_t sub_10010DE10(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 1) == 0 || (result & 0xC) == 4 << v5)
    goto LABEL_9;
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 <= result >> 16)
  {
    __break(1u);
LABEL_9:
    result = sub_10010DEAC(result, a2, a3);
    if ((result & 1) == 0)
      return result & 0xC | sub_10010DF18(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
  }
  return result;
}

unint64_t sub_10010DEAC(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 0xC) == 4 << v5)
    result = sub_100011158(result, a2, a3);
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 <= result >> 16)
    __break(1u);
  return result;
}

unint64_t sub_10010DF18(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  _QWORD v13[4];

  if ((result & 0xC000) != 0 || result < 0x10000)
  {
    result &= 0xFFFFFFFFFFFF0000;
  }
  else
  {
    v5 = result >> 16;
    if ((a3 & 0x1000000000000000) == 0)
    {
      v13[2] = v3;
      v13[3] = v4;
      if ((a3 & 0x2000000000000000) != 0)
      {
        v13[0] = a2;
        v13[1] = a3 & 0xFFFFFFFFFFFFFFLL;
        if (v5 != (HIBYTE(a3) & 0xF) && (*((_BYTE *)v13 + v5) & 0xC0) == 0x80)
        {
          do
          {
            v8 = v5 - 1;
            v11 = *((_BYTE *)&v12 + v5-- + 7) & 0xC0;
          }
          while (v11 == 128);
          return v8 << 16;
        }
      }
      else
      {
        if ((a2 & 0x1000000000000000) != 0)
        {
          v6 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
          v7 = a2 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          v12 = result >> 16;
          v6 = _StringObject.sharedUTF8.getter(a2, a3);
          v5 = v12;
        }
        if (v5 != v7 && (*(_BYTE *)(v6 + v5) & 0xC0) == 0x80)
        {
          do
          {
            v8 = v5 - 1;
            v9 = *(_BYTE *)(v6 - 1 + v5--) & 0xC0;
          }
          while (v9 == 128);
          return v8 << 16;
        }
      }
      v8 = v5;
      return v8 << 16;
    }
    v10 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0)
      v10 = a2 & 0xFFFFFFFFFFFFLL;
    if (v5 != v10)
      return _StringGuts.foreignScalarAlign(_:)();
  }
  return result;
}

uint64_t sub_10010E020()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_10010E044(uint64_t a1)
{
  uint64_t v1;

  sub_10010881C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10010E04C()
{
  uint64_t v0;

  return sub_100109F9C(v0);
}

char *sub_10010E054(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  void (*v33)(char *, char *, uint64_t, __n128);
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  int *v39;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v13 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v13 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[16] = a2[16];
      v39 = (int *)sub_1000055B0(&qword_1002B1EE8);
      v14 = v39[12];
      v15 = &a1[v14];
      v38 = &a1[v14];
      v16 = &a2[v14];
      v36 = &a2[v14];
      memcpy(&a1[v14], &a2[v14], 0x71uLL);
      v37 = type metadata accessor for SyncView(0);
      v17 = *(int *)(v37 + 20);
      v18 = &v15[v17];
      v19 = &v16[v17];
      v20 = type metadata accessor for UniversalControlConfiguration(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
      v21 = (int *)type metadata accessor for SyncViewLocalData(0);
      v22 = v21[6];
      v23 = &v18[v22];
      v24 = &v19[v22];
      v25 = *((_QWORD *)v24 + 1);
      *(_QWORD *)v23 = *(_QWORD *)v24;
      *((_QWORD *)v23 + 1) = v25;
      *(_QWORD *)&v18[v21[7]] = *(_QWORD *)&v19[v21[7]];
      v26 = v21[8];
      v34 = &v19[v26];
      v35 = &v18[v26];
      v27 = type metadata accessor for UniversalControlDisplayLayout(0);
      v33 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v27 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v28 = swift_retain();
      v33(v35, v34, v27, v28);
      v29 = v21[9];
      v30 = &v18[v29];
      v31 = &v19[v29];
      *(_QWORD *)v30 = *(_QWORD *)v31;
      *(_OWORD *)(v30 + 8) = *(_OWORD *)(v31 + 8);
      *(_QWORD *)&v18[v21[10]] = *(_QWORD *)&v19[v21[10]];
      *(_QWORD *)&v38[*(int *)(v37 + 24)] = *(_QWORD *)&v36[*(int *)(v37 + 24)];
      memcpy(&a1[v39[16]], &a2[v39[16]], 0x72uLL);
      memcpy(&a1[v39[20]], &a2[v39[20]], 0x72uLL);
      *(_QWORD *)&a1[v39[24]] = *(_QWORD *)&a2[v39[24]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      v10 = a1;
      v11 = a3;
      v12 = 1;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        return a1;
      }
      v9 = *(_QWORD *)a2;
      swift_errorRetain(v9);
      *(_QWORD *)a1 = v9;
      v10 = a1;
      v11 = a3;
      v12 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v11, v12);
  }
  return a1;
}

uint64_t sub_10010E2B4(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  if ((_DWORD)result == 1)
  {
    v4 = (char *)a1 + *(int *)(sub_1000055B0(&qword_1002B1EE8) + 48);
    v5 = &v4[*(int *)(type metadata accessor for SyncView(0) + 20)];
    v6 = type metadata accessor for UniversalControlConfiguration(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
    v7 = type metadata accessor for SyncViewLocalData(0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    v8 = &v5[*(int *)(v7 + 32)];
    v9 = type metadata accessor for UniversalControlDisplayLayout(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else if (!(_DWORD)result)
  {
    return swift_errorRelease(*a1);
  }
  return result;
}

char *sub_10010E3F4(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t, __n128);
  __n128 v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  int *v37;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[16] = a2[16];
    v37 = (int *)sub_1000055B0(&qword_1002B1EE8);
    v11 = v37[12];
    v12 = &a1[v11];
    v35 = &a1[v11];
    v13 = &a2[v11];
    v33 = &a2[v11];
    memcpy(&a1[v11], &a2[v11], 0x71uLL);
    v34 = type metadata accessor for SyncView(0);
    v14 = *(int *)(v34 + 20);
    v15 = &v12[v14];
    v16 = &v13[v14];
    v17 = type metadata accessor for UniversalControlConfiguration(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
    v18 = (int *)type metadata accessor for SyncViewLocalData(0);
    v19 = v18[6];
    v20 = &v15[v19];
    v21 = &v16[v19];
    v22 = *((_QWORD *)v21 + 1);
    *(_QWORD *)v20 = *(_QWORD *)v21;
    *((_QWORD *)v20 + 1) = v22;
    *(_QWORD *)&v15[v18[7]] = *(_QWORD *)&v16[v18[7]];
    v23 = v18[8];
    v31 = &v16[v23];
    v32 = &v15[v23];
    v24 = type metadata accessor for UniversalControlDisplayLayout(0);
    v36 = a3;
    v25 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v24 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v26 = swift_retain();
    v25(v32, v31, v24, v26);
    v27 = v18[9];
    v28 = &v15[v27];
    v29 = &v16[v27];
    *(_QWORD *)v28 = *(_QWORD *)v29;
    *(_OWORD *)(v28 + 8) = *(_OWORD *)(v29 + 8);
    *(_QWORD *)&v15[v18[10]] = *(_QWORD *)&v16[v18[10]];
    *(_QWORD *)&v35[*(int *)(v34 + 24)] = *(_QWORD *)&v33[*(int *)(v34 + 24)];
    memcpy(&a1[v37[16]], &a2[v37[16]], 0x72uLL);
    memcpy(&a1[v37[20]], &a2[v37[20]], 0x72uLL);
    *(_QWORD *)&a1[v37[24]] = *(_QWORD *)&a2[v37[24]];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    v8 = a1;
    v9 = v36;
    v10 = 1;
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      return a1;
    }
    v7 = *(_QWORD *)a2;
    swift_errorRetain(v7);
    *(_QWORD *)a1 = v7;
    v8 = a1;
    v9 = a3;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  return a1;
}

char *sub_10010E62C(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  char *v27;
  char *v28;
  void (*v30)(char *, char *, uint64_t, __n128);
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  int *v36;

  if (a1 != a2)
  {
    sub_1000255F0((uint64_t)a1, type metadata accessor for SyncContext.Event);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      v11 = *(_OWORD *)a2;
      a1[16] = a2[16];
      *(_OWORD *)a1 = v11;
      v36 = (int *)sub_1000055B0(&qword_1002B1EE8);
      v12 = v36[12];
      v13 = &a1[v12];
      v35 = &a1[v12];
      v14 = &a2[v12];
      v33 = &a2[v12];
      memcpy(&a1[v12], &a2[v12], 0x71uLL);
      v34 = type metadata accessor for SyncView(0);
      v15 = *(int *)(v34 + 20);
      v16 = &v13[v15];
      v17 = &v14[v15];
      v18 = type metadata accessor for UniversalControlConfiguration(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
      v19 = (int *)type metadata accessor for SyncViewLocalData(0);
      v20 = v19[6];
      v21 = &v16[v20];
      v22 = &v17[v20];
      *(_QWORD *)v21 = *(_QWORD *)v22;
      *((_QWORD *)v21 + 1) = *((_QWORD *)v22 + 1);
      *(_QWORD *)&v16[v19[7]] = *(_QWORD *)&v17[v19[7]];
      v23 = v19[8];
      v31 = &v17[v23];
      v32 = &v16[v23];
      v24 = type metadata accessor for UniversalControlDisplayLayout(0);
      v30 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v24 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v25 = swift_retain();
      v30(v32, v31, v24, v25);
      v26 = v19[9];
      v27 = &v16[v26];
      v28 = &v17[v26];
      *(_QWORD *)v27 = *(_QWORD *)v28;
      *(_OWORD *)(v27 + 8) = *(_OWORD *)(v28 + 8);
      *(_QWORD *)&v16[v19[10]] = *(_QWORD *)&v17[v19[10]];
      *(_QWORD *)&v35[*(int *)(v34 + 24)] = *(_QWORD *)&v33[*(int *)(v34 + 24)];
      memcpy(&a1[v36[16]], &a2[v36[16]], 0x72uLL);
      memcpy(&a1[v36[20]], &a2[v36[20]], 0x72uLL);
      *(_QWORD *)&a1[v36[24]] = *(_QWORD *)&a2[v36[24]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      v8 = a1;
      v9 = a3;
      v10 = 1;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        return a1;
      }
      v7 = *(_QWORD *)a2;
      swift_errorRetain(v7);
      *(_QWORD *)a1 = v7;
      v8 = a1;
      v9 = a3;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  return a1;
}

char *sub_10010E884(char *a1, char *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v23;
  uint64_t v24;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[16] = a2[16];
    v6 = (int *)sub_1000055B0(&qword_1002B1EE8);
    v7 = v6[12];
    v8 = &a1[v7];
    v9 = &a2[v7];
    memcpy(&a1[v7], &a2[v7], 0x71uLL);
    v23 = type metadata accessor for SyncView(0);
    v10 = *(int *)(v23 + 20);
    v11 = &v8[v10];
    v12 = &v9[v10];
    v13 = type metadata accessor for UniversalControlConfiguration(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
    v14 = (int *)type metadata accessor for SyncViewLocalData(0);
    *(_OWORD *)&v11[v14[6]] = *(_OWORD *)&v12[v14[6]];
    *(_QWORD *)&v11[v14[7]] = *(_QWORD *)&v12[v14[7]];
    v15 = v14[8];
    v16 = &v11[v15];
    v24 = a3;
    v17 = &v12[v15];
    v18 = type metadata accessor for UniversalControlDisplayLayout(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
    v19 = v14[9];
    v20 = &v11[v19];
    v21 = &v12[v19];
    *(_OWORD *)v20 = *(_OWORD *)v21;
    *((_QWORD *)v20 + 2) = *((_QWORD *)v21 + 2);
    *(_QWORD *)&v11[v14[10]] = *(_QWORD *)&v12[v14[10]];
    *(_QWORD *)&v8[*(int *)(v23 + 24)] = *(_QWORD *)&v9[*(int *)(v23 + 24)];
    memcpy(&a1[v6[16]], &a2[v6[16]], 0x72uLL);
    memcpy(&a1[v6[20]], &a2[v6[20]], 0x72uLL);
    *(_QWORD *)&a1[v6[24]] = *(_QWORD *)&a2[v6[24]];
    swift_storeEnumTagMultiPayload(a1, v24, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *sub_10010EA44(char *a1, char *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v23;
  char *v24;

  if (a1 != a2)
  {
    sub_1000255F0((uint64_t)a1, type metadata accessor for SyncContext.Event);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[16] = a2[16];
      v6 = (int *)sub_1000055B0(&qword_1002B1EE8);
      v7 = v6[12];
      v8 = &a2[v7];
      v9 = &a1[v7];
      v24 = &a1[v7];
      memcpy(&a1[v7], &a2[v7], 0x71uLL);
      v23 = type metadata accessor for SyncView(0);
      v10 = *(int *)(v23 + 20);
      v11 = &v9[v10];
      v12 = &v8[v10];
      v13 = type metadata accessor for UniversalControlConfiguration(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
      v14 = (int *)type metadata accessor for SyncViewLocalData(0);
      *(_OWORD *)&v11[v14[6]] = *(_OWORD *)&v12[v14[6]];
      *(_QWORD *)&v11[v14[7]] = *(_QWORD *)&v12[v14[7]];
      v15 = v14[8];
      v16 = &v11[v15];
      v17 = &v12[v15];
      v18 = type metadata accessor for UniversalControlDisplayLayout(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
      v19 = v14[9];
      v20 = &v11[v19];
      v21 = &v12[v19];
      *(_OWORD *)v20 = *(_OWORD *)v21;
      *((_QWORD *)v20 + 2) = *((_QWORD *)v21 + 2);
      *(_QWORD *)&v11[v14[10]] = *(_QWORD *)&v12[v14[10]];
      *(_QWORD *)&v24[*(int *)(v23 + 24)] = *(_QWORD *)&v8[*(int *)(v23 + 24)];
      memcpy(&a1[v6[16]], &a2[v6[16]], 0x72uLL);
      memcpy(&a1[v6[20]], &a2[v6[20]], 0x72uLL);
      *(_QWORD *)&a1[v6[24]] = *(_QWORD *)&a2[v6[24]];
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10010EC1C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];
  _BYTE v5[32];
  _QWORD v6[2];

  v6[0] = &unk_100226540;
  v4[0] = &unk_100226528;
  result = type metadata accessor for SyncView(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = "r";
    v4[3] = "r";
    v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_getTupleTypeLayout(v5, 0, 5, v4);
    v6[1] = v5;
    swift_initEnumMetadataMultiPayload(a1, 256, 2, v6);
    return 0;
  }
  return result;
}

uint64_t sub_10010ECD4()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of CustomStringConvertible.description.getter(v0, v1);
}

_QWORD *sub_10010ECE4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v14 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 3)
    {
      v15 = type metadata accessor for UUID(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(a1, a2, v15);
      v16 = sub_1000055B0(&qword_1002AB648);
      *((_BYTE *)a1 + *(int *)(v16 + 48)) = *((_BYTE *)a2 + *(int *)(v16 + 48));
      v11 = a1;
      v12 = a3;
      v13 = 3;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
      v11 = a1;
      v12 = a3;
      v13 = 1;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        return a1;
      }
      v9 = *a2;
      v10 = a2[1];
      *a1 = v9;
      a1[1] = v10;
      swift_retain();
      swift_retain();
      v11 = a1;
      v12 = a3;
      v13 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v12, v13);
  }
  return a1;
}

uint64_t sub_10010EDFC(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((_DWORD)result)
  {
    case 3:
      v4 = type metadata accessor for UUID(0);
      return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
    case 1:
      return swift_bridgeObjectRelease(*a1);
    case 0:
      swift_release(*a1);
      return swift_release(a1[1]);
  }
  return result;
}

_QWORD *sub_10010EE7C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 3)
  {
    v12 = type metadata accessor for UUID(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
    v13 = sub_1000055B0(&qword_1002AB648);
    *((_BYTE *)a1 + *(int *)(v13 + 48)) = *((_BYTE *)a2 + *(int *)(v13 + 48));
    v9 = a1;
    v10 = a3;
    v11 = 3;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    swift_bridgeObjectRetain();
    v9 = a1;
    v10 = a3;
    v11 = 1;
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      return a1;
    }
    v7 = *a2;
    v8 = a2[1];
    *a1 = v7;
    a1[1] = v8;
    swift_retain();
    swift_retain();
    v9 = a1;
    v10 = a3;
    v11 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v10, v11);
  return a1;
}

_QWORD *sub_10010EF6C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    sub_10003FD88((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 3)
    {
      v10 = type metadata accessor for UUID(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      v11 = sub_1000055B0(&qword_1002AB648);
      *((_BYTE *)a1 + *(int *)(v11 + 48)) = *((_BYTE *)a2 + *(int *)(v11 + 48));
      v7 = a1;
      v8 = a3;
      v9 = 3;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
      v7 = a1;
      v8 = a3;
      v9 = 1;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        return a1;
      }
      *a1 = *a2;
      a1[1] = a2[1];
      swift_retain();
      swift_retain();
      v7 = a1;
      v8 = a3;
      v9 = 0;
    }
    swift_storeEnumTagMultiPayload(v7, v8, v9);
  }
  return a1;
}

uint64_t type metadata accessor for DragMessage(uint64_t a1)
{
  uint64_t result;

  result = qword_1002B2020;
  if (!qword_1002B2020)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DragMessage);
  return result;
}

_BYTE *sub_10010F0AC(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 3)
  {
    v6 = type metadata accessor for UUID(0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    v7 = sub_1000055B0(&qword_1002AB648);
    a1[*(int *)(v7 + 48)] = a2[*(int *)(v7 + 48)];
    swift_storeEnumTagMultiPayload(a1, a3, 3);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_BYTE *sub_10010F150(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (a1 != a2)
  {
    sub_10003FD88((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 3)
    {
      v6 = type metadata accessor for UUID(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      v7 = sub_1000055B0(&qword_1002AB648);
      a1[*(int *)(v7 + 48)] = a2[*(int *)(v7 + 48)];
      swift_storeEnumTagMultiPayload(a1, a3, 3);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10010F204(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _BYTE v4[32];
  _QWORD v5[4];

  v5[0] = &unk_1002266B8;
  v5[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v5[2] = &unk_1002266D0;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    swift_getTupleTypeLayout2(v4, *(_QWORD *)(result - 8) + 64, &unk_1002266E8);
    v5[3] = v4;
    swift_initEnumMetadataMultiPayload(a1, 256, 4, v5);
    return 0;
  }
  return result;
}

uint64_t sub_10010F2A0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v9;
  unint64_t v11;
  char v13;

  if (a1 == 0x746E6F4367617264 && a2 == 0xEC00000073746E65)
  {
    v5 = 0xEC00000073746E65;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746E6F4367617264, 0xEC00000073746E65, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000011)
  {
    v7 = 0x8000000100258050;
    if (a2 == 0x8000000100258050)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100258050, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0x65766F4D67617264 && a2 == 0xE900000000000064)
  {
    v9 = 0xE900000000000064;
    goto LABEL_21;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65766F4D67617264, 0xE900000000000064, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_21:
    swift_bridgeObjectRelease(v9);
    return 2;
  }
  if (a1 == 0x696E694667617264 && a2 == 0xEC00000064656873)
  {
    v11 = 0xEC00000064656873;
    goto LABEL_29;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696E694667617264, 0xEC00000064656873, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
LABEL_29:
    swift_bridgeObjectRelease(v11);
    return 3;
  }
  if (a1 == 0x72447463656A6572 && a2 == 0xEA00000000006761)
  {
    swift_bridgeObjectRelease(0xEA00000000006761);
    return 4;
  }
  else
  {
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)(0x72447463656A6572, 0xEA00000000006761, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v13 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_10010F4F0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10010F52C + 4 * byte_100226670[a1]))(0x746E6F4367617264, 0xEC00000073746E65);
}

unint64_t sub_10010F52C()
{
  return 0xD000000000000011;
}

uint64_t sub_10010F548()
{
  return 0x65766F4D67617264;
}

uint64_t sub_10010F564()
{
  return 0x696E694667617264;
}

uint64_t sub_10010F584()
{
  return 0x72447463656A6572;
}

uint64_t sub_10010F5A0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v8;

  if (a1 == 28271 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(28271, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x73736563637573 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease(0xE700000000000000);
    return 1;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x73736563637573, 0xE700000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_10010F674(char a1)
{
  if ((a1 & 1) != 0)
    return 0x73736563637573;
  else
    return 28271;
}

uint64_t sub_10010F6A0(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;

  if (a1 == 0x74657366666FLL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    v5 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74657366666FLL, 0xE600000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v5 = v4 ^ 1;
  }
  return v5 & 1;
}

uint64_t sub_10010F71C()
{
  return 0x74657366666FLL;
}

void sub_10010F730(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  sub_1000055B0(&qword_1002B20E8);
  sub_1000262EC();
  __chkstk_darwin(v2);
  sub_10000E5DC();
  sub_1000055B0(&qword_1002B20F0);
  sub_1000262EC();
  __chkstk_darwin(v3);
  sub_1000A367C(v4, v19);
  type metadata accessor for UUID(0);
  sub_1000262EC();
  __chkstk_darwin(v5);
  sub_10000E5DC();
  sub_1000055B0(&qword_1002B20F8);
  sub_1000262EC();
  __chkstk_darwin(v6);
  sub_10002641C();
  sub_1000055B0(&qword_1002B2100);
  sub_1000262EC();
  __chkstk_darwin(v7);
  sub_1000A3710();
  sub_1000055B0(&qword_1002B2108);
  sub_1000262EC();
  __chkstk_darwin(v8);
  sub_10000E5DC();
  v9 = type metadata accessor for DragMessage(0);
  sub_1000262EC();
  __chkstk_darwin(v10);
  sub_10002641C();
  v13 = v12 - v11;
  sub_1000055B0(&qword_1002B2110);
  sub_1000262EC();
  __chkstk_darwin(v14);
  sub_10002641C();
  v16 = *(_QWORD *)(a1 + 24);
  v15 = *(_QWORD *)(a1 + 32);
  v17 = sub_1001112F0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for DragMessage.CodingKeys, &type metadata for DragMessage.CodingKeys, v17, v16, v15);
  sub_10003FD44(v20, v13);
  v18 = (char *)sub_10010F944 + 4 * byte_100226675[swift_getEnumCaseMultiPayload(v13, v9)];
  __asm { BR              X10 }
}

uint64_t sub_10010F944()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = v1[1];
  *(_BYTE *)(v2 - 120) = 0;
  sub_100110AB8();
  v5 = *(_QWORD *)(v2 - 248);
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for DragMessage.DragContentsCodingKeys, v2 - 120, *(_QWORD *)(v2 - 144), &type metadata for DragMessage.DragContentsCodingKeys);
  *(_QWORD *)(v2 - 120) = v3;
  *(_BYTE *)(v2 - 65) = 0;
  v6 = type metadata accessor for DragSession(0);
  v7 = sub_100041014(&qword_1002B2128, type metadata accessor for DragSession, (uint64_t)&unk_100229CF4);
  v8 = *(_QWORD *)(v2 - 232);
  sub_1000A357C(v2 - 120, v2 - 65, v8, v6, v7);
  if (!v0)
  {
    *(_QWORD *)(v2 - 120) = v4;
    *(_BYTE *)(v2 - 65) = 1;
    v9 = type metadata accessor for PasteboardContents();
    v10 = sub_100041014(&qword_1002B2130, (uint64_t (*)(uint64_t))type metadata accessor for PasteboardContents, (uint64_t)&protocol conformance descriptor for PasteboardContents);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v2 - 120, v2 - 65, v8, v9, v10);
  }
  swift_release();
  sub_1000EFFE0(v5, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 264) + 8));
  sub_1001112B4();
  return swift_release();
}

uint64_t sub_10010FD44@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t);
  uint64_t v56[7];
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  char *v75;

  v65 = a2;
  v72 = sub_1000055B0(&qword_1002B2060);
  v58 = *(_QWORD *)(v72 - 8);
  sub_1000262EC();
  __chkstk_darwin(v3);
  sub_1000A367C(v4, v56[0]);
  v5 = sub_1000055B0(&qword_1002B2068);
  v63 = *(_QWORD *)(v5 - 8);
  v64 = v5;
  sub_1000262EC();
  __chkstk_darwin(v6);
  sub_10000E5DC();
  v69 = v7;
  v60 = sub_1000055B0(&qword_1002B2070);
  v59 = *(_QWORD *)(v60 - 8);
  sub_1000262EC();
  __chkstk_darwin(v8);
  sub_10000E5DC();
  v67 = v9;
  v57 = sub_1000055B0(&qword_1002B2078);
  v56[6] = *(_QWORD *)(v57 - 8);
  sub_1000262EC();
  __chkstk_darwin(v10);
  sub_10000E5DC();
  v66 = v11;
  v12 = sub_1000055B0(&qword_1002B2080);
  v61 = *(_QWORD *)(v12 - 8);
  v62 = v12;
  sub_1000262EC();
  __chkstk_darwin(v13);
  sub_10000E5DC();
  v68 = v14;
  v15 = sub_1000055B0(&qword_1002B2088);
  v70 = *(_QWORD *)(v15 - 8);
  v71 = v15;
  sub_1000262EC();
  __chkstk_darwin(v16);
  sub_1000A3710();
  v73 = type metadata accessor for DragMessage(0);
  sub_1000262EC();
  v18 = __chkstk_darwin(v17);
  v20 = (char *)v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v18);
  v23 = (char *)v56 - v22;
  v24 = __chkstk_darwin(v21);
  v26 = (char *)v56 - v25;
  v27 = __chkstk_darwin(v24);
  v29 = (char *)v56 - v28;
  __chkstk_darwin(v27);
  v31 = (char *)v56 - v30;
  v32 = a1[3];
  v33 = a1[4];
  v74 = a1;
  v34 = sub_1001112F0();
  v35 = v75;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for DragMessage.CodingKeys, &type metadata for DragMessage.CodingKeys, v34, v32, v33);
  if (!v35)
  {
    v56[3] = (uint64_t)v26;
    v56[4] = (uint64_t)v23;
    v56[2] = (uint64_t)v29;
    v56[5] = (uint64_t)v20;
    v36 = v73;
    v75 = v31;
    v37 = v71;
    v38 = KeyedDecodingContainer.allKeys.getter(v71);
    v39 = *(_QWORD *)(v38 + 16);
    if (v39)
    {
      v56[1] = 0;
      v40 = *(unsigned __int8 *)(v38 + 32);
      v41 = sub_1000EDBD0(1, v39, v38, v38 + 32, 0, (2 * v39) | 1);
      v43 = v42;
      v45 = v44;
      swift_bridgeObjectRelease();
      if (v43 == v45 >> 1)
        __asm { BR              X9 }
      v46 = v41;
      v47 = v73;
    }
    else
    {
      v46 = v38;
      v47 = v36;
    }
    v48 = type metadata accessor for DecodingError(0);
    swift_allocError(v48, &protocol witness table for DecodingError, 0, 0);
    v50 = v49;
    sub_1000055B0(&qword_1002ABBD0);
    *v50 = v47;
    v51 = KeyedDecodingContainer.codingPath.getter(v37);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v51, 0xD00000000000002BLL, 0x8000000100253AD0, 0);
    v52 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v48 - 8) + 104))(v50, enum case for DecodingError.typeMismatch(_:), v48);
    swift_willThrow(v52);
    swift_unknownObjectRelease(v46);
    v53 = sub_100111290();
    v54(v53, v37);
  }
  return sub_100005988(v74);
}

void sub_100110304()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);

  *(_BYTE *)(v4 - 112) = 4;
  sub_10011098C();
  v5 = *(_QWORD *)(v4 - 200);
  sub_100111244((uint64_t)&type metadata for DragMessage.RejectDragCodingKeys, v4 - 112, v3, (uint64_t)&type metadata for DragMessage.RejectDragCodingKeys);
  if (v1)
  {
    swift_unknownObjectRelease(v0);
    sub_100111290();
    JUMPOUT(0x100110350);
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 272) + 8))(v5, v2);
  swift_unknownObjectRelease(v0);
  v6 = sub_100111290();
  v7(v6, v3);
  swift_storeEnumTagMultiPayload(*(_QWORD *)(v4 - 128), *(_QWORD *)(v4 - 144), 4);
  JUMPOUT(0x100110580);
}

uint64_t sub_100110668()
{
  unsigned __int8 *v0;

  return sub_10010F4F0(*v0);
}

uint64_t sub_100110670@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10010F2A0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100110694(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100110950();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001106BC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100110950();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001106E4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100110AB8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10011070C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100110AB8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100110734()
{
  char *v0;

  return sub_10010F674(*v0);
}

uint64_t sub_10011073C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10010F5A0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100110760(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001109C8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100110788(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001109C8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001107B0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100110A40();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001107D8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100110A40();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100110804@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10010F6A0(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_10011082C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100110A04();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100110854(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100110A04();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10011087C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10011098C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001108A4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10011098C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001108CC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10010FD44(a1, a2);
}

void sub_1001108E0(uint64_t a1)
{
  sub_10010F730(a1);
}

uint64_t sub_1001108F4(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100041014(&qword_1002B2058, type metadata accessor for DragMessage, (uint64_t)&unk_100226728);
  result = sub_100041014(&qword_1002AF5B8, type metadata accessor for DragMessage, (uint64_t)&unk_100226700);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100110950()
{
  unint64_t result;

  result = qword_1002B2090;
  if (!qword_1002B2090)
  {
    result = swift_getWitnessTable(&unk_100226D90, &type metadata for DragMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B2090);
  }
  return result;
}

unint64_t sub_10011098C()
{
  unint64_t result;

  result = qword_1002B2098;
  if (!qword_1002B2098)
  {
    result = swift_getWitnessTable(&unk_100226D40, &type metadata for DragMessage.RejectDragCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B2098);
  }
  return result;
}

unint64_t sub_1001109C8()
{
  unint64_t result;

  result = qword_1002B20A0;
  if (!qword_1002B20A0)
  {
    result = swift_getWitnessTable(&unk_100226CF0, &type metadata for DragMessage.DragFinishedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B20A0);
  }
  return result;
}

unint64_t sub_100110A04()
{
  unint64_t result;

  result = qword_1002B20A8;
  if (!qword_1002B20A8)
  {
    result = swift_getWitnessTable(&unk_100226CA0, &type metadata for DragMessage.DragMovedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B20A8);
  }
  return result;
}

unint64_t sub_100110A40()
{
  unint64_t result;

  result = qword_1002B20B0;
  if (!qword_1002B20B0)
  {
    result = swift_getWitnessTable(&unk_100226C50, &type metadata for DragMessage.DragImagePreviewsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B20B0);
  }
  return result;
}

unint64_t sub_100110A7C()
{
  unint64_t result;

  result = qword_1002B20C8;
  if (!qword_1002B20C8)
  {
    result = swift_getWitnessTable(&unk_100229C1C, &unk_10028F578);
    atomic_store(result, (unint64_t *)&qword_1002B20C8);
  }
  return result;
}

unint64_t sub_100110AB8()
{
  unint64_t result;

  result = qword_1002B20D0;
  if (!qword_1002B20D0)
  {
    result = swift_getWitnessTable(&unk_100226C00, &type metadata for DragMessage.DragContentsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B20D0);
  }
  return result;
}

uint64_t sub_100110AF4(unint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_10000DCA0(&qword_1002B20B8);
    a2();
    result = swift_getWitnessTable(a3, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100110B5C()
{
  unint64_t result;

  result = qword_1002B2120;
  if (!qword_1002B2120)
  {
    result = swift_getWitnessTable(&unk_100229C44, &unk_10028F578);
    atomic_store(result, (unint64_t *)&qword_1002B2120);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for DragMessage.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_100110BE4 + 4 * byte_100226684[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100110C18 + 4 * byte_10022667F[v4]))();
}

uint64_t sub_100110C18(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100110C20(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100110C28);
  return result;
}

uint64_t sub_100110C34(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100110C3CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_100110C40(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100110C48(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DragMessage.CodingKeys()
{
  return &type metadata for DragMessage.CodingKeys;
}

ValueMetadata *type metadata accessor for DragMessage.DragContentsCodingKeys()
{
  return &type metadata for DragMessage.DragContentsCodingKeys;
}

ValueMetadata *type metadata accessor for DragMessage.DragImagePreviewsCodingKeys()
{
  return &type metadata for DragMessage.DragImagePreviewsCodingKeys;
}

uint64_t _s13EnsembleAgent11DragMessageO27DragImagePreviewsCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100110CCC + 4 * byte_100226689[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100110CEC + 4 * byte_10022668E[v4]))();
}

_BYTE *sub_100110CCC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100110CEC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100110CF4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100110CFC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100110D04(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100110D0C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for DragMessage.DragMovedCodingKeys()
{
  return &type metadata for DragMessage.DragMovedCodingKeys;
}

uint64_t _s13EnsembleAgent11DragMessageO22DragContentsCodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100110D74 + 4 * byte_100226698[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100110DA8 + 4 * byte_100226693[v4]))();
}

uint64_t sub_100110DA8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100110DB0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100110DB8);
  return result;
}

uint64_t sub_100110DC4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100110DCCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100110DD0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100110DD8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DragMessage.DragFinishedCodingKeys()
{
  return &type metadata for DragMessage.DragFinishedCodingKeys;
}

ValueMetadata *type metadata accessor for DragMessage.RejectDragCodingKeys()
{
  return &type metadata for DragMessage.RejectDragCodingKeys;
}

unint64_t sub_100110E08()
{
  unint64_t result;

  result = qword_1002B2138;
  if (!qword_1002B2138)
  {
    result = swift_getWitnessTable(&unk_1002268F8, &type metadata for DragMessage.DragFinishedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B2138);
  }
  return result;
}

unint64_t sub_100110E48()
{
  unint64_t result;

  result = qword_1002B2140;
  if (!qword_1002B2140)
  {
    result = swift_getWitnessTable(&unk_1002269B0, &type metadata for DragMessage.DragMovedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B2140);
  }
  return result;
}

unint64_t sub_100110E88()
{
  unint64_t result;

  result = qword_1002B2148;
  if (!qword_1002B2148)
  {
    result = swift_getWitnessTable(&unk_100226A68, &type metadata for DragMessage.DragImagePreviewsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B2148);
  }
  return result;
}

unint64_t sub_100110EC8()
{
  unint64_t result;

  result = qword_1002B2150;
  if (!qword_1002B2150)
  {
    result = swift_getWitnessTable(&unk_100226B20, &type metadata for DragMessage.DragContentsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B2150);
  }
  return result;
}

unint64_t sub_100110F08()
{
  unint64_t result;

  result = qword_1002B2158;
  if (!qword_1002B2158)
  {
    result = swift_getWitnessTable(&unk_100226BD8, &type metadata for DragMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B2158);
  }
  return result;
}

unint64_t sub_100110F48()
{
  unint64_t result;

  result = qword_1002B2160;
  if (!qword_1002B2160)
  {
    result = swift_getWitnessTable(&unk_100226A90, &type metadata for DragMessage.DragContentsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B2160);
  }
  return result;
}

unint64_t sub_100110F88()
{
  unint64_t result;

  result = qword_1002B2168;
  if (!qword_1002B2168)
  {
    result = swift_getWitnessTable(&unk_100226AB8, &type metadata for DragMessage.DragContentsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B2168);
  }
  return result;
}

unint64_t sub_100110FC8()
{
  unint64_t result;

  result = qword_1002B2170;
  if (!qword_1002B2170)
  {
    result = swift_getWitnessTable(&unk_1002269D8, &type metadata for DragMessage.DragImagePreviewsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B2170);
  }
  return result;
}

unint64_t sub_100111008()
{
  unint64_t result;

  result = qword_1002B2178;
  if (!qword_1002B2178)
  {
    result = swift_getWitnessTable(&unk_100226A00, &type metadata for DragMessage.DragImagePreviewsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B2178);
  }
  return result;
}

unint64_t sub_100111048()
{
  unint64_t result;

  result = qword_1002B2180;
  if (!qword_1002B2180)
  {
    result = swift_getWitnessTable(&unk_100226920, &type metadata for DragMessage.DragMovedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B2180);
  }
  return result;
}

unint64_t sub_100111088()
{
  unint64_t result;

  result = qword_1002B2188;
  if (!qword_1002B2188)
  {
    result = swift_getWitnessTable(&unk_100226948, &type metadata for DragMessage.DragMovedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B2188);
  }
  return result;
}

unint64_t sub_1001110C8()
{
  unint64_t result;

  result = qword_1002B2190;
  if (!qword_1002B2190)
  {
    result = swift_getWitnessTable(&unk_100226868, &type metadata for DragMessage.DragFinishedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B2190);
  }
  return result;
}

unint64_t sub_100111108()
{
  unint64_t result;

  result = qword_1002B2198;
  if (!qword_1002B2198)
  {
    result = swift_getWitnessTable(&unk_100226890, &type metadata for DragMessage.DragFinishedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B2198);
  }
  return result;
}

unint64_t sub_100111148()
{
  unint64_t result;

  result = qword_1002B21A0;
  if (!qword_1002B21A0)
  {
    result = swift_getWitnessTable(&unk_100226818, &type metadata for DragMessage.RejectDragCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B21A0);
  }
  return result;
}

unint64_t sub_100111188()
{
  unint64_t result;

  result = qword_1002B21A8;
  if (!qword_1002B21A8)
  {
    result = swift_getWitnessTable(&unk_100226840, &type metadata for DragMessage.RejectDragCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B21A8);
  }
  return result;
}

unint64_t sub_1001111C8()
{
  unint64_t result;

  result = qword_1002B21B0;
  if (!qword_1002B21B0)
  {
    result = swift_getWitnessTable(&unk_100226B48, &type metadata for DragMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B21B0);
  }
  return result;
}

unint64_t sub_100111208()
{
  unint64_t result;

  result = qword_1002B21B8;
  if (!qword_1002B21B8)
  {
    result = swift_getWitnessTable(&unk_100226B70, &type metadata for DragMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B21B8);
  }
  return result;
}

uint64_t sub_100111244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, a3, a4);
}

uint64_t sub_100111254(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, *(_QWORD *)(v2 - 144), a1);
}

uint64_t sub_10011126C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 232) + 8))(v0, v1);
}

uint64_t sub_100111280()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_100111290()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1001112A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a3, a4);
}

uint64_t sub_1001112AC@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_1001112B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 152) + 8))(v1, v0);
}

uint64_t sub_1001112C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 152) + 8))(v1, v0);
}

uint64_t sub_1001112DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 168) + 8))(v1, v0);
}

unint64_t sub_1001112F0()
{
  _QWORD *v0;
  uint64_t v1;

  sub_10000DBE4(v0, v1);
  return sub_100110950();
}

uint64_t sub_10011130C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t inited;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[5];
  _BYTE v15[104];

  v6 = sub_1000055B0(&qword_1002AD130);
  inited = swift_initStackObject(v6, v15);
  *(_OWORD *)(inited + 16) = xmmword_10021BBA0;
  v14[0] = 31;
  sub_10008A214(a1, a2, a3);
  AnyHashable.init<A>(_:)((_QWORD *)(inited + 32), v14);
  v14[3] = &type metadata for P2PMessage;
  v8 = sub_100122F84();
  v14[0] = a1;
  v14[1] = a2;
  v14[4] = v8;
  v14[2] = a3;
  sub_10008A214(a1, a2, a3);
  v9 = sub_1001AB2A4(v14);
  v11 = v10;
  sub_100005988(v14);
  *(_QWORD *)(inited + 96) = &type metadata for Data;
  *(_QWORD *)(inited + 72) = v9;
  *(_QWORD *)(inited + 80) = v11;
  v12 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  sub_100089820(a1, a2, a3);
  sub_100089820(a1, a2, a3);
  return v12;
}

void sub_100111488(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  os_log_type_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1002A99A0 != -1)
    swift_once(&qword_1002A99A0, sub_1001A6F18);
  v9 = sub_100006FB4(v5, (uint64_t)qword_1002B7198);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  v10 = swift_retain_n(a1, 2);
  v11 = Logger.logObject.getter(v10);
  v13 = static os_log_type_t.default.getter(v11, v12);
  if (os_log_type_enabled(v11, v13))
  {
    v14 = swift_slowAlloc(12, -1);
    v22 = v2;
    v15 = (uint8_t *)v14;
    v16 = swift_slowAlloc(32, -1);
    v24 = v16;
    v20 = v6;
    v21 = a2;
    *(_DWORD *)v15 = 136446210;
    v17 = sub_100111930();
    v23 = sub_100006FCC(v17, v18, &v24);
    a2 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v15 + 4);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v13, "%{public}s: pasteboard stream cancelled", v15, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    (*(void (**)(char *, uint64_t))(v20 + 8))(v8, v5);
  }
  else
  {

    swift_release_n(a1, 2);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  sub_1000B69E4(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), 0, a2);
}

uint64_t sub_1001116B8(uint64_t a1)
{
  return sub_100111704(a1, (void (*)(uint64_t))sub_1000C4E9C);
}

uint64_t sub_1001116C4(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(_QWORD *)(v2 + 88);
  sub_1000088D0();
  a2(a1);
  return sub_100095534(v5);
}

uint64_t sub_1001116F8(uint64_t a1)
{
  return sub_100111704(a1, (void (*)(uint64_t))sub_1000C4E20);
}

uint64_t sub_100111704(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(_QWORD *)(v2 + 16);
  sub_1000088D0();
  a2(a1);
  return sub_100095534(v5);
}

uint64_t sub_100111738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t result;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  int64_t v26;
  _QWORD v27[5];
  uint64_t v28;

  v28 = a5;
  sub_100043078(v27, a1);
  v9 = v27[0];
  v10 = v27[3];
  v11 = v27[4];
  v25 = v27[1];
  v26 = (unint64_t)(v27[2] + 64) >> 6;
  result = swift_bridgeObjectRetain(a1);
  while (1)
  {
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v10 << 6);
      goto LABEL_20;
    }
    v15 = v10 + 1;
    if (__OFADD__(v10, 1))
      break;
    if (v15 >= v26)
      goto LABEL_28;
    v16 = *(_QWORD *)(v25 + 8 * v15);
    v17 = v10 + 1;
    if (!v16)
    {
      v17 = v10 + 2;
      if (v10 + 2 >= v26)
        goto LABEL_28;
      v16 = *(_QWORD *)(v25 + 8 * v17);
      if (!v16)
      {
        v17 = v10 + 3;
        if (v10 + 3 >= v26)
          goto LABEL_28;
        v16 = *(_QWORD *)(v25 + 8 * v17);
        if (!v16)
        {
          v17 = v10 + 4;
          if (v10 + 4 >= v26)
            goto LABEL_28;
          v16 = *(_QWORD *)(v25 + 8 * v17);
          if (!v16)
          {
            v17 = v10 + 5;
            if (v10 + 5 >= v26)
              goto LABEL_28;
            v16 = *(_QWORD *)(v25 + 8 * v17);
            if (!v16)
            {
              v18 = v10 + 6;
              while (v18 < v26)
              {
                v16 = *(_QWORD *)(v25 + 8 * v18++);
                if (v16)
                {
                  v17 = v18 - 1;
                  goto LABEL_19;
                }
              }
LABEL_28:
              swift_bridgeObjectRelease(a3);
              swift_release(v9);
              return 0;
            }
          }
        }
      }
    }
LABEL_19:
    v11 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v17 << 6);
    v10 = v17;
LABEL_20:
    v19 = *(_QWORD **)(*(_QWORD *)(v9 + 56) + 8 * v14);
    v20 = v19[4];
    v21 = v19[5];
    v22 = v19[6];
    v23 = v19[7];
    if (v20 != a2 || v21 != a3)
    {
      result = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v21, a2, a3, 0);
      if ((result & 1) == 0)
        continue;
    }
    swift_retain(v19);
    if (!static UniversalControlUUID.compare(lhs:rhs:)(v22, v23, a4, v28))
    {
      swift_bridgeObjectRelease(a3);
      swift_release(v9);
      return (uint64_t)v19;
    }
    result = swift_release(v19);
  }
  __break(1u);
  return result;
}

uint64_t sub_100111930()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100113938();
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 64);
    sub_10003AFBC();
    sub_1000269A0();
  }
  else
  {
    v2 = *(_QWORD *)(v0 + 72);
    sub_10003AFBC();
  }
  return v2;
}

uint64_t sub_10011197C(uint64_t a1)
{
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v40;

  v1 = (void *)_convertErrorToNSError(_:)(a1);
  v2 = objc_msgSend(v1, "domain");
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v5 = v4;

  result = (uint64_t)objc_msgSend(v1, "code");
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_73;
  }
  v7 = result;
  if (result > 0x7FFFFFFF)
  {
LABEL_73:
    __break(1u);
    return result;
  }
  v8 = sub_100123FE8();
  v10 = v8 == v3 && v9 == v5;
  if (v10)
  {
    sub_10000E420();
    if (v7 == -6708)
      goto LABEL_59;
  }
  else
  {
    v11 = sub_100123DB4(v8, v9);
    sub_1000267C4();
    if (v7 == -6708 && (v11 & 1) != 0)
      goto LABEL_59;
  }
  v12 = sub_100123FE8();
  if (v12 == v3 && v13 == v5)
  {
    sub_10000E420();
    if (v7 == -6742)
      goto LABEL_59;
  }
  else
  {
    v15 = sub_100123DB4(v12, v13);
    sub_1000267C4();
    if (v7 == -6742 && (v15 & 1) != 0)
      goto LABEL_59;
  }
  v16 = RPErrorDomain;
  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(RPErrorDomain);
  if (v17 == v3 && v18 == v5)
  {
    sub_10000E420();
    sub_1001243AC();
    if (v10)
      goto LABEL_59;
  }
  else
  {
    v20 = sub_100123DB4(v17, v18);
    sub_10000E4A0();
    sub_1001243AC();
    if (v10 && (v20 & 1) != 0)
      goto LABEL_59;
  }
  v21 = sub_100123FE8();
  if (v21 == v3 && v22 == v5)
  {
    sub_10000E420();
    sub_1001243AC();
    if (v10)
      goto LABEL_59;
  }
  else
  {
    v24 = sub_100123DB4(v21, v22);
    sub_10000E4A0();
    sub_1001243AC();
    if (v10 && (v24 & 1) != 0)
      goto LABEL_59;
  }
  v25 = sub_100123FE8();
  if (v25 == v3 && v26 == v5)
  {
    sub_10000E420();
    if (v7 == -6715)
      goto LABEL_59;
  }
  else
  {
    v28 = sub_100123DB4(v25, v26);
    sub_10000E4A0();
    if (v7 == -6715 && (v28 & 1) != 0)
      goto LABEL_59;
  }
  v29 = sub_100123FE8();
  if (v29 == v3 && v30 == v5)
  {
    sub_10000E420();
    if (v7 == -6773)
      goto LABEL_59;
  }
  else
  {
    v32 = sub_100123DB4(v29, v30);
    sub_10000E4A0();
    if (v7 == -6773 && (v32 & 1) != 0)
      goto LABEL_59;
  }
  v33 = sub_100123FE8();
  if (v33 == v3 && v34 == v5)
  {
    sub_10000E420();
    if (v7 != -6727)
      goto LABEL_63;
LABEL_59:
    sub_10000E420();

    return 0;
  }
  v36 = sub_100123DB4(v33, v34);
  sub_10000E50C();
  if (v7 == -6727 && (v36 & 1) != 0)
    goto LABEL_59;
LABEL_63:
  v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  if (v37 == v3 && v38 == v5)
  {
    sub_100026AF4(v5);

    return v7 != -6727;
  }
  v40 = sub_100123DB4(v37, v38);
  sub_10000E420();
  sub_10000E50C();

  if (v7 != -6727)
    return 1;
  result = 0;
  if ((v40 & 1) == 0)
    return 1;
  return result;
}

void sub_100111C64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (qword_1002A98E0 != -1)
    swift_once(&qword_1002A98E0, sub_10011398C);
  v5 = sub_10000F6E4();
  sub_100006FB4(v5, (uint64_t)qword_1002B21C0);
  v6 = sub_1000404AC(v2);
  v7 = Logger.logObject.getter(v6);
  v9 = static os_log_type_t.default.getter(v7, v8);
  if (os_log_type_enabled(v7, v9))
  {
    v10 = (uint8_t *)sub_10000797C(12);
    v11 = sub_10000797C(32);
    v15 = v11;
    *(_DWORD *)v10 = 136446210;
    v12 = sub_100111930();
    v14 = sub_100006FCC(v12, v13, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v10 + 4, v10 + 12);
    sub_10000F650(v2);
    sub_10000E420();
    _os_log_impl((void *)&_mh_execute_header, v7, v9, "%{public}s: Deactivate", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    sub_100007958(v11);
    sub_100007958((uint64_t)v10);

  }
  else
  {

    sub_10000F650(v2);
  }
  sub_1001158BC(a1, a2, 0, 0x4000000000000000);
}

void sub_100111DFC()
{
  uint64_t v1;

  sub_10002626C();
  v1 = sub_10000E440();
  __chkstk_darwin(v1);
  sub_10000E5DC();
  __asm { BR              X11 }
}

void sub_100111E88()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v5 = 0xEA0000000000676ELL;
  sub_1001242B8();
  v7 = v6;
  sub_10000B2F8(v6 + 104, v4 - 104, 0);
  v8 = *(_QWORD *)(v7 + 104);
  sub_100060200();
  swift_bridgeObjectRetain_n(v8, 2);
  v9 = sub_100058264(v8);
  sub_10000E568();
  *(_QWORD *)(v4 - 136) = v9;
  sub_1001194C4((uint64_t *)(v4 - 136));
  if (v2)
  {
LABEL_25:
    swift_release();
    __break(1u);
    JUMPOUT(0x100112164);
  }
  *(_QWORD *)(v4 - 152) = v1;
  sub_10000E568();
  v10 = *(_QWORD *)(v4 - 136);
  if ((v10 & 0x8000000000000000) == 0 && (v10 & 0x4000000000000000) == 0)
  {
    v11 = *(_QWORD *)(v10 + 16);
    if (v11)
      goto LABEL_5;
LABEL_15:
    sub_1000955CC();
    v13 = _swiftEmptyArrayStorage;
    goto LABEL_16;
  }
  swift_bridgeObjectRetain();
  v11 = _CocoaArrayWrapper.endIndex.getter(v20);
  sub_1000955CC();
  if (!v11)
    goto LABEL_15;
LABEL_5:
  *(_QWORD *)(v4 - 136) = _swiftEmptyArrayStorage;
  sub_100058678();
  if (v11 < 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  *(_QWORD *)(v4 - 200) = v7;
  *(_QWORD *)(v4 - 192) = v3;
  *(_QWORD *)(v4 - 144) = 0xEA0000000000676ELL;
  *(_QWORD *)(v4 - 184) = v0;
  v12 = 0;
  v13 = *(_QWORD **)(v4 - 136);
  do
  {
    if ((v10 & 0xC000000000000001) != 0)
      specialized _ArrayBuffer._getElementSlowPath(_:)(v12, v10);
    else
      sub_1000088D0();
    sub_1000A766C();
    v15 = v14;
    v17 = v16;
    sub_10000B348();
    *(_QWORD *)(v4 - 136) = v13;
    v18 = v13[2];
    if (v18 >= v13[3] >> 1)
    {
      sub_100058678();
      v13 = *(_QWORD **)(v4 - 136);
    }
    ++v12;
    v13[2] = v18 + 1;
    v19 = &v13[2 * v18];
    v19[4] = v15;
    v19[5] = v17;
  }
  while (v11 != v12);
  sub_1000955CC();
  v3 = *(_QWORD *)(v4 - 192);
  v0 = *(_QWORD **)(v4 - 184);
  v5 = *(_QWORD *)(v4 - 144);
  v7 = *(_QWORD *)(v4 - 200);
LABEL_16:
  v21 = *(_QWORD *)(v4 - 152);
  sub_10000B2F8(v21 + 16, v4 - 136, 0);
  if (*(_QWORD *)(v21 + 16))
  {
    sub_1000088D0();
    sub_100180AF4();
    v23 = v22;
    sub_10000B348();
    if (v7)
      goto LABEL_18;
LABEL_21:
    v28 = 0;
    v29 = 0;
    v25 = 0;
    v27 = 0;
    goto LABEL_23;
  }
  v23 = 0;
  if (!v7)
    goto LABEL_21;
LABEL_18:
  sub_1000088D0();
  RapportStreamServer.description.getter();
  v25 = v24;
  v27 = v26;
  sub_10000B348();
  if ((*(_BYTE *)(v7 + 56) & 1) != 0)
  {
    swift_release();
    v28 = 0;
    v29 = 0;
  }
  else
  {
    sub_100124028();
    *(_QWORD *)(v4 - 144) = v5;
    v30 = *(_QWORD *)(v4 - 176);
    v37 = UUID.init(uuid:)(v31, v32, v33, v34, v35, v36);
    v28 = UUID.uuidString.getter(v37);
    v29 = v38;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v4 - 168) + 8))(v30, *(_QWORD *)(v4 - 160));
    v5 = *(_QWORD *)(v4 - 144);
    swift_release();
  }
LABEL_23:
  *v0 = v23;
  v0[1] = v25;
  v0[2] = v27;
  v0[3] = v28;
  v0[4] = v29;
  v0[5] = v3;
  v0[6] = v5;
  v0[7] = v13;
  sub_10000E4E0();
}

uint64_t sub_100112174(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v5 = v4;
  if (qword_1002A98E0 != -1)
    swift_once(&qword_1002A98E0, sub_10011398C);
  v9 = sub_10000F6E4();
  sub_100006FB4(v9, (uint64_t)qword_1002B21C0);
  swift_retain();
  sub_100123F7C();
  swift_retain();
  v10 = sub_100123F7C();
  v11 = Logger.logObject.getter(v10);
  v13 = static os_log_type_t.default.getter(v11, v12);
  if (os_log_type_enabled(v11, v13))
  {
    v14 = sub_10000797C(22);
    v30 = sub_10000797C(64);
    v33 = v30;
    *(_DWORD *)v14 = 136446466;
    v15 = sub_100111930();
    v31 = sub_100006FCC(v15, v16, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v14 + 4);
    sub_10000F650(v5);
    sub_10000E420();
    *(_WORD *)(v14 + 12) = 2082;
    sub_100123F7C();
    sub_100089498(a2, a3, a4);
    v18 = v17;
    v20 = v19;
    sub_100123F8C();
    v31 = sub_100006FCC(v18, v20, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v14 + 14);
    swift_bridgeObjectRelease();
    sub_100089820(a2, a3, a4);
    sub_100123F8C();
    sub_100026A60((void *)&_mh_execute_header, v11, v13, "%{public}s: Received Message: %{public}s", (uint8_t *)v14);
    sub_100026A58(v30, v21, (uint64_t)&type metadata for Any + 8);
    sub_100007958(v30);
    sub_100007958(v14);
  }
  else
  {
    sub_10000F650(v5);
    sub_100089820(a2, a3, a4);
    sub_100123F8C();
  }

  sub_10002D82C(v22, (unint64_t *)&qword_1002AAB80, NSError_ptr);
  sub_100123ED8();
  NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(v23, v24, v25, v26, v27, v28, 950);
  return sub_10008A5BC();
}

uint64_t sub_1001123C4(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v7 = v6;
  if (qword_1002A98E0 != -1)
    swift_once(&qword_1002A98E0, sub_10011398C);
  v11 = sub_10000F6E4();
  sub_100006FB4(v11, (uint64_t)qword_1002B21C0);
  sub_100060054();
  sub_100123F5C();
  sub_100060054();
  v12 = sub_100123F5C();
  v13 = Logger.logObject.getter(v12);
  v15 = static os_log_type_t.default.getter(v13, v14);
  if (os_log_type_enabled(v13, v15))
  {
    v16 = sub_10000797C(22);
    v37 = sub_10000797C(64);
    v42 = v37;
    *(_DWORD *)v16 = 136446466;
    v17 = sub_100111930();
    v40 = sub_100006FCC(v17, v18, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v16 + 4);
    sub_10000F650(v7);
    sub_10000E420();
    *(_WORD *)(v16 + 12) = 2082;
    sub_100123F5C();
    sub_100089498(a2, a3, a4);
    v20 = v19;
    v22 = v21;
    sub_100123F6C();
    v40 = sub_100006FCC(v20, v22, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v16 + 14);
    swift_bridgeObjectRelease();
    sub_100089820(a2, a3, a4);
    sub_100123F6C();
    sub_100026A60((void *)&_mh_execute_header, v13, v15, "%{public}s: Received Request: %{public}s", (uint8_t *)v16);
    sub_100026A58(v37, v23, (uint64_t)&type metadata for Any + 8);
    sub_100007958(v37);
    sub_100007958(v16);
  }
  else
  {
    sub_10000F650(v7);
    sub_100089820(a2, a3, a4);
    sub_100123F6C();
  }

  if (a4 >> 62)
  {
    sub_10002D82C(v24, (unint64_t *)&qword_1002AAB80, NSError_ptr);
    sub_1000955C0();
    sub_100123ED8();
    NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(v31, v32, v33, v34, v35, v36, 974);
    return sub_10008A5BC();
  }
  else
  {
    v25 = (_QWORD *)sub_1000088D8((uint64_t)&unk_10028CCA8, 48);
    v25[2] = a2;
    v25[3] = a3;
    v25[4] = a5;
    v25[5] = a6;
    v26 = sub_1000B219C();
    sub_1000088D8(v26, 48);
    sub_1000269EC();
    Completion.init(file:line:body:)(0xD000000000000061, 0x80000001002579F0, 958, (uint64_t)sub_100123950, (uint64_t)v25);
    v27 = sub_1001243CC();
    sub_1001158BC(v27, v28, 0, v29);
    return sub_10002645C();
  }
}

void P2PPeerCoordinator.setDevice(_:)(uint64_t a1)
{
  uint64_t v1;
  _BYTE v3[24];

  sub_10000B2F8(v1 + 16, (uint64_t)v3, 1);
  *(_QWORD *)(v1 + 16) = a1;
  swift_release();
  sub_10002D790();
  sub_100015540();
}

uint64_t sub_100112794()
{
  id v0;

  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  sub_1000078E0(0, (unint64_t *)&qword_1002AAB80, NSError_ptr);
  v0 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(-6714, 0xD000000000000029, 0x80000001002583B0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Ensemble_executables/EnsembleAgent/P2PPeerCoordinator.swift", 97, 2, 129);
  return swift_willThrow(v0);
}

double P2PPeerCoordinator.device.getter()
{
  uint64_t v0;
  double result;
  _BYTE v2[24];

  sub_10000B2F8(v0 + 16, (uint64_t)v2, 0);
  *(_QWORD *)&result = swift_retain().n128_u64[0];
  return result;
}

uint64_t P2PPeerCoordinator.id.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

void sub_100112868()
{
  __asm { BR              X10 }
}

uint64_t sub_10011289C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  sub_10000B2F8(v1 + 48, (uint64_t)&v3, 0);
  *(_BYTE *)((v0 & 0x3FFFFFFFFFFFFFFFLL) + 0x50) = *(_BYTE *)(v1 + 48);
  sub_10002679C();
  sub_1001129B4();
  return sub_1000269A0();
}

uint64_t P2PPeerCoordinator.isTrafficRegistrationEnabled.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  sub_10000B2F8(v0 + 48, (uint64_t)v2, 0);
  return *(unsigned __int8 *)(v0 + 48);
}

void P2PPeerCoordinator.isTrafficRegistrationEnabled.setter(char a1)
{
  uint64_t v1;
  _BYTE v3[24];

  sub_10000B2F8(v1 + 48, (uint64_t)v3, 1);
  *(_BYTE *)(v1 + 48) = a1;
  sub_100112868();
  sub_100015540();
}

void (*P2PPeerCoordinator.isTrafficRegistrationEnabled.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  sub_10000B2F8(v1 + 48, a1, 33);
  return sub_100112984;
}

void sub_100112984(uint64_t a1, char a2)
{
  swift_endAccess(a1);
  if ((a2 & 1) == 0)
    sub_100112868();
}

void sub_1001129B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  _BYTE v15[24];

  v1 = v0;
  swift_beginAccess(v0 + 104, v15, 0, 0);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = v2 + 64;
  v4 = 1 << *(_BYTE *)(v2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(v2 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 104));
  v8 = 0;
  if (!v6)
    goto LABEL_5;
LABEL_4:
  v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (i = v9 | (v8 << 6); ; i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    v14 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * i);
    *(_BYTE *)(v14 + 68) = *(_BYTE *)(v1 + 80);
    swift_retain(v14);
    sub_1000A4038();
    swift_release();
    if (v6)
      goto LABEL_4;
LABEL_5:
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v11 >= v7)
      goto LABEL_23;
    v12 = *(_QWORD *)(v3 + 8 * v11);
    ++v8;
    if (!v12)
    {
      v8 = v11 + 1;
      if (v11 + 1 >= v7)
        goto LABEL_23;
      v12 = *(_QWORD *)(v3 + 8 * v8);
      if (!v12)
      {
        v8 = v11 + 2;
        if (v11 + 2 >= v7)
          goto LABEL_23;
        v12 = *(_QWORD *)(v3 + 8 * v8);
        if (!v12)
        {
          v8 = v11 + 3;
          if (v11 + 3 >= v7)
            goto LABEL_23;
          v12 = *(_QWORD *)(v3 + 8 * v8);
          if (!v12)
            break;
        }
      }
    }
LABEL_20:
    v6 = (v12 - 1) & v12;
  }
  v13 = v11 + 4;
  if (v13 >= v7)
  {
LABEL_23:
    swift_release();
    return;
  }
  v12 = *(_QWORD *)(v3 + 8 * v13);
  if (v12)
  {
    v8 = v13;
    goto LABEL_20;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v7)
      goto LABEL_23;
    v12 = *(_QWORD *)(v3 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_20;
  }
LABEL_25:
  __break(1u);
}

uint64_t sub_100112B40(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  _BYTE v8[24];

  swift_beginAccess(v1 + 96, v8, 32, 0);
  v3 = *(_QWORD *)(v1 + 96);
  if (*(_QWORD *)(v3 + 16) && (v4 = sub_100013328(a1), (v5 & 1) != 0))
  {
    v6 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 16 * v4);
    swift_unknownObjectRetain(v6);
  }
  else
  {
    v6 = 0;
  }
  swift_endAccess(v8);
  return v6;
}

uint64_t sub_100112BC0(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  char v7;
  char v8;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;

  v7 = a3;
  v8 = a2;
  v10 = a2 >> 8;
  v11 = a2 >> 16;
  v19 = a2 >> 24;
  v20 = HIDWORD(a2);
  v25 = HIWORD(a2);
  v26 = HIBYTE(a2);
  v27 = a3 >> 8;
  v28 = a3 >> 16;
  v29 = a3 >> 24;
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  *(_BYTE *)(v6 + 56) = 1;
  v18 = HIDWORD(a3);
  v21 = a3 >> 40;
  v22 = a2 >> 40;
  *(_QWORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 72) = 0xE000000000000000;
  *(_BYTE *)(v6 + 80) = 0;
  v23 = HIBYTE(a3);
  v24 = HIWORD(a3);
  v12 = sub_1000055B0((uint64_t *)&unk_1002B2420);
  *(_QWORD *)(v6 + 96) = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for ObjectIdentifier, v12, &protocol witness table for ObjectIdentifier);
  v13 = type metadata accessor for P2PStream(0);
  *(_QWORD *)(v6 + 104) = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for ObjectIdentifier, v13, &protocol witness table for ObjectIdentifier);
  *(_QWORD *)(v6 + 112) = &_swiftEmptySetSingleton;
  v14 = type metadata accessor for Completions();
  v15 = swift_allocObject(v14, 24, 7);
  *(_QWORD *)(v15 + 16) = _swiftEmptyArrayStorage;
  swift_retain();
  sub_1000C4E20(v16);
  swift_release();
  *(_QWORD *)(v6 + 88) = v15;
  *(_QWORD *)(v6 + 16) = a1;
  *(_BYTE *)(v6 + 24) = v8;
  *(_BYTE *)(v6 + 25) = v10;
  *(_BYTE *)(v6 + 26) = v11;
  *(_BYTE *)(v6 + 27) = v19;
  *(_BYTE *)(v6 + 28) = v20;
  *(_BYTE *)(v6 + 29) = v22;
  *(_BYTE *)(v6 + 30) = v25;
  *(_BYTE *)(v6 + 31) = v26;
  *(_BYTE *)(v6 + 32) = v7;
  *(_BYTE *)(v6 + 33) = v27;
  *(_BYTE *)(v6 + 34) = v28;
  *(_BYTE *)(v6 + 35) = v29;
  *(_BYTE *)(v6 + 36) = v18;
  *(_BYTE *)(v6 + 37) = v21;
  *(_BYTE *)(v6 + 38) = v24;
  *(_BYTE *)(v6 + 39) = v23;
  *(_QWORD *)(v6 + 40) = a4;
  *(_QWORD *)(v6 + 48) = a5;
  *(_BYTE *)(v6 + 56) = a6 & 1;
  swift_retain();
  sub_100112DD8();
  swift_release();
  swift_release();
  return v6;
}

double sub_100112DD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  Swift::String v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  Swift::String v33;
  Swift::String v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  Swift::String v40;
  unint64_t v41;
  double result;
  _QWORD v43[9];
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(unsigned __int8 **)(v0 + 16);
  v7 = v6[144];
  v8 = v6[145];
  v9 = v6[146];
  v10 = v6[147];
  v11 = v6[148];
  v12 = v6[149];
  if ((*(_BYTE *)(v0 + 56) & 1) != 0)
  {
    v49 = 542126672;
    v50 = 0xE400000000000000;
    v13 = UUID.init(uuid:)(v7, v8, v9, v10, v11, v12);
    v14 = UUID.uuidString.getter(v13);
    v16 = v15;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    v17 = sub_1000599D0(8, v14, v16);
    v18 = static String._fromSubstring(_:)(v17);
    v20 = v19;
    swift_bridgeObjectRelease();
    v21._countAndFlagsBits = v18;
    v21._object = v20;
    String.append(_:)(v21);
  }
  else
  {
    v22 = *(_QWORD *)(v0 + 40);
    v23 = *(_QWORD *)(v0 + 48);
    v47 = v22 >> 16;
    v48 = v22 >> 8;
    v45 = HIDWORD(v22);
    v46 = v22 >> 24;
    v43[8] = HIWORD(v22);
    v44 = v22 >> 40;
    v43[6] = v23 >> 8;
    v43[7] = HIBYTE(v22);
    v43[4] = v23 >> 24;
    v43[5] = v23 >> 16;
    v43[3] = HIDWORD(v23);
    v43[2] = v23 >> 40;
    v43[1] = HIWORD(v23);
    v49 = 542126672;
    v50 = 0xE400000000000000;
    v24 = UUID.init(uuid:)(v7, v8, v9, v10, v11, v12);
    v25 = UUID.uuidString.getter(v24);
    v27 = v26;
    v28 = *(void (**)(char *, uint64_t))(v3 + 8);
    v28(v5, v2);
    v29 = sub_1000599D0(8, v25, v27);
    v30 = static String._fromSubstring(_:)(v29);
    v32 = v31;
    swift_bridgeObjectRelease();
    v33._countAndFlagsBits = v30;
    v33._object = v32;
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    v34._countAndFlagsBits = 47;
    v34._object = (void *)0xE100000000000000;
    String.append(_:)(v34);
    v35 = UUID.init(uuid:)(v22, v48, v47, v46, v45, v44);
    v36 = UUID.uuidString.getter(v35);
    v38 = v37;
    v28(v5, v2);
    v39 = sub_1000599D0(4, v36, v38);
    v40._countAndFlagsBits = static String._fromSubstring(_:)(v39);
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v41 = v50;
  *(_QWORD *)(v1 + 64) = v49;
  *(_QWORD *)(v1 + 72) = v41;
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t sub_1001130F8()
{
  _QWORD *v0;
  uint64_t result;
  _BYTE v2[24];

  swift_beginAccess(v0 + 13, v2, 0, 0);
  if (*(_QWORD *)(v0[13] + 16))
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000022, 0x80000001002583E0, "EnsembleAgent/P2PPeerCoordinator.swift", 38, 2, 264, 0);
    __break(1u);
  }
  else
  {
    swift_release(v0[2]);
    swift_bridgeObjectRelease(v0[9]);
    swift_release(v0[11]);
    swift_bridgeObjectRelease(v0[12]);
    swift_bridgeObjectRelease(v0[13]);
    swift_bridgeObjectRelease(v0[14]);
    return (uint64_t)v0;
  }
  return result;
}

uint64_t sub_1001131B0()
{
  uint64_t v0;

  v0 = sub_1001130F8();
  return swift_deallocClassInstance(v0, 120, 7);
}

void sub_1001131CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[24];

  swift_beginAccess(v1 + 104, v17, 1, 0);
  v3 = *(_QWORD *)(v1 + 104);
  v6 = *(_QWORD *)(v3 + 64);
  v5 = v3 + 64;
  v4 = v6;
  v7 = 1 << *(_BYTE *)(*(_QWORD *)(v1 + 104) + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & v4;
  v10 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain();
  v11 = 0;
  if (!v9)
    goto LABEL_5;
LABEL_4:
  for (v9 &= v9 - 1; ; v9 = (v13 - 1) & v13)
  {
    swift_retain();
    sub_1000A47E0();
    swift_release();
    if (v9)
      goto LABEL_4;
LABEL_5:
    v12 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v12 >= v10)
      goto LABEL_23;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v11;
    if (!v13)
    {
      v11 = v12 + 1;
      if (v12 + 1 >= v10)
        goto LABEL_23;
      v13 = *(_QWORD *)(v5 + 8 * v11);
      if (!v13)
      {
        v11 = v12 + 2;
        if (v12 + 2 >= v10)
          goto LABEL_23;
        v13 = *(_QWORD *)(v5 + 8 * v11);
        if (!v13)
        {
          v11 = v12 + 3;
          if (v12 + 3 >= v10)
            goto LABEL_23;
          v13 = *(_QWORD *)(v5 + 8 * v11);
          if (!v13)
            break;
        }
      }
    }
LABEL_20:
    ;
  }
  v14 = v12 + 4;
  if (v14 >= v10)
  {
LABEL_23:
    swift_release();
    v15 = type metadata accessor for P2PStream(0);
    *(_QWORD *)(v1 + 104) = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for ObjectIdentifier, v15, &protocol witness table for ObjectIdentifier);
    swift_bridgeObjectRelease();
    swift_beginAccess(v1 + 112, &v16, 1, 0);
    *(_QWORD *)(v1 + 112) = &_swiftEmptySetSingleton;
    swift_bridgeObjectRelease();
    sub_100027738();
    sub_1001116C4(a1, (void (*)(uint64_t))sub_1000C4E9C);
    return;
  }
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v11 = v14;
    goto LABEL_20;
  }
  while (1)
  {
    v11 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v11 >= v10)
      goto LABEL_23;
    v13 = *(_QWORD *)(v5 + 8 * v11);
    ++v14;
    if (v13)
      goto LABEL_20;
  }
LABEL_25:
  __break(1u);
}

BOOL sub_1001133E0(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE v11[24];
  _BYTE v12[8];

  v5 = v4;
  swift_beginAccess(v5 + 112, v11, 33, 0);
  sub_10019AA30(a1, a2, a3, a4, (uint64_t)v12);
  swift_endAccess(v11);
  swift_bridgeObjectRelease();
  return *(_QWORD *)(*(_QWORD *)(v5 + 112) + 16) == 0;
}

uint64_t sub_100113478(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[24];

  swift_beginAccess(v1 + 96, v9, 32, 0);
  v3 = *(_QWORD *)(v1 + 96);
  if (*(_QWORD *)(v3 + 16) && (v4 = sub_100013328(a1), (v5 & 1) != 0))
  {
    v6 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 16 * v4);
    swift_unknownObjectRetain(v6);
    v7 = 1;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  swift_endAccess(v9);
  swift_unknownObjectRelease(v6);
  return v7;
}

uint64_t sub_100113500()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[24];

  swift_retain();
  sub_1000C8850();
  if (!v2)
    return 0;
  v5 = v1;
  v6 = v2;
  v7 = v3;
  v8 = v4;
  swift_beginAccess(v0 + 104, v12, 0, 0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10 = sub_100111738(v9, v5, v6, v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1001135AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v1 + 56) & 1) == 0)
    return *(_QWORD *)(v1 + 40);
  v7 = UUID.init()(v4);
  v9 = UUID.uuid.getter(v7, v8);
  v10 = UniversalControlUUID.init(rawValue:)(v9, v9 >> 8, v9 >> 16, v9 >> 24, HIDWORD(v9), v9 >> 40, HIWORD(v9), HIBYTE(v9));
  v12 = v11;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  *(_QWORD *)(v1 + 40) = v10;
  *(_QWORD *)(v1 + 48) = v12;
  *(_BYTE *)(v1 + 56) = 0;
  sub_100112DD8();
  return v10;
}

uint64_t sub_1001136D4(uint64_t a1, uint64_t a2, char a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v5 = *(_QWORD *)(v4 + 40);
  v6 = *(_QWORD *)(v4 + 48);
  if ((a3 & 1) != 0)
  {
    if ((*(_BYTE *)(v4 + 56) & 1) != 0)
      return 0;
    goto LABEL_11;
  }
  if ((*(_BYTE *)(v4 + 56) & 1) == 0)
  {
    result = static UniversalControlUUID.compare(lhs:rhs:)(a1, a2);
    if (!result)
      return result;
    if ((*(_BYTE *)(v4 + 56) & 1) != 0)
      goto LABEL_10;
    if ((a4 & 1) != 0)
    {
      if (static UniversalControlUUID.compare(lhs:rhs:)(*(_QWORD *)(v4 + 40), *(_QWORD *)(v4 + 48)))
      {
LABEL_10:
        *(_QWORD *)(v4 + 40) = a1;
        *(_QWORD *)(v4 + 48) = a2;
        *(_BYTE *)(v4 + 56) = 0;
        goto LABEL_11;
      }
    }
    else if ((static UniversalControlDeviceID.< infix(_:_:)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 144), *(_QWORD *)(*(_QWORD *)(v4 + 16) + 152), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32)) & 1) != 0)
    {
      goto LABEL_10;
    }
    if ((*(_BYTE *)(v4 + 56) & 1) != 0)
      goto LABEL_12;
LABEL_11:
    result = static UniversalControlUUID.compare(lhs:rhs:)(v5, v6);
    if (!result)
      return result;
    goto LABEL_12;
  }
  *(_QWORD *)(v4 + 40) = a1;
  *(_QWORD *)(v4 + 48) = a2;
  *(_BYTE *)(v4 + 56) = 0;
LABEL_12:
  sub_100112DD8();
  return 1;
}

void sub_1001137BC(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100113808()
{
  uint64_t v0;
  uint64_t v2;

  sub_10002D790();
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  sub_100124200();
  v2 = v0;
  sub_100040544();
  sub_100065DD0();
  sub_10000E568();
  sub_100124218();
  sub_100040544();
  sub_100065DD0();
  sub_10000E568();
  swift_release();
  return v2;
}

void sub_100113930()
{
  uint64_t *v0;

  sub_1001137BC(*v0);
}

void sub_100113938()
{
  __asm { BR              X10 }
}

uint64_t sub_100113968()
{
  uint64_t v0;

  swift_retain(v0 & 0x3FFFFFFFFFFFFFFFLL);
  return v0 & 0x3FFFFFFFFFFFFFFFLL;
}

uint64_t sub_10011398C()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10000897C(v0, qword_1002B21C0);
  sub_100006FB4(v0, (uint64_t)qword_1002B21C0);
  return Logger.init(subsystem:category:)(0xD00000000000001ALL, 0x8000000100251980, 1380271440, 0xE400000000000000);
}

void sub_1001139F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  __n128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(_QWORD *, uint64_t);
  uint64_t v101;
  _QWORD v102[2];
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t (*v131)(uint64_t);
  _QWORD v132[4];

  sub_10002626C();
  a19 = v21;
  a20 = v22;
  v23 = v20;
  v120 = v24;
  v26 = v25;
  v127 = v27 >> 16;
  v128 = v27 >> 8;
  v125 = HIDWORD(v27);
  v126 = v27 >> 24;
  v123 = HIWORD(v27);
  v124 = v27 >> 40;
  v28 = HIBYTE(v27);
  v29 = v27;
  v115 = v30;
  v116 = v27;
  v31 = v30 >> 8;
  v32 = v30 >> 16;
  v33 = v30 >> 24;
  v34 = HIDWORD(v30);
  v121 = HIWORD(v30);
  v122 = v30 >> 40;
  v119 = HIBYTE(v30);
  v35 = v30;
  v114 = type metadata accessor for DispatchTimeInterval(0);
  sub_1000A3438(*(_QWORD *)(v114 - 8));
  __chkstk_darwin(v36);
  sub_1000268BC();
  v112 = (_QWORD *)(v37 - v38);
  __chkstk_darwin(v39);
  v41 = sub_1000F0190((uint64_t)v102 - v40);
  v42 = type metadata accessor for DispatchTime(v41);
  sub_1000A353C(v42, (uint64_t)&a15);
  sub_1000A3438(v43);
  __chkstk_darwin(v44);
  sub_10000E5DC();
  v46 = sub_1000F0190(v45);
  v47 = type metadata accessor for DispatchWorkItemFlags(v46);
  sub_1000A353C(v47, (uint64_t)&a12);
  sub_1000A3438(v48);
  __chkstk_darwin(v49);
  sub_10000E5DC();
  v51 = sub_1000F0190(v50);
  v52 = type metadata accessor for DispatchQoS(v51);
  sub_1000A353C(v52, (uint64_t)&a9);
  sub_1000A3438(v53);
  __chkstk_darwin(v54);
  sub_10000E5DC();
  v56 = sub_1000F0190(v55);
  v57 = type metadata accessor for OS_dispatch_source.TimerFlags(v56);
  sub_1000A353C(v57, (uint64_t)v132);
  sub_1000A3438(v58);
  __chkstk_darwin(v59);
  sub_10000E5DC();
  v61 = sub_1000F0190(v60);
  v62 = type metadata accessor for UUID(v61);
  v117 = *(_QWORD *)(v62 - 8);
  v118 = v62;
  __chkstk_darwin(v62);
  sub_10002641C();
  v65 = v64 - v63;
  *(_QWORD *)(v23 + 16) = 0;
  *(_BYTE *)(v23 + 48) = 0;
  *(_QWORD *)(v23 + 72) = 0;
  *(_QWORD *)(v23 + 80) = 0xE000000000000000;
  *(_QWORD *)(v23 + 88) = 0xC000000000000000;
  *(_QWORD *)(v23 + 96) = 0;
  *(_QWORD *)(v23 + 104) = 0;
  *(_QWORD *)(v23 + 120) = &_swiftEmptySetSingleton;
  v66 = v120;
  *(_QWORD *)(v23 + 56) = v26;
  *(_QWORD *)(v23 + 64) = v66;
  *(_BYTE *)(v23 + 24) = v29;
  *(_BYTE *)(v23 + 25) = v128;
  *(_BYTE *)(v23 + 26) = v127;
  *(_BYTE *)(v23 + 27) = v126;
  *(_BYTE *)(v23 + 28) = v125;
  *(_BYTE *)(v23 + 29) = v124;
  *(_BYTE *)(v23 + 30) = v123;
  *(_BYTE *)(v23 + 31) = v28;
  *(_BYTE *)(v23 + 32) = v35;
  *(_BYTE *)(v23 + 33) = v31;
  *(_BYTE *)(v23 + 34) = v32;
  *(_BYTE *)(v23 + 35) = v33;
  *(_BYTE *)(v23 + 36) = v34;
  v67 = v121;
  *(_BYTE *)(v23 + 37) = v122;
  *(_BYTE *)(v23 + 38) = v67;
  *(_BYTE *)(v23 + 39) = v119;
  v129 = 542327881;
  v130 = 0xE400000000000000;
  v120 = v26;
  swift_unknownObjectRetain(v26);
  v68 = UUID.init(uuid:)(v116, v128, v127, v126, v125, v124);
  v69 = UUID.uuidString.getter(v68);
  v71 = v70;
  (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v65, v118);
  v72 = sub_1000599D0(8, v69, v71);
  static String._fromSubstring(_:)(v72);
  sub_10000E420();
  sub_100065DD0();
  sub_10000E568();
  v73 = v130;
  *(_QWORD *)(v23 + 72) = v129;
  *(_QWORD *)(v23 + 80) = v73;
  v74 = swift_bridgeObjectRelease();
  v75 = os_transaction_create("com.apple.universalcontrol.p2p-peer-coordinator", v74);
  if (v75)
  {
    *(_QWORD *)(v23 + 40) = v75;
    v76 = sub_10002D82C(v75, (unint64_t *)&qword_1002AAF50, OS_dispatch_source_ptr);
    v77 = sub_10002D82C(v76, (unint64_t *)&qword_1002AA660, OS_dispatch_queue_ptr);
    v78 = (void *)static OS_dispatch_queue.main.getter(v77);
    v129 = (uint64_t)_swiftEmptyArrayStorage;
    sub_100124280((unint64_t *)&unk_1002AC3B0, v79, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags, (uint64_t)&protocol conformance descriptor for OS_dispatch_source.TimerFlags);
    v81 = v80;
    v82 = sub_1000055B0(&qword_1002AEEC0);
    sub_10006D048((unint64_t *)&qword_1002AC3C0, &qword_1002AEEC0);
    v83 = v102[1];
    v84 = v82;
    v85 = v103;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v129, v84, v86, v103, v81);
    v87 = static OS_dispatch_source.makeTimerSource(flags:queue:)(v83, v78);

    (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v83, v85);
    *(_QWORD *)(v23 + 112) = v87;
    v88 = sub_100008904();
    v89 = sub_1000088D8((uint64_t)&unk_10028CA18, 24);
    swift_weakInit(v89 + 16, v23);
    v132[1] = sub_10012390C;
    v132[2] = v89;
    v129 = (uint64_t)_NSConcreteStackBlock;
    v130 = 1107296256;
    v131 = sub_10000E610;
    v132[0] = &unk_10028CC70;
    v90 = _Block_copy(&v129);
    sub_10002D988();
    sub_10002679C();
    v91 = v105;
    j___s8Dispatch0A3QoSV11unspecifiedACvgZ(v88);
    v92 = v107;
    sub_10002DEB8();
    OS_dispatch_source.setEventHandler(qos:flags:handler:)(v91, v92, v90, v88);
    _Block_release(v90);
    sub_10000F718();
    sub_1000EFF78(v92, *(uint64_t (**)(uint64_t, _QWORD))(v108 + 8));
    sub_1000EFF78(v91, *(uint64_t (**)(uint64_t, _QWORD))(v106 + 8));
    sub_1000269A0();
    sub_10000B348();
    v93 = sub_100008904();
    v94 = sub_10002D988();
    v95 = v109;
    static DispatchTime.distantFuture.getter(v94);
    v96 = v111;
    sub_10007A0C4();
    v97 = v112;
    sub_10007A0F4(v112);
    v98 = sub_1001243CC();
    OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v98, v99, v97, v93);
    sub_10000F718();
    v100 = *(void (**)(_QWORD *, uint64_t))(v113 + 8);
    v101 = v114;
    v100(v97, v114);
    v100(v96, v101);
    sub_1000EFF78(v95, *(uint64_t (**)(uint64_t, _QWORD))(v110 + 8));
    sub_100008904();
    sub_10002D988();
    OS_dispatch_source.activate()();
    sub_10000F718();
    sub_10002D790();
    sub_1000088D0();
    sub_10015D5AC(v23);
    swift_unknownObjectRelease(v120);
    swift_release();
    sub_10000B348();
    sub_10000E4E0();
  }
  else
  {
    __break(1u);
  }
}

void sub_100113FF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[24];
  _BYTE v28[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v28, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    swift_beginAccess(Strong + 120, v27, 0, 0);
    if (*(_QWORD *)(*(_QWORD *)(v3 + 120) + 16))
    {
      if (qword_1002A98E0 != -1)
        swift_once(&qword_1002A98E0, sub_10011398C);
      v4 = type metadata accessor for Logger(0);
      sub_100006FB4(v4, (uint64_t)qword_1002B21C0);
      v5 = swift_retain_n(v3, 4);
      v6 = Logger.logObject.getter(v5);
      v8 = static os_log_type_t.default.getter(v6, v7);
      if (os_log_type_enabled(v6, v8))
      {
        v9 = swift_slowAlloc(22, -1);
        v10 = swift_slowAlloc(32, -1);
        v26 = v10;
        *(_DWORD *)v9 = 136446466;
        v11 = sub_100111930();
        v25 = sub_100006FCC(v11, v12, &v26);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v9 + 4);
        swift_release_n(v3, 2);
        swift_bridgeObjectRelease();
        *(_WORD *)(v9 + 12) = 2050;
        v13 = *(_QWORD *)(*(_QWORD *)(v3 + 120) + 16);
        swift_release();
        v25 = v13;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v9 + 14);
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v6, v8, "%{public}s: Skipping idle timeout due to connection assertions (%{public}ld)", (uint8_t *)v9, 0x16u);
        swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v10, -1, -1);
        swift_slowDealloc(v9, -1, -1);
        swift_release();

      }
      else
      {

        swift_release_n(v3, 5);
      }
    }
    else
    {
      if (qword_1002A98E0 != -1)
        swift_once(&qword_1002A98E0, sub_10011398C);
      v14 = type metadata accessor for Logger(0);
      sub_100006FB4(v14, (uint64_t)qword_1002B21C0);
      v15 = swift_retain_n(v3, 2);
      v16 = Logger.logObject.getter(v15);
      v18 = static os_log_type_t.default.getter(v16, v17);
      if (os_log_type_enabled(v16, v18))
      {
        v19 = (uint8_t *)swift_slowAlloc(12, -1);
        v20 = swift_slowAlloc(32, -1);
        v26 = v20;
        *(_DWORD *)v19 = 136446210;
        v21 = sub_100111930();
        v25 = sub_100006FCC(v21, v22, &v26);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v19 + 4);
        swift_release_n(v3, 2);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v16, v18, "%{public}s: Deactivating due to idle timeout", v19, 0xCu);
        swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v20, -1, -1);
        swift_slowDealloc(v19, -1, -1);

      }
      else
      {

        swift_release_n(v3, 2);
      }
      v23 = type metadata accessor for Completion();
      swift_allocObject(v23, 48, 7);
      v24 = Completion.init(file:line:)();
      sub_100111C64((uint64_t)v24, 0);
      swift_release();
      swift_release();
    }
  }
}

uint64_t sub_1001143C0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, _QWORD *a6)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v11 = *(_QWORD **)(a1 + 56);
  v12 = v11[15];
  v13 = sub_100117CA8(v12);
  if (v14)
  {
    v15 = v13;
    v16 = v14;
    swift_retain();
    v17 = sub_1001235D0(v15, v16, a4, a5, v12, a3);
    swift_bridgeObjectRelease();
    v18 = *(_QWORD *)(v17 + 16);
    *(_QWORD *)(v17 + 16) = a2;
    *(_QWORD *)(v17 + 24) = &off_10028CA78;
    swift_unknownObjectRelease(v18);
    swift_retain();
    swift_retain();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v19);
    v20 = *(_QWORD *)((*a6 & 0xFFFFFFFFFFFFF8) + 0x10);
    sub_1000CA720(v20);
    v21 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, v17);
    specialized Array._endMutation()(v21);
    swift_release();
    swift_release();
  }
  v22 = v11[8];
  v23 = sub_100117CA8(v22);
  if (v24)
  {
    v25 = v23;
    v26 = v24;
    swift_retain();
    v27 = sub_100123470(v25, v26, a4, a5, v22, a3);
    swift_bridgeObjectRelease();
    v28 = *(_QWORD *)(v27 + 16);
    *(_QWORD *)(v27 + 16) = a2;
    *(_QWORD *)(v27 + 24) = &off_10028CA78;
    swift_unknownObjectRelease(v28);
    swift_retain();
    swift_retain();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v29);
    v30 = *(_QWORD *)((*a6 & 0xFFFFFFFFFFFFF8) + 0x10);
    sub_1000CA720(v30);
    v31 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v30, v27);
    specialized Array._endMutation()(v31);
    swift_release();
    swift_release();
  }
  v32 = v11[13];
  v33 = sub_100117CA8(v32);
  if (v34)
  {
    v35 = v33;
    v36 = v34;
    swift_retain();
    v37 = sub_100123310(v35, v36, a4, a5, v32, a3);
    swift_bridgeObjectRelease();
    v38 = *(_QWORD *)(v37 + 16);
    *(_QWORD *)(v37 + 16) = a2;
    *(_QWORD *)(v37 + 24) = &off_10028CA78;
    swift_unknownObjectRelease(v38);
    swift_retain();
    swift_retain();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v39);
    v40 = *(_QWORD *)((*a6 & 0xFFFFFFFFFFFFF8) + 0x10);
    sub_1000CA720(v40);
    v41 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v40, v37);
    specialized Array._endMutation()(v41);
    swift_release();
    swift_release();
  }
  v42 = v11[5];
  v43 = sub_100117CA8(v42);
  if (v44)
  {
    v45 = v43;
    v46 = v44;
    swift_retain();
    v47 = sub_1001231B0(v45, v46, a4, a5, v42, a3);
    swift_bridgeObjectRelease();
    v48 = *(_QWORD *)(v47 + 16);
    *(_QWORD *)(v47 + 16) = a2;
    *(_QWORD *)(v47 + 24) = &off_10028CA78;
    swift_unknownObjectRelease(v48);
    swift_retain();
    swift_retain();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v49);
    v50 = *(_QWORD *)((*a6 & 0xFFFFFFFFFFFFF8) + 0x10);
    sub_1000CA720(v50);
    v51 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v50, v47);
    specialized Array._endMutation()(v51);
    swift_release();
    swift_release();
  }
  v52 = v11[4];
  v53 = sub_100117CA8(v52);
  if (v54)
  {
    v55 = v53;
    v56 = v54;
    swift_retain();
    v57 = sub_100123050(v55, v56, a4, a5, v52, a3);
    swift_bridgeObjectRelease();
    v58 = *(_QWORD *)(v57 + 16);
    *(_QWORD *)(v57 + 16) = a2;
    *(_QWORD *)(v57 + 24) = &off_10028CA78;
    swift_unknownObjectRelease(v58);
    swift_retain();
    swift_retain();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v59);
    v60 = *(_QWORD *)((*a6 & 0xFFFFFFFFFFFFF8) + 0x10);
    sub_1000CA720(v60);
    v61 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v60, v57);
    specialized Array._endMutation()(v61);
    swift_release();
    swift_release();
  }
  swift_release();
  return swift_release();
}

uint64_t sub_10011477C(uint64_t a1, unsigned __int8 *a2, void *a3)
{
  swift_retain();
  sub_10015D644((uint64_t)a2, (uint64_t)a3);
  swift_release();
  swift_retain();
  sub_100111488((uint64_t)a2, a3);
  swift_release();
  swift_retain();
  sub_10003F950((uint64_t)a2, a3);
  swift_release();
  swift_retain();
  sub_10019717C(a2, (uint64_t)a3);
  swift_release();
  swift_release();
  return swift_errorRelease(a3);
}

void sub_100114834()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  __n128 v14;
  int64_t v15;
  unint64_t v16;
  unint64_t i;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  _BYTE v22[24];

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = sub_1000055B0(&qword_1002ACC90);
  __chkstk_darwin(v5);
  v7 = &v22[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  swift_beginAccess(v0 + 120, v22, 0, 0);
  v8 = *(_QWORD *)(v0 + 120);
  v9 = v8 + 56;
  v10 = 1 << *(_BYTE *)(v8 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v8 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  v14 = swift_bridgeObjectRetain();
  v15 = 0;
  if (!v12)
    goto LABEL_5;
LABEL_4:
  v16 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (i = v16 | (v15 << 6); ; i = __clz(__rbit64(v19)) + (v15 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v2 + 16))(v7, *(_QWORD *)(v8 + 48) + *(_QWORD *)(v2 + 72) * i, v1, v14);
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v7, 0, 1, v1);
    if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v7, 1, v1) == 1)
      goto LABEL_23;
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v7, v1);
    sub_100114A84((uint64_t)v4);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    if (v12)
      goto LABEL_4;
LABEL_5:
    v18 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v18 >= v13)
      goto LABEL_22;
    v19 = *(_QWORD *)(v9 + 8 * v18);
    ++v15;
    if (!v19)
    {
      v15 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_22;
      v19 = *(_QWORD *)(v9 + 8 * v15);
      if (!v19)
      {
        v15 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_22;
        v19 = *(_QWORD *)(v9 + 8 * v15);
        if (!v19)
          break;
      }
    }
LABEL_18:
    v12 = (v19 - 1) & v19;
  }
  v20 = v18 + 3;
  if (v20 >= v13)
  {
LABEL_22:
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v7, 1, 1, v1);
LABEL_23:
    swift_release();
    return;
  }
  v19 = *(_QWORD *)(v9 + 8 * v20);
  if (v19)
  {
    v15 = v20;
    goto LABEL_18;
  }
  while (1)
  {
    v15 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v15 >= v13)
      goto LABEL_22;
    v19 = *(_QWORD *)(v9 + 8 * v15);
    ++v20;
    if (v19)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
}

void sub_100114A84(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  os_log_type_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _BYTE v39[4];
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44[3];
  _BYTE v45[24];

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v39[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = sub_1000055B0(&qword_1002ACC90);
  __chkstk_darwin(v8);
  v10 = &v39[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = v1 + 120;
  swift_beginAccess(v1 + 120, v45, 0, 0);
  swift_bridgeObjectRetain();
  sub_10018F2D4();
  v13 = v12;
  swift_bridgeObjectRelease();
  if ((v13 & 1) != 0)
  {
    swift_beginAccess(v11, v44, 33, 0);
    sub_10019A844();
    swift_endAccess(v44);
    sub_100071B0C((uint64_t)v10);
    if (qword_1002A98E0 != -1)
      swift_once(&qword_1002A98E0, sub_10011398C);
    v14 = type metadata accessor for Logger(0);
    v15 = sub_100006FB4(v14, (uint64_t)qword_1002B21C0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
    v16 = swift_retain_n(v1, 4);
    v17 = Logger.logObject.getter(v16);
    v19 = static os_log_type_t.default.getter(v17, v18);
    v20 = v19;
    if (os_log_type_enabled(v17, v19))
    {
      v21 = swift_slowAlloc(32, -1);
      v41 = swift_slowAlloc(64, -1);
      v44[0] = v41;
      *(_DWORD *)v21 = 136446722;
      v40 = v20;
      v22 = sub_100111930();
      v24 = sub_100006FCC(v22, v23, v44);
      v42 = v15;
      v43 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44, v21 + 4);
      swift_release_n(v2, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v21 + 12) = 2082;
      sub_1000840B4(&qword_1002AA670, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v26 = dispatch thunk of CustomStringConvertible.description.getter(v4, v25);
      v43 = sub_100006FCC(v26, v27, v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44, v21 + 14);
      v28 = swift_bridgeObjectRelease();
      (*(void (**)(_BYTE *, uint64_t, __n128))(v5 + 8))(v7, v4, v28);
      *(_WORD *)(v21 + 22) = 2050;
      v29 = *(_QWORD *)(*(_QWORD *)(v2 + 120) + 16);
      swift_release();
      v43 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44, v21 + 24);
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v17, (os_log_type_t)v40, "%{public}s: Released connection assertion '%{public}s', count is now %{public}ld", (uint8_t *)v21, 0x20u);
      v30 = v41;
      swift_arrayDestroy(v41, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v21, -1, -1);

    }
    else
    {
      swift_release_n(v2, 3);
      (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);

      swift_release();
    }
    if (!*(_QWORD *)(*(_QWORD *)v11 + 16))
    {
      v31 = swift_retain_n(v2, 2);
      v32 = Logger.logObject.getter(v31);
      v34 = static os_log_type_t.default.getter(v32, v33);
      if (os_log_type_enabled(v32, v34))
      {
        v35 = (uint8_t *)swift_slowAlloc(12, -1);
        v36 = swift_slowAlloc(32, -1);
        v44[0] = v36;
        *(_DWORD *)v35 = 136446210;
        v37 = sub_100111930();
        v43 = sub_100006FCC(v37, v38, v44);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44, v35 + 4);
        swift_release_n(v2, 2);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v32, v34, "%{public}s: Released the last connection assertion", v35, 0xCu);
        swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v36, -1, -1);
        swift_slowDealloc(v35, -1, -1);

      }
      else
      {

        swift_release_n(v2, 2);
      }
      if (*(_QWORD *)(v2 + 88) >> 62 == 2)
        sub_100114F44();
    }
  }
}

uint64_t sub_100114F44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  double v22;
  void (*v23)(uint64_t);
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  type metadata accessor for DispatchTimeInterval(0);
  sub_1001018E4();
  __chkstk_darwin(v2);
  sub_1000268BC();
  v5 = (_QWORD *)(v3 - v4);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v27 - v7);
  v9 = type metadata accessor for DispatchTime(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_1000268BC();
  v13 = v11 - v12;
  __chkstk_darwin(v14);
  v16 = (char *)&v27 - v15;
  v17 = objc_msgSend((id)type metadata accessor for UniversalControlPreferences(0), "sharedPreferences");
  v18 = UniversalControlPreferences.idleTimeout.getter();

  v19 = sub_100008904();
  v20 = sub_10002D988();
  result = static DispatchTime.now()(v20);
  v22 = v18 * 1000.0;
  if ((~COERCE__INT64(v18 * 1000.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v22 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v22 < 9.22337204e18)
  {
    *v8 = (uint64_t)v22;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v1 + 104))(v8, enum case for DispatchTimeInterval.milliseconds(_:), v0);
    + infix(_:_:)(v13, v8);
    v23 = *(void (**)(uint64_t))(v1 + 8);
    sub_100124318();
    v24 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v24(v13, v9);
    sub_10007A0C4();
    sub_10007A0F4(v5);
    OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v16, v8, v5, v19);
    sub_10000F718();
    v25 = sub_1000C2CD4();
    v23(v25);
    sub_100124318();
    v26 = sub_1001243CC();
    return ((uint64_t (*)(uint64_t))v24)(v26);
  }
LABEL_7:
  __break(1u);
  return result;
}

void P2PPeerCoordinator.makeConnectionAssertion()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(_QWORD);
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  NSObject *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  os_log_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  os_log_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(_QWORD);
  uint64_t v44;
  int v45;
  uint64_t v46;
  _QWORD v47[3];

  sub_10002626C();
  v1 = v0;
  v2 = sub_10000E440();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v40 - v7;
  __chkstk_darwin(v9);
  v11 = (char *)&v40 - v10;
  __chkstk_darwin(v12);
  UUID.init()(v13);
  v14 = *(_QWORD *)(v3 + 16);
  sub_1001240A4((uint64_t)v8);
  sub_10000B2F8(v1 + 120, (uint64_t)v47, 33);
  sub_10011A494((uint64_t)v11, (uint64_t)v8);
  swift_endAccess(v47);
  v15 = *(void (**)(_QWORD))(v3 + 8);
  sub_10012417C((uint64_t)v11);
  if (qword_1002A98E0 != -1)
    swift_once(&qword_1002A98E0, sub_10011398C);
  v16 = sub_10000F6E4();
  v17 = sub_100006FB4(v16, (uint64_t)qword_1002B21C0);
  sub_1001240A4((uint64_t)v5);
  v18 = swift_retain_n(v1, 4);
  Logger.logObject.getter(v18);
  sub_10002D844();
  v19 = sub_1001242F4();
  v45 = v20;
  if (os_log_type_enabled(v19, (os_log_type_t)v20))
  {
    v21 = sub_10000797C(32);
    v44 = v3;
    v22 = v21;
    v41 = sub_10000797C(64);
    v47[0] = v41;
    *(_DWORD *)v22 = 136446722;
    v43 = v15;
    v40 = v17;
    v23 = sub_100111930();
    v46 = sub_100026754(v23, v24);
    v42 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47, v22 + 4);
    sub_10000F650(v1);
    sub_10000E420();
    *(_WORD *)(v22 + 12) = 2082;
    sub_100124280(&qword_1002AA670, v25, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v27 = dispatch thunk of CustomStringConvertible.description.getter(v2, v26);
    v46 = sub_100026754(v27, v28);
    v15 = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47, v22 + 14);
    sub_10000E420();
    sub_10012417C((uint64_t)v5);
    *(_WORD *)(v22 + 22) = 2050;
    v29 = *(_QWORD *)(*(_QWORD *)(v1 + 120) + 16);
    sub_100026AEC();
    v46 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47, v22 + 24);
    sub_100026AEC();
    v30 = v40;
    _os_log_impl((void *)&_mh_execute_header, v40, (os_log_type_t)v45, "%{public}s: Took connection assertion '%{public}s', count is now %{public}ld", (uint8_t *)v22, 0x20u);
    v31 = v41;
    sub_100026A58(v41, v32, (uint64_t)&type metadata for Any + 8);
    sub_100007958(v31);
    v33 = v22;
    v3 = v44;
    sub_100007958(v33);

  }
  else
  {
    swift_release_n(v1, 3);
    sub_10012417C((uint64_t)v5);

    sub_100026AEC();
  }
  v34 = sub_1000088D8((uint64_t)&unk_10028CA18, 24);
  swift_weakInit(v34 + 16, v1);
  sub_1001240A4((uint64_t)v11);
  v35 = *(unsigned __int8 *)(v3 + 80);
  v36 = (v35 + 24) & ~v35;
  v37 = swift_allocObject(&unk_10028CA40, v36 + v4, v35 | 7);
  *(_QWORD *)(v37 + 16) = v34;
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v37 + v36, v11, v2);
  v38 = type metadata accessor for AnyCancellable(0);
  swift_allocObject(v38, *(unsigned int *)(v38 + 48), *(unsigned __int16 *)(v38 + 52));
  sub_100060054();
  AnyCancellable.init(_:)(sub_10011A720, v37);
  v39 = sub_1000C2CD4();
  v15(v39);
  swift_release();
  sub_10000E4E0();
}

uint64_t sub_1001154CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD aBlock[6];

  v24 = a1;
  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v27 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v25 = *(_QWORD *)(v6 - 8);
  v26 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v12 = sub_1000078E0(0, (unint64_t *)&qword_1002AA660, OS_dispatch_queue_ptr);
  v13 = (void *)static OS_dispatch_queue.main.getter(v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v9);
  v14 = *(unsigned __int8 *)(v10 + 80);
  v15 = (v14 + 24) & ~v14;
  v16 = swift_allocObject(&unk_10028CCD0, v15 + v11, v14 | 7);
  *(_QWORD *)(v16 + 16) = v24;
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v16 + v15, (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  aBlock[4] = sub_1001239D8;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000E610;
  aBlock[3] = &unk_10028CCE8;
  v17 = _Block_copy(aBlock);
  swift_retain();
  v18 = swift_release();
  static DispatchQoS.unspecified.getter(v18);
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_1000840B4((unint64_t *)&qword_1002AA6C0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v20 = v19;
  v21 = sub_1000055B0((uint64_t *)&unk_1002AC9A0);
  sub_10006D048((unint64_t *)&qword_1002AA6D0, (uint64_t *)&unk_1002AC9A0);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v21, v22, v3, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8);
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v27 + 8))(v5, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v8, v26);
}

uint64_t sub_100115754(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v5, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    sub_100114A84(a2);
    return swift_release();
  }
  return result;
}

_QWORD *sub_1001157B0(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(v1 + 96);
  v4 = swift_allocObject(&unk_10028CC58, 33, 7);
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v4 + 24) = v1;
  *(_BYTE *)(v4 + 32) = a1;
  v5 = type metadata accessor for Completion();
  swift_allocObject(v5, 48, 7);
  swift_retain();
  return Completion.init(file:line:body:)(0xD000000000000061, 0x80000001002579F0, 521, (uint64_t)sub_100123044, v4);
}

void sub_100115848(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (*(_QWORD *)(a3 + 96) == a2)
  {
    if (a1)
    {
      swift_errorRetain(a1);
      sub_1001158BC(a1, 0, 0, 0);
      swift_errorRelease(a1);
    }
    else if ((a4 & 1) == 0)
    {
      sub_1001158BC(0, 0, 0, 0xC000000000000000);
    }
  }
}

void sub_1001158BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = sub_10000F6E4();
  __chkstk_darwin(v8);
  sub_1000268CC();
  sub_100115A1C(a1, a2, a3, a4);
  sub_10002D8A4();
}

void sub_100115A1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = sub_10000F6E4();
  __chkstk_darwin(v5);
  sub_100124184();
  type metadata accessor for UUID(0);
  sub_1000EFF68();
  __chkstk_darwin(v6);
  sub_10000E478();
  __asm { BR              X10 }
}

void sub_100115ABC()
{
  int v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t v16;
  Swift::String v17;
  Swift::String v18;

  if (v0)
  {
    if (v0 != 1)
    {
      *(_QWORD *)(v4 - 136) = 0;
      *(_QWORD *)(v4 - 128) = 0xE000000000000000;
      v12 = v2;
      _StringGuts.grow(_:)(36);
      v13 = *(_QWORD *)(v4 - 128);
      *(_QWORD *)(v4 - 104) = *(_QWORD *)(v4 - 136);
      *(_QWORD *)(v4 - 96) = v13;
      sub_10012419C();
      v15._countAndFlagsBits = v14 - 69;
      v15._object = (void *)0x80000001002581D0;
      String.append(_:)(v15);
      v16 = *(_QWORD *)(*(_QWORD *)(v4 - 208) + 88);
      sub_10002D790();
      sub_1001137BC(v16);
      String.append(_:)(v17);
      sub_10002645C();
      sub_10000E568();
      v18._countAndFlagsBits = 540945696;
      v18._object = (void *)0xE400000000000000;
      String.append(_:)(v18);
      *(_QWORD *)(v4 - 136) = *(_QWORD *)(v4 - 72);
      *(_QWORD *)(v4 - 128) = v3;
      *(_QWORD *)(v4 - 120) = *(_QWORD *)(v4 - 200);
      *(_QWORD *)(v4 - 112) = v12;
      _print_unlocked<A, B>(_:_:)(v4 - 136, v4 - 104, &type metadata for P2PPeerCoordinator.Event, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, *(_QWORD *)(v4 - 104), *(_QWORD *)(v4 - 96), "EnsembleAgent/P2PPeerCoordinator.swift", 38, 2, 690, 0);
      __break(1u);
      JUMPOUT(0x100117030);
    }
    v5 = v2;
    v6 = v3;
    v9 = v1 & 0x3FFFFFFFFFFFFFFFLL;
    v7 = *(uint8_t **)(v4 - 72);
    v8 = *(_QWORD *)(v4 - 200);
  }
  else
  {
    v5 = v2;
    v6 = v3;
    v7 = *(uint8_t **)(v4 - 72);
    v8 = *(_QWORD *)(v4 - 200);
    v9 = v1;
  }
  v10 = sub_1000B219C();
  swift_initStackObject(v10, v4 - 184);
  sub_100121680((uint64_t)v7, v6, v8, v5);
  sub_1000269EC();
  v11 = Completion.init(file:line:)();
  sub_1001177FC(v9, (uint64_t)v11, v7);
  sub_100124154((uint64_t)v7, v6, v8);
  sub_1000955CC();
  swift_release();
  sub_10003AF60();
}

_QWORD *sub_10011705C(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  _QWORD *v8;

  v8 = _swiftEmptyArrayStorage;
  swift_retain();
  swift_retain();
  sub_1001143C0(v3, v3, a1, a2, a3, &v8);
  return v8;
}

uint64_t sub_1001170CC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t inited;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  objc_class *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  _BYTE v38[112];
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  ValueMetadata *v42;
  unint64_t v43;
  char v44[112];

  if (qword_1002A98E0 != -1)
    swift_once(&qword_1002A98E0, sub_10011398C);
  v9 = type metadata accessor for Logger(0);
  sub_100006FB4(v9, (uint64_t)qword_1002B21C0);
  swift_retain();
  sub_10008A214(a2, a3, a4);
  swift_retain();
  v10 = sub_10008A214(a2, a3, a4);
  v11 = Logger.logObject.getter(v10);
  v13 = static os_log_type_t.default.getter(v11, v12);
  v35 = v5;
  if (os_log_type_enabled(v11, v13))
  {
    v14 = swift_slowAlloc(22, -1);
    v34 = swift_slowAlloc(64, -1);
    v39 = v34;
    *(_DWORD *)v14 = 136446466;
    v15 = sub_100111930();
    v37 = sub_100006FCC(v15, v16, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, v38, v14 + 4);
    swift_release_n(v5, 2);
    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 2082;
    sub_10008A214(a2, a3, a4);
    sub_100089498(a2, a3, a4);
    v18 = v17;
    v20 = v19;
    sub_100089820(a2, a3, a4);
    v37 = sub_100006FCC(v18, v20, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, v38, v14 + 14);
    swift_bridgeObjectRelease();
    sub_100089820(a2, a3, a4);
    sub_100089820(a2, a3, a4);
    _os_log_impl((void *)&_mh_execute_header, v11, v13, "%{public}s: Send Request: %{public}s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v34, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    swift_release_n(v5, 2);
    sub_100089820(a2, a3, a4);
    sub_100089820(a2, a3, a4);
  }

  v21 = sub_1000055B0(&qword_1002AD130);
  inited = swift_initStackObject(v21, v44);
  *(_OWORD *)(inited + 16) = xmmword_10021BBA0;
  v39 = 31;
  sub_10008A214(a2, a3, a4);
  AnyHashable.init<A>(_:)((_QWORD *)(inited + 32), &v39);
  v42 = &type metadata for P2PMessage;
  v23 = sub_100122F84();
  v39 = a2;
  v40 = a3;
  v43 = v23;
  v41 = a4;
  sub_10008A214(a2, a3, a4);
  v24 = sub_1001AB2A4(&v39);
  v26 = v25;
  sub_100005988(&v39);
  *(_QWORD *)(inited + 96) = &type metadata for Data;
  *(_QWORD *)(inited + 72) = v24;
  *(_QWORD *)(inited + 80) = v26;
  v27 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  sub_100089820(a2, a3, a4);
  v28 = swift_initStackObject(v21, v38);
  *(_OWORD *)(v28 + 16) = xmmword_10021BBA0;
  v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(RPOptionTimeoutSeconds);
  v40 = v29;
  AnyHashable.init<A>(_:)((_QWORD *)(v28 + 32), &v39);
  *(_QWORD *)(v28 + 96) = &type metadata for Int;
  *(_QWORD *)(v28 + 72) = 30;
  v30 = (objc_class *)Dictionary.init(dictionaryLiteral:)(v28, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  v31 = swift_allocObject(&unk_10028CC30, 32, 7);
  *(_QWORD *)(v31 + 16) = v35;
  *(_QWORD *)(v31 + 24) = a5;
  v32 = qword_1002A9808;
  swift_retain();
  swift_retain();
  if (v32 != -1)
    swift_once(&qword_1002A9808, sub_10002A384);
  sub_100029B4C(v27, qword_1002B6D28, unk_1002B6D30, v30, (uint64_t)sub_100122FE8, v31);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1001175CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  if (qword_1002A98E0 != -1)
    swift_once(&qword_1002A98E0, sub_10011398C);
  v5 = type metadata accessor for Logger(0);
  sub_100006FB4(v5, (uint64_t)qword_1002B21C0);
  v6 = swift_retain_n(v2, 2);
  v7 = Logger.logObject.getter(v6);
  v9 = static os_log_type_t.default.getter(v7, v8);
  if (os_log_type_enabled(v7, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v18 = v11;
    *(_DWORD *)v10 = 136446210;
    v12 = sub_100111930();
    v17 = sub_100006FCC(v12, v13, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v10 + 4);
    swift_release_n(v2, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v9, "%{public}s: Connection Ready", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

    swift_release_n(v2, 2);
  }
  v14 = *(_QWORD *)(v2 + 96) + 1;
  do
  {
    v15 = v14;
    v14 = 1;
  }
  while (!v15);
  *(_QWORD *)(v2 + 88) = a1 | 0x8000000000000000;
  *(_QWORD *)(v2 + 96) = v15;
  swift_release();
  swift_retain();
  return sub_1001116C4(a2, (void (*)(uint64_t))sub_1000C4E9C);
}

uint64_t sub_1001177BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1001131CC(a3);
  return Completion.callAsFunction(_:)(a1);
}

uint64_t sub_1001177FC(uint64_t a1, uint64_t a2, uint8_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t ObjectType;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint8_t *v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52[7];

  v4 = v3;
  v49 = a1;
  v50 = a2;
  v6 = type metadata accessor for DispatchTimeInterval(0);
  v48 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v43 - v10;
  v12 = type metadata accessor for DispatchTime(0);
  v46 = *(_QWORD *)(v12 - 8);
  v47 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Logger(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    swift_errorRetain(a3);
    if (qword_1002A98E0 != -1)
      swift_once(&qword_1002A98E0, sub_10011398C);
    v19 = sub_100006FB4(v15, (uint64_t)qword_1002B21C0);
    v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v19, v15);
    __chkstk_darwin(v20);
    *(&v43 - 2) = a3;
    sub_1000E45AC((int)sub_1001238D4, v4, (int)sub_10000B008, (int)(&v43 - 4), v21, v22, v23, v24, (uint64_t)v43, v44, v45, v46, v47, v48, v49, v50, v51, v52[0], v52[1],
      v52[2],
      v52[3],
      v52[4],
      v52[5],
      v52[6]);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    swift_errorRelease(a3);
  }
  else
  {
    if (qword_1002A98E0 != -1)
      swift_once(&qword_1002A98E0, sub_10011398C);
    sub_100006FB4(v15, (uint64_t)qword_1002B21C0);
    v25 = swift_retain_n(v4, 2);
    v26 = Logger.logObject.getter(v25);
    v28 = static os_log_type_t.default.getter(v26, v27);
    if (os_log_type_enabled(v26, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(12, -1);
      v45 = swift_slowAlloc(32, -1);
      v52[0] = v45;
      v44 = v29;
      *(_DWORD *)v29 = 136446210;
      v43 = v29 + 4;
      v30 = sub_100111930();
      v51 = sub_100006FCC(v30, v31, v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, v52, v43);
      swift_release_n(v4, 2);
      swift_bridgeObjectRelease();
      v32 = v44;
      _os_log_impl((void *)&_mh_execute_header, v26, v28, "%{public}s: Deactivate", v44, 0xCu);
      v33 = v45;
      swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v32, -1, -1);

    }
    else
    {

      swift_release_n(v4, 2);
    }
  }
  v34 = *(_QWORD *)(v4 + 112);
  ObjectType = swift_getObjectType(v34);
  swift_unknownObjectRetain(v34);
  static DispatchTime.distantFuture.getter(v36);
  sub_10007A0C4();
  sub_10007A0F4(v8);
  OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v14, v11, v8, ObjectType);
  swift_unknownObjectRelease(v34);
  v37 = *(void (**)(char *, uint64_t))(v48 + 8);
  v37(v8, v6);
  v37(v11, v6);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v14, v47);
  v38 = *(_QWORD *)(v4 + 96) + 1;
  do
  {
    v39 = v38;
    v38 = 1;
  }
  while (!v39);
  *(_QWORD *)(v4 + 88) = 0xC000000000000000;
  *(_QWORD *)(v4 + 96) = v39;
  swift_release();
  sub_100114834();
  if (a3)
  {
    v40 = a3;
  }
  else
  {
    sub_1000078E0(0, (unint64_t *)&qword_1002AAB80, NSError_ptr);
    v40 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(-6723, 0xD000000000000010, 0x8000000100257850, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Ensemble_executables/EnsembleAgent/P2PPeerCoordinator.swift", 97, 2, 774);
  }
  swift_errorRetain(a3);
  sub_1001131CC((uint64_t)v40);
  Completion.callAsFunction(_:)((uint64_t)a3);
  swift_errorRetain(a3);
  swift_retain();
  sub_10011477C(v41, (unsigned __int8 *)v4, a3);
  return swift_errorRelease(v40);
}

uint64_t sub_100117C88()
{
  return sub_100111930();
}

uint64_t sub_100117CA8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t result;

  v2 = *(_QWORD **)(v1 + 56);
  if (v2[15] == a1)
    return 1129208147;
  if (v2[8] == a1)
    return 1414420037;
  if (v2[5] == a1)
    return 1195463236;
  if (v2[13] == a1)
    return 1346980931;
  if (v2[4] == a1)
    return 0;
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000012, 0x8000000100258340, "EnsembleAgent/P2PPeerCoordinator.swift", 38, 2, 737, 0);
  __break(1u);
  return result;
}

void sub_100117D94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  Swift::String v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  uint64_t v40;
  os_log_type_t v41;
  uint64_t v42;
  uint64_t v43;

  sub_10002626C();
  v1 = v0;
  v3 = v2;
  v4 = sub_10000E440();
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_10002641C();
  v8 = v7 - v6;
  sub_10002679C();
  sub_1000C8850();
  v13 = v12;
  if (v12)
  {
    v14 = v10;
    v15 = v11;
    v42 = v9;
    if (qword_1002A98E0 != -1)
      swift_once(&qword_1002A98E0, sub_10011398C);
    v16 = sub_10000F6E4();
    v17 = sub_100006FB4(v16, (uint64_t)qword_1002B21C0);
    sub_1000404AC(v1);
    v18 = sub_100040544();
    Logger.logObject.getter(v18);
    v19 = sub_10002D844();
    if (os_log_type_enabled(v17, v19))
    {
      sub_10010192C(HIBYTE(v15));
      v41 = v19;
      v20 = sub_10000797C(22);
      v40 = sub_10000797C(64);
      v43 = v40;
      *(_DWORD *)v20 = 136446466;
      v39 = v17;
      v21 = sub_100111930();
      v23 = sub_1001243E4(v21, v22);
      v24 = sub_100123E4C(v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v24, v25, v20 + 4);
      sub_10000F650(v1);
      sub_10000E420();
      *(_WORD *)(v20 + 12) = 2082;
      sub_100040544();
      sub_10012416C();
      v26 = UUID.init(uuid:)(v14, v14 >> 8, v14 >> 16, v14 >> 24, HIDWORD(v14), v14 >> 40);
      v27 = UUID.uuidString.getter(v26);
      v29 = v28;
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v8, v4);
      v30 = sub_1000599D0(8, v27, v29);
      v31 = static String._fromSubstring(_:)(v30);
      v33 = v32;
      sub_10000E420();
      v34._countAndFlagsBits = v31;
      v34._object = v33;
      String.append(_:)(v34);
      sub_1000267C4();
      v35 = sub_100006FCC(v42, v13, &v43);
      v36 = sub_100123E4C(v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v36, v37, v20 + 14);
      sub_100026AF4(v13);
      sub_10000E420();
      _os_log_impl((void *)&_mh_execute_header, v39, v41, "%{public}s: Prepare Stream: %{public}s", (uint8_t *)v20, 0x16u);
      sub_100026A58(v40, v38, (uint64_t)&type metadata for Any + 8);
      sub_100007958(v40);
      sub_100007958(v20);

    }
    else
    {

      sub_100026AF4(v13);
      sub_10000F650(v1);
    }
    sub_1001158BC(v3, 0, 0, 0x6000000000000000);
  }
  sub_10000E4E0();
}

void sub_1001180C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  Swift::String v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  os_log_type_t v52;
  uint64_t v53;
  id v54;
  uint64_t v55[12];
  uint64_t v56;
  uint64_t v57;

  sub_10002626C();
  v56 = v2;
  v57 = v3;
  v4 = v0;
  v6 = v5;
  v8 = v7;
  v9 = sub_10000E440();
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_100124184();
  sub_1000269EC();
  sub_1000C8850();
  if (v12)
  {
    v15 = v12;
    v16 = v13;
    v17 = v14;
    v51 = v11;
    if (qword_1002A98E0 != -1)
      swift_once(&qword_1002A98E0, sub_10011398C);
    v18 = sub_10000F6E4();
    v19 = sub_100006FB4(v18, (uint64_t)qword_1002B21C0);
    sub_1000404AC(v4);
    v20 = sub_1000432E0();
    Logger.logObject.getter(v20);
    sub_10002D844();
    v21 = sub_1001242F4();
    v52 = v22;
    if (os_log_type_enabled(v21, v22))
    {
      sub_10010192C(HIWORD(v17));
      v53 = v4;
      v23 = sub_10000797C(22);
      v49 = sub_10000797C(64);
      v55[0] = v49;
      *(_DWORD *)v23 = 136446466;
      v50 = v6;
      v48 = v19;
      v24 = sub_100111930();
      v26 = sub_1001243E4(v24, v25);
      v27 = sub_100123E4C(v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v27, v28, v23 + 4);
      sub_10000F650(v53);
      sub_10000E420();
      *(_WORD *)(v23 + 12) = 2082;
      sub_1000432E0();
      sub_10012416C();
      v29 = UUID.init(uuid:)(v16, v16 >> 8, v16 >> 16, v16 >> 24, HIDWORD(v16), v16 >> 40);
      v30 = UUID.uuidString.getter(v29);
      v32 = v31;
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v1, v9);
      v33 = sub_1000599D0(8, v30, v32);
      v34 = static String._fromSubstring(_:)(v33);
      v36 = v35;
      swift_bridgeObjectRelease();
      v37._countAndFlagsBits = v34;
      v6 = v50;
      v37._object = v36;
      String.append(_:)(v37);
      sub_10000E4A0();
      v38 = sub_100006FCC(v51, v15, v55);
      v39 = sub_100123E4C(v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v39, v40, v23 + 14);
      sub_100026AF4(v15);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v48, v52, "%{public}s: Accept Stream: %{public}s", (uint8_t *)v23, 0x16u);
      sub_100026A58(v49, v41, (uint64_t)&type metadata for Any + 8);
      sub_100007958(v49);
      sub_100007958(v23);

    }
    else
    {

      sub_100026AF4(v15);
      sub_10000F650(v4);
    }
    sub_1001158BC(v8, v6, 0, 0x8000000000000000);
    sub_10000E4E0();
  }
  else
  {
    sub_10002D82C(v11, (unint64_t *)&qword_1002AAB80, NSError_ptr);
    sub_1000955C0();
    sub_100123ED8();
    v54 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(v42, v43, v44, v45, v46, v47, 794);
    Completion.callAsFunction(_:)((uint64_t)v54);

  }
}

_QWORD *P2PPeerCoordinator.deinit()
{
  _QWORD *v0;

  sub_100026600();
  swift_unknownObjectRelease(v0[5]);
  swift_unknownObjectRelease(v0[7]);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_unknownObjectRelease(v0[14]);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t P2PPeerCoordinator.__deallocating_deinit()
{
  uint64_t v0;

  P2PPeerCoordinator.deinit();
  return swift_deallocClassInstance(v0, 128, 7);
}

__n128 sub_1001184E0@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  __n128 result;

  result = *(__n128 *)(*(_QWORD *)v1 + 24);
  *a1 = result;
  return result;
}

Swift::Void __swiftcall P2PPeerCoordinator.cancel()()
{
  uint64_t v0;
  _QWORD *v1;

  v0 = type metadata accessor for Completion();
  sub_1000088D8(v0, 48);
  v1 = sub_100124048();
  sub_100111C64((uint64_t)v1, 0);
  sub_100095534((uint64_t)v1);
}

void sub_100118540()
{
  P2PPeerCoordinator.cancel()();
}

void sub_100118560(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  sub_100113938();
  if (v4)
  {
    if ((sub_100113478(a1) & 1) != 0)
    {
      v5 = type metadata accessor for Completion();
      sub_1000088D8(v5, 48);
      v6 = sub_100124048();
      sub_100111C64((uint64_t)v6, a2);
      sub_1000269A0();
    }
    swift_release();
  }
  else
  {
    sub_10002644C();
  }
}

void sub_1001185F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = v3;
  sub_100114F44();
  sub_100113938();
  if (v8)
  {
    v9 = sub_100112B40(a1);
    v11 = v10;
    swift_release();
    if (v9)
    {
      v12 = sub_100008904();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 32))(v4, a2, a3, v12, v11);
      sub_10000F718();
    }
  }
}

void sub_1001186B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t);

  sub_100113938();
  if (v2 && (v3 = sub_100112B40(a1), sub_100026AEC(), v3))
  {
    sub_100008904();
    v4 = sub_1000C2CD4();
    v5(v4);
    swift_unknownObjectRelease(v3);
  }
  else
  {
    sub_10002644C();
  }
}

uint64_t sub_10011872C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, _QWORD))
{
  unint64_t v8;
  uint64_t v9;
  char v10;
  char v11;

  if (a1)
    v8 = a1 | 0x8000000000000000;
  else
    v8 = 0x4000000000000000;
  sub_10008A214(a2, a3, v8);
  swift_errorRetain(a1);
  v9 = sub_10011130C(a2, a3, v8);
  v11 = v10 & 1;
  a4(v9, v10 & 1);
  sub_100089820(a2, a3, v8);
  return sub_10012395C(v9, v11);
}

uint64_t sub_1001187D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  id v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  id v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  NSObject *v36;
  uint64_t v37;
  os_log_type_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  os_log_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void *v56;
  uint64_t v57[8];

  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = &unk_1002A9000;
  if (a3)
  {
    v12 = (id)swift_errorRetain(a3);
    goto LABEL_7;
  }
  if (!a1)
  {
    sub_1000078E0(0, (unint64_t *)&qword_1002AAB80, NSError_ptr);
    v14 = -6734;
    v15 = 0;
    v16 = 0;
    v17 = 982;
LABEL_6:
    v12 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(v14, v15, v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Ensemble_executables/EnsembleAgent/P2PPeerCoordinator.swift", 97, 2, v17);
    a3 = (uint64_t)v12;
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  v29 = sub_100089838(v13);
  v31 = v30;
  v55 = v32;
  swift_bridgeObjectRelease();
  if (qword_1002A98E0 != -1)
    swift_once(&qword_1002A98E0, sub_10011398C);
  sub_100006FB4(v7, (uint64_t)qword_1002B21C0);
  v33 = v55;
  v34 = v55 >> 62;
  swift_retain();
  sub_10008A214(v29, v31, v33);
  swift_retain();
  v35 = sub_10008A214(v29, v31, v33);
  v36 = Logger.logObject.getter(v35);
  v38 = static os_log_type_t.default.getter(v36, v37);
  HIDWORD(v54) = v38;
  if (os_log_type_enabled(v36, v38))
  {
    v39 = swift_slowAlloc(22, -1);
    v53 = v34;
    v34 = v39;
    v52 = swift_slowAlloc(64, -1);
    v57[0] = v52;
    *(_DWORD *)v34 = 136446466;
    v51 = v36;
    v40 = sub_100111930();
    v56 = (void *)sub_100006FCC(v40, v41, v57);
    v50 = v57;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57, v34 + 4);
    swift_release_n(a4, 2);
    swift_bridgeObjectRelease();
    *(_WORD *)(v34 + 12) = 2082;
    v49 = v34 + 14;
    sub_10008A214(v29, v31, v55);
    sub_100089498(v29, v31, v55);
    v43 = v42;
    v45 = v44;
    sub_100089820(v29, v31, v55);
    v46 = v43;
    v33 = v55;
    v56 = (void *)sub_100006FCC(v46, v45, v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v50, v49);
    swift_bridgeObjectRelease();
    sub_100089820(v29, v31, v33);
    sub_100089820(v29, v31, v33);
    v36 = v51;
    _os_log_impl((void *)&_mh_execute_header, v51, BYTE4(v54), "%{public}s: Received Response: %{public}s", (uint8_t *)v34, 0x16u);
    v47 = v52;
    swift_arrayDestroy(v52, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v47, -1, -1);
    v48 = v34;
    LODWORD(v34) = v53;
    swift_slowDealloc(v48, -1, -1);
  }
  else
  {
    swift_release_n(a4, 2);
    sub_100089820(v29, v31, v33);
    sub_100089820(v29, v31, v33);
  }

  v11 = (_QWORD *)&unk_1002A9000;
  if (!(_DWORD)v34)
  {
    sub_1000078E0(0, (unint64_t *)&qword_1002AAB80, NSError_ptr);
    v16 = 0x8000000100258300;
    v14 = -6735;
    v15 = 0xD000000000000014;
    v17 = 993;
    goto LABEL_6;
  }
  if ((_DWORD)v34 == 1)
    return Completion.callAsFunction(_:)(0);
  a3 = v33 & 0x3FFFFFFFFFFFFFFFLL;
LABEL_7:
  swift_willThrow(v12);
  v57[0] = a3;
  v18 = sub_1000055B0((uint64_t *)&unk_1002AABA0);
  v19 = sub_1000078E0(0, (unint64_t *)&qword_1002AAB80, NSError_ptr);
  swift_dynamicCast(&v56, v57, v18, v19, 0);
  v20 = v56;
  if (v11[284] != -1)
    swift_once(&qword_1002A98E0, sub_10011398C);
  v21 = sub_100006FB4(v7, (uint64_t)qword_1002B21C0);
  v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v21, v7);
  __chkstk_darwin(v22);
  *(&v49 - 2) = (uint64_t)v20;
  sub_1000E45AC((int)sub_100122FF0, a4, (int)sub_100026210, (int)(&v49 - 4), v23, v24, v25, v26, v49, v50, (uint64_t)v51, v52, v53, v54, v55, (uint64_t)v56, v57[0], v57[1], v57[2],
    v57[3],
    v57[4],
    v57[5],
    v57[6],
    v57[7]);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v27 = v20;
  Completion.callAsFunction(_:)((uint64_t)v20);

  return swift_errorRelease(v57[0]);
}

uint64_t sub_100118CC4(uint64_t a1, uint64_t a2)
{
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v6;

  v6 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(a2, 1);
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  String.append(_:)(v2);
  v3._countAndFlagsBits = sub_100111930();
  String.append(_:)(v3);
  sub_10000E568();
  v4._countAndFlagsBits = sub_1000C2CD4();
  String.append(_:)(v4);
  return v6;
}

uint64_t sub_100118D40(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  unint64_t v10;
  unint64_t v12;
  char v14;

  if (a1 == 0x656369766564 && a2 == 0xE600000000000000)
  {
    v5 = 0xE600000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656369766564, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 1802398060 && a2 == 0xE400000000000000)
  {
    v8 = 0xE400000000000000;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1802398060, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 1684366707 && a2 == 0xE400000000000000)
  {
    v10 = 0xE400000000000000;
    goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1684366707, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2;
  }
  if (a1 == 0x6574617473 && a2 == 0xE500000000000000)
  {
    v12 = 0xE500000000000000;
    goto LABEL_32;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6574617473, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
LABEL_32:
    swift_bridgeObjectRelease(v12);
    return 3;
  }
  if (a1 == 0x736D6165727473 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease(0xE700000000000000);
    return 4;
  }
  else
  {
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(0x736D6165727473, 0xE700000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v14 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_100118F24(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100118F54 + 4 * byte_100226DEC[a1]))(0x656369766564, 0xE600000000000000);
}

uint64_t sub_100118F54()
{
  return 1802398060;
}

uint64_t sub_100118F64()
{
  return 1684366707;
}

uint64_t sub_100118F74()
{
  return 0x6574617473;
}

uint64_t sub_100118F88()
{
  return 0x736D6165727473;
}

uint64_t sub_100118FA0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15[8];
  _BYTE v16[8];
  _BYTE v17[8];

  v6 = v2;
  sub_1000055B0(&qword_1002B23D8);
  sub_1001018E4();
  __chkstk_darwin(v8);
  sub_1000268CC();
  v9 = a1[3];
  v10 = a1[4];
  sub_10000DBE4(a1, v9);
  v11 = sub_10011AA40();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for P2PPeerCoordinator.DiagnosticState.CodingKeys, &type metadata for P2PPeerCoordinator.DiagnosticState.CodingKeys, v11, v9, v10);
  sub_10011AA7C((uint64_t)v6, (uint64_t)v17);
  sub_10011AA7C((uint64_t)v17, (uint64_t)v15);
  sub_1000055B0((uint64_t *)&unk_1002AC160);
  sub_100101684((unint64_t *)&qword_1002B2910, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
  sub_100123E84();
  if (!v3)
  {
    sub_100123F9C(v6[1], v6[2], 1);
    sub_100123F9C(v6[3], v6[4], 2);
    v12 = v6[5];
    v13 = v6[6];
    v15[0] = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v12, v13, v15, v1);
    sub_10011AA7C((uint64_t)(v6 + 7), (uint64_t)v16);
    sub_10011AA7C((uint64_t)v16, (uint64_t)v15);
    sub_100123E84();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v1);
}

void sub_100119120(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;

  v5 = sub_1000055B0(&qword_1002B2478);
  sub_1000EFF68();
  __chkstk_darwin(v6);
  sub_10002641C();
  v7 = a1[3];
  v8 = a1[4];
  sub_10000DBE4(a1, v7);
  v9 = sub_10011AA40();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for P2PPeerCoordinator.DiagnosticState.CodingKeys, &type metadata for P2PPeerCoordinator.DiagnosticState.CodingKeys, v9, v7, v8);
  if (v2)
  {
    sub_100005988(a1);
    swift_bridgeObjectRelease();
    sub_1000267C4();
    sub_10002D89C();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1000055B0((uint64_t *)&unk_1002AC160);
    sub_100101684(&qword_1002AD110, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    sub_100124258();
    sub_1001243B8();
    v10 = v25;
    LOBYTE(v25) = 1;
    v24 = v10;
    swift_bridgeObjectRetain();
    v11 = sub_1001240EC();
    v13 = v12;
    v22 = v11;
    v23 = a2;
    sub_10012430C(v12, 2);
    v14 = sub_1001240EC();
    v16 = v15;
    v21 = v14;
    sub_10012430C(v15, 3);
    v19 = KeyedDecodingContainer.decode(_:forKey:)(&v25, v5);
    v20 = v17;
    swift_bridgeObjectRetain();
    sub_100124258();
    sub_1001243B8();
    sub_100123DC4();
    v18 = v25;
    sub_10003AFBC();
    swift_bridgeObjectRelease();
    sub_100005988(a1);
    sub_10000E420();
    swift_bridgeObjectRelease();
    sub_10002D89C();
    sub_1000267C4();
    sub_10000E568();
    *v23 = v24;
    v23[1] = v22;
    v23[2] = v13;
    v23[3] = v21;
    v23[4] = v16;
    v23[5] = v19;
    v23[6] = v20;
    v23[7] = v18;
  }
  sub_10003AF60();
}

uint64_t sub_1001193A0()
{
  unsigned __int8 *v0;

  return sub_100118F24(*v0);
}

uint64_t sub_1001193A8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100118D40(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001193CC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10011AA40();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001193F4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10011AA40();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10011941C@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[2];
  __int128 v8;
  __int128 v9;

  sub_100119120(a1, v7);
  if (!v2)
  {
    v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    result = *(double *)&v8;
    v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }
  return result;
}

uint64_t sub_10011945C(_QWORD *a1)
{
  return sub_100118FA0(a1);
}

uint64_t sub_100119494()
{
  return sub_100112794();
}

uint64_t sub_1001194A8(uint64_t result, uint64_t a2, _QWORD *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }
  return result;
}

uint64_t sub_1001194C4(uint64_t *a1)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v2 = sub_10006D08C(v2);
    *a1 = v2;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v7[0] = v2 + 32;
  v7[1] = v4;
  sub_1001221D0(v7);
  return specialized ContiguousArray._endMutation()(v5);
}

uint64_t sub_10011953C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v25[9];

  v7 = *v3;
  Hasher.init(_seed:)(v25, *(_QWORD *)(*v3 + 40));
  sub_10003B1A8();
  String.hash(into:)(v25, a2, a3);
  v8 = sub_10004740C();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  sub_100123E38();
  if ((v11 & 1) != 0)
  {
    v12 = *(_QWORD *)(v7 + 48);
    v13 = (uint64_t *)(v12 + 16 * v10);
    v14 = v13[1];
    v15 = *v13 == a2 && v14 == a3;
    if (v15 || (sub_100124288(*v13, v14) & 1) != 0)
    {
LABEL_7:
      sub_10000E568();
      sub_10000E4A0();
      v16 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v17 = v16[1];
      *a1 = *v16;
      a1[1] = v17;
      swift_bridgeObjectRetain(v17);
      return 0;
    }
    v19 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v19;
      sub_100123E38();
      if ((v20 & 1) == 0)
        break;
      v21 = (uint64_t *)(v12 + 16 * v10);
      v22 = v21[1];
      v23 = *v21 == a2 && v22 == a3;
      if (v23 || (sub_100124288(*v21, v22) & 1) != 0)
        goto LABEL_7;
    }
  }
  sub_10000E4A0();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v25[0] = *v3;
  *v3 = 0x8000000000000000;
  sub_100040544();
  sub_10011D7AC(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  sub_1001242AC(v25[0]);
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

void sub_100119698(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t *v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  uint64_t v32;
  char *v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  _QWORD *v73;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99[9];

  v4 = a3;
  v5 = a2;
  v92 = a2 >> 16;
  v95 = a2 >> 8;
  v86 = HIDWORD(a2);
  v89 = a2 >> 24;
  v80 = HIWORD(a2);
  v83 = a2 >> 40;
  v6 = HIBYTE(a2);
  v7 = a3 >> 16;
  v8 = a3 >> 24;
  v9 = HIDWORD(a3);
  v10 = a3 >> 40;
  v11 = HIWORD(a3);
  v76 = HIBYTE(a3);
  v78 = a3 >> 8;
  v12 = *v3;
  v13 = Hasher.init(_seed:)(v99, *(_QWORD *)(*v3 + 40));
  v69 = v6;
  v14 = v78;
  LOBYTE(v98) = v4;
  BYTE1(v98) = v78;
  BYTE2(v98) = v7;
  BYTE3(v98) = v8;
  BYTE4(v98) = v9;
  v58 = v11;
  BYTE5(v98) = v10;
  BYTE6(v98) = v11;
  v15 = v76;
  HIBYTE(v98) = v76;
  sub_1001243D8((uint64_t)v13, (uint64_t)v99, v16, v17, v18, v19, v20, v21, v56, v58, v10, v9, v8, v7, v69, v72, a1, v76, v78,
    v80,
    v83,
    v86,
    v89,
    v92,
    v95,
    v5);
  v22 = Hasher._finalize()();
  v23 = -1 << *(_BYTE *)(v12 + 32);
  v24 = v22 & ~v23;
  sub_100123FD4();
  if ((v25 & 1) == 0)
  {
    v30 = v96;
    goto LABEL_12;
  }
  v26 = (uint64_t *)(*(_QWORD *)(v12 + 48) + 16 * v24);
  v27 = *v26;
  v28 = v26[1];
  swift_bridgeObjectRetain(v12);
  if (sub_1001240C4(v27, v28))
  {
    v24 = (v24 + 1) & ~v23;
    sub_100123FD4();
    if ((v29 & 1) != 0)
    {
      v30 = v96;
      while (sub_1001240C4(*(_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v24), *(_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v24 + 8)))
      {
        v24 = (v24 + 1) & ~v23;
        sub_100123FD4();
        if ((v31 & 1) == 0)
          goto LABEL_11;
      }
      goto LABEL_9;
    }
    v30 = v96;
LABEL_11:
    sub_1000267C4();
LABEL_12:
    swift_isUniquelyReferenced_nonNull_native(*v73);
    v45 = sub_100123FB4();
    sub_10011D944(v45, v46, v24, v47);
    sub_100124228(v48, v49, v50, v51, v52, v53, v54, v55, v57, v59, v61, v63, v65, v67, v70, (uint64_t)v73, (uint64_t)v75, v77, v79,
      v81,
      v84,
      v87,
      v90,
      v93,
      v96,
      v97,
      v98,
      v99[0]);
    v35 = v91;
    v34 = v94;
    v37 = v85;
    v36 = v88;
    v38 = v82;
    v40 = v68;
    v39 = v71;
    v42 = v64;
    v41 = v66;
    v44 = v60;
    v43 = v62;
    goto LABEL_13;
  }
LABEL_9:
  sub_1000267C4();
  sub_100124398();
  v33 = (char *)(v32 + 16 * v24);
  v5 = *v33;
  v30 = v33[1];
  v34 = v33[2];
  v35 = v33[3];
  v36 = v33[4];
  v37 = v33[5];
  v38 = v33[6];
  v39 = v33[7];
  v4 = v33[8];
  v14 = v33[9];
  v40 = v33[10];
  v41 = v33[11];
  v42 = v33[12];
  v43 = v33[13];
  v44 = v33[14];
  v15 = v33[15];
LABEL_13:
  *v75 = v5;
  v75[1] = v30;
  v75[2] = v34;
  v75[3] = v35;
  v75[4] = v36;
  v75[5] = v37;
  v75[6] = v38;
  v75[7] = v39;
  v75[8] = v4;
  v75[9] = v14;
  v75[10] = v40;
  v75[11] = v41;
  v75[12] = v42;
  v75[13] = v43;
  v75[14] = v44;
  v75[15] = v15;
  sub_100123F14();
}

void sub_100119934(uint64_t a1, unsigned __int8 a2)
{
  unsigned __int8 *v2;
  uint64_t v3;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  unsigned __int8 v9;
  unint64_t v10;
  char v11;
  uint64_t v12;

  sub_100124140(a1);
  Hasher._combine(_:)(a2);
  sub_10004740C();
  sub_100123EA4();
  if ((v5 & 1) == 0)
  {
LABEL_7:
    sub_1001241E8();
    v9 = sub_100123EE4();
    sub_10011DC48(v9, v10, v11);
    sub_100123F08(v12);
    goto LABEL_8;
  }
  sub_100124338();
  while (!v6)
  {
    sub_1001240D0();
    if ((v7 & 1) == 0)
      goto LABEL_7;
    sub_100124338();
  }
  sub_100124248();
  a2 = *(_BYTE *)(v8 + v3);
LABEL_8:
  *v2 = a2;
  sub_1001240B0();
}

void sub_1001199C0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  char v11;
  uint64_t v12;
  BOOL v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18[9];

  sub_10002626C();
  v2 = v0;
  v4 = v3;
  v6 = v5;
  v7 = type metadata accessor for HIDUniversalSenderID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_10000E478();
  v9 = *v0;
  Hasher.init(_seed:)(v18, *(_QWORD *)(*v0 + 40));
  sub_10003B1A8();
  HIDUniversalSenderID.hash(into:)((uint64_t)v18);
  v10 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v9 + 32));
  sub_1001242E0();
  if ((v11 & 1) != 0)
  {
    v12 = *(_QWORD *)(v8 + 72);
    while (1)
    {
      sub_1000E0E9C(*(_QWORD *)(v9 + 48) + v12 * v10, v1);
      v13 = static HIDUniversalSenderID.__derived_struct_equals(_:_:)(v1, v4);
      sub_1000E0F24(v1);
      if (v13)
        break;
      sub_100124088();
      if ((v14 & 1) == 0)
        goto LABEL_5;
    }
    sub_10000E4A0();
    sub_1000E0F24(v4);
    sub_1000E0E9C(*(_QWORD *)(*v2 + 48) + v12 * v10, v6);
  }
  else
  {
LABEL_5:
    sub_10000E4A0();
    v15 = sub_1001241E8();
    sub_1000E0E9C(v4, v1);
    v18[0] = *v2;
    *v2 = 0x8000000000000000;
    sub_10011DDA4(v1, v10, v15);
    sub_100123F08(v18[0]);
    v16 = sub_1000C2CD4();
    sub_1000E0EE0(v16, v17);
  }
  sub_10000E4E0();
}

void sub_100119B20(char *a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  Swift::Int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99[9];

  v5 = v4;
  v6 = a3;
  v7 = a2;
  v9 = a2 >> 16;
  v86 = a2 >> 24;
  v89 = a2 >> 8;
  v80 = a2 >> 40;
  v83 = HIDWORD(a2);
  v74 = HIBYTE(a2);
  v77 = HIWORD(a2);
  v10 = a3 >> 16;
  v91 = a3 >> 24;
  v94 = a3 >> 8;
  v11 = HIDWORD(a3);
  v12 = a3 >> 40;
  v13 = HIWORD(a3);
  v14 = HIBYTE(a3);
  v70 = v5;
  v15 = *(_QWORD *)v5;
  v16 = Hasher.init(_seed:)(v99, *(_QWORD *)(*(_QWORD *)v5 + 40));
  v68 = v9;
  v17 = a4;
  LOBYTE(v98) = v6;
  BYTE1(v98) = v94;
  BYTE2(v98) = v10;
  BYTE3(v98) = v91;
  BYTE4(v98) = v11;
  BYTE5(v98) = v12;
  BYTE6(v98) = v13;
  HIBYTE(v98) = v14;
  sub_1001243D8((uint64_t)v16, (uint64_t)v99, v18, v19, v20, v21, v22, v23, v56, v14, v13, v12, v11, v10, v68, v70, a4, v74, v77,
    v80,
    v83,
    v86,
    v89,
    v91,
    v94,
    v7);
  v24 = v17;
  Hasher._combine(_:)(v17);
  v25 = Hasher._finalize()();
  v26 = -1 << *(_BYTE *)(v15 + 32);
  v27 = v25 & ~v26;
  if (((*(_QWORD *)(v15 + 56 + ((v27 >> 3) & 0xFFFFFFFFFFFFF8)) >> v27) & 1) != 0)
  {
    v28 = ~v26;
    sub_10003B1A8();
    while (1)
    {
      v29 = *(_QWORD *)(v15 + 48) + 17 * v27;
      v30 = *(unsigned __int8 *)(v29 + 16);
      if (!sub_1001240C4(*(_QWORD *)v29, *(_QWORD *)(v29 + 8)) && v30 == v17)
        break;
      v27 = (v27 + 1) & v28;
      if (((*(_QWORD *)(v15 + 56 + ((v27 >> 3) & 0xFFFFFFFFFFFFF8)) >> v27) & 1) == 0)
      {
        sub_10000E4A0();
        goto LABEL_7;
      }
    }
    sub_10000E4A0();
    sub_100124398();
    v55 = (char *)(v54 + 17 * v27);
    v7 = *v55;
    v31 = v55[1];
    v32 = v55[2];
    v44 = v55[3];
    v45 = v55[4];
    v46 = v55[5];
    v47 = v55[6];
    v48 = v55[7];
    v6 = v55[8];
    v96 = v55[9];
    v49 = v55[10];
    v93 = v55[11];
    v50 = v55[12];
    v51 = v55[13];
    v52 = v55[14];
    v53 = v55[15];
    v24 = v55[16];
  }
  else
  {
LABEL_7:
    v31 = v90;
    v32 = v69;
    swift_isUniquelyReferenced_nonNull_native(*v71);
    v33 = sub_100123FB4();
    v36 = sub_10011DF60(v33, v34, v17, v27, v35);
    sub_100124228(v36, v37, v38, v39, v40, v41, v42, v43, v57, v58, v60, v62, v64, v66, v69, (uint64_t)v71, v73, v75, v78,
      v81,
      v84,
      v87,
      v90,
      v92,
      v95,
      v97,
      v98,
      v99[0]);
    v45 = v85;
    v44 = v88;
    v47 = v79;
    v46 = v82;
    v48 = v76;
    v50 = v65;
    v49 = v67;
    v52 = v61;
    v51 = v63;
    v53 = v59;
  }
  *a1 = v7;
  a1[1] = v31;
  a1[2] = v32;
  a1[3] = v44;
  a1[4] = v45;
  a1[5] = v46;
  a1[6] = v47;
  a1[7] = v48;
  a1[8] = v6;
  a1[9] = v96;
  a1[10] = v49;
  a1[11] = v93;
  a1[12] = v50;
  a1[13] = v51;
  a1[14] = v52;
  a1[15] = v53;
  a1[16] = v24;
  sub_100123F14();
}

uint64_t sub_100119DD8(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = v2;
  v32 = a2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    sub_1000432E0();
    v8 = sub_1000269EC();
    v9 = __CocoaSet.member(for:)(v8, v7);
    sub_10000FF50();
    if (v9)
    {
      sub_10000E50C();
      sub_10000FF50();
      v30 = v9;
      v10 = type metadata accessor for UniversalControlDevice(0);
      sub_10002D988();
      swift_dynamicCast(&v31, &v30, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
      *a1 = v31;
      sub_10000F718();
      return 0;
    }
    result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v26 = sub_10011AE08(v7, result + 1);
    v31 = v26;
    v27 = *(_QWORD *)(v26 + 16);
    if (*(_QWORD *)(v26 + 24) <= v27)
    {
      v29 = v27 + 1;
      sub_1000269EC();
      sub_10011C708(v29);
      v28 = v31;
    }
    else
    {
      v28 = v26;
      sub_1000269EC();
    }
    sub_10011D6DC(a2, v28);
    *v3 = v28;
    swift_bridgeObjectRelease();
    *a1 = a2;
  }
  else
  {
    v11 = *(_QWORD *)(v6 + 40);
    v12 = type metadata accessor for UniversalControlDevice(0);
    sub_100124280(&qword_1002AC880, v13, (uint64_t (*)(uint64_t))&type metadata accessor for UniversalControlDevice, (uint64_t)&protocol conformance descriptor for UniversalControlDevice);
    v15 = v14;
    sub_1000432E0();
    v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v12, v15) & ~(-1 << *(_BYTE *)(v6 + 32));
    sub_1001242E0();
    if ((v18 & 1) != 0)
    {
      sub_100124280((unint64_t *)&unk_1002AC0A0, v17, (uint64_t (*)(uint64_t))&type metadata accessor for UniversalControlDevice, (uint64_t)&protocol conformance descriptor for UniversalControlDevice);
      v20 = v19;
      while (1)
      {
        v31 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v16);
        if ((dispatch thunk of static Equatable.== infix(_:_:)(&v31, &v32, v12, v20) & 1) != 0)
          break;
        sub_100124088();
        if ((v21 & 1) == 0)
          goto LABEL_11;
      }
      sub_10000FF50();
      sub_10000E50C();
      *a1 = *(_QWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v16);
      swift_retain();
      return 0;
    }
LABEL_11:
    sub_10000E50C();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v23 = v32;
    v31 = *v2;
    *v2 = 0x8000000000000000;
    v24 = sub_100026AE4();
    sub_10011E268(v24, v16, isUniquelyReferenced_nonNull_native);
    sub_1001242AC(v31);
    *a1 = v23;
  }
  return 1;
}

uint64_t sub_10011A03C(_BYTE *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t result;
  uint64_t v13;
  char v14;
  uint64_t v15[9];

  v5 = *v2;
  Hasher.init(_seed:)(v15, *(_QWORD *)(*v2 + 40));
  sub_1000432E0();
  UniversalControlEdge.hash(into:)(v15, a2);
  v6 = sub_10004740C();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  sub_100123E38();
  if ((v9 & 1) == 0)
  {
LABEL_7:
    sub_10000E50C();
    v14 = sub_1001241E8();
    v15[0] = *v2;
    *v2 = 0x8000000000000000;
    sub_10011E418(a2, v8, v14);
    sub_100123F08(v15[0]);
    result = 1;
    goto LABEL_8;
  }
  if ((sub_100124270() & 1) == 0)
  {
    v10 = ~v7;
    do
    {
      v8 = (v8 + 1) & v10;
      sub_100123E38();
      if ((v11 & 1) == 0)
        goto LABEL_7;
    }
    while ((sub_100124270() & 1) == 0);
  }
  sub_10000E50C();
  result = sub_100124248();
  LOBYTE(a2) = *(_BYTE *)(v13 + v8);
LABEL_8:
  *a1 = a2;
  return result;
}

void sub_10011A130(uint64_t a1, Swift::UInt8 a2)
{
  Swift::UInt8 *v2;
  uint64_t v3;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;

  sub_100124140(a1);
  Hasher._combine(_:)(a2);
  sub_10004740C();
  sub_100123EA4();
  if ((v5 & 1) == 0)
  {
LABEL_7:
    sub_1001241E8();
    v9 = sub_100123EE4();
    sub_10011E5A0(v9, v10, v11);
    sub_100123F08(v12);
    goto LABEL_8;
  }
  sub_100124338();
  while (!v6)
  {
    sub_1001240D0();
    if ((v7 & 1) == 0)
      goto LABEL_7;
    sub_100124338();
  }
  sub_100124248();
  a2 = *(_BYTE *)(v8 + v3);
LABEL_8:
  *v2 = a2;
  sub_1001240B0();
}

int8x8_t sub_10011A1BC(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  _QWORD *v5;
  uint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  __n128 v18;
  uint64_t v19;
  int16x8_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int16x8_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int16x8_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int16x8_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64x2_t v36;
  int16x8_t v37;
  uint64x2_t v38;
  uint64x2_t v39;
  uint64x2_t v40;
  int16x8_t v41;
  uint64x2_t v42;
  uint64x2_t v43;
  uint64x2_t v44;
  int16x8_t v45;
  uint64x2_t v46;
  uint64x2_t v47;
  uint64x2_t v48;
  int32x4_t v49;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v51;
  int8x8_t result;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  _QWORD v57[10];

  v11 = *v5;
  Hasher.init(_seed:)(v57, *(_QWORD *)(*v5 + 40));
  swift_bridgeObjectRetain(v11);
  UniversalControlDisplayID.hash(into:)(v57, a2, a3, a4, a5);
  v12 = Hasher._finalize()();
  v13 = -1 << *(_BYTE *)(v11 + 32);
  v14 = v12 & ~v13;
  sub_100124350();
  if ((v15 & 1) == 0)
  {
LABEL_7:
    v36 = (uint64x2_t)vdupq_n_s64(a2);
    *(int16x4_t *)v37.i8 = sub_1001241C0(v36, NAN, (int32x4_t)vshlq_u64(v36, (uint64x2_t)xmmword_10021F130), (uint64x2_t)xmmword_10021F140);
    v56 = v37;
    v38 = (uint64x2_t)vdupq_n_s64(a3);
    *(int16x4_t *)v41.i8 = sub_1001241C0(v38, *(double *)v39.i64, (int32x4_t)vshlq_u64(v38, v39), v40);
    v55 = v41;
    v42 = (uint64x2_t)vdupq_n_s64(a4);
    *(int16x4_t *)v45.i8 = sub_1001241C0(v42, *(double *)v43.i64, (int32x4_t)vshlq_u64(v42, v43), v44);
    v54 = v45;
    v46 = (uint64x2_t)vdupq_n_s64(a5);
    v49 = vuzp1q_s32((int32x4_t)vshlq_u64(v46, v48), (int32x4_t)vshlq_u64(v46, v47));
    *(int16x4_t *)v49.i8 = vmovn_s32(v49);
    v53 = (int16x8_t)v49;
    v35 = HIBYTE(a5);
    swift_bridgeObjectRelease(v11);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v5);
    v57[0] = *v5;
    *v5 = 0x8000000000000000;
    sub_10011E6EC(a2, a3, a4, a5, v14, isUniquelyReferenced_nonNull_native);
    v51 = *v5;
    *v5 = v57[0];
    swift_bridgeObjectRelease(v51);
    v34 = HIWORD(a5);
    v32 = v53;
    v33 = a5 >> 40;
    v31 = HIBYTE(a4);
    v30 = HIWORD(a4);
    v28 = v54;
    v29 = a4 >> 40;
    v27 = HIBYTE(a3);
    v26 = HIWORD(a3);
    v24 = v55;
    v25 = a3 >> 40;
    v23 = HIBYTE(a2);
    v22 = HIWORD(a2);
    v20 = v56;
    v21 = a2 >> 40;
    goto LABEL_8;
  }
  if ((sub_100123E60() & 1) == 0)
  {
    v16 = ~v13;
    do
    {
      v14 = (v14 + 1) & v16;
      sub_100124350();
      if ((v17 & 1) == 0)
        goto LABEL_7;
    }
    while ((sub_100123E60() & 1) == 0);
  }
  v18 = swift_bridgeObjectRelease(v11);
  v19 = *(_QWORD *)(*v5 + 48) + 32 * v14;
  LOBYTE(a2) = *(_BYTE *)v19;
  v18.n128_u32[0] = *(_DWORD *)(v19 + 1);
  v20 = (int16x8_t)vmovl_u8((uint8x8_t)v18.n128_u64[0]);
  LOBYTE(v21) = *(_BYTE *)(v19 + 5);
  LOBYTE(v22) = *(_BYTE *)(v19 + 6);
  LOBYTE(v23) = *(_BYTE *)(v19 + 7);
  LOBYTE(a3) = *(_BYTE *)(v19 + 8);
  v18.n128_u32[0] = *(_DWORD *)(v19 + 9);
  v24 = (int16x8_t)vmovl_u8((uint8x8_t)v18.n128_u64[0]);
  LOBYTE(v25) = *(_BYTE *)(v19 + 13);
  LOBYTE(v26) = *(_BYTE *)(v19 + 14);
  LOBYTE(v27) = *(_BYTE *)(v19 + 15);
  LOBYTE(a4) = *(_BYTE *)(v19 + 16);
  v18.n128_u32[0] = *(_DWORD *)(v19 + 17);
  v28 = (int16x8_t)vmovl_u8((uint8x8_t)v18.n128_u64[0]);
  LOBYTE(v29) = *(_BYTE *)(v19 + 21);
  LOBYTE(v30) = *(_BYTE *)(v19 + 22);
  LOBYTE(v31) = *(_BYTE *)(v19 + 23);
  LOBYTE(a5) = *(_BYTE *)(v19 + 24);
  v18.n128_u32[0] = *(_DWORD *)(v19 + 25);
  v32 = (int16x8_t)vmovl_u8((uint8x8_t)v18.n128_u64[0]);
  LOBYTE(v33) = *(_BYTE *)(v19 + 29);
  LOBYTE(v34) = *(_BYTE *)(v19 + 30);
  LOBYTE(v35) = *(_BYTE *)(v19 + 31);
LABEL_8:
  *(_BYTE *)a1 = a2;
  *(_DWORD *)(a1 + 1) = vmovn_s16(v20).u32[0];
  *(_BYTE *)(a1 + 5) = v21;
  *(_BYTE *)(a1 + 6) = v22;
  *(_BYTE *)(a1 + 7) = v23;
  *(_BYTE *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 9) = vmovn_s16(v24).u32[0];
  *(_BYTE *)(a1 + 13) = v25;
  *(_BYTE *)(a1 + 14) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_BYTE *)(a1 + 16) = a4;
  *(_DWORD *)(a1 + 17) = vmovn_s16(v28).u32[0];
  *(_BYTE *)(a1 + 21) = v29;
  *(_BYTE *)(a1 + 22) = v30;
  *(_BYTE *)(a1 + 23) = v31;
  *(_BYTE *)(a1 + 24) = a5;
  result = vmovn_s16(v32);
  *(_DWORD *)(a1 + 25) = result.i32[0];
  *(_BYTE *)(a1 + 29) = v33;
  *(_BYTE *)(a1 + 30) = v34;
  *(_BYTE *)(a1 + 31) = v35;
  return result;
}

uint64_t sub_10011A494(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(_QWORD, _QWORD, _QWORD);
  uint64_t v22;
  void (*v23)(_QWORD, _QWORD, _QWORD);
  uint64_t v24;
  char v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v29;
  __n128 v30;
  __n128 v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  sub_1000840B4(&qword_1002AD0B0, 255, v12, (uint64_t)&protocol conformance descriptor for UUID);
  v14 = v13;
  swift_bridgeObjectRetain();
  v37 = a2;
  v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v14);
  v16 = -1 << *(_BYTE *)(v10 + 32);
  v17 = v15 & ~v16;
  v18 = v10;
  v19 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) != 0)
  {
    v33 = v3;
    v34 = a1;
    v35 = ~v16;
    v36 = v7;
    v20 = *(_QWORD *)(v7 + 72);
    v21 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v22 = v18;
      v23 = v21;
      v21(v9, *(_QWORD *)(v18 + 48) + v20 * v17, v6);
      sub_1000840B4((unint64_t *)&qword_1002A9370, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v25 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v37, v6, v24);
      v26 = *(void (**)(char *, uint64_t))(v36 + 8);
      v26(v9, v6);
      if ((v25 & 1) != 0)
        break;
      v17 = (v17 + 1) & v35;
      v18 = v22;
      v21 = v23;
      if (((*(_QWORD *)(v19 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v33;
        a1 = v34;
        v27 = v36;
        goto LABEL_7;
      }
    }
    v32 = swift_bridgeObjectRelease();
    ((void (*)(uint64_t, uint64_t, __n128))v26)(v37, v6, v32);
    v23(v34, *(_QWORD *)(*v33 + 48) + v20 * v17, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v21 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v27 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v29 = v37;
    v21(v9, v37, v6);
    v38 = *v3;
    *v3 = 0x8000000000000000;
    sub_10011E984((uint64_t)v9, v17, isUniquelyReferenced_nonNull_native);
    *v3 = v38;
    v30 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v27 + 32))(a1, v29, v6, v30);
    return 1;
  }
}

uint64_t sub_10011A6F8()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10011A720()
{
  return sub_1001239E4(sub_1001154CC);
}

void sub_10011A72C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  sub_1000840B4(&qword_1002B21D8, a2, (uint64_t (*)(uint64_t))type metadata accessor for P2PPeerCoordinator, (uint64_t)&protocol conformance descriptor for P2PPeerCoordinator);
  *(_QWORD *)(a1 + 8) = v3;
}

uint64_t type metadata accessor for P2PPeerCoordinator()
{
  return objc_opt_self(_TtC13EnsembleAgent18P2PPeerCoordinator);
}

uint64_t type metadata accessor for P2PPeerCoordinator.PeerContext()
{
  return objc_opt_self(_TtCC13EnsembleAgent18P2PPeerCoordinatorP33_42CA617FCF97D71E5F5AC8A36E4D2D4511PeerContext);
}

ValueMetadata *type metadata accessor for P2PPeerCoordinator.State()
{
  return &type metadata for P2PPeerCoordinator.State;
}

uint64_t destroy for P2PPeerCoordinator.DiagnosticState(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  return swift_bridgeObjectRelease(a1[7]);
}

uint64_t *initializeWithCopy for P2PPeerCoordinator.DiagnosticState(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v6 = a2[2];
  v5 = a2[3];
  a1[2] = v6;
  a1[3] = v5;
  v8 = a2[4];
  v7 = a2[5];
  a1[4] = v8;
  a1[5] = v7;
  v9 = a2[6];
  v10 = a2[7];
  a1[6] = v9;
  a1[7] = v10;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t *assignWithCopy for P2PPeerCoordinator.DiagnosticState(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v4);
  a1[1] = a2[1];
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[3] = a2[3];
  v8 = a2[4];
  v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[5] = a2[5];
  v10 = a2[6];
  v11 = a1[6];
  a1[6] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a1[7];
  v13 = a2[7];
  a1[7] = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v12);
  return a1;
}

_QWORD *assignWithTake for P2PPeerCoordinator.DiagnosticState(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = a1[2];
  a1[1] = *(_QWORD *)(a2 + 8);
  a1[2] = v5;
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = a1[4];
  a1[3] = *(_QWORD *)(a2 + 24);
  a1[4] = v7;
  swift_bridgeObjectRelease(v8);
  a1[5] = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease(a1[6]);
  v9 = a1[7];
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for P2PPeerCoordinator.DiagnosticState(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 64))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 48);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for P2PPeerCoordinator.DiagnosticState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for P2PPeerCoordinator.DiagnosticState()
{
  return &type metadata for P2PPeerCoordinator.DiagnosticState;
}

unint64_t sub_10011AA40()
{
  unint64_t result;

  result = qword_1002B23E0;
  if (!qword_1002B23E0)
  {
    result = swift_getWitnessTable(&unk_100227218, &type metadata for P2PPeerCoordinator.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B23E0);
  }
  return result;
}

uint64_t sub_10011AA7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000055B0(&qword_1002B29A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10011AAC4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t *v5;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  _QWORD *v31;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _BYTE v43[16];
  _QWORD v44[9];

  v10 = a4 >> 8;
  v11 = a4 >> 16;
  v12 = a4 >> 24;
  v13 = HIDWORD(a4);
  v33 = a4 >> 40;
  v34 = HIWORD(a4);
  v35 = HIBYTE(a4);
  v36 = a5 >> 8;
  v37 = a5 >> 16;
  v38 = a5 >> 24;
  v39 = HIDWORD(a5);
  v40 = a5 >> 40;
  v41 = HIWORD(a5);
  v42 = HIBYTE(a5);
  v14 = *v5;
  Hasher.init(_seed:)(v44, *(_QWORD *)(*v5 + 40));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)(v44, a2, a3);
  swift_bridgeObjectRelease();
  v43[0] = a4;
  v28 = v10;
  v29 = v11;
  v43[1] = v10;
  v43[2] = v11;
  v30 = v12;
  v43[3] = v12;
  v43[4] = v13;
  v43[5] = v33;
  v43[6] = v34;
  v43[7] = v35;
  v43[8] = a5;
  v43[9] = v36;
  v43[10] = v37;
  v43[11] = v38;
  v43[12] = v39;
  v43[13] = v40;
  v43[14] = v41;
  v43[15] = v42;
  Hasher.combine(bytes:)(v43, v44);
  v15 = Hasher._finalize()();
  v16 = -1 << *(_BYTE *)(v14 + 32);
  v17 = v15 & ~v16;
  if (((*(_QWORD *)(v14 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) != 0)
  {
    v18 = ~v16;
    while (1)
    {
      v19 = (_QWORD *)(*(_QWORD *)(v14 + 48) + 32 * v17);
      v20 = v19[1];
      v21 = v19[2];
      v22 = v19[3];
      v23 = *v19 == a2 && v20 == a3;
      if ((v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0) & 1) != 0)
        && !static UniversalControlUUID.compare(lhs:rhs:)(v21, v22))
      {
        break;
      }
      v17 = (v17 + 1) & v18;
      if (((*(_QWORD *)(v14 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
        goto LABEL_10;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v26 = *(_QWORD *)(*v31 + 48) + 32 * v17;
    v27 = *(_QWORD *)(v26 + 8);
    *(_QWORD *)a1 = *(_QWORD *)v26;
    *(_QWORD *)(a1 + 8) = v27;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(v26 + 16);
    swift_bridgeObjectRetain();
    return 0;
  }
  else
  {
LABEL_10:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v31);
    v44[0] = *v31;
    *v31 = 0x8000000000000000;
    swift_bridgeObjectRetain();
    sub_10011EB90(a2, a3, a4, a5, v17, isUniquelyReferenced_nonNull_native);
    *v31 = v44[0];
    swift_bridgeObjectRelease();
    *(_QWORD *)a1 = a2;
    *(_QWORD *)(a1 + 8) = a3;
    *(_BYTE *)(a1 + 16) = a4;
    *(_BYTE *)(a1 + 17) = v28;
    *(_BYTE *)(a1 + 18) = v29;
    *(_BYTE *)(a1 + 19) = v30;
    *(_BYTE *)(a1 + 20) = v13;
    *(_BYTE *)(a1 + 21) = v33;
    *(_BYTE *)(a1 + 22) = v34;
    *(_BYTE *)(a1 + 23) = v35;
    *(_BYTE *)(a1 + 24) = a5;
    *(_BYTE *)(a1 + 25) = v36;
    *(_BYTE *)(a1 + 26) = v37;
    *(_BYTE *)(a1 + 27) = v38;
    *(_BYTE *)(a1 + 28) = v39;
    *(_BYTE *)(a1 + 29) = v40;
    *(_BYTE *)(a1 + 30) = v41;
    result = 1;
    *(_BYTE *)(a1 + 31) = v42;
  }
  return result;
}

uint64_t sub_10011AE08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (!a2)
  {
    swift_unknownObjectRelease(a1);
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  sub_1000055B0(&qword_1002B23F0);
  v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
  v24 = v4;
  __CocoaSet.makeIterator()(a1);
  v5 = __CocoaSet.Iterator.next()();
  if (!v5)
  {
LABEL_16:
    swift_release();
    return v4;
  }
  v6 = v5;
  v7 = type metadata accessor for UniversalControlDevice(0);
  while (1)
  {
    v22 = v6;
    swift_dynamicCast(&v23, &v22, (char *)&type metadata for Swift.AnyObject + 8, v7, 7);
    v4 = v24;
    v8 = *(_QWORD *)(v24 + 16);
    if (*(_QWORD *)(v24 + 24) <= v8)
    {
      sub_10011C708(v8 + 1);
      v4 = v24;
    }
    v9 = v23;
    v22 = v23;
    v10 = *(_QWORD *)(v4 + 40);
    sub_1000840B4(&qword_1002AC880, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UniversalControlDevice, (uint64_t)&protocol conformance descriptor for UniversalControlDevice);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v10, v7, v11);
    v13 = v4 + 56;
    v14 = -1 << *(_BYTE *)(v4 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v4 + 56 + 8 * (v15 >> 6))) == 0)
      break;
    v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v4 + 56 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
LABEL_15:
    *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v17) = v9;
    ++*(_QWORD *)(v4 + 16);
    v6 = __CocoaSet.Iterator.next()();
    if (!v6)
      goto LABEL_16;
  }
  v18 = 0;
  v19 = (unint64_t)(63 - v14) >> 6;
  while (++v16 != v19 || (v18 & 1) == 0)
  {
    v20 = v16 == v19;
    if (v16 == v19)
      v16 = 0;
    v18 |= v20;
    v21 = *(_QWORD *)(v13 + 8 * v16);
    if (v21 != -1)
    {
      v17 = __clz(__rbit64(~v21)) + (v16 << 6);
      goto LABEL_15;
    }
  }
  __break(1u);
  return result;
}

void sub_10011B01C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __n128 v15;
  int64_t v16;
  unint64_t v17;
  unint64_t i;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, unint64_t, uint64_t, __n128);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  uint64_t v41;

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v41 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_1000055B0((uint64_t *)&unk_1002B2468);
  v8 = static _SetStorage.resize(original:capacity:move:)(v7, a1, 1);
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_38;
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v11 = *(_QWORD *)(v7 + 56);
  v40 = (_QWORD *)(v7 + 56);
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & v11;
  v38 = v2;
  v39 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 56;
  v15 = swift_retain();
  v16 = 0;
  if (!v13)
    goto LABEL_9;
LABEL_8:
  v17 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (i = v17 | (v16 << 6); ; i = __clz(__rbit64(v20)) + (v16 << 6))
  {
    v22 = v7;
    v23 = *(_QWORD *)(v7 + 48);
    v24 = *(_QWORD *)(v41 + 72);
    v25 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v41 + 32);
    v25(v6, v23 + v24 * i, v4, v15);
    v26 = *(_QWORD *)(v9 + 40);
    sub_1000840B4(&qword_1002AD0B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v28 = dispatch thunk of Hashable._rawHashValue(seed:)(v26, v4, v27);
    v29 = -1 << *(_BYTE *)(v9 + 32);
    v30 = v28 & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v14 + 8 * (v30 >> 6))) == 0)
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v29) >> 6;
      while (++v31 != v34 || (v33 & 1) == 0)
      {
        v35 = v31 == v34;
        if (v31 == v34)
          v31 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v14 + 8 * v31);
        if (v36 != -1)
        {
          v32 = __clz(__rbit64(~v36)) + (v31 << 6);
          goto LABEL_32;
        }
      }
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return;
    }
    v32 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v14 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
LABEL_32:
    *(_QWORD *)(v14 + ((v32 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v32;
    ((void (*)(unint64_t, char *, uint64_t))v25)(*(_QWORD *)(v9 + 48) + v32 * v24, v6, v4);
    ++*(_QWORD *)(v9 + 16);
    v7 = v22;
    if (v13)
      goto LABEL_8;
LABEL_9:
    v19 = v16 + 1;
    if (__OFADD__(v16, 1))
      goto LABEL_40;
    if (v19 >= v39)
      goto LABEL_34;
    v20 = v40[v19];
    ++v16;
    if (!v20)
    {
      v16 = v19 + 1;
      if (v19 + 1 >= v39)
        goto LABEL_34;
      v20 = v40[v16];
      if (!v20)
      {
        v16 = v19 + 2;
        if (v19 + 2 >= v39)
          goto LABEL_34;
        v20 = v40[v16];
        if (!v20)
          break;
      }
    }
LABEL_22:
    v13 = (v20 - 1) & v20;
  }
  v21 = v19 + 3;
  if (v21 < v39)
  {
    v20 = v40[v21];
    if (!v20)
    {
      while (1)
      {
        v16 = v21 + 1;
        if (__OFADD__(v21, 1))
          goto LABEL_41;
        if (v16 >= v39)
          goto LABEL_34;
        v20 = v40[v16];
        ++v21;
        if (v20)
          goto LABEL_22;
      }
    }
    v16 = v21;
    goto LABEL_22;
  }
LABEL_34:
  swift_release();
  v2 = v38;
  v37 = 1 << *(_BYTE *)(v7 + 32);
  if (v37 > 63)
    sub_1001194A8(0, (unint64_t)(v37 + 63) >> 6, v40);
  else
    *v40 = -1 << v37;
  *(_QWORD *)(v7 + 16) = 0;
LABEL_38:
  swift_release();
  *v2 = v9;
}

void sub_10011B388(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_1000055B0(&qword_1002B2440);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  if (*(_QWORD *)(v3 + 16))
  {
    v6 = 1 << *(_BYTE *)(v3 + 32);
    v7 = (_QWORD *)(v3 + 56);
    v8 = -1;
    if (v6 < 64)
      v8 = ~(-1 << v6);
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v6 + 63) >> 6;
    swift_retain();
    v11 = 0;
    if (!v9)
      goto LABEL_9;
LABEL_8:
    v12 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    for (i = v12 | (v11 << 6); ; i = __clz(__rbit64(v15)) + (v11 << 6))
    {
      sub_10011D49C(*(_QWORD *)(*(_QWORD *)(v3 + 48) + 32 * i), *(_QWORD *)(*(_QWORD *)(v3 + 48) + 32 * i + 8), *(_QWORD *)(*(_QWORD *)(v3 + 48) + 32 * i + 16), *(_QWORD *)(*(_QWORD *)(v3 + 48) + 32 * i + 24), v5);
      if (v9)
        goto LABEL_8;
LABEL_9:
      v14 = v11 + 1;
      if (__OFADD__(v11, 1))
      {
        __break(1u);
LABEL_31:
        __break(1u);
        return;
      }
      if (v14 >= v10)
        goto LABEL_25;
      v15 = v7[v14];
      ++v11;
      if (!v15)
      {
        v11 = v14 + 1;
        if (v14 + 1 >= v10)
          goto LABEL_25;
        v15 = v7[v11];
        if (!v15)
        {
          v11 = v14 + 2;
          if (v14 + 2 >= v10)
            goto LABEL_25;
          v15 = v7[v11];
          if (!v15)
          {
            v16 = v14 + 3;
            if (v16 >= v10)
            {
LABEL_25:
              swift_release();
              v17 = 1 << *(_BYTE *)(v3 + 32);
              if (v17 > 63)
                sub_1001194A8(0, (unint64_t)(v17 + 63) >> 6, (_QWORD *)(v3 + 56));
              else
                *v7 = -1 << v17;
              *(_QWORD *)(v3 + 16) = 0;
              break;
            }
            v15 = v7[v16];
            if (!v15)
            {
              while (1)
              {
                v11 = v16 + 1;
                if (__OFADD__(v16, 1))
                  goto LABEL_31;
                if (v11 >= v10)
                  goto LABEL_25;
                v15 = v7[v11];
                ++v16;
                if (v15)
                  goto LABEL_22;
              }
            }
            v11 = v16;
          }
        }
      }
LABEL_22:
      v9 = (v15 - 1) & v15;
    }
  }
  swift_release();
  *v2 = v5;
}

Swift::Int sub_10011B55C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_1000055B0((uint64_t *)&unk_1002B61F0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    result = swift_retain(v3);
    v13 = 0;
    if (!v9)
      goto LABEL_10;
LABEL_9:
    v14 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
    {
      v19 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * i);
      v20 = *v19;
      v21 = v19[1];
      Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
      String.hash(into:)(v34, v20, v21);
      result = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v6 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v11 + 8 * (v23 >> 6))) == 0)
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v22) >> 6;
        while (++v24 != v27 || (v26 & 1) == 0)
        {
          v28 = v24 == v27;
          if (v24 == v27)
            v24 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v11 + 8 * v24);
          if (v29 != -1)
          {
            v25 = __clz(__rbit64(~v29)) + (v24 << 6);
            goto LABEL_33;
          }
        }
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return result;
      }
      v25 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
      *(_QWORD *)(v11 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
      v30 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v25);
      *v30 = v20;
      v30[1] = v21;
      ++*(_QWORD *)(v6 + 16);
      if (v9)
        goto LABEL_9;
LABEL_10:
      v16 = v13 + 1;
      if (__OFADD__(v13, 1))
        goto LABEL_41;
      if (v16 >= v10)
        goto LABEL_35;
      v17 = v33[v16];
      ++v13;
      if (!v17)
      {
        v13 = v16 + 1;
        if (v16 + 1 >= v10)
          goto LABEL_35;
        v17 = v33[v13];
        if (!v17)
        {
          v13 = v16 + 2;
          if (v16 + 2 >= v10)
            goto LABEL_35;
          v17 = v33[v13];
          if (!v17)
          {
            v18 = v16 + 3;
            if (v18 >= v10)
            {
LABEL_35:
              swift_release();
              v2 = v32;
              v31 = 1 << *(_BYTE *)(v3 + 32);
              if (v31 > 63)
                sub_1001194A8(0, (unint64_t)(v31 + 63) >> 6, v33);
              else
                *v33 = -1 << v31;
              *(_QWORD *)(v3 + 16) = 0;
              break;
            }
            v17 = v33[v18];
            if (!v17)
            {
              while (1)
              {
                v13 = v18 + 1;
                if (__OFADD__(v18, 1))
                  goto LABEL_42;
                if (v13 >= v10)
                  goto LABEL_35;
                v17 = v33[v13];
                ++v18;
                if (v17)
                  goto LABEL_23;
              }
            }
            v13 = v18;
          }
        }
      }
LABEL_23:
      v9 = (v17 - 1) & v17;
    }
  }
  result = swift_release();
  *v2 = v6;
  return result;
}

uint64_t sub_10011B834(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  char *v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  Swift::Int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t result;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  uint64_t v47;
  char v48;
  char v49;
  char v50;
  _BYTE v51[16];
  _QWORD v52[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_1000055B0(&qword_1002B2400);
  v47 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  if (*(_QWORD *)(v3 + 16))
  {
    v5 = 0;
    v38 = (_QWORD *)(v3 + 56);
    v39 = v3;
    v6 = 1 << *(_BYTE *)(v3 + 32);
    if (v6 < 64)
      v7 = ~(-1 << v6);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v3 + 56);
    v36 = v2;
    v37 = (unint64_t)(v6 + 63) >> 6;
    v9 = v47 + 56;
    if (!v8)
      goto LABEL_10;
    while (2)
    {
      v40 = (v8 - 1) & v8;
      v41 = v5;
      v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_24:
      v15 = (char *)(*(_QWORD *)(v3 + 48) + 16 * v10);
      v16 = *v15;
      v17 = v15[1];
      v18 = v15[3];
      v19 = v15[5];
      v48 = v15[2];
      v49 = v15[6];
      v50 = v15[7];
      v20 = v15[8];
      v45 = v15[9];
      v46 = v15[4];
      v21 = v15[11];
      v44 = v15[12];
      v22 = v15[13];
      v42 = v15[10];
      v43 = v15[14];
      v23 = v15[15];
      Hasher.init(_seed:)(v52, *(_QWORD *)(v47 + 40));
      v51[0] = v16;
      v51[1] = v17;
      v51[2] = v48;
      v51[3] = v18;
      v51[4] = v46;
      v51[5] = v19;
      v51[6] = v49;
      v51[7] = v50;
      v51[8] = v20;
      v51[9] = v45;
      v51[10] = v42;
      v51[11] = v21;
      v51[12] = v44;
      v51[13] = v22;
      v51[14] = v43;
      v51[15] = v23;
      Hasher.combine(bytes:)(v51, v52);
      v24 = Hasher._finalize()();
      v25 = -1 << *(_BYTE *)(v47 + 32);
      v26 = v24 & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v9 + 8 * (v26 >> 6))) != 0)
      {
        v28 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v9 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_33;
      }
      v29 = 0;
      v30 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
LABEL_41:
          __break(1u);
          goto LABEL_42;
        }
        v31 = v27 == v30;
        if (v27 == v30)
          v27 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v9 + 8 * v27);
      }
      while (v32 == -1);
      v28 = __clz(__rbit64(~v32)) + (v27 << 6);
LABEL_33:
      *(_QWORD *)(v9 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
      v33 = (_BYTE *)(*(_QWORD *)(v47 + 48) + 16 * v28);
      *v33 = v16;
      v33[1] = v17;
      v33[2] = v48;
      v33[3] = v18;
      v33[4] = v46;
      v33[5] = v19;
      v33[6] = v49;
      v33[7] = v50;
      v33[8] = v20;
      v33[9] = v45;
      v33[10] = v42;
      v33[11] = v21;
      v33[12] = v44;
      v33[13] = v22;
      v33[14] = v43;
      v33[15] = v23;
      ++*(_QWORD *)(v47 + 16);
      v3 = v39;
      v8 = v40;
      v5 = v41;
      if (v40)
        continue;
      break;
    }
LABEL_10:
    v11 = v5 + 1;
    if (__OFADD__(v5, 1))
      goto LABEL_41;
    if (v11 < v37)
    {
      v12 = v38[v11];
      v13 = v5 + 1;
      if (v12)
        goto LABEL_23;
      v13 = v5 + 2;
      if (v5 + 2 < v37)
      {
        v12 = v38[v13];
        if (v12)
          goto LABEL_23;
        v13 = v5 + 3;
        if (v5 + 3 < v37)
        {
          v12 = v38[v13];
          if (v12)
            goto LABEL_23;
          v14 = v5 + 4;
          if (v5 + 4 < v37)
          {
            v12 = v38[v14];
            if (v12)
            {
              v13 = v5 + 4;
LABEL_23:
              v40 = (v12 - 1) & v12;
              v41 = v13;
              v10 = __clz(__rbit64(v12)) + (v13 << 6);
              goto LABEL_24;
            }
            while (1)
            {
              v13 = v14 + 1;
              if (__OFADD__(v14, 1))
                break;
              if (v13 >= v37)
                goto LABEL_35;
              v12 = v38[v13];
              ++v14;
              if (v12)
                goto LABEL_23;
            }
LABEL_42:
            __break(1u);
          }
        }
      }
    }
LABEL_35:
    v34 = 1 << *(_BYTE *)(v3 + 32);
    if (v34 > 63)
      sub_1001194A8(0, (unint64_t)(v34 + 63) >> 6, v38);
    else
      *v38 = -1 << v34;
    v2 = v36;
    *(_QWORD *)(v3 + 16) = 0;
  }
  result = swift_release(v3);
  *v2 = v47;
  return result;
}

Swift::Int sub_10011BC98(uint64_t a1)
{
  Swift::Int *v1;
  Swift::Int *v2;
  Swift::Int v3;
  uint64_t v4;
  Swift::Int result;
  Swift::Int v6;
  int64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  Swift::Int v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  Swift::UInt v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int *v29;
  uint64_t v30[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_1000055B0((uint64_t *)&unk_1002B2410);
  result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = result;
  if (*(_QWORD *)(v3 + 16))
  {
    v29 = v2;
    v7 = 0;
    v8 = (_QWORD *)(v3 + 56);
    v9 = 1 << *(_BYTE *)(v3 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v3 + 56);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 56;
    if (!v11)
      goto LABEL_10;
LABEL_9:
    v14 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    for (i = v14 | (v7 << 6); ; i = __clz(__rbit64(v17)) + (v7 << 6))
    {
      v19 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + i);
      Hasher.init(_seed:)(v30, *(_QWORD *)(v6 + 40));
      Hasher._combine(_:)(v19);
      result = Hasher._finalize()();
      v20 = -1 << *(_BYTE *)(v6 + 32);
      v21 = result & ~v20;
      v22 = v21 >> 6;
      if (((-1 << v21) & ~*(_QWORD *)(v13 + 8 * (v21 >> 6))) == 0)
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v20) >> 6;
        while (++v22 != v25 || (v24 & 1) == 0)
        {
          v26 = v22 == v25;
          if (v22 == v25)
            v22 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v22);
          if (v27 != -1)
          {
            v23 = __clz(__rbit64(~v27)) + (v22 << 6);
            goto LABEL_33;
          }
        }
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return result;
      }
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v13 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
      *(_QWORD *)(v13 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
      *(_BYTE *)(*(_QWORD *)(v6 + 48) + v23) = v19;
      ++*(_QWORD *)(v6 + 16);
      if (v11)
        goto LABEL_9;
LABEL_10:
      v16 = v7 + 1;
      if (__OFADD__(v7, 1))
        goto LABEL_41;
      if (v16 >= v12)
        goto LABEL_35;
      v17 = v8[v16];
      ++v7;
      if (!v17)
      {
        v7 = v16 + 1;
        if (v16 + 1 >= v12)
          goto LABEL_35;
        v17 = v8[v7];
        if (!v17)
        {
          v7 = v16 + 2;
          if (v16 + 2 >= v12)
            goto LABEL_35;
          v17 = v8[v7];
          if (!v17)
          {
            v18 = v16 + 3;
            if (v18 >= v12)
            {
LABEL_35:
              v28 = 1 << *(_BYTE *)(v3 + 32);
              if (v28 > 63)
                sub_1001194A8(0, (unint64_t)(v28 + 63) >> 6, (_QWORD *)(v3 + 56));
              else
                *v8 = -1 << v28;
              v2 = v29;
              *(_QWORD *)(v3 + 16) = 0;
              break;
            }
            v17 = v8[v18];
            if (!v17)
            {
              while (1)
              {
                v7 = v18 + 1;
                if (__OFADD__(v18, 1))
                  goto LABEL_42;
                if (v7 >= v12)
                  goto LABEL_35;
                v17 = v8[v7];
                ++v18;
                if (v17)
                  goto LABEL_23;
              }
            }
            v7 = v18;
          }
        }
      }
LABEL_23:
      v11 = (v17 - 1) & v17;
    }
  }
  result = swift_release();
  *v2 = v6;
  return result;
}

Swift::Int sub_10011BF3C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  Swift::Int result;
  int64_t v17;
  unint64_t v18;
  unint64_t i;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int64_t v34;
  _QWORD *v35;
  _QWORD v36[9];

  v2 = v1;
  v4 = type metadata accessor for HIDUniversalSenderID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_1000055B0(&qword_1002B2490);
  v9 = static _SetStorage.resize(original:capacity:move:)(v8, a1, 1);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_38;
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 56);
  v35 = (_QWORD *)(v8 + 56);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v33 = v2;
  v34 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 56;
  result = swift_retain(v8);
  v17 = 0;
  if (!v14)
    goto LABEL_9;
LABEL_8:
  v18 = __clz(__rbit64(v14));
  v14 &= v14 - 1;
  for (i = v18 | (v17 << 6); ; i = __clz(__rbit64(v21)) + (v17 << 6))
  {
    v23 = *(_QWORD *)(v5 + 72);
    sub_1000E0EE0(*(_QWORD *)(v8 + 48) + v23 * i, (uint64_t)v7);
    Hasher.init(_seed:)(v36, *(_QWORD *)(v10 + 40));
    HIDUniversalSenderID.hash(into:)((uint64_t)v36);
    result = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v10 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v15 + 8 * (v25 >> 6))) == 0)
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v24) >> 6;
      while (++v26 != v29 || (v28 & 1) == 0)
      {
        v30 = v26 == v29;
        if (v26 == v29)
          v26 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v15 + 8 * v26);
        if (v31 != -1)
        {
          v27 = __clz(__rbit64(~v31)) + (v26 << 6);
          goto LABEL_32;
        }
      }
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return result;
    }
    v27 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v15 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
LABEL_32:
    *(_QWORD *)(v15 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
    result = sub_1000E0EE0((uint64_t)v7, *(_QWORD *)(v10 + 48) + v27 * v23);
    ++*(_QWORD *)(v10 + 16);
    if (v14)
      goto LABEL_8;
LABEL_9:
    v20 = v17 + 1;
    if (__OFADD__(v17, 1))
      goto LABEL_40;
    if (v20 >= v34)
      goto LABEL_34;
    v21 = v35[v20];
    ++v17;
    if (!v21)
    {
      v17 = v20 + 1;
      if (v20 + 1 >= v34)
        goto LABEL_34;
      v21 = v35[v17];
      if (!v21)
      {
        v17 = v20 + 2;
        if (v20 + 2 >= v34)
          goto LABEL_34;
        v21 = v35[v17];
        if (!v21)
          break;
      }
    }
LABEL_22:
    v14 = (v21 - 1) & v21;
  }
  v22 = v20 + 3;
  if (v22 < v34)
  {
    v21 = v35[v22];
    if (!v21)
    {
      while (1)
      {
        v17 = v22 + 1;
        if (__OFADD__(v22, 1))
          goto LABEL_41;
        if (v17 >= v34)
          goto LABEL_34;
        v21 = v35[v17];
        ++v22;
        if (v21)
          goto LABEL_22;
      }
    }
    v17 = v22;
    goto LABEL_22;
  }
LABEL_34:
  swift_release();
  v2 = v33;
  v32 = 1 << *(_BYTE *)(v8 + 32);
  if (v32 > 63)
    sub_1001194A8(0, (unint64_t)(v32 + 63) >> 6, v35);
  else
    *v35 = -1 << v32;
  *(_QWORD *)(v8 + 16) = 0;
LABEL_38:
  result = swift_release();
  *v2 = v10;
  return result;
}

void sub_10011C26C(uint64_t a1)
{
  sub_10011CA18(a1, &qword_1002B2408, (void (*)(_QWORD *, uint64_t))HIDDeviceType.hash(into:));
}

uint64_t sub_10011C280(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  char *v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  Swift::Int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t result;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  Swift::UInt v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  uint64_t v48;
  char v49;
  char v50;
  char v51;
  _BYTE v52[16];
  _QWORD v53[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_1000055B0(&qword_1002B23F8);
  v48 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  if (*(_QWORD *)(v3 + 16))
  {
    v5 = 0;
    v38 = (_QWORD *)(v3 + 56);
    v39 = v3;
    v6 = 1 << *(_BYTE *)(v3 + 32);
    if (v6 < 64)
      v7 = ~(-1 << v6);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v3 + 56);
    v36 = v2;
    v37 = (unint64_t)(v6 + 63) >> 6;
    v9 = v48 + 56;
    if (!v8)
      goto LABEL_10;
    while (2)
    {
      v40 = (v8 - 1) & v8;
      v41 = v5;
      v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_24:
      v15 = (char *)(*(_QWORD *)(v3 + 48) + 17 * v10);
      v16 = *v15;
      v17 = v15[3];
      v49 = v15[4];
      v18 = v15[5];
      v46 = v15[6];
      v47 = v15[1];
      v19 = v15[7];
      v50 = v15[9];
      v51 = v15[2];
      v20 = v15[10];
      v21 = v15[11];
      v44 = v15[12];
      v45 = v15[8];
      v22 = v15[13];
      v43 = v15[14];
      v23 = v15[15];
      v42 = v15[16];
      Hasher.init(_seed:)(v53, *(_QWORD *)(v48 + 40));
      v52[0] = v16;
      v52[1] = v47;
      v52[2] = v51;
      v52[3] = v17;
      v52[4] = v49;
      v52[5] = v18;
      v52[6] = v46;
      v52[7] = v19;
      v52[8] = v45;
      v52[9] = v50;
      v52[10] = v20;
      v52[11] = v21;
      v52[12] = v44;
      v52[13] = v22;
      v52[14] = v43;
      v52[15] = v23;
      Hasher.combine(bytes:)(v52, v53);
      Hasher._combine(_:)(v42);
      v24 = Hasher._finalize()();
      v25 = -1 << *(_BYTE *)(v48 + 32);
      v26 = v24 & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v9 + 8 * (v26 >> 6))) != 0)
      {
        v28 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v9 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_33;
      }
      v29 = 0;
      v30 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
LABEL_41:
          __break(1u);
          goto LABEL_42;
        }
        v31 = v27 == v30;
        if (v27 == v30)
          v27 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v9 + 8 * v27);
      }
      while (v32 == -1);
      v28 = __clz(__rbit64(~v32)) + (v27 << 6);
LABEL_33:
      *(_QWORD *)(v9 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
      v33 = (_BYTE *)(*(_QWORD *)(v48 + 48) + 17 * v28);
      *v33 = v16;
      v33[1] = v47;
      v33[2] = v51;
      v33[3] = v17;
      v33[4] = v49;
      v33[5] = v18;
      v33[6] = v46;
      v33[7] = v19;
      v33[8] = v45;
      v33[9] = v50;
      v33[10] = v20;
      v33[11] = v21;
      v33[12] = v44;
      v33[13] = v22;
      v33[14] = v43;
      v33[15] = v23;
      v33[16] = v42;
      ++*(_QWORD *)(v48 + 16);
      v3 = v39;
      v8 = v40;
      v5 = v41;
      if (v40)
        continue;
      break;
    }
LABEL_10:
    v11 = v5 + 1;
    if (__OFADD__(v5, 1))
      goto LABEL_41;
    if (v11 < v37)
    {
      v12 = v38[v11];
      v13 = v5 + 1;
      if (v12)
        goto LABEL_23;
      v13 = v5 + 2;
      if (v5 + 2 < v37)
      {
        v12 = v38[v13];
        if (v12)
          goto LABEL_23;
        v13 = v5 + 3;
        if (v5 + 3 < v37)
        {
          v12 = v38[v13];
          if (v12)
            goto LABEL_23;
          v14 = v5 + 4;
          if (v5 + 4 < v37)
          {
            v12 = v38[v14];
            if (v12)
            {
              v13 = v5 + 4;
LABEL_23:
              v40 = (v12 - 1) & v12;
              v41 = v13;
              v10 = __clz(__rbit64(v12)) + (v13 << 6);
              goto LABEL_24;
            }
            while (1)
            {
              v13 = v14 + 1;
              if (__OFADD__(v14, 1))
                break;
              if (v13 >= v37)
                goto LABEL_35;
              v12 = v38[v13];
              ++v14;
              if (v12)
                goto LABEL_23;
            }
LABEL_42:
            __break(1u);
          }
        }
      }
    }
LABEL_35:
    v34 = 1 << *(_BYTE *)(v3 + 32);
    if (v34 > 63)
      sub_1001194A8(0, (unint64_t)(v34 + 63) >> 6, v38);
    else
      *v38 = -1 << v34;
    v2 = v36;
    *(_QWORD *)(v3 + 16) = 0;
  }
  result = swift_release();
  *v2 = v48;
  return result;
}

void sub_10011C708(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  _QWORD *v32;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_1000055B0(&qword_1002B23F0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v31 = (unint64_t)(v7 + 63) >> 6;
    v10 = v5 + 56;
    swift_retain();
    v11 = 0;
    if (!v9)
      goto LABEL_10;
LABEL_9:
    v12 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    for (i = v12 | (v11 << 6); ; i = __clz(__rbit64(v15)) + (v11 << 6))
    {
      v17 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * i);
      v18 = *(_QWORD *)(v6 + 40);
      v19 = type metadata accessor for UniversalControlDevice(0);
      sub_1000840B4(&qword_1002AC880, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UniversalControlDevice, (uint64_t)&protocol conformance descriptor for UniversalControlDevice);
      v21 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v19, v20);
      v22 = -1 << *(_BYTE *)(v6 + 32);
      v23 = v21 & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v10 + 8 * (v23 >> 6))) == 0)
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v22) >> 6;
        while (++v24 != v27 || (v26 & 1) == 0)
        {
          v28 = v24 == v27;
          if (v24 == v27)
            v24 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v10 + 8 * v24);
          if (v29 != -1)
          {
            v25 = __clz(__rbit64(~v29)) + (v24 << 6);
            goto LABEL_33;
          }
        }
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return;
      }
      v25 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v10 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
      *(_QWORD *)(v10 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v25) = v17;
      ++*(_QWORD *)(v6 + 16);
      if (v9)
        goto LABEL_9;
LABEL_10:
      v14 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_41;
      if (v14 >= v31)
        goto LABEL_35;
      v15 = v32[v14];
      ++v11;
      if (!v15)
      {
        v11 = v14 + 1;
        if (v14 + 1 >= v31)
          goto LABEL_35;
        v15 = v32[v11];
        if (!v15)
        {
          v11 = v14 + 2;
          if (v14 + 2 >= v31)
            goto LABEL_35;
          v15 = v32[v11];
          if (!v15)
          {
            v16 = v14 + 3;
            if (v16 >= v31)
            {
LABEL_35:
              swift_release();
              v30 = 1 << *(_BYTE *)(v3 + 32);
              if (v30 > 63)
                sub_1001194A8(0, (unint64_t)(v30 + 63) >> 6, v32);
              else
                *v32 = -1 << v30;
              *(_QWORD *)(v3 + 16) = 0;
              break;
            }
            v15 = v32[v16];
            if (!v15)
            {
              while (1)
              {
                v11 = v16 + 1;
                if (__OFADD__(v16, 1))
                  goto LABEL_42;
                if (v11 >= v31)
                  goto LABEL_35;
                v15 = v32[v11];
                ++v16;
                if (v15)
                  goto LABEL_23;
              }
            }
            v11 = v16;
          }
        }
      }
LABEL_23:
      v9 = (v15 - 1) & v15;
    }
  }
  swift_release();
  *v2 = v6;
}

void sub_10011CA18(uint64_t a1, uint64_t *a2, void (*a3)(_QWORD *, uint64_t))
{
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t i;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD v28[9];

  v5 = (_QWORD *)*v3;
  sub_10012415C(a1, a2);
  v6 = (_QWORD *)static _SetStorage.resize(original:capacity:move:)(v5, v3, 1);
  if (v5[2])
  {
    sub_10012407C();
    v27 = v5 + 7;
    sub_100124298();
    v9 = v8 & v7;
    v11 = (unint64_t)(v10 + 63) >> 6;
    sub_10002679C();
    v12 = 0;
    if (!v9)
      goto LABEL_4;
LABEL_3:
    v13 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    for (i = v13 | (v12 << 6); ; i = __clz(__rbit64(v16)) + (v12 << 6))
    {
      v18 = *(unsigned __int8 *)(v5[6] + i);
      Hasher.init(_seed:)(v28, v6[5]);
      a3(v28, v18);
      Hasher._finalize()();
      sub_100124060();
      if (v19)
      {
        sub_100060314();
        while (++v22 != v23 || (v21 & 1) == 0)
        {
          v24 = v22 == v23;
          if (v22 == v23)
            v22 = 0;
          v21 |= v24;
          if (v6[v22 + 7] != -1)
          {
            sub_100060300();
            goto LABEL_27;
          }
        }
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
        return;
      }
      sub_100060348();
LABEL_27:
      sub_100123FF0(v20);
      *(_BYTE *)(v6[6] + v25) = v18;
      ++v6[2];
      if (v9)
        goto LABEL_3;
LABEL_4:
      v15 = v12 + 1;
      if (__OFADD__(v12, 1))
        goto LABEL_35;
      if (v15 >= v11)
        goto LABEL_29;
      v16 = v27[v15];
      ++v12;
      if (!v16)
      {
        v12 = v15 + 1;
        if (v15 + 1 >= v11)
          goto LABEL_29;
        v16 = v27[v12];
        if (!v16)
        {
          v12 = v15 + 2;
          if (v15 + 2 >= v11)
            goto LABEL_29;
          v16 = v27[v12];
          if (!v16)
          {
            v17 = v15 + 3;
            if (v17 >= v11)
            {
LABEL_29:
              sub_1000269A0();
              sub_10012407C();
              if (v26 > 63)
                sub_1001194A8(0, (unint64_t)(v26 + 63) >> 6, v27);
              else
                *v27 = -1 << v26;
              v5[2] = 0;
              break;
            }
            v16 = v27[v17];
            if (!v16)
            {
              while (1)
              {
                v12 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_36;
                if (v12 >= v11)
                  goto LABEL_29;
                v16 = v27[v12];
                ++v17;
                if (v16)
                  goto LABEL_17;
              }
            }
            v12 = v17;
          }
        }
      }
LABEL_17:
      v9 = (v16 - 1) & v16;
    }
  }
  sub_1000269A0();
  *v3 = v6;
  sub_100123F40();
}

Swift::Int sub_10011CC50(uint64_t a1)
{
  Swift::Int *v1;
  Swift::Int *v2;
  Swift::Int v3;
  uint64_t v4;
  Swift::Int result;
  Swift::Int v6;
  int64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  Swift::Int v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  Swift::UInt8 v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int *v29;
  uint64_t v30[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_1000055B0(&qword_1002B2450);
  result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = result;
  if (*(_QWORD *)(v3 + 16))
  {
    v29 = v2;
    v7 = 0;
    v8 = (_QWORD *)(v3 + 56);
    v9 = 1 << *(_BYTE *)(v3 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v3 + 56);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 56;
    if (!v11)
      goto LABEL_10;
LABEL_9:
    v14 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    for (i = v14 | (v7 << 6); ; i = __clz(__rbit64(v17)) + (v7 << 6))
    {
      v19 = *(_BYTE *)(*(_QWORD *)(v3 + 48) + i);
      Hasher.init(_seed:)(v30, *(_QWORD *)(v6 + 40));
      Hasher._combine(_:)(v19);
      result = Hasher._finalize()();
      v20 = -1 << *(_BYTE *)(v6 + 32);
      v21 = result & ~v20;
      v22 = v21 >> 6;
      if (((-1 << v21) & ~*(_QWORD *)(v13 + 8 * (v21 >> 6))) == 0)
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v20) >> 6;
        while (++v22 != v25 || (v24 & 1) == 0)
        {
          v26 = v22 == v25;
          if (v22 == v25)
            v22 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v22);
          if (v27 != -1)
          {
            v23 = __clz(__rbit64(~v27)) + (v22 << 6);
            goto LABEL_33;
          }
        }
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return result;
      }
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v13 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
      *(_QWORD *)(v13 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
      *(_BYTE *)(*(_QWORD *)(v6 + 48) + v23) = v19;
      ++*(_QWORD *)(v6 + 16);
      if (v11)
        goto LABEL_9;
LABEL_10:
      v16 = v7 + 1;
      if (__OFADD__(v7, 1))
        goto LABEL_41;
      if (v16 >= v12)
        goto LABEL_35;
      v17 = v8[v16];
      ++v7;
      if (!v17)
      {
        v7 = v16 + 1;
        if (v16 + 1 >= v12)
          goto LABEL_35;
        v17 = v8[v7];
        if (!v17)
        {
          v7 = v16 + 2;
          if (v16 + 2 >= v12)
            goto LABEL_35;
          v17 = v8[v7];
          if (!v17)
          {
            v18 = v16 + 3;
            if (v18 >= v12)
            {
LABEL_35:
              v28 = 1 << *(_BYTE *)(v3 + 32);
              if (v28 > 63)
                sub_1001194A8(0, (unint64_t)(v28 + 63) >> 6, (_QWORD *)(v3 + 56));
              else
                *v8 = -1 << v28;
              v2 = v29;
              *(_QWORD *)(v3 + 16) = 0;
              break;
            }
            v17 = v8[v18];
            if (!v17)
            {
              while (1)
              {
                v7 = v18 + 1;
                if (__OFADD__(v18, 1))
                  goto LABEL_42;
                if (v7 >= v12)
                  goto LABEL_35;
                v17 = v8[v7];
                ++v18;
                if (v17)
                  goto LABEL_23;
              }
            }
            v7 = v18;
          }
        }
      }
LABEL_23:
      v11 = (v17 - 1) & v17;
    }
  }
  result = swift_release();
  *v2 = v6;
  return result;
}

void sub_10011CEF4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD v66[10];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_1000055B0((uint64_t *)&unk_1002B2458);
  v48 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  if (*(_QWORD *)(v3 + 16))
  {
    v35 = v2;
    v5 = 1 << *(_BYTE *)(v3 + 32);
    v37 = (_QWORD *)(v3 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v3 + 56);
    v36 = (unint64_t)(v5 + 63) >> 6;
    v8 = v48 + 56;
    swift_retain(v3);
    v9 = 0;
    v38 = v3;
    if (!v7)
      goto LABEL_10;
LABEL_9:
    v39 = (v7 - 1) & v7;
    v40 = v9;
    for (i = __clz(__rbit64(v7)) | (v9 << 6); ; i = __clz(__rbit64(v12)) + (v13 << 6))
    {
      v15 = (unsigned __int8 *)(*(_QWORD *)(v3 + 48) + 32 * i);
      v65 = *v15;
      v64 = v15[1];
      v49 = v15[2];
      v55 = v15[3];
      v58 = v15[4];
      v59 = v15[5];
      v60 = v15[6];
      v61 = v15[7];
      v62 = v15[8];
      v63 = v15[9];
      v16 = v15[10];
      v47 = v15[11];
      v56 = v15[12];
      v57 = v15[13];
      v17 = v15[14];
      v46 = v15[15];
      v52 = v15[16];
      v53 = v15[17];
      v54 = v15[18];
      v18 = v15[19];
      v45 = v15[20];
      v50 = v15[21];
      v51 = v15[22];
      v19 = v15[23];
      v44 = v15[24];
      v20 = v15[25];
      v43 = v15[26];
      v21 = v15[27];
      v42 = v15[28];
      v22 = v15[29];
      v41 = v15[30];
      v23 = v15[31];
      Hasher.init(_seed:)(v66, *(_QWORD *)(v48 + 40));
      UniversalControlDisplayID.hash(into:)(v66, v65 | (v64 << 8) | (v49 << 16) | (v55 << 24) | (v58 << 32) | (v59 << 40) | (v60 << 48) | (v61 << 56), v62 | (v63 << 8) | (v16 << 16) | (v47 << 24) | (v56 << 32) | (v57 << 40) | (v17 << 48) | (v46 << 56), v52 | (v53 << 8) | (v54 << 16) | (v18 << 24) | (v45 << 32) | (v50 << 40) | (v51 << 48) | (v19 << 56), v44 | (v20 << 8) | (v43 << 16) | (v21 << 24) | (v42 << 32) | (v22 << 40) | (v41 << 48) | (v23 << 56));
      v24 = Hasher._finalize()();
      v25 = -1 << *(_BYTE *)(v48 + 32);
      v26 = v24 & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v8 + 8 * (v26 >> 6))) == 0)
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v25) >> 6;
        while (++v27 != v30 || (v29 & 1) == 0)
        {
          v31 = v27 == v30;
          if (v27 == v30)
            v27 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v8 + 8 * v27);
          if (v32 != -1)
          {
            v28 = __clz(__rbit64(~v32)) + (v27 << 6);
            goto LABEL_33;
          }
        }
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return;
      }
      v28 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v8 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
      *(_QWORD *)(v8 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
      v33 = (_BYTE *)(*(_QWORD *)(v48 + 48) + 32 * v28);
      *v33 = v65;
      v33[1] = v64;
      v33[2] = v49;
      v33[3] = v55;
      v33[4] = v58;
      v33[5] = v59;
      v33[6] = v60;
      v33[7] = v61;
      v33[8] = v62;
      v33[9] = v63;
      v33[10] = v16;
      v33[11] = v47;
      v33[12] = v56;
      v33[13] = v57;
      v33[14] = v17;
      v33[15] = v46;
      v33[16] = v52;
      v33[17] = v53;
      v33[18] = v54;
      v33[19] = v18;
      v33[20] = v45;
      v33[21] = v50;
      v33[22] = v51;
      v33[23] = v19;
      v33[24] = v44;
      v33[25] = v20;
      v33[26] = v43;
      v33[27] = v21;
      v33[28] = v42;
      v33[29] = v22;
      v33[30] = v41;
      v3 = v38;
      v33[31] = v23;
      ++*(_QWORD *)(v48 + 16);
      v7 = v39;
      v9 = v40;
      if (v39)
        goto LABEL_9;
LABEL_10:
      v11 = v9 + 1;
      if (__OFADD__(v9, 1))
        goto LABEL_41;
      if (v11 >= v36)
        goto LABEL_35;
      v12 = v37[v11];
      v13 = v9 + 1;
      if (!v12)
      {
        v13 = v9 + 2;
        if (v9 + 2 >= v36)
          goto LABEL_35;
        v12 = v37[v13];
        if (!v12)
        {
          v13 = v9 + 3;
          if (v9 + 3 >= v36)
            goto LABEL_35;
          v12 = v37[v13];
          if (!v12)
          {
            v14 = v9 + 4;
            if (v9 + 4 >= v36)
            {
LABEL_35:
              swift_release();
              v2 = v35;
              v34 = 1 << *(_BYTE *)(v3 + 32);
              if (v34 > 63)
                sub_1001194A8(0, (unint64_t)(v34 + 63) >> 6, v37);
              else
                *v37 = -1 << v34;
              *(_QWORD *)(v3 + 16) = 0;
              break;
            }
            v12 = v37[v14];
            if (!v12)
            {
              while (1)
              {
                v13 = v14 + 1;
                if (__OFADD__(v14, 1))
                  goto LABEL_42;
                if (v13 >= v36)
                  goto LABEL_35;
                v12 = v37[v13];
                ++v14;
                if (v12)
                  goto LABEL_23;
              }
            }
            v13 = v9 + 4;
          }
        }
      }
LABEL_23:
      v39 = (v12 - 1) & v12;
      v40 = v13;
    }
  }
  swift_release();
  *v2 = v48;
}

unint64_t sub_10011D49C(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  char v6;
  char v7;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  Swift::Int v15;
  unint64_t result;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _BYTE v32[16];
  _QWORD v33[9];

  v6 = a4;
  v7 = a3;
  v30 = a3 >> 16;
  v31 = a3 >> 8;
  v28 = a3 >> 24;
  v10 = HIDWORD(a3);
  v26 = HIDWORD(a3);
  v11 = a3 >> 40;
  v25 = a3 >> 40;
  v21 = HIBYTE(a3);
  v22 = HIWORD(a3);
  v12 = a4 >> 8;
  v19 = a4 >> 24;
  v20 = a4 >> 16;
  v13 = HIDWORD(a4);
  v23 = HIDWORD(a4);
  v24 = a4 >> 8;
  v18 = a4 >> 40;
  v29 = HIWORD(a4);
  v14 = HIBYTE(a4);
  Hasher.init(_seed:)(v33, *(_QWORD *)(a5 + 40));
  swift_bridgeObjectRetain(a2);
  String.hash(into:)(v33, a1, a2);
  swift_bridgeObjectRelease(a2);
  v32[0] = v7;
  v32[1] = v31;
  v32[2] = v30;
  v32[3] = v28;
  v32[4] = v10;
  v32[5] = v11;
  v32[6] = v22;
  v32[7] = v21;
  v32[8] = v6;
  v32[9] = v12;
  v32[10] = v20;
  v32[11] = v19;
  v32[12] = v13;
  v32[13] = v18;
  v32[14] = v29;
  v32[15] = v14;
  Hasher.combine(bytes:)(v32, v33);
  v15 = Hasher._finalize()();
  result = _HashTable.nextHole(atOrAfter:)(v15 & ~(-1 << *(_BYTE *)(a5 + 32)), a5 + 56, ~(-1 << *(_BYTE *)(a5 + 32)));
  *(_QWORD *)(a5 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  v17 = *(_QWORD *)(a5 + 48) + 32 * result;
  *(_QWORD *)v17 = a1;
  *(_QWORD *)(v17 + 8) = a2;
  *(_BYTE *)(v17 + 16) = v7;
  *(_BYTE *)(v17 + 17) = v31;
  *(_BYTE *)(v17 + 18) = v30;
  *(_BYTE *)(v17 + 19) = v28;
  *(_BYTE *)(v17 + 20) = v26;
  *(_BYTE *)(v17 + 21) = v25;
  *(_BYTE *)(v17 + 22) = v22;
  *(_BYTE *)(v17 + 23) = v21;
  *(_BYTE *)(v17 + 24) = v6;
  *(_BYTE *)(v17 + 25) = v24;
  *(_BYTE *)(v17 + 26) = v20;
  *(_BYTE *)(v17 + 27) = v19;
  *(_BYTE *)(v17 + 28) = v23;
  *(_BYTE *)(v17 + 29) = v18;
  *(_BYTE *)(v17 + 30) = v29;
  *(_BYTE *)(v17 + 31) = v14;
  ++*(_QWORD *)(a5 + 16);
  return result;
}

unint64_t sub_10011D6DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;

  v4 = *(_QWORD *)(a2 + 40);
  v5 = type metadata accessor for UniversalControlDevice(0);
  sub_1000840B4(&qword_1002AC880, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UniversalControlDevice, (uint64_t)&protocol conformance descriptor for UniversalControlDevice);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  result = _HashTable.nextHole(atOrAfter:)(v7 & ~(-1 << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1 << *(_BYTE *)(a2 + 32)));
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

uint64_t sub_10011D7AC(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD v28[9];

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_10011B55C(v11);
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_10011F1D0();
      goto LABEL_22;
    }
    sub_1001202F0(v11);
  }
  v12 = *v4;
  Hasher.init(_seed:)(v28, *(_QWORD *)(*v4 + 40));
  String.hash(into:)(v28, v8, a2);
  result = Hasher._finalize()();
  v13 = -1 << *(_BYTE *)(v12 + 32);
  a3 = result & ~v13;
  v14 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v15 = *(_QWORD *)(v12 + 48);
    v16 = (_QWORD *)(v15 + 16 * a3);
    v17 = v16[1];
    v18 = *v16 == v8 && v17 == a2;
    if (v18 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, a2, 0), (result & 1) != 0))
    {
LABEL_21:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }
    else
    {
      v19 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v19;
        if (((*(_QWORD *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v20 = (_QWORD *)(v15 + 16 * a3);
        v21 = v20[1];
        if (*v20 != v8 || v21 != a2)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, a2, 0);
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v23 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v24 = (uint64_t *)(*(_QWORD *)(v23 + 48) + 16 * a3);
  *v24 = v8;
  v24[1] = a2;
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (v26)
    __break(1u);
  else
    *(_QWORD *)(v23 + 16) = v27;
  return result;
}

void sub_10011D944(unint64_t a1, unint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _BYTE v35[16];
  _QWORD v36[9];

  v8 = HIBYTE(a2);
  v9 = HIWORD(a2);
  v10 = a2 >> 40;
  v11 = HIDWORD(a2);
  v12 = *(_QWORD *)(*v4 + 16);
  v13 = *(_QWORD *)(*v4 + 24);
  v33 = a2 >> 16;
  v34 = a2 >> 24;
  v31 = HIBYTE(a1);
  v32 = a2 >> 8;
  v29 = a1 >> 40;
  v30 = HIWORD(a1);
  v27 = a1 >> 24;
  v28 = HIDWORD(a1);
  v25 = a1 >> 8;
  v26 = a1 >> 16;
  v24 = HIDWORD(a2);
  if (v13 > v12 && (a4 & 1) != 0)
  {
    v11 = a2 >> 40;
    v10 = HIWORD(a2);
    v9 = HIBYTE(a2);
    goto LABEL_15;
  }
  v14 = v12 + 1;
  if ((a4 & 1) != 0)
  {
    sub_10011B834(v14);
  }
  else
  {
    if (v13 > v12)
    {
      v11 = a2 >> 40;
      v10 = HIWORD(a2);
      v9 = HIBYTE(a2);
      sub_10011F380();
      goto LABEL_15;
    }
    sub_100120598(v14);
  }
  v15 = *v4;
  Hasher.init(_seed:)(v36, *(_QWORD *)(*v4 + 40));
  v35[0] = a1;
  v35[1] = v25;
  v35[2] = v26;
  v35[3] = v27;
  v35[4] = v28;
  v35[5] = v29;
  v35[6] = v30;
  v35[7] = v31;
  v35[8] = a2;
  v35[9] = v32;
  v35[10] = v33;
  v35[11] = v34;
  v35[12] = v11;
  LOBYTE(v11) = v10;
  v35[13] = v10;
  LOBYTE(v10) = v9;
  v35[14] = v9;
  LOBYTE(v9) = v8;
  v35[15] = v8;
  Hasher.combine(bytes:)(v35, v36);
  v16 = Hasher._finalize()();
  v17 = -1 << *(_BYTE *)(v15 + 32);
  a3 = v16 & ~v17;
  if (((*(_QWORD *)(v15 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    if (static UniversalControlUUID.compare(lhs:rhs:)(*(_QWORD *)(*(_QWORD *)(v15 + 48) + 16 * a3), *(_QWORD *)(*(_QWORD *)(v15 + 48) + 16 * a3 + 8), a1, a2))
    {
      v18 = ~v17;
      while (1)
      {
        a3 = (a3 + 1) & v18;
        if (((*(_QWORD *)(v15 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        if (!static UniversalControlUUID.compare(lhs:rhs:)(*(_QWORD *)(*(_QWORD *)(v15 + 48) + 16 * a3), *(_QWORD *)(*(_QWORD *)(v15 + 48) + 16 * a3 + 8), a1, a2))goto LABEL_14;
      }
    }
    else
    {
LABEL_14:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UniversalControlDeviceID);
      __break(1u);
    }
  }
LABEL_15:
  v19 = *v4;
  *(_QWORD *)(*v4 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v20 = (_BYTE *)(*(_QWORD *)(v19 + 48) + 16 * a3);
  *v20 = a1;
  v20[1] = v25;
  v20[2] = v26;
  v20[3] = v27;
  v20[4] = v28;
  v20[5] = v29;
  v20[6] = v30;
  v20[7] = v31;
  v20[8] = a2;
  v20[9] = v32;
  v20[10] = v33;
  v20[11] = v34;
  v20[12] = v24;
  v20[13] = v11;
  v20[14] = v10;
  v20[15] = v9;
  v21 = *(_QWORD *)(v19 + 16);
  v22 = __OFADD__(v21, 1);
  v23 = v21 + 1;
  if (v22)
    __break(1u);
  *(_QWORD *)(v19 + 16) = v23;
}

void sub_10011DC48(unsigned __int8 a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  Swift::UInt v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  _QWORD v18[9];

  v5 = a1;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10011BC98(v8);
  }
  else
  {
    if (v7 > v6)
    {
      sub_10011F9D8((uint64_t *)&unk_1002B2410);
      goto LABEL_14;
    }
    sub_1001209BC(v8);
  }
  v9 = *v3;
  Hasher.init(_seed:)(v18, *(_QWORD *)(*v3 + 40));
  Hasher._combine(_:)(v5);
  v10 = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v9 + 32);
  a2 = v10 & ~v11;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v12 = *(_QWORD *)(v9 + 48);
    if (*(unsigned __int8 *)(v12 + a2) == (_DWORD)v5)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Connection.State);
      __break(1u);
    }
    else
    {
      v13 = ~v11;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(unsigned __int8 *)(v12 + a2) == (_DWORD)v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v14 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v14 + 48) + a2) = v5;
  v15 = *(_QWORD *)(v14 + 16);
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
    __break(1u);
  else
    *(_QWORD *)(v14 + 16) = v17;
}

uint64_t sub_10011DDA4(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[9];

  v4 = v3;
  v8 = type metadata accessor for HIDUniversalSenderID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v27[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(*v4 + 16);
  v13 = *(_QWORD *)(*v4 + 24);
  if (v13 > v12 && (a3 & 1) != 0)
    goto LABEL_12;
  v14 = v12 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10011BF3C(v14);
  }
  else
  {
    if (v13 > v12)
    {
      sub_10011F480();
      goto LABEL_12;
    }
    sub_100120C30(v14);
  }
  v15 = *v4;
  Hasher.init(_seed:)(v27, *(_QWORD *)(*v4 + 40));
  HIDUniversalSenderID.hash(into:)((uint64_t)v27);
  v16 = Hasher._finalize()();
  v17 = -1 << *(_BYTE *)(v15 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v26 = v8;
    v18 = ~v17;
    v19 = *(_QWORD *)(v9 + 72);
    do
    {
      sub_1000E0E9C(*(_QWORD *)(v15 + 48) + v19 * a2, (uint64_t)v11);
      v20 = static HIDUniversalSenderID.__derived_struct_equals(_:_:)((uint64_t)v11, a1);
      sub_1000E0F24((uint64_t)v11);
      if (v20)
        goto LABEL_15;
      a2 = (a2 + 1) & v18;
    }
    while (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v21 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = sub_1000E0EE0(a1, *(_QWORD *)(v21 + 48) + *(_QWORD *)(v9 + 72) * a2);
  v23 = *(_QWORD *)(v21 + 16);
  v24 = __OFADD__(v23, 1);
  v25 = v23 + 1;
  if (!v24)
  {
    *(_QWORD *)(v21 + 16) = v25;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v26);
  __break(1u);
  return result;
}

unint64_t sub_10011DF60(unint64_t result, unint64_t a2, unsigned __int8 a3, unint64_t a4, char a5)
{
  uint64_t *v5;
  char v7;
  char v8;
  Swift::UInt v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _BYTE v40[16];
  _QWORD v41[9];

  v7 = a2;
  v8 = result;
  v9 = a3;
  v10 = HIBYTE(a2);
  v11 = HIWORD(a2);
  v12 = a2 >> 40;
  v38 = a2 >> 24;
  v39 = HIDWORD(a2);
  v36 = a2 >> 8;
  v37 = a2 >> 16;
  v13 = *(_QWORD *)(*v5 + 16);
  v14 = *(_QWORD *)(*v5 + 24);
  v34 = HIWORD(result);
  v35 = HIBYTE(result);
  v32 = HIDWORD(result);
  v33 = result >> 40;
  v30 = result >> 16;
  v31 = result >> 24;
  v28 = HIWORD(a2);
  v29 = result >> 8;
  v27 = a2 >> 40;
  if (v14 > v13 && (a5 & 1) != 0)
  {
    v11 = HIBYTE(a2);
LABEL_16:
    v22 = *v5;
    *(_QWORD *)(*v5 + 8 * (a4 >> 6) + 56) |= 1 << a4;
    v23 = (_BYTE *)(*(_QWORD *)(v22 + 48) + 17 * a4);
    *v23 = v8;
    v23[1] = v29;
    v23[2] = v30;
    v23[3] = v31;
    v23[4] = v32;
    v23[5] = v33;
    v23[6] = v34;
    v23[7] = v35;
    v23[8] = v7;
    v23[9] = v36;
    v23[10] = v37;
    v23[11] = v38;
    v23[12] = v39;
    v23[13] = v27;
    v23[14] = v28;
    v23[15] = v11;
    v23[16] = v9;
    v24 = *(_QWORD *)(v22 + 16);
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
      __break(1u);
    *(_QWORD *)(v22 + 16) = v26;
    return result;
  }
  v15 = v13 + 1;
  if ((a5 & 1) != 0)
  {
    sub_10011C280(v15);
  }
  else
  {
    if (v14 > v13)
    {
      v11 = HIBYTE(a2);
      result = (unint64_t)sub_10011F688();
      goto LABEL_16;
    }
    sub_100120F3C(v15);
  }
  v16 = *v5;
  Hasher.init(_seed:)(v41, *(_QWORD *)(*v5 + 40));
  v40[0] = v8;
  v40[1] = v29;
  v40[2] = v30;
  v40[3] = v31;
  v40[4] = v32;
  v40[5] = v33;
  v40[6] = v34;
  v40[7] = v35;
  v40[8] = v7;
  v40[9] = v36;
  v40[10] = v37;
  v40[11] = v38;
  v40[12] = v39;
  v40[13] = v12;
  v40[14] = v11;
  LOBYTE(v11) = v10;
  v40[15] = v10;
  Hasher.combine(bytes:)(v40, v41);
  Hasher._combine(_:)(v9);
  result = Hasher._finalize()();
  v17 = -1 << *(_BYTE *)(v16 + 32);
  a4 = result & ~v17;
  if (((*(_QWORD *)(v16 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8)) >> a4) & 1) == 0)
    goto LABEL_16;
  v18 = ~v17;
  while (1)
  {
    v19 = *(_QWORD *)(v16 + 48) + 17 * a4;
    v20 = *(unsigned __int8 *)(v19 + 16);
    result = static UniversalControlUUID.compare(lhs:rhs:)(*(_QWORD *)v19, *(_QWORD *)(v19 + 8));
    if (!result && v20 == (_DWORD)v9)
      break;
    a4 = (a4 + 1) & v18;
    if (((*(_QWORD *)(v16 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8)) >> a4) & 1) == 0)
      goto LABEL_16;
  }
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Connection);
  __break(1u);
  return result;
}

void sub_10011E268(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = a1;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_12;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10011C708(v9);
  }
  else
  {
    if (v8 > v7)
    {
      sub_10011F830();
      goto LABEL_12;
    }
    sub_100121394(v9);
  }
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v4 = type metadata accessor for UniversalControlDevice(0);
  sub_1000840B4(&qword_1002AC880, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UniversalControlDevice, (uint64_t)&protocol conformance descriptor for UniversalControlDevice);
  v13 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v4, v12);
  v14 = -1 << *(_BYTE *)(v10 + 32);
  a2 = v13 & ~v14;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v15 = ~v14;
    sub_1000840B4((unint64_t *)&unk_1002AC0A0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UniversalControlDevice, (uint64_t)&protocol conformance descriptor for UniversalControlDevice);
    v17 = v16;
    do
    {
      v22 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * a2);
      if ((dispatch thunk of static Equatable.== infix(_:_:)(&v22, &v23, v4, v17) & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v15;
    }
    while (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v18 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v18 + 48) + 8 * a2) = a1;
  v19 = *(_QWORD *)(v18 + 16);
  v20 = __OFADD__(v19, 1);
  v21 = v19 + 1;
  if (!v20)
  {
    *(_QWORD *)(v18 + 16) = v21;
    return;
  }
  __break(1u);
LABEL_15:
  ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v4);
  __break(1u);
}

void sub_10011E418(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  _QWORD v17[9];

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10011CA18(v8, (uint64_t *)&unk_1002B2480, (void (*)(_QWORD *, uint64_t))&UniversalControlEdge.hash(into:));
  }
  else
  {
    if (v7 > v6)
    {
      sub_10011F9D8((uint64_t *)&unk_1002B2480);
      goto LABEL_14;
    }
    sub_100121804(v8, (uint64_t *)&unk_1002B2480, (void (*)(_QWORD *, uint64_t))&UniversalControlEdge.hash(into:));
  }
  v9 = *v3;
  Hasher.init(_seed:)(v17, *(_QWORD *)(*v3 + 40));
  UniversalControlEdge.hash(into:)(v17, a1);
  v10 = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v9 + 32);
  a2 = v10 & ~v11;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    if ((static UniversalControlEdge.== infix(_:_:)(*(unsigned __int8 *)(*(_QWORD *)(v9 + 48) + a2), a1) & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UniversalControlEdge);
      __break(1u);
    }
    else
    {
      v12 = ~v11;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if ((static UniversalControlEdge.== infix(_:_:)(*(unsigned __int8 *)(*(_QWORD *)(v9 + 48) + a2), a1) & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v13 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v13 + 48) + a2) = a1;
  v14 = *(_QWORD *)(v13 + 16);
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    *(_QWORD *)(v13 + 16) = v16;
}

uint64_t sub_10011E5A0(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  Swift::UInt8 v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  _QWORD v17[9];

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10011CC50(v8);
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_10011FAD0();
      goto LABEL_14;
    }
    sub_1001219F0(v8);
  }
  v9 = *v3;
  Hasher.init(_seed:)(v17, *(_QWORD *)(*v3 + 40));
  Hasher._combine(_:)(v5);
  result = Hasher._finalize()();
  v10 = -1 << *(_BYTE *)(v9 + 32);
  a2 = result & ~v10;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v11 = *(_QWORD *)(v9 + 48);
    if (*(unsigned __int8 *)(v11 + a2) == v5)
    {
LABEL_13:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for KeyboardUsage);
      __break(1u);
    }
    else
    {
      v12 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(unsigned __int8 *)(v11 + a2) == v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v13 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v13 + 48) + a2) = v5;
  v14 = *(_QWORD *)(v13 + 16);
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    *(_QWORD *)(v13 + 16) = v16;
  return result;
}

uint64_t sub_10011E6EC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, char a6)
{
  uint64_t *v6;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  _QWORD v23[9];

  v11 = result;
  v12 = *(_QWORD *)(*v6 + 16);
  v13 = *(_QWORD *)(*v6 + 24);
  if (v13 > v12 && (a6 & 1) != 0)
    goto LABEL_14;
  v14 = v12 + 1;
  if ((a6 & 1) != 0)
  {
    sub_10011CEF4(v14);
  }
  else
  {
    if (v13 > v12)
    {
      result = (uint64_t)sub_10011FC64();
      goto LABEL_14;
    }
    sub_100121C64(v14);
  }
  v15 = *v6;
  Hasher.init(_seed:)(v23, *(_QWORD *)(*v6 + 40));
  UniversalControlDisplayID.hash(into:)(v23, v11, a2, a3, a4);
  result = Hasher._finalize()();
  v16 = -1 << *(_BYTE *)(v15 + 32);
  a5 = result & ~v16;
  if (((*(_QWORD *)(v15 + 56 + ((a5 >> 3) & 0xFFFFFFFFFFFFF8)) >> a5) & 1) != 0)
  {
    result = static UniversalControlDisplayID.== infix(_:_:)(*(_QWORD *)(*(_QWORD *)(v15 + 48) + 32 * a5), *(_QWORD *)(*(_QWORD *)(v15 + 48) + 32 * a5 + 8), *(_QWORD *)(*(_QWORD *)(v15 + 48) + 32 * a5 + 16), *(_QWORD *)(*(_QWORD *)(v15 + 48) + 32 * a5 + 24), v11, a2, a3, a4);
    if ((result & 1) != 0)
    {
LABEL_13:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UniversalControlDisplayID);
      __break(1u);
    }
    else
    {
      v17 = ~v16;
      while (1)
      {
        a5 = (a5 + 1) & v17;
        if (((*(_QWORD *)(v15 + 56 + ((a5 >> 3) & 0xFFFFFFFFFFFFF8)) >> a5) & 1) == 0)
          break;
        result = static UniversalControlDisplayID.== infix(_:_:)(*(_QWORD *)(*(_QWORD *)(v15 + 48) + 32 * a5), *(_QWORD *)(*(_QWORD *)(v15 + 48) + 32 * a5 + 8), *(_QWORD *)(*(_QWORD *)(v15 + 48) + 32 * a5 + 16), *(_QWORD *)(*(_QWORD *)(v15 + 48) + 32 * a5 + 24), v11, a2, a3, a4);
        if ((result & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v18 = *v6;
  *(_QWORD *)(*v6 + 8 * (a5 >> 6) + 56) |= 1 << a5;
  v19 = (uint64_t *)(*(_QWORD *)(v18 + 48) + 32 * a5);
  *v19 = v11;
  v19[1] = a2;
  v19[2] = a3;
  v19[3] = a4;
  v20 = *(_QWORD *)(v18 + 16);
  v21 = __OFADD__(v20, 1);
  v22 = v20 + 1;
  if (v21)
    __break(1u);
  else
    *(_QWORD *)(v18 + 16) = v22;
  return result;
}

uint64_t sub_10011E984(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, unint64_t, uint64_t);
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;

  v31 = a1;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(*v3 + 16);
  v12 = *(_QWORD *)(*v3 + 24);
  v30 = v3;
  if (v12 > v11 && (a3 & 1) != 0)
    goto LABEL_12;
  v13 = v11 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10011B01C(v13);
  }
  else
  {
    if (v12 > v11)
    {
      sub_10011EEB4();
      goto LABEL_12;
    }
    sub_10011FE00(v13);
  }
  v14 = *v3;
  v15 = *(_QWORD *)(*v3 + 40);
  sub_1000840B4(&qword_1002AD0B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v17 = dispatch thunk of Hashable._rawHashValue(seed:)(v15, v6, v16);
  v18 = -1 << *(_BYTE *)(v14 + 32);
  a2 = v17 & ~v18;
  if (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v19 = ~v18;
    v20 = *(_QWORD *)(v7 + 72);
    v21 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v21(v10, *(_QWORD *)(v14 + 48) + v20 * a2, v6);
      sub_1000840B4((unint64_t *)&qword_1002A9370, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v23 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v31, v6, v22);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      if ((v23 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v19;
    }
    while (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v24 = v31;
  v25 = *v30;
  *(_QWORD *)(*v30 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v7 + 32))(*(_QWORD *)(v25 + 48) + *(_QWORD *)(v7 + 72) * a2, v24, v6, v8);
  v27 = *(_QWORD *)(v25 + 16);
  v28 = __OFADD__(v27, 1);
  v29 = v27 + 1;
  if (!v28)
  {
    *(_QWORD *)(v25 + 16) = v29;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

void sub_10011EB90(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, char a6)
{
  uint64_t *v6;
  char v8;
  char v9;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _BYTE v47[16];
  _QWORD v48[9];

  v8 = a4;
  v9 = a3;
  v12 = HIBYTE(a4);
  v13 = HIWORD(a4);
  v14 = a4 >> 40;
  v45 = a4 >> 24;
  v46 = HIDWORD(a4);
  v43 = a4 >> 8;
  v44 = a4 >> 16;
  v15 = *(_QWORD *)(*v6 + 16);
  v16 = *(_QWORD *)(*v6 + 24);
  v41 = HIWORD(a3);
  v42 = HIBYTE(a3);
  v39 = HIDWORD(a3);
  v40 = a3 >> 40;
  v37 = a3 >> 16;
  v38 = a3 >> 24;
  v35 = HIBYTE(a4);
  v36 = a3 >> 8;
  v33 = a4 >> 40;
  v34 = HIWORD(a4);
  if (v16 > v15 && (a6 & 1) != 0)
  {
LABEL_17:
    v27 = *v32;
    *(_QWORD *)(*v32 + 8 * (a5 >> 6) + 56) |= 1 << a5;
    v28 = *(_QWORD *)(v27 + 48) + 32 * a5;
    *(_QWORD *)v28 = a1;
    *(_QWORD *)(v28 + 8) = a2;
    *(_BYTE *)(v28 + 16) = v9;
    *(_BYTE *)(v28 + 17) = v36;
    *(_BYTE *)(v28 + 18) = v37;
    *(_BYTE *)(v28 + 19) = v38;
    *(_BYTE *)(v28 + 20) = v39;
    *(_BYTE *)(v28 + 21) = v40;
    *(_BYTE *)(v28 + 22) = v41;
    *(_BYTE *)(v28 + 23) = v42;
    *(_BYTE *)(v28 + 24) = v8;
    *(_BYTE *)(v28 + 25) = v43;
    *(_BYTE *)(v28 + 26) = v44;
    *(_BYTE *)(v28 + 27) = v45;
    *(_BYTE *)(v28 + 28) = v46;
    *(_BYTE *)(v28 + 29) = v33;
    *(_BYTE *)(v28 + 30) = v34;
    *(_BYTE *)(v28 + 31) = v35;
    v29 = *(_QWORD *)(v27 + 16);
    v30 = __OFADD__(v29, 1);
    v31 = v29 + 1;
    if (v30)
      __break(1u);
    *(_QWORD *)(v27 + 16) = v31;
    return;
  }
  v17 = v15 + 1;
  if ((a6 & 1) != 0)
  {
    sub_10011B388(v17);
    goto LABEL_8;
  }
  if (v16 > v15)
  {
    sub_10011F070();
    goto LABEL_17;
  }
  sub_100120128(v17);
LABEL_8:
  v18 = *v6;
  Hasher.init(_seed:)(v48, *(_QWORD *)(*v6 + 40));
  swift_bridgeObjectRetain();
  String.hash(into:)(v48, a1, a2);
  swift_bridgeObjectRelease();
  v47[0] = v9;
  v47[1] = v36;
  v47[2] = v37;
  v47[3] = v38;
  v47[4] = v39;
  v47[5] = v40;
  v47[6] = v41;
  v47[7] = v42;
  v47[8] = v8;
  v47[9] = v43;
  v47[10] = v44;
  v47[11] = v45;
  v47[12] = v46;
  v47[13] = v14;
  v47[14] = v13;
  v47[15] = v12;
  Hasher.combine(bytes:)(v47, v48);
  v19 = Hasher._finalize()();
  v20 = -1 << *(_BYTE *)(v18 + 32);
  a5 = v19 & ~v20;
  if (((*(_QWORD *)(v18 + 56 + ((a5 >> 3) & 0xFFFFFFFFFFFFF8)) >> a5) & 1) == 0)
    goto LABEL_17;
  v21 = ~v20;
  while (1)
  {
    v22 = (_QWORD *)(*(_QWORD *)(v18 + 48) + 32 * a5);
    v23 = v22[1];
    v24 = v22[2];
    v25 = v22[3];
    v26 = *v22 == a1 && v23 == a2;
    if ((v26 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v22, v23, a1, a2, 0) & 1) != 0)
      && !static UniversalControlUUID.compare(lhs:rhs:)(v24, v25))
    {
      break;
    }
    a5 = (a5 + 1) & v21;
    if (((*(_QWORD *)(v18 + 56 + ((a5 >> 3) & 0xFFFFFFFFFFFFF8)) >> a5) & 1) == 0)
      goto LABEL_17;
  }
  ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for P2PStreamID);
  __break(1u);
}

void sub_10011EEB4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  int64_t i;
  int64_t v21;
  int64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t *v25;

  sub_10002626C();
  v3 = v0;
  v4 = sub_10000E440();
  sub_1000EFF68();
  __chkstk_darwin(v5);
  sub_10000E478();
  sub_1000055B0((uint64_t *)&unk_1002B2468);
  v6 = (_QWORD *)*v0;
  v7 = static _SetStorage.copy(original:)(*v0);
  if (!v6[2])
  {
    sub_10000FF50();
LABEL_28:
    *v3 = v7;
    sub_10000E4E0();
    return;
  }
  v25 = v3;
  sub_10012407C();
  v9 = v6 + 7;
  v11 = (unint64_t)(v10 + 63) >> 6;
  if ((_QWORD *)v7 != v6 || v8 >= &v6[v11 + 7])
    memmove(v8, v6 + 7, 8 * v11);
  v13 = 0;
  *(_QWORD *)(v7 + 16) = v6[2];
  sub_10012407C();
  sub_100124378();
  v16 = v15 & v14;
  v18 = (unint64_t)(v17 + 63) >> 6;
  if ((v15 & v14) == 0)
    goto LABEL_10;
LABEL_9:
  sub_1000850A4();
  for (i = v19 | (v13 << 6); ; i = v23 + (v13 << 6))
  {
    v24 = *(_QWORD *)(v2 + 72) * i;
    (*(void (**)(uint64_t, int64_t, uint64_t))(v2 + 16))(v1, v6[6] + v24, v4);
    (*(void (**)(int64_t, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 48) + v24, v1, v4);
    if (v16)
      goto LABEL_9;
LABEL_10:
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v18)
      goto LABEL_26;
    ++v13;
    if (!v9[v21])
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v18)
        goto LABEL_26;
      if (!v9[v13])
      {
        v13 = v21 + 2;
        if (v21 + 2 >= v18)
          goto LABEL_26;
        if (!v9[v13])
          break;
      }
    }
LABEL_23:
    sub_100085104();
  }
  v22 = v21 + 3;
  if (v22 >= v18)
  {
LABEL_26:
    sub_10000FF50();
    v3 = v25;
    goto LABEL_28;
  }
  if (v9[v22])
  {
    v13 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    v13 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v13 >= v18)
      goto LABEL_26;
    ++v22;
    if (v9[v13])
      goto LABEL_23;
  }
LABEL_30:
  __break(1u);
}

void sub_10011F070()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t i;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;

  v3 = v0;
  sub_1000055B0(&qword_1002B2440);
  v4 = sub_100123F30();
  if (!*(_QWORD *)(v1 + 16))
  {
LABEL_26:
    sub_1000269A0();
    *v3 = v4;
    sub_10002D8A4();
    return;
  }
  v5 = (void *)sub_100123DD4();
  if (v8)
    v9 = (unint64_t)v5 >= v7;
  else
    v9 = 1;
  if (v9)
    sub_100124114(v5, v6);
  v10 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v1 + 16);
  sub_10012407C();
  sub_100124378();
  v13 = v12 & v11;
  v15 = (unint64_t)(v14 + 63) >> 6;
  if ((v12 & v11) == 0)
    goto LABEL_10;
LABEL_9:
  v16 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (i = v16 | (v10 << 6); ; i = __clz(__rbit64(v19)) + (v10 << 6))
  {
    v21 = *(_QWORD *)(v1 + 48) + 32 * i;
    v22 = *(_QWORD *)(v21 + 8);
    v23 = *(_QWORD *)(v4 + 48) + 32 * i;
    v24 = *(_OWORD *)(v21 + 16);
    *(_QWORD *)v23 = *(_QWORD *)v21;
    *(_QWORD *)(v23 + 8) = v22;
    *(_OWORD *)(v23 + 16) = v24;
    swift_bridgeObjectRetain();
    if (v13)
      goto LABEL_9;
LABEL_10:
    v18 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v15)
      goto LABEL_26;
    v19 = *(_QWORD *)(v2 + 8 * v18);
    ++v10;
    if (!v19)
    {
      v10 = v18 + 1;
      if (v18 + 1 >= v15)
        goto LABEL_26;
      v19 = *(_QWORD *)(v2 + 8 * v10);
      if (!v19)
      {
        v10 = v18 + 2;
        if (v18 + 2 >= v15)
          goto LABEL_26;
        v19 = *(_QWORD *)(v2 + 8 * v10);
        if (!v19)
          break;
      }
    }
LABEL_23:
    v13 = (v19 - 1) & v19;
  }
  v20 = v18 + 3;
  if (v20 >= v15)
    goto LABEL_26;
  v19 = *(_QWORD *)(v2 + 8 * v20);
  if (v19)
  {
    v10 = v20;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v10 >= v15)
      goto LABEL_26;
    v19 = *(_QWORD *)(v2 + 8 * v10);
    ++v20;
    if (v19)
      goto LABEL_23;
  }
LABEL_28:
  __break(1u);
}

void *sub_10011F1D0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;

  v1 = v0;
  sub_1000055B0((uint64_t *)&unk_1002B61F0);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = *(_QWORD *)(v2 + 56);
  v12 = -1;
  if (v10 < 64)
    v12 = ~(-1 << v10);
  v13 = v12 & v11;
  v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0)
    goto LABEL_12;
LABEL_11:
  v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (i = v15 | (v9 << 6); ; i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    v20 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * i);
    v21 = v20[1];
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * i);
    *v22 = *v20;
    v22[1] = v21;
    result = (void *)swift_bridgeObjectRetain(v21);
    if (v13)
      goto LABEL_11;
LABEL_12:
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v14)
        goto LABEL_28;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
      {
        v9 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_28;
        v18 = *(_QWORD *)(v6 + 8 * v9);
        if (!v18)
          break;
      }
    }
LABEL_25:
    v13 = (v18 - 1) & v18;
  }
  v19 = v17 + 3;
  if (v19 >= v14)
    goto LABEL_28;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_10011F380()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = v0;
  sub_1000055B0(&qword_1002B2400);
  v4 = sub_100123F30();
  if (*(_QWORD *)(v1 + 16))
  {
    v5 = (void *)sub_100123DD4();
    if (v8)
      v9 = (unint64_t)v5 >= v7;
    else
      v9 = 1;
    if (v9)
      sub_100124114(v5, v6);
    sub_100123DFC();
    if (!v12)
      goto LABEL_10;
LABEL_9:
    sub_1001241D0();
    while (1)
    {
      *(_OWORD *)(*(_QWORD *)(v4 + 48) + 16 * v14) = *(_OWORD *)(*(_QWORD *)(v1 + 48) + 16 * v14);
      if (v13)
        goto LABEL_9;
LABEL_10:
      v15 = v11 + 1;
      if (__OFADD__(v11, 1))
      {
        __break(1u);
        goto LABEL_27;
      }
      if (v15 >= v10)
        goto LABEL_25;
      if (!*(_QWORD *)(v2 + 8 * v15))
      {
        if (v11 + 2 >= v10)
          goto LABEL_25;
        if (!*(_QWORD *)(v2 + 8 * (v11 + 2)))
        {
          if (v11 + 3 >= v10)
            goto LABEL_25;
          if (!*(_QWORD *)(v2 + 8 * (v11 + 3)))
          {
            v16 = v11 + 4;
            if (v11 + 4 >= v10)
              goto LABEL_25;
            if (!*(_QWORD *)(v2 + 8 * v16))
              break;
          }
        }
      }
LABEL_22:
      sub_1001241A8();
    }
    while (1)
    {
      v17 = v16 + 1;
      if (__OFADD__(v16, 1))
        break;
      if (v17 >= v10)
        goto LABEL_25;
      ++v16;
      if (*(_QWORD *)(v2 + 8 * v17))
        goto LABEL_22;
    }
LABEL_27:
    __break(1u);
  }
  else
  {
LABEL_25:
    sub_1000269A0();
    *v3 = v4;
    sub_10000B350();
  }
}

void *sub_10011F480()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t i;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;

  v1 = v0;
  v2 = type metadata accessor for HIDUniversalSenderID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000055B0(&qword_1002B2490);
  v6 = *v0;
  v7 = static _SetStorage.copy(original:)(*v0);
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v8;
    return result;
  }
  result = (void *)(v7 + 56);
  v10 = v6 + 56;
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v11)
    result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v14 = 1 << *(_BYTE *)(v6 + 32);
  v15 = *(_QWORD *)(v6 + 56);
  v16 = -1;
  if (v14 < 64)
    v16 = ~(-1 << v14);
  v17 = v16 & v15;
  v18 = (unint64_t)(v14 + 63) >> 6;
  if ((v16 & v15) == 0)
    goto LABEL_12;
LABEL_11:
  v19 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  for (i = v19 | (v13 << 6); ; i = __clz(__rbit64(v22)) + (v13 << 6))
  {
    v24 = *(_QWORD *)(v3 + 72) * i;
    sub_1000E0E9C(*(_QWORD *)(v6 + 48) + v24, (uint64_t)v5);
    result = (void *)sub_1000E0EE0((uint64_t)v5, *(_QWORD *)(v8 + 48) + v24);
    if (v17)
      goto LABEL_11;
LABEL_12:
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v18)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v21);
    ++v13;
    if (!v22)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v18)
        goto LABEL_28;
      v22 = *(_QWORD *)(v10 + 8 * v13);
      if (!v22)
      {
        v13 = v21 + 2;
        if (v21 + 2 >= v18)
          goto LABEL_28;
        v22 = *(_QWORD *)(v10 + 8 * v13);
        if (!v22)
          break;
      }
    }
LABEL_25:
    v17 = (v22 - 1) & v22;
  }
  v23 = v21 + 3;
  if (v23 >= v18)
    goto LABEL_28;
  v22 = *(_QWORD *)(v10 + 8 * v23);
  if (v22)
  {
    v13 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v13 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v13 >= v18)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v13);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_10011F67C()
{
  sub_10011F9D8(&qword_1002B2408);
}

void *sub_10011F688()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;

  v1 = v0;
  sub_1000055B0(&qword_1002B23F8);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  if (!v12)
    goto LABEL_12;
LABEL_11:
  v14 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (i = v14 | (v9 << 6); ; i = __clz(__rbit64(v17)) + (v9 << 6))
  {
    v19 = 17 * i;
    v20 = *(_QWORD *)(v2 + 48) + v19;
    v21 = *(_BYTE *)(v20 + 16);
    v22 = *(_QWORD *)(v4 + 48) + v19;
    *(_OWORD *)v22 = *(_OWORD *)v20;
    *(_BYTE *)(v22 + 16) = v21;
    if (v12)
      goto LABEL_11;
LABEL_12:
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_25:
    v12 = (v17 - 1) & v17;
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_10011F830()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v1 = v0;
  sub_1000055B0(&qword_1002B23F0);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release();
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = *(_QWORD *)(v2 + 56);
  v12 = -1;
  if (v10 < 64)
    v12 = ~(-1 << v10);
  v13 = v12 & v11;
  v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0)
    goto LABEL_12;
LABEL_11:
  v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (i = v15 | (v9 << 6); ; i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * i) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * i);
    swift_retain();
    if (v13)
      goto LABEL_11;
LABEL_12:
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v14)
        goto LABEL_28;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
      {
        v9 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_28;
        v18 = *(_QWORD *)(v6 + 8 * v9);
        if (!v18)
          break;
      }
    }
LABEL_25:
    v13 = (v18 - 1) & v18;
  }
  v19 = v17 + 3;
  if (v19 >= v14)
    goto LABEL_28;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

void sub_10011F9D8(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = v1;
  sub_1000055B0(a1);
  v5 = sub_100123F30();
  if (*(_QWORD *)(v2 + 16))
  {
    v6 = (void *)sub_100123DD4();
    if (v9)
      v10 = (unint64_t)v6 >= v8;
    else
      v10 = 1;
    if (v10)
      sub_100124114(v6, v7);
    sub_100123DFC();
    if (!v13)
      goto LABEL_10;
LABEL_9:
    sub_1001241D0();
    while (1)
    {
      *(_BYTE *)(*(_QWORD *)(v5 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
      if (v14)
        goto LABEL_9;
LABEL_10:
      v16 = v12 + 1;
      if (__OFADD__(v12, 1))
      {
        __break(1u);
        goto LABEL_27;
      }
      if (v16 >= v11)
        goto LABEL_25;
      if (!*(_QWORD *)(v3 + 8 * v16))
      {
        if (v12 + 2 >= v11)
          goto LABEL_25;
        if (!*(_QWORD *)(v3 + 8 * (v12 + 2)))
        {
          if (v12 + 3 >= v11)
            goto LABEL_25;
          if (!*(_QWORD *)(v3 + 8 * (v12 + 3)))
          {
            v17 = v12 + 4;
            if (v12 + 4 >= v11)
              goto LABEL_25;
            if (!*(_QWORD *)(v3 + 8 * v17))
              break;
          }
        }
      }
LABEL_22:
      sub_1001241A8();
    }
    while (1)
    {
      v18 = v17 + 1;
      if (__OFADD__(v17, 1))
        break;
      if (v18 >= v11)
        goto LABEL_25;
      ++v17;
      if (*(_QWORD *)(v3 + 8 * v18))
        goto LABEL_22;
    }
LABEL_27:
    __break(1u);
  }
  else
  {
LABEL_25:
    sub_1000269A0();
    *v4 = v5;
    sub_10000B350();
  }
}

void *sub_10011FAD0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  sub_1000055B0(&qword_1002B2450);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  if (!v12)
    goto LABEL_12;
LABEL_11:
  v14 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (i = v14 | (v9 << 6); ; i = __clz(__rbit64(v17)) + (v9 << 6))
  {
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + i) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + i);
    if (v12)
      goto LABEL_11;
LABEL_12:
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_25:
    v12 = (v17 - 1) & v17;
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10011FC64()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  _OWORD *v19;
  __int128 v20;
  _OWORD *v21;

  v1 = v0;
  sub_1000055B0((uint64_t *)&unk_1002B2458);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  if (!v12)
    goto LABEL_12;
LABEL_11:
  v14 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (i = v14 | (v9 << 6); ; i = __clz(__rbit64(v17)) + (v9 << 6))
  {
    v19 = (_OWORD *)(*(_QWORD *)(v2 + 48) + 32 * i);
    v20 = v19[1];
    v21 = (_OWORD *)(*(_QWORD *)(v4 + 48) + 32 * i);
    *v21 = *v19;
    v21[1] = v20;
    if (v12)
      goto LABEL_11;
LABEL_12:
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_25:
    v12 = (v17 - 1) & v17;
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_10011FE00(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __n128 v16;
  int64_t v17;
  unint64_t v18;
  unint64_t i;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  int64_t v38;

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_1000055B0((uint64_t *)&unk_1002B2468);
  v9 = static _SetStorage.resize(original:capacity:move:)(v8, a1, 0);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
    swift_release();
LABEL_36:
    *v2 = v10;
    return;
  }
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 56);
  v36 = v2;
  v37 = v8 + 56;
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v38 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 56;
  v16 = swift_retain();
  v17 = 0;
  if (!v14)
    goto LABEL_9;
LABEL_8:
  v18 = __clz(__rbit64(v14));
  v14 &= v14 - 1;
  for (i = v18 | (v17 << 6); ; i = __clz(__rbit64(v21)) + (v17 << 6))
  {
    v23 = *(_QWORD *)(v5 + 72);
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v5 + 16))(v7, *(_QWORD *)(v8 + 48) + v23 * i, v4, v16);
    v24 = *(_QWORD *)(v10 + 40);
    sub_1000840B4(&qword_1002AD0B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v26 = dispatch thunk of Hashable._rawHashValue(seed:)(v24, v4, v25);
    v27 = -1 << *(_BYTE *)(v10 + 32);
    v28 = v26 & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v15 + 8 * (v28 >> 6))) == 0)
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v27) >> 6;
      while (++v29 != v32 || (v31 & 1) == 0)
      {
        v33 = v29 == v32;
        if (v29 == v32)
          v29 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v15 + 8 * v29);
        if (v34 != -1)
        {
          v30 = __clz(__rbit64(~v34)) + (v29 << 6);
          goto LABEL_32;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    v30 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v15 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
LABEL_32:
    *(_QWORD *)(v15 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v30;
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(_QWORD *)(v10 + 48) + v30 * v23, v7, v4);
    ++*(_QWORD *)(v10 + 16);
    if (v14)
      goto LABEL_8;
LABEL_9:
    v20 = v17 + 1;
    if (__OFADD__(v17, 1))
      goto LABEL_38;
    if (v20 >= v38)
      goto LABEL_34;
    v21 = *(_QWORD *)(v37 + 8 * v20);
    ++v17;
    if (!v21)
    {
      v17 = v20 + 1;
      if (v20 + 1 >= v38)
        goto LABEL_34;
      v21 = *(_QWORD *)(v37 + 8 * v17);
      if (!v21)
      {
        v17 = v20 + 2;
        if (v20 + 2 >= v38)
          goto LABEL_34;
        v21 = *(_QWORD *)(v37 + 8 * v17);
        if (!v21)
          break;
      }
    }
LABEL_22:
    v14 = (v21 - 1) & v21;
  }
  v22 = v20 + 3;
  if (v22 >= v38)
  {
LABEL_34:
    swift_release_n(v8, 2);
    v2 = v36;
    goto LABEL_36;
  }
  v21 = *(_QWORD *)(v37 + 8 * v22);
  if (v21)
  {
    v17 = v22;
    goto LABEL_22;
  }
  while (1)
  {
    v17 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v17 >= v38)
      goto LABEL_34;
    v21 = *(_QWORD *)(v37 + 8 * v17);
    ++v22;
    if (v21)
      goto LABEL_22;
  }
LABEL_39:
  __break(1u);
}

void sub_100120128(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_1000055B0(&qword_1002B2440);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    swift_release();
    *v2 = v5;
    return;
  }
  v22 = v2;
  v6 = 1 << *(_BYTE *)(v3 + 32);
  v7 = v3 + 56;
  v8 = -1;
  if (v6 < 64)
    v8 = ~(-1 << v6);
  v9 = v8 & *(_QWORD *)(v3 + 56);
  v10 = (unint64_t)(v6 + 63) >> 6;
  swift_retain();
  v11 = 0;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v12 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (i = v12 | (v11 << 6); ; i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    v17 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 32 * i);
    v18 = *v17;
    v19 = v17[1];
    v20 = v17[2];
    v21 = v17[3];
    swift_bridgeObjectRetain();
    sub_10011D49C(v18, v19, v20, v21, v5);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v14 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v14 >= v10)
      goto LABEL_25;
    v15 = *(_QWORD *)(v7 + 8 * v14);
    ++v11;
    if (!v15)
    {
      v11 = v14 + 1;
      if (v14 + 1 >= v10)
        goto LABEL_25;
      v15 = *(_QWORD *)(v7 + 8 * v11);
      if (!v15)
      {
        v11 = v14 + 2;
        if (v14 + 2 >= v10)
          goto LABEL_25;
        v15 = *(_QWORD *)(v7 + 8 * v11);
        if (!v15)
          break;
      }
    }
LABEL_22:
    v9 = (v15 - 1) & v15;
  }
  v16 = v14 + 3;
  if (v16 >= v10)
  {
LABEL_25:
    swift_release();
    v2 = v22;
    goto LABEL_26;
  }
  v15 = *(_QWORD *)(v7 + 8 * v16);
  if (v15)
  {
    v11 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    v11 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v11 >= v10)
      goto LABEL_25;
    v15 = *(_QWORD *)(v7 + 8 * v11);
    ++v16;
    if (v15)
      goto LABEL_22;
  }
LABEL_28:
  __break(1u);
}

uint64_t sub_1001202F0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_1000055B0((uint64_t *)&unk_1002B61F0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release();
LABEL_37:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  result = swift_retain(v3);
  v13 = 0;
  if (!v10)
    goto LABEL_10;
LABEL_9:
  v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * i);
    v20 = *v19;
    v21 = v19[1];
    Hasher.init(_seed:)(v33, *(_QWORD *)(v6 + 40));
    swift_bridgeObjectRetain(v21);
    String.hash(into:)(v33, v20, v21);
    result = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v6 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v11 + 8 * (v23 >> 6))) == 0)
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v22) >> 6;
      while (++v24 != v27 || (v26 & 1) == 0)
      {
        v28 = v24 == v27;
        if (v24 == v27)
          v24 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v11 + 8 * v24);
        if (v29 != -1)
        {
          v25 = __clz(__rbit64(~v29)) + (v24 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    v25 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)(v11 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    v30 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v25);
    *v30 = v20;
    v30[1] = v21;
    ++*(_QWORD *)(v6 + 16);
    if (v10)
      goto LABEL_9;
LABEL_10:
    v16 = v13 + 1;
    if (__OFADD__(v13, 1))
      goto LABEL_39;
    if (v16 >= v32)
      goto LABEL_35;
    v17 = *(_QWORD *)(v8 + 8 * v16);
    ++v13;
    if (!v17)
    {
      v13 = v16 + 1;
      if (v16 + 1 >= v32)
        goto LABEL_35;
      v17 = *(_QWORD *)(v8 + 8 * v13);
      if (!v17)
      {
        v13 = v16 + 2;
        if (v16 + 2 >= v32)
          goto LABEL_35;
        v17 = *(_QWORD *)(v8 + 8 * v13);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v10 = (v17 - 1) & v17;
  }
  v18 = v16 + 3;
  if (v18 >= v32)
  {
LABEL_35:
    result = swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_37;
  }
  v17 = *(_QWORD *)(v8 + 8 * v18);
  if (v17)
  {
    v13 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v32)
      goto LABEL_35;
    v17 = *(_QWORD *)(v8 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100120598(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  Swift::Int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t result;
  uint64_t *v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  uint64_t v48;
  char v49;
  _BYTE v50[16];
  _QWORD v51[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_1000055B0(&qword_1002B2400);
  v48 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  if (*(_QWORD *)(v3 + 16))
  {
    v5 = 0;
    v35 = v2;
    v36 = v3 + 56;
    v6 = 1 << *(_BYTE *)(v3 + 32);
    if (v6 < 64)
      v7 = ~(-1 << v6);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v3 + 56);
    v37 = (unint64_t)(v6 + 63) >> 6;
    v38 = v3;
    v39 = v48 + 56;
    if (!v8)
      goto LABEL_10;
    while (2)
    {
      v40 = (v8 - 1) & v8;
      v41 = v5;
      v9 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_24:
      v14 = (char *)(*(_QWORD *)(v3 + 48) + 16 * v9);
      v15 = *v14;
      v16 = v14[1];
      v17 = v14[3];
      v18 = v14[4];
      v19 = v14[5];
      v20 = v14[6];
      v46 = v14[2];
      v47 = v14[7];
      v21 = v14[8];
      v49 = v14[11];
      v42 = v14[12];
      v43 = v14[10];
      v22 = v14[13];
      v23 = v14[14];
      v44 = v14[15];
      v45 = v14[9];
      Hasher.init(_seed:)(v51, *(_QWORD *)(v48 + 40));
      v50[0] = v15;
      v50[1] = v16;
      v50[2] = v46;
      v50[3] = v17;
      v50[4] = v18;
      v50[5] = v19;
      v50[6] = v20;
      v50[7] = v47;
      v50[8] = v21;
      v50[9] = v45;
      v50[10] = v43;
      v50[11] = v49;
      v50[12] = v42;
      v50[13] = v22;
      v50[14] = v23;
      v50[15] = v44;
      Hasher.combine(bytes:)(v50, v51);
      v24 = Hasher._finalize()();
      v25 = -1 << *(_BYTE *)(v48 + 32);
      v26 = v24 & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v39 + 8 * (v26 >> 6))) != 0)
      {
        v28 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v39 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_33;
      }
      v29 = 0;
      v30 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
LABEL_39:
          __break(1u);
          goto LABEL_40;
        }
        v31 = v27 == v30;
        if (v27 == v30)
          v27 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v39 + 8 * v27);
      }
      while (v32 == -1);
      v28 = __clz(__rbit64(~v32)) + (v27 << 6);
LABEL_33:
      *(_QWORD *)(v39 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
      v33 = (_BYTE *)(*(_QWORD *)(v48 + 48) + 16 * v28);
      *v33 = v15;
      v33[1] = v16;
      v33[2] = v46;
      v33[3] = v17;
      v33[4] = v18;
      v33[5] = v19;
      v33[6] = v20;
      v33[7] = v47;
      v33[8] = v21;
      v33[9] = v45;
      v33[10] = v43;
      v33[11] = v49;
      v33[12] = v42;
      v33[13] = v22;
      v33[14] = v23;
      v33[15] = v44;
      ++*(_QWORD *)(v48 + 16);
      v3 = v38;
      v8 = v40;
      v5 = v41;
      if (v40)
        continue;
      break;
    }
LABEL_10:
    v10 = v5 + 1;
    if (__OFADD__(v5, 1))
      goto LABEL_39;
    if (v10 < v37)
    {
      v11 = *(_QWORD *)(v36 + 8 * v10);
      v12 = v5 + 1;
      if (v11)
        goto LABEL_23;
      v12 = v5 + 2;
      if (v5 + 2 < v37)
      {
        v11 = *(_QWORD *)(v36 + 8 * v12);
        if (v11)
          goto LABEL_23;
        v12 = v5 + 3;
        if (v5 + 3 < v37)
        {
          v11 = *(_QWORD *)(v36 + 8 * v12);
          if (v11)
            goto LABEL_23;
          v13 = v5 + 4;
          if (v5 + 4 < v37)
          {
            v11 = *(_QWORD *)(v36 + 8 * v13);
            if (v11)
            {
              v12 = v5 + 4;
LABEL_23:
              v40 = (v11 - 1) & v11;
              v41 = v12;
              v9 = __clz(__rbit64(v11)) + (v12 << 6);
              goto LABEL_24;
            }
            while (1)
            {
              v12 = v13 + 1;
              if (__OFADD__(v13, 1))
                break;
              if (v12 >= v37)
                goto LABEL_35;
              v11 = *(_QWORD *)(v36 + 8 * v12);
              ++v13;
              if (v11)
                goto LABEL_23;
            }
LABEL_40:
            __break(1u);
          }
        }
      }
    }
LABEL_35:
    result = swift_release(v3);
    v2 = v35;
  }
  else
  {
    result = swift_release(v3);
  }
  *v2 = v48;
  return result;
}

uint64_t sub_1001209BC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  Swift::UInt v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_1000055B0((uint64_t *)&unk_1002B2410);
  result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = result;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release();
LABEL_37:
    *v2 = v6;
    return result;
  }
  v28 = v2;
  v7 = 0;
  v8 = v3 + 56;
  v9 = 1 << *(_BYTE *)(v3 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v3 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = result + 56;
  if (!v11)
    goto LABEL_10;
LABEL_9:
  v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v14 | (v7 << 6); ; i = __clz(__rbit64(v17)) + (v7 << 6))
  {
    v19 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + i);
    Hasher.init(_seed:)(v29, *(_QWORD *)(v6 + 40));
    Hasher._combine(_:)(v19);
    result = Hasher._finalize()();
    v20 = -1 << *(_BYTE *)(v6 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v13 + 8 * (v21 >> 6))) == 0)
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v13 + 8 * v22);
        if (v27 != -1)
        {
          v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v13 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)(v13 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    *(_BYTE *)(*(_QWORD *)(v6 + 48) + v23) = v19;
    ++*(_QWORD *)(v6 + 16);
    if (v11)
      goto LABEL_9;
LABEL_10:
    v16 = v7 + 1;
    if (__OFADD__(v7, 1))
      goto LABEL_39;
    if (v16 >= v12)
      goto LABEL_35;
    v17 = *(_QWORD *)(v8 + 8 * v16);
    ++v7;
    if (!v17)
    {
      v7 = v16 + 1;
      if (v16 + 1 >= v12)
        goto LABEL_35;
      v17 = *(_QWORD *)(v8 + 8 * v7);
      if (!v17)
      {
        v7 = v16 + 2;
        if (v16 + 2 >= v12)
          goto LABEL_35;
        v17 = *(_QWORD *)(v8 + 8 * v7);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v11 = (v17 - 1) & v17;
  }
  v18 = v16 + 3;
  if (v18 >= v12)
  {
LABEL_35:
    result = swift_release();
    v2 = v28;
    goto LABEL_37;
  }
  v17 = *(_QWORD *)(v8 + 8 * v18);
  if (v17)
  {
    v7 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v7 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v7 >= v12)
      goto LABEL_35;
    v17 = *(_QWORD *)(v8 + 8 * v7);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100120C30(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t i;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int64_t v34;
  _QWORD v35[9];

  v2 = v1;
  v4 = type metadata accessor for HIDUniversalSenderID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_1000055B0(&qword_1002B2490);
  v9 = static _SetStorage.resize(original:capacity:move:)(v8, a1, 0);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
    result = swift_release();
LABEL_36:
    *v2 = v10;
    return result;
  }
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 56);
  v32 = v2;
  v33 = v8 + 56;
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v34 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 56;
  result = swift_retain(v8);
  v17 = 0;
  if (!v14)
    goto LABEL_9;
LABEL_8:
  v18 = __clz(__rbit64(v14));
  v14 &= v14 - 1;
  for (i = v18 | (v17 << 6); ; i = __clz(__rbit64(v21)) + (v17 << 6))
  {
    v23 = *(_QWORD *)(v5 + 72);
    sub_1000E0E9C(*(_QWORD *)(v8 + 48) + v23 * i, (uint64_t)v7);
    Hasher.init(_seed:)(v35, *(_QWORD *)(v10 + 40));
    HIDUniversalSenderID.hash(into:)((uint64_t)v35);
    result = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v10 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v15 + 8 * (v25 >> 6))) == 0)
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v24) >> 6;
      while (++v26 != v29 || (v28 & 1) == 0)
      {
        v30 = v26 == v29;
        if (v26 == v29)
          v26 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v15 + 8 * v26);
        if (v31 != -1)
        {
          v27 = __clz(__rbit64(~v31)) + (v26 << 6);
          goto LABEL_32;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    v27 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v15 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
LABEL_32:
    *(_QWORD *)(v15 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
    result = sub_1000E0EE0((uint64_t)v7, *(_QWORD *)(v10 + 48) + v27 * v23);
    ++*(_QWORD *)(v10 + 16);
    if (v14)
      goto LABEL_8;
LABEL_9:
    v20 = v17 + 1;
    if (__OFADD__(v17, 1))
      goto LABEL_38;
    if (v20 >= v34)
      goto LABEL_34;
    v21 = *(_QWORD *)(v33 + 8 * v20);
    ++v17;
    if (!v21)
    {
      v17 = v20 + 1;
      if (v20 + 1 >= v34)
        goto LABEL_34;
      v21 = *(_QWORD *)(v33 + 8 * v17);
      if (!v21)
      {
        v17 = v20 + 2;
        if (v20 + 2 >= v34)
          goto LABEL_34;
        v21 = *(_QWORD *)(v33 + 8 * v17);
        if (!v21)
          break;
      }
    }
LABEL_22:
    v14 = (v21 - 1) & v21;
  }
  v22 = v20 + 3;
  if (v22 >= v34)
  {
LABEL_34:
    result = swift_release_n(v8, 2);
    v2 = v32;
    goto LABEL_36;
  }
  v21 = *(_QWORD *)(v33 + 8 * v22);
  if (v21)
  {
    v17 = v22;
    goto LABEL_22;
  }
  while (1)
  {
    v17 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v17 >= v34)
      goto LABEL_34;
    v21 = *(_QWORD *)(v33 + 8 * v17);
    ++v22;
    if (v21)
      goto LABEL_22;
  }
LABEL_39:
  __break(1u);
  return result;
}

void sub_100120F28(uint64_t a1)
{
  sub_100121804(a1, &qword_1002B2408, (void (*)(_QWORD *, uint64_t))HIDDeviceType.hash(into:));
}

uint64_t sub_100120F3C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  Swift::UInt v23;
  Swift::Int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t result;
  uint64_t *v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  uint64_t v49;
  char v50;
  _BYTE v51[16];
  _QWORD v52[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_1000055B0(&qword_1002B23F8);
  v49 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  if (*(_QWORD *)(v3 + 16))
  {
    v5 = 0;
    v35 = v2;
    v36 = v3 + 56;
    v6 = 1 << *(_BYTE *)(v3 + 32);
    if (v6 < 64)
      v7 = ~(-1 << v6);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v3 + 56);
    v37 = (unint64_t)(v6 + 63) >> 6;
    v38 = v3;
    v39 = v49 + 56;
    if (!v8)
      goto LABEL_10;
    while (2)
    {
      v40 = (v8 - 1) & v8;
      v41 = v5;
      v9 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_24:
      v14 = (char *)(*(_QWORD *)(v3 + 48) + 17 * v9);
      v15 = *v14;
      v16 = v14[2];
      v17 = v14[3];
      v47 = v14[1];
      v48 = v14[4];
      v18 = v14[5];
      v19 = v14[7];
      v42 = v14[9];
      v43 = v14[6];
      v50 = v14[10];
      v20 = v14[11];
      v21 = v14[12];
      v45 = v14[13];
      v46 = v14[8];
      v22 = v14[14];
      v44 = v14[15];
      v23 = v14[16];
      Hasher.init(_seed:)(v52, *(_QWORD *)(v49 + 40));
      v51[0] = v15;
      v51[1] = v47;
      v51[2] = v16;
      v51[3] = v17;
      v51[4] = v48;
      v51[5] = v18;
      v51[6] = v43;
      v51[7] = v19;
      v51[8] = v46;
      v51[9] = v42;
      v51[10] = v50;
      v51[11] = v20;
      v51[12] = v21;
      v51[13] = v45;
      v51[14] = v22;
      v51[15] = v44;
      Hasher.combine(bytes:)(v51, v52);
      Hasher._combine(_:)(v23);
      v24 = Hasher._finalize()();
      v25 = -1 << *(_BYTE *)(v49 + 32);
      v26 = v24 & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v39 + 8 * (v26 >> 6))) != 0)
      {
        v28 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v39 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_33;
      }
      v29 = 0;
      v30 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
LABEL_39:
          __break(1u);
          goto LABEL_40;
        }
        v31 = v27 == v30;
        if (v27 == v30)
          v27 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v39 + 8 * v27);
      }
      while (v32 == -1);
      v28 = __clz(__rbit64(~v32)) + (v27 << 6);
LABEL_33:
      *(_QWORD *)(v39 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
      v33 = (_BYTE *)(*(_QWORD *)(v49 + 48) + 17 * v28);
      *v33 = v15;
      v33[1] = v47;
      v33[2] = v16;
      v33[3] = v17;
      v33[4] = v48;
      v33[5] = v18;
      v33[6] = v43;
      v33[7] = v19;
      v33[8] = v46;
      v33[9] = v42;
      v33[10] = v50;
      v33[11] = v20;
      v33[12] = v21;
      v33[13] = v45;
      v33[14] = v22;
      v33[15] = v44;
      v33[16] = v23;
      ++*(_QWORD *)(v49 + 16);
      v3 = v38;
      v8 = v40;
      v5 = v41;
      if (v40)
        continue;
      break;
    }
LABEL_10:
    v10 = v5 + 1;
    if (__OFADD__(v5, 1))
      goto LABEL_39;
    if (v10 < v37)
    {
      v11 = *(_QWORD *)(v36 + 8 * v10);
      v12 = v5 + 1;
      if (v11)
        goto LABEL_23;
      v12 = v5 + 2;
      if (v5 + 2 < v37)
      {
        v11 = *(_QWORD *)(v36 + 8 * v12);
        if (v11)
          goto LABEL_23;
        v12 = v5 + 3;
        if (v5 + 3 < v37)
        {
          v11 = *(_QWORD *)(v36 + 8 * v12);
          if (v11)
            goto LABEL_23;
          v13 = v5 + 4;
          if (v5 + 4 < v37)
          {
            v11 = *(_QWORD *)(v36 + 8 * v13);
            if (v11)
            {
              v12 = v5 + 4;
LABEL_23:
              v40 = (v11 - 1) & v11;
              v41 = v12;
              v9 = __clz(__rbit64(v11)) + (v12 << 6);
              goto LABEL_24;
            }
            while (1)
            {
              v12 = v13 + 1;
              if (__OFADD__(v13, 1))
                break;
              if (v12 >= v37)
                goto LABEL_35;
              v11 = *(_QWORD *)(v36 + 8 * v12);
              ++v13;
              if (v11)
                goto LABEL_23;
            }
LABEL_40:
            __break(1u);
          }
        }
      }
    }
LABEL_35:
    result = swift_release();
    v2 = v35;
  }
  else
  {
    result = swift_release();
  }
  *v2 = v49;
  return result;
}

void sub_100121394(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int64_t v33;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_1000055B0(&qword_1002B23F0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release();
LABEL_37:
    *v2 = v6;
    return;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v31 = v2;
  v32 = v3 + 56;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v3 + 56);
  v33 = (unint64_t)(v7 + 63) >> 6;
  v10 = v5 + 56;
  swift_retain();
  v11 = 0;
  if (!v9)
    goto LABEL_10;
LABEL_9:
  v12 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (i = v12 | (v11 << 6); ; i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    v17 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * i);
    v18 = *(_QWORD *)(v6 + 40);
    v19 = type metadata accessor for UniversalControlDevice(0);
    sub_1000840B4(&qword_1002AC880, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UniversalControlDevice, (uint64_t)&protocol conformance descriptor for UniversalControlDevice);
    v21 = v20;
    swift_retain();
    v22 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v19, v21);
    v23 = -1 << *(_BYTE *)(v6 + 32);
    v24 = v22 & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v10 + 8 * (v24 >> 6))) == 0)
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v23) >> 6;
      while (++v25 != v28 || (v27 & 1) == 0)
      {
        v29 = v25 == v28;
        if (v25 == v28)
          v25 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v10 + 8 * v25);
        if (v30 != -1)
        {
          v26 = __clz(__rbit64(~v30)) + (v25 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    v26 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v10 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)(v10 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v26) = v17;
    ++*(_QWORD *)(v6 + 16);
    if (v9)
      goto LABEL_9;
LABEL_10:
    v14 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_39;
    if (v14 >= v33)
      goto LABEL_35;
    v15 = *(_QWORD *)(v32 + 8 * v14);
    ++v11;
    if (!v15)
    {
      v11 = v14 + 1;
      if (v14 + 1 >= v33)
        goto LABEL_35;
      v15 = *(_QWORD *)(v32 + 8 * v11);
      if (!v15)
      {
        v11 = v14 + 2;
        if (v14 + 2 >= v33)
          goto LABEL_35;
        v15 = *(_QWORD *)(v32 + 8 * v11);
        if (!v15)
          break;
      }
    }
LABEL_23:
    v9 = (v15 - 1) & v15;
  }
  v16 = v14 + 3;
  if (v16 >= v33)
  {
LABEL_35:
    swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_37;
  }
  v15 = *(_QWORD *)(v32 + 8 * v16);
  if (v15)
  {
    v11 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v11 >= v33)
      goto LABEL_35;
    v15 = *(_QWORD *)(v32 + 8 * v11);
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
}

uint64_t sub_100121678()
{
  return sub_100117C88();
}

uint64_t sub_100121680(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  switch(a4 >> 61)
  {
    case 0uLL:
      return swift_errorRetain(result);
    case 1uLL:
      return swift_retain(a4 & 0x1FFFFFFFFFFFFFFFLL);
    case 2uLL:
      swift_retain(result);
      result = a2;
      return swift_errorRetain(result);
    case 3uLL:
    case 5uLL:
      goto LABEL_6;
    case 4uLL:
      swift_retain(result);
      result = a2;
LABEL_6:
      result = swift_retain(result);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001216F0(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  switch(a4 >> 61)
  {
    case 0uLL:
      return swift_errorRelease(result);
    case 1uLL:
      return swift_release(a4 & 0x1FFFFFFFFFFFFFFFLL);
    case 2uLL:
      swift_release(result);
      result = a2;
      return swift_errorRelease(result);
    case 3uLL:
    case 5uLL:
      goto LABEL_6;
    case 4uLL:
      swift_release(result);
      result = a2;
LABEL_6:
      result = swift_release(result);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100121760(uint64_t a1)
{
  return sub_1000C5810(a1);
}

uint64_t sub_100121768()
{
  uint64_t v0;

  return sub_1001242D8(v0, 24);
}

uint64_t sub_100121798()
{
  uint64_t v0;

  sub_100026600();

  swift_release();
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001217C8(uint64_t a1)
{
  uint64_t v1;

  return sub_1001177BC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1001217D4()
{
  uint64_t v0;

  return sub_1001242D8(v0, 19);
}

void sub_100121804(uint64_t a1, uint64_t *a2, void (*a3)(_QWORD *, uint64_t))
{
  uint64_t *v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t i;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  int64_t v26;
  _QWORD v27[9];

  v5 = *v3;
  sub_10012415C(a1, a2);
  v6 = (_QWORD *)static _SetStorage.resize(original:capacity:move:)(v5, v3, 0);
  if (!*(_QWORD *)(v5 + 16))
  {
    sub_10000FF50();
LABEL_31:
    *v3 = (uint64_t)v6;
    sub_100123F40();
    return;
  }
  sub_10012407C();
  v7 = v5 + 56;
  sub_100124298();
  v10 = v9 & v8;
  v26 = (unint64_t)(v11 + 63) >> 6;
  sub_1000269EC();
  v12 = 0;
  if (!v10)
    goto LABEL_4;
LABEL_3:
  sub_1000850A4();
  for (i = v13 | (v12 << 6); ; i = v17 + (v12 << 6))
  {
    v18 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + i);
    Hasher.init(_seed:)(v27, v6[5]);
    a3(v27, v18);
    Hasher._finalize()();
    sub_100124060();
    if (v19)
    {
      sub_100060314();
      while (++v22 != v23 || (v21 & 1) == 0)
      {
        v24 = v22 == v23;
        if (v22 == v23)
          v22 = 0;
        v21 |= v24;
        if (v6[v22 + 7] != -1)
        {
          sub_100060300();
          goto LABEL_27;
        }
      }
      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    sub_100060348();
LABEL_27:
    sub_100123FF0(v20);
    *(_BYTE *)(v6[6] + v25) = v18;
    ++v6[2];
    if (v10)
      goto LABEL_3;
LABEL_4:
    v15 = v12 + 1;
    if (__OFADD__(v12, 1))
      goto LABEL_33;
    if (v15 >= v26)
      goto LABEL_29;
    ++v12;
    if (!*(_QWORD *)(v7 + 8 * v15))
    {
      v12 = v15 + 1;
      if (v15 + 1 >= v26)
        goto LABEL_29;
      if (!*(_QWORD *)(v7 + 8 * v12))
      {
        v12 = v15 + 2;
        if (v15 + 2 >= v26)
          goto LABEL_29;
        if (!*(_QWORD *)(v7 + 8 * v12))
          break;
      }
    }
LABEL_17:
    sub_100085104();
  }
  v16 = v15 + 3;
  if (v16 >= v26)
  {
LABEL_29:
    sub_10000F650(v5);
    goto LABEL_31;
  }
  if (*(_QWORD *)(v7 + 8 * v16))
  {
    v12 = v16;
    goto LABEL_17;
  }
  while (1)
  {
    v12 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v12 >= v26)
      goto LABEL_29;
    ++v16;
    if (*(_QWORD *)(v7 + 8 * v12))
      goto LABEL_17;
  }
LABEL_34:
  __break(1u);
}

uint64_t sub_1001219F0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  Swift::UInt8 v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_1000055B0(&qword_1002B2450);
  result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = result;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release();
LABEL_37:
    *v2 = v6;
    return result;
  }
  v28 = v2;
  v7 = 0;
  v8 = v3 + 56;
  v9 = 1 << *(_BYTE *)(v3 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v3 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = result + 56;
  if (!v11)
    goto LABEL_10;
LABEL_9:
  v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v14 | (v7 << 6); ; i = __clz(__rbit64(v17)) + (v7 << 6))
  {
    v19 = *(_BYTE *)(*(_QWORD *)(v3 + 48) + i);
    Hasher.init(_seed:)(v29, *(_QWORD *)(v6 + 40));
    Hasher._combine(_:)(v19);
    result = Hasher._finalize()();
    v20 = -1 << *(_BYTE *)(v6 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v13 + 8 * (v21 >> 6))) == 0)
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v13 + 8 * v22);
        if (v27 != -1)
        {
          v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v13 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)(v13 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    *(_BYTE *)(*(_QWORD *)(v6 + 48) + v23) = v19;
    ++*(_QWORD *)(v6 + 16);
    if (v11)
      goto LABEL_9;
LABEL_10:
    v16 = v7 + 1;
    if (__OFADD__(v7, 1))
      goto LABEL_39;
    if (v16 >= v12)
      goto LABEL_35;
    v17 = *(_QWORD *)(v8 + 8 * v16);
    ++v7;
    if (!v17)
    {
      v7 = v16 + 1;
      if (v16 + 1 >= v12)
        goto LABEL_35;
      v17 = *(_QWORD *)(v8 + 8 * v7);
      if (!v17)
      {
        v7 = v16 + 2;
        if (v16 + 2 >= v12)
          goto LABEL_35;
        v17 = *(_QWORD *)(v8 + 8 * v7);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v11 = (v17 - 1) & v17;
  }
  v18 = v16 + 3;
  if (v18 >= v12)
  {
LABEL_35:
    result = swift_release();
    v2 = v28;
    goto LABEL_37;
  }
  v17 = *(_QWORD *)(v8 + 8 * v18);
  if (v17)
  {
    v7 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v7 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v7 >= v12)
      goto LABEL_35;
    v17 = *(_QWORD *)(v8 + 8 * v7);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

void sub_100121C64(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t *v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD v65[10];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_1000055B0((uint64_t *)&unk_1002B2458);
  v47 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release();
LABEL_37:
    *v2 = v47;
    return;
  }
  v5 = 1 << *(_BYTE *)(v3 + 32);
  v34 = v2;
  v35 = v3 + 56;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v3 + 56);
  v36 = (unint64_t)(v5 + 63) >> 6;
  v8 = v47 + 56;
  swift_retain(v3);
  v9 = 0;
  v37 = v3;
  if (!v7)
    goto LABEL_10;
LABEL_9:
  v38 = (v7 - 1) & v7;
  v39 = v9;
  for (i = __clz(__rbit64(v7)) | (v9 << 6); ; i = __clz(__rbit64(v12)) + (v13 << 6))
  {
    v15 = (unsigned __int8 *)(*(_QWORD *)(v3 + 48) + 32 * i);
    v64 = *v15;
    v63 = v15[1];
    v48 = v15[2];
    v54 = v15[3];
    v57 = v15[4];
    v58 = v15[5];
    v59 = v15[6];
    v60 = v15[7];
    v61 = v15[8];
    v62 = v15[9];
    v16 = v15[10];
    v46 = v15[11];
    v55 = v15[12];
    v56 = v15[13];
    v17 = v15[14];
    v45 = v15[15];
    v51 = v15[16];
    v52 = v15[17];
    v53 = v15[18];
    v18 = v15[19];
    v44 = v15[20];
    v49 = v15[21];
    v50 = v15[22];
    v19 = v15[23];
    v43 = v15[24];
    v20 = v15[25];
    v42 = v15[26];
    v21 = v15[27];
    v41 = v15[28];
    v22 = v15[29];
    v40 = v15[30];
    v23 = v15[31];
    Hasher.init(_seed:)(v65, *(_QWORD *)(v47 + 40));
    UniversalControlDisplayID.hash(into:)(v65, v64 | (v63 << 8) | (v48 << 16) | (v54 << 24) | (v57 << 32) | (v58 << 40) | (v59 << 48) | (v60 << 56), v61 | (v62 << 8) | (v16 << 16) | (v46 << 24) | (v55 << 32) | (v56 << 40) | (v17 << 48) | (v45 << 56), v51 | (v52 << 8) | (v53 << 16) | (v18 << 24) | (v44 << 32) | (v49 << 40) | (v50 << 48) | (v19 << 56), v43 | (v20 << 8) | (v42 << 16) | (v21 << 24) | (v41 << 32) | (v22 << 40) | (v40 << 48) | (v23 << 56));
    v24 = Hasher._finalize()();
    v25 = -1 << *(_BYTE *)(v47 + 32);
    v26 = v24 & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v8 + 8 * (v26 >> 6))) == 0)
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v25) >> 6;
      while (++v27 != v30 || (v29 & 1) == 0)
      {
        v31 = v27 == v30;
        if (v27 == v30)
          v27 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v8 + 8 * v27);
        if (v32 != -1)
        {
          v28 = __clz(__rbit64(~v32)) + (v27 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    v28 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v8 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)(v8 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
    v33 = (_BYTE *)(*(_QWORD *)(v47 + 48) + 32 * v28);
    *v33 = v64;
    v33[1] = v63;
    v33[2] = v48;
    v33[3] = v54;
    v33[4] = v57;
    v33[5] = v58;
    v33[6] = v59;
    v33[7] = v60;
    v33[8] = v61;
    v33[9] = v62;
    v33[10] = v16;
    v33[11] = v46;
    v33[12] = v55;
    v33[13] = v56;
    v33[14] = v17;
    v33[15] = v45;
    v33[16] = v51;
    v33[17] = v52;
    v33[18] = v53;
    v33[19] = v18;
    v33[20] = v44;
    v33[21] = v49;
    v33[22] = v50;
    v33[23] = v19;
    v33[24] = v43;
    v33[25] = v20;
    v33[26] = v42;
    v33[27] = v21;
    v33[28] = v41;
    v33[29] = v22;
    v33[30] = v40;
    v3 = v37;
    v33[31] = v23;
    ++*(_QWORD *)(v47 + 16);
    v7 = v38;
    v9 = v39;
    if (v38)
      goto LABEL_9;
LABEL_10:
    v11 = v9 + 1;
    if (__OFADD__(v9, 1))
      goto LABEL_39;
    if (v11 >= v36)
      goto LABEL_35;
    v12 = *(_QWORD *)(v35 + 8 * v11);
    v13 = v9 + 1;
    if (!v12)
    {
      v13 = v9 + 2;
      if (v9 + 2 >= v36)
        goto LABEL_35;
      v12 = *(_QWORD *)(v35 + 8 * v13);
      if (!v12)
      {
        v13 = v9 + 3;
        if (v9 + 3 >= v36)
          goto LABEL_35;
        v12 = *(_QWORD *)(v35 + 8 * v13);
        if (!v12)
          break;
      }
    }
LABEL_23:
    v38 = (v12 - 1) & v12;
    v39 = v13;
  }
  v14 = v9 + 4;
  if (v9 + 4 >= v36)
  {
LABEL_35:
    swift_release_n(v3, 2);
    v2 = v34;
    goto LABEL_37;
  }
  v12 = *(_QWORD *)(v35 + 8 * v14);
  if (v12)
  {
    v13 = v9 + 4;
    goto LABEL_23;
  }
  while (1)
  {
    v13 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v13 >= v36)
      goto LABEL_35;
    v12 = *(_QWORD *)(v35 + 8 * v13);
    ++v14;
    if (v12)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
}

void sub_1001221D0(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  Swift::Int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  Swift::Int v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  char v34;
  Swift::Int v35;
  uint64_t *v36;
  Swift::Int v37;
  Swift::Int v38;
  uint64_t *v39;
  uint64_t v40;
  Swift::Int v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v50;
  Swift::Int v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  unint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  char v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  unint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  unint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  Swift::Int v115;
  _QWORD *v116;
  Swift::Int v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  char *v121;
  uint64_t v122;
  Swift::Int v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;

  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        sub_100122A60(0, v3, 1, a1);
      return;
    }
    goto LABEL_159;
  }
  v5 = v4;
  sub_1000211F8(v3 / 2);
  v121 = v6;
  v132 = v7;
  v119 = v3;
  v114 = a1;
  if (v3 <= 0)
  {
    v10 = _swiftEmptyArrayStorage;
    v54 = _swiftEmptyArrayStorage[2];
LABEL_121:
    if (v54 < 2)
    {
LABEL_135:
      swift_bridgeObjectRelease();
      if (v119 >= -1)
      {
        *(_QWORD *)((v132 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
        specialized Array._endMutation()(v112);
        swift_bridgeObjectRelease();
        return;
      }
LABEL_164:
      __break(1u);
LABEL_165:
      __break(1u);
LABEL_166:
      __break(1u);
LABEL_167:
      __break(1u);
LABEL_168:
      __break(1u);
      return;
    }
    v104 = *v114;
    while (1)
    {
      v105 = v54 - 2;
      if (v54 < 2)
        break;
      if (!v104)
        goto LABEL_168;
      v106 = v10[2 * v105 + 4];
      v107 = v10[2 * v54 + 3];
      sub_100122BE0((char *)(v104 + 8 * v106), (char *)(v104 + 8 * v10[2 * v54 + 2]), v104 + 8 * v107, v121);
      if (v1)
        goto LABEL_133;
      if (v107 < v106)
        goto LABEL_154;
      if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
      {
        sub_10006CA50();
        v10 = v110;
      }
      if (v105 >= v10[2])
        goto LABEL_155;
      v108 = &v10[2 * v105 + 4];
      *v108 = v106;
      v108[1] = v107;
      v109 = v10[2];
      if (v54 > v109)
        goto LABEL_156;
      memmove(&v10[2 * v54 + 2], &v10[2 * v54 + 4], 16 * (v109 - v54));
      v10[2] = v109 - 1;
      v54 = v109 - 1;
      if (v109 <= 2)
        goto LABEL_135;
    }
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
LABEL_155:
    __break(1u);
LABEL_156:
    __break(1u);
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
LABEL_159:
    __break(1u);
LABEL_160:
    __break(1u);
    goto LABEL_161;
  }
  v115 = v5;
  v8 = 0;
  v9 = *a1;
  v113 = *a1 - 8;
  v10 = _swiftEmptyArrayStorage;
  v122 = *a1;
  while (1)
  {
    v11 = v8 + 1;
    v118 = v8;
    if (v8 + 1 >= v3)
      goto LABEL_40;
    v116 = v10;
    v12 = *(_QWORD **)(v9 + 8 * v11);
    v13 = *(_QWORD **)(v9 + 8 * v8);
    v14 = v12[4];
    v129 = v12[5];
    v15 = v13[4];
    v16 = v13[5];
    v17 = v12[6];
    v18 = v12[7];
    v19 = v13[6];
    v20 = v13[7];
    swift_retain();
    swift_retain();
    v21 = static UniversalControlUUID.compare(lhs:rhs:)(v17, v18);
    v125 = v21 == -1;
    if (v21 == -1 || static UniversalControlUUID.compare(lhs:rhs:)(v19, v20) == -1)
    {
      v23 = v118;
      v3 = v119;
    }
    else
    {
      v22 = v14 == v15 && v129 == v16;
      v23 = v118;
      v3 = v119;
      if (!v22)
        v125 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v129, v15, v16, 1);
    }
    swift_release();
    swift_release();
    v11 = v23 + 2;
    v9 = v122;
    if (v23 + 2 < v3)
    {
      while (1)
      {
        v24 = v9 + 8 * v23;
        v25 = *(_QWORD **)(v24 + 8);
        v26 = *(_QWORD **)(v24 + 16);
        v27 = v26[6];
        v127 = v26[5];
        v130 = v26[4];
        v28 = v25[4];
        v29 = v25[5];
        v30 = v26[7];
        v32 = v25[6];
        v31 = v25[7];
        swift_retain();
        swift_retain();
        if (static UniversalControlUUID.compare(lhs:rhs:)(v27, v30) == -1)
          break;
        if (static UniversalControlUUID.compare(lhs:rhs:)(v32, v31) == -1)
        {
          swift_release();
          swift_release();
          v3 = v119;
        }
        else
        {
          v33 = v130 == v28 && v127 == v29;
          v3 = v119;
          if (v33)
          {
            swift_release();
            swift_release();
          }
          else
          {
            v34 = _stringCompareWithSmolCheck(_:_:expecting:)(v130, v127, v28, v29, 1);
            swift_release();
            swift_release();
            if ((v34 & 1) != 0)
              goto LABEL_23;
          }
        }
        v9 = v122;
        if ((v125 & 1) != 0)
        {
          v11 = v23 + 2;
          v10 = v116;
          v8 = v118;
LABEL_33:
          if (v11 >= v8)
          {
            if (v8 < v11)
            {
              v36 = (uint64_t *)(v113 + 8 * v11);
              v37 = v11;
              v38 = v8;
              v39 = (uint64_t *)(v9 + 8 * v8);
              do
              {
                if (v38 != --v37)
                {
                  if (!v9)
                    goto LABEL_167;
                  v40 = *v39;
                  *v39 = *v36;
                  *v36 = v40;
                }
                ++v38;
                --v36;
                ++v39;
              }
              while (v38 < v37);
            }
            goto LABEL_40;
          }
LABEL_161:
          __break(1u);
LABEL_162:
          __break(1u);
          goto LABEL_163;
        }
LABEL_28:
        v35 = v23 + 3;
        ++v23;
        if (v35 >= v3)
        {
          v11 = v3;
          goto LABEL_30;
        }
      }
      swift_release();
      swift_release();
      v3 = v119;
LABEL_23:
      v9 = v122;
      if ((v125 & 1) == 0)
      {
        v11 = v23 + 2;
        v10 = v116;
        v8 = v118;
        goto LABEL_40;
      }
      goto LABEL_28;
    }
LABEL_30:
    v10 = v116;
    v8 = v118;
    if ((v125 & 1) != 0)
      goto LABEL_33;
LABEL_40:
    if (v11 >= v3)
      goto LABEL_67;
    if (__OFSUB__(v11, v8))
      goto LABEL_158;
    if (v11 - v8 >= v115)
      goto LABEL_67;
    if (__OFADD__(v8, v115))
      goto LABEL_162;
    if (v8 + v115 >= v3)
      v41 = v3;
    else
      v41 = v8 + v115;
    if (v41 < v8)
    {
LABEL_163:
      __break(1u);
      goto LABEL_164;
    }
    if (v11 == v41)
      goto LABEL_67;
    v117 = v41;
    v42 = (_QWORD *)(v113 + 8 * v11);
    do
    {
      v43 = *(_QWORD **)(v9 + 8 * v11);
      v120 = v42;
      v123 = v11;
      while (1)
      {
        v44 = v43[6];
        v128 = v43[5];
        v131 = v43[4];
        v45 = *(_QWORD *)(*v42 + 40);
        v126 = *(_QWORD *)(*v42 + 32);
        v46 = v43[7];
        v48 = *(_QWORD *)(*v42 + 48);
        v47 = *(_QWORD *)(*v42 + 56);
        swift_retain();
        swift_retain();
        if (static UniversalControlUUID.compare(lhs:rhs:)(v44, v46) != -1)
          break;
        swift_release();
        v9 = v122;
        v51 = v123;
LABEL_60:
        swift_release();
        if (!v9)
          goto LABEL_165;
        v52 = *v42;
        v43 = (_QWORD *)v42[1];
        *v42 = v43;
        v42[1] = v52;
        --v42;
        if (v51 == ++v8)
          goto LABEL_65;
      }
      if (static UniversalControlUUID.compare(lhs:rhs:)(v48, v47) != -1 && (v131 != v126 || v128 != v45))
      {
        v50 = _stringCompareWithSmolCheck(_:_:expecting:)(v131, v128, v126, v45, 1);
        swift_release();
        v9 = v122;
        v51 = v123;
        if ((v50 & 1) == 0)
          goto LABEL_64;
        goto LABEL_60;
      }
      swift_release();
      v9 = v122;
      v51 = v123;
LABEL_64:
      swift_release();
LABEL_65:
      v11 = v51 + 1;
      v42 = v120 + 1;
      v8 = v118;
    }
    while (v11 != v117);
    v11 = v117;
LABEL_67:
    if (v11 < v8)
      goto LABEL_157;
    if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
    {
      sub_10006C984();
      v10 = v102;
    }
    v53 = v10[2];
    v54 = v53 + 1;
    if (v53 >= v10[3] >> 1)
    {
      sub_10006C984();
      v10 = v103;
    }
    v10[2] = v54;
    v55 = v10 + 4;
    v56 = &v10[2 * v53 + 4];
    *v56 = v8;
    v56[1] = v11;
    v124 = v11;
    if (v53)
      break;
    v54 = 1;
LABEL_115:
    v3 = v119;
    v8 = v124;
    if (v124 >= v119)
      goto LABEL_121;
  }
  while (1)
  {
    v57 = v54 - 1;
    if (v54 >= 4)
    {
      v62 = &v55[2 * v54];
      v63 = *(v62 - 8);
      v64 = *(v62 - 7);
      v68 = __OFSUB__(v64, v63);
      v65 = v64 - v63;
      if (v68)
        goto LABEL_142;
      v67 = *(v62 - 6);
      v66 = *(v62 - 5);
      v68 = __OFSUB__(v66, v67);
      v60 = v66 - v67;
      v61 = v68;
      if (v68)
        goto LABEL_143;
      v69 = v54 - 2;
      v70 = &v55[2 * v54 - 4];
      v72 = *v70;
      v71 = v70[1];
      v68 = __OFSUB__(v71, v72);
      v73 = v71 - v72;
      if (v68)
        goto LABEL_144;
      v68 = __OFADD__(v60, v73);
      v74 = v60 + v73;
      if (v68)
        goto LABEL_146;
      if (v74 >= v65)
      {
        v92 = &v55[2 * v57];
        v94 = *v92;
        v93 = v92[1];
        v68 = __OFSUB__(v93, v94);
        v95 = v93 - v94;
        if (v68)
          goto LABEL_152;
        v85 = v60 < v95;
        goto LABEL_104;
      }
    }
    else
    {
      if (v54 != 3)
      {
        v86 = v10[4];
        v87 = v10[5];
        v68 = __OFSUB__(v87, v86);
        v79 = v87 - v86;
        v80 = v68;
        goto LABEL_98;
      }
      v59 = v10[4];
      v58 = v10[5];
      v68 = __OFSUB__(v58, v59);
      v60 = v58 - v59;
      v61 = v68;
    }
    if ((v61 & 1) != 0)
      goto LABEL_145;
    v69 = v54 - 2;
    v75 = &v55[2 * v54 - 4];
    v77 = *v75;
    v76 = v75[1];
    v78 = __OFSUB__(v76, v77);
    v79 = v76 - v77;
    v80 = v78;
    if (v78)
      goto LABEL_147;
    v81 = &v55[2 * v57];
    v83 = *v81;
    v82 = v81[1];
    v68 = __OFSUB__(v82, v83);
    v84 = v82 - v83;
    if (v68)
      goto LABEL_149;
    if (__OFADD__(v79, v84))
      goto LABEL_151;
    if (v79 + v84 >= v60)
    {
      v85 = v60 < v84;
LABEL_104:
      if (v85)
        v57 = v69;
      goto LABEL_106;
    }
LABEL_98:
    if ((v80 & 1) != 0)
      goto LABEL_148;
    v88 = &v55[2 * v57];
    v90 = *v88;
    v89 = v88[1];
    v68 = __OFSUB__(v89, v90);
    v91 = v89 - v90;
    if (v68)
      goto LABEL_150;
    if (v91 < v79)
      goto LABEL_115;
LABEL_106:
    v96 = v57 - 1;
    if (v57 - 1 >= v54)
    {
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
      goto LABEL_153;
    }
    if (!v9)
      goto LABEL_166;
    v97 = &v55[2 * v96];
    v98 = *v97;
    v99 = &v55[2 * v57];
    v100 = v99[1];
    sub_100122BE0((char *)(v9 + 8 * *v97), (char *)(v9 + 8 * *v99), v9 + 8 * v100, v121);
    if (v1)
      break;
    if (v100 < v98)
      goto LABEL_139;
    if (v57 > v10[2])
      goto LABEL_140;
    *v97 = v98;
    v55[2 * v96 + 1] = v100;
    v101 = v10[2];
    if (v57 >= v101)
      goto LABEL_141;
    v54 = v101 - 1;
    memmove(&v55[2 * v57], v99 + 2, 16 * (v101 - 1 - v57));
    v10[2] = v101 - 1;
    if (v101 <= 2)
      goto LABEL_115;
  }
LABEL_133:
  swift_bridgeObjectRelease();
  if (v119 < -1)
    goto LABEL_160;
  *(_QWORD *)((v132 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
  specialized Array._endMutation()(v111);
  swift_bridgeObjectRelease();
}

uint64_t sub_100122A60(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v18 = result;
  if (a3 == a2)
    return result;
  v20 = *a4;
  v4 = (_QWORD *)(*a4 + 8 * a3 - 8);
  while (2)
  {
    v5 = *(_QWORD **)(v20 + 8 * a3);
    v6 = v18;
    v19 = v4;
    v21 = a3;
    while (1)
    {
      v7 = (_QWORD *)*v4;
      v24 = v5[4];
      v8 = v5[6];
      v9 = *(_QWORD *)(*v4 + 32);
      v22 = *(_QWORD *)(*v4 + 40);
      v23 = v5[5];
      v10 = v5[7];
      v12 = *(_QWORD *)(*v4 + 48);
      v11 = *(_QWORD *)(*v4 + 56);
      swift_retain(v5);
      swift_retain(v7);
      if (static UniversalControlUUID.compare(lhs:rhs:)(v8, v10, v12, v11) == -1)
      {
        swift_release(v5);
        v5 = v7;
        goto LABEL_13;
      }
      if (static UniversalControlUUID.compare(lhs:rhs:)(v12, v11, v8, v10) == -1)
        break;
      if (v24 == v9 && v23 == v22)
        break;
      v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v23, v9, v22, 1);
      swift_release(v7);
      if ((v14 & 1) == 0)
        goto LABEL_17;
LABEL_13:
      result = swift_release(v5);
      if (!v20)
      {
        __break(1u);
        return result;
      }
      v15 = *v4;
      v5 = (_QWORD *)v4[1];
      *v4 = v5;
      v4[1] = v15;
      --v4;
      ++v6;
      v16 = v21;
      if (v21 == v6)
        goto LABEL_18;
    }
    swift_release(v5);
    v5 = v7;
LABEL_17:
    result = swift_release(v5);
    v16 = v21;
LABEL_18:
    a3 = v16 + 1;
    v4 = v19 + 1;
    if (a3 != a2)
      continue;
    return result;
  }
}

uint64_t sub_100122BE0(char *a1, char *a2, unint64_t a3, char *a4)
{
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v14;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  char v26;
  char *v27;
  unint64_t v28;
  char *v29;
  char *v31;
  char *v32;
  _QWORD *v33;
  char *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  char v42;
  unint64_t v43;
  char *v44;
  BOOL v45;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;

  v7 = a1;
  v8 = a2 - a1;
  v9 = (a2 - a1) / 8;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 8;
  if (v9 >= v11)
  {
    sub_100078D34(a2, (uint64_t)(a3 - (_QWORD)a2) / 8, a4);
    v12 = (unint64_t)&a4[8 * v11];
    if (v7 >= a2 || v10 < 8)
    {
      v17 = a4;
      v14 = a2;
      goto LABEL_60;
    }
    v31 = (char *)(a3 - 8);
    v14 = a2;
    v61 = v7;
    while (1)
    {
      v57 = v14;
      v59 = v12;
      v32 = (char *)(v12 - 8);
      v33 = *(_QWORD **)(v12 - 8);
      v36 = (_QWORD *)*((_QWORD *)v14 - 1);
      v34 = v14 - 8;
      v35 = v36;
      v54 = v33[4];
      v37 = v33[6];
      v50 = v36[4];
      v52 = v33[5];
      v38 = v36[6];
      v49 = v36[5];
      v39 = v33[7];
      v40 = v36[7];
      swift_retain(v33);
      swift_retain(v36);
      if (static UniversalControlUUID.compare(lhs:rhs:)(v37, v39, v38, v40) == -1)
      {
        swift_release(v33);
        swift_release(v35);
        v43 = (unint64_t)v61;
        v12 = v59;
        v44 = v31 + 8;
      }
      else
      {
        if (static UniversalControlUUID.compare(lhs:rhs:)(v38, v40, v37, v39) == -1
          || (v54 == v50 ? (v41 = v52 == v49) : (v41 = 0), v41))
        {
          swift_release(v33);
          swift_release(v35);
          v43 = (unint64_t)v61;
          v12 = v59;
          v44 = v31 + 8;
LABEL_44:
          v45 = v44 != (char *)v12 || (unint64_t)v31 >= v12;
          v34 = v32;
          v12 = (unint64_t)v32;
          goto LABEL_53;
        }
        v42 = _stringCompareWithSmolCheck(_:_:expecting:)(v54, v52, v50, v49, 1);
        swift_release(v35);
        swift_release(v33);
        v43 = (unint64_t)v61;
        v12 = v59;
        v44 = v31 + 8;
        if ((v42 & 1) == 0)
          goto LABEL_44;
      }
      v45 = v44 != v57 || v31 >= v57;
      v57 = v34;
LABEL_53:
      v17 = a4;
      if (v45)
        *(_QWORD *)v31 = *(_QWORD *)v34;
      v31 -= 8;
      v14 = v57;
      if ((unint64_t)v57 <= v43 || v12 <= (unint64_t)a4)
        goto LABEL_60;
    }
  }
  sub_100078D34(a1, (a2 - a1) / 8, a4);
  v12 = (unint64_t)&a4[8 * v9];
  if ((unint64_t)a2 < a3 && v8 >= 8)
  {
    v16 = a2;
    v17 = a4;
    v58 = (unint64_t)&a4[8 * v9];
    v51 = a3;
    while (1)
    {
      v60 = v7;
      v18 = *(_QWORD *)v16;
      v19 = *(_QWORD *)v17;
      v20 = *(_QWORD *)(*(_QWORD *)v16 + 48);
      v55 = *(_QWORD *)(*(_QWORD *)v16 + 40);
      v56 = *(_QWORD *)(*(_QWORD *)v16 + 32);
      v21 = *(_QWORD *)(*(_QWORD *)v17 + 32);
      v53 = *(_QWORD *)(*(_QWORD *)v17 + 40);
      v22 = *(_QWORD *)(*(_QWORD *)v16 + 56);
      v23 = *(_QWORD *)(*(_QWORD *)v17 + 48);
      v24 = *(_QWORD *)(*(_QWORD *)v17 + 56);
      swift_retain(*(_QWORD *)v16);
      swift_retain(v19);
      if (static UniversalControlUUID.compare(lhs:rhs:)(v20, v22, v23, v24) == -1)
        break;
      if (static UniversalControlUUID.compare(lhs:rhs:)(v23, v24, v20, v22) == -1
        || (v56 == v21 ? (v25 = v55 == v53) : (v25 = 0), v25))
      {
        swift_release(v18);
        swift_release(v19);
        v27 = v60;
        v12 = v58;
        v28 = v51;
      }
      else
      {
        v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v56, v55, v21, v53, 1);
        swift_release(v19);
        swift_release(v18);
        v27 = v60;
        v12 = v58;
        v28 = v51;
        if ((v26 & 1) != 0)
          goto LABEL_32;
      }
      v29 = v17;
      v25 = v27 == v17;
      v17 += 8;
      if (!v25)
        goto LABEL_24;
LABEL_25:
      v7 = v27 + 8;
      if ((unint64_t)v17 >= v12 || (unint64_t)v16 >= v28)
      {
        v14 = v7;
        goto LABEL_60;
      }
    }
    swift_release(v18);
    swift_release(v19);
    v27 = v60;
    v12 = v58;
    v28 = v51;
LABEL_32:
    v29 = v16;
    v25 = v27 == v16;
    v16 += 8;
    if (v25)
      goto LABEL_25;
LABEL_24:
    *(_QWORD *)v27 = *(_QWORD *)v29;
    goto LABEL_25;
  }
  v14 = v7;
  v17 = a4;
LABEL_60:
  sub_100078D34(v17, (uint64_t)(v12 - (_QWORD)v17) / 8, v14);
  return 1;
}

unint64_t sub_100122F84()
{
  unint64_t result;

  result = qword_1002B2430;
  if (!qword_1002B2430)
  {
    result = swift_getWitnessTable(&unk_10021FBDC, &type metadata for P2PMessage);
    atomic_store(result, (unint64_t *)&qword_1002B2430);
  }
  return result;
}

uint64_t sub_100122FC0()
{
  uint64_t v0;

  sub_100026600();
  swift_release();
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100122FE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1001187D0(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

uint64_t sub_100122FF0()
{
  uint64_t v0;

  return sub_1001242D8(v0, 17);
}

uint64_t sub_100123020()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 33, 7);
}

void sub_100123044(uint64_t a1)
{
  uint64_t v1;

  sub_100115848(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32));
}

uint64_t sub_100123050(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[24];
  _BYTE v19[8];

  v12 = type metadata accessor for P2PStream(0);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  swift_bridgeObjectRetain_n(a2, 2);
  swift_retain();
  sub_1000A4384();
  v14 = v13;
  *(_BYTE *)(v13 + 68) = *(_BYTE *)(a6 + 80);
  sub_1000A4038();
  swift_beginAccess(a6 + 96, v19, 33, 0);
  swift_retain();
  sub_100123730(v15, v14, (_QWORD *)(a6 + 96), (uint64_t)&off_10028FA30);
  swift_endAccess(v19);
  swift_beginAccess(a6 + 104, v19, 33, 0);
  swift_retain();
  sub_1001AAB64(v16, a5);
  swift_endAccess(v19);
  swift_beginAccess(a6 + 112, v18, 33, 0);
  sub_10011AAC4((uint64_t)v19, a1, a2, a3, a4);
  swift_endAccess(v18);
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_1001231B0(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[24];
  _BYTE v19[8];

  v12 = type metadata accessor for P2PStream(0);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  swift_bridgeObjectRetain_n(a2, 2);
  swift_retain();
  sub_1000A4384();
  v14 = v13;
  *(_BYTE *)(v13 + 68) = *(_BYTE *)(a6 + 80);
  sub_1000A4038();
  swift_beginAccess(a6 + 96, v19, 33, 0);
  swift_retain();
  sub_100123730(v15, v14, (_QWORD *)(a6 + 96), (uint64_t)&off_100283788);
  swift_endAccess(v19);
  swift_beginAccess(a6 + 104, v19, 33, 0);
  swift_retain();
  sub_1001AAB64(v16, a5);
  swift_endAccess(v19);
  swift_beginAccess(a6 + 112, v18, 33, 0);
  sub_10011AAC4((uint64_t)v19, a1, a2, a3, a4);
  swift_endAccess(v18);
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_100123310(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[24];
  _BYTE v19[8];

  v12 = type metadata accessor for P2PStream(0);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  swift_bridgeObjectRetain_n(a2, 2);
  swift_retain();
  sub_1000A4384();
  v14 = v13;
  *(_BYTE *)(v13 + 68) = *(_BYTE *)(a6 + 80);
  sub_1000A4038();
  swift_beginAccess(a6 + 96, v19, 33, 0);
  swift_retain();
  sub_100123730(v15, v14, (_QWORD *)(a6 + 96), (uint64_t)&off_1002812B0);
  swift_endAccess(v19);
  swift_beginAccess(a6 + 104, v19, 33, 0);
  swift_retain();
  sub_1001AAB64(v16, a5);
  swift_endAccess(v19);
  swift_beginAccess(a6 + 112, v18, 33, 0);
  sub_10011AAC4((uint64_t)v19, a1, a2, a3, a4);
  swift_endAccess(v18);
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_100123470(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[24];
  _BYTE v19[8];

  v12 = type metadata accessor for P2PStream(0);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  swift_bridgeObjectRetain_n(a2, 2);
  swift_retain();
  sub_1000A4384();
  v14 = v13;
  *(_BYTE *)(v13 + 68) = *(_BYTE *)(a6 + 80);
  sub_1000A4038();
  swift_beginAccess(a6 + 96, v19, 33, 0);
  swift_retain();
  sub_100123730(v15, v14, (_QWORD *)(a6 + 96), (uint64_t)&off_10028D240);
  swift_endAccess(v19);
  swift_beginAccess(a6 + 104, v19, 33, 0);
  swift_retain();
  sub_1001AAB64(v16, a5);
  swift_endAccess(v19);
  swift_beginAccess(a6 + 112, v18, 33, 0);
  sub_10011AAC4((uint64_t)v19, a1, a2, a3, a4);
  swift_endAccess(v18);
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_1001235D0(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[24];
  _BYTE v19[8];

  v12 = type metadata accessor for P2PStream(0);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  swift_bridgeObjectRetain_n(a2, 2);
  swift_retain();
  sub_1000A4384();
  v14 = v13;
  *(_BYTE *)(v13 + 68) = *(_BYTE *)(a6 + 80);
  sub_1000A4038();
  swift_beginAccess(a6 + 96, v19, 33, 0);
  swift_retain();
  sub_100123730(v15, v14, (_QWORD *)(a6 + 96), (uint64_t)&off_10028DB50);
  swift_endAccess(v19);
  swift_beginAccess(a6 + 104, v19, 33, 0);
  swift_retain();
  sub_1001AAB64(v16, a5);
  swift_endAccess(v19);
  swift_beginAccess(a6 + 112, v18, 33, 0);
  sub_10011AAC4((uint64_t)v19, a1, a2, a3, a4);
  swift_endAccess(v18);
  swift_bridgeObjectRelease();
  return v14;
}

double sub_100123730(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  char isUniquelyReferenced_nonNull_native;
  double result;
  uint64_t v10;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a3);
  v10 = *a3;
  *a3 = 0x8000000000000000;
  sub_1001237A4(a1, a2, isUniquelyReferenced_nonNull_native, &v10, a4);
  *a3 = v10;
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

void sub_1001237A4(uint64_t a1, uint64_t a2, char a3, _QWORD *a4, uint64_t a5)
{
  _QWORD *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  _BOOL8 v14;
  Swift::Int v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t *v21;

  v10 = (_QWORD *)*a4;
  v11 = sub_100013328(a2);
  v13 = v10[2];
  v14 = (v12 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_10;
  }
  v16 = v11;
  v17 = v12;
  sub_1000055B0(&qword_1002B2448);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v15))
  {
    v18 = sub_100013328(a2);
    if ((v17 & 1) == (v19 & 1))
    {
      v16 = v18;
      goto LABEL_5;
    }
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for ObjectIdentifier);
    __break(1u);
    return;
  }
LABEL_5:
  v20 = (_QWORD *)*a4;
  if ((v17 & 1) != 0)
  {
    v21 = (uint64_t *)(v20[7] + 16 * v16);
    swift_unknownObjectRelease(*v21);
    *v21 = a1;
    v21[1] = a5;
  }
  else
  {
    sub_10012388C(v16, a2, a1, v20, a5);
  }
  sub_10002D8A4();
}

unint64_t sub_10012388C(unint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a4[6] + 8 * result) = a2;
  v5 = (_QWORD *)(a4[7] + 16 * result);
  *v5 = a3;
  v5[1] = a5;
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

uint64_t sub_1001238D4()
{
  uint64_t v0;

  return sub_100118CC4(v0, 12);
}

void sub_10012390C()
{
  uint64_t v0;

  sub_100113FF0(v0);
}

uint64_t sub_100123914(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100123924(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10012392C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100123950(uint64_t a1)
{
  uint64_t v1;

  return sub_10011872C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(uint64_t, _QWORD))(v1 + 32));
}

uint64_t sub_10012395C(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
    return swift_errorRelease(a1);
  else
    return swift_bridgeObjectRelease(a1);
}

uint64_t sub_10012396C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10000E440();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  sub_100026600();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001239D8()
{
  return sub_1001239E4(sub_100115754);
}

uint64_t sub_1001239E4(uint64_t (*a1)(_QWORD, uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(sub_10000E440() - 8) + 80);
  return a1(*(_QWORD *)(v1 + 16), v1 + ((v2 + 24) & ~v2));
}

uint64_t destroy for P2PPeerCoordinator.Event(uint64_t a1)
{
  return sub_1001216F0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t *initializeWithCopy for P2PPeerCoordinator.Event(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  sub_100121680(*a2, v4, v5, v6);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  return a1;
}

uint64_t *assignWithCopy for P2PPeerCoordinator.Event(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  sub_100121680(*a2, v4, v5, v6);
  v7 = *a1;
  v8 = a1[1];
  v9 = a1[2];
  v10 = a1[3];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  sub_1001216F0(v7, v8, v9, v10);
  return a1;
}

uint64_t *assignWithTake for P2PPeerCoordinator.Event(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __int128 v7;

  v3 = *a1;
  v5 = a1[1];
  v4 = a1[2];
  v6 = a1[3];
  v7 = a2[1];
  *(_OWORD *)a1 = *a2;
  *((_OWORD *)a1 + 1) = v7;
  sub_1001216F0(v3, v5, v4, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for P2PPeerCoordinator.Event(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 32))
    {
      v3 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 16) >> 1;
      if (v2 > 0x80000000)
        v3 = ~(_DWORD)v2;
      else
        v3 = -1;
    }
  }
  else
  {
    v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for P2PPeerCoordinator.Event(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 2 * -a2;
      *(_QWORD *)(result + 24) = 0;
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_100123BB0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 24) >> 61;
  if (v1 <= 5)
    return v1;
  else
    return (*(_DWORD *)a1 + 6);
}

uint64_t sub_100123BCC(uint64_t result)
{
  *(_QWORD *)(result + 24) &= 0x1FFFFFFFFFFFFFFFuLL;
  return result;
}

_QWORD *sub_100123BDC(_QWORD *result, uint64_t a2)
{
  uint64_t v2;

  if (a2 < 6)
  {
    v2 = result[3] & 0xFFFFFFFFFFFFFF8 | (a2 << 61);
    result[2] &= 1uLL;
    result[3] = v2;
  }
  else
  {
    *result = (a2 - 6);
    result[1] = 0;
    result[2] = 0;
    result[3] = 0xC000000000000000;
  }
  return result;
}

ValueMetadata *type metadata accessor for P2PPeerCoordinator.Event()
{
  return &type metadata for P2PPeerCoordinator.Event;
}

uint64_t storeEnumTagSinglePayload for P2PPeerCoordinator.DiagnosticState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_100123C68 + 4 * byte_100226E02[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100123C9C + 4 * byte_100226DFD[v4]))();
}

uint64_t sub_100123C9C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100123CA4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100123CACLL);
  return result;
}

uint64_t sub_100123CB8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100123CC0);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_100123CC4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100123CCC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for P2PPeerCoordinator.DiagnosticState.CodingKeys()
{
  return &type metadata for P2PPeerCoordinator.DiagnosticState.CodingKeys;
}

unint64_t sub_100123CEC()
{
  unint64_t result;

  result = qword_1002B2498;
  if (!qword_1002B2498)
  {
    result = swift_getWitnessTable(&unk_1002271F0, &type metadata for P2PPeerCoordinator.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B2498);
  }
  return result;
}

unint64_t sub_100123D2C()
{
  unint64_t result;

  result = qword_1002B24A0;
  if (!qword_1002B24A0)
  {
    result = swift_getWitnessTable(&unk_100227160, &type metadata for P2PPeerCoordinator.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B24A0);
  }
  return result;
}

unint64_t sub_100123D6C()
{
  unint64_t result;

  result = qword_1002B24A8;
  if (!qword_1002B24A8)
  {
    result = swift_getWitnessTable(&unk_100227188, &type metadata for P2PPeerCoordinator.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B24A8);
  }
  return result;
}

uint64_t sub_100123DB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0);
}

uint64_t sub_100123DC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_100123DD4()
{
  uint64_t v0;

  return v0 + 56;
}

void sub_100123DFC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v1 + 16);
}

uint64_t sub_100123E4C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 112) = a1;
  return v1 - 112;
}

uint64_t sub_100123E60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  return static UniversalControlDisplayID.== infix(_:_:)(*(_QWORD *)(*(_QWORD *)(v4 + 48) + 32 * v5), *(_QWORD *)(*(_QWORD *)(v4 + 48) + 32 * v5 + 8), *(_QWORD *)(*(_QWORD *)(v4 + 48) + 32 * v5 + 16), *(_QWORD *)(*(_QWORD *)(v4 + 48) + 32 * v5 + 24), v0, v1, v2, v3);
}

uint64_t sub_100123E84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v3 - 88, v3 - 89, v0, v1, v2);
}

uint64_t sub_100123ECC()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 - 96));
}

uint64_t sub_100123EE4()
{
  uint64_t v0;
  _QWORD *v1;

  *v1 = 0x8000000000000000;
  return v0;
}

uint64_t sub_100123F08@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *v1 = a1;
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_100123F30()
{
  _QWORD *v0;

  return static _SetStorage.copy(original:)(*v0);
}

uint64_t sub_100123F5C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  return sub_10008A214(v1, v0, v2);
}

uint64_t sub_100123F6C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  return sub_100089820(v1, v0, v2);
}

uint64_t sub_100123F7C()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return sub_10008A214(v2, v1, v0);
}

uint64_t sub_100123F8C()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return sub_100089820(v2, v1, v0);
}

uint64_t sub_100123F9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v4 - 88) = a3;
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, v4 - 88, v3);
}

uint64_t sub_100123FB4()
{
  uint64_t v0;
  _QWORD *v1;

  *v1 = 0x8000000000000000;
  return v0;
}

uint64_t sub_100123FE8()
{
  uint64_t v0;

  return static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
}

void sub_100123FF0(unint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a1;
}

uint64_t sub_100124010()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

_QWORD *sub_100124048()
{
  return Completion.init(file:line:)();
}

uint64_t sub_1001240A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, v2, v1);
}

uint64_t sub_1001240C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return static UniversalControlUUID.compare(lhs:rhs:)(a1, a2, v2, v3);
}

uint64_t sub_1001240EC()
{
  uint64_t v0;
  uint64_t v1;

  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v1 - 72, v0);
}

uint64_t sub_100124100()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return sub_100121680(v2, v0, v3, v1);
}

void *sub_100124114@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v2;

  return memmove(a1, v2, 8 * a2);
}

uint64_t sub_100124120()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  return sub_1001216F0(v1, v0, v3, v2);
}

uint64_t sub_100124134(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_100006FCC(a1, a2, (uint64_t *)(v2 - 136));
}

_QWORD *sub_100124140(uint64_t a1, ...)
{
  uint64_t v1;
  va_list va;

  va_start(va, a1);
  return Hasher.init(_seed:)((uint64_t *)va, *(_QWORD *)(*(_QWORD *)v1 + 40));
}

uint64_t sub_100124154(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;

  return sub_1001216F0(a1, a2, a3, v3);
}

uint64_t sub_10012415C(uint64_t a1, uint64_t *a2)
{
  return sub_1000055B0(a2);
}

void sub_10012416C()
{
  Swift::String v0;

  v0._countAndFlagsBits = 58;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
}

uint64_t sub_10012417C(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

int16x4_t sub_1001241C0(uint64x2_t a1, double a2, int32x4_t a3, uint64x2_t a4)
{
  return vmovn_s32(vuzp1q_s32((int32x4_t)vshlq_u64(a1, a4), a3));
}

uint64_t sub_1001241E8()
{
  _QWORD *v0;

  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

uint64_t sub_1001241F0(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return sub_100121680(a1, v2, *(_QWORD *)(v3 - 200), v1);
}

void sub_100124218()
{
  Swift::String v0;

  v0._countAndFlagsBits = 32;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
}

uint64_t sub_100124228(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t *v28;
  uint64_t v29;

  v29 = *v28;
  *v28 = a28;
  return swift_bridgeObjectRelease(v29);
}

uint64_t sub_100124238(uint64_t a1)
{
  uint64_t v1;

  return sub_1001216F0(a1, *(_QWORD *)(v1 - 216), *(_QWORD *)(v1 - 200), *(_QWORD *)(v1 - 248));
}

uint64_t sub_100124248()
{
  return 0;
}

uint64_t sub_100124258()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100124270()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return static UniversalControlEdge.== infix(_:_:)(*(unsigned __int8 *)(*(_QWORD *)(v1 + 48) + v2), v0);
}

void sub_100124280(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  sub_1000840B4(a1, 255, a3, a4);
}

uint64_t sub_100124288(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0);
}

uint64_t sub_1001242AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *v1 = a1;
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_1001242D8(uint64_t a1, uint64_t a2)
{
  return sub_100118CC4(a1, a2);
}

uint64_t sub_1001242F4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100124300(uint64_t a1)
{
  return sub_1001175CC(a1, 0);
}

uint64_t sub_10012430C@<X0>(uint64_t a1@<X1>, char a2@<W8>)
{
  uint64_t v2;

  *(_BYTE *)(v2 - 72) = a2;
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_100124318()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

void sub_100124344()
{
  int v0;
  uint64_t v1;

  *(_DWORD *)(v1 - 256) = v0;
}

uint64_t sub_100124364(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 136) = a1;
  return v1 - 136;
}

uint64_t sub_10012438C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;

  return sub_100121680(a1, a2, a3, v3);
}

uint64_t sub_100124398()
{
  return 0;
}

uint64_t sub_1001243B8()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t sub_1001243C4(uint64_t a1)
{
  return Completion.callAsFunction(_:)(a1);
}

uint64_t sub_1001243CC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1001243D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  return Hasher.combine(bytes:)(&a26, a2);
}

uint64_t sub_1001243E4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_100006FCC(a1, a2, (uint64_t *)(v2 - 96));
}

uint64_t sub_1001243F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + 64);
  v2 = swift_bridgeObjectRetain(v1);
  sub_10012442C(v2);
  v4 = v3;
  swift_bridgeObjectRelease(v1);
  return v4;
}

void sub_10012442C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v7 = a1;
    else
      v7 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v7);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v2)
  {
    sub_1000587C8();
    if (v2 < 0)
    {
      __break(1u);
    }
    else
    {
      v3 = 0;
      do
      {
        if ((a1 & 0xC000000000000001) != 0)
        {
          v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(v3, a1);
        }
        else
        {
          v4 = *(_QWORD *)(a1 + 8 * v3 + 32);
          swift_retain(v4);
        }
        v5 = _swiftEmptyArrayStorage[2];
        if (v5 >= _swiftEmptyArrayStorage[3] >> 1)
          sub_1000587C8();
        ++v3;
        _swiftEmptyArrayStorage[2] = v5 + 1;
        v6 = &_swiftEmptyArrayStorage[2 * v5];
        v6[4] = v4;
        v6[5] = &protocol witness table for P2PDevice;
      }
      while (v2 != v3);
    }
  }
}

uint64_t sub_100124568()
{
  uint64_t v0;

  v0 = type metadata accessor for P2PBrowser();
  sub_1001245C4();
  return ObservableObject<>.objectWillChange.getter(v0);
}

uint64_t type metadata accessor for P2PBrowserAdapter()
{
  return objc_opt_self(_TtC13EnsembleAgent17P2PBrowserAdapter);
}

unint64_t sub_1001245C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002AC3C8;
  if (!qword_1002AC3C8)
  {
    v1 = type metadata accessor for P2PBrowser();
    result = swift_getWitnessTable(&unk_10022325C, v1);
    atomic_store(result, (unint64_t *)&qword_1002AC3C8);
  }
  return result;
}

uint64_t CGRegionRef.boundingBox.getter()
{
  uint64_t v0;

  return CGRegionGetBoundingBox(v0);
}

_QWORD *sub_10012460C()
{
  void *v0;
  _QWORD *v1;

  v1 = sub_1001675F4(v0);

  return v1;
}

#error "100124648: call analysis failed (funcsize=11)"

uint64_t sub_100124668(uint64_t *a1, uint64_t a2, uint64_t a3, xpc_object_t xarray)
{
  size_t count;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  count = xpc_array_get_count(xarray);
  v9 = sub_1000088D8((uint64_t)&unk_10028CF90, 24);
  *(_QWORD *)(v9 + 16) = 0;
  v10 = (_QWORD *)sub_1000088D8((uint64_t)&unk_10028CFB8, 40);
  v10[2] = v9;
  v10[3] = count;
  v10[4] = xarray;
  v11 = sub_1000055B0(&qword_1002ACD70);
  result = sub_1000088D8(v11, 32);
  v13 = result;
  v14 = 0;
  *(_QWORD *)(result + 16) = sub_100077E4C;
  *(_QWORD *)(result + 24) = v10;
  if (!a2 || !a3)
  {
LABEL_9:
    *a1 = v13;
    return v14;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v15 = sub_100079354();
    v14 = 0;
    if (v15)
    {
      while (1)
      {
        *(_QWORD *)(a2 + 8 * v14) = v15;
        if (a3 - 1 == v14)
          break;
        v15 = sub_100079354();
        ++v14;
        if (!v15)
          goto LABEL_9;
      }
      v14 = a3;
    }
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t sub_100124758()
{
  uint64_t result;

  result = CGRegionCreateEmptyRegion();
  static CGRegionRef.empty = result;
  return result;
}

uint64_t *CGRegionRef.empty.unsafeMutableAddressor()
{
  if (qword_1002A98E8 != -1)
    swift_once(&qword_1002A98E8, sub_100124758);
  return &static CGRegionRef.empty;
}

id static CGRegionRef.empty.getter()
{
  if (qword_1002A98E8 != -1)
    swift_once(&qword_1002A98E8, sub_100124758);
  return (id)static CGRegionRef.empty;
}

uint64_t static CGRegionRef.new(_:)()
{
  uint64_t result;

  result = CGRegionCreateWithRect();
  if (!result)
    __break(1u);
  return result;
}

uint64_t CGRegionRef.copy()()
{
  uint64_t v0;

  return CGRegionCreateCopy(v0);
}

uint64_t CGRegionRef.intersection(_:)()
{
  return sub_100124840((uint64_t (*)(uint64_t))&CGRegionCreateIntersectionWithRect);
}

uint64_t CGRegionRef.intersection(_:)(uint64_t a1)
{
  uint64_t v1;

  return CGRegionCreateIntersectionWithRegion(v1, a1);
}

uint64_t CGRegionRef.union(_:)()
{
  return sub_100124840((uint64_t (*)(uint64_t))&_CGRegionCreateUnionWithRect);
}

uint64_t sub_100124840(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t result;

  result = a1(v1);
  if (!result)
    return CGRegionCreateEmptyRegion();
  return result;
}

uint64_t CGRegionRef.union(_:)(uint64_t a1)
{
  uint64_t v1;

  return CGRegionCreateUnionWithRegion(v1, a1);
}

uint64_t CGRegionRef.difference(_:)(uint64_t a1)
{
  uint64_t v1;

  return CGRegionCreateDifferenceWithRegion(v1, a1);
}

void CGRegionRef.difference(_:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = CGRegionCreateWithRect();
  if (v1)
  {
    v2 = (void *)v1;
    CGRegionCreateDifferenceWithRegion(v0, v1);

    sub_1000050D4();
  }
  else
  {
    __break(1u);
  }
}

id CGRegionRef.offsetBy(_:)()
{
  uint64_t v0;
  id result;
  id v2;

  result = (id)CGRegionCreateWithOffset(v0);
  if (!result)
    return v2;
  return result;
}

uint64_t CGRegionRef.contains(_:)()
{
  uint64_t v0;

  return CGRegionContainsPoint(v0);
}

{
  return sub_100124940((uint64_t (*)(uint64_t))&CGRegionContainsRect);
}

uint64_t CGRegionRef.contains(_:)(uint64_t a1)
{
  uint64_t v1;

  return CGRegionContainsRegion(v1, a1);
}

uint64_t CGRegionRef.intersects(_:)()
{
  return sub_100124940((uint64_t (*)(uint64_t))&CGRegionIntersectsRect);
}

uint64_t sub_100124940(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;

  return a1(v1);
}

uint64_t CGRegionRef.intersects(_:)(uint64_t a1)
{
  uint64_t v1;

  return CGRegionIntersectsRegion(v1, a1);
}

uint64_t CGRegionRef.isEmpty.getter()
{
  uint64_t v0;

  return CGRegionIsEmpty(v0);
}

uint64_t static CGRegionRef.== infix(_:_:)()
{
  return CGRegionEqualToRegion();
}

uint64_t sub_1001249A4()
{
  return static CGRegionRef.== infix(_:_:)() & 1;
}

int8x16_t sub_1001249C4@<Q0>(int8x16_t *a1@<X8>)
{
  uint64_t v1;
  int NextRect;
  unint64_t v4;
  int8x16_t v5;
  int8x16_t result;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;

  v8 = 0u;
  v9 = 0u;
  NextRect = CGRegionEnumeratorGetNextRect(*(_QWORD *)(v1 + 16), &v8);
  if (NextRect)
    v4 = -1;
  else
    v4 = 0;
  v5 = (int8x16_t)vdupq_n_s64(v4);
  result = vandq_s8(v8, v5);
  v7 = vandq_s8(v9, v5);
  *a1 = result;
  a1[1] = v7;
  a1[2].i8[0] = NextRect ^ 1;
  return result;
}

uint64_t sub_100124A4C()
{
  uint64_t v0;

  CGRegionEnumeratorRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

void CGRegionRef.makeIterator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = _s16CGRegionIteratorCMa();
  v2 = sub_1000088D8(v1, 24);
  *(_QWORD *)(v2 + 16) = CGRegionEnumeratorCreate(v0);
  v3 = sub_1000055B0(&qword_1002B2550);
  v4 = sub_1000088D8(v3, 32);
  *(_QWORD *)(v4 + 16) = sub_100124B20;
  *(_QWORD *)(v4 + 24) = v2;
  sub_1000050D4();
}

uint64_t _s16CGRegionIteratorCMa()
{
  return objc_opt_self(_TtCE13EnsembleAgentaSo11CGRegionRefP33_9695E2FD675D1EC7B41AED34678600FB16CGRegionIterator);
}

uint64_t sub_100124AE4@<X0>(uint64_t a1@<X8>)
{
  int8x16_t v3[2];

  sub_1001249C4(v3);
  return sub_100124C8C((uint64_t)v3, a1);
}

uint64_t sub_100124B20@<X0>(uint64_t a1@<X8>)
{
  return sub_100124AE4(a1);
}

unint64_t sub_100124B2C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B2558;
  if (!qword_1002B2558)
  {
    v1 = sub_10000DCA0(&qword_1002B2560);
    result = swift_getWitnessTable(&protocol conformance descriptor for AnyIterator<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1002B2558);
  }
  return result;
}

void sub_100124B70(_QWORD *a1@<X8>)
{
  void **v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *v1;
  CGRegionRef.makeIterator()();
  v5 = v4;

  *a1 = v5;
}

_QWORD *sub_100124BA8()
{
  return sub_10012460C();
}

uint64_t sub_100124BC8()
{
  return sub_100124664();
}

uint64_t sub_100124BE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  type metadata accessor for CGRegion(0);
  return Sequence.withContiguousStorageIfAvailable<A>(_:)(a1, a2, v6, a3);
}

uint64_t sub_100124C50()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100124C60()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100124C8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000055B0((uint64_t *)&unk_1002B2610);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100124CD4(unint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  id v7;
  _BYTE v9[24];

  if (qword_1002A9840 != -1)
    swift_once(&qword_1002A9840, sub_10004A0E8);
  v4 = (_QWORD *)(static Agent.shared + OBJC_IVAR____TtC13EnsembleAgent5Agent_context);
  v5 = swift_beginAccess(static Agent.shared + OBJC_IVAR____TtC13EnsembleAgent5Agent_context, v9, 0, 0);
  if (*v4)
  {
    sub_100026AE4();
    v6 = sub_1000FDECC(a1, a2);
    sub_100026AEC();
  }
  else
  {
    v6 = sub_10002D82C(v5, (unint64_t *)&qword_1002AAB80, NSError_ptr);
    v7 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(-6727, 0, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Ensemble_executables/EnsembleAgent/P2PPeerCoordinator.swift", 97, 2, 143);
    swift_willThrow(v7);
  }
  return v6;
}

uint64_t sub_100124DE8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  return sub_100124E24(a1, a2, a3, a4);
}

uint64_t sub_100124DFC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  return sub_100124E24(a1, a2, a3, a4);
}

uint64_t sub_100124E10(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  return sub_100124E24(a1, a2, a3, a4);
}

uint64_t sub_100124E24(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v6;

  sub_1000088D0();
  v6 = sub_100124CD4(a3, a4);
  sub_10000B348();
  sub_1000D95F8();
  sub_100128DA4();
  return sub_100140EE8(v6);
}

uint64_t sub_100124EBC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  uint64_t v48;
  _OWORD *v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD v89[10];
  _BYTE __dst[80];
  _QWORD *v91;

  v88 = sub_1000055B0(&qword_1002B2978);
  v2 = __chkstk_darwin(v88);
  v73 = (uint64_t)&v68 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __chkstk_darwin(v2);
  v72 = (uint64_t)&v68 - v5;
  v6 = __chkstk_darwin(v4);
  v87 = (uint64_t)&v68 - v7;
  v8 = __chkstk_darwin(v6);
  v71 = (uint64_t)&v68 - v9;
  __chkstk_darwin(v8);
  v86 = (uint64_t)&v68 - v10;
  v11 = *(_QWORD *)(a1 + 16);
  v12 = _swiftEmptyArrayStorage;
  if (!v11)
    return (uint64_t)v12;
  v91 = _swiftEmptyArrayStorage;
  sub_10005888C();
  result = sub_100071A78(a1);
  if ((result & 0x8000000000000000) == 0)
  {
    v15 = result;
    if (result < 1 << *(_BYTE *)(a1 + 32))
    {
      v16 = a1 + 64;
      v70 = a1;
      v69 = a1 + 64;
      while ((*(_QWORD *)(v16 + 8 * (v15 >> 6)) & (1 << v15)) != 0)
      {
        if ((_DWORD)v14 != *(_DWORD *)(a1 + 36))
          goto LABEL_20;
        v76 = 1 << v15;
        v77 = v15 >> 6;
        v75 = v14;
        v74 = v11;
        v17 = v86;
        v18 = (uint64_t *)(v86 + *(int *)(v88 + 48));
        v19 = *(_QWORD *)(a1 + 48);
        v20 = type metadata accessor for HIDUniversalSenderID(0);
        sub_10005F428(v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v15, v17, type metadata accessor for HIDUniversalSenderID);
        v21 = *(_QWORD *)(a1 + 56);
        v85 = v15;
        v22 = (uint64_t *)(v21 + 80 * v15);
        v23 = *v22;
        v24 = v22[1];
        v26 = v22[2];
        v79 = v22[3];
        v25 = v79;
        v28 = v22[4];
        v27 = v22[5];
        v30 = v22[6];
        v80 = v22[7];
        v29 = v80;
        v32 = v22[9];
        v78 = v22[8];
        v31 = v78;
        *v18 = v23;
        v18[1] = v24;
        v18[2] = v26;
        v18[3] = v25;
        v81 = v26;
        v18[4] = v28;
        v18[5] = v27;
        v33 = v27;
        v82 = v27;
        v18[6] = v30;
        v18[7] = v29;
        v18[8] = v31;
        v18[9] = v32;
        v84 = v32;
        v34 = v71;
        sub_10005F428(v17, v71, type metadata accessor for HIDUniversalSenderID);
        v35 = (uint64_t *)(v34 + *(int *)(v88 + 48));
        *v35 = v23;
        v35[1] = v24;
        v35[2] = v26;
        v36 = v79;
        v35[3] = v79;
        v35[4] = v28;
        v83 = v28;
        v35[5] = v33;
        v35[6] = v30;
        v37 = v30;
        v38 = v80;
        v39 = v78;
        v35[7] = v80;
        v35[8] = v39;
        v35[9] = v32;
        sub_10005FA70(v34, v87, &qword_1002B2978);
        sub_10002517C(v23, v24);
        v40 = v81;
        sub_10002517C(v81, v36);
        v41 = v28;
        v42 = v82;
        sub_10002517C(v41, v82);
        sub_10002517C(v37, v38);
        v43 = v84;
        sub_10002517C(v39, v84);
        sub_10002517C(v23, v24);
        sub_10002517C(v40, v36);
        sub_10002517C(v83, v42);
        sub_10002517C(v37, v38);
        sub_10002517C(v39, v43);
        sub_100025A28(v86, &qword_1002B2978);
        v44 = v88;
        v45 = *(int *)(v88 + 48);
        v46 = v72;
        v47 = (_OWORD *)(v72 + v45);
        v48 = v87;
        v49 = (_OWORD *)(v87 + v45);
        sub_10005F428(v87, v72, type metadata accessor for HIDUniversalSenderID);
        v50 = v49[1];
        *v47 = *v49;
        v47[1] = v50;
        v51 = v49[3];
        v47[2] = v49[2];
        v47[3] = v51;
        v47[4] = v49[4];
        v84 = HIDUniversalSenderID.description.getter(v52);
        v83 = v53;
        sub_1000255F0(v46, type metadata accessor for HIDUniversalSenderID);
        v54 = v73;
        v55 = (void *)(v73 + *(int *)(v44 + 48));
        sub_10005F428(v48, v73, type metadata accessor for HIDUniversalSenderID);
        memcpy(__dst, v49, sizeof(__dst));
        memcpy(v55, v49, 0x50uLL);
        sub_10013FD00();
        sub_1000E0C64(v89);
        sub_10013FD00();
        v56 = v89[1];
        v82 = v89[0];
        v57 = v89[2];
        v58 = v89[3];
        v59 = v89[4];
        v81 = v89[5];
        v60 = v89[6];
        v80 = v89[7];
        v79 = v89[8];
        v78 = v89[9];
        sub_1000255F0(v54, type metadata accessor for HIDUniversalSenderID);
        sub_100025A28(v48, &qword_1002B2978);
        v12 = v91;
        if ((swift_isUniquelyReferenced_nonNull_native(v91) & 1) == 0)
        {
          sub_10005888C();
          v12 = v91;
        }
        v61 = v12[2];
        if (v61 >= v12[3] >> 1)
        {
          sub_10005888C();
          v12 = v91;
        }
        v12[2] = v61 + 1;
        v62 = &v12[12 * v61];
        v63 = v83;
        v62[4] = v84;
        v62[5] = v63;
        v62[6] = v82;
        v62[7] = v56;
        v62[8] = v57;
        v62[9] = v58;
        v64 = v81;
        v62[10] = v59;
        v62[11] = v64;
        v65 = v80;
        v62[12] = v60;
        v62[13] = v65;
        v66 = v78;
        v62[14] = v79;
        v62[15] = v66;
        a1 = v70;
        v67 = -1 << *(_BYTE *)(v70 + 32);
        result = v85;
        if (v85 >= -v67)
          goto LABEL_21;
        v16 = v69;
        if ((*(_QWORD *)(v69 + 8 * v77) & v76) == 0)
          goto LABEL_22;
        if ((_DWORD)v75 != *(_DWORD *)(v70 + 36))
          goto LABEL_23;
        result = _HashTable.occupiedBucket(after:)(v85, v69, ~v67);
        v11 = v74 - 1;
        if (v74 == 1)
          return (uint64_t)v12;
        v15 = result;
        if ((result & 0x8000000000000000) == 0)
        {
          v14 = *(unsigned int *)(a1 + 36);
          if (result < 1 << *(_BYTE *)(a1 + 32))
            continue;
        }
        goto LABEL_24;
      }
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
    }
  }
LABEL_24:
  __break(1u);
  return result;
}

void sub_10012550C()
{
  uint64_t v0;
  uint64_t v1;

  sub_10012E884();
  v0 = sub_100141158();
  sub_100126848(v0, v1, 0);
  EnsembleHIDController.clearActivityNotificationMask()();
  sub_100141158();
  sub_10014B86C();
}

void sub_100125558()
{
  uint64_t *v0;
  os_log_type_t v1;
  uint64_t v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t i;
  NSObject *v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  char v33[24];

  if (qword_1002A98F0 != -1)
LABEL_31:
    swift_once(&qword_1002A98F0, sub_10012901C);
  v2 = sub_10000F6E4();
  v29 = sub_100006FB4(v2, (uint64_t)qword_1002B2620);
  Logger.logObject.getter(v29);
  v3 = sub_10002D844();
  if (sub_100040394(v3))
  {
    v4 = (uint8_t *)sub_10000797C(2);
    *(_WORD *)v4 = 0;
    sub_10005FF70((void *)&_mh_execute_header, v29, v1, "resetting global event focus", v4);
    sub_100007958((uint64_t)v4);
  }

  sub_10000B2F8((uint64_t)(v0 + 33), (uint64_t)v33, 0);
  v5 = v0[33];
  v30 = v5 + 56;
  v6 = 1 << *(_BYTE *)(v5 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(v5 + 56);
  v31 = (unint64_t)(v6 + 63) >> 6;
  sub_100040544();
  v9 = 0;
  v1 = OS_LOG_TYPE_DEFAULT;
  for (i = v5; ; v5 = i)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v9 << 6);
      goto LABEL_20;
    }
    if (__OFADD__(v9++, 1))
    {
      __break(1u);
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    if (v9 >= v31)
      goto LABEL_28;
    v13 = *(_QWORD *)(v30 + 8 * v9);
    if (!v13)
      break;
LABEL_19:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v9 << 6);
LABEL_20:
    v15 = sub_100124CD4(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 16 * v11), *(_QWORD *)(*(_QWORD *)(v5 + 48) + 16 * v11 + 8));
    v16 = sub_1000404AC(v15);
    v17 = Logger.logObject.getter(v16);
    v19 = static os_log_type_t.default.getter(v17, v18);
    if (os_log_type_enabled(v17, v19))
    {
      v20 = sub_10000797C(12);
      v21 = sub_10000797C(32);
      v32 = v21;
      *(_DWORD *)v20 = 136446210;
      v22 = sub_100111930();
      *(_QWORD *)(v20 + 4) = sub_100006FCC(v22, v23, &v32);
      sub_100141398();
      sub_10000E420();
      sub_100026484((void *)&_mh_execute_header, v17, v19, "IDS %{public}s: Reset Focus", (uint8_t *)v20);
      swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
      sub_100007958(v21);
      sub_100007958(v20);

    }
    else
    {

      sub_100141398();
    }
    v24 = HIDReport.storage.getter(229, 0x1000000000000uLL);
    v26 = v25;
    v27 = sub_1000B219C();
    sub_1000C251C(v27);
    sub_100140EAC();
    Completion.init(file:line:)();
    sub_100128DA4();
    swift_release();
    sub_100022AEC(v24, v26);
    swift_release();
  }
  v14 = v9 + 1;
  if (v9 + 1 >= v31)
    goto LABEL_28;
  v13 = *(_QWORD *)(v30 + 8 * v14);
  if (v13)
    goto LABEL_18;
  v14 = v9 + 2;
  if (v9 + 2 >= v31)
    goto LABEL_28;
  v13 = *(_QWORD *)(v30 + 8 * v14);
  if (v13)
  {
LABEL_18:
    v9 = v14;
    goto LABEL_19;
  }
  v14 = v9 + 3;
  if (v9 + 3 < v31)
  {
    v13 = *(_QWORD *)(v30 + 8 * v14);
    if (!v13)
    {
      while (1)
      {
        v9 = v14 + 1;
        if (__OFADD__(v14, 1))
          goto LABEL_30;
        if (v9 >= v31)
          goto LABEL_28;
        v13 = *(_QWORD *)(v30 + 8 * v9);
        ++v14;
        if (v13)
          goto LABEL_19;
      }
    }
    goto LABEL_18;
  }
LABEL_28:
  sub_10000FF50();
  sub_100126848(v0[7], v0[8], 0);
  EnsembleHIDController.clearActivityNotificationMask()();
}

void sub_100125938()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  _QWORD *v14;
  char v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unint64_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  __int128 v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD v101[6];
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _BYTE v105[32];

  sub_10002626C();
  v3 = v2;
  v4 = 0x6472616F6279656BLL;
  v94 = sub_10000E440();
  v93 = *(_QWORD *)(v94 - 8);
  sub_1000262EC();
  __chkstk_darwin(v5);
  sub_10000E5DC();
  sub_100141414(v6);
  sub_10012B270(1);
  if ((v7 & 1) != 0)
  {
    v9 = _swiftEmptyArrayStorage;
    goto LABEL_5;
  }
  sub_1001412A4();
  v9 = v8;
  v10 = v8[2];
  v1 = v10 + 1;
  if (v10 >= v8[3] >> 1)
    goto LABEL_69;
  while (1)
  {
    v9[2] = v1;
    v11 = &v9[2 * v10];
    v11[4] = v4;
    v11[5] = 0xE800000000000000;
LABEL_5:
    sub_10012B270(0);
    if ((v12 & 1) == 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
      {
        sub_1000776AC();
        v9 = v73;
      }
      v13 = v9[2];
      v1 = v13 + 1;
      if (v13 >= v9[3] >> 1)
      {
        sub_100141080();
        v9 = v74;
      }
      v9[2] = v1;
      sub_100141164((uint64_t)&v9[2 * v13]);
    }
    sub_10012B270(1);
    v14 = _swiftEmptyArrayStorage;
    if ((v15 & 1) == 0)
    {
      sub_1001412A4();
      v14 = v16;
      v17 = v16[2];
      v1 = v17 + 1;
      if (v17 >= v16[3] >> 1)
      {
        sub_100141180();
        v14 = v75;
      }
      v14[2] = v1;
      v18 = &v14[2 * v17];
      v18[4] = v4;
      v18[5] = 0xE800000000000000;
    }
    v19 = sub_10012DFA8();
    v95 = v9;
    v84 = v3;
    if (v19)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
      {
        sub_100141180();
        v14 = v76;
      }
      v20 = v14[2];
      if (v20 >= v14[3] >> 1)
      {
        sub_100141180();
        v14 = v77;
      }
      v14[2] = v20 + 1;
      v96 = v14;
      sub_100141164((uint64_t)&v14[2 * v20]);
    }
    else
    {
      v96 = v14;
    }
    v21 = v0[21] >> 62;
    v22 = v0[19];
    v97 = v0;
    v3 = HIBYTE(v22);
    if (!(_DWORD)v21)
    {
      sub_10014133C();
      v1 = *(_QWORD *)(v31 + 176);
      v87 = v32;
      v85 = v33;
      v82 = v34;
      v80 = v35;
      v78 = v36;
      v91 = (id)v1;
      v37 = sub_100140E24(0x20676E6974696177);
      UUID.init(uuid:)(v37, v78, v80, v82, v85, v87);
      sub_100141378();
      sub_100140F18();
      sub_1001018A0();
      sub_1000602C0();
      v3 = v38;
      sub_10000E420();
      sub_100141250();
      sub_10000E568();
      sub_1000F02A0();
      sub_100141114();

      LODWORD(v91) = v1 != 0;
      v30 = (uint64_t *)v105;
      goto LABEL_26;
    }
    if ((_DWORD)v21 == 1)
    {
      v23 = sub_100140E24(0x6C6720636967616DLL);
      UUID.init(uuid:)(v23, v24, v25, v26, v27, v28);
      sub_100141378();
      sub_100140F18();
      sub_1001018A0();
      sub_1000602C0();
      v3 = v29;
      sub_10000E420();
      sub_100141250();
      sub_10000E568();
      sub_1000F02A0();
      sub_100141114();
      v92 = 1;
      v30 = &v104;
LABEL_26:
      *((_DWORD *)v30 - 64) = 1;
      goto LABEL_28;
    }
    v94 = 0;
    v93 = 0;
    v92 = 0;
    LODWORD(v91) = 0;
LABEL_28:
    v10 = (unint64_t)v97;
    sub_10000B2F8((uint64_t)(v97 + 33), (uint64_t)v105, 0);
    v39 = v95;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100057E2C();
    v90 = v40;
    sub_10000E420();
    v89 = *(_QWORD *)(v10 + 472);
    v88 = *(_QWORD *)(v10 + 480);
    v86 = *(_BYTE *)(v10 + 488);
    sub_10000B2F8(v10 + 512, (uint64_t)&v103, 0);
    v4 = *(_QWORD *)(v10 + 512);
    v41 = *(_QWORD *)(v4 + 16);
    if (!v41)
      break;
    v101[0] = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_100043360();
    sub_1000588A8();
    v0 = (_QWORD *)v101[0];
    v42 = sub_100071A78(v4);
    if ((v42 & 0x8000000000000000) == 0)
    {
      v44 = v42;
      if (v42 < 1 << *(_BYTE *)(v4 + 32))
      {
        v45 = v43;
        v46 = v4 + 64;
        while (1)
        {
          v10 = 1 << v44;
          if ((*(_QWORD *)(v46 + 8 * (v44 >> 6)) & (1 << v44)) == 0)
            break;
          if (v45 != *(_DWORD *)(v4 + 36))
            goto LABEL_64;
          if (*(_BYTE *)(*(_QWORD *)(v4 + 48) + v44))
          {
            if (*(_BYTE *)(*(_QWORD *)(v4 + 48) + v44) == 1)
            {
              v47 = 0xE800000000000000;
              v48 = 0x7375636F4679656BLL;
            }
            else
            {
              v47 = 0xEA00000000006472;
              v48 = 0x616F626574736170;
            }
          }
          else
          {
            v47 = 0xE700000000000000;
            v48 = 0x7265746E696F70;
          }
          v49 = *(_OWORD *)(*(_QWORD *)(v4 + 56) + 16 * v44);
          v101[0] = v0;
          v1 = v0[2];
          v3 = v1 + 1;
          if (v1 >= v0[3] >> 1)
          {
            v83 = v46;
            v81 = v47;
            v79 = v49;
            sub_1000588A8();
            v49 = v79;
            v47 = v81;
            v46 = v83;
            v0 = (_QWORD *)v101[0];
          }
          v0[2] = v3;
          v50 = &v0[4 * v1];
          v50[4] = v48;
          v50[5] = v47;
          *((_OWORD *)v50 + 3) = v49;
          v51 = -1 << *(_BYTE *)(v4 + 32);
          if ((uint64_t)v44 >= -v51)
            goto LABEL_65;
          if ((*(_QWORD *)(v46 + 8 * (v44 >> 6)) & v10) == 0)
            goto LABEL_66;
          if (v45 != *(_DWORD *)(v4 + 36))
            goto LABEL_67;
          v10 = v46;
          v52 = _HashTable.occupiedBucket(after:)(v44, v46, ~v51);
          if (!--v41)
          {
            v39 = v95;
            sub_10000E4A0();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v10 = (unint64_t)v97;
            goto LABEL_50;
          }
          v44 = v52;
          if ((v52 & 0x8000000000000000) == 0)
          {
            v46 = v10;
            v45 = *(_DWORD *)(v4 + 36);
            if (v52 < 1 << *(_BYTE *)(v4 + 32))
              continue;
          }
          goto LABEL_68;
        }
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
      }
    }
LABEL_68:
    __break(1u);
LABEL_69:
    sub_100141080();
    v9 = v72;
  }
  sub_10000E4A0();
  v0 = _swiftEmptyArrayStorage;
LABEL_50:
  sub_10004F6CC((uint64_t)v0);
  v54 = v53;
  sub_10000B2F8(v10 + 280, (uint64_t)&v102, 0);
  sub_10013DBBC((uint64_t *)(v10 + 280), (uint64_t)v101);
  if (*(_QWORD *)(v101[0] + 16))
  {
    v55 = sub_100040544();
    sub_100124EBC(v55);
    sub_10000E568();
    sub_1001413BC();
    v57 = v56;
  }
  else
  {
    v57 = 0;
  }
  sub_100141284();
  sub_10000B2F8(v10 + 376, (uint64_t)&v100, 0);
  sub_1001413E8();
  if (*(_QWORD *)(v101[0] + 16))
  {
    v58 = sub_100040544();
    sub_100124EBC(v58);
    sub_10000E568();
    sub_1001413BC();
    v60 = v59;
  }
  else
  {
    v60 = 0;
  }
  sub_100141284();
  sub_10014133C();
  sub_10000B2F8(v61 + 328, (uint64_t)&v99, 0);
  sub_1001413E8();
  if (*(_QWORD *)(v101[0] + 16))
  {
    v62 = sub_100040544();
    sub_100124EBC(v62);
    sub_10000E568();
    sub_1001413BC();
    v64 = v63;
  }
  else
  {
    v64 = 0;
  }
  sub_100141284();
  sub_10014133C();
  v66 = (uint64_t *)(v65 + 424);
  sub_10000B2F8(v65 + 424, (uint64_t)&v98, 0);
  sub_10013DBBC(v66, (uint64_t)v101);
  if (*(_QWORD *)(v101[0] + 16))
  {
    swift_bridgeObjectRetain();
    v68 = sub_100124EBC(v67);
    sub_10000E50C();
    sub_10004F6B8(v68);
    v70 = v69;
  }
  else
  {
    v70 = 0;
  }
  sub_100141284();
  *(_QWORD *)v84 = v39;
  *(_QWORD *)(v84 + 8) = v90;
  *(_QWORD *)(v84 + 16) = v96;
  *(_BYTE *)(v84 + 24) = (_BYTE)v91;
  *(_QWORD *)(v84 + 25) = v89;
  *(_QWORD *)(v84 + 33) = v88;
  *(_BYTE *)(v84 + 41) = v86;
  *(_QWORD *)(v84 + 48) = v54;
  *(_QWORD *)(v84 + 56) = v57;
  *(_QWORD *)(v84 + 64) = v60;
  *(_QWORD *)(v84 + 72) = v64;
  *(_QWORD *)(v84 + 80) = v70;
  *(_BYTE *)(v84 + 88) = v92;
  v71 = v93;
  *(_QWORD *)(v84 + 96) = v94;
  *(_QWORD *)(v84 + 104) = v71;
  sub_10000E4E0();
}

void sub_100126194()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  unint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t);
  uint64_t v68;

  sub_10002626C();
  v65 = v3;
  v5 = v4;
  v7 = v6;
  v57 = sub_10000E440();
  v8 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  sub_1000432FC();
  sub_1000055B0((uint64_t *)&unk_1002AC150);
  sub_1000262EC();
  __chkstk_darwin(v9);
  sub_10000E5DC();
  v60 = v10;
  v11 = sub_10014118C();
  v59 = type metadata accessor for UniversalControlLink(v11);
  v63 = *(_QWORD *)(v59 - 8);
  sub_1000262EC();
  __chkstk_darwin(v12);
  sub_10000E5DC();
  v62 = v13;
  v14 = sub_10014118C();
  v15 = type metadata accessor for UniversalControlFocus(v14);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  sub_1000268CC();
  v17 = type metadata accessor for CompletionGroup();
  sub_1000088D8(v17, 32);
  v18 = sub_10002679C();
  sub_1000C4FB4(v18);
  v19 = *(_QWORD *)(v7 + 16);
  if (!v19)
  {
LABEL_18:
    v31 = (_QWORD *)sub_100140EAC();
    v33 = sub_1000C5920(v31, v32, 659);
    sub_10012B2FC((uint64_t)v33);
    sub_1000269A0();
    goto LABEL_19;
  }
  v55 = v2;
  v56 = v8;
  sub_10010192C(v5 >> 8);
  v53 = v5 >> 16;
  v52 = v5 >> 24;
  v51 = HIDWORD(v5);
  sub_100141348(v5 >> 40);
  v20 = v65;
  sub_100141414(HIBYTE(v65));
  v22 = v21 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  v23 = enum case for UniversalControlFocus.keyboard(_:);
  v64 = enum case for UniversalControlFocus.pointer(_:);
  v66 = *(_QWORD *)(v16 + 72);
  v67 = *(void (**)(uint64_t))(v16 + 16);
  swift_bridgeObjectRetain();
  v61 = v5;
  v58 = v16;
  while (1)
  {
    v24 = sub_1000FD3C8();
    v67(v24);
    v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 88))(v1, v15);
    if (v25 == v23)
    {
      if (sub_100141210())
      {
        sub_10012E974(v5, v20, 0, 1);
        sub_1001302E8(v5, v20, 1, 1);
        if (qword_1002A9840 != -1)
          swift_once(&qword_1002A9840, sub_10004A0E8);
        Agent.preventSystemActiveAppearance()();
      }
      else
      {
        sub_1001324BC();
      }
      v20 = v65;
      goto LABEL_16;
    }
    if (v25 != v64)
    {
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v1, v15);
      goto LABEL_16;
    }
    if (!sub_100141210())
    {
      v28 = sub_100131EA0(0.0, 0.0);
      sub_1001322D0(v28);
      v5 = v61;
      swift_release();
      v29 = *(_QWORD *)(v0 + 520);
      *(_QWORD *)(v0 + 520) = 0;
      v30 = *(_BYTE *)(v0 + 528);
      *(_BYTE *)(v0 + 528) = 2;
      sub_100031B90(v29, v30);
      goto LABEL_16;
    }
    sub_100148650();
    if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v60, 1, v59) == 1)
      break;
    sub_1000AB0F8(v62, v60, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v63 + 32));
    v26 = (_QWORD *)sub_100140EAC();
    v27 = sub_1000C5920(v26, 0x8000000100258650, 633);
    sub_10012732C(0.5, v62, 0, 0, 1, (uint64_t)v27);
    sub_10000B364();
    v20 = v65;
    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v62, v59);
    v5 = v61;
    v16 = v58;
LABEL_16:
    v22 += v66;
    if (!--v19)
    {
      swift_bridgeObjectRelease();
      goto LABEL_18;
    }
  }
  swift_bridgeObjectRelease();
  sub_100025A28(v60, (uint64_t *)&unk_1002AC150);
  if (qword_1002A98F0 != -1)
    swift_once(&qword_1002A98F0, sub_10012901C);
  v34 = sub_10000F6E4();
  v35 = sub_10005FE9C(v34, (uint64_t)qword_1002B2620);
  v36 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v35, v36))
  {
    v37 = (uint8_t *)sub_10000797C(12);
    v38 = sub_10000797C(32);
    v68 = v38;
    *(_DWORD *)v37 = 136446210;
    sub_10014133C();
    v40 = UUID.init(uuid:)(v39, v54, v53, v52, v51, v50);
    UUID.uuidString.getter(v40);
    (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v55, v57);
    sub_100140FE4();
    v41 = sub_1000602C0();
    v43 = v42;
    sub_10000E420();
    v44 = sub_100006FCC(v41, v43, &v68);
    v45 = sub_100026AAC(v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v45, v46, v37 + 4);
    swift_bridgeObjectRelease();
    sub_100026484((void *)&_mh_execute_header, v35, v36, "Focus Move: no link found to device=%{public}s", v37);
    sub_1000263F4(v38, v47, (uint64_t)&type metadata for Any + 8);
    sub_100007958(v38);
    sub_100007958((uint64_t)v37);
  }

  sub_10002D82C(v48, (unint64_t *)&qword_1002AAB80, NSError_ptr);
  v49 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(-6727, 0xD000000000000011, 0x80000001002587B0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Ensemble_executables/EnsembleAgent/EventController.swift", 94, 2, 628);
  Completion.callAsFunction(_:)((uint64_t)v49);

LABEL_19:
  sub_1000269A0();
  sub_10000E4E0();
}

uint64_t sub_100126848(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  os_log_type_t v4;
  char v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  unsigned __int8 v57;
  uint64_t v59[3];
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v7 = a3 & 1;
  if (qword_1002A98F0 != -1)
    swift_once(&qword_1002A98F0, sub_10012901C);
  v8 = sub_10000F6E4();
  sub_10005FE9C(v8, (uint64_t)qword_1002B2620);
  v9 = sub_10002D844();
  if (sub_100040394(v9))
  {
    v10 = (uint8_t *)sub_10000797C(2);
    *(_WORD *)v10 = 0;
    sub_10005FF70((void *)&_mh_execute_header, v3, v4, "resetting event controller focus", v10);
    sub_100007958((uint64_t)v10);
  }

  sub_1001411D8(0);
  v12 = v11;
  sub_10012E48C(a1, a2, v7);
  v13 = *(_QWORD *)(v3 + 144);
  v14 = *(_QWORD *)(v3 + 152);
  v15 = *(_QWORD *)(v3 + 160);
  v16 = *(_QWORD *)(v3 + 168);
  v17 = *(void **)(v3 + 176);
  *(_QWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 160) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_OWORD *)(v3 + 168) = xmmword_10021DD40;
  sub_10013C6B8(v13, v14, v15, v16, v17);
  v60 = 2uLL;
  v61 = 0;
  v62 = 0;
  v64 = 0;
  v65 = 0;
  v63 = 0xA000000000000000;
  sub_10003D794(&v60);
  sub_1001327BC();
  v18 = sub_100141198();
  sub_100140D3C(v18, (uint64_t)v59);
  HIDReportAccumulator.resetAllValues()();
  v27 = sub_100141260(v19, v20, v21, v22, v23, v24, v25, v26, v59[0]);
  sub_100140D3C(v27, (uint64_t)v59);
  HIDReportAccumulator.resetAllValues()();
  sub_100141260(v28, v29, v30, v31, v32, v33, v34, v35, v59[0]);
  v36 = sub_10012E974(0, 0, 1, 0);
  sub_100140D3C(v36, (uint64_t)v59);
  HIDReportAccumulator.resetAllValues()();
  v45 = sub_100141260(v37, v38, v39, v40, v41, v42, v43, v44, v59[0]);
  sub_100140D3C(v45, (uint64_t)v59);
  HIDReportAccumulator.resetAllValues()();
  sub_100141260(v46, v47, v48, v49, v50, v51, v52, v53, v59[0]);
  v54 = sub_1000B219C();
  sub_1000C251C(v54);
  sub_100140DE0();
  v55 = Completion.init(file:line:)();
  sub_100141438((uint64_t)v55);
  sub_10000FF50();
  if (qword_1002A9840 != -1)
    swift_once(&qword_1002A9840, sub_10004A0E8);
  Agent.allowSystemActiveAppearance()();
  if ((v12 & 1) == 0)
    sub_10017EA88();
  v56 = *(_QWORD *)(v3 + 520);
  *(_QWORD *)(v3 + 520) = 0;
  v57 = *(_BYTE *)(v3 + 528);
  *(_BYTE *)(v3 + 528) = 2;
  return sub_100031B90(v56, v57);
}

void sub_100126A6C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7)
{
  sub_100126BCC(a1, a2, a3, a4, a5, a6, a7, (uint64_t)&unk_10028D7E0, (uint64_t)sub_10013FEE8);
  sub_10008A5D8();
}

void sub_100126A98(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7)
{
  sub_100126BCC(a1, a2, a3, a4, a5, a6, a7, (uint64_t)&unk_10028D7B8, (uint64_t)sub_10013FEE0);
  sub_10008A5D8();
}

void sub_100126AC4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7)
{
  sub_100126BCC(a1, a2, a3, a4, a5, a6, a7, (uint64_t)&unk_10028D6F0, (uint64_t)sub_10013FD78);
  sub_10008A5D8();
}

void sub_100126AF0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7)
{
  sub_100126BCC(a1, a2, a3, a4, a5, a6, a7, (uint64_t)&unk_10028D718, (uint64_t)sub_10013FD80);
  sub_10008A5D8();
}

void sub_100126B1C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7)
{
  sub_100126BCC(a1, a2, a3, a4, a5, a6, a7, (uint64_t)&unk_10028D740, (uint64_t)sub_10013FD88);
  sub_10008A5D8();
}

void sub_100126B48(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7)
{
  sub_100126BCC(a1, a2, a3, a4, a5, a6, a7, (uint64_t)&unk_10028D768, (uint64_t)sub_10013FD90);
  sub_10008A5D8();
}

void sub_100126B74(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7)
{
  sub_100126BCC(a1, a2, a3, a4, a5, a6, a7, (uint64_t)&unk_10028D790, (uint64_t)sub_10013FDE0);
  sub_10008A5D8();
}

void sub_100126BA0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7)
{
  sub_100126BCC(a1, a2, a3, a4, a5, a6, a7, (uint64_t)&unk_10028D6C8, (uint64_t)sub_10013FD70);
  sub_10008A5D8();
}

void sub_100126BCC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  _BYTE v15[24];

  if (!a2)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (((a7 | a4) & 1) != 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (a5)
  {
    v10 = sub_1000088D8(a8, 24);
    swift_weakInit(v10 + 16, a1);
    v11 = objc_allocWithZone((Class)_DiagnosticsHandler);
    v12 = sub_100026B88();
    v14 = sub_10013DA7C(v12, v13, a9, v10);
    sub_10000B2F8((uint64_t)&unk_1002B4EC8, (uint64_t)v15, 32);
    objc_setAssociatedObject(v14, &unk_1002B4EC8, v14, (void *)0x301);
    swift_endAccess(v15);

    sub_1000797D8();
    return;
  }
LABEL_7:
  __break(1u);
}

void sub_100126C94()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29[3];
  uint64_t v30;

  sub_10002626C();
  v3 = v2;
  v5 = v4;
  v6 = sub_10000E440();
  sub_1000EFF68();
  __chkstk_darwin(v7);
  sub_1000432FC();
  if (qword_1002A98F0 != -1)
    swift_once(&qword_1002A98F0, sub_10012901C);
  v8 = sub_10000F6E4();
  v9 = sub_10005FE9C(v8, (uint64_t)qword_1002B2620);
  v11 = static os_log_type_t.default.getter(v9, v10);
  if (os_log_type_enabled(v9, v11))
  {
    v27 = v11;
    v12 = (uint8_t *)sub_10000797C(12);
    v28 = sub_10000797C(32);
    v29[0] = v28;
    *(_DWORD *)v12 = 136446210;
    v13 = UUID.init(uuid:)(v5, v5 >> 8, v5 >> 16, v5 >> 24, HIDWORD(v5), v5 >> 40);
    v14 = UUID.uuidString.getter(v13);
    v16 = v15;
    (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v1, v6);
    sub_1000599D0(8, v14, v16);
    v17 = sub_1000602C0();
    v19 = v18;
    sub_10000E420();
    v20 = sub_100006FCC(v17, v19, v29);
    v21 = sub_100026AAC(v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v21, v22, v12 + 4, v12 + 12);
    sub_10000E4A0();
    sub_100026484((void *)&_mh_execute_header, v9, v27, "IDS %{public}s: Connected", v12);
    sub_1000263F4(v28, v23, (uint64_t)&type metadata for Any + 8);
    sub_100007958(v28);
    sub_100007958((uint64_t)v12);
  }

  sub_100140D3C(v24, (uint64_t)v29);
  sub_100119698((uint64_t)&v30, v5, v3);
  swift_endAccess(v29);
  v25 = sub_1000B219C();
  sub_1000C251C(v25);
  sub_100140DE0();
  v26 = Completion.init(file:line:)();
  sub_10012B2FC((uint64_t)v26);
  sub_10002645C();
  sub_1001388B8();
  sub_10000E4E0();
}

void sub_100126F28()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  void (*v19)(uint64_t);
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  unsigned __int8 v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44[3];
  uint64_t v45;
  uint64_t v46;

  sub_10002626C();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v6 = sub_1001412BC();
  sub_1000262EC();
  __chkstk_darwin(v7);
  sub_10002641C();
  v10 = v9 - v8;
  sub_10000E440();
  sub_1000262EC();
  __chkstk_darwin(v11);
  sub_100026500();
  if (qword_1002A98F0 != -1)
    swift_once(&qword_1002A98F0, sub_10012901C);
  v12 = HIWORD(v3);
  v13 = sub_10000F6E4();
  v14 = sub_10005FE9C(v13, (uint64_t)qword_1002B2620);
  v16 = static os_log_type_t.default.getter(v14, v15);
  if (sub_1000B2384(v14))
  {
    v17 = (uint8_t *)sub_10000797C(12);
    v42 = sub_10000797C(32);
    v44[0] = v42;
    *(_DWORD *)v17 = 136446210;
    sub_100141348((uint64_t)(v17 + 4));
    UUID.init(uuid:)(v5, v5 >> 8, v5 >> 16, v5 >> 24, HIDWORD(v5), v5 >> 40);
    sub_10008A5F4();
    v43 = v6;
    v18 = sub_1001411C0();
    v19(v18);
    sub_100140FE4();
    v20 = sub_1000602C0();
    v22 = v21;
    sub_10000E420();
    v45 = sub_100006FCC(v20, v22, v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v41);
    v23 = v22;
    v6 = v43;
    swift_bridgeObjectRelease(v23);
    sub_100026484((void *)&_mh_execute_header, v14, v16, "IDS %{public}s: Disconnected", v17);
    sub_1000263F4(v42, v24, (uint64_t)&type metadata for Any + 8);
    sub_100007958(v42);
    v25 = (uint64_t)v17;
    v12 = HIWORD(v3);
    sub_100007958(v25);
  }

  sub_100140D3C(v26, (uint64_t)v44);
  sub_10019ACB4(v5, v3, (uint64_t)&v45);
  swift_endAccess(v44);
  *(_QWORD *)v10 = v5;
  *(_WORD *)(v10 + 8) = v3;
  *(_BYTE *)(v10 + 10) = BYTE2(v3);
  *(_BYTE *)(v10 + 11) = BYTE3(v3);
  *(_BYTE *)(v10 + 12) = BYTE4(v3);
  *(_BYTE *)(v10 + 13) = BYTE5(v3);
  *(_BYTE *)(v10 + 14) = v12;
  *(_BYTE *)(v10 + 15) = HIBYTE(v3);
  swift_storeEnumTagMultiPayload(v10, v6, 3);
  v27 = sub_1001340E0(v10);
  sub_100022AD8(v27, v28);
  sub_1000255F0(v10, type metadata accessor for EventController.Event);
  v29 = *(_QWORD *)(v1 + 216);
  sub_1001327BC();
  v30 = 3;
  v31 = &byte_100280FB8;
  do
  {
    v33 = *v31++;
    v32 = v33;
    v34 = sub_1001411D8(v33);
    if ((v36 & 1) == 0 && !static UniversalControlUUID.compare(lhs:rhs:)(v34, v35, v5, v3))
    {
      sub_10012E974(0, 0, 1, v32);
      if (!(_DWORD)v32)
      {
        if (!v29)
          sub_10017EA88();
        v37 = *(_QWORD *)(v1 + 520);
        *(_QWORD *)(v1 + 520) = 0;
        v38 = *(_BYTE *)(v1 + 528);
        *(_BYTE *)(v1 + 528) = 2;
        sub_100031B90(v37, v38);
      }
    }
    --v30;
  }
  while (v30);
  v39 = sub_1000B219C();
  sub_1000C251C(v39);
  sub_100140DE0();
  v40 = Completion.init(file:line:)();
  sub_100140FF4((uint64_t)v40);
  sub_1000269A0();
  sub_1001388B8();
  sub_10000E4E0();
}

void sub_10012732C(double a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  uint64_t v50;
  os_log_type_t v51;
  _BOOL4 v52;
  uint64_t v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(uint64_t);
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  char v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  void (*v136)(uint64_t, uint64_t, uint64_t);
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;

  v143 = a6;
  v142 = a5;
  v140 = a3;
  v141 = a4;
  v10 = sub_100141420();
  v11 = type metadata accessor for UniversalControlLink(v10);
  v12 = *(_QWORD *)(v11 - 8);
  v147 = v11;
  v148 = v12;
  __chkstk_darwin(v11);
  v139 = v13;
  v144 = (char *)&v115 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10014118C();
  v131 = type metadata accessor for OSSignpostID(v14);
  v130 = *(_QWORD *)(v131 - 8);
  sub_1000262EC();
  __chkstk_darwin(v15);
  sub_10000E5DC();
  v137 = v16;
  sub_1000055B0(&qword_1002B1CD0);
  sub_1000262EC();
  __chkstk_darwin(v17);
  sub_10000E5DC();
  v133 = v18;
  v19 = sub_10014118C();
  v20 = type metadata accessor for OSSignposter(v19);
  v135 = *(_QWORD *)(v20 - 8);
  v136 = (void (*)(uint64_t, uint64_t, uint64_t))v20;
  sub_1000262EC();
  __chkstk_darwin(v21);
  sub_10000E5DC();
  v134 = v22;
  v23 = sub_10014118C();
  v132 = type metadata accessor for SignpostInterval(v23);
  v138 = *(_QWORD *)(v132 - 8);
  v24 = *(_QWORD *)(v138 + 64);
  v25 = __chkstk_darwin(v132);
  __chkstk_darwin(v25);
  sub_10014128C();
  __chkstk_darwin(v26);
  v28 = (char *)&v115 - v27;
  sub_1000055B0((uint64_t *)&unk_1002AC150);
  sub_1000262EC();
  __chkstk_darwin(v29);
  sub_10002641C();
  v32 = v31 - v30;
  v33 = type metadata accessor for UniversalControlLink.Endpoint(0);
  v34 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  sub_100065E48();
  v145 = v6;
  v36 = UniversalControlLink.endpoint2.getter(v35);
  v37 = UniversalControlLink.Endpoint.device.getter(v36);
  v38 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
  v40 = v39;
  v41 = v8;
  v42 = v37;
  v38(v41, v33);
  v43 = v146;
  v44 = sub_100124CD4(v42, v40);
  if (!v43)
  {
    v45 = v44;
    v122 = v32;
    v123 = v7;
    v124 = v42;
    v125 = v40;
    v126 = v24;
    v128 = (uint64_t)&v115 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
    v146 = 0;
    v46 = v147;
    v129 = v28;
    if (qword_1002A98F0 != -1)
      swift_once(&qword_1002A98F0, sub_10012901C);
    v47 = sub_10000F6E4();
    sub_100006FB4(v47, (uint64_t)qword_1002B2620);
    v48 = sub_1000404AC(v45);
    v49 = Logger.logObject.getter(v48);
    v51 = static os_log_type_t.default.getter(v49, v50);
    v52 = os_log_type_enabled(v49, v51);
    v53 = v149;
    v127 = v45;
    if (v52)
    {
      v54 = (uint8_t *)sub_10000797C(12);
      v55 = v45;
      v56 = sub_10000797C(32);
      v150 = v56;
      *(_DWORD *)v54 = 136446210;
      v57 = sub_100111930();
      v59 = sub_100006FCC(v57, v58, &v150);
      v60 = sub_100026AAC(v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v60, v61, v54 + 4, v54 + 12);
      swift_release_n(v55, 2);
      sub_10000E568();
      _os_log_impl((void *)&_mh_execute_header, v49, v51, "IDS %{public}s: Move Pointer", v54, 0xCu);
      swift_arrayDestroy(v56, 1, (char *)&type metadata for Any + 8);
      sub_100007958(v56);
      v62 = (uint64_t)v54;
      v53 = v149;
      sub_100007958(v62);

    }
    else
    {

      swift_release_n(v45, 2);
    }
    v63 = (uint64_t)v136;
    v65 = v133;
    v64 = v134;
    v66 = v122;
    v136 = *(void (**)(uint64_t, uint64_t, uint64_t))(v148 + 16);
    v136(v122, v145, v46);
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v66, 0, 1, v46);
    v67 = v132;
    if ((*(_BYTE *)(v53 + 488) & 1) != 0)
    {
      LOBYTE(v68) = *(_BYTE *)(v53 + 56);
      LOBYTE(v69) = *(_BYTE *)(v53 + 57);
      LOBYTE(v70) = *(_BYTE *)(v53 + 58);
      LOBYTE(v71) = *(_BYTE *)(v53 + 59);
      LOBYTE(v72) = *(_BYTE *)(v53 + 60);
      LOBYTE(v73) = *(_BYTE *)(v53 + 61);
      LOBYTE(v74) = *(_BYTE *)(v53 + 62);
      v75 = *(unsigned __int8 *)(v53 + 63);
    }
    else
    {
      v68 = *(_QWORD *)(v53 + 472);
      v69 = v68 >> 8;
      v70 = v68 >> 16;
      v71 = v68 >> 24;
      v72 = HIDWORD(v68);
      v73 = v68 >> 40;
      v74 = HIWORD(v68);
      v75 = HIBYTE(v68);
    }
    v76 = v135;
    v77 = sub_1000E5424(v66, v68 | (unint64_t)(unsigned __int16)(v69 << 8) | ((unint64_t)v70 << 16) & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)v71 << 24) | ((unint64_t)v72 << 32) | ((unint64_t)v73 << 40) | ((unint64_t)v74 << 48) | (v75 << 56), a1);
    v134 = v78;
    v135 = v77;
    v79 = v128;
    if (qword_1002A98A0 != -1)
      swift_once(&qword_1002A98A0, sub_1000C3010);
    v80 = sub_100006FB4(v63, (uint64_t)qword_1002B6F70);
    v81 = v123;
    sub_10003D65C(v123, v80, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v76 + 16));
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v81, 0, 1, v63);
    v82 = v81 + *(int *)(v67 + 20);
    *(_QWORD *)v82 = 0;
    *(_QWORD *)(v82 + 8) = 0;
    *(_WORD *)(v82 + 16) = 256;
    v83 = *(int *)(v67 + 24);
    *(_QWORD *)(v81 + v83) = 0;
    sub_10005FAFC(v81, v65, &qword_1002B1CD0);
    if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v65, 1, v63) == 1)
    {
      sub_100025A28(v65, &qword_1002B1CD0);
    }
    else
    {
      v84 = sub_10003D65C(v64, v65, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v76 + 32));
      v85 = v63;
      *(_QWORD *)v82 = "target_begin";
      *(_QWORD *)(v82 + 8) = 12;
      *(_WORD *)(v82 + 16) = 2;
      v86 = OSSignposter.logHandle.getter(v84);
      OSSignpostID.init(log:)(v86);
      sub_10013C1A4();
      v88 = v87;
      v89 = sub_1001411C0();
      v90(v89);
      (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v64, v85);
      swift_release();
      *(_QWORD *)(v81 + v83) = v88;
    }
    v91 = (uint64_t)v129;
    v92 = v125;
    v137 = HIBYTE(v125);
    v132 = v125 >> 40;
    v133 = HIWORD(v125);
    v131 = HIDWORD(v125);
    sub_10010192C(v125 >> 24);
    v123 = v92 >> 16;
    v122 = v92 >> 8;
    v93 = v124;
    v121 = HIBYTE(v124);
    v120 = HIWORD(v124);
    v119 = v124 >> 40;
    v118 = HIDWORD(v124);
    sub_100141414(v124 >> 24);
    v116 = v93 >> 16;
    v115 = v93 >> 8;
    sub_10005F3FC(v81, v91, type metadata accessor for SignpostInterval);
    sub_10005F428(v91, v79, type metadata accessor for SignpostInterval);
    v136((uint64_t)v144, v145, v147);
    v94 = *(unsigned __int8 *)(v138 + 80);
    v95 = (v94 + 16) & ~v94;
    v96 = (v126 + v95 + 7) & 0xFFFFFFFFFFFFFFF8;
    v97 = (v96 + 15) & 0xFFFFFFFFFFFFFFF8;
    v98 = *(unsigned __int8 *)(v148 + 80);
    v99 = (v98 + v97 + 8) & ~v98;
    v100 = (v139 + v99 + 7) & 0xFFFFFFFFFFFFFFF8;
    v101 = (v100 + 15) & 0xFFFFFFFFFFFFFFF8;
    v102 = swift_allocObject(&unk_10028D2B8, v101 + 41, v94 | v98 | 7);
    sub_10005F3FC(v128, v102 + v95, type metadata accessor for SignpostInterval);
    v104 = v143;
    v103 = v144;
    *(_QWORD *)(v102 + v96) = v143;
    *(_QWORD *)(v102 + v97) = v149;
    (*(void (**)(uint64_t, char *, uint64_t))(v148 + 32))(v102 + v99, v103, v147);
    *(double *)(v102 + v100) = a1;
    v105 = v102 + v101;
    *(_QWORD *)v105 = v127;
    *(_BYTE *)(v105 + 8) = v93;
    *(_BYTE *)(v105 + 9) = v115;
    *(_BYTE *)(v105 + 10) = v116;
    *(_BYTE *)(v105 + 11) = v117;
    *(_BYTE *)(v105 + 12) = v118;
    *(_BYTE *)(v105 + 13) = v119;
    *(_BYTE *)(v105 + 14) = v120;
    *(_BYTE *)(v105 + 15) = v121;
    *(_BYTE *)(v105 + 16) = v92;
    *(_BYTE *)(v105 + 17) = v122;
    *(_BYTE *)(v105 + 18) = v123;
    *(_BYTE *)(v105 + 19) = v130;
    *(_BYTE *)(v105 + 20) = v131;
    *(_BYTE *)(v105 + 21) = v132;
    *(_BYTE *)(v105 + 22) = v133;
    *(_BYTE *)(v105 + 23) = v137;
    v106 = v141;
    *(_QWORD *)(v105 + 24) = v140;
    *(_QWORD *)(v105 + 32) = v106;
    *(_BYTE *)(v105 + 40) = v142 & 1;
    v107 = sub_1000B219C();
    sub_1000C251C(v107);
    sub_100060054();
    swift_retain(v104);
    sub_1000269EC();
    v108 = sub_100140EAC();
    sub_1001413F4(v108, v109, 550, v110);
    v112 = v134;
    v111 = v135;
    sub_10002517C(v135, v134);
    HIDReport.storage.getter(v111, v112);
    sub_1001413D0();
    sub_1000FD3C8();
    sub_100128DA4();
    v113 = sub_1000FD3C8();
    sub_100022AEC(v113, v114);
    swift_release();
    sub_1001413D0();
    swift_release();
    sub_1000255F0((uint64_t)v129, type metadata accessor for SignpostInterval);
  }
}

void sub_100127C78()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(*(_QWORD *)(v0 + 112) + 32))
  {
    EnsembleHIDController.assertVirtualMouseButtonDown()();
  }
  else
  {
    v1 = type metadata accessor for AnyCancellable(0);
    sub_10004113C(v1);
    AnyCancellable.init(_:)(CGSize.init(_:), 0);
  }
  sub_1000050D4();
}

void sub_100127CC4(char a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;

  v3 = a3 >> 62;
  if ((a1 & 7) != 0)
    __asm { BR              X13 }
  __asm { BR              X12 }
}

uint64_t sub_100127FE8@<X0>(int a1@<W8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *(_QWORD *)(v3 + 16);
  if ((unint64_t)(v4 - 0x1000000000000000) >> 61 != 7)
  {
    __break(1u);
    JUMPOUT(0x100128004);
  }
  if (__OFADD__(8 * v4, v2))
  {
    __break(1u);
    JUMPOUT(0x1001280A0);
  }
  return ((uint64_t (*)(void))((char *)&loc_100127E64 + dword_100128144[a1]))();
}

void sub_100128154(char a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;

  v3 = a3 >> 62;
  if ((a1 & 7) != 0)
    __asm { BR              X10 }
  __asm { BR              X10 }
}

void sub_100128714(char a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;

  v3 = a3 >> 62;
  if ((a1 & 7) != 0)
    __asm { BR              X10 }
  __asm { BR              X10 }
}

double sub_100128D40(char a1, uint64_t a2, unint64_t a3)
{
  unsigned __int16 v3;
  unsigned int v4;
  double v5;

  sub_100128154(a1, a2, a3);
  v4 = v3;
  v5 = (double)(unsigned __int16)static UInt32.logicalMinimum.getter();
  return ((double)v4 - v5) / ((double)(unsigned __int16)static UInt16.logicalMaximum.getter() - v5);
}

uint64_t sub_100128D90()
{
  return sub_100128DA4();
}

uint64_t sub_100128DA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;

  sub_1000F3FA4();
  v2 = v1;
  v3 = v0;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v13 = (_QWORD *)sub_1000088D8(v12, 56);
  v13[2] = v5;
  v13[3] = v3;
  v13[4] = v7;
  v13[5] = v11;
  v13[6] = v9;
  v14 = sub_1000B219C();
  sub_1000C251C(v14);
  sub_1000404AC(v5);
  sub_10002679C();
  sub_1000088D0();
  sub_10002517C(v11, v9);
  v15 = (unint64_t)Completion.init(file:line:body:)(0xD000000000000061, 0x80000001002579F0, 870, v2, (uint64_t)v13);
  sub_1001158BC(0, 0, 1, v15 | 0x2000000000000000);
  sub_10002645C();
  return swift_release();
}

uint64_t sub_100128E7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  _BYTE v8[24];

  sub_10000B2F8(v1 + 104, (uint64_t)v8, 32);
  v3 = *(_QWORD *)(v1 + 104);
  if (*(_QWORD *)(v3 + 16) && (v4 = sub_100013328(a1), (v5 & 1) != 0))
  {
    v6 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v4);
    sub_10002D790();
  }
  else
  {
    v6 = 0;
  }
  swift_endAccess(v8);
  return v6;
}

void sub_100128EE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  if (a1)
  {
    v4 = a1;
    swift_errorRetain(a1);
    Completion.callAsFunction(_:)(v4);
    sub_100140F00(v4);
  }
  else
  {
    v5 = *(_QWORD *)(a3 + 88);
    if (v5 >> 62 == 2 && (v6 = v5 & 0x3FFFFFFFFFFFFFFFLL, (a1 = sub_100128E7C(a4)) != 0))
    {
      v7 = a1;
      swift_retain(v6);
      sub_100114F44();
      sub_1000A63BC();
      sub_10000B364();
      sub_100140EE8(v7);
    }
    else
    {
      sub_10002D82C(a1, (unint64_t *)&qword_1002AAB80, NSError_ptr);
      v8 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(-6753, 0x6E6E6F4320746F4ELL, 0xED00006465746365, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Ensemble_executables/EnsembleAgent/P2PPeerCoordinator.swift", 97, 2, 880);
      Completion.callAsFunction(_:)((uint64_t)v8);

    }
  }
}

uint64_t sub_10012901C()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10000897C(v0, qword_1002B2620);
  sub_100006FB4(v0, (uint64_t)qword_1002B2620);
  return Logger.init(subsystem:category:)(0xD00000000000001ALL, 0x8000000100251980, 1414420037, 0xE400000000000000);
}

void sub_100129088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  char v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  char v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD v129[3];
  _QWORD v130[3];
  uint64_t v131;
  __int128 v132;
  uint64_t v133;

  sub_10002626C();
  a19 = v25;
  a20 = v26;
  v27 = v24;
  v126 = v28;
  v30 = v29;
  v32 = v31;
  v93 = v33;
  v124 = v34;
  v36 = v35;
  v38 = v37;
  v40 = v39;
  v41 = v31 >> 8;
  v42 = v31 >> 16;
  v111 = v31 >> 24;
  sub_100141348(HIDWORD(v31));
  v113 = v43 >> 40;
  v114 = HIWORD(v43);
  v44 = a21;
  v122 = a21;
  v123 = a22;
  v125 = a24;
  sub_100141414(a23);
  v110 = HIBYTE(v45);
  v115 = v46 >> 8;
  sub_10010192C(v46 >> 16);
  v94 = *(_QWORD *)v24;
  v117 = v47 >> 24;
  v118 = HIDWORD(v47);
  v119 = v47 >> 40;
  v120 = HIWORD(v47);
  v121 = HIBYTE(v47);
  v109 = type metadata accessor for UniversalControlDiagnoseCategory(0);
  v107 = *(_QWORD *)(v109 - 8);
  sub_1000262EC();
  __chkstk_darwin(v48);
  sub_10000E5DC();
  v105 = v49;
  v98 = sub_10000F6E4();
  v97 = *(_QWORD *)(v98 - 8);
  __chkstk_darwin(v98);
  v95 = v50;
  v96 = (uint64_t)&v93 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v24 + 144) = 0;
  *(_QWORD *)(v24 + 152) = 0;
  *(_QWORD *)(v24 + 160) = 0;
  *(_QWORD *)(v24 + 168) = 0x8000000000000000;
  *(_QWORD *)(v24 + 176) = 0;
  *(_QWORD *)(v24 + 184) = 0;
  *(_QWORD *)(v24 + 192) = &_swiftEmptySetSingleton;
  *(_OWORD *)(v24 + 200) = 0u;
  *(_OWORD *)(v24 + 216) = 0u;
  *(_OWORD *)(v24 + 232) = 0u;
  *(_OWORD *)(v24 + 248) = 0u;
  *(_QWORD *)(v24 + 264) = &_swiftEmptySetSingleton;
  *(_QWORD *)(v24 + 272) = &_swiftEmptySetSingleton;
  *(_QWORD *)(v24 + 472) = 0;
  *(_QWORD *)(v24 + 480) = 0;
  *(_BYTE *)(v24 + 488) = 1;
  *(_QWORD *)(v24 + 497) = 0;
  *(_QWORD *)(v24 + 489) = 0;
  *(_BYTE *)(v24 + 505) = 1;
  v51 = sub_10013FAE4();
  *(_QWORD *)(v24 + 512) = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for EventController.TargetKey, &type metadata for UniversalControlDeviceID, v51);
  *(_QWORD *)(v24 + 520) = 0;
  *(_BYTE *)(v24 + 528) = 2;
  *(_QWORD *)(v24 + 536) = 0;
  *(_QWORD *)(v24 + 16) = v40;
  *(_QWORD *)(v24 + 24) = v38;
  *(_QWORD *)(v24 + 32) = v36;
  v52 = v124;
  *(_QWORD *)(v27 + 112) = v44;
  v53 = v93;
  *(_QWORD *)(v27 + 40) = v52;
  *(_QWORD *)(v27 + 48) = v53;
  v101 = v32;
  *(_BYTE *)(v27 + 56) = v32;
  v99 = v41;
  *(_BYTE *)(v27 + 57) = v41;
  v100 = v42;
  *(_BYTE *)(v27 + 58) = v42;
  *(_BYTE *)(v27 + 59) = v111;
  *(_BYTE *)(v27 + 60) = v112;
  *(_BYTE *)(v27 + 61) = v113;
  *(_BYTE *)(v27 + 62) = v114;
  *(_BYTE *)(v27 + 63) = v110;
  v102 = v30;
  *(_BYTE *)(v27 + 64) = v30;
  *(_BYTE *)(v27 + 65) = v115;
  *(_BYTE *)(v27 + 66) = v116;
  *(_BYTE *)(v27 + 67) = v117;
  *(_BYTE *)(v27 + 68) = v118;
  *(_BYTE *)(v27 + 69) = v119;
  *(_BYTE *)(v27 + 70) = v120;
  *(_BYTE *)(v27 + 71) = v121;
  sub_10005FAFC(v126, v27 + 72, (uint64_t *)&unk_1002ABD50);
  v54 = v103;
  *(_QWORD *)(v27 + 120) = v123;
  *(_QWORD *)(v27 + 128) = v54;
  *(_QWORD *)(v27 + 136) = v125;
  v104 = v40;
  swift_retain();
  v106 = v38;
  sub_10002679C();
  v108 = v36;
  swift_retain();
  sub_1000088D0();
  swift_retain();
  sub_1000269EC();
  sub_100060054();
  v103 = v54;
  sub_100026AE4();
  sub_100141240();
  *(__n128 *)(v27 + 280) = sub_100141330();
  *(_OWORD *)(v27 + 296) = v55;
  *(_OWORD *)(v27 + 312) = v132;
  sub_100141240();
  *(__n128 *)(v27 + 328) = sub_100141330();
  *(_OWORD *)(v27 + 344) = v56;
  *(_OWORD *)(v27 + 360) = v132;
  sub_100141240();
  *(__n128 *)(v27 + 376) = sub_100141330();
  *(_OWORD *)(v27 + 392) = v57;
  *(_OWORD *)(v27 + 408) = v132;
  sub_100141240();
  *(__n128 *)(v27 + 424) = sub_100141330();
  *(_OWORD *)(v27 + 440) = v58;
  *(_OWORD *)(v27 + 456) = v132;
  v59 = v94;
  v131 = v94;
  *(_QWORD *)&v132 = &off_10028D1F0;
  v130[0] = v27;
  sub_100140D3C(v60, (uint64_t)v129);
  sub_10002D790();
  sub_100021C68((_QWORD *)(v27 + 336), v130);
  HIDReportAccumulator.flush(to:)(v27 + 336);
  sub_100140F7C();
  v131 = v59;
  *(_QWORD *)&v132 = &off_10028D1F0;
  v130[0] = v27;
  sub_100026478(v27 + 280, (uint64_t)v129);
  sub_10002D790();
  sub_1001410E0();
  HIDReportAccumulator.flush(to:)(v27 + 288);
  sub_100140F7C();
  v61 = type metadata accessor for EnsembleHIDController();
  v131 = v61;
  *(_QWORD *)&v132 = &protocol witness table for EnsembleHIDController;
  v130[0] = v53;
  sub_100026478(v27 + 376, (uint64_t)v129);
  sub_1000269EC();
  sub_1001410E0();
  HIDReportAccumulator.flush(to:)(v27 + 384);
  sub_100140F7C();
  v131 = v61;
  *(_QWORD *)&v132 = &protocol witness table for EnsembleHIDController;
  v130[0] = v53;
  sub_100026478(v27 + 424, (uint64_t)v129);
  sub_1000269EC();
  sub_1001410E0();
  HIDReportAccumulator.flush(to:)(v27 + 432);
  sub_100140F7C();
  if (qword_1002A98F0 != -1)
    swift_once(&qword_1002A98F0, sub_10012901C);
  v62 = sub_100006FB4(v98, (uint64_t)qword_1002B2620);
  v63 = v97;
  v64 = v96;
  sub_1000AB0F8(v96, v62, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v97 + 16));
  v65 = *(unsigned __int8 *)(v63 + 80);
  v66 = (v65 + 16) & ~v65;
  v67 = v66 + v95;
  v68 = (v66 + v95 + 23) & 0xFFFFFFFFFFFFFFF8;
  v69 = swift_allocObject(&unk_10028D5B0, v68 + 8, v65 | 7);
  sub_1000AB0F8(v69 + v66, v64, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v63 + 32));
  v70 = (_BYTE *)(v69 + v67);
  *v70 = v101;
  v70[1] = v99;
  v70[2] = v100;
  v70[3] = v111;
  v70[4] = v112;
  v70[5] = v113;
  v70[6] = v114;
  v70[7] = v110;
  v70[8] = v102;
  v70[9] = v115;
  v70[10] = v116;
  v70[11] = v117;
  v70[12] = v118;
  v70[13] = v119;
  v70[14] = v120;
  v70[15] = v121;
  *(_QWORD *)(v69 + v68) = v27;
  sub_10000B2F8(v53 + 40, (uint64_t)v130, 1);
  *(_QWORD *)(v53 + 40) = sub_10013FB6C;
  *(_QWORD *)(v53 + 48) = v69;
  sub_10002D790();
  v71 = sub_1000269A0();
  sub_10002D82C(v71, (unint64_t *)&qword_1002AA660, OS_dispatch_queue_ptr);
  v72 = sub_10002D790();
  v73 = (void *)static OS_dispatch_queue.main.getter(v72);
  v74 = sub_1000088D8((uint64_t)&unk_10028D5D8, 32);
  *(_QWORD *)(v74 + 24) = &off_10028D298;
  swift_unknownObjectWeakInit(v74 + 16, v27);
  sub_10002679C();
  v75 = sub_1000C8454(v73, (uint64_t)sub_10002D0D4, v74);
  v77 = v76;
  sub_1000269A0();
  sub_10002645C();
  v129[0] = v75;
  v78 = type metadata accessor for DiscoveryController();
  sub_10013FC28((unint64_t *)&unk_1002B2960, (uint64_t (*)(uint64_t))type metadata accessor for DiscoveryController);
  sub_100026AE4();
  dispatch thunk of ObservableObject.objectWillChange.getter(v78);
  v127 = v128;
  v79 = sub_1000088D8((uint64_t)&unk_10028D600, 24);
  *(_QWORD *)(v79 + 16) = v77;
  v80 = type metadata accessor for ObservableObjectPublisher(0);
  swift_unknownObjectRetain_n(v77, 2);
  Publisher<>.sink(receiveValue:)(sub_10005E230, v79, v80, &protocol witness table for ObservableObjectPublisher);
  swift_release();
  sub_100141310();
  sub_100026AEC();
  sub_10005FF18();
  sub_1000A34D4();
  sub_10000B348();
  sub_10013FC28(&qword_1002AC1B0, (uint64_t (*)(uint64_t))type metadata accessor for EnsembleHIDController);
  sub_100026AE4();
  sub_100141100();
  v127 = v128;
  v81 = sub_1000088D8((uint64_t)&unk_10028D628, 24);
  sub_1001410CC(v81);
  sub_1001410B8((uint64_t)sub_10005FDC0);
  sub_10005FF18();
  sub_100141310();
  sub_100026AEC();
  sub_10000B364();
  sub_1000A34D4();
  sub_10000B348();
  type metadata accessor for SyncController(0);
  sub_10013FC28((unint64_t *)&qword_1002B2970, type metadata accessor for SyncController);
  sub_100026AE4();
  sub_100141100();
  v127 = v128;
  v82 = sub_1000088D8((uint64_t)&unk_10028D650, 24);
  sub_1001410CC(v82);
  sub_1001410B8((uint64_t)sub_10005FDC0);
  sub_10005FF18();
  sub_100141310();
  sub_100026AEC();
  sub_10000B364();
  sub_1000A34D4();
  sub_10000B348();
  v83 = v129[0];
  swift_getObjectType(v77);
  swift_unknownObjectRetain(v77);
  sub_100043360();
  OS_dispatch_source_data_add.add(data:)(1uLL);
  sub_1000A34D4();
  swift_bridgeObjectRelease();
  v84 = *(_QWORD *)(v27 + 200);
  v85 = *(_QWORD *)(v27 + 208);
  *(_QWORD *)(v27 + 200) = v83;
  *(_QWORD *)(v27 + 208) = v77;
  swift_unknownObjectRetain(v77);
  sub_100043360();
  sub_10002D108(v84, v85);
  v86 = v107;
  v87 = v105;
  v88 = v109;
  v89 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v107 + 104))(v105, enum case for UniversalControlDiagnoseCategory.event(_:), v109);
  v90 = UniversalControlDiagnoseCategory.code.getter(v89);
  sub_100126BCC(v27, (uint64_t)"com.apple.universalcontrol", 26, 2, v90, v91, v92, (uint64_t)&unk_10028D678, (uint64_t)sub_10013FC5C);
  sub_1001412E8((uint64_t)&v132);
  sub_1001412E8((uint64_t)&v133);
  sub_1001412E8((uint64_t)&a10);
  swift_release();
  sub_10000FF50();
  swift_release();
  swift_release();

  swift_release();
  sub_100025A28(v126, (uint64_t *)&unk_1002ABD50);
  (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v87, v88);
  sub_1000A34D4();
  sub_10000E420();
  sub_10000E4E0();
}

double sub_100129A00(unint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t *a5, unint64_t a6, unint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  __int16 v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int16 v37;
  __int16 v38;
  unsigned __int8 v39;
  unsigned __int8 *v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  uint64_t v46;
  os_log_type_t v47;
  unint64_t v48;
  uint8_t *v49;
  uint8_t *v50;
  __int16 v51;
  __int16 v52;
  _BOOL4 v53;
  uint64_t v54;
  uint64_t v55;
  double result;
  _BOOL4 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _BOOL4 v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __n128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  uint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  size_t v103;
  _BOOL4 v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  NSObject *v111;
  os_log_type_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  __int16 v118;
  __int16 v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char v162[8];

  v137 = a8;
  v8 = a7;
  v9 = a6;
  v14 = a6 >> 8;
  v151 = a6 >> 16;
  v152 = a1;
  v150 = a6 >> 24;
  v149 = HIDWORD(a6);
  v148 = a6 >> 40;
  v147 = HIWORD(a6);
  v146 = HIBYTE(a6);
  v145 = a7 >> 8;
  v144 = a7 >> 16;
  v143 = a7 >> 24;
  v142 = HIDWORD(a7);
  v141 = a7 >> 40;
  v140 = HIWORD(a7);
  v139 = HIBYTE(a7);
  v138 = type metadata accessor for HIDUniversalSenderID(0);
  v15 = __chkstk_darwin(v138);
  v129 = (uint64_t)&v122 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v134 = (uint64_t)&v122 - v18;
  __chkstk_darwin(v17);
  v20 = (uint64_t)&v122 - v19;
  sub_10002517C(a3, a4);
  sub_10002517C(a3, a4);
  sub_10002517C(a3, a4);
  v21 = sub_10002517C(a3, a4);
  v130 = a5;
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.debug.getter();
  v24 = os_log_type_enabled(v22, v23);
  v136 = a2;
  v135 = v14;
  if (v24)
  {
    v25 = swift_slowAlloc(29, -1);
    v131 = v20;
    v26 = v25;
    v27 = swift_slowAlloc(32, -1);
    v160 = v27;
    *(_DWORD *)v26 = 134218754;
    v161 = v152;
    v132 = v8;
    v133 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v161, v162, v26 + 4);
    *(_WORD *)(v26 + 12) = 512;
    LOWORD(v161) = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v161, (char *)&v161 + 2, v26 + 14);
    *(_WORD *)(v26 + 16) = 256;
    sub_10002517C(a3, a4);
    sub_10013DE98(a3, a4);
    v29 = v28;
    sub_100022AEC(a3, a4);
    sub_100022AEC(a3, a4);
    if ((v29 & 0x100) != 0)
      v30 = 0;
    else
      v30 = v29;
    LOBYTE(v161) = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v161, (char *)&v161 + 1, v26 + 18);
    sub_100022AEC(a3, a4);
    *(_WORD *)(v26 + 19) = 2080;
    sub_10002517C(a3, a4);
    HIDReport.description.getter(a3, a4);
    v32 = v31;
    v34 = v33;
    sub_100022AEC(a3, a4);
    v35 = v32;
    v8 = v132;
    v161 = sub_100006FCC(v35, v34, &v160);
    v9 = v133;
    v14 = v135;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v161, v162, v26 + 21);
    swift_bridgeObjectRelease();
    sub_100022AEC(a3, a4);
    sub_100022AEC(a3, a4);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "%llx: %hx %hhx %s", (uint8_t *)v26, 0x1Du);
    swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    v36 = v26;
    v20 = v131;
    swift_slowDealloc(v36, -1, -1);

  }
  else
  {
    sub_100022AEC(a3, a4);

    sub_100022AEC(a3, a4);
    sub_100022AEC(a3, a4);
    sub_100022AEC(a3, a4);
  }
  v153 = *(unsigned __int16 *)EnsembleUsage.synthetic.unsafeMutableAddressor();
  UUID.init(uuid:)(v9, v14, v151, v150, v149, v148);
  *(_QWORD *)(v20 + *(int *)(v138 + 20)) = v152;
  sub_10002517C(a3, a4);
  sub_10013DE98(a3, a4);
  v38 = v37;
  sub_100022AEC(a3, a4);
  if ((v38 & 0x100) != 0)
    v39 = 0;
  else
    v39 = v38;
  v40 = (unsigned __int8 *)ReportID.keyboard.unsafeMutableAddressor();
  v41 = v137;
  if (*v40 != v39)
  {
    sub_10012B270(0);
    if ((v42 & 1) != 0)
    {
      sub_10012AA50(a3, a4);
      goto LABEL_26;
    }
  }
  v43 = v136;
  if (v153 != (unsigned __int16)v136 && (*(_BYTE *)(v41 + 488) & 1) == 0)
  {
    v44 = static UniversalControlUUID.compare(lhs:rhs:)(*(_QWORD *)(v41 + 472), *(_QWORD *)(v41 + 480));
    if (v44)
    {
      v133 = v9;
      v45 = Logger.logObject.getter(v44);
      v47 = static os_log_type_t.default.getter(v45, v46);
      if (os_log_type_enabled(v45, v47))
      {
        v48 = v8;
        v49 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v49 = 0;
        _os_log_impl((void *)&_mh_execute_header, v45, v47, "Non-synthentic, local HID event received. Focus should reset globally", v49, 2u);
        v50 = v49;
        v8 = v48;
        v41 = v137;
        swift_slowDealloc(v50, -1, -1);
      }

      sub_10012550C();
      v9 = v133;
    }
  }
  sub_10002517C(a3, a4);
  sub_10013DE98(a3, a4);
  v52 = v51;
  sub_100022AEC(a3, a4);
  if ((v52 & 0x100) != 0)
    LOBYTE(v52) = 0;
  if (*(unsigned __int8 *)ReportID.consumer.unsafeMutableAddressor() == v52
    || *(unsigned __int8 *)ReportID.appleVendorKeyboard.unsafeMutableAddressor() == v52
    || *(unsigned __int8 *)ReportID.appleVendorTopCase.unsafeMutableAddressor() == v52)
  {
    v53 = v153 == (unsigned __int16)v43;
    v54 = v41 + 280;
LABEL_24:
    swift_beginAccess(v54, &v160, 33, 0);
    HIDReportAccumulator.dispatchReport(_:from:accumulateOnly:)(a3, a4, v20, v53);
    swift_endAccess(&v160);
LABEL_26:
    v55 = v20;
    goto LABEL_27;
  }
  if (*v40 != v52)
  {
    if (*(unsigned __int8 *)ReportID.pointer.unsafeMutableAddressor() == v52)
    {
      swift_beginAccess(v41 + 280, &v161, 0, 0);
      sub_10013DBBC((uint64_t *)(v41 + 280), (uint64_t)&v160);
      HIDReportAccumulator.allKeyboardModifiers()();
      v64 = v63;
      sub_10013DBF8(&v160);
      v65 = HIDReport.storage.getter(a3, a4);
      PointerReport.init(_:)(v65, v66);
      if (v68 >> 60 == 15)
        goto LABEL_89;
      v69 = v153 == (unsigned __int16)v43;
      v158 = v67;
      v159 = v68;
      PointerReport.modifiers.setter(v64);
      v70 = v158;
      v71 = v159;
      swift_beginAccess(v41 + 328, &v160, 33, 0);
      sub_10002517C(v70, v71);
      HIDReportAccumulator.dispatchReport(_:from:accumulateOnly:)(v70, v71, v20, v69);
      swift_endAccess(&v160);
      sub_100022AEC(v70, v71);
      sub_100022AEC(v70, v71);
      goto LABEL_26;
    }
    if (*(unsigned __int8 *)ReportID.button.unsafeMutableAddressor() != v52
      && *(unsigned __int8 *)ReportID.scroll.unsafeMutableAddressor() != v52
      && *(unsigned __int8 *)ReportID.digitizer.unsafeMutableAddressor() != v52
      && *(unsigned __int8 *)ReportID.dockSwipe.unsafeMutableAddressor() != v52
      && *(unsigned __int8 *)ReportID.fluidTouchGesture.unsafeMutableAddressor() != v52
      && *(unsigned __int8 *)ReportID.navigationSwipe.unsafeMutableAddressor() != v52
      && *(unsigned __int8 *)ReportID.zoomToggle.unsafeMutableAddressor() != v52
      && *(unsigned __int8 *)ReportID.scale.unsafeMutableAddressor() != v52
      && *(unsigned __int8 *)ReportID.rotation.unsafeMutableAddressor() != v52
      && *(unsigned __int8 *)ReportID.translation.unsafeMutableAddressor() != v52)
    {
LABEL_77:
      v43 = v20;
      if (qword_1002A98F0 != -1)
        goto LABEL_90;
      goto LABEL_78;
    }
    v53 = v153 == (unsigned __int16)v43;
    v54 = v41 + 328;
    goto LABEL_24;
  }
  v133 = v9;
  v132 = v8;
  v57 = v153 == (unsigned __int16)v43;
  swift_beginAccess(v41 + 280, &v161, 0, 0);
  sub_10013DBBC((uint64_t *)(v41 + 280), (uint64_t)&v160);
  HIDReportAccumulator.allKeyboardModifiers()();
  v59 = v58;
  sub_10013DBF8(&v160);
  swift_beginAccess(v41 + 280, &v160, 33, 0);
  HIDReportAccumulator.dispatchReport(_:from:accumulateOnly:)(a3, a4, v20, v57);
  swift_endAccess(&v160);
  sub_10013DBBC((uint64_t *)(v41 + 280), (uint64_t)&v160);
  HIDReportAccumulator.allKeyboardModifiers()();
  v61 = v60;
  sub_10013DBF8(&v160);
  sub_1001992FC(v59, v61);
  LOBYTE(v57) = v62;
  swift_bridgeObjectRelease();
  if (v57)
  {
    sub_1000255F0(v20, type metadata accessor for HIDUniversalSenderID);
    *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
    return result;
  }
  v72 = *(_QWORD *)(v41 + 48);
  swift_beginAccess(v72 + 144, &v160, 0, 0);
  v73 = *(_QWORD *)(v72 + 144);
  v129 = v61;
  if ((unint64_t)v73 >> 62)
  {
    if (v73 < 0)
      v121 = v73;
    else
      v121 = v73 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v74 = _CocoaArrayWrapper.endIndex.getter(v121);
  }
  else
  {
    v74 = *(_QWORD *)((v73 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  if (!v74)
  {
LABEL_62:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_26;
  }
  v152 = v73 & 0xC000000000000001;
  v130 = (uint64_t *)(v41 + 328);
  swift_beginAccess(v41 + 328, &v158, 0, 0);
  a3 = 4;
  v128 = v73;
  v131 = v20;
  v137 = v74;
  while (1)
  {
    if (v152)
    {
      a4 = specialized _ArrayBuffer._getElementSlowPath(_:)(a3 - 4, v73);
    }
    else
    {
      a4 = *(_QWORD *)(v73 + 8 * a3);
      v75 = swift_retain();
    }
    v76 = a3 - 3;
    if (__OFADD__(a3 - 4, 1))
    {
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
      goto LABEL_77;
    }
    if ((UniversalControlInputDevice.conformsToMouse.getter(v75) & 1) != 0)
      break;
    swift_release();
LABEL_61:
    ++a3;
    if (v76 == v137)
      goto LABEL_62;
  }
  v77 = UniversalControlInputDevice.id.getter();
  v78 = v134;
  UUID.init(uuid:)(v133, v135, v151, v150, v149, v148);
  *(_QWORD *)(v78 + *(int *)(v138 + 20)) = v77;
  v79 = *v130;
  if (*(_QWORD *)(*v130 + 16))
  {
    swift_bridgeObjectRetain();
    v80 = sub_1001A90EC(v134);
    if ((v81 & 1) != 0)
    {
      v82 = (uint64_t *)(*(_QWORD *)(v79 + 56) + 80 * v80);
      v83 = v82[1];
      v125 = *v82;
      v124 = v83;
      v126 = v82[2];
      v84 = v126;
      v85 = v82[4];
      v123 = v82[3];
      v86 = v82[5];
      v87 = v82[6];
      v88 = v82[8];
      v127 = v82[7];
      v89 = v82[9];
      sub_10002517C(v125, v83);
      v90 = v84;
      v91 = v123;
      sub_10002517C(v90, v123);
      sub_10002517C(v85, v86);
      sub_10002517C(v87, v127);
      sub_10002517C(v88, v89);
      swift_bridgeObjectRelease();
      sub_10002517C(v88, v89);
      sub_100022AEC(v125, v124);
      sub_100022AEC(v126, v91);
      sub_100022AEC(v85, v86);
      sub_100022AEC(v87, v127);
      sub_100022AEC(v88, v89);
LABEL_60:
      v104 = v153 == (unsigned __int16)v136;
      v156 = v88;
      v157 = v89;
      swift_bridgeObjectRetain();
      PointerReport.modifiers.setter(v105);
      v106 = v156;
      v107 = v157;
      swift_beginAccess(v130, &v154, 33, 0);
      sub_10002517C(v106, v107);
      v108 = v134;
      HIDReportAccumulator.dispatchReport(_:from:accumulateOnly:)(v106, v107, v134, v104);
      swift_endAccess(&v154);
      sub_100022AEC(v106, v107);
      swift_release();
      sub_100022AEC(v106, v107);
      sub_1000255F0(v108, type metadata accessor for HIDUniversalSenderID);
      v20 = v131;
      v73 = v128;
      goto LABEL_61;
    }
    swift_bridgeObjectRelease();
  }
  v92 = *(unsigned __int8 *)ReportID.pointer.unsafeMutableAddressor();
  v43 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v43, *(unsigned int *)(v43 + 48), *(unsigned __int16 *)(v43 + 52));
  v20 = __DataStorage.init(length:)(17);
  if ((swift_isUniquelyReferenced_nonNull_native(v20) & 1) == 0)
  {
    v93 = __DataStorage._bytes.getter();
    if (v93)
    {
      v94 = v93;
      v95 = __DataStorage._offset.getter();
      if (__OFSUB__(0, v95))
        goto LABEL_76;
      v96 = v94 - v95;
    }
    else
    {
      v96 = 0;
    }
    swift_allocObject(v43, *(unsigned int *)(v43 + 48), *(unsigned __int16 *)(v43 + 52));
    v97 = __DataStorage.init(bytes:length:copy:deallocator:offset:)(v96, 17, 1, 0, 0, 0);
    swift_release();
    v20 = v97;
  }
  v98 = __DataStorage._bytes.getter();
  if (v98)
  {
    v99 = v98;
    v100 = __DataStorage._offset.getter();
    v101 = -v100;
    if (__OFSUB__(0, v100))
      goto LABEL_75;
    v102 = __DataStorage._length.getter();
    if (v102 >= 17)
      v103 = 17;
    else
      v103 = v102;
    bzero((void *)(v99 + v101), v103);
    v154 = 0x1100000000;
    v155 = v20 | 0x4000000000000000;
    Data._Representation.subscript.setter(v92, 0);
    v88 = v154;
    v89 = v155;
    goto LABEL_60;
  }
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  swift_once(&qword_1002A98F0, sub_10012901C);
LABEL_78:
  v109 = type metadata accessor for Logger(0);
  sub_100006FB4(v109, (uint64_t)qword_1002B2620);
  sub_10005F428(v43, v129, type metadata accessor for HIDUniversalSenderID);
  sub_10002517C(a3, a4);
  v110 = sub_10002517C(a3, a4);
  v111 = Logger.logObject.getter(v110);
  v112 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v111, v112))
  {
    v113 = swift_slowAlloc(15, -1);
    v114 = swift_slowAlloc(32, -1);
    v160 = v114;
    *(_DWORD *)v113 = 136446466;
    v115 = v129;
    v116 = HIDUniversalSenderID.description.getter(v114);
    v161 = sub_100006FCC(v116, v117, &v160);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v161, v162, v113 + 4);
    swift_bridgeObjectRelease();
    sub_1000255F0(v115, type metadata accessor for HIDUniversalSenderID);
    *(_WORD *)(v113 + 12) = 256;
    sub_10002517C(a3, a4);
    sub_10013DE98(a3, a4);
    v119 = v118;
    sub_100022AEC(a3, a4);
    sub_100022AEC(a3, a4);
    if ((v119 & 0x100) != 0)
      v120 = 0;
    else
      v120 = v119;
    LOBYTE(v161) = v120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v161, (char *)&v161 + 1, v113 + 14);
    sub_100022AEC(a3, a4);
    _os_log_impl((void *)&_mh_execute_header, v111, v112, "%{public}s: unexpected report ID 0x%hhx", (uint8_t *)v113, 0xFu);
    swift_arrayDestroy(v114, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v114, -1, -1);
    swift_slowDealloc(v113, -1, -1);

    v55 = v43;
  }
  else
  {
    sub_100022AEC(a3, a4);

    sub_100022AEC(a3, a4);
    sub_1000255F0(v129, type metadata accessor for HIDUniversalSenderID);
    v55 = v43;
  }
LABEL_27:
  sub_1000255F0(v55, type metadata accessor for HIDUniversalSenderID);
  return result;
}

void sub_10012AA50(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int16 v6;
  __int16 v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  char v15;
  char v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t inited;
  char v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  os_log_type_t v33;
  uint64_t v34;
  char v35;
  _BYTE v36[40];
  _BYTE v37[24];
  _QWORD v38[6];
  _BYTE v39[24];

  v3 = v2;
  sub_10002517C(a1, a2);
  sub_10013DE98(a1, a2);
  v7 = v6;
  sub_100022AEC(a1, a2);
  if ((v7 & 0x100) != 0)
    LOBYTE(v7) = 0;
  if (*(unsigned __int8 *)ReportID.pointer.unsafeMutableAddressor() == v7)
  {
    v8 = HIDReport.storage.getter(a1, a2);
    PointerReport.init(_:)(v8, v9);
    if (v11 >> 60 != 15)
    {
      v12 = v10;
      v13 = v11;
      sub_100127CC4(88, v10, v11);
      if (v14 && (sub_10012B270(0), (v15 & 1) != 0) && (sub_10012B270(1), (v16 & 1) == 0))
      {
        v17 = PointerReport.modifiers.getter(v12, v13);
        swift_beginAccess(v3 + 280, v39, 0, 0);
        sub_10013DBBC((uint64_t *)(v3 + 280), (uint64_t)v38);
        HIDReportAccumulator.allKeyboardModifiers()();
        v19 = v18;
        sub_10013DBF8(v38);
        sub_1000681C4(v19, (uint64_t)v17);
        v21 = v20;
        swift_beginAccess(v3 + 376, v37, 0, 0);
        sub_10013DBBC((uint64_t *)(v3 + 376), (uint64_t)v38);
        HIDReportAccumulator.allKeyboardModifiers()();
        v23 = v22;
        sub_10013DBF8(v38);
        sub_1000681C4(v23, v21);
        v25 = v24;
        v26 = sub_1000055B0((uint64_t *)&unk_1002B2880);
        inited = swift_initStackObject(v26, v36);
        *(_OWORD *)(inited + 16) = xmmword_10021DE60;
        *(_BYTE *)(inited + 32) = *(_BYTE *)KeyboardUsage.leftCommand.unsafeMutableAddressor();
        *(_BYTE *)(inited + 33) = *(_BYTE *)KeyboardUsage.rightCommand.unsafeMutableAddressor();
        v28 = sub_10013DC2C(inited, v25);
        swift_bridgeObjectRelease();
        swift_setDeallocating(inited);
        if (qword_1002A98F0 != -1)
          swift_once(&qword_1002A98F0, sub_10012901C);
        v29 = type metadata accessor for Logger(0);
        sub_100006FB4(v29, (uint64_t)qword_1002B2620);
        v30 = sub_10002517C(v12, v13);
        v31 = Logger.logObject.getter(v30);
        v33 = static os_log_type_t.default.getter(v31, v32);
        if (os_log_type_enabled(v31, v33))
        {
          v34 = swift_slowAlloc(11, -1);
          *(_DWORD *)v34 = 16777728;
          sub_100127CC4(88, v12, v13);
          LOBYTE(v38[0]) = v35;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v38, (char *)v38 + 1, v34 + 4);
          sub_100022AD8(v12, v13);
          *(_WORD *)(v34 + 5) = 1026;
          LODWORD(v38[0]) = (v28 & 1) == 0;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v38, (char *)v38 + 4, v34 + 7);
          _os_log_impl((void *)&_mh_execute_header, v31, v33, "local button click, processing keyfocus change button=%hhx cmd=%{BOOL,public}d", (uint8_t *)v34, 0xBu);
          swift_slowDealloc(v34, -1, -1);
        }
        else
        {
          sub_100022AD8(v12, v13);
        }

        if ((v28 & 1) != 0)
          sub_1001324BC();
        sub_100022AD8(v12, v13);
      }
      else
      {
        sub_100022AD8(v12, v13);
      }
    }
  }
}

void sub_10012ADA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  char v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  os_log_type_t v48;
  uint64_t v49;
  uint64_t v50;

  sub_10002626C();
  v1 = v0;
  v49 = sub_10000E440();
  __chkstk_darwin(v49);
  sub_1000268CC();
  v2 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(*(_QWORD *)(v1 + 24) + 120);
  *(_QWORD *)(v1 + 192) = v3;
  swift_bridgeObjectRetain_n(v3, 2);
  v4 = sub_100191B08(v3, v2);
  swift_bridgeObjectRelease();
  v5 = sub_1001411D8(0);
  v7 = 0;
  if ((v8 & 1) == 0)
  {
    v9 = v5;
    sub_10018F420(v5, v6, (uint64_t)v4);
    if ((v10 & 1) != 0)
    {
      if (qword_1002A98F0 != -1)
        swift_once(&qword_1002A98F0, sub_10012901C);
      v11 = sub_10000F6E4();
      v12 = sub_10005FE9C(v11, (uint64_t)qword_1002B2620);
      v14 = static os_log_type_t.default.getter(v12, v13);
      if (sub_1000B2384(v12))
      {
        v48 = v14;
        v15 = (uint8_t *)sub_10000797C(12);
        v47 = sub_10000797C(32);
        v50 = v47;
        *(_DWORD *)v15 = 136446210;
        UUID.init(uuid:)(v9, v9 >> 8, v9 >> 16, v9 >> 24, HIDWORD(v9), v9 >> 40);
        v16 = sub_100043344();
        v18 = v17;
        sub_100141274();
        sub_1000599D0(8, v16, v18);
        v19 = sub_1000602C0();
        v21 = v20;
        sub_10000E420();
        v22 = sub_100006FCC(v19, v21, &v50);
        v23 = sub_100026AAC(v22);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v23, v24, v15 + 4);
        swift_bridgeObjectRelease();
        sub_100026484((void *)&_mh_execute_header, v12, v48, "%{public}s: Pointer target is another device which has transitioned to unavailable", v15);
        v7 = 1;
        sub_1000263F4(v47, v25, (uint64_t)&type metadata for Any + 8);
        sub_100007958(v47);
        sub_100007958((uint64_t)v15);

      }
      else
      {

        v7 = 1;
      }
    }
    else
    {
      v7 = 0;
    }
  }
  v26 = sub_1001411D8(1);
  if ((v28 & 1) != 0)
  {
    sub_10000E50C();
  }
  else
  {
    v29 = v26;
    sub_10018F420(v26, v27, (uint64_t)v4);
    v31 = v30;
    sub_10000E50C();
    if ((v31 & 1) != 0)
    {
      if (qword_1002A98F0 != -1)
        swift_once(&qword_1002A98F0, sub_10012901C);
      v32 = sub_10000F6E4();
      v33 = sub_10005FE9C(v32, (uint64_t)qword_1002B2620);
      v35 = static os_log_type_t.default.getter(v33, v34);
      if (sub_1000B2384(v33))
      {
        v36 = (uint8_t *)sub_10000797C(12);
        v37 = sub_10000797C(32);
        v50 = v37;
        *(_DWORD *)v36 = 136446210;
        UUID.init(uuid:)(v29, v29 >> 8, v29 >> 16, v29 >> 24, HIDWORD(v29), v29 >> 40);
        sub_100043344();
        sub_100141274();
        sub_100140FE4();
        sub_1000602C0();
        sub_10000E420();
        v38 = sub_100141158();
        v41 = sub_100006FCC(v38, v39, v40);
        v42 = sub_100026AAC(v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v42, v43, v36 + 4);
        sub_10000E568();
        sub_100026484((void *)&_mh_execute_header, v33, v35, "%{public}s: Key focus target is another device which has transitioned to unavailable", v36);
        sub_1000263F4(v37, v44, (uint64_t)&type metadata for Any + 8);
        sub_100007958(v37);
        sub_100007958((uint64_t)v36);
      }

      goto LABEL_18;
    }
  }
  if (v7)
LABEL_18:
    sub_100126848(0, 0, 1);
  v45 = sub_1000B219C();
  sub_1000C251C(v45);
  sub_100140DE0();
  v46 = Completion.init(file:line:)();
  sub_100140FF4((uint64_t)v46);
  sub_1000269A0();
  sub_10000E4E0();
}

uint64_t sub_10012B270(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  _BYTE v8[24];

  swift_beginAccess(v1 + 512, v8, 32, 0);
  v3 = *(_QWORD *)(v1 + 512);
  if (*(_QWORD *)(v3 + 16) && (v4 = sub_1001A8CE4(a1), (v5 & 1) != 0))
    v6 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 16 * v4);
  else
    v6 = 0;
  swift_endAccess(v8);
  return v6;
}

void sub_10012B2FC(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  char v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  unsigned __int8 *v51;
  char v52;
  unsigned int v53;
  unsigned __int8 *v54;
  char v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t *v67;
  __int128 v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  int64_t v76;
  uint64_t v77;
  unint64_t v78;
  int64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  uint64_t v84;
  os_log_type_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  NSObject *v104;
  uint64_t v105;
  os_log_type_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  char v120;
  char v121;
  uint64_t v122;
  uint64_t v123;
  _BOOL4 v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  NSObject *v137;
  uint64_t v138;
  os_log_type_t v139;
  uint8_t *v140;
  _QWORD *v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  _QWORD *v146;
  __n128 v147;
  unint64_t v148;
  unint64_t v149;
  BOOL v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  _QWORD *v163;
  unint64_t v164;
  int64_t v165;
  int64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  int64_t v173;
  unint64_t v174;
  int64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  NSObject *v179;
  uint64_t v180;
  os_log_type_t v181;
  uint64_t v182;
  _QWORD *v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  int64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  int64_t v210;
  unint64_t v211;
  int64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  NSObject *v216;
  uint64_t v217;
  os_log_type_t v218;
  uint64_t v219;
  _QWORD *v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  unint64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  _QWORD *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  __int128 v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  unint64_t v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  unsigned __int8 *v257;
  unint64_t v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  NSObject *v267;
  uint64_t v268;
  os_log_type_t v269;
  int v270;
  _BOOL4 v271;
  uint64_t v272;
  uint64_t v273;
  char *v274;
  unint64_t v275;
  uint64_t v276;
  uint64_t v277;
  unint64_t v278;
  unint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  unint64_t v285;
  uint64_t v286;
  unint64_t v287;
  _QWORD *v288;
  uint64_t v289;
  uint64_t v290;
  unint64_t v291;
  uint64_t v292;
  unint64_t v293;
  uint64_t v294;
  char v295;
  char v296;
  uint64_t v297;
  _QWORD *v298;
  char isUniquelyReferenced_nonNull_native;
  char v300;
  char v301;
  _QWORD *v302;
  char v303;
  uint64_t v304;
  uint64_t v305;
  unsigned __int8 v306;
  char v307;
  char v308;
  char v309;
  char v310;
  char v311;
  char v312;
  char v313;
  char v314;
  char v315;
  char v316;
  char v317;
  char v318;
  char v319;
  char v320;
  char v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  unint64_t v329;
  unsigned __int8 *v330;
  uint64_t *v331;
  unint64_t v332;
  _QWORD *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  char *v338;
  unint64_t v339;
  char *v340;
  unint64_t v341;
  int64_t v342;
  uint64_t v343;
  __n128 v344;
  uint64_t v345;
  __int128 v346;
  unint64_t v347;
  uint64_t v348;
  char *v349;
  uint64_t v350;
  uint64_t v351;
  int64_t v352;
  _QWORD *v353;
  uint64_t v354;
  unint64_t v355;
  unint64_t v356;
  unint64_t v357;
  unint64_t v358;
  unint64_t v359;
  unint64_t v360;
  unint64_t v361;
  unint64_t v362;
  int64_t v363;
  unint64_t v364;
  __int128 v365;
  unint64_t v366;
  unint64_t v367;
  unint64_t v368;
  uint64_t v369;
  unint64_t v370;
  unint64_t v371;
  uint64_t v372;
  char v373[16];
  uint64_t v374;
  uint64_t v375;
  char v376[8];
  char v377[8];
  _QWORD *v378;
  char v379[8];
  char v380[8];

  v325 = a1;
  v351 = type metadata accessor for UUID(0);
  v350 = *(_QWORD *)(v351 - 8);
  __chkstk_darwin(v351);
  v349 = (char *)&v322 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v372 = type metadata accessor for HIDUniversalSenderID(0);
  v3 = *(_QWORD *)(v372 - 8);
  v4 = __chkstk_darwin(v372);
  v369 = (uint64_t)&v322 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v322 - v7;
  v9 = __chkstk_darwin(v6);
  v343 = (uint64_t)&v322 - v10;
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v322 - v12;
  v14 = __chkstk_darwin(v11);
  v348 = (uint64_t)&v322 - v15;
  v16 = __chkstk_darwin(v14);
  v345 = (uint64_t)&v322 - v17;
  v18 = __chkstk_darwin(v16);
  v338 = (char *)&v322 - v19;
  v20 = __chkstk_darwin(v18);
  v370 = (unint64_t)&v322 - v21;
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v322 - v23;
  v25 = __chkstk_darwin(v22);
  v364 = (unint64_t)&v322 - v26;
  v27 = __chkstk_darwin(v25);
  v368 = (unint64_t)&v322 - v28;
  v29 = __chkstk_darwin(v27);
  v31 = (uint64_t)&v322 - v30;
  v32 = __chkstk_darwin(v29);
  v366 = (unint64_t)&v322 - v33;
  __chkstk_darwin(v32);
  v35 = (uint64_t)&v322 - v34;
  v347 = v1[56];
  *(_QWORD *)&v346 = v1[57];
  v367 = v1[58];
  *(_QWORD *)&v365 = v1[59];
  v363 = v1[60];
  v362 = v1[61];
  v361 = v1[62];
  v360 = v1[63];
  v344.n128_u64[0] = v1[64];
  v342 = v1[65];
  v359 = v1[66];
  v358 = v1[67];
  v357 = v1[68];
  v356 = v1[69];
  v355 = v1[70];
  v352 = v1[71];
  v330 = v1;
  sub_10012B270(1);
  v36 = 0;
  if ((v37 & 1) == 0)
  {
    v38 = static ReportID.appleVendorKeyboard.getter();
    HIDEventType.maskValue.getter(v38);
    v36 = HIDEventType.maskValue.getter(v38);
  }
  sub_10012B270(0);
  if ((v39 & 1) == 0)
  {
    v40 = static ReportID.dockSwipe.getter();
    v41 = static ReportID.translation.getter();
    v42 = static ReportID.button.getter();
    HIDEventType.maskValue.getter(v40);
    v43 = HIDEventType.maskValue.getter(v40);
    if ((HIDEventType.maskValue.getter(v41) & v43) == 0)
      v43 |= HIDEventType.maskValue.getter(v41);
    if ((HIDEventType.maskValue.getter(v42) & v43) == 0)
      v43 |= HIDEventType.maskValue.getter(v42);
    v36 |= v43;
  }
  v354 = v3;
  sub_10012B270(1);
  if ((v44 & 1) != 0)
  {
    v46 = 0;
  }
  else
  {
    v45 = static ReportID.appleVendorKeyboard.getter();
    HIDEventType.maskValue.getter(v45);
    v46 = HIDEventType.maskValue.getter(v45);
  }
  if (sub_10012DFA8())
  {
    v47 = static ReportID.dockSwipe.getter();
    v48 = static ReportID.translation.getter();
    v49 = static ReportID.button.getter();
    HIDEventType.maskValue.getter(v47);
    v50 = HIDEventType.maskValue.getter(v47);
    if ((HIDEventType.maskValue.getter(v48) & v50) == 0)
      v50 |= HIDEventType.maskValue.getter(v48);
    if ((HIDEventType.maskValue.getter(v49) & v50) == 0)
      v50 |= HIDEventType.maskValue.getter(v49);
    v46 |= v50;
  }
  v51 = v330;
  sub_10012B270(1);
  v339 = v347 | ((_QWORD)v346 << 8);
  v341 = v344.n128_u64[0] | (v342 << 8);
  if ((v52 & 1) != 0
    && ((v51[488] & 1) != 0
     || static UniversalControlUUID.compare(lhs:rhs:)(*((_QWORD *)v330 + 59), *((_QWORD *)v330 + 60), v339 | (v367 << 16) | ((_QWORD)v365 << 24) | (v363 << 32) | (v362 << 40) | (v361 << 48) | (v360 << 56), v341 | (v359 << 16) | (v358 << 24) | (v357 << 32) | (v356 << 40) | (v355 << 48) | (v352 << 56))))
  {
    v53 = static ReportID.appleVendorKeyboard.getter();
    HIDEventType.maskValue.getter(v53);
    v326 = HIDEventType.maskValue.getter(v53);
  }
  else
  {
    v326 = 0;
  }
  v54 = v330;
  sub_10012B270(0);
  v353 = v8;
  if ((v55 & 1) != 0
    && ((v54[488] & 1) != 0
     || static UniversalControlUUID.compare(lhs:rhs:)(*((_QWORD *)v330 + 59), *((_QWORD *)v330 + 60), v339 | (v367 << 16) | ((_QWORD)v365 << 24) | (v363 << 32) | (v362 << 40) | (v361 << 48) | (v360 << 56), v341 | (v359 << 16) | (v358 << 24) | (v357 << 32) | (v356 << 40) | (v355 << 48) | (v352 << 56))))
  {
    v56 = static ReportID.dockSwipe.getter();
    v57 = static ReportID.translation.getter();
    v58 = static ReportID.button.getter();
    HIDEventType.maskValue.getter(v56);
    v59 = HIDEventType.maskValue.getter(v56);
    if ((HIDEventType.maskValue.getter(v57) & v59) == 0)
      v59 |= HIDEventType.maskValue.getter(v57);
    if ((HIDEventType.maskValue.getter(v58) & v59) == 0)
      v59 |= HIDEventType.maskValue.getter(v58);
    v326 |= v59;
  }
  v371 = (unint64_t)v24;
  v340 = v13;
  v60 = *((_QWORD *)v330 + 6);
  swift_beginAccess(v60 + 144, v380, 0, 0);
  v337 = v60;
  v61 = *(_QWORD *)(v60 + 144);
  if ((unint64_t)v61 >> 62)
    goto LABEL_263;
  v62 = *(_QWORD *)((v61 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(*(_QWORD *)(v60 + 144));
  while (1)
  {
    v324 = v36;
    v323 = v46;
    if (!v62)
    {
      swift_bridgeObjectRelease(v61);
      v46 = (uint64_t)_swiftEmptyArrayStorage;
      goto LABEL_44;
    }
    v378 = _swiftEmptyArrayStorage;
    sub_10005873C();
    if (v62 < 0)
      break;
    v63 = 0;
    v46 = (uint64_t)v378;
    do
    {
      if ((v61 & 0xC000000000000001) != 0)
        v64 = specialized _ArrayBuffer._getElementSlowPath(_:)(v63, v61);
      else
        v64 = swift_retain(*(_QWORD *)(v61 + 8 * v63 + 32));
      v65 = UniversalControlInputDevice.serviceID.getter(v64);
      v313 = v352;
      v312 = v355;
      v311 = v356;
      v310 = v357;
      v309 = v358;
      v308 = v359;
      v307 = v342;
      v306 = v344.n128_u8[0];
      UUID.init(uuid:)(v347, v346, v367, v365, v363, v362, v361, v360);
      swift_release();
      *(_QWORD *)(v35 + *(int *)(v372 + 20)) = v65;
      v378 = (_QWORD *)v46;
      v66 = *(_QWORD *)(v46 + 16);
      if (v66 >= *(_QWORD *)(v46 + 24) >> 1)
      {
        sub_10005873C();
        v46 = (uint64_t)v378;
      }
      ++v63;
      *(_QWORD *)(v46 + 16) = v66 + 1;
      sub_10005F3FC(v35, v46+ ((*(unsigned __int8 *)(v354 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v354 + 80))+ *(_QWORD *)(v354 + 72) * v66, type metadata accessor for HIDUniversalSenderID);
    }
    while (v62 != v63);
    swift_bridgeObjectRelease(v61);
LABEL_44:
    v67 = (uint64_t *)(v330 + 280);
    swift_beginAccess(v330 + 280, v379, 0, 0);
    sub_10013DBBC(v67, (uint64_t)&v378);
    v361 = v339 | (v367 << 16) | ((_QWORD)v365 << 24) | (v363 << 32) | (v362 << 40) | (v361 << 48) | (v360 << 56);
    v360 = v341 | (v359 << 16) | (v358 << 24) | (v357 << 32) | (v356 << 40) | (v355 << 48) | (v352 << 56);
    HIDReportAccumulator.senders(for:)(v361, v360);
    sub_10013DBF8(&v378);
    sub_10019C138();
    v36 = 0;
    v70 = *(_QWORD *)(v69 + 56);
    v362 = v69 + 56;
    v367 = v69;
    v71 = 1 << *(_BYTE *)(v69 + 32);
    v72 = -1;
    if (v71 < 64)
      v72 = ~(-1 << v71);
    v73 = v72 & v70;
    v363 = (unint64_t)(v71 + 63) >> 6;
    *(_QWORD *)&v68 = 134217984;
    v365 = v68;
    v61 = (uint64_t)v353;
    v35 = v368;
    if ((v72 & v70) != 0)
    {
LABEL_47:
      v74 = __clz(__rbit64(v73));
      v73 &= v73 - 1;
      v75 = v74 | (v36 << 6);
      goto LABEL_62;
    }
    while (1)
    {
      v76 = v36 + 1;
      if (__OFADD__(v36, 1))
      {
LABEL_255:
        __break(1u);
LABEL_256:
        __break(1u);
        goto LABEL_257;
      }
      v77 = v370;
      if (v76 >= v363)
        goto LABEL_69;
      v78 = *(_QWORD *)(v362 + 8 * v76);
      ++v36;
      if (!v78)
      {
        v36 = v76 + 1;
        if (v76 + 1 >= v363)
          goto LABEL_69;
        v78 = *(_QWORD *)(v362 + 8 * v36);
        if (!v78)
        {
          v36 = v76 + 2;
          if (v76 + 2 >= v363)
            goto LABEL_69;
          v78 = *(_QWORD *)(v362 + 8 * v36);
          if (!v78)
            break;
        }
      }
LABEL_61:
      v73 = (v78 - 1) & v78;
      v75 = __clz(__rbit64(v78)) + (v36 << 6);
LABEL_62:
      v80 = v366;
      sub_10005F428(*(_QWORD *)(v367 + 48) + *(_QWORD *)(v354 + 72) * v75, v366, type metadata accessor for HIDUniversalSenderID);
      sub_10005F3FC(v80, v31, type metadata accessor for HIDUniversalSenderID);
      if (qword_1002A98F0 != -1)
        swift_once(&qword_1002A98F0, sub_10012901C);
      v81 = type metadata accessor for Logger(0);
      sub_100006FB4(v81, (uint64_t)qword_1002B2620);
      sub_10005F428(v31, v35, type metadata accessor for HIDUniversalSenderID);
      v83 = Logger.logObject.getter(v82);
      v85 = static os_log_type_t.default.getter(v83, v84);
      if (os_log_type_enabled(v83, v85))
      {
        v86 = swift_slowAlloc(12, -1);
        *(_DWORD *)v86 = v365;
        v87 = *(_QWORD *)(v368 + *(int *)(v372 + 20));
        sub_1000255F0(v368, type metadata accessor for HIDUniversalSenderID);
        *(_QWORD *)(v86 + 4) = v87;
        v61 = (uint64_t)v353;
        _os_log_impl((void *)&_mh_execute_header, v83, v85, "%llx: Removed Local Keyboard Reports", (uint8_t *)v86, 0xCu);
        v88 = v86;
        v35 = v368;
        swift_slowDealloc(v88, -1, -1);
      }
      else
      {
        sub_1000255F0(v35, type metadata accessor for HIDUniversalSenderID);
      }

      swift_beginAccess(v67, &v378, 33, 0);
      HIDReportAccumulator.removeValues(_:)(v31);
      swift_endAccess(&v378);
      sub_1000255F0(v31, type metadata accessor for HIDUniversalSenderID);
      if (v73)
        goto LABEL_47;
    }
    v79 = v76 + 3;
    if (v79 >= v363)
    {
LABEL_69:
      swift_release();
      v89 = (uint64_t *)(v330 + 328);
      swift_beginAccess(v330 + 328, v377, 0, 0);
      sub_10013DBBC(v89, (uint64_t)&v378);
      HIDReportAccumulator.senders(for:)(v361, v360);
      sub_10013DBF8(&v378);
      sub_10019C138();
      v35 = v90;
      swift_bridgeObjectRelease(v46);
      v31 = 0;
      v91 = *(_QWORD *)(v35 + 56);
      v368 = v35 + 56;
      v92 = 1 << *(_BYTE *)(v35 + 32);
      v93 = -1;
      if (v92 < 64)
        v93 = ~(-1 << v92);
      v94 = v93 & v91;
      v46 = (unint64_t)(v92 + 63) >> 6;
      v36 = (uint64_t)type metadata accessor for HIDUniversalSenderID;
      while (1)
      {
        v62 = (uint64_t)v340;
        if (v94)
        {
          v95 = __clz(__rbit64(v94));
          v94 &= v94 - 1;
          v96 = v95 | (v31 << 6);
        }
        else
        {
          v97 = v31 + 1;
          if (__OFADD__(v31, 1))
            goto LABEL_256;
          if (v97 >= v46)
          {
LABEL_94:
            swift_release();
            v46 = (uint64_t)v330;
            v111 = *((_QWORD *)v330 + 34);
            v331 = (uint64_t *)(v330 + 264);
            swift_beginAccess(v330 + 264, v376, 0, 0);
            v112 = *(_QWORD *)(v46 + 264);
            v113 = *(_QWORD *)(v46 + 272);
            *(_QWORD *)(v46 + 272) = v112;
            v327 = v111;
            swift_bridgeObjectRetain(v111);
            swift_bridgeObjectRetain(v112);
            swift_bridgeObjectRelease(v113);
            v35 = *(_QWORD *)(*(_QWORD *)(v46 + 136) + OBJC_IVAR____TtC13EnsembleAgent14SyncController_devices);
            v378 = _swiftEmptyArrayStorage;
            if ((unint64_t)v35 >> 62)
            {
              if (v35 < 0)
                v305 = v35;
              else
                v305 = v35 & 0xFFFFFFFFFFFFFF8;
              swift_retain(v46);
              swift_bridgeObjectRetain(v35);
              v114 = _CocoaArrayWrapper.endIndex.getter(v305);
            }
            else
            {
              v114 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10);
              swift_retain(v46);
              swift_bridgeObjectRetain(v35);
            }
            v36 = v369;
            v31 = (uint64_t)_swiftEmptyArrayStorage;
            if (v114)
            {
              v36 = 0;
              v31 = v35 & 0xC000000000000001;
              v61 = v35 & 0xFFFFFFFFFFFFFF8;
              while (1)
              {
                if (v31)
                {
                  v115 = specialized _ArrayBuffer._getElementSlowPath(_:)(v36, v35);
                }
                else
                {
                  if ((unint64_t)v36 >= *(_QWORD *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10))
                    goto LABEL_253;
                  v115 = *(_QWORD *)(v35 + 8 * v36 + 32);
                  swift_retain(v115);
                }
                v116 = v36 + 1;
                if (__OFADD__(v36, 1))
                  break;
                v46 = *v331;
                v117 = swift_bridgeObjectRetain(*v331);
                v118 = dispatch thunk of UniversalControlDevice.id.getter(v117);
                sub_10018F420(v118, v119, v46);
                v121 = v120;
                v122 = swift_bridgeObjectRelease(v46);
                if ((v121 & 1) != 0)
                {
                  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v122);
                  v46 = v378[2];
                  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v46);
                  v123 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v46, v115);
                  specialized ContiguousArray._endMutation()(v123);
                }
                else
                {
                  swift_release();
                }
                ++v36;
                if (v116 == v114)
                {
                  v31 = (uint64_t)v378;
                  v46 = (uint64_t)v330;
                  v36 = v369;
                  v61 = (uint64_t)v353;
                  goto LABEL_108;
                }
              }
LABEL_254:
              __break(1u);
              goto LABEL_255;
            }
LABEL_108:
            swift_release();
            swift_bridgeObjectRelease(v35);
            v124 = v31 < 0 || (v31 & 0x4000000000000000) != 0;
            if (v124)
            {
              swift_bridgeObjectRetain_n(v31, 2);
              v125 = _CocoaArrayWrapper.endIndex.getter(v31);
              swift_release();
            }
            else
            {
              v125 = *(_QWORD *)(v31 + 16);
              swift_bridgeObjectRetain(v31);
            }
            sub_100033B3C();
            v322 = v125;
            v126 = Set.init(minimumCapacity:)(v125);
            v374 = v126;
            if (v124)
            {
              v127 = swift_bridgeObjectRetain(v31);
              v128 = _CocoaArrayWrapper.endIndex.getter(v127);
              swift_release();
            }
            else
            {
              v128 = *(_QWORD *)(v31 + 16);
            }
            v335 = v128;
            if (v128)
            {
              if (v128 < 1)
                goto LABEL_273;
              v129 = 0;
              do
              {
                if ((v31 & 0xC000000000000001) != 0)
                  v130 = specialized _ArrayBuffer._getElementSlowPath(_:)(v129, v31);
                else
                  v130 = swift_retain(*(_QWORD *)(v31 + 8 * v129 + 32));
                ++v129;
                v131 = dispatch thunk of UniversalControlDevice.id.getter(v130);
                v133 = v132;
                swift_release();
                sub_100119698((uint64_t)&v378, v131, v133);
                v36 = v369;
              }
              while (v335 != v129);
              swift_release();
              v126 = v374;
            }
            else
            {
              swift_release();
            }
            v134 = sub_100198A54(v327, v126);
            swift_bridgeObjectRelease(v126);
            v334 = v31;
            if ((v134 & 1) == 0)
            {
              if (qword_1002A98F0 != -1)
                goto LABEL_274;
              goto LABEL_127;
            }
            goto LABEL_130;
          }
          v98 = *(_QWORD *)(v368 + 8 * v97);
          ++v31;
          if (!v98)
          {
            v31 = v97 + 1;
            if (v97 + 1 >= v46)
              goto LABEL_94;
            v98 = *(_QWORD *)(v368 + 8 * v31);
            if (!v98)
            {
              v31 = v97 + 2;
              if (v97 + 2 >= v46)
                goto LABEL_94;
              v98 = *(_QWORD *)(v368 + 8 * v31);
              if (!v98)
              {
                v99 = v97 + 3;
                if (v99 >= v46)
                  goto LABEL_94;
                v98 = *(_QWORD *)(v368 + 8 * v99);
                if (!v98)
                {
                  while (1)
                  {
                    v31 = v99 + 1;
                    if (__OFADD__(v99, 1))
                      goto LABEL_261;
                    if (v31 >= v46)
                      goto LABEL_94;
                    v98 = *(_QWORD *)(v368 + 8 * v31);
                    ++v99;
                    if (v98)
                      goto LABEL_87;
                  }
                }
                v31 = v99;
              }
            }
          }
LABEL_87:
          v94 = (v98 - 1) & v98;
          v96 = __clz(__rbit64(v98)) + (v31 << 6);
        }
        v100 = v364;
        sub_10005F428(*(_QWORD *)(v35 + 48) + *(_QWORD *)(v354 + 72) * v96, v364, type metadata accessor for HIDUniversalSenderID);
        v101 = v371;
        sub_10005F3FC(v100, v371, type metadata accessor for HIDUniversalSenderID);
        if (qword_1002A98F0 != -1)
          swift_once(&qword_1002A98F0, sub_10012901C);
        v102 = type metadata accessor for Logger(0);
        sub_100006FB4(v102, (uint64_t)qword_1002B2620);
        sub_10005F428(v101, v77, type metadata accessor for HIDUniversalSenderID);
        v104 = Logger.logObject.getter(v103);
        v106 = static os_log_type_t.default.getter(v104, v105);
        if (os_log_type_enabled(v104, v106))
        {
          v107 = swift_slowAlloc(12, -1);
          *(_DWORD *)v107 = v365;
          v108 = *(_QWORD *)(v370 + *(int *)(v372 + 20));
          sub_1000255F0(v370, type metadata accessor for HIDUniversalSenderID);
          *(_QWORD *)(v107 + 4) = v108;
          v77 = v370;
          _os_log_impl((void *)&_mh_execute_header, v104, v106, "%llx: Removed Local Pointing Reports", (uint8_t *)v107, 0xCu);
          v109 = v107;
          v61 = (uint64_t)v353;
          swift_slowDealloc(v109, -1, -1);
        }
        else
        {
          sub_1000255F0(v77, type metadata accessor for HIDUniversalSenderID);
        }

        swift_beginAccess(v89, &v378, 33, 0);
        v110 = v371;
        HIDReportAccumulator.removeValues(_:)(v371);
        swift_endAccess(&v378);
        sub_1000255F0(v110, type metadata accessor for HIDUniversalSenderID);
      }
    }
    v78 = *(_QWORD *)(v362 + 8 * v79);
    if (v78)
    {
      v36 = v79;
      goto LABEL_61;
    }
    while (1)
    {
      v36 = v79 + 1;
      if (__OFADD__(v79, 1))
        break;
      if (v36 >= v363)
        goto LABEL_69;
      v78 = *(_QWORD *)(v362 + 8 * v36);
      ++v79;
      if (v78)
        goto LABEL_61;
    }
LABEL_260:
    __break(1u);
LABEL_261:
    __break(1u);
LABEL_262:
    __break(1u);
LABEL_263:
    if (v61 < 0)
      v304 = v61;
    else
      v304 = v61 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v61);
    v62 = _CocoaArrayWrapper.endIndex.getter(v304);
  }
  __break(1u);
LABEL_273:
  __break(1u);
LABEL_274:
  swift_once(&qword_1002A98F0, sub_10012901C);
LABEL_127:
  v135 = type metadata accessor for Logger(0);
  sub_100006FB4(v135, (uint64_t)qword_1002B2620);
  v136 = swift_bridgeObjectRetain_n(v31, 2);
  v137 = Logger.logObject.getter(v136);
  v139 = static os_log_type_t.default.getter(v137, v138);
  if (os_log_type_enabled(v137, v139))
  {
    v140 = (uint8_t *)swift_slowAlloc(12, -1);
    v141 = (_QWORD *)swift_slowAlloc(32, -1);
    v378 = v141;
    *(_DWORD *)v140 = 136446210;
    v142 = sub_100061BC0(v31);
    v144 = v143;
    v374 = sub_100006FCC(v142, v143, (uint64_t *)&v378);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v374, &v375, v140 + 4, v140 + 12);
    swift_release_n(v334, 2);
    v145 = v144;
    v31 = v334;
    v46 = (uint64_t)v330;
    swift_bridgeObjectRelease(v145);
    _os_log_impl((void *)&_mh_execute_header, v137, v139, "Connected Devices IDS: %{public}s", v140, 0xCu);
    swift_arrayDestroy(v141, 1, (char *)&type metadata for Any + 8);
    v146 = v141;
    v36 = v369;
    swift_slowDealloc(v146, -1, -1);
    swift_slowDealloc(v140, -1, -1);

  }
  else
  {

    swift_release_n(v31, 2);
  }
LABEL_130:
  if (v335)
  {
    v329 = v31 & 0xC000000000000001;
    swift_bridgeObjectRetain(v31);
    v347 = v46 + 376;
    swift_beginAccess(v46 + 376, &v374, 0, 0);
    *(_QWORD *)&v346 = v46 + 424;
    v147 = swift_beginAccess(v46 + 424, v373, 0, 0);
    v148 = 0;
    v328 = v31 + 32;
    v31 = (uint64_t)type metadata accessor for HIDUniversalSenderID;
    v147.n128_u64[0] = 136446466;
    v344 = v147;
    v339 = (unint64_t)&type metadata for Any + 8;
    v46 = v354;
LABEL_132:
    v149 = v329;
    v35 = v334;
    sub_10013DB98(v148, v329 == 0, v334);
    if (v149)
    {
      v336 = specialized _ArrayBuffer._getElementSlowPath(_:)(v148, v35);
    }
    else
    {
      v336 = *(_QWORD *)(v328 + 8 * v148);
      swift_retain(v336);
    }
    v150 = __OFADD__(v148, 1);
    v151 = v148 + 1;
    if (!v150)
    {
      v332 = v151;
      v35 = v336;
      v152 = EnsembleHIDController.updateDevice(_:)(v336);
      v371 = dispatch thunk of UniversalControlDevice.id.getter(v152);
      v370 = v153;
      v154 = dispatch thunk of UniversalControlDevice.inputDevices.getter(v371);
      v155 = v154;
      if ((unint64_t)v154 >> 62)
      {
        if (v154 >= 0)
          v154 &= 0xFFFFFFFFFFFFFF8uLL;
        v156 = _CocoaArrayWrapper.endIndex.getter(v154);
      }
      else
      {
        v156 = *(_QWORD *)((v154 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v368 = v371 >> 8;
      v367 = v371 >> 16;
      v366 = v371 >> 24;
      *(_QWORD *)&v365 = HIDWORD(v371);
      v364 = v371 >> 40;
      v363 = HIWORD(v371);
      v362 = HIBYTE(v371);
      v361 = v370 >> 8;
      v360 = v370 >> 16;
      v359 = v370 >> 24;
      v358 = HIDWORD(v370);
      v357 = v370 >> 40;
      v356 = HIWORD(v370);
      v355 = HIBYTE(v370);
      if (!v156)
      {
        swift_bridgeObjectRelease(v155);
        v158 = _swiftEmptyArrayStorage;
        goto LABEL_149;
      }
      v378 = _swiftEmptyArrayStorage;
      sub_10005873C();
      if ((v156 & 0x8000000000000000) == 0)
      {
        v157 = 0;
        v158 = v378;
        do
        {
          if ((v155 & 0xC000000000000001) != 0)
            v159 = specialized _ArrayBuffer._getElementSlowPath(_:)(v157, v155);
          else
            v159 = swift_retain(*(_QWORD *)(v155 + 8 * v157 + 32));
          v160 = UniversalControlInputDevice.serviceID.getter(v159);
          v313 = v355;
          v312 = v356;
          v311 = v357;
          v310 = v358;
          v309 = v359;
          v308 = v360;
          v307 = v361;
          v306 = v370;
          v161 = v338;
          UUID.init(uuid:)(v371, v368, v367, v366, v365, v364, v363, v362);
          swift_release();
          v162 = (uint64_t)v161;
          *(_QWORD *)&v161[*(int *)(v372 + 20)] = v160;
          v163 = v158;
          v378 = v158;
          v164 = v158[2];
          if (v164 >= v158[3] >> 1)
          {
            sub_10005873C();
            v162 = (uint64_t)v338;
            v163 = v378;
          }
          ++v157;
          v163[2] = v164 + 1;
          v158 = v163;
          sub_10005F3FC(v162, (uint64_t)v163+ ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80))+ *(_QWORD *)(v46 + 72) * v164, (uint64_t (*)(_QWORD))v31);
          v36 = v369;
        }
        while (v156 != v157);
        swift_bridgeObjectRelease(v155);
        v61 = (uint64_t)v353;
        v62 = (uint64_t)v340;
LABEL_149:
        sub_10013DBBC((uint64_t *)v347, (uint64_t)&v378);
        HIDReportAccumulator.senders(for:)(v371, v370);
        sub_10013DBF8(&v378);
        v333 = v158;
        sub_10019C138();
        v165 = 0;
        v167 = *(_QWORD *)(v166 + 56);
        v341 = v166 + 56;
        v352 = v166;
        v168 = 1 << *(_BYTE *)(v166 + 32);
        if (v168 < 64)
          v169 = ~(-1 << v168);
        else
          v169 = -1;
        v170 = v169 & v167;
        v342 = (unint64_t)(v168 + 63) >> 6;
        v35 = v348;
        if ((v169 & v167) != 0)
        {
LABEL_153:
          v171 = __clz(__rbit64(v170));
          v170 &= v170 - 1;
          v172 = v171 | (v165 << 6);
          goto LABEL_168;
        }
        while (1)
        {
          v173 = v165 + 1;
          if (__OFADD__(v165, 1))
            break;
          if (v173 >= v342)
            goto LABEL_175;
          v174 = *(_QWORD *)(v341 + 8 * v173);
          ++v165;
          if (!v174)
          {
            v165 = v173 + 1;
            if (v173 + 1 >= v342)
              goto LABEL_175;
            v174 = *(_QWORD *)(v341 + 8 * v165);
            if (!v174)
            {
              v165 = v173 + 2;
              if (v173 + 2 >= v342)
                goto LABEL_175;
              v174 = *(_QWORD *)(v341 + 8 * v165);
              if (!v174)
              {
                v175 = v173 + 3;
                if (v175 >= v342)
                {
LABEL_175:
                  swift_release();
                  sub_10013DBBC((uint64_t *)v346, (uint64_t)&v378);
                  v35 = HIDReportAccumulator.senders(for:)(v371, v370);
                  sub_10013DBF8(&v378);
                  v200 = v333;
                  sub_10019C138();
                  v202 = v201;
                  swift_bridgeObjectRelease(v200);
                  v203 = 0;
                  v204 = *(_QWORD *)(v202 + 56);
                  v341 = v202 + 56;
                  v205 = 1 << *(_BYTE *)(v202 + 32);
                  if (v205 < 64)
                    v206 = ~(-1 << v205);
                  else
                    v206 = -1;
                  v207 = v206 & v204;
                  v342 = (unint64_t)(v205 + 63) >> 6;
                  if ((v206 & v204) != 0)
                  {
LABEL_179:
                    v208 = __clz(__rbit64(v207));
                    v207 &= v207 - 1;
                    v209 = v208 | (v203 << 6);
                    goto LABEL_194;
                  }
                  while (1)
                  {
                    v210 = v203 + 1;
                    if (__OFADD__(v203, 1))
                      goto LABEL_250;
                    if (v210 >= v342)
                      goto LABEL_201;
                    v211 = *(_QWORD *)(v341 + 8 * v210);
                    ++v203;
                    if (!v211)
                    {
                      v203 = v210 + 1;
                      if (v210 + 1 >= v342)
                        goto LABEL_201;
                      v211 = *(_QWORD *)(v341 + 8 * v203);
                      if (!v211)
                      {
                        v203 = v210 + 2;
                        if (v210 + 2 >= v342)
                          goto LABEL_201;
                        v211 = *(_QWORD *)(v341 + 8 * v203);
                        if (!v211)
                        {
                          v212 = v210 + 3;
                          if (v212 >= v342)
                          {
LABEL_201:
                            swift_release();
                            swift_release();
                            v148 = v332;
                            v62 = (uint64_t)v340;
                            if (v332 != v335)
                              goto LABEL_132;
                            v31 = v334;
                            swift_release();
                            v46 = (uint64_t)v330;
                            goto LABEL_206;
                          }
                          v211 = *(_QWORD *)(v341 + 8 * v212);
                          if (!v211)
                          {
                            while (1)
                            {
                              v203 = v212 + 1;
                              if (__OFADD__(v212, 1))
                                goto LABEL_252;
                              if (v203 >= v342)
                                goto LABEL_201;
                              v211 = *(_QWORD *)(v341 + 8 * v203);
                              ++v212;
                              if (v211)
                                goto LABEL_193;
                            }
                          }
                          v203 = v212;
                        }
                      }
                    }
LABEL_193:
                    v207 = (v211 - 1) & v211;
                    v209 = __clz(__rbit64(v211)) + (v203 << 6);
LABEL_194:
                    v213 = v343;
                    sub_10005F428(*(_QWORD *)(v202 + 48) + *(_QWORD *)(v46 + 72) * v209, v343, (uint64_t (*)(_QWORD))v31);
                    sub_10005F3FC(v213, v61, (uint64_t (*)(_QWORD))v31);
                    if (qword_1002A98F0 != -1)
                      swift_once(&qword_1002A98F0, sub_10012901C);
                    v214 = type metadata accessor for Logger(0);
                    sub_100006FB4(v214, (uint64_t)qword_1002B2620);
                    sub_10005F428(v61, v36, (uint64_t (*)(_QWORD))v31);
                    v216 = Logger.logObject.getter(v215);
                    v218 = static os_log_type_t.default.getter(v216, v217);
                    v35 = v218;
                    if (os_log_type_enabled(v216, v218))
                    {
                      v219 = swift_slowAlloc(22, -1);
                      v220 = (_QWORD *)swift_slowAlloc(32, -1);
                      v378 = v220;
                      *(_DWORD *)v219 = v344.n128_u32[0];
                      v313 = v355;
                      v312 = v356;
                      v311 = v357;
                      v310 = v358;
                      v309 = v359;
                      v308 = v360;
                      v307 = v361;
                      v306 = v370;
                      v352 = v203;
                      v221 = v31;
                      v222 = v202;
                      v223 = v349;
                      v224 = UUID.init(uuid:)(v371, v368, v367, v366, v365, v364, v363, v362);
                      v225 = UUID.uuidString.getter(v224);
                      v227 = v226;
                      (*(void (**)(char *, uint64_t))(v350 + 8))(v223, v351);
                      v228 = sub_1000599D0(8, v225, v227);
                      v230 = v229;
                      v231 = static String._fromSubstring(_:)(v228);
                      v233 = v232;
                      swift_bridgeObjectRelease(v230);
                      v234 = v231;
                      v36 = v369;
                      *(_QWORD *)(v219 + 4) = sub_100006FCC(v234, v233, (uint64_t *)&v378);
                      v235 = v233;
                      v202 = v222;
                      v31 = v221;
                      v203 = v352;
                      swift_bridgeObjectRelease(v235);
                      *(_WORD *)(v219 + 12) = 2048;
                      v236 = *(_QWORD *)(v36 + *(int *)(v372 + 20));
                      sub_1000255F0(v36, (uint64_t (*)(_QWORD))v31);
                      *(_QWORD *)(v219 + 14) = v236;
                      _os_log_impl((void *)&_mh_execute_header, v216, (os_log_type_t)v35, "IDS %{public}s:%llx: Removed Remote Pointing Reports", (uint8_t *)v219, 0x16u);
                      swift_arrayDestroy(v220, 1, v339);
                      v237 = v220;
                      v46 = v354;
                      swift_slowDealloc(v237, -1, -1);
                      v238 = v219;
                      v61 = (uint64_t)v353;
                      swift_slowDealloc(v238, -1, -1);
                    }
                    else
                    {
                      sub_1000255F0(v36, (uint64_t (*)(_QWORD))v31);
                    }

                    swift_beginAccess(v346, &v378, 33, 0);
                    HIDReportAccumulator.removeValues(_:)(v61);
                    swift_endAccess(&v378);
                    sub_1000255F0(v61, (uint64_t (*)(_QWORD))v31);
                    if (v207)
                      goto LABEL_179;
                  }
                }
                v174 = *(_QWORD *)(v341 + 8 * v175);
                if (!v174)
                {
                  while (1)
                  {
                    v165 = v175 + 1;
                    if (__OFADD__(v175, 1))
                      break;
                    if (v165 >= v342)
                      goto LABEL_175;
                    v174 = *(_QWORD *)(v341 + 8 * v165);
                    ++v175;
                    if (v174)
                      goto LABEL_167;
                  }
LABEL_251:
                  __break(1u);
LABEL_252:
                  __break(1u);
LABEL_253:
                  __break(1u);
                  goto LABEL_254;
                }
                v165 = v175;
              }
            }
          }
LABEL_167:
          v170 = (v174 - 1) & v174;
          v172 = __clz(__rbit64(v174)) + (v165 << 6);
LABEL_168:
          v176 = v345;
          sub_10005F428(*(_QWORD *)(v352 + 48) + *(_QWORD *)(v46 + 72) * v172, v345, (uint64_t (*)(_QWORD))v31);
          sub_10005F3FC(v176, v35, (uint64_t (*)(_QWORD))v31);
          if (qword_1002A98F0 != -1)
            swift_once(&qword_1002A98F0, sub_10012901C);
          v177 = type metadata accessor for Logger(0);
          sub_100006FB4(v177, (uint64_t)qword_1002B2620);
          sub_10005F428(v35, v62, (uint64_t (*)(_QWORD))v31);
          v179 = Logger.logObject.getter(v178);
          v181 = static os_log_type_t.default.getter(v179, v180);
          if (os_log_type_enabled(v179, v181))
          {
            v182 = swift_slowAlloc(22, -1);
            v183 = (_QWORD *)swift_slowAlloc(32, -1);
            v378 = v183;
            *(_DWORD *)v182 = v344.n128_u32[0];
            v313 = v355;
            v312 = v356;
            v311 = v357;
            v310 = v358;
            v309 = v359;
            v308 = v360;
            v307 = v361;
            v306 = v370;
            v184 = v349;
            v185 = UUID.init(uuid:)(v371, v368, v367, v366, v365, v364, v363, v362);
            v186 = UUID.uuidString.getter(v185);
            v188 = v187;
            (*(void (**)(char *, uint64_t))(v350 + 8))(v184, v351);
            v189 = sub_1000599D0(8, v186, v188);
            v191 = v190;
            v192 = static String._fromSubstring(_:)(v189);
            v194 = v193;
            swift_bridgeObjectRelease(v191);
            v195 = v192;
            v62 = (uint64_t)v340;
            *(_QWORD *)(v182 + 4) = sub_100006FCC(v195, v194, (uint64_t *)&v378);
            v196 = v194;
            v36 = v369;
            swift_bridgeObjectRelease(v196);
            *(_WORD *)(v182 + 12) = 2048;
            v197 = *(_QWORD *)(v62 + *(int *)(v372 + 20));
            sub_1000255F0(v62, (uint64_t (*)(_QWORD))v31);
            *(_QWORD *)(v182 + 14) = v197;
            _os_log_impl((void *)&_mh_execute_header, v179, v181, "IDS %{public}s:%llx: Removed Remote Keyboard Reports", (uint8_t *)v182, 0x16u);
            swift_arrayDestroy(v183, 1, (char *)&type metadata for Any + 8);
            v198 = v183;
            v46 = v354;
            swift_slowDealloc(v198, -1, -1);
            v199 = v182;
            v61 = (uint64_t)v353;
            swift_slowDealloc(v199, -1, -1);
          }
          else
          {
            sub_1000255F0(v62, (uint64_t (*)(_QWORD))v31);
          }

          swift_beginAccess(v347, &v378, 33, 0);
          v35 = v348;
          HIDReportAccumulator.removeValues(_:)(v348);
          swift_endAccess(&v378);
          sub_1000255F0(v35, (uint64_t (*)(_QWORD))v31);
          if (v170)
            goto LABEL_153;
        }
        __break(1u);
LABEL_250:
        __break(1u);
        goto LABEL_251;
      }
LABEL_259:
      __break(1u);
      goto LABEL_260;
    }
LABEL_258:
    __break(1u);
    goto LABEL_259;
  }
LABEL_206:
  v239 = v322;
  if (!v322)
  {
    swift_release();
    v35 = (uint64_t)_swiftEmptyArrayStorage;
    goto LABEL_217;
  }
  v378 = _swiftEmptyArrayStorage;
  sub_1000586CC();
  if ((v239 & 0x8000000000000000) == 0)
  {
    v240 = 0;
    v35 = (uint64_t)v378;
    v31 &= 0xC000000000000001;
    do
    {
      if (v31)
        v241 = specialized _ArrayBuffer._getElementSlowPath(_:)(v240, v334);
      else
        v241 = swift_retain(*(_QWORD *)(v334 + 8 * v240 + 32));
      v242 = dispatch thunk of UniversalControlDevice.id.getter(v241);
      v244 = v243;
      swift_release();
      v378 = (_QWORD *)v35;
      v61 = *(_QWORD *)(v35 + 16);
      if ((unint64_t)v61 >= *(_QWORD *)(v35 + 24) >> 1)
      {
        sub_1000586CC();
        v35 = (uint64_t)v378;
      }
      *(_QWORD *)(v35 + 16) = v61 + 1;
      v245 = v35 + 16 * v61;
      *(_QWORD *)(v245 + 32) = v242;
      ++v240;
      *(_QWORD *)(v245 + 40) = v244;
    }
    while (v239 != v240);
    swift_release();
    v46 = (uint64_t)v330;
LABEL_217:
    sub_10019BD8C();
    v36 = v246;
    swift_bridgeObjectRelease(v35);
    v248 = 0;
    v249 = *(_QWORD *)(v36 + 56);
    v347 = v36 + 56;
    v356 = v36;
    v250 = 1 << *(_BYTE *)(v36 + 32);
    v251 = -1;
    if (v250 < 64)
      v251 = ~(-1 << v250);
    v252 = v251 & v249;
    v355 = v46 + 376;
    v354 = v46 + 424;
    v348 = (unint64_t)(v250 + 63) >> 6;
    *(_QWORD *)&v247 = 136446210;
    v346 = v247;
    v345 = (uint64_t)&type metadata for Any + 8;
    if (v252)
    {
LABEL_220:
      v362 = (v252 - 1) & v252;
      v253 = __clz(__rbit64(v252)) | (v248 << 6);
      goto LABEL_235;
    }
    while (1)
    {
      v254 = v248 + 1;
      if (__OFADD__(v248, 1))
        break;
      if (v254 >= v348)
        goto LABEL_242;
      v255 = *(_QWORD *)(v347 + 8 * v254);
      ++v248;
      if (!v255)
      {
        v248 = v254 + 1;
        if (v254 + 1 >= v348)
          goto LABEL_242;
        v255 = *(_QWORD *)(v347 + 8 * v248);
        if (!v255)
        {
          v248 = v254 + 2;
          if (v254 + 2 >= v348)
            goto LABEL_242;
          v255 = *(_QWORD *)(v347 + 8 * v248);
          if (!v255)
          {
            v256 = v254 + 3;
            if (v256 >= v348)
            {
LABEL_242:
              swift_release();
              v298 = &_swiftEmptySetSingleton;
              if (sub_10012DFD4())
              {
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptySetSingleton);
                v378 = &_swiftEmptySetSingleton;
                sub_10013DFDC(0, isUniquelyReferenced_nonNull_native);
                v298 = v378;
                swift_bridgeObjectRelease(0x8000000000000000);
              }
              if (sub_10012E00C() || *(_QWORD *)(*v331 + 16) && (sub_10012B270(0), (v300 & 1) != 0))
              {
                v301 = swift_isUniquelyReferenced_nonNull_native(v298);
                v378 = v298;
                sub_10013DFDC(1, v301);
                v302 = v378;
                swift_bridgeObjectRelease(0x8000000000000000);
                v303 = swift_isUniquelyReferenced_nonNull_native(v302);
                v378 = v302;
                sub_10013DFDC(2, v303);
                v298 = v378;
                swift_bridgeObjectRelease(0x8000000000000000);
              }
              EnsembleHIDController.enabledDeviceTypes.setter((uint64_t)v298);
              EnsembleHIDController.setMaskState(filterMask:copyMask:notifyMask:completion:)(v324, v323, v326, v325);
              return;
            }
            v255 = *(_QWORD *)(v347 + 8 * v256);
            if (!v255)
            {
              while (1)
              {
                v248 = v256 + 1;
                if (__OFADD__(v256, 1))
                  goto LABEL_262;
                if (v248 >= v348)
                  goto LABEL_242;
                v255 = *(_QWORD *)(v347 + 8 * v248);
                ++v256;
                if (v255)
                  goto LABEL_234;
              }
            }
            v248 = v256;
          }
        }
      }
LABEL_234:
      v362 = (v255 - 1) & v255;
      v253 = __clz(__rbit64(v255)) + (v248 << 6);
LABEL_235:
      v363 = v248;
      v257 = (unsigned __int8 *)(*(_QWORD *)(v356 + 48) + 16 * v253);
      v36 = *v257;
      v258 = v257[1];
      v259 = v257[2];
      v260 = v257[3];
      v261 = v257[4];
      v358 = v257[5];
      v369 = v257[6];
      v262 = v257[7];
      v263 = v257[8];
      v368 = v257[9];
      v367 = v257[10];
      v372 = v257[11];
      v371 = v257[12];
      v366 = v257[13];
      v370 = v257[14];
      v264 = v257[15];
      if (qword_1002A98F0 != -1)
        swift_once(&qword_1002A98F0, sub_10012901C);
      *(_QWORD *)&v365 = v262;
      v265 = type metadata accessor for Logger(0);
      v266 = sub_100006FB4(v265, (uint64_t)qword_1002B2620);
      v267 = Logger.logObject.getter(v266);
      v269 = static os_log_type_t.default.getter(v267, v268);
      v270 = v269;
      v271 = os_log_type_enabled(v267, v269);
      v364 = v264;
      v361 = v263;
      if (v271)
      {
        v272 = swift_slowAlloc(12, -1);
        v357 = v36;
        v273 = v272;
        v353 = (_QWORD *)swift_slowAlloc(32, -1);
        v378 = v353;
        *(_DWORD *)v273 = v346;
        v313 = v264;
        v312 = v370;
        v311 = v366;
        v310 = v371;
        v309 = v372;
        v308 = v367;
        v307 = v368;
        v306 = v263;
        v274 = v349;
        LODWORD(v352) = v270;
        v275 = v358;
        v276 = UUID.init(uuid:)(v357, v258, v259, v260, v261, v358, v369, v365);
        v277 = UUID.uuidString.getter(v276);
        v279 = v278;
        (*(void (**)(char *, uint64_t))(v350 + 8))(v274, v351);
        v280 = sub_1000599D0(8, v277, v279);
        v282 = v281;
        v283 = static String._fromSubstring(_:)(v280);
        v285 = v284;
        v286 = v282;
        v287 = v275;
        swift_bridgeObjectRelease(v286);
        *(_QWORD *)(v273 + 4) = sub_100006FCC(v283, v285, (uint64_t *)&v378);
        swift_bridgeObjectRelease(v285);
        _os_log_impl((void *)&_mh_execute_header, v267, (os_log_type_t)v352, "IDS %{public}s: Removed Remote Input Devices", (uint8_t *)v273, 0xCu);
        v288 = v353;
        swift_arrayDestroy(v353, 1, v345);
        swift_slowDealloc(v288, -1, -1);
        v289 = v273;
        v36 = v357;
        swift_slowDealloc(v289, -1, -1);

        v290 = v259;
        v291 = v260;
        v292 = v261;
      }
      else
      {

        v290 = v259;
        v291 = v260;
        v292 = v261;
        v287 = v358;
      }
      v293 = v361;
      v359 = v258;
      v46 = v290;
      v360 = v291;
      EnsembleHIDController.removeDevice(_:)(v36 | (v258 << 8) | (v290 << 16) | (v291 << 24) | (v292 << 32) | (v287 << 40) | (v369 << 48) | ((_QWORD)v365 << 56));
      swift_beginAccess(v355, &v378, 33, 0);
      v358 = (unint64_t)&v322;
      __chkstk_darwin(v294);
      v61 = v287;
      v35 = v365;
      v31 = v293;
      LOBYTE(v293) = v368;
      v295 = v366;
      v296 = v364;
      HIDReportAccumulator.removeValues(matching:)(sub_10013DE90, (uint64_t)(&v322 - 4));
      swift_endAccess(&v378);
      swift_beginAccess(v354, &v378, 33, 0);
      v358 = (unint64_t)&v322;
      __chkstk_darwin(v297);
      v306 = v36;
      v307 = v359;
      v308 = v46;
      v309 = v360;
      v310 = v292;
      v311 = v287;
      v312 = v369;
      v313 = v35;
      v314 = v31;
      v315 = v293;
      v316 = v367;
      v317 = v372;
      v318 = v371;
      v319 = v295;
      v320 = v370;
      v321 = v296;
      HIDReportAccumulator.removeValues(matching:)(sub_100140D34, (uint64_t)(&v322 - 4));
      swift_endAccess(&v378);
      v252 = v362;
      v248 = v363;
      if (v362)
        goto LABEL_220;
    }
LABEL_257:
    __break(1u);
    goto LABEL_258;
  }
  __break(1u);
}

BOOL sub_10012DFA8()
{
  _BOOL8 result;
  char v1;
  char v2;

  sub_10012B270(0);
  result = 1;
  if ((v1 & 1) != 0)
  {
    sub_10012B270(1);
    return (v2 & 1) == 0;
  }
  return result;
}

BOOL sub_10012DFD4()
{
  uint64_t v0;
  _BYTE v2[24];

  sub_10000B2F8(v0 + 376, (uint64_t)v2, 0);
  return *(_QWORD *)(*(_QWORD *)(v0 + 376) + 16) != 0;
}

BOOL sub_10012E00C()
{
  uint64_t v0;
  _BYTE v2[24];

  sub_10000B2F8(v0 + 424, (uint64_t)v2, 0);
  return *(_QWORD *)(*(_QWORD *)(v0 + 424) + 16) != 0;
}

_UNKNOWN **sub_10012E044()
{
  return &off_100280F98;
}

_UNKNOWN **sub_10012E050@<X0>(_QWORD *a1@<X8>)
{
  _UNKNOWN **result;

  result = sub_10012E044();
  *a1 = result;
  return result;
}

void sub_10012E074(unint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  os_log_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v4 = v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v4 + 472);
  v13 = *(_BYTE *)(v4 + 488);
  if ((a3 & 1) != 0)
  {
    if ((*(_BYTE *)(v4 + 488) & 1) != 0)
      return;
  }
  else if ((*(_BYTE *)(v4 + 488) & 1) == 0
         && !static UniversalControlUUID.compare(lhs:rhs:)(a1, a2, *(_QWORD *)(v4 + 472), *(_QWORD *)(v4 + 480)))
  {
    return;
  }
  v49 = v9;
  if (qword_1002A98F0 != -1)
    swift_once(&qword_1002A98F0, sub_10012901C);
  v14 = type metadata accessor for Logger(0);
  v15 = sub_100006FB4(v14, (uint64_t)qword_1002B2620);
  v16 = Logger.logObject.getter(v15);
  v48 = static os_log_type_t.default.getter(v16, v17);
  if (os_log_type_enabled(v16, (os_log_type_t)v48))
  {
    v45 = v8;
    v47 = v16;
    v18 = swift_slowAlloc(22, -1);
    v19 = swift_slowAlloc(64, -1);
    v51 = v19;
    *(_DWORD *)v18 = 136446466;
    v46 = v19;
    if ((a3 & 1) != 0)
    {
      v29 = 0xE300000000000000;
      v27 = 7104878;
    }
    else
    {
      v20 = UUID.init(uuid:)(a1, a1 >> 8, a1 >> 16, a1 >> 24, HIDWORD(a1), a1 >> 40, HIWORD(a1), HIBYTE(a1));
      v21 = UUID.uuidString.getter(v20);
      v23 = v22;
      (*(void (**)(char *, uint64_t))(v49 + 8))(v11, v45);
      v24 = sub_1000599D0(8, v21, v23);
      v26 = v25;
      v27 = static String._fromSubstring(_:)(v24);
      v29 = v28;
      swift_bridgeObjectRelease(v26);
    }
    v50 = sub_100006FCC(v27, v29, &v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v18 + 4, v18 + 12);
    swift_bridgeObjectRelease(v29);
    *(_WORD *)(v18 + 12) = 2082;
    if ((v13 & 1) != 0)
    {
      v30 = 0xE300000000000000;
      v31 = v48;
      v32 = 7104878;
    }
    else
    {
      v33 = UUID.init(uuid:)(v12, v12 >> 8, v12 >> 16, v12 >> 24, HIDWORD(v12), v12 >> 40, HIWORD(v12), HIBYTE(v12));
      v34 = UUID.uuidString.getter(v33);
      v36 = v35;
      (*(void (**)(char *, uint64_t))(v49 + 8))(v11, v45);
      v37 = sub_1000599D0(8, v34, v36);
      v39 = v38;
      v32 = static String._fromSubstring(_:)(v37);
      v30 = v40;
      swift_bridgeObjectRelease(v39);
      v31 = v48;
    }
    v50 = sub_100006FCC(v32, v30, &v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v18 + 14, v18 + 22);
    swift_bridgeObjectRelease(v30);
    v16 = v47;
    _os_log_impl((void *)&_mh_execute_header, v47, v31, "Current Source Device: %{public}s -> %{public}s", (uint8_t *)v18, 0x16u);
    v41 = v46;
    swift_arrayDestroy(v46, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1, -1);
    swift_slowDealloc(v18, -1, -1);
  }

  v42 = *(_QWORD *)(v4 + 200);
  if (v42)
  {
    v43 = *(_QWORD *)(v4 + 208);
    swift_getObjectType(v43);
    swift_bridgeObjectRetain(v42);
    swift_unknownObjectRetain(v43);
    OS_dispatch_source_data_add.add(data:)(1uLL);
    swift_unknownObjectRelease(v43);
    swift_bridgeObjectRelease(v42);
  }
  else
  {
    __break(1u);
  }
}

void sub_10012E48C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)(v3 + 472);
  v5 = *(_QWORD *)(v3 + 480);
  v6 = *(_BYTE *)(v3 + 488);
  *(_QWORD *)(v3 + 472) = a1;
  *(_QWORD *)(v3 + 480) = a2;
  *(_BYTE *)(v3 + 488) = a3 & 1;
  sub_10012E074(v4, v5, v6);
}

uint64_t sub_10012E4B4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  os_log_type_t v20;
  int v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 v34;
  uint64_t v35;
  unsigned __int8 v36;
  _QWORD v37[7];
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint8_t *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v4 = v3;
  v46 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v46 - 8);
  result = __chkstk_darwin(v46);
  v12 = (char *)v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v4 + 489);
  v14 = *(_QWORD *)(v4 + 497);
  v15 = *(_BYTE *)(v4 + 505);
  if ((a3 & 1) != 0)
  {
    if ((*(_BYTE *)(v4 + 505) & 1) != 0)
      return result;
  }
  else if ((*(_BYTE *)(v4 + 505) & 1) == 0)
  {
    result = static UniversalControlUUID.compare(lhs:rhs:)(a1, a2);
    if (!result)
      return result;
  }
  v8 = (_BYTE *)(v4 + 488);
  if ((v15 & 1) != 0)
  {
    if ((*v8 & 1) != 0)
      return result;
  }
  else if ((*v8 & 1) == 0)
  {
    result = static UniversalControlUUID.compare(lhs:rhs:)(v13, v14);
    if (!result)
      return result;
  }
  if ((a3 & 1) != 0)
  {
    sub_10012E48C(v13, v14, v15);
    if ((v15 & 1) != 0)
    {
LABEL_22:
      v35 = *(_QWORD *)(v4 + 520);
      *(_QWORD *)(v4 + 520) = 0;
      v36 = *(_BYTE *)(v4 + 528);
      *(_BYTE *)(v4 + 528) = 2;
      return sub_100031B90(v35, v36);
    }
  }
  else
  {
    sub_100126848(v13, v14, v15);
    if ((v15 & 1) != 0)
      goto LABEL_22;
  }
  if (!static UniversalControlUUID.compare(lhs:rhs:)(v13, v14))
    goto LABEL_22;
  if (qword_1002A98F0 != -1)
    swift_once(&qword_1002A98F0, sub_10012901C);
  v16 = type metadata accessor for Logger(0);
  v17 = sub_100006FB4(v16, (uint64_t)qword_1002B2620);
  v18 = Logger.logObject.getter(v17);
  v20 = static os_log_type_t.default.getter(v18, v19);
  v21 = v20;
  if (os_log_type_enabled(v18, v20))
  {
    v41 = v13 >> 16;
    v42 = v13 >> 8;
    v39 = HIDWORD(v13);
    v40 = v13 >> 24;
    v37[6] = HIWORD(v13);
    v38 = v13 >> 40;
    v37[4] = v14 >> 8;
    v37[5] = HIBYTE(v13);
    v37[2] = v14 >> 24;
    v37[3] = v14 >> 16;
    v37[0] = v14 >> 40;
    v37[1] = HIDWORD(v14);
    v45 = v21;
    v22 = (uint8_t *)swift_slowAlloc(12, -1);
    v44 = swift_slowAlloc(32, -1);
    v48 = v44;
    *(_DWORD *)v22 = 136446210;
    v43 = v22 + 4;
    v23 = UUID.init(uuid:)(v13, v42, v41, v40, v39, v38);
    v24 = UUID.uuidString.getter(v23);
    v26 = v25;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v46);
    v27 = sub_1000599D0(8, v24, v26);
    v28 = static String._fromSubstring(_:)(v27);
    v30 = v29;
    swift_bridgeObjectRelease();
    v47 = sub_100006FCC(v28, v30, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v43);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v18, (os_log_type_t)v45, "Hide local pointer due to remote source device: %{public}s", v22, 0xCu);
    v31 = v44;
    swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1, -1);
    swift_slowDealloc(v22, -1, -1);
  }

  sub_10017E930();
  v32 = *(_QWORD *)(v4 + 520);
  *(_QWORD *)(v4 + 520) = v33;
  v34 = *(_BYTE *)(v4 + 528);
  *(_BYTE *)(v4 + 528) = 0;
  return sub_100031B90(v32, v34);
}

uint64_t sub_10012E85C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)(v3 + 489);
  v5 = *(_QWORD *)(v3 + 497);
  v6 = *(_BYTE *)(v3 + 505);
  *(_QWORD *)(v3 + 489) = a1;
  *(_QWORD *)(v3 + 497) = a2;
  *(_BYTE *)(v3 + 505) = a3 & 1;
  return sub_10012E4B4(v4, v5, v6);
}

void sub_10012E884()
{
  _QWORD *v0;
  unint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;

  v1 = v0[21];
  if (v1 >> 62 == 1)
  {
    v2 = (void *)v0[22];
    v4 = v0[19];
    v3 = v0[20];
    v5 = v0[18];
    sub_10013C620(v5, v4, v3, v0[21], v2);
    swift_unknownObjectRetain(v3);
    swift_retain();
    v6 = v2;
    sub_100132808(v5, v4, v6, v1 & 0x3FFFFFFFFFFFFFFFLL, 0xD000000000000013, 0x8000000100258790, v3);
    swift_unknownObjectRelease(v3);
    swift_release();

    sub_10013C6B8(v5, v4, v3, v1, v2);
  }
}

uint64_t sub_10012E974(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  _BYTE v15[24];

  v9 = v4 + 512;
  swift_beginAccess(v4 + 512, v15, 32, 0);
  v10 = *(_QWORD *)(v4 + 512);
  if (*(_QWORD *)(v10 + 16) && (v11 = sub_1001A8CE4(a4), (v12 & 1) != 0))
    v13 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 16 * v11);
  else
    v13 = 0;
  swift_endAccess(v15);
  swift_beginAccess(v9, v15, 33, 0);
  if ((a3 & 1) != 0)
    sub_1001AA1A4();
  else
    sub_1001AA988(a1, a2, a4);
  swift_endAccess(v15);
  return v13;
}

void sub_10012EA70()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _BYTE v7[24];

  sub_1000F3FA4();
  sub_10000E440();
  sub_1000EFF68();
  __chkstk_darwin(v1);
  sub_100026738();
  __chkstk_darwin(v2);
  sub_10014128C();
  if (!sub_10012DFD4())
  {
    sub_100141130();
    sub_100140E70();
    sub_10013FC28((unint64_t *)&qword_1002A9370, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
    sub_100141050(v3);
    sub_100141144();
    v4 = sub_1001413C4();
    if ((v0 & 1) == 0)
    {
      sub_100140D3C(v4, (uint64_t)v7);
      HIDReportAccumulator.insert(_:)();
      swift_endAccess(v7);
      v5 = sub_1000B219C();
      sub_1000C251C(v5);
      sub_100140DE0();
      v6 = Completion.init(file:line:)();
      sub_100140FF4((uint64_t)v6);
      sub_1000269A0();
    }
  }
  sub_10002D8A4();
}

void sub_10012EB4C()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _BYTE v7[24];

  sub_1000F3FA4();
  sub_10000E440();
  sub_1000EFF68();
  __chkstk_darwin(v1);
  sub_100026738();
  __chkstk_darwin(v2);
  sub_10014128C();
  if (!sub_10012E00C())
  {
    sub_100141130();
    sub_100140E70();
    sub_10013FC28((unint64_t *)&qword_1002A9370, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
    sub_100141050(v3);
    sub_100141144();
    v4 = sub_1001413C4();
    if ((v0 & 1) == 0)
    {
      sub_100140D3C(v4, (uint64_t)v7);
      HIDReportAccumulator.insert(_:)();
      swift_endAccess(v7);
      v5 = sub_1000B219C();
      sub_1000C251C(v5);
      sub_100140DE0();
      v6 = Completion.init(file:line:)();
      sub_100140FF4((uint64_t)v6);
      sub_1000269A0();
    }
  }
  sub_10002D8A4();
}

void sub_10012EC28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  __int16 v24;
  __int16 v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  os_log_type_t v29;
  NSObject *v30;
  _QWORD v31[3];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  sub_10002626C();
  v34 = v1;
  v35 = v2;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = sub_10000E440();
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  sub_100026500();
  sub_10012AA50(v10, v8);
  sub_100140EA0();
  sub_1001413A4();
  sub_100048C38();
  ReportID.appleVendorKeyboard.unsafeMutableAddressor();
  sub_100140E18();
  if (v14
    || (ReportID.appleVendorTopCase.unsafeMutableAddressor(), sub_100140E18(), v14)
    || (ReportID.consumer.unsafeMutableAddressor(), sub_100140E18(), v14)
    || (ReportID.keyboard.unsafeMutableAddressor(), sub_100140E18(), v14))
  {
    sub_10012EA70();
LABEL_7:
    sub_100140D3C(v13, (uint64_t)v31);
    HIDReportAccumulator.dispatchReport(_:from:accumulateOnly:)(v10, v8, v6, 0);
    swift_endAccess(v31);
LABEL_8:
    sub_10000E4E0();
    return;
  }
  ReportID.digitizer.unsafeMutableAddressor();
  sub_100140E18();
  if (v14)
    goto LABEL_20;
  ReportID.dockSwipe.unsafeMutableAddressor();
  sub_100140E18();
  if (v14)
    goto LABEL_20;
  ReportID.fluidTouchGesture.unsafeMutableAddressor();
  sub_100140E18();
  if (v14)
    goto LABEL_20;
  ReportID.navigationSwipe.unsafeMutableAddressor();
  sub_100140E18();
  if (v14)
    goto LABEL_20;
  ReportID.pointer.unsafeMutableAddressor();
  sub_100140E18();
  if (v14)
    goto LABEL_20;
  ReportID.rotation.unsafeMutableAddressor();
  sub_100140E18();
  if (v14)
    goto LABEL_20;
  ReportID.scroll.unsafeMutableAddressor();
  sub_100140E18();
  if (v14
    || (ReportID.scale.unsafeMutableAddressor(), sub_100140E18(), v14)
    || (ReportID.translation.unsafeMutableAddressor(), sub_100140E18(), v14)
    || (ReportID.zoomToggle.unsafeMutableAddressor(), sub_100140E18(), v14))
  {
LABEL_20:
    sub_10012EB4C();
    goto LABEL_7;
  }
  if (qword_1002A98F0 != -1)
    swift_once(&qword_1002A98F0, sub_10012901C);
  v15 = sub_10000F6E4();
  sub_100006FB4(v15, (uint64_t)qword_1002B2620);
  sub_100140EA0();
  v16 = sub_100140EA0();
  v30 = Logger.logObject.getter(v16);
  v29 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v30, v29))
  {
    v17 = sub_10000797C(15);
    v28 = sub_10000797C(32);
    v31[0] = v28;
    *(_DWORD *)v17 = 136446466;
    UUID.init(uuid:)(v4, v4 >> 8, v4 >> 16, v4 >> 24, HIDWORD(v4), v4 >> 40);
    v18 = sub_10008A5F4();
    v20 = v19;
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v0, v11);
    sub_1000599D0(8, v18, v20);
    sub_1000602C0();
    sub_10000E420();
    v21 = sub_1000FD3C8();
    v32 = sub_100006FCC(v21, v22, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v17 + 4);
    sub_10000E50C();
    *(_WORD *)(v17 + 12) = 256;
    sub_100140EA0();
    sub_1001413A4();
    v25 = v24;
    sub_100048C38();
    sub_100048C38();
    if ((v25 & 0x100) != 0)
      v26 = 0;
    else
      v26 = v25;
    LOBYTE(v32) = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, (char *)&v32 + 1, v17 + 14);
    sub_100048C38();
    _os_log_impl((void *)&_mh_execute_header, v30, v29, "IDS %{public}s: unexpected reportID %hhu", (uint8_t *)v17, 0xFu);
    sub_1000263F4(v28, v27, (uint64_t)&type metadata for Any + 8);
    sub_100007958(v28);
    sub_100007958(v17);

    goto LABEL_8;
  }
  sub_100048C38();
  sub_100048C38();

}

uint64_t sub_10012EFF8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int16 v31;

  v28 = a1;
  v27 = type metadata accessor for OSSignpostID(0);
  v26 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v2 = (char *)&v26 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_1000055B0(&qword_1002B1CD0);
  __chkstk_darwin(v3);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v26 - v7;
  v9 = type metadata accessor for SignpostInterval(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for OSSignposter(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v26 - v17;
  v19 = sub_1000C3080();
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v20(v18, v19, v12);
  v20(v8, (uint64_t)v18, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v8, 0, 1, v12);
  v29 = 0;
  v30 = 0;
  v31 = 256;
  sub_1000C30C4((uint64_t)v8, 0, 0, 256, 0, (uint64_t)v11);
  sub_10005FAFC((uint64_t)v11, (uint64_t)v5, &qword_1002B1CD0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v5, 1, v12) == 1)
  {
    sub_100025A28((uint64_t)v5, &qword_1002B1CD0);
  }
  else
  {
    v21 = (*(uint64_t (**)(char *, char *, uint64_t))(v13 + 32))(v15, v5, v12);
    v22 = &v11[*(int *)(v9 + 20)];
    *(_QWORD *)v22 = "target_begin";
    *((_QWORD *)v22 + 1) = 12;
    v22[16] = 2;
    v22[17] = 0;
    OSSignposter.makeSignpostID()(v21);
    sub_10013C1A4();
    v24 = v23;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v2, v27);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    *(_QWORD *)&v11[*(int *)(v9 + 24)] = v24;
    swift_release();
  }
  sub_10005F428((uint64_t)v11, v28, type metadata accessor for SignpostInterval);
  sub_1000255F0((uint64_t)v11, type metadata accessor for SignpostInterval);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v18, v12);
}

uint64_t sub_10012F2FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, unint64_t a8, double a9, uint64_t a10, uint64_t a11, unsigned __int8 a12)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  uint64_t v42;
  os_log_type_t v43;
  uint8_t *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68[24];
  _QWORD v69[5];
  _QWORD v70[6];
  char v71[32];

  v62 = a8;
  v61 = a7;
  v65 = a6;
  v66 = a5;
  v67 = a3;
  v64 = type metadata accessor for UniversalControlLink(0);
  v16 = *(_QWORD *)(v64 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  __chkstk_darwin(v64);
  v63 = (char *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1000055B0(&qword_1002B1CD0);
  __chkstk_darwin(v18);
  v20 = (char *)&v58 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for OSSignposter(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v58 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005FAFC(a2, (uint64_t)v20, &qword_1002B1CD0);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v20, 1, v21) == 1)
  {
    sub_100025A28((uint64_t)v20, &qword_1002B1CD0);
    if (a1)
    {
LABEL_3:
      swift_errorRetain(a1);
      Completion.callAsFunction(_:)(a1);
      return swift_errorRelease(a1);
    }
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v24, v20, v21);
  result = type metadata accessor for SignpostInterval(0);
  if ((*(_BYTE *)(a2 + *(int *)(result + 20) + 17) & 1) != 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (!*(_QWORD *)(a2 + *(int *)(result + 24)))
  {
LABEL_15:
    __break(1u);
    return result;
  }
  sub_10013C2D0();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
  if (a1)
    goto LABEL_3;
LABEL_7:
  v26 = *(_QWORD *)(a4 + 136);
  if (sub_10014588C(v66))
  {
    v27 = v66;
    sub_1001483FC();
    v29 = v28;
    v31 = v30;
    v32 = *(_QWORD *)(a4 + 32);
    v33 = (uint64_t)v63;
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v63, v27, v64);
    swift_beginAccess(a4 + 224, v68, 0, 0);
    sub_10005FAFC(a4 + 224, (uint64_t)v70, &qword_1002AAF30);
    objc_allocWithZone((Class)type metadata accessor for MagicGlueController(0));
    swift_retain(v32);
    swift_retain(v26);
    v34 = sub_10002E9C4(v29, v31, v32, v33, (uint64_t)v70);
    v35 = *(void **)(a4 + 216);
    *(_QWORD *)(a4 + 216) = v34;

  }
  sub_10017E930();
  v36 = *(_QWORD *)(a4 + 520);
  *(_QWORD *)(a4 + 520) = v37;
  v38 = *(_BYTE *)(a4 + 528);
  *(_BYTE *)(a4 + 528) = 0;
  sub_100031B90(v36, v38);
  sub_10012E974(*(_QWORD *)(v65 + 24), *(_QWORD *)(v65 + 32), 0, 0);
  if (qword_1002A98F0 != -1)
    swift_once(&qword_1002A98F0, sub_10012901C);
  v60 = a12;
  v59 = a11;
  v39 = type metadata accessor for Logger(0);
  v40 = sub_100006FB4(v39, (uint64_t)qword_1002B2620);
  v41 = Logger.logObject.getter(v40);
  v43 = static os_log_type_t.default.getter(v41, v42);
  if (os_log_type_enabled(v41, v43))
  {
    v44 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v44 = 0;
    _os_log_impl((void *)&_mh_execute_header, v41, v43, "flushing remote pointer reports to remote target", v44, 2u);
    swift_slowDealloc(v44, -1, -1);
  }

  swift_beginAccess(a4 + 424, v71, 0, 0);
  sub_10013DBBC((uint64_t *)(a4 + 424), (uint64_t)v70);
  v69[3] = type metadata accessor for EventController();
  v69[4] = &off_10028D1F0;
  v69[0] = a4;
  swift_retain(a4);
  HIDReportAccumulator.flush(to:)((uint64_t)v69);
  sub_10013DBF8(v70);
  sub_100005988(v69);
  sub_10012F880(0);
  sub_1001302E8(v61, v62, 0, 0);
  v45 = v63;
  v46 = v64;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v63, v66, v64);
  v47 = *(unsigned __int8 *)(v16 + 80);
  v48 = (v47 + 32) & ~v47;
  v49 = (v48 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v50 = (v48 + v17 + 39) & 0xFFFFFFFFFFFFFFF8;
  v51 = swift_allocObject(&unk_10028D308, v50 + 8, v47 | 7);
  v52 = v65;
  *(_QWORD *)(v51 + 16) = a4;
  *(_QWORD *)(v51 + 24) = v52;
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v51 + v48, v45, v46);
  v53 = v51 + v49;
  *(double *)v53 = a9;
  v54 = v59;
  *(_QWORD *)(v53 + 8) = a10;
  *(_QWORD *)(v53 + 16) = v54;
  *(_BYTE *)(v53 + 24) = v60 & 1;
  v55 = v67;
  *(_QWORD *)(v51 + v50) = v67;
  v56 = type metadata accessor for Completion();
  swift_allocObject(v56, 48, 7);
  swift_retain(a4);
  swift_retain(v52);
  swift_retain(v55);
  v57 = Completion.init(file:line:body:)(0xD00000000000005ELL, 0x8000000100258650, 583, (uint64_t)sub_10013E4AC, v51);
  sub_10012B2FC((uint64_t)v57);
  return swift_release();
}

void sub_10012F880(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __n128 v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t j;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  os_log_type_t v32;
  _BOOL4 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  os_log_type_t v47;
  char v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  __n128 v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t i;
  int64_t v61;
  unint64_t v62;
  int64_t v63;
  unsigned __int8 *v64;
  int v65;
  int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  unint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  uint64_t v78;
  os_log_type_t v79;
  _BOOL4 v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  os_log_type_t v95;
  char v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  char v100;
  char v101;
  char v102;
  char v103;
  char v104;
  char v105;
  char v106;
  char v107;
  char v108;
  char v109;
  char v110;
  char v111;
  char v112;
  char v113;
  char v114;
  char v115;
  uint64_t v116;
  char *v117;
  __n128 v118;
  uint64_t v119;
  int64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int v129;
  unint64_t v130;
  uint64_t v131;
  int64_t v132;
  unsigned int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  unsigned int v141;
  uint64_t v142[3];
  _BYTE v143[32];

  v3 = type metadata accessor for UUID(0);
  v125 = *(_QWORD *)(v3 - 8);
  v126 = v3;
  __chkstk_darwin(v3);
  v124 = (char *)&v116 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
  {
    swift_beginAccess(v1 + 264, v143, 0, 0);
    v52 = *(_QWORD *)(v1 + 264);
    v53 = *(_QWORD *)(v52 + 56);
    v119 = v52 + 56;
    v54 = 1 << *(_BYTE *)(v52 + 32);
    v55 = -1;
    if (v54 < 64)
      v55 = ~(-1 << v54);
    v56 = v55 & v53;
    v123 = v1 + 424;
    v120 = (unint64_t)(v54 + 63) >> 6;
    v131 = v52;
    v57 = swift_bridgeObjectRetain(v52);
    v132 = 0;
    v57.n128_u64[0] = 136446210;
    v118 = v57;
    v117 = (char *)&type metadata for Any + 8;
    if (!v56)
      goto LABEL_32;
    while (1)
    {
      v58 = __clz(__rbit64(v56));
      v59 = (v56 - 1) & v56;
      for (i = v58 | (v132 << 6); ; i = __clz(__rbit64(v62)) + (v132 << 6))
      {
        v64 = (unsigned __int8 *)(*(_QWORD *)(v131 + 48) + 16 * i);
        v65 = *v64;
        v66 = v64[1];
        v67 = v64[2];
        v68 = v64[3];
        v69 = v64[4];
        v70 = v64[5];
        v129 = v64[6];
        v71 = v64[7];
        v140 = v64[8];
        v141 = v67;
        LODWORD(v72) = v64[9];
        v73 = v64[10];
        v138 = v64[11];
        v139 = v73;
        v74 = v64[12];
        v136 = v64[13];
        v137 = v74;
        v135 = v64[14];
        LODWORD(v64) = v64[15];
        v133 = v71;
        v134 = (int)v64;
        if (qword_1002A98F0 != -1)
          swift_once(&qword_1002A98F0, sub_10012901C);
        v75 = type metadata accessor for Logger(0);
        v76 = sub_100006FB4(v75, (uint64_t)qword_1002B2620);
        v77 = Logger.logObject.getter(v76);
        v79 = static os_log_type_t.default.getter(v77, v78);
        v80 = os_log_type_enabled(v77, v79);
        v130 = v59;
        if (v80)
        {
          v81 = swift_slowAlloc(12, -1);
          v82 = swift_slowAlloc(32, -1);
          LODWORD(v128) = v65;
          LODWORD(v127) = v66;
          v122 = v82;
          v142[0] = v82;
          *(_DWORD *)v81 = v118.n128_u32[0];
          v107 = v134;
          v106 = v135;
          v105 = v136;
          v104 = v137;
          v103 = v138;
          v102 = v139;
          v121 = v72;
          v101 = v72;
          v100 = v140;
          v83 = v124;
          v84 = v70;
          v85 = v129;
          v86 = UUID.init(uuid:)(v128, v127, v141, v68, v69, v70, v129, v133);
          v87 = UUID.uuidString.getter(v86);
          v89 = v88;
          (*(void (**)(char *, uint64_t))(v125 + 8))(v83, v126);
          v90 = sub_1000599D0(8, v87, v89);
          v92 = v91;
          v70 = static String._fromSubstring(_:)(v90);
          v72 = v93;
          swift_bridgeObjectRelease(v92);
          *(_QWORD *)(v81 + 4) = sub_100006FCC(v70, v72, v142);
          v94 = v72;
          LOBYTE(v72) = v121;
          swift_bridgeObjectRelease(v94);
          v95 = v79;
          v96 = v85;
          LOBYTE(v70) = v84;
          _os_log_impl((void *)&_mh_execute_header, v77, v95, "IDS %{public}s: Reset Remote Pointing Reports", (uint8_t *)v81, 0xCu);
          v97 = v122;
          swift_arrayDestroy(v122, 1, v117);
          LOBYTE(v66) = v127;
          LOBYTE(v65) = v128;
          swift_slowDealloc(v97, -1, -1);
          swift_slowDealloc(v81, -1, -1);

        }
        else
        {

          v96 = v129;
        }
        v98 = v133;
        swift_beginAccess(v123, v142, 33, 0);
        __chkstk_darwin(v99);
        v100 = v65;
        v101 = v66;
        v102 = v141;
        v103 = v68;
        v104 = v69;
        v105 = v70;
        v106 = v96;
        v107 = v98;
        v108 = v140;
        v109 = v72;
        v110 = v139;
        v111 = v138;
        v112 = v137;
        v113 = v136;
        v114 = v135;
        v115 = v134;
        HIDReportAccumulator.resetValues(matching:)(sub_100140D34, (uint64_t)(&v116 - 4));
        swift_endAccess(v142);
        v56 = v130;
        if (v130)
          break;
LABEL_32:
        v61 = v132 + 1;
        if (__OFADD__(v132, 1))
        {
LABEL_56:
          __break(1u);
          goto LABEL_57;
        }
        if (v61 >= v120)
          goto LABEL_53;
        v62 = *(_QWORD *)(v119 + 8 * v61);
        ++v132;
        if (!v62)
        {
          v132 = v61 + 1;
          if (v61 + 1 >= v120)
            goto LABEL_53;
          v62 = *(_QWORD *)(v119 + 8 * v132);
          if (!v62)
          {
            v132 = v61 + 2;
            if (v61 + 2 >= v120)
              goto LABEL_53;
            v62 = *(_QWORD *)(v119 + 8 * v132);
            if (!v62)
            {
              v63 = v61 + 3;
              if (v63 >= v120)
                goto LABEL_53;
              v62 = *(_QWORD *)(v119 + 8 * v63);
              if (!v62)
              {
                while (1)
                {
                  v132 = v63 + 1;
                  if (__OFADD__(v63, 1))
                    goto LABEL_58;
                  if (v132 >= v120)
                    break;
                  v62 = *(_QWORD *)(v119 + 8 * v132);
                  ++v63;
                  if (v62)
                    goto LABEL_45;
                }
LABEL_53:
                swift_release();
                return;
              }
              v132 = v63;
            }
          }
        }
LABEL_45:
        v59 = (v62 - 1) & v62;
      }
    }
  }
  if (a1 != 1)
    return;
  swift_beginAccess(v1 + 264, v143, 0, 0);
  v5 = *(_QWORD *)(v1 + 264);
  v6 = *(_QWORD *)(v5 + 56);
  v119 = v5 + 56;
  v7 = 1 << *(_BYTE *)(v5 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & v6;
  v128 = v1 + 376;
  v120 = (unint64_t)(v7 + 63) >> 6;
  v131 = v5;
  v10 = swift_bridgeObjectRetain(v5);
  v132 = 0;
  v10.n128_u64[0] = 136446210;
  v118 = v10;
  v117 = (char *)&type metadata for Any + 8;
  if (!v9)
    goto LABEL_7;
LABEL_6:
  v11 = __clz(__rbit64(v9));
  v12 = (v9 - 1) & v9;
  for (j = v11 | (v132 << 6); ; j = __clz(__rbit64(v15)) + (v132 << 6))
  {
    v17 = (unsigned __int8 *)(*(_QWORD *)(v131 + 48) + 16 * j);
    v18 = *v17;
    v19 = v17[1];
    v20 = v17[2];
    v21 = v17[3];
    v22 = v17[4];
    v129 = v17[5];
    v23 = v17[6];
    v24 = v17[7];
    v140 = v17[8];
    v141 = v24;
    LODWORD(v25) = v17[9];
    v26 = v17[10];
    v138 = v17[11];
    v139 = v26;
    v27 = v17[12];
    v136 = v17[13];
    v137 = v27;
    v135 = v17[14];
    LODWORD(v17) = v17[15];
    v133 = v23;
    v134 = (int)v17;
    if (qword_1002A98F0 != -1)
      swift_once(&qword_1002A98F0, sub_10012901C);
    v28 = type metadata accessor for Logger(0);
    v29 = sub_100006FB4(v28, (uint64_t)qword_1002B2620);
    v30 = Logger.logObject.getter(v29);
    v32 = static os_log_type_t.default.getter(v30, v31);
    v33 = os_log_type_enabled(v30, v32);
    v130 = v12;
    if (v33)
    {
      v34 = swift_slowAlloc(12, -1);
      v127 = swift_slowAlloc(32, -1);
      v142[0] = v127;
      *(_DWORD *)v34 = v118.n128_u32[0];
      v107 = v134;
      v106 = v135;
      v105 = v136;
      v104 = v137;
      v103 = v138;
      v102 = v139;
      LODWORD(v123) = v25;
      v101 = v25;
      v100 = v140;
      v35 = v124;
      LODWORD(v122) = v21;
      v36 = v21;
      v121 = v22;
      v37 = v129;
      v38 = UUID.init(uuid:)(v18, v19, v20, v36, v22, v129, v133, v141);
      v39 = UUID.uuidString.getter(v38);
      v41 = v40;
      (*(void (**)(char *, uint64_t))(v125 + 8))(v35, v126);
      v42 = sub_1000599D0(8, v39, v41);
      v44 = v43;
      v22 = static String._fromSubstring(_:)(v42);
      v25 = v45;
      swift_bridgeObjectRelease(v44);
      *(_QWORD *)(v34 + 4) = sub_100006FCC(v22, v25, v142);
      v46 = v25;
      LOBYTE(v25) = v123;
      swift_bridgeObjectRelease(v46);
      v47 = v32;
      v48 = v37;
      LOBYTE(v22) = v121;
      LOBYTE(v21) = v122;
      _os_log_impl((void *)&_mh_execute_header, v30, v47, "IDS %{public}s: Reset Remote Keyboard Reports", (uint8_t *)v34, 0xCu);
      v49 = v127;
      swift_arrayDestroy(v127, 1, v117);
      swift_slowDealloc(v49, -1, -1);
      swift_slowDealloc(v34, -1, -1);

    }
    else
    {

      v48 = v129;
    }
    v50 = v133;
    swift_beginAccess(v128, v142, 33, 0);
    __chkstk_darwin(v51);
    v100 = v18;
    v101 = v19;
    v102 = v20;
    v103 = v21;
    v104 = v22;
    v105 = v48;
    v106 = v50;
    v107 = v141;
    v108 = v140;
    v109 = v25;
    v110 = v139;
    v111 = v138;
    v112 = v137;
    v113 = v136;
    v114 = v135;
    v115 = v134;
    HIDReportAccumulator.resetValues(matching:)(sub_10013DE90, (uint64_t)(&v116 - 4));
    swift_endAccess(v142);
    v9 = v130;
    if (v130)
      goto LABEL_6;
LABEL_7:
    v14 = v132 + 1;
    if (__OFADD__(v132, 1))
    {
      __break(1u);
      goto LABEL_56;
    }
    if (v14 >= v120)
      goto LABEL_53;
    v15 = *(_QWORD *)(v119 + 8 * v14);
    ++v132;
    if (!v15)
    {
      v132 = v14 + 1;
      if (v14 + 1 >= v120)
        goto LABEL_53;
      v15 = *(_QWORD *)(v119 + 8 * v132);
      if (!v15)
      {
        v132 = v14 + 2;
        if (v14 + 2 >= v120)
          goto LABEL_53;
        v15 = *(_QWORD *)(v119 + 8 * v132);
        if (!v15)
          break;
      }
    }
LABEL_20:
    v12 = (v15 - 1) & v15;
  }
  v16 = v14 + 3;
  if (v16 >= v120)
    goto LABEL_53;
  v15 = *(_QWORD *)(v119 + 8 * v16);
  if (v15)
  {
    v132 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    v132 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v132 >= v120)
      goto LABEL_53;
    v15 = *(_QWORD *)(v119 + 8 * v132);
    ++v16;
    if (v15)
      goto LABEL_20;
  }
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
}

uint64_t sub_1001302E8(unint64_t a1, unint64_t a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  os_log_type_t v11;
  _BOOL4 v12;
  _BOOL4 v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int64_t v34;
  __n128 v35;
  int64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v40;
  int64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  NSObject *v47;
  uint64_t v48;
  os_log_type_t v49;
  _BOOL4 v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v93;
  char *v94;
  __n128 v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  _BYTE *v100;
  int64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  int v106;
  uint64_t v107;
  char *v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;

  v5 = v4;
  v105 = a3;
  v122 = a1 >> 8;
  v121 = a1 >> 16;
  v120 = a1 >> 24;
  v119 = HIDWORD(a1);
  v118 = a1 >> 40;
  v117 = HIWORD(a1);
  v138 = a1;
  v116 = HIBYTE(a1);
  v115 = a2 >> 8;
  v114 = a2 >> 16;
  v113 = a2 >> 24;
  v112 = HIDWORD(a2);
  v111 = a2 >> 40;
  v110 = HIWORD(a2);
  v139 = a2;
  v109 = HIBYTE(a2);
  v98 = type metadata accessor for UUID(0);
  v97 = *(_QWORD *)(v98 - 8);
  __chkstk_darwin(v98);
  v108 = (char *)&v93 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1002A98F0 != -1)
LABEL_36:
    swift_once(&qword_1002A98F0, sub_10012901C);
  v8 = type metadata accessor for Logger(0);
  v104 = sub_100006FB4(v8, (uint64_t)qword_1002B2620);
  v9 = Logger.logObject.getter(v104);
  v11 = static os_log_type_t.default.getter(v9, v10);
  v12 = os_log_type_enabled(v9, v11);
  v107 = v5;
  v106 = a4;
  if (v12)
  {
    v13 = (_BYTE)v105 == 0;
    v14 = v105 == 1;
    v15 = swift_slowAlloc(24, -1);
    v16 = swift_slowAlloc(32, -1);
    v143 = v16;
    *(_DWORD *)v15 = 136446722;
    v17 = v108;
    v18 = UUID.init(uuid:)(v138, v122, v121, v120, v119, v118, v117, v116);
    v19 = UUID.uuidString.getter(v18);
    v21 = v20;
    (*(void (**)(char *, uint64_t))(v97 + 8))(v17, v98);
    v22 = sub_1000599D0(8, v19, v21);
    v24 = v23;
    v25 = static String._fromSubstring(_:)(v22);
    v27 = v26;
    swift_bridgeObjectRelease(v24);
    v141 = sub_100006FCC(v25, v27, &v143);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, &v142, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease(v27);
    *(_WORD *)(v15 + 12) = 1024;
    LODWORD(v141) = v14;
    v5 = v107;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, (char *)&v141 + 4, v15 + 14, v15 + 18);
    *(_WORD *)(v15 + 18) = 1024;
    LODWORD(v141) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, (char *)&v141 + 4, v15 + 20, v15 + 24);
    _os_log_impl((void *)&_mh_execute_header, v9, v11, "=== Move Target to IDS %{public}s, keyboard %{BOOL}d, pointing %{BOOL}d ===", (uint8_t *)v15, 0x18u);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    v28 = v16;
    a4 = v106;
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v15, -1, -1);
  }

  swift_beginAccess(v5 + 264, &v143, 0, 0);
  v29 = *(_QWORD *)(v5 + 264);
  v30 = v29 + 56;
  v31 = 1 << *(_BYTE *)(v29 + 32);
  v32 = -1;
  if (v31 < 64)
    v32 = ~(-1 << v31);
  v33 = v32 & *(_QWORD *)(v29 + 56);
  v34 = (unint64_t)(v31 + 63) >> 6;
  v96 = &v141;
  v100 = (_BYTE *)(v5 + 488);
  v35 = swift_bridgeObjectRetain(v29);
  v36 = 0;
  v35.n128_u64[0] = 136446466;
  v95 = v35;
  v94 = (char *)&type metadata for Any + 8;
  v99 = 0x8000000100258650;
  v103 = v29;
  v102 = v29 + 56;
  v101 = v34;
  while (1)
  {
    if (v33)
    {
      v37 = __clz(__rbit64(v33));
      v33 &= v33 - 1;
      v38 = v37 | (v36 << 6);
      goto LABEL_20;
    }
    if (__OFADD__(v36++, 1))
    {
      __break(1u);
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    if (v36 >= v34)
      return swift_release();
    v40 = *(_QWORD *)(v30 + 8 * v36);
    if (!v40)
      break;
LABEL_19:
    v33 = (v40 - 1) & v40;
    v38 = __clz(__rbit64(v40)) + (v36 << 6);
LABEL_20:
    v42 = (unint64_t *)(*(_QWORD *)(v29 + 48) + 16 * v38);
    v43 = *v42;
    v44 = v42[1];
    if ((a4 & 1) != 0 || static UniversalControlUUID.compare(lhs:rhs:)(*v42, v42[1], v138, v139))
    {
      v45 = sub_100124CD4(v43, v44);
      v137 = v33;
      v46 = swift_retain_n(v45, 2);
      v47 = Logger.logObject.getter(v46);
      v49 = static os_log_type_t.default.getter(v47, v48);
      v50 = os_log_type_enabled(v47, v49);
      v136 = v45;
      if (v50)
      {
        v51 = v45;
        v52 = swift_slowAlloc(22, -1);
        v53 = swift_slowAlloc(64, -1);
        v141 = v53;
        *(_DWORD *)v52 = v95.n128_u32[0];
        v54 = sub_100111930();
        v56 = v55;
        v140 = sub_100006FCC(v54, v55, &v141);
        v57 = v96;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, v96, v52 + 4, v52 + 12);
        swift_release_n(v51, 2);
        swift_bridgeObjectRelease(v56);
        *(_WORD *)(v52 + 12) = 2082;
        v135 = v52 + 14;
        v58 = v108;
        v59 = UUID.init(uuid:)(v138, v122, v121, v120, v119, v118, v117, v116);
        v60 = UUID.uuidString.getter(v59);
        v62 = v61;
        (*(void (**)(char *, uint64_t))(v97 + 8))(v58, v98);
        v63 = sub_1000599D0(8, v60, v62);
        v65 = v64;
        v66 = static String._fromSubstring(_:)(v63);
        v68 = v67;
        swift_bridgeObjectRelease(v65);
        v140 = sub_100006FCC(v66, v68, &v141);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, v57, v135, v52 + 22);
        swift_bridgeObjectRelease(v68);
        _os_log_impl((void *)&_mh_execute_header, v47, v49, "IDS %{public}s: Move Pointer to IDS %{public}s", (uint8_t *)v52, 0x16u);
        swift_arrayDestroy(v53, 2, v94);
        swift_slowDealloc(v53, -1, -1);
        swift_slowDealloc(v52, -1, -1);

      }
      else
      {

        swift_release_n(v45, 2);
      }
      v69 = v107;
      if ((*v100 & 1) != 0)
      {
        v70 = *(unsigned __int8 *)(v107 + 56);
        v135 = *(unsigned __int8 *)(v107 + 57);
        v134 = *(unsigned __int8 *)(v107 + 58);
        v133 = *(unsigned __int8 *)(v107 + 59);
        v132 = *(unsigned __int8 *)(v107 + 60);
        v131 = *(unsigned __int8 *)(v107 + 61);
        v130 = *(unsigned __int8 *)(v107 + 62);
        v129 = *(unsigned __int8 *)(v107 + 63);
        v128 = *(unsigned __int8 *)(v107 + 65);
        v127 = *(unsigned __int8 *)(v107 + 66);
        v126 = *(unsigned __int8 *)(v107 + 67);
        v125 = *(unsigned __int8 *)(v107 + 68);
        v124 = *(unsigned __int8 *)(v107 + 69);
        v123 = *(unsigned __int8 *)(v107 + 70);
      }
      else
      {
        v70 = *(_QWORD *)(v107 + 472);
        v71 = *(_QWORD *)(v107 + 480);
        v134 = v70 >> 16;
        v135 = v70 >> 8;
        v132 = HIDWORD(v70);
        v133 = v70 >> 24;
        v130 = HIWORD(v70);
        v131 = v70 >> 40;
        v128 = v71 >> 8;
        v129 = HIBYTE(v70);
        v126 = v71 >> 24;
        v127 = v71 >> 16;
        v125 = HIDWORD(v71);
        v124 = v71 >> 40;
        v123 = HIWORD(v71);
      }
      v141 = sub_1000E6230();
      v142 = v72;
      v73 = (uint64_t)v108;
      UUID.init(uuid:)(v138, v122, v121, v120, v119, v118, v117, v116);
      HIDReport.subscript.setter(v73, 8, v74, v75, v76, v77, v78, v79);
      UUID.init(uuid:)(v70, v135, v134, v133, v132, v131, v130, v129);
      HIDReport.subscript.setter(v73, 144, v80, v81, v82, v83, v84, v85);
      HIDReport.subscript.setter();
      HIDReport.subscript.setter();
      v86 = v141;
      v87 = v142;
      sub_10002517C(v141, v142);
      v88 = HIDReport.storage.getter(v86, v87);
      v90 = v89;
      sub_100022AEC(v86, v87);
      v91 = type metadata accessor for Completion();
      swift_allocObject(v91, 48, 7);
      Completion.init(file:line:)();
      sub_100128DA4();
      swift_release();
      sub_100022AEC(v88, v90);
      sub_100022AEC(v86, v87);
      swift_release();
      v5 = v69;
      a4 = v106;
      v29 = v103;
      v30 = v102;
      v34 = v101;
      v33 = v137;
    }
  }
  v41 = v36 + 1;
  if (v36 + 1 >= v34)
    return swift_release();
  v40 = *(_QWORD *)(v30 + 8 * v41);
  if (v40)
    goto LABEL_18;
  v41 = v36 + 2;
  if (v36 + 2 >= v34)
    return swift_release();
  v40 = *(_QWORD *)(v30 + 8 * v41);
  if (v40)
  {
LABEL_18:
    v36 = v41;
    goto LABEL_19;
  }
  v41 = v36 + 3;
  if (v36 + 3 < v34)
  {
    v40 = *(_QWORD *)(v30 + 8 * v41);
    if (!v40)
    {
      while (1)
      {
        v36 = v41 + 1;
        if (__OFADD__(v41, 1))
          goto LABEL_35;
        if (v36 >= v34)
          return swift_release();
        v40 = *(_QWORD *)(v30 + 8 * v36);
        ++v41;
        if (v40)
          goto LABEL_19;
      }
    }
    goto LABEL_18;
  }
  return swift_release();
}

void sub_100130E68(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, char a8, _QWORD *a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  NSObject *v43;
  uint64_t v44;
  int v45;
  _BOOL4 v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  os_log_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  int v123;
  os_log_t v124;
  unint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char v148[8];

  v142 = a6;
  v143 = a7;
  v135 = a5;
  v139 = *a9;
  v140 = a9;
  v13 = type metadata accessor for SignpostInterval(0);
  v136 = *(_QWORD *)(v13 - 8);
  v14 = __chkstk_darwin(v13);
  v137 = v15;
  v138 = (uint64_t)&v108 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v141 = (uint64_t)&v108 - v16;
  v17 = type metadata accessor for UUID(0);
  v133 = *(_QWORD *)(v17 - 8);
  v134 = v17;
  __chkstk_darwin(v17);
  v132 = (char *)&v108 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = type metadata accessor for UniversalControlAnchor(0);
  v130 = *(_QWORD *)(v131 - 8);
  __chkstk_darwin(v131);
  v129 = (char *)&v108 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = type metadata accessor for UniversalControlLink.Endpoint(0);
  v127 = *(_QWORD *)(v128 - 8);
  __chkstk_darwin(v128);
  v126 = (char *)&v108 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for UniversalControlLink(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v108 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1002A98F0 != -1)
    swift_once(&qword_1002A98F0, sub_10012901C);
  v25 = type metadata accessor for Logger(0);
  v26 = sub_100006FB4(v25, (uint64_t)qword_1002B2620);
  v27 = Logger.logObject.getter(v26);
  v29 = static os_log_type_t.default.getter(v27, v28);
  if (os_log_type_enabled(v27, v29))
  {
    v30 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v30 = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, v29, "flushing local pointer reports to remote target", v30, 2u);
    swift_slowDealloc(v30, -1, -1);
  }
  LODWORD(v31) = a8 & 1;

  swift_beginAccess(a3 + 328, v148, 33, 0);
  HIDReportAccumulator.flush(to:)(a3 + 336);
  swift_endAccess(v148);
  v32 = sub_10012B270(1);
  v145 = a4;
  if ((v34 & 1) != 0)
  {
    v37 = *(_QWORD *)(a3 + 136) + OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView;
    swift_beginAccess(v37, v148, 0, 0);
    v38 = v37 + *(int *)(type metadata accessor for SyncView(0) + 20);
    v39 = *(_QWORD *)(v38 + *(int *)(type metadata accessor for SyncViewLocalData(0) + 28));
    a4 = v145;
    v40 = swift_retain(v39);
    v35 = dispatch thunk of UniversalControlDevice.id.getter(v40);
    v36 = v41;
    swift_release();
  }
  else
  {
    v35 = v32;
    v36 = v33;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v24, v135, v21);
  v42 = swift_retain_n(a4, 2);
  v43 = Logger.logObject.getter(v42);
  v45 = static os_log_type_t.default.getter(v43, v44);
  v46 = os_log_type_enabled(v43, (os_log_type_t)v45);
  v144 = v36;
  if (v46)
  {
    v123 = v45;
    v124 = v43;
    v120 = HIBYTE(v36);
    v119 = HIWORD(v36);
    v118 = v36 >> 40;
    v116 = HIDWORD(v36);
    v115 = v36 >> 24;
    v114 = v36 >> 16;
    v112 = v36 >> 8;
    v121 = HIBYTE(v35);
    v117 = HIWORD(v35);
    v113 = v35 >> 40;
    v111 = HIDWORD(v35);
    v110 = v35 >> 24;
    v109 = v35 >> 16;
    v125 = v35;
    v108 = v35 >> 8;
    v47 = v31;
    v31 = swift_slowAlloc(52, -1);
    v122 = swift_slowAlloc(128, -1);
    v147 = v122;
    *(_DWORD *)v31 = 136447234;
    v48 = sub_100111930();
    v50 = v49;
    v146 = sub_100006FCC(v48, v49, &v147);
    v135 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, &v147, v31 + 4, v31 + 12);
    swift_release_n(a4, 2);
    v51 = swift_bridgeObjectRelease(v50);
    *(_WORD *)(v31 + 12) = 2082;
    v52 = v126;
    v53 = UniversalControlLink.endpoint1.getter(v51);
    v54 = v129;
    UniversalControlLink.Endpoint.anchor.getter(v53);
    v55 = (*(uint64_t (**)(char *, uint64_t))(v127 + 8))(v52, v128);
    v56 = UniversalControlAnchor.edge.getter(v55);
    (*(void (**)(char *, uint64_t))(v130 + 8))(v54, v131);
    v57 = UniversalControlEdge.description.getter(v56);
    v59 = v58;
    v146 = sub_100006FCC(v57, v58, &v147);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, &v147, v31 + 14, v31 + 22);
    swift_bridgeObjectRelease(v59);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v135);
    *(_WORD *)(v31 + 22) = 2048;
    v146 = *(_QWORD *)&a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, &v147, v31 + 24, v31 + 32);
    *(_WORD *)(v31 + 32) = 2082;
    LODWORD(v135) = v47;
    if (v47)
    {
      v72 = 0xE400000000000000;
      v70 = 1701736302;
      v66 = v133;
      v65 = v134;
      v60 = v132;
    }
    else
    {
      v60 = v132;
      v61 = UUID.init(uuid:)(v142, v142 >> 8, v142 >> 16, v142 >> 24, HIDWORD(v142), v142 >> 40);
      v62 = UUID.uuidString.getter(v61);
      v64 = v63;
      v66 = v133;
      v65 = v134;
      (*(void (**)(char *, uint64_t))(v133 + 8))(v60, v134);
      v67 = sub_1000599D0(8, v62, v64);
      v69 = v68;
      v70 = static String._fromSubstring(_:)(v67);
      v72 = v71;
      swift_bridgeObjectRelease(v69);
    }
    v146 = sub_100006FCC(v70, v72, &v147);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, &v147, v31 + 34, v31 + 42);
    swift_bridgeObjectRelease(v72);
    *(_WORD *)(v31 + 42) = 2082;
    v73 = v60;
    v35 = v125;
    v74 = UUID.init(uuid:)(v125, v108, v109, v110, v111, v113);
    v75 = UUID.uuidString.getter(v74);
    v77 = v76;
    (*(void (**)(char *, uint64_t))(v66 + 8))(v73, v65);
    v78 = sub_1000599D0(8, v75, v77);
    v80 = v79;
    v81 = static String._fromSubstring(_:)(v78);
    v83 = v82;
    swift_bridgeObjectRelease(v80);
    v146 = sub_100006FCC(v81, v83, &v147);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, &v147, v31 + 44, v31 + 52);
    swift_bridgeObjectRelease(v83);
    v84 = v124;
    _os_log_impl((void *)&_mh_execute_header, v124, (os_log_type_t)v123, "IDS %{public}s: Target Ready: edge=%{public}s, offset=%f, drag=%{public}s, keyboard=%{public}s", (uint8_t *)v31, 0x34u);
    v85 = v122;
    swift_arrayDestroy(v122, 4, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v85, -1, -1);
    swift_slowDealloc(v31, -1, -1);

    LOBYTE(v31) = v135;
  }
  else
  {
    swift_release_n(a4, 2);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);

  }
  if ((*(_BYTE *)(a3 + 488) & 1) != 0)
  {
    LOBYTE(v86) = *(_BYTE *)(a3 + 56);
    LOBYTE(v87) = *(_BYTE *)(a3 + 57);
    LOBYTE(v88) = *(_BYTE *)(a3 + 58);
    LOBYTE(v89) = *(_BYTE *)(a3 + 59);
    LOBYTE(v90) = *(_BYTE *)(a3 + 60);
    LOBYTE(v91) = *(_BYTE *)(a3 + 61);
    LOBYTE(v92) = *(_BYTE *)(a3 + 62);
    v93 = *(unsigned __int8 *)(a3 + 63);
  }
  else
  {
    v86 = *(_QWORD *)(a3 + 472);
    v87 = v86 >> 8;
    v88 = v86 >> 16;
    v89 = v86 >> 24;
    v90 = HIDWORD(v86);
    v91 = v86 >> 40;
    v92 = HIWORD(v86);
    v93 = HIBYTE(v86);
  }
  v94 = sub_1000E5A50(v142, v143, v31, v35, a1, v144, v86 | (unint64_t)(unsigned __int16)(v87 << 8) | ((unint64_t)v88 << 16) & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)v89 << 24) | ((unint64_t)v90 << 32) | ((unint64_t)v91 << 40) | ((unint64_t)v92 << 48) | (v93 << 56));
  v96 = v95;
  v97 = v141;
  sub_100131938(v141);
  v98 = v138;
  sub_10005F428(v97, v138, type metadata accessor for SignpostInterval);
  v99 = *(unsigned __int8 *)(v136 + 80);
  v100 = (v99 + 16) & ~v99;
  v101 = (v137 + v100 + 7) & 0xFFFFFFFFFFFFFFF8;
  v102 = swift_allocObject(&unk_10028D330, v101 + 8, v99 | 7);
  sub_10005F3FC(v98, v102 + v100, type metadata accessor for SignpostInterval);
  v103 = v139;
  v104 = v140;
  *(_QWORD *)(v102 + v101) = v140;
  swift_allocObject(v103, 48, 7);
  swift_retain(v104);
  Completion.init(file:line:body:)(0xD00000000000005ELL, 0x8000000100258650, 598, (uint64_t)sub_10013E5B0, v102);
  sub_10002517C(v94, v96);
  v105 = HIDReport.storage.getter(v94, v96);
  v107 = v106;
  sub_100022AEC(v94, v96);
  sub_100128DA4();
  sub_100022AEC(v105, v107);
  swift_release();
  sub_100022AEC(v94, v96);
  sub_1000255F0(v97, type metadata accessor for SignpostInterval);
}

void sub_100131938(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = type metadata accessor for OSSignpostID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000055B0(&qword_1002B1CD0);
  __chkstk_darwin(v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OSSignposter(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1002A98A0 != -1)
    swift_once(&qword_1002A98A0, sub_1000C3010);
  v13 = sub_100006FB4(v9, (uint64_t)qword_1002B6F70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(a1, v13, v9);
  _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(a1, 0, 1, v9);
  v14 = type metadata accessor for SignpostInterval(0);
  v15 = a1 + *(int *)(v14 + 20);
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_WORD *)(v15 + 16) = 256;
  v16 = *(int *)(v14 + 24);
  *(_QWORD *)(a1 + v16) = 0;
  sub_10005FAFC(a1, (uint64_t)v8, &qword_1002B1CD0);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v8, 1, v9) == 1)
  {
    sub_100025A28((uint64_t)v8, &qword_1002B1CD0);
  }
  else
  {
    v17 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
    *(_QWORD *)v15 = "target_ready";
    *(_QWORD *)(v15 + 8) = 12;
    *(_WORD *)(v15 + 16) = 2;
    v18 = OSSignposter.logHandle.getter(v17);
    OSSignpostID.init(log:)(v18);
    sub_10013C1A4();
    v20 = v19;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    swift_release();
    *(_QWORD *)(a1 + v16) = v20;
  }
}

uint64_t sub_100131B64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;

  v4 = sub_1000055B0(&qword_1002B1CD0);
  __chkstk_darwin(v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OSSignposter(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005FAFC(a2, (uint64_t)v6, &qword_1002B1CD0);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v6, 1, v7) == 1)
  {
    sub_100025A28((uint64_t)v6, &qword_1002B1CD0);
    return Completion.callAsFunction(_:)(a1);
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
  result = type metadata accessor for SignpostInterval(0);
  if ((*(_BYTE *)(a2 + *(int *)(result + 20) + 17) & 1) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(a2 + *(int *)(result + 24)))
  {
    sub_10013C2D0();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    return Completion.callAsFunction(_:)(a1);
  }
  __break(1u);
  return result;
}

void sub_100131CC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];

  v3 = sub_1000055B0(&qword_1002B1CD0);
  __chkstk_darwin(v3);
  v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OSSignposter(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_errorRetain(a1);
  v12[2] = a1;
  sub_10005FAFC(v1, (uint64_t)v5, &qword_1002B1CD0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_100025A28((uint64_t)v5, &qword_1002B1CD0);
LABEL_9:
    swift_errorRelease(a1);
    return;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
  v10 = type metadata accessor for SignpostInterval(0);
  if ((*(_BYTE *)(v1 + *(int *)(v10 + 20) + 17) & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v11 = *(_QWORD *)(v1 + *(int *)(v10 + 24));
    swift_retain();
    if (v11)
    {
      sub_10013C2D0();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
}

uint64_t sub_100131EA0(double a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  os_log_type_t v10;
  uint8_t *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  _BYTE v39[24];
  uint64_t v40[3];
  uint64_t v41;
  uint64_t v42;

  v3 = v2;
  if (qword_1002A98F0 != -1)
    swift_once(&qword_1002A98F0, sub_10012901C);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_100006FB4(v6, (uint64_t)qword_1002B2620);
  v8 = Logger.logObject.getter(v7);
  v10 = static os_log_type_t.default.getter(v8, v9);
  if (os_log_type_enabled(v8, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v10, "=== Prepare Move Target to Local ===", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  sub_10012F880(0);
  v12 = objc_msgSend(objc_allocWithZone((Class)CALayer), "init");
  objc_msgSend(v12, "setHitTestsAsOpaque:", 1);
  sub_10000922C(0xD000000000000021, 0x80000001002586E0, v12);
  swift_beginAccess(v3 + 224, v39, 0, 0);
  sub_10005FAFC(v3 + 224, (uint64_t)&v37, &qword_1002AAF30);
  if (v38)
  {
    sub_100025A50(&v37, (uint64_t)v40);
    v13 = v41;
    v14 = v42;
    sub_10000DBE4(v40, v41);
    v15 = (*(uint64_t (**)(id, uint64_t, uint64_t, double, double))(v14 + 8))(v12, v13, v14, a1, a2);
    v16 = Logger.logObject.getter(v15);
    v18 = static os_log_type_t.default.getter(v16, v17);
    if (os_log_type_enabled(v16, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v37 = v20;
      *(_DWORD *)v19 = 136315138;
      v21 = CGPoint.description.getter(a1, a2);
      v23 = v22;
      v36 = sub_100006FCC(v21, v22, (uint64_t *)&v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v19 + 4, v19 + 12);
      swift_bridgeObjectRelease(v23);
      _os_log_impl((void *)&_mh_execute_header, v16, v18, "Target Begin: event capture layer presented, point=%s", v19, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);
    }

    sub_100005988(v40);
  }
  else
  {
    sub_100025A28((uint64_t)&v37, &qword_1002AAF30);
    v25 = Logger.logObject.getter(v24);
    v27 = static os_log_type_t.default.getter(v25, v26);
    if (os_log_type_enabled(v25, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(12, -1);
      v29 = swift_slowAlloc(32, -1);
      v40[0] = v29;
      *(_DWORD *)v28 = 136315138;
      v30 = CGPoint.description.getter(a1, a2);
      v32 = v31;
      *(_QWORD *)&v37 = sub_100006FCC(v30, v31, v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, (char *)&v37 + 8, v28 + 4, v28 + 12);
      swift_bridgeObjectRelease(v32);
      _os_log_impl((void *)&_mh_execute_header, v25, v27, "Target Begin: event capture layer skipped (no layer host), point=%s", v28, 0xCu);
      swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v28, -1, -1);
    }

  }
  v33 = swift_allocObject(&unk_10028D3F8, 32, 7);
  *(_QWORD *)(v33 + 16) = v3;
  *(_QWORD *)(v33 + 24) = v12;
  v34 = type metadata accessor for AnyCancellable(0);
  swift_allocObject(v34, *(unsigned int *)(v34 + 48), *(unsigned __int16 *)(v34 + 52));
  swift_retain(v3);
  return AnyCancellable.init(_:)(sub_10013F6A4, v33);
}

uint64_t sub_1001322D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _BYTE v16[24];
  _BYTE v17[48];

  v2 = v1;
  if (qword_1002A98F0 != -1)
    swift_once(&qword_1002A98F0, sub_10012901C);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_100006FB4(v4, (uint64_t)qword_1002B2620);
  v6 = Logger.logObject.getter(v5);
  v8 = static os_log_type_t.default.getter(v6, v7);
  if (os_log_type_enabled(v6, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v8, "=== Move Target to Local ===", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  sub_10012E974(0, 0, 1, 0);
  v10 = *(_QWORD *)(*(_QWORD *)(v2 + 112) + 32);
  if (v10)
  {
    v11 = v10 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties;
    swift_beginAccess(v10 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties, v16, 0, 0);
    v12 = type metadata accessor for P2PDevice.Properties(0);
    sub_1001302E8(*(_QWORD *)(v11 + *(int *)(v12 + 36)), *(_QWORD *)(v11 + *(int *)(v12 + 36) + 8), 0, 0);
  }
  v13 = (_QWORD *)swift_allocObject(&unk_10028D3A8, 48, 7);
  v13[2] = v2;
  v13[3] = a1;
  v13[4] = sub_10013E708;
  v13[5] = v2;
  v14 = type metadata accessor for Completion();
  swift_initStackObject(v14, v17);
  swift_retain_n(v2, 3);
  swift_retain(a1);
  Completion.init(file:line:body:)(0xD00000000000005ELL, 0x8000000100258650, 832, (uint64_t)sub_10013E73C, (uint64_t)v13);
  sub_10003E9E8();
  swift_release();
  return swift_release();
}

void sub_1001324BC()
{
  NSObject *v0;
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  unsigned __int8 v15;
  int v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  int v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[32];
  _QWORD v33[2];
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  uint64_t v51;
  _BYTE v52[24];

  sub_10002626C();
  v2 = (unsigned __int8 *)v0;
  sub_100141198();
  v3 = *((_QWORD *)v0[14].isa + 4);
  if (v3)
  {
    v4 = v3 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties;
    sub_10000B2F8(v3 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties, (uint64_t)&v51, 0);
    v1 = *(_QWORD *)(v4 + *(int *)(type metadata accessor for P2PDevice.Properties(0) + 36));
    v0 = v2;
    sub_10012F880(1);
    v5 = sub_100141158();
    sub_1001302E8(v5, v6, 1, 0);
  }
  if (qword_1002A98F0 != -1)
    swift_once(&qword_1002A98F0, sub_10012901C);
  v7 = sub_10000F6E4();
  sub_10005FE9C(v7, (uint64_t)qword_1002B2620);
  v8 = sub_10002D844();
  if (sub_100040394(v8))
  {
    v9 = (uint8_t *)sub_10000797C(2);
    *(_WORD *)v9 = 0;
    sub_10005FF70((void *)&_mh_execute_header, v0, (os_log_type_t)v1, "flushing local keyboard hid events", v9);
    sub_100007958((uint64_t)v9);
  }

  v50 = v2 + 280;
  sub_100140D3C(v10, (uint64_t)v52);
  HIDReportAccumulator.resetAllValues()();
  sub_100026860();
  v11 = sub_1000B219C();
  sub_1000C251C(v11);
  sub_100140DE0();
  v12 = Completion.init(file:line:)();
  sub_100141438((uint64_t)v12);
  v13 = sub_10000FF50();
  v49 = v2 + 376;
  sub_100140D3C(v13, (uint64_t)v52);
  HIDReportAccumulator.flush(to:)((uint64_t)(v2 + 384));
  sub_100026860();
  v14 = v2[56];
  v15 = v2[57];
  v46 = v15;
  v47 = v14;
  v16 = v2[58];
  v17 = v2[59];
  v44 = v17;
  v45 = v16;
  v18 = v2[60];
  v19 = v2[61];
  v20 = v2[62];
  v48 = v20;
  v21 = v2[63];
  v42 = v21;
  v43 = v19;
  v22 = v2[64];
  v40 = v2[65];
  v41 = v22;
  v23 = v2[66];
  v38 = v2[67];
  v39 = v23;
  v24 = v2[68];
  v36 = v2[69];
  v37 = v24;
  v25 = v2[70];
  v34 = v2[71];
  v35 = v25;
  v26 = sub_100026478((uint64_t)(v2 + 280), (uint64_t)v52);
  v33[1] = v33;
  __chkstk_darwin(v26);
  v32[16] = v14;
  v32[17] = v15;
  v32[18] = v16;
  v32[19] = v17;
  v32[20] = v18;
  v32[21] = v19;
  v32[22] = v20;
  v32[23] = v21;
  v32[24] = v22;
  v27 = v39;
  LOBYTE(v14) = v40;
  v32[25] = v40;
  v32[26] = v39;
  LOBYTE(v19) = v37;
  LOBYTE(v22) = v38;
  v32[27] = v38;
  v32[28] = v37;
  LOBYTE(v16) = v35;
  v28 = v36;
  v32[29] = v36;
  v32[30] = v35;
  v29 = v34;
  v32[31] = v34;
  HIDReportAccumulator.removeValues(matching:)(sub_100140D34, (uint64_t)v32);
  v30 = sub_100026860();
  v31 = sub_100140D3C(v30, (uint64_t)v52);
  __chkstk_darwin(v31);
  v32[-16] = v47;
  v32[-15] = v46;
  v32[-14] = v45;
  v32[-13] = v44;
  v32[-12] = v18;
  v32[-11] = v43;
  v32[-10] = v48;
  v32[-9] = v42;
  v32[-8] = v41;
  v32[-7] = v14;
  v32[-6] = v27;
  v32[-5] = v22;
  v32[-4] = v19;
  v32[-3] = v28;
  v32[-2] = v16;
  v32[-1] = v29;
  HIDReportAccumulator.removeValues(matching:)(sub_100140D34, (uint64_t)&v32[-32]);
  sub_100026860();
  sub_10000E4E0();
}

void sub_1001327BC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;

  v1 = v0;
  v2 = *(void **)(v0 + 216);
  if (v2)
  {
    v3 = v2;
    sub_10002F4FC(1);
    sub_10002F838();

    v4 = *(void **)(v1 + 216);
  }
  else
  {
    v4 = 0;
  }
  *(_QWORD *)(v1 + 216) = 0;

}

uint64_t sub_100132808(unint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  os_log_type_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  os_log_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  os_log_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56[2];

  v8 = v7;
  v54 = a5;
  v15 = type metadata accessor for UUID(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getObjectType(a7);
  OS_dispatch_source.cancel()();
  sub_10002F4FC(1);
  sub_10002F838();
  result = sub_100132C80(a1, a2, a3, 0, 0xF000000000000000, a4);
  if (v20 >> 60 != 15)
  {
    v21 = result;
    v22 = v20;
    v23 = (unsigned __int8 *)sub_100124CD4(a1, a2);
    if (qword_1002A98F0 != -1)
      swift_once(&qword_1002A98F0, sub_10012901C);
    v24 = type metadata accessor for Logger(0);
    sub_100006FB4(v24, (uint64_t)qword_1002B2620);
    swift_retain_n(v23, 2);
    v25 = swift_bridgeObjectRetain_n(a6, 2);
    v26 = Logger.logObject.getter(v25);
    v28 = static os_log_type_t.default.getter(v26, v27);
    v29 = v28;
    if (os_log_type_enabled(v26, v28))
    {
      v30 = swift_slowAlloc(22, -1);
      v53 = v29;
      v31 = v30;
      v52 = swift_slowAlloc(64, -1);
      v56[0] = v52;
      *(_DWORD *)v31 = 136446466;
      v50 = v31 + 4;
      v32 = UUID.init(uuid:)(v23[24], v23[25], v23[26], v23[27], v23[28], v23[29]);
      v51 = v26;
      v33 = UUID.uuidString.getter(v32);
      v49 = a6;
      v35 = v34;
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      v36 = sub_1000599D0(8, v33, v35);
      v37 = static String._fromSubstring(_:)(v36);
      v39 = v38;
      swift_bridgeObjectRelease();
      v55 = sub_100006FCC(v37, v39, v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v50);
      swift_release_n(v23, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v31 + 12) = 2082;
      v40 = v49;
      swift_bridgeObjectRetain(v49);
      v55 = sub_100006FCC(v54, v40, v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v31 + 14);
      swift_bridgeObjectRelease_n(v40, 3);
      v41 = v51;
      _os_log_impl((void *)&_mh_execute_header, v51, (os_log_type_t)v53, "%{public}s: Target Reply: Reject due to %{public}s", (uint8_t *)v31, 0x16u);
      v42 = v52;
      swift_arrayDestroy(v52, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v42, -1, -1);
      swift_slowDealloc(v31, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a6, 2);
      swift_release_n(v23, 2);
    }
    v43 = swift_allocObject(&unk_10028D420, 32, 7);
    *(_QWORD *)(v43 + 16) = v8;
    *(_QWORD *)(v43 + 24) = v23;
    v44 = type metadata accessor for Completion();
    swift_allocObject(v44, 48, 7);
    swift_retain();
    swift_retain();
    Completion.init(file:line:body:)(0xD00000000000005ELL, 0x8000000100258650, 749, (uint64_t)sub_10013F6B0, v43);
    sub_10002517C(v21, v22);
    v45 = HIDReport.storage.getter(v21, v22);
    v47 = v46;
    sub_100022AD8(v21, v22);
    sub_100128DA4();
    sub_100022AEC(v45, v47);
    swift_release();
    swift_release();
    return sub_100022AD8(v21, v22);
  }
  return result;
}

uint64_t sub_100132C80(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  double v26;
  int v27;
  double v28;
  double v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  id v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  void *v52;
  unsigned __int8 *v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  uint64_t v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint64_t v61;
  unsigned __int8 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  void *v69;
  double v70;
  double v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v81;
  unsigned __int8 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  char *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned __int8 *v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;

  v7 = v6;
  v94 = a6;
  v95 = a2;
  v96 = a3;
  v97 = a1;
  v90 = type metadata accessor for EventController.Event(0);
  __chkstk_darwin(v90);
  v91 = (char *)&v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UniversalControlLink.Endpoint(0);
  v92 = *(_QWORD *)(v11 - 8);
  v93 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v90 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UniversalControlLink(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v90 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a5 >> 60 != 15)
  {
    v18 = HIDReport.storage.getter(a4, a5);
    v20 = v19;
    sub_10002517C(v18, v19);
    PointerReport.init(_:)(v18, v20);
    if (v22 >> 60 != 15)
    {
      v23 = v21;
      v24 = v22;
      sub_10013E758(24, v21, v22);
      v26 = (double)v25 / static HIDFixed.scale.getter();
      sub_10013E758(56, v23, v24);
      v28 = (double)v27;
      v29 = static HIDFixed.scale.getter();
      sub_10002F794(v26, v28 / v29);
      sub_100022AD8(v23, v24);
    }
    sub_100022AEC(v18, v20);
  }
  v30 = v96;
  v31 = UniversalControlLink.normalized(for:)(*(_QWORD *)(v7 + 56), *(_QWORD *)(v7 + 64));
  UniversalControlLink.endpoint2.getter(v31);
  v32 = v14;
  v33 = v30;
  v34 = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v32);
  v35 = UniversalControlLink.Endpoint.device.getter(v34);
  v37 = v36;
  (*(void (**)(char *, uint64_t))(v92 + 8))(v13, v93);
  v38 = v97;
  v39 = v95;
  v92 = v35;
  v93 = v37;
  v40 = static UniversalControlUUID.compare(lhs:rhs:)(v97, v95);
  v41 = v33[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_status];
  if (v41 == 2)
  {
    v42 = objc_msgSend((id)type metadata accessor for UniversalControlPreferences(0), "sharedPreferences");
    v43 = UniversalControlPreferences.glueIdleTimeout.getter();

    v44 = (uint64_t)v91;
    swift_storeEnumTagMultiPayload(v91, v90, 5);
    v45 = sub_10013821C(v44, v43);
    sub_1000255F0(v44, type metadata accessor for EventController.Event);
    v46 = v94;
    v47 = *(_QWORD *)(v7 + 144);
    v48 = *(_QWORD *)(v7 + 152);
    v49 = *(_QWORD *)(v7 + 160);
    v50 = *(_QWORD *)(v7 + 168);
    v51 = v39;
    v52 = *(void **)(v7 + 176);
    *(_QWORD *)(v7 + 144) = v38;
    *(_QWORD *)(v7 + 152) = v51;
    *(_QWORD *)(v7 + 160) = v45;
    *(_QWORD *)(v7 + 168) = v46 | 0x4000000000000000;
    *(_QWORD *)(v7 + 176) = v33;
    swift_retain();
    v53 = v33;
    sub_10013C6B8(v47, v48, v49, v50, v52);
    v54 = 2;
  }
  else if ((v41 & 1) != 0)
  {
    AnyCancellable.cancel()();
    if (qword_1002A98F0 != -1)
      swift_once(&qword_1002A98F0, sub_10012901C);
    v55 = type metadata accessor for Logger(0);
    v56 = sub_100006FB4(v55, (uint64_t)qword_1002B2620);
    v57 = Logger.logObject.getter(v56);
    v59 = static os_log_type_t.default.getter(v57, v58);
    if (os_log_type_enabled(v57, v59))
    {
      v60 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v60 = 0;
      _os_log_impl((void *)&_mh_execute_header, v57, v59, "Target Reply: Reject (Backed out of magic glue)", v60, 2u);
      swift_slowDealloc(v60, -1, -1);
    }

    sub_10018FD70();
    if (v40)
      sub_100192DF4();
    sub_10012E48C(0, 0, 1);
    v61 = *(_QWORD *)(v7 + 520);
    *(_QWORD *)(v7 + 520) = 0;
    v62 = *(_BYTE *)(v7 + 528);
    *(_BYTE *)(v7 + 528) = 2;
    sub_100031B90(v61, v62);
    v98 = 2uLL;
    v99 = 0;
    v100 = 0;
    v102 = 0;
    v103 = 0;
    v101 = 0xA000000000000000;
    sub_10003D794(&v98);
    sub_1001324BC();
    sub_1001388B8();
    v63 = *(_QWORD *)(v7 + 184) + 1;
    do
    {
      v64 = v63;
      v63 = 1;
    }
    while (!v64);
    *(_QWORD *)(v7 + 184) = v64;
    v65 = *(_QWORD *)(v7 + 144);
    v66 = *(_QWORD *)(v7 + 152);
    v67 = *(_QWORD *)(v7 + 160);
    v68 = *(_QWORD *)(v7 + 168);
    v69 = *(void **)(v7 + 176);
    *(_QWORD *)(v7 + 144) = 0;
    *(_QWORD *)(v7 + 152) = 0;
    *(_QWORD *)(v7 + 160) = 0;
    *(_OWORD *)(v7 + 168) = xmmword_10021DD40;
    sub_10013C6B8(v65, v66, v67, v68, v69);
    v54 = 1;
  }
  else
  {
    sub_1001493AC();
    swift_bridgeObjectRelease();
    sub_100192B44();
    if (v40)
      sub_100192B44();
    v81 = *(_QWORD *)(v7 + 520);
    *(_QWORD *)(v7 + 520) = 0;
    v82 = *(_BYTE *)(v7 + 528);
    *(_BYTE *)(v7 + 528) = 2;
    sub_100031B90(v81, v82);
    sub_1001388B8();
    sub_1001322D0(v94);
    if (qword_1002A9840 != -1)
      swift_once(&qword_1002A9840, sub_10004A0E8);
    Agent.preventSystemActiveAppearance()();
    v83 = *(_QWORD *)(v7 + 184) + 1;
    do
    {
      v84 = v83;
      v83 = 1;
    }
    while (!v84);
    *(_QWORD *)(v7 + 184) = v84;
    v85 = *(_QWORD *)(v7 + 144);
    v86 = *(_QWORD *)(v7 + 152);
    v87 = *(_QWORD *)(v7 + 160);
    v88 = *(_QWORD *)(v7 + 168);
    v89 = *(void **)(v7 + 176);
    *(_QWORD *)(v7 + 144) = 0;
    *(_QWORD *)(v7 + 152) = 0;
    *(_QWORD *)(v7 + 160) = 0;
    *(_OWORD *)(v7 + 168) = xmmword_10021DD40;
    sub_10013C6B8(v85, v86, v87, v88, v89);
    v54 = 0;
  }
  v70 = *(double *)&v33[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_reveal];
  v71 = sub_10002DDEC();
  v72 = sub_1000E6070(v54, *(_QWORD *)&v33[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_localLength], v70, v71);
  v74 = v72;
  v75 = v73;
  if (v40)
  {
    v76 = HIDReport.storage.getter(v72, v73);
    v78 = v77;
    v79 = type metadata accessor for Completion();
    swift_allocObject(v79, 48, 7);
    Completion.init(file:line:)();
    sub_100124E24(v76, v78, v92, v93);
    swift_release();
    sub_100022AEC(v76, v78);
    sub_100022AEC(v74, v75);
    return 0;
  }
  return v74;
}

#error "100133394: call analysis failed (funcsize=67)"

uint64_t sub_1001333E4(unsigned __int8 *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  Swift::String v16;
  Swift::String v17;
  _QWORD v19[2];

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(32, 1);
  v19[1] = v6;
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  String.append(_:)(v7);
  v8 = UUID.init(uuid:)(a1[24], a1[25], a1[26], a1[27], a1[28], a1[29]);
  v9 = UUID.uuidString.getter(v8);
  v11 = v10;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v12 = sub_1000599D0(8, v9, v11);
  v13 = static String._fromSubstring(_:)(v12);
  v15 = v14;
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = v13;
  v16._object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._object = (void *)0x8000000100258710;
  v17._countAndFlagsBits = 0xD000000000000020;
  String.append(_:)(v17);
  return v19[0];
}

uint64_t sub_100133524()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  sub_10002626C();
  v2 = v1;
  v4 = v3;
  if (qword_1002A98F0 != -1)
    swift_once(&qword_1002A98F0, sub_10012901C);
  v5 = sub_10000F6E4();
  sub_10005FE9C(v5, (uint64_t)qword_1002B2620);
  v6 = sub_10002D844();
  if (os_log_type_enabled(v0, v6))
  {
    v7 = (uint8_t *)sub_10000797C(2);
    *(_WORD *)v7 = 0;
    sub_10005FF70((void *)&_mh_execute_header, v0, v6, "sending TargetConnect message", v7);
    sub_100007958((uint64_t)v7);
  }

  v8 = sub_1000E641C();
  v10 = v9;
  v11 = HIDReport.storage.getter(v8, v9);
  v13 = v12;
  sub_100124E24(v11, v12, v4, v2);
  sub_100022AEC(v11, v13);
  return sub_100022AEC(v8, v10);
}

void sub_100133640(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];

  if (qword_1002A9870 != -1)
    swift_once(&qword_1002A9870, sub_1000876CC);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_100006FB4(v4, (uint64_t)qword_1002B6EB0);
  v6 = Logger.logObject.getter(v5);
  v8 = static os_log_type_t.default.getter(v6, v7);
  if (os_log_type_enabled(v6, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v8, "prepareMoveTargetToLocal: dismissing event capture layer", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  swift_beginAccess(a1 + 224, v15, 0, 0);
  if (*(_QWORD *)(a1 + 248))
  {
    sub_10009513C(a1 + 224, (uint64_t)v12);
    v10 = v13;
    v11 = v14;
    sub_10000DBE4(v12, v13);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(a2, v10, v11);
    sub_100005988(v12);
  }
}

void sub_100133780(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  os_log_type_t v10;
  uint8_t *v11;
  int v12;
  unsigned __int8 v13;
  int v14;
  unsigned __int8 v15;
  int v16;
  int v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  _BYTE v30[16];
  char v31;
  unsigned __int8 v32;
  char v33;
  unsigned __int8 v34;
  char v35;
  char v36;
  unsigned __int8 v37;
  unsigned __int8 v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  _QWORD v47[2];
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  unsigned __int8 *v64;
  unsigned __int8 *v65;
  uint64_t v66;
  _BYTE v67[24];

  v66 = a1;
  v3 = a2 + 328;
  swift_beginAccess(a2 + 328, v67, 33, 0);
  v65 = v3;
  HIDReportAccumulator.resetAllValues()();
  swift_endAccess(v67);
  v4 = type metadata accessor for Completion();
  swift_allocObject(v4, 48, 7);
  v5 = Completion.init(file:line:)();
  sub_10012B2FC((uint64_t)v5);
  swift_release();
  if (qword_1002A98F0 != -1)
    swift_once(&qword_1002A98F0, sub_10012901C);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_100006FB4(v6, (uint64_t)qword_1002B2620);
  v8 = Logger.logObject.getter(v7);
  v10 = static os_log_type_t.default.getter(v8, v9);
  if (os_log_type_enabled(v8, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v10, "flushing local pointer hid events", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  v64 = a2 + 424;
  swift_beginAccess(a2 + 424, v67, 33, 0);
  HIDReportAccumulator.flush(to:)((uint64_t)(a2 + 432));
  swift_endAccess(v67);
  v12 = a2[56];
  v13 = a2[57];
  v60 = v13;
  v61 = v12;
  v14 = a2[58];
  v15 = a2[59];
  v58 = v15;
  v59 = v14;
  v16 = a2[60];
  v17 = a2[61];
  v18 = a2[62];
  v62 = v18;
  v63 = v17;
  v19 = a2[63];
  v56 = v19;
  v57 = v16;
  v20 = a2[64];
  v54 = a2[65];
  v55 = v20;
  v21 = a2[66];
  v52 = a2[67];
  v53 = v21;
  v22 = a2[68];
  v50 = a2[69];
  v51 = v22;
  v23 = a2[70];
  v48 = a2[71];
  v49 = v23;
  swift_beginAccess(v65, v67, 33, 0);
  v47[1] = v47;
  __chkstk_darwin(v24);
  v31 = v12;
  v32 = v13;
  v33 = v14;
  v34 = v15;
  v35 = v16;
  v36 = v17;
  v37 = v18;
  v38 = v19;
  LOBYTE(v16) = v54;
  v25 = v55;
  v39 = v55;
  v40 = v54;
  v26 = v52;
  LOBYTE(v17) = v53;
  v41 = v53;
  v42 = v52;
  LOBYTE(v12) = v50;
  v27 = v51;
  v43 = v51;
  v44 = v50;
  LOBYTE(v14) = v48;
  v28 = v49;
  v45 = v49;
  v46 = v48;
  HIDReportAccumulator.removeValues(matching:)(sub_100140D34, (uint64_t)v30);
  swift_endAccess(v67);
  swift_beginAccess(v64, v67, 33, 0);
  __chkstk_darwin(v29);
  v31 = v61;
  v32 = v60;
  v33 = v59;
  v34 = v58;
  v35 = v57;
  v36 = v63;
  v37 = v62;
  v38 = v56;
  v39 = v25;
  v40 = v16;
  v41 = v17;
  v42 = v26;
  v43 = v27;
  v44 = v12;
  v45 = v28;
  v46 = v14;
  HIDReportAccumulator.removeValues(matching:)(sub_100140D34, (uint64_t)v30);
  swift_endAccess(v67);
  if (v66)
    AnyCancellable.cancel()();
}

void sub_100133AD8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];

  if (a1)
  {
    a4(a3);
  }
  else
  {
    if (qword_1002A98F0 != -1)
      swift_once(&qword_1002A98F0, sub_10012901C);
    v7 = type metadata accessor for Logger(0);
    v8 = sub_100006FB4(v7, (uint64_t)qword_1002B2620);
    v9 = Logger.logObject.getter(v8);
    v11 = static os_log_type_t.default.getter(v9, v10);
    if (os_log_type_enabled(v9, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v11, "extending click shield until drag start", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }

    if (qword_1002A9930 != -1)
      swift_once(&qword_1002A9930, sub_100184FA0);
    swift_beginAccess(&static EventDispatcher.shared, v15, 0, 0);
    v13 = static EventDispatcher.shared;
    v14 = swift_allocObject(&unk_10028D3D0, 32, 7);
    *(_QWORD *)(v14 + 16) = a2;
    *(_QWORD *)(v14 + 24) = a3;
    swift_retain(v13);
    swift_retain(a2);
    swift_retain(a3);
    sub_100184BB4((uint64_t)sub_10013E74C, v14);
    swift_release();
    swift_release();
    a4(0);
    sub_1001324BC();
  }
}

uint64_t sub_100133C90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;

  if (qword_1002A98F0 != -1)
    swift_once(&qword_1002A98F0, sub_10012901C);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_100006FB4(v4, (uint64_t)qword_1002B2620);
  v6 = Logger.logObject.getter(v5);
  v8 = static os_log_type_t.default.getter(v6, v7);
  if (os_log_type_enabled(v6, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v8, "click shield caught incoming event, starting drag and dismissing", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  swift_retain(a3);
  sub_10003E940(0xD00000000000005ELL, 0x8000000100258650, 838, (uint64_t)j___s7Combine14AnyCancellableC6cancelyyF, a3);
  swift_release();
  return 1;
}

unint64_t sub_100133DB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = v3;
  result = sub_10012B270(a3);
  if ((v7 & 1) == 0)
  {
    v8 = sub_100124CD4(result, v6);
    v9 = swift_allocObject(&unk_10028D560, 32, 7);
    *(_QWORD *)(v9 + 16) = v8;
    *(_QWORD *)(v9 + 24) = v4;
    v10 = type metadata accessor for Completion();
    swift_allocObject(v10, 48, 7);
    swift_retain();
    swift_retain();
    Completion.init(file:line:body:)(0xD00000000000005ELL, 0x8000000100258650, 965, (uint64_t)sub_10013F940, v9);
    sub_100128DA4();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_100133EEC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  if (result)
  {
    v1 = result;
    v2 = type metadata accessor for Completion();
    swift_allocObject(v2, 48, 7);
    swift_errorRetain(v1);
    swift_errorRetain(v1);
    v3 = Completion.init(file:line:)();
    sub_100111C64((uint64_t)v3, v1);
    swift_release();
    swift_errorRelease(v1);
    sub_100126848(0, 0, 1);
    return swift_errorRelease(v1);
  }
  return result;
}

void sub_100133FA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_100133DB0(a1, a2, a3);
  swift_getObjectType(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 64));
  OS_dispatch_source_data_or.or(data:)(1uLL);
  sub_1000050D4();
}

uint64_t sub_100133FDC()
{
  uint64_t v0;

  sub_100026600();
  sub_1000265F8();
  swift_release();
  swift_release();
  swift_release();
  sub_100025A28(v0 + 72, (uint64_t *)&unk_1002ABD50);
  swift_release();
  swift_release();

  swift_release();
  sub_10013C6B8(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168), *(void **)(v0 + 176));
  swift_bridgeObjectRelease();
  sub_10002D108(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 208));

  sub_100025A28(v0 + 224, &qword_1002AAF30);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10013DBF8((_QWORD *)(v0 + 280));
  sub_10013DBF8((_QWORD *)(v0 + 328));
  sub_10013DBF8((_QWORD *)(v0 + 376));
  sub_10013DBF8((_QWORD *)(v0 + 424));
  swift_bridgeObjectRelease();
  sub_100031B90(*(_QWORD *)(v0 + 520), *(_BYTE *)(v0 + 528));
  return v0;
}

uint64_t sub_1001340BC()
{
  uint64_t v0;

  sub_100133FDC();
  return swift_deallocClassInstance(v0, 544, 7);
}

void sub_1001340E0(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  _QWORD v22[20];
  uint64_t v23;

  v2 = v1;
  v4 = type metadata accessor for HIDUniversalSenderID(0);
  __chkstk_darwin(v4);
  v23 = type metadata accessor for UUID(0);
  v22[18] = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v22[19] = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000055B0((uint64_t *)&unk_1002B2860);
  v7 = __chkstk_darwin(v6);
  v9 = (_QWORD *)((char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = v2[18];
  v11 = v2[19];
  v12 = v2[20];
  v13 = v2[21];
  v14 = v2[22];
  v15 = (uint64_t)v9 + *(int *)(v7 + 48);
  *v9 = v10;
  v9[1] = v11;
  v9[2] = v12;
  v9[3] = v13;
  v9[4] = v14;
  sub_10005F428(a1, v15, type metadata accessor for EventController.Event);
  if (v13 >> 62)
  {
    if (v13 >> 62 == 1)
    {
      v16 = type metadata accessor for EventController.Event(0);
      v17 = (char *)&loc_100134234 + 4 * word_1002273AC[swift_getEnumCaseMultiPayload(v15, v16)];
      __asm { BR              X10 }
    }
    v20 = type metadata accessor for EventController.Event(0);
    v21 = (char *)sub_1001346E4 + 4 * word_1002273A0[swift_getEnumCaseMultiPayload(v15, v20)];
    __asm { BR              X10 }
  }
  v22[16] = v10 >> 24;
  v22[17] = v10 >> 16;
  v22[14] = v10 >> 40;
  v22[15] = HIDWORD(v10);
  v22[12] = HIBYTE(v10);
  v22[13] = HIWORD(v10);
  v22[10] = v11 >> 16;
  v22[11] = v11 >> 8;
  v22[8] = HIDWORD(v11);
  v22[9] = v11 >> 24;
  v22[6] = HIWORD(v11);
  v22[7] = v11 >> 40;
  v18 = type metadata accessor for EventController.Event(0);
  v19 = (char *)&loc_1001344B0 + 4 * word_1002273B8[swift_getEnumCaseMultiPayload(v15, v18)];
  __asm { BR              X10 }
}

uint64_t sub_1001346E4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = sub_100135604(*(unsigned __int8 **)v0, v1, v2);
  sub_100022AEC(v1, v2);
  swift_release();
  return v3;
}

uint64_t sub_100134718()
{
  uint64_t v0;
  void *v1;
  unsigned __int8 **v2;
  uint64_t v3;
  id v4;
  unsigned __int8 *v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  swift_unknownObjectRetain(v0);
  v4 = v1;
  swift_unknownObjectRelease(v0);
  v5 = *v2;
  sub_100022AEC((uint64_t)v2[1], (unint64_t)v2[2]);
  if (qword_1002A98F0 != -1)
    swift_once(&qword_1002A98F0, sub_10012901C);
  v6 = type metadata accessor for Logger(0);
  sub_100006FB4(v6, (uint64_t)qword_1002B2620);
  swift_retain_n(v5, 2);
  v7 = v4;
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc(22, -1);
    v11 = swift_slowAlloc(64, -1);
    *(_QWORD *)(v3 - 96) = v11;
    *(_DWORD *)v10 = 136446466;
    v12 = *(_QWORD *)(v3 - 120);
    v13 = UUID.init(uuid:)(v5[24], v5[25], v5[26], v5[27], v5[28], v5[29]);
    v14 = UUID.uuidString.getter(v13);
    v16 = v15;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 - 128) + 8))(v12, *(_QWORD *)(v3 - 112));
    v17 = sub_1000599D0(8, v14, v16);
    v18 = static String._fromSubstring(_:)(v17);
    v20 = v19;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v3 - 104) = sub_100006FCC(v18, v20, (uint64_t *)(v3 - 96));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 104, v3 - 96, v10 + 4);
    swift_release_n(v5, 2);
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2082;
    v21 = type metadata accessor for UniversalControlLink(0);
    sub_10013FC28((unint64_t *)&unk_1002AEEB0, (uint64_t (*)(uint64_t))&type metadata accessor for UniversalControlLink);
    v23 = dispatch thunk of CustomStringConvertible.description.getter(v21, v22);
    *(_QWORD *)(v3 - 104) = sub_100006FCC(v23, v24, (uint64_t *)(v3 - 96));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 104, v3 - 96, v10 + 14);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s: out-of-order TargetReady, glue already active on link=%{public}s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v11, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);
    swift_release();

  }
  else
  {

    swift_release_n(v5, 3);
  }
  return 0;
}

void sub_100134D04()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  id v22;

  *(_QWORD *)(v3 - 232) = v0;
  v4 = qword_1002A98F0;
  swift_retain();
  v5 = v1;
  if (v4 != -1)
    swift_once(&qword_1002A98F0, sub_10012901C);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_100006FB4(v6, (uint64_t)qword_1002B2620);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    *(_QWORD *)(v3 - 248) = v11;
    *(_QWORD *)(v3 - 96) = v11;
    *(_QWORD *)(v3 - 240) = v5;
    *(_DWORD *)v10 = 136446210;
    *(_QWORD *)(v3 - 256) = v10 + 4;
    v12 = *(_QWORD *)(v3 - 120);
    v13 = UUID.init(uuid:)(v2, *(_QWORD *)(v3 - 232), *(_QWORD *)(v3 - 136), *(_QWORD *)(v3 - 144), *(_QWORD *)(v3 - 152), *(_QWORD *)(v3 - 160));
    v14 = UUID.uuidString.getter(v13);
    v16 = v15;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 - 128) + 8))(v12, *(_QWORD *)(v3 - 112));
    v17 = sub_1000599D0(8, v14, v16);
    v18 = static String._fromSubstring(_:)(v17);
    v20 = v19;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v3 - 104) = sub_100006FCC(v18, v20, (uint64_t *)(v3 - 96));
    v5 = *(id *)(v3 - 240);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 104, v3 - 96, *(_QWORD *)(v3 - 256));
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s: timeout during HID accumulation waiting phase", v10, 0xCu);
    v21 = *(_QWORD *)(v3 - 248);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }

  AnyCancellable.cancel()();
  if (v1)
  {
    v22 = v5;
    sub_10002F4FC(1);
    sub_10002F838();
    JUMPOUT(0x100135508);
  }
  JUMPOUT(0x100135524);
}

void sub_100134F10()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  id v24;

  *(_QWORD *)(v4 - 232) = v1;
  v5 = qword_1002A98F0;
  swift_unknownObjectRetain(v0);
  swift_retain();
  v6 = v2;
  if (v5 != -1)
    swift_once(&qword_1002A98F0, sub_10012901C);
  v7 = type metadata accessor for Logger(0);
  v8 = sub_100006FB4(v7, (uint64_t)qword_1002B2620);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (_DWORD *)swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    *(_QWORD *)(v4 - 248) = v12;
    *(_QWORD *)(v4 - 96) = v12;
    *(_QWORD *)(v4 - 240) = v6;
    *(_QWORD *)(v4 - 256) = v11;
    *v11 = 136446210;
    *(_QWORD *)(v4 - 264) = v11 + 1;
    v13 = *(_QWORD *)(v4 - 120);
    v14 = UUID.init(uuid:)(v3, *(_QWORD *)(v4 - 232), *(_QWORD *)(v4 - 136), *(_QWORD *)(v4 - 144), *(_QWORD *)(v4 - 152), *(_QWORD *)(v4 - 160));
    v15 = UUID.uuidString.getter(v14);
    v17 = v16;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v4 - 128) + 8))(v13, *(_QWORD *)(v4 - 112));
    v18 = sub_1000599D0(8, v15, v17);
    v19 = static String._fromSubstring(_:)(v18);
    v21 = v20;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v4 - 104) = sub_100006FCC(v19, v21, (uint64_t *)(v4 - 96));
    v6 = *(id *)(v4 - 240);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 104, v4 - 96, *(_QWORD *)(v4 - 264));
    swift_bridgeObjectRelease();
    v22 = *(uint8_t **)(v4 - 256);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "%{public}s: timeout during HID accumulation waiting phase", v22, 0xCu);
    v23 = *(_QWORD *)(v4 - 248);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v22, -1, -1);
  }

  swift_getObjectType(v0);
  OS_dispatch_source.cancel()();
  AnyCancellable.cancel()();
  if (v2)
  {
    v24 = v6;
    JUMPOUT(0x1001354F0);
  }
  JUMPOUT(0x10013551CLL);
}

void sub_100135134()
{
  unsigned __int8 **v0;
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v2 = *v0;
  sub_100022AEC((uint64_t)v0[1], (unint64_t)v0[2]);
  if (qword_1002A98F0 != -1)
    swift_once(&qword_1002A98F0, sub_10012901C);
  v3 = type metadata accessor for Logger(0);
  sub_100006FB4(v3, (uint64_t)qword_1002B2620);
  v4 = swift_retain_n(v2, 2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    *(_DWORD *)v7 = 136446210;
    *(_QWORD *)(v1 - 96) = v8;
    v9 = *(_QWORD *)(v1 - 120);
    v10 = UUID.init(uuid:)(v2[24], v2[25], v2[26], v2[27], v2[28], v2[29]);
    v11 = UUID.uuidString.getter(v10);
    v13 = v12;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 128) + 8))(v9, *(_QWORD *)(v1 - 112));
    v14 = sub_1000599D0(8, v11, v13);
    v15 = static String._fromSubstring(_:)(v14);
    v17 = v16;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v1 - 104) = sub_100006FCC(v15, v17, (uint64_t *)(v1 - 96));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 - 104, v1 - 96, v7 + 4);
    swift_release_n(v2, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s: unexpected TargetReady in idle state, rejecting", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {

    swift_release_n(v2, 2);
  }
  sub_1000E6070(1, 0, 0.0, 0.0);
  JUMPOUT(0x1001354C4);
}

void sub_1001352F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = sub_1000055B0((uint64_t *)&unk_1002B2870);
  sub_10005F3FC(v1 + *(int *)(v4 + 64), v0, type metadata accessor for HIDUniversalSenderID);
  sub_10012EC28();
  sub_100022AEC(v2, v3);
  swift_release();
  sub_1000255F0(v0, type metadata accessor for HIDUniversalSenderID);
  JUMPOUT(0x100135490);
}

uint64_t sub_100135604(unsigned __int8 *a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  uint64_t v39;
  os_log_type_t v40;
  _BOOL4 v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint8_t *v57;
  void (*v58)(uint64_t, uint64_t, uint64_t);
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t);
  uint64_t (*v67)(char *, char *, uint64_t);
  char *v68;
  uint64_t v69;
  NSObject *v70;
  uint64_t v71;
  os_log_type_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  NSObject *v112;
  os_log_type_t v113;
  uint8_t *v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  char *v127;
  void (*v128)(uint64_t, uint64_t);
  uint64_t v129;
  int v130;
  uint64_t v131;
  NSObject *v132;
  os_log_type_t v133;
  uint8_t *v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v150;
  BOOL v151;
  uint64_t v152;
  char *v153;
  BOOL v154;
  uint64_t v155;
  uint64_t v156;
  char v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  double v164;
  double v165;
  double v166;
  double v167;
  unsigned __int8 *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  void (*v178)(uint64_t, uint64_t, uint64_t);
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  char *v190;
  id v191;
  uint64_t v192;
  uint64_t v193;
  id v194;
  double v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  void *v201;
  uint64_t v202;
  id v203;
  char *v204;
  uint64_t v205;
  char v206;
  char *v207;
  void (*v208)(uint64_t, uint64_t);
  uint64_t v209;
  uint64_t v210;
  char *v211;
  char *v212;
  unsigned int v213;
  char *v214;
  uint64_t v215;
  char *v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  char *v225;
  uint64_t v226;
  uint64_t v227;
  void (*v228)(uint64_t, uint64_t, uint64_t);
  void (*v229)(char *, uint64_t);
  _QWORD *v230;
  unsigned __int8 *v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  _QWORD *v235;
  uint64_t v236;
  uint64_t v237;
  char *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  char *v254;
  char *v255;
  char v256[8];
  uint64_t v257;
  char v258[8];
  uint64_t v259;
  char v260[8];
  uint64_t v261;
  char v262[8];

  v4 = v3;
  v224 = a3;
  v223 = a2;
  v218 = type metadata accessor for EventController.Event(0);
  __chkstk_darwin(v218);
  v214 = (char *)&v209 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v215 = sub_1000055B0(&qword_1002B2890);
  __chkstk_darwin(v215);
  v8 = (char *)&v209 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000055B0(&qword_1002B2898);
  v10 = __chkstk_darwin(v9);
  v210 = (uint64_t)&v209 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v216 = (char *)&v209 - v13;
  __chkstk_darwin(v12);
  v219 = (uint64_t)&v209 - v14;
  v15 = sub_1000055B0((uint64_t *)&unk_1002AC150);
  v16 = __chkstk_darwin(v15);
  v220 = (char *)&v209 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v221 = (uint64_t)&v209 - v19;
  __chkstk_darwin(v18);
  v222 = (uint64_t)&v209 - v20;
  v21 = type metadata accessor for UniversalControlLink(0);
  v227 = *(_QWORD *)(v21 - 8);
  v22 = __chkstk_darwin(v21);
  v211 = (char *)&v209 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v212 = (char *)&v209 - v25;
  __chkstk_darwin(v24);
  v225 = (char *)&v209 - v26;
  v27 = type metadata accessor for UniversalControlDevice.DeviceType(0);
  v28 = *(_QWORD **)(v27 - 8);
  v29 = __chkstk_darwin(v27);
  v232 = (char *)&v209 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __chkstk_darwin(v29);
  v254 = (char *)&v209 - v32;
  __chkstk_darwin(v31);
  v34 = (char *)&v209 - v33;
  v237 = type metadata accessor for UUID(0);
  v236 = *(_QWORD *)(v237 - 8);
  __chkstk_darwin(v237);
  v238 = (char *)&v209 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v241 = a1[24];
  v242 = a1[25];
  v248 = a1[26];
  v249 = a1[27];
  v250 = a1[28];
  v251 = a1[29];
  v252 = a1[30];
  v253 = a1[31];
  v240 = a1[32];
  v239 = a1[33];
  v247 = a1[34];
  v246 = a1[35];
  v245 = a1[36];
  v36 = a1[37];
  v244 = a1[38];
  v231 = a1;
  v243 = a1[39];
  if (qword_1002A98F0 != -1)
    swift_once(&qword_1002A98F0, sub_10012901C);
  v37 = type metadata accessor for Logger(0);
  v234 = sub_100006FB4(v37, (uint64_t)qword_1002B2620);
  v38 = Logger.logObject.getter(v234);
  v40 = static os_log_type_t.default.getter(v38, v39);
  v41 = os_log_type_enabled(v38, v40);
  v226 = v21;
  v255 = v34;
  v235 = v4;
  v217 = v8;
  v230 = v28;
  v233 = v36;
  if (v41)
  {
    v42 = (uint8_t *)swift_slowAlloc(12, -1);
    v43 = swift_slowAlloc(32, -1);
    v228 = (void (*)(uint64_t, uint64_t, uint64_t))v27;
    v44 = v43;
    v257 = v43;
    *(_DWORD *)v42 = 136446210;
    v45 = v238;
    v46 = UUID.init(uuid:)(v241, v242, v248, v249, v250, v251);
    v47 = UUID.uuidString.getter(v46);
    v49 = v48;
    (*(void (**)(char *, uint64_t))(v236 + 8))(v45, v237);
    v50 = sub_1000599D0(8, v47, v49);
    v52 = v51;
    v53 = static String._fromSubstring(_:)(v50);
    v55 = v54;
    swift_bridgeObjectRelease(v52);
    v261 = sub_100006FCC(v53, v55, &v257);
    v34 = v255;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v261, v262, v42 + 4);
    swift_bridgeObjectRelease(v55);
    _os_log_impl((void *)&_mh_execute_header, v38, v40, "IDS %{public}s: === Target Begin ===", v42, 0xCu);
    swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
    v56 = v44;
    v27 = (uint64_t)v228;
    swift_slowDealloc(v56, -1, -1);
    v57 = v42;
    v28 = v230;
    v4 = v235;
    swift_slowDealloc(v57, -1, -1);
  }

  v58 = (void (*)(uint64_t, uint64_t, uint64_t))v28[13];
  v213 = enum case for UniversalControlDevice.DeviceType.realityDevice(_:);
  v228 = v58;
  ((void (*)(char *))v58)(v34);
  v59 = (char *)v4[17];
  v60 = &v59[OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView];
  swift_beginAccess(&v59[OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView], &v261, 0, 0);
  v61 = type metadata accessor for SyncView(0);
  v62 = &v60[*(int *)(v61 + 20)];
  v63 = type metadata accessor for SyncViewLocalData(0);
  swift_retain(*(_QWORD *)&v62[*(int *)(v63 + 28)]);
  v64 = v254;
  dispatch thunk of UniversalControlDevice.deviceType.getter(v65);
  swift_release();
  LOBYTE(v62) = static UniversalControlDevice.DeviceType.== infix(_:_:)(v64, v34);
  v66 = (void (*)(char *, uint64_t))v28[1];
  v66(v64, v27);
  if ((v62 & 1) == 0)
  {
    v229 = v66;
    v94 = *(_QWORD *)&v59[OBJC_IVAR____TtC13EnsembleAgent14SyncController_devices];
    v95 = (uint64_t)v231;
    swift_retain(v231);
    swift_bridgeObjectRetain(v94);
    LOBYTE(v95) = sub_1001387A0(v96, v95);
    v97 = swift_bridgeObjectRelease(v94);
    if ((v95 & 1) == 0)
    {
      v112 = Logger.logObject.getter(v97);
      v113 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v112, v113))
      {
        v114 = (uint8_t *)swift_slowAlloc(12, -1);
        v115 = swift_slowAlloc(32, -1);
        v257 = v115;
        *(_DWORD *)v114 = 136446210;
        v228 = (void (*)(uint64_t, uint64_t, uint64_t))v27;
        v116 = v238;
        v117 = UUID.init(uuid:)(v241, v242, v248, v249, v250, v251);
        v118 = UUID.uuidString.getter(v117);
        v120 = v119;
        (*(void (**)(char *, uint64_t))(v236 + 8))(v116, v237);
        v121 = sub_1000599D0(8, v118, v120);
        v123 = v122;
        v124 = static String._fromSubstring(_:)(v121);
        v126 = v125;
        swift_bridgeObjectRelease(v123);
        v127 = v255;
        v259 = sub_100006FCC(v124, v126, &v257);
        v27 = (uint64_t)v228;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v259, v260, v114 + 4);
        swift_bridgeObjectRelease(v126);
        _os_log_impl((void *)&_mh_execute_header, v112, v113, "IDS %{public}s: Target Reply: Reject (Incoming Peer Not Visible)", v114, 0xCu);
        swift_arrayDestroy(v115, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v115, -1, -1);
        swift_slowDealloc(v114, -1, -1);

        v66 = v229;
      }
      else
      {

        v66 = v229;
        v127 = v255;
      }
      v110 = sub_1000E6070(1, 0, 0.0, 0.0);
      v111 = v127;
      goto LABEL_23;
    }
    v232 = v59;
    swift_retain(*(_QWORD *)&v60[*(int *)(v61 + 20) + *(int *)(v63 + 28)]);
    v99 = dispatch thunk of UniversalControlDevice.id.getter(v98);
    v101 = v100;
    swift_release();
    v102 = v221;
    v103 = v223;
    v104 = v224;
    sub_1000E57F4(v223, v224, v221);
    v105 = v226;
    v106 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v102, 1, v226);
    v107 = v241 | (v242 << 8);
    v209 = v240 | (v239 << 8);
    v108 = v233;
    if (v106 == 1)
    {
      sub_100025A28(v102, (uint64_t *)&unk_1002AC150);
      v109 = v222;
      _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v222, 1, 1, v105);
    }
    else
    {
      v109 = v222;
      UniversalControlLink.normalized(for:)(v99, v101);
      v128 = *(void (**)(uint64_t, uint64_t))(v227 + 8);
      v128(v102, v105);
      _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v109, 0, 1, v105);
      if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v109, 1, v105) != 1)
      {
        v152 = v227;
        v153 = v212;
        (*(void (**)(char *, uint64_t, uint64_t))(v227 + 32))(v212, v109, v105);
        v150 = (uint64_t)v225;
        (*(void (**)(char *, char *, uint64_t))(v152 + 16))(v225, v153, v105);
        v154 = sub_10014588C(v150);
        v155 = v105;
        v151 = v154;
        v128((uint64_t)v153, v155);
        v34 = v255;
        goto LABEL_27;
      }
    }
    sub_100025A28(v109, (uint64_t *)&unk_1002AC150);
    v129 = (uint64_t)v220;
    sub_100148650();
    v130 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v129, 1, v105);
    v34 = v255;
    if (v130 == 1)
    {
      sub_100025A28(v129, (uint64_t *)&unk_1002AC150);
      v132 = Logger.logObject.getter(v131);
      v133 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v132, v133))
      {
        v134 = (uint8_t *)swift_slowAlloc(12, -1);
        v135 = swift_slowAlloc(32, -1);
        v257 = v135;
        *(_DWORD *)v134 = 136446210;
        v228 = (void (*)(uint64_t, uint64_t, uint64_t))v27;
        v136 = v238;
        v137 = UUID.init(uuid:)(v241, v242, v248, v249, v250, v251);
        v138 = UUID.uuidString.getter(v137);
        v139 = v34;
        v141 = v140;
        (*(void (**)(char *, uint64_t))(v236 + 8))(v136, v237);
        v142 = sub_1000599D0(8, v138, v141);
        v144 = v143;
        v145 = static String._fromSubstring(_:)(v142);
        v147 = v146;
        swift_bridgeObjectRelease(v144);
        v148 = v145;
        v34 = v139;
        v259 = sub_100006FCC(v148, v147, &v257);
        v27 = (uint64_t)v228;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v259, v260, v134 + 4);
        swift_bridgeObjectRelease(v147);
        _os_log_impl((void *)&_mh_execute_header, v132, v133, "IDS %{public}s: Target Reply: Reject (No Link to Peer)", v134, 0xCu);
        swift_arrayDestroy(v135, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v135, -1, -1);
        swift_slowDealloc(v134, -1, -1);
      }

      v66 = v229;
      goto LABEL_13;
    }
    v150 = (uint64_t)v225;
    (*(void (**)(char *, uint64_t, uint64_t))(v227 + 32))(v225, v129, v105);
    v151 = 0;
LABEL_27:
    v156 = v150;
    v157 = sub_100148B50();
    v158 = v219;
    if ((v157 & 1) == 0)
    {
      v110 = sub_1000E6070(1, 0, 0.0, 0.0);
      (*(void (**)(uint64_t, uint64_t))(v227 + 8))(v156, v226);
      v175 = v34;
      v176 = v27;
LABEL_48:
      v229(v175, v176);
      return v110;
    }
    v159 = v107 | (v248 << 16) | (v249 << 24) | (v250 << 32) | (v251 << 40) | (v252 << 48) | (v253 << 56);
    v160 = v209 | (v247 << 16) | (v246 << 24) | (v245 << 32) | (v108 << 40) | (v244 << 48) | (v243 << 56);
    sub_100192968();
    v161 = v238;
    HIDReport.subscript.getter(96, v103, v104);
    UniversalControlDeviceID.init(uuid:)(v161);
    v253 = v159;
    v252 = v160;
    if (static UniversalControlUUID.compare(lhs:rhs:)(v159, v160))
    {
      HIDReport.subscript.getter(96, v103, v104);
      v162 = UniversalControlDeviceID.init(uuid:)(v161);
      if (static UniversalControlUUID.compare(lhs:rhs:)(v162, v163))
      {
        HIDReport.subscript.getter(96, v103, v104);
        UniversalControlDeviceID.init(uuid:)(v161);
        sub_100192968();
      }
    }
    sub_100128D40(16, v103, v104);
    sub_1001483FC();
    v165 = v164;
    v167 = v166;
    v168 = v231;
    swift_beginAccess(v231 + 16, &v259, 0, 0);
    v169 = *((_QWORD *)v168 + 2);
    v170 = (uint64_t)v217;
    v171 = (uint64_t)v216;
    if (v169)
    {
      v172 = v169 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties;
      swift_beginAccess(v169 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties, v256, 0, 0);
      v173 = type metadata accessor for P2PDevice.Properties(0);
      ((void (*)(uint64_t, uint64_t, uint64_t))v230[2])(v158, v172 + *(int *)(v173 + 32), v27);
      v174 = 0;
    }
    else
    {
      v174 = 1;
    }
    v177 = (uint64_t)v214;
    v178 = v228;
    v179 = v213;
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v158, v174, 1, v27);
    v178(v171, v179, v27);
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v171, 0, 1, v27);
    v180 = v170 + *(int *)(v215 + 48);
    sub_10005FAFC(v158, v170, &qword_1002B2898);
    sub_10005FAFC(v171, v180, &qword_1002B2898);
    if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v170, 1, v27) == 1)
    {
      sub_100025A28(v171, &qword_1002B2898);
      sub_100025A28(v158, &qword_1002B2898);
      if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v180, 1, v27) == 1)
      {
        sub_100025A28(v170, &qword_1002B2898);
        v181 = v235;
LABEL_42:
        v183 = sub_100131EA0(v165, v167);
        if (v151)
        {
          v184 = v181[4];
          v185 = (uint64_t)v211;
          (*(void (**)(char *, char *, uint64_t))(v227 + 16))(v211, v225, v226);
          v186 = v181[15];
          v187 = (uint64_t)(v235 + 28);
          swift_beginAccess(v235 + 28, v258, 0, 0);
          sub_10005FAFC(v187, (uint64_t)&v257, &qword_1002AAF30);
          v188 = (char *)objc_allocWithZone((Class)type metadata accessor for MagicGlueController(0));
          swift_retain(v184);
          swift_retain(v186);
          v189 = (uint64_t)v232;
          swift_retain(v232);
          v190 = v188;
          v181 = v235;
          v191 = sub_10013EDFC(v184, v185, v186, (uint64_t)&v257, v189, v190, v165, v167);
        }
        else
        {
          v191 = 0;
        }
        v228 = (void (*)(uint64_t, uint64_t, uint64_t))v27;
        v192 = v181[23] + 1;
        do
        {
          v193 = v192;
          v192 = 1;
        }
        while (!v193);
        v181[23] = v193;
        v194 = objc_msgSend((id)type metadata accessor for UniversalControlPreferences(0), "sharedPreferences");
        v195 = UniversalControlPreferences.connectionTimeout.getter();

        swift_storeEnumTagMultiPayload(v177, v218, 4);
        v196 = sub_10013821C(v177, v195);
        sub_1000255F0(v177, type metadata accessor for EventController.Event);
        v197 = v181[18];
        v198 = v181[19];
        v199 = v181[20];
        v200 = v181[21];
        v201 = (void *)v181[22];
        v202 = v252;
        v181[18] = v253;
        v181[19] = v202;
        v181[20] = v196;
        v181[21] = v183;
        v181[22] = v191;
        v203 = v191;
        swift_unknownObjectRetain(v196);
        swift_retain(v183);
        sub_10013C6B8(v197, v198, v199, v200, v201);
        v110 = sub_1000E5F68();

        swift_unknownObjectRelease(v196);
        swift_release();
        (*(void (**)(char *, uint64_t))(v227 + 8))(v225, v226);
        v175 = v255;
        v176 = (uint64_t)v228;
        goto LABEL_48;
      }
    }
    else
    {
      v182 = v210;
      sub_10005FAFC(v170, v210, &qword_1002B2898);
      if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v180, 1, v27) != 1)
      {
        v204 = v254;
        ((void (*)(char *, uint64_t, uint64_t))v230[4])(v254, v180, v27);
        sub_10013FC28((unint64_t *)&unk_1002AC870, (uint64_t (*)(uint64_t))&type metadata accessor for UniversalControlDevice.DeviceType);
        v206 = dispatch thunk of static Equatable.== infix(_:_:)(v182, v204, v27, v205);
        v207 = v204;
        v208 = (void (*)(uint64_t, uint64_t))v229;
        v229(v207, v27);
        sub_100025A28(v171, &qword_1002B2898);
        sub_100025A28(v219, &qword_1002B2898);
        v208(v182, v27);
        sub_100025A28(v170, &qword_1002B2898);
        v181 = v235;
        if ((v206 & 1) != 0)
          goto LABEL_42;
        goto LABEL_41;
      }
      sub_100025A28(v171, &qword_1002B2898);
      sub_100025A28(v158, &qword_1002B2898);
      v229((char *)v182, v27);
    }
    sub_100025A28(v170, &qword_1002B2890);
    v181 = v235;
LABEL_41:
    sub_10017EAA4(v165, v167);
    goto LABEL_42;
  }
  v67 = (uint64_t (*)(char *, char *, uint64_t))v28[2];
  v68 = v232;
  v69 = v67(v232, v34, v27);
  v70 = Logger.logObject.getter(v69);
  v72 = static os_log_type_t.default.getter(v70, v71);
  if (os_log_type_enabled(v70, v72))
  {
    v73 = swift_slowAlloc(22, -1);
    v74 = swift_slowAlloc(64, -1);
    v257 = v74;
    *(_DWORD *)v73 = 136446466;
    v75 = v238;
    v76 = UUID.init(uuid:)(v241, v242, v248, v249, v250, v251);
    v77 = UUID.uuidString.getter(v76);
    v229 = v66;
    v79 = v78;
    (*(void (**)(char *, uint64_t))(v236 + 8))(v75, v237);
    v80 = sub_1000599D0(8, v77, v79);
    v82 = v81;
    v83 = static String._fromSubstring(_:)(v80);
    v84 = v27;
    v86 = v85;
    swift_bridgeObjectRelease(v82);
    v259 = sub_100006FCC(v83, v86, &v257);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v259, v260, v73 + 4);
    v87 = v86;
    v27 = v84;
    swift_bridgeObjectRelease(v87);
    *(_WORD *)(v73 + 12) = 2082;
    v88 = v254;
    v89 = v232;
    v67(v254, v232, v27);
    v90 = String.init<A>(describing:)(v88, v27);
    v92 = v91;
    v259 = sub_100006FCC(v90, v91, &v257);
    v66 = v229;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v259, v260, v73 + 14);
    swift_bridgeObjectRelease(v92);
    v66(v89, v27);
    _os_log_impl((void *)&_mh_execute_header, v70, v72, "IDS %{public}s: Target Reply: Reject (Unsupported For Devices Of Type [%{public}s])", (uint8_t *)v73, 0x16u);
    swift_arrayDestroy(v74, 2, (char *)&type metadata for Any + 8);
    v93 = v74;
    v34 = v255;
    swift_slowDealloc(v93, -1, -1);
    swift_slowDealloc(v73, -1, -1);
  }
  else
  {
    v66(v68, v27);
  }

LABEL_13:
  v110 = sub_1000E6070(1, 0, 0.0, 0.0);
  v111 = v34;
LABEL_23:
  v66(v111, v27);
  return v110;
}

uint64_t sub_100136E70(unsigned __int8 *a1, uint64_t a2, uint8_t *a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  char *v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  _BOOL4 v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint8_t *v52;
  os_log_t v53;
  uint64_t v54;
  uint8_t *v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint8_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint8_t *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  NSObject *v91;
  uint64_t v92;
  os_log_type_t v93;
  _BOOL4 v94;
  char *v95;
  uint8_t *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint8_t *v109;
  uint8_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  NSObject *v117;
  uint64_t v118;
  os_log_type_t v119;
  _BOOL4 v120;
  char *v121;
  uint8_t *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint8_t *v135;
  uint8_t *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  id v141;
  double v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  void *v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  unsigned __int8 v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  void *v161;
  void (*v163)(char *, uint64_t);
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  os_log_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  int v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  char *v177;
  uint8_t *v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint8_t *v182;
  uint64_t v183;
  uint8_t *v184;
  char *v185;
  uint8_t *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint8_t *v204;
  __int128 v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;

  v6 = v5;
  v175 = a4;
  v169 = type metadata accessor for EventController.Event(0);
  __chkstk_darwin(v169);
  v170 = (char *)&v163 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v174 = type metadata accessor for UniversalControlLink.Endpoint(0);
  v173 = *(_QWORD *)(v174 - 8);
  __chkstk_darwin(v174);
  v172 = (char *)&v163 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000055B0((uint64_t *)&unk_1002AC150);
  __chkstk_darwin(v13);
  v182 = (uint8_t *)&v163 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v177 = (char *)&v163 - v16;
  v17 = type metadata accessor for UniversalControlLink(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v163 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v183 = type metadata accessor for UUID(0);
  v179 = *(_QWORD *)(v183 - 8);
  __chkstk_darwin(v183);
  v185 = (char *)&v163 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v202 = a1[24];
  v196 = a1[25];
  v195 = a1[26];
  v197 = a1[27];
  v198 = a1[28];
  v199 = a1[29];
  v200 = a1[30];
  v201 = a1[31];
  v194 = a1[32];
  v193 = a1[33];
  v192 = a1[34];
  v191 = a1[35];
  v190 = a1[36];
  v188 = a1[37];
  v189 = a1[38];
  v187 = a1[39];
  if (qword_1002A98F0 != -1)
    swift_once(&qword_1002A98F0, sub_10012901C);
  v22 = type metadata accessor for Logger(0);
  v23 = sub_100006FB4(v22, (uint64_t)qword_1002B2620);
  v24 = a5;
  swift_retain();
  sub_10002517C(a2, (unint64_t)a3);
  swift_retain();
  v25 = (char *)v24;
  v26 = sub_10002517C(a2, (unint64_t)a3);
  v178 = (uint8_t *)v23;
  v27 = Logger.logObject.getter(v26);
  v171 = static os_log_type_t.default.getter(v27, v28);
  v29 = os_log_type_enabled(v27, (os_log_type_t)v171);
  v186 = (uint8_t *)a5;
  v184 = a3;
  v181 = v18;
  v180 = v20;
  v176 = v25;
  if (v29)
  {
    v165 = v6;
    v167 = v27;
    v168 = v17;
    v30 = swift_slowAlloc(28, -1);
    v166 = swift_slowAlloc(64, -1);
    *(_QWORD *)&v205 = v166;
    *(_DWORD *)v30 = 136446722;
    v164 = v30 + 4;
    v31 = v185;
    v32 = UUID.init(uuid:)(v202, v196, v195, v197, v198, v199);
    v33 = UUID.uuidString.getter(v32);
    v35 = v34;
    v163 = *(void (**)(char *, uint64_t))(v179 + 8);
    v163(v31, v183);
    v36 = sub_1000599D0(8, v33, v35);
    v37 = static String._fromSubstring(_:)(v36);
    v38 = v25;
    v40 = v39;
    swift_bridgeObjectRelease();
    v204 = (uint8_t *)sub_100006FCC(v37, v40, (uint64_t *)&v205);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v204, &v205, v164);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 12) = 1024;

    LODWORD(v204) = a5 != 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v204, (char *)&v204 + 4, v30 + 14);

    *(_WORD *)(v30 + 18) = 2080;
    v41 = sub_1000E5E5C(a2, (uint64_t)v184);
    if ((v42 & 1) != 0)
    {
      v50 = 0xE400000000000000;
      v48 = 1701736302;
    }
    else
    {
      v43 = UUID.init(uuid:)(v41, v41 >> 8, v41 >> 16, v41 >> 24, HIDWORD(v41), v41 >> 40);
      v44 = UUID.uuidString.getter(v43);
      v46 = v45;
      v163(v31, v183);
      v47 = sub_1000599D0(8, v44, v46);
      v48 = static String._fromSubstring(_:)(v47);
      v50 = v49;
      swift_bridgeObjectRelease();
    }
    v51 = (uint64_t)v177;
    v204 = (uint8_t *)sub_100006FCC(v48, v50, (uint64_t *)&v205);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v204, &v205, v30 + 20);
    swift_bridgeObjectRelease();
    v52 = v184;
    sub_100022AEC(a2, (unint64_t)v184);
    sub_100022AEC(a2, (unint64_t)v52);
    v53 = v167;
    _os_log_impl((void *)&_mh_execute_header, v167, (os_log_type_t)v171, "IDS %{public}s: === Target Ready glue=%{BOOL}d drag=%s ===", (uint8_t *)v30, 0x1Cu);
    v54 = v166;
    swift_arrayDestroy(v166, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v54, -1, -1);
    swift_slowDealloc(v30, -1, -1);

    v17 = v168;
    v18 = v181;
    v20 = v180;
    v6 = v165;
  }
  else
  {
    swift_release_n(a1, 2);

    sub_100022AEC(a2, (unint64_t)a3);
    sub_100022AEC(a2, (unint64_t)a3);

    v31 = v185;
    v51 = (uint64_t)v177;
  }
  v55 = v182;
  if (v186)
  {
    (*(void (**)(uint8_t *, char *, uint64_t))(v18 + 16))(v182, &v176[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_link], v17);
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v55, 0, 1, v17);
    if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v55, 1, v17) != 1)
    {
      (*(void (**)(uint64_t, uint8_t *, uint64_t))(v18 + 32))(v51, v55, v17);
      _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v51, 0, 1, v17);
      goto LABEL_14;
    }
  }
  else
  {
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v182, 1, 1, v17);
  }
  sub_100148650();
  sub_100025A28((uint64_t)v55, (uint64_t *)&unk_1002AC150);
LABEL_14:
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v51, 1, v17) == 1)
  {
    sub_100025A28(v51, (uint64_t *)&unk_1002AC150);
    v56 = swift_retain_n(a1, 2);
    v57 = Logger.logObject.getter(v56);
    v58 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v57, v58))
    {
      v59 = (uint8_t *)swift_slowAlloc(12, -1);
      v60 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v205 = v60;
      *(_DWORD *)v59 = 136446210;
      v186 = v59 + 4;
      v61 = UUID.init(uuid:)(v202, v196, v195, v197, v198, v199);
      v62 = UUID.uuidString.getter(v61);
      v64 = v63;
      (*(void (**)(char *, uint64_t))(v179 + 8))(v31, v183);
      v65 = sub_1000599D0(8, v62, v64);
      v66 = static String._fromSubstring(_:)(v65);
      v68 = v67;
      swift_bridgeObjectRelease();
      v204 = (uint8_t *)sub_100006FCC(v66, v68, (uint64_t *)&v205);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v204, &v205, v186);
      swift_release_n(a1, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "IDS %{public}s: Target Reply: Reject (No Link to Peer)", v59, 0xCu);
      swift_arrayDestroy(v60, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v60, -1, -1);
      swift_slowDealloc(v59, -1, -1);

    }
    else
    {

      swift_release_n(a1, 2);
    }
    v111 = *(_QWORD *)(v6 + 144);
    v112 = *(_QWORD *)(v6 + 152);
    v113 = *(_QWORD *)(v6 + 160);
    v114 = *(_QWORD *)(v6 + 168);
    v115 = *(void **)(v6 + 176);
    *(_QWORD *)(v6 + 152) = 0;
    *(_QWORD *)(v6 + 160) = 0;
    *(_QWORD *)(v6 + 144) = 0;
    *(_OWORD *)(v6 + 168) = xmmword_10021DD40;
    sub_10013C6B8(v111, v112, v113, v114, v115);
    return sub_1000E6070(1, 0, 0.0, 0.0);
  }
  else
  {
    v69 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 32))(v20, v51, v17);
    v70 = v172;
    v71 = UniversalControlLink.endpoint1.getter(v69);
    v182 = (uint8_t *)UniversalControlLink.Endpoint.device.getter(v71);
    (*(void (**)(char *, uint64_t))(v173 + 8))(v70, v174);
    v72 = v184;
    sub_100128D40(32, a2, (unint64_t)v184);
    sub_1001483FC();
    v74 = v73;
    v76 = v75;
    *(_QWORD *)&v205 = sub_1000E5E5C(a2, (uint64_t)v72);
    *((_QWORD *)&v205 + 1) = v78;
    v206 = (v199 << 48) | (v200 << 56) | v77 & 1 | (unint64_t)(v202 << 8) | (v196 << 16) | (v195 << 24) | (v197 << 32) | (v198 << 40);
    v207 = (v193 << 16) | (v194 << 8) | (v192 << 24) | (v191 << 32) | (v190 << 40) | (v188 << 48) | (v189 << 56) | v201;
    v208 = v187 | 0x4000000000000000;
    v209 = v74;
    v210 = v76;
    sub_10003D794(&v205);
    HIDReport.subscript.getter(112, a2, (uint64_t)v72);
    v79 = UniversalControlDeviceID.init(uuid:)(v31);
    sub_10012E48C(v79, v80, 0);
    v81 = (uint64_t)v72;
    v82 = v175;
    HIDReport.subscript.getter(240, a2, v81);
    v83 = UniversalControlDeviceID.init(uuid:)(v31);
    v84 = v186;
    if (static UniversalControlUUID.compare(lhs:rhs:)(v83, v85))
    {
      if (qword_1002A9840 != -1)
        swift_once(&qword_1002A9840, sub_10004A0E8);
      Agent.preventSystemActiveAppearance()();
      v86 = v185;
      HIDReport.subscript.getter(240, a2, (uint64_t)v184);
      v87 = UniversalControlDeviceID.init(uuid:)(v86);
      sub_10012E974(v87, v88, 0, 1);
    }
    v89 = swift_retain_n(a1, 2);
    v90 = v183;
    if (v84)
    {
      v91 = Logger.logObject.getter(v176);
      v93 = static os_log_type_t.default.getter(v91, v92);
      v94 = os_log_type_enabled(v91, v93);
      v95 = v185;
      if (v94)
      {
        v96 = (uint8_t *)swift_slowAlloc(12, -1);
        v184 = (uint8_t *)swift_slowAlloc(32, -1);
        v204 = v184;
        v182 = v96;
        *(_DWORD *)v96 = 136446210;
        v178 = v96 + 4;
        v97 = UUID.init(uuid:)(v202, v196, v195, v197, v198, v199);
        v98 = UUID.uuidString.getter(v97);
        v99 = v95;
        v100 = v17;
        v101 = v82;
        v103 = v102;
        (*(void (**)(char *, uint64_t))(v179 + 8))(v99, v90);
        v104 = sub_1000599D0(8, v98, v103);
        v105 = static String._fromSubstring(_:)(v104);
        v107 = v106;
        swift_bridgeObjectRelease();
        v108 = v105;
        v82 = v101;
        v17 = v100;
        v203 = sub_100006FCC(v108, v107, (uint64_t *)&v204);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v203, &v204, v178);
        swift_release_n(a1, 2);
        swift_bridgeObjectRelease();
        v109 = v182;
        _os_log_impl((void *)&_mh_execute_header, v91, v93, "IDS %{public}s: Target Reply: Magic Glue", v182, 0xCu);
        v110 = v184;
        swift_arrayDestroy(v184, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v110, -1, -1);
        swift_slowDealloc(v109, -1, -1);

      }
      else
      {

        swift_release_n(a1, 2);
      }
      v137 = v180;
      v138 = *(_QWORD *)(v6 + 184) + 1;
      v139 = v181;
      do
      {
        v140 = v138;
        v138 = 1;
      }
      while (!v140);
      *(_QWORD *)(v6 + 184) = v140;
      v141 = objc_msgSend((id)type metadata accessor for UniversalControlPreferences(0), "sharedPreferences");
      v142 = UniversalControlPreferences.glueIdleTimeout.getter();

      v143 = (uint64_t)v170;
      swift_storeEnumTagMultiPayload(v170, v169, 5);
      v144 = sub_10013821C(v143, v142);
      sub_1000255F0(v143, type metadata accessor for EventController.Event);
      (*(void (**)(char *, uint64_t))(v139 + 8))(v137, v17);
      v145 = *(_QWORD *)(v6 + 144);
      v146 = *(_QWORD *)(v6 + 152);
      v147 = *(_QWORD *)(v6 + 160);
      v148 = *(_QWORD *)(v6 + 168);
      v149 = *(void **)(v6 + 176);
      v150 = (v192 << 16) | (v193 << 8) | (v191 << 24) | (v190 << 32) | (v188 << 40) | (v189 << 48) | (v187 << 56) | v194;
      *(_QWORD *)(v6 + 144) = (v195 << 16) | (v196 << 8) | (v197 << 24) | (v198 << 32) | (v199 << 40) | (v200 << 48) | (v201 << 56) | v202;
      *(_QWORD *)(v6 + 152) = v150;
      *(_QWORD *)(v6 + 160) = v144;
      *(_QWORD *)(v6 + 168) = v82 | 0x4000000000000000;
      *(_QWORD *)(v6 + 176) = v186;
      swift_retain();
      sub_10013C6B8(v145, v146, v147, v148, v149);
      return 0;
    }
    else
    {
      v117 = Logger.logObject.getter(v89);
      v119 = static os_log_type_t.default.getter(v117, v118);
      v120 = os_log_type_enabled(v117, v119);
      v121 = v185;
      if (v120)
      {
        v122 = (uint8_t *)swift_slowAlloc(12, -1);
        v186 = (uint8_t *)swift_slowAlloc(32, -1);
        v204 = v186;
        v184 = v122;
        *(_DWORD *)v122 = 136446210;
        v182 = v122 + 4;
        v123 = UUID.init(uuid:)(v202, v196, v195, v197, v198, v199);
        v124 = UUID.uuidString.getter(v123);
        v125 = v121;
        v126 = v17;
        v127 = v82;
        v129 = v128;
        (*(void (**)(char *, uint64_t))(v179 + 8))(v125, v90);
        v130 = sub_1000599D0(8, v124, v129);
        v131 = static String._fromSubstring(_:)(v130);
        v133 = v132;
        swift_bridgeObjectRelease();
        v134 = v131;
        v82 = v127;
        v17 = v126;
        v203 = sub_100006FCC(v134, v133, (uint64_t *)&v204);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v203, &v204, v182);
        swift_release_n(a1, 2);
        swift_bridgeObjectRelease();
        v135 = v184;
        _os_log_impl((void *)&_mh_execute_header, v117, v119, "IDS %{public}s: Target Reply: Accept", v184, 0xCu);
        v136 = v186;
        swift_arrayDestroy(v186, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v136, -1, -1);
        swift_slowDealloc(v135, -1, -1);

      }
      else
      {

        swift_release_n(a1, 2);
      }
      v151 = v180;
      v152 = *(_QWORD *)(v6 + 520);
      *(_QWORD *)(v6 + 520) = 0;
      v153 = *(_BYTE *)(v6 + 528);
      *(_BYTE *)(v6 + 528) = 2;
      sub_100031B90(v152, v153);
      sub_1001322D0(v82);
      sub_1001388B8();
      v154 = *(_QWORD *)(v6 + 184) + 1;
      v155 = v181;
      do
      {
        v156 = v154;
        v154 = 1;
      }
      while (!v156);
      *(_QWORD *)(v6 + 184) = v156;
      v157 = *(_QWORD *)(v6 + 144);
      v158 = *(_QWORD *)(v6 + 152);
      v159 = *(_QWORD *)(v6 + 160);
      v160 = *(_QWORD *)(v6 + 168);
      v161 = *(void **)(v6 + 176);
      *(_QWORD *)(v6 + 144) = 0;
      *(_QWORD *)(v6 + 152) = 0;
      *(_QWORD *)(v6 + 160) = 0;
      *(_OWORD *)(v6 + 168) = xmmword_10021DD40;
      sub_10013C6B8(v157, v158, v159, v160, v161);
      v116 = sub_1000E6070(0, 0, 0.0, 0.0);
      (*(void (**)(char *, uint64_t))(v155 + 8))(v151, v17);
    }
  }
  return v116;
}

uint64_t sub_10013821C(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t ObjectType;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  char *v34;
  char *v35;
  uint64_t result;
  double v37;
  uint64_t v38;
  char *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  void (*v44)(uint64_t *, uint64_t);
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD aBlock[7];

  v62 = a1;
  v56 = type metadata accessor for DispatchTimeInterval(0);
  v51 = *(_QWORD *)(v56 - 8);
  v4 = __chkstk_darwin(v56);
  v55 = (uint64_t *)((char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  v54 = (uint64_t *)((char *)&v48 - v6);
  v53 = type metadata accessor for DispatchTime(0);
  v50 = *(_QWORD *)(v53 - 8);
  v7 = __chkstk_darwin(v53);
  v49 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v52 = (char *)&v48 - v9;
  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v65 = *(_QWORD *)(v10 - 8);
  v66 = v10;
  __chkstk_darwin(v10);
  v61 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v63 = *(_QWORD *)(v12 - 8);
  v64 = v12;
  __chkstk_darwin(v12);
  v60 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for EventController.Event(0);
  v59 = *(_QWORD *)(v14 - 8);
  v15 = *(_QWORD *)(v59 + 64);
  __chkstk_darwin(v14);
  v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for OS_dispatch_source.TimerFlags(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = *(_QWORD *)(v2 + 184);
  sub_1000078E0(0, (unint64_t *)&qword_1002AAF50, OS_dispatch_source_ptr);
  v21 = sub_1000078E0(0, (unint64_t *)&qword_1002AA660, OS_dispatch_queue_ptr);
  v22 = (void *)static OS_dispatch_queue.main.getter(v21);
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_10013FC28((unint64_t *)&unk_1002AC3B0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags);
  v24 = v23;
  v25 = sub_1000055B0(&qword_1002AEEC0);
  sub_10005FCA0((unint64_t *)&qword_1002AC3C0, &qword_1002AEEC0);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v25, v26, v17, v24);
  v27 = static OS_dispatch_source.makeTimerSource(flags:queue:)(v20, v22);

  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  ObjectType = swift_getObjectType(v27);
  sub_10005F428(v62, (uint64_t)v16, type metadata accessor for EventController.Event);
  v29 = *(unsigned __int8 *)(v59 + 80);
  v30 = (v29 + 32) & ~v29;
  v31 = swift_allocObject(&unk_10028D358, v30 + v15, v29 | 7);
  v32 = v57;
  *(_QWORD *)(v31 + 16) = v58;
  *(_QWORD *)(v31 + 24) = v32;
  sub_10005F3FC((uint64_t)v16, v31 + v30, type metadata accessor for EventController.Event);
  aBlock[4] = sub_10013E6C4;
  aBlock[5] = v31;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000E610;
  aBlock[3] = &unk_10028D370;
  v33 = _Block_copy(aBlock);
  swift_retain(v32);
  v34 = v60;
  j___s8Dispatch0A3QoSV11unspecifiedACvgZ(ObjectType);
  v35 = v61;
  sub_10002DEB8();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)(v34, v35, v33, ObjectType);
  _Block_release(v33);
  (*(void (**)(char *, uint64_t))(v65 + 8))(v35, v66);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v34, v64);
  result = swift_release();
  v37 = ceil(a2 * 1000.0);
  if ((~*(_QWORD *)&v37 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v37 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v37 < 9.22337204e18)
  {
    v38 = (uint64_t)v37;
    v39 = v49;
    static DispatchTime.now()(result);
    v40 = v54;
    *v54 = v38;
    v41 = v51;
    v42 = v56;
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(v51 + 104))(v40, enum case for DispatchTimeInterval.milliseconds(_:), v56);
    v43 = v52;
    + infix(_:_:)(v39, v40);
    v44 = *(void (**)(uint64_t *, uint64_t))(v41 + 8);
    v44(v40, v42);
    v45 = *(void (**)(char *, uint64_t))(v50 + 8);
    v46 = v53;
    v45(v39, v53);
    sub_10007A0C4();
    v47 = v55;
    sub_10007A0F4(v55);
    OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v43, v40, v47, ObjectType);
    v44(v47, v42);
    v44(v40, v42);
    v45(v43, v46);
    OS_dispatch_source.activate()();
    return v27;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_100138764(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;

  if (*(_QWORD *)(a2 + 184) == result)
  {
    sub_1001340E0(a3);
    return sub_100022AD8(v3, v4);
  }
  return result;
}

uint64_t sub_1001387A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  if ((unint64_t)a1 >> 62)
    goto LABEL_14;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v4; v4 = _CocoaArrayWrapper.endIndex.getter(v13))
  {
    v5 = 4;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, a1);
      }
      else
      {
        v6 = *(_QWORD *)(a1 + 8 * v5);
        swift_retain(v6);
      }
      v7 = v5 - 3;
      if (__OFADD__(v5 - 4, 1))
        break;
      v8 = dispatch thunk of UniversalControlDevice.id.getter();
      v10 = static UniversalControlUUID.compare(lhs:rhs:)(v8, v9, *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 32));
      swift_release(v6);
      if (!v10)
      {
        swift_release(a2);
        v11 = 1;
        goto LABEL_12;
      }
      ++v5;
      if (v7 == v4)
        goto LABEL_10;
    }
    __break(1u);
LABEL_14:
    if (a1 < 0)
      v13 = a1;
    else
      v13 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
LABEL_10:
  swift_release(a2);
  v11 = 0;
LABEL_12:
  swift_bridgeObjectRelease(a1);
  return v11;
}

void sub_1001388B8()
{
  uint64_t v0;

  sub_10014BF28();
  sub_1000B26E0(v0);
  sub_1000050D4();
}

uint64_t sub_1001388E0(unsigned __int8 *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  unint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  void *v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  uint64_t v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  void *v56;
  void *v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 v61;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  id v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v4 = v3;
  v8 = type metadata accessor for UUID(0);
  v69 = *(_QWORD *)(v8 - 8);
  v70 = v8;
  __chkstk_darwin(v8);
  v68 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(void **)(v3 + 216);
  if (v10)
  {
    v67 = v10;
    v66 = sub_100138F00(a2, a3);
    v11 = sub_1000E6BC4();
    v12 = sub_10013F740();
    v13 = v3;
    v14 = sub_1000E6C3C();
    v15 = a1;
    v16 = sub_1000E6C00();
    HIDReport.scaledValue<A, B>(as:unsignedType:atIndex:)((uint64_t)&type metadata for Int16, (uint64_t)&type metadata for UInt16, 16, a2, a3, (uint64_t)&type metadata for Int16, (uint64_t)&type metadata for UInt16, v11, v12, v14, v16);
    v18 = v17;
    v63 = v14;
    v64 = v16;
    a1 = v15;
    v4 = v13;
    HIDReport.scaledValue<A, B>(as:unsignedType:atIndex:)((uint64_t)&type metadata for Int16, (uint64_t)&type metadata for UInt16, 32, a2, a3, (uint64_t)&type metadata for Int16, (uint64_t)&type metadata for UInt16, v11, v12, v63, v64);
    v20 = v19;
    sub_100128154(48, a2, a3);
    v21 = v67;
    sub_10002F488(v66, v18, v20);

  }
  sub_100127CC4(8, a2, a3);
  v23 = sub_1000E6054(v22);
  if (v23 != 2)
  {
    if ((v23 & 1) != 0)
    {
      if (qword_1002A98F0 != -1)
        swift_once(&qword_1002A98F0, sub_10012901C);
      v40 = type metadata accessor for Logger(0);
      sub_100006FB4(v40, (uint64_t)qword_1002B2620);
      v41 = swift_retain_n(a1, 2);
      v42 = Logger.logObject.getter(v41);
      v44 = static os_log_type_t.default.getter(v42, v43);
      if (os_log_type_enabled(v42, v44))
      {
        v45 = (uint8_t *)swift_slowAlloc(12, -1);
        v46 = swift_slowAlloc(32, -1);
        *(_DWORD *)v45 = 136446210;
        v72 = v46;
        v67 = v45 + 4;
        v47 = v68;
        v48 = UUID.init(uuid:)(a1[24], a1[25], a1[26], a1[27], a1[28], a1[29]);
        v49 = UUID.uuidString.getter(v48);
        v51 = v50;
        (*(void (**)(char *, uint64_t))(v69 + 8))(v47, v70);
        v52 = sub_1000599D0(8, v49, v51);
        v53 = static String._fromSubstring(_:)(v52);
        v55 = v54;
        swift_bridgeObjectRelease();
        v71 = sub_100006FCC(v53, v55, &v72);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72, v67);
        swift_release_n(a1, 2);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v42, v44, "IDS %{public}s: === REJECTED ===", v45, 0xCu);
        swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v46, -1, -1);
        swift_slowDealloc(v45, -1, -1);

      }
      else
      {

        swift_release_n(a1, 2);
      }
      v57 = *(void **)(v4 + 216);
      if (v57)
      {
        v58 = v57;
        sub_10018FD70();

      }
      sub_1001327BC();
      v59 = sub_100131EA0(0.0, 0.0);
      sub_1001322D0(v59);
      swift_release();
      v60 = *(_QWORD *)(v4 + 520);
      *(_QWORD *)(v4 + 520) = 0;
      v61 = *(_BYTE *)(v4 + 528);
      *(_BYTE *)(v4 + 528) = 2;
      sub_100031B90(v60, v61);
    }
    else
    {
      if (qword_1002A98F0 != -1)
        swift_once(&qword_1002A98F0, sub_10012901C);
      v24 = type metadata accessor for Logger(0);
      sub_100006FB4(v24, (uint64_t)qword_1002B2620);
      v25 = swift_retain_n(a1, 2);
      v26 = Logger.logObject.getter(v25);
      v28 = static os_log_type_t.default.getter(v26, v27);
      if (os_log_type_enabled(v26, v28))
      {
        v29 = (uint8_t *)swift_slowAlloc(12, -1);
        v30 = swift_slowAlloc(32, -1);
        *(_DWORD *)v29 = 136446210;
        v72 = v30;
        v67 = v29 + 4;
        v31 = v68;
        v32 = UUID.init(uuid:)(a1[24], a1[25], a1[26], a1[27], a1[28], a1[29]);
        v33 = UUID.uuidString.getter(v32);
        v35 = v34;
        (*(void (**)(char *, uint64_t))(v69 + 8))(v31, v70);
        v36 = sub_1000599D0(8, v33, v35);
        v37 = static String._fromSubstring(_:)(v36);
        v39 = v38;
        swift_bridgeObjectRelease();
        v71 = sub_100006FCC(v37, v39, &v72);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72, v67);
        swift_release_n(a1, 2);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v26, v28, "IDS %{public}s: === ACCEPTED ===", v29, 0xCu);
        swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v30, -1, -1);
        swift_slowDealloc(v29, -1, -1);

      }
      else
      {

        swift_release_n(a1, 2);
      }
      if (*(_QWORD *)(v4 + 216))
      {
        sub_100192B44();
        v56 = *(void **)(v4 + 216);
        *(_QWORD *)(v4 + 216) = 0;

        sub_100138F34((uint64_t)a1);
      }
      EnsembleHIDController.resetGestureState()();
    }
  }
  sub_1001388B8();
  return 0;
}

uint64_t sub_100138F00(uint64_t a1, unint64_t a2)
{
  char v2;
  char v3;

  sub_100127CC4(8, a1, a2);
  v3 = sub_1000E6054(v2);
  if (v3 == 2)
    return 2;
  else
    return v3 & 1;
}

void sub_100138F34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  __n128 v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  __int128 aBlock;
  uint64_t (*v46)(uint64_t);
  void *v47;
  void (*v48)();
  uint64_t v49;
  __int128 v50[2];
  char v51[24];
  _QWORD v52[6];

  v2 = v1;
  v43 = type metadata accessor for DispatchWorkItemFlags(0);
  v42 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin(v43);
  v41 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for DispatchQoS(0);
  v39 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v38 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS.QoSClass(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UTType(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v35 - v15;
  if ((*(_BYTE *)(v2 + 488) & 1) == 0
    && !static UniversalControlUUID.compare(lhs:rhs:)(*(_QWORD *)(v2 + 472), *(_QWORD *)(v2 + 480)))
  {
    sub_10005FAFC(v2 + 72, (uint64_t)&aBlock, (uint64_t *)&unk_1002ABD50);
    if (v47)
    {
      sub_100025A50(&aBlock, (uint64_t)v52);
      swift_beginAccess(a1 + 16, v51, 0, 0);
      if (*(_QWORD *)(a1 + 16))
      {
        v37 = *(_QWORD *)(a1 + 16);
        v17 = swift_retain();
        if ((UniversalControlPreferences.hasShownControlNotification.getter(v17) & 1) == 0)
        {
          P2PDevice.typeIdentifier.getter((uint64_t)v16);
          sub_1000078E0(0, (unint64_t *)&qword_1002AA660, OS_dispatch_queue_ptr);
          v18.n128_f64[0] = (*(double (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for DispatchQoS.QoSClass.default(_:), v6);
          v36 = static OS_dispatch_queue.global(qos:)(v9, v18);
          (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
          (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v13, v16, v10);
          sub_10009513C((uint64_t)v52, (uint64_t)v50);
          v19 = *(unsigned __int8 *)(v11 + 80);
          v20 = (v19 + 16) & ~v19;
          v21 = (v12 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
          v22 = (v21 + 47) & 0xFFFFFFFFFFFFFFF8;
          v23 = (v22 + 15) & 0xFFFFFFFFFFFFFFF8;
          v24 = swift_allocObject(&unk_10028D4C0, v23 + 8, v19 | 7);
          (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v24 + v20, v13, v10);
          sub_100025A50(v50, v24 + v21);
          *(_QWORD *)(v24 + v22) = v37;
          *(_QWORD *)(v24 + v23) = v2;
          v48 = sub_10013F7E8;
          v49 = v24;
          *(_QWORD *)&aBlock = _NSConcreteStackBlock;
          *((_QWORD *)&aBlock + 1) = 1107296256;
          v46 = sub_10000E610;
          v47 = &unk_10028D4D8;
          v25 = _Block_copy(&aBlock);
          swift_retain();
          swift_retain();
          v26 = v38;
          static DispatchQoS.unspecified.getter(v27);
          v44 = _swiftEmptyArrayStorage;
          sub_10013FC28((unint64_t *)&qword_1002AA6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
          v29 = v28;
          v30 = sub_1000055B0((uint64_t *)&unk_1002AC9A0);
          sub_10005FCA0((unint64_t *)&qword_1002AA6D0, (uint64_t *)&unk_1002AC9A0);
          v31 = v41;
          v32 = v43;
          dispatch thunk of SetAlgebra.init<A>(_:)(&v44, v30, v33, v43, v29);
          v34 = (void *)v36;
          OS_dispatch_queue.async(group:qos:flags:execute:)(0, v26, v31, v25);
          _Block_release(v25);
          swift_release();

          (*(void (**)(char *, uint64_t))(v42 + 8))(v31, v32);
          (*(void (**)(char *, uint64_t))(v39 + 8))(v26, v40);
          (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
        }
        sub_100005988(v52);
        swift_release();
      }
      else
      {
        sub_100005988(v52);
      }
    }
    else
    {
      sub_100025A28((uint64_t)&aBlock, (uint64_t *)&unk_1002ABD50);
    }
  }
}

uint64_t sub_1001393B0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v8 = type metadata accessor for EventController.Event(0);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = (uint64_t)v10 + *(int *)(sub_1000055B0((uint64_t *)&unk_1002B2870) + 64);
  *v10 = a1;
  v10[1] = a2;
  v10[2] = a3;
  sub_10005F428(a4, v11, type metadata accessor for HIDUniversalSenderID);
  swift_storeEnumTagMultiPayload(v10, v8, 2);
  swift_retain();
  sub_10002517C(a2, a3);
  sub_1001340E0((uint64_t)v10);
  v13 = v12;
  sub_1000255F0((uint64_t)v10, type metadata accessor for EventController.Event);
  return v13;
}

uint64_t sub_1001394A8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(_QWORD);

  sub_1000F3FA4();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  sub_1001412BC();
  sub_1000262EC();
  __chkstk_darwin(v9);
  sub_100065E48();
  *v0 = v8;
  v0[1] = v6;
  v0[2] = v4;
  swift_storeEnumTagMultiPayload(v0, v10, v2);
  sub_100026AE4();
  sub_10002517C(v6, v4);
  sub_1001340E0((uint64_t)v0);
  v12 = v11;
  v13 = sub_1000D95F8();
  sub_1000255F0(v13, v14);
  return v12;
}

uint64_t sub_100139554(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  _QWORD *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  _QWORD *v33;
  _BYTE v35[24];
  _BYTE v36[24];

  v4 = v3;
  v7 = type metadata accessor for UUID(0);
  __chkstk_darwin(v7);
  v9 = &v35[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 112) + 32);
  if (v10)
  {
    swift_beginAccess(v10 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties, v36, 0, 0);
    type metadata accessor for P2PDevice.Properties(0);
    HIDReport.subscript.getter(8, a2, a3);
    v11 = UniversalControlDeviceID.init(uuid:)(v9);
    v13 = static UniversalControlUUID.compare(lhs:rhs:)(v11, v12);
    if (v13)
    {
      HIDReport.subscript.getter(8, a2, a3);
      v14 = UniversalControlDeviceID.init(uuid:)(v9);
      v16 = v15;
    }
    else
    {
      v14 = 0;
      v16 = 0;
    }
    HIDReport.subscript.getter(144, a2, a3);
    v17 = UniversalControlDeviceID.init(uuid:)(v9);
    sub_10012E48C(v17, v18, 0);
    HIDReport.subscript.getter(136, a2, a3);
    if ((v19 & 1) != 0)
    {
      v20 = sub_10012B270(0);
      if ((v22 & 1) != 0)
      {
        if (!v13)
          goto LABEL_12;
      }
      else if (v13 && !static UniversalControlUUID.compare(lhs:rhs:)(v20, v21))
      {
        goto LABEL_12;
      }
      sub_10017E930();
      v23 = *(_QWORD *)(v4 + 520);
      *(_QWORD *)(v4 + 520) = v24;
      v25 = *(_BYTE *)(v4 + 528);
      *(_BYTE *)(v4 + 528) = 0;
      sub_100031B90(v23, v25);
      sub_10012E974(v14, v16, v13 == 0, 0);
      v26 = type metadata accessor for Completion();
      swift_allocObject(v26, 48, 7);
      v27 = Completion.init(file:line:)();
      sub_10012B2FC((uint64_t)v27);
      swift_release();
      swift_beginAccess(v4 + 328, v35, 33, 0);
      HIDReportAccumulator.flush(to:)(v4 + 336);
      swift_endAccess(v35);
    }
LABEL_12:
    HIDReport.subscript.getter(137, a2, a3);
    if ((v28 & 1) != 0)
    {
      v29 = sub_10012B270(1);
      if ((v31 & 1) == 0)
      {
        if (v13 && !static UniversalControlUUID.compare(lhs:rhs:)(v29, v30))
          goto LABEL_25;
LABEL_18:
        sub_10012E974(v14, v16, v13 == 0, 1);
        v32 = type metadata accessor for Completion();
        swift_allocObject(v32, 48, 7);
        v33 = Completion.init(file:line:)();
        sub_10012B2FC((uint64_t)v33);
        swift_release();
        swift_beginAccess(v4 + 280, v35, 33, 0);
        HIDReportAccumulator.flush(to:)(v4 + 288);
        swift_endAccess(v35);
        sub_10012F880(1);
        if (v13)
        {
          if (qword_1002A9840 != -1)
            swift_once(&qword_1002A9840, sub_10004A0E8);
          Agent.preventSystemActiveAppearance()();
        }
        else
        {
          if (qword_1002A9840 != -1)
            swift_once(&qword_1002A9840, sub_10004A0E8);
          Agent.allowSystemActiveAppearance()();
        }
        goto LABEL_25;
      }
      if (v13)
        goto LABEL_18;
    }
LABEL_25:
    sub_1001388B8();
  }
  return 0;
}

uint64_t sub_1001398E0()
{
  sub_100192968();
  return 0;
}

void sub_100139914(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 64) = 3;
}

void sub_100139920(uint64_t a1, os_log_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  __int16 v21;
  uint64_t v22;
  unint64_t v23;
  Swift::String v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  os_log_type_t v33;
  _BOOL4 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  id v41;
  _QWORD *v42;
  uint64_t v43;
  Swift::String v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  _BOOL4 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  os_log_type_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  os_log_type_t v95;
  int v96;
  _BOOL4 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  void (*v111)(uint64_t, uint64_t);
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  os_log_type_t v122;
  _DWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  os_log_type_t v139;
  _BOOL4 v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unsigned __int16 v146;
  unsigned __int16 v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  Swift::Int v151;
  Swift::Int v152;
  Swift::Int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  NSObject *v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  os_log_t v165;
  uint64_t v166;
  uint64_t v167;
  NSObject *v168;
  os_log_type_t v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t (*v174)(uint64_t, uint64_t, uint64_t);
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  void (*v189)(uint64_t);
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  uint64_t *v193;
  uint64_t v194;
  os_log_t v195;
  __int16 v196;
  __int16 v197;
  char v198;
  uint8_t *v199;
  os_log_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  uint64_t v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unsigned __int8 *v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  unint64_t v235;
  _QWORD *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  _QWORD v241[8];
  unint64_t v242;
  uint64_t *v243;
  os_log_t v244;
  unint64_t v245;
  uint64_t v246;
  unint64_t v247;
  os_log_t v248;
  uint64_t v249;
  uint64_t *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t v262;

  v7 = sub_100141420();
  v8 = type metadata accessor for HIDUniversalSenderID(v7);
  sub_1000262EC();
  __chkstk_darwin(v9);
  v11 = (uint64_t)v241 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)v241 - v13;
  __chkstk_darwin(v15);
  v17 = (char *)v241 - v16;
  v254 = type metadata accessor for UUID(0);
  v257 = *(_QWORD *)(v254 - 8);
  sub_1000262EC();
  __chkstk_darwin(v18);
  sub_10000E5DC();
  v256 = v19;
  sub_100140E0C();
  sub_100143C80((uint64_t)a2, a3);
  v21 = v20;
  v22 = sub_100141360();
  if ((v21 & 0x100) != 0)
  {
    sub_10002D82C(v22, (unint64_t *)&qword_1002AAB80, NSError_ptr);
    v39 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(-6742, 0x2064696C61766E69, 0xEF6567617373656DLL, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Ensemble_executables/EnsembleAgent/EventController.swift", 94, 2, 1479);
    v40 = sub_1000B219C();
    sub_1000C251C(v40);
    v41 = v39;
    v42 = sub_100124048();
    v43 = (uint64_t)v39;
LABEL_9:
    sub_100111C64((uint64_t)v42, v43);

    sub_100026AEC();
    goto LABEL_71;
  }
  v255 = v3;
  v259 = sub_100111930();
  v260 = v23;
  v24._countAndFlagsBits = 0x544E56452FLL;
  v24._object = (void *)0xE500000000000000;
  String.append(_:)(v24);
  v25 = v260;
  v26 = v21 - 225;
  v27 = v259;
  switch(v26)
  {
    case 0:
      sub_100140E0C();
      sub_100140E60();
      sub_1000E5214();
      v28 = v4;
      if (v4)
        goto LABEL_37;
      sub_100141040();
      if (qword_1002A98F0 != -1)
        swift_once(&qword_1002A98F0, sub_10012901C);
      v29 = sub_10000F6E4();
      v30 = sub_100140EC8(v29, (uint64_t)qword_1002B2620);
      v31 = Logger.logObject.getter(v30);
      v33 = sub_1000AB118(v31, v32);
      v34 = sub_1000AAE80(v33);
      v251 = v27;
      if (v34)
      {
        v35 = sub_10000797C(12);
        v11 = sub_10000797C(32);
        v259 = v11;
        sub_100140F3C(4.8751e-34);
        v36 = sub_100141220();
        sub_100140FB8(v36);
        sub_1000103C8((uint64_t)v14);
        sub_1000AADBC((void *)&_mh_execute_header, v37, v38, "%{public}s: TargetBegin");
        sub_100141000((uint64_t)&type metadata for Any);
        sub_100007958(v11);
        sub_100007958(v35);

      }
      else
      {

        sub_100026AF4((uint64_t)v14);
      }
      sub_1001411F8();
      goto LABEL_63;
    case 1:
      sub_100140E0C();
      sub_100140E60();
      sub_1000E5998();
      v28 = v4;
      if (v4)
        goto LABEL_37;
      sub_100141040();
      if (qword_1002A98F0 != -1)
        swift_once(&qword_1002A98F0, sub_10012901C);
      v50 = sub_10000F6E4();
      sub_100006FB4(v50, (uint64_t)qword_1002B2620);
      sub_100141010();
      sub_100141010();
      v51 = v253;
      sub_100040544();
      sub_100141010();
      sub_100040544();
      v52 = sub_100141010();
      v11 = Logger.logObject.getter(v52);
      v54 = static os_log_type_t.default.getter(v11, v53);
      v55 = os_log_type_enabled((os_log_t)v11, (os_log_type_t)v54);
      v251 = v27;
      if (v55)
      {
        LODWORD(v250) = v54;
        v252 = 0;
        v56 = sub_10000797C(32);
        v249 = sub_10000797C(96);
        v259 = v249;
        *(_DWORD *)v56 = 136446722;
        sub_100040544();
        v57 = sub_100141230();
        v58 = sub_10014102C(v57);
        v60 = v59;
        sub_1000E4B3C(v58, v59, v61, v62);
        sub_1000103C8(v51);
        *(_WORD *)(v56 + 12) = 2082;
        v63 = sub_1000E5E5C(v8, (uint64_t)v17);
        v66 = v256;
        if ((v65 & 1) == 0)
        {
          sub_100095670(v63, v64, v63 >> 16, v63 >> 24, HIDWORD(v63), v63 >> 40, HIWORD(v63), HIBYTE(v63));
          v67 = sub_100065EC0();
          v69 = v68;
          sub_1001410EC();
          v70 = sub_1000599D0(8, v67, v69);
          static String._fromSubstring(_:)(v70);
          sub_10000E568();
        }
        v211 = sub_100026B88();
        v261 = sub_100006FCC(v211, v212, v213);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v261, v60, v56 + 14);
        swift_bridgeObjectRelease();
        sub_100140DF4();
        sub_100140DF4();
        *(_WORD *)(v56 + 22) = 2082;
        HIDReport.subscript.getter(240, v8, (uint64_t)v17);
        UniversalControlDeviceID.init(uuid:)(v66);
        sub_100065C50();
        sub_100095670(v214, v215, v216, v217, v218, v219, v220, v221);
        v222 = sub_100065EC0();
        v224 = v223;
        sub_1001410EC();
        sub_1000599D0(8, v222, v224);
        sub_1000602C0();
        sub_10014101C();
        v261 = sub_100140FD4();
        sub_1000E4B3C((uint64_t)&v261, v60, v225, v56 + 32);
        sub_10002D89C();
        sub_100140DF4();
        sub_100140DF4();
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)v11, (os_log_type_t)v250, "%{public}s: TargetReady drag=%{public}s, keyboard=%{public}s", (uint8_t *)v56, 0x20u);
        v226 = v249;
        swift_arrayDestroy(v249, 3, (char *)&type metadata for Any + 8);
        sub_100007958(v226);
        sub_100007958(v56);

      }
      else
      {
        sub_100026AF4(v51);
        sub_100140DF4();
        sub_100140DF4();
        sub_100140DF4();
        sub_100140DF4();

      }
      sub_1001411E0();
LABEL_63:
      sub_1001394A8();
      goto LABEL_66;
    case 2:
      sub_100140E0C();
      sub_100140E60();
      sub_1000E5FB4();
      v28 = v4;
      if (v4)
        goto LABEL_37;
      sub_100141040();
      sub_100127CC4(8, v8, (unint64_t)v17);
      v72 = sub_1000E6054(v71);
      if (v72 != 2)
      {
        v11 = v72;
        if (qword_1002A98F0 != -1)
          swift_once(&qword_1002A98F0, sub_10012901C);
        v73 = sub_10000F6E4();
        v74 = sub_100140EC8(v73, (uint64_t)qword_1002B2620);
        v75 = Logger.logObject.getter(v74);
        v77 = sub_1000AB118(v75, v76);
        if (sub_1000AAE80(v77))
        {
          LODWORD(v256) = (v11 & 1) + 1;
          v78 = sub_10000797C(15);
          v257 = sub_10000797C(32);
          v259 = v257;
          *(_DWORD *)v78 = 136446466;
          v11 = v78 + 4;
          swift_bridgeObjectRetain();
          v79 = sub_100141268();
          v82 = sub_100006FCC(v79, v80, v81);
          v83 = sub_10014102C(v82);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v83, v84, v78 + 4);
          sub_1000103C8((uint64_t)v14);
          *(_WORD *)(v78 + 12) = 256;
          sub_1001411AC(v78 + 14, v78 + 15, v256);
          _os_log_impl((void *)&_mh_execute_header, a2, (os_log_type_t)a3, "%{public}s: TargetReply status=%hhu", (uint8_t *)v78, 0xFu);
          v85 = v257;
          swift_arrayDestroy(v257, 1, (char *)&type metadata for Any + 8);
          sub_100007958(v85);
          sub_100007958(v78);

        }
        else
        {

          sub_100026AF4((uint64_t)v14);
        }
      }
      v251 = v27;
      v227 = (unsigned __int8 *)sub_1001411E0();
      sub_1001388E0(v227, v228, v229);
      goto LABEL_66;
    case 3:
      sub_100140E0C();
      sub_100140E60();
      sub_1000E62C4();
      v252 = v4;
      if (v4)
        goto LABEL_36;
      v88 = v86;
      v89 = v87;
      v253 = v25;
      if (qword_1002A98F0 != -1)
        swift_once(&qword_1002A98F0, sub_10012901C);
      v90 = sub_10000F6E4();
      sub_100006FB4(v90, (uint64_t)qword_1002B2620);
      sub_100140E00();
      sub_100140E00();
      sub_100140E00();
      sub_100140E00();
      sub_100140E00();
      sub_100140E00();
      v91 = v253;
      sub_100040544();
      sub_100140E00();
      sub_100040544();
      v92 = sub_100140E00();
      v93 = Logger.logObject.getter(v92);
      v95 = sub_1000AB118(v93, v94);
      v96 = v95;
      v97 = os_log_type_enabled(a2, v95);
      v98 = v257;
      v251 = v27;
      if (v97)
      {
        v99 = sub_10000797C(44);
        v249 = sub_10000797C(96);
        v259 = v249;
        *(_DWORD *)v99 = 136447234;
        v248 = a2;
        sub_100040544();
        v261 = sub_100141230();
        LODWORD(v247) = v96;
        v250 = &v262;
        sub_1000E4B3C((uint64_t)&v261, (uint64_t)&v262, v100, v99 + 12);
        sub_1000103C8(v91);
        *(_WORD *)(v99 + 12) = 1024;
        sub_1001412C4(136);
        v102 = v101;
        v103 = sub_100140D4C();
        LODWORD(v261) = v102 & 1;
        sub_100141318(v103, v104, v99 + 14, v99 + 18);
        sub_100140D4C();
        *(_WORD *)(v99 + 18) = 1024;
        sub_1001412C4(137);
        v106 = v105;
        v107 = sub_100140D4C();
        LODWORD(v261) = v106 & 1;
        sub_100141318(v107, v108, v99 + 20, v99 + 24);
        sub_100140D4C();
        *(_WORD *)(v99 + 24) = 2082;
        v246 = v99 + 26;
        v109 = v256;
        sub_1001412D0(8);
        v110 = UniversalControlDeviceID.init(uuid:)(v109);
        sub_100140D58(v110);
        sub_10006D39C();
        v111 = *(void (**)(uint64_t, uint64_t))(v98 + 8);
        v112 = v254;
        v111(v109, v254);
        sub_100067680();
        sub_1000602C0();
        sub_10014101C();
        v261 = sub_100140FD4();
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v261, v250, v246);
        sub_10002D89C();
        sub_100140D4C();
        sub_100140D4C();
        *(_WORD *)(v99 + 34) = 2082;
        v257 = v99 + 36;
        sub_1001412D0(144);
        v113 = UniversalControlDeviceID.init(uuid:)(v109);
        sub_100140D58(v113);
        sub_10006D39C();
        v111(v109, v112);
        sub_100067680();
        sub_1000602C0();
        sub_10014101C();
        v261 = sub_100140FD4();
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v261, v250, v257);
        sub_10002D89C();
        sub_100140D4C();
        sub_100140D4C();
        a2 = v248;
        _os_log_impl((void *)&_mh_execute_header, v248, (os_log_type_t)v247, "%{public}s: FocusMove pointer=%{BOOL}d keyFocus=%{BOOL}d device=%{public}s source=%{public}s", (uint8_t *)v99, 0x2Cu);
        v114 = v249;
        swift_arrayDestroy(v249, 3, (char *)&type metadata for Any + 8);
        sub_100007958(v114);
        sub_100007958(v99);
      }
      else
      {
        sub_100140D4C();
        sub_100140D4C();
        sub_100026AF4(v91);
        sub_100140D4C();
        sub_100140D4C();
        sub_100140D4C();
        sub_100140D4C();
        sub_100140D4C();
        sub_100140D4C();
      }

      v202 = v258;
      sub_100139554(v255, v88, v89);
      v204 = v203;
      v205 = v89;
      v11 = v202;
      sub_100022AEC(v88, v205);
      goto LABEL_67;
    case 4:
      sub_100140E0C();
      sub_100140E60();
      sub_1000E637C();
      v28 = v4;
      if (v4)
        goto LABEL_37;
      v116 = v115;
      v117 = v25;
      if (qword_1002A98F0 != -1)
        swift_once(&qword_1002A98F0, sub_10012901C);
      v118 = sub_10000F6E4();
      sub_100006FB4(v118, (uint64_t)qword_1002B2620);
      v119 = swift_bridgeObjectRetain_n(v25, 2);
      v120 = Logger.logObject.getter(v119);
      v122 = sub_1000AB118(v120, v121);
      if (sub_1000AAE80(v122))
      {
        v123 = (_DWORD *)sub_10000797C(12);
        v124 = sub_10000797C(32);
        v257 = v116;
        v125 = v124;
        v259 = v124;
        *v123 = 136446210;
        swift_bridgeObjectRetain();
        v126 = sub_100006FCC(v27, v117, &v259);
        v127 = sub_10014102C(v126);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v127, v128, v123 + 1);
        sub_1000103C8(v117);
        sub_1000AADBC((void *)&_mh_execute_header, v129, v130, "%{public}s: FocusReset");
        sub_100141000((uint64_t)&type metadata for Any);
        sub_100007958(v125);
        sub_100007958((uint64_t)v123);

      }
      else
      {

        sub_100026AF4(v25);
      }
      sub_100126848(*(_QWORD *)(v258 + 56), *(_QWORD *)(v258 + 64), 0);
      v206 = sub_1000D95F8();
      sub_100022AEC(v206, v207);
      swift_bridgeObjectRelease();
      goto LABEL_70;
    case 5:
      sub_100140E0C();
      sub_100140E60();
      sub_1000E6468();
      v28 = v4;
      if (v4)
        goto LABEL_37;
      sub_100141040();
      if (qword_1002A98F0 != -1)
        swift_once(&qword_1002A98F0, sub_10012901C);
      v135 = sub_10000F6E4();
      v136 = sub_100140EC8(v135, (uint64_t)qword_1002B2620);
      v137 = Logger.logObject.getter(v136);
      v139 = sub_1000AB118(v137, v138);
      v140 = sub_1000AAE80(v139);
      v251 = v27;
      if (v140)
      {
        v141 = sub_10000797C(12);
        v11 = sub_10000797C(32);
        v259 = v11;
        sub_100140F3C(4.8751e-34);
        v142 = sub_100141220();
        sub_100140FB8(v142);
        sub_1000103C8((uint64_t)v14);
        sub_1000AADBC((void *)&_mh_execute_header, v143, v144, "%{public}s: TargetConnect");
        sub_100141000((uint64_t)&type metadata for Any);
        sub_100007958(v11);
        sub_100007958(v141);

      }
      else
      {

        sub_100026AF4((uint64_t)v14);
      }
      sub_1001411F8();
      sub_1001398E0();
LABEL_66:
      v204 = v208;
      sub_100140DF4();
      goto LABEL_67;
    case 6:
      sub_100140E0C();
      sub_100140E60();
      sub_1000E67D0();
      v250 = (uint64_t *)v132;
      v252 = v4;
      if (v4)
      {
LABEL_36:
        v28 = v252;
LABEL_37:
        sub_10000E420();
        v133 = sub_1000B219C();
        sub_1000C251C(v133);
        swift_errorRetain(v28);
        v134 = sub_100124048();
        sub_100111C64((uint64_t)v134, v28);
        swift_release();
        swift_errorRelease(v28);
        swift_errorRelease(v28);
        goto LABEL_71;
      }
      v145 = v131;
      v253 = v25;
      sub_100128154(16, (uint64_t)v250, v131);
      v147 = v146;
      v148 = sub_100141400();
      v150 = HIDReport.endIndex.getter(v148, v149);
      if (v150 < v147)
      {
        __break(1u);
        goto LABEL_73;
      }
      v151 = v150;
      v251 = v27;
      v152 = sub_1001412DC(v147);
      v153 = sub_1001412DC(v151);
      v154 = v256;
      if (v153 < v152)
      {
LABEL_73:
        __break(1u);
        goto LABEL_74;
      }
      v155 = (uint64_t)v250;
      v156 = Data._Representation.subscript.getter(v152, v153, v250, v145);
      v248 = v157;
      v249 = v156;
      HIDReport.subscript.getter(32, v155, v145);
      v158 = UniversalControlDeviceID.init(uuid:)(v154);
      v245 = v158 >> 16;
      v246 = v158 >> 8;
      v243 = (uint64_t *)HIDWORD(v158);
      v244 = (os_log_t)(v158 >> 24);
      v241[7] = HIWORD(v158);
      v242 = v158 >> 40;
      v241[6] = HIBYTE(v158);
      sub_10010192C(v159 >> 8);
      v241[4] = v160 >> 16;
      v241[3] = v160 >> 24;
      v241[2] = HIDWORD(v160);
      sub_100141348(v160 >> 40);
      v247 = v145;
      sub_100128714(160, v155, v145);
      v162 = v161;
      UUID.init(uuid:)(v158, v246, v245, v244, v243, v242);
      *(_QWORD *)&v17[*(int *)(v8 + 20)] = v162;
      if (qword_1002A98F0 == -1)
        goto LABEL_45;
LABEL_74:
      swift_once(&qword_1002A98F0, sub_10012901C);
LABEL_45:
      v163 = sub_10000F6E4();
      sub_100006FB4(v163, (uint64_t)qword_1002B2620);
      sub_10005F428((uint64_t)v17, (uint64_t)v14, type metadata accessor for HIDUniversalSenderID);
      sub_10005F428((uint64_t)v17, v11, type metadata accessor for HIDUniversalSenderID);
      v164 = v253;
      sub_10002D9F8();
      v165 = v248;
      v166 = v249;
      sub_1001412F0();
      sub_10002D9F8();
      v167 = sub_1001412F0();
      v168 = Logger.logObject.getter(v167);
      v169 = static os_log_type_t.debug.getter();
      v170 = v169;
      if (os_log_type_enabled(v168, v169))
      {
        v171 = sub_10000797C(35);
        LODWORD(v245) = v170;
        v172 = v171;
        v246 = sub_10000797C(64);
        v259 = v246;
        *(_DWORD *)v172 = 136446978;
        sub_10002D9F8();
        v261 = sub_100006FCC(v251, v164, &v259);
        v243 = &v262;
        sub_1000E4B3C((uint64_t)&v261, (uint64_t)&v262, v173, v172 + 12);
        sub_1000103C8(v164);
        *(_WORD *)(v172 + 12) = 2082;
        v242 = v172 + 14;
        v174 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v257 + 16);
        v244 = v168;
        v175 = v256;
        sub_10003D65C(v256, (uint64_t)v14, v174);
        UniversalControlDeviceID.init(uuid:)(v175);
        sub_100065C50();
        v184 = sub_100095670(v176, v177, v178, v179, v180, v181, v182, v183);
        v185 = UUID.uuidString.getter(v184);
        v187 = v186;
        v188 = sub_100026B88();
        v189(v188);
        sub_1000599D0(8, v185, v187);
        v190 = sub_1000602C0();
        v192 = v191;
        sub_10000E420();
        v261 = sub_100006FCC(v190, v192, &v259);
        v193 = v243;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v261, v243, v242);
        v166 = v249;
        swift_bridgeObjectRelease();
        sub_1001412B4((uint64_t)v14);
        *(_WORD *)(v172 + 22) = 2048;
        v194 = *(_QWORD *)(v11 + *(int *)(v8 + 20));
        sub_1001412B4(v11);
        v261 = v194;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v261, v193, v172 + 24);
        *(_WORD *)(v172 + 32) = 256;
        v195 = v248;
        sub_10002517C(v166, (unint64_t)v248);
        sub_10013DE98(v166, (uint64_t)v195);
        v197 = v196;
        sub_1000410CC();
        sub_1000410CC();
        if ((v197 & 0x100) != 0)
          v198 = 0;
        else
          v198 = v197;
        v199 = (uint8_t *)v172;
        sub_1001411AC(v172 + 34, v172 + 35, v198);
        sub_1000410CC();
        v200 = v244;
        _os_log_impl((void *)&_mh_execute_header, v244, (os_log_type_t)v245, "%{public}s: TargetEvent device=%{public}s service=0x%llx reportID=0x%hhx", v199, 0x23u);
        v201 = v246;
        swift_arrayDestroy(v246, 2, (char *)&type metadata for Any + 8);
        sub_100007958(v201);
        sub_100007958((uint64_t)v199);

      }
      else
      {
        sub_100022AEC(v166, (unint64_t)v165);
        v195 = v165;
        sub_1001412B4(v11);
        sub_100026AF4(v164);
        sub_1001412B4((uint64_t)v14);
        sub_1000410CC();

      }
      v209 = v247;
      v11 = v258;
      sub_1001393B0(v255, v166, (unint64_t)v195, (uint64_t)v17);
      v204 = v210;
      sub_100022AEC((uint64_t)v250, v209);
      sub_1000410CC();
      sub_1000255F0((uint64_t)v17, type metadata accessor for HIDUniversalSenderID);
LABEL_67:
      if (v204 >> 60 == 15)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v230 = sub_100141268();
        sub_10002517C(v230, v231);
        v232 = sub_100141268();
        HIDReport.storage.getter(v232, v233);
        v234 = sub_100141268();
        sub_100022AEC(v234, v235);
        v236 = (_QWORD *)swift_allocObject(&unk_10028D498, 40, 7);
        v237 = v251;
        v236[2] = v11;
        v236[3] = v237;
        v236[4] = v253;
        v238 = sub_1000B219C();
        sub_1000C251C(v238);
        sub_100060054();
        sub_1001413F4(0xD00000000000005ELL, 0x8000000100258650, 1534, (uint64_t)sub_10013F734);
        sub_100128DA4();
        sub_100026AEC();
        sub_100141360();
      }
LABEL_70:
      v239 = sub_100141268();
      sub_100022AD8(v239, v240);
LABEL_71:
      sub_10003AF60();
      return;
    default:
      sub_10000E420();
      v259 = 0;
      v260 = 0xE000000000000000;
      _StringGuts.grow(_:)(24);
      swift_bridgeObjectRelease();
      v259 = 0xD000000000000016;
      v260 = 0x8000000100258740;
      LOBYTE(v261) = v27;
      v44._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt8, &protocol witness table for UInt8);
      String.append(_:)(v44);
      swift_bridgeObjectRelease();
      v45 = v259;
      v46 = v260;
      sub_10002D82C(v47, (unint64_t *)&qword_1002AAB80, NSError_ptr);
      sub_100040544();
      v48 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(-6742, v45, v46, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Ensemble_executables/EnsembleAgent/EventController.swift", 94, 2, 1529);
      sub_10000E568();
      v49 = sub_1000B219C();
      sub_1000C251C(v49);
      v41 = v48;
      v42 = sub_100124048();
      v43 = (uint64_t)v48;
      goto LABEL_9;
  }
}

#error "10013ADCC: call analysis failed (funcsize=76)"

uint64_t sub_10013AE20(uint64_t a1, void *a2)
{
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v8;

  v8 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(21, 1);
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  String.append(_:)(v4);
  v5._countAndFlagsBits = a1;
  v5._object = a2;
  String.append(_:)(v5);
  v6._object = (void *)0x8000000100258760;
  v6._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v6);
  return v8;
}

void sub_10013AEA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD aBlock[6];
  __int128 v38[2];

  v33 = a4;
  v31 = a3;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v36 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v34 = *(_QWORD *)(v8 - 8);
  v35 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000055B0(qword_1002ABCC8);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v30 - v16;
  type metadata accessor for P2PDevice(0);
  static P2PDevice.makeNotificationIcon(for:)();
  v18 = sub_1000078E0(0, (unint64_t *)&qword_1002AA660, OS_dispatch_queue_ptr);
  v32 = static OS_dispatch_queue.main.getter(v18);
  sub_10009513C(a2, (uint64_t)v38);
  sub_10005FAFC((uint64_t)v17, (uint64_t)v14, qword_1002ABCC8);
  v19 = *(unsigned __int8 *)(v12 + 80);
  v20 = (v19 + 64) & ~v19;
  v21 = (v13 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = swift_allocObject(&unk_10028D510, v21 + 8, v19 | 7);
  sub_100025A50(v38, v22 + 16);
  *(_QWORD *)(v22 + 56) = v31;
  sub_10005FA70((uint64_t)v14, v22 + v20, qword_1002ABCC8);
  *(_QWORD *)(v22 + v21) = v33;
  aBlock[4] = sub_10013F8CC;
  aBlock[5] = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000E610;
  aBlock[3] = &unk_10028D528;
  v23 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  v24 = swift_release();
  static DispatchQoS.unspecified.getter(v24);
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_10013FC28((unint64_t *)&qword_1002AA6C0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  v26 = v25;
  v27 = sub_1000055B0((uint64_t *)&unk_1002AC9A0);
  sub_10005FCA0((unint64_t *)&qword_1002AA6D0, (uint64_t *)&unk_1002AC9A0);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v27, v28, v5, v26);
  v29 = (void *)v32;
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v7, v23);
  _Block_release(v23);

  (*(void (**)(char *, uint64_t))(v36 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v10, v35);
  sub_100025A28((uint64_t)v17, qword_1002ABCC8);
}

uint64_t sub_10013B1AC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void (*v15)(_QWORD *, uint64_t, uint64_t, __n128);
  __n128 v16;
  _BYTE v19[24];

  v6 = type metadata accessor for NotificationAlert(0);
  __chkstk_darwin(v6);
  v8 = &v19[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = a1[3];
  v10 = a1[4];
  sub_10000DBE4(a1, v9);
  v11 = (uint64_t)v8 + *(int *)(sub_1000055B0(&qword_1002B28F0) + 48);
  v12 = a2 + OBJC_IVAR____TtC13EnsembleAgent9P2PDevice_properties;
  swift_beginAccess(v12, v19, 0, 0);
  v13 = (_QWORD *)(v12 + *(int *)(type metadata accessor for P2PDevice.Properties(0) + 44));
  v14 = v13[1];
  *v8 = *v13;
  v8[1] = v14;
  sub_10005FAFC(a3, v11, qword_1002ABCC8);
  swift_storeEnumTagMultiPayload(v8, v6, 3);
  v15 = *(void (**)(_QWORD *, uint64_t, uint64_t, __n128))(v10 + 8);
  v16 = swift_bridgeObjectRetain();
  v15(v8, v9, v10, v16);
  sub_1000255F0((uint64_t)v8, type metadata accessor for NotificationAlert);
  return UniversalControlPreferences.hasShownControlNotification.setter(1);
}

uint64_t sub_10013B2F8(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;

  if (a1 == 0x65756C6156776172 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    v5 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65756C6156776172, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v5 = v4 ^ 1;
  }
  return v5 & 1;
}

uint64_t sub_10013B37C()
{
  return 0x65756C6156776172;
}

void sub_10013B394(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  _QWORD v14[2];

  v6 = sub_1000055B0(&qword_1002B28B8);
  __chkstk_darwin(v6);
  sub_100065E48();
  v7 = a1[3];
  v8 = a1[4];
  sub_10000DBE4(a1, v7);
  v9 = sub_10013F6D0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for EventMessage.CodingKeys, &type metadata for EventMessage.CodingKeys, v9, v7, v8);
  v14[0] = a2;
  v14[1] = a3;
  v10 = sub_1000A23DC();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v14, v11, v6, &type metadata for Data, v10);
  v12 = sub_1000D95F8();
  v13(v12);
  sub_10003AF60();
}

uint64_t sub_10013B470(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v5 = sub_1000055B0(&qword_1002B28A0);
  sub_1000C259C();
  __chkstk_darwin(v6);
  sub_100026500();
  v7 = a1[3];
  v8 = a1[4];
  sub_10000DBE4(a1, v7);
  v9 = sub_10013F6D0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for EventMessage.CodingKeys, &type metadata for EventMessage.CodingKeys, v9, v7, v8);
  if (!v1)
  {
    sub_1000A2140();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for Data, v10, v5, &type metadata for Data);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v5);
  }
  sub_100005988(a1);
  return sub_100141400();
}

uint64_t sub_10013B57C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10013B2F8(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_10013B5A4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10013F6D0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10013B5CC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10013F6D0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10013B5F4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_10013B470(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

void sub_10013B61C(_QWORD *a1)
{
  uint64_t *v1;

  sub_10013B394(a1, *v1, v1[1]);
}

void sub_10013B634(uint64_t a1, NSObject *a2, uint64_t a3)
{
  sub_100139920(a1, a2, a3);
}

void sub_10013B648(uint64_t a1, uint64_t a2)
{
  sub_100139914(a1, a2);
}

uint64_t sub_10013B65C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(_QWORD);
  char v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  type metadata accessor for HIDUniversalSenderID(0);
  sub_1000262EC();
  __chkstk_darwin(v4);
  sub_10002641C();
  v7 = v6 - v5;
  v8 = sub_100141354();
  sub_10005F428(v8, v9, v10);
  sub_10014142C();
  sub_1000E68A4(a1, a2, v7);
  sub_10014142C();
  sub_10013DE98(a1, a2);
  sub_100022AEC(a1, a2);
  ReportID.keyboard.unsafeMutableAddressor();
  sub_100141324();
  if (v11
    || (ReportID.consumer.unsafeMutableAddressor(), sub_100141324(), v11)
    || (ReportID.appleVendorKeyboard.unsafeMutableAddressor(), sub_100141324(), v11)
    || (ReportID.appleVendorTopCase.unsafeMutableAddressor(), sub_100141324(), v11))
  {
    sub_100140EA0();
    sub_1001413B0();
    sub_100048C38();
    v15 = sub_1000FD3C8();
    v17 = 1;
  }
  else
  {
    sub_100140EA0();
    sub_1001413B0();
    sub_100048C38();
    v15 = sub_1000FD3C8();
    v17 = 0;
  }
  sub_100133FA8(v15, v16, v17);
  sub_100048C38();
  v12 = sub_1000FD3C8();
  return sub_100022AEC(v12, v13);
}

uint64_t sub_10013B790()
{
  return sub_10013B7B0();
}

uint64_t sub_10013B7B4(uint64_t a1, unint64_t a2)
{
  return sub_10013B65C(a1, a2);
}

uint64_t sub_10013B7D4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  unint64_t v10;
  unint64_t v12;
  unint64_t v14;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v22;
  char v24;

  if (a1 == 0x65727574706163 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65727574706163, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x657463656E6E6F63 && a2 == 0xE900000000000064)
  {
    v8 = 0xE900000000000064;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657463656E6E6F63, 0xE900000000000064, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0x6E657473696CLL && a2 == 0xE600000000000000)
  {
    v10 = 0xE600000000000000;
    goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E657473696CLL, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2;
  }
  if (a1 == 0x756C47636967616DLL && a2 == 0xE900000000000065)
  {
    v12 = 0xE900000000000065;
    goto LABEL_32;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x756C47636967616DLL, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
LABEL_32:
    swift_bridgeObjectRelease(v12);
    return 3;
  }
  if (a1 == 0x656372756F73 && a2 == 0xE600000000000000)
  {
    v14 = 0xE600000000000000;
    goto LABEL_40;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656372756F73, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
LABEL_40:
    swift_bridgeObjectRelease(v14);
    return 4;
  }
  if (a1 == 0x73746567726174 && a2 == 0xE700000000000000)
  {
    v16 = 0xE700000000000000;
    goto LABEL_48;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x73746567726174, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
LABEL_48:
    swift_bridgeObjectRelease(v16);
    return 5;
  }
  if (a1 == 0xD000000000000014)
  {
    v17 = 0x8000000100258560;
    if (a2 == 0x8000000100258560)
      goto LABEL_53;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000100258560, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
LABEL_53:
    swift_bridgeObjectRelease(v17);
    return 6;
  }
  if (a1 == 0xD000000000000015)
  {
    v18 = 0x80000001002585A0;
    if (a2 == 0x80000001002585A0)
      goto LABEL_58;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x80000001002585A0, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
LABEL_58:
    swift_bridgeObjectRelease(v18);
    return 7;
  }
  if (a1 == 0xD000000000000014)
  {
    v19 = 0x8000000100258580;
    if (a2 == 0x8000000100258580)
      goto LABEL_63;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000100258580, a1, a2, 0) & 1) != 0)
  {
    v19 = a2;
LABEL_63:
    swift_bridgeObjectRelease(v19);
    return 8;
  }
  if (a1 == 0xD000000000000015)
  {
    v20 = 0x80000001002585C0;
    if (a2 == 0x80000001002585C0)
      goto LABEL_68;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x80000001002585C0, a1, a2, 0) & 1) != 0)
  {
    v20 = a2;
LABEL_68:
    swift_bridgeObjectRelease(v20);
    return 9;
  }
  if (a1 == 0x6957646C65696873 && a2 == 0xEC000000776F646ELL)
  {
    v22 = 0xEC000000776F646ELL;
    goto LABEL_76;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6957646C65696873, 0xEC000000776F646ELL, a1, a2, 0) & 1) != 0)
  {
    v22 = a2;
LABEL_76:
    swift_bridgeObjectRelease(v22);
    return 10;
  }
  if (a1 == 0x6574617473 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 11;
  }
  else
  {
    v24 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6574617473, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v24 & 1) != 0)
      return 11;
    else
      return 12;
  }
}

uint64_t sub_10013BC7C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10013BCB0 + 4 * byte_1002273C4[a1]))(0x65727574706163, 0xE700000000000000);
}

uint64_t sub_10013BCB0()
{
  return 0x657463656E6E6F63;
}

uint64_t sub_10013BCCC()
{
  return 0x6E657473696CLL;
}

uint64_t sub_10013BCE0()
{
  return 0x756C47636967616DLL;
}

uint64_t sub_10013BD00()
{
  return 0x656372756F73;
}

uint64_t sub_10013BD14()
{
  return 0x73746567726174;
}

unint64_t sub_10013BD28()
{
  return 0xD000000000000014;
}

void sub_10013BD68()
{
  JUMPOUT(0x10013BD7CLL);
}

uint64_t sub_10013BD88()
{
  return 0x6957646C65696873;
}

uint64_t sub_10013BDA8()
{
  return 0x6574617473;
}

void sub_10013BDBC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];
  char v26;
  _BYTE v27[8];
  _BYTE v28[8];
  _BYTE v29[8];
  _BYTE v30[15];
  _BYTE v31[17];

  v5 = v1;
  v7 = sub_1000055B0(&qword_1002B28F8);
  sub_1000C259C();
  __chkstk_darwin(v8);
  sub_1000268CC();
  v9 = a1[3];
  v10 = a1[4];
  sub_10000DBE4(a1, v9);
  v11 = sub_10013F948();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for EventController.DiagnosticState.CodingKeys, &type metadata for EventController.DiagnosticState.CodingKeys, v11, v9, v10);
  v25[0] = *(_QWORD *)v5;
  v26 = 0;
  sub_1000055B0((uint64_t *)&unk_1002AC160);
  sub_10000DC44();
  sub_100140F5C();
  if (!v2)
  {
    v25[0] = *(_QWORD *)(v5 + 8);
    v26 = 1;
    v12 = sub_1000055B0(&qword_1002AA560);
    sub_10013F984();
    v13 = sub_100141384();
    sub_1000F00E4(v13, v14, v15, v12, v16);
    v25[0] = *(_QWORD *)(v5 + 16);
    v26 = 2;
    sub_100140F5C();
    sub_100141068(*(unsigned __int8 *)(v5 + 24), 3);
    sub_100140EB8(v5 + 25, (uint64_t)v31);
    sub_100140EB8((uint64_t)v31, (uint64_t)v25);
    v26 = 4;
    v17 = sub_10003668C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v25, &v26, v7, &type metadata for UniversalControlDeviceID, v17);
    v25[0] = *(_QWORD *)(v5 + 48);
    v26 = 5;
    v18 = sub_1000055B0(&qword_1002B2928);
    sub_10013F9E8(&qword_1002B2930, &qword_1002B2928);
    v19 = sub_100141384();
    sub_1000F00E4(v19, v20, v21, v18, v22);
    sub_100140EB8(v5 + 56, (uint64_t)v30);
    sub_100140EB8((uint64_t)v30, (uint64_t)v25);
    v26 = 6;
    sub_1000055B0(&qword_1002B2940);
    sub_10013F9E8(&qword_1002B2948, &qword_1002B2940);
    sub_100140DC0();
    sub_100140EB8(v5 + 64, (uint64_t)v29);
    sub_100140EB8((uint64_t)v29, (uint64_t)v25);
    v26 = 7;
    sub_100140DC0();
    sub_100140EB8(v5 + 72, (uint64_t)v28);
    sub_100140EB8((uint64_t)v28, (uint64_t)v25);
    v26 = 8;
    sub_100140DC0();
    sub_100140EB8(v5 + 80, (uint64_t)v27);
    sub_100140EB8((uint64_t)v27, (uint64_t)v25);
    v26 = 9;
    sub_100140DC0();
    sub_100141068(*(unsigned __int8 *)(v5 + 88), 10);
    v23 = *(_QWORD *)(v5 + 96);
    v24 = *(_QWORD *)(v5 + 104);
    LOBYTE(v25[0]) = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v23, v24, v25, v7);
  }
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v7);
  sub_1000C260C();
}

uint64_t sub_10013C0D8()
{
  unsigned __int8 *v0;

  return sub_10013BC7C(*v0);
}

uint64_t sub_10013C0E0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10013B7D4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10013C104(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10013F948();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10013C12C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10013F948();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10013C154(_QWORD *a1)
{
  const void *v1;
  _BYTE v3[112];

  memcpy(v3, v1, sizeof(v3));
  sub_10013BDBC(a1);
}

void sub_10013C1A4()
{
  char v0;
  char v1;
  const char *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_signpost_type_t v11;
  uint8_t *v12;
  os_signpost_id_t v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;

  sub_10002626C();
  v1 = v0;
  v3 = v2;
  v4 = sub_100141420();
  type metadata accessor for OSSignpostID(v4);
  sub_1000C259C();
  __chkstk_darwin(v5);
  sub_10002641C();
  v8 = v7 - v6;
  v10 = OSSignposter.logHandle.getter(v9);
  v11 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    goto LABEL_10;
  if ((v1 & 1) == 0)
  {
    if (v3)
    {
LABEL_9:
      v12 = (uint8_t *)sub_10000797C(2);
      *(_WORD *)v12 = 0;
      v13 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, v11, v13, v3, "", v12, 2u);
      sub_100007958((uint64_t)v12);
LABEL_10:

      v14 = sub_100141354();
      v15(v14);
      v16 = type metadata accessor for OSSignpostIntervalState(0);
      sub_10004113C(v16);
      OSSignpostIntervalState.init(id:isOpen:)(v8, 1);
      sub_10000E4E0();
      return;
    }
    __break(1u);
  }
  if ((unint64_t)v3 >> 32)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v3 >> 11 != 27)
  {
    if (v3 >> 16 <= 0x10)
    {
      v3 = (const char *)&v17;
      goto LABEL_9;
    }
    goto LABEL_12;
  }
LABEL_13:
  __break(1u);
}

void sub_10013C2D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  const char *v21;
  uint64_t v22;
  os_signpost_type_t v23;
  uint64_t v24;
  void (*v25)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  os_signpost_id_t v28;
  void (*v29)(_BYTE *, uint64_t);
  _BYTE v30[4];
  int v31;
  uint64_t v32;
  int v33;
  const char *v34;
  _BOOL4 v35;
  uint64_t v36;

  sub_10002626C();
  v32 = v1;
  v3 = v2;
  v33 = v4;
  v34 = v5;
  v6 = sub_100141420();
  v7 = type metadata accessor for OSSignpostError(v6);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_100026500();
  v9 = type metadata accessor for OSSignpostID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = &v30[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = __chkstk_darwin(v11);
  v16 = &v30[-v15];
  v17 = OSSignposter.logHandle.getter(v14);
  v18 = OSSignpostIntervalState.signpostID.getter();
  v31 = static os_signpost_type_t.end.getter(v18);
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    goto LABEL_5;
  if ((v33 & 1) == 0)
  {
    if (!v34)
    {
      __break(1u);
LABEL_5:

      (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v16, v9);
LABEL_14:
      sub_10000E4E0();
      return;
    }
LABEL_10:
    v19 = swift_retain(v3);
    checkForErrorAndConsumeState(state:)(v19);
    swift_release();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v8 + 88))(v0, v7) == enum case for OSSignpostError.doubleEnd(_:))
    {
      v20 = 0;
      v21 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v0, v7);
      v21 = "success=%{BOOL}d";
      v20 = 1;
    }
    v22 = v32;
    v23 = v31;
    v24 = sub_1000FD3C8();
    v25(v24);
    v26 = sub_10000797C(8);
    *(_BYTE *)v26 = 0;
    *(_BYTE *)(v26 + 1) = v20;
    *(_WORD *)(v26 + 2) = 1024;
    v35 = v22 == 0;
    v27 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v26 + 4, v26 + 8);
    v28 = OSSignpostID.rawValue.getter(v27);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, v23, v28, v34, v21, (uint8_t *)v26, 8u);
    sub_100007958(v26);

    v29 = *(void (**)(_BYTE *, uint64_t))(v10 + 8);
    v29(v16, v9);
    v29(v13, v9);
    goto LABEL_14;
  }
  if ((unint64_t)v34 >> 32)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v34 >> 11 != 27)
  {
    if (v34 >> 16 <= 0x10)
    {
      v34 = (const char *)&v36;
      goto LABEL_10;
    }
    goto LABEL_16;
  }
LABEL_17:
  __break(1u);
}

uint64_t type metadata accessor for EventController()
{
  return objc_opt_self(_TtC13EnsembleAgent15EventController);
}

ValueMetadata *type metadata accessor for EventController.PointerVisibility()
{
  return &type metadata for EventController.PointerVisibility;
}

uint64_t storeEnumTagSinglePayload for EventController.TargetKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10013C5A0 + 4 * byte_1002273D5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10013C5D4 + 4 * byte_1002273D0[v4]))();
}

uint64_t sub_10013C5D4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10013C5DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10013C5E4);
  return result;
}

uint64_t sub_10013C5F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10013C5F8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10013C5FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10013C604(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EventController.TargetKey()
{
  return &type metadata for EventController.TargetKey;
}

id sub_10013C620(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  id v7;
  id result;

  if (a4 >> 62 == 1)
  {
    swift_unknownObjectRetain(a3);
    swift_retain(a4 & 0x3FFFFFFFFFFFFFFFLL);
    return a5;
  }
  else if (!(a4 >> 62))
  {
    v7 = a5;
    swift_unknownObjectRetain(a3);
    return (id)swift_retain(a4);
  }
  return result;
}

void destroy for EventController.State(uint64_t a1)
{
  sub_10013C6B8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(void **)(a1 + 32));
}

void sub_10013C6B8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v5;
  id v6;

  v5 = a4;
  if (a4 >> 62)
  {
    if (a4 >> 62 != 1)
      return;
    v6 = a5;
    v5 = a4 & 0x3FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v6 = a5;
  }
  swift_unknownObjectRelease(a3);
  swift_release(v5);

}

uint64_t *initializeWithCopy for EventController.State(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = (void *)a2[4];
  sub_10013C620(*a2, v4, v5, v6, v7);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = (uint64_t)v7;
  return a1;
}

uint64_t *assignWithCopy for EventController.State(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = (void *)a2[4];
  sub_10013C620(*a2, v4, v5, v6, v7);
  v8 = *a1;
  v9 = a1[1];
  v10 = a1[2];
  v11 = a1[3];
  v12 = (void *)a1[4];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = (uint64_t)v7;
  sub_10013C6B8(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t *assignWithTake for EventController.State(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  __int128 v9;

  v3 = *(_QWORD *)(a2 + 32);
  v4 = *a1;
  v6 = a1[1];
  v5 = a1[2];
  v7 = a1[3];
  v8 = (void *)a1[4];
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v9;
  a1[4] = v3;
  sub_10013C6B8(v4, v6, v5, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for EventController.State(uint64_t a1, unsigned int a2)
{
  unsigned int v2;

  if (a2)
  {
    if (a2 >= 0x7E && *(_BYTE *)(a1 + 40))
    {
      v2 = *(_DWORD *)a1 + 125;
    }
    else
    {
      v2 = (((*(_QWORD *)(a1 + 24) >> 57) >> 5) | (4
                                                               * ((*(_QWORD *)(a1 + 24) >> 57) & 0x18 | *(_QWORD *)(a1 + 24) & 7))) ^ 0x7F;
      if (v2 >= 0x7D)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return v2 + 1;
}

uint64_t storeEnumTagSinglePayload for EventController.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7D)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 126;
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
    {
      v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(_QWORD *)(result + 32) = 0;
    }
  }
  return result;
}

uint64_t sub_10013C8EC(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 24) >> 62;
  if (v1 <= 1)
    return v1;
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_10013C908(uint64_t result)
{
  *(_QWORD *)(result + 24) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

_QWORD *sub_10013C918(_QWORD *result, uint64_t a2)
{
  if (a2 < 2)
  {
    result[3] = result[3] & 0xFFFFFFFFFFFFFF8 | (a2 << 62);
  }
  else
  {
    result[1] = 0;
    result[2] = 0;
    *result = (a2 - 2);
    *(_OWORD *)(result + 3) = xmmword_10021DD40;
  }
  return result;
}

ValueMetadata *type metadata accessor for EventController.State()
{
  return &type metadata for EventController.State;
}

unint64_t sub_10013C960()
{
  unint64_t result;

  result = qword_1002B27B8;
  if (!qword_1002B27B8)
  {
    result = swift_getWitnessTable(&unk_100227598, &type metadata for EventController.TargetKey);
    atomic_store(result, (unint64_t *)&qword_1002B27B8);
  }
  return result;
}

void sub_10013C99C()
{
  sub_10005FCA0(&qword_1002B27C0, (uint64_t *)&unk_1002B27C8);
}

unint64_t sub_10013C9D0()
{
  unint64_t result;

  result = qword_1002B27F8;
  if (!qword_1002B27F8)
  {
    result = swift_getWitnessTable(&unk_100227660, &type metadata for EventMessage);
    atomic_store(result, (unint64_t *)&qword_1002B27F8);
  }
  return result;
}

unint64_t sub_10013CA0C(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_10013CA38();
  result = sub_10013CA74();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_10013CA38()
{
  unint64_t result;

  result = qword_1002B2850;
  if (!qword_1002B2850)
  {
    result = swift_getWitnessTable(&unk_1002276A4, &type metadata for EventMessage);
    atomic_store(result, (unint64_t *)&qword_1002B2850);
  }
  return result;
}

unint64_t sub_10013CA74()
{
  unint64_t result;

  result = qword_1002B2858;
  if (!qword_1002B2858)
  {
    result = swift_getWitnessTable(&unk_10022767C, &type metadata for EventMessage);
    atomic_store(result, (unint64_t *)&qword_1002B2858);
  }
  return result;
}

uint64_t sub_10013CAB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _OWORD v6[4];
  _BYTE v7[24];
  _OWORD v8[4];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v7, 0, 0);
  if (!swift_weakLoadStrong(v1))
    return 0;
  v2 = type metadata accessor for PropertyListEncoder(0);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  PropertyListEncoder.init()();
  dispatch thunk of PropertyListEncoder.outputFormat.setter(200);
  sub_1000FD83C((uint64_t)v8);
  v6[0] = v8[0];
  v6[1] = v8[1];
  v6[2] = v8[2];
  v6[3] = v8[3];
  v3 = sub_10005F894();
  v4 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v6, &type metadata for P2PController.DiagnosticState, v3);
  sub_10013FEF0(v8);
  swift_release();
  swift_release();
  return v4;
}

uint64_t sub_10013CC68(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v9;
  _OWORD v10[2];
  _BYTE v11[24];
  __int128 v12;
  _BYTE v13[25];
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v11, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (!Strong)
    return 0;
  v3 = Strong;
  v4 = type metadata accessor for PropertyListEncoder(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = PropertyListEncoder.init()();
  dispatch thunk of PropertyListEncoder.outputFormat.setter(200);
  sub_100079994(&v12);
  sub_10005FA70((uint64_t)&v13[16], (uint64_t)&v16, &qword_1002B29A0);
  v15 = *(_QWORD *)&v13[8];
  v14 = v12;
  v9 = v12;
  v10[0] = *(_OWORD *)v13;
  *(_OWORD *)((char *)v10 + 9) = *(_OWORD *)&v13[9];
  v6 = sub_10005F748();
  v7 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(&v9, &type metadata for DiscoveryController.DiagnosticState, v6);
  sub_10003A2D4(&v14);
  sub_10003A2D4((_QWORD *)&v14 + 1);
  sub_10003A2D4(&v15);
  sub_10003A2D4(&v16);
  swift_release(v3);
  swift_release(v5);
  return v7;
}

uint64_t sub_10013CE7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  _BYTE v9[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v9, 0, 0);
  if (!swift_weakLoadStrong(v1))
    return 0;
  v2 = type metadata accessor for PropertyListEncoder(0);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  PropertyListEncoder.init()();
  dispatch thunk of PropertyListEncoder.outputFormat.setter(200);
  v8[0] = sub_10003678C();
  v8[1] = v3;
  v8[2] = v4;
  v5 = sub_100033B7C();
  v6 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v8, &unk_100283398, v5);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_10013D050(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD v7[2];
  _BYTE v8[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v8, 0, 0);
  if (!swift_weakLoadStrong(v1))
    return 0;
  v2 = type metadata accessor for PropertyListEncoder(0);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  PropertyListEncoder.init()();
  dispatch thunk of PropertyListEncoder.outputFormat.setter(200);
  v7[0] = sub_1001463F0();
  v7[1] = v3;
  v4 = sub_10005F858();
  v5 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v7, &unk_10028E2B0, v4);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_10013D204(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD v7[2];
  _BYTE v8[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v8, 0, 0);
  if (!swift_weakLoadStrong(v1))
    return 0;
  v2 = type metadata accessor for PropertyListEncoder(0);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  PropertyListEncoder.init()();
  dispatch thunk of PropertyListEncoder.outputFormat.setter(200);
  v7[0] = sub_1001462C0();
  v7[1] = v3;
  v4 = sub_10005F6D0();
  v5 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v7, &unk_10028E230, v4);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_10013D3A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD __dst[27];
  _BYTE v7[24];
  _QWORD __src[27];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v7, 0, 0);
  if (!swift_weakLoadStrong(v1))
    return 0;
  v2 = type metadata accessor for PropertyListEncoder(0);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  PropertyListEncoder.init()();
  dispatch thunk of PropertyListEncoder.outputFormat.setter(200);
  sub_1001464E4();
  memcpy(__dst, __src, 0xD1uLL);
  v3 = sub_10005F8FC();
  v4 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(__dst, &unk_10028E168, v3);
  sub_10013FD98(__src);
  swift_release();
  swift_release();
  return v4;
}

uint64_t sub_10013D558(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD __dst[19];
  _BYTE v7[24];
  _QWORD __src[19];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v7, 0, 0);
  if (!swift_weakLoadStrong(v1))
    return 0;
  v2 = type metadata accessor for PropertyListEncoder(0);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  PropertyListEncoder.init()();
  dispatch thunk of PropertyListEncoder.outputFormat.setter(200);
  sub_100146C6C();
  memcpy(__dst, __src, sizeof(__dst));
  v3 = sub_10005F9C4();
  v4 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(__dst, &unk_10028E0D0, v3);
  sub_10013FDE8(__src);
  swift_release();
  swift_release();
  return v4;
}

uint64_t sub_10013D70C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD v9[3];
  _BYTE v10[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v10, 0, 0);
  if (!swift_weakLoadStrong(v1))
    return 0;
  v2 = type metadata accessor for PropertyListEncoder(0);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  PropertyListEncoder.init()();
  dispatch thunk of PropertyListEncoder.outputFormat.setter(200);
  sub_100190B90();
  LOBYTE(v9[0]) = v3 & 1;
  v9[1] = v4;
  v9[2] = v5;
  v6 = sub_10005F70C();
  v7 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v9, &type metadata for ConnectionController.DiagnosticState, v6);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_10013D8C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD __dst[14];
  _BYTE v7[24];
  uint64_t __src[14];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v7, 0, 0);
  if (!swift_weakLoadStrong(v1))
    return 0;
  v2 = type metadata accessor for PropertyListEncoder(0);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  PropertyListEncoder.init()();
  dispatch thunk of PropertyListEncoder.outputFormat.setter(200);
  sub_100125938();
  memcpy(__dst, __src, sizeof(__dst));
  v3 = sub_10005F7C0();
  v4 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(__dst, &type metadata for EventController.DiagnosticState, v3);
  sub_10013FC64(__src);
  swift_release();
  swift_release();
  return v4;
}

id sub_10013DA7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  void *v7;
  id v8;
  _QWORD v10[5];
  uint64_t v11;

  v10[4] = a3;
  v11 = a4;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  v10[2] = sub_10013DB1C;
  v10[3] = &unk_10028D690;
  v7 = _Block_copy(v10);
  v8 = objc_msgSend(v4, "initWithSubsystem:category:provider:", a1, a2, v7);
  _Block_release(v7);
  swift_release(v11);
  return v8;
}

Class sub_10013DB1C(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  Class isa;

  v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v4 = v1(v3);
  v6 = v5;
  swift_release(v2);
  if (v6 >> 60 == 15)
  {
    isa = 0;
  }
  else
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100022AD8(v4, v6);
  }
  return isa;
}

unint64_t sub_10013DB98(unint64_t result, char a2, uint64_t a3)
{
  if ((a2 & 1) != 0)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_10013DBBC(uint64_t *a1, uint64_t a2)
{
  initializeWithCopy for HIDReportAccumulator(a2, a1);
  return a2;
}

_QWORD *sub_10013DBF8(_QWORD *a1)
{
  destroy for HIDReportAccumulator(a1);
  return a1;
}

uint64_t sub_10013DC2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[9];

  if (!*(_QWORD *)(a2 + 16))
    return 1;
  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return 1;
  v4 = 0;
  v5 = a1 + 32;
  v6 = a2 + 56;
  while (1)
  {
    if (*(_QWORD *)(a2 + 16))
    {
      v7 = *(unsigned __int8 *)(v5 + v4);
      Hasher.init(_seed:)(v14, *(_QWORD *)(a2 + 40));
      Hasher._combine(_:)(v7);
      v8 = Hasher._finalize()();
      v9 = -1 << *(_BYTE *)(a2 + 32);
      v10 = v8 & ~v9;
      if (((*(_QWORD *)(v6 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
        break;
    }
LABEL_11:
    if (++v4 == v2)
      return 1;
  }
  v11 = *(_QWORD *)(a2 + 48);
  if (*(unsigned __int8 *)(v11 + v10) != v7)
  {
    v12 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v12;
      if (((*(_QWORD *)(v6 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      if (*(unsigned __int8 *)(v11 + v10) == v7)
        return 0;
    }
    goto LABEL_11;
  }
  return 0;
}

uint64_t sub_10013DD2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t i;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v25;
  _QWORD v26[9];

  if (!*(_QWORD *)(a2 + 16))
    return 1;
  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return 1;
  v25 = a1 + 32;
  v4 = a2 + 56;
  swift_bridgeObjectRetain(a1);
  v5 = 0;
  while (!*(_QWORD *)(a2 + 16))
  {
LABEL_20:
    if (++v5 == v2)
    {
      v22 = 1;
      goto LABEL_24;
    }
  }
  v6 = (uint64_t *)(v25 + 16 * v5);
  v8 = *v6;
  v7 = v6[1];
  Hasher.init(_seed:)(v26, *(_QWORD *)(a2 + 40));
  sub_100040544();
  String.hash(into:)(v26, v8, v7);
  v9 = Hasher._finalize()();
  v10 = -1 << *(_BYTE *)(a2 + 32);
  v11 = v9 & ~v10;
  if (((*(_QWORD *)(v4 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
  {
LABEL_19:
    sub_10000E568();
    goto LABEL_20;
  }
  v12 = *(_QWORD *)(a2 + 48);
  v13 = (uint64_t *)(v12 + 16 * v11);
  v14 = v13[1];
  v15 = *v13 == v8 && v14 == v7;
  if (!v15 && (sub_100124288(*v13, v14) & 1) == 0)
  {
    v16 = ~v10;
    for (i = v11 + 1; ; i = v18 + 1)
    {
      v18 = i & v16;
      if (((*(_QWORD *)(v4 + (((i & v16) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v16)) & 1) == 0)
        break;
      v19 = (uint64_t *)(v12 + 16 * v18);
      v20 = v19[1];
      v21 = *v19 == v8 && v20 == v7;
      if (v21 || (sub_100124288(*v19, v20) & 1) != 0)
        goto LABEL_23;
    }
    goto LABEL_19;
  }
LABEL_23:
  swift_bridgeObjectRelease(a1);
  v22 = 0;
LABEL_24:
  sub_10000E568();
  return v22;
}

uint64_t sub_10013DE90(uint64_t a1)
{
  uint64_t v1;

  return sub_1000E0604(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_10013DE98(uint64_t a1, uint64_t a2)
{
  __asm { BR              X12 }
}

uint64_t sub_10013DEE0(unsigned __int8 a1, uint64_t a2)
{
  unsigned __int8 v2;

  if ((a2 & 0xFF000000000000) != 0)
    v2 = a1;
  else
    v2 = 0;
  return v2 | (((a2 & 0xFF000000000000) == 0) << 8);
}

uint64_t sub_10013DFDC(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD v27[9];

  v3 = v2;
  v6 = *v2;
  Hasher.init(_seed:)(v27, *(_QWORD *)(*v2 + 40));
  HIDDeviceType.hash(into:)(v27, a1);
  v7 = Hasher._finalize()();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  v10 = v6 + 56;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
    goto LABEL_9;
  if (static ReportID.== infix(_:_:)(*(_BYTE *)(*(_QWORD *)(v6 + 48) + v9), a1))
  {
    v11 = 0;
    v12 = 1;
    goto LABEL_10;
  }
  v13 = ~v8;
  v9 = (v9 + 1) & ~v8;
  if (((*(_QWORD *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
  {
    v11 = 1;
    while (1)
    {
      v12 = static ReportID.== infix(_:_:)(*(_BYTE *)(*(_QWORD *)(v6 + 48) + v9), a1);
      if (v12)
        break;
      v9 = (v9 + 1) & v13;
      if (((*(_QWORD *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_10;
    }
    v11 = 0;
  }
  else
  {
LABEL_9:
    v12 = 0;
    v11 = 1;
  }
LABEL_10:
  v14 = *(_QWORD *)(v6 + 16);
  v15 = v14 + v11;
  if (__OFADD__(v14, v11))
  {
    __break(1u);
    goto LABEL_34;
  }
  v16 = *(_QWORD *)(v6 + 24);
  if (v16 >= v15 && (a2 & 1) != 0)
  {
    if (!v12)
      goto LABEL_29;
LABEL_27:
    v21 = *(_QWORD *)(*v3 + 48);
    result = *(unsigned __int8 *)(v21 + v9);
    *(_BYTE *)(v21 + v9) = a1;
    return result;
  }
  if ((a2 & 1) != 0)
  {
    sub_10011C26C(v15);
    goto LABEL_21;
  }
  if (v16 < v15)
  {
    sub_100120F28(v15);
LABEL_21:
    v17 = *v3;
    Hasher.init(_seed:)(v27, *(_QWORD *)(*v3 + 40));
    HIDDeviceType.hash(into:)(v27, a1);
    v18 = Hasher._finalize()();
    v19 = -1 << *(_BYTE *)(v17 + 32);
    v9 = v18 & ~v19;
    if (((*(_QWORD *)(v17 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
    {
      if (static ReportID.== infix(_:_:)(*(_BYTE *)(*(_QWORD *)(v17 + 48) + v9), a1))
      {
LABEL_26:
        if (v12)
          goto LABEL_27;
LABEL_35:
        result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for HIDDeviceType);
        __break(1u);
        return result;
      }
      v20 = ~v19;
      while (1)
      {
        v9 = (v9 + 1) & v20;
        if (((*(_QWORD *)(v17 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
          break;
        if (static ReportID.== infix(_:_:)(*(_BYTE *)(*(_QWORD *)(v17 + 48) + v9), a1))
          goto LABEL_26;
      }
    }
    if (!v12)
      goto LABEL_29;
    goto LABEL_35;
  }
  sub_10011F67C();
  if (v12)
    goto LABEL_27;
LABEL_29:
  v23 = *v3;
  *(_QWORD *)(*v3 + 8 * (v9 >> 6) + 56) |= 1 << v9;
  *(_BYTE *)(*(_QWORD *)(v23 + 48) + v9) = a1;
  v24 = *(_QWORD *)(v23 + 16);
  v25 = __OFADD__(v24, 1);
  v26 = v24 + 1;
  if (v25)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  *(_QWORD *)(v23 + 16) = v26;
  return 3;
}

uint64_t sub_10013E250()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  unint64_t v11;
  uint64_t v13;

  v1 = *(_QWORD *)(sub_100026774() - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v13 = sub_1000B9A80();
  v5 = *(_QWORD *)(v13 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = type metadata accessor for OSSignposter(0);
  if (!_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v0 + v3, 1, v8))
  {
    v9 = sub_1000FD3C8();
    v10(v9);
  }
  v11 = (v6 + ((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v6;
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v0 + v11, v13);
  swift_release();
  return swift_deallocObject(v0, ((((v7 + v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 41, v2 | v6 | 7);
}

void sub_10013E378(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  double v10;
  uint64_t v11;

  v3 = *(_QWORD *)(sub_100026774() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)(sub_1000B9A80() - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + v6 + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = (*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(double *)(v1 + v9);
  v11 = v1 + ((v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  sub_10012F2FC(a1, v1 + v4, *(_QWORD *)(v1 + v5), *(_QWORD *)(v1 + v6), v1 + v8, *(_QWORD *)v11, *(_QWORD *)(v11 + 8), *(_QWORD *)(v11 + 16), v10, *(_QWORD *)(v11 + 24), *(_QWORD *)(v11 + 32), *(_BYTE *)(v11 + 40));
  sub_1000797D8();
}

uint64_t sub_10013E438()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1000F3FA4();
  v1 = sub_1000B9A80();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  sub_100026600();
  sub_1000265F8();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  v6 = sub_100141400();
  return sub_1000264AC(v6, v7, v5);
}

void sub_10013E4AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(sub_1000B9A80() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v4 + *(_QWORD *)(v3 + 64);
  sub_100130E68(*(double *)(v1 + ((v5 + 7) & 0xFFFFFFFFFFFFFFF8)), a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + v4, *(_QWORD *)(v1 + ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8), *(_QWORD *)(v1 + ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 16), *(_BYTE *)(v1 + ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 24), *(_QWORD **)(v1 + ((v5 + 39) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_10013E514()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;

  sub_1000F3FA4();
  v1 = *(unsigned __int8 *)(*(_QWORD *)(sub_100026774() - 8) + 80);
  v2 = type metadata accessor for OSSignposter(0);
  if (!_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v0 + ((v1 + 16) & ~v1), 1, v2))
  {
    v3 = sub_100141158();
    v4(v3);
  }
  swift_release();
  swift_release();
  v5 = sub_100141400();
  return sub_1000264AC(v5, v6, v1 | 7);
}

uint64_t sub_10013E5B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  sub_100026774();
  sub_100141098();
  return sub_100131B64(a1, v1 + v3);
}

uint64_t type metadata accessor for EventController.Event(uint64_t a1)
{
  uint64_t result;

  result = qword_1002B2A18;
  if (!qword_1002B2A18)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for EventController.Event);
  return result;
}

uint64_t sub_10013E61C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int EnumCaseMultiPayload;
  uint64_t v9;

  v1 = *(_QWORD *)(sub_1001412BC() - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  sub_1000265F8();
  v5 = v0 + v3;
  v6 = sub_100141354();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v6, v7);
  if (EnumCaseMultiPayload == 2)
  {
    swift_release();
    sub_100022AEC(*(_QWORD *)(v5 + 8), *(_QWORD *)(v5 + 16));
    sub_1000055B0((uint64_t *)&unk_1002B2870);
    v9 = sub_10000E440();
    sub_10002666C(v9);
  }
  else if (EnumCaseMultiPayload <= 1)
  {
    swift_release();
    sub_100022AEC(*(_QWORD *)(v5 + 8), *(_QWORD *)(v5 + 16));
  }
  return sub_1000265A0(v0, v3 + v4, v2 | 7);
}

uint64_t sub_10013E6C4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(sub_1001412BC() - 8) + 80);
  return sub_100138764(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), v0 + ((v1 + 32) & ~v1));
}

uint64_t sub_10013E6F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10013E700(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_10013E708(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_100133780(a1, v1);
}

uint64_t sub_10013E710()
{
  uint64_t v0;

  sub_100026600();
  sub_1000265F8();
  swift_release();
  return swift_deallocObject(v0, 48, 7);
}

void sub_10013E73C(uint64_t a1)
{
  uint64_t v1;

  sub_100133AD8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(uint64_t))(v1 + 32));
}

uint64_t sub_10013E74C(uint64_t a1)
{
  uint64_t v1;

  return sub_100133C90(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_10013E758(char a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;

  v3 = a3 >> 62;
  if ((a1 & 7) != 0)
    __asm { BR              X10 }
  __asm { BR              X10 }
}

id sub_10013EDFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6, double a7, double a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  id v25;
  char *v26;
  char *v27;
  double *v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t);
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  double v47;
  double v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  objc_class *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  double v62;
  double v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (*v69)(uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  double v78;
  double v79;
  double v80;
  double *v81;
  double *v82;
  double v83;
  double v84;
  double v85;
  double *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  unsigned __int8 v90;
  uint64_t v91;
  id v92;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  double *v97;
  double *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(uint64_t, uint64_t);
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  objc_class *ObjectType;
  uint64_t v109;
  uint64_t v110;
  void (*v111)(char *, uint64_t);
  uint64_t v112;
  uint64_t v113;
  objc_super v114;
  uint64_t v115;
  _BYTE v116[168];
  _QWORD v117[5];
  _OWORD v118[2];
  uint64_t v119;
  uint64_t v120;
  _QWORD v121[4];
  char v122;
  EnsembleAgent::MaterialAppearance v123;
  _OWORD v124[12];

  v112 = a5;
  v113 = a2;
  v100 = a1;
  v101 = a4;
  ObjectType = (objc_class *)swift_getObjectType(a6);
  v12 = sub_1000055B0(&qword_1002AA5F0);
  __chkstk_darwin(v12);
  v109 = (uint64_t)&v94 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UniversalControlAnchor(0);
  v111 = *(void (**)(char *, uint64_t))(v14 - 8);
  v15 = __chkstk_darwin(v14);
  v106 = (uint64_t)&v94 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v18 = (char *)&v94 - v17;
  v19 = type metadata accessor for UniversalControlLink.Endpoint(0);
  v110 = *(_QWORD *)(v19 - 8);
  v20 = __chkstk_darwin(v19);
  v104 = (uint64_t)&v94 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v23 = (char *)&v94 - v22;
  v117[3] = type metadata accessor for PointerController_iOS();
  v117[4] = &off_10028F0C0;
  v117[0] = a3;
  v24 = OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_layer;
  v25 = objc_allocWithZone((Class)CALayer);
  v26 = a6;
  *(_QWORD *)&a6[v24] = objc_msgSend(v25, "init");
  v26[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_status] = 2;
  v27 = &v26[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_pointerState];
  *(_QWORD *)v27 = 0;
  v99 = v27;
  v27[8] = 2;
  *(_QWORD *)&v26[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_displaySleepAssertion] = 0;
  v28 = (double *)&v26[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_displayOrigin];
  *v28 = 0.0;
  v28[1] = 0.0;
  v97 = v28;
  memset(v124, 0, 120);
  *((_QWORD *)&v124[7] + 1) = 0x3FF0000000000000;
  v124[8] = 0uLL;
  *(_QWORD *)&v124[10] = 0;
  v124[9] = 0x3FF0000000000000uLL;
  v98 = (double *)&v26[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_metrics];
  memcpy(&v26[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_metrics], v124, 0xA8uLL);
  bzero(&v26[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_geometry], 0x1D0uLL);
  v29 = &v26[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_revealFunction];
  sub_10002DBF0((double *)v124, (uint64_t)v118);
  v30 = v118[1];
  *(_OWORD *)v29 = v118[0];
  *((_OWORD *)v29 + 1) = v30;
  *((_QWORD *)v29 + 4) = v119;
  v31 = OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_pointerLayer;
  *(_QWORD *)&v26[v31] = objc_msgSend(objc_allocWithZone((Class)CABackdropLayer), "init");
  v32 = OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_materialLayerMask;
  v33 = objc_msgSend(objc_allocWithZone((Class)CAShapeLayer), "init");
  *(_QWORD *)&v26[v32] = v33;
  v34 = UniversalControlLink.endpoint1.getter(v33);
  UniversalControlLink.Endpoint.anchor.getter(v34);
  v35 = *(uint64_t (**)(char *, uint64_t))(v110 + 8);
  v36 = v35(v23, v19);
  LODWORD(v110) = UniversalControlAnchor.edge.getter(v36);
  v37 = (void (*)(_QWORD, _QWORD))*((_QWORD *)v111 + 1);
  v105 = v18;
  v107 = v14;
  v103 = v37;
  v38 = ((uint64_t (*)(char *, uint64_t))v37)(v18, v14);
  v39 = UniversalControlLink.endpoint2.getter(v38);
  UniversalControlLink.Endpoint.device.getter(v39);
  v111 = (void (*)(char *, uint64_t))v35;
  v35(v23, v19);
  if (sub_100143DC4())
  {
    v40 = v109;
    dispatch thunk of UniversalControlDevice.typeIdentifier.getter();
    swift_release();
    v41 = 0;
  }
  else
  {
    v41 = 1;
    v40 = v109;
  }
  v42 = type metadata accessor for UTType(0);
  v43 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v40, v41, 1, v42);
  v44 = v113;
  v45 = UniversalControlLink.endpoint1.getter(v43);
  UniversalControlLink.Endpoint.display.getter(v45);
  v102 = v19;
  v111(v23, v19);
  sub_100143ED8();
  sub_10005FA70((uint64_t)&v120, (uint64_t)v121, (uint64_t *)&unk_1002B2610);
  v46 = 0.0;
  if (v122)
    v47 = 0.0;
  else
    v47 = *(double *)v121;
  if (v122)
    v48 = 0.0;
  else
    v48 = *(double *)&v121[1];
  v49 = &v26[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_link];
  v50 = type metadata accessor for UniversalControlLink(0);
  v95 = *(_QWORD *)(v50 - 8);
  v96 = v50;
  (*(void (**)(char *, uint64_t))(v95 + 16))(v49, v44);
  sub_1000078E0(0, &qword_1002AAF60, CABackdropLayer_ptr);
  *(_OWORD *)&v123.backdropScale = xmmword_10021CF60;
  *(_OWORD *)&v123.brightness = xmmword_10021CF70;
  *(_OWORD *)&v123.fillOpacity = xmmword_10021CF80;
  v123.useVibrancy = 1;
  *(_QWORD *)&v26[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_captureLayer] = static CABackdropLayer.makeVibrantBackdropLayer(appearance:groupName:captureOnly:)(&v123, 1702194279, (NSString)0xE400000000000000, 1);
  v51 = v40;
  v52 = ObjectType;
  *(_QWORD *)&v26[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_iconLayer] = sub_10002DFA0(v51, v110);
  sub_10002E508();
  *(_QWORD *)&v26[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_innerRimLayer] = v53;
  *(_QWORD *)&v26[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_materialLayer] = sub_10002E594();
  *(_QWORD *)&v26[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_rimLayer] = sub_10002E614();
  *(_QWORD *)&v26[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_shadowLayer] = sub_10002E624();
  sub_10014445C(v44, v54, v55, v56, v57, v58, v59, v60, v94, v95, v96, (uint64_t)v97, (uint64_t)v98, (uint64_t)v99, v100, v101, v102, (uint64_t)v103, v104,
    (uint64_t)v105,
    v106,
    v107,
    (uint64_t)ObjectType,
    v109,
    v110,
    (uint64_t)v111,
    v112,
    v113);
  v62 = v61;
  v64 = v63;
  v66 = UniversalControlLink.endpoint1.getter(v65);
  v67 = (uint64_t)v105;
  UniversalControlLink.Endpoint.anchor.getter(v66);
  v68 = v102;
  v69 = (uint64_t (*)(uint64_t, uint64_t))v111;
  v70 = ((uint64_t (*)(char *, uint64_t))v111)(v23, v102);
  UniversalControlAnchor.offset.getter(v70);
  v71 = v107;
  v72 = v103;
  v73 = ((uint64_t (*)(uint64_t, uint64_t))v103)(v67, v107);
  v74 = v104;
  v75 = UniversalControlLink.endpoint2.getter(v73);
  v76 = v106;
  UniversalControlLink.Endpoint.anchor.getter(v75);
  v77 = v69(v74, v68);
  v78 = UniversalControlAnchor.offset.getter(v77);
  v72(v76, v71);
  v79 = v62 / v64;
  if (v62 / v64 > 0.0)
  {
    v46 = 0.5;
    if (v79 <= 1.0)
      v46 = v79 * 0.5;
  }
  if (v78 > v46)
    v80 = v78;
  else
    v80 = v46;
  if (1.0 - v46 < v80)
    v80 = 1.0 - v46;
  *(double *)&v26[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController__initialOffset] = v80;
  if ((~*(_QWORD *)&v62 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  if (v62 <= -9.22337204e18)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (v62 >= 9.22337204e18)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  *(_QWORD *)&v26[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_localLength] = (uint64_t)v62;
  *(_QWORD *)&v26[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_offset] = 0;
  *(_QWORD *)&v26[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_reveal] = 0;
  *(_QWORD *)&v26[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_position] = 0x3FE0000000000000;
  if ((~*(_QWORD *)&v64 & 0x7FF0000000000000) == 0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v64 <= -9.22337204e18)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (v64 >= 9.22337204e18)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  *(_QWORD *)&v26[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_remoteLength] = (uint64_t)v64;
  v81 = v97;
  *v97 = v47;
  v81[1] = v48;
  if (qword_1002A9810 != -1)
LABEL_32:
    swift_once(&qword_1002A9810, sub_10002DB54);
  memcpy(v116, &xmmword_1002AABB0, sizeof(v116));
  v82 = v98;
  swift_beginAccess(v98, &v115, 1, 0);
  memcpy(v82, v116, 0xA8uLL);
  v83 = UniversalControlEdge.normalUnitVector.getter(v110);
  v84 = v82[3] + v82[4];
  v86 = (double *)&v26[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_mode];
  *v86 = v83 * v84 + a7;
  v86[1] = v85 * v84 + a8;
  *((_BYTE *)v86 + 16) = 0;
  sub_10017E930();
  v87 = v99;
  v88 = *(_QWORD *)v99;
  *(_QWORD *)v99 = v89;
  v90 = v87[8];
  v87[8] = 0;
  sub_100031B90(v88, v90);
  sub_10009513C((uint64_t)v117, (uint64_t)&v26[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_pointerController]);
  v91 = v101;
  sub_10005FAFC(v101, (uint64_t)&v26[OBJC_IVAR____TtC13EnsembleAgent19MagicGlueController_secureLayerHost], &qword_1002AAF30);

  v114.receiver = v26;
  v114.super_class = v52;
  v92 = objc_msgSendSuper2(&v114, "init");
  sub_10002E6B4(a7, a8);
  swift_release();
  swift_release();

  sub_100025A28(v91, &qword_1002AAF30);
  (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v113, v96);
  sub_100025A28(v109, &qword_1002AA5F0);
  sub_100005988(v117);
  return v92;
}

uint64_t sub_10013F684()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_100026600();

  v1 = sub_1000323A8();
  return swift_deallocObject(v1, v2, v3);
}

void sub_10013F6A4()
{
  uint64_t v0;

  sub_100133640(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10013F6B0(uint64_t a1)
{
  uint64_t v1;

  return sub_1001332C4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10013F6B8()
{
  unsigned __int8 *v0;

  return sub_1001333E4(v0);
}

void sub_10013F6C8(uint64_t a1)
{
  sub_10013FAC0(a1);
}

unint64_t sub_10013F6D0()
{
  unint64_t result;

  result = qword_1002B28A8;
  if (!qword_1002B28A8)
  {
    result = swift_getWitnessTable(&unk_100227928, &type metadata for EventMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B28A8);
  }
  return result;
}

uint64_t sub_10013F70C()
{
  uint64_t v0;

  sub_100026600();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10013F734(uint64_t a1)
{
  _QWORD *v1;

  return sub_10013ACDC(a1, v1[2], v1[3], v1[4]);
}

unint64_t sub_10013F740()
{
  unint64_t result;

  result = qword_1002B28D0;
  if (!qword_1002B28D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UInt16, &type metadata for UInt16);
    atomic_store(result, (unint64_t *)&qword_1002B28D0);
  }
  return result;
}

uint64_t sub_10013F77C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  type metadata accessor for UTType(0);
  sub_100140F94();
  v3 = (v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_10014136C(v4);
  sub_100005988((_QWORD *)(v1 + v3));
  swift_release();
  swift_release();
  return sub_1000265A0(v1, ((((v3 + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v0);
}

void sub_10013F7E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  type metadata accessor for UTType(0);
  sub_100141098();
  sub_10013AEA4(v0 + v2, v0 + (v1 & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(v0 + (((v1 & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + (((((v1 & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_10013F828()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(sub_1000055B0(qword_1002ABCC8) - 8) + 80);
  sub_100005988((_QWORD *)(v0 + 16));
  swift_release();
  v2 = type metadata accessor for URL(0);
  if (!_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v0 + ((v1 + 64) & ~v1), 1, v2))
  {
    v3 = sub_100141354();
    v4(v3);
  }
  swift_release();
  v5 = sub_100026B88();
  return sub_1000265A0(v5, v6, v1 | 7);
}

uint64_t sub_10013F8CC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(sub_1000055B0(qword_1002ABCC8) - 8) + 80);
  return sub_10013B1AC((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 56), v0 + ((v1 + 64) & ~v1));
}

uint64_t sub_10013F918()
{
  uint64_t v0;

  return sub_10013AE20(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_10013F924()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100026600();
  sub_1000265F8();
  v0 = sub_1000323A8();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_10013F940(uint64_t result)
{
  return sub_100133EEC(result);
}

unint64_t sub_10013F948()
{
  unint64_t result;

  result = qword_1002B2900;
  if (!qword_1002B2900)
  {
    result = swift_getWitnessTable(&unk_1002278D8, &type metadata for EventController.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B2900);
  }
  return result;
}

unint64_t sub_10013F984()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002AD060;
  if (!qword_1002AD060)
  {
    v1 = sub_10000DCA0(&qword_1002AA560);
    sub_10003668C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1002AD060);
  }
  return result;
}

uint64_t sub_10013F9E8(unint64_t *a1, uint64_t *a2)
{
  void (*v2)(void);
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_1000602D4(0, a2);
    v2();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10013FA4C()
{
  unint64_t result;

  result = qword_1002B2950;
  if (!qword_1002B2950)
  {
    result = swift_getWitnessTable(&unk_100223C34, &_s15DiagnosticStateVN);
    atomic_store(result, (unint64_t *)&qword_1002B2950);
  }
  return result;
}

uint64_t sub_10013FA8C()
{
  uint64_t v0;

  sub_100026600();
  sub_1000265F8();
  swift_release();
  sub_100022AEC(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

void sub_10013FAC0(uint64_t a1)
{
  uint64_t *v1;

  sub_100128EE8(a1, v1[2], v1[3], v1[4]);
}

unint64_t sub_10013FAE4()
{
  unint64_t result;

  result = qword_1002B2958;
  if (!qword_1002B2958)
  {
    result = swift_getWitnessTable(&unk_100227520, &type metadata for EventController.TargetKey);
    atomic_store(result, (unint64_t *)&qword_1002B2958);
  }
  return result;
}

uint64_t sub_10013FB20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  sub_10000F6E4();
  sub_100140F94();
  v3 = ((v2 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  sub_10014136C(v4);
  swift_release();
  return swift_deallocObject(v1, v3, v0);
}

double sub_10013FB6C(unint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  unint64_t v10;

  v9 = *(_QWORD *)(sub_10000F6E4() - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  return sub_100129A00(a1, a2, a3, a4, (uint64_t *)(v4 + v10), *(_QWORD *)(v4 + v10 + *(_QWORD *)(v9 + 64)), *(_QWORD *)(v4 + v10 + *(_QWORD *)(v9 + 64) + 8), *(_QWORD *)(v4 + ((v10 + *(_QWORD *)(v9 + 64) + 23) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_10013FBE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_unknownObjectWeakDestroy(v0 + 16);
  v1 = sub_1000323A8();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_10013FC04()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_10013FC28(unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3;

  if (!*a1)
  {
    v3 = a2(255);
    atomic_store(sub_100026A38(v3), a1);
  }
  sub_1000050D4();
}

uint64_t sub_10013FC5C()
{
  uint64_t v0;

  return sub_10013D8C8(v0);
}

uint64_t *sub_10013FC64(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[7];
  v6 = a1[8];
  v7 = a1[9];
  v8 = a1[10];
  v9 = a1[13];
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

void sub_10013FD00()
{
  void (*v0)(uint64_t);
  void (*v1)(uint64_t);
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_10002626C();
  v1 = v0;
  v3 = v2[4];
  v4 = v2[5];
  v5 = v2[6];
  v6 = v2[7];
  v7 = v2[8];
  v8 = v2[9];
  ((void (*)(_QWORD, _QWORD))v0)(*v2, v2[1]);
  v9 = sub_100141158();
  v1(v9);
  ((void (*)(uint64_t, uint64_t))v1)(v3, v4);
  ((void (*)(uint64_t, uint64_t))v1)(v5, v6);
  ((void (*)(uint64_t, uint64_t))v1)(v7, v8);
  sub_10000E4E0();
}

uint64_t sub_10013FD70()
{
  uint64_t v0;

  return sub_10013D70C(v0);
}

uint64_t sub_10013FD78()
{
  uint64_t v0;

  return sub_10013CE7C(v0);
}

uint64_t sub_10013FD80()
{
  uint64_t v0;

  return sub_10013D050(v0);
}

uint64_t sub_10013FD88()
{
  uint64_t v0;

  return sub_10013D204(v0);
}

uint64_t sub_10013FD90()
{
  uint64_t v0;

  return sub_10013D3A4(v0);
}

_QWORD *sub_10013FD98(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[13];
  v3 = a1[24];
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t sub_10013FDE0()
{
  uint64_t v0;

  return sub_10013D558(v0);
}

_QWORD *sub_10013FDE8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v11 = a1[3];
  v12 = a1[2];
  v2 = a1[5];
  v10 = a1[4];
  v3 = a1[6];
  v4 = a1[7];
  v5 = a1[8];
  v6 = a1[9];
  v7 = a1[10];
  v8 = a1[11];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10005F5EC(v12, v11, v10, v2, v3, v4, v5, v6, v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10013FEBC()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10013FEE0()
{
  uint64_t v0;

  return sub_10013CC68(v0);
}

uint64_t sub_10013FEE8()
{
  uint64_t v0;

  return sub_10013CAB0(v0);
}

_QWORD *sub_10013FEF0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[5];
  v3 = a1[6];
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t storeEnumTagSinglePayload for EventController.DiagnosticState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_10013FF80 + 4 * byte_1002273DF[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_10013FFB4 + 4 * byte_1002273DA[v4]))();
}

uint64_t sub_10013FFB4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10013FFBC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10013FFC4);
  return result;
}

uint64_t sub_10013FFD0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10013FFD8);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_10013FFDC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10013FFE4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EventController.DiagnosticState.CodingKeys()
{
  return &type metadata for EventController.DiagnosticState.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for EventMessage.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100140040 + 4 * byte_1002273E4[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100140060 + 4 * byte_1002273E9[v4]))();
}

_BYTE *sub_100140040(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100140060(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100140068(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100140070(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100140078(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100140080(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for EventMessage.CodingKeys()
{
  return &type metadata for EventMessage.CodingKeys;
}

uint64_t *sub_10014009C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v15 = a2[1];
      *a1 = *a2;
      v16 = a2[2];
      swift_retain();
      sub_10002517C(v15, v16);
      a1[1] = v15;
      a1[2] = v16;
      v17 = *(int *)(sub_1000055B0((uint64_t *)&unk_1002B2870) + 64);
      v18 = (char *)a1 + v17;
      v19 = (char *)a2 + v17;
      v20 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
      v21 = type metadata accessor for HIDUniversalSenderID(0);
      *(_QWORD *)&v18[*(int *)(v21 + 20)] = *(_QWORD *)&v19[*(int *)(v21 + 20)];
      v11 = a1;
      v12 = a3;
      v13 = 2;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v22 = a2[1];
      *a1 = *a2;
      v23 = a2[2];
      swift_retain();
      sub_10002517C(v22, v23);
      a1[1] = v22;
      a1[2] = v23;
      v11 = a1;
      v12 = a3;
      v13 = 1;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        return a1;
      }
      v9 = a2[1];
      *a1 = *a2;
      v10 = a2[2];
      swift_retain();
      sub_10002517C(v9, v10);
      a1[1] = v9;
      a1[2] = v10;
      v11 = a1;
      v12 = a3;
      v13 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v12, v13);
  }
  return a1;
}

uint64_t sub_100140210(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  if ((_DWORD)result == 2)
  {
    swift_release();
    sub_100022AEC(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
    v4 = a1 + *(int *)(sub_1000055B0((uint64_t *)&unk_1002B2870) + 64);
    v5 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }
  else if (result <= 1)
  {
    swift_release();
    return sub_100022AEC(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  return result;
}

_QWORD *sub_1001402A4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 2)
  {
    v12 = a2[1];
    *a1 = *a2;
    v13 = a2[2];
    swift_retain();
    sub_10002517C(v12, v13);
    a1[1] = v12;
    a1[2] = v13;
    v14 = *(int *)(sub_1000055B0((uint64_t *)&unk_1002B2870) + 64);
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
    v18 = type metadata accessor for HIDUniversalSenderID(0);
    *(_QWORD *)&v15[*(int *)(v18 + 20)] = *(_QWORD *)&v16[*(int *)(v18 + 20)];
    v9 = a1;
    v10 = a3;
    v11 = 2;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v19 = a2[1];
    *a1 = *a2;
    v20 = a2[2];
    swift_retain();
    sub_10002517C(v19, v20);
    a1[1] = v19;
    a1[2] = v20;
    v9 = a1;
    v10 = a3;
    v11 = 1;
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      return a1;
    }
    v7 = a2[1];
    *a1 = *a2;
    v8 = a2[2];
    swift_retain();
    sub_10002517C(v7, v8);
    a1[1] = v7;
    a1[2] = v8;
    v9 = a1;
    v10 = a3;
    v11 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v10, v11);
  return a1;
}

_QWORD *sub_1001403F0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;

  if (a1 != a2)
  {
    sub_1000255F0((uint64_t)a1, type metadata accessor for EventController.Event);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      v12 = a2[1];
      v13 = a2[2];
      swift_retain();
      sub_10002517C(v12, v13);
      a1[1] = v12;
      a1[2] = v13;
      v14 = *(int *)(sub_1000055B0((uint64_t *)&unk_1002B2870) + 64);
      v15 = (char *)a1 + v14;
      v16 = (char *)a2 + v14;
      v17 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
      v18 = type metadata accessor for HIDUniversalSenderID(0);
      *(_QWORD *)&v15[*(int *)(v18 + 20)] = *(_QWORD *)&v16[*(int *)(v18 + 20)];
      v9 = a1;
      v10 = a3;
      v11 = 2;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      v20 = a2[1];
      v19 = a2[2];
      swift_retain();
      sub_10002517C(v20, v19);
      a1[1] = v20;
      a1[2] = v19;
      v9 = a1;
      v10 = a3;
      v11 = 1;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        return a1;
      }
      *a1 = *a2;
      v8 = a2[1];
      v7 = a2[2];
      swift_retain();
      sub_10002517C(v8, v7);
      a1[1] = v8;
      a1[2] = v7;
      v9 = a1;
      v10 = a3;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
  }
  return a1;
}

char *sub_100140554(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 2)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    v6 = *(int *)(sub_1000055B0((uint64_t *)&unk_1002B2870) + 64);
    v7 = &a1[v6];
    v8 = &a2[v6];
    v9 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
    v10 = type metadata accessor for HIDUniversalSenderID(0);
    *(_QWORD *)&v7[*(int *)(v10 + 20)] = *(_QWORD *)&v8[*(int *)(v10 + 20)];
    swift_storeEnumTagMultiPayload(a1, a3, 2);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *sub_10014061C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    sub_1000255F0((uint64_t)a1, type metadata accessor for EventController.Event);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 2)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      v6 = *(int *)(sub_1000055B0((uint64_t *)&unk_1002B2870) + 64);
      v7 = &a1[v6];
      v8 = &a2[v6];
      v9 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
      v10 = type metadata accessor for HIDUniversalSenderID(0);
      *(_QWORD *)&v7[*(int *)(v10 + 20)] = *(_QWORD *)&v8[*(int *)(v10 + 20)];
      swift_storeEnumTagMultiPayload(a1, a3, 2);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1001406FC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _BYTE v4[32];
  _QWORD v5[4];

  v5[0] = &unk_100227700;
  v5[1] = &unk_100227700;
  result = type metadata accessor for HIDUniversalSenderID(319);
  if (v3 <= 0x3F)
  {
    swift_getTupleTypeLayout3(v4, (char *)&value witness table for Builtin.NativeObject + 64, &unk_100227718, *(_QWORD *)(result - 8) + 64);
    v5[2] = v4;
    v5[3] = &unk_100227730;
    swift_initEnumMetadataMultiPayload(a1, 256, 4, v5);
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for EventMessage()
{
  return &type metadata for EventMessage;
}

uint64_t destroy for EventController.DiagnosticState(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(a1[10]);
  return swift_bridgeObjectRelease(a1[13]);
}

uint64_t initializeWithCopy for EventController.DiagnosticState(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2[2];
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)a2 + 25);
  *(_BYTE *)(a1 + 41) = *((_BYTE *)a2 + 41);
  v6 = a2[6];
  v7 = a2[7];
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v7;
  v8 = a2[8];
  v9 = a2[9];
  *(_QWORD *)(a1 + 64) = v8;
  *(_QWORD *)(a1 + 72) = v9;
  v10 = a2[10];
  *(_QWORD *)(a1 + 80) = v10;
  *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
  v11 = a2[13];
  *(_QWORD *)(a1 + 96) = a2[12];
  *(_QWORD *)(a1 + 104) = v11;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  return a1;
}

uint64_t *assignWithCopy for EventController.DiagnosticState(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
  v10 = *(_OWORD *)((char *)a2 + 25);
  *((_BYTE *)a1 + 41) = *((_BYTE *)a2 + 41);
  *(_OWORD *)((char *)a1 + 25) = v10;
  v11 = a2[6];
  v12 = a1[6];
  a1[6] = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  v13 = a1[7];
  v14 = a2[7];
  a1[7] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v13);
  v15 = a1[8];
  v16 = a2[8];
  a1[8] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v15);
  v17 = a1[9];
  v18 = a2[9];
  a1[9] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v17);
  v19 = a1[10];
  v20 = a2[10];
  a1[10] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v19);
  *((_BYTE *)a1 + 88) = *((_BYTE *)a2 + 88);
  a1[12] = a2[12];
  v21 = a2[13];
  v22 = a1[13];
  a1[13] = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  return a1;
}

void *initializeWithTake for EventController.DiagnosticState(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x70uLL);
}

uint64_t assignWithTake for EventController.DiagnosticState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  swift_bridgeObjectRelease(*(_QWORD *)a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 48));
  v6 = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 64));
  v7 = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease(v8);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v9 = *(_QWORD *)(a2 + 104);
  v10 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v9;
  swift_bridgeObjectRelease(v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for EventController.DiagnosticState(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 112))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EventController.DiagnosticState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 112) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for EventController.DiagnosticState()
{
  return &type metadata for EventController.DiagnosticState;
}

unint64_t sub_100140B78()
{
  unint64_t result;

  result = qword_1002B2A50;
  if (!qword_1002B2A50)
  {
    result = swift_getWitnessTable(&unk_1002277F8, &type metadata for EventMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B2A50);
  }
  return result;
}

unint64_t sub_100140BB8()
{
  unint64_t result;

  result = qword_1002B2A58;
  if (!qword_1002B2A58)
  {
    result = swift_getWitnessTable(&unk_1002278B0, &type metadata for EventController.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B2A58);
  }
  return result;
}

unint64_t sub_100140BF8()
{
  unint64_t result;

  result = qword_1002B2A60;
  if (!qword_1002B2A60)
  {
    result = swift_getWitnessTable(&unk_100227820, &type metadata for EventController.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B2A60);
  }
  return result;
}

unint64_t sub_100140C38()
{
  unint64_t result;

  result = qword_1002B2A68;
  if (!qword_1002B2A68)
  {
    result = swift_getWitnessTable(&unk_100227848, &type metadata for EventController.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B2A68);
  }
  return result;
}

unint64_t sub_100140C78()
{
  unint64_t result;

  result = qword_1002B2A70;
  if (!qword_1002B2A70)
  {
    result = swift_getWitnessTable(&unk_100227768, &type metadata for EventMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B2A70);
  }
  return result;
}

unint64_t sub_100140CB8()
{
  unint64_t result;

  result = qword_1002B2A78;
  if (!qword_1002B2A78)
  {
    result = swift_getWitnessTable(&unk_100227790, &type metadata for EventMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B2A78);
  }
  return result;
}

uint64_t sub_100140D3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_beginAccess(v2, a2, 33, 0);
}

uint64_t sub_100140D4C()
{
  unint64_t v0;
  uint64_t v1;

  return sub_100022AEC(v1, v0);
}

uint64_t sub_100140D58(unint64_t a1)
{
  return UUID.init(uuid:)(a1, a1 >> 8, a1 >> 16, a1 >> 24, HIDWORD(a1), a1 >> 40, HIWORD(a1), HIBYTE(a1));
}

uint64_t sub_100140DC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v3 - 144, v3 - 121, v0, v1, v2);
}

unint64_t sub_100140DE0()
{
  return 0xD00000000000005ELL;
}

uint64_t sub_100140DF4()
{
  uint64_t v0;
  unint64_t v1;

  return sub_100022AEC(v0, v1);
}

uint64_t sub_100140E00()
{
  unint64_t v0;
  uint64_t v1;

  return sub_10002517C(v1, v0);
}

uint64_t sub_100140E0C()
{
  uint64_t v0;
  unint64_t v1;

  return sub_10002517C(v0, v1);
}

uint64_t sub_100140E24@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 208) = a1;
  *(_QWORD *)(v3 - 200) = v1;
  return v2;
}

uint64_t sub_100140E60()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100140E70()
{
  unsigned __int8 *v0;

  return UUID.init(uuid:)(v0[56], v0[57], v0[58], v0[59], v0[60], v0[61], v0[62], v0[63]);
}

uint64_t sub_100140EA0()
{
  unint64_t v0;
  uint64_t v1;

  return sub_10002517C(v1, v0);
}

unint64_t sub_100140EAC()
{
  return 0xD00000000000005ELL;
}

void sub_100140EB8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_10005FA70(a1, a2, v2);
}

void sub_100140EC0(uint64_t a1)
{
  sub_10013FAC0(a1);
}

uint64_t sub_100140EC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100006FB4(a1, a2);
  return swift_bridgeObjectRetain_n(*(_QWORD *)(v2 - 152), 2);
}

uint64_t sub_100140EE8(uint64_t a1)
{
  return swift_release(a1);
}

uint64_t sub_100140F00(uint64_t a1)
{
  return swift_errorRelease(a1);
}

uint64_t sub_100140F18()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 360) + 8))(v0, *(_QWORD *)(v1 - 352));
}

uint64_t sub_100140F3C(float a1)
{
  float *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = a1;
  *(_QWORD *)(v3 - 120) = v1 + 1;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_100140F5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return KeyedEncodingContainer.encode<A>(_:forKey:)(v3 - 144, v3 - 121, v0, v1, v2);
}

uint64_t sub_100140F7C()
{
  uint64_t v0;

  sub_100005988((_QWORD *)(v0 - 136));
  return swift_endAccess(v0 - 160);
}

uint64_t sub_100140FB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 72) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 72, v2 - 64, *(_QWORD *)(v2 - 120), v1);
}

uint64_t sub_100140FD4()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  return sub_100006FCC(v0, v1, (uint64_t *)(v2 - 104));
}

uint64_t sub_100140FE4()
{
  uint64_t v0;
  unint64_t v1;

  return sub_1000599D0(8, v0, v1);
}

void sub_100140FF4(uint64_t a1)
{
  sub_10012B2FC(a1);
}

uint64_t sub_100141000@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_arrayDestroy(v1, 1, a1 + 8);
}

uint64_t sub_100141010()
{
  uint64_t v0;
  unint64_t v1;

  return sub_10002517C(v0, v1);
}

uint64_t sub_10014101C()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10014102C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 72) = a1;
  return v1 - 72;
}

void sub_100141040()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 152) = v0;
}

uint64_t sub_100141050(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return dispatch thunk of static Equatable.== infix(_:_:)(v3, v2, v1, a1);
}

uint64_t sub_100141068@<X0>(uint64_t a1@<X0>, char a2@<W8>)
{
  uint64_t v2;
  uint64_t v3;

  *(_BYTE *)(v3 - 144) = a2;
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, v3 - 144, v2);
}

void sub_100141080()
{
  sub_1000776AC();
}

uint64_t sub_1001410B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return Publisher<>.sink(receiveValue:)(a1, v3, v1, v2);
}

uint64_t sub_1001410CC(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 16) = v1;
  return swift_unknownObjectRetain_n(v1, 2);
}

_QWORD *sub_1001410E0()
{
  _QWORD *v0;
  uint64_t v1;

  return sub_100021C68(v0, (_QWORD *)(v1 - 136));
}

uint64_t sub_1001410EC()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 120) + 8))(v0, *(_QWORD *)(v1 - 144));
}

uint64_t sub_100141100()
{
  uint64_t v0;

  return dispatch thunk of ObservableObject.objectWillChange.getter(v0);
}

void sub_100141114()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 352) = *(_QWORD *)(v0 - 208);
  *(_QWORD *)(v0 - 360) = *(_QWORD *)(v0 - 200);
}

uint64_t sub_100141130()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v0, v1);
}

uint64_t sub_100141144()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_100141158()
{
  uint64_t v0;

  return v0;
}

void sub_100141164(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 32) = 0x7265746E696F70;
  *(_QWORD *)(a1 + 40) = 0xE700000000000000;
}

void sub_100141180()
{
  sub_1000776AC();
}

uint64_t sub_10014118C()
{
  return 0;
}

uint64_t sub_100141198()
{
  return sub_10012E974(0, 0, 1, 1);
}

uint64_t sub_1001411AC@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, char a3@<W8>)
{
  uint64_t v3;

  *(_BYTE *)(v3 - 72) = a3;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 72, v3 - 71, a1, a2);
}

uint64_t sub_1001411C0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1001411D8(uint64_t a1)
{
  return sub_10012B270(a1);
}

uint64_t sub_1001411E0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 136);
}

uint64_t sub_1001411F8()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 136);
}

uint64_t sub_100141210()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return static UniversalControlUUID.compare(lhs:rhs:)(v1, v0, *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64));
}

uint64_t sub_100141220()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  return sub_100006FCC(v0, v1, (uint64_t *)(v2 - 104));
}

uint64_t sub_100141230()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return sub_100006FCC(v1, v0, (uint64_t *)(v2 - 104));
}

uint64_t sub_100141240()
{
  uint64_t v0;

  return HIDReportAccumulator.init()((uint64_t *)(v0 - 136));
}

uint64_t sub_100141248()
{
  return __DataStorage._bytes.getter();
}

void sub_100141250()
{
  uint64_t v0;
  void *v1;
  Swift::String v2;

  v2._countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

uint64_t sub_100141260(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return swift_endAccess(&a9);
}

uint64_t sub_100141268()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100141274()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v0 + 8))(v1, *(_QWORD *)(v2 - 112));
}

_QWORD *sub_100141284()
{
  uint64_t v0;

  return sub_10013DBF8((_QWORD *)(v0 - 208));
}

uint64_t sub_10014129C()
{
  return __DataStorage._offset.getter();
}

void sub_1001412A4()
{
  sub_1000776AC();
}

void sub_1001412B4(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_1000255F0(a1, v1);
}

uint64_t sub_1001412BC()
{
  return type metadata accessor for EventController.Event(0);
}

void sub_1001412C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  HIDReport.subscript.getter(a1, v2, v1);
}

void sub_1001412D0(char a1)
{
  uint64_t v1;
  uint64_t v2;

  HIDReport.subscript.getter(a1, v2, v1);
}

Swift::Int sub_1001412DC(Swift::Int a1)
{
  return HIDReport.offset(for:)(a1);
}

uint64_t sub_1001412E8@<X0>(uint64_t a1@<X8>)
{
  return swift_release(*(_QWORD *)(a1 - 256));
}

uint64_t sub_1001412F0()
{
  unint64_t v0;
  uint64_t v1;

  return sub_10002517C(v1, v0);
}

uint64_t sub_100141310()
{
  uint64_t v0;

  return AnyCancellable.store(in:)(v0 - 160);
}

uint64_t sub_100141318(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v5 - 72, v4, a3, a4);
}

__n128 sub_100141330()
{
  uint64_t v0;

  return *(__n128 *)(v0 - 136);
}

void sub_100141348(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 296) = a1;
}

uint64_t sub_100141354()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100141360()
{
  uint64_t v0;
  unint64_t v1;

  return sub_100022AEC(v0, v1);
}

uint64_t sub_10014136C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v2 + v1);
}

uint64_t sub_100141378()
{
  return ((uint64_t (*)(void))UUID.uuidString.getter)();
}

uint64_t sub_100141384()
{
  uint64_t v0;

  return v0 - 144;
}

uint64_t sub_100141398()
{
  uint64_t v0;

  return swift_release_n(v0, 2);
}

void sub_1001413A4()
{
  uint64_t v0;
  uint64_t v1;

  sub_10013DE98(v1, v0);
}

uint64_t sub_1001413B0()
{
  unint64_t v0;
  uint64_t v1;

  return HIDReport.storage.getter(v1, v0);
}

void sub_1001413BC()
{
  uint64_t v0;

  sub_10004F6B8(v0);
}

uint64_t sub_1001413C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

uint64_t sub_1001413D0()
{
  uint64_t v0;
  unint64_t v1;

  return sub_100022AEC(v0, v1);
}

uint64_t sub_1001413DC()
{
  return __DataStorage._offset.getter();
}

uint64_t sub_1001413E8()
{
  uint64_t *v0;
  uint64_t v1;

  return sub_10013DBBC(v0, v1 - 208);
}

_QWORD *sub_1001413F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return Completion.init(file:line:body:)(a1, a2, a3, a4, v4);
}

uint64_t sub_100141400()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10014140C()
{
  return __DataStorage._offset.getter();
}

void sub_100141414(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 368) = a1;
}

uint64_t sub_100141420()
{
  return 0;
}

uint64_t sub_10014142C()
{
  unint64_t v0;
  uint64_t v1;

  return sub_10002517C(v1, v0);
}

void sub_100141438(uint64_t a1)
{
  sub_10012B2FC(a1);
}

_QWORD *sub_100141444(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD **v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  _QWORD *v24;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v21 = v2;
    v24 = _swiftEmptyArrayStorage;
    v6 = &v24;
    specialized ContiguousArray.reserveCapacity(_:)(v4);
    result = (_QWORD *)sub_10019D15C(a1);
    v8 = (uint64_t)result;
    v10 = v9;
    v12 = v11 & 1;
    while ((v8 & 0x8000000000000000) == 0 && v8 < 1 << *(_BYTE *)(a1 + 32))
    {
      if (((*(_QWORD *)(a1 + 56 + (((unint64_t)v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_14;
      if (*(_DWORD *)(a1 + 36) != (_DWORD)v10)
        goto LABEL_15;
      v22 = *(_OWORD *)(*(_QWORD *)(a1 + 48) + 16 * v8);
      v13 = sub_10015994C((unsigned __int8 *)&v22, v3, &v23);
      if (v21)
      {
        swift_bridgeObjectRelease(v3);
        swift_release();
        return v6;
      }
      v21 = 0;
      v14 = v23;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
      v15 = v3;
      v16 = v24[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v16);
      v17 = v16;
      v3 = v15;
      v18 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v14);
      v6 = &v24;
      specialized ContiguousArray._endMutation()(v18);
      result = (_QWORD *)sub_10019D074(v8, v10, v12 & 1, a1);
      v8 = (uint64_t)result;
      v10 = v19;
      v12 = v20 & 1;
      if (!--v4)
      {
        sub_100025618((uint64_t)result, v19, v20 & 1);
        v6 = (_QWORD **)v24;
        swift_bridgeObjectRelease(v15);
        return v6;
      }
    }
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease(a2);
    return _swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_100141600(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  _QWORD v19[5];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[24];
  _QWORD *v27;

  v5 = type metadata accessor for UniversalControlAnchor(0);
  v24 = *(_QWORD *)(v5 - 8);
  v25 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UniversalControlLink.Endpoint(0);
  v22 = *(_QWORD *)(v8 - 8);
  v23 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for HotZone(0);
  v21 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  if (*(_QWORD *)(a1 + 16))
  {
    v19[1] = v2;
    v27 = _swiftEmptyArrayStorage;
    v12 = a2;
    sub_1000587AC();
    v20 = type metadata accessor for UniversalControlLink(0);
    v13 = *(_QWORD *)(v20 - 8);
    v19[0] = v12;
    v19[3] = v12 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView;
    swift_beginAccess(v12 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView, v26, 0, 0);
    v19[4] = v13;
    v19[2] = *(_QWORD *)(v13 + 72);
    v15 = UniversalControlLink.endpoint1.getter(v14);
    UniversalControlLink.Endpoint.anchor.getter(v15);
    v16 = (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v10, v23);
    LOBYTE(v12) = UniversalControlAnchor.edge.getter(v16);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v25);
    type metadata accessor for SyncView(0);
    type metadata accessor for SyncViewLocalData(0);
    v17 = swift_retain();
    UniversalControlDevice.bounds.getter(v17);
    __asm { BR              X9 }
  }
  swift_release();
  return _swiftEmptyArrayStorage;
}

void sub_100141A44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  _QWORD *v42;
  _QWORD *v43;

  v3 = type metadata accessor for UUID(0);
  v34 = *(_QWORD *)(v3 - 8);
  v35 = v3;
  __chkstk_darwin(v3);
  v33 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v30 = v1;
    v43 = _swiftEmptyArrayStorage;
    sub_1000588C4();
    v6 = v43;
    v7 = sub_100071A7C(a1);
    if ((v7 & 0x8000000000000000) == 0)
    {
      v9 = v7;
      if (v7 < 1 << *(_BYTE *)(a1 + 32))
      {
        v10 = a1 + 64;
        v31 = a1 + 64;
        v32 = a1;
        while ((*(_QWORD *)(v10 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
        {
          if ((_DWORD)v8 != *(_DWORD *)(a1 + 36))
            goto LABEL_21;
          v38 = 1 << v9;
          v39 = v9 >> 6;
          v36 = v5;
          v37 = v8;
          v42 = v6;
          v11 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 56) + 8 * v9);
          v12 = v11[47];
          v40 = v11[46];
          v41 = v12;
          v13 = v11[45];
          v14 = v11[44];
          v15 = v11[43];
          v16 = v11[42];
          v17 = v11[41];
          v18 = v11[40];
          swift_retain();
          v19 = v33;
          v20 = UUID.init(uuid:)(v18, v17, v16, v15, v14, v13);
          v21 = UUID.uuidString.getter(v20);
          v23 = v22;
          (*(void (**)(char *, uint64_t))(v34 + 8))(v19, v35);
          sub_1000F4418();
          if (v24)
          {
            v25 = (_QWORD *)dispatch thunk of UniversalControlDevice.inputDevices.getter(v24);
            swift_release();
          }
          else
          {
            v25 = _swiftEmptyArrayStorage;
          }
          swift_release();
          v6 = v42;
          v43 = v42;
          v26 = v42[2];
          a1 = v32;
          if (v26 >= v42[3] >> 1)
          {
            sub_1000588C4();
            v6 = v43;
          }
          v6[2] = v26 + 1;
          v27 = &v6[3 * v26];
          v27[4] = v21;
          v27[5] = v23;
          v27[6] = v25;
          v28 = -1 << *(_BYTE *)(a1 + 32);
          if ((uint64_t)v9 >= -v28)
            goto LABEL_22;
          v10 = v31;
          if ((*(_QWORD *)(v31 + 8 * v39) & v38) == 0)
            goto LABEL_23;
          if ((_DWORD)v37 != *(_DWORD *)(a1 + 36))
            goto LABEL_24;
          v29 = _HashTable.occupiedBucket(after:)(v9, v31, ~v28);
          v5 = v36 - 1;
          if (v36 == 1)
            return;
          v9 = v29;
          if ((v29 & 0x8000000000000000) == 0)
          {
            v8 = *(unsigned int *)(a1 + 36);
            if (v29 < 1 << *(_BYTE *)(a1 + 32))
              continue;
          }
          goto LABEL_25;
        }
        __break(1u);
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
      }
    }
LABEL_25:
    __break(1u);
  }
}

void sub_100141D00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  uint64_t v17;
  uint64_t v18;
  double MinX;
  Swift::String v20;
  Swift::String v21;
  double MinY;
  Swift::String v23;
  Swift::String v24;
  double MaxX;
  Swift::String v26;
  Swift::String v27;
  double MaxY;
  Swift::String v29;
  Swift::String v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  CGRect v40;
  CGRect v41;
  CGRect v42;
  CGRect v43;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100058918();
    v3 = sub_100071A78(a1);
    if ((v3 & 0x8000000000000000) == 0)
    {
      v5 = v3;
      if (v3 < 1 << *(_BYTE *)(a1 + 32))
      {
        v6 = a1 + 64;
        v35 = a1 + 64;
        while ((*(_QWORD *)(v6 + 8 * (v5 >> 6)) & (1 << v5)) != 0)
        {
          if (v4 != *(_DWORD *)(a1 + 36))
            goto LABEL_18;
          v36 = v1;
          v37 = v4;
          v7 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 32 * v5);
          v8 = *v7;
          v9 = v7[1];
          v10 = v7[2];
          v11 = v7[3];
          v12 = *(_QWORD *)(a1 + 56) + 32 * v5;
          v14 = *(double *)v12;
          v13 = *(double *)(v12 + 8);
          v16 = *(double *)(v12 + 16);
          v15 = *(double *)(v12 + 24);
          v17 = UniversalControlDisplayID.description.getter(v8, v9, v10, v11);
          v38 = v18;
          v39 = v17;
          v40.origin.x = v14;
          v40.origin.y = v13;
          v40.size.width = v16;
          v40.size.height = v15;
          MinX = CGRectGetMinX(v40);
          v20._countAndFlagsBits = Double.description.getter(MinX);
          String.append(_:)(v20);
          swift_bridgeObjectRelease();
          v21._countAndFlagsBits = 32;
          v21._object = (void *)0xE100000000000000;
          String.append(_:)(v21);
          v41.origin.x = v14;
          v41.origin.y = v13;
          v41.size.width = v16;
          v41.size.height = v15;
          MinY = CGRectGetMinY(v41);
          v23._countAndFlagsBits = Double.description.getter(MinY);
          String.append(_:)(v23);
          swift_bridgeObjectRelease();
          v24._countAndFlagsBits = 32;
          v24._object = (void *)0xE100000000000000;
          String.append(_:)(v24);
          v42.origin.x = v14;
          v42.origin.y = v13;
          v42.size.width = v16;
          v42.size.height = v15;
          MaxX = CGRectGetMaxX(v42);
          v26._countAndFlagsBits = Double.description.getter(MaxX);
          String.append(_:)(v26);
          swift_bridgeObjectRelease();
          v27._countAndFlagsBits = 32;
          v27._object = (void *)0xE100000000000000;
          String.append(_:)(v27);
          v43.origin.x = v14;
          v43.origin.y = v13;
          v43.size.width = v16;
          v43.size.height = v15;
          MaxY = CGRectGetMaxY(v43);
          v29._countAndFlagsBits = Double.description.getter(MaxY);
          String.append(_:)(v29);
          swift_bridgeObjectRelease();
          v30._countAndFlagsBits = 93;
          v30._object = (void *)0xE100000000000000;
          String.append(_:)(v30);
          v31 = _swiftEmptyArrayStorage[2];
          if (v31 >= _swiftEmptyArrayStorage[3] >> 1)
            sub_100058918();
          _swiftEmptyArrayStorage[2] = v31 + 1;
          v32 = &_swiftEmptyArrayStorage[4 * v31];
          v32[4] = v39;
          v32[5] = v38;
          v32[6] = 91;
          v32[7] = 0xE100000000000000;
          v33 = -1 << *(_BYTE *)(a1 + 32);
          if ((uint64_t)v5 >= -v33)
            goto LABEL_19;
          v6 = a1 + 64;
          if ((*(_QWORD *)(v35 + 8 * (v5 >> 6)) & (1 << v5)) == 0)
            goto LABEL_20;
          if (v37 != *(_DWORD *)(a1 + 36))
            goto LABEL_21;
          v34 = _HashTable.occupiedBucket(after:)(v5, v35, ~v33);
          v1 = v36 - 1;
          if (v36 == 1)
            return;
          v5 = v34;
          if ((v34 & 0x8000000000000000) == 0)
          {
            v4 = *(_DWORD *)(a1 + 36);
            if (v34 < 1 << *(_BYTE *)(a1 + 32))
              continue;
          }
          goto LABEL_22;
        }
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
      }
    }
LABEL_22:
    __break(1u);
  }
}

uint64_t sub_100141FF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  int v39;
  int v40;
  _BYTE v41[352];
  _BYTE v42[352];
  _QWORD *v43;

  v3 = type metadata accessor for UUID(0);
  v32 = *(_QWORD *)(v3 - 8);
  v33 = v3;
  __chkstk_darwin(v3);
  v31 = (char *)v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = _swiftEmptyArrayStorage;
  if (!v5)
    return (uint64_t)v6;
  v28[1] = v1;
  v43 = _swiftEmptyArrayStorage;
  sub_1000588FC();
  v6 = v43;
  result = sub_100071A78(a1);
  if ((result & 0x8000000000000000) == 0)
  {
    v9 = result;
    if (result < 1 << *(_BYTE *)(a1 + 32))
    {
      v10 = a1 + 64;
      v29 = a1 + 64;
      v30 = a1;
      while ((*(_QWORD *)(v10 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
      {
        if ((_DWORD)v8 != *(_DWORD *)(a1 + 36))
          goto LABEL_18;
        v36 = 1 << v9;
        v37 = v9 >> 6;
        v34 = v5;
        v35 = v8;
        v11 = (unsigned __int8 *)(*(_QWORD *)(a1 + 48) + 16 * v9);
        v12 = v11[7];
        v39 = v11[6];
        v40 = v12;
        v38 = v11[5];
        v13 = v11[4];
        v14 = v6;
        v15 = v11[3];
        v16 = v11[2];
        v17 = v11[1];
        v18 = *v11;
        swift_retain();
        v19 = v31;
        v20 = v15;
        v6 = v14;
        v21 = UUID.init(uuid:)(v18, v17, v16, v20, v13, v38);
        v22 = UUID.uuidString.getter(v21);
        v24 = v23;
        (*(void (**)(char *, uint64_t))(v32 + 8))(v19, v33);
        sub_1000FA39C();
        swift_release();
        v43 = v6;
        v25 = v6[2];
        if (v25 >= v6[3] >> 1)
        {
          sub_1000588FC();
          v6 = v43;
        }
        memcpy(v41, v42, sizeof(v41));
        v6[2] = v25 + 1;
        v26 = &v6[46 * v25];
        v26[4] = v22;
        v26[5] = v24;
        result = (uint64_t)memcpy(v26 + 6, v41, 0x160uLL);
        a1 = v30;
        v27 = -1 << *(_BYTE *)(v30 + 32);
        if ((uint64_t)v9 >= -v27)
          goto LABEL_19;
        v10 = v29;
        if ((*(_QWORD *)(v29 + 8 * v37) & v36) == 0)
          goto LABEL_20;
        if ((_DWORD)v35 != *(_DWORD *)(v30 + 36))
          goto LABEL_21;
        result = _HashTable.occupiedBucket(after:)(v9, v29, ~v27);
        v5 = v34 - 1;
        if (v34 == 1)
          return (uint64_t)v6;
        v9 = result;
        if ((result & 0x8000000000000000) == 0)
        {
          v8 = *(unsigned int *)(a1 + 36);
          if (result < 1 << *(_BYTE *)(a1 + 32))
            continue;
        }
        goto LABEL_22;
      }
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
    }
  }
LABEL_22:
  __break(1u);
  return result;
}

_QWORD *sub_1001422B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain(a1);
    v5 = (uint64_t *)(v4 + 40);
    do
    {
      if (*(_QWORD *)(a2 + 16))
      {
        sub_1001A8C70(*(v5 - 1), *v5);
        if ((v6 & 1) != 0)
        {
          sub_1000F4418();
          if (v7)
          {
            v8 = v7;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v7);
            v10 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
            v9 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v10 >= v9 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
            v11 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, v8);
            specialized Array._endMutation()(v11);
          }
        }
      }
      v5 += 2;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_1001423B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v24;

  if ((unint64_t)a1 >> 62)
    goto LABEL_24;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v4; v4 = _CocoaArrayWrapper.endIndex.getter(v22))
  {
    v5 = _swiftEmptyArrayStorage;
    v6 = 4;
    v24 = a2;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
        specialized _ArrayBuffer._getElementSlowPath(_:)(v6 - 4, a1);
      else
        v7 = swift_retain();
      v8 = v6 - 3;
      if (__OFADD__(v6 - 4, 1))
        break;
      v9 = dispatch thunk of UniversalControlDevice.displays.getter(v7);
      if ((unint64_t)v9 >> 62)
      {
        if (v9 >= 0)
          v9 &= 0xFFFFFFFFFFFFFF8uLL;
        v10 = _CocoaArrayWrapper.endIndex.getter(v9);
      }
      else
      {
        v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      if (v10
        && (v12 = dispatch thunk of UniversalControlDevice.id.getter(v11), sub_10018F420(v12, v13, a2), (v14 & 1) == 0))
      {
        v15 = dispatch thunk of UniversalControlDevice.id.getter(v14);
        v17 = v16;
        swift_release();
        if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
        {
          sub_100077ACC();
          v5 = v20;
        }
        v18 = v5[2];
        if (v18 >= v5[3] >> 1)
        {
          sub_100077ACC();
          v5 = v21;
        }
        v5[2] = v18 + 1;
        v19 = &v5[2 * v18];
        v19[4] = v15;
        v19[5] = v17;
        a2 = v24;
      }
      else
      {
        swift_release();
      }
      ++v6;
      if (v8 == v4)
        goto LABEL_29;
    }
    __break(1u);
LABEL_24:
    if (a1 < 0)
      v22 = a1;
    else
      v22 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
  v5 = _swiftEmptyArrayStorage;
LABEL_29:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5;
}

_QWORD *sub_10014261C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t, __n128);
  _QWORD *v40;

  v4 = v3;
  v33 = a2;
  v7 = sub_1000055B0(&qword_1002AC148);
  __chkstk_darwin(v7);
  v9 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for HotZone(0);
  v32 = *(_QWORD *)(v38 - 8);
  v10 = __chkstk_darwin(v38);
  v37 = (uint64_t)v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v31 = (uint64_t)v30 - v12;
  v13 = type metadata accessor for UniversalControlLink(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1000055B0((uint64_t *)&unk_1002AC150);
  __chkstk_darwin(v17);
  v19 = (char *)v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_QWORD *)(a1 + 16);
  v30[1] = a1;
  if (v20)
  {
    v21 = a3;
    v22 = a1 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    v34 = *(_QWORD *)(v14 + 72);
    v36 = v14;
    v39 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v14 + 16);
    v23 = swift_bridgeObjectRetain();
    v40 = _swiftEmptyArrayStorage;
    v35 = v21 & 1;
    v24 = v33;
    while (1)
    {
      v39(v19, v22, v13, v23);
      _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v19, 0, 1, v13);
      if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v19, 1, v13) == 1)
        break;
      v25 = v36;
      (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v16, v19, v13);
      sub_100150B9C((uint64_t)v16, v24, v35, (uint64_t)v9);
      if (v4)
      {
        (*(void (**)(char *, uint64_t))(v25 + 8))(v16, v13);
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v40;
      }
      (*(void (**)(char *, uint64_t))(v25 + 8))(v16, v13);
      if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v9, 1, v38) == 1)
      {
        sub_100025A28((uint64_t)v9, &qword_1002AC148);
      }
      else
      {
        v26 = v31;
        sub_10005F3FC((uint64_t)v9, v31, type metadata accessor for HotZone);
        sub_10005F3FC(v26, v37, type metadata accessor for HotZone);
        if ((swift_isUniquelyReferenced_nonNull_native(v40) & 1) == 0)
          v40 = (_QWORD *)sub_100077B9C();
        v27 = v40[2];
        if (v27 >= v40[3] >> 1)
          v40 = (_QWORD *)sub_100077B9C();
        v28 = v40;
        v40[2] = v27 + 1;
        sub_10005F3FC(v37, (uint64_t)v28+ ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80))+ *(_QWORD *)(v32 + 72) * v27, type metadata accessor for HotZone);
        v24 = v33;
      }
      v22 += v34;
      if (!--v20)
        goto LABEL_15;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    v40 = _swiftEmptyArrayStorage;
LABEL_15:
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v19, 1, 1, v13);
  }
  swift_release();
  swift_bridgeObjectRelease();
  return v40;
}

void sub_1001429D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;

  v24 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
    goto LABEL_47;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    sub_1000586CC();
    if (v2 < 0)
      break;
    if (!v2)
    {
      v3 = a1 & 0xFFFFFFFFFFFFFF8;
      v25 = a1 & 0xC000000000000001;
      swift_bridgeObjectRetain(a1);
LABEL_23:
      if (a1 < 0)
        v12 = a1;
      else
        v12 = v3;
      v23 = v12;
      while (1)
      {
        if (v24)
        {
          swift_bridgeObjectRetain(a1);
          v13 = _CocoaArrayWrapper.endIndex.getter(v23);
          swift_bridgeObjectRelease();
        }
        else
        {
          v13 = *(_QWORD *)(v3 + 16);
        }
        if (v2 == v13)
        {
          swift_bridgeObjectRelease();
          return;
        }
        if (v25)
        {
          v14 = specialized _ArrayBuffer._getElementSlowPath(_:)(v2, a1);
        }
        else
        {
          if (v2 < 0)
          {
            __break(1u);
LABEL_42:
            __break(1u);
LABEL_43:
            __break(1u);
LABEL_44:
            __break(1u);
            goto LABEL_45;
          }
          if ((unint64_t)v2 >= *(_QWORD *)(v3 + 16))
            goto LABEL_42;
          swift_retain();
        }
        if (__OFADD__(v2, 1))
          goto LABEL_43;
        v15 = dispatch thunk of UniversalControlDevice.id.getter(v14);
        v17 = v16;
        swift_release();
        v18 = _swiftEmptyArrayStorage[2];
        if (v18 >= _swiftEmptyArrayStorage[3] >> 1)
          sub_1000586CC();
        _swiftEmptyArrayStorage[2] = v18 + 1;
        v19 = &_swiftEmptyArrayStorage[2 * v18];
        v19[4] = v15;
        v19[5] = v17;
        ++v2;
      }
    }
    if (v24)
    {
      v21 = a1 & 0xFFFFFFFFFFFFFF8;
      if (a1 < 0)
        v4 = a1;
      else
        v4 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v22 = _CocoaArrayWrapper.endIndex.getter(v4);
    }
    else
    {
      v21 = a1 & 0xFFFFFFFFFFFFFF8;
      v22 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(a1);
    }
    v5 = 0;
    v25 = a1 & 0xC000000000000001;
    while (1)
    {
      if ((v2 & ~(v2 >> 63)) == v5)
        goto LABEL_44;
      if (v22 == v5)
        break;
      if (v25)
      {
        v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
      }
      else
      {
        if (v5 >= *(_QWORD *)(v21 + 16))
          goto LABEL_46;
        swift_retain();
      }
      v7 = dispatch thunk of UniversalControlDevice.id.getter(v6);
      v9 = v8;
      swift_release();
      v10 = _swiftEmptyArrayStorage[2];
      if (v10 >= _swiftEmptyArrayStorage[3] >> 1)
        sub_1000586CC();
      _swiftEmptyArrayStorage[2] = v10 + 1;
      v11 = &_swiftEmptyArrayStorage[2 * v10];
      v11[4] = v7;
      ++v5;
      v11[5] = v9;
      if (v2 == v5)
      {
        v3 = v21;
        goto LABEL_23;
      }
    }
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    if (a1 < 0)
      v20 = a1;
    else
      v20 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v20);
    swift_bridgeObjectRelease();
  }
  __break(1u);
}

void sub_100142DAC(uint64_t a1)
{
  uint8x8_t v1;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  unint64_t v6;
  int8x16_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  int64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD v65[6];

  v3 = *(_QWORD *)(a1 + 16);
  sub_100058790();
  v4 = _swiftEmptyArrayStorage;
  sub_100043078(v65, a1);
  v48 = v65[1];
  v5 = v65[3];
  v6 = v65[4];
  v49 = (unint64_t)(v65[2] + 64) >> 6;
  v50 = v65[0];
  v46 = v3;
  if (v3)
  {
    v7 = (int8x16_t)swift_bridgeObjectRetain(a1);
    v8 = 0;
    while (1)
    {
      if (v6)
      {
        v9 = v4;
        v61 = (v6 - 1) & v6;
        v10 = __clz(__rbit64(v6)) | (v5 << 6);
      }
      else
      {
        v11 = v5 + 1;
        if (__OFADD__(v5, 1))
          goto LABEL_50;
        if (v11 >= v49)
          goto LABEL_51;
        v12 = *(_QWORD *)(v48 + 8 * v11);
        ++v5;
        if (!v12)
        {
          v5 = v11 + 1;
          if (v11 + 1 >= v49)
            goto LABEL_52;
          v12 = *(_QWORD *)(v48 + 8 * v5);
          if (!v12)
          {
            v5 = v11 + 2;
            if (v11 + 2 >= v49)
              goto LABEL_55;
            v12 = *(_QWORD *)(v48 + 8 * v5);
            if (!v12)
            {
              v5 = v11 + 3;
              if (v11 + 3 >= v49)
                goto LABEL_56;
              v12 = *(_QWORD *)(v48 + 8 * v5);
              if (!v12)
              {
                v13 = v11 + 4;
                if (v13 >= v49)
                  goto LABEL_57;
                v12 = *(_QWORD *)(v48 + 8 * v13);
                if (!v12)
                {
                  while (1)
                  {
                    v5 = v13 + 1;
                    if (__OFADD__(v13, 1))
                      goto LABEL_53;
                    if (v5 >= v49)
                      goto LABEL_54;
                    v12 = *(_QWORD *)(v48 + 8 * v5);
                    ++v13;
                    if (v12)
                      goto LABEL_20;
                  }
                }
                v5 = v13;
              }
            }
          }
        }
LABEL_20:
        v9 = v4;
        v61 = (v12 - 1) & v12;
        v10 = __clz(__rbit64(v12)) + (v5 << 6);
      }
      v14 = *(_QWORD *)(*(_QWORD *)(v50 + 56) + 8 * v10);
      v1.i32[0] = *(_DWORD *)(v14 + 40);
      v15 = *(_BYTE *)(v14 + 44);
      v16 = *(_BYTE *)(v14 + 45);
      v17 = *(_BYTE *)(v14 + 46);
      v18 = *(_BYTE *)(v14 + 47);
      v7.i64[0] = *(_QWORD *)(v14 + 48);
      v59 = v7;
      swift_retain(v14);
      sub_1000F4310();
      v57 = v19;
      v20 = sub_1000F444C();
      v53 = v21;
      v55 = v20;
      v51 = v22;
      sub_1000F44A8();
      v47 = v23;
      swift_release();
      v4 = v9;
      v63 = v9;
      v24 = v9[2];
      if (v24 >= v4[3] >> 1)
      {
        sub_100058790();
        v4 = v63;
      }
      v7 = (int8x16_t)vmovl_u8(v1);
      v4[2] = v24 + 1;
      v25 = &v4[9 * v24];
      *((_BYTE *)v25 + 32) = v7.i8[0];
      *((_BYTE *)v25 + 33) = v7.i8[2];
      *((_BYTE *)v25 + 34) = v7.i8[4];
      ++v8;
      *((_BYTE *)v25 + 35) = v7.i8[6];
      *((_BYTE *)v25 + 36) = v15;
      *((_BYTE *)v25 + 37) = v16;
      *((_BYTE *)v25 + 38) = v17;
      *((_BYTE *)v25 + 39) = v18;
      *((_DWORD *)v25 + 10) = vmovn_s16((int16x8_t)vzip1q_s8(v59, v7)).u32[0];
      *(int8x8_t *)((char *)v25 + 44) = vext_s8(*(int8x8_t *)v59.i8, vuzp1_s8(*(int8x8_t *)v7.i8, *(int8x8_t *)v7.i8), 4uLL);
      *((_BYTE *)v25 + 52) = v15;
      *((_BYTE *)v25 + 53) = v16;
      *((_BYTE *)v25 + 54) = v17;
      *((_BYTE *)v25 + 55) = v18;
      v25[7] = v59.i64[0];
      v25[8] = v57;
      v25[9] = v55;
      v25[10] = v53;
      *((_BYTE *)v25 + 88) = v51 & 1;
      v25[12] = v47;
      v6 = v61;
      if (v8 == v46)
        goto LABEL_26;
    }
  }
  v7 = (int8x16_t)swift_bridgeObjectRetain(a1);
LABEL_26:
  if (!v6)
    goto LABEL_28;
LABEL_27:
  v26 = v4;
  v62 = (v6 - 1) & v6;
  v60 = v5;
  v27 = __clz(__rbit64(v6)) | (v5 << 6);
  while (1)
  {
    v32 = *(_QWORD *)(*(_QWORD *)(v50 + 56) + 8 * v27);
    v1.i32[0] = *(_DWORD *)(v32 + 40);
    v33 = *(_BYTE *)(v32 + 44);
    v34 = *(_BYTE *)(v32 + 45);
    v35 = *(_BYTE *)(v32 + 46);
    v36 = *(_BYTE *)(v32 + 47);
    v7.i64[0] = *(_QWORD *)(v32 + 48);
    v58 = v7;
    swift_retain(v32);
    sub_1000F4310();
    v56 = v37;
    v38 = sub_1000F444C();
    v52 = v39;
    v54 = v38;
    v41 = v40;
    sub_1000F44A8();
    v43 = v42;
    swift_release();
    v4 = v26;
    v64 = v26;
    v44 = v26[2];
    if (v44 >= v4[3] >> 1)
    {
      sub_100058790();
      v4 = v64;
    }
    v7 = (int8x16_t)vmovl_u8(v1);
    v4[2] = v44 + 1;
    v45 = &v4[9 * v44];
    *((_BYTE *)v45 + 32) = v7.i8[0];
    *((_BYTE *)v45 + 33) = v7.i8[2];
    *((_BYTE *)v45 + 34) = v7.i8[4];
    *((_BYTE *)v45 + 35) = v7.i8[6];
    *((_BYTE *)v45 + 36) = v33;
    *((_BYTE *)v45 + 37) = v34;
    *((_BYTE *)v45 + 38) = v35;
    *((_BYTE *)v45 + 39) = v36;
    *((_DWORD *)v45 + 10) = vmovn_s16((int16x8_t)vzip1q_s8(v58, v7)).u32[0];
    *(int8x8_t *)((char *)v45 + 44) = vext_s8(*(int8x8_t *)v58.i8, vuzp1_s8(*(int8x8_t *)v7.i8, *(int8x8_t *)v7.i8), 4uLL);
    *((_BYTE *)v45 + 52) = v33;
    *((_BYTE *)v45 + 53) = v34;
    *((_BYTE *)v45 + 54) = v35;
    *((_BYTE *)v45 + 55) = v36;
    v45[7] = v58.i64[0];
    v45[8] = v56;
    v45[9] = v54;
    v45[10] = v52;
    *((_BYTE *)v45 + 88) = v41 & 1;
    v45[12] = v43;
    v5 = v60;
    v6 = v62;
    if (v62)
      goto LABEL_27;
LABEL_28:
    v28 = v5 + 1;
    if (__OFADD__(v5, 1))
      break;
    if (v28 >= v49)
      goto LABEL_48;
    v29 = *(_QWORD *)(v48 + 8 * v28);
    v30 = v5 + 1;
    if (!v29)
    {
      v30 = v5 + 2;
      if (v5 + 2 >= v49)
        goto LABEL_48;
      v29 = *(_QWORD *)(v48 + 8 * v30);
      if (!v29)
      {
        v30 = v5 + 3;
        if (v5 + 3 >= v49)
          goto LABEL_48;
        v29 = *(_QWORD *)(v48 + 8 * v30);
        if (!v29)
        {
          v30 = v5 + 4;
          if (v5 + 4 >= v49)
            goto LABEL_48;
          v29 = *(_QWORD *)(v48 + 8 * v30);
          if (!v29)
          {
            v30 = v5 + 5;
            if (v5 + 5 >= v49)
              goto LABEL_48;
            v29 = *(_QWORD *)(v48 + 8 * v30);
            if (!v29)
            {
              v31 = v5 + 6;
              while (v31 < v49)
              {
                v29 = *(_QWORD *)(v48 + 8 * v31++);
                if (v29)
                {
                  v30 = v31 - 1;
                  goto LABEL_43;
                }
              }
LABEL_48:
              swift_release();
              return;
            }
          }
        }
      }
    }
LABEL_43:
    v26 = v4;
    v62 = (v29 - 1) & v29;
    v27 = __clz(__rbit64(v29)) + (v30 << 6);
    v60 = v30;
  }
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
}

uint64_t sub_10014330C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v8 = *a1;
  sub_100167E9C(&v8);
  sub_1000269EC();
  sub_100026AE4();
  sub_100167910(a1);
  v4 = v3;
  sub_10003A2D4(&v8);
  sub_100026AEC();
  swift_release();
  v7 = v4;
  sub_1001605BC(&v7);
  v5 = v7;
  if (v1)
    sub_10000B348();
  return v5;
}

void sub_1001433A4(uint64_t (*a1)(__int128 *, __n128), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v7;
  _QWORD *v8;
  __n128 v9;
  char v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  _QWORD *v15;

  v5 = *(_QWORD *)(a3 + 16);
  if (v5)
  {
    v7 = 0;
    v8 = _swiftEmptyArrayStorage;
    while (v7 < *(_QWORD *)(a3 + 16))
    {
      v13 = *(_OWORD *)(a3 + 16 * v7 + 32);
      v14 = v13;
      v9 = swift_unknownObjectRetain(v13);
      v10 = a1(&v14, v9);
      if (v3)
      {
        sub_100026AEC();
        sub_10000E568();
        swift_unknownObjectRelease(v13);
        return;
      }
      if ((v10 & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8);
        v15 = v8;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_10016B0E0();
          sub_100058694();
          v8 = v15;
        }
        v12 = v8[2];
        if (v12 >= v8[3] >> 1)
        {
          sub_100058694();
          v8 = v15;
        }
        v8[2] = v12 + 1;
        *(_OWORD *)&v8[2 * v12 + 4] = v13;
      }
      else
      {
        swift_unknownObjectRelease(v13);
      }
      if (v5 == ++v7)
        goto LABEL_13;
    }
    __break(1u);
  }
  else
  {
LABEL_13:
    sub_10000E568();
  }
}

void sub_1001434FC(uint64_t (*a1)(_BYTE *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  _OWORD *v5;
  _QWORD *v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  __int128 v43;
  _BYTE v44[16];
  __int128 v45;
  _QWORD *v46;

  v28 = *(_QWORD *)(a3 + 16);
  if (v28)
  {
    v4 = 0;
    v5 = (_OWORD *)(a3 + 48);
    v6 = _swiftEmptyArrayStorage;
    v27 = a3;
    while (v4 < *(_QWORD *)(a3 + 16))
    {
      v7 = *((_BYTE *)v5 - 16);
      v8 = *((_BYTE *)v5 - 15);
      v9 = *((_BYTE *)v5 - 14);
      v10 = *((_BYTE *)v5 - 13);
      v11 = *((_BYTE *)v5 - 12);
      v12 = *((_BYTE *)v5 - 11);
      v13 = *((_BYTE *)v5 - 10);
      v14 = *((_BYTE *)v5 - 9);
      v15 = *((_BYTE *)v5 - 8);
      v16 = *((_BYTE *)v5 - 7);
      v17 = *((_BYTE *)v5 - 6);
      v18 = *((_BYTE *)v5 - 5);
      v19 = *((_BYTE *)v5 - 4);
      v20 = *((_BYTE *)v5 - 3);
      v21 = *((_BYTE *)v5 - 2);
      v22 = *((_BYTE *)v5 - 1);
      v43 = *v5;
      v44[0] = v7;
      v44[1] = v8;
      v44[2] = v9;
      v41 = v11;
      v42 = v10;
      v44[3] = v10;
      v44[4] = v11;
      v39 = v13;
      v40 = v12;
      v44[5] = v12;
      v44[6] = v13;
      v37 = v15;
      v38 = v14;
      v44[7] = v14;
      v44[8] = v15;
      v35 = v17;
      v36 = v16;
      v44[9] = v16;
      v44[10] = v17;
      v33 = v19;
      v34 = v18;
      v44[11] = v18;
      v44[12] = v19;
      v31 = v21;
      v32 = v20;
      v44[13] = v20;
      v44[14] = v21;
      v30 = v22;
      v44[15] = v22;
      v45 = v43;
      sub_10002D9F8();
      sub_10016A970();
      v23 = a1(v44);
      if (v3)
      {
        swift_release();
        swift_bridgeObjectRelease();
        sub_100075850();
        goto LABEL_16;
      }
      if ((v23 & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v6);
        v46 = v6;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_10016B0E0();
          sub_1000586E8();
          v6 = v46;
        }
        v25 = v6[2];
        v3 = 0;
        if (v25 >= v6[3] >> 1)
        {
          sub_1000586E8();
          v3 = 0;
          v6 = v46;
        }
        v6[2] = v25 + 1;
        v26 = &v6[4 * v25];
        *((_BYTE *)v26 + 32) = v7;
        *((_BYTE *)v26 + 33) = v8;
        *((_BYTE *)v26 + 34) = v9;
        *((_BYTE *)v26 + 35) = v42;
        *((_BYTE *)v26 + 36) = v41;
        *((_BYTE *)v26 + 37) = v40;
        *((_BYTE *)v26 + 38) = v39;
        *((_BYTE *)v26 + 39) = v38;
        *((_BYTE *)v26 + 40) = v37;
        *((_BYTE *)v26 + 41) = v36;
        *((_BYTE *)v26 + 42) = v35;
        *((_BYTE *)v26 + 43) = v34;
        *((_BYTE *)v26 + 44) = v33;
        *((_BYTE *)v26 + 45) = v32;
        *((_BYTE *)v26 + 46) = v31;
        *((_BYTE *)v26 + 47) = v30;
        *((_OWORD *)v26 + 3) = v43;
      }
      else
      {
        sub_100075850();
        sub_10002D89C();
        v3 = 0;
      }
      ++v4;
      v5 += 2;
      a3 = v27;
      if (v28 == v4)
        goto LABEL_16;
    }
    __break(1u);
  }
  else
  {
LABEL_16:
    swift_bridgeObjectRelease();
  }
}

void sub_100143798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void (*v23)(char *, unint64_t, uint64_t, __n128);
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t (*v65)(char *, char *, uint64_t);
  char *v66;
  char v67[32];
  char *v68;

  v52 = a3;
  v53 = a4;
  v6 = type metadata accessor for UniversalControlLink.Endpoint(0);
  v60 = *(_QWORD *)(v6 - 8);
  v61 = v6;
  __chkstk_darwin(v6);
  v59 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000055B0((uint64_t *)&unk_1002AC150);
  __chkstk_darwin(v8);
  v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UniversalControlLink(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v51 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v58 = (char *)&v50 - v16;
  __chkstk_darwin(v15);
  v66 = (char *)&v50 - v17;
  v68 = (char *)_swiftEmptyArrayStorage;
  v18 = *(_QWORD *)(a1 + 16);
  v50 = a2;
  v56 = a2 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView;
  v19 = swift_beginAccess(a2 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView, v67, 0, 0);
  v57 = v18;
  if (v18)
  {
    v20 = 0;
    v54 = v10;
    v55 = a1;
    v64 = v11;
    do
    {
      if (v20 >= *(_QWORD *)(a1 + 16))
      {
        __break(1u);
        return;
      }
      v21 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
      v22 = *(_QWORD *)(v12 + 72);
      v23 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v12 + 16);
      v23(v10, a1 + v21 + v22 * v20, v11, v19);
      _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v10, 0, 1, v11);
      if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v10, 1, v11) == 1)
        goto LABEL_17;
      v62 = v22;
      v63 = v21;
      v24 = v66;
      v65 = *(uint64_t (**)(char *, char *, uint64_t))(v12 + 32);
      v25 = v65(v66, v10, v11);
      v26 = v59;
      v27 = UniversalControlLink.endpoint1.getter(v25);
      v28 = UniversalControlLink.Endpoint.device.getter(v27);
      v30 = v29;
      (*(void (**)(char *, uint64_t))(v60 + 8))(v26, v61);
      v31 = v56 + *(int *)(type metadata accessor for SyncView(0) + 20);
      v32 = type metadata accessor for SyncViewLocalData(0);
      v33 = swift_retain(*(_QWORD *)(v31 + *(int *)(v32 + 28)));
      v34 = dispatch thunk of UniversalControlDevice.id.getter(v33);
      v36 = v35;
      swift_release();
      v37 = v28;
      v11 = v64;
      v38 = static UniversalControlUUID.compare(lhs:rhs:)(v37, v30, v34, v36);
      v39 = v58;
      v40 = ((uint64_t (*)(char *, char *, uint64_t))v23)(v58, v24, v11);
      if (v38)
      {
        v41 = *(void (**)(char *, uint64_t))(v12 + 8);
        v41(v39, v11);
      }
      else
      {
        v42 = (void (*)(char *, char *, uint64_t))v65;
        v43 = UniversalControlLink.display2.getter(v40);
        v45 = static UniversalControlUUID.compare(lhs:rhs:)(v43, v44, v52, v53);
        v41 = *(void (**)(char *, uint64_t))(v12 + 8);
        v41(v39, v11);
        if (!v45)
        {
          v42(v51, v66, v11);
          v46 = v68;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v68);
          v10 = v54;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_100058800();
            v46 = v68;
          }
          v48 = v63;
          v49 = *((_QWORD *)v46 + 2);
          if (v49 >= *((_QWORD *)v46 + 3) >> 1)
          {
            sub_100058800();
            v46 = v68;
          }
          *((_QWORD *)v46 + 2) = v49 + 1;
          v11 = v64;
          v42(&v46[v48 + v49 * v62], v51, v64);
          v68 = v46;
          goto LABEL_9;
        }
      }
      v41(v66, v11);
      v10 = v54;
LABEL_9:
      ++v20;
      a1 = v55;
    }
    while (v57 != v20);
  }
  _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v10, 1, 1, v11);
LABEL_17:
  swift_bridgeObjectRelease(a1);
  sub_100025A28((uint64_t)v10, (uint64_t *)&unk_1002AC150);
  swift_release();
}

uint64_t sub_100143B88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_100071A7C(a1);
  if ((v6 & 1) != 0)
    goto LABEL_8;
  if (*(_DWORD *)(a1 + 36) != v5)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
  {
    v7 = 1;
  }
  else
  {
    sub_100167EC4(result, v5, a1, a2);
    v7 = 0;
  }
  v8 = type metadata accessor for CompanionLinkDevice(0);
  return _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(a2, v7, 1, v8);
}

uint64_t sub_100143C0C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = a2(0);
  v7 = v6;
  if (v5)
  {
    sub_1000B2170(a3, a1+ ((*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80)), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16));
    v8 = 0;
  }
  else
  {
    v8 = 1;
  }
  return _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(a3, v8, 1, v7);
}

void sub_100143C80(uint64_t a1, uint64_t a2)
{
  __asm { BR              X12 }
}

uint64_t sub_100143CC8(unsigned __int8 a1, uint64_t a2)
{
  unsigned __int8 v2;

  if ((a2 & 0xFF000000000000) != 0)
    v2 = a1;
  else
    v2 = 0;
  return v2 | (((a2 & 0xFF000000000000) == 0) << 8);
}

uint64_t sub_100143DC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  _BYTE v18[24];

  v3 = v1;
  sub_100026954();
  v4 = v1 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView;
  sub_10005FE28(v1 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView, (uint64_t)v18);
  v5 = sub_10016A480();
  v6 = sub_10016A508();
  v7 = sub_1000088D0();
  dispatch thunk of UniversalControlDevice.id.getter(v7);
  sub_10000B348();
  v8 = sub_10016ADB8();
  if (static UniversalControlUUID.compare(lhs:rhs:)(v8, v9, v2, v0))
  {
    v10 = (uint64_t *)(v1 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_syncCoordinators);
    sub_10005FE28(v3 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_syncCoordinators, (uint64_t)&v17);
    v11 = *v10;
    sub_100040544();
    sub_100041C38(v2, v0, v11);
    v13 = v12;
    sub_10000E568();
    if (v13)
    {
      sub_1000F4418();
      v15 = v14;
      sub_10000B348();
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)(v4 + *(int *)(v5 + 20) + *(int *)(v6 + 28));
    sub_10002D790();
  }
  return v15;
}

void sub_100143ED8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD v49[2];
  char v50;
  _BYTE v51[48];

  sub_10002626C();
  v3 = v0;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v44 = v12;
  v43 = sub_10000E440();
  sub_100101920(*(_QWORD *)(v43 - 8));
  sub_1000262EC();
  __chkstk_darwin(v13);
  sub_10000E5DC();
  sub_10010192C(v14);
  sub_10009A58C();
  sub_1000F0150();
  __chkstk_darwin(v15);
  sub_1000601B4();
  sub_10005FE28(v0 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView, (uint64_t)&v48);
  sub_10016A480();
  sub_10016A508();
  sub_1000088D0();
  v16 = sub_100062418();
  sub_10000B348();
  if (v16)
  {
    v17 = v0 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_layout;
    sub_10005FE28(v3 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_layout, (uint64_t)&v45);
    v18 = sub_10003D65C(v1, v17, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));
    v19 = dispatch thunk of UniversalControlDisplay.id.getter(v18);
    v20 = UniversalControlDisplayLayout.displayFrames(relativeTo:)(v19);
    sub_10016AEF0(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
    if (v20)
    {
      sub_100041E34(v11, v9, v7, v5, v20, (uint64_t)v49);
      v41 = v49[0];
      v40 = v49[1];
      v21 = v50;
      sub_10000E420();
      sub_100041108();
      sub_10005FA70((uint64_t)v49, (uint64_t)v51, (uint64_t *)&unk_1002B2610);
      if ((v51[32] & 1) == 0)
      {
        v22 = v41;
        v23 = v40;
        goto LABEL_11;
      }
    }
    else
    {
      sub_100041108();
    }
  }
  if (qword_1002A98F8 != -1)
    swift_once(&qword_1002A98F8, sub_10014C200);
  v24 = sub_10000F6E4();
  v25 = sub_10005FE9C(v24, (uint64_t)qword_1002B2A80);
  v27 = static os_log_type_t.default.getter(v25, v26);
  if (os_log_type_enabled(v25, v27))
  {
    sub_10016AE84(v7 >> 8);
    sub_10016AC24(v7 >> 16);
    sub_10016AE78(v7 >> 24);
    sub_10016AE6C(HIBYTE(v7));
    v28 = sub_10000797C(22);
    v38 = sub_10000797C(64);
    v47 = v38;
    *(_DWORD *)v28 = 136446466;
    sub_10016AE60();
    sub_10016AE54();
    sub_10016AE48();
    UUID.init(uuid:)(v11, v11 >> 8, v11 >> 16, v11 >> 24, HIDWORD(v11), v11 >> 40);
    sub_100141378();
    sub_10016AE14();
    sub_10016B174();
    v30 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
    v30(v42, v43);
    sub_1000599D0(8, HIWORD(v9), v11);
    v31 = sub_1000602C0();
    v33 = v32;
    sub_10000E420();
    v46 = sub_100006FCC(v31, v33, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v28 + 4, v28 + 12);
    sub_10002D89C();
    *(_WORD *)(v28 + 12) = 2082;
    sub_10016AE60();
    sub_10016ABC4();
    sub_10016AE54();
    sub_10016AE48();
    UUID.init(uuid:)(v7, v41, v40, v39, HIDWORD(v7), v7 >> 40);
    sub_100141378();
    sub_10016B18C();
    v30(v42, v43);
    v34 = sub_100141400();
    v46 = sub_100006FCC(v34, v35, v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v28 + 14, v28 + 22);
    sub_10000E568();
    sub_100026A60((void *)&_mh_execute_header, v25, v27, "%{public}s: screen rect not found, display=%{public}s", (uint8_t *)v28);
    sub_100026A58(v38, v37, (uint64_t)&type metadata for Any + 8);
    sub_100007958(v38);
    sub_100007958(v28);
  }

  v22 = 0uLL;
  v21 = 1;
  v23 = 0uLL;
LABEL_11:
  *(_OWORD *)v44 = v22;
  *(_OWORD *)(v44 + 16) = v23;
  *(_BYTE *)(v44 + 32) = v21;
  sub_10000E4E0();
}

void sub_10014445C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t);
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(uint64_t, uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t (*v101)(uint64_t);
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void (*v108)(char *, uint64_t);
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(uint64_t, uint64_t);
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _BYTE v125[112];
  char v126[16];

  sub_10016A490();
  a27 = v32;
  a28 = v33;
  v117 = v28;
  v122 = v34;
  v35 = type metadata accessor for UniversalControlAnchor(0);
  sub_1000A353C(v35, (uint64_t)v126);
  v112 = v36;
  sub_1000262EC();
  __chkstk_darwin(v37);
  sub_10003D69C();
  v113 = v38;
  sub_1000A3464();
  __chkstk_darwin(v39);
  sub_100026A8C();
  v111 = v40;
  v116 = sub_10009A58C();
  v115 = *(_QWORD *)(v116 - 8);
  sub_1000262EC();
  __chkstk_darwin(v41);
  v119 = (char *)&v108 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = sub_10016A7F0();
  sub_1000A353C(v43, (uint64_t)&a15);
  v118 = v44;
  sub_1000262EC();
  __chkstk_darwin(v45);
  v110 = (char *)&v108 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000A3464();
  __chkstk_darwin(v47);
  sub_1000A34C8();
  v109 = v48;
  sub_1000A3464();
  __chkstk_darwin(v49);
  v51 = (char *)&v108 - v50;
  v52 = sub_100060154();
  sub_10016A75C();
  __chkstk_darwin(v53);
  sub_1000268BC();
  v56 = v54 - v55;
  __chkstk_darwin(v57);
  sub_10014128C();
  sub_10014A790();
  sub_1000055B0((uint64_t *)&unk_1002AC8C0);
  v58 = sub_1000B9A80();
  sub_10016B098();
  v61 = v60 & ~v59;
  v64 = sub_10016B078(v63, v61 + v62);
  *(_OWORD *)(v64 + 16) = xmmword_10021BBA0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v64 + v61, v122, v58);
  UniversalControlConfiguration.addingLinks(_:)(v64);
  sub_10000E4A0();
  v65 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
  v120 = v52;
  v114 = v65;
  v65(v56, v52);
  v66 = v117;
  sub_10014A904();
  v68 = v67;
  v69 = *(_QWORD *)(v66 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_devices);
  v70 = sub_10016A624();
  v71 = UniversalControlLink.endpoint2.getter(v70);
  v72 = (uint64_t)v51;
  UniversalControlLink.Endpoint.device.getter(v71);
  sub_10016AE14();
  v108 = *(void (**)(char *, uint64_t))(v118 + 8);
  v108(v51, v121);
  v73 = v66 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView;
  sub_10005FE28(v66 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView, (uint64_t)&v123);
  v74 = v73 + *(int *)(sub_10016A480() + 20);
  v75 = *(char **)(v74 + *(int *)(sub_10016A508() + 28));
  sub_10002D790();
  v118 = v31;
  sub_100158DDC(v31, v68, v69, v72, v64, 0, 0, 0, 1u, v75, 0);
  sub_10002645C();
  sub_10000E594();
  v76 = sub_10002D860();
  dispatch thunk of UniversalControlDisplaySolver1.solve()(v76);
  sub_10002D790();
  v77 = sub_100062418();
  v78 = sub_10002645C();
  if (v77)
  {
    dispatch thunk of UniversalControlDisplay.id.getter(v78);
    sub_10000B348();
    sub_10016AB54();
    v80 = UniversalControlDisplayLayout.displayFrames(relativeTo:)(v79);
    if (v80)
    {
      v81 = v80;
      v82 = UniversalControlLink.display1.getter();
      sub_100041E34(v82, v83, v84, v85, v81, (uint64_t)&v124);
      sub_10016AB3C(v86, v87, (uint64_t *)&unk_1002B2610);
      if (v126[0] == 1)
      {
        sub_10000E594();
      }
      else
      {
        v88 = UniversalControlLink.display2.getter();
        sub_100041E34(v88, v89, v90, v91, v81, (uint64_t)v125);
        v92 = sub_10000E594();
        sub_10016AB30(v92, v93, (uint64_t *)&unk_1002B2610);
        if ((v125[72] & 1) == 0)
        {
          v97 = v109;
          v98 = UniversalControlLink.endpoint1.getter(v94);
          v99 = v111;
          UniversalControlLink.Endpoint.anchor.getter(v98);
          v100 = v97;
          v101 = (uint64_t (*)(uint64_t))v108;
          v102 = ((uint64_t (*)(uint64_t, uint64_t))v108)(v100, v121);
          v117 = UniversalControlAnchor.edge.getter(v102);
          sub_10016A754(v99);
          sub_10016ACD4();
          v104 = UniversalControlLink.endpoint2.getter(v103);
          UniversalControlLink.Endpoint.anchor.getter(v104);
          v105 = sub_10016AE90();
          v106 = v101(v105);
          UniversalControlAnchor.edge.getter(v106);
          sub_10016A698();
          sub_10016ABC4();
          __asm { BR              X10 }
        }
      }
    }
  }
  sub_10000B364();
  v95 = v118;
  v96 = v114;
  sub_10016B008(v115);
  v96(v95, v120);
  sub_10016A5AC();
}

void sub_10014494C()
{
  char v0;
  CGFloat v1;
  CGFloat v2;
  CGFloat v3;
  CGFloat v4;
  double v5;
  CGRect v6;
  CGRect v7;
  CGRect v8;
  CGRect v9;
  CGRect v10;

  if (v0 == 2)
  {
    v6.origin.x = v4;
    v6.origin.y = v3;
    v6.size.width = v2;
    v6.size.height = v1;
    CGRectGetMinY(v6);
    v7.origin.x = sub_10016A408();
    if (v5 == CGRectGetMaxY(v7))
    {
      sub_10016AAF4();
      v8.origin.x = sub_10016A530();
      CGRectGetMaxX(v8);
      v9.origin.x = sub_10016AAC4();
      CGRectGetMinX(v9);
      v10.origin.x = sub_10016A530();
      CGRectGetMinX(v10);
      sub_10000B364();
      JUMPOUT(0x100144828);
    }
  }
  JUMPOUT(0x100144820);
}

void sub_100144A50(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  int64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t i;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  unint64_t v27;
  _QWORD v28[9];

  if (*(_QWORD *)(a1 + 16) < *(_QWORD *)(a2 + 16))
    return;
  v25 = a2 + 56;
  v3 = -1 << *(_BYTE *)(a2 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v27 = v4 & *(_QWORD *)(a2 + 56);
  v24 = (unint64_t)(63 - v3) >> 6;
  v5 = a1 + 56;
  swift_bridgeObjectRetain(a2);
  v6 = 0;
  while (1)
  {
LABEL_6:
    v7 = v6;
    if (v27)
    {
      v8 = (v27 - 1) & v27;
      v9 = __clz(__rbit64(v27)) | (v6 << 6);
      goto LABEL_22;
    }
    v10 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v10 >= v24)
      goto LABEL_29;
    v11 = *(_QWORD *)(v25 + 8 * v10);
    ++v6;
    if (!v11)
    {
      v6 = v7 + 2;
      if (v7 + 2 >= v24)
        goto LABEL_29;
      v11 = *(_QWORD *)(v25 + 8 * v6);
      if (!v11)
      {
        v6 = v7 + 3;
        if (v7 + 3 >= v24)
          goto LABEL_29;
        v11 = *(_QWORD *)(v25 + 8 * v6);
        if (!v11)
          break;
      }
    }
LABEL_21:
    v8 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v6 << 6);
LABEL_22:
    if (!*(_QWORD *)(a1 + 16))
      goto LABEL_29;
    v27 = v8;
    v13 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 32 * v9);
    v14 = *v13;
    v15 = v13[1];
    v17 = v13[2];
    v16 = v13[3];
    Hasher.init(_seed:)(v28, *(_QWORD *)(a1 + 40));
    UniversalControlDisplayID.hash(into:)(v28, v14, v15, v17, v16);
    v18 = Hasher._finalize()();
    v19 = -1 << *(_BYTE *)(a1 + 32);
    v20 = v18 & ~v19;
    if (((*(_QWORD *)(v5 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
      goto LABEL_29;
    if ((static UniversalControlDisplayID.== infix(_:_:)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 32 * v20), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 32 * v20 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 32 * v20 + 16), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 32 * v20 + 24), v14, v15, v17, v16) & 1) == 0)
    {
      v21 = ~v19;
      for (i = v20 + 1; ; i = v23 + 1)
      {
        v23 = i & v21;
        if (((*(_QWORD *)(v5 + (((i & v21) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v21)) & 1) == 0)
          break;
        if ((static UniversalControlDisplayID.== infix(_:_:)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 32 * v23), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 32 * v23 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 32 * v23 + 16), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 32 * v23 + 24), v14, v15, v17, v16) & 1) != 0)goto LABEL_6;
      }
LABEL_29:
      sub_10005E1F4(a2);
      return;
    }
  }
  v12 = v7 + 4;
  if (v7 + 4 >= v24)
    goto LABEL_29;
  v11 = *(_QWORD *)(v25 + 8 * v12);
  if (v11)
  {
    v6 = v7 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    v6 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v6 >= v24)
      goto LABEL_29;
    v11 = *(_QWORD *)(v25 + 8 * v6);
    ++v12;
    if (v11)
      goto LABEL_21;
  }
LABEL_33:
  __break(1u);
}

uint64_t sub_100144D04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  char *v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  unint64_t v27;
  char v28;
  char v29;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int64_t v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  _BYTE v44[16];
  _QWORD v45[9];

  if (*(_QWORD *)(a1 + 16) < *(_QWORD *)(a2 + 16))
    return 0;
  v3 = a2;
  v34 = a2 + 56;
  v4 = -1 << *(_BYTE *)(a2 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a2 + 56);
  v31 = (unint64_t)(63 - v4) >> 6;
  v7 = a1 + 56;
  HIDAccelerationTable.entry.getter(a1, a2);
  v8 = 0;
  v32 = v3;
  v33 = v7;
  while (1)
  {
    if (v6)
    {
      v9 = (v6 - 1) & v6;
      v10 = __clz(__rbit64(v6)) | (v8 << 6);
      v11 = v8;
      v12 = a1;
      goto LABEL_23;
    }
    v13 = v8 + 1;
    v12 = a1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v13 >= v31)
      goto LABEL_34;
    v14 = *(_QWORD *)(v34 + 8 * v13);
    v11 = v8 + 1;
    if (!v14)
    {
      v11 = v8 + 2;
      if (v8 + 2 >= v31)
        goto LABEL_34;
      v14 = *(_QWORD *)(v34 + 8 * v11);
      if (!v14)
      {
        v11 = v8 + 3;
        if (v8 + 3 >= v31)
          goto LABEL_34;
        v14 = *(_QWORD *)(v34 + 8 * v11);
        if (!v14)
          break;
      }
    }
LABEL_22:
    v9 = (v14 - 1) & v14;
    v10 = __clz(__rbit64(v14)) + (v11 << 6);
LABEL_23:
    if (!*(_QWORD *)(v12 + 16))
    {
      v2 = 0;
      goto LABEL_30;
    }
    v35 = v9;
    v36 = v11;
    v16 = (char *)(*(_QWORD *)(v3 + 48) + 16 * v10);
    v42 = *v16;
    v41 = v16[1];
    v38 = v16[2];
    v37 = v16[3];
    v39 = v16[4];
    v40 = v16[5];
    v17 = v16[6];
    v18 = v16[7];
    v19 = v16[8];
    v20 = v16[9];
    v21 = v16[10];
    v22 = v16[11];
    v23 = v16[12];
    v24 = v16[13];
    v25 = v16[14];
    v26 = v16[15];
    Hasher.init(_seed:)(v45, *(_QWORD *)(v12 + 40));
    v44[0] = v42;
    v44[1] = v41;
    v44[2] = v38;
    v44[3] = v37;
    v44[4] = v39;
    v44[5] = v40;
    v44[6] = v17;
    v44[7] = v18;
    v44[8] = v19;
    v44[9] = v20;
    v44[10] = v21;
    v44[11] = v22;
    v44[12] = v23;
    v44[13] = v24;
    v44[14] = v25;
    v44[15] = v26;
    Hasher.combine(bytes:)(v44, v45);
    v27 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(a1 + 32));
    if (((*(_QWORD *)(v33 + ((v27 >> 3) & 0xFFFFFFFFFFFFF8)) >> v27) & 1) == 0)
    {
      v2 = 0;
      v3 = v32;
      goto LABEL_30;
    }
    v3 = v32;
    v6 = v35;
    v8 = v36;
    if (sub_10016AF58(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v27), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v27 + 8)))
    {
      sub_10016AA28();
      if ((v28 & 1) == 0)
      {
LABEL_29:
        v2 = 0;
        goto LABEL_30;
      }
      while (sub_10016AF58(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v27), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v27 + 8)))
      {
        sub_10016AA28();
        if ((v29 & 1) == 0)
          goto LABEL_29;
      }
    }
  }
  v15 = v8 + 4;
  if (v8 + 4 < v31)
  {
    v14 = *(_QWORD *)(v34 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        v11 = v15 + 1;
        if (__OFADD__(v15, 1))
          break;
        if (v11 >= v31)
          goto LABEL_34;
        v14 = *(_QWORD *)(v34 + 8 * v11);
        ++v15;
        if (v14)
          goto LABEL_22;
      }
LABEL_36:
      __break(1u);
    }
    v11 = v8 + 4;
    goto LABEL_22;
  }
LABEL_34:
  v2 = 1;
LABEL_30:
  sub_10005E1F4(v3);
  return v2;
}

uint64_t sub_1001450FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t result;
  char v9;
  uint64_t v10;

  sub_10016AE2C();
  swift_bridgeObjectRetain(v7);
  result = sub_100041D30(v5, v4, a4);
  if ((v9 & 1) != 0)
    v10 = 0;
  else
    v10 = result;
  if (v10 == -1)
  {
    __break(1u);
  }
  else
  {
    swift_isUniquelyReferenced_nonNull_native(a4);
    sub_10016A9BC();
    sub_1000F2E28();
    swift_bridgeObjectRelease();
    sub_1000103C0();
    return sub_100026B88();
  }
  return result;
}

uint64_t sub_100145194(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  char v7;
  uint64_t v8;

  swift_bridgeObjectRetain(a3);
  result = sub_100041D30(a1, a2, a3);
  if ((v7 & 1) != 0)
    v8 = 0;
  else
    v8 = result;
  if (v8 == -1)
  {
    __break(1u);
  }
  else
  {
    swift_isUniquelyReferenced_nonNull_native(a3);
    sub_1000F2E28();
    swift_bridgeObjectRelease(0x8000000000000000);
    return a3;
  }
  return result;
}

uint64_t sub_100145228(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;

  sub_1000F0998(a1, a4);
  v8 = v7;
  sub_1000F42D8(a2, a3, a1);
  swift_isUniquelyReferenced_nonNull_native(v8);
  sub_1000F2E28();
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_1001452B8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  Swift::Int v10;

  swift_bridgeObjectRetain();
  v6 = sub_1001A8C70(a1, a2);
  if ((v7 & 1) != 0)
  {
    v8 = v6;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a3);
    v10 = *(_QWORD *)(a3 + 24);
    sub_1000055B0(&qword_1002B3420);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v10);
    sub_100033B3C();
    _NativeDictionary._delete(at:)(v8, a3, &type metadata for UniversalControlDeviceID, &type metadata for UInt64);
    swift_bridgeObjectRelease();
  }
  return a3;
}

uint64_t sub_100145370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v8;
  char v9;

  if (!sub_100071340(a2, a4))
    return 0;
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(a4);
  sub_1000F145C();
  v9 = v8;
  swift_bridgeObjectRelease(a4);
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(a1);
  return v9 & 1;
}

void sub_100145414()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[12];
  uint64_t v30;
  uint64_t v31;

  sub_10003AFC4();
  v30 = v3;
  v31 = v4;
  v29[3] = type metadata accessor for SHA256Digest(0);
  sub_1000262EC();
  __chkstk_darwin(v5);
  sub_10000E5DC();
  type metadata accessor for SHA256(0);
  sub_1000262EC();
  __chkstk_darwin(v6);
  sub_100026500();
  v7 = type metadata accessor for JSONEncoder.OutputFormatting(0);
  sub_10016A75C();
  __chkstk_darwin(v8);
  sub_1000F0204();
  v9 = type metadata accessor for JSONEncoder(0);
  v10 = swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))JSONEncoder.init())(v10, v11, v12, v13);
  v14 = sub_1000055B0(&qword_1002AB660);
  v15 = swift_allocObject(v14, ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72), *(unsigned __int8 *)(v2 + 80) | 7);
  *(_OWORD *)(v15 + 16) = xmmword_10021BBA0;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))static JSONEncoder.OutputFormatting.sortedKeys.getter)(v15, v16, v17, v18);
  v29[0] = v15;
  sub_10016A0D0((uint64_t)&unk_1002B3390);
  v20 = v19;
  v21 = sub_1000055B0(&qword_1002AB668);
  sub_1001684CC((uint64_t)&qword_1002B33A0);
  dispatch thunk of SetAlgebra.init<A>(_:)(v29, v21, v22, v7, v20);
  dispatch thunk of JSONEncoder.outputFormatting.setter(v0);
  sub_10016A970();
  sub_100057E2C();
  v24 = v23;
  sub_100075850();
  v29[0] = v24;
  sub_100036DCC(v29);
  if (!v1)
  {
    v25 = sub_1000055B0(&qword_1002AA560);
    sub_100169F64((uint64_t)&qword_1002AD060);
    dispatch thunk of JSONEncoder.encode<A>(_:)(v29, v25);
    v27 = v26;
    v28 = sub_10002645C();
    ((void (*)(uint64_t))SHA256.init())(v28);
    __asm { BR              X10 }
  }
  swift_release();
  __break(1u);
  JUMPOUT(0x10014578CLL);
}

_QWORD *sub_1001457A8()
{
  uint64_t v0;
  _QWORD *result;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  result = _swiftEmptyArrayStorage;
  if (*(_BYTE *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_clientAssertionController) + 25) == 1)
  {
    v2 = v0;
    v3 = UniversalControlPreferences.alwaysGuardEdges.getter(_swiftEmptyArrayStorage);
    sub_10002D790();
    v4 = sub_100040544();
    sub_10014261C(v4, v2, v3 & 1);
    sub_10000E568();
    sub_100192154();
    sub_10002D790();
    v5 = sub_10003AFBC();
    sub_100141600(v5, v2);
    sub_10000E420();
    sub_100192154();
    return _swiftEmptyArrayStorage;
  }
  return result;
}

BOOL sub_10014588C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  _QWORD v5[4];

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_connectedLinks);
  v5[2] = a1;
  sub_1000103C0();
  v3 = sub_100148814((uint64_t (*)(char *))sub_100167E20, (uint64_t)v5, v2);
  sub_10000E410();
  return !v3;
}

void sub_1001458F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t);
  unint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint8_t *v68;
  NSObject *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t (*v78)(unint64_t, uint64_t, uint64_t);
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  NSObject *v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  os_log_type_t v107;
  uint8_t *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t (*v114)(uint64_t, _QWORD);
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  NSObject *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void (*v129)(unint64_t, uint64_t);
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint8_t *v133;
  uint64_t v134;
  void (*v135)(uint64_t);
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint8_t *v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  _BYTE v145[32];

  sub_10003AFC4();
  a19 = v23;
  a20 = v24;
  v130 = v21;
  v142 = v26;
  v143 = v25;
  v27 = sub_10000E440();
  sub_1000A353C(v27, (uint64_t)&a16);
  sub_10016AE84(v28);
  sub_1000262EC();
  __chkstk_darwin(v29);
  sub_10000E5DC();
  v31 = sub_1000F0190(v30);
  v32 = type metadata accessor for UniversalControlConfiguration.GradedLink(v31);
  v33 = *(_QWORD *)(v32 - 8);
  v138 = v32;
  v139 = v33;
  sub_1000262EC();
  __chkstk_darwin(v34);
  sub_10000E5DC();
  v137 = v35;
  v132 = type metadata accessor for UniversalControlConfiguration(0);
  v128 = *(_QWORD *)(v132 - 8);
  sub_1000262EC();
  __chkstk_darwin(v36);
  sub_10000E5DC();
  v131 = v37;
  v38 = sub_10016AB20();
  v140 = *(_QWORD *)(v38 - 8);
  v141 = (uint8_t *)v38;
  sub_1000262EC();
  __chkstk_darwin(v39);
  v41 = (char *)&v122 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_1000B9A80();
  v43 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v127 = (uint64_t)&v122 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000A3464();
  __chkstk_darwin(v45);
  v47 = (char *)&v122 - v46;
  sub_1000055B0((uint64_t *)&unk_1002AC150);
  sub_1000262EC();
  __chkstk_darwin(v48);
  sub_10003D69C();
  v125 = v49;
  sub_1000A3464();
  __chkstk_darwin(v50);
  sub_1000A34C8();
  v126 = v51;
  sub_1000A3464();
  __chkstk_darwin(v52);
  sub_10014128C();
  v133 = v20;
  v53 = *(_QWORD *)&v20[OBJC_IVAR____TtC13EnsembleAgent14SyncController_connectedLinks];
  v54 = *(_QWORD *)(v53 + 16);
  v136 = v43;
  v129 = (void (*)(unint64_t, uint64_t))v53;
  if (v54)
  {
    sub_10016AFFC();
    v57 = v55 + v56;
    v58 = *(void (**)(uint64_t))(v43 + 16);
    v134 = *(_QWORD *)(v43 + 72);
    v135 = v58;
    swift_bridgeObjectRetain();
    v59 = v136;
    while (1)
    {
      v60 = sub_1001243CC();
      v135(v60);
      sub_10016ABAC(v22, 0);
      sub_10000E514(v22);
      if (v61)
        break;
      v62 = sub_1000D9504((uint64_t)v47, v22, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v59 + 32));
      v63 = sub_10016AFB0(v62);
      sub_10016AECC(v63);
      sub_10016AD18();
      v64 = sub_100026B88();
      v66 = static UniversalControlUUID.compare(lhs:rhs:)(v64, v65);
      sub_1001112AC((uint64_t)v47, *(uint64_t (**)(uint64_t, uint64_t))(v59 + 8));
      if (!v66)
      {
        swift_bridgeObjectRelease();
        goto LABEL_30;
      }
      v57 += v134;
      if (!--v54)
        goto LABEL_8;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
LABEL_8:
    sub_10016ABAC(v22, 1);
  }
  swift_bridgeObjectRelease();
  v67 = v131;
  v68 = v133;
  sub_10014A790();
  v69 = &v68[OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView];
  sub_10005FE28((uint64_t)&v68[OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView], (uint64_t)v145);
  v135 = (void (*)(uint64_t))sub_10016A480();
  v134 = type metadata accessor for SyncViewLocalData(0);
  v70 = sub_1000088D0();
  dispatch thunk of UniversalControlDevice.id.getter(v70);
  sub_10000B348();
  v71 = sub_10016AB48();
  v72 = UniversalControlConfiguration.links(for:where:)(v71);
  v129 = *(void (**)(unint64_t, uint64_t))(v128 + 8);
  v129(v67, v132);
  v73 = *(_QWORD *)(v72 + 16);
  if (v73)
  {
    v123 = v69;
    v124 = v42;
    sub_10016AFFC();
    v75 = v72 + v74;
    v77 = *(_QWORD *)(v76 + 72);
    v78 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v76 + 16);
    v128 = v72;
    sub_1000103C0();
    v80 = v137;
    v79 = v138;
    while (1)
    {
      v81 = v78(v80, v75, v79);
      v82 = UniversalControlConfiguration.GradedLink.endpoint2.getter(v81);
      v83 = sub_10016AECC(v82);
      v85 = v84;
      sub_10016AD18();
      v86 = static UniversalControlUUID.compare(lhs:rhs:)(v83, v85);
      (*(void (**)(unint64_t, uint64_t))(v139 + 8))(v80, v79);
      if (!v86)
        break;
      v75 += v77;
      if (!--v73)
      {
        sub_100026AF4(v128);
        v69 = v123;
        goto LABEL_15;
      }
    }
    sub_100026AF4(v128);
  }
  else
  {
    sub_10000E410();
LABEL_15:
    v87 = v131;
    sub_10014A790();
    v88 = sub_1000088D0();
    v89 = dispatch thunk of UniversalControlDevice.id.getter(v88);
    v91 = v90;
    sub_10000B348();
    sub_10016ACD4();
    v92 = v89;
    v93 = v91;
    v94 = v143;
    v95 = v69;
    v96 = v142;
    UniversalControlConfiguration.recentLink(between:and:)(v92, v93, v143, v142);
    v129(v87, v132);
    sub_10000E514((uint64_t)v41);
    if (v61)
    {
      v97 = sub_1000088D0();
      v95 = dispatch thunk of UniversalControlDevice.id.getter(v97);
      sub_10000B348();
      v102 = v126;
      v98 = sub_10016AB48();
      sub_10015A5B8(v98, v99, v94, v96, 3, v133, v100);
      sub_100025A28((uint64_t)v41, (uint64_t *)&unk_1002AC150);
      v101 = v136;
    }
    else
    {
      v101 = v136;
      v102 = v126;
      sub_1000D9504(v126, (uint64_t)v41, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v136 + 32));
      sub_10016ABAC(v102, 0);
    }
    v103 = v94;
    sub_10000E514(v102);
    v104 = v127;
    if (v61)
    {
      sub_100025A28(v102, (uint64_t *)&unk_1002AC150);
      if (qword_1002A98F8 != -1)
        swift_once(&qword_1002A98F8, sub_10014C200);
      v105 = type metadata accessor for Logger(0);
      v106 = sub_100006FB4(v105, (uint64_t)qword_1002B2A80);
      Logger.logObject.getter(v106);
      v107 = sub_1000E4B94();
      if (sub_1000AAE80(v107))
      {
        v139 = v103 >> 16;
        v140 = v103 >> 8;
        v137 = HIDWORD(v103);
        v138 = v103 >> 24;
        v135 = (void (*)(uint64_t))HIWORD(v103);
        v136 = v103 >> 40;
        v133 = (uint8_t *)(v96 >> 8);
        v134 = HIBYTE(v103);
        v131 = v96 >> 24;
        v132 = v96 >> 16;
        v129 = (void (*)(unint64_t, uint64_t))HIDWORD(v96);
        v108 = (uint8_t *)sub_10000797C(12);
        v109 = sub_10000797C(32);
        *(_DWORD *)v108 = 136446210;
        v141 = v108 + 4;
        v110 = UUID.init(uuid:)(v103, v140, v139, v138, v137, v136);
        UUID.uuidString.getter(v110);
        v112 = v111;
        v113 = sub_10016ABFC();
        sub_1000EFF78(v113, v114);
        v115 = sub_10016B12C();
        sub_1000599D0(v115, v116, v112);
        sub_1000602C0();
        sub_10000E420();
        v117 = sub_10016ADB8();
        v144 = sub_100006FCC(v117, v118, v119);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, v145, v141);
        sub_100075850();
        sub_100026484((void *)&_mh_execute_header, v95, (os_log_type_t)v104, "%{public}s: unable to find primary display to place new link", v108);
        sub_1000263F4(v109, v120, (uint64_t)&type metadata for Any + 8);
        sub_100007958(v109);
        sub_100007958((uint64_t)v108);
      }

    }
    else
    {
      sub_1000D9504(v127, v102, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v101 + 32));
      sub_1000FD3C8();
      v121 = v130;
      sub_1001493AC();
      if (!v121)
        swift_bridgeObjectRelease();
      sub_1001112AC(v104, *(uint64_t (**)(uint64_t, uint64_t))(v101 + 8));
    }
  }
LABEL_30:
  sub_10003AF60();
}

void sub_100146030()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  sub_10002626C();
  v3 = v2;
  v5 = v4;
  sub_10016AC24(v4 >> 8);
  sub_10016AE84(v6 >> 24);
  sub_10016AF10(HIDWORD(v7));
  sub_100101920(v8 >> 40);
  sub_10010192C(HIWORD(v9));
  v10 = sub_10009A58C();
  v23 = *(_QWORD *)(v10 - 8);
  v24 = v10;
  sub_1000262EC();
  __chkstk_darwin(v11);
  sub_10000E5DC();
  sub_10016AE78(v12);
  v13 = sub_100060154();
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  sub_1000432FC();
  sub_10005FE28(v0 + OBJC_IVAR____TtC13EnsembleAgent14SyncController__configuration, (uint64_t)&v26);
  sub_10009C724(v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 16));
  sub_10014A904();
  v16 = v15;
  v17 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_devices);
  v18 = v0 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView;
  sub_10005FE28(v18, (uint64_t)&v25);
  v19 = v18 + *(int *)(sub_10016A480() + 20);
  v20 = *(char **)(v19 + *(int *)(sub_10016A508() + 28));
  sub_100043360();
  sub_100026AE4();
  sub_100158DDC(v1, v16, v17, 0, 0, 1, v5, v3, 0, v20, 1);
  sub_10002D860();
  sub_10000E594();
  swift_release();
  v21 = sub_1000EFF78(v1, *(uint64_t (**)(uint64_t, _QWORD))(v14 + 8));
  dispatch thunk of UniversalControlDisplaySolver1.solve()(v21);
  sub_10016B174();
  sub_10014C7D8();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
  sub_10000E4E0();
}

uint64_t sub_1001462C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t countAndFlagsBits;
  uint64_t v11;
  unint64_t v12;

  v3 = sub_100060154();
  sub_1000F0150();
  __chkstk_darwin(v4);
  sub_1000268CC();
  sub_1000055B0(&qword_1002B33B0);
  sub_1000262EC();
  __chkstk_darwin(v5);
  sub_1000601B4();
  v6 = objc_msgSend((id)sub_10016AF84(), "sharedPreferences");
  UniversalControlPreferences.configuration.getter(v6);

  v7 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v0, 1, v3);
  if ((_DWORD)v7)
  {
    sub_10016AF08(v7, &qword_1002B33B0);
    return 0;
  }
  else
  {
    v8 = sub_10003D65C(v1, v0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));
    sub_10016AF08(v8, &qword_1002B33B0);
    UniversalControlConfiguration.encoded()();
    sub_10016AC9C();
    countAndFlagsBits = Data.base64EncodedString(options:)(0)._countAndFlagsBits;
    v11 = sub_10016B144();
    sub_100022AEC(v11, v12);
  }
  return countAndFlagsBits;
}

_QWORD *sub_1001463F0()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _BYTE v10[24];
  _BYTE v11[24];

  Strong = swift_weakLoadStrong(v0 + 16);
  if (Strong)
  {
    sub_10005FE28(Strong + OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView, (uint64_t)v11);
    sub_10016A480();
    sub_10016A508();
    sub_1000088D0();
    v2 = sub_10002645C();
    v3 = (_QWORD *)dispatch thunk of UniversalControlDevice.inputDevices.getter(v2);
    sub_10000B348();
  }
  else
  {
    v3 = _swiftEmptyArrayStorage;
  }
  v4 = swift_weakLoadStrong(v0 + 16);
  if (v4)
  {
    v5 = (uint64_t *)(v4 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_syncCoordinators);
    sub_10005FE28(v4 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_syncCoordinators, (uint64_t)v10);
    v6 = *v5;
    sub_100040544();
    sub_10000B348();
    sub_100141A44(v6);
    v8 = v7;
    sub_10000E568();
  }
  else
  {
    v8 = _swiftEmptyArrayStorage;
  }
  sub_10004F6E0((uint64_t)v8);
  return v3;
}

void sub_1001464E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  uint64_t v11;
  double v12;
  double v13;
  uint64_t v14;
  double v15;
  double v16;
  unsigned int v17;
  uint64_t v18;
  char v19;
  id v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  char v50;
  double v51;
  char v52;
  char v53;
  double v54;
  double v55;
  BOOL v56;
  double v57;
  uint64_t v58;
  char v59;
  char v60;
  double v61;
  double v62;
  double v63;
  double v64;
  char v65;
  BOOL v66;
  double v67;
  uint64_t v68;
  uint64_t v69;
  double v70;
  uint64_t v71;
  char v72;
  char v73;
  char v74;
  char v75;
  int v76;
  uint64_t v77;
  unsigned int v78;
  char v79;
  char v80;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;

  sub_10016A490();
  sub_10016AF10(v2);
  sub_10000E440();
  sub_1000262EC();
  __chkstk_darwin(v3);
  v4 = sub_100060154();
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_100065E48();
  sub_1000055B0(&qword_1002B33B0);
  sub_1000262EC();
  __chkstk_darwin(v6);
  sub_1000432FC();
  v7 = objc_msgSend((id)sub_10016AF84(), "sharedPreferences");
  v8 = UniversalControlPreferences.hiddenDevices.getter();
  v84 = UniversalControlPreferences.preferredDevices.getter();
  UniversalControlPreferences.configuration.getter(v84);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v1, 1, v4))
  {
    sub_100025A28(v1, &qword_1002B33B0);
    countAndFlagsBits = 0;
    object = 0;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v0, v1, v4);
    sub_100025A28(v1, &qword_1002B33B0);
    v10 = UniversalControlConfiguration.prettyPrint(depth:)(1);
    countAndFlagsBits = v10._countAndFlagsBits;
    object = v10._object;
    v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v0, v4);
  }
  v11 = UniversalControlPreferences.alwaysGuardEdges.getter(v9);
  v80 = v11;
  v78 = sub_10000E3F4(v11, "automation");
  v77 = UniversalControlPreferences.connectedDeviceLimit.getter();
  v12 = UniversalControlPreferences.connectionSyncTimeout.getter();
  v13 = UniversalControlPreferences.connectionTimeout.getter();
  v14 = UniversalControlPreferences.deviceRemovalDebounceTime.getter();
  v16 = v15;
  v17 = sub_10000E3F4(v14, "enabled");
  v18 = static HIDFixed.zero.getter();
  if (v17 == (_DWORD)v18)
  {
    v18 = static HIDFixed.zero.getter();
    v19 = v18 ^ 1;
  }
  else
  {
    v19 = 2;
  }
  v79 = v19;
  v20 = sub_10000E3F4(v18, "magicEdgesEnabled");
  v76 = (int)v20;
  v74 = UniversalControlPreferences.disableNearbyInteraction.getter(v20);
  v21 = UniversalControlPreferences.disconnectAlertDebounceTime.getter();
  v72 = UniversalControlPreferences.hasShownControlNotification.getter();
  v22 = *(_QWORD *)(v8 + 16);
  v85 = v7;
  if (v22)
  {
    sub_10003B17C();
    v23 = v8 + 47;
    do
    {
      sub_10016AE3C(*(unsigned __int8 *)(v23 - 15), *(unsigned __int8 *)(v23 - 14), *(unsigned __int8 *)(v23 - 13), *(unsigned __int8 *)(v23 - 12), *(unsigned __int8 *)(v23 - 11), *(unsigned __int8 *)(v23 - 10), *(unsigned __int8 *)(v23 - 9), *(unsigned __int8 *)(v23 - 8));
      v24 = sub_1000602E0();
      v26 = v25;
      sub_10016ABDC();
      v27 = _swiftEmptyArrayStorage;
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
      {
        sub_10003B148();
        v27 = _swiftEmptyArrayStorage;
      }
      v28 = _swiftEmptyArrayStorage[2];
      if (v28 >= _swiftEmptyArrayStorage[3] >> 1)
      {
        sub_10003B148();
        v27 = _swiftEmptyArrayStorage;
      }
      v23 += 16;
      _swiftEmptyArrayStorage[2] = v28 + 1;
      v29 = &_swiftEmptyArrayStorage[2 * v28];
      v29[4] = v24;
      v29[5] = v26;
      --v22;
    }
    while (v22);
    v30 = sub_10000E568();
  }
  else
  {
    v30 = sub_100075850();
    v27 = 0;
  }
  v31 = UniversalControlPreferences.idleTimeout.getter(v30);
  v32 = UniversalControlPreferences.glueIdleTimeout.getter();
  v33 = UniversalControlPreferences.magicEdgeDebounceTime.getter();
  v34 = UniversalControlPreferences.magicEdgeRejectTime.getter();
  v35 = UniversalControlPreferences.rssiThreshold.getter();
  v36 = v35;
  v37 = *(_QWORD *)(v84 + 16);
  if (v37)
  {
    v68 = v35;
    v69 = v34;
    v71 = v33;
    sub_10003B17C();
    v38 = v84 + 47;
    do
    {
      sub_10016AE3C(*(unsigned __int8 *)(v38 - 15), *(unsigned __int8 *)(v38 - 14), *(unsigned __int8 *)(v38 - 13), *(unsigned __int8 *)(v38 - 12), *(unsigned __int8 *)(v38 - 11), *(unsigned __int8 *)(v38 - 10), *(unsigned __int8 *)(v38 - 9), *(unsigned __int8 *)(v38 - 8));
      v39 = sub_1000602E0();
      v41 = v40;
      sub_10016ABDC();
      v42 = _swiftEmptyArrayStorage;
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
      {
        sub_10003B148();
        v42 = _swiftEmptyArrayStorage;
      }
      v43 = _swiftEmptyArrayStorage[2];
      if (v43 >= _swiftEmptyArrayStorage[3] >> 1)
      {
        sub_10003B148();
        v42 = _swiftEmptyArrayStorage;
      }
      v38 += 16;
      _swiftEmptyArrayStorage[2] = v43 + 1;
      v44 = &_swiftEmptyArrayStorage[2 * v43];
      v44[4] = v39;
      v44[5] = v41;
      --v37;
    }
    while (v37);
    swift_bridgeObjectRelease();
    v33 = v71;
    v34 = v69;
    v36 = v68;
  }
  else
  {
    sub_10000E410();
    v42 = 0;
  }
  if (v36 == -80)
    v45 = 0;
  else
    v45 = v36;
  v87 = v45;
  if (v34 == 1000)
    v46 = 0;
  else
    v46 = v34;
  v86 = v46;
  v66 = v33 == 100;
  if (v33 == 100)
    v47 = 0;
  else
    v47 = v33;
  sub_100101920(v47);
  v48 = *(_QWORD *)&v32;
  if (v32 == 10.0)
    v48 = 0;
  sub_10016AE6C(v48);
  v49 = v31;
  if (v31 == 60.0)
    v49 = 0.0;
  v70 = v49;
  if ((v72 & 1) != 0)
    v50 = 1;
  else
    v50 = 2;
  v73 = v50;
  v51 = v21;
  if (v21 == 1.0)
    v51 = 0.0;
  v67 = v51;
  if ((v74 & 1) != 0)
    v52 = 1;
  else
    v52 = 2;
  v75 = v52;
  if (v76)
    v53 = 2;
  else
    v53 = 1;
  v65 = v53;
  v54 = v16;
  if (v16 == 45.0)
    v54 = 0.0;
  v64 = v54;
  v55 = v13;
  if (v13 == 2.5)
    v55 = 0.0;
  v63 = v55;
  v56 = v12 == 3.0;
  if (v12 == 3.0)
    v57 = 0.0;
  else
    v57 = v12;
  if (v77 == 3)
    v58 = 0;
  else
    v58 = v77;
  if (v78)
    v59 = 1;
  else
    v59 = 2;
  if ((v80 & 1) != 0)
    v60 = 1;
  else
    v60 = 2;
  v61 = UniversalControlPreferences.syncTimeout.getter();

  *(_BYTE *)v83 = v60;
  *(_BYTE *)(v83 + 1) = v59;
  *(_QWORD *)(v83 + 8) = countAndFlagsBits;
  *(_QWORD *)(v83 + 16) = object;
  *(_QWORD *)(v83 + 24) = v58;
  *(double *)(v83 + 40) = v57;
  *(_BYTE *)(v83 + 48) = v56;
  *(double *)(v83 + 56) = v63;
  *(_BYTE *)(v83 + 64) = v13 == 2.5;
  *(double *)(v83 + 72) = v64;
  *(_BYTE *)(v83 + 80) = v16 == 45.0;
  *(_BYTE *)(v83 + 81) = v79;
  *(_BYTE *)(v83 + 82) = v65;
  *(_BYTE *)(v83 + 83) = v75;
  *(double *)(v83 + 88) = v67;
  *(_BYTE *)(v83 + 96) = v21 == 1.0;
  *(_BYTE *)(v83 + 97) = v73;
  *(_QWORD *)(v83 + 104) = v27;
  *(double *)(v83 + 112) = v70;
  *(_BYTE *)(v83 + 120) = v31 == 60.0;
  *(_QWORD *)(v83 + 128) = v71;
  *(_BYTE *)(v83 + 136) = v32 == 10.0;
  *(_QWORD *)(v83 + 144) = v84;
  *(_BYTE *)(v83 + 152) = v66;
  *(_QWORD *)(v83 + 160) = v86;
  *(_BYTE *)(v83 + 168) = v34 == 1000;
  *(_QWORD *)(v83 + 176) = v87;
  *(_BYTE *)(v83 + 184) = v36 == -80;
  v62 = v61;
  if (v61 == 10.0)
    v62 = 0.0;
  *(_QWORD *)(v83 + 192) = v42;
  *(double *)(v83 + 200) = v62;
  *(_BYTE *)(v83 + 208) = v61 == 10.0;
  *(_BYTE *)(v83 + 32) = v77 == 3;
  sub_10016A5AC();
}

void sub_100146C6C()
{
  uint64_t (*v0)(uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t inited;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;

  sub_10002626C();
  v3 = v0;
  v77 = v4;
  *(_QWORD *)&v84 = sub_1000B9A80();
  v85 = *(_QWORD *)(v84 - 8);
  sub_1000262EC();
  __chkstk_darwin(v5);
  v7 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009A58C();
  sub_1000F0150();
  __chkstk_darwin(v8);
  sub_10000E478();
  v9 = (uint64_t)v0 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView;
  sub_10005FE28(v9, (uint64_t)&v91);
  v81 = sub_10016A480();
  v82 = v9;
  v80 = sub_10016A508();
  sub_1000088D0();
  v10 = sub_100062418();
  sub_10000B348();
  if (v10
    && (sub_10005FE28((uint64_t)v3 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_layout, (uint64_t)&v86),
        sub_10009C724(v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16)),
        v11 = sub_1000269EC(),
        v12 = dispatch thunk of UniversalControlDisplay.id.getter(v11),
        v13 = UniversalControlDisplayLayout.displayFrames(relativeTo:)(v12),
        sub_10009BE10(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8)),
        sub_10000F650(v10),
        v13))
  {
    v75 = v13;
  }
  else
  {
    type metadata accessor for CGRect(0);
    v15 = v14;
    v16 = sub_1000E0FF4();
    v75 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for UniversalControlDisplayID, v15, v16);
    swift_bridgeObjectRelease();
  }
  sub_10005FE28((uint64_t)v3 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_layout, (uint64_t)&v90);
  v17 = sub_10009C724(v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));
  v18 = UniversalControlDisplayLayout.displayFrames.getter(v17);
  sub_10009BE10(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_100141D00(v18);
  v20 = v19;
  v74 = 0;
  sub_10000E420();
  sub_10004F708(v20);
  v76 = v21;
  v22 = sub_1000055B0(&qword_1002B34B0);
  inited = swift_initStackObject(v22, &v89);
  *(_OWORD *)(inited + 16) = xmmword_10021DE60;
  *(_QWORD *)(inited + 32) = 0x657463656E6E6F63;
  *(_QWORD *)(inited + 40) = 0xE900000000000064;
  v24 = *(_QWORD *)(*(_QWORD *)((char *)v3 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_connectedLinks) + 16);
  v25 = (char *)_swiftEmptyArrayStorage;
  v78 = (_QWORD *)inited;
  *(_QWORD *)&v79 = v3;
  if (v24)
  {
    v92 = (char *)_swiftEmptyArrayStorage;
    sub_100040544();
    sub_10016AA4C();
    sub_10016A72C();
    do
    {
      v26 = sub_10016AC90();
      v28 = sub_10016AF1C(v26, v27);
      v25 = v7;
      v29 = UniversalControlLink.description.getter(v28);
      v31 = v30;
      sub_10009BE10((uint64_t)v7, *(uint64_t (**)(uint64_t, uint64_t))(v85 + 8));
      if ((sub_10016B024() & 1) == 0)
      {
        sub_10003B148();
        v25 = v92;
      }
      v32 = *((_QWORD *)v25 + 2);
      if (v32 >= *((_QWORD *)v25 + 3) >> 1)
      {
        sub_10003B148();
        v25 = v92;
      }
      *((_QWORD *)v25 + 2) = v32 + 1;
      v33 = &v25[16 * v32];
      *((_QWORD *)v33 + 4) = v29;
      *((_QWORD *)v33 + 5) = v31;
      v2 += v83;
      --v24;
    }
    while (v24);
    swift_bridgeObjectRelease();
    v34 = v78;
    v3 = (uint64_t (*)(uint64_t))v79;
  }
  else
  {
    v34 = (_QWORD *)inited;
  }
  v34[6] = v25;
  v34[7] = 0x636967616DLL;
  v34[8] = 0xE500000000000000;
  v35 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_magicLinks);
  v36 = *(_QWORD *)(v35 + 16);
  v37 = (char *)_swiftEmptyArrayStorage;
  if (v36)
  {
    v92 = (char *)_swiftEmptyArrayStorage;
    sub_100040544();
    sub_10016AA4C();
    sub_10016A72C();
    do
    {
      v38 = sub_10016AC90();
      v39 = v84;
      v40 = v3(v38);
      v37 = v7;
      UniversalControlLink.description.getter(v40);
      sub_10016AF78();
      (*(void (**)(char *, uint64_t))(v85 + 8))(v7, v39);
      if ((sub_10016B024() & 1) == 0)
      {
        sub_10003B148();
        v37 = v92;
      }
      v41 = *((_QWORD *)v37 + 2);
      if (v41 >= *((_QWORD *)v37 + 3) >> 1)
      {
        sub_10003B148();
        v37 = v92;
      }
      *((_QWORD *)v37 + 2) = v41 + 1;
      v42 = &v37[16 * v41];
      *((_QWORD *)v42 + 4) = v34;
      *((_QWORD *)v42 + 5) = v35;
      v2 += v83;
      --v36;
    }
    while (v36);
    swift_bridgeObjectRelease();
    v34 = v78;
    v3 = (uint64_t (*)(uint64_t))v79;
  }
  v34[9] = v37;
  v43 = sub_1000055B0((uint64_t *)&unk_1002AC160);
  v85 = Dictionary.init(dictionaryLiteral:)(v34, &type metadata for String, v43, &protocol witness table for String);
  v45 = v81;
  v44 = v82;
  v46 = v80;
  swift_retain();
  sub_100148100();
  v48 = v92;
  v47 = v93;
  v83 = v94;
  v84 = v95;
  v78 = v96;
  v72 = v98;
  v73 = v97;
  v70 = v100;
  v71 = v99;
  v49 = v74;
  sub_100141D00(v75);
  v51 = v50;
  sub_10000E4A0();
  sub_10004F708(v51);
  v53 = v52;
  if (*(_QWORD *)(v44 + *(int *)(v45 + 20) + *(int *)(v46 + 36)))
  {
    sub_100040544();
    sub_10016FC9C();
    v55 = v54;
    v57 = v56;
    sub_10000E568();
  }
  else
  {
    v57 = 0xE300000000000000;
    v55 = 7104878;
  }
  sub_10005FE28((uint64_t)v3 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_syncCoordinators, (uint64_t)&v88);
  v58 = sub_100040544();
  v59 = sub_100141FF0(v58);
  sub_10000E568();
  sub_10004F71C(v59);
  v61 = v60;
  v79 = *(_OWORD *)(v82 + 97);
  sub_10003B09C(*(_QWORD *)(v82 + *(int *)(v81 + 20) + *(int *)(v80 + 40)));
  sub_100057E2C();
  v63 = v62;
  sub_1000267C4();
  v87 = v63;
  sub_100036DCC(&v87);
  if (v49)
  {
    swift_release();
    __break(1u);
  }
  else
  {
    sub_1000267C4();
    v64 = v87;
    v65 = v77;
    v66 = v85;
    *v77 = v76;
    v65[1] = v66;
    v65[2] = v48;
    v65[3] = v47;
    v65[4] = v83;
    *(_OWORD *)(v65 + 5) = v84;
    v67 = v73;
    v65[7] = v78;
    v65[8] = v67;
    v68 = v71;
    v65[9] = v72;
    v65[10] = v68;
    v65[11] = v70;
    v65[12] = v53;
    v65[13] = v55;
    v65[14] = v57;
    v65[15] = v61;
    *((_OWORD *)v65 + 8) = v79;
    v65[18] = v64;
    sub_10000E4E0();
  }
}

void sub_100147210()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  __int128 v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  sub_1000E4A0C();
  v2 = v1;
  v3 = v0;
  v4 = v1 + 56;
  v5 = 1 << *(_BYTE *)(v1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(v1 + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  HIDAccelerationTable.entry.getter(v0, v1);
  v9 = 0;
  while (v7)
  {
    v10 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v11 = v10 | (v9 << 6);
LABEL_24:
    v15 = *(_QWORD *)(v2 + 48);
    v16 = 17 * v11;
    if (*(unsigned __int8 *)(v15 + v16 + 16) == v3)
    {
      v26 = *(_OWORD *)(v15 + v16);
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
      {
        sub_10016B0E0();
        sub_100058704();
      }
      v18 = _swiftEmptyArrayStorage[2];
      v17 = _swiftEmptyArrayStorage[3];
      if (v18 >= v17 >> 1)
      {
        sub_100060294(v17);
        sub_100058704();
      }
      _swiftEmptyArrayStorage[2] = v18 + 1;
      v19 = (char *)_swiftEmptyArrayStorage + 17 * v18;
      *((_OWORD *)v19 + 2) = v26;
      v19[48] = v3;
    }
  }
  v12 = v9 + 1;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
LABEL_37:
    __break(1u);
    return;
  }
  if (v12 >= v8)
    goto LABEL_30;
  v13 = *(_QWORD *)(v4 + 8 * v12);
  ++v9;
  if (v13)
    goto LABEL_23;
  v9 = v12 + 1;
  if (v12 + 1 >= v8)
    goto LABEL_30;
  v13 = *(_QWORD *)(v4 + 8 * v9);
  if (v13)
    goto LABEL_23;
  v9 = v12 + 2;
  if (v12 + 2 >= v8)
    goto LABEL_30;
  v13 = *(_QWORD *)(v4 + 8 * v9);
  if (v13)
    goto LABEL_23;
  v9 = v12 + 3;
  if (v12 + 3 >= v8)
    goto LABEL_30;
  v13 = *(_QWORD *)(v4 + 8 * v9);
  if (v13)
    goto LABEL_23;
  v9 = v12 + 4;
  if (v12 + 4 >= v8)
    goto LABEL_30;
  v13 = *(_QWORD *)(v4 + 8 * v9);
  if (v13)
  {
LABEL_23:
    v7 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v9 << 6);
    goto LABEL_24;
  }
  v14 = v12 + 5;
  if (v14 < v8)
  {
    v13 = *(_QWORD *)(v4 + 8 * v14);
    if (!v13)
    {
      while (1)
      {
        v9 = v14 + 1;
        if (__OFADD__(v14, 1))
          goto LABEL_37;
        if (v9 >= v8)
          goto LABEL_30;
        v13 = *(_QWORD *)(v4 + 8 * v9);
        ++v14;
        if (v13)
          goto LABEL_23;
      }
    }
    v9 = v14;
    goto LABEL_23;
  }
LABEL_30:
  sub_1000269A0();
  v20 = _swiftEmptyArrayStorage[2];
  if (v20)
  {
    sub_1000586CC();
    v21 = _swiftEmptyArrayStorage[2];
    v22 = 32;
    do
    {
      v23 = *(_OWORD *)((char *)_swiftEmptyArrayStorage + v22);
      v24 = _swiftEmptyArrayStorage[3];
      if (v21 >= v24 >> 1)
      {
        sub_100060294(v24);
        v27 = v25;
        sub_1000586CC();
        v23 = v27;
      }
      _swiftEmptyArrayStorage[2] = v21 + 1;
      *(_OWORD *)&_swiftEmptyArrayStorage[2 * v21 + 4] = v23;
      v22 += 17;
      ++v21;
      --v20;
    }
    while (v20);
  }
  sub_10002645C();
  sub_1000088AC();
  sub_1000DF7F4();
}

double sub_1001474A4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  double result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  os_log_type_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  os_log_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  os_log_t v65;
  int v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v3 = v2;
  v6 = (int *)type metadata accessor for ConnectedDevices(0);
  v7 = __chkstk_darwin(v6);
  v73 = (uint64_t)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v10 = (uint64_t *)((char *)&v62 - v9);
  *(_QWORD *)&v74 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v74 - 8);
  __chkstk_darwin(v74);
  v13 = (char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain(a1);
  sub_100057E2C();
  v15 = v14;
  swift_bridgeObjectRelease();
  v77 = v15;
  swift_retain();
  sub_100036DCC(&v77);
  swift_release();
  v16 = v77;
  v17 = (uint64_t *)(v3 + v6[8]);
  v18 = v17[1];
  swift_bridgeObjectRetain(v18);
  LOBYTE(a1) = sub_100071340(v16, v18);
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    sub_100022838(v3, a2, type metadata accessor for ConnectedDevices);
    swift_release();
  }
  else
  {
    v72 = a2;
    v20 = *v17;
    v21 = v11;
    v22 = *(_QWORD *)(v3 + 16);
    v23 = *(_QWORD *)(v3 + 24);
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v20);
    v24 = sub_1001450FC(v22, v23, v16, v20);
    v26 = v25;
    swift_release();
    swift_bridgeObjectRelease();
    v27 = swift_bridgeObjectRelease();
    v69 = v3 + v6[6];
    v70 = v21;
    v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16);
    v29 = v13;
    v30 = v74;
    v71 = v28;
    ((void (*)(char *, __n128))v28)(v13, v27);
    sub_100022838(v3, (uint64_t)v10, type metadata accessor for ConnectedDevices);
    v31 = v73;
    sub_100022838(v3, v73, type metadata accessor for ConnectedDevices);
    swift_bridgeObjectRetain_n(v24, 2);
    v32 = swift_bridgeObjectRetain_n(v26, 2);
    v33 = Logger.logObject.getter(v32);
    v35 = static os_log_type_t.default.getter(v33, v34);
    v36 = v35;
    if (os_log_type_enabled(v33, v35))
    {
      v37 = swift_slowAlloc(32, -1);
      v67 = swift_slowAlloc(96, -1);
      v77 = v67;
      *(_DWORD *)v37 = 136446722;
      v66 = v36;
      v65 = v33;
      v68 = v29;
      v39 = *v10;
      v38 = v10[1];
      swift_bridgeObjectRetain(v38);
      v75 = sub_100006FCC(v39, v38, &v77);
      v64 = &v76;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v37 + 4);
      swift_bridgeObjectRelease();
      sub_1000255F0((uint64_t)v10, type metadata accessor for ConnectedDevices);
      *(_WORD *)(v37 + 12) = 2082;
      v63 = v37 + 14;
      v40 = (_QWORD *)(v31 + v6[8]);
      v41 = v40[1];
      swift_bridgeObjectRetain(*v40);
      swift_bridgeObjectRetain(v41);
      sub_10016F6B8();
      v43 = v42;
      v45 = v44;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v75 = sub_100006FCC(v43, v45, &v77);
      v46 = v64;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v64, v63);
      swift_bridgeObjectRelease();
      sub_1000255F0(v31, type metadata accessor for ConnectedDevices);
      *(_WORD *)(v37 + 22) = 2082;
      swift_bridgeObjectRetain(v24);
      swift_bridgeObjectRetain(v26);
      sub_10016F6B8();
      v48 = v47;
      v50 = v49;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v75 = sub_100006FCC(v48, v50, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v46, v37 + 24);
      swift_bridgeObjectRelease_n(v26, 2);
      swift_bridgeObjectRelease_n(v24, 2);
      swift_bridgeObjectRelease();
      v51 = v65;
      _os_log_impl((void *)&_mh_execute_header, v65, (os_log_type_t)v66, "%{public}s: Update message: %{public}s -> %{public}s", (uint8_t *)v37, 0x20u);
      v52 = v67;
      swift_arrayDestroy(v67, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v52, -1, -1);
      v53 = v37;
      v30 = v74;
      swift_slowDealloc(v53, -1, -1);

      (*(void (**)(char *, uint64_t))(v70 + 8))(v68, v30);
    }
    else
    {
      sub_1000255F0((uint64_t)v10, type metadata accessor for ConnectedDevices);
      sub_1000255F0(v31, type metadata accessor for ConnectedDevices);

      swift_bridgeObjectRelease_n(v26, 2);
      swift_bridgeObjectRelease_n(v24, 2);
      (*(void (**)(char *, uint64_t))(v70 + 8))(v29, v30);
    }
    v54 = sub_1000724C4(*(_QWORD *)(v3 + v6[7]), v24, v26, 0);
    v56 = v55;
    v58 = v57;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v59 = v72;
    v60 = v72 + v6[6];
    v74 = *(_OWORD *)(v3 + 16);
    v71(v60, v69, v30);
    *(_QWORD *)v59 = 0x697665446E6E6F43;
    *(_QWORD *)(v59 + 8) = 0xEB00000000736563;
    result = *(double *)&v74;
    *(_OWORD *)(v59 + 16) = v74;
    *(_QWORD *)(v59 + v6[7]) = v58;
    v61 = (uint64_t *)(v59 + v6[8]);
    *v61 = v54;
    v61[1] = v56;
  }
  return result;
}

double sub_100147A30@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  os_log_type_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  os_log_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  double result;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  os_log_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  char v61[16];
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64[2];
  uint64_t v65;

  v3 = v2;
  v6 = (int *)type metadata accessor for ConnectedDevices(0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (uint64_t *)((char *)&v52 - v10);
  v12 = type metadata accessor for Logger(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  *(_QWORD *)&v60 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = a1;
  v15 = *(_QWORD *)(v3 + v6[7]);
  v62 = &v65;
  swift_bridgeObjectRetain(v15);
  sub_1001434FC((uint64_t (*)(_BYTE *))sub_100167FC4, (uint64_t)v61, v15);
  v17 = v16;
  if (*(_QWORD *)(v16 + 16) != *(_QWORD *)(v15 + 16))
  {
    v18 = v3 + v6[6];
    v59 = v13;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v13 + 16))(v60, v18, v12);
    sub_100022838(v3, (uint64_t)v11, type metadata accessor for ConnectedDevices);
    v19 = v65;
    sub_100022838(v3, (uint64_t)v9, type metadata accessor for ConnectedDevices);
    swift_bridgeObjectRetain_n(v19, 2);
    v20 = swift_bridgeObjectRetain_n(v17, 2);
    v21 = Logger.logObject.getter(v20);
    v23 = static os_log_type_t.default.getter(v21, v22);
    v24 = v23;
    if (os_log_type_enabled(v21, v23))
    {
      v25 = swift_slowAlloc(42, -1);
      v56 = v24;
      v26 = v25;
      v57 = swift_slowAlloc(128, -1);
      v64[0] = v57;
      *(_DWORD *)v26 = 136446978;
      v53 = v26 + 4;
      v58 = v12;
      v55 = v21;
      v28 = *v11;
      v27 = v11[1];
      swift_bridgeObjectRetain(v27);
      v63 = sub_100006FCC(v28, v27, v64);
      v54 = v64;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, v64, v53);
      swift_bridgeObjectRelease();
      sub_1000255F0((uint64_t)v11, type metadata accessor for ConnectedDevices);
      *(_WORD *)(v26 + 12) = 2082;
      v29 = sub_100061BB4(v19);
      v63 = sub_100006FCC(v29, v30, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, v64, v26 + 14);
      swift_bridgeObjectRelease_n(v19, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v26 + 22) = 2082;
      swift_bridgeObjectRetain(*(_QWORD *)&v9[v6[7]]);
      v32 = Array.description.getter(v31, &type metadata for ConnectionMessage);
      v34 = v33;
      swift_bridgeObjectRelease();
      v63 = sub_100006FCC(v32, v34, v64);
      v35 = v54;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, v54, v26 + 24);
      swift_bridgeObjectRelease();
      sub_1000255F0((uint64_t)v9, type metadata accessor for ConnectedDevices);
      *(_WORD *)(v26 + 32) = 2082;
      swift_bridgeObjectRetain(v17);
      v37 = Array.description.getter(v36, &type metadata for ConnectionMessage);
      v39 = v38;
      swift_bridgeObjectRelease();
      v40 = v37;
      v12 = v58;
      v63 = sub_100006FCC(v40, v39, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, v35, v26 + 34);
      swift_bridgeObjectRelease_n(v17, 2);
      swift_bridgeObjectRelease();
      v41 = v55;
      _os_log_impl((void *)&_mh_execute_header, v55, (os_log_type_t)v56, "%{public}s: Clearing pending messages from %{public}s: %{public}s -> %{public}s", (uint8_t *)v26, 0x2Au);
      v42 = v57;
      swift_arrayDestroy(v57, 4, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v42, -1, -1);
      swift_slowDealloc(v26, -1, -1);

    }
    else
    {
      sub_1000255F0((uint64_t)v11, type metadata accessor for ConnectedDevices);
      swift_bridgeObjectRelease_n(v19, 2);
      sub_1000255F0((uint64_t)v9, type metadata accessor for ConnectedDevices);

      swift_bridgeObjectRelease_n(v17, 2);
    }
    v13 = v59;
    (*(void (**)(_QWORD, uint64_t))(v59 + 8))(v60, v12);
  }
  v43 = v6[6];
  v44 = v3 + v43;
  v45 = a2 + v43;
  v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
  v60 = *(_OWORD *)(v3 + 16);
  v46(v45, v44, v12);
  v47 = (uint64_t *)(v3 + v6[8]);
  v48 = *v47;
  v49 = v47[1];
  *(_QWORD *)a2 = 0x697665446E6E6F43;
  *(_QWORD *)(a2 + 8) = 0xEB00000000736563;
  *(_OWORD *)(a2 + 16) = v60;
  *(_QWORD *)(a2 + v6[7]) = v17;
  v50 = (_QWORD *)(a2 + v6[8]);
  *v50 = v48;
  v50[1] = v49;
  swift_bridgeObjectRetain(v48);
  *(_QWORD *)&result = swift_bridgeObjectRetain(v49).n128_u64[0];
  return result;
}

BOOL sub_100147EE0(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v5;

  sub_10018F420(a1, a2, a5);
  return (v5 & 1) == 0;
}

void sub_100147F10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  CGRect v20;
  char v21;
  char v22;
  CGRect v23;
  CGRect v24;

  sub_10016A490();
  v19 = *(_QWORD *)(sub_10016AF6C() - 8);
  sub_1000262EC();
  __chkstk_darwin(v2);
  sub_10016A62C(v3, v18);
  sub_10016A75C();
  __chkstk_darwin(v4);
  sub_10016AA74();
  v6 = __chkstk_darwin(v5);
  v7 = sub_10016A978(v6);
  sub_10016AD40(v7);
  sub_10016A698();
  sub_10016A830();
  sub_10016AB3C(v8, v9, (uint64_t *)&unk_1002B2610);
  if ((v22 & 1) == 0)
  {
    v11 = sub_10016AB60(v10);
    sub_10016AD40(v11);
    sub_10016A698();
    sub_10016A814();
    sub_10016AB30(v12, v13, (uint64_t *)&unk_1002B2610);
    if ((v21 & 1) == 0)
    {
      CGRectInset(v20, -1.0, -1.0);
      sub_10016AEB0();
      v23.origin.x = sub_100095540();
      CGRectIntersection(v23, v24);
    }
    v15 = sub_10016AD58(v14);
    sub_10016AA60(v15);
    v16 = sub_10016A754(v1);
    v17 = UniversalControlAnchor.edge.getter(v16);
    sub_1000EFF78(v0, *(uint64_t (**)(uint64_t, _QWORD))(v19 + 8));
    __asm { BR              X10 }
  }
  sub_10016A5AC();
}

void sub_100148100()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  __int128 v36;
  _QWORD *v37;

  sub_10002626C();
  v3 = v2;
  v29 = *(_QWORD *)(type metadata accessor for UTType(0) - 8);
  sub_1000262EC();
  __chkstk_darwin(v4);
  sub_10000E5DC();
  v28 = sub_10016B014(v5);
  v7 = v6;
  dispatch thunk of UniversalControlDevice.displayName.getter();
  sub_10016AF78();
  v9 = dispatch thunk of UniversalControlDevice.displays.getter(v8);
  v10 = dispatch thunk of UniversalControlDevice.inputDevices.getter(v9);
  if ((unint64_t)v10 >> 62)
    goto LABEL_17;
  for (i = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10); ; i = _CocoaArrayWrapper.endIndex.getter(v20))
  {
    v33 = v0;
    v34 = v3;
    v31 = v9;
    v32 = v1;
    v30 = v7;
    if (!i)
      break;
    v37 = _swiftEmptyArrayStorage;
    sub_10003B17C();
    if (i < 0)
    {
      __break(1u);
      return;
    }
    v12 = 0;
    v0 = 0;
    v13 = v37;
    v35 = v10 & 0xC000000000000001;
    v7 = v10;
    while (i != v12)
    {
      if (v35)
        specialized _ArrayBuffer._getElementSlowPath(_:)(v12, v10);
      else
        sub_1000088D0();
      sub_10015B89C(&v36);
      sub_10000B348();
      v3 = *((_QWORD *)&v36 + 1);
      v1 = v36;
      v37 = v13;
      v9 = v13[2];
      v14 = v13[3];
      if (v9 >= v14 >> 1)
      {
        sub_100060294(v14);
        sub_10003B148();
        v13 = v37;
      }
      ++v12;
      v13[2] = v9 + 1;
      v15 = &v13[2 * v9];
      v15[4] = v1;
      v15[5] = v3;
      v10 = v7;
      if (i == v12)
      {
        sub_10002D860();
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_17:
    if (v10 < 0)
      v20 = v10;
    else
      v20 = v10 & 0xFFFFFFFFFFFFFF8;
  }
  sub_10002D860();
  v13 = _swiftEmptyArrayStorage;
LABEL_15:
  sub_100101920(v30 >> 16);
  sub_10016AF10(v30 >> 8);
  sub_10016AC24(HIWORD(v28));
  sub_10016AE78(v28 >> 40);
  v27 = dispatch thunk of UniversalControlDevice.model.getter();
  v26 = v16;
  v17 = dispatch thunk of UniversalControlDevice.typeIdentifier.getter();
  v18 = UTType.identifier.getter(v17);
  v23 = v19;
  sub_100041108();
  sub_10016B008(v29);
  *(_DWORD *)v34 = v28;
  *(_BYTE *)(v34 + 4) = BYTE4(v28);
  *(_BYTE *)(v34 + 5) = v21;
  *(_BYTE *)(v34 + 6) = v22;
  *(_BYTE *)(v34 + 7) = HIBYTE(v28);
  *(_BYTE *)(v34 + 8) = v30;
  *(_BYTE *)(v34 + 9) = v24;
  *(_BYTE *)(v34 + 10) = v25;
  *(_DWORD *)(v34 + 11) = *(_DWORD *)((char *)&v30 + 3);
  *(_BYTE *)(v34 + 15) = HIBYTE(v30);
  *(_QWORD *)(v34 + 16) = v33;
  *(_QWORD *)(v34 + 24) = v32;
  *(_QWORD *)(v34 + 32) = v31;
  *(_QWORD *)(v34 + 40) = v13;
  *(_QWORD *)(v34 + 48) = v27;
  *(_QWORD *)(v34 + 56) = v26;
  *(_QWORD *)(v34 + 64) = v18;
  *(_QWORD *)(v34 + 72) = v23;
  sub_10000E4E0();
}

void sub_1001483FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  CGRect v20;
  char v21;
  char v22;
  CGRect v23;
  CGRect v24;

  sub_10016A490();
  v19 = *(_QWORD *)(sub_10016AF6C() - 8);
  sub_1000262EC();
  __chkstk_darwin(v2);
  sub_10016A62C(v3, v18);
  sub_10016A75C();
  __chkstk_darwin(v4);
  sub_10016AA74();
  v6 = __chkstk_darwin(v5);
  v7 = sub_10016A978(v6);
  sub_10016AD40(v7);
  sub_10016A698();
  sub_10016A830();
  sub_10016AB3C(v8, v9, (uint64_t *)&unk_1002B2610);
  if ((v22 & 1) == 0)
  {
    v11 = sub_10016AB60(v10);
    sub_10016AD40(v11);
    sub_10016A698();
    sub_10016A814();
    sub_10016AB30(v12, v13, (uint64_t *)&unk_1002B2610);
    if ((v21 & 1) == 0)
    {
      CGRectInset(v20, -1.0, -1.0);
      sub_10016AEB0();
      v23.origin.x = sub_10016AA00();
      CGRectIntersection(v23, v24);
    }
    v15 = sub_10016AD58(v14);
    sub_10016AA60(v15);
    v16 = sub_10016A754(v1);
    v17 = UniversalControlAnchor.edge.getter(v16);
    sub_1000EFF78(v0, *(uint64_t (**)(uint64_t, _QWORD))(v19 + 8));
    __asm { BR              X10 }
  }
  sub_10016A5AC();
}

void sub_100148650()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;

  sub_10002626C();
  v3 = v0;
  v5 = v4;
  v7 = v6;
  v30 = sub_1000B9A80();
  sub_1000F0150();
  __chkstk_darwin(v8);
  sub_100065E48();
  v9 = *(_QWORD *)(v3 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_connectedLinks);
  v10 = *(_QWORD *)(v9 + 16);
  if (v10)
  {
    v28 = v5;
    v32 = _swiftEmptyArrayStorage;
    sub_10002679C();
    sub_1000432E0();
    sub_100058800();
    v11 = _swiftEmptyArrayStorage;
    sub_10016AFFC();
    v27 = v9;
    v29 = v12;
    v13 = v9 + v12;
    sub_10005FE28(v3 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView, (uint64_t)&v31);
    v14 = *(_QWORD *)(v1 + 72);
    sub_10016A480();
    sub_10016A508();
    do
    {
      v15 = v1;
      v16 = sub_1000088D0();
      v17 = dispatch thunk of UniversalControlDevice.id.getter(v16);
      v19 = v18;
      sub_10000B348();
      UniversalControlLink.normalized(for:)(v17, v19);
      v32 = v11;
      v21 = v11[2];
      v20 = v11[3];
      if (v21 >= v20 >> 1)
      {
        sub_100060294(v20);
        sub_100058800();
        v11 = v32;
      }
      v11[2] = v21 + 1;
      v22 = (char *)v11 + v29 + v21 * v14;
      v1 = v15;
      (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v22, v2, v30);
      v13 += v14;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease(v27);
    sub_1000269A0();
    v5 = v28;
  }
  sub_10002679C();
  sub_10016AB54();
  sub_100143798(v23, v24, v25, v5);
  sub_100143C0C(v26, (uint64_t (*)(_QWORD))&type metadata accessor for UniversalControlLink, v7);
  sub_10000E410();
  sub_10000E4E0();
}

BOOL sub_100148814(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t, __n128);
  __n128 v16;
  int v17;
  BOOL v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t, __n128);
  uint64_t v27;
  uint64_t (*v28)(char *);

  v4 = v3;
  v27 = a2;
  v28 = a1;
  v6 = type metadata accessor for UniversalControlLink(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000055B0((uint64_t *)&unk_1002AC150);
  __chkstk_darwin(v10);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a3 + 16);
  v24 = a3;
  if (v13)
  {
    v14 = a3 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v15 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16);
    v25 = *(_QWORD *)(v7 + 72);
    v26 = v15;
    v16 = swift_bridgeObjectRetain(a3);
    while (1)
    {
      v26(v12, v14, v6, v16);
      _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v12, 0, 1, v6);
      v17 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v12, 1, v6);
      v18 = v17 != 1;
      if (v17 == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v12, v6);
      v19 = v28(v9);
      v20 = v7;
      if (v4)
      {
        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
        swift_bridgeObjectRelease(v24);
        return v18;
      }
      v21 = v19;
      v22 = v20;
      (*(void (**)(char *, uint64_t))(v20 + 8))(v9, v6);
      if ((v21 & 1) != 0)
        break;
      v14 += v25;
      --v13;
      v7 = v22;
      v4 = 0;
      if (!v13)
        goto LABEL_9;
    }
  }
  else
  {
    swift_bridgeObjectRetain(a3);
LABEL_9:
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v12, 1, 1, v6);
    v18 = 0;
  }
  swift_bridgeObjectRelease(v24);
  return v18;
}

uint64_t sub_100148A14(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  uint64_t v14;
  uint64_t v16;

  v4 = v3;
  if ((unint64_t)a3 >> 62)
    goto LABEL_16;
  v6 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a3);
  for (; v6; v6 = _CocoaArrayWrapper.endIndex.getter(v14))
  {
    v7 = 4;
    while (1)
    {
      if ((a3 & 0xC000000000000001) != 0)
      {
        v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, a3);
      }
      else
      {
        v8 = *(_QWORD *)(a3 + 8 * v7);
        swift_retain(v8);
      }
      v9 = v7 - 3;
      if (__OFADD__(v7 - 4, 1))
        break;
      v16 = v8;
      v10 = a1(&v16);
      if (v4)
      {
        swift_bridgeObjectRelease(a3);
        swift_release(v8);
        return v12 & 1;
      }
      v11 = v10;
      swift_release(v8);
      if ((v11 & 1) != 0)
      {
        swift_bridgeObjectRelease(a3);
        v12 = 1;
        return v12 & 1;
      }
      ++v7;
      if (v9 == v6)
        goto LABEL_11;
    }
    __break(1u);
LABEL_16:
    if (a3 < 0)
      v14 = a3;
    else
      v14 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
  }
LABEL_11:
  swift_bridgeObjectRelease(a3);
  v12 = 0;
  return v12 & 1;
}

uint64_t sub_100148B50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  os_log_type_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  BOOL v83;
  uint64_t (*v84)(uint64_t, uint64_t);
  uint64_t v85;
  uint64_t v86;
  void *v87;
  os_log_type_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107[3];
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;

  sub_10002626C();
  v110 = v5;
  v111 = v6;
  sub_10016B0EC();
  v7 = sub_10000E440();
  v104 = *(_QWORD *)(v7 - 8);
  v105 = v7;
  sub_1000262EC();
  __chkstk_darwin(v8);
  sub_10000E5DC();
  v103 = v9;
  sub_1000055B0(&qword_1002B3330);
  sub_1000262EC();
  __chkstk_darwin(v10);
  sub_100065E48();
  v102 = type metadata accessor for UniversalControlConfiguration.GradedLink(0);
  sub_10016A76C();
  __chkstk_darwin(v11);
  sub_10000E5DC();
  v99 = v12;
  sub_10016A7F0();
  sub_10016A75C();
  __chkstk_darwin(v13);
  sub_1000601B4();
  v15 = UniversalControlLink.endpoint2.getter(v14);
  v16 = UniversalControlLink.Endpoint.device.getter(v15);
  v18 = v17;
  sub_10016AEF0(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  v19 = *(_QWORD *)(v2 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_devices);
  v100 = v3;
  v101 = v2;
  if ((unint64_t)v19 >> 62)
    goto LABEL_38;
  v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
  sub_10003B09C(v19);
  if (!v20)
  {
LABEL_14:
    sub_100026AF4(v19);
    if (qword_1002A98F8 != -1)
      swift_once(&qword_1002A98F8, sub_10014C200);
    v32 = sub_10000F6E4();
    v33 = sub_10005FE9C(v32, (uint64_t)qword_1002B2A80);
    v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)sub_10000797C(12);
      v36 = sub_10000797C(32);
      v107[0] = v36;
      *(_DWORD *)v35 = 136446210;
      v37 = UUID.init(uuid:)(v16, v16 >> 8, v16 >> 16, v16 >> 24, HIDWORD(v16), v16 >> 40);
      UUID.uuidString.getter(v37);
      v39 = v38;
      (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v103, v105);
      v40 = sub_10016B12C();
      sub_1000599D0(v40, v41, v39);
      sub_1000602C0();
      v42 = sub_10000E420();
      v108 = sub_10016B150(v42, v43, v107);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, &v109, v35 + 4, v35 + 12);
      sub_1000267C4();
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "IDS %{public}s: Target Reply: Reject (Incoming Peer Not Visible)", v35, 0xCu);
      sub_10016A7D4(v44, v45, (uint64_t)&type metadata for Any + 8);
      sub_100007958(v36);
      sub_100007958((uint64_t)v35);
    }

    return 0;
  }
  while (1)
  {
    if ((v19 & 0xC000000000000001) != 0)
    {
      v22 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v19);
      v21 = v22;
    }
    else
    {
      v21 = *(_QWORD *)(v19 + 32);
      v22 = sub_10002D790();
    }
    v23 = dispatch thunk of UniversalControlDevice.id.getter(v22);
    if (!sub_10016AEA8(v23, v24, v16))
      break;
    sub_10002645C();
    if (v20 != 1)
    {
      v25 = 5;
      while (1)
      {
        if ((v19 & 0xC000000000000001) != 0)
        {
          v26 = sub_100141400();
          v28 = specialized _ArrayBuffer._getElementSlowPath(_:)(v26, v27);
          v21 = v28;
        }
        else
        {
          v21 = *(_QWORD *)(v19 + 8 * v25);
          v28 = sub_10002D790();
        }
        v29 = v25 - 3;
        if (__OFADD__(v25 - 4, 1))
          break;
        v30 = dispatch thunk of UniversalControlDevice.id.getter(v28);
        if (!sub_10016AEA8(v30, v31, v16))
          goto LABEL_20;
        sub_10002645C();
        ++v25;
        if (v29 == v20)
          goto LABEL_14;
      }
      __break(1u);
LABEL_38:
      v98 = v19 < 0 ? v19 : v19 & 0xFFFFFFFFFFFFFF8;
      sub_10003B09C(v19);
      v20 = _CocoaArrayWrapper.endIndex.getter(v98);
      if (v20)
        continue;
    }
    goto LABEL_14;
  }
LABEL_20:
  v106 = v4;
  sub_100026AF4(v19);
  type metadata accessor for UniversalControlDisplaySolver0(0);
  sub_1000055B0((uint64_t *)&unk_1002AC8C0);
  sub_1000B9A80();
  sub_10016B098();
  v49 = v48 & ~v47;
  v52 = sub_10016B078(v51, v49 + v50);
  *(_OWORD *)(v52 + 16) = xmmword_10021BBA0;
  sub_1000C2764(v52 + v49, v0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 16));
  v53 = sub_1000055B0(&qword_1002AC0E0);
  v54 = sub_1000088D8(v53, 48);
  *(_OWORD *)(v54 + 16) = xmmword_100228340;
  v55 = v101 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView;
  sub_10005FE28(v101 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView, (uint64_t)v107);
  v56 = v55 + *(int *)(sub_10016A480() + 20);
  v57 = sub_10016A508();
  v58 = *(_QWORD *)(v56 + *(int *)(v57 + 28));
  *(_QWORD *)(v54 + 32) = v58;
  *(_QWORD *)(v54 + 40) = v21;
  v108 = v54;
  specialized Array._endMutation()(v57);
  swift_retain(v58);
  sub_10002D790();
  v59 = sub_10003B038();
  sub_10016AEDC((uint64_t)&unk_1002B3308);
  ((void (*)(uint64_t, uint64_t *, uint64_t, uint64_t))UniversalControlDisplaySolver0.__allocating_init<A>(links:devices:))(v52, &v108, v59, v60);
  v61 = dispatch thunk of UniversalControlDisplaySolver0.solve()();
  sub_100143C0C(v61, (uint64_t (*)(_QWORD))&type metadata accessor for UniversalControlConfiguration.GradedLink, v100);
  sub_10000E420();
  v62 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v100, 1, v102);
  if ((_DWORD)v62 == 1)
  {
    sub_10016AF08(v62, &qword_1002B3330);
    if (qword_1002A98F8 != -1)
      swift_once(&qword_1002A98F8, sub_10014C200);
    v63 = sub_10000F6E4();
    sub_100006FB4(v63, (uint64_t)qword_1002B2A80);
    v64 = sub_1000404AC(v21);
    v65 = (void *)Logger.logObject.getter(v64);
    v66 = static os_log_type_t.error.getter();
    if (sub_10000F720(v66))
    {
      v67 = sub_10000797C(12);
      v68 = sub_10000797C(32);
      v108 = v68;
      sub_10016AB74(4.8751e-34);
      v71 = sub_1001243E4(v69, v70);
      sub_10016A88C(v71);
      sub_10000F650(v21);
      sub_10000E420();
      sub_10000F6EC((void *)&_mh_execute_header, v72, v73, "IDS %{public}s: Target Reply: Reject (Incoming Link Does Not Solve0)");
      sub_10016A7D4(v74, v75, (uint64_t)&type metadata for Any + 8);
      sub_100007958(v68);
      sub_100007958(v67);
      sub_10002645C();

      sub_10000B364();
    }
    else
    {

      sub_10000B364();
      sub_10016AF98();
    }
    return 0;
  }
  sub_1000B2170(v99, v100, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v106 + 32));
  v108 = *(_QWORD *)(v101 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_connectedLinks);
  swift_bridgeObjectRetain(v108);
  v76 = sub_1000088D0();
  dispatch thunk of UniversalControlDevice.id.getter(v76);
  sub_10016AF78();
  v77 = sub_10000B348();
  __chkstk_darwin(v77);
  sub_10003B038();
  sub_10016AEDC((uint64_t)&unk_1002B3340);
  v78 = sub_100141158();
  v79 = ((uint64_t (*)(uint64_t))Collection<>.links(for:where:))(v78);
  v80 = swift_bridgeObjectRelease(v108);
  if (*(_QWORD *)(v79 + 16))
  {
    __chkstk_darwin(v80);
    sub_10016AD68();
    *(_QWORD *)(v81 - 16) = v99;
    v83 = sub_100148814((uint64_t (*)(char *))sub_100167E44, v82, v79);
    sub_10000E420();
    if (!v83)
    {
      if (qword_1002A98F8 != -1)
        swift_once(&qword_1002A98F8, sub_10014C200);
      v85 = sub_10000F6E4();
      sub_100006FB4(v85, (uint64_t)qword_1002B2A80);
      v86 = sub_1000404AC(v21);
      v87 = (void *)Logger.logObject.getter(v86);
      v88 = static os_log_type_t.error.getter();
      if (sub_10000F720(v88))
      {
        v89 = sub_10000797C(12);
        v90 = sub_10000797C(32);
        v108 = v90;
        sub_10016AB74(4.8751e-34);
        v93 = sub_1001243E4(v91, v92);
        sub_10016A88C(v93);
        sub_10000F650(v21);
        sub_10000E420();
        sub_10000F6EC((void *)&_mh_execute_header, v94, v95, "IDS %{public}s: Target Reply: Reject (Incoming Link Collision)");
        sub_10016A7D4(v96, v97, (uint64_t)&type metadata for Any + 8);
        sub_100007958(v90);
        sub_100007958(v89);
        sub_10002645C();

        sub_10016AD28();
      }
      else
      {

        sub_10016AD28();
        sub_10016AF98();
      }
      sub_10016AFD0(*(uint64_t (**)(uint64_t, uint64_t))(v106 + 8));
      return 0;
    }
    sub_10016AD28();
    sub_10002645C();
    v84 = *(uint64_t (**)(uint64_t, uint64_t))(v106 + 8);
  }
  else
  {
    sub_10000E420();
    sub_10016AD28();
    sub_10002645C();
    v84 = *(uint64_t (**)(uint64_t, uint64_t))(v106 + 8);
  }
  sub_10016AFD0(v84);
  return 1;
}

uint8_t *sub_1001493AC()
{
  uint64_t v0;
  uint8_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  NSObject *v59;
  uint64_t v60;
  os_log_type_t v61;
  _BOOL4 v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint8_t *v74;
  uint64_t v75;
  uint8_t *v76;
  uint64_t v77;
  uint8_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  NSObject *v82;
  uint64_t v83;
  os_log_type_t v84;
  uint64_t v85;
  uint8_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(uint64_t, uint64_t);
  uint64_t v96;
  uint8_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t (*v106)(char *);
  uint64_t v107;
  uint64_t v108;
  _BOOL8 v109;
  uint64_t v110;
  uint64_t v111;
  NSObject *v112;
  uint64_t v113;
  os_log_type_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t (*v122)(uint64_t, uint64_t, _QWORD);
  uint64_t v123;
  uint64_t v124;
  void (*v125)(_QWORD);
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  NSObject *v147;
  uint64_t v148;
  os_log_type_t v149;
  unint64_t v150;
  char v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t (*v163)(uint64_t, _QWORD);
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t (*v171)(uint64_t, uint64_t, uint64_t);
  uint64_t v172;
  void (*v173)(uint64_t);
  uint64_t v174;
  uint64_t v175;
  NSObject *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint8_t *v180;
  char v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t (*v184)(uint64_t, uint64_t, uint64_t);
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  NSObject *v188;
  uint64_t v189;
  os_log_type_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  os_log_type_t v200;
  _BOOL4 v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  const char *v207;
  uint64_t v208;
  uint64_t v209;
  os_log_type_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  char v221;
  char v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  id v231;
  uint64_t v232;
  int v233;
  uint64_t v234;
  uint64_t v235;
  id v236;
  int v237;
  int v238;
  int v239;
  int v240;
  uint64_t v241;
  void (*v242)(uint64_t, uint64_t);
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  char *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint8_t *v260;
  void (*v261)(_QWORD);
  uint64_t v262;
  unint64_t v263;
  unint64_t v264;
  unint64_t v265;
  NSObject *v266;
  unint64_t v267;
  unint64_t v268;
  uint64_t v269;
  uint8_t *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint8_t *v275;
  uint64_t v276;
  uint64_t v277;
  void (*v278)(uint64_t, uint64_t);
  uint64_t v279;
  uint64_t v280;
  uint64_t (*v281)(uint64_t, uint64_t, uint64_t);
  uint64_t v282;
  char *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292[3];
  uint64_t v293;
  _QWORD v294[6];
  uint64_t (*v295)(uint64_t, uint64_t, uint64_t);
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;

  sub_10003AFC4();
  v297 = v3;
  v298 = v4;
  v275 = v1;
  v279 = v0;
  v267 = v5;
  v268 = v6;
  v8 = v7;
  v9 = sub_10000E440();
  sub_1000A353C(v9, (uint64_t)&v289);
  v256 = v10;
  sub_1000262EC();
  __chkstk_darwin(v11);
  sub_10000E5DC();
  v13 = sub_1000F0190(v12);
  v14 = type metadata accessor for Logger(v13);
  v250 = *(_QWORD *)(v14 - 8);
  sub_1000262EC();
  __chkstk_darwin(v15);
  v249 = (char *)&v246 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000055B0((uint64_t *)&unk_1002AC150);
  sub_1000262EC();
  __chkstk_darwin(v17);
  v19 = sub_1000F0190((uint64_t)&v246 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = type metadata accessor for UniversalControlLink.Endpoint(v19);
  sub_1000A353C(v20, (uint64_t)v294);
  v264 = v21;
  sub_1000262EC();
  __chkstk_darwin(v22);
  sub_10000E5DC();
  v24 = sub_1000F0190(v23);
  v271 = type metadata accessor for UniversalControlDisplayLayout(v24);
  v262 = *(_QWORD *)(v271 - 8);
  sub_1000262EC();
  __chkstk_darwin(v25);
  sub_10003D69C();
  v274 = v26;
  sub_1000A3464();
  __chkstk_darwin(v27);
  sub_100026A8C();
  v29 = sub_1000F0190(v28);
  v30 = type metadata accessor for UniversalControlConfiguration(v29);
  v285 = *(_QWORD *)(v30 - 8);
  sub_1000262EC();
  __chkstk_darwin(v31);
  sub_10003D69C();
  v272 = v32;
  sub_1000A3464();
  __chkstk_darwin(v33);
  v35 = (char *)&v246 - v34;
  v36 = sub_1000B9A80();
  sub_1000C259C();
  __chkstk_darwin(v37);
  sub_10003D69C();
  v258 = v38;
  sub_1000A3464();
  __chkstk_darwin(v39);
  sub_1000A34C8();
  v253 = v40;
  sub_1000A3464();
  __chkstk_darwin(v41);
  sub_1000A34C8();
  v252 = v42;
  sub_1000A3464();
  __chkstk_darwin(v43);
  sub_1000A34C8();
  v254 = v44;
  sub_1000A3464();
  __chkstk_darwin(v45);
  sub_1000A34C8();
  v259 = v46;
  sub_1000A3464();
  __chkstk_darwin(v47);
  sub_1000A34C8();
  v260 = (uint8_t *)v48;
  sub_1000A3464();
  __chkstk_darwin(v49);
  sub_1000A34C8();
  v284 = v50;
  sub_1000A3464();
  __chkstk_darwin(v51);
  sub_1000A34C8();
  v273 = v52;
  sub_1000A3464();
  __chkstk_darwin(v53);
  v55 = (char *)&v246 - v54;
  if (qword_1002A98F8 != -1)
    swift_once(&qword_1002A98F8, sub_10014C200);
  v56 = sub_100006FB4(v14, (uint64_t)qword_1002B2A80);
  v57 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v276 = v8;
  v281 = v57;
  v58 = v57((uint64_t)v55, v8, v36);
  v277 = v56;
  v59 = Logger.logObject.getter(v58);
  v61 = static os_log_type_t.default.getter(v59, v60);
  v62 = os_log_type_enabled(v59, v61);
  v280 = v30;
  v282 = v36;
  v283 = v35;
  v251 = v14;
  v269 = v2;
  if (v62)
  {
    v63 = (uint8_t *)sub_10000797C(12);
    v64 = sub_10000797C(32);
    v292[0] = v64;
    *(_DWORD *)v63 = 136446210;
    sub_100101920((uint64_t)(v63 + 4));
    sub_10016A0D0((uint64_t)&unk_1002AEEB0);
    v66 = sub_10016AC60(v65);
    v290 = sub_100006FCC(v66, v67, v292);
    v68 = v279;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v290, &v291, v278);
    sub_10000E420();
    sub_10016A928();
    sub_100026484((void *)&_mh_execute_header, v59, v61, "%{public}s: Activate", v63);
    sub_1000263F4(v64, v69, (uint64_t)&type metadata for Any + 8);
    v70 = v64;
    v30 = v280;
    sub_100007958(v70);
    v71 = (uint64_t)v63;
    v35 = v283;
    sub_100007958(v71);

  }
  else
  {
    sub_10016A928();

    v68 = v279;
  }
  v72 = v68 + OBJC_IVAR____TtC13EnsembleAgent14SyncController__configuration;
  sub_10005FE28(v68 + OBJC_IVAR____TtC13EnsembleAgent14SyncController__configuration, (uint64_t)v292);
  (*(void (**)(char *, uint64_t, uint64_t))(v285 + 16))(v35, v72, v30);
  v73 = v276;
  v74 = (uint8_t *)((uint64_t (*)(uint64_t))UniversalControlConfiguration.findConflicts(_:))(v276);
  __chkstk_darwin(v74);
  sub_10016AD68();
  *(_QWORD *)(v75 - 16) = v73;
  v76 = v275;
  v78 = v275;
  if (sub_100148814((uint64_t (*)(char *))sub_10016A31C, v77, (uint64_t)v74))
  {
    v79 = sub_10016AE90();
    v81 = sub_1000D9504(v79, v80, v281);
    v82 = sub_10016A56C(v81);
    v84 = static os_log_type_t.default.getter(v82, v83);
    if (os_log_type_enabled(v82, v84))
    {
      v85 = sub_10000797C(12);
      v275 = v74;
      v86 = (uint8_t *)v85;
      v87 = sub_10000797C(32);
      v290 = v87;
      *(_DWORD *)v86 = 136446210;
      v270 = v76;
      sub_10016A0D0((uint64_t)&unk_1002AEEB0);
      v89 = sub_10016AC60(v88);
      v287 = sub_100006FCC(v89, v90, &v290);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v287, &v288, v86 + 4);
      sub_10000E420();
      sub_10016B180();
      sub_100026484((void *)&_mh_execute_header, v82, v84, "%{public}s: Already Active", v86);
      sub_1000263F4(v87, v91, (uint64_t)&type metadata for Any + 8);
      sub_100007958(v87);
      v92 = (uint64_t)v86;
      v74 = v275;
      sub_100007958(v92);

      v93 = sub_10016AF24();
    }
    else
    {

      sub_10016B180();
      v95 = *(void (**)(uint64_t, uint64_t))(v285 + 8);
      v93 = (uint64_t)v35;
      v94 = v30;
    }
    v95(v93, v94);
    return v74;
  }
  v275 = v74;
  v96 = v284;
  v97 = (uint8_t *)(v68 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView);
  sub_10005FE28(v68 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView, (uint64_t)&v290);
  v273 = sub_10016A480();
  v248 = type metadata accessor for SyncViewLocalData(0);
  v98 = sub_1000088D0();
  v99 = dispatch thunk of UniversalControlDevice.id.getter(v98);
  v101 = v100;
  sub_10000B348();
  v102 = v101;
  v103 = v96;
  v104 = UniversalControlLink.normalized(for:)(v99, v102);
  v105 = OBJC_IVAR____TtC13EnsembleAgent14SyncController_connectedLinks;
  __chkstk_darwin(v104);
  v244 = v68;
  v245 = v103;
  sub_1000103C0();
  sub_10006033C();
  v109 = sub_100148814(v106, v107, v108);
  v270 = v78;
  sub_10000E410();
  if (v109)
  {
    v74 = v260;
    v110 = v282;
    v111 = v281((uint64_t)v260, v73, v282);
    v112 = sub_10016A56C(v111);
    v114 = static os_log_type_t.default.getter(v112, v113);
    if (sub_1000E49FC(v114))
    {
      v74 = (uint8_t *)sub_10000797C(12);
      v115 = sub_10000797C(32);
      v287 = v115;
      sub_10016ACE0(4.8751e-34);
      sub_10016A0D0((uint64_t)&unk_1002AEEB0);
      v117 = dispatch thunk of CustomStringConvertible.description.getter(v110, v116);
      v109 = v118;
      v295 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100006FCC(v117, v118, &v287);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v295, &v296, &v246);
      sub_10000E420();
      sub_10016ABD0();
      sub_100026484((void *)&_mh_execute_header, v112, (os_log_type_t)v78, "%{public}s: Devices already in current reachable links", v74);
      sub_1000263F4(v115, v119, (uint64_t)&type metadata for Any + 8);
      sub_100007958(v115);
      sub_100007958((uint64_t)v74);

    }
    else
    {

      sub_10016ABD0();
    }
    v172 = sub_10016AF24();
    v173(v172);
    sub_10016A8C0();
    ((void (*)(uint64_t, uint64_t))v109)(v284, v110);
    return v74;
  }
  v260 = (uint8_t *)v105;
  sub_10005FE28(v68 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_layout, (uint64_t)&v287);
  v120 = sub_100026B88();
  v123 = sub_10016B058(v120, v121, v122);
  ((void (*)(uint64_t))UniversalControlDisplayLayout.displayFrames.getter)(v123);
  v124 = sub_10016B144();
  v261 = v125;
  v125(v124);
  sub_1000DFC00();
  v262 = v126;
  v127 = sub_1000055B0((uint64_t *)&unk_1002AC8C0);
  v128 = *(unsigned __int8 *)(v269 + 80);
  v129 = (v128 + 32) & ~v128;
  v130 = swift_allocObject(v127, v129 + *(_QWORD *)(v269 + 72), v128 | 7);
  *(_OWORD *)(v130 + 16) = xmmword_10021BBA0;
  v281(v130 + v129, v73, v282);
  v131 = v272;
  UniversalControlConfiguration.addingLinks(_:)(v130);
  sub_10000E410();
  sub_10014A904();
  v133 = v132;
  v247 = OBJC_IVAR____TtC13EnsembleAgent14SyncController_devices;
  v134 = *(_QWORD *)(v68 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_devices);
  v135 = sub_10002D9F8();
  v136 = v263;
  v137 = sub_10016AFB0(v135);
  sub_10016AD88(v137);
  sub_10016AE14();
  sub_10016ABC4();
  sub_1000EFF78(v136, *(uint64_t (**)(uint64_t, _QWORD))(v138 + 8));
  v74 = v97;
  v139 = *(char **)&v97[*(int *)(v273 + 20) + *(int *)(v248 + 28)];
  swift_retain();
  v140 = v131;
  v141 = v282;
  sub_100158DDC(v140, v133, v134, v68, v103, 0, 0, 0, 1u, v139, 0);
  swift_release();
  sub_10000E410();
  v142 = sub_10002D89C();
  dispatch thunk of UniversalControlDisplaySolver1.solve()(v142);
  v143 = sub_10000B348();
  v295 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))UniversalControlDisplayLayout.links.getter(v143);
  v144 = sub_1000055B0(&qword_1002B3338);
  sub_1001684CC((uint64_t)&unk_1002B3340);
  v146 = ((uint64_t (*)(unint64_t, unint64_t, uint64_t (*)(), _QWORD, uint64_t, uint64_t))Collection<>.links(for:where:))(v268, v267, static ReportID.keyboard.getter, 0, v144, v145);
  sub_10000E410();
  v147 = v266;
  sub_100143C0C(v146, (uint64_t (*)(_QWORD))&type metadata accessor for UniversalControlLink, (uint64_t)v266);
  sub_10000E420();
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v147, 1, v141) == 1)
  {
    swift_bridgeObjectRelease();
    sub_100025A28((uint64_t)v147, (uint64_t *)&unk_1002AC150);
    v148 = v281(v258, v73, v141);
    sub_10016A56C(v148);
    v149 = sub_1000E4B94();
    if (sub_1000AAE80(v149))
    {
      v150 = v268;
      sub_10010192C(v268 >> 8);
      sub_10016AF10(v150 >> 16);
      sub_10016AE84(v150 >> 24);
      sub_10016AE78(HIDWORD(v150));
      sub_10016AE6C(v150 >> 40);
      v266 = HIWORD(v150);
      v265 = HIBYTE(v150);
      v151 = v267;
      v264 = v267 >> 8;
      v263 = v267 >> 16;
      v262 = v267 >> 24;
      v260 = (uint8_t *)HIDWORD(v267);
      v259 = v267 >> 40;
      v254 = HIWORD(v267);
      v253 = HIBYTE(v267);
      v152 = sub_10000797C(22);
      v281 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10000797C(64);
      v295 = v281;
      *(_DWORD *)v152 = 136446466;
      sub_10016A0D0((uint64_t)&unk_1002AEEB0);
      v154 = sub_10016AC30(v153);
      v286 = sub_10016A85C(v154, v155);
      sub_10016ACBC(v286, v156, v157, v152 + 12);
      sub_10000E420();
      sub_10016A590();
      *(_WORD *)(v152 + 12) = 2082;
      HIBYTE(v244) = v253;
      BYTE6(v244) = v254;
      sub_10016AE60();
      BYTE4(v244) = (_BYTE)v260;
      sub_10016AE54();
      sub_10016AE48();
      sub_10016ABC4();
      BYTE1(v244) = v158;
      LOBYTE(v244) = v151;
      sub_10016ACD4();
      v159 = UUID.init(uuid:)(v150, v279, v277, v276, v273, v269);
      UUID.uuidString.getter(v159);
      v161 = v160;
      v162 = sub_10016ABEC();
      sub_1000EFF78(v162, v163);
      v164 = sub_10016B12C();
      sub_1000599D0(v164, v165, v161);
      v166 = sub_1000602C0();
      v168 = v167;
      sub_10000E420();
      v286 = sub_100006FCC(v166, v168, (uint64_t *)&v295);
      sub_10016ACBC(v286, v169, v170, v152 + 22);
      sub_10002D860();
      _os_log_impl((void *)&_mh_execute_header, v147, (os_log_type_t)v74, "%{public}s: Solver did not activate a link for %{public}s", (uint8_t *)v152, 0x16u);
      v171 = v281;
      swift_arrayDestroy(v281, 2, (char *)&type metadata for Any + 8);
      sub_100007958((uint64_t)v171);
      sub_100007958(v152);

    }
    else
    {

      sub_10016A590();
    }
    sub_10016A510(v274);
    sub_10016A3CC();
    sub_10016A71C((uint64_t)v283);
    sub_10016A8C0();
    goto LABEL_32;
  }
  v174 = v262;
  v175 = v259;
  (*(void (**)(uint64_t, NSObject *, uint64_t))(v269 + 32))(v259, v147, v141);
  v176 = *(NSObject **)&v74[*(int *)(v273 + 20) + *(int *)(v248 + 28)];
  sub_10002D790();
  v177 = sub_100062418();
  v178 = sub_10002645C();
  v179 = v141;
  if (!v177)
  {
    sub_10002D860();
    v198 = sub_10016AF38((uint64_t)&v285);
    v199 = ((uint64_t (*)(uint64_t))v281)(v198);
    sub_10016A56C(v199);
    v200 = sub_1000E4B94();
    v201 = sub_1000E49FC(v200);
    v183 = v284;
    if (v201)
    {
      v74 = (uint8_t *)sub_10000797C(12);
      v202 = sub_10000797C(32);
      v295 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v202;
      sub_10016ACE0(4.8751e-34);
      sub_10016A0D0((uint64_t)&unk_1002AEEB0);
      v204 = sub_10016AC50(v203);
      v206 = sub_10016A85C(v204, v205);
      sub_10016A600(v206);
      sub_10000E420();
      sub_10016A590();
      v207 = "%{public}s: No main display on local device";
LABEL_29:
      sub_100026484((void *)&_mh_execute_header, v176, (os_log_type_t)v141, v207, v74);
      sub_1000263F4(v202, v215, (uint64_t)&type metadata for Any + 8);
      v216 = v202;
      v183 = v284;
      sub_100007958(v216);
      sub_100007958((uint64_t)v74);

LABEL_31:
      sub_10016A510(v274);
      sub_10016A3CC();
      sub_10016A71C((uint64_t)v283);
      sub_10016A8C0();
      sub_10016ACCC(v175);
      v197 = v183;
LABEL_32:
      sub_10016ACCC(v197);
      return v74;
    }
LABEL_30:

    sub_10016A590();
    goto LABEL_31;
  }
  v176 = dispatch thunk of UniversalControlDisplay.id.getter(v178);
  v74 = v180;
  LOBYTE(v141) = v181;
  sub_10000B348();
  v182 = UniversalControlDisplayLayout.displayFrames(relativeTo:)(v176);
  v183 = v284;
  v184 = v281;
  if (!v182)
  {
    sub_10002D860();
    v208 = sub_10016AF38((uint64_t)&v284);
    v209 = ((uint64_t (*)(uint64_t))v184)(v208);
    sub_10016A56C(v209);
    v210 = sub_1000E4B94();
    if (sub_1000E49FC(v210))
    {
      v74 = (uint8_t *)sub_10000797C(12);
      v202 = sub_10000797C(32);
      v295 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v202;
      sub_10016ACE0(4.8751e-34);
      sub_10016A0D0((uint64_t)&unk_1002AEEB0);
      v212 = sub_10016AC50(v211);
      v214 = sub_10016A85C(v212, v213);
      sub_10016A600(v214);
      sub_10000E420();
      sub_10016A590();
      v207 = "%{public}s: Solver did solve a device offset for the local device";
      goto LABEL_29;
    }
    goto LABEL_30;
  }
  v185 = v182;
  v186 = v254;
  v187 = v281(v254, v175, v179);
  v188 = sub_10016A56C(v187);
  v190 = static os_log_type_t.default.getter(v188, v189);
  if (os_log_type_enabled(v188, v190))
  {
    v191 = sub_10000797C(12);
    v192 = sub_10000797C(32);
    v295 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v192;
    *(_DWORD *)v191 = 136446210;
    v281 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(v191 + 4);
    sub_10016A0D0((uint64_t)&unk_1002AEEB0);
    v194 = sub_10016AC30(v193);
    v286 = sub_10016A85C(v194, v195);
    v179 = v282;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v286, &v287, v281);
    sub_10000E420();
    sub_10016ABD0();
    sub_100026484((void *)&_mh_execute_header, v188, v190, "%{public}s: Solved", (uint8_t *)v191);
    sub_1000263F4(v192, v196, (uint64_t)&type metadata for Any + 8);
    v186 = 12;
    sub_100007958(v192);
    sub_100007958(v191);
  }
  else
  {
    sub_10016A590();
  }

  v218 = (uint64_t)v283;
  v219 = v279;
  sub_1000103C0();
  sub_1000DFC00();
  sub_100144A50(v220, v174);
  v222 = v221;
  sub_10000E420();
  sub_10002D860();
  if ((v222 & 1) != 0)
  {
    v223 = type metadata accessor for SyncController(0);
    sub_10016A0D0((uint64_t)&qword_1002B2970);
    ObservableObject<>.objectWillChange.getter(v223);
    ObservableObjectPublisher.send()();
    v224 = sub_10000B348();
    v225 = v274;
    v293 = UniversalControlDisplayLayout.links.getter(v224);
    v294[0] = sub_100167E84;
    v294[1] = v219;
    v294[2] = sub_100167E8C;
    v294[3] = v219;
    sub_1000404AC(v219);
    v226 = sub_10014330C(&v293);
    sub_10000F650(v219);
    sub_10000E50C();
    *(_QWORD *)&v260[v219] = v226;
    swift_bridgeObjectRelease();
    v227 = *(_QWORD *)(v219 + v247);
    sub_100040544();
    sub_100151658(v185, v227);
    sub_10000E568();
    v228 = sub_10000E410();
    __chkstk_darwin(v228);
    sub_10016AD68();
    v229 = v259;
    *(_QWORD *)(v230 - 16) = v259;
    sub_10014C7D8();
    sub_10016A510(v225);
    sub_10016A3CC();
    sub_10016A71C(v218);
    sub_10016ACCC(v229);
    sub_10016ACCC(v284);
    return v275;
  }
  else
  {
    sub_10000E410();
    swift_bridgeObjectRelease();
    sub_1000078E0(0, (unint64_t *)&qword_1002AAB80, NSError_ptr);
    v231 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(-6736, 0xD00000000000001ELL, 0x8000000100258A90, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Ensemble_executables/EnsembleAgent/SyncController.swift", 93, 2, 1562);
    v232 = v250;
    v233 = (int)v249;
    v234 = sub_10016B058((uint64_t)v249, v277, *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v250 + 16));
    __chkstk_darwin(v234);
    v235 = v259;
    v244 = v259;
    v236 = v231;
    v278 = (void (*)(uint64_t, uint64_t))v186;
    sub_1000E2B04((int)sub_100167E7C, (int)&v243, v233, (int)v236, v237, v238, v239, v240, v246, v247, v248, v249, v250, v251, v252, v253, v254, v255, v256,
      v257,
      v258,
      v259,
      (uint64_t)v260,
      (uint64_t)v261,
      v262,
      v263);
    v74 = v275;
    v241 = sub_1000A342C(*(uint64_t (**)(uint64_t, uint64_t))(v232 + 8));
    swift_willThrow(v241);
    sub_10016A510(v274);
    sub_10016A3CC();
    sub_10016A71C((uint64_t)v283);
    v242 = v278;
    v278(v235, v179);
    v242(v284, v179);
  }
  return v74;
}

void sub_10014A790()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD);
  _BYTE v7[24];

  sub_10016A480();
  sub_1000262EC();
  __chkstk_darwin(v1);
  sub_10000E478();
  sub_10005FE28(v0 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView, (uint64_t)v7);
  v2 = sub_10016B144();
  sub_100022838(v2, v3, type metadata accessor for SyncView);
  v4 = sub_100060154();
  sub_1000265B0(v4);
  v5 = sub_10016A9BC();
  sub_1000255F0(v5, v6);
  sub_10002644C();
}

uint64_t sub_10014A81C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent14SyncController__connections);
  swift_bridgeObjectRetain(v3);
  LOBYTE(a1) = sub_100198DB8(a1, v3);
  result = swift_bridgeObjectRelease(v3);
  if ((a1 & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_sink);
    if (v5)
    {
      v6 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_sink + 8);
      swift_getObjectType(v6);
      swift_bridgeObjectRetain(v5);
      swift_unknownObjectRetain(v6);
      OS_dispatch_source_data_add.add(data:)(1uLL);
      swift_unknownObjectRelease(v6);
      return swift_bridgeObjectRelease(v5);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_10014A8D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent14SyncController__connections);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent14SyncController__connections) = a1;
  sub_10014A81C(v2);
  return swift_bridgeObjectRelease(v2);
}

void sub_10014A904()
{
  sub_10014BF3C((uint64_t)&OBJC_IVAR____TtC13EnsembleAgent14SyncController__connections, sub_10004B67C);
}

void sub_10014A918()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(_QWORD);
  uint64_t v24;
  uint64_t v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  uint64_t v51;
  os_log_type_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  os_log_type_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  sub_10002626C();
  v67 = v3;
  v5 = v4;
  type metadata accessor for DispatchTimeInterval(0);
  sub_1000262EC();
  __chkstk_darwin(v6);
  sub_10003D69C();
  v70 = v7;
  sub_1000A3464();
  __chkstk_darwin(v8);
  sub_100026A8C();
  v69 = v9;
  v71 = type metadata accessor for DispatchTime(0);
  v68 = *(_QWORD *)(v71 - 8);
  sub_1000262EC();
  __chkstk_darwin(v10);
  sub_10016AA90();
  __chkstk_darwin(v11);
  sub_100026A8C();
  v13 = v12;
  v14 = sub_10016AB28();
  sub_1000262EC();
  __chkstk_darwin(v15);
  sub_1000A3710();
  v74 = v0;
  v16 = v0 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_connectedDevicesMessageHandler;
  sub_10005FE28(v0 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_connectedDevicesMessageHandler, (uint64_t)&v79);
  v17 = (uint64_t *)(v16 + *(int *)(v14 + 32));
  v18 = *v17;
  v19 = v17[1];
  sub_100022838(v16, v2, type metadata accessor for ConnectedDevices);
  v20 = *(_QWORD *)(*(_QWORD *)(v2 + *(int *)(v14 + 28)) + 16);
  v75 = v18;
  sub_10003AFBC();
  sub_100040544();
  v21 = sub_10016AC90();
  v22 = v5;
  sub_1000255F0(v21, v23);
  v24 = *(_QWORD *)(*(_QWORD *)(v5 + *(int *)(v14 + 28)) + 16);
  if (v20)
  {
    if (!v24)
    {
      if (qword_1002A98F8 != -1)
        swift_once(&qword_1002A98F8, sub_10014C200);
      v25 = sub_10000F6E4();
      sub_10005FE9C(v25, (uint64_t)qword_1002B2A80);
      v26 = sub_10002D844();
      if (os_log_type_enabled((os_log_t)&unk_1002A9000, v26))
      {
        v27 = (uint8_t *)sub_10000797C(2);
        *(_WORD *)v27 = 0;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&unk_1002A9000, v26, "Connected Devices: Cancelling message timeout", v27, 2u);
        sub_100007958((uint64_t)v27);
      }

      v28 = sub_100008904();
      static DispatchTime.distantFuture.getter(v28);
      sub_10007A0C4();
      sub_10007A0F4(v70);
      sub_10006033C();
      OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v29, v30, v31, v28);
      sub_10016A724((uint64_t)v70);
      sub_10016A724(v69);
      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v13, v71);
    }
  }
  else if (v24)
  {
    if (qword_1002A98F8 != -1)
      swift_once(&qword_1002A98F8, sub_10014C200);
    v66 = v19;
    v32 = sub_10000F6E4();
    v33 = sub_100006FB4(v32, (uint64_t)qword_1002B2A80);
    static HIDFixed.zero.getter();
    v34 = static HIDFixed.zero.getter();
    Logger.logObject.getter(v34);
    v35 = sub_10002D844();
    if (os_log_type_enabled(v33, v35))
    {
      v36 = sub_10000797C(18);
      *(_DWORD *)v36 = 68157952;
      LODWORD(v77) = 3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, (char *)&v77 + 4, v36 + 4);
      *(_WORD *)(v36 + 8) = 2048;
      v77 = 0x4014000000000000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78, v36 + 10);
      _os_log_impl((void *)&_mh_execute_header, v33, v35, "Connected Devices: Scheduling message timeout in %.*fs", (uint8_t *)v36, 0x12u);
      sub_100007958(v36);
    }

    v37 = sub_100008904();
    static DispatchTime.now()(v37);
    + infix(_:_:)(v1, 5.0);
    v38 = *(void (**)(uint64_t, uint64_t))(v68 + 8);
    v38(v1, v71);
    sub_10007A0C4();
    sub_10007A0F4(v70);
    sub_10006033C();
    OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v39, v40, v41, v37);
    sub_10016A724((uint64_t)v70);
    sub_10016A724(v69);
    v19 = v66;
    v38(v13, v71);
  }
  sub_10000B2F8(v16, (uint64_t)&v77, 33);
  v42 = sub_10016AFDC();
  sub_100167F54(v42, v43);
  sub_10016B01C();
  v44 = (uint64_t *)(v22 + *(int *)(v14 + 32));
  v45 = *v44;
  v46 = v44[1];
  sub_1000103C0();
  sub_1000432E0();
  v47 = sub_10016AB48();
  if ((sub_100145370(v47, v48, v75, v19) & 1) != 0)
  {
    sub_10000E568();
    sub_10000E594();
    sub_10000E50C();
LABEL_29:
    sub_10000E410();
    sub_10000E4E0();
    return;
  }
  if (qword_1002A98F8 != -1)
    swift_once(&qword_1002A98F8, sub_10014C200);
  v49 = sub_10000F6E4();
  v50 = sub_100006FB4(v49, (uint64_t)qword_1002B2A80);
  sub_100043360();
  sub_100040544();
  sub_1000103C0();
  v51 = sub_1000432E0();
  Logger.logObject.getter(v51);
  v52 = sub_10002D844();
  if (os_log_type_enabled(v50, v52))
  {
    v72 = v52;
    v53 = sub_10000797C(32);
    v73 = sub_10000797C(96);
    v77 = v73;
    *(_DWORD *)v53 = 136446722;
    if ((v67 & 1) != 0)
      v54 = 0x74754F2D656D6954;
    else
      v54 = 0x656772654DLL;
    if ((v67 & 1) != 0)
      v55 = 0xE800000000000000;
    else
      v55 = 0xE500000000000000;
    v76 = sub_100006FCC(v54, v55, &v77);
    sub_10016A808((uint64_t)&v76, v56, v57, v53 + 12);
    sub_10002D860();
    *(_WORD *)(v53 + 12) = 2080;
    sub_100043360();
    sub_100040544();
    sub_100141158();
    sub_10016F6B8();
    v59 = v58;
    sub_10000E568();
    sub_10000E594();
    v76 = sub_10016ADF4(v59, v60, &v77);
    sub_10016A808((uint64_t)&v76, v61, v62, v53 + 22);
    sub_100026AF4(v19);
    sub_100026AF4(v75);
    sub_10000E4A0();
    *(_WORD *)(v53 + 22) = 2080;
    sub_1000103C0();
    sub_1000432E0();
    sub_10016AB48();
    sub_10016F6B8();
    v64 = v63;
    sub_10000E50C();
    sub_10000E410();
    v76 = sub_10016ADF4(v64, v65, &v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v53 + 24);
    sub_100026AF4(v46);
    sub_100026AF4(v45);
    sub_10000E4A0();
    _os_log_impl((void *)&_mh_execute_header, v50, v72, "%{public}s Connected Devices Clock: %s -> %s", (uint8_t *)v53, 0x20u);
    swift_arrayDestroy(v73, 3, (char *)&type metadata for Any + 8);
    sub_100007958(v73);
    sub_100007958(v53);

  }
  else
  {

    sub_100026AF4(v46);
    sub_100026AF4(v45);
    sub_100026AF4(v19);
    sub_100026AF4(v75);
  }
  if (*(_QWORD *)(v74 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_sink))
  {
    sub_10016A4B8(v74 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_sink);
    sub_1000103C0();
    sub_10002D988();
    sub_10016A524();
    sub_10000F718();
    goto LABEL_29;
  }
  __break(1u);
}

void sub_10014AFCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 *v14;
  uint64_t v15;
  uint64_t v16;

  sub_10002626C();
  v2 = v0;
  v4 = v3;
  v6 = v5;
  sub_10016AB28();
  sub_1000262EC();
  __chkstk_darwin(v7);
  sub_10016AA90();
  __chkstk_darwin(v8);
  v10 = (char *)&v15 - v9;
  v11 = v2 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_connectedDevicesMessageHandler;
  sub_10005FE28(v2 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_connectedDevicesMessageHandler, (uint64_t)&v16);
  sub_100022838(v11, v1, type metadata accessor for ConnectedDevices);
  v12 = sub_1001243CC();
  sub_100072E04(v12, v13, v6, v4, v14);
  sub_10016AD38(v1);
  sub_10014A918();
  sub_10016AD38((uint64_t)v10);
  sub_10000E4E0();
}

void sub_10014B0A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  __int128 v20;
  uint64_t v21;

  sub_10002626C();
  v2 = v0;
  v3 = (int *)sub_10016AB28();
  sub_1000262EC();
  __chkstk_darwin(v4);
  sub_1000268BC();
  v7 = v5 - v6;
  __chkstk_darwin(v8);
  sub_10016AD78();
  v9 = v2 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_connectedDevicesMessageHandler;
  sub_10005FE28(v2 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_connectedDevicesMessageHandler, (uint64_t)&v21);
  sub_100022838(v9, v7, type metadata accessor for ConnectedDevices);
  v10 = sub_1000724C4(*(_QWORD *)(v7 + v3[7]), *(_QWORD *)(v7 + v3[8]), *(_QWORD *)(v7 + v3[8] + 8), 1);
  v12 = v11;
  swift_bridgeObjectRelease();
  v13 = v3[6];
  v14 = v7 + v13;
  v15 = v1 + v13;
  v16 = sub_10000F6E4();
  v20 = *(_OWORD *)(v7 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v15, v14, v16);
  sub_10016A9E0();
  *(_QWORD *)v1 = v17;
  *(_QWORD *)(v1 + 8) = v18;
  *(_OWORD *)(v1 + 16) = v20;
  *(_QWORD *)(v1 + v3[7]) = _swiftEmptyArrayStorage;
  v19 = (uint64_t *)(v1 + v3[8]);
  *v19 = v10;
  v19[1] = v12;
  sub_10016AD38(v7);
  sub_10014A918();
  sub_10016AD38(v1);
  sub_10000E4E0();
}

uint64_t sub_10014B1D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[48];
  _BYTE v11[24];

  sub_10005FE28(v0 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView, (uint64_t)v11);
  sub_10016A480();
  sub_10016A508();
  swift_bridgeObjectRetain();
  sub_1000DF7F4();
  v1 = sub_1000055B0((uint64_t *)&unk_1002ABD90);
  inited = swift_initStackObject(v1, v10);
  *(_OWORD *)(inited + 16) = xmmword_10021BBA0;
  v3 = sub_1000088D0();
  v4 = dispatch thunk of UniversalControlDevice.id.getter(v3);
  v6 = v5;
  sub_10000B348();
  *(_QWORD *)(inited + 32) = v4;
  *(_QWORD *)(inited + 40) = v6;
  sub_10019BD8C();
  v8 = v7;
  swift_setDeallocating(inited);
  return v8;
}

uint64_t sub_10014B32C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  _BYTE v9[24];

  v1 = type metadata accessor for UniversalControlDisplayLayout(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = &v9[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  UniversalControlDisplayLayout.init()(v3);
  v6 = v0 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_layout;
  swift_beginAccess(v6, v9, 33, 0);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v2 + 40))(v6, v5, v1);
  return swift_endAccess(v9);
}

uint64_t sub_10014B3D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_devices);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_devices) = a1;
  swift_bridgeObjectRelease(v2);
  return sub_10014B32C();
}

uint64_t sub_10014B3F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[24];

  v1 = v0 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView;
  sub_10005FE28(v0 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView, (uint64_t)v9);
  v2 = *(int *)(sub_10016A480() + 20);
  v3 = *(_QWORD *)(v1 + v2 + *(int *)(sub_10016A508() + 36));
  if (v3)
  {
    v4 = qword_1002A98C0;
    sub_100043360();
    if (v4 != -1)
      swift_once(&qword_1002A98C0, sub_1000F208C);
    v5 = static SourceDevice.reset;
    sub_100040544();
    v6 = sub_100026B88();
    if (static UniversalControlUUID.compare(lhs:rhs:)(v6, v7))
    {
      sub_10000E594();
      sub_10000E568();
    }
    else
    {
      sub_100043360();
      sub_100040544();
      sub_100141158();
      sub_1000F145C();
      sub_100026AF4(v5);
      sub_100026AF4(v3);
    }
  }
  return sub_100026B88();
}

#error "10014B54C: call analysis failed (funcsize=71)"

void sub_10014B620(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  sub_1000E4A0C();
  a23 = v24;
  a24 = v26;
  v27 = v25;
  v29 = v28;
  if (v28)
  {
    if (v25)
    {
      sub_1000432E0();
      sub_1000F0588();
      if (v30 == 2)
        goto LABEL_20;
      sub_10000E50C();
    }
  }
  else if (!v25)
  {
    goto LABEL_20;
  }
  if (qword_1002A98F8 != -1)
    swift_once(&qword_1002A98F8, sub_10014C200);
  v31 = sub_10000F6E4();
  v32 = sub_100006FB4(v31, (uint64_t)qword_1002B2A80);
  sub_10003B09C(v27);
  v33 = sub_10003B09C(v29);
  Logger.logObject.getter(v33);
  v34 = sub_10002D844();
  if (sub_10016B0D4(v34))
  {
    v35 = sub_10000797C(22);
    v36 = sub_10000797C(64);
    a12 = v36;
    *(_DWORD *)v35 = 136446466;
    v50 = v36;
    if (v29)
    {
      sub_1000432E0();
      sub_10016FC9C();
      v38 = v37;
      v40 = v39;
      sub_10000E50C();
    }
    else
    {
      v40 = 0xE300000000000000;
      v38 = 7104878;
    }
    a11 = sub_100006FCC(v38, v40, &a12);
    sub_10016A808((uint64_t)&a11, v41, v42, v35 + 12);
    sub_100026AF4(v29);
    sub_10002D860();
    *(_WORD *)(v35 + 12) = 2082;
    if (v27)
    {
      sub_1000103C0();
      sub_10016AFB8();
      v44 = v43;
      v46 = v45;
      sub_10000E410();
    }
    else
    {
      v46 = 0xE300000000000000;
      v44 = 7104878;
    }
    a11 = sub_100006FCC(v44, v46, &a12);
    sub_10016A808((uint64_t)&a11, v47, v48, v35 + 22);
    sub_100026AF4(v27);
    sub_10000E50C();
    sub_100026A60((void *)&_mh_execute_header, v32, v34, "Update Source Device: %{public}s -> %{public}s", (uint8_t *)v35);
    sub_100026A58(v50, v49, (uint64_t)&type metadata for Any + 8);
    sub_100007958(v50);
    sub_100007958(v35);

  }
  else
  {

    sub_100026AF4(v27);
    sub_100026AF4(v29);
  }
  sub_1000103C0();
LABEL_20:
  sub_10016AB54();
  sub_1000088AC();
}

void sub_10014B86C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_100026954();
  sub_10014A904();
  v4 = *(_QWORD *)(v3 + 16);
  swift_bridgeObjectRelease();
  if (v4)
  {
    v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent14SyncController__sourceDevice);
    v6 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent14SyncController__sourceDevice + 8);
    v7 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent14SyncController__sourceDevice + 16);
    sub_100040544();
    v8 = static SourceDevice.makeSourceDevice(localDeviceID:oldSourceDevice:newValue:)(v2, v0, v5, v6, v7, v2, v0);
    v10 = v9;
    v12 = v11;
    sub_10000E568();
    sub_10014B504(v8, v10, v12);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_10002644C();
  }
}

uint64_t sub_10014B90C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE v62[24];

  v8 = *(_QWORD **)(v3 + OBJC_IVAR____TtC13EnsembleAgent14SyncController__sourceDevice);
  v7 = *(_QWORD *)(v3 + OBJC_IVAR____TtC13EnsembleAgent14SyncController__sourceDevice + 8);
  v9 = *(_QWORD *)(v3 + OBJC_IVAR____TtC13EnsembleAgent14SyncController__sourceDevice + 16);
  sub_10005FE28(v3 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView, (uint64_t)v62);
  sub_10016A480();
  sub_10016A508();
  sub_10002D9F8();
  v10 = sub_1000088D0();
  v11 = dispatch thunk of UniversalControlDevice.id.getter(v10);
  v13 = v12;
  sub_10000B348();
  v16 = static SourceDevice.makeSourceDevice(localDeviceID:oldSourceDevice:otherSourceDevice:)(v11, v13, v8, v7, v9, a1, a2, a3);
  v17 = v14;
  v18 = v15;
  if (!v8 || sub_1001240C4(v14, v15) || static UniversalControlUUID.compare(lhs:rhs:)(v17, v18))
  {
    v58 = a3;
    if (qword_1002A98F8 != -1)
      swift_once(&qword_1002A98F8, sub_10014C200);
    v19 = sub_10000F6E4();
    v20 = sub_100006FB4(v19, (uint64_t)qword_1002B2A80);
    sub_10003B09C(a1);
    sub_10003B09C(v16);
    v21 = sub_10002D9F8();
    Logger.logObject.getter(v21);
    v22 = sub_10002D844();
    if (sub_10016B0D4(v22))
    {
      v54 = v18;
      v23 = sub_10000797C(32);
      v51 = sub_10000797C(96);
      v61 = v51;
      *(_DWORD *)v23 = 136446722;
      v56 = v17;
      if (v8)
      {
        sub_10002D9F8();
        sub_10016AFB8();
        sub_10016AF78();
        sub_10002D89C();
      }
      v24 = sub_100141158();
      v60 = sub_100006FCC(v24, v25, v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v23 + 4);
      sub_100026AF4((uint64_t)v8);
      sub_10000E568();
      *(_WORD *)(v23 + 12) = 2082;
      sub_1000432E0();
      sub_10016FC9C();
      v28 = v27;
      sub_10000E50C();
      v30 = sub_10016ADF4(v28, v29, &v61);
      sub_10016AB88(v30, v31, v32, v23 + 22, v33, v34, v35, v36, v49, v51, v54, v56, v58, v60);
      sub_100026AF4(a1);
      sub_10000E4A0();
      *(_WORD *)(v23 + 22) = 2082;
      sub_1000103C0();
      sub_10016FC9C();
      v38 = v37;
      v39 = sub_10000E410();
      v41 = sub_10016B150(v39, v40, &v61);
      sub_10016AB88(v41, v42, v43, v23 + 32, v44, v45, v46, v47, v50, v52, v55, v57, v59, v60);
      sub_100026AF4(v16);
      swift_bridgeObjectRelease(v38);
      _os_log_impl((void *)&_mh_execute_header, v20, v22, "Merge Remote Source Device: local=%{public}s, remote=%{public}s, result=%{public}s", (uint8_t *)v23, 0x20u);
      swift_arrayDestroy(v53, 3, (char *)&type metadata for Any + 8);
      sub_100007958(v53);
      sub_100007958(v23);

    }
    else
    {

      sub_100026AF4(v16);
      sub_100026AF4(a1);
      sub_100026AF4((uint64_t)v8);
    }
  }
  else
  {
    sub_10002D89C();
  }
  return v16;
}

uint64_t sub_10014BC28()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  char v4;
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;

  sub_10014A904();
  v1 = v0;
  v2 = sub_10016A9BC();
  sub_10018F420(v2, v3, v1);
  v5 = v4;
  sub_1000267C4();
  if ((v5 & 1) == 0)
  {
    sub_1000078E0(0, (unint64_t *)&qword_1002AAB80, NSError_ptr);
    sub_10016A990();
    v17 = 188;
LABEL_6:
    v18 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(v11, v12, v13, v14, v15, v16, v17);
    swift_willThrow(v18);
    return sub_100141400();
  }
  v6 = sub_10016A9BC();
  sub_10014BD1C(v6, v7);
  if (!v8)
  {
    sub_1000078E0(0, (unint64_t *)&qword_1002AAB80, NSError_ptr);
    sub_10016A990();
    v17 = 192;
    goto LABEL_6;
  }
  sub_10014B90C(v8, v9, v10);
  sub_10016B18C();
  sub_1000267C4();
  return sub_100141400();
}

void sub_10014BD1C(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(_QWORD);
  _BYTE v16[24];
  _BYTE v17[24];

  type metadata accessor for SyncViewRemoteData(0);
  sub_1000262EC();
  __chkstk_darwin(v6);
  sub_1000F0204();
  v7 = v3 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_syncCoordinators;
  sub_10005FE28(v7, (uint64_t)v17);
  v8 = *(_QWORD *)v7;
  if (*(_QWORD *)(*(_QWORD *)v7 + 16))
  {
    sub_1000432E0();
    v9 = sub_1001A8C70(a1, a2);
    if ((v10 & 1) != 0)
    {
      v11 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v9);
      sub_1000088D0();
      sub_10000E50C();
      v12 = v11 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_remoteData;
      sub_10005FE28(v11 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_remoteData, (uint64_t)v16);
      sub_100022838(v12, v2, type metadata accessor for SyncViewRemoteData);
      sub_10000B348();
      sub_10016AB54();
      sub_1000FB3EC(v13);
      v14 = sub_10016AB48();
      sub_1000255F0(v14, v15);
    }
    else
    {
      sub_10000E50C();
    }
  }
  sub_10016AB54();
}

void sub_10014BE44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_10016AE2C();
  sub_10014A904();
  v2 = v1;
  v3 = sub_1001243CC();
  sub_10018F420(v3, v4, v2);
  v6 = v5;
  sub_10000E4A0();
  if ((v6 & 1) != 0 && v0)
  {
    sub_10006033C();
    v10 = sub_10014B90C(v7, v8, v9);
    sub_10014B504(v10, v11, v12);
    sub_10016A77C(v10);
  }
  else
  {
    sub_10002D8A4();
  }
}

void sub_10014BEB4(unsigned __int8 a1)
{
  uint64_t v1;
  uint64_t v2;

  if (*(unsigned __int8 *)(v1 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_sleepState) == a1)
  {
    sub_10000B350();
  }
  else
  {
    *(_BYTE *)(v1 + OBJC_IVAR____TtC13EnsembleAgent14SyncController__sleepState) = a1;
    v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_sink);
    if (v2)
    {
      sub_10016A4B8(v1 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_sink);
      sub_1000103C0();
      sub_10002D988();
      sub_10016A524();
      sub_10000F718();
      sub_10016A904(v2);
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_10014BF28()
{
  sub_10014BF3C((uint64_t)&OBJC_IVAR____TtC13EnsembleAgent14SyncController_connectedLinks, (void (*)(uint64_t))sub_10014BF70);
}

void sub_10014BF3C(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3;

  v3 = sub_10003AFBC();
  a2(v3);
  sub_10000E420();
  sub_1000050D4();
}

void *sub_10014BF70(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t, __n128);
  __n128 v16;
  void *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t, __n128);
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  void *v39;

  v2 = type metadata accessor for UniversalControlAnchor(0);
  v36 = *(_QWORD *)(v2 - 8);
  v37 = v2;
  __chkstk_darwin(v2);
  v33 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for UniversalControlLink.Endpoint(0);
  v34 = *(_QWORD *)(v4 - 8);
  v35 = v4;
  __chkstk_darwin(v4);
  v32 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UniversalControlLink(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000055B0((uint64_t *)&unk_1002AC150);
  __chkstk_darwin(v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a1 + 16);
  v29 = a1;
  if (v13)
  {
    v14 = a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v15 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16);
    v30 = *(_QWORD *)(v7 + 72);
    v31 = v15;
    v16 = swift_bridgeObjectRetain(a1);
    v17 = &_swiftEmptySetSingleton;
    v18 = v33;
    while (1)
    {
      v31(v12, v14, v6, v16);
      _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v12, 0, 1, v6);
      if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v12, 1, v6) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v12, v6);
      v39 = v17;
      swift_bridgeObjectRetain(v17);
      v19 = v32;
      v21 = UniversalControlLink.endpoint1.getter(v20);
      UniversalControlLink.Endpoint.anchor.getter(v21);
      v22 = (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v19, v35);
      v23 = v7;
      v24 = UniversalControlAnchor.edge.getter(v22);
      (*(void (**)(char *, uint64_t))(v36 + 8))(v18, v37);
      v25 = v24;
      v7 = v23;
      sub_10011A03C(&v38, v25);
      v26 = v39;
      (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v6);
      swift_bridgeObjectRelease(v17);
      v14 += v30;
      v17 = v26;
      if (!--v13)
        goto LABEL_7;
    }
  }
  else
  {
    swift_bridgeObjectRetain(a1);
    v26 = &_swiftEmptySetSingleton;
LABEL_7:
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v12, 1, 1, v6);
    v17 = v26;
  }
  swift_bridgeObjectRelease(v29);
  return v17;
}

uint64_t sub_10014C200()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10000897C(v0, qword_1002B2A80);
  sub_100006FB4(v0, (uint64_t)qword_1002B2A80);
  return Logger.init(subsystem:category:)(0xD00000000000001ALL, 0x8000000100251980, 1129208147, 0xE400000000000000);
}

uint64_t sub_10014C26C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[24];
  _BYTE v17[24];

  sub_100026954();
  v3 = sub_10000F6E4();
  sub_10016A76C();
  __chkstk_darwin(v4);
  sub_100026500();
  v5 = v0 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_syncCoordinators;
  sub_10005FE28(v0 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_syncCoordinators, (uint64_t)v17);
  v6 = *(_QWORD *)v5;
  if (*(_QWORD *)(*(_QWORD *)v5 + 16))
  {
    sub_10003AFBC();
    v7 = sub_10016AEFC();
    if ((v8 & 1) != 0)
    {
      v9 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v7);
      sub_100026AE4();
      sub_10000E420();
      return v9;
    }
    sub_10000E420();
  }
  if (qword_1002A98F8 != -1)
    swift_once(&qword_1002A98F8, sub_10014C200);
  v10 = sub_100006FB4(v3, (uint64_t)qword_1002B2A80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v10, v3);
  v11 = type metadata accessor for SyncCoordinator(0);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  sub_100026AE4();
  v9 = sub_1000F44F4();
  sub_10000B2F8(v5, (uint64_t)v16, 33);
  sub_100026AE4();
  sub_10006033C();
  sub_1001AAA24(v12, v13, v14);
  swift_endAccess(v16);
  return v9;
}

void sub_10014C3BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  char v13;
  _BYTE v14[24];
  _BYTE v15[24];

  v3 = v1;
  v5 = sub_100060154();
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_100026500();
  v7 = v3 + OBJC_IVAR____TtC13EnsembleAgent14SyncController__configuration;
  sub_10005FE28(v3 + OBJC_IVAR____TtC13EnsembleAgent14SyncController__configuration, (uint64_t)v15);
  v8 = sub_10016AFC4();
  sub_1000B2170(v8, v9, v10);
  sub_10016A0D0((uint64_t)&unk_1002AC140);
  v13 = sub_10016AF64(a1, v2, v12, v11);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v2, v5);
  if ((v13 & 1) != 0)
    goto LABEL_4;
  sub_10000B2F8(v7, (uint64_t)v14, 33);
  sub_1000B2170(v7, a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 24));
  swift_endAccess(v14);
  if (*(_QWORD *)(v3 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_sink))
  {
    sub_10016A4B8(v3 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_sink);
    sub_1000103C0();
    sub_10002D988();
    sub_10016A524();
    sub_10000F718();
    sub_10000E410();
LABEL_4:
    sub_10002D8A4();
    return;
  }
  __break(1u);
}

void sub_10014C4D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  void (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _BYTE v38[32];
  uint64_t v39;
  _BYTE v40[24];
  uint64_t v41;

  sub_10002626C();
  v29 = v2;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v9 = v5 >> 8;
  v10 = v5 >> 16;
  v11 = v5 >> 24;
  sub_100101920(HIDWORD(v5));
  sub_10010192C(v12 >> 40);
  v28 = HIWORD(v13);
  v30 = HIBYTE(v13);
  v31 = v14 >> 8;
  v32 = v14 >> 16;
  v33 = v14 >> 24;
  v34 = HIDWORD(v14);
  v35 = v14 >> 40;
  v36 = HIWORD(v14);
  v37 = HIBYTE(v14);
  v15 = sub_100060154();
  sub_10003B160();
  __chkstk_darwin(v16);
  sub_1000268BC();
  v19 = v17 - v18;
  __chkstk_darwin(v20);
  sub_10014128C();
  v21 = v8 + OBJC_IVAR____TtC13EnsembleAgent14SyncController__configuration;
  sub_10005FE28(v21, (uint64_t)&v41);
  sub_1000C2764(v0, v21, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16));
  v38[16] = v6;
  v38[17] = v9;
  v38[18] = v10;
  v38[19] = v11;
  sub_10016B174();
  v38[20] = v22;
  v38[21] = v27;
  v38[22] = v28;
  v38[23] = v30;
  v38[24] = v4;
  v38[25] = v31;
  v38[26] = v32;
  v38[27] = v33;
  v38[28] = v34;
  v38[29] = v35;
  v38[30] = v36;
  v38[31] = v37;
  v39 = v29;
  UniversalControlConfiguration.removingLinks(where:)(sub_1001685C0, v38);
  sub_10016A0D0((uint64_t)&qword_1002AC140);
  if ((dispatch thunk of static Equatable.== infix(_:_:)(v19, v0, v15, v23) & 1) == 0)
  {
    sub_10000B2F8(v21, (uint64_t)v40, 33);
    sub_1000C2764(v21, v19, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 24));
    swift_endAccess(v40);
    sub_10014C8D0();
  }
  v24 = *(void (**)(uint64_t))(v1 + 8);
  v25 = sub_10016A9BC();
  v24(v25);
  v26 = sub_10016AFC4();
  v24(v26);
  sub_10000E594();
  sub_10000E4E0();
}

void sub_10014C6D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_10002626C();
  v4 = v3;
  v6 = v5;
  v8 = v7;
  sub_100060154();
  sub_1000C259C();
  __chkstk_darwin(v9);
  sub_10002671C();
  __chkstk_darwin(v10);
  sub_10016AD78();
  v11 = v8 + OBJC_IVAR____TtC13EnsembleAgent14SyncController__configuration;
  sub_10005FE28(v8 + OBJC_IVAR____TtC13EnsembleAgent14SyncController__configuration, (uint64_t)&v14);
  sub_10003D65C(v1, v11, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));
  UniversalControlConfiguration.removingLinks(where:)(v6, v4);
  sub_10016A0D0((uint64_t)&unk_1002AC140);
  if ((sub_10016A910(v12) & 1) == 0)
  {
    sub_10000B2F8(v11, (uint64_t)&v13, 33);
    sub_10003D65C(v11, v0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 24));
    sub_10016B01C();
    sub_10014C8D0();
  }
  sub_10016A724(v0);
  sub_10016A724(v1);
  sub_10000E4E0();
}

void sub_10014C7D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  void (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_10002626C();
  v5 = v4;
  sub_100060154();
  sub_1000C259C();
  __chkstk_darwin(v6);
  sub_10002671C();
  __chkstk_darwin(v7);
  sub_10016AD78();
  v8 = v0 + OBJC_IVAR____TtC13EnsembleAgent14SyncController__configuration;
  sub_10005FE28(v0 + OBJC_IVAR____TtC13EnsembleAgent14SyncController__configuration, (uint64_t)&v11);
  sub_10003D65C(v2, v8, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
  v5(v2);
  sub_10016A0D0((uint64_t)&unk_1002AC140);
  if ((sub_10016A910(v9) & 1) == 0)
  {
    sub_10000B2F8(v8, (uint64_t)&v10, 33);
    sub_10003D65C(v8, v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 24));
    sub_10016B01C();
    sub_10014C8D0();
  }
  sub_10016A724(v1);
  sub_10016A724(v2);
  sub_10000E4E0();
}

void sub_10014C8D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  os_log_type_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 **v55;
  unsigned __int8 *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64x2_t v74;
  int16x8_t v75;
  unint64_t v76;
  uint64x2_t v77;
  int16x8_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t (*v81)(uint64_t, uint64_t);
  void (*v82)(uint64_t, char *, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  char v87;
  char v88;
  char v89;
  char v90;
  char v91;
  char v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64x2_t v103;
  int16x8_t v104;
  uint64x2_t v105;
  int16x8_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char v173;
  uint64_t v174;
  char v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  char v182;
  char v183;
  char v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t (*v187)(uint64_t, uint64_t);
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  os_log_type_t v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  _QWORD v222[4];
  uint64_t v223;
  uint64_t v224;
  _QWORD v225[15];
  _QWORD v226[16];

  sub_10002626C();
  v1 = v0;
  sub_10016AB28();
  sub_1000262EC();
  __chkstk_darwin(v2);
  sub_10003D69C();
  v202 = v3;
  sub_1000A3464();
  __chkstk_darwin(v4);
  sub_100026A8C();
  v201 = v5;
  sub_1000055B0((uint64_t *)&unk_1002B3350);
  sub_1000262EC();
  __chkstk_darwin(v6);
  sub_10000E5DC();
  v188 = v7;
  v8 = sub_10009A58C();
  v203 = *(_QWORD *)(v8 - 8);
  v204 = v8;
  sub_1000262EC();
  __chkstk_darwin(v9);
  sub_10003D69C();
  v200 = v10;
  sub_1000A3464();
  __chkstk_darwin(v11);
  sub_1000A34C8();
  v199 = v12;
  sub_1000A3464();
  __chkstk_darwin(v13);
  sub_1000A34C8();
  v198 = v14;
  sub_1000A3464();
  __chkstk_darwin(v15);
  sub_100026A8C();
  v197 = v16;
  v17 = sub_10016A480();
  sub_1000262EC();
  __chkstk_darwin(v18);
  sub_10000E5DC();
  v193 = v19;
  v20 = sub_100060154();
  v185 = *(_QWORD *)(v20 - 8);
  sub_1000262EC();
  __chkstk_darwin(v21);
  sub_10003D69C();
  v186 = v22;
  sub_1000A3464();
  __chkstk_darwin(v23);
  sub_1000A34C8();
  v217 = v24;
  sub_1000A3464();
  __chkstk_darwin(v25);
  sub_100026A8C();
  v209 = v26;
  v27 = *(_BYTE *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_enablementController) + 57);
  v28 = OBJC_IVAR____TtC13EnsembleAgent14SyncController_sleepState;
  v191 = sub_100151D60(*(_BYTE *)(v0 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_sleepState), *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC13EnsembleAgent14SyncController__sleepState));
  *(_BYTE *)(v0 + v28) = v191;
  v29 = OBJC_IVAR____TtC13EnsembleAgent14SyncController_availableDevices;
  v196 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_availableDevices);
  swift_bridgeObjectRetain(v196);
  v30 = sub_100151F40(v27);
  *(_QWORD *)(v0 + v29) = v30;
  v208 = (uint64_t)v30;
  swift_bridgeObjectRetain(v30);
  sub_10000E420();
  v31 = OBJC_IVAR____TtC13EnsembleAgent14SyncController_connections;
  v32 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_connections);
  v33 = OBJC_IVAR____TtC13EnsembleAgent14SyncController__connections;
  v34 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent14SyncController__connections);
  sub_10005FFC0();
  v35 = sub_10016A624();
  v211 = v34;
  v213 = v17;
  v189 = v32;
  v190 = v20;
  if ((sub_100198DB8(v35, v32) & 1) == 0)
  {
    if (qword_1002A98F8 != -1)
      swift_once(&qword_1002A98F8, sub_10014C200);
    v36 = sub_10000F6E4();
    v37 = sub_100006FB4(v36, (uint64_t)qword_1002B2A80);
    sub_10003B09C(v32);
    v38 = sub_10003B09C(v34);
    Logger.logObject.getter(v38);
    v39 = sub_10002D844();
    if (os_log_type_enabled(v37, v39))
    {
      v218 = v39;
      v40 = sub_10000797C(22);
      v215 = sub_10000797C(64);
      v226[0] = v215;
      *(_DWORD *)v40 = 136446466;
      v41 = sub_1000E0F7C();
      v42 = sub_10005FFC0();
      Set.description.getter(v42, &type metadata for Connection, v41);
      swift_bridgeObjectRelease();
      v43 = sub_10016AC90();
      v225[0] = sub_100006FCC(v43, v44, v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v225, &v225[1], v40 + 4);
      sub_100026AF4(v32);
      sub_1000267C4();
      *(_WORD *)(v40 + 12) = 2082;
      swift_bridgeObjectRetain(v34);
      Set.description.getter(v34, &type metadata for Connection, v41);
      swift_bridgeObjectRelease();
      v46 = sub_10016ADB8();
      v225[0] = sub_100006FCC(v46, v47, v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v225, &v225[1], v40 + 14);
      sub_100026AF4(v34);
      sub_100075850();
      sub_100026A60((void *)&_mh_execute_header, v37, v218, "Connections: %{public}s -> %{public}s", (uint8_t *)v40);
      sub_100026A58(v215, v49, (uint64_t)&type metadata for Any + 8);
      sub_100007958(v215);
      sub_100007958(v40);

    }
    else
    {

      sub_100026AF4(v34);
      sub_100026AF4(v32);
    }
    v50 = *(_QWORD *)(v1 + v33);
    *(_QWORD *)(v1 + v31) = v50;
    swift_bridgeObjectRetain(v50);
    sub_10000E420();
  }
  v51 = sub_10005FFC0();
  sub_10004B67C(v51);
  v207 = v52;
  sub_1000267C4();
  v53 = sub_10016A624();
  sub_10004B67C(v53);
  v216 = v54;
  sub_10002D860();
  v55 = (unsigned __int8 **)(v1 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_syncCoordinators);
  sub_10000B2F8(v1 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_syncCoordinators, (uint64_t)&v224, 1);
  v56 = *v55;
  sub_100040544();
  v57 = sub_100151FCC(v196, v208, v56);
  sub_10000E568();
  *v55 = (unsigned __int8 *)v57;
  v205 = (_QWORD *)v57;
  sub_1000432E0();
  sub_10000E420();
  v58 = v1 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView;
  sub_10005FE28(v1 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView, (uint64_t)&v223);
  memcpy(v226, (const void *)v58, 0x71uLL);
  v59 = v17;
  v60 = v58 + *(int *)(v17 + 20);
  v61 = sub_10016A508();
  v62 = *(_QWORD *)(v60 + *(int *)(v61 + 28));
  v63 = OBJC_IVAR____TtC13EnsembleAgent14SyncController__localDevice;
  v64 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent14SyncController__localDevice);
  sub_10002679C();
  v65 = sub_1000600C0();
  v66 = sub_100152B20(v65, v64);
  sub_1000269A0();
  *(_QWORD *)(v1 + v63) = 0;
  swift_release();
  v225[0] = v66;
  v195 = v62;
  v222[0] = v62;
  type metadata accessor for UniversalControlDevice(0);
  sub_10016A0D0((uint64_t)&unk_1002AC0A0);
  v214 = (char *)v58;
  v219 = (char *)v66;
  v210 = v61;
  if ((sub_10016AF64((uint64_t)v225, (uint64_t)v222, v68, v67) & 1) != 0)
  {
    v69 = v185;
    v70 = v190;
  }
  else
  {
    sub_1001509BC();
    sub_10016A0D0((uint64_t)&qword_1002B2970);
    sub_10016A3A4();
    sub_100043358();
    sub_10000B348();
    sub_10000B2F8(v58, (uint64_t)v225, 33);
    v71 = v58 + *(int *)(v213 + 20);
    v72 = *(int *)(v61 + 28);
    swift_retain();
    sub_10000B348();
    *(_QWORD *)(v71 + v72) = v66;
    sub_100040554();
    sub_10016B18C();
    v74 = (uint64x2_t)vdupq_n_s64(v73);
    v75 = (int16x8_t)vshlq_u64(v74, (uint64x2_t)xmmword_10021F130);
    *(int16x4_t *)v75.i8 = vmovn_s32(vuzp1q_s32((int32x4_t)vshlq_u64(v74, (uint64x2_t)xmmword_10021F140), (int32x4_t)v75));
    v77 = (uint64x2_t)vdupq_n_s64(v76);
    v78 = (int16x8_t)vshlq_u64(v77, (uint64x2_t)xmmword_10021F130);
    *(int16x4_t *)v78.i8 = vmovn_s32(vuzp1q_s32((int32x4_t)vshlq_u64(v77, (uint64x2_t)xmmword_10021F140), (int32x4_t)v78));
    *(_BYTE *)(v58 + 49) = v66;
    *(_DWORD *)(v58 + 50) = vmovn_s16(v75).u32[0];
    *(_BYTE *)(v58 + 54) = BYTE5(v73);
    *(_BYTE *)(v58 + 55) = BYTE6(v73);
    *(_BYTE *)(v58 + 56) = HIBYTE(v73);
    *(_BYTE *)(v58 + 57) = v72;
    *(_DWORD *)(v58 + 58) = vmovn_s16(v78).u32[0];
    *(_BYTE *)(v58 + 62) = BYTE5(v76);
    *(_BYTE *)(v58 + 63) = BYTE6(v76);
    *(_BYTE *)(v58 + 64) = HIBYTE(v76);
    sub_10016A650();
    v70 = v190;
    v59 = v213;
    v69 = v185;
  }
  sub_100022838(v58, v193, type metadata accessor for SyncView);
  sub_10016AF1C(v209, v193 + *(int *)(v59 + 20));
  sub_10016ACAC(v193);
  v79 = v1 + OBJC_IVAR____TtC13EnsembleAgent14SyncController__configuration;
  sub_10005FE28(v1 + OBJC_IVAR____TtC13EnsembleAgent14SyncController__configuration, (uint64_t)v222);
  sub_10016AF1C(v186, v79);
  sub_100152BBC(v209, v186, v217);
  v80 = v59;
  v81 = *(uint64_t (**)(uint64_t, uint64_t))(v69 + 8);
  sub_10009BE10(v186, v81);
  sub_10000B2F8(v79, (uint64_t)v225, 33);
  v82 = *(void (**)(uint64_t, char *, uint64_t))(v69 + 24);
  v82(v79, v217, v70);
  sub_10016A650();
  sub_10016A0D0((uint64_t)&unk_1002AC140);
  v83 = v70;
  if ((dispatch thunk of static Equatable.== infix(_:_:)(v217, v209, v70, v84) & 1) == 0)
  {
    sub_1001509BC();
    sub_10016A0D0((uint64_t)&qword_1002B2970);
    sub_10016A3A4();
    sub_100043358();
    sub_10000B348();
    sub_10000B2F8(v58, (uint64_t)v225, 33);
    v83 = (uint64_t)v217;
    v85 = ((uint64_t (*)(uint64_t, char *, uint64_t))v82)(v58 + *(int *)(v80 + 20), v217, v70);
    *(_QWORD *)(v58 + 17) = UniversalControlConfiguration.id.getter(v85);
    *(_BYTE *)(v58 + 25) = v86;
    *(_BYTE *)(v58 + 26) = v87;
    *(_BYTE *)(v58 + 27) = v88;
    *(_BYTE *)(v58 + 28) = v89;
    *(_BYTE *)(v58 + 29) = v90;
    *(_BYTE *)(v58 + 30) = v91;
    *(_BYTE *)(v58 + 31) = v92;
    *(_BYTE *)(v58 + 32) = v93;
    sub_10016A650();
  }
  v187 = v81;
  v94 = v61;
  v95 = *(_QWORD *)(v58 + *(int *)(v80 + 20) + *(int *)(v61 + 40));
  v96 = sub_100040544();
  sub_10016AEC4(v96);
  sub_10016AE20();
  sub_10016A970();
  v97 = sub_1001532A4(v208, v83, (uint64_t)v82, v95, v191, v205);
  sub_100075850();
  v192 = v97;
  v98 = sub_100141400();
  LOBYTE(v97) = sub_100198A54(v98, v99);
  sub_10000E568();
  if ((v97 & 1) == 0)
  {
    sub_10000B2F8(v58, (uint64_t)v225, 33);
    v100 = v58 + *(int *)(v80 + 20);
    v101 = *(int *)(v61 + 40);
    v102 = *(_QWORD *)(v100 + v101);
    sub_10003B09C(v192);
    sub_10000E420();
    *(_QWORD *)(v100 + v101) = v192;
    sub_100145414();
    sub_10016B18C();
    sub_1000267C4();
    v103 = (uint64x2_t)vdupq_n_s64(v101);
    v104 = (int16x8_t)vshlq_u64(v103, (uint64x2_t)xmmword_10021F130);
    *(int16x4_t *)v104.i8 = vmovn_s32(vuzp1q_s32((int32x4_t)vshlq_u64(v103, (uint64x2_t)xmmword_10021F140), (int32x4_t)v104));
    v105 = (uint64x2_t)vdupq_n_s64(v102);
    v106 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v105, (uint64x2_t)xmmword_10021F140), (int32x4_t)vshlq_u64(v105, (uint64x2_t)xmmword_10021F130));
    *(int16x4_t *)v106.i8 = vmovn_s32((int32x4_t)v106);
    *(_BYTE *)(v58 + 97) = v102;
    *(_DWORD *)(v58 + 98) = vmovn_s16(v106).u32[0];
    *(_BYTE *)(v58 + 102) = BYTE5(v102);
    *(_BYTE *)(v58 + 103) = BYTE6(v102);
    *(_BYTE *)(v58 + 104) = HIBYTE(v102);
    *(_BYTE *)(v58 + 105) = v101;
    *(_DWORD *)(v58 + 106) = vmovn_s16(v104).u32[0];
    *(_BYTE *)(v58 + 110) = BYTE5(v101);
    *(_BYTE *)(v58 + 111) = BYTE6(v101);
    *(_BYTE *)(v58 + 112) = HIBYTE(v101);
    sub_10016A650();
    v80 = v213;
    v94 = v61;
  }
  v107 = *(_QWORD *)(v58 + *(int *)(v80 + 20) + (uint64_t)*(int *)(v94 + 36));
  v108 = sub_10016A624();
  v109 = sub_10016AEC4(v108);
  v111 = v110;
  v112 = (uint64_t *)(v1 + OBJC_IVAR____TtC13EnsembleAgent14SyncController__sourceDevice);
  v114 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent14SyncController__sourceDevice);
  v113 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent14SyncController__sourceDevice + 8);
  v115 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent14SyncController__sourceDevice + 16);
  sub_10005FFC0();
  v116 = sub_100153778(v109, v111, v207, v216, v189, v211, v114, v113, v115);
  v118 = v117;
  v120 = v119;
  sub_1000267C4();
  sub_10000E50C();
  sub_10000E594();
  if (!v116)
  {
    v121 = v118;
    if (!v107)
      goto LABEL_22;
    goto LABEL_20;
  }
  v121 = v118;
  if (!v107)
  {
LABEL_20:
    sub_10002D860();
    goto LABEL_21;
  }
  sub_10003B09C(v116);
  sub_10016A624();
  v122 = sub_100141158();
  if (static UniversalControlUUID.compare(lhs:rhs:)(v122, v123))
  {
    sub_100026AF4(v116);
    sub_100026AF4(v107);
LABEL_21:
    sub_1001509BC();
    sub_10016A0D0((uint64_t)&qword_1002B2970);
    sub_10016A3A4();
    sub_100043358();
    sub_10000B348();
    sub_10000B2F8(v58, (uint64_t)v225, 33);
    sub_100099EC4(v116, v121, v120);
    sub_10016A650();
    *v112 = v116;
    v112[1] = v121;
    v112[2] = v120;
    sub_10002D9F8();
    sub_10000E420();
    goto LABEL_22;
  }
  sub_10016A624();
  sub_10002D9F8();
  sub_1000F145C();
  v184 = v183;
  sub_1000103C8(v107);
  sub_1000103C8(v116);
  if ((v184 & 1) == 0)
    goto LABEL_21;
LABEL_22:
  v124 = OBJC_IVAR____TtC13EnsembleAgent14SyncController_allSyncedDeviceViews;
  v125 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_allSyncedDeviceViews);
  v126 = sub_10016A624();
  dispatch thunk of UniversalControlDevice.id.getter(v126);
  sub_10016AE20();
  if (v116)
  {
    sub_10002D89C();
    v127 = v120;
  }
  else
  {
    v121 = 0;
    v127 = 0;
  }
  sub_100040544();
  v128 = sub_1001549CC(v216, (unint64_t)v219, v114, v125, v121, v127, v116 == 0, v192, (uint64_t)v205);
  sub_1000267C4();
  sub_10000E568();
  *(_QWORD *)(v1 + v124) = v128;
  sub_100043360();
  sub_10000E420();
  v129 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_devices);
  v130 = sub_10005FFC0();
  v131 = sub_10016B014(v130);
  sub_100154C2C(v131, v132, v129, v125, v128);
  v134 = v133;
  sub_10000E594();
  sub_10002D860();
  v135 = sub_10016AFC4();
  v212 = sub_100154CB0(v135, v136, v134);
  sub_1000714A4(v212, v129);
  if ((v137 & 1) == 0)
  {
    sub_1001509BC();
    sub_10016A0D0((uint64_t)&qword_1002B2970);
    sub_10016A3A4();
    sub_100043358();
    sub_10000B348();
    swift_bridgeObjectRetain(v212);
    sub_10014B3D0(v138);
  }
  sub_100022838((uint64_t)v214, v193, type metadata accessor for SyncView);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v203 + 16))(v197, v193 + *(int *)(v213 + 20) + (uint64_t)*(int *)(v210 + 32), v204);
  sub_10016ACAC(v193);
  sub_1001551B4(v129, v212, v209, (uint64_t)v217, v207, v216, v197, v195, v198, v219);
  sub_10016A0D0((uint64_t)&qword_1002B1240);
  v194 = v139;
  if ((dispatch thunk of static Equatable.== infix(_:_:)(v198, v197, v204, v139) & 1) == 0)
  {
    sub_10000B2F8((uint64_t)v214, (uint64_t)v225, 33);
    sub_100099C74(v198);
    sub_10016A650();
  }
  v140 = OBJC_IVAR____TtC13EnsembleAgent14SyncController_allSyncedDeviceLayouts;
  v141 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_allSyncedDeviceLayouts);
  v142 = sub_1000432E0();
  v143 = sub_10016B014(v142);
  v145 = sub_100155550(v143, v144, v198, v141, (uint64_t)v205);
  sub_10000E594();
  *(_QWORD *)(v1 + v140) = v145;
  sub_100040544();
  sub_10000E420();
  v146 = v1 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_layout;
  sub_10005FE28(v1 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_layout, (uint64_t)&v221);
  v147 = sub_10016ADB8();
  sub_10016B04C(v147, v148);
  sub_100155628((uint64_t)v217, v216, (void (*)(unsigned __int8 *, char *, uint64_t))v219, v129, v212, v199, (uint64_t)v145, v200);
  sub_10000E568();
  sub_10000E50C();
  sub_1000267C4();
  if ((dispatch thunk of static Equatable.== infix(_:_:)(v200, v199, v204, v194) & 1) == 0)
  {
    sub_1001509BC();
    sub_10016A0D0((uint64_t)&qword_1002B2970);
    sub_10016A3A4();
    sub_100043358();
    sub_10000B348();
    sub_10000B2F8(v146, (uint64_t)v225, 33);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v203 + 24))(v146, v200, v204);
    sub_10016A650();
  }
  v149 = OBJC_IVAR____TtC13EnsembleAgent14SyncController_connectedLinks;
  v150 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_connectedLinks);
  sub_10016B04C(v188, v200);
  _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v188, 0, 1, v204);
  v151 = sub_100040544();
  v152 = dispatch thunk of UniversalControlDevice.id.getter(v151);
  v154 = sub_1001566F0(v188, v152, v153, v150);
  sub_10000E568();
  sub_100025A28(v188, (uint64_t *)&unk_1002B3350);
  *(_QWORD *)(v1 + v149) = v154;
  v206 = v154;
  sub_100043360();
  sub_10000E420();
  v155 = OBJC_IVAR____TtC13EnsembleAgent14SyncController_configuredDevices;
  v156 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_configuredDevices);
  v157 = sub_10002D9F8();
  v158 = dispatch thunk of UniversalControlDevice.id.getter(v157);
  v160 = sub_100156C98((uint64_t)v217, v158, v159, v156, v134);
  sub_10000E568();
  if ((sub_100198A54((uint64_t)v160, v156) & 1) == 0)
  {
    sub_1001509BC();
    sub_10016A0D0((uint64_t)&qword_1002B2970);
    sub_10016A3A4();
    sub_100043358();
    sub_10000B348();
    *(_QWORD *)(v1 + v155) = v160;
    sub_10016A970();
    sub_10000E420();
  }
  v161 = v1 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_connectedDevicesMessageHandler;
  sub_10005FE28(v1 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_connectedDevicesMessageHandler, (uint64_t)&v220);
  sub_100022838(v161, v201, type metadata accessor for ConnectedDevices);
  v163 = dispatch thunk of UniversalControlDevice.id.getter(v162);
  sub_100156E78(v196, v208, v201, v207, v216, v156, (uint64_t)v160, v163, v202, v164);
  sub_100075850();
  sub_10002D89C();
  sub_1000267C4();
  sub_10002D860();
  sub_10000E50C();
  sub_10000B2F8(v161, (uint64_t)v225, 33);
  v165 = sub_100141158();
  sub_100167F54(v165, v166);
  sub_10016A650();
  v167 = (uint64_t *)&v214[*(int *)(v213 + 20) + (uint64_t)*(int *)(v210 + 24)];
  v168 = *v167;
  v169 = v167[1];
  sub_10016A970();
  sub_10016A624();
  v170 = sub_1001571C8(v202, v168, v169);
  v172 = v171;
  v173 = sub_100145370(v170, v171, v168, v169);
  sub_10002D860();
  sub_100075850();
  if ((v173 & 1) == 0)
  {
    sub_1001509BC();
    sub_10016A0D0((uint64_t)&qword_1002B2970);
    sub_10016A3A4();
    sub_100043358();
    sub_10000B348();
    sub_10000B2F8((uint64_t)v214, (uint64_t)v225, 33);
    sub_100099AD8(v170, v172);
    sub_10016A650();
  }
  sub_10002D89C();
  sub_10000E568();
  v174 = OBJC_IVAR____TtC13EnsembleAgent14SyncController_magicEdgesEnabled;
  v175 = sub_100157488(*(_BYTE *)(v1 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_magicEdgesEnabled)) & 1;
  *(_BYTE *)(v1 + v174) = v175;
  v176 = OBJC_IVAR____TtC13EnsembleAgent14SyncController_preferredDevice;
  v177 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_preferredDevice);
  sub_1000088D0();
  v178 = sub_100157600(v216, v212, v175, v177);
  sub_10000E594();
  *(_QWORD *)(v1 + v176) = v178;
  swift_retain();
  sub_10000B348();
  v179 = OBJC_IVAR____TtC13EnsembleAgent14SyncController_magicLinks;
  v180 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_magicLinks);
  sub_10016A624();
  v181 = sub_100157B58((uint64_t)v217, v206, (uint64_t)v219, v175, v180, v178);
  sub_10000E568();
  sub_10000E50C();
  sub_1000716D4((uint64_t)v181, v180);
  LOBYTE(v177) = v182;
  sub_10002D860();
  if ((v177 & 1) == 0)
  {
    sub_1001509BC();
    sub_10016A0D0((uint64_t)&qword_1002B2970);
    sub_10016A3A4();
    sub_100043358();
    sub_10000B348();
    *(_QWORD *)(v1 + v179) = v181;
  }
  sub_10000E594();
  memcpy(v225, v214, 0x71uLL);
  if (!sub_100097948((uint64_t)v225, (uint64_t)v226))
    sub_1001500C4();
  sub_10014FBA4();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_10016ACAC(v202);
  sub_10016ACAC(v201);
  sub_10016AD30(v200);
  sub_10016AD30(v199);
  sub_10016AD30(v198);
  sub_10016AD30(v197);
  v187((uint64_t)v217, v190);
  v187(v209, v190);
  sub_10000E4E0();
}

uint64_t sub_10014DC48(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[24];

  v2 = v1;
  v4 = v1 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView;
  sub_10005FE28(v1 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView, (uint64_t)v17);
  v5 = v4 + *(int *)(sub_10016A480() + 20);
  v6 = *(_QWORD *)(v5 + *(int *)(sub_10016A508() + 28));
  v15 = a1;
  v16 = v6;
  type metadata accessor for UniversalControlDevice(0);
  sub_10016A0D0((uint64_t)&unk_1002AC0A0);
  result = sub_10016AF64((uint64_t)&v16, (uint64_t)&v15, v8, v7);
  if ((result & 1) == 0)
  {
    v10 = sub_10016AEC4(result);
    v12 = v11;
    v13 = sub_1000088D0();
    v14 = dispatch thunk of UniversalControlDevice.id.getter(v13);
    sub_10000B348();
    result = sub_10016AEA8(v10, v12, v14);
    if (result)
    {
      __break(1u);
    }
    else
    {
      *(_QWORD *)(v2 + OBJC_IVAR____TtC13EnsembleAgent14SyncController__localDevice) = a1;
      sub_10002679C();
      sub_10000B348();
      sub_10014C8D0();
      return sub_10014FBA4();
    }
  }
  return result;
}

uint64_t sub_10014DD6C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v49;
  char *v50;
  __int128 v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  _BOOL4 v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74[2];

  v59 = a1;
  v54 = type metadata accessor for UUID(0);
  v53 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v52 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain(a2);
  v5 = sub_100058264(v4);
  swift_bridgeObjectRelease(a2);
  v74[0] = v5;
  sub_100160638(v74);
  v7 = v74[0];
  if (v74[0] < 0 || (v74[0] & 0x4000000000000000) != 0)
    goto LABEL_19;
  v8 = *(_QWORD *)(v74[0] + 16);
  while (v8)
  {
    v58 = v7 & 0xC000000000000001;
    v9 = 4;
    *(_QWORD *)&v6 = 136446722;
    v51 = v6;
    v50 = (char *)&type metadata for Any + 8;
    v56 = v8;
    v57 = v7;
    while (1)
    {
      if (v58)
      {
        v10 = (unsigned __int8 *)specialized _ArrayBuffer._getElementSlowPath(_:)(v9 - 4, v7);
      }
      else
      {
        v10 = *(unsigned __int8 **)(v7 + 8 * v9);
        swift_retain(v10);
      }
      if (__OFADD__(v9 - 4, 1))
        break;
      v73 = v9 - 3;
      v11 = v10[40];
      v12 = v10[42];
      v13 = v10[43];
      v14 = v10[44];
      v15 = v10[45];
      v16 = v10[46];
      v17 = v10[47];
      v18 = v10[48];
      v19 = v10[49];
      v20 = v10[50];
      v21 = v10[51];
      v22 = v10[52];
      v23 = v10[53];
      v24 = v10[54];
      v25 = v10[55];
      v70 = v10[41];
      v71 = v11;
      v68 = v13;
      v69 = v12;
      v66 = v15;
      v67 = v14;
      v64 = v18;
      v65 = v16;
      v62 = v20;
      v63 = v19;
      v60 = v22;
      v61 = v21;
      sub_10018F420(v11 | (v70 << 8) | (v12 << 16) | (v13 << 24) | (v14 << 32) | (v15 << 40) | (v16 << 48) | (v17 << 56), v18 | (v19 << 8) | (v20 << 16) | (v21 << 24) | (v22 << 32) | (v23 << 40) | (v24 << 48) | (v25 << 56), v59);
      v72 = v26;
      sub_1000F4418();
      v28 = v27;
      if (v27)
        swift_release();
      if (qword_1002A98F8 != -1)
        swift_once(&qword_1002A98F8, sub_10014C200);
      v29 = type metadata accessor for Logger(0);
      v30 = sub_100006FB4(v29, (uint64_t)qword_1002B2A80);
      v31 = Logger.logObject.getter(v30);
      v33 = static os_log_type_t.default.getter(v31, v32);
      if (os_log_type_enabled(v31, v33))
      {
        v55 = v28 != 0;
        v34 = swift_slowAlloc(24, -1);
        v35 = swift_slowAlloc(32, -1);
        v74[0] = v35;
        *(_DWORD *)v34 = v51;
        v36 = v52;
        v37 = UUID.init(uuid:)(v71, v70, v69, v68, v67, v66);
        v38 = UUID.uuidString.getter(v37);
        v40 = v39;
        (*(void (**)(char *, uint64_t))(v53 + 8))(v36, v54);
        v41 = sub_1000599D0(8, v38, v40);
        v43 = v42;
        v44 = static String._fromSubstring(_:)(v41);
        v46 = v45;
        swift_bridgeObjectRelease(v43);
        *(_QWORD *)(v34 + 4) = sub_100006FCC(v44, v46, v74);
        swift_bridgeObjectRelease(v46);
        *(_WORD *)(v34 + 12) = 1024;
        *(_DWORD *)(v34 + 14) = v72 & 1;
        *(_WORD *)(v34 + 18) = 1024;
        *(_DWORD *)(v34 + 20) = v55;
        _os_log_impl((void *)&_mh_execute_header, v31, v33, "IDS %{public}s: available=%{BOOL}d, valid=%{BOOL}d", (uint8_t *)v34, 0x18u);
        swift_arrayDestroy(v35, 1, v50);
        swift_slowDealloc(v35, -1, -1);
        swift_slowDealloc(v34, -1, -1);
        swift_release();

      }
      else
      {

        swift_release();
      }
      v7 = v57;
      ++v9;
      if (v73 == v56)
        return swift_release();
    }
    __break(1u);
LABEL_19:
    swift_bridgeObjectRetain(v7);
    v8 = _CocoaArrayWrapper.endIndex.getter(v47);
    swift_release();
  }
  return swift_release();
}

uint64_t sub_10014E1D8()
{
  unint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  void (*v78)(uint64_t, char *, uint64_t);
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(uint64_t, uint64_t, uint64_t);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  char v94;
  char v95;
  char v96;
  uint64_t v97;
  uint64_t inited;
  uint64_t v99;
  char v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  int *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void (*v123)(uint64_t, uint64_t);
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  void *v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  uint64_t v151;
  id v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t (*v164)(uint64_t, _QWORD);
  uint64_t v165;
  uint64_t (*v166)(uint64_t, _QWORD);
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  _QWORD *v170;
  void (*v171)(_QWORD *, uint64_t);
  uint64_t v172;
  uint64_t v173;
  uint64_t (*v174)(uint64_t, _QWORD);
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  uint64_t v212;
  uint64_t v213;
  int v214;
  __int128 v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  uint64_t v224;
  unint64_t *v225;
  void (*v226)(uint64_t, char *, uint64_t);
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  _QWORD *v238;
  _QWORD *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t v249;
  unint64_t v250;
  unint64_t v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  void *v257;
  char *v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t v263;
  int *v264;
  uint64_t v265;
  _QWORD v266[3];
  _QWORD v267[3];
  uint64_t v268;
  void *v269;
  uint64_t v270;
  _BYTE v271[88];
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;

  sub_10002626C();
  v277 = v2;
  v278 = v3;
  v257 = v4;
  v265 = v5;
  v262 = v6;
  v261 = v7;
  v260 = v8;
  v263 = *v0;
  v9 = type metadata accessor for UniversalControlDiagnoseCategory(0);
  sub_1000A353C(v9, (uint64_t)v271);
  v243 = v10;
  sub_1000262EC();
  __chkstk_darwin(v11);
  sub_10000E5DC();
  v13 = sub_1000F0190(v12);
  v14 = type metadata accessor for DispatchTimeInterval(v13);
  sub_1000A353C(v14, (uint64_t)&v269);
  v240 = v15;
  sub_1000262EC();
  __chkstk_darwin(v16);
  v239 = (_QWORD *)((char *)&v216 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000A3464();
  __chkstk_darwin(v18);
  sub_100026A8C();
  v20 = sub_1000F0190(v19);
  v21 = type metadata accessor for DispatchTime(v20);
  sub_1000A353C(v21, (uint64_t)v267);
  v237 = v22;
  sub_1000262EC();
  __chkstk_darwin(v23);
  sub_10000E5DC();
  v25 = sub_1000F0190(v24);
  v26 = type metadata accessor for DispatchWorkItemFlags(v25);
  sub_1000A353C(v26, (uint64_t)v266);
  v235 = v27;
  sub_1000262EC();
  __chkstk_darwin(v28);
  v30 = sub_1000F0190((uint64_t)&v216 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  v31 = type metadata accessor for DispatchQoS(v30);
  sub_1000A353C(v31, (uint64_t)&v263);
  v234 = v32;
  sub_1000262EC();
  __chkstk_darwin(v33);
  sub_10000E5DC();
  v233 = v34;
  v35 = sub_10009A58C();
  sub_1000A353C(v35, (uint64_t)&v273);
  sub_1000262EC();
  __chkstk_darwin(v36);
  sub_10000E5DC();
  v38 = sub_1000F0190(v37);
  type metadata accessor for SyncView(v38);
  sub_1000262EC();
  __chkstk_darwin(v39);
  sub_10000E5DC();
  v41 = sub_1000F0190(v40);
  v42 = type metadata accessor for OS_dispatch_source.TimerFlags(v41);
  sub_1000A353C(v42, (uint64_t)&v258);
  v229 = v43;
  sub_1000262EC();
  __chkstk_darwin(v44);
  sub_10000E5DC();
  v46 = sub_1000F0190(v45);
  v47 = type metadata accessor for Logger(v46);
  sub_1000A353C(v47, (uint64_t)&v272);
  v255 = v48;
  sub_1000262EC();
  __chkstk_darwin(v49);
  sub_10000E5DC();
  v51 = sub_1000F0190(v50);
  v264 = (int *)type metadata accessor for ConnectedDevices(v51);
  sub_1000262EC();
  __chkstk_darwin(v52);
  sub_10000E5DC();
  v224 = v53;
  v54 = sub_100060154();
  sub_10016A76C();
  __chkstk_darwin(v55);
  sub_10003D69C();
  v228 = v56;
  sub_1000A3464();
  __chkstk_darwin(v57);
  v59 = (char *)&v216 - v58;
  v0[3] = 0;
  swift_unknownObjectWeakInit(v0 + 2, 0);
  *(unint64_t *)((char *)v0 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_configuredDevices) = (unint64_t)&_swiftEmptySetSingleton;
  *(unint64_t *)((char *)v0 + OBJC_IVAR____TtC13EnsembleAgent14SyncController__connections) = (unint64_t)&_swiftEmptySetSingleton;
  *(unint64_t *)((char *)v0 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_connections) = (unint64_t)&_swiftEmptySetSingleton;
  *(unint64_t *)((char *)v0 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_connectedLinks) = (unint64_t)_swiftEmptyArrayStorage;
  *(unint64_t *)((char *)v0 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_magicLinks) = (unint64_t)_swiftEmptyArrayStorage;
  *(unint64_t *)((char *)v0 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_devices) = (unint64_t)_swiftEmptyArrayStorage;
  v60 = (unint64_t *)((char *)v0 + OBJC_IVAR____TtC13EnsembleAgent14SyncController__sourceDevice);
  v60[1] = 0;
  v60[2] = 0;
  *v60 = 0;
  *((_BYTE *)v0 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_sleepState) = 0;
  *((_BYTE *)v0 + OBJC_IVAR____TtC13EnsembleAgent14SyncController__sleepState) = 0;
  v61 = OBJC_IVAR____TtC13EnsembleAgent14SyncController_allSyncedDeviceViews;
  v62 = sub_100033B3C();
  *(unint64_t *)((char *)v0 + v61) = sub_10016ADC4((uint64_t)_swiftEmptyArrayStorage, (uint64_t)&type metadata for UniversalControlDeviceID, (uint64_t)&unk_100283170);
  v63 = OBJC_IVAR____TtC13EnsembleAgent14SyncController_allSyncedDeviceLayouts;
  v64 = sub_10016ADC4((uint64_t)_swiftEmptyArrayStorage, (uint64_t)&type metadata for UniversalControlDeviceID, v259);
  *(unint64_t *)((char *)v0 + v63) = v64;
  *(unint64_t *)((char *)v0 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_preferredDevice) = 0;
  UniversalControlDisplayLayout.init()(v64);
  *((_BYTE *)v0 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_magicEdgesEnabled) = 0;
  v65 = OBJC_IVAR____TtC13EnsembleAgent14SyncController_syncCoordinators;
  v66 = type metadata accessor for SyncCoordinator(0);
  *(unint64_t *)((char *)v0 + v65) = sub_10016ADC4((uint64_t)_swiftEmptyArrayStorage, (uint64_t)&type metadata for UniversalControlDeviceID, v66);
  *(unint64_t *)((char *)v0 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_availableDevices) = (unint64_t)&_swiftEmptySetSingleton;
  *(unint64_t *)((char *)v0 + OBJC_IVAR____TtC13EnsembleAgent14SyncController__localDevice) = 0;
  v67 = OBJC_IVAR____TtC13EnsembleAgent14SyncController_peerCoordinators;
  v68 = type metadata accessor for P2PPeerCoordinator();
  v227 = v62;
  *(unint64_t *)((char *)v0 + v67) = sub_10016ADC4((uint64_t)_swiftEmptyArrayStorage, (uint64_t)&type metadata for UniversalControlDeviceID, v68);
  v69 = OBJC_IVAR____TtC13EnsembleAgent14SyncController_preferencesDiagnostics;
  v70 = type metadata accessor for UniversalControlPreferencesDiagnostics();
  *(unint64_t *)((char *)v0 + v69) = sub_1000088D8(v70, 16);
  v71 = OBJC_IVAR____TtC13EnsembleAgent14SyncController_configurationDiagnostics;
  v72 = type metadata accessor for UniversalControlConfigurationDiagnostics();
  *(unint64_t *)((char *)v0 + v71) = sub_1000088D8(v72, 16);
  v73 = OBJC_IVAR____TtC13EnsembleAgent14SyncController_hidDiagnostics;
  v74 = type metadata accessor for InputDevicesDiagnostics();
  v75 = sub_1000088D8(v74, 24);
  swift_weakInit(v75 + 16, 0);
  *(unint64_t *)((char *)v0 + v73) = v75;
  v76 = (unint64_t *)((char *)v0 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_sink);
  *v76 = 0;
  v76[1] = 0;
  v77 = (unint64_t *)((char *)v0 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_broadcastSink);
  *v77 = 0;
  v77[1] = 0;
  sub_10014F35C(v59);
  v242 = v1;
  v78 = *(void (**)(uint64_t, char *, uint64_t))(v1 + 16);
  v258 = v59;
  v259 = v54;
  v226 = v78;
  v78((uint64_t)v0 + OBJC_IVAR____TtC13EnsembleAgent14SyncController__configuration, v59, v54);
  v225 = v0;
  *(unint64_t *)((char *)v0 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_clientAssertionController) = v260;
  swift_retain();
  v80 = dispatch thunk of UniversalControlDevice.id.getter(v79);
  v82 = v81;
  if (qword_1002A98F8 != -1)
    swift_once(&qword_1002A98F8, sub_10014C200);
  v223 = HIBYTE(v82);
  v222 = HIWORD(v82);
  v221 = v82 >> 40;
  v220 = HIDWORD(v82);
  v219 = v82 >> 24;
  v218 = v82 >> 16;
  v253 = v82;
  sub_10016AE6C(v82 >> 8);
  v251 = HIBYTE(v80);
  v263 = HIWORD(v80);
  v249 = v80 >> 40;
  v248 = HIDWORD(v80);
  v247 = v80 >> 24;
  v83 = v80 >> 16;
  v250 = v80 >> 8;
  v84 = v256;
  v85 = sub_100006FB4(v256, (uint64_t)qword_1002B2A80);
  v86 = *(void (**)(uint64_t, uint64_t, uint64_t))(v255 + 16);
  v87 = v254;
  v86(v254, v85, v84);
  v88 = v264[6];
  v246 = v80;
  v89 = v224;
  v86(v224 + v88, v87, v84);
  v90 = sub_1000055B0((uint64_t *)&unk_1002ABD90);
  v91 = sub_1000088D8(v90, 48);
  v216 = xmmword_10021BBA0;
  *(_OWORD *)(v91 + 16) = xmmword_10021BBA0;
  *(_WORD *)(v91 + 32) = v80;
  v217 = v80 >> 16;
  *(_BYTE *)(v91 + 34) = BYTE2(v80);
  *(_BYTE *)(v91 + 35) = BYTE3(v80);
  *(_BYTE *)(v91 + 36) = BYTE4(v80);
  *(_BYTE *)(v91 + 37) = BYTE5(v80);
  *(_BYTE *)(v91 + 38) = v263;
  v92 = v89;
  v93 = v251;
  *(_BYTE *)(v91 + 39) = v251;
  *(_BYTE *)(v91 + 40) = v253;
  *(_BYTE *)(v91 + 41) = v252;
  v94 = v218;
  *(_BYTE *)(v91 + 42) = v218;
  v95 = v219;
  *(_BYTE *)(v91 + 43) = v219;
  LOBYTE(v87) = v220;
  *(_BYTE *)(v91 + 44) = v220;
  LOBYTE(v89) = v221;
  *(_BYTE *)(v91 + 45) = v221;
  v96 = v222;
  *(_BYTE *)(v91 + 46) = v222;
  LOBYTE(v84) = v223;
  *(_BYTE *)(v91 + 47) = v223;
  v97 = sub_1000055B0((uint64_t *)&unk_1002B3490);
  inited = swift_initStackObject(v97, v271);
  *(_OWORD *)(inited + 16) = v216;
  *(_BYTE *)(inited + 32) = v246;
  *(_BYTE *)(inited + 33) = v250;
  *(_BYTE *)(inited + 34) = v83;
  sub_10016ABC4();
  *(_BYTE *)(v99 + 35) = v100;
  *(_BYTE *)(v99 + 36) = v248;
  *(_BYTE *)(v99 + 37) = v249;
  *(_BYTE *)(v99 + 38) = v263;
  *(_BYTE *)(v99 + 39) = v93;
  v101 = v253;
  *(_BYTE *)(v99 + 40) = v253;
  v102 = v252;
  *(_BYTE *)(v99 + 41) = v252;
  *(_BYTE *)(v99 + 42) = v94;
  *(_BYTE *)(v99 + 43) = v95;
  *(_BYTE *)(v99 + 44) = v87;
  *(_BYTE *)(v99 + 45) = v89;
  *(_BYTE *)(v99 + 46) = v96;
  *(_BYTE *)(v99 + 47) = v84;
  *(_QWORD *)(v99 + 48) = 1;
  Dictionary.init(dictionaryLiteral:)(v99, &type metadata for UniversalControlDeviceID, &type metadata for UInt64, v227);
  sub_10016A9E0();
  *(_QWORD *)v92 = v103;
  *(_QWORD *)(v92 + 8) = v104;
  *(_BYTE *)(v92 + 16) = v246;
  *(_BYTE *)(v92 + 17) = v250;
  *(_BYTE *)(v92 + 18) = v217;
  sub_10016ABC4();
  *(_BYTE *)(v92 + 19) = v105;
  *(_BYTE *)(v92 + 20) = v248;
  *(_BYTE *)(v92 + 21) = v249;
  v106 = v264;
  *(_BYTE *)(v92 + 22) = v263;
  *(_BYTE *)(v92 + 23) = v251;
  *(_BYTE *)(v92 + 24) = v101;
  *(_BYTE *)(v92 + 25) = v102;
  *(_BYTE *)(v92 + 26) = v94;
  *(_BYTE *)(v92 + 27) = v95;
  *(_BYTE *)(v92 + 28) = v87;
  *(_BYTE *)(v92 + 29) = v89;
  *(_BYTE *)(v92 + 30) = v96;
  *(_BYTE *)(v92 + 31) = v84;
  *(_QWORD *)(v92 + v106[7]) = _swiftEmptyArrayStorage;
  v107 = (_QWORD *)(v92 + v106[8]);
  *v107 = v108;
  v107[1] = v91;
  sub_1000EFF78(v254, *(uint64_t (**)(uint64_t, _QWORD))(v255 + 8));
  v109 = (uint64_t)v225;
  v110 = (uint64_t)v225 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_connectedDevicesMessageHandler;
  sub_10005F3FC(v92, (uint64_t)v225 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_connectedDevicesMessageHandler, type metadata accessor for ConnectedDevices);
  v112 = sub_10002D82C(v111, (unint64_t *)&qword_1002AAF50, OS_dispatch_source_ptr);
  v113 = sub_10002D82C(v112, (unint64_t *)&qword_1002AA660, OS_dispatch_queue_ptr);
  v114 = (void *)static OS_dispatch_queue.main.getter(v113);
  v266[0] = _swiftEmptyArrayStorage;
  sub_10016A0D0((uint64_t)&unk_1002AC3B0);
  v116 = v115;
  v117 = sub_10003B038();
  sub_10016AEDC((uint64_t)&qword_1002AC3C0);
  sub_10016ACD4();
  v118 = v230;
  dispatch thunk of SetAlgebra.init<A>(_:)(v119, v117, v120, v230, v116);
  v121 = static OS_dispatch_source.makeTimerSource(flags:queue:)(v102, v114);

  v122 = sub_10016ABEC();
  v123(v122, v118);
  *(_QWORD *)(v109 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_connectedDevicesMessageHandlerTimer) = v121;
  *(_QWORD *)(v109 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_enablementController) = v262;
  *(_QWORD *)(v109 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_discoveryController) = v261;
  v124 = v228;
  v226(v228, v258, v259);
  sub_10005FE28(v110, (uint64_t)&v270);
  v125 = (uint64_t *)(v110 + v264[8]);
  v126 = *v125;
  v127 = v125[1];
  sub_1000269EC();
  sub_1000600C0();
  sub_10003AFBC();
  sub_100043360();
  v128 = v265;
  v129 = sub_1000269EC();
  v130 = v232;
  UniversalControlDisplayLayout.init()(v129);
  v131 = v231;
  sub_1000987F4(v124, v126, v127, v128, v130, 0, 0, 0, v231, (uint64_t)&_swiftEmptySetSingleton);
  sub_10005F3FC(v131, v109 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView, type metadata accessor for SyncView);
  v132 = v257;
  *(_QWORD *)(v109 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_preferences) = v257;
  v133 = type metadata accessor for SyncCircleController();
  sub_1000088D8(v133, 41);
  v264 = v132;
  *(_QWORD *)(v109 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_syncCircleController) = sub_100033BB8();
  sub_10016AC24(OBJC_IVAR____TtC13EnsembleAgent14SyncController_hidDiagnostics);
  swift_weakAssign(*(_QWORD *)(v109 + v134) + 16, v109);
  v135 = sub_1000088D8((uint64_t)&unk_10028DC90, 24);
  sub_10000F674(v135);
  v136 = sub_1000269EC();
  v137 = (void *)static OS_dispatch_queue.main.getter(v136);
  v138 = sub_1000C8454(v137, (uint64_t)sub_10016851C, v135);
  v140 = v139;
  sub_10000FF50();
  v141 = (_QWORD *)(v109 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_broadcastSink);
  v263 = (unint64_t)v138;
  *v141 = v138;
  v141[1] = v140;
  sub_100043360();
  swift_unknownObjectRetain(v140);
  sub_10016B138();
  v142 = sub_10002D790();
  v143 = (void *)static OS_dispatch_queue.main.getter(v142);
  v144 = sub_1000088D8((uint64_t)&unk_10028DCB8, 32);
  *(_QWORD *)(v144 + 24) = &off_10028DB80;
  swift_unknownObjectWeakInit(v144 + 16, v109);
  sub_1000269EC();
  v145 = sub_1000C8454(v143, (uint64_t)sub_10002D0D4, v144);
  v147 = v146;
  sub_10000FF50();
  sub_10002645C();
  v269 = v145;
  v148 = type metadata accessor for EnablementController();
  sub_10016A0D0((uint64_t)&unk_1002B34A0);
  sub_100060054();
  dispatch thunk of ObservableObject.objectWillChange.getter(v148);
  v268 = v266[0];
  v149 = sub_1000088D8((uint64_t)&unk_10028DCE0, 24);
  *(_QWORD *)(v149 + 16) = v147;
  type metadata accessor for ObservableObjectPublisher(0);
  swift_unknownObjectRetain_n(v147, 2);
  sub_10016A7FC((uint64_t)sub_10005E230, v149);
  sub_1000269A0();
  sub_10005FF28();
  sub_10006005C();
  sub_100041108();
  sub_10002DA70();
  sub_10000B348();
  v150 = *(void **)(v109 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_preferences);
  v151 = sub_10016AF84();
  sub_10016A0D0((uint64_t)&qword_1002AC1C0);
  v152 = v150;
  dispatch thunk of ObservableObject.objectWillChange.getter(v151);
  v268 = v266[0];
  v153 = sub_1000088D8((uint64_t)&unk_10028DD08, 24);
  sub_10016A7E0(v153);
  sub_10016A7FC((uint64_t)sub_10005FDC0, v153);
  sub_10006005C();
  sub_10005FF28();

  sub_1000269A0();
  sub_10002DA70();
  sub_10000B348();
  type metadata accessor for DiscoveryController();
  sub_10016A0D0((uint64_t)&unk_1002B2960);
  sub_100060054();
  sub_10016AA14();
  v268 = v266[0];
  v154 = sub_1000088D8((uint64_t)&unk_10028DD30, 24);
  sub_10016A7E0(v154);
  sub_10016A7FC((uint64_t)sub_10005FDC0, v154);
  sub_100041108();
  sub_10005FF28();
  sub_10006005C();
  sub_1000269A0();
  sub_10002DA70();
  sub_10000B348();
  type metadata accessor for ClientAssertionController();
  sub_10016A0D0((uint64_t)&unk_1002AC190);
  sub_100060054();
  sub_10016AA14();
  v268 = v266[0];
  v155 = sub_1000088D8((uint64_t)&unk_10028DD58, 24);
  sub_10016A7E0(v155);
  sub_10016A7FC((uint64_t)sub_10005FDC0, v155);
  sub_100041108();
  sub_10005FF28();
  sub_10006005C();
  sub_1000269A0();
  sub_10002DA70();
  sub_10000B348();
  v156 = v269;
  swift_getObjectType(v147);
  swift_unknownObjectRetain(v147);
  sub_100043360();
  OS_dispatch_source_data_add.add(data:)(1uLL);
  sub_10002DA70();
  sub_10000E594();
  v157 = (_QWORD *)(v109 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_sink);
  *v157 = v156;
  v157[1] = v147;
  swift_unknownObjectRetain(v147);
  sub_100043360();
  sub_10016B138();
  v158 = sub_100008904();
  v159 = sub_1000088D8((uint64_t)&unk_10028DC90, 24);
  sub_10000F674(v159);
  v267[1] = sub_100168564;
  v267[2] = v159;
  v266[0] = _NSConcreteStackBlock;
  v266[1] = 1107296256;
  v266[2] = sub_10000E610;
  v267[0] = &unk_10028DD70;
  v160 = _Block_copy(v266);
  sub_10002679C();
  sub_10016ACD4();
  j___s8Dispatch0A3QoSV11unspecifiedACvgZ(v158);
  sub_10002DEB8();
  v161 = sub_10016AE90();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)(v161, v162, v160, v158);
  _Block_release(v160);
  v163 = sub_10016ABFC();
  sub_1000EFF78(v163, v164);
  v165 = sub_10016ABEC();
  sub_1000EFF78(v165, v166);
  sub_1000269A0();
  sub_10000B348();
  v167 = sub_100008904();
  v168 = v236;
  static DispatchTime.distantFuture.getter(v167);
  v169 = v238;
  sub_10007A0C4();
  v170 = v239;
  sub_10007A0F4(v239);
  OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v168, v169, v170, v167);
  v171 = *(void (**)(_QWORD *, uint64_t))(v240 + 8);
  v172 = v241;
  v171(v170, v241);
  v171(v169, v172);
  v173 = sub_10016ABFC();
  sub_1000EFF78(v173, v174);
  sub_100008904();
  sub_10002D988();
  OS_dispatch_source.activate()();
  sub_10000F718();
  v175 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v243 + 104))(v244, enum case for UniversalControlDiagnoseCategory.sync(_:), v245);
  v176 = UniversalControlDiagnoseCategory.code.getter(v175);
  sub_100126B74(v109, (uint64_t)"com.apple.universalcontrol", 26, 2, v176, v177, v178);
  v179 = sub_10016A6C8();
  v180 = sub_10016A8A8(v179, enum case for UniversalControlDiagnoseCategory.preferences(_:));
  UniversalControlDiagnoseCategory.code.getter(v180);
  v181 = sub_10016A3E8();
  sub_100126B48(v181, v182, v183, v184, v185, v186, v187);
  v188 = sub_10016A6C8();
  v189 = sub_10016A8A8(v188, enum case for UniversalControlDiagnoseCategory.config(_:));
  UniversalControlDiagnoseCategory.code.getter(v189);
  v190 = sub_10016A3E8();
  sub_100126B1C(v190, v191, v192, v193, v194, v195, v196);
  v197 = sub_10016A6C8();
  sub_10016A8A8(v197, enum case for UniversalControlDiagnoseCategory.hid(_:));
  v198 = sub_1000269EC();
  UniversalControlDiagnoseCategory.code.getter(v198);
  v199 = sub_10016A3E8();
  sub_100126AF0(v199, v200, v201, v202, v203, v204, v205);
  sub_10000FF50();
  v206 = sub_10016A6C8();
  v207 = sub_10016A8A8(v206, enum case for UniversalControlDiagnoseCategory.circle(_:));
  UniversalControlDiagnoseCategory.code.getter(v207);
  v208 = sub_10016A3E8();
  sub_100126AC4(v208, v209, v210, v211, v212, v213, v214);
  swift_unknownObjectRelease(v140);
  swift_bridgeObjectRelease();
  sub_1001412E8((uint64_t)&v274);
  sub_1001412E8((uint64_t)&v275);
  sub_1001412E8((uint64_t)&v276);
  swift_release();

  sub_10016A6C8();
  sub_10002DA70();
  sub_10000E420();
  sub_1000EFF78((uint64_t)v258, *(uint64_t (**)(uint64_t, _QWORD))(v242 + 8));
  return v109;
}

void sub_10014F35C(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  void (*v40)(char *, uint64_t);
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t, uint64_t);
  char *v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  char *v49;
  uint64_t v50;
  NSObject *v51;
  uint64_t v52;
  os_log_type_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  __n128 v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  os_log_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  os_log_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  void (*v88)(char *, uint64_t, uint64_t);
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92[2];

  v89 = a1;
  v1 = type metadata accessor for UUID(0);
  v85 = *(_QWORD *)(v1 - 8);
  v86 = v1;
  __chkstk_darwin(v1);
  v84 = (char *)&v80 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for UniversalControlConfiguration(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v87 = (char *)&v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v80 - v8;
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v80 - v11;
  __chkstk_darwin(v10);
  v14 = (char *)&v80 - v13;
  v15 = sub_1000055B0(&qword_1002B33B0);
  v16 = __chkstk_darwin(v15);
  v88 = (void (*)(char *, uint64_t, uint64_t))((char *)&v80 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v80 - v19;
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v80 - v22;
  v24 = UniversalControlPreferences.configuration.getter(v21);
  v25 = (uint64_t)v23;
  v90 = UniversalControlPreferences.configurationID.getter(v24);
  v27 = v26;
  sub_1000FB4A8((uint64_t)v23, (uint64_t)v20, &qword_1002B33B0);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v20, 1, v3) != 1)
  {
    v82 = v9;
    v32 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    v32(v14, v20, v3);
    v33 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 16))(v12, v14, v3);
    v34 = v27;
    if (v27 >> 60 == 15)
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v12, v3);
    }
    else
    {
      v83 = v25;
      v35 = UniversalControlConfiguration.digest.getter(v33);
      v37 = v36;
      v38 = v90;
      sub_100025168(v90, v34);
      sub_10002517C(v35, v37);
      v39 = static Data.== infix(_:_:)(v35, v37, v38, v34);
      sub_100022AD8(v38, v34);
      sub_100022AEC(v35, v37);
      v40 = *(void (**)(char *, uint64_t))(v4 + 8);
      v40(v12, v3);
      v41 = v37;
      v25 = v83;
      sub_100022AD8(v35, v41);
      if ((v39 & 1) == 0)
      {
        v28 = v4;
        v29 = v3;
        v40(v14, v3);
        v31 = v89;
        v30 = v90;
        v9 = v82;
        v27 = v34;
        goto LABEL_9;
      }
    }
    sub_100025A28(v25, &qword_1002B33B0);
    sub_100022AD8(v90, v34);
    v32(v89, v14, v3);
    return;
  }
  v28 = v4;
  v29 = v3;
  sub_100025A28((uint64_t)v20, &qword_1002B33B0);
  v31 = v89;
  v30 = v90;
  if (v27 >> 60 == 15)
    goto LABEL_11;
LABEL_9:
  sub_10002517C(v30, v27);
  sub_10002517C(v30, v27);
  v42 = (uint64_t)v88;
  UniversalControlConfiguration.init(parent:)(v30, v27);
  _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v42, 0, 1, v29);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v42, 1, v29) == 1)
  {
    sub_100022AD8(v30, v27);
    sub_100025A28(v42, &qword_1002B33B0);
LABEL_11:
    UniversalControlConfiguration.init()();
    sub_100022AD8(v30, v27);
    sub_100025A28(v25, &qword_1002B33B0);
    return;
  }
  v83 = v25;
  v43 = v28;
  v44 = v42;
  v45 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 32);
  v46 = v9;
  v45(v9, v44, v29);
  if (qword_1002A98F8 != -1)
    swift_once(&qword_1002A98F8, sub_10014C200);
  v47 = type metadata accessor for Logger(0);
  sub_100006FB4(v47, (uint64_t)qword_1002B2A80);
  v48 = *(void (**)(char *, char *, uint64_t))(v28 + 16);
  v49 = v87;
  v48(v87, v9, v29);
  sub_100025168(v30, v27);
  v50 = sub_10002517C(v30, v27);
  v51 = Logger.logObject.getter(v50);
  v53 = static os_log_type_t.default.getter(v51, v52);
  LODWORD(v89) = v53;
  v54 = v43;
  if (os_log_type_enabled(v51, v53))
  {
    v55 = swift_slowAlloc(22, -1);
    v56 = swift_slowAlloc(64, -1);
    v82 = (char *)v56;
    v92[0] = v56;
    *(_DWORD *)v55 = 136446466;
    v90 = v29;
    v80 = v55 + 4;
    v81 = v51;
    v57 = UniversalControlConfiguration.id.getter(v56);
    v88 = v45;
    v58 = v84;
    v59 = UUID.init(uuid:)(v57, v57 >> 8, v57 >> 16, v57 >> 24, HIDWORD(v57), v57 >> 40);
    v60 = v49;
    v61 = v54;
    v62 = v30;
    v63 = UUID.uuidString.getter(v59);
    v65 = v64;
    (*(void (**)(char *, uint64_t))(v85 + 8))(v58, v86);
    v66 = sub_1000599D0(8, v63, v65);
    v68 = v67;
    v69 = static String._fromSubstring(_:)(v66);
    v71 = v70;
    swift_bridgeObjectRelease(v68);
    v91 = sub_100006FCC(v69, v71, v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, v92, v80);
    v72 = swift_bridgeObjectRelease(v71);
    (*(void (**)(char *, uint64_t, __n128))(v61 + 8))(v60, v90, v72);
    *(_WORD *)(v55 + 12) = 2082;
    sub_10002517C(v62, v27);
    v73 = Data.description.getter(v62, v27);
    v75 = v74;
    sub_100022AD8(v62, v27);
    v29 = v90;
    v91 = sub_100006FCC(v73, v75, v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, v92, v55 + 14);
    v76 = v75;
    v45 = v88;
    swift_bridgeObjectRelease(v76);
    sub_100022AD8(v62, v27);
    sub_100022AD8(v62, v27);
    v77 = v81;
    _os_log_impl((void *)&_mh_execute_header, v81, (os_log_type_t)v89, "Configuration Reset: %{public}s -> %{public}s", (uint8_t *)v55, 0x16u);
    v78 = v82;
    swift_arrayDestroy(v82, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v78, -1, -1);
    swift_slowDealloc(v55, -1, -1);

    sub_100022AD8(v62, v27);
    v79 = v62;
  }
  else
  {

    sub_100022AD8(v30, v27);
    sub_100022AD8(v30, v27);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v49, v29);
    sub_100022AD8(v30, v27);
    v79 = v30;
  }
  sub_100022AD8(v79, v27);
  sub_100025A28(v83, &qword_1002B33B0);
  v45(v31, (uint64_t)v46, v29);
}

uint64_t sub_10014FAAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  _QWORD *v4;
  _BYTE v5[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v5, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v3 = type metadata accessor for Completion();
    swift_allocObject(v3, 48, 7);
    v4 = Completion.init(file:line:)();
    sub_10015068C((uint64_t)v4);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_10014FB50(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v3[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v3, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    sub_10014B0A0();
    return swift_release();
  }
  return result;
}

uint64_t sub_10014FBA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_broadcastSink);
  if (v1)
  {
    sub_10016A4B8(v0 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_broadcastSink);
    sub_1000103C0();
    sub_10002D988();
    sub_10016A524();
    sub_10000F718();
    return sub_10016A904(v1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10014FBF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  sub_10002626C();
  v3 = v0;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  sub_10000E440();
  sub_10003B160();
  __chkstk_darwin(v10);
  sub_100065E48();
  v11 = (uint64_t *)(v0 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_syncCoordinators);
  sub_10005FE28(v0 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_syncCoordinators, (uint64_t)&v59);
  v12 = *v11;
  sub_1000103C0();
  v13 = sub_1001243CC();
  sub_100041C38(v13, v14, v12);
  v16 = v15;
  v17 = sub_10000E410();
  if (!v16)
  {
    sub_10002D82C(v17, (unint64_t *)&qword_1002AAB80, NSError_ptr);
    sub_10016A990();
    v48 = NSError.init(NSOSStatusErrorDomain:debugDescription:__file:__line:)(v42, v43, v44, v45, v46, v47, 432);
    Completion.callAsFunction(_:)((uint64_t)v48);

LABEL_10:
    sub_10000E4E0();
    return;
  }
  sub_1001500C4();
  v18 = v3 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView;
  sub_10005FE28(v3 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView, (uint64_t)&v58);
  v19 = *(_QWORD *)(v18 + *(int *)(sub_10016A480() + 24));
  sub_10016A508();
  sub_100040544();
  v20 = sub_1000088D0();
  v21 = dispatch thunk of UniversalControlDevice.id.getter(v20);
  v23 = v22;
  sub_10000B348();
  sub_1000F42D8(v21, v23, v19);
  v55 = v24;
  sub_10000E568();
  if (qword_1002A98F8 != -1)
    swift_once(&qword_1002A98F8, sub_10014C200);
  v25 = sub_10000F6E4();
  v26 = sub_10005FE9C(v25, (uint64_t)qword_1002B2A80);
  v28 = static os_log_type_t.default.getter(v26, v27);
  if (os_log_type_enabled(v26, v28))
  {
    v54 = v5;
    v29 = sub_10000797C(22);
    v53 = sub_10000797C(32);
    v57 = v53;
    *(_DWORD *)v29 = 136446466;
    sub_10016AC24(v29 + 4);
    v30 = UUID.init(uuid:)(v9, v9 >> 8, v9 >> 16, v9 >> 24, HIDWORD(v9), v9 >> 40);
    UUID.uuidString.getter(v30);
    v32 = v31;
    sub_1000EFF78(v1, *(uint64_t (**)(uint64_t, _QWORD))(v2 + 8));
    v33 = sub_10016B12C();
    sub_1000599D0(v33, v34, v32);
    v35 = sub_1000602C0();
    sub_10000E420();
    v56 = sub_10016ADF4(v35, v36, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57, v52);
    sub_10000E4A0();
    *(_WORD *)(v29 + 12) = 2050;
    v37 = v55;
    v56 = v55;
    v38 = HIBYTE(v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57, v29 + 14);
    sub_100026A60((void *)&_mh_execute_header, v26, v28, "IDS %{public}s: === Sync Barrier Begin ('%{public}llu') ===", (uint8_t *)v29);
    sub_10016A7D4(v39, v40, (uint64_t)&type metadata for Any + 8);
    sub_100007958(v53);
    v41 = v29;
    v5 = v54;
    sub_100007958(v41);

  }
  else
  {

    v38 = HIBYTE(v7);
    v37 = v55;
  }
  v49 = sub_1000088D8((uint64_t)&unk_10028DC18, 56);
  *(_QWORD *)(v49 + 16) = v3;
  *(_QWORD *)(v49 + 24) = v9;
  *(_WORD *)(v49 + 32) = v7;
  *(_BYTE *)(v49 + 34) = BYTE2(v7);
  *(_BYTE *)(v49 + 35) = BYTE3(v7);
  *(_BYTE *)(v49 + 36) = BYTE4(v7);
  *(_BYTE *)(v49 + 37) = BYTE5(v7);
  *(_BYTE *)(v49 + 38) = BYTE6(v7);
  *(_BYTE *)(v49 + 39) = v38;
  *(_QWORD *)(v49 + 40) = v37;
  *(_QWORD *)(v49 + 48) = v5;
  v50 = type metadata accessor for Completion();
  sub_1000088D8(v50, 48);
  sub_10002679C();
  swift_retain(v5);
  v51 = Completion.init(file:line:body:)(0xD00000000000005DLL, 0x8000000100258AB0, 440, (uint64_t)sub_10016846C, v49);
  sub_1000F7E7C((uint64_t)v51);
  if (*(_QWORD *)(v3 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_sink))
  {
    sub_10016A4B8(v3 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_sink);
    sub_100043360();
    sub_10002D988();
    OS_dispatch_source_data_add.add(data:)(1uLL);
    swift_release();
    sub_10002645C();
    sub_10000F718();
    sub_10000E594();
    goto LABEL_10;
  }
  __break(1u);
}

void sub_1001500C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27[3];
  _BYTE v28[24];

  v1 = v0;
  v2 = v0 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView;
  swift_beginAccess(v0 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView, v28, 0, 0);
  v3 = type metadata accessor for SyncView(0);
  v4 = *(_QWORD *)(v2 + *(int *)(v3 + 24));
  swift_beginAccess(v2, v27, 33, 0);
  v5 = *(int *)(v3 + 24);
  v6 = *(_QWORD *)(v2 + v5);
  type metadata accessor for SyncViewLocalData(0);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v6);
  v8 = dispatch thunk of UniversalControlDevice.id.getter(v7);
  *(_QWORD *)(v2 + v5) = sub_100145194(v8, v9, v6);
  swift_endAccess(v27);
  swift_bridgeObjectRelease_n(v6, 2);
  if (qword_1002A98F8 != -1)
    swift_once(&qword_1002A98F8, sub_10014C200);
  v10 = type metadata accessor for Logger(0);
  sub_100006FB4(v10, (uint64_t)qword_1002B2A80);
  swift_retain_n(v0, 2);
  swift_bridgeObjectRetain(v4);
  v12 = Logger.logObject.getter(v11);
  v14 = static os_log_type_t.default.getter(v12, v13);
  if (os_log_type_enabled(v12, v14))
  {
    v15 = swift_slowAlloc(22, -1);
    v25 = swift_slowAlloc(64, -1);
    v27[0] = v25;
    *(_DWORD *)v15 = 136446466;
    swift_bridgeObjectRetain(v4);
    sub_10016F9F8();
    v17 = v16;
    v19 = v18;
    swift_bridgeObjectRelease(v4);
    v26 = sub_100006FCC(v17, v19, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, v27, v15 + 4);
    swift_bridgeObjectRelease_n(v4, 2);
    swift_bridgeObjectRelease(v19);
    *(_WORD *)(v15 + 12) = 2082;
    v20 = *(_QWORD *)(v2 + *(int *)(v3 + 24));
    swift_bridgeObjectRetain(v20);
    sub_10016F9F8();
    v22 = v21;
    v24 = v23;
    swift_bridgeObjectRelease(v20);
    v26 = sub_100006FCC(v22, v24, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, v27, v15 + 14);
    swift_release_n(v1, 2);
    swift_bridgeObjectRelease(v24);
    _os_log_impl((void *)&_mh_execute_header, v12, v14, "Increment Sync Clock: %{public}s -> %{public}s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy(v25, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v15, -1, -1);

  }
  else
  {

    swift_release_n(v1, 2);
    swift_bridgeObjectRelease_n(v4, 2);
  }
}

uint64_t sub_100150398(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  os_log_type_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD v37[7];
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49[2];

  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1002A98F8 != -1)
    swift_once(&qword_1002A98F8, sub_10014C200);
  v15 = type metadata accessor for Logger(0);
  v16 = sub_100006FB4(v15, (uint64_t)qword_1002B2A80);
  v17 = Logger.logObject.getter(v16);
  v19 = static os_log_type_t.default.getter(v17, v18);
  v20 = v19;
  if (os_log_type_enabled(v17, v19))
  {
    v41 = a3 >> 16;
    v42 = a3 >> 8;
    v39 = HIDWORD(a3);
    v40 = a3 >> 24;
    v37[6] = HIWORD(a3);
    v38 = a3 >> 40;
    v37[4] = a4 >> 8;
    v37[5] = HIBYTE(a3);
    v37[2] = a4 >> 24;
    v37[3] = a4 >> 16;
    v37[0] = a4 >> 40;
    v37[1] = HIDWORD(a4);
    v46 = a1;
    v45 = v20;
    v21 = swift_slowAlloc(22, -1);
    v44 = a5;
    v22 = v21;
    v23 = swift_slowAlloc(32, -1);
    v47 = a6;
    v24 = v23;
    v49[0] = v23;
    *(_DWORD *)v22 = 136446466;
    v43 = v22 + 4;
    v25 = UUID.init(uuid:)(a3, v42, v41, v40, v39, v38);
    v26 = UUID.uuidString.getter(v25);
    v28 = v27;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    v29 = sub_1000599D0(8, v26, v28);
    v31 = v30;
    v32 = static String._fromSubstring(_:)(v29);
    v34 = v33;
    swift_bridgeObjectRelease(v31);
    v35 = v32;
    a1 = v46;
    v48 = sub_100006FCC(v35, v34, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v43);
    swift_bridgeObjectRelease(v34);
    *(_WORD *)(v22 + 12) = 2050;
    v48 = v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v22 + 14);
    _os_log_impl((void *)&_mh_execute_header, v17, (os_log_type_t)v45, "IDS %{public}s: === Sync Barrier End ('%{public}llu') ===", (uint8_t *)v22, 0x16u);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v22, -1, -1);
  }

  return Completion.callAsFunction(_:)(a1);
}

uint64_t sub_10015068C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[24];

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_syncCoordinators);
  sub_10005FE28((uint64_t)v3, (uint64_t)v8);
  v4 = *v3;
  v5 = type metadata accessor for CompletionGroup();
  v6 = sub_1000088D8(v5, 32);
  sub_10003AFBC();
  sub_10002D790();
  sub_1000C55FC(v4, 0xD00000000000005DLL, 0x8000000100258AB0, 450, a1, v6);
  return swift_release();
}

void *sub_100150720()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v12;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_allSyncedDeviceViews);
  if (!*(_QWORD *)(v1 + 16))
    return &_swiftEmptySetSingleton;
  sub_100026954();
  sub_10003AFBC();
  v2 = sub_10016AEFC();
  if ((v3 & 1) == 0)
  {
    sub_10000E420();
    return &_swiftEmptySetSingleton;
  }
  v4 = *(_QWORD *)(v1 + 56) + 56 * v2;
  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(_QWORD *)(v4 + 32);
  v8 = *(_QWORD *)(v4 + 48);
  v12 = *(_BYTE *)(v4 + 40);
  sub_1000103C0();
  swift_bridgeObjectRetain();
  sub_10000E420();
  if (!v5)
    return &_swiftEmptySetSingleton;
  sub_1000103C0();
  v9 = sub_100141158();
  sub_100168414(v9, v10, v5, v6, v7, v12, v8);
  return (void *)v5;
}

void sub_1001507EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10000AEBC(v0 + 16);
  v1 = sub_100060154();
  sub_10002666C(v1);
  sub_100060268(OBJC_IVAR____TtC13EnsembleAgent14SyncController_configuredDevices);
  sub_100060268(OBJC_IVAR____TtC13EnsembleAgent14SyncController__connections);
  sub_100060268(OBJC_IVAR____TtC13EnsembleAgent14SyncController_connections);
  sub_1000255F0(v0 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_connectedDevicesMessageHandler, type metadata accessor for ConnectedDevices);
  swift_unknownObjectRelease(*(_QWORD *)(v0
                                       + OBJC_IVAR____TtC13EnsembleAgent14SyncController_connectedDevicesMessageHandlerTimer));
  sub_100060268(OBJC_IVAR____TtC13EnsembleAgent14SyncController_connectedLinks);
  sub_100060268(OBJC_IVAR____TtC13EnsembleAgent14SyncController_magicLinks);
  sub_10005FED8(OBJC_IVAR____TtC13EnsembleAgent14SyncController_syncCircleController);
  sub_100060268(OBJC_IVAR____TtC13EnsembleAgent14SyncController_devices);
  sub_100060268(OBJC_IVAR____TtC13EnsembleAgent14SyncController__sourceDevice);
  sub_100060268(OBJC_IVAR____TtC13EnsembleAgent14SyncController_allSyncedDeviceViews);
  sub_100060268(OBJC_IVAR____TtC13EnsembleAgent14SyncController_allSyncedDeviceLayouts);
  sub_10005FED8(OBJC_IVAR____TtC13EnsembleAgent14SyncController_preferredDevice);
  v2 = sub_10009A58C();
  sub_10002666C(v2);
  sub_100060268(OBJC_IVAR____TtC13EnsembleAgent14SyncController_syncCoordinators);
  sub_100060268(OBJC_IVAR____TtC13EnsembleAgent14SyncController_availableDevices);
  sub_1000255F0(v0 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView, type metadata accessor for SyncView);
  sub_10005FED8(OBJC_IVAR____TtC13EnsembleAgent14SyncController__localDevice);
  sub_10005FED8(OBJC_IVAR____TtC13EnsembleAgent14SyncController_enablementController);

  sub_10005FED8(OBJC_IVAR____TtC13EnsembleAgent14SyncController_clientAssertionController);
  sub_10005FED8(OBJC_IVAR____TtC13EnsembleAgent14SyncController_discoveryController);
  sub_100060268(OBJC_IVAR____TtC13EnsembleAgent14SyncController_peerCoordinators);
  sub_10005FED8(OBJC_IVAR____TtC13EnsembleAgent14SyncController_preferencesDiagnostics);
  sub_10005FED8(OBJC_IVAR____TtC13EnsembleAgent14SyncController_configurationDiagnostics);
  sub_10005FED8(OBJC_IVAR____TtC13EnsembleAgent14SyncController_hidDiagnostics);
  sub_100060270(OBJC_IVAR____TtC13EnsembleAgent14SyncController_sink);
  sub_100060270(OBJC_IVAR____TtC13EnsembleAgent14SyncController_broadcastSink);
  sub_1000050D4();
}

uint64_t sub_100150998()
{
  uint64_t v0;

  sub_1001507EC();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1001509BC()
{
  return type metadata accessor for SyncController(0);
}

uint64_t type metadata accessor for SyncController(uint64_t a1)
{
  uint64_t result;

  result = qword_1002B2B68;
  if (!qword_1002B2B68)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SyncController);
  return result;
}

uint64_t sub_1001509FC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD v7[33];

  v7[0] = &unk_100227A20;
  result = type metadata accessor for UniversalControlConfiguration(319);
  if (v3 <= 0x3F)
  {
    v7[1] = *(_QWORD *)(result - 8) + 64;
    v7[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v7[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v7[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
    result = type metadata accessor for ConnectedDevices(319);
    if (v4 <= 0x3F)
    {
      v7[5] = *(_QWORD *)(result - 8) + 64;
      v7[6] = &unk_100227A38;
      v7[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v7[8] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v7[9] = (char *)&value witness table for Builtin.NativeObject + 64;
      v7[10] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v7[11] = &unk_100227A50;
      v7[12] = &unk_100227A68;
      v7[13] = &unk_100227A68;
      v7[14] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v7[15] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v7[16] = &unk_100227A80;
      result = type metadata accessor for UniversalControlDisplayLayout(319);
      if (v5 <= 0x3F)
      {
        v7[17] = *(_QWORD *)(result - 8) + 64;
        v7[18] = &unk_100227A98;
        v7[19] = (char *)&value witness table for Builtin.BridgeObject + 64;
        v7[20] = (char *)&value witness table for Builtin.BridgeObject + 64;
        result = type metadata accessor for SyncView(319);
        if (v6 <= 0x3F)
        {
          v7[21] = *(_QWORD *)(result - 8) + 64;
          v7[22] = &unk_100227A80;
          v7[23] = (char *)&value witness table for Builtin.NativeObject + 64;
          v7[24] = (char *)&value witness table for Builtin.UnknownObject + 64;
          v7[25] = (char *)&value witness table for Builtin.NativeObject + 64;
          v7[26] = (char *)&value witness table for Builtin.NativeObject + 64;
          v7[27] = (char *)&value witness table for Builtin.BridgeObject + 64;
          v7[28] = (char *)&value witness table for Builtin.NativeObject + 64;
          v7[29] = (char *)&value witness table for Builtin.NativeObject + 64;
          v7[30] = (char *)&value witness table for Builtin.NativeObject + 64;
          v7[31] = &unk_100227AB0;
          v7[32] = &unk_100227AB0;
          return swift_updateClassMetadata2(a1, 256, 33, v7, a1 + 80);
        }
      }
    }
  }
  return result;
}

uint64_t sub_100150B60@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for SyncController(0);
  result = ObservableObject<>.objectWillChange.getter(v2);
  *a1 = result;
  return result;
}

uint64_t sub_100150B9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  os_log_type_t v35;
  int v36;
  uint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  __n128 v52;
  os_log_t v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56;
  os_log_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t EmptyRegion;
  __n128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __n128 v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  _QWORD v71[5];
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint8_t *v77;
  uint8_t *v78;
  os_log_t v79;
  uint8_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char v89[16];
  uint64_t v90;
  char v91[24];
  uint64_t v92;
  uint64_t v93;
  uint64_t v94[4];
  char v95;
  uint64_t v96;

  LODWORD(v78) = a3;
  v96 = type metadata accessor for UUID(0);
  v88 = *(_QWORD *)(v96 - 8);
  __chkstk_darwin(v96);
  v87 = (char *)v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = type metadata accessor for UniversalControlLink(0);
  v84 = *(_QWORD *)(v85 - 8);
  __chkstk_darwin(v85);
  v10 = (char *)v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = type metadata accessor for UniversalControlAnchor(0);
  v80 = *(uint8_t **)(v81 - 8);
  __chkstk_darwin(v81);
  v79 = (os_log_t)((char *)v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = type metadata accessor for UniversalControlLink.Endpoint(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = a2;
  v16 = *(_QWORD *)(a2 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_devices);
  v17 = a1;
  v90 = a1;
  swift_bridgeObjectRetain();
  v18 = sub_100148A14((uint64_t (*)(uint64_t *))sub_1001684B0, (uint64_t)v89, v16);
  v83 = v4;
  swift_bridgeObjectRelease();
  if ((v18 & 1) != 0)
  {
    v77 = (uint8_t *)a4;
    v20 = UniversalControlLink.endpoint2.getter(v19);
    UniversalControlLink.Endpoint.display.getter(v20);
    v21 = *(void (**)(char *, uint64_t))(v13 + 8);
    v21(v15, v12);
    v22 = v82;
    sub_100143ED8();
    sub_10005FA70((uint64_t)&v92, (uint64_t)v94, (uint64_t *)&unk_1002B2610);
    if (v95 == 1)
    {
      v24 = type metadata accessor for HotZone(0);
      v25 = (uint64_t)v77;
      v26 = 1;
    }
    else
    {
      v96 = v94[0];
      v88 = v94[1];
      v87 = (char *)v94[2];
      v86 = v94[3];
      v56 = UniversalControlLink.endpoint1.getter(v23);
      v57 = v79;
      UniversalControlLink.Endpoint.anchor.getter(v56);
      v58 = ((uint64_t (*)(char *, uint64_t))v21)(v15, v12);
      v59 = UniversalControlAnchor.edge.getter(v58);
      v60 = (*((uint64_t (**)(os_log_t, uint64_t))v80 + 1))(v57, v81);
      EmptyRegion = CGRegionCreateEmptyRegion(v60);
      swift_beginAccess(v22 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView, v91, 0, 0);
      type metadata accessor for SyncView(0);
      type metadata accessor for SyncViewLocalData(0);
      v62 = swift_retain();
      v63 = dispatch thunk of UniversalControlDevice.displays.getter(v62);
      swift_release();
      if ((unint64_t)v63 >> 62)
      {
        if (v63 < 0)
          v70 = v63;
        else
          v70 = v63 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain();
        v64 = _CocoaArrayWrapper.endIndex.getter(v70);
        swift_bridgeObjectRelease();
      }
      else
      {
        v64 = *(_QWORD *)((v63 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v82 = v17;
      if (v64)
      {
        if (v64 >= 1)
        {
          if ((v63 & 0xC000000000000001) != 0)
            v65 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v63);
          else
            swift_retain();
          dispatch thunk of UniversalControlDisplay.screenRect.getter(v65);
          __asm { BR              X8 }
        }
        __break(1u);
        JUMPOUT(0x100151574);
      }
      v66 = swift_bridgeObjectRelease();
      v67 = (uint64_t)v77;
      (*(void (**)(uint8_t *, uint64_t, uint64_t, __n128))(v84 + 16))(v77, v82, v85, v66);
      v24 = type metadata accessor for HotZone(0);
      *(_BYTE *)(v67 + *(int *)(v24 + 20)) = v78 & 1;
      *(_QWORD *)(v67 + *(int *)(v24 + 24)) = EmptyRegion;
      v25 = v67;
      v26 = 0;
    }
    return _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v25, v26, 1, v24);
  }
  else
  {
    v27 = v13;
    v86 = v12;
    if (qword_1002A98F8 != -1)
      swift_once(&qword_1002A98F8, sub_10014C200);
    v28 = type metadata accessor for Logger(0);
    sub_100006FB4(v28, (uint64_t)qword_1002B2A80);
    v29 = v84;
    v30 = a1;
    v31 = v85;
    v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v84 + 16))(v10, v30, v85);
    v33 = Logger.logObject.getter(v32);
    v35 = static os_log_type_t.default.getter(v33, v34);
    v36 = v35;
    if (os_log_type_enabled(v33, v35))
    {
      v37 = swift_slowAlloc(12, -1);
      LODWORD(v81) = v36;
      v38 = (uint8_t *)v37;
      v39 = swift_slowAlloc(32, -1);
      v82 = v39;
      v94[0] = v39;
      v80 = v38;
      *(_DWORD *)v38 = 136446210;
      v78 = v38 + 12;
      v77 = v38 + 4;
      v79 = v33;
      v40 = UniversalControlLink.endpoint2.getter(v39);
      v41 = UniversalControlLink.Endpoint.device.getter(v40);
      v76 = v41 >> 8;
      v75 = v41 >> 16;
      v74 = v41 >> 24;
      v73 = HIDWORD(v41);
      v72 = v41 >> 40;
      v71[4] = HIWORD(v41);
      v71[3] = HIBYTE(v41);
      v71[2] = v42 >> 8;
      v71[1] = v42 >> 16;
      v71[0] = v42 >> 24;
      (*(void (**)(char *, uint64_t))(v27 + 8))(v15, v86);
      v43 = v87;
      v44 = UUID.init(uuid:)(v41, v76, v75, v74, v73, v72);
      v45 = UUID.uuidString.getter(v44);
      v47 = v46;
      (*(void (**)(char *, uint64_t))(v88 + 8))(v43, v96);
      v48 = sub_1000599D0(8, v45, v47);
      v49 = static String._fromSubstring(_:)(v48);
      v51 = v50;
      swift_bridgeObjectRelease();
      v92 = sub_100006FCC(v49, v51, v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v77);
      v52 = swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t, __n128))(v84 + 8))(v10, v85, v52);
      v53 = v79;
      v54 = v80;
      _os_log_impl((void *)&_mh_execute_header, v79, (os_log_type_t)v81, "%{public}s: static links ignored, device not visible", v80, 0xCu);
      v55 = v82;
      swift_arrayDestroy(v82, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v55, -1, -1);
      swift_slowDealloc(v54, -1, -1);

    }
    else
    {
      (*(void (**)(char *, uint64_t))(v29 + 8))(v10, v31);

    }
    v69 = type metadata accessor for HotZone(0);
    return _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(a4, 1, 1, v69);
  }
}

BOOL sub_100151584()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v0 = type metadata accessor for UniversalControlLink.Endpoint(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = dispatch thunk of UniversalControlDevice.id.getter(v2);
  v7 = v6;
  v8 = UniversalControlLink.endpoint2.getter();
  v9 = UniversalControlLink.Endpoint.device.getter(v8);
  v11 = v10;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  return static UniversalControlUUID.compare(lhs:rhs:)(v5, v7, v9, v11) == 0;
}

uint64_t sub_100151658(uint64_t a1, uint64_t a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  double *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  os_log_type_t type[8];
  os_log_type_t typea;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  CGFloat MinX;
  uint64_t v79;
  char *v80[2];
  CGRect v81;
  CGRect v82;
  CGRect v83;
  CGRect v84;

  swift_bridgeObjectRetain(a1);
  sub_1000581D0();
  v4 = v3;
  swift_bridgeObjectRelease();
  v80[0] = v4;
  sub_1001604D0(v80);
  v5 = (uint64_t)v80[0];
  v71 = *((_QWORD *)v80[0] + 2);
  if (v71)
  {
    if ((unint64_t)a2 >> 62)
    {
LABEL_54:
      if (a2 < 0)
        v55 = a2;
      else
        v55 = a2 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a2);
      v6 = _CocoaArrayWrapper.endIndex.getter(v55);
      swift_bridgeObjectRelease();
    }
    else
    {
      v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v7 = 0;
    v57 = v5 + 32;
    v8 = a2 & 0xC000000000000001;
    v77 = a2;
    v56 = v5;
    v58 = v6;
    v59 = a2 & 0xC000000000000001;
    while (1)
    {
      if (v7 >= *(_QWORD *)(v5 + 16))
        goto LABEL_52;
      if (!v6)
        goto LABEL_41;
      v72 = v7;
      v9 = (double *)(v57 + (v7 << 6));
      v75 = *(unsigned int *)v9;
      v10 = *((unsigned __int8 *)v9 + 4);
      v11 = *((unsigned __int8 *)v9 + 5);
      v12 = v8;
      v13 = *((unsigned __int8 *)v9 + 6);
      v14 = *((unsigned __int8 *)v9 + 7);
      *(_QWORD *)type = *((unsigned int *)v9 + 2);
      v15 = *((unsigned __int8 *)v9 + 12);
      v16 = *((unsigned __int8 *)v9 + 13);
      v17 = *((unsigned __int8 *)v9 + 14);
      v18 = *((unsigned __int8 *)v9 + 15);
      v69 = *((unsigned int *)v9 + 4);
      v67 = *((unsigned __int8 *)v9 + 20);
      v66 = *((unsigned __int8 *)v9 + 21);
      v65 = *((unsigned __int8 *)v9 + 22);
      v64 = *((unsigned __int8 *)v9 + 23);
      v68 = *((unsigned int *)v9 + 6);
      v63 = *((unsigned __int8 *)v9 + 28);
      v62 = *((unsigned __int8 *)v9 + 29);
      v61 = *((unsigned __int8 *)v9 + 30);
      v60 = *((unsigned __int8 *)v9 + 31);
      v19 = v9[4];
      v20 = v9[5];
      v21 = v9[6];
      v22 = v9[7];
      if (v12)
      {
        swift_bridgeObjectRetain(v77);
        v23 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v77);
      }
      else
      {
        swift_bridgeObjectRetain(v77);
        swift_retain();
      }
      v24 = dispatch thunk of UniversalControlDevice.id.getter(v23);
      v25 = v75 | (v10 << 32) | (v11 << 40) | (v13 << 48) | (v14 << 56);
      v26 = *(_QWORD *)type | (v15 << 32) | (v16 << 40) | (v17 << 48) | (v18 << 56);
      if (static UniversalControlUUID.compare(lhs:rhs:)(v24, v27))
      {
        swift_release();
        v6 = v58;
        a2 = v77;
        if (v58 != 1)
        {
          v5 = 5;
          v8 = v59;
          while (1)
          {
            if (v59)
              v43 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, v77);
            else
              swift_retain();
            v44 = v5 - 3;
            if (__OFADD__(v5 - 4, 1))
              break;
            v45 = dispatch thunk of UniversalControlDevice.id.getter(v43);
            if (!static UniversalControlUUID.compare(lhs:rhs:)(v45, v46))
              goto LABEL_12;
            swift_release();
            ++v5;
            if (v44 == v58)
            {
              swift_bridgeObjectRelease();
              v5 = v56;
              goto LABEL_30;
            }
          }
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
          goto LABEL_54;
        }
        swift_bridgeObjectRelease();
        v5 = v56;
        goto LABEL_40;
      }
LABEL_12:
      v28 = swift_bridgeObjectRelease();
      v29 = dispatch thunk of UniversalControlDevice.displays.getter(v28);
      v30 = v29;
      if ((unint64_t)v29 >> 62)
      {
        if (v29 < 0)
          v53 = v29;
        else
          v53 = v29 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v29);
        a2 = _CocoaArrayWrapper.endIndex.getter(v53);
        if (a2)
        {
LABEL_14:
          if ((v30 & 0xC000000000000001) != 0)
            v31 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v30);
          else
            swift_retain();
          v32 = dispatch thunk of UniversalControlDisplay.id.getter(v31);
          v33 = v68 | (v63 << 32) | (v62 << 40) | (v61 << 48) | (v60 << 56);
          v76 = v69 | (v67 << 32) | (v66 << 40) | (v65 << 48) | (v64 << 56);
          if ((static UniversalControlDisplayID.== infix(_:_:)(v32, v34, v35, v36, v25, v26, v76, v33) & 1) != 0)
          {
LABEL_17:
            swift_bridgeObjectRelease_n(v30, 2);
            if (qword_1002A98F8 != -1)
              swift_once(&qword_1002A98F8, sub_10014C200);
            v37 = type metadata accessor for Logger(0);
            v38 = sub_100006FB4(v37, (uint64_t)qword_1002B2A80);
            v39 = Logger.logObject.getter(v38);
            v40 = static os_log_type_t.info.getter();
            a2 = v40;
            v5 = v56;
            if (os_log_type_enabled(v39, v40))
            {
              typea = a2;
              a2 = swift_slowAlloc(52, -1);
              v70 = (char *)swift_slowAlloc(32, -1);
              v80[0] = v70;
              *(_DWORD *)a2 = 136447234;
              v41 = UniversalControlDisplayID.description.getter(v25, v26, v76, v33);
              MinX = COERCE_DOUBLE(sub_100006FCC(v41, v42, (uint64_t *)v80));
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&MinX, &v79, a2 + 4);
              swift_bridgeObjectRelease();
              *(_WORD *)(a2 + 12) = 2048;
              v81.origin.x = v19;
              v81.origin.y = v20;
              v81.size.width = v21;
              v81.size.height = v22;
              MinX = CGRectGetMinX(v81);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&MinX, &v79, a2 + 14);
              *(_WORD *)(a2 + 22) = 2048;
              v82.origin.x = v19;
              v82.origin.y = v20;
              v82.size.width = v21;
              v82.size.height = v22;
              MinX = CGRectGetMinY(v82);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&MinX, &v79, a2 + 24);
              *(_WORD *)(a2 + 32) = 2048;
              v83.origin.x = v19;
              v83.origin.y = v20;
              v83.size.width = v21;
              v83.size.height = v22;
              MinX = CGRectGetMaxX(v83);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&MinX, &v79, a2 + 34);
              *(_WORD *)(a2 + 42) = 2048;
              v84.origin.x = v19;
              v84.origin.y = v20;
              v84.size.width = v21;
              v84.size.height = v22;
              MinX = CGRectGetMaxY(v84);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&MinX, &v79, a2 + 44);
              _os_log_impl((void *)&_mh_execute_header, v39, typea, "Reconfigured Display: %{public}s [%f %f %f %f]", (uint8_t *)a2, 0x34u);
              swift_arrayDestroy(v70, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v70, -1, -1);
              swift_slowDealloc(a2, -1, -1);
            }

            v6 = v58;
            v8 = v59;
            dispatch thunk of UniversalControlDisplay.screenRect.setter(v19, v20, v21, v22);
            swift_release();
            swift_release();
LABEL_30:
            v7 = v72;
            goto LABEL_41;
          }
          swift_release();
          if (a2 != 1)
          {
            v5 = 5;
            do
            {
              if ((v30 & 0xC000000000000001) != 0)
                v47 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, v30);
              else
                swift_retain();
              v48 = v5 - 3;
              if (__OFADD__(v5 - 4, 1))
                goto LABEL_53;
              v49 = dispatch thunk of UniversalControlDisplay.id.getter(v47);
              if ((static UniversalControlDisplayID.== infix(_:_:)(v49, v50, v51, v52, v25, v26, v76, v33) & 1) != 0)
                goto LABEL_17;
              swift_release();
              ++v5;
            }
            while (v48 != a2);
          }
        }
      }
      else
      {
        a2 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(v29);
        if (a2)
          goto LABEL_14;
      }
      swift_bridgeObjectRelease_n(v30, 2);
      swift_release();
      v5 = v56;
      v6 = v58;
LABEL_40:
      v7 = v72;
      v8 = v59;
LABEL_41:
      if (++v7 == v71)
        return swift_release();
    }
  }
  return swift_release();
}

uint64_t sub_100151D60(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  os_log_type_t v7;
  _DWORD *v8;

  if (a2 != a1)
  {
    if (qword_1002A98F8 != -1)
      swift_once(&qword_1002A98F8, sub_10014C200);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_100006FB4(v3, (uint64_t)qword_1002B2A80);
    v5 = Logger.logObject.getter(v4);
    v7 = static os_log_type_t.default.getter(v5, v6);
    if (os_log_type_enabled(v5, v7))
    {
      v8 = (_DWORD *)swift_slowAlloc(12, -1);
      swift_slowAlloc(32, -1);
      *v8 = 136446210;
      __asm { BR              X10 }
    }

  }
  return a2;
}

void *sub_100151F40(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _BYTE v8[24];

  if ((a1 & 1) == 0)
    return &_swiftEmptySetSingleton;
  v2 = *(_QWORD *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_discoveryController) + 120);
  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_peerCoordinators);
  swift_beginAccess(v3, v8, 0, 0);
  v4 = *v3;
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v4);
  v6 = sub_100166798(v5, v2);
  swift_bridgeObjectRelease(v4);
  return v6;
}

uint64_t sub_100151FCC(uint64_t a1, uint64_t a2, unsigned __int8 *isUniquelyReferenced_nonNull_native)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  unsigned __int8 *v15;
  Swift::Int v16;
  _QWORD *v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  os_log_type_t v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  Swift::Bool v63;
  char v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  unsigned __int8 *v68;
  _BYTE *v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __n128 v75;
  uint64_t v76;
  Swift::Int v77;
  unsigned __int8 *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  uint64_t v84;
  os_log_type_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned __int8 *v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  char v109;
  Swift::Int v110;
  uint64_t v111;
  __n128 v112;
  uint64_t result;
  int64_t v114;
  unint64_t v115;
  unsigned __int8 *v116;
  uint64_t v117;
  void *v118;
  char *v119;
  uint64_t v120;
  char *v121;
  __n128 v122;
  char *v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  __n128 v129;
  uint64_t v130;
  Swift::Int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  Swift::Int v145;
  uint64_t v146;
  unsigned __int8 *v147;

  v135 = type metadata accessor for Logger(0);
  v124 = *(_QWORD *)(v135 - 8);
  __chkstk_darwin(v135);
  v123 = (char *)&v116 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = type metadata accessor for SyncCoordinator.Event(0);
  __chkstk_darwin(v120);
  v119 = (char *)&v116 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = type metadata accessor for UUID(0);
  v127 = *(_QWORD *)(v128 - 8);
  __chkstk_darwin(v128);
  v126 = (char *)&v116 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain(isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRetain(a2);
  v9 = sub_100191B08(a1, a2);
  swift_bridgeObjectRetain(a1);
  v10 = sub_100191B08(a2, a1);
  swift_bridgeObjectRetain(v9);
  sub_100057E2C();
  v12 = v11;
  swift_bridgeObjectRelease(v9);
  v147 = (unsigned __int8 *)v12;
  v13 = 0;
  sub_100036DCC(&v147);
  v14 = swift_bridgeObjectRelease(v9);
  v15 = v147;
  v16 = *((_QWORD *)v147 + 2);
  v17 = &unk_1002A9000;
  v18 = (int64_t)&unk_10021B000;
  v19 = (unint64_t)&type metadata for Any;
  if (v16)
  {
    v117 = 0;
    v118 = v10;
    if (qword_1002A98F8 != -1)
    {
LABEL_34:
      v114 = v18;
      v115 = v19;
      swift_once(&qword_1002A98F8, sub_10014C200);
      v19 = v115;
      v18 = v114;
    }
    v116 = v15;
    v15 += 47;
    v14.n128_u64[0] = *(_QWORD *)(v18 + 496);
    v122 = v14;
    v121 = (char *)(v19 + 8);
    while (1)
    {
      v131 = v16;
      v20 = *(v15 - 15);
      v21 = *(v15 - 14);
      v22 = *(v15 - 13);
      v23 = *(v15 - 12);
      v24 = *(v15 - 11);
      v144 = *(v15 - 10);
      v146 = *(v15 - 9);
      v145 = *(v15 - 8);
      v143 = *(v15 - 7);
      v142 = *(v15 - 6);
      v141 = *(v15 - 5);
      v140 = *(v15 - 4);
      v139 = *(v15 - 3);
      v138 = *(v15 - 2);
      v137 = *(v15 - 1);
      v136 = *v15;
      v129.n128_u64[0] = sub_100006FB4(v135, (uint64_t)qword_1002B2A80);
      v25 = Logger.logObject.getter(v129.n128_u64[0]);
      v27 = static os_log_type_t.default.getter(v25, v26);
      v28 = os_log_type_enabled(v25, v27);
      v132 = v24;
      v133 = v23;
      v130 = v21;
      v134 = v22;
      if (v28)
      {
        v29 = swift_slowAlloc(12, -1);
        v30 = swift_slowAlloc(32, -1);
        v147 = (unsigned __int8 *)v30;
        *(_DWORD *)v29 = v122.n128_u32[0];
        v31 = v126;
        v32 = UUID.init(uuid:)(v20, v21, v134, v133, v132, v144);
        v33 = UUID.uuidString.getter(v32);
        v34 = v20;
        v35 = isUniquelyReferenced_nonNull_native;
        v37 = v36;
        (*(void (**)(char *, uint64_t))(v127 + 8))(v31, v128);
        v38 = sub_1000599D0(8, v33, v37);
        v40 = v39;
        v41 = static String._fromSubstring(_:)(v38);
        v43 = v42;
        swift_bridgeObjectRelease(v40);
        v44 = v41;
        isUniquelyReferenced_nonNull_native = v35;
        v20 = v34;
        v21 = v130;
        *(_QWORD *)(v29 + 4) = sub_100006FCC(v44, v43, (uint64_t *)&v147);
        swift_bridgeObjectRelease(v43);
        _os_log_impl((void *)&_mh_execute_header, v25, v27, "IDS %{public}s: Device Available", (uint8_t *)v29, 0xCu);
        swift_arrayDestroy(v30, 1, v121);
        v45 = v30;
        v23 = v133;
        v22 = v134;
        swift_slowDealloc(v45, -1, -1);
        v46 = v29;
        v24 = v132;
        swift_slowDealloc(v46, -1, -1);
      }

      v47 = v20 | (v21 << 8) | (v22 << 16) | (v23 << 24) | (v24 << 32) | (v144 << 40) | (v146 << 48) | (v145 << 56);
      v48 = v143 | (v142 << 8) | (v141 << 16) | (v140 << 24) | (v139 << 32) | (v138 << 40) | (v137 << 48);
      v49 = v48 | (v136 << 56);
      if (*((_QWORD *)isUniquelyReferenced_nonNull_native + 2)
        && (v50 = sub_1001A8C70(v47, v48 | (v136 << 56)), (v51 & 1) != 0))
      {
        v52 = *(_QWORD *)(*((_QWORD *)isUniquelyReferenced_nonNull_native + 7) + 8 * v50);
        v53 = (uint64_t)v119;
        swift_storeEnumTagMultiPayload(v119, v120, 5);
        swift_retain(v52);
        sub_1000F4994(v53);
        sub_1000255F0(v53, type metadata accessor for SyncCoordinator.Event);
        swift_release();
      }
      else
      {
        v54 = v20;
        (*(void (**)(char *, unint64_t, uint64_t))(v124 + 16))(v123, v129.n128_u64[0], v135);
        v55 = type metadata accessor for SyncCoordinator(0);
        swift_allocObject(v55, *(unsigned int *)(v55 + 48), *(unsigned __int16 *)(v55 + 52));
        swift_retain(v125);
        v56 = sub_1000F44F4();
        v57 = (uint64_t)isUniquelyReferenced_nonNull_native;
        isUniquelyReferenced_nonNull_native = (unsigned __int8 *)swift_isUniquelyReferenced_nonNull_native(isUniquelyReferenced_nonNull_native);
        v147 = (unsigned __int8 *)v57;
        v58 = sub_1001A8C70(v47, v49);
        v60 = *(_QWORD *)(v57 + 16);
        v18 = (v59 & 1) == 0;
        v16 = v60 + v18;
        if (__OFADD__(v60, v18))
        {
          __break(1u);
LABEL_33:
          __break(1u);
          goto LABEL_34;
        }
        v61 = v58;
        v62 = v59;
        v129.n128_u64[0] = v56;
        sub_1000055B0(&qword_1002B1250);
        v63 = _NativeDictionary.ensureUnique(isUnique:capacity:)((Swift::Bool)isUniquelyReferenced_nonNull_native, v16);
        v16 = v145;
        v64 = v146;
        if (v63)
        {
          v65 = sub_1001A8C70(v47, v49);
          if ((v62 & 1) != (v66 & 1))
          {
            KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UniversalControlDeviceID);
            __break(1u);
            goto LABEL_36;
          }
          v61 = v65;
        }
        isUniquelyReferenced_nonNull_native = v147;
        if ((v62 & 1) != 0)
        {
          v67 = *((_QWORD *)v147 + 7);
          swift_release();
          *(_QWORD *)(v67 + 8 * v61) = v129.n128_u64[0];
        }
        else
        {
          v68 = &v147[8 * (v61 >> 6)];
          v19 = *((_QWORD *)v68 + 8);
          *((_QWORD *)v68 + 8) = v19 | (1 << v61);
          v69 = (_BYTE *)(*((_QWORD *)isUniquelyReferenced_nonNull_native + 6) + 16 * v61);
          *v69 = v54;
          v69[1] = v130;
          v69[2] = v134;
          v69[3] = v133;
          v69[4] = v132;
          v69[5] = v144;
          v69[6] = v64;
          v69[7] = v16;
          v69[8] = v143;
          v69[9] = v142;
          v69[10] = v141;
          v69[11] = v140;
          v69[12] = v139;
          v69[13] = v138;
          v69[14] = v137;
          v69[15] = v136;
          v18 = v129.n128_u64[0];
          *(_QWORD *)(*((_QWORD *)isUniquelyReferenced_nonNull_native + 7) + 8 * v61) = v129.n128_u64[0];
          v70 = *((_QWORD *)isUniquelyReferenced_nonNull_native + 2);
          v71 = __OFADD__(v70, 1);
          v72 = v70 + 1;
          if (v71)
            goto LABEL_33;
          *((_QWORD *)isUniquelyReferenced_nonNull_native + 2) = v72;
        }
        swift_bridgeObjectRelease(0x8000000000000000);
      }
      v15 += 16;
      v16 = v131 - 1;
      if (v131 == 1)
      {
        swift_release();
        v10 = v118;
        v17 = (_QWORD *)&unk_1002A9000;
        v13 = v117;
        goto LABEL_21;
      }
    }
  }
  swift_release();
LABEL_21:
  swift_bridgeObjectRetain(v10);
  sub_100057E2C();
  v74 = v73;
  swift_bridgeObjectRelease(v10);
  v147 = (unsigned __int8 *)v74;
  sub_100036DCC(&v147);
  if (v13)
  {
LABEL_36:
    result = swift_release();
    __break(1u);
  }
  else
  {
    v75 = swift_bridgeObjectRelease(v10);
    v76 = (uint64_t)v147;
    v77 = *((_QWORD *)v147 + 2);
    v124 = (uint64_t)v147;
    if (v77)
    {
      if (v17[287] != -1)
        swift_once(&qword_1002A98F8, sub_10014C200);
      v78 = (unsigned __int8 *)(v76 + 47);
      v75.n128_u64[0] = 136446210;
      v129 = v75;
      v125 = (char *)&type metadata for Any + 8;
      do
      {
        v79 = *(v78 - 15);
        v80 = *(v78 - 14);
        v81 = *(v78 - 13);
        v146 = *(v78 - 12);
        v145 = *(v78 - 11);
        v144 = *(v78 - 10);
        v143 = *(v78 - 9);
        v142 = *(v78 - 8);
        v141 = *(v78 - 7);
        v140 = *(v78 - 6);
        v139 = *(v78 - 5);
        v138 = *(v78 - 4);
        v137 = *(v78 - 3);
        v136 = *(v78 - 2);
        v134 = *(v78 - 1);
        v133 = *v78;
        v82 = sub_100006FB4(v135, (uint64_t)qword_1002B2A80);
        v83 = Logger.logObject.getter(v82);
        v85 = static os_log_type_t.default.getter(v83, v84);
        if (os_log_type_enabled(v83, v85))
        {
          v86 = swift_slowAlloc(12, -1);
          v132 = v80;
          v87 = v86;
          v130 = swift_slowAlloc(32, -1);
          v147 = (unsigned __int8 *)v130;
          *(_DWORD *)v87 = v129.n128_u32[0];
          v131 = v77;
          v88 = v126;
          v89 = UUID.init(uuid:)(v79, v132, v81, v146, v145, v144);
          v90 = UUID.uuidString.getter(v89);
          v91 = v79;
          v92 = isUniquelyReferenced_nonNull_native;
          v94 = v93;
          (*(void (**)(char *, uint64_t))(v127 + 8))(v88, v128);
          v95 = sub_1000599D0(8, v90, v94);
          v97 = v96;
          v98 = static String._fromSubstring(_:)(v95);
          v100 = v99;
          swift_bridgeObjectRelease(v97);
          v101 = v98;
          isUniquelyReferenced_nonNull_native = v92;
          v79 = v91;
          *(_QWORD *)(v87 + 4) = sub_100006FCC(v101, v100, (uint64_t *)&v147);
          v102 = v100;
          v77 = v131;
          swift_bridgeObjectRelease(v102);
          _os_log_impl((void *)&_mh_execute_header, v83, v85, "IDS %{public}s: Device Unavailable", (uint8_t *)v87, 0xCu);
          v103 = v130;
          swift_arrayDestroy(v130, 1, v125);
          swift_slowDealloc(v103, -1, -1);
          v104 = v87;
          v80 = v132;
          swift_slowDealloc(v104, -1, -1);
        }

        v105 = v79 | (v80 << 8) | (v81 << 16) | (v146 << 24) | (v145 << 32) | (v144 << 40) | (v143 << 48) | (v142 << 56);
        v106 = v141 | (v140 << 8) | (v139 << 16) | (v138 << 24) | (v137 << 32) | (v136 << 40) | (v134 << 48) | (v133 << 56);
        swift_bridgeObjectRetain(isUniquelyReferenced_nonNull_native);
        v107 = sub_1001A8C70(v105, v106);
        LOBYTE(v106) = v108;
        swift_bridgeObjectRelease(isUniquelyReferenced_nonNull_native);
        if ((v106 & 1) != 0)
        {
          v109 = swift_isUniquelyReferenced_nonNull_native(isUniquelyReferenced_nonNull_native);
          v147 = isUniquelyReferenced_nonNull_native;
          v110 = *((_QWORD *)isUniquelyReferenced_nonNull_native + 3);
          sub_1000055B0(&qword_1002B1250);
          _NativeDictionary.ensureUnique(isUnique:capacity:)(v109, v110);
          isUniquelyReferenced_nonNull_native = v147;
          v111 = type metadata accessor for SyncCoordinator(0);
          sub_100033B3C();
          _NativeDictionary._delete(at:)(v107, isUniquelyReferenced_nonNull_native, &type metadata for UniversalControlDeviceID, v111);
          v112 = swift_bridgeObjectRelease(0x8000000000000000);
          sub_1000F76E4(0, v112);
          swift_release();
        }
        v78 += 16;
        --v77;
      }
      while (v77);
    }
    swift_release();
    return (uint64_t)isUniquelyReferenced_nonNull_native;
  }
  return result;
}

uint64_t sub_100152B20(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
    goto LABEL_4;
  v3 = a2;
  v8 = a1;
  v9 = a2;
  v4 = type metadata accessor for UniversalControlDevice(0);
  sub_10016A0D0((uint64_t)&unk_1002AC0A0);
  v6 = v5;
  swift_retain(v3);
  if ((dispatch thunk of static Equatable.== infix(_:_:)(&v9, &v8, v4, v6) & 1) != 0)
  {
    swift_release();
LABEL_4:
    swift_retain(a1);
    return a1;
  }
  return v3;
}

uint64_t sub_100152BBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t (**v3)(char *, char *, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  os_log_type_t v36;
  int v37;
  _BOOL4 v38;
  uint64_t v39;
  uint8_t *v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  __n128 v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t result;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  uint64_t v63;
  os_log_type_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  __n128 v72;
  void (*v73)(char *, uint64_t, __n128);
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  __n128 v77;
  uint64_t v78;
  void (*v79)(char *, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint8_t *v83;
  uint8_t *v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t (*v94)(char *, char *, uint64_t);
  char *v95;
  uint64_t (**v96)(char *, char *, uint64_t);
  uint64_t v97;
  uint64_t v98;

  v94 = *v3;
  v7 = sub_1000055B0(&qword_1002B33B0);
  __chkstk_darwin(v7);
  v95 = (char *)&v83 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v91 = *(_QWORD *)(v9 - 8);
  v92 = v9;
  __chkstk_darwin(v9);
  v90 = (char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UniversalControlConfiguration(0);
  v12 = *(char **)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v83 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v83 - v17;
  __chkstk_darwin(v16);
  v20 = (char *)&v83 - v19;
  v21 = static UniversalControlConfiguration.== infix(_:_:)(a2, a1);
  v96 = v3;
  if ((v21 & 1) != 0)
  {
    v87 = a1;
    v88 = v18;
    v93 = v12;
    v89 = v15;
    v22 = a3;
    v23 = UniversalControlPreferences.configurationID.getter(v21);
    if (v24 >> 60 == 15
      || (v25 = v23,
          v26 = v24,
          v27 = UniversalControlConfiguration.digest.getter(v23),
          v29 = v28,
          v30 = static Data.== infix(_:_:)(v25, v26, v27, v28),
          sub_100022AD8(v25, v26),
          sub_100022AEC(v27, v29),
          (v30 & 1) == 0))
    {
      a3 = v22;
      sub_10014F35C(v22);
      if (qword_1002A98F8 != -1)
        swift_once(&qword_1002A98F8, sub_10014C200);
      v32 = type metadata accessor for Logger(0);
      sub_100006FB4(v32, (uint64_t)qword_1002B2A80);
      v12 = v93;
      v94 = (uint64_t (*)(char *, char *, uint64_t))*((_QWORD *)v93 + 2);
      v33 = v94(v20, v22, v11);
      v34 = Logger.logObject.getter(v33);
      v36 = static os_log_type_t.default.getter(v34, v35);
      v37 = v36;
      v38 = os_log_type_enabled(v34, v36);
      v15 = v89;
      if (v38)
      {
        v39 = swift_slowAlloc(12, -1);
        v86 = v37;
        v40 = (uint8_t *)v39;
        v41 = swift_slowAlloc(32, -1);
        v85 = v41;
        v98 = v41;
        *(_DWORD *)v40 = 136446210;
        v83 = v40 + 4;
        v84 = v40;
        v42 = UniversalControlConfiguration.id.getter(v41);
        v43 = v90;
        v44 = UUID.init(uuid:)(v42, v42 >> 8, v42 >> 16, v42 >> 24, HIDWORD(v42), v42 >> 40);
        v45 = UUID.uuidString.getter(v44);
        v47 = v46;
        (*(void (**)(char *, uint64_t))(v91 + 8))(v43, v92);
        v48 = sub_1000599D0(8, v45, v47);
        v50 = v49;
        v51 = static String._fromSubstring(_:)(v48);
        v53 = v52;
        v54 = v50;
        v12 = v93;
        swift_bridgeObjectRelease(v54);
        v97 = sub_100006FCC(v51, v53, &v98);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v83);
        v55 = swift_bridgeObjectRelease(v53);
        (*((void (**)(char *, uint64_t, __n128))v12 + 1))(v20, v11, v55);
        v56 = v84;
        _os_log_impl((void *)&_mh_execute_header, v34, (os_log_type_t)v86, "Reloaded configuration: %{public}s", v84, 0xCu);
        v57 = v85;
        swift_arrayDestroy(v85, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v57, -1, -1);
        swift_slowDealloc(v56, -1, -1);
      }
      else
      {
        (*((void (**)(char *, uint64_t))v12 + 1))(v20, v11);
      }

      a1 = v87;
      v18 = v88;
      v31 = (void (*)(char *, uint64_t, uint64_t))v94;
    }
    else
    {
      v12 = v93;
      v31 = (void (*)(char *, uint64_t, uint64_t))*((_QWORD *)v93 + 2);
      a3 = v22;
      v31(v22, a2, v11);
      v18 = v88;
      v15 = v89;
      a1 = v87;
    }
  }
  else
  {
    v31 = (void (*)(char *, uint64_t, uint64_t))*((_QWORD *)v12 + 2);
    ((void (*)(_QWORD *__return_ptr, char *, uint64_t, uint64_t))v31)(&qword_1002B2000, a3, a2, v11);
  }
  sub_10016A0D0((uint64_t)&unk_1002AC140);
  result = dispatch thunk of static Equatable.== infix(_:_:)(a1, a3, v11, v58);
  if ((result & 1) == 0)
  {
    if (qword_1002A98F8 != -1)
      swift_once(&qword_1002A98F8, sub_10014C200);
    v60 = type metadata accessor for Logger(0);
    sub_100006FB4(v60, (uint64_t)qword_1002B2A80);
    v31(v18, a1, v11);
    v61 = ((uint64_t (*)(char *, char *, uint64_t))v31)(v15, a3, v11);
    v62 = Logger.logObject.getter(v61);
    v64 = static os_log_type_t.default.getter(v62, v63);
    v65 = v64;
    if (os_log_type_enabled(v62, v64))
    {
      v66 = swift_slowAlloc(22, -1);
      v67 = swift_slowAlloc(64, -1);
      v93 = a3;
      v68 = v67;
      v98 = v67;
      *(_DWORD *)v66 = 136446466;
      v94 = (uint64_t (*)(char *, char *, uint64_t))v31;
      LODWORD(v92) = v65;
      UniversalControlConfiguration.label.getter();
      v70 = v69;
      v97 = sub_100006FCC(v71, v69, &v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v66 + 4);
      v72 = swift_bridgeObjectRelease(v70);
      v73 = (void (*)(char *, uint64_t, __n128))*((_QWORD *)v12 + 1);
      v73(v18, v11, v72);
      *(_WORD *)(v66 + 12) = 2082;
      UniversalControlConfiguration.label.getter();
      v75 = v74;
      v97 = sub_100006FCC(v76, v74, &v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v66 + 14);
      v77 = swift_bridgeObjectRelease(v75);
      v73(v15, v11, v77);
      v31 = (void (*)(char *, uint64_t, uint64_t))v94;
      _os_log_impl((void *)&_mh_execute_header, v62, (os_log_type_t)v92, "Configuration Changed: %{public}s -> %{public}s", (uint8_t *)v66, 0x16u);
      swift_arrayDestroy(v68, 2, (char *)&type metadata for Any + 8);
      v78 = v68;
      a3 = v93;
      swift_slowDealloc(v78, -1, -1);
      swift_slowDealloc(v66, -1, -1);
    }
    else
    {
      v79 = (void (*)(char *, uint64_t))*((_QWORD *)v12 + 1);
      v79(v18, v11);
      v79(v15, v11);
    }

    v80 = (uint64_t)v95;
    v31(v95, (uint64_t)a3, v11);
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v80, 0, 1, v11);
    v81 = UniversalControlPreferences.configuration.setter(v80);
    v82 = UniversalControlConfiguration.digest.getter(v81);
    return UniversalControlPreferences.configurationID.setter(v82);
  }
  return result;
}

unint64_t sub_1001532A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, _QWORD *a6)
{
  unint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t inited;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  __int128 v49;
  char v50[48];
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[6];

  v7 = a6;
  if (a5 == 3)
  {
    v45 = a4;
    sub_100043078(v53, a6);
    v10 = v53[0];
    v9 = v53[1];
    v11 = v53[3];
    v12 = v53[4];
    v13 = (unint64_t)(v53[2] + 64) >> 6;
    v46 = v7;
    swift_bridgeObjectRetain(v7);
    v7 = _swiftEmptyArrayStorage;
    while (1)
    {
      if (v12)
      {
        v14 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
          __break(1u);
LABEL_43:
          swift_once(&qword_1002A98F8, sub_10014C200);
LABEL_37:
          v31 = type metadata accessor for Logger(0);
          sub_100006FB4(v31, (uint64_t)qword_1002B2A80);
          v32 = swift_bridgeObjectRetain_n(v6, 2);
          v33 = Logger.logObject.getter(v32);
          v35 = static os_log_type_t.default.getter(v33, v34);
          if (os_log_type_enabled(v33, v35))
          {
            v36 = (uint8_t *)swift_slowAlloc(12, -1);
            v47 = v7;
            v37 = swift_slowAlloc(32, -1);
            v52 = v37;
            *(_DWORD *)v36 = 136315138;
            swift_bridgeObjectRetain(v6);
            v39 = sub_100061BB4(v38);
            v41 = v40;
            swift_bridgeObjectRelease(v6);
            v51 = sub_100006FCC(v39, v41, &v52);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v36 + 4);
            swift_bridgeObjectRelease_n(v6, 2);
            swift_bridgeObjectRelease(v41);
            _os_log_impl((void *)&_mh_execute_header, v33, v35, "Synced Devices: %s", v36, 0xCu);
            swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
            v42 = v37;
            v7 = v47;
            swift_slowDealloc(v42, -1, -1);
            swift_slowDealloc(v36, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n(v6, 2);
          }
          sub_10014DD6C(a1, (uint64_t)v7);
          return v6;
        }
        if (v16 >= v13)
          goto LABEL_34;
        v17 = *(_QWORD *)(v9 + 8 * v16);
        v18 = v11 + 1;
        if (!v17)
        {
          v18 = v11 + 2;
          if (v11 + 2 >= v13)
            goto LABEL_34;
          v17 = *(_QWORD *)(v9 + 8 * v18);
          if (!v17)
          {
            v18 = v11 + 3;
            if (v11 + 3 >= v13)
              goto LABEL_34;
            v17 = *(_QWORD *)(v9 + 8 * v18);
            if (!v17)
            {
              v18 = v11 + 4;
              if (v11 + 4 >= v13)
                goto LABEL_34;
              v17 = *(_QWORD *)(v9 + 8 * v18);
              if (!v17)
              {
                v18 = v11 + 5;
                if (v11 + 5 >= v13)
                  goto LABEL_34;
                v17 = *(_QWORD *)(v9 + 8 * v18);
                if (!v17)
                {
                  v18 = v11 + 6;
                  if (v11 + 6 >= v13)
                    goto LABEL_34;
                  v17 = *(_QWORD *)(v9 + 8 * v18);
                  if (!v17)
                  {
                    v19 = v11 + 7;
                    while (v19 < v13)
                    {
                      v17 = *(_QWORD *)(v9 + 8 * v19++);
                      if (v17)
                      {
                        v18 = v19 - 1;
                        goto LABEL_22;
                      }
                    }
LABEL_34:
                    swift_release();
                    sub_1000DF7F4();
                    v26 = sub_100166924(a1, v25);
                    v27 = sub_1000055B0((uint64_t *)&unk_1002ABD90);
                    inited = swift_initStackObject(v27, v50);
                    *(_OWORD *)(inited + 16) = xmmword_10021BBA0;
                    *(_QWORD *)(inited + 32) = a2;
                    *(_QWORD *)(inited + 40) = a3;
                    v6 = sub_100068024(inited, v26, v29, v30);
                    v7 = v46;
                    a4 = v45;
                    goto LABEL_35;
                  }
                }
              }
            }
          }
        }
LABEL_22:
        v12 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v18 << 6);
        v11 = v18;
      }
      v20 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v15);
      v21 = *(_QWORD *)(v20 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_state);
      if (v21 >> 62 == 2
        && v21 == 0x8000000000000008
        && *(_QWORD *)(v20 + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_state + 8) == 0)
      {
        continue;
      }
      v49 = *(_OWORD *)(v20 + 40);
      if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
      {
        sub_100077ACC();
        v7 = v23;
      }
      v6 = v7[2];
      if (v6 >= v7[3] >> 1)
      {
        sub_100077ACC();
        v7 = v24;
      }
      v7[2] = v6 + 1;
      *(_OWORD *)&v7[2 * v6 + 4] = v49;
    }
  }
  v6 = (unint64_t)&_swiftEmptySetSingleton;
LABEL_35:
  if ((sub_100198A54(a4, v6) & 1) == 0)
  {
    if (qword_1002A98F8 != -1)
      goto LABEL_43;
    goto LABEL_37;
  }
  return v6;
}

uint64_t sub_100153778(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, unint64_t a9)
{
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  os_log_type_t v26;
  _BOOL4 v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t Strong;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  uint64_t v50;
  os_log_type_t v51;
  int v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  uint64_t v68;
  os_log_type_t v69;
  int v70;
  _BOOL4 v71;
  uint8_t *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t result;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  NSObject *v99;
  uint64_t v100;
  os_log_type_t v101;
  int v102;
  uint8_t *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  os_log_t v114;
  int64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint8_t *v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  NSObject *v127;
  uint64_t v128;
  os_log_type_t v129;
  _BOOL4 v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint8_t *v142;
  uint64_t v143;
  int64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  NSObject *v151;
  uint64_t v152;
  os_log_type_t v153;
  int v154;
  uint8_t *v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint8_t *v190;
  uint8_t *v191;
  os_log_t v192;
  uint8_t *v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  int64_t v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217[2];

  v214 = a9;
  v16 = (uint8_t *)type metadata accessor for UUID(0);
  v17 = *((_QWORD *)v16 - 1);
  __chkstk_darwin(v16);
  v19 = (char *)&v189 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((sub_100198A54(a4, a3) & 1) != 0)
    goto LABEL_7;
  if (!*(_QWORD *)(a4 + 16))
  {
    v21 = a8;
    if (qword_1002A98F8 != -1)
      swift_once(&qword_1002A98F8, sub_10014C200);
    v22 = type metadata accessor for Logger(0);
    v23 = sub_100006FB4(v22, (uint64_t)qword_1002B2A80);
    v24 = Logger.logObject.getter(v23);
    v26 = static os_log_type_t.default.getter(v24, v25);
    v27 = os_log_type_enabled(v24, v26);
    v28 = v213;
    if (v27)
    {
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v26, "Reset Source Device: local device disconnected", v29, 2u);
      swift_slowDealloc(v29, -1, -1);
    }

    Strong = swift_unknownObjectWeakLoadStrong(v28 + 16);
    if (Strong)
    {
      v33 = Strong;
      sub_100126848(0, 0, 1);
      swift_unknownObjectRelease(v33);
    }
    v34 = a7;
    v35 = v21;
    goto LABEL_32;
  }
  if (a7)
  {
    if (static UniversalControlUUID.compare(lhs:rhs:)(a8, v214))
    {
      sub_10018F420(a8, v214, a4);
      if ((v20 & 1) == 0)
      {
        if (qword_1002A98F8 != -1)
          swift_once(&qword_1002A98F8, sub_10014C200);
        v65 = type metadata accessor for Logger(0);
        sub_100006FB4(v65, (uint64_t)qword_1002B2A80);
        v66 = swift_bridgeObjectRetain_n(a7, 2);
        v67 = Logger.logObject.getter(v66);
        v69 = static os_log_type_t.default.getter(v67, v68);
        v70 = v69;
        v71 = os_log_type_enabled(v67, v69);
        v212 = a8;
        if (v71)
        {
          v207 = a8 >> 16;
          v208 = a8 >> 8;
          v205 = HIDWORD(a8);
          v206 = a8 >> 24;
          v203 = HIWORD(a8);
          v204 = a8 >> 40;
          v201 = v214 >> 8;
          v202 = HIBYTE(a8);
          v199 = v214 >> 24;
          v200 = v214 >> 16;
          v197 = v214 >> 40;
          v198 = HIDWORD(v214);
          v196 = HIWORD(v214);
          LODWORD(v211) = v70;
          v72 = (uint8_t *)swift_slowAlloc(12, -1);
          v210 = swift_slowAlloc(32, -1);
          v217[0] = v210;
          *(_DWORD *)v72 = 136446210;
          v209 = (unint64_t)(v72 + 4);
          v73 = UUID.init(uuid:)(a8, v208, v207, v206, v205, v204);
          v74 = UUID.uuidString.getter(v73);
          v76 = v75;
          (*(void (**)(char *, uint8_t *))(v17 + 8))(v19, v16);
          v77 = sub_1000599D0(8, v74, v76);
          v79 = v78;
          v80 = static String._fromSubstring(_:)(v77);
          v82 = v81;
          swift_bridgeObjectRelease(v79);
          v215 = sub_100006FCC(v80, v82, v217);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v215, &v216, v209);
          swift_bridgeObjectRelease_n(a7, 2);
          swift_bridgeObjectRelease(v82);
          _os_log_impl((void *)&_mh_execute_header, v67, (os_log_type_t)v211, "Reset Source Device: %{public}s disconnected", v72, 0xCu);
          v83 = v210;
          swift_arrayDestroy(v210, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v83, -1, -1);
          swift_slowDealloc(v72, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(a7, 2);
        }
        v84 = swift_unknownObjectWeakLoadStrong(v213 + 16);
        if (v84)
        {
          v85 = v84;
          sub_100126848(0, 0, 1);
          swift_unknownObjectRelease(v85);
        }
        v34 = a7;
        v35 = v212;
LABEL_32:
        sub_10014B620(v34, v35, v214, 0, 0, 0, v31, v32, v189, (uint64_t)v190, (uint64_t)v191, (uint64_t)v192, (uint64_t)v193, v194, v195, v196, v197, v198, v199,
          v200,
          v201,
          v202,
          v203,
          v204);
        return v86;
      }
    }
  }
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_7:
    swift_bridgeObjectRetain(a7);
    return a7;
  }
  v36 = *(_QWORD *)(a4 + 16);
  v212 = a8;
  if (v36 == 1)
  {
    swift_bridgeObjectRetain(a5);
    sub_100147210();
    v38 = v37;
    swift_bridgeObjectRelease(a5);
    swift_bridgeObjectRetain(v38);
    sub_100057E2C();
    v40 = v39;
    swift_bridgeObjectRelease(v38);
    v217[0] = v40;
    sub_100036DCC(v217);
    v211 = 0;
    swift_bridgeObjectRelease(v38);
    if (*(_QWORD *)(v217[0] + 16))
    {
      v210 = *(unsigned __int8 *)(v217[0] + 32);
      v209 = *(unsigned __int8 *)(v217[0] + 33);
      v208 = *(unsigned __int8 *)(v217[0] + 34);
      v207 = *(unsigned __int8 *)(v217[0] + 35);
      v206 = *(unsigned __int8 *)(v217[0] + 36);
      v205 = *(unsigned __int8 *)(v217[0] + 37);
      v204 = *(unsigned __int8 *)(v217[0] + 38);
      v41 = *(unsigned __int8 *)(v217[0] + 39);
      v198 = (int64_t)v16;
      v199 = v41;
      v203 = *(unsigned __int8 *)(v217[0] + 40);
      v202 = *(unsigned __int8 *)(v217[0] + 41);
      v201 = *(unsigned __int8 *)(v217[0] + 42);
      v200 = *(unsigned __int8 *)(v217[0] + 43);
      v42 = *(unsigned __int8 *)(v217[0] + 44);
      v197 = *(unsigned __int8 *)(v217[0] + 45);
      v43 = *(unsigned __int8 *)(v217[0] + 46);
      v44 = *(unsigned __int8 *)(v217[0] + 47);
      swift_release();
      v196 = v42;
      v195 = v43;
      v45 = v203 | (v202 << 8) | (v201 << 16) | (v200 << 24) | (v42 << 32) | (v197 << 40) | (v43 << 48);
      v16 = (uint8_t *)v198;
      v194 = v44;
      sub_10018F420(v210 | (v209 << 8) | (v208 << 16) | (v207 << 24) | (v206 << 32) | (v205 << 40) | (v204 << 48) | (v199 << 56), v45 | (v44 << 56), a4);
      if ((v46 & 1) != 0)
      {
        if (qword_1002A98F8 != -1)
          swift_once(&qword_1002A98F8, sub_10014C200);
        v47 = type metadata accessor for Logger(0);
        v48 = sub_100006FB4(v47, (uint64_t)qword_1002B2A80);
        v49 = Logger.logObject.getter(v48);
        v51 = static os_log_type_t.default.getter(v49, v50);
        v52 = v51;
        if (os_log_type_enabled(v49, v51))
        {
          LODWORD(v213) = v52;
          v53 = (uint8_t *)swift_slowAlloc(12, -1);
          v211 = swift_slowAlloc(32, -1);
          v217[0] = v211;
          *(_DWORD *)v53 = 136315138;
          v199 = (unint64_t)(v53 + 4);
          v54 = UUID.init(uuid:)(v210, v209, v208, v207, v206, v205);
          v55 = UUID.uuidString.getter(v54);
          v57 = v56;
          (*(void (**)(char *, uint8_t *))(v17 + 8))(v19, v16);
          v58 = sub_1000599D0(8, v55, v57);
          v60 = v59;
          v61 = static String._fromSubstring(_:)(v58);
          v63 = v62;
          swift_bridgeObjectRelease(v60);
          v215 = sub_100006FCC(v61, v63, v217);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v215, &v216, v199);
          swift_bridgeObjectRelease(v63);
          _os_log_impl((void *)&_mh_execute_header, v49, (os_log_type_t)v213, "Glue sender '%s' has connected, wait for it to update the source device", v53, 0xCu);
          v64 = v211;
          swift_arrayDestroy(v211, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v64, -1, -1);
          swift_slowDealloc(v53, -1, -1);
        }

        goto LABEL_7;
      }
    }
    else
    {
      swift_release();
    }
    v36 = *(_QWORD *)(a4 + 16);
  }
  else
  {
    v211 = 0;
  }
  if (v36 == 1)
  {
    swift_bridgeObjectRetain(a5);
    sub_100147210();
    v89 = v88;
    swift_bridgeObjectRelease(a5);
    swift_bridgeObjectRetain(v89);
    sub_100057E2C();
    v91 = v90;
    swift_bridgeObjectRelease(v89);
    v217[0] = v91;
    v92 = v211;
    sub_100036DCC(v217);
    v211 = v92;
    if (v92)
      goto LABEL_62;
    swift_bridgeObjectRelease(v89);
    if (*(_QWORD *)(v217[0] + 16))
    {
      v210 = *(unsigned __int8 *)(v217[0] + 32);
      v209 = *(unsigned __int8 *)(v217[0] + 33);
      v207 = *(unsigned __int8 *)(v217[0] + 34);
      v208 = *(unsigned __int8 *)(v217[0] + 35);
      v204 = *(unsigned __int8 *)(v217[0] + 36);
      v206 = *(unsigned __int8 *)(v217[0] + 37);
      v205 = *(unsigned __int8 *)(v217[0] + 38);
      v200 = *(unsigned __int8 *)(v217[0] + 39);
      v202 = *(unsigned __int8 *)(v217[0] + 40);
      v203 = *(unsigned __int8 *)(v217[0] + 41);
      v201 = *(unsigned __int8 *)(v217[0] + 42);
      v93 = *(unsigned __int8 *)(v217[0] + 43);
      v94 = *(unsigned __int8 *)(v217[0] + 44);
      v199 = *(unsigned __int8 *)(v217[0] + 45);
      v95 = *(unsigned __int8 *)(v217[0] + 46);
      v198 = *(unsigned __int8 *)(v217[0] + 47);
      swift_release();
      v194 = v93;
      v195 = v94;
      v193 = (uint8_t *)v95;
      v197 = v210 | (v209 << 8) | (v207 << 16) | (v208 << 24) | (v204 << 32) | (v206 << 40) | (v205 << 48) | (v200 << 56);
      v196 = v202 | (v203 << 8) | (v201 << 16) | (v93 << 24) | (v94 << 32) | (v199 << 40) | (v95 << 48) | (v198 << 56);
      sub_10018F420(v197, v196, a4);
      if ((v96 & 1) != 0)
      {
        if (qword_1002A98F8 != -1)
          swift_once(&qword_1002A98F8, sub_10014C200);
        v97 = type metadata accessor for Logger(0);
        v98 = sub_100006FB4(v97, (uint64_t)qword_1002B2A80);
        v99 = Logger.logObject.getter(v98);
        v101 = static os_log_type_t.default.getter(v99, v100);
        v102 = v101;
        if (os_log_type_enabled(v99, v101))
        {
          v192 = v99;
          LODWORD(v211) = v102;
          v103 = (uint8_t *)swift_slowAlloc(12, -1);
          v200 = swift_slowAlloc(32, -1);
          v217[0] = v200;
          v198 = (int64_t)v103;
          *(_DWORD *)v103 = 136315138;
          v191 = v103 + 4;
          v104 = UUID.init(uuid:)(v210, v209, v207, v208, v204, v206);
          v105 = UUID.uuidString.getter(v104);
          v107 = v106;
          (*(void (**)(char *, uint8_t *))(v17 + 8))(v19, v16);
          v108 = sub_1000599D0(8, v105, v107);
          v110 = v109;
          v111 = static String._fromSubstring(_:)(v108);
          v113 = v112;
          swift_bridgeObjectRelease(v110);
          v215 = sub_100006FCC(v111, v113, v217);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v215, &v216, v191);
          swift_bridgeObjectRelease(v113);
          v114 = v192;
          v115 = v198;
          _os_log_impl((void *)&_mh_execute_header, v192, (os_log_type_t)v211, "Glue receiver '%s' has connected, become source device", (uint8_t *)v198, 0xCu);
          v116 = v200;
          swift_arrayDestroy(v200, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v116, -1, -1);
          swift_slowDealloc(v115, -1, -1);

        }
        else
        {

        }
        sub_10014BD1C(v197, v196);
        v178 = v177;
        v181 = static SourceDevice.makeSourceDevice(localDeviceID:oldSourceDevice:newValue:)(a1, a2, v177, v179, v180, a1, a2);
        v183 = v182;
        v185 = v184;
        swift_bridgeObjectRelease(v178);
        sub_10014B620(a7, v212, v214, v181, v183, v185, v186, v187, v189, (uint64_t)v190, (uint64_t)v191, (uint64_t)v192, (uint64_t)v193, v194, v195, v196, v197, v198, v199,
          v200,
          v201,
          v202,
          v203,
          v204);
        a7 = v188;
        v176 = v181;
        goto LABEL_61;
      }
    }
    else
    {
      swift_release();
    }
  }
  swift_bridgeObjectRetain(a4);
  sub_100057E2C();
  v118 = v117;
  swift_bridgeObjectRelease(a4);
  v217[0] = v118;
  v119 = v211;
  sub_100036DCC(v217);
  if (!v119)
  {
    if (!*(_QWORD *)(v217[0] + 16))
    {
      swift_release();
      goto LABEL_7;
    }
    v198 = 0;
    v120 = *(unsigned __int8 *)(v217[0] + 32);
    v211 = *(unsigned __int8 *)(v217[0] + 33);
    v121 = *(unsigned __int8 *)(v217[0] + 34);
    v210 = *(unsigned __int8 *)(v217[0] + 35);
    v122 = (uint8_t *)*(unsigned __int8 *)(v217[0] + 36);
    v123 = *(unsigned __int8 *)(v217[0] + 37);
    v207 = *(unsigned __int8 *)(v217[0] + 38);
    v206 = *(unsigned __int8 *)(v217[0] + 39);
    v124 = *(unsigned __int8 *)(v217[0] + 40);
    v125 = *(unsigned __int8 *)(v217[0] + 41);
    v199 = *(unsigned __int8 *)(v217[0] + 42);
    v205 = *(unsigned __int8 *)(v217[0] + 43);
    v204 = *(unsigned __int8 *)(v217[0] + 44);
    v203 = *(unsigned __int8 *)(v217[0] + 45);
    v202 = *(unsigned __int8 *)(v217[0] + 46);
    v201 = *(unsigned __int8 *)(v217[0] + 47);
    swift_release();
    if (qword_1002A98F8 != -1)
      swift_once(&qword_1002A98F8, sub_10014C200);
    v208 = v123;
    v209 = (unint64_t)v122;
    v126 = type metadata accessor for Logger(0);
    v195 = sub_100006FB4(v126, (uint64_t)qword_1002B2A80);
    v127 = Logger.logObject.getter(v195);
    v129 = static os_log_type_t.default.getter(v127, v128);
    LODWORD(v194) = v129;
    v130 = os_log_type_enabled(v127, v129);
    v196 = v120;
    v200 = v121;
    v197 = v124;
    if (v130)
    {
      v131 = swift_slowAlloc(12, -1);
      v193 = (uint8_t *)swift_slowAlloc(32, -1);
      v217[0] = (uint64_t)v193;
      v190 = (uint8_t *)v131;
      *(_DWORD *)v131 = 136315138;
      v192 = (os_log_t)(v131 + 12);
      v191 = (uint8_t *)(v131 + 4);
      v132 = UUID.init(uuid:)(v120, v211, v200, v210, v209, v208);
      v133 = UUID.uuidString.getter(v132);
      v135 = v134;
      (*(void (**)(char *, uint8_t *))(v17 + 8))(v19, v16);
      v136 = sub_1000599D0(8, v133, v135);
      v138 = v137;
      v139 = static String._fromSubstring(_:)(v136);
      v141 = v140;
      swift_bridgeObjectRelease(v138);
      v215 = sub_100006FCC(v139, v141, v217);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v215, &v216, v191);
      swift_bridgeObjectRelease(v141);
      v142 = v190;
      _os_log_impl((void *)&_mh_execute_header, v127, (os_log_type_t)v194, "'%s' has connected, accept its source device ", v190, 0xCu);
      v143 = (uint64_t)v193;
      swift_arrayDestroy(v193, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v143, -1, -1);
      swift_slowDealloc(v142, -1, -1);
    }

    v194 = v125;
    v144 = v198;
    v145 = v213;
    v146 = sub_10014BC28();
    if (v144)
    {
      v151 = Logger.logObject.getter(v146);
      v153 = static os_log_type_t.default.getter(v151, v152);
      v154 = v153;
      if (os_log_type_enabled(v151, v153))
      {
        LODWORD(v198) = v154;
        v155 = (uint8_t *)swift_slowAlloc(12, -1);
        v195 = swift_slowAlloc(32, -1);
        v217[0] = v195;
        *(_DWORD *)v155 = 136315138;
        v193 = v155 + 4;
        v156 = UUID.init(uuid:)(v196, v211, v200, v210, v209, v208);
        v157 = UUID.uuidString.getter(v156);
        v159 = v158;
        (*(void (**)(char *, uint8_t *))(v17 + 8))(v19, v16);
        v160 = sub_1000599D0(8, v157, v159);
        v162 = v161;
        v163 = static String._fromSubstring(_:)(v160);
        v165 = v164;
        swift_bridgeObjectRelease(v162);
        v215 = sub_100006FCC(v163, v165, v217);
        v145 = v213;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v215, &v216, v193);
        swift_bridgeObjectRelease(v165);
        _os_log_impl((void *)&_mh_execute_header, v151, (os_log_type_t)v198, "Reset Source Device: No source for first connection '%s'", v155, 0xCu);
        v166 = v195;
        swift_arrayDestroy(v195, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v166, -1, -1);
        swift_slowDealloc(v155, -1, -1);
      }

      v167 = v212;
      v168 = swift_unknownObjectWeakLoadStrong(v145 + 16);
      v171 = v214;
      if (v168)
      {
        v172 = v168;
        sub_100126848(0, 0, 1);
        swift_unknownObjectRelease(v172);
      }
      sub_10014B620(a7, v167, v171, 0, 0, 0, v169, v170, v189, (uint64_t)v190, (uint64_t)v191, (uint64_t)v192, (uint64_t)v193, v194, v195, v196, v197, v198, v199,
        v200,
        v201,
        v202,
        v203,
        v204);
      a7 = v173;
      swift_errorRelease(v144);
      return a7;
    }
    v174 = v146;
    sub_10014B620(a7, v212, v214, v146, v147, v148, v149, v150, v189, (uint64_t)v190, (uint64_t)v191, (uint64_t)v192, (uint64_t)v193, v194, v195, v196, v197, v198, v199,
      v200,
      v201,
      v202,
      v203,
      v204);
    a7 = v175;
    v176 = v174;
LABEL_61:
    swift_bridgeObjectRelease(v176);
    return a7;
  }
LABEL_62:
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_1001549CC(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9)
{
  char v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t inited;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v39;
  uint64_t v40;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _BYTE v47[24];
  _BYTE v48[80];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;

  v9 = a3;
  v10 = a2;
  v45 = a2 >> 16;
  v46 = a2 >> 8;
  v44 = a2 >> 24;
  v11 = HIDWORD(a2);
  v12 = a2 >> 40;
  v37 = HIWORD(a2);
  v13 = HIBYTE(a2);
  v34 = HIBYTE(a2);
  v35 = a2 >> 40;
  v14 = a3 >> 8;
  v36 = a3 >> 16;
  v15 = HIDWORD(a3);
  v32 = HIDWORD(a3);
  v33 = a3 >> 8;
  v16 = a3 >> 40;
  v30 = a3 >> 24;
  v31 = a3 >> 40;
  v28 = HIBYTE(a3);
  v29 = HIWORD(a3);
  sub_100142DAC(a9);
  sub_10004F5FC(v17);
  v39 = v18;
  v19 = sub_1000055B0((uint64_t *)&unk_1002ABD90);
  inited = swift_initStackObject(v19, v48);
  *(_OWORD *)(inited + 16) = xmmword_10021BBA0;
  *(_BYTE *)(inited + 32) = v10;
  *(_BYTE *)(inited + 33) = v46;
  *(_BYTE *)(inited + 34) = v45;
  *(_BYTE *)(inited + 35) = v44;
  *(_BYTE *)(inited + 36) = v11;
  *(_BYTE *)(inited + 37) = v12;
  *(_BYTE *)(inited + 38) = v37;
  *(_BYTE *)(inited + 39) = v13;
  *(_BYTE *)(inited + 40) = v9;
  *(_BYTE *)(inited + 41) = v14;
  *(_BYTE *)(inited + 42) = v36;
  *(_BYTE *)(inited + 43) = v30;
  *(_BYTE *)(inited + 44) = v15;
  *(_BYTE *)(inited + 45) = v16;
  *(_BYTE *)(inited + 46) = v29;
  *(_BYTE *)(inited + 47) = v28;
  swift_bridgeObjectRetain(a1);
  v23 = sub_100068024(inited, a1, v21, v22);
  v24 = v40 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView;
  swift_beginAccess(v40 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView, v47, 0, 0);
  v25 = v24 + *(int *)(type metadata accessor for SyncView(0) + 20);
  v26 = *(_QWORD *)(v25 + *(int *)(type metadata accessor for SyncViewLocalData(0) + 40));
  v48[64] = v10;
  v48[65] = v46;
  v48[66] = v45;
  v48[67] = v44;
  v48[68] = v11;
  v48[69] = v35;
  v48[70] = v37;
  v48[71] = v34;
  v48[72] = v9;
  v48[73] = v33;
  v48[74] = v36;
  v48[75] = v30;
  v48[76] = v32;
  v48[77] = v31;
  v48[78] = v29;
  v48[79] = v28;
  v49 = v23;
  v50 = a5;
  v51 = a6;
  v52 = a7 & 1;
  v53 = v26;
  swift_bridgeObjectRetain(v26);
  swift_isUniquelyReferenced_nonNull_native(v39);
  sub_1000F3014();
  swift_bridgeObjectRelease(0x8000000000000000);
  return v39;
}

void sub_100154C2C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  char v9;

  sub_1000F15D4(a5, a4);
  if ((v9 & 1) != 0)
  {
    sub_1001429D4(a3);
    sub_1000DF7F4();
  }
  else
  {
    sub_100033C10(a1, a2, a5);
  }
}

uint64_t sub_100154CB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  os_log_type_t v15;
  uint8_t *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  os_log_type_t v35;
  uint8_t *v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t result;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;

  swift_bridgeObjectRetain(a3);
  sub_100057E2C();
  v7 = v6;
  swift_bridgeObjectRelease();
  v45 = v7;
  sub_100036DCC(&v45);
  v8 = (uint64_t)v45;
  swift_bridgeObjectRetain(a2);
  v9 = sub_1001422B0(v8, a2);
  swift_release();
  sub_1000714A4((uint64_t)v9, a1);
  if ((v10 & 1) != 0)
    return (uint64_t)v9;
  if (qword_1002A98F8 != -1)
    swift_once(&qword_1002A98F8, sub_10014C200);
  v11 = type metadata accessor for Logger(0);
  sub_100006FB4(v11, (uint64_t)qword_1002B2A80);
  v12 = swift_bridgeObjectRetain_n(v9, 2);
  v13 = Logger.logObject.getter(v12);
  v15 = static os_log_type_t.default.getter(v13, v14);
  v42 = a3;
  if (os_log_type_enabled(v13, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    v17 = (_QWORD *)swift_slowAlloc(32, -1);
    v45 = v17;
    *(_DWORD *)v16 = 136446210;
    v18 = sub_100061BC0((uint64_t)v9);
    v43 = sub_100006FCC(v18, v19, (uint64_t *)&v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v16 + 4);
    swift_bridgeObjectRelease_n(v9, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v15, "In-Circle Devices: %{public}s", v16, 0xCu);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v16, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v9, 2);
  }
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v41 = a1;
    else
      v41 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v20 = _CocoaArrayWrapper.endIndex.getter(v41);
    swift_bridgeObjectRelease();
  }
  else
  {
    v20 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v20)
  {
LABEL_18:
    sub_1000DF7F4();
    v30 = sub_100191B08(v42, v29);
    v31 = (uint64_t)v30;
    if (v30[2])
    {
      swift_bridgeObjectRetain(v30);
      v33 = Logger.logObject.getter(v32);
      v35 = static os_log_type_t.default.getter(v33, v34);
      if (os_log_type_enabled(v33, v35))
      {
        v36 = (uint8_t *)swift_slowAlloc(12, -1);
        v37 = (_QWORD *)swift_slowAlloc(32, -1);
        v45 = v37;
        *(_DWORD *)v36 = 136446210;
        v38 = sub_100061BB4(v31);
        v43 = sub_100006FCC(v38, v39, (uint64_t *)&v45);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v36 + 4);
        swift_bridgeObjectRelease_n(v31, 2);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v33, v35, "Devices no longer in circle: %{public}s", v36, 0xCu);
        swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v37, -1, -1);
        swift_slowDealloc(v36, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v31, 2);
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    return (uint64_t)v9;
  }
  v45 = _swiftEmptyArrayStorage;
  sub_1000586CC();
  if ((v20 & 0x8000000000000000) == 0)
  {
    v21 = 0;
    v22 = v45;
    do
    {
      if ((a1 & 0xC000000000000001) != 0)
        v23 = specialized _ArrayBuffer._getElementSlowPath(_:)(v21, a1);
      else
        swift_retain();
      v24 = dispatch thunk of UniversalControlDevice.id.getter(v23);
      v26 = v25;
      swift_release();
      v45 = v22;
      v27 = v22[2];
      if (v27 >= v22[3] >> 1)
      {
        sub_1000586CC();
        v22 = v45;
      }
      v22[2] = v27 + 1;
      v28 = &v22[2 * v27];
      v28[4] = v24;
      ++v21;
      v28[5] = v26;
    }
    while (v20 != v21);
    goto LABEL_18;
  }
  __break(1u);
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_1001551B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char *a10)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  char v26;
  void (*v27)(char *, uint64_t);
  _QWORD *v28;
  uint64_t v29;
  char v30;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;

  v48 = a2;
  v49 = (_QWORD *)a6;
  v50 = a7;
  v44 = a1;
  v45 = a5;
  v52 = a9;
  v13 = type metadata accessor for UniversalControlDisplayLayout(0);
  v51 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v47 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for UniversalControlConfiguration(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v44 - v20;
  v46 = a10;
  v53 = a8;
  v54 = a10;
  v22 = type metadata accessor for UniversalControlDevice(0);
  sub_10016A0D0((uint64_t)&unk_1002AC0A0);
  LOBYTE(v22) = dispatch thunk of static Equatable.== infix(_:_:)(&v54, &v53, v22, v23);
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v24(v21, a4, v15);
  v24(v19, a3, v15);
  if ((v22 & 1) != 0)
  {
    sub_10016A0D0((uint64_t)&unk_1002AC140);
    v26 = dispatch thunk of static Equatable.== infix(_:_:)(v21, v19, v15, v25);
    v27 = *(void (**)(char *, uint64_t))(v16 + 8);
    v27(v19, v15);
    v27(v21, v15);
    v29 = v48;
    v28 = v49;
    if ((v26 & 1) != 0 && (sub_100198A54((uint64_t)v49, v45) & 1) != 0)
    {
      sub_1000714A4(v29, v44);
      if ((v30 & 1) != 0)
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v51 + 16))(v52, v50, v13);
    }
  }
  else
  {
    v32 = *(void (**)(char *, uint64_t))(v16 + 8);
    v32(v19, v15);
    v32(v21, v15);
    v29 = v48;
    v28 = v49;
  }
  v33 = sub_100158DDC(a4, v28, v29, 0, 0, 1, 0, 0, 1u, v46, 0);
  v34 = v47;
  dispatch thunk of UniversalControlDisplaySolver1.solve()(v33);
  sub_10016A0D0((uint64_t)&qword_1002B1240);
  v35 = v50;
  if ((dispatch thunk of static Equatable.== infix(_:_:)(v34, v50, v13, v36) & 1) != 0)
  {
    v37 = v51;
    (*(void (**)(char *, uint64_t))(v51 + 8))(v34, v13);
    swift_release();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 16))(v52, v35, v13);
  }
  else
  {
    if (qword_1002A98F8 != -1)
      swift_once(&qword_1002A98F8, sub_10014C200);
    v38 = type metadata accessor for Logger(0);
    v39 = sub_100006FB4(v38, (uint64_t)qword_1002B2A80);
    v40 = Logger.logObject.getter(v39);
    v42 = static os_log_type_t.default.getter(v40, v41);
    if (os_log_type_enabled(v40, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v43 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, v42, "Local Display Layout did change", v43, 2u);
      swift_slowDealloc(v43, -1, -1);
    }

    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v51 + 32))(v52, v34, v13);
  }
}

_QWORD *sub_100155550(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;
  _QWORD *v13;

  v7 = sub_1000055B0((uint64_t *)&unk_1002B3350);
  __chkstk_darwin(v7);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1001585E8(a5);
  v10 = type metadata accessor for UniversalControlDisplayLayout(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v9, a3, v10);
  _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v9, 0, 1, v10);
  sub_1000C28FC((uint64_t)v9);
  return v13;
}

uint64_t sub_100155628@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(unsigned __int8 *, char *, uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  char v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  _OWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  void (*v63)(_QWORD, _QWORD);
  uint64_t v64;
  uint64_t v65;
  int v66;
  char *v67;
  _OWORD *v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  _BOOL4 v73;
  uint64_t v74;
  uint8_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  BOOL v88;
  BOOL v90;
  __n128 v91;
  void (*v92)(char *, uint64_t, uint64_t, __n128);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _OWORD *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  unsigned __int8 *v113;
  unsigned __int8 *v114;
  void (*v115)(unsigned __int8 *, char *, uint64_t);
  int v116;
  unsigned __int8 *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  void (*v126)(uint64_t, uint64_t, __n128);
  __n128 v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t (*v133)(uint64_t, uint64_t, uint64_t);
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  NSObject *v137;
  uint64_t v138;
  os_log_type_t v139;
  _BOOL4 v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  NSObject *v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unsigned __int8 *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  NSObject *v161;
  uint64_t v162;
  os_log_type_t v163;
  uint8_t *v164;
  _OWORD *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  __n128 v172;
  uint64_t v173;
  uint64_t v174;
  NSObject *v175;
  uint64_t v176;
  os_log_type_t v177;
  uint8_t *v178;
  _OWORD *v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t (*v188)(uint64_t, uint64_t, uint64_t);
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unsigned __int8 *v200;
  uint64_t (*v201)(uint64_t, uint64_t, uint64_t);
  unsigned __int8 *v202;
  _OWORD *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  _OWORD *v209;
  void (*v210)(unsigned __int8 *, char *, uint64_t);
  uint64_t v211;
  uint64_t v212;
  char *v213;
  uint64_t v214;
  uint64_t *v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  uint64_t v221;
  uint8_t *v222;
  uint64_t v223;
  char v224[8];
  _OWORD *v225;

  v207 = a6;
  v208 = a8;
  v214 = a4;
  v210 = a3;
  v217 = a1;
  v11 = type metadata accessor for UUID(0);
  v197 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v196 = (uint64_t)&v191 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v221 = type metadata accessor for UniversalControlConfiguration(0);
  v13 = *(_QWORD *)(v221 - 8);
  __chkstk_darwin(v221);
  v15 = (char *)&v191 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v218 = sub_1000055B0((uint64_t *)&unk_1002AC0F0);
  v16 = *(_QWORD *)(v218 - 8);
  __chkstk_darwin(v218);
  v222 = (uint8_t *)&v191 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v201 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000055B0(&qword_1002B3368);
  __chkstk_darwin(v201);
  v200 = (unsigned __int8 *)&v191 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for UniversalControlDisplayLayout(0);
  v219 = *(_QWORD *)(v19 - 8);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v191 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v20);
  v198 = (uint64_t)&v191 - v24;
  v25 = __chkstk_darwin(v23);
  v216 = (char *)&v191 - v26;
  v27 = __chkstk_darwin(v25);
  v220 = (char *)&v191 - v28;
  __chkstk_darwin(v27);
  v202 = (unsigned __int8 *)&v191 - v29;
  v30 = sub_1000055B0((uint64_t *)&unk_1002B3370);
  v31 = __chkstk_darwin(v30);
  v203 = (_OWORD *)((char *)&v191 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v31);
  v204 = (uint64_t)&v191 - v33;
  v34 = sub_1000055B0((uint64_t *)&unk_1002B3350);
  __chkstk_darwin(v34);
  v215 = (uint64_t *)((char *)&v191 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000F18E0();
  if ((v36 & 1) != 0)
  {
    sub_1000714A4(a5, v214);
    if ((v37 & 1) != 0)
    {
      sub_1000F18E0();
      if ((v38 & 1) != 0)
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v219 + 16))(v208, v207, v19);
    }
  }
  swift_bridgeObjectRetain(a7);
  sub_100058248(v40, v41, v42, v43, v44, v45, v46, v47, v191, v192, v193, (uint64_t)v194, v195, v196, v197, v198, v199, (uint64_t)v200, (uint64_t)v201,
    (uint64_t)v202,
    (uint64_t)v203,
    v204,
    v205,
    v206,
    v207,
    v208);
  v49 = v48;
  v214 = a7;
  swift_bridgeObjectRelease();
  v225 = v49;
  sub_100160538(&v225);
  v209 = v225;
  v193 = v11;
  v194 = v22;
  v195 = a5;
  v211 = v19;
  swift_bridgeObjectRetain(a2);
  sub_100057E2C();
  v51 = v50;
  swift_bridgeObjectRelease();
  v53 = dispatch thunk of UniversalControlDevice.id.getter(v52);
  v55 = v54;
  swift_retain();
  v57 = v51;
  if ((swift_isUniquelyReferenced_nonNull_native(v56) & 1) == 0)
  {
    sub_100077ACC();
    v57 = v189;
  }
  v58 = *(_QWORD *)(v57 + 16);
  if (v58 >= *(_QWORD *)(v57 + 24) >> 1)
  {
    sub_100077ACC();
    v57 = v190;
  }
  v212 = v16;
  *(_QWORD *)(v57 + 16) = v58 + 1;
  v59 = v57 + 16 * v58;
  *(_QWORD *)(v59 + 32) = v53;
  *(_QWORD *)(v59 + 40) = v55;
  swift_release();
  v225 = (_OWORD *)v57;
  swift_bridgeObjectRetain(v57);
  sub_100036DCC(&v225);
  swift_bridgeObjectRelease();
  v60 = (uint64_t)v225;
  v62 = dispatch thunk of UniversalControlDevice.id.getter(v61);
  v63 = (void (*)(_QWORD, _QWORD))v215;
  sub_100041D70(v62, v64, v214, (uint64_t)v215);
  v65 = v211;
  v66 = _s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v63, 1, v211);
  v67 = v220;
  v68 = v209;
  if (v66 == 1)
  {
    swift_release();
    swift_release();
    sub_100025A28((uint64_t)v63, (uint64_t *)&unk_1002B3350);
    if (qword_1002A98F8 != -1)
      swift_once(&qword_1002A98F8, sub_10014C200);
    v69 = type metadata accessor for Logger(0);
    v70 = sub_100006FB4(v69, (uint64_t)qword_1002B2A80);
    v71 = Logger.logObject.getter(v70);
    v72 = static os_log_type_t.error.getter();
    v73 = os_log_type_enabled(v71, v72);
    v74 = v208;
    if (v73)
    {
      v75 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v75 = 0;
      _os_log_impl((void *)&_mh_execute_header, v71, v72, "Synced Device Layouts is missing a layout for the local device", v75, 2u);
      swift_slowDealloc(v75, -1, -1);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v219 + 16))(v74, v207, v65);
  }
  v76 = ((uint64_t (*)(void))UniversalControlDisplayLayout.displaysID.getter)();
  v205 = v77;
  v206 = v76;
  v78 = *(uint64_t **)(v219 + 8);
  ((void (*)(_QWORD, uint64_t))v78)(v63, v65);
  v214 = *((_QWORD *)v68 + 2);
  v215 = v78;
  if (v214)
  {
    v213 = (char *)v68 + ((*(unsigned __int8 *)(v212 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v212 + 80));
    v212 = *(_QWORD *)(v212 + 72);
    swift_retain();
    v79 = 0;
    while (1)
    {
      v80 = (uint64_t)v222;
      sub_1000FB4A8((uint64_t)&v213[v212 * v79], (uint64_t)v222, (uint64_t *)&unk_1002AC0F0);
      v81 = v80 + *(int *)(v218 + 48);
      v82 = UniversalControlDisplayLayout.devices.getter();
      v83 = v82;
      v84 = *(_QWORD *)(v82 + 16);
      if (v84 == *(_QWORD *)(v60 + 16))
      {
        if (v84)
        {
          if (v82 == v60)
          {
            v88 = 1;
          }
          else
          {
            v85 = 0;
            v86 = v84 - 1;
            do
            {
              v87 = static UniversalControlUUID.compare(lhs:rhs:)(*(_QWORD *)(v83 + v85 + 32), *(_QWORD *)(v83 + v85 + 40));
              v88 = v87 == 0;
              v90 = v86-- != 0;
              if (v87)
                break;
              v85 += 16;
            }
            while (v90);
            v65 = v211;
            v67 = v220;
          }
        }
        else
        {
          v88 = 1;
        }
      }
      else
      {
        v88 = 0;
      }
      v91 = swift_bridgeObjectRelease();
      v92 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v219 + 16);
      v92(v67, v81, v65, v91);
      v93 = v221;
      v94 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v217, v221);
      if (v88)
      {
        v95 = UniversalControlDisplayLayout.configuration.getter(v94);
        v96 = v67;
        v98 = v97;
        UniversalControlConfiguration.id.getter(v95);
        v99 = v211;
        v100 = static UniversalControlUUID.compare(lhs:rhs:)(v95, v98);
        (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v221);
        v101 = v96;
        v65 = v99;
        v78 = v215;
        ((void (*)(char *, uint64_t))v215)(v101, v99);
        v102 = v216;
        v103 = ((uint64_t (*)(char *, uint64_t, uint64_t))v92)(v216, v81, v65);
        if (!v100)
        {
          v104 = UniversalControlDisplayLayout.displaysID.getter(v103);
          v106 = static UniversalControlUUID.compare(lhs:rhs:)(v104, v105);
          ((void (*)(char *, uint64_t))v78)(v102, v65);
          if (!v106)
          {
            swift_release();
            v128 = v204;
            sub_10005FA70((uint64_t)v222, v204, (uint64_t *)&unk_1002AC0F0);
            v129 = v128;
            v130 = 0;
            goto LABEL_39;
          }
          goto LABEL_36;
        }
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v93);
        v78 = v215;
        ((void (*)(char *, uint64_t))v215)(v67, v65);
        v102 = v216;
        ((void (*)(char *, uint64_t, uint64_t))v92)(v216, v81, v65);
      }
      ((void (*)(char *, uint64_t))v78)(v102, v65);
LABEL_36:
      ++v79;
      sub_100025A28((uint64_t)v222, (uint64_t *)&unk_1002AC0F0);
      v67 = v220;
      if (v79 == v214)
      {
        swift_release();
        break;
      }
    }
  }
  v128 = v204;
  v129 = v204;
  v130 = 1;
LABEL_39:
  v107 = v218;
  _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v129, v130, 1, v218);
  swift_release();
  swift_release();
  v108 = v203;
  sub_1000FB4A8(v128, (uint64_t)v203, (uint64_t *)&unk_1002B3370);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v108, 1, v107) == 1)
  {
    sub_100025A28((uint64_t)v108, (uint64_t *)&unk_1002B3370);
    v110 = v207;
    v109 = v208;
LABEL_48:
    sub_100025A28(v128, (uint64_t *)&unk_1002B3370);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v219 + 16))(v109, v110, v65);
  }
  v111 = (char *)v108 + *(int *)(v107 + 48);
  v112 = (uint64_t)v201;
  v113 = v200;
  v114 = &v200[*((int *)v201 + 12)];
  *(_OWORD *)v200 = *v108;
  v115 = *(void (**)(unsigned __int8 *, char *, uint64_t))(v219 + 32);
  v115(v114, v111, v65);
  v116 = *v113;
  LODWORD(v222) = v113[1];
  LODWORD(v221) = v113[2];
  LODWORD(v220) = v113[3];
  LODWORD(v218) = v113[4];
  LODWORD(v217) = v113[5];
  LODWORD(v216) = v113[6];
  LODWORD(v214) = v113[7];
  LODWORD(v213) = v113[8];
  LODWORD(v212) = v113[9];
  LODWORD(v209) = v113[10];
  LODWORD(v206) = v113[11];
  v117 = &v113[*(int *)(v112 + 48)];
  v118 = (uint64_t)v202;
  v115(v202, (char *)v117, v65);
  v119 = sub_100062418();
  if (!v119)
  {
    ((void (*)(uint64_t, uint64_t))v78)(v118, v65);
    v109 = v208;
LABEL_47:
    v128 = v204;
    v110 = v207;
    goto LABEL_48;
  }
  LODWORD(v205) = v116;
  v210 = v115;
  v120 = dispatch thunk of UniversalControlDisplay.id.getter(v119);
  swift_release();
  v121 = UniversalControlDisplayLayout.displayFrames(relativeTo:)(v120);
  if (!v121)
  {
    v65 = v211;
    ((void (*)(uint64_t, uint64_t))v215)(v118, v211);
    v109 = v208;
    goto LABEL_47;
  }
  v122 = v121;
  sub_10016A0D0((uint64_t)&qword_1002B1240);
  v110 = v207;
  v123 = v211;
  v125 = dispatch thunk of static Equatable.== infix(_:_:)(v118, v207, v211, v124);
  v126 = (void (*)(uint64_t, uint64_t, __n128))v215;
  if ((v125 & 1) != 0)
  {
    v127 = swift_bridgeObjectRelease();
    v126(v118, v123, v127);
    v109 = v208;
    v65 = v123;
    v128 = v204;
    goto LABEL_48;
  }
  v207 = v122;
  if (qword_1002A98F8 != -1)
    swift_once(&qword_1002A98F8, sub_10014C200);
  v131 = type metadata accessor for Logger(0);
  v132 = sub_100006FB4(v131, (uint64_t)qword_1002B2A80);
  v133 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v219 + 16);
  v134 = v198;
  v135 = v211;
  v136 = v133(v198, v118, v211);
  v219 = v132;
  v137 = Logger.logObject.getter(v136);
  v139 = static os_log_type_t.default.getter(v137, v138);
  LODWORD(v203) = v139;
  v140 = os_log_type_enabled(v137, v139);
  v141 = (uint64_t)v194;
  if (v140)
  {
    v142 = swift_slowAlloc(22, -1);
    v201 = v133;
    v143 = v142;
    v200 = (unsigned __int8 *)swift_slowAlloc(32, -1);
    v225 = v200;
    *(_DWORD *)v143 = 136446466;
    v192 = v143 + 4;
    v144 = v134;
    v145 = v196;
    v146 = UUID.init(uuid:)(v205, v222, v221, v220, v218, v217);
    v147 = v137;
    v148 = UUID.uuidString.getter(v146);
    v150 = v149;
    (*(void (**)(uint64_t, uint64_t))(v197 + 8))(v145, v193);
    v151 = sub_1000599D0(8, v148, v150);
    v152 = static String._fromSubstring(_:)(v151);
    v154 = v153;
    swift_bridgeObjectRelease();
    v223 = sub_100006FCC(v152, v154, (uint64_t *)&v225);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v223, v224, v192);
    swift_bridgeObjectRelease();
    *(_WORD *)(v143 + 12) = 2048;
    v156 = UniversalControlDisplayLayout.version.getter(v155);
    ((void (*)(uint64_t, uint64_t))v215)(v144, v135);
    v223 = v156;
    v118 = (uint64_t)v202;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v223, v224, v143 + 14);
    _os_log_impl((void *)&_mh_execute_header, v147, (os_log_type_t)v203, "Display Layout: [%{public}s] version=%ld", (uint8_t *)v143, 0x16u);
    v157 = v200;
    swift_arrayDestroy(v200, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v157, -1, -1);
    v158 = v143;
    v133 = v201;
    swift_slowDealloc(v158, -1, -1);

  }
  else
  {
    ((void (*)(uint64_t, uint64_t))v215)(v134, v135);

  }
  v159 = v135;
  v160 = v133(v141, v118, v135);
  v161 = Logger.logObject.getter(v160);
  v163 = static os_log_type_t.default.getter(v161, v162);
  if (os_log_type_enabled(v161, v163))
  {
    v164 = (uint8_t *)swift_slowAlloc(12, -1);
    v165 = (_OWORD *)swift_slowAlloc(32, -1);
    v225 = v165;
    *(_DWORD *)v164 = 136446210;
    v222 = v164 + 4;
    v166 = UniversalControlDisplayLayout.links.getter();
    v167 = type metadata accessor for UniversalControlLink(0);
    v168 = Array.description.getter(v166, v167);
    v169 = v141;
    v171 = v170;
    swift_bridgeObjectRelease();
    v223 = sub_100006FCC(v168, v171, (uint64_t *)&v225);
    v159 = v211;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v223, v224, v222);
    v172 = swift_bridgeObjectRelease();
    ((void (*)(uint64_t, uint64_t, __n128))v215)(v169, v159, v172);
    _os_log_impl((void *)&_mh_execute_header, v161, v163, "Display Layout Links: %{public}s", v164, 0xCu);
    swift_arrayDestroy(v165, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v165, -1, -1);
    swift_slowDealloc(v164, -1, -1);
  }
  else
  {
    ((void (*)(uint64_t, uint64_t))v215)(v141, v159);
  }

  v173 = v207;
  v174 = swift_bridgeObjectRetain_n(v207, 2);
  v175 = Logger.logObject.getter(v174);
  v177 = static os_log_type_t.default.getter(v175, v176);
  if (os_log_type_enabled(v175, v177))
  {
    v178 = (uint8_t *)swift_slowAlloc(12, -1);
    v179 = (_OWORD *)swift_slowAlloc(32, -1);
    v225 = v179;
    *(_DWORD *)v178 = 136446210;
    type metadata accessor for CGRect(0);
    v181 = v180;
    v182 = sub_1000E0FF4();
    swift_bridgeObjectRetain(v207);
    v183 = Dictionary.description.getter(v207, &type metadata for UniversalControlDisplayID, v181, v182);
    v185 = v184;
    swift_bridgeObjectRelease();
    v223 = sub_100006FCC(v183, v185, (uint64_t *)&v225);
    v159 = v211;
    v173 = v207;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v223, v224, v178 + 4);
    swift_bridgeObjectRelease_n(v173, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v175, v177, "Display Layout Rects: %{public}s", v178, 0xCu);
    swift_arrayDestroy(v179, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v179, -1, -1);
    swift_slowDealloc(v178, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v173, 2);
  }
  v186 = v208;
  v187 = v204;
  v188 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v210;
  sub_100151658(v173, v195);
  swift_bridgeObjectRelease();
  sub_100025A28(v187, (uint64_t *)&unk_1002B3370);
  return v188(v186, (uint64_t)v202, v159);
}

uint64_t sub_1001566F0(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t (*v15)(void);
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  _BYTE *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  os_log_type_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD v50[2];
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71[2];
  uint64_t v72[6];

  v69 = a4;
  v8 = sub_1000055B0((uint64_t *)&unk_1002B3350);
  __chkstk_darwin(v8);
  v10 = (char *)v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UniversalControlDisplayLayout(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000FB4A8(a1, (uint64_t)v10, (uint64_t *)&unk_1002B3350);
  if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v10, 1, v11) == 1)
  {
    sub_100025A28((uint64_t)v10, (uint64_t *)&unk_1002B3350);
LABEL_5:
    swift_bridgeObjectRetain(v69);
    return v69;
  }
  v50[1] = v4;
  v61 = HIWORD(a3);
  v62 = HIBYTE(a3);
  v59 = HIDWORD(a3);
  v60 = a3 >> 40;
  v58 = a3 >> 24;
  v56 = a3 >> 16;
  v67 = HIBYTE(a2);
  v68 = a3 >> 8;
  v66 = HIWORD(a2);
  v55 = a2 >> 40;
  v54 = HIDWORD(a2);
  v53 = a2 >> 24;
  v52 = a2 >> 16;
  v64 = v12;
  v15 = *(uint64_t (**)(void))(v12 + 32);
  v51 = a2 >> 8;
  v63 = v11;
  v16 = v15();
  v65 = v14;
  v57 = UniversalControlDisplayLayout.links.getter(v16);
  v17 = swift_allocObject(&unk_10028DBA0, 32, 7);
  *(_WORD *)(v17 + 16) = a2;
  *(_BYTE *)(v17 + 18) = BYTE2(a2);
  *(_BYTE *)(v17 + 19) = BYTE3(a2);
  *(_BYTE *)(v17 + 20) = BYTE4(a2);
  *(_BYTE *)(v17 + 21) = BYTE5(a2);
  *(_BYTE *)(v17 + 22) = v66;
  *(_BYTE *)(v17 + 23) = v67;
  *(_BYTE *)(v17 + 24) = a3;
  *(_BYTE *)(v17 + 25) = v68;
  v18 = v56;
  *(_BYTE *)(v17 + 26) = v56;
  v19 = v58;
  v20 = v59;
  *(_BYTE *)(v17 + 27) = v58;
  *(_BYTE *)(v17 + 28) = v20;
  v22 = v60;
  v21 = v61;
  *(_BYTE *)(v17 + 29) = v60;
  *(_BYTE *)(v17 + 30) = v21;
  v23 = v62;
  *(_BYTE *)(v17 + 31) = v62;
  v24 = (_BYTE *)swift_allocObject(&unk_10028DBC8, 32, 7);
  v24[16] = a2;
  v24[17] = v51;
  v24[18] = v52;
  v24[19] = v53;
  v24[20] = v54;
  v24[21] = v55;
  v24[22] = v66;
  v24[23] = v67;
  v24[24] = a3;
  v24[25] = v68;
  v24[26] = v18;
  v24[27] = v19;
  v24[28] = v20;
  v24[29] = v22;
  v24[30] = v21;
  v24[31] = v23;
  v72[0] = v57;
  v72[1] = (uint64_t)sub_100167FEC;
  v72[2] = v17;
  v72[3] = (uint64_t)sub_100168020;
  v72[4] = (uint64_t)v24;
  v25 = sub_10014330C(v72);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000716D4(v25, v69);
  if ((v26 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v64 + 8))(v65, v63);
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  v27 = v63;
  v28 = v64;
  v29 = type metadata accessor for SyncController(0);
  sub_10016A0D0((uint64_t)&qword_1002B2970);
  ObservableObject<>.objectWillChange.getter(v29);
  ObservableObjectPublisher.send()();
  swift_release();
  if (qword_1002A98F8 != -1)
    swift_once(&qword_1002A98F8, sub_10014C200);
  v30 = type metadata accessor for Logger(0);
  sub_100006FB4(v30, (uint64_t)qword_1002B2A80);
  swift_bridgeObjectRetain_n(v69, 2);
  v31 = swift_bridgeObjectRetain_n(v25, 2);
  v32 = Logger.logObject.getter(v31);
  v34 = static os_log_type_t.default.getter(v32, v33);
  v35 = v34;
  if (os_log_type_enabled(v32, v34))
  {
    v36 = swift_slowAlloc(22, -1);
    LODWORD(v68) = v35;
    v37 = v69;
    v38 = v36;
    v39 = swift_slowAlloc(64, -1);
    v71[0] = v39;
    *(_DWORD *)v38 = 136446466;
    v67 = v38 + 4;
    v40 = type metadata accessor for UniversalControlLink(0);
    swift_bridgeObjectRetain(v37);
    v42 = Array.description.getter(v41, v40);
    v44 = v43;
    swift_bridgeObjectRelease();
    v70 = sub_100006FCC(v42, v44, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, v71, v67);
    swift_bridgeObjectRelease_n(v37, 2);
    swift_bridgeObjectRelease();
    *(_WORD *)(v38 + 12) = 2082;
    swift_bridgeObjectRetain(v25);
    v46 = Array.description.getter(v45, v40);
    v48 = v47;
    swift_bridgeObjectRelease();
    v70 = sub_100006FCC(v46, v48, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, v71, v38 + 14);
    swift_bridgeObjectRelease_n(v25, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v32, (os_log_type_t)v68, "Connected links changed: %{public}s to %{public}s", (uint8_t *)v38, 0x16u);
    swift_arrayDestroy(v39, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1, -1);
    swift_slowDealloc(v38, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v69, 2);
    swift_bridgeObjectRelease_n(v25, 2);
  }

  (*(void (**)(char *, uint64_t))(v28 + 8))(v65, v27);
  return v25;
}

void *sub_100156C98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20[2];

  v7 = UniversalControlConfiguration.reachableDevices(from:)(a2, a3);
  swift_bridgeObjectRetain(a5);
  v8 = sub_1000395A4(v7, a5);
  if ((sub_100198A54((uint64_t)v8, a4) & 1) == 0)
  {
    if (qword_1002A98F8 != -1)
      swift_once(&qword_1002A98F8, sub_10014C200);
    v9 = type metadata accessor for Logger(0);
    sub_100006FB4(v9, (uint64_t)qword_1002B2A80);
    v10 = swift_retain_n(v8, 2);
    v11 = Logger.logObject.getter(v10);
    v13 = static os_log_type_t.default.getter(v11, v12);
    if (os_log_type_enabled(v11, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v15 = swift_slowAlloc(32, -1);
      v20[0] = v15;
      *(_DWORD *)v14 = 136446210;
      v16 = sub_100061BB4((uint64_t)v8);
      v19 = sub_100006FCC(v16, v17, v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, v20, v14 + 4);
      swift_release_n(v8, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v13, "Configured Devices: %{public}s", v14, 0xCu);
      swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);

    }
    else
    {

      swift_release_n(v8, 2);
    }
  }
  return v8;
}

void sub_100156E78(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>, unint64_t a10)
{
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t (*v19)(_QWORD);
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t inited;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char v51[48];
  char v52[56];

  v43 = a7;
  *(_QWORD *)&v41 = a6;
  v42 = a5;
  v16 = type metadata accessor for ConnectedDevices(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100022838(a3, a9, v19);
  swift_bridgeObjectRetain(a1);
  v20 = sub_100191B08(a2, a1);
  v21 = v20[2];
  v37 = a9;
  v36 = v18;
  if (v21)
  {
    sub_100147A30((uint64_t)v20, (uint64_t)v18);
    sub_1000255F0(a9, type metadata accessor for ConnectedDevices);
    swift_bridgeObjectRelease();
    sub_10005F3FC((uint64_t)v18, a9, type metadata accessor for ConnectedDevices);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v49 = HIWORD(a10);
  v50 = HIBYTE(a10);
  v47 = HIDWORD(a10);
  v48 = a10 >> 40;
  v45 = a10 >> 16;
  v46 = a10 >> 24;
  v44 = a10 >> 8;
  v40 = HIWORD(a8);
  v39 = a8 >> 16;
  swift_bridgeObjectRetain(a4);
  v38 = sub_100166924(v41, a4);
  v22 = sub_1000055B0((uint64_t *)&unk_1002ABD90);
  inited = swift_initStackObject(v22, v52);
  v41 = xmmword_10021BBA0;
  *(_OWORD *)(inited + 16) = xmmword_10021BBA0;
  *(_QWORD *)(inited + 32) = a8;
  *(_BYTE *)(inited + 40) = a10;
  *(_BYTE *)(inited + 41) = v44;
  *(_BYTE *)(inited + 42) = v45;
  *(_BYTE *)(inited + 43) = v46;
  *(_BYTE *)(inited + 44) = v47;
  *(_BYTE *)(inited + 45) = v48;
  *(_BYTE *)(inited + 46) = v49;
  *(_BYTE *)(inited + 47) = v50;
  v26 = sub_100068024(inited, v38, v24, v25);
  v27 = v42;
  swift_bridgeObjectRetain(v42);
  v28 = sub_100166924(v43, v27);
  v29 = swift_initStackObject(v22, v51);
  *(_OWORD *)(v29 + 16) = v41;
  *(_WORD *)(v29 + 32) = a8;
  *(_BYTE *)(v29 + 34) = v39;
  *(_BYTE *)(v29 + 35) = BYTE3(a8);
  *(_BYTE *)(v29 + 36) = BYTE4(a8);
  *(_BYTE *)(v29 + 37) = BYTE5(a8);
  *(_BYTE *)(v29 + 38) = v40;
  *(_BYTE *)(v29 + 39) = HIBYTE(a8);
  *(_BYTE *)(v29 + 40) = a10;
  *(_BYTE *)(v29 + 41) = v44;
  *(_BYTE *)(v29 + 42) = v45;
  *(_BYTE *)(v29 + 43) = v46;
  *(_BYTE *)(v29 + 44) = v47;
  *(_BYTE *)(v29 + 45) = v48;
  *(_BYTE *)(v29 + 46) = v49;
  *(_BYTE *)(v29 + 47) = v50;
  v32 = sub_100068024(v29, v28, v30, v31);
  LOBYTE(v28) = sub_100198A54(v32, v26);
  swift_bridgeObjectRelease();
  if ((v28 & 1) != 0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v33 = (uint64_t)v36;
    v34 = v37;
    sub_1001474A4(v32, (uint64_t)v36);
    sub_1000255F0(v34, type metadata accessor for ConnectedDevices);
    swift_bridgeObjectRelease();
    sub_10005F3FC(v33, v34, type metadata accessor for ConnectedDevices);
  }
}

uint64_t sub_1001571C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v5 = (_QWORD *)(a1 + *(int *)(type metadata accessor for ConnectedDevices(0) + 32));
  v6 = *v5;
  v7 = v5[1];
  swift_bridgeObjectRetain(*v5);
  swift_bridgeObjectRetain(v7);
  if (!sub_100071340(v8, a3))
  {
    if (qword_1002A98F8 != -1)
      swift_once(&qword_1002A98F8, sub_10014C200);
    v9 = type metadata accessor for Logger(0);
    sub_100006FB4(v9, (uint64_t)qword_1002B2A80);
    swift_bridgeObjectRetain_n(v6, 2);
    swift_bridgeObjectRetain_n(v7, 2);
    swift_bridgeObjectRetain_n(a2, 2);
    v10 = swift_bridgeObjectRetain_n(a3, 2);
    v11 = Logger.logObject.getter(v10);
    v13 = static os_log_type_t.default.getter(v11, v12);
    if (os_log_type_enabled(v11, v13))
    {
      v14 = swift_slowAlloc(22, -1);
      v24 = swift_slowAlloc(64, -1);
      v26 = v24;
      *(_DWORD *)v14 = 136446466;
      swift_bridgeObjectRetain(a3);
      _sSa13EnsembleAgent16UniversalControl0cD8DeviceIDVRszlE5labelSSvg_0();
      v16 = v15;
      v18 = v17;
      swift_bridgeObjectRelease();
      v25 = sub_100006FCC(v16, v18, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v14 + 4);
      swift_bridgeObjectRelease_n(a3, 2);
      swift_bridgeObjectRelease_n(a2, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v14 + 12) = 2082;
      swift_bridgeObjectRetain(v7);
      _sSa13EnsembleAgent16UniversalControl0cD8DeviceIDVRszlE5labelSSvg_0();
      v20 = v19;
      v22 = v21;
      swift_bridgeObjectRelease();
      v25 = sub_100006FCC(v20, v22, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v14 + 14);
      swift_bridgeObjectRelease_n(v7, 2);
      swift_bridgeObjectRelease_n(v6, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v13, "Sync Connected Devices: %{public}s -> %{public}s", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy(v24, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v14, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v7, 2);
      swift_bridgeObjectRelease_n(v6, 2);
      swift_bridgeObjectRelease_n(a3, 2);
      swift_bridgeObjectRelease_n(a2, 2);
    }
  }
  return v6;
}

id sub_100157488(char a1)
{
  uint64_t v1;
  int v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = a1 & 1;
  v3 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_preferences), "magicEdgesEnabled");
  v4 = v3;
  if ((_DWORD)v3 != v2)
  {
    if ((_DWORD)v3)
    {
      if (qword_1002A98F8 != -1)
        swift_once(&qword_1002A98F8, sub_10014C200);
      v5 = type metadata accessor for Logger(0);
      v6 = sub_100006FB4(v5, (uint64_t)qword_1002B2A80);
      v7 = Logger.logObject.getter(v6);
      v9 = static os_log_type_t.default.getter(v7, v8);
      if (!os_log_type_enabled(v7, v9))
        goto LABEL_12;
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      v11 = "Magic Edges Enabled";
    }
    else
    {
      if (qword_1002A98F8 != -1)
        swift_once(&qword_1002A98F8, sub_10014C200);
      v12 = type metadata accessor for Logger(0);
      v13 = sub_100006FB4(v12, (uint64_t)qword_1002B2A80);
      v7 = Logger.logObject.getter(v13);
      v9 = static os_log_type_t.default.getter(v7, v14);
      if (!os_log_type_enabled(v7, v9))
        goto LABEL_12;
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      v11 = "Magic Edges Disabled";
    }
    _os_log_impl((void *)&_mh_execute_header, v7, v9, v11, v10, 2u);
    swift_slowDealloc(v10, -1, -1);
LABEL_12:

  }
  return v4;
}

uint64_t sub_100157600(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[3];
  uint64_t v59[3];
  uint64_t v60;

  v5 = v4;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (uint64_t)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = 0;
  if ((a3 & 1) == 0)
    goto LABEL_25;
  if ((unint64_t)a2 >> 62)
  {
    if (a2 < 0)
      v49 = a2;
    else
      v49 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
    v14 = _CocoaArrayWrapper.endIndex.getter(v49);
    swift_bridgeObjectRelease();
    if (v14)
      goto LABEL_4;
LABEL_25:
    if (a4)
    {
LABEL_26:
      if (qword_1002A98F8 != -1)
LABEL_39:
        swift_once(&qword_1002A98F8, sub_10014C200);
      v28 = type metadata accessor for Logger(0);
      v29 = sub_100006FB4(v28, (uint64_t)qword_1002B2A80);
      v30 = Logger.logObject.getter(v29);
      v32 = static os_log_type_t.default.getter(v30, v31);
      if (os_log_type_enabled(v30, v32))
      {
        v33 = (uint8_t *)swift_slowAlloc(12, -1);
        v34 = swift_slowAlloc(32, -1);
        v59[0] = v34;
        *(_DWORD *)v33 = 136446210;
        swift_beginAccess(&v60, v58, 0, 0);
        v35 = v60;
        if (v60)
        {
          swift_retain();
          v37 = dispatch thunk of UniversalControlDevice.id.getter(v36);
          swift_release();
          v38 = UUID.init(uuid:)(v37, v37 >> 8, v37 >> 16, v37 >> 24, HIDWORD(v37), v37 >> 40);
          v39 = UUID.uuidString.getter(v38);
          v41 = v40;
          (*(void (**)(uint64_t, unint64_t))(v11 + 8))(v13, v10);
          v42 = sub_1000599D0(8, v39, v41);
          v35 = static String._fromSubstring(_:)(v42);
          v44 = v43;
          swift_bridgeObjectRelease();
        }
        else
        {
          v44 = 0xE000000000000000;
        }
        v57 = sub_100006FCC(v35, v44, v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, v58, v33 + 4);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v30, v32, "Preferred Device: '%{public}s'", v33, 0xCu);
        swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v34, -1, -1);
        swift_slowDealloc(v33, -1, -1);
      }

    }
    goto LABEL_33;
  }
  v14 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v14)
    goto LABEL_25;
LABEL_4:
  v55 = v10;
  v56 = a4;
  v53 = v13;
  v54 = v11;
  swift_bridgeObjectRetain(a1);
  v15 = sub_1001423B8(a2, a1);
  v16 = UniversalControlPreferences.preferredDevices.getter();
  v17 = *(_QWORD *)(*(_QWORD *)(v5 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_discoveryController) + 112);
  v59[0] = v16;
  swift_bridgeObjectRetain(v17);
  sub_100191FD4();
  v18 = v59[0];
  v19 = *(_QWORD *)(v59[0] + 16);
  if (v19)
  {
    swift_bridgeObjectRetain(v59[0]);
    v20 = 0;
    v21 = v15 + 5;
    v51 = v15 + 5;
    v52 = v18 + 32;
    while (1)
    {
      v22 = v15[2];
      if (v22)
        break;
LABEL_11:
      if (++v20 == v19)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n(v18, 2);
        goto LABEL_15;
      }
    }
    swift_bridgeObjectRetain(v15);
    while (static UniversalControlUUID.compare(lhs:rhs:)(*(v21 - 1), *v21))
    {
      v21 += 2;
      if (!--v22)
      {
        swift_bridgeObjectRelease();
        v21 = v51;
        goto LABEL_11;
      }
    }
    swift_bridgeObjectRelease_n(v18, 2);
    swift_bridgeObjectRelease_n(v15, 2);
    v13 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_15:
    v13 = 1;
  }
  v10 = a2 & 0xC000000000000001;
  swift_bridgeObjectRetain(a2);
  v11 = 4;
  while (1)
  {
    if (v10)
    {
      v23 = specialized _ArrayBuffer._getElementSlowPath(_:)(v11 - 4, a2);
      v24 = v23;
    }
    else
    {
      v24 = *(_QWORD *)(a2 + 8 * v11);
      swift_retain();
    }
    v25 = v11 - 3;
    if (__OFADD__(v11 - 4, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    v26 = dispatch thunk of UniversalControlDevice.id.getter(v23);
    if ((v13 & 1) == 0 && !static UniversalControlUUID.compare(lhs:rhs:)(v26, v27))
      break;
    swift_release();
    ++v11;
    if (v25 == v14)
    {
      swift_bridgeObjectRelease();
      v60 = 0;
      v11 = v54;
      v10 = v55;
      v13 = v53;
      a4 = v56;
      goto LABEL_25;
    }
  }
  swift_bridgeObjectRelease();
  v60 = v24;
  v59[0] = v24;
  if (!v56)
  {
    v11 = v54;
    v10 = v55;
    v13 = v53;
    goto LABEL_26;
  }
  v58[0] = v56;
  v46 = type metadata accessor for UniversalControlDevice(0);
  sub_10016A0D0((uint64_t)&unk_1002AC0A0);
  v48 = v47;
  swift_retain_n(v24, 2);
  LOBYTE(v46) = dispatch thunk of static Equatable.== infix(_:_:)(v59, v58, v46, v48);
  swift_release();
  swift_release();
  v11 = v54;
  v10 = v55;
  v13 = v53;
  if ((v46 & 1) == 0)
    goto LABEL_26;
LABEL_33:
  swift_beginAccess(&v60, v59, 0, 0);
  return v60;
}

_QWORD *sub_100157B58(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  char v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;

  if ((a4 & 1) != 0 && a6)
  {
    swift_retain();
    sub_1000716D4((uint64_t)_swiftEmptyArrayStorage, a5);
    if ((v7 & 1) == 0)
    {
      if (qword_1002A98F8 != -1)
        swift_once(&qword_1002A98F8, sub_10014C200);
      v8 = type metadata accessor for Logger(0);
      sub_100006FB4(v8, (uint64_t)qword_1002B2A80);
      v9 = swift_bridgeObjectRetain_n(a5, 2);
      v10 = Logger.logObject.getter(v9);
      v12 = static os_log_type_t.default.getter(v10, v11);
      if (!os_log_type_enabled(v10, v12))
      {

        swift_release();
        swift_bridgeObjectRelease_n(a5, 2);
        return _swiftEmptyArrayStorage;
      }
      v13 = swift_slowAlloc(22, -1);
      v14 = swift_slowAlloc(64, -1);
      v24 = v14;
      *(_DWORD *)v13 = 136446466;
      v15 = type metadata accessor for UniversalControlLink(0);
      swift_bridgeObjectRetain(a5);
      v17 = Array.description.getter(v16, v15);
      v19 = v18;
      swift_bridgeObjectRelease();
      v23 = sub_100006FCC(v17, v19, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v13 + 4);
      swift_bridgeObjectRelease_n(a5, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v13 + 12) = 2082;
      v20 = Array.description.getter(_swiftEmptyArrayStorage, v15);
      v23 = sub_100006FCC(v20, v21, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v13 + 14);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v12, "Magic Links: %{public}s -> %{public}s", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy(v14, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);

    }
    swift_release();
  }
  return _swiftEmptyArrayStorage;
}

BOOL sub_100157DA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = UniversalControlLink.display1.getter();
  return static UniversalControlUUID.compare(lhs:rhs:)(v5, v6, a2, a3) == 0;
}

BOOL sub_100157DEC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t v29;
  unsigned __int8 v30;
  uint64_t v31;
  unsigned __int8 v32;
  uint64_t v33;
  unsigned __int8 v34;
  uint64_t v35;
  unsigned __int8 v36;
  uint64_t v37;
  void (*v38)(void);
  uint64_t v39;
  unsigned __int8 v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;
  unsigned __int8 v44;
  uint64_t v45;
  unsigned __int8 v46;
  unsigned __int8 v47;
  unsigned __int8 v48;
  unsigned __int8 v49;
  unsigned __int8 v50;
  unsigned __int8 v51;
  unsigned __int8 v52;
  unsigned __int8 v53;
  char *v54;
  uint64_t v55;
  void (*v56)(void);
  _BYTE *v57;
  void (*v58)(char *, uint64_t);
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  _BOOL8 v78;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;

  v4 = sub_1000055B0((uint64_t *)&unk_1002AC0F0);
  v5 = __chkstk_darwin(v4);
  v85 = (char *)&v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v84 = (char *)&v80 - v8;
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v80 - v10;
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v80 - v13;
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v80 - v16;
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v80 - v19;
  v21 = *(int *)(v18 + 48);
  v120 = (char *)&v80 + v21 - v19;
  v22 = &a2[v21];
  v88 = *a2;
  v23 = a2[1];
  v94 = v23;
  v24 = a2[2];
  v25 = a2[3];
  v26 = a2[4];
  v118 = v26;
  v119 = v25;
  v27 = a2[5];
  LOBYTE(v19) = a2[6];
  v116 = v19;
  v117 = v27;
  v28 = a2[7];
  v115 = v28;
  v29 = a2[8];
  v113 = v24;
  v114 = v29;
  v30 = a2[9];
  v89 = v30;
  v31 = a2[10];
  v32 = a2[11];
  v111 = v32;
  v112 = v31;
  v33 = a2[12];
  v34 = a2[13];
  v109 = v34;
  v110 = v33;
  v35 = a2[14];
  v36 = a2[15];
  v107 = v36;
  v108 = v35;
  *v20 = v88;
  v20[1] = v23;
  v20[2] = v24;
  v20[3] = v25;
  v20[4] = v26;
  v20[5] = v27;
  v20[6] = v19;
  v20[7] = v28;
  v20[8] = v29;
  v20[9] = v30;
  v20[10] = v31;
  v20[11] = v32;
  v20[12] = v33;
  v20[13] = v34;
  v20[14] = v35;
  v20[15] = v36;
  v37 = type metadata accessor for UniversalControlDisplayLayout(0);
  v86 = *(_QWORD *)(v37 - 8);
  v38 = *(void (**)(void))(v86 + 16);
  ((void (*)(char *, unsigned __int8 *, uint64_t))v38)(v120, v22, v37);
  v87 = &v17[*(int *)(v4 + 48)];
  v39 = *a1;
  v40 = a1[1];
  v105 = v40;
  v106 = v39;
  v41 = a1[2];
  v42 = a1[3];
  v103 = v42;
  v104 = v41;
  v43 = a1[4];
  v44 = a1[5];
  v101 = v44;
  v102 = v43;
  v45 = a1[6];
  v46 = a1[7];
  v99 = v46;
  v100 = v45;
  v47 = a1[8];
  v98 = v47;
  v48 = a1[9];
  v97 = v48;
  LOBYTE(v33) = a1[10];
  v96 = v33;
  v49 = a1[11];
  v95 = v49;
  v50 = a1[12];
  v93 = v50;
  v51 = a1[13];
  v92 = v51;
  v52 = a1[14];
  v91 = v52;
  v53 = a1[15];
  v90 = v53;
  *v17 = v39;
  v17[1] = v40;
  v17[2] = v41;
  v17[3] = v42;
  v17[4] = v43;
  v17[5] = v44;
  v17[6] = v45;
  v17[7] = v46;
  v17[8] = v47;
  v17[9] = v48;
  v17[10] = v33;
  v17[11] = v49;
  v17[12] = v50;
  v17[13] = v51;
  v17[14] = v52;
  v81 = v17;
  v17[15] = v53;
  v38();
  v83 = v4;
  v54 = &v14[*(int *)(v4 + 48)];
  *v14 = v88;
  v14[1] = v94;
  v14[2] = v113;
  v14[3] = v119;
  v14[4] = v118;
  v14[5] = v117;
  v14[6] = v116;
  v14[7] = v115;
  v14[8] = v114;
  v14[9] = v89;
  v14[10] = v112;
  v14[11] = v111;
  v14[12] = v110;
  v14[13] = v109;
  v14[14] = v108;
  v14[15] = v107;
  v55 = ((uint64_t (*)(char *, char *, uint64_t))v38)(v54, v120, v37);
  v56 = v38;
  v57 = v85;
  v82 = UniversalControlDisplayLayout.version.getter(v55);
  v58 = *(void (**)(char *, uint64_t))(v86 + 8);
  v58(v54, v37);
  v59 = &v11[*(int *)(v4 + 48)];
  *v11 = v106;
  v11[1] = v105;
  v11[2] = v104;
  v11[3] = v103;
  v11[4] = v102;
  v11[5] = v101;
  v11[6] = v100;
  v11[7] = v99;
  v11[8] = v98;
  v11[9] = v97;
  v11[10] = v96;
  v11[11] = v95;
  v11[12] = v93;
  v11[13] = v92;
  v11[14] = v91;
  v11[15] = v90;
  v60 = ((uint64_t (*)(char *, char *, uint64_t))v38)(v59, v87, v37);
  v61 = UniversalControlDisplayLayout.version.getter(v60);
  v62 = v82;
  LODWORD(v11) = v61 >= v82;
  v58(v59, v37);
  v63 = v84;
  v64 = v83;
  v65 = *(int *)(v83 + 48);
  v66 = 2 * (_DWORD)v11;
  v67 = v88;
  if (v62 < v61)
    v68 = 1;
  else
    v68 = v66;
  *v84 = v106;
  v63[1] = v105;
  v63[2] = v104;
  v63[3] = v103;
  v63[4] = v102;
  v63[5] = v101;
  v63[6] = v100;
  v63[7] = v99;
  v63[8] = v98;
  v63[9] = v97;
  v63[10] = v96;
  v63[11] = v95;
  v63[12] = v93;
  v63[13] = v92;
  v63[14] = v91;
  v63[15] = v90;
  ((void (*)(_BYTE *, char *, uint64_t))v56)(&v63[v65], v87, v37);
  v69 = &v57[*(int *)(v64 + 48)];
  *v57 = v67;
  v57[1] = v94;
  v57[2] = v113;
  v57[3] = v119;
  v57[4] = v118;
  v57[5] = v117;
  v57[6] = v116;
  v57[7] = v115;
  v57[8] = v114;
  v70 = v89;
  v57[9] = v89;
  v57[10] = v112;
  v57[11] = v111;
  v57[12] = v110;
  v57[13] = v109;
  v57[14] = v108;
  v57[15] = v107;
  ((void (*)(_BYTE *, char *, uint64_t))v56)(v69, v120, v37);
  if (v68 == 2)
  {
    v71 = v98 | (v97 << 8) | (v96 << 16) | (v95 << 24) | (v93 << 32) | (v92 << 40) | (v91 << 48) | (v90 << 56);
    v72 = v67 | (v94 << 8) | (v113 << 16) | (v119 << 24) | (v118 << 32) | (v117 << 40) | (v116 << 48) | (v115 << 56);
    v73 = v114 | (v70 << 8);
    v74 = v106 | (v105 << 8) | (v104 << 16) | (v103 << 24) | (v102 << 32) | (v101 << 40) | (v100 << 48) | (v99 << 56);
    v75 = v73 | (v112 << 16) | (v111 << 24) | (v110 << 32) | (v109 << 40) | (v108 << 48) | (v107 << 56);
    v76 = static UniversalControlDeviceID.< infix(_:_:)(v74, v71, v72, v75);
    v77 = (uint64_t)v81;
    if ((v76 & 1) != 0)
    {
      v78 = 1;
    }
    else
    {
      static UniversalControlDeviceID.< infix(_:_:)(v72, v75, v74, v71);
      v78 = 0;
    }
  }
  else
  {
    v78 = v68 != 0;
    v77 = (uint64_t)v81;
  }
  sub_100025A28((uint64_t)v57, (uint64_t *)&unk_1002AC0F0);
  sub_100025A28((uint64_t)v63, (uint64_t *)&unk_1002AC0F0);
  sub_100025A28(v77, (uint64_t *)&unk_1002AC0F0);
  sub_100025A28((uint64_t)v20, (uint64_t *)&unk_1002AC0F0);
  return v78;
}

_QWORD *sub_1001585E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  int64_t v19;
  uint64_t v20;
  char *v21;
  char v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  char *v32;
  _QWORD *v33;
  Swift::Int v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  _BYTE *v44;
  _QWORD v46[2];
  char *i;
  _QWORD *v48;
  char *v49;
  int64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  int64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  _BYTE v71[16];
  _QWORD v72[9];
  _QWORD *v73;
  _QWORD v74[2];
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char v78[8];

  v2 = sub_1000055B0((uint64_t *)&unk_1002B3380);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v70 = (uint64_t)v46 - v6;
  v7 = sub_1000055B0((uint64_t *)&unk_1002B3350);
  __chkstk_darwin(v7);
  v56 = (uint64_t)v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UniversalControlDisplayLayout(0);
  v55 = *(_QWORD *)(v9 - 8);
  v10 = __chkstk_darwin(v9);
  v52 = (char *)v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v49 = (char *)v46 - v12;
  v73 = &_swiftEmptyDictionarySingleton;
  sub_100043078(v74, a1);
  v53 = v74[0];
  v51 = v74[1];
  v54 = v76;
  v13 = v77;
  v46[1] = v75;
  v50 = (unint64_t)(v75 + 64) >> 6;
  v48 = v72;
  swift_bridgeObjectRetain(a1);
  for (i = v5; ; v5 = i)
  {
LABEL_2:
    if (v13)
    {
      v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v15 = v14 | (v54 << 6);
      goto LABEL_20;
    }
    v16 = v54 + 1;
    if (__OFADD__(v54, 1))
      goto LABEL_38;
    if (v16 >= v50)
      break;
    v17 = *(_QWORD *)(v51 + 8 * v16);
    v18 = v54 + 1;
    if (!v17)
    {
      v18 = v54 + 2;
      if (v54 + 2 >= v50)
        break;
      v17 = *(_QWORD *)(v51 + 8 * v18);
      if (!v17)
      {
        v18 = v54 + 3;
        if (v54 + 3 >= v50)
          break;
        v17 = *(_QWORD *)(v51 + 8 * v18);
        if (!v17)
        {
          v18 = v54 + 4;
          if (v54 + 4 >= v50)
            break;
          v17 = *(_QWORD *)(v51 + 8 * v18);
          if (!v17)
          {
            v18 = v54 + 5;
            if (v54 + 5 >= v50)
              break;
            v17 = *(_QWORD *)(v51 + 8 * v18);
            if (!v17)
            {
              v19 = v54 + 6;
              do
              {
                if (v19 >= v50)
                  goto LABEL_36;
                v17 = *(_QWORD *)(v51 + 8 * v19++);
              }
              while (!v17);
              v18 = v19 - 1;
            }
          }
        }
      }
    }
    v13 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v18 << 6);
    v54 = v18;
LABEL_20:
    v20 = *(_QWORD *)(v53 + 56);
    v21 = (char *)(*(_QWORD *)(v53 + 48) + 16 * v15);
    v22 = *v21;
    v23 = v21[1];
    v24 = v21[2];
    v57 = v21[3];
    v58 = v21[4];
    v59 = v21[5];
    v60 = v21[6];
    v61 = v21[7];
    v62 = v21[8];
    v63 = v21[9];
    v64 = v21[10];
    v65 = v21[11];
    v67 = v21[12];
    v68 = v21[13];
    v69 = v21[14];
    v25 = *(_QWORD *)(v20 + 8 * v15) + OBJC_IVAR____TtC13EnsembleAgent15SyncCoordinator_remoteData;
    v66 = v21[15];
    swift_beginAccess(v25, v78, 0, 0);
    v26 = v25 + *(int *)(type metadata accessor for SyncViewRemoteData(0) + 32);
    v27 = v70;
    sub_1000FB4A8(v26, v70, (uint64_t *)&unk_1002B3380);
    sub_1000FB4A8(v27, (uint64_t)v5, (uint64_t *)&unk_1002B3380);
    v28 = 1;
    if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v5, 1, v9) != 1)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v55 + 32))(v56, v5, v9);
      v28 = 0;
    }
    v29 = v28;
    v30 = v56;
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v56, v29, 1, v9);
    swift_retain();
    sub_100025A28(v70, (uint64_t *)&unk_1002B3380);
    if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v30, 1, v9) == 1)
    {
      swift_release();
      sub_100025A28(v30, (uint64_t *)&unk_1002B3350);
      goto LABEL_2;
    }
    v31 = *(void (**)(char *, uint64_t, uint64_t))(v55 + 32);
    v32 = v49;
    v31(v49, v30, v9);
    v31(v52, (uint64_t)v32, v9);
    v33 = v73;
    if (v73[3] <= v73[2])
    {
      sub_100054DA4();
      v33 = v73;
    }
    Hasher.init(_seed:)(v72, v33[5]);
    v71[0] = v22;
    v71[1] = v23;
    v71[2] = v24;
    v71[3] = v57;
    v71[4] = v58;
    v71[5] = v59;
    v71[6] = v60;
    v71[7] = v61;
    v71[8] = v62;
    v71[9] = v63;
    v71[10] = v64;
    v71[11] = v65;
    v71[12] = v67;
    v71[13] = v68;
    v71[14] = v69;
    v71[15] = v66;
    Hasher.combine(bytes:)(v71, v48);
    v34 = Hasher._finalize()();
    v35 = v33 + 8;
    v36 = -1 << *((_BYTE *)v33 + 32);
    v37 = v34 & ~v36;
    v38 = v37 >> 6;
    if (((-1 << v37) & ~v33[(v37 >> 6) + 8]) != 0)
    {
      v39 = __clz(__rbit64((-1 << v37) & ~v33[(v37 >> 6) + 8])) | v37 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_35;
    }
    v40 = 0;
    v41 = (unint64_t)(63 - v36) >> 6;
    do
    {
      if (++v38 == v41 && (v40 & 1) != 0)
      {
        __break(1u);
LABEL_38:
        __break(1u);
      }
      v42 = v38 == v41;
      if (v38 == v41)
        v38 = 0;
      v40 |= v42;
      v43 = v35[v38];
    }
    while (v43 == -1);
    v39 = __clz(__rbit64(~v43)) + (v38 << 6);
LABEL_35:
    *(_QWORD *)((char *)v35 + ((v39 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v39;
    v44 = (_BYTE *)(v33[6] + 16 * v39);
    *v44 = v22;
    v44[1] = v23;
    v44[2] = v24;
    v44[3] = v57;
    v44[4] = v58;
    v44[5] = v59;
    v44[6] = v60;
    v44[7] = v61;
    v44[8] = v62;
    v44[9] = v63;
    v44[10] = v64;
    v44[11] = v65;
    v44[12] = v67;
    v44[13] = v68;
    v44[14] = v69;
    v44[15] = v66;
    v31((char *)(v33[7] + *(_QWORD *)(v55 + 72) * v39), (uint64_t)v52, v9);
    ++v33[2];
    swift_release();
  }
LABEL_36:
  sub_10005E1F4(v53);
  return v73;
}

uint64_t sub_100158DDC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, char *a10, char a11)
{
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t);
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t inited;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  unint64_t v77;
  _QWORD *v78;
  unint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  char v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  char *v89;
  _QWORD *v90;
  unint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  uint64_t (*v133)(char *, unint64_t, uint64_t);
  char *v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  unint64_t v142;
  uint64_t v143;
  char v144[48];
  char v145[8];
  unint64_t v146;

  v130 = a8;
  v129 = a7;
  v131 = a6;
  v127 = a5;
  v126 = a4;
  v14 = a10;
  v141 = a9;
  v123 = type metadata accessor for UniversalControlConfiguration(0);
  v122 = *(_QWORD *)(v123 - 8);
  __chkstk_darwin(v123);
  v124 = (char *)&v120 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = type metadata accessor for UniversalControlLink.Endpoint(0);
  v138 = *(_QWORD *)(v139 - 8);
  v16 = __chkstk_darwin(v139);
  v137 = (char *)&v120 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v136 = (char *)&v120 - v18;
  v135 = type metadata accessor for UniversalControlConfiguration.GradedLink(0);
  v140 = *(_QWORD *)(v135 - 8);
  v19 = __chkstk_darwin(v135);
  v134 = (char *)&v120 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = a1;
  v128 = a3;
  if ((a11 & 1) != 0)
  {
    v21 = UniversalControlConfiguration.links()(v19);
    v22 = *(_QWORD *)(v21 + 16);
    if (v22)
    {
      v121 = a10;
      v23 = (*(unsigned __int8 *)(v140 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v140 + 80);
      v120 = v21;
      v24 = v21 + v23;
      v132 = *(_QWORD *)(v140 + 72);
      v133 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v140 + 16);
      a2 = _swiftEmptyArrayStorage;
      v14 = v134;
      do
      {
        v142 = v24;
        v143 = v22;
        a3 = v135;
        v25 = v133(v14, v24, v135);
        v26 = v136;
        v27 = UniversalControlConfiguration.GradedLink.endpoint1.getter(v25);
        v28 = UniversalControlLink.Endpoint.device.getter(v27);
        v30 = v29;
        v31 = *(uint64_t (**)(char *, uint64_t))(v138 + 8);
        v32 = v26;
        v33 = v139;
        v34 = v31(v32, v139);
        v35 = v137;
        v36 = UniversalControlConfiguration.GradedLink.endpoint2.getter(v34);
        v37 = UniversalControlLink.Endpoint.device.getter(v36);
        v39 = v38;
        v31(v35, v33);
        (*(void (**)(char *, uint64_t))(v140 + 8))(v14, a3);
        v40 = a2[2];
        if (__OFADD__(v40, 2))
        {
          __break(1u);
          goto LABEL_49;
        }
        if (!swift_isUniquelyReferenced_nonNull_native(a2) || (v41 = a2[3] >> 1, v41 < v40 + 2))
        {
          sub_100077ACC();
          a2 = v42;
          v41 = v42[3] >> 1;
        }
        v44 = v142;
        v43 = v143;
        v45 = a2[2];
        v46 = v45 + 1;
        if (v41 <= v45)
        {
          sub_100077ACC();
          a2 = v49;
          v41 = v49[3] >> 1;
        }
        a2[2] = v46;
        v47 = &a2[2 * v45];
        v47[4] = v28;
        v47[5] = v30;
        if (v41 < (uint64_t)(v45 + 2))
        {
          sub_100077ACC();
          a2 = v50;
        }
        a2[2] = v45 + 2;
        v48 = &a2[2 * v46];
        v48[4] = v37;
        *((_WORD *)v48 + 20) = v39;
        *((_BYTE *)v48 + 42) = BYTE2(v39);
        *((_BYTE *)v48 + 43) = BYTE3(v39);
        *((_BYTE *)v48 + 44) = BYTE4(v39);
        *((_BYTE *)v48 + 45) = BYTE5(v39);
        *((_BYTE *)v48 + 46) = BYTE6(v39);
        v24 = v44 + v132;
        *((_BYTE *)v48 + 47) = HIBYTE(v39);
        v22 = v43 - 1;
      }
      while (v22);
      swift_bridgeObjectRelease(v120);
      v14 = v121;
    }
    else
    {
      swift_bridgeObjectRelease(v21);
    }
    sub_1000DF7F4();
    v66 = sub_1000055B0((uint64_t *)&unk_1002B3310);
    inited = swift_initStackObject(v66, v145);
    *(_OWORD *)(inited + 16) = xmmword_10021DE60;
    v68 = v130;
    *(_QWORD *)(inited + 32) = v129;
    *(_QWORD *)(inited + 40) = v68;
    *(_BYTE *)(inited + 48) = v141 & 1;
    v69 = dispatch thunk of UniversalControlDevice.id.getter(inited);
    *(_QWORD *)(inited + 49) = v69;
    *(_QWORD *)(inited + 57) = v70;
    *(_BYTE *)(inited + 65) = 0;
    if ((*(_BYTE *)(inited + 48) & 1) != 0)
    {
      v71 = v69;
      v72 = v70;
      v73 = _swiftEmptyArrayStorage;
    }
    else
    {
      v75 = *(_QWORD *)(inited + 32);
      v74 = *(_QWORD *)(inited + 40);
      sub_100077ACC();
      v73 = v76;
      v77 = v76[2];
      if (v77 >= v76[3] >> 1)
      {
        sub_100077ACC();
        v73 = v118;
      }
      v73[2] = v77 + 1;
      v78 = &v73[2 * v77];
      v78[4] = v75;
      v78[5] = v74;
      if ((*(_BYTE *)(inited + 65) & 1) != 0)
        goto LABEL_42;
      v71 = *(_QWORD *)(inited + 49);
      v72 = *(_QWORD *)(inited + 57);
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v73) & 1) == 0)
    {
      sub_100077ACC();
      v73 = v116;
    }
    v79 = v73[2];
    if (v79 >= v73[3] >> 1)
    {
      sub_100077ACC();
      v73 = v117;
    }
    v73[2] = v79 + 1;
    v80 = &v73[2 * v79];
    v80[4] = v71;
    v80[5] = v72;
LABEL_42:
    v81 = v125;
    v82 = v131;
    v83 = v131 & 1;
    swift_bridgeObjectRelease(inited);
    sub_10019BD8C();
    v85 = v84;
    swift_bridgeObjectRelease(v73);
    v86 = swift_initStackObject(v66, v144);
    *(_OWORD *)(v86 + 16) = xmmword_10021BBA0;
    v87 = v127;
    *(_QWORD *)(v86 + 32) = v126;
    *(_QWORD *)(v86 + 40) = v87;
    *(_BYTE *)(v86 + 48) = v83;
    if ((v82 & 1) != 0)
    {
      v88 = _swiftEmptyArrayStorage;
      v89 = v124;
    }
    else
    {
      sub_100077ACC();
      v88 = v90;
      v91 = v90[2];
      v89 = v124;
      if (v91 >= v90[3] >> 1)
      {
        sub_100077ACC();
        v88 = v119;
      }
      v88[2] = v91 + 1;
      v92 = &v88[2 * v91];
      v93 = v126;
      *((_WORD *)v92 + 16) = v126;
      *((_BYTE *)v92 + 34) = BYTE2(v93);
      *((_BYTE *)v92 + 35) = BYTE3(v93);
      *((_BYTE *)v92 + 36) = BYTE4(v93);
      *((_BYTE *)v92 + 37) = BYTE5(v93);
      *((_BYTE *)v92 + 38) = BYTE6(v93);
      *((_BYTE *)v92 + 39) = HIBYTE(v93);
      v94 = v127;
      *((_WORD *)v92 + 20) = v127;
      *((_BYTE *)v92 + 42) = BYTE2(v94);
      *((_BYTE *)v92 + 43) = BYTE3(v94);
      *((_BYTE *)v92 + 44) = BYTE4(v94);
      *((_BYTE *)v92 + 45) = BYTE5(v94);
      *((_BYTE *)v92 + 46) = BYTE6(v94);
      *((_BYTE *)v92 + 47) = HIBYTE(v94);
    }
    swift_bridgeObjectRelease(v86);
    v97 = sub_100068024((uint64_t)v88, v85, v95, v96);
    v98 = v128;
    swift_bridgeObjectRetain(v128);
    v99 = sub_100141444(v97, v98);
    swift_bridgeObjectRelease(v97);
    goto LABEL_56;
  }
  v146 = (unint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)a3 >> 62)
    goto LABEL_51;
  v51 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a3);
  for (; v51; v51 = _CocoaArrayWrapper.endIndex.getter(v100))
  {
    v52 = 0;
    v53 = a3 & 0xC000000000000001;
    v54 = a3 & 0xFFFFFFFFFFFFFF8;
    if ((a3 & 0xC000000000000001) != 0)
    {
      while (1)
      {
        v56 = specialized _ArrayBuffer._getElementSlowPath(_:)(v52, a3);
        v55 = v56;
LABEL_19:
        if (__OFADD__(v52, 1))
          break;
        v57 = dispatch thunk of UniversalControlDevice.id.getter(v56);
        if (((v141 & 1) != 0 || (v57 = static UniversalControlUUID.compare(lhs:rhs:)(v129, v130, v57, v58)) != 0)
          && ((v59 = dispatch thunk of UniversalControlDevice.id.getter(v57), (v131 & 1) == 0)
           && (v59 = static UniversalControlUUID.compare(lhs:rhs:)(v126, v127, v59, v60)) == 0
           || (v61 = dispatch thunk of UniversalControlDevice.id.getter(v59),
               sub_10018F420(v61, v62, (uint64_t)a2),
               (v59 & 1) != 0)))
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v59);
          v63 = *(_QWORD *)(v146 + 16);
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v63);
          v64 = v63;
          a3 = v128;
          v65 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v64, v55);
          specialized ContiguousArray._endMutation()(v65);
        }
        else
        {
          swift_release();
        }
        if (v52 + 1 == v51)
          goto LABEL_55;
        ++v52;
        if (!v53)
          goto LABEL_17;
      }
    }
    else
    {
LABEL_17:
      if (v52 < *(_QWORD *)(v54 + 16))
      {
        v55 = *(_QWORD *)(a3 + 8 * v52 + 32);
        v56 = swift_retain(v55);
        goto LABEL_19;
      }
LABEL_49:
      __break(1u);
    }
    __break(1u);
LABEL_51:
    if (a3 < 0)
      v100 = a3;
    else
      v100 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
  }
LABEL_55:
  swift_bridgeObjectRelease(a3);
  v99 = (_QWORD *)v146;
  v81 = v125;
  v89 = v124;
LABEL_56:
  (*(void (**)(char *, uint64_t, uint64_t))(v122 + 16))(v89, v81, v123);
  v146 = (unint64_t)v99;
  swift_retain_n(v14, 2);
  swift_bridgeObjectRetain(v99);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v101);
  v103 = *(_QWORD *)((v146 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v102 = *(_QWORD *)((v146 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v103 >= v102 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v102 > 1, v103 + 1, 1);
  type metadata accessor for UniversalControlDisplaySolver0(0);
  v104 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v103, v14);
  specialized Array._endMutation()(v104);
  v105 = (_QWORD *)v146;
  swift_release();
  v146 = (unint64_t)v105;
  v106 = sub_1000055B0(&qword_1002B3300);
  sub_1001684CC((uint64_t)&unk_1002B3308);
  v108 = v107;
  UniversalControlDisplaySolver0.__allocating_init<A>(config:devices:)(v89, &v146, v106, v107);
  v109 = UniversalControlConfiguration.id.getter();
  v111 = v110;
  v112 = dispatch thunk of UniversalControlDisplaySolver0.solve()();
  v146 = (unint64_t)v99;
  v113 = type metadata accessor for UniversalControlDisplaySolver1(0);
  swift_allocObject(v113, *(unsigned int *)(v113 + 48), *(unsigned __int16 *)(v113 + 52));
  swift_retain(v14);
  v114 = UniversalControlDisplaySolver1.init<A>(configurationID:devices:links:localDevice:)(v109, v111, &v146, v112, v14, v106, v108);
  swift_release();
  return v114;
}

uint64_t sub_10015994C@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _OWORD v67[2];
  char v68;
  uint64_t v69;

  v4 = v3;
  v56 = a3;
  v52 = type metadata accessor for UTType(0);
  __chkstk_darwin(v52);
  v55 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000055B0(&qword_1002AA5F0);
  __chkstk_darwin(v8);
  v53 = (uint64_t)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000055B0((uint64_t *)&unk_1002B3320);
  __chkstk_darwin(v10);
  v54 = (uint64_t)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for UUID(0);
  v50 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v49 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = *a1;
  v57 = a1[1];
  v58 = a1[2];
  v60 = a1[3];
  v61 = a1[4];
  v62 = a1[5];
  v13 = a1[6];
  v14 = a1[7];
  v65 = a1[8];
  v63 = a1[9];
  v64 = a1[10];
  v15 = a1[11];
  v16 = a1[12];
  v17 = a1[13];
  v66 = a1[14];
  v18 = a1[15];
  if ((unint64_t)a2 >> 62)
    goto LABEL_17;
  v19 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a2);
  if (v19)
  {
    while (1)
    {
      v48 = v18;
      v47 = v4;
      v4 = a2 & 0xC000000000000001;
      if ((a2 & 0xC000000000000001) != 0)
      {
        v20 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2);
        v18 = v20;
      }
      else
      {
        v18 = *(_QWORD *)(a2 + 32);
        v20 = swift_retain(v18);
      }
      v21 = dispatch thunk of UniversalControlDevice.id.getter(v20);
      v14 = v59 | (v57 << 8) | (v58 << 16) | (v60 << 24) | (v61 << 32) | (v62 << 40) | (v13 << 48) | (v14 << 56);
      v17 = v65 | (v63 << 8) | (v64 << 16) | (v15 << 24) | (v16 << 32) | (v17 << 40) | (v66 << 48) | (v48 << 56);
      if (!static UniversalControlUUID.compare(lhs:rhs:)(v21, v22, v14, v17))
        break;
      swift_release();
      if (v19 == 1)
      {
LABEL_14:
        swift_bridgeObjectRelease(a2);
        goto LABEL_22;
      }
      v16 = 5;
      while (1)
      {
        if (v4)
        {
          v23 = specialized _ArrayBuffer._getElementSlowPath(_:)(v16 - 4, a2);
          v18 = v23;
        }
        else
        {
          v18 = *(_QWORD *)(a2 + 8 * v16);
          v23 = swift_retain(v18);
        }
        v15 = v16 - 3;
        if (__OFADD__(v16 - 4, 1))
          break;
        v24 = dispatch thunk of UniversalControlDevice.id.getter(v23);
        if (!static UniversalControlUUID.compare(lhs:rhs:)(v24, v25, v14, v17))
          goto LABEL_15;
        swift_release();
        ++v16;
        if (v15 == v19)
          goto LABEL_14;
      }
      __break(1u);
LABEL_17:
      if (a2 < 0)
        v28 = a2;
      else
        v28 = a2 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a2);
      v19 = _CocoaArrayWrapper.endIndex.getter(v28);
      if (!v19)
        goto LABEL_21;
    }
LABEL_15:
    result = swift_bridgeObjectRelease(a2);
    v27 = v56;
  }
  else
  {
LABEL_21:
    swift_bridgeObjectRelease(a2);
    v14 = v59 | (v57 << 8) | (v58 << 16) | (v60 << 24) | (v61 << 32) | (v62 << 40) | (v13 << 48) | (v14 << 56);
    v17 = v65 | (v63 << 8) | (v64 << 16) | (v15 << 24) | (v16 << 32) | (v17 << 40) | (v66 << 48) | (v18 << 56);
LABEL_22:
    v27 = v56;
    v29 = v49;
    v30 = UUID.init(uuid:)(0, 0, 0, 0, 0, 0);
    v32 = UUID.uuid.getter(v30, v31);
    v33 = UniversalControlUUID.init(rawValue:)(v32, v32 >> 8, v32 >> 16, v32 >> 24, HIDWORD(v32), v32 >> 40, HIWORD(v32), HIBYTE(v32));
    v35 = v34;
    (*(void (**)(char *, uint64_t))(v50 + 8))(v29, v51);
    memset(v67, 0, sizeof(v67));
    v68 = 1;
    v36 = type metadata accessor for UniversalControlDisplay.Orientation(0);
    v37 = v54;
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v54, 1, 1, v36);
    v38 = v53;
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v53, 1, 1, v52);
    v39 = type metadata accessor for UniversalControlDisplay(0);
    swift_allocObject(v39, *(unsigned int *)(v39 + 48), *(unsigned __int16 *)(v39 + 52));
    LOBYTE(v69) = 1;
    v40 = UniversalControlDisplay.init(id:displayName:mirrorPrimary:orientation:physicalSize:pixelSize:screenRect:typeIdentifier:vendorID:productID:)(v14, v17, v33, v35, 0, 0, v67, v37, 0.0, 0.0, 1024.0, 768.0, 0.0, 0.0, 1024.0, 768.0, v38, 0x100000000, 0x100000000);
    dispatch thunk of UniversalControlDisplay.isBuiltIn.setter(1);
    dispatch thunk of UniversalControlDisplay.isMain.setter(1);
    v41 = sub_1000055B0(&qword_1002AC0E0);
    v42 = swift_allocObject(v41, 40, 7);
    *(_OWORD *)(v42 + 16) = xmmword_10021EFD0;
    *(_QWORD *)(v42 + 32) = v40;
    v69 = v42;
    specialized Array._endMutation()(v42);
    v43 = v69;
    v44 = swift_retain(v40);
    v45 = v55;
    static UTType.item.getter(v44);
    v46 = type metadata accessor for UniversalControlDevice(0);
    swift_allocObject(v46, *(unsigned int *)(v46 + 48), *(unsigned __int16 *)(v46 + 52));
    v18 = UniversalControlDevice.init(id:displayName:displays:inputDevices:model:typeIdentifier:)(v14, v17, 0x79786F7250, 0xE500000000000000, v43, _swiftEmptyArrayStorage, 0x646F4D79786F7250, 0xEA00000000006C65, v45);
    result = swift_release();
  }
  *v27 = v18;
  return result;
}

uint64_t sub_100159F74(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(void);
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  char *v52;
  uint64_t v53;
  char *v54;
  void (*v55)(char *, uint64_t);
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char v67[24];
  uint64_t v68;

  v65 = a1;
  v62 = a3;
  v4 = type metadata accessor for UniversalControlAnchor(0);
  v60 = *(_QWORD *)(v4 - 8);
  v61 = v4;
  v5 = __chkstk_darwin(v4);
  v59 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v58 = (char *)&v57 - v7;
  v8 = type metadata accessor for UniversalControlLink.Endpoint(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v57 - v13;
  v66 = type metadata accessor for UniversalControlLink(0);
  v68 = *(_QWORD *)(v66 - 8);
  v15 = __chkstk_darwin(v66);
  v64 = (char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v63 = (char *)&v57 - v18;
  __chkstk_darwin(v17);
  v20 = (char *)&v57 - v19;
  swift_beginAccess(a2 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView, v67, 0, 0);
  type metadata accessor for SyncView(0);
  type metadata accessor for SyncViewLocalData(0);
  swift_retain();
  v22 = dispatch thunk of UniversalControlDevice.id.getter(v21);
  v24 = v23;
  swift_release();
  v25 = UniversalControlLink.normalized(for:)(v22, v24);
  v26 = UniversalControlLink.endpoint2.getter(v25);
  v27 = UniversalControlLink.Endpoint.device.getter(v26);
  v29 = v28;
  v30 = *(uint64_t (**)(char *, uint64_t))(v9 + 8);
  v31 = v30(v14, v8);
  v32 = UniversalControlLink.endpoint2.getter(v31);
  UniversalControlLink.Endpoint.device.getter(v32);
  v57 = v12;
  v65 = v8;
  v33 = v8;
  v34 = v63;
  v30(v12, v33);
  v35 = v29;
  v36 = v66;
  v37 = static UniversalControlUUID.compare(lhs:rhs:)(v27, v35);
  v38 = *(uint64_t (**)(void))(v68 + 16);
  ((void (*)(char *, char *, uint64_t))v38)(v34, v62, v36);
  v39 = v64;
  v40 = v38();
  if (v37)
  {
    LOBYTE(v41) = 0;
  }
  else
  {
    v42 = UniversalControlLink.endpoint1.getter(v40);
    v62 = v20;
    v43 = v58;
    UniversalControlLink.Endpoint.anchor.getter(v42);
    v44 = v34;
    v45 = v65;
    v46 = v30(v14, v65);
    v47 = v57;
    v48 = UniversalControlLink.endpoint1.getter(v46);
    v49 = v59;
    UniversalControlLink.Endpoint.anchor.getter(v48);
    v50 = v45;
    v34 = v44;
    v30(v47, v50);
    v41 = static UniversalControlAnchor.== infix(_:_:)(v43, v49);
    v51 = *(void (**)(char *, uint64_t))(v60 + 8);
    v52 = v49;
    v53 = v61;
    v51(v52, v61);
    v54 = v43;
    v36 = v66;
    v20 = v62;
    v51(v54, v53);
  }
  v55 = *(void (**)(char *, uint64_t))(v68 + 8);
  v55(v39, v36);
  v55(v34, v36);
  v55(v20, v36);
  return v41 & 1;
}

uint64_t sub_10015A2E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[24];

  swift_beginAccess(a2 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView, v7, 0, 0);
  type metadata accessor for SyncView(0);
  type metadata accessor for SyncViewLocalData(0);
  swift_retain();
  v3 = dispatch thunk of UniversalControlDevice.id.getter(v2);
  v5 = v4;
  swift_release();
  return UniversalControlLink.normalized(for:)(v3, v5);
}

BOOL sub_10015A390(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[24];

  v3 = UniversalControlLink.display1.getter();
  v5 = v4;
  swift_beginAccess(a2 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView, v8, 0, 0);
  type metadata accessor for SyncView(0);
  type metadata accessor for SyncViewLocalData(0);
  swift_retain();
  dispatch thunk of UniversalControlDevice.id.getter(v6);
  swift_release();
  return static UniversalControlUUID.compare(lhs:rhs:)(v3, v5) == 0;
}

double sub_10015A44C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;

  v3 = sub_1000055B0((uint64_t *)&unk_1002AC8C0);
  v4 = type metadata accessor for UniversalControlLink(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 32) & ~v6;
  v8 = swift_allocObject(v3, v7 + *(_QWORD *)(v5 + 72), v6 | 7);
  *(_OWORD *)(v8 + 16) = xmmword_10021BBA0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v8 + v7, a2, v4);
  UniversalControlConfiguration.addingLinks(_:)(v8);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t sub_10015A4FC()
{
  Swift::String v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v6;

  v6 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(22, 1);
  v0._countAndFlagsBits = 0;
  v0._object = (void *)0xE000000000000000;
  String.append(_:)(v0);
  v1 = type metadata accessor for UniversalControlLink(0);
  sub_10016A0D0((uint64_t)&unk_1002AEEB0);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v1, v2);
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._object = (void *)0x8000000100258B10;
  v4._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v4);
  return v6;
}

uint64_t sub_10015A5B8@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint8_t *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  __n128 v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t i;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t j;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  void (*v86)(char *, char *, unint64_t);
  char *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(char *, unint64_t);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  NSObject *v103;
  os_log_type_t v104;
  uint8_t *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  char *v121;
  char *v122;
  unint64_t v123;
  char *v124;
  unint64_t v125;
  char *v126;
  unint64_t v127;
  unint64_t v128;
  char *v129;
  uint8_t *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136[2];

  LODWORD(v127) = a5;
  v134 = a7;
  v12 = type metadata accessor for UUID(0);
  v132 = *(_QWORD *)(v12 - 8);
  v133 = v12;
  __chkstk_darwin(v12);
  v131 = (char *)&v118 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UniversalControlLink.Endpoint(0);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v118 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v118 - v18;
  v20 = type metadata accessor for UniversalControlAnchor(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = __chkstk_darwin(v20);
  v126 = (char *)&v118 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v26 = (char *)&v118 - v25;
  __chkstk_darwin(v24);
  v129 = (char *)&v118 - v27;
  v130 = a6;
  if (!sub_100143DC4())
    goto LABEL_40;
  v121 = v26;
  v122 = v17;
  v124 = v19;
  v125 = v21;
  v123 = v20;
  v128 = a4;
  v29 = a3;
  v30 = dispatch thunk of UniversalControlDevice.displays.getter(v28);
  swift_release();
  v136[0] = (uint64_t)_swiftEmptyArrayStorage;
  if (v30 >> 62)
  {
    if ((v30 & 0x8000000000000000) != 0)
      v39 = v30;
    else
      v39 = v30 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v31 = _CocoaArrayWrapper.endIndex.getter(v39);
    swift_bridgeObjectRelease();
    if (v31)
      goto LABEL_4;
LABEL_18:
    v38 = swift_bridgeObjectRelease();
    a4 = (uint64_t)_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v31 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v31)
    goto LABEL_18;
LABEL_4:
  if (v31 < 1)
  {
    __break(1u);
    goto LABEL_47;
  }
  for (i = 0; i != v31; ++i)
  {
    if ((v30 & 0xC000000000000001) != 0)
    {
      v33 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v30);
      v34 = v33;
    }
    else
    {
      v34 = *(_QWORD *)(v30 + 8 * i + 32);
      swift_retain();
    }
    v35 = dispatch thunk of UniversalControlDisplay.isMain.getter(v33);
    if ((v35 & 1) != 0)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v35);
      v36 = *(_QWORD *)(v136[0] + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v36);
      v37 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v36, v34);
      specialized ContiguousArray._endMutation()(v37);
    }
    else
    {
      swift_release();
    }
  }
  v38 = swift_bridgeObjectRelease();
  a4 = v136[0];
LABEL_19:
  v30 = v29;
  if (a4 < 0 || (a4 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    v40 = _CocoaArrayWrapper.endIndex.getter(v70);
    swift_release();
  }
  else
  {
    v40 = *(_QWORD *)(a4 + 16);
  }
  v29 = v128;
  if (!v40)
  {
    swift_release();
LABEL_40:
    if (qword_1002A98F8 != -1)
      swift_once(&qword_1002A98F8, sub_10014C200);
    v54 = type metadata accessor for Logger(0);
    v55 = sub_100006FB4(v54, (uint64_t)qword_1002B2A80);
    v56 = Logger.logObject.getter(v55);
    v57 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v56, v57))
    {
      v128 = a1 >> 16;
      v129 = (char *)(a1 >> 8);
      v126 = (char *)HIDWORD(a1);
      v127 = a1 >> 24;
      v124 = (char *)HIWORD(a1);
      v125 = a1 >> 40;
      v122 = (char *)(a2 >> 8);
      v123 = HIBYTE(a1);
      v120 = a2 >> 24;
      v121 = (char *)(a2 >> 16);
      v119 = HIDWORD(a2);
      v58 = (uint8_t *)swift_slowAlloc(12, -1);
      v59 = swift_slowAlloc(32, -1);
      v136[0] = v59;
      *(_DWORD *)v58 = 136446210;
      v130 = v58 + 4;
      v60 = v131;
      v61 = UUID.init(uuid:)(a1, v129, v128, v127, v126, v125);
      v62 = UUID.uuidString.getter(v61);
      v64 = v63;
      (*(void (**)(char *, uint64_t))(v132 + 8))(v60, v133);
      v65 = sub_1000599D0(8, v62, v64);
      v66 = static String._fromSubstring(_:)(v65);
      v68 = v67;
      swift_bridgeObjectRelease();
      v135 = sub_100006FCC(v66, v68, v136);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, v136, v130);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "%{public}s: Failed to get main display", v58, 0xCu);
      v69 = 1;
      swift_arrayDestroy(v59, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v59, -1, -1);
      swift_slowDealloc(v58, -1, -1);

LABEL_66:
      v97 = v134;
      goto LABEL_67;
    }

LABEL_65:
    v69 = 1;
    goto LABEL_66;
  }
  sub_10013DB94(0, (a4 & 0xC000000000000001) == 0, a4, v38);
  if ((a4 & 0xC000000000000001) == 0)
  {
    v41 = *(_QWORD *)(a4 + 32);
    swift_retain();
    goto LABEL_25;
  }
LABEL_47:
  v41 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, a4);
LABEL_25:
  swift_release();
  v42 = sub_100143DC4();
  if (!v42)
  {
LABEL_60:
    if (qword_1002A98F8 != -1)
      swift_once(&qword_1002A98F8, sub_10014C200);
    v101 = type metadata accessor for Logger(0);
    v102 = sub_100006FB4(v101, (uint64_t)qword_1002B2A80);
    v103 = Logger.logObject.getter(v102);
    v104 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v103, v104))
    {
      v127 = v30 >> 16;
      v128 = v30 >> 8;
      v125 = HIDWORD(v30);
      v126 = (char *)(v30 >> 24);
      v123 = HIWORD(v30);
      v124 = (char *)(v30 >> 40);
      v121 = (char *)(v29 >> 8);
      v122 = (char *)HIBYTE(v30);
      v118 = v29 >> 24;
      v119 = v29 >> 16;
      v130 = (uint8_t *)v41;
      v120 = v30;
      v105 = (uint8_t *)swift_slowAlloc(12, -1);
      v106 = swift_slowAlloc(32, -1);
      v136[0] = v106;
      *(_DWORD *)v105 = 136446210;
      v129 = (char *)(v105 + 4);
      v107 = v131;
      v108 = UUID.init(uuid:)(v120, v128, v127, v126, v125, v124);
      v109 = UUID.uuidString.getter(v108);
      v111 = v110;
      (*(void (**)(char *, uint64_t))(v132 + 8))(v107, v133);
      v112 = sub_1000599D0(8, v109, v111);
      v113 = static String._fromSubstring(_:)(v112);
      v115 = v114;
      swift_bridgeObjectRelease();
      v135 = sub_100006FCC(v113, v115, v136);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, v136, v129);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v103, v104, "%{public}s: Failed to get main display", v105, 0xCu);
      v69 = 1;
      swift_arrayDestroy(v106, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v106, -1, -1);
      swift_slowDealloc(v105, -1, -1);

      swift_release();
      goto LABEL_66;
    }

    swift_release();
    goto LABEL_65;
  }
  v44 = v42;
  v45 = dispatch thunk of UniversalControlDevice.displays.getter(v43);
  swift_release();
  v136[0] = (uint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)v45 >> 62)
  {
    if (v45 < 0)
      v71 = v45;
    else
      v71 = v45 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v46 = _CocoaArrayWrapper.endIndex.getter(v71);
    swift_bridgeObjectRelease();
    if (v46)
    {
LABEL_28:
      if (v46 < 1)
      {
        __break(1u);
        goto LABEL_69;
      }
      for (j = 0; j != v46; ++j)
      {
        if ((v45 & 0xC000000000000001) != 0)
        {
          v48 = specialized _ArrayBuffer._getElementSlowPath(_:)(j, v45);
          v49 = v48;
        }
        else
        {
          v49 = *(_QWORD *)(v45 + 8 * j + 32);
          swift_retain();
        }
        v50 = dispatch thunk of UniversalControlDisplay.isMain.getter(v48);
        if ((v50 & 1) != 0)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v50);
          v51 = *(_QWORD *)(v136[0] + 16);
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v51);
          v52 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v51, v49);
          specialized ContiguousArray._endMutation()(v52);
        }
        else
        {
          swift_release();
        }
      }
      v53 = swift_bridgeObjectRelease();
      v44 = v136[0];
      if (v136[0] < 0)
        goto LABEL_58;
      goto LABEL_53;
    }
  }
  else
  {
    v46 = *(_QWORD *)((v45 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v46)
      goto LABEL_28;
  }
  v53 = swift_bridgeObjectRelease();
  v44 = (uint64_t)_swiftEmptyArrayStorage;
  if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0)
    goto LABEL_58;
LABEL_53:
  if ((v44 & 0x4000000000000000) != 0)
  {
LABEL_58:
    swift_bridgeObjectRetain();
    v100 = _CocoaArrayWrapper.endIndex.getter(v99);
    swift_release();
    if (!v100)
      goto LABEL_59;
    goto LABEL_55;
  }
  if (!*(_QWORD *)(v44 + 16))
  {
LABEL_59:
    swift_release();
    goto LABEL_60;
  }
LABEL_55:
  sub_10013DB94(0, (v44 & 0xC000000000000001) == 0, v44, v53);
  if ((v44 & 0xC000000000000001) != 0)
  {
LABEL_69:
    v133 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v44);
    goto LABEL_57;
  }
  v133 = *(_QWORD *)(v44 + 32);
  swift_retain();
LABEL_57:
  v73 = v121;
  v72 = v122;
  swift_release();
  v74 = v129;
  v75 = v127;
  UniversalControlAnchor.init(edge:offset:)(v127, 0.5);
  v76 = UniversalControlEdge.inverted.getter(v75);
  v77 = UniversalControlAnchor.init(edge:offset:)(v76, 0.5);
  v78 = dispatch thunk of UniversalControlDisplay.id.getter(v77);
  v80 = v79;
  v82 = v81;
  v84 = v83;
  v130 = (uint8_t *)v41;
  v85 = v126;
  v86 = *(void (**)(char *, char *, unint64_t))(v125 + 16);
  v87 = v74;
  v88 = v123;
  v86(v126, v87, v123);
  v89 = UniversalControlLink.Endpoint.init(display:anchor:)(v78, v80, v82, v84, v85);
  v90 = dispatch thunk of UniversalControlDisplay.id.getter(v89);
  v92 = v91;
  v94 = v93;
  v96 = v95;
  v86(v85, v73, v88);
  UniversalControlLink.Endpoint.init(display:anchor:)(v90, v92, v94, v96, v85);
  v97 = v134;
  UniversalControlLink.init(endpoint1:endpoint2:)(v124, v72);
  swift_release();
  swift_release();
  v98 = *(void (**)(char *, unint64_t))(v125 + 8);
  v98(v73, v88);
  v98(v129, v88);
  v69 = 0;
LABEL_67:
  v116 = type metadata accessor for UniversalControlLink(0);
  return _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v97, v69, 1, v116);
}

uint64_t sub_10015B004(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  void (*v30)(char *, uint64_t);
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;

  v34 = a4;
  v6 = type metadata accessor for UniversalControlLink.Endpoint(0);
  v35 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UniversalControlLink(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v32 - v14;
  v16 = UniversalControlLink.normalized(for:)(a2, a3);
  v17 = UniversalControlLink.endpoint1.getter(v16);
  v18 = UniversalControlLink.Endpoint.device.getter(v17);
  v20 = v19;
  v21 = *(void (**)(char *, uint64_t))(v35 + 8);
  v35 = v6;
  v33 = v21;
  v21(v8, v6);
  v22 = static UniversalControlUUID.compare(lhs:rhs:)(v18, v20);
  v23 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 16))(v12, v15, v9);
  if (v22)
  {
    v24 = 0;
  }
  else
  {
    v25 = UniversalControlLink.endpoint2.getter(v23);
    v26 = UniversalControlLink.Endpoint.device.getter(v25);
    v28 = v27;
    v33(v8, v35);
    sub_10018F420(v26, v28, v34);
    v24 = v29;
  }
  v30 = *(void (**)(char *, uint64_t))(v10 + 8);
  v30(v12, v9);
  v30(v15, v9);
  return v24 & 1;
}

uint64_t sub_10015B1C8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char v5;
  char v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[32];

  v29 = a1;
  v30 = a4;
  v5 = a3;
  v6 = a2;
  v31 = a5;
  v7 = a2 >> 8;
  v8 = a2 >> 16;
  v9 = a2 >> 24;
  v10 = HIDWORD(a2);
  v11 = a2 >> 40;
  v20 = HIWORD(a2);
  v21 = HIBYTE(a2);
  v22 = a3 >> 8;
  v23 = a3 >> 16;
  v24 = a3 >> 24;
  v25 = HIDWORD(a3);
  v26 = a3 >> 40;
  v27 = HIWORD(a3);
  v28 = HIBYTE(a3);
  v12 = type metadata accessor for UniversalControlConfiguration(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32[16] = v6;
  v32[17] = v7;
  v32[18] = v8;
  v32[19] = v9;
  v32[20] = v10;
  v32[21] = v11;
  v32[22] = v20;
  v32[23] = v21;
  v32[24] = v5;
  v32[25] = v22;
  v32[26] = v23;
  v32[27] = v24;
  v32[28] = v25;
  v32[29] = v26;
  v32[30] = v27;
  v32[31] = v28;
  v16 = UniversalControlConfiguration.removingLinks(where:)(sub_1001685D8, v32);
  v17 = UniversalControlDisplayLayout.links.getter(v16);
  UniversalControlConfiguration.addingLinks(_:)(v17);
  v18 = swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v13 + 8))(v15, v12, v18);
}

BOOL sub_10015B344(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v29;
  uint64_t v30;

  v30 = a3;
  v5 = type metadata accessor for UniversalControlLink(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UniversalControlLink.Endpoint(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = UniversalControlLink.endpoint1.getter(v11);
  v15 = UniversalControlLink.Endpoint.device.getter(v14);
  v17 = v16;
  v18 = *(void (**)(char *, uint64_t))(v10 + 8);
  v18(v13, v9);
  v19 = v17;
  v20 = v30;
  v21 = static UniversalControlUUID.compare(lhs:rhs:)(v15, v19, a2, v30);
  v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  if (v21)
  {
    v23 = UniversalControlLink.endpoint2.getter(v22);
    v24 = UniversalControlLink.Endpoint.device.getter(v23);
    v26 = v25;
    v18(v13, v9);
    v27 = static UniversalControlUUID.compare(lhs:rhs:)(v24, v26, a2, v20) == 0;
  }
  else
  {
    v27 = 1;
  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return v27;
}

uint64_t sub_10015B4C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(char *, uint64_t);
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t (*v60)(char *, uint64_t);
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;

  v68 = a2;
  v69 = a1;
  v65 = type metadata accessor for UniversalControlAnchor(0);
  v63 = *(_QWORD *)(v65 - 8);
  v2 = __chkstk_darwin(v65);
  v64 = (char *)&v60 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v62 = (char *)&v60 - v4;
  v5 = type metadata accessor for UniversalControlConfiguration.GradedLink(0);
  v6 = *(_QWORD *)(v5 - 8);
  v71 = v5;
  v72 = v6;
  __chkstk_darwin(v5);
  v70 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UniversalControlLink(0);
  v74 = *(_QWORD *)(v8 - 8);
  v75 = v8;
  __chkstk_darwin(v8);
  v73 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UniversalControlLink.Endpoint(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v60 - v16;
  v18 = UniversalControlLink.endpoint1.getter(v15);
  v19 = UniversalControlLink.Endpoint.display.getter(v18);
  v66 = v20;
  v67 = v19;
  v22 = v21;
  v24 = v23;
  v25 = *(uint64_t (**)(char *, uint64_t))(v11 + 8);
  v26 = v25(v17, v10);
  v27 = UniversalControlConfiguration.GradedLink.endpoint1.getter(v26);
  v28 = UniversalControlLink.Endpoint.display.getter(v27);
  v30 = v29;
  v32 = v31;
  v34 = v33;
  v60 = v25;
  v61 = v10;
  v25(v14, v10);
  v35 = v22;
  v37 = v70;
  v36 = v71;
  v38 = v28;
  v39 = v32;
  v41 = v72;
  v40 = v73;
  LOBYTE(v34) = static UniversalControlDisplayID.== infix(_:_:)(v67, v35, v66, v24, v38, v30, v39, v34);
  (*(void (**)(char *, uint64_t, uint64_t))(v74 + 16))(v40, v69, v75);
  v42 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v41 + 16))(v37, v68, v36);
  if ((v34 & 1) != 0)
  {
    v43 = UniversalControlLink.endpoint1.getter(v42);
    v44 = v62;
    UniversalControlLink.Endpoint.anchor.getter(v43);
    v45 = v17;
    v46 = v60;
    v47 = v61;
    v48 = v60(v45, v61);
    LODWORD(v69) = UniversalControlAnchor.edge.getter(v48);
    v49 = *(uint64_t (**)(char *, uint64_t))(v63 + 8);
    v50 = v44;
    v51 = v65;
    v52 = v49(v50, v65);
    v53 = UniversalControlConfiguration.GradedLink.endpoint1.getter(v52);
    v54 = v64;
    UniversalControlLink.Endpoint.anchor.getter(v53);
    v55 = v46(v14, v47);
    v56 = UniversalControlAnchor.edge.getter(v55);
    v49(v54, v51);
    v57 = v56;
    v40 = v73;
    v58 = static UniversalControlEdge.== infix(_:_:)(v69, v57);
  }
  else
  {
    v58 = 0;
  }
  (*(void (**)(char *, uint64_t))(v41 + 8))(v37, v36);
  (*(void (**)(char *, uint64_t))(v74 + 8))(v40, v75);
  return v58 & 1;
}

uint64_t sub_10015B7C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  void (*v10)(char *, uint64_t);
  _QWORD v12[2];

  v0 = type metadata accessor for UniversalControlLink.Endpoint(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v2);
  v7 = (char *)v12 - v6;
  v8 = UniversalControlLink.endpoint2.getter(v5);
  UniversalControlConfiguration.GradedLink.endpoint2.getter(v8);
  v9 = static UniversalControlLink.Endpoint.== infix(_:_:)(v7, v4);
  v10 = *(void (**)(char *, uint64_t))(v1 + 8);
  v10(v4, v0);
  v10(v7, v0);
  return v9 & 1;
}

uint64_t sub_10015B89C@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  Swift::String v18;
  uint64_t v19;
  unint64_t v20;
  Swift::String v21;
  Swift::String v22;
  __int128 v23;
  uint64_t result;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  void *v29;
  __int128 v30;
  void *v31;

  v1 = UniversalControlInputDevice.servicePropertyDictionary.getter();
  *(_QWORD *)&v30 = UniversalControlInputDevice.serviceID.getter(v1);
  v2 = sub_100168584();
  v3 = String.init<A>(_:radix:uppercase:)(&v30, 16, 0, &type metadata for UInt64, v2);
  v5 = v4;
  sub_100041C44(0xD000000000000010, 0x8000000100258B50, v1, &v30);
  if (v31)
  {
    if ((swift_dynamicCast(&v28, &v30, (char *)&type metadata for Any + 8, &type metadata for UInt64, 6) & 1) != 0)
    {
      *(_QWORD *)&v30 = v28;
      v6 = String.init<A>(_:radix:uppercase:)(&v30, 16, 0, &type metadata for UInt64, v2);
      v8 = v7;
      goto LABEL_6;
    }
  }
  else
  {
    sub_100025A28((uint64_t)&v30, &qword_1002B34C0);
  }
  v6 = 0;
  v8 = 0;
LABEL_6:
  sub_100041C44(0x557972616D697250, 0xEC00000065676173, v1, &v30);
  if (v31)
  {
    if ((swift_dynamicCast(&v28, &v30, (char *)&type metadata for Any + 8, &type metadata for UInt64, 6) & 1) != 0)
    {
      *(_QWORD *)&v30 = v28;
      v9 = String.init<A>(_:radix:uppercase:)(&v30, 16, 0, &type metadata for UInt64, v2);
      v11 = v10;
      goto LABEL_11;
    }
  }
  else
  {
    sub_100025A28((uint64_t)&v30, &qword_1002B34C0);
  }
  v9 = 0;
  v11 = 0;
LABEL_11:
  sub_100041C44(0x74636166756E614DLL, 0xEC00000072657275, v1, &v28);
  if (v29)
  {
    sub_100005778(&v28, &v30);
  }
  else
  {
    v31 = &type metadata for String;
    *(_QWORD *)&v30 = 1701736270;
    *((_QWORD *)&v30 + 1) = 0xE400000000000000;
    sub_100025A28((uint64_t)&v28, &qword_1002B34C0);
  }
  sub_100041C44(0x746375646F7250, 0xE700000000000000, v1, &v26);
  swift_bridgeObjectRelease();
  if (v27)
  {
    sub_100005778(&v26, &v28);
  }
  else
  {
    v29 = &type metadata for String;
    *(_QWORD *)&v28 = 1701736270;
    *((_QWORD *)&v28 + 1) = 0xE400000000000000;
    sub_100025A28((uint64_t)&v26, &qword_1002B34C0);
  }
  *(_QWORD *)&v26 = 0;
  *((_QWORD *)&v26 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(19);
  v12._countAndFlagsBits = 30768;
  v12._object = (void *)0xE200000000000000;
  String.append(_:)(v12);
  v13._countAndFlagsBits = v3;
  v13._object = v5;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 2629690;
  v14._object = (void *)0xE300000000000000;
  String.append(_:)(v14);
  if (v8)
    v15 = v6;
  else
    v15 = 45;
  if (v8)
    v16 = v8;
  else
    v16 = 0xE100000000000000;
  v17 = v16;
  String.append(_:)(*(Swift::String *)&v15);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 58;
  v18._object = (void *)0xE100000000000000;
  String.append(_:)(v18);
  if (v11)
    v19 = v9;
  else
    v19 = 45;
  if (!v11)
    v11 = 0xE100000000000000;
  v20 = v11;
  String.append(_:)(*(Swift::String *)&v19);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 8233;
  v21._object = (void *)0xE200000000000000;
  String.append(_:)(v21);
  _print_unlocked<A, B>(_:_:)(&v30, &v26, (char *)&type metadata for Any + 8, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v22._countAndFlagsBits = 32;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  _print_unlocked<A, B>(_:_:)(&v28, &v26, (char *)&type metadata for Any + 8, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v23 = v26;
  sub_100005988(&v28);
  result = sub_100005988(&v30);
  *a1 = v23;
  return result;
}

uint64_t sub_10015BC5C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  unint64_t v10;
  unint64_t v12;
  unint64_t v14;
  char v16;

  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x4E79616C70736964 && a2 == 0xEB00000000656D61)
  {
    v8 = 0xEB00000000656D61;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4E79616C70736964, 0xEB00000000656D61, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0x7379616C70736964 && a2 == 0xE800000000000000)
  {
    v10 = 0xE800000000000000;
    goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7379616C70736964, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2;
  }
  if (a1 == 0x7665447475706E69 && a2 == 0xEC00000073656369)
  {
    v12 = 0xEC00000073656369;
    goto LABEL_32;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7665447475706E69, 0xEC00000073656369, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
LABEL_32:
    swift_bridgeObjectRelease(v12);
    return 3;
  }
  if (a1 == 0x6C65646F6DLL && a2 == 0xE500000000000000)
  {
    v14 = 0xE500000000000000;
    goto LABEL_40;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C65646F6DLL, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
LABEL_40:
    swift_bridgeObjectRelease(v14);
    return 4;
  }
  if (a1 == 0x6E65644965707974 && a2 == 0xEE00726569666974)
  {
    swift_bridgeObjectRelease(0xEE00726569666974);
    return 5;
  }
  else
  {
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E65644965707974, 0xEE00726569666974, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v16 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_10015BEFC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10015BF24 + 4 * byte_100227994[a1]))(25705, 0xE200000000000000);
}

uint64_t sub_10015BF24()
{
  return 0x4E79616C70736964;
}

uint64_t sub_10015BF44()
{
  return 0x7379616C70736964;
}

uint64_t sub_10015BF5C()
{
  return 0x7665447475706E69;
}

uint64_t sub_10015BF7C()
{
  return 0x6C65646F6DLL;
}

uint64_t sub_10015BF90()
{
  return 0x6E65644965707974;
}

void sub_10015BFB4()
{
  _QWORD *v0;
  uint64_t v1;
  __int128 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;

  sub_10016B0EC();
  v4 = sub_1000055B0(&qword_1002B3528);
  sub_1000C259C();
  __chkstk_darwin(v5);
  sub_10016A9A4(v0);
  v6 = sub_100169D2C();
  sub_100084FF4((uint64_t)&type metadata for SyncController.DeviceDiagnostic.CodingKeys, v7, v6);
  v16 = *v2;
  v15 = 0;
  v8 = sub_10003668C();
  sub_1000F00E4((uint64_t)&v16, (uint64_t)&v15, v4, (uint64_t)&type metadata for UniversalControlDeviceID, v8);
  if (!v1)
  {
    sub_10016A578(*((_QWORD *)v2 + 2), *((_QWORD *)v2 + 3), 1);
    *(_QWORD *)&v16 = *((_QWORD *)v2 + 4);
    v15 = 2;
    sub_1000055B0(&qword_1002B4A00);
    sub_100169D68((uint64_t)&unk_1002B3540);
    sub_10016A454((uint64_t)&v16, (uint64_t)&v15, v10, v11, v9);
    *(_QWORD *)&v16 = *((_QWORD *)v2 + 5);
    v15 = 3;
    sub_1000055B0((uint64_t *)&unk_1002AC160);
    sub_100169DB8((uint64_t)&qword_1002B2910);
    sub_10016A454((uint64_t)&v16, (uint64_t)&v15, v13, v14, v12);
    sub_10016A578(*((_QWORD *)v2 + 6), *((_QWORD *)v2 + 7), 4);
    sub_10016A578(*((_QWORD *)v2 + 8), *((_QWORD *)v2 + 9), 5);
  }
  sub_10003B040(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  sub_1000C260C();
}

uint64_t sub_10015C164@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  v5 = sub_1000055B0((uint64_t *)&unk_1002B3550);
  sub_10016A76C();
  __chkstk_darwin(v6);
  sub_1000A3710();
  v7 = (_QWORD *)sub_1000FD3C8();
  sub_10000DBE4(v7, v8);
  v9 = sub_100169D2C();
  sub_10016AE9C((uint64_t)&type metadata for SyncController.DeviceDiagnostic.CodingKeys, (uint64_t)&type metadata for SyncController.DeviceDiagnostic.CodingKeys, v9);
  if (v1)
  {
    v11 = 0;
  }
  else
  {
    v31 = 0;
    sub_10003A380();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for UniversalControlDeviceID, &v31, v5, &type metadata for UniversalControlDeviceID);
    v10 = v29;
    LOBYTE(v29) = 1;
    v13 = sub_10016A658();
    v15 = v14;
    sub_1000055B0(&qword_1002B4A00);
    v31 = 2;
    sub_100169D68((uint64_t)&unk_1002B3560);
    v17 = v16;
    sub_1000432E0();
    sub_10016A6A4();
    if (v17)
    {
      sub_1001112AC(v3, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
      sub_10000E50C();
      v11 = 2;
    }
    else
    {
      v28 = v13;
      sub_1000055B0((uint64_t *)&unk_1002AC160);
      v31 = 3;
      sub_100169DB8((uint64_t)&qword_1002AD110);
      v19 = v18;
      sub_10005FFC0();
      sub_10016A6A4();
      if (!v19)
      {
        swift_bridgeObjectRetain();
        v20 = sub_10016A658();
        v22 = v21;
        v27 = v20;
        HIDAccelerationTable.entry.getter(v20, v21);
        v23 = sub_10016A658();
        v25 = v24;
        v26 = v23;
        sub_1001112AC(v3, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
        sub_1000432E0();
        sub_10002D9F8();
        sub_10016A970();
        sub_10003AFBC();
        sub_10000E50C();
        sub_10002D89C();
        sub_100075850();
        sub_10008503C();
        sub_10000E420();
        sub_1000267C4();
        sub_100075850();
        sub_10002D89C();
        result = sub_10000E50C();
        *a1 = v10;
        a1[1] = v30;
        a1[2] = v28;
        a1[3] = v15;
        a1[4] = v29;
        a1[5] = v29;
        a1[6] = v27;
        a1[7] = v22;
        a1[8] = v26;
        a1[9] = v25;
        return result;
      }
      sub_1001112AC(v3, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
      sub_10000E50C();
      sub_1000267C4();
      v11 = 6;
    }
  }
  result = sub_10008503C();
  if ((v11 & 2) == 0)
  {
    if ((v11 & 4) == 0)
      return result;
    return sub_10002D89C();
  }
  result = sub_10000E50C();
  if (((v11 >> 2) & 1) != 0)
    return sub_10002D89C();
  return result;
}

uint64_t sub_10015C4B8()
{
  unsigned __int8 *v0;

  return sub_10015BEFC(*v0);
}

uint64_t sub_10015C4C0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10015BC5C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10015C4E4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100169D2C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10015C50C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100169D2C();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_10015C534@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  void *result;
  _QWORD v4[10];

  result = (void *)sub_10015C164(v4);
  if (!v1)
    return memcpy(a1, v4, 0x50uLL);
  return result;
}

void sub_10015C57C()
{
  sub_10015BFB4();
}

uint64_t sub_10015C590(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v16;
  char v18;

  if (a1 == 0x74756F79616CLL && a2 == 0xE600000000000000)
  {
    v5 = 0xE600000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74756F79616CLL, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x736B6E696CLL && a2 == 0xE500000000000000)
  {
    v8 = 0xE500000000000000;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x736B6E696CLL, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0x6C61636F6CLL && a2 == 0xE500000000000000)
  {
    v10 = 0xE500000000000000;
    goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C61636F6CLL, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2;
  }
  if (a1 == 0xD000000000000010)
  {
    v11 = 0x8000000100258B70;
    if (a2 == 0x8000000100258B70)
      goto LABEL_29;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100258B70, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
LABEL_29:
    swift_bridgeObjectRelease(v11);
    return 3;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x8000000100258B90)
  {
    v12 = 0x8000000100258B90;
LABEL_35:
    swift_bridgeObjectRelease(v12);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100258B90, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_35;
  }
  if (a1 == 1668184435 && a2 == 0xE400000000000000)
  {
    v14 = 0xE400000000000000;
    goto LABEL_43;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1668184435, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
LABEL_43:
    swift_bridgeObjectRelease(v14);
    return 5;
  }
  if (a1 == 0x65446465636E7973 && a2 == 0xEF44497365636976)
  {
    v16 = 0xEF44497365636976;
    goto LABEL_51;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65446465636E7973, 0xEF44497365636976, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
LABEL_51:
    swift_bridgeObjectRelease(v16);
    return 6;
  }
  if (a1 == 0x65446465636E7973 && a2 == 0xED00007365636976)
  {
    swift_bridgeObjectRelease(0xED00007365636976);
    return 7;
  }
  else
  {
    v18 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65446465636E7973, 0xED00007365636976, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v18 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

uint64_t sub_10015C8C8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10015C8F8 + 4 * byte_10022799A[a1]))(0x74756F79616CLL, 0xE600000000000000);
}

uint64_t sub_10015C8F8()
{
  return 0x736B6E696CLL;
}

uint64_t sub_10015C90C()
{
  return 0x6C61636F6CLL;
}

unint64_t sub_10015C920()
{
  return 0xD000000000000010;
}

unint64_t sub_10015C93C()
{
  return 0xD000000000000011;
}

uint64_t sub_10015C95C()
{
  return 1668184435;
}

uint64_t sub_10015C96C()
{
  return 0x65446465636E7973;
}

void sub_10015C9A4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD v24[5];
  char v25;
  _BYTE v26[80];

  sub_10016B0EC();
  v4 = sub_1000055B0(&qword_1002B33B8);
  sub_1000C259C();
  __chkstk_darwin(v5);
  sub_10016A9A4(v0);
  v6 = sub_100168028();
  sub_100084FF4((uint64_t)&type metadata for SyncController.DiagnosticState.CodingKeys, v7, v6);
  *(_QWORD *)&v24[0] = *(_QWORD *)v2;
  v25 = 0;
  v8 = sub_1000055B0(&qword_1002B33C8);
  sub_100169E04((uint64_t)&unk_1002B33D0);
  v10 = v9;
  sub_1000F00E4((uint64_t)v24, (uint64_t)&v25, v4, v8, v9);
  if (!v1)
  {
    *(_QWORD *)&v24[0] = *(_QWORD *)(v2 + 8);
    v25 = 1;
    sub_1000055B0(&qword_1002B33D8);
    v11 = sub_100168064();
    sub_10016A454((uint64_t)v24, (uint64_t)&v25, v12, v13, v11);
    sub_100140EB8(v2 + 16, (uint64_t)v26);
    sub_100140EB8((uint64_t)v26, (uint64_t)v24);
    v25 = 2;
    v14 = sub_1000FB504();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v24, &v25, v4, &unk_10028E040, v14);
    *(_QWORD *)&v24[0] = *(_QWORD *)(v2 + 96);
    v25 = 3;
    sub_1000F00E4((uint64_t)v24, (uint64_t)&v25, v4, v8, v10);
    v15 = *(_QWORD *)(v2 + 104);
    v16 = *(_QWORD *)(v2 + 112);
    LOBYTE(v24[0]) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v15, v16, v24, v4);
    *(_QWORD *)&v24[0] = *(_QWORD *)(v2 + 120);
    v25 = 5;
    sub_1000055B0(&qword_1002B33F8);
    sub_100169ED0((uint64_t)&unk_1002B3400);
    sub_10016A454((uint64_t)v24, (uint64_t)&v25, v18, v19, v17);
    v24[0] = *(_OWORD *)(v2 + 128);
    v25 = 6;
    v20 = sub_10008A0CC();
    sub_1000F00E4((uint64_t)v24, (uint64_t)&v25, v4, (uint64_t)&type metadata for UniversalControlUUID, v20);
    *(_QWORD *)&v24[0] = *(_QWORD *)(v2 + 144);
    v25 = 7;
    sub_1000055B0(&qword_1002AA560);
    sub_100169F64((uint64_t)&qword_1002AD060);
    sub_10016A454((uint64_t)v24, (uint64_t)&v25, v22, v23, v21);
  }
  sub_10003B040(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  sub_1000C260C();
}

void sub_10015CC64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  char v69;
  char v70;
  char v71;
  char v72;
  char v73;
  char v74;
  char v75;
  char v76;
  char v77;
  char v78;
  char v79;
  char v80;
  char v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD v99[19];
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  char v117;
  char v118;
  char v119;
  char v120;
  char v121;
  char v122;
  char v123;
  char v124;
  char v125;
  char v126;
  char v127;
  char v128;
  char v129;
  char v130;
  char v131;
  uint64_t v132;
  char v133[9];

  sub_10003AFC4();
  v13 = v12;
  v15 = v14;
  v16 = sub_1000055B0(&qword_1002B3578);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  sub_1000A3710();
  v18 = *(_QWORD *)(v13 + 24);
  v19 = *(_QWORD *)(v13 + 32);
  v20 = (_QWORD *)sub_10016B144();
  v22 = (uint64_t)sub_10000DBE4(v20, v21);
  v23 = sub_100168028();
  sub_10016AE9C((uint64_t)&type metadata for SyncController.DiagnosticState.CodingKeys, (uint64_t)&type metadata for SyncController.DiagnosticState.CodingKeys, v23);
  if (v10)
  {
    sub_10016A428();
    v29 = 20;
  }
  else
  {
    v89 = v17;
    v85 = (void *)v15;
    v15 = sub_1000055B0(&qword_1002B33C8);
    LOBYTE(v99[0]) = 0;
    sub_100169E04((uint64_t)&unk_1002B3580);
    v18 = v24;
    sub_10016A548(v15, (uint64_t)v99, v16, v15);
    v19 = v100;
    v22 = sub_1000055B0(&qword_1002B33D8);
    LOBYTE(v99[0]) = 1;
    v33 = sub_100169E50();
    sub_10005FFC0();
    sub_10016A548(v22, (uint64_t)v99, v16, v22);
    v88 = v19;
    if (!v33)
    {
      v34 = v100;
      LOBYTE(v99[0]) = 2;
      v35 = sub_1000FD160();
      sub_10005FFC0();
      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v100, &unk_10028E040, v99, v16, &unk_10028E040, v35, v36);
      v87 = v34;
      v37 = v106;
      LOBYTE(v99[0]) = 3;
      v97 = v109;
      v98 = v108;
      v38 = v100;
      v95 = v104;
      v96 = v101;
      v93 = v102;
      v94 = v103;
      v83 = v107;
      v84 = v105;
      sub_10005F508(v100, v101, v102, v103, v104, v105, v106, v107, v108, v109);
      sub_10016A548(v15, (uint64_t)v99, v16, v15);
      v92 = v38;
      v15 = v84;
      v91 = v37;
      v39 = v100;
      LOBYTE(v100) = 4;
      sub_1000432E0();
      v86 = v39;
      v40 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v100, v16);
      v42 = v41;
      v43 = sub_1000055B0(&qword_1002B33F8);
      LOBYTE(v99[0]) = 5;
      sub_100169ED0((uint64_t)&unk_1002B3598);
      v45 = v44;
      sub_10005FFC0();
      sub_10016A548(v43, (uint64_t)v99, v16, v43);
      if (v45)
      {
        sub_1001112AC(v11, *(uint64_t (**)(uint64_t, uint64_t))(v89 + 8));
        sub_10016AA44();
        v46 = sub_10000E420();
        sub_10016A370(v46, v47, v48, v49, v50, v51, v52, v53, v66, v68);
        sub_10016A8B4();
        sub_10016AB9C();
        v30 = 0;
      }
      else
      {
        v54 = v100;
        LOBYTE(v99[0]) = 6;
        v55 = sub_10008A010();
        sub_1000432E0();
        sub_10016A548((uint64_t)&type metadata for UniversalControlUUID, (uint64_t)v99, v16, (uint64_t)&type metadata for UniversalControlUUID);
        v90 = v54;
        if (!v55)
        {
          v56 = v100;
          v81 = BYTE2(v100);
          v82 = BYTE1(v100);
          v79 = BYTE4(v100);
          v80 = BYTE3(v100);
          v77 = BYTE6(v100);
          v78 = BYTE5(v100);
          v75 = v101;
          v76 = HIBYTE(v100);
          v73 = BYTE2(v101);
          v74 = BYTE1(v101);
          v71 = BYTE4(v101);
          v72 = BYTE3(v101);
          v69 = BYTE6(v101);
          v70 = BYTE5(v101);
          v67 = HIBYTE(v101);
          v57 = sub_1000055B0(&qword_1002AA560);
          v133[0] = 7;
          sub_100169F64((uint64_t)&unk_1002AD0F0);
          sub_10016A548(v57, (uint64_t)v133, v16, v57);
          sub_1001112AC(v11, *(uint64_t (**)(uint64_t, uint64_t))(v89 + 8));
          v99[0] = v88;
          v99[1] = v87;
          v99[2] = v92;
          v99[3] = v96;
          v99[4] = v93;
          v99[5] = v94;
          v99[6] = v95;
          v99[7] = v84;
          v99[8] = v91;
          v99[9] = v83;
          v99[10] = v98;
          v99[11] = v97;
          v99[12] = v86;
          v99[13] = v40;
          v99[14] = v42;
          v99[15] = v90;
          LOBYTE(v99[16]) = v56;
          BYTE1(v99[16]) = v82;
          BYTE2(v99[16]) = v81;
          BYTE3(v99[16]) = v80;
          BYTE4(v99[16]) = v79;
          BYTE5(v99[16]) = v78;
          BYTE6(v99[16]) = v77;
          HIBYTE(v99[16]) = v76;
          LOBYTE(v99[17]) = v75;
          BYTE1(v99[17]) = v74;
          BYTE2(v99[17]) = v73;
          BYTE3(v99[17]) = v72;
          BYTE4(v99[17]) = v71;
          BYTE5(v99[17]) = v70;
          BYTE6(v99[17]) = v69;
          HIBYTE(v99[17]) = v67;
          v99[18] = a10;
          sub_100169FB8(v99);
          sub_10002D860();
          sub_10000E420();
          sub_10000E50C();
          sub_10005F5EC(v92, v96, v93, v94, v95, v84, v91, v83, v98, v97);
          sub_10002D860();
          sub_100075850();
          sub_10016B030();
          v100 = v88;
          v101 = v87;
          v102 = v92;
          v103 = v96;
          v104 = v93;
          v105 = v94;
          v106 = v95;
          v107 = v84;
          v108 = v91;
          v109 = v83;
          v110 = v98;
          v111 = v97;
          v112 = v86;
          v113 = v40;
          v114 = v42;
          v115 = v90;
          v116 = v56;
          v117 = v82;
          v118 = v81;
          v119 = v80;
          v120 = v79;
          v121 = v78;
          v122 = v77;
          v123 = v76;
          v124 = v75;
          v125 = v74;
          v126 = v73;
          v127 = v72;
          v128 = v71;
          v129 = v70;
          v130 = v69;
          v131 = v67;
          v132 = a10;
          sub_10013FDE8(&v100);
          memcpy(v85, v99, 0x98uLL);
          goto LABEL_13;
        }
        sub_1001112AC(v11, *(uint64_t (**)(uint64_t, uint64_t))(v89 + 8));
        sub_10016AA44();
        sub_10016AF8C();
        swift_bridgeObjectRelease();
        sub_10016A370(v58, v59, v60, v61, v62, v63, v64, v65, v66, v68);
        sub_10016A8B4();
        sub_10016AB9C();
        v30 = 1;
      }
      sub_10016B030();
      LOBYTE(v32) = 1;
      v31 = 1;
      goto LABEL_7;
    }
    sub_1001112AC(v11, *(uint64_t (**)(uint64_t, uint64_t))(v17 + 8));
    sub_1000267C4();
    sub_10016A428();
    v29 = 21;
  }
  v91 = v19;
  v92 = v28;
  v96 = v27;
  v97 = v26;
  v93 = v17;
  v94 = v18;
  v98 = v25;
  v95 = v22;
  sub_10016B030();
  if ((v29 & 1) != 0)
  {
    v31 = 0;
    v30 = 0;
    v32 = (v29 >> 1) & 1;
LABEL_7:
    swift_bridgeObjectRelease();
    if ((v32 & 1) != 0)
      sub_10016AB9C();
    goto LABEL_9;
  }
  v30 = 0;
  v31 = 0;
LABEL_9:
  sub_10005F5EC(v92, v96, v93, v94, v95, v15, v91, v11, v98, v97);
  if (v31)
    sub_10016AA44();
  sub_1000267C4();
  if (v30)
    swift_bridgeObjectRelease();
LABEL_13:
  sub_10003AF60();
}

uint64_t sub_10015D474()
{
  unsigned __int8 *v0;

  return sub_10015C8C8(*v0);
}

uint64_t sub_10015D47C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10015C590(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10015D4A0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = static HIDEventPhase.canceled.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10015D4C4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100168028();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10015D4EC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100168028();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10015D514(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t __src[19];

  sub_10015CC64(a1, a2, a3, a4, a5, a6, a7, a8, v11, __src[0]);
  if (!v9)
    memcpy(a9, __src, 0x98uLL);
}

void sub_10015D55C()
{
  const void *v0;
  _BYTE __dst[152];

  memcpy(__dst, v0, sizeof(__dst));
  sub_10015C9A4();
}

void sub_10015D5AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v5[24];

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  sub_10000B2F8(v1 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_peerCoordinators, (uint64_t)v5, 33);
  v4 = sub_1000088D0();
  sub_1001AAA30(v4, v2, v3);
  swift_endAccess(v5);
  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_sink))
  {
    sub_10016A4B8(v1 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_sink);
    sub_1000103C0();
    sub_10002D988();
    sub_10016A524();
    sub_10000F718();
    sub_10000E410();
    sub_1000797D8();
  }
  else
  {
    __break(1u);
  }
}

void sub_10015D644(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  _BYTE v12[24];

  v3 = v2;
  v5 = (uint64_t *)(v3 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_syncCoordinators);
  sub_10005FE28(v3 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_syncCoordinators, (uint64_t)v12);
  v6 = *v5;
  sub_1000432E0();
  v7 = sub_100141158();
  sub_100041C38(v7, v8, v6);
  v10 = v9;
  sub_10000E50C();
  if (v10)
  {
    sub_1000F76E4(a2, v11);
    sub_1000269A0();
  }
  if (*(_QWORD *)(v3 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_sink))
  {
    sub_10016A4B8(v3 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_sink);
    sub_1000103C0();
    sub_10002D988();
    sub_10016A524();
    sub_10000F718();
    sub_10000E410();
    sub_1000797D8();
  }
  else
  {
    __break(1u);
  }
}

void sub_10015D6EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  BOOL v72;
  unsigned __int8 *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  uint64_t v78;
  os_log_type_t v79;
  int v80;
  _BOOL4 v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  os_log_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __n128 v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  os_log_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  char *v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141[3];
  uint64_t v142;

  sub_10003AFC4();
  a19 = v22;
  a20 = v23;
  v140 = v20;
  v25 = v24;
  v27 = v26;
  v29 = v28;
  v30 = sub_10000E440();
  v136 = *(_QWORD *)(v30 - 8);
  v137 = v30;
  sub_1000262EC();
  __chkstk_darwin(v31);
  v33 = (char *)&v112 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for SyncMessage(0);
  v35 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v37 = (char *)&v112 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  v40 = (char *)&v112 - v39;
  v138 = v41;
  __chkstk_darwin(v42);
  sub_10016B0AC(v43, v44, v45, v46, v47, v48, v49, v50, v112);
  sub_10002517C(v27, v25);
  v51 = objc_autoreleasePoolPush();
  sub_100089D0C(v27, v25);
  if (v21)
  {
    objc_autoreleasePoolPop(v51);
    sub_10016B15C();
  }
  else
  {
    v132 = v33;
    v133 = v35;
    v134 = v37;
    v135 = 0;
    objc_autoreleasePoolPop(v51);
    sub_10016B15C();
    sub_10005F3FC((uint64_t)v40, v139, type metadata accessor for SyncMessage);
    v52 = v140 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView;
    sub_10005FE28(v140 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView, (uint64_t)&v142);
    v53 = sub_10016A480();
    v54 = v29[24];
    v55 = v29[26];
    v56 = v29[27];
    v57 = v29[28];
    v58 = v29[29];
    v59 = v29[30];
    v60 = v29[31];
    v61 = v29[32];
    v62 = v29[33];
    v63 = v29[34];
    v64 = v29[35];
    v65 = v29[36];
    v66 = v29[37];
    v67 = v29[38];
    v128 = v29[25];
    v129 = v54;
    v126 = v56;
    v127 = v55;
    v125 = v57;
    v124 = v58;
    v123 = v59;
    v115 = v60;
    v122 = v61;
    v121 = v62;
    v120 = v63;
    v119 = v64;
    v118 = v65;
    v117 = v66;
    v116 = v67;
    sub_10003AFBC();
    sub_10016AC80();
    v69 = v68;
    sub_10000E420();
    sub_100170228();
    sub_10016AC80();
    v71 = v70;
    sub_10000E420();
    v130 = v71;
    v131 = v69;
    v72 = v71 >= v69;
    v73 = v29;
    v74 = v52;
    if (!v72)
    {
      v114 = v53;
      if (qword_1002A98F8 != -1)
        swift_once(&qword_1002A98F8, sub_10014C200);
      v75 = type metadata accessor for Logger(0);
      sub_100006FB4(v75, (uint64_t)qword_1002B2A80);
      v76 = sub_1000404AC((uint64_t)v29);
      v77 = Logger.logObject.getter(v76);
      v79 = static os_log_type_t.default.getter(v77, v78);
      v80 = v79;
      v81 = os_log_type_enabled(v77, v79);
      v82 = v132;
      if (v81)
      {
        v113 = v77;
        v83 = sub_10000797C(32);
        LODWORD(v115) = v80;
        v84 = v83;
        v85 = sub_10000797C(32);
        v141[0] = v85;
        *(_DWORD *)v84 = 136446722;
        v112 = v84 + 4;
        sub_10016AE60();
        sub_10016AE54();
        sub_10016AE48();
        v86 = UUID.init(uuid:)(v129, v128, v127, v126, v125, v124);
        v87 = UUID.uuidString.getter(v86);
        v88 = v82;
        v90 = v89;
        (*(void (**)(char *, uint64_t))(v136 + 8))(v88, v137);
        sub_1000599D0(8, v87, v90);
        v91 = sub_1000602C0();
        v93 = v92;
        sub_10000E420();
        a10 = sub_100006FCC(v91, v93, v141);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&a10, &a11, v112);
        sub_10000F650((uint64_t)v29);
        sub_100075850();
        *(_WORD *)(v84 + 12) = 2050;
        sub_10016AC70(v84 + 14, v84 + 22, v131);
        *(_WORD *)(v84 + 22) = 2050;
        sub_10016AC70(v84 + 24, v84 + 32, v130);
        v94 = v113;
        _os_log_impl((void *)&_mh_execute_header, v113, (os_log_type_t)v115, "IDS %{public}s: Timestamp reset for peer: %{public}llu -> %{public}llu, reset sync coordinator", (uint8_t *)v84, 0x20u);
        sub_1000263F4(v85, v95, (uint64_t)&type metadata for Any + 8);
        sub_100007958(v85);
        sub_100007958(v84);

      }
      else
      {

        sub_10000F650((uint64_t)v29);
      }
      v53 = v114;
      sub_100026478(v140 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_syncCoordinators, (uint64_t)v141);
      v96 = sub_10016AFDC();
      v97 = sub_1001AA334(v96);
      swift_endAccess(v141);
      if (v97)
      {
        sub_1000F76E4(0, v98);
        sub_10000B348();
      }
      sub_100026478(v74, (uint64_t)v141);
      v99 = *(int *)(v53 + 24);
      v100 = *(_QWORD *)(v74 + v99);
      sub_10003AFBC();
      v101 = sub_10016AFDC();
      *(_QWORD *)(v74 + v99) = sub_1001452B8(v101, v102, v100);
      swift_endAccess(v141);
      sub_100026AF4(v100);
    }
    sub_10016AFDC();
    v103 = v140;
    sub_10014C26C();
    v104 = *(_QWORD *)(v74 + *(int *)(v53 + 24));
    v105 = v139;
    v106 = (uint64_t)v134;
    sub_100022838(v139, (uint64_t)v134, type metadata accessor for SyncMessage);
    v107 = *(unsigned __int8 *)(v133 + 80);
    v108 = (v107 + 32) & ~v107;
    v109 = swift_allocObject(&unk_10028DBF0, v108 + v138, v107 | 7);
    *(_QWORD *)(v109 + 16) = v103;
    *(_QWORD *)(v109 + 24) = v73;
    sub_10005F3FC(v106, v109 + v108, type metadata accessor for SyncMessage);
    v110 = type metadata accessor for Completion();
    swift_allocObject(v110, 48, 7);
    sub_100026AE4();
    sub_100040544();
    sub_1000600C0();
    v111 = Completion.init(file:line:body:)(0xD00000000000005DLL, 0x8000000100258AB0, 1956, (uint64_t)sub_100168240, v109);
    sub_1000F7E84(v105, v104, (uint64_t)v111);
    sub_1000255F0(v105, type metadata accessor for SyncMessage);
    swift_release();
    sub_10000E568();
    sub_100026AEC();
  }
  sub_10003AF60();
}

void sub_10015DD58(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  uint64_t v44;
  os_log_type_t v45;
  int v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  unsigned __int8 *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96[3];
  _BYTE v97[24];

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_1002A98F8 != -1)
      swift_once(&qword_1002A98F8, sub_10014C200);
    v14 = sub_100006FB4(v10, (uint64_t)qword_1002B2A80);
    v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v14, v10);
    __chkstk_darwin(v15);
    v68 = a1;
    sub_1000E45AC((int)sub_10016827C, (int)a3, (int)sub_10000B008, (int)(&v69 - 4), v16, v17, v18, v19, v69, v70, v71, v72, v73, v74, v75, v76, (uint64_t)v77, v78, v79,
      (uint64_t)v80,
      v81,
      v82,
      v83,
      v84);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    swift_errorRelease(a1);
  }
  else
  {
    v81 = v10;
    v77 = v9;
    v78 = v7;
    v79 = v6;
    v82 = a2;
    v20 = a2 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView;
    swift_beginAccess(a2 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_localSyncView, v97, 0, 0);
    v21 = type metadata accessor for SyncView(0);
    v22 = *(int *)(v21 + 24);
    v23 = v21;
    v94 = v21;
    v85 = *(_QWORD *)(v20 + v22);
    swift_bridgeObjectRetain();
    v84 = sub_100170228();
    v93 = a3[24];
    v92 = a3[25];
    v91 = a3[26];
    v90 = a3[27];
    v89 = a3[28];
    v88 = a3[29];
    v87 = a3[30];
    v24 = a3[31];
    v86 = a3[32];
    v25 = a3[33];
    v26 = a3;
    v27 = a3[34];
    v28 = v26[35];
    v29 = v26[36];
    v30 = v26[37];
    v31 = v26[38];
    v80 = v26;
    v83 = v26[39];
    swift_beginAccess(v20, v96, 33, 0);
    v32 = *(int *)(v23 + 24);
    v33 = *(_QWORD *)(v20 + v32);
    v70 = (id)v24;
    v34 = v93 | (v92 << 8) | (v91 << 16) | (v90 << 24) | (v89 << 32) | (v88 << 40) | (v87 << 48) | (v24 << 56);
    v76 = v25;
    v75 = v27;
    v74 = v28;
    v35 = v86 | (v25 << 8) | (v27 << 16) | (v28 << 24);
    v36 = v83;
    v73 = v29;
    v72 = v30;
    v71 = v31;
    v37 = v35 | (v29 << 32) | (v30 << 40) | (v31 << 48) | (v83 << 56);
    swift_bridgeObjectRetain();
    *(_QWORD *)(v20 + v32) = sub_100145228(v84, v34, v37, v33);
    swift_endAccess(v96);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v33, 2);
    v38 = v85;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000F145C();
    LOBYTE(v25) = v39;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v25 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v40 = v82;
    }
    else
    {
      if (qword_1002A98F8 != -1)
        swift_once(&qword_1002A98F8, sub_10014C200);
      sub_100006FB4(v81, (uint64_t)qword_1002B2A80);
      v41 = (uint64_t)v80;
      swift_retain_n(v80, 2);
      v40 = v82;
      swift_retain_n(v82, 2);
      swift_bridgeObjectRetain();
      v43 = Logger.logObject.getter(v42);
      v45 = static os_log_type_t.default.getter(v43, v44);
      v46 = v45;
      if (os_log_type_enabled(v43, v45))
      {
        LODWORD(v84) = v46;
        v47 = v36;
        v48 = swift_slowAlloc(32, -1);
        v83 = swift_slowAlloc(96, -1);
        v96[0] = v83;
        *(_DWORD *)v48 = 136446722;
        HIBYTE(v68) = v47;
        BYTE6(v68) = v71;
        BYTE5(v68) = v72;
        BYTE4(v68) = v73;
        BYTE3(v68) = v74;
        BYTE2(v68) = v75;
        BYTE1(v68) = v76;
        LOBYTE(v68) = v86;
        v49 = (uint64_t)v77;
        v50 = UUID.init(uuid:)(v93, v92, v91, v90, v89, v88);
        v51 = UUID.uuidString.getter(v50);
        v53 = v52;
        (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v49, v79);
        v54 = sub_1000599D0(8, v51, v53);
        v55 = static String._fromSubstring(_:)(v54);
        v57 = v56;
        swift_bridgeObjectRelease();
        v95 = sub_100006FCC(v55, v57, v96);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, v96, v48 + 4);
        swift_release_n(v41, 2);
        swift_bridgeObjectRelease();
        *(_WORD *)(v48 + 12) = 2082;
        swift_bridgeObjectRetain();
        sub_10016F9F8();
        v59 = v58;
        v61 = v60;
        swift_bridgeObjectRelease();
        v95 = sub_100006FCC(v59, v61, v96);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, v96, v48 + 14);
        swift_bridgeObjectRelease_n(v38, 2);
        swift_bridgeObjectRelease();
        *(_WORD *)(v48 + 22) = 2082;
        swift_bridgeObjectRetain();
        sub_10016F9F8();
        v63 = v62;
        v65 = v64;
        swift_bridgeObjectRelease();
        v95 = sub_100006FCC(v63, v65, v96);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, v96, v48 + 24);
        swift_release_n(v40, 2);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v43, (os_log_type_t)v84, "IDS %{public}s: Merge sync clock: %{public}s -> %{public}s", (uint8_t *)v48, 0x20u);
        v66 = v83;
        swift_arrayDestroy(v83, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v66, -1, -1);
        swift_slowDealloc(v48, -1, -1);

      }
      else
      {

        swift_release_n(v40, 2);
        swift_bridgeObjectRelease_n(v38, 2);
        swift_release_n(v41, 2);
      }
    }
    if (*(_QWORD *)(v40 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_sink))
    {
      v67 = *(_QWORD *)(v40 + OBJC_IVAR____TtC13EnsembleAgent14SyncController_sink + 8);
      swift_getObjectType(v67);
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain(v67);
      OS_dispatch_source_data_add.add(data:)(1uLL);
      swift_unknownObjectRelease(v67);
      swift_bridgeObjectRelease();
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t sub_10015E480(unsigned __int8 *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  Swift::String v16;
  Swift::String v17;
  _QWORD v19[2];

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(33, 1);
  v19[1] = v6;
  v7._countAndFlagsBits = 542327881;
  v7._object = (void *)0xE400000000000000;
  String.append(_:)(v7);
  v8 = UUID.init(uuid:)(a1[24], a1[25], a1[26], a1[27], a1[28], a1[29]);
  v9 = UUID.uuidString.getter(v8);
  v11 = v10;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v12 = sub_1000599D0(8, v9, v11);
  v13 = static String._fromSubstring(_:)(v12);
  v15 = v14;
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = v13;
  v16._object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._object = (void *)0x8000000100258B30;
  v17._countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v17);
  return v19[0];
}

#error "10015E5CC: call analysis failed (funcsize=5)"

uint64_t sub_10015E5D8(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  unint64_t v23;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v29;
  unint64_t v30;
  char v32;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x8000000100258BB0;
    if (a2 == 0x8000000100258BB0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100258BB0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x6974616D6F747541 && a2 == 0xEA00000000006E6FLL)
  {
    v7 = 0xEA00000000006E6FLL;
    goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6974616D6F747541, 0xEA00000000006E6FLL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0x72756769666E6F43 && a2 == 0xED00006E6F697461)
  {
    v9 = 0xED00006E6F697461;
    goto LABEL_21;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x72756769666E6F43, 0xED00006E6F697461, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_21:
    swift_bridgeObjectRelease(v9);
    return 2;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x8000000100258BD0)
  {
    v10 = 0x8000000100258BD0;
LABEL_27:
    swift_bridgeObjectRelease(v10);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000100258BD0, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_27;
  }
  if (a1 == 0xD000000000000015)
  {
    v11 = 0x8000000100258BF0;
    if (a2 == 0x8000000100258BF0)
      goto LABEL_32;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100258BF0, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
LABEL_32:
    swift_bridgeObjectRelease(v11);
    return 4;
  }
  if (a1 == 0xD000000000000011)
  {
    v12 = 0x8000000100258C10;
    if (a2 == 0x8000000100258C10)
      goto LABEL_37;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100258C10, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
LABEL_37:
    swift_bridgeObjectRelease(v12);
    return 5;
  }
  if (a1 == 0xD000000000000019 && a2 == 0x8000000100258C30)
  {
    v13 = 0x8000000100258C30;
LABEL_43:
    swift_bridgeObjectRelease(v13);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019, 0x8000000100258C30, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_43;
  }
  if (a1 == 0x656C6261736944 && a2 == 0xE700000000000000)
  {
    v15 = 0xE700000000000000;
    goto LABEL_51;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C6261736944, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
LABEL_51:
    swift_bridgeObjectRelease(v15);
    return 7;
  }
  if (a1 == 0xD000000000000011)
  {
    v16 = 0x8000000100258C50;
    if (a2 == 0x8000000100258C50)
      goto LABEL_56;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100258C50, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
LABEL_56:
    swift_bridgeObjectRelease(v16);
    return 8;
  }
  if (a1 == 0xD000000000000018 && a2 == 0x8000000100258C70)
  {
    v17 = 0x8000000100258C70;
LABEL_62:
    swift_bridgeObjectRelease(v17);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x8000000100258C70, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
    goto LABEL_62;
  }
  if (a1 == 0xD00000000000001BLL)
  {
    v18 = 0x8000000100258C90;
    if (a2 == 0x8000000100258C90)
      goto LABEL_67;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001BLL, 0x8000000100258C90, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
LABEL_67:
    swift_bridgeObjectRelease(v18);
    return 10;
  }
  if (a1 == 0xD00000000000001BLL)
  {
    v19 = 0x8000000100258CB0;
    if (a2 == 0x8000000100258CB0)
      goto LABEL_72;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001BLL, 0x8000000100258CB0, a1, a2, 0) & 1) != 0)
  {
    v19 = a2;
LABEL_72:
    swift_bridgeObjectRelease(v19);
    return 11;
  }
  if (a1 == 0x6E6564646948 && a2 == 0xE600000000000000)
  {
    v21 = 0xE600000000000000;
    goto LABEL_80;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6564646948, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v21 = a2;
LABEL_80:
    swift_bridgeObjectRelease(v21);
    return 12;
  }
  if (a1 == 0x656D6954656C6449 && a2 == 0xEB0000000074756FLL)
  {
    v23 = 0xEB0000000074756FLL;
    goto LABEL_88;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656D6954656C6449, 0xEB0000000074756FLL, a1, a2, 0) & 1) != 0)
  {
    v23 = a2;
LABEL_88:
    swift_bridgeObjectRelease(v23);
    return 13;
  }
  if (a1 == 0x656C644965756C47 && a2 == 0xEF74756F656D6954)
  {
    v25 = 0xEF74756F656D6954;
    goto LABEL_96;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C644965756C47, 0xEF74756F656D6954, a1, a2, 0) & 1) != 0)
  {
    v25 = a2;
LABEL_96:
    swift_bridgeObjectRelease(v25);
    return 14;
  }
  if (a1 == 0xD000000000000015)
  {
    v26 = 0x8000000100258CD0;
    if (a2 == 0x8000000100258CD0)
      goto LABEL_101;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100258CD0, a1, a2, 0) & 1) != 0)
  {
    v26 = a2;
LABEL_101:
    swift_bridgeObjectRelease(v26);
    return 15;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x8000000100258CF0)
  {
    v27 = 0x8000000100258CF0;
LABEL_107:
    swift_bridgeObjectRelease(v27);
    return 16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100258CF0, a1, a2, 0) & 1) != 0)
  {
    v27 = a2;
    goto LABEL_107;
  }
  if (a1 == 0x6572685449535352 && a2 == 0xED0000646C6F6873)
  {
    v29 = 0xED0000646C6F6873;
    goto LABEL_115;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6572685449535352, 0xED0000646C6F6873, a1, a2, 0) & 1) != 0)
  {
    v29 = a2;
LABEL_115:
    swift_bridgeObjectRelease(v29);
    return 17;
  }
  if (a1 == 0xD000000000000010)
  {
    v30 = 0x8000000100258D10;
    if (a2 == 0x8000000100258D10)
      goto LABEL_120;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100258D10, a1, a2, 0) & 1) != 0)
  {
    v30 = a2;
LABEL_120:
    swift_bridgeObjectRelease(v30);
    return 18;
  }
  if (a1 == 0x656D6954636E7953 && a2 == 0xEB0000000074756FLL)
  {
    swift_bridgeObjectRelease(0xEB0000000074756FLL);
    return 19;
  }
  else
  {
    v32 = _stringCompareWithSmolCheck(_:_:expecting:)(0x656D6954636E7953, 0xEB0000000074756FLL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v32 & 1) != 0)
      return 19;
    else
      return 20;
  }
}

uint64_t static HIDEventType.gyro.getter()
{
  return 20;
}

uint64_t sub_10015EDAC(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10015EDE4 + 4 * byte_1002279A2[a1]))(0xD000000000000010, 0x8000000100258BB0);
}

uint64_t sub_10015EDE4()
{
  return 0x6974616D6F747541;
}

uint64_t sub_10015EE00()
{
  return 0x72756769666E6F43;
}

uint64_t sub_10015EE24(uint64_t a1)
{
  return a1 + 4;
}

void sub_10015EF78()
{
  _QWORD *v0;
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  char v12[8];
  _BYTE v13[8];
  _BYTE v14[8];

  sub_10016B0EC();
  v3 = sub_1000055B0(&qword_1002B3428);
  sub_1000C259C();
  __chkstk_darwin(v4);
  sub_10000E478();
  sub_10016A9A4(v0);
  v5 = sub_100168284();
  sub_100084FF4((uint64_t)&type metadata for UniversalControlPreferencesDiagnostics.DiagnosticState.CodingKeys, v6, v5);
  v7 = *v2;
  v12[0] = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v7, v12, v3);
  if (!v1)
  {
    sub_10016A3B4(v2[1], 1);
    v8 = *((_QWORD *)v2 + 1);
    v9 = *((_QWORD *)v2 + 2);
    v12[0] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v8, v9, v12, v3);
    sub_10016A468(*((_QWORD *)v2 + 3), v2[32], 3);
    sub_10016A358(*((_QWORD *)v2 + 5), v2[48], 4);
    sub_10016A358(*((_QWORD *)v2 + 7), v2[64], 5);
    sub_10016A358(*((_QWORD *)v2 + 9), v2[80], 6);
    sub_10016A3B4(v2[81], 7);
    sub_10016A3B4(v2[82], 8);
    sub_10016A3B4(v2[83], 9);
    sub_10016A358(*((_QWORD *)v2 + 11), v2[96], 10);
    sub_10016A3B4(v2[97], 11);
    sub_100140EB8((uint64_t)(v2 + 104), (uint64_t)v14);
    sub_100140EB8((uint64_t)v14, (uint64_t)v12);
    sub_1000055B0((uint64_t *)&unk_1002AC160);
    sub_100169DB8((uint64_t)&qword_1002B2910);
    sub_10016A790();
    sub_10016A358(*((_QWORD *)v2 + 14), v2[120], 13);
    sub_10016A358(*((_QWORD *)v2 + 16), v2[136], 14);
    sub_10016A468(*((_QWORD *)v2 + 18), v2[152], 15);
    sub_10016A468(*((_QWORD *)v2 + 20), v2[168], 16);
    sub_10016A468(*((_QWORD *)v2 + 22), v2[184], 17);
    sub_100140EB8((uint64_t)(v2 + 192), (uint64_t)v13);
    sub_100140EB8((uint64_t)v13, (uint64_t)v12);
    sub_10016A790();
    sub_10016A358(*((_QWORD *)v2 + 25), v2[208], 19);
  }
  v10 = sub_10016A9BC();
  v11(v10);
  sub_1000C260C();
}

void sub_10015F24C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  int v24;
  _DWORD *v25;
  int v26;
  _DWORD *v27;
  int v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  _DWORD *v54;
  uint64_t v55;
  _DWORD *v56;
  _DWORD *v57;
  _DWORD *v58;
  int v59;
  _DWORD *v60;
  int v61;
  _DWORD *v62;
  int v63;
  uint64_t v64;
  char v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  char v93;
  _BYTE v94[209];
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  _BYTE v101[7];
  uint64_t v102;
  char v103;
  _BYTE v104[7];
  uint64_t v105;
  char v106;
  int v107;
  char v108;
  char v109;
  uint64_t v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  char v119;
  char v120;
  char v121;
  char v122;
  char v123;
  int v124;
  char v125;
  char v126;
  _BYTE v127[7];
  char v128;
  _BYTE v129[7];
  char v130;
  _BYTE v131[7];
  char v132;
  int v133;
  __int16 v134;

  sub_10003AFC4();
  v13 = v12;
  v15 = v14;
  v16 = sub_1000055B0(&qword_1002B35A8);
  __chkstk_darwin(v16);
  sub_100065E48();
  v132 = 1;
  v130 = 1;
  v128 = 1;
  v126 = 1;
  v125 = 1;
  v123 = 1;
  v122 = 1;
  v121 = 1;
  v120 = 1;
  v119 = 1;
  v118 = 1;
  v17 = v13[3];
  v18 = v13[4];
  v86 = v13;
  sub_10000DBE4(v13, v17);
  v19 = sub_100168284();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for UniversalControlPreferencesDiagnostics.DiagnosticState.CodingKeys, &type metadata for UniversalControlPreferencesDiagnostics.DiagnosticState.CodingKeys, v19, v17, v18);
  if (v10)
  {
    sub_10016A4C4();
    sub_100005988(v13);
    LOBYTE(v96) = 2;
    BYTE1(v96) = v17;
    *(_DWORD *)((char *)&v96 + 2) = v133;
    HIWORD(v96) = v134;
    v97 = v16;
    v98 = a10;
    v99 = v84;
    v100 = v132;
    *(_DWORD *)v101 = *(_DWORD *)v131;
    *(_DWORD *)&v101[3] = *(_DWORD *)&v131[3];
    v102 = v11;
    v103 = v130;
    *(_DWORD *)&v104[3] = *(_DWORD *)&v129[3];
    *(_DWORD *)v104 = *(_DWORD *)v129;
    v105 = v10;
    v106 = v128;
    v107 = *(_DWORD *)v127;
    sub_10016AD90(*(int *)&v127[3]);
    v108 = (char)v15;
    v109 = v18;
    sub_10016A66C();
    *(_DWORD *)(v20 + 98) = v124;
    v110 = v89;
    sub_10016B0C0();
    v111 = v21[63];
    *(_DWORD *)((char *)v21 + 121) = *(_DWORD *)((char *)v21 + 249);
    sub_10016B038();
    v112 = v22[61];
    *(_DWORD *)((char *)v22 + 137) = *(_DWORD *)((char *)v22 + 241);
    sub_10016AFE8();
    v24 = *(_DWORD *)((char *)v23 + 233);
    v113 = v23[59];
    *(_DWORD *)((char *)v23 + 153) = v24;
    sub_10016B084();
    v26 = *(_DWORD *)((char *)v25 + 225);
    v114 = v25[57];
    *(_DWORD *)((char *)v25 + 169) = v26;
    sub_10016B064();
    v28 = *(_DWORD *)((char *)v27 + 217);
    v115 = v27[55];
    *(_DWORD *)((char *)v27 + 185) = v28;
    v116 = v78;
    v117 = 0;
    sub_10016AD48();
  }
  else
  {
    v77 = sub_10016A5F0();
    v29 = sub_10016A5F0();
    v30 = sub_10016ADE4();
    v76 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v30, v31);
    v33 = v32;
    HIDAccelerationTable.entry.getter(v76, v32);
    v34 = sub_10016ADE4();
    v36 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v34, v35);
    v38 = v37;
    v85 = v36;
    v132 = v37 & 1;
    v39 = sub_10016ADE4();
    v75 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v39, v40);
    v130 = v41 & 1;
    v74 = sub_10016A958(5);
    v128 = v42 & 1;
    v43 = sub_10016A958(6);
    v73 = v44;
    v83 = v43;
    v126 = v44 & 1;
    v72 = sub_10016A5F0();
    v71 = sub_10016A5F0();
    v93 = sub_10016A940(9);
    LOBYTE(v96) = 10;
    v92 = sub_10016A59C((uint64_t)&v96);
    v70 = v45;
    v125 = v45 & 1;
    v91 = sub_10016A940(11);
    sub_1000055B0((uint64_t *)&unk_1002AC160);
    sub_100169DB8((uint64_t)&qword_1002AD110);
    sub_10016AD00();
    sub_10016AFA4();
    v46 = v96;
    LOBYTE(v96) = 13;
    v90 = v46;
    swift_bridgeObjectRetain();
    v88 = sub_10016A59C((uint64_t)&v96);
    v69 = v47;
    v123 = v47 & 1;
    LOBYTE(v96) = 14;
    v87 = sub_10016A59C((uint64_t)&v96);
    v68 = v48;
    v122 = v48 & 1;
    v82 = sub_10016A554(15);
    v67 = v49;
    v121 = v49 & 1;
    v81 = sub_10016A554(16);
    v66 = v50;
    v120 = v50 & 1;
    v80 = sub_10016A554(17);
    v65 = v51;
    v119 = v51 & 1;
    v94[0] = 18;
    sub_10016AD00();
    sub_10016AFA4();
    v95 = 19;
    v79 = v96;
    swift_bridgeObjectRetain();
    v64 = sub_10016A59C((uint64_t)&v95);
    v53 = v52;
    sub_10016A348();
    v94[32] = v38 & 1;
    v94[48] = v33 & 1;
    v94[64] = v33 & 1;
    v94[80] = v73 & 1;
    v94[96] = v70 & 1;
    v94[120] = v69 & 1;
    v94[136] = v68 & 1;
    v94[152] = v67 & 1;
    v94[168] = v66 & 1;
    v94[184] = v65 & 1;
    v118 = v53 & 1;
    v94[208] = v53 & 1;
    v94[0] = v77;
    v94[1] = v29;
    *(_QWORD *)&v94[8] = v76;
    *(_QWORD *)&v94[16] = v33;
    *(_QWORD *)&v94[24] = v85;
    *(_QWORD *)&v94[40] = v75;
    *(_QWORD *)&v94[56] = v74;
    *(_QWORD *)&v94[72] = v83;
    v94[81] = v72;
    v94[82] = v71;
    v94[83] = v93;
    *(_QWORD *)&v94[88] = v92;
    v94[97] = v91;
    *(_QWORD *)&v94[104] = v90;
    *(_QWORD *)&v94[112] = v88;
    *(_QWORD *)&v94[128] = v87;
    *(_QWORD *)&v94[144] = v82;
    *(_QWORD *)&v94[160] = v81;
    *(_QWORD *)&v94[176] = v80;
    *(_QWORD *)&v94[192] = v79;
    *(_QWORD *)&v94[200] = v64;
    sub_10016A088(v94);
    sub_10000E50C();
    sub_100075850();
    sub_10002D89C();
    sub_100005988(v86);
    LOBYTE(v96) = v77;
    BYTE1(v96) = v29;
    *(_DWORD *)((char *)&v96 + 2) = v133;
    HIWORD(v96) = v134;
    v97 = v76;
    v98 = v33;
    v99 = v85;
    v100 = v132;
    *(_DWORD *)v101 = *(_DWORD *)v131;
    *(_DWORD *)&v101[3] = *(_DWORD *)&v131[3];
    v102 = v75;
    v103 = v130;
    *(_DWORD *)&v104[3] = *(_DWORD *)&v129[3];
    *(_DWORD *)v104 = *(_DWORD *)v129;
    v105 = v74;
    v106 = v128;
    v107 = *(_DWORD *)v127;
    sub_10016AD90(*(int *)&v127[3]);
    v108 = v72;
    v109 = v71;
    sub_10016A66C();
    *(_DWORD *)(v55 + 98) = *v54;
    v110 = v90;
    sub_10016B0C0();
    v111 = v56[63];
    *(_DWORD *)((char *)v56 + 121) = *(_DWORD *)((char *)v56 + 249);
    sub_10016B038();
    v112 = v57[61];
    *(_DWORD *)((char *)v57 + 137) = *(_DWORD *)((char *)v57 + 241);
    sub_10016AFE8();
    v59 = *(_DWORD *)((char *)v58 + 233);
    v113 = v58[59];
    *(_DWORD *)((char *)v58 + 153) = v59;
    sub_10016B084();
    v61 = *(_DWORD *)((char *)v60 + 225);
    v114 = v60[57];
    *(_DWORD *)((char *)v60 + 169) = v61;
    sub_10016B064();
    v63 = *(_DWORD *)((char *)v62 + 217);
    v115 = v62[55];
    *(_DWORD *)((char *)v62 + 185) = v63;
    v116 = v79;
    v117 = v64;
    sub_10016AD48();
    memcpy(v15, v94, 0xD1uLL);
  }
  sub_10003AF60();
}

uint64_t sub_10015FB78()
{
  unsigned __int8 *v0;

  return sub_10015EDAC(*v0);
}

uint64_t sub_10015FB80@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10015E5D8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10015FBA4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = static HIDEventType.gyro.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10015FBC8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100168284();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10015FBF0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100168284();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10015FC18(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t __src[27];

  sub_10015F24C(a1, a2, a3, a4, a5, a6, a7, a8, v11, __src[0]);
  if (!v9)
    memcpy(a9, __src, 0xD1uLL);
}

void sub_10015FC60()
{
  const void *v0;
  _BYTE __dst[209];

  memcpy(__dst, v0, sizeof(__dst));
  sub_10015EF78();
}

uint64_t type metadata accessor for UniversalControlPreferencesDiagnostics()
{
  return objc_opt_self(_TtC13EnsembleAgent38UniversalControlPreferencesDiagnostics);
}

uint64_t sub_10015FCD0(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;

  if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    v5 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(1635017060, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v5 = v4 ^ 1;
  }
  return v5 & 1;
}

uint64_t sub_10015FD44()
{
  return 1635017060;
}

void sub_10015FD54()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_10003AFC4();
  v3 = v2;
  v4 = sub_1000055B0(&qword_1002B3440);
  sub_10003B160();
  __chkstk_darwin(v5);
  sub_100065E48();
  sub_10000DBE4(v3, v3[3]);
  v6 = sub_1001682C0();
  sub_10016AC40((uint64_t)&type metadata for UniversalControlConfigurationDiagnostics.DiagnosticState.CodingKeys, v7, v6);
  v8 = sub_10016A9BC();
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v8, v9, v10, v4);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0, v4);
  sub_10003AF60();
}

void sub_10015FE00(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t);

  v3 = sub_1000055B0(&qword_1002B35B0);
  sub_1000C259C();
  __chkstk_darwin(v4);
  sub_10016A9A4(a1);
  v5 = sub_1001682C0();
  v6 = sub_10016AEE4((uint64_t)&type metadata for UniversalControlConfigurationDiagnostics.DiagnosticState.CodingKeys, (uint64_t)&type metadata for UniversalControlConfigurationDiagnostics.DiagnosticState.CodingKeys, v5);
  if (!v1)
  {
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v6, v3);
    sub_10016AE14();
    v7 = sub_10016AFC4();
    v8(v7);
  }
  sub_10003B008();
  sub_1000C260C();
}

uint64_t sub_10015FED8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10015FCD0(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_10015FF00(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001682C0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10015FF28(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001682C0();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10015FF50(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  sub_10015FE00(a1);
  if (!v2)
  {
    *a2 = v4;
    a2[1] = v5;
  }
}

void sub_10015FF78()
{
  sub_10015FD54();
}

uint64_t type metadata accessor for UniversalControlConfigurationDiagnostics()
{
  return objc_opt_self(_TtC13EnsembleAgent40UniversalControlConfigurationDiagnostics);
}

uint64_t sub_10015FFB0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v8;

  if (a1 == 0x6C61636F6CLL && a2 == 0xE500000000000000)
  {
    v5 = 0xE500000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C61636F6CLL, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x65746F6D6572 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    return 1;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65746F6D6572, 0xE600000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_10016008C(char a1)
{
  if ((a1 & 1) != 0)
    return 0x65746F6D6572;
  else
    return 0x6C61636F6CLL;
}

void sub_1001600BC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  sub_10003AFC4();
  v3 = v2;
  sub_1000055B0(&qword_1002B3450);
  sub_10003B160();
  __chkstk_darwin(v4);
  sub_1000268CC();
  sub_10000DBE4(v3, v3[3]);
  v5 = sub_1001682FC();
  sub_10016AC40((uint64_t)&type metadata for InputDevicesDiagnostics.DiagnosticState.CodingKeys, v6, v5);
  sub_1000055B0(&qword_1002B3460);
  sub_100168338((uint64_t)&unk_1002B3468);
  sub_10016A6FC(v7);
  if (!v0)
  {
    sub_1000055B0(&qword_1002B3478);
    v8 = sub_100168388();
    sub_10016A6FC(v8);
  }
  sub_10003B040(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_10003AF60();
}

void sub_1001601BC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_1000055B0(&qword_1002B35B8);
  sub_1000C259C();
  __chkstk_darwin(v4);
  sub_10016A9A4(a1);
  v5 = sub_1001682FC();
  sub_10016AEE4((uint64_t)&type metadata for InputDevicesDiagnostics.DiagnosticState.CodingKeys, (uint64_t)&type metadata for InputDevicesDiagnostics.DiagnosticState.CodingKeys, v5);
  if (v1)
  {
    sub_10003B008();
  }
  else
  {
    sub_1000055B0(&qword_1002B3460);
    sub_100168338((uint64_t)&unk_1002B35C0);
    v6 = sub_10016AC0C();
    sub_10003B1D0(v6, v7, v8, v9);
    sub_1000055B0(&qword_1002B3478);
    v10 = sub_10016A104();
    swift_bridgeObjectRetain();
    v11 = sub_10016AC0C();
    sub_10003B1D0(v11, v12, v13, v14);
    sub_1000A342C(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
    if (v10)
    {
      sub_10000E4A0();
      sub_10003B008();
    }
    else
    {
      sub_10003AFBC();
      sub_10003B008();
      sub_10000E420();
    }
    sub_10000E4A0();
  }
  sub_1000C260C();
}

uint64_t sub_100160328()
{
  char *v0;

  return sub_10016008C(*v0);
}

uint64_t sub_100160330@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10015FFB0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100160354(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001682FC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10016037C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001682FC();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1001603A4(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  sub_1001601BC(a1);
  if (!v2)
  {
    *a2 = v4;
    a2[1] = v5;
  }
}

void sub_1001603CC()
{
  sub_1001600BC();
}

uint64_t sub_1001603E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_weakDestroy(v0 + 16);
  v1 = sub_100026988();
  return swift_deallocClassInstance(v1, v2, v3);
}

uint64_t type metadata accessor for InputDevicesDiagnostics()
{
  return objc_opt_self(_TtC13EnsembleAgent23InputDevicesDiagnostics);
}

void sub_10016042C()
{
  sub_10016A0D0((uint64_t)&unk_1002B3280);
}

uint64_t sub_10016045C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for UniversalControlLink(0);
  sub_10016A0D0((uint64_t)&unk_1002ACCA0);
  return dispatch thunk of static Equatable.== infix(_:_:)(a1, a2, v4, v5) & 1;
}

void sub_1001604D0(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_10006CBE0((uint64_t)v2);
  v3 = *((_QWORD *)v2 + 2);
  v4[0] = (uint64_t)(v2 + 32);
  v4[1] = v3;
  sub_1001606B0(v4);
  *a1 = v2;
}

void sub_100160538(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6[2];

  v2 = *(_QWORD *)(sub_1000055B0((uint64_t *)&unk_1002AC0F0) - 8);
  v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
  {
    sub_10006CBF4();
    v3 = v4;
  }
  v5 = *(_QWORD *)(v3 + 16);
  v6[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v5;
  sub_100160E2C(v6);
  *a1 = v3;
}

void sub_1001605BC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  sub_1000B9A80();
  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
  {
    sub_10006CC24();
    v2 = v3;
  }
  sub_100162AB0();
  *a1 = v2;
}

uint64_t sub_100160638(uint64_t *a1)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v2 = sub_10006CC54(v2);
    *a1 = v2;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v7[0] = v2 + 32;
  v7[1] = v4;
  sub_100163568(v7);
  return specialized ContiguousArray._endMutation()(v5);
}

void sub_1001606B0(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  Swift::Int v5;
  uint64_t v6;
  char *v7;
  Swift::Int v8;
  uint64_t v9;
  int8x16_t v10;
  Swift::Int v11;
  int v12;
  uint64_t v13;
  Swift::Int v14;
  Swift::Int v15;
  Swift::Int v16;
  Swift::Int v17;
  _OWORD *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  Swift::Int v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  Swift::Int *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  char v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  _DWORD *v78;
  uint16x8_t v79;
  uint16x8_t v80;
  uint16x8_t v81;
  Swift::Int v82;
  _OWORD *v83;
  _OWORD *v84;
  _OWORD *v85;
  uint32x4_t v86;
  uint64x2_t v87;
  uint64x2_t v88;
  int8x16_t v89;
  unint64_t v90;
  uint32x4_t v91;
  uint64x2_t v92;
  int8x16_t v93;
  unint64_t v94;
  uint32x4_t v95;
  uint64x2_t v96;
  int8x16_t v97;
  unint64_t v98;
  uint32x4_t v99;
  uint64x2_t v100;
  int8x16_t v101;
  int8x16_t v102;
  __int128 v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  unint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  unint64_t v112;
  _QWORD *v113;
  uint64_t *v114;
  Swift::Int v115;
  uint64_t v116;
  uint64_t v117;
  Swift::Int v118;
  char *v119;
  _QWORD *v120;

  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        sub_100163B74(0, v3, 1, a1);
      return;
    }
    goto LABEL_126;
  }
  v5 = v4;
  sub_1000222B4(v3 / 2);
  v116 = v6;
  v117 = v3;
  v119 = v7;
  v114 = a1;
  if (v3 <= 0)
  {
    v120 = _swiftEmptyArrayStorage;
    v29 = _swiftEmptyArrayStorage[2];
LABEL_92:
    if (v29 < 2)
    {
LABEL_103:
      swift_bridgeObjectRelease();
      if (v3 >= -1)
      {
        *(_QWORD *)(v116 + 16) = 0;
        swift_bridgeObjectRelease();
        return;
      }
      goto LABEL_131;
    }
    v106 = *v114;
    while (1)
    {
      v107 = v29 - 2;
      if (v29 < 2)
        break;
      if (!v106)
        goto LABEL_135;
      v108 = v120;
      v109 = v120[2 * v107 + 4];
      v110 = v120[2 * v29 + 3];
      sub_100164AF8((char *)(v106 + (v109 << 6)), (char *)(v106 + (v120[2 * v29 + 2] << 6)), v106 + (v110 << 6), v119);
      if (v1)
        goto LABEL_88;
      if (v110 < v109)
        goto LABEL_121;
      if ((swift_isUniquelyReferenced_nonNull_native(v120) & 1) == 0)
      {
        sub_10006CA50();
        v108 = v113;
      }
      if (v107 >= v108[2])
        goto LABEL_122;
      v111 = &v108[2 * v107 + 4];
      *v111 = v109;
      v111[1] = v110;
      v112 = v108[2];
      if (v29 > v112)
        goto LABEL_123;
      memmove(&v108[2 * v29 + 2], &v108[2 * v29 + 4], 16 * (v112 - v29));
      v120 = v108;
      v108[2] = v112 - 1;
      v29 = v112 - 1;
      v3 = v117;
      if (v112 <= 2)
        goto LABEL_103;
    }
LABEL_120:
    __break(1u);
LABEL_121:
    __break(1u);
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
LABEL_133:
    __break(1u);
LABEL_134:
    __break(1u);
LABEL_135:
    __break(1u);
    return;
  }
  v115 = v5;
  v8 = 0;
  v9 = *a1;
  v120 = _swiftEmptyArrayStorage;
  v10.i32[1] = 0;
  while (1)
  {
    v11 = v8++;
    if (v8 < v3)
    {
      v12 = static UniversalControlDisplayID.< infix(_:_:)(*(_QWORD *)(v9 + (v8 << 6)), *(_QWORD *)(v9 + (v8 << 6) + 8), *(_QWORD *)(v9 + (v8 << 6) + 16), *(_QWORD *)(v9 + (v8 << 6) + 24), *(_QWORD *)(v9 + (v11 << 6)), *(_QWORD *)(v9 + (v11 << 6) + 8), *(_QWORD *)(v9 + (v11 << 6) + 16), *(_QWORD *)(v9 + (v11 << 6) + 24));
      v8 = v11 + 2;
      if (v11 + 2 < v3)
      {
        v13 = v9 + 79 + (v11 << 6);
        while (((v12 ^ static UniversalControlDisplayID.< infix(_:_:)(*(_QWORD *)(v13 + 49), *(_QWORD *)(v13 + 57), *(_QWORD *)(v13 + 65), *(_QWORD *)(v13 + 73), *(_QWORD *)(v13 - 15), *(_QWORD *)(v13 - 7), *(_QWORD *)(v13 + 1), *(_QWORD *)(v13 + 9))) & 1) == 0)
        {
          v13 += 64;
          if (++v8 >= v3)
          {
            v8 = v3;
            break;
          }
        }
      }
      if ((v12 & 1) != 0)
      {
        if (v8 < v11)
          goto LABEL_128;
        if (v11 < v8)
        {
          v14 = v8 << 6;
          v15 = v11 << 6;
          v16 = v8;
          v17 = v11;
          do
          {
            if (v17 != --v16)
            {
              if (!v9)
                goto LABEL_134;
              v18 = (_OWORD *)(v9 + v15);
              v19 = v9 + v14;
              v10 = *(int8x16_t *)(v9 + v15 + 32);
              v20 = *(_OWORD *)(v9 + v15 + 48);
              v21 = *(_OWORD *)(v9 + v15);
              v22 = *(_OWORD *)(v9 + v15 + 16);
              v23 = *(_OWORD *)(v9 + v14 - 16);
              v25 = *(_OWORD *)(v9 + v14 - 64);
              v24 = *(_OWORD *)(v9 + v14 - 48);
              v18[2] = *(_OWORD *)(v9 + v14 - 32);
              v18[3] = v23;
              *v18 = v25;
              v18[1] = v24;
              *(_OWORD *)(v19 - 64) = v21;
              *(_OWORD *)(v19 - 48) = v22;
              *(int8x16_t *)(v19 - 32) = v10;
              *(_OWORD *)(v19 - 16) = v20;
            }
            ++v17;
            v14 -= 64;
            v15 += 64;
          }
          while (v17 < v16);
        }
      }
    }
    if (v8 >= v3)
      goto LABEL_27;
    if (__OFSUB__(v8, v11))
      goto LABEL_125;
    if (v8 - v11 >= v115)
      goto LABEL_27;
    if (__OFADD__(v11, v115))
      goto LABEL_129;
    if (v11 + v115 >= v3)
      v26 = v3;
    else
      v26 = v11 + v115;
    if (v26 < v11)
      goto LABEL_130;
    if (v8 == v26)
    {
LABEL_27:
      v27 = v120;
    }
    else
    {
      v77 = v9 + 48 + (v8 << 6);
      v27 = v120;
      v118 = v11;
      do
      {
        v78 = (_DWORD *)(v9 + (v8 << 6));
        v10.i32[0] = v78[1];
        v79 = vmovl_u8(*(uint8x8_t *)v10.i8);
        v10.i32[0] = v78[3];
        v80 = vmovl_u8(*(uint8x8_t *)v10.i8);
        v10.i32[0] = v78[5];
        v81 = vmovl_u8(*(uint8x8_t *)v10.i8);
        v10.i32[0] = v78[7];
        v10 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v10.i8);
        v82 = v11;
        v83 = (_OWORD *)v77;
        do
        {
          v84 = v83 - 3;
          v85 = v83 - 7;
          v86 = vmovl_u16((uint16x4_t)(v79.i64[0] & 0xFF00FF00FF00FFLL));
          v87.i64[0] = v86.u32[0];
          v87.i64[1] = v86.u32[1];
          v88 = v87;
          v87.i64[0] = v86.u32[2];
          v87.i64[1] = v86.u32[3];
          v89 = vorrq_s8((int8x16_t)vshlq_u64(v88, (uint64x2_t)xmmword_10021DA20), (int8x16_t)vshlq_u64(v87, (uint64x2_t)xmmword_10021DA10));
          v90 = *(unint64_t *)&vorr_s8(*(int8x8_t *)v89.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v89, v89, 8uLL)) | *((unsigned int *)v83 - 12);
          v91 = vmovl_u16((uint16x4_t)(v80.i64[0] & 0xFF00FF00FF00FFLL));
          v87.i64[0] = v91.u32[0];
          v87.i64[1] = v91.u32[1];
          v92 = v87;
          v87.i64[0] = v91.u32[2];
          v87.i64[1] = v91.u32[3];
          v93 = vorrq_s8((int8x16_t)vshlq_u64(v92, (uint64x2_t)xmmword_10021DA20), (int8x16_t)vshlq_u64(v87, (uint64x2_t)xmmword_10021DA10));
          v94 = *(unint64_t *)&vorr_s8(*(int8x8_t *)v93.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v93, v93, 8uLL)) | *((unsigned int *)v83 - 10);
          v95 = vmovl_u16((uint16x4_t)(v81.i64[0] & 0xFF00FF00FF00FFLL));
          v87.i64[0] = v95.u32[0];
          v87.i64[1] = v95.u32[1];
          v96 = v87;
          v87.i64[0] = v95.u32[2];
          v87.i64[1] = v95.u32[3];
          v97 = vorrq_s8((int8x16_t)vshlq_u64(v96, (uint64x2_t)xmmword_10021DA20), (int8x16_t)vshlq_u64(v87, (uint64x2_t)xmmword_10021DA10));
          v98 = *(unint64_t *)&vorr_s8(*(int8x8_t *)v97.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v97, v97, 8uLL)) | *((unsigned int *)v83 - 8);
          v99 = vmovl_u16((uint16x4_t)(v10.i64[0] & 0xFF00FF00FF00FFLL));
          v87.i64[0] = v99.u32[0];
          v87.i64[1] = v99.u32[1];
          v100 = v87;
          v87.i64[0] = v99.u32[2];
          v87.i64[1] = v99.u32[3];
          v101 = vorrq_s8((int8x16_t)vshlq_u64(v100, (uint64x2_t)xmmword_10021DA20), (int8x16_t)vshlq_u64(v87, (uint64x2_t)xmmword_10021DA10));
          if ((static UniversalControlDisplayID.< infix(_:_:)(v90, v94, v98, *(unint64_t *)&vorr_s8(*(int8x8_t *)v101.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v101, v101, 8uLL)) | *((unsigned int *)v83 - 6), *((_QWORD *)v83 - 14), *((_QWORD *)v83 - 13), *((_QWORD *)v83 - 12), *((_QWORD *)v83 - 11)) & 1) == 0)break;
          if (!v9)
            goto LABEL_132;
          v80 = *((uint16x8_t *)v83 - 5);
          v81 = *((uint16x8_t *)v83 - 4);
          *(v83 - 4) = *v83;
          v83 -= 4;
          v10 = *((int8x16_t *)v83 + 1);
          v102 = *((int8x16_t *)v83 + 2);
          v103 = v85[1];
          *v84 = *v85;
          v84[1] = v103;
          v79 = *((uint16x8_t *)v83 + 3);
          v84[2] = v80;
          v84[3] = v81;
          *(v83 - 3) = v10;
          *(v83 - 2) = v102;
          *(v83 - 1) = v79;
          *(int8x8_t *)v79.i8 = vzip2_s8(*(int8x8_t *)v10.i8, *(int8x8_t *)v10.i8);
          v10.i64[0] = vextq_s8(v10, v10, 8uLL).u64[0];
          *(int8x8_t *)v80.i8 = vzip2_s8(*(int8x8_t *)v10.i8, *(int8x8_t *)v10.i8);
          *(int8x8_t *)v81.i8 = vzip2_s8(*(int8x8_t *)v102.i8, *(int8x8_t *)v10.i8);
          v10.i64[0] = vextq_s8(v102, v102, 8uLL).u64[0];
          *(int8x8_t *)v10.i8 = vzip2_s8(*(int8x8_t *)v10.i8, *(int8x8_t *)v10.i8);
          ++v82;
        }
        while (v8 != v82);
        ++v8;
        v77 += 64;
        v11 = v118;
      }
      while (v8 != v26);
      v8 = v26;
    }
    if (v8 < v11)
      goto LABEL_124;
    if ((swift_isUniquelyReferenced_nonNull_native(v27) & 1) == 0)
    {
      sub_10006C984();
      v27 = v104;
    }
    v28 = v27[2];
    v29 = v28 + 1;
    if (v28 >= v27[3] >> 1)
    {
      sub_10006C984();
      v27 = v105;
    }
    v27[2] = v29;
    v30 = v27 + 4;
    v31 = &v27[2 * v28 + 4];
    *v31 = v11;
    v31[1] = v8;
    v120 = v27;
    if (v28)
      break;
    v29 = 1;
LABEL_76:
    v3 = v117;
    if (v8 >= v117)
      goto LABEL_92;
  }
  while (1)
  {
    v32 = v29 - 1;
    if (v29 >= 4)
    {
      v37 = &v30[2 * v29];
      v38 = *(v37 - 8);
      v39 = *(v37 - 7);
      v43 = __OFSUB__(v39, v38);
      v40 = v39 - v38;
      if (v43)
        goto LABEL_109;
      v42 = *(v37 - 6);
      v41 = *(v37 - 5);
      v43 = __OFSUB__(v41, v42);
      v35 = v41 - v42;
      v36 = v43;
      if (v43)
        goto LABEL_110;
      v44 = v29 - 2;
      v45 = &v30[2 * v29 - 4];
      v47 = *v45;
      v46 = v45[1];
      v43 = __OFSUB__(v46, v47);
      v48 = v46 - v47;
      if (v43)
        goto LABEL_111;
      v43 = __OFADD__(v35, v48);
      v49 = v35 + v48;
      if (v43)
        goto LABEL_113;
      if (v49 >= v40)
      {
        v67 = &v30[2 * v32];
        v69 = *v67;
        v68 = v67[1];
        v43 = __OFSUB__(v68, v69);
        v70 = v68 - v69;
        if (v43)
          goto LABEL_119;
        v60 = v35 < v70;
        goto LABEL_65;
      }
    }
    else
    {
      if (v29 != 3)
      {
        v61 = v27[4];
        v62 = v27[5];
        v43 = __OFSUB__(v62, v61);
        v54 = v62 - v61;
        v55 = v43;
        goto LABEL_59;
      }
      v34 = v27[4];
      v33 = v27[5];
      v43 = __OFSUB__(v33, v34);
      v35 = v33 - v34;
      v36 = v43;
    }
    if ((v36 & 1) != 0)
      goto LABEL_112;
    v44 = v29 - 2;
    v50 = &v30[2 * v29 - 4];
    v52 = *v50;
    v51 = v50[1];
    v53 = __OFSUB__(v51, v52);
    v54 = v51 - v52;
    v55 = v53;
    if (v53)
      goto LABEL_114;
    v56 = &v30[2 * v32];
    v58 = *v56;
    v57 = v56[1];
    v43 = __OFSUB__(v57, v58);
    v59 = v57 - v58;
    if (v43)
      goto LABEL_116;
    if (__OFADD__(v54, v59))
      goto LABEL_118;
    if (v54 + v59 >= v35)
    {
      v60 = v35 < v59;
LABEL_65:
      if (v60)
        v32 = v44;
      goto LABEL_67;
    }
LABEL_59:
    if ((v55 & 1) != 0)
      goto LABEL_115;
    v63 = &v30[2 * v32];
    v65 = *v63;
    v64 = v63[1];
    v43 = __OFSUB__(v64, v65);
    v66 = v64 - v65;
    if (v43)
      goto LABEL_117;
    if (v66 < v54)
      goto LABEL_76;
LABEL_67:
    v71 = v32 - 1;
    if (v32 - 1 >= v29)
    {
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
      goto LABEL_120;
    }
    if (!v9)
      goto LABEL_133;
    v72 = &v30[2 * v71];
    v73 = *v72;
    v74 = &v30[2 * v32];
    v75 = v74[1];
    sub_100164AF8((char *)(v9 + (*v72 << 6)), (char *)(v9 + (*v74 << 6)), v9 + (v75 << 6), v119);
    if (v1)
      break;
    if (v75 < v73)
      goto LABEL_106;
    if (v32 > v120[2])
      goto LABEL_107;
    *v72 = v73;
    v30[2 * v71 + 1] = v75;
    v76 = v120[2];
    if (v32 >= v76)
      goto LABEL_108;
    v27 = v120;
    v29 = v76 - 1;
    memmove(&v30[2 * v32], v74 + 2, 16 * (v76 - 1 - v32));
    v120[2] = v76 - 1;
    if (v76 <= 2)
      goto LABEL_76;
  }
LABEL_88:
  swift_bridgeObjectRelease();
  if (v117 < -1)
    goto LABEL_127;
  *(_QWORD *)(v116 + 16) = 0;
  swift_bridgeObjectRelease();
}

void sub_100160E2C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  Swift::Int v46;
  Swift::Int v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  void (*v52)(void);
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  unsigned __int8 *v62;
  uint64_t v63;
  unsigned __int8 *v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  _BYTE *v68;
  unsigned __int8 *v69;
  unsigned __int8 v70;
  unsigned __int8 v71;
  unsigned __int8 v72;
  unsigned __int8 v73;
  unsigned __int8 v74;
  uint64_t v75;
  unsigned __int8 v76;
  unsigned __int8 v77;
  unsigned __int8 v78;
  uint64_t v79;
  unsigned __int8 v80;
  uint64_t v81;
  unsigned __int8 v82;
  uint64_t v83;
  unsigned __int8 v84;
  uint64_t v85;
  void (*v86)(_BYTE *, unsigned __int8 *);
  uint64_t v87;
  _BYTE *v88;
  uint64_t v89;
  unsigned __int8 v90;
  uint64_t v91;
  uint64_t v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  uint64_t v95;
  unsigned __int8 v96;
  uint64_t v97;
  unsigned __int8 v98;
  uint64_t v99;
  unsigned __int8 v100;
  uint64_t v101;
  unsigned __int8 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t (*v105)(_BYTE *, unint64_t, uint64_t);
  _BYTE *v106;
  _BYTE *v107;
  uint64_t v108;
  void (*v109)(_BYTE *, uint64_t);
  uint64_t v110;
  _BYTE *v111;
  _BYTE *v112;
  char v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _BYTE *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  char *v125;
  int v126;
  _BYTE *v127;
  void (*v128)(_BYTE *, uint64_t, uint64_t);
  uint64_t v129;
  _BYTE *v130;
  _BYTE *v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _BOOL4 v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  Swift::Int v149;
  void (*v150)(void);
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  _BYTE *v159;
  unsigned __int8 v160;
  uint64_t v161;
  unsigned __int8 v162;
  uint64_t v163;
  unsigned __int8 v164;
  uint64_t v165;
  unsigned __int8 v166;
  uint64_t v167;
  unsigned __int8 v168;
  uint64_t v169;
  unsigned __int8 v170;
  uint64_t v171;
  unsigned __int8 v172;
  uint64_t v173;
  unsigned __int8 v174;
  uint64_t v175;
  void (*v176)(void);
  char *v177;
  uint64_t v178;
  void (*v179)(void);
  uint64_t v180;
  uint64_t v181;
  unsigned __int8 v182;
  unint64_t v183;
  uint64_t v184;
  unsigned __int8 v185;
  unsigned __int8 v186;
  unsigned __int8 v187;
  uint64_t v188;
  unsigned __int8 v189;
  uint64_t v190;
  unsigned __int8 v191;
  unsigned __int8 v192;
  unsigned __int8 v193;
  unsigned __int8 v194;
  unsigned __int8 v195;
  uint64_t v196;
  void (*v197)(void);
  _BYTE *v198;
  _BYTE *v199;
  uint64_t v200;
  _BYTE *v201;
  _BYTE *v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  _BYTE *v207;
  _BYTE *v208;
  unint64_t v209;
  void (*v210)(void);
  uint64_t v211;
  uint64_t v212;
  _BYTE *v213;
  _BYTE *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v226;
  unint64_t v227;
  _QWORD *v228;
  uint64_t *v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  char v235;
  _QWORD *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  BOOL v242;
  unint64_t v243;
  uint64_t *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t *v249;
  uint64_t v250;
  uint64_t v251;
  BOOL v252;
  uint64_t v253;
  char v254;
  uint64_t *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  BOOL v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  uint64_t v271;
  _QWORD *v272;
  uint64_t *v273;
  uint64_t v274;
  _QWORD *v275;
  unint64_t v276;
  _QWORD *v277;
  uint64_t v278;
  uint64_t v279;
  unint64_t v280;
  _QWORD *v281;
  _QWORD *v282;
  uint64_t v283;
  unint64_t v284;
  _QWORD *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  _QWORD *v289;
  unint64_t v290;
  _QWORD *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  Swift::Int v295;
  unsigned __int8 *v296;
  unsigned __int8 *v297;
  void (*v298)(void);
  _QWORD *v299;
  uint64_t v300;
  _BYTE *v301;
  _BYTE *v302;
  uint64_t v303;
  char *v304;
  unsigned __int8 *v305;
  unsigned __int8 *v306;
  _BYTE *v307;
  _BYTE *v308;
  _BYTE *v309;
  _BYTE *v310;
  unint64_t v311;
  uint64_t v312;
  uint64_t v313;
  _BYTE *v314;
  _BYTE *v315;
  _BYTE *v316;
  uint64_t v317;
  char *v318;
  _BYTE *v319;
  _BYTE *v320;
  uint64_t *v321;
  uint64_t v322;
  _BYTE *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  void (*v329)(void);
  char *v330;
  uint64_t v331;
  unint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  unint64_t v341;
  uint64_t v342;
  uint64_t v343;
  char *v344;
  char *v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;

  v343 = sub_1000055B0((uint64_t *)&unk_1002AC0F0);
  v312 = *(_QWORD *)(v343 - 8);
  v3 = __chkstk_darwin(v343);
  v300 = (uint64_t)&v292 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v324 = (uint64_t)&v292 - v6;
  v7 = __chkstk_darwin(v5);
  v316 = (char *)&v292 - v8;
  v9 = __chkstk_darwin(v7);
  v323 = (char *)&v292 - v10;
  v11 = __chkstk_darwin(v9);
  v315 = (char *)&v292 - v12;
  v13 = __chkstk_darwin(v11);
  v314 = (char *)&v292 - v14;
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v292 - v16;
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v292 - v19;
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v292 - v22;
  v24 = __chkstk_darwin(v21);
  v26 = (char *)&v292 - v25;
  v27 = __chkstk_darwin(v24);
  v310 = (char *)&v292 - v28;
  v29 = __chkstk_darwin(v27);
  v309 = (char *)&v292 - v30;
  v31 = __chkstk_darwin(v29);
  v302 = (char *)&v292 - v32;
  v33 = __chkstk_darwin(v31);
  v301 = (char *)&v292 - v34;
  v35 = __chkstk_darwin(v33);
  v308 = (char *)&v292 - v36;
  v37 = __chkstk_darwin(v35);
  v307 = (char *)&v292 - v38;
  v39 = __chkstk_darwin(v37);
  v306 = (unsigned __int8 *)&v292 - v40;
  v41 = __chkstk_darwin(v39);
  v305 = (unsigned __int8 *)&v292 - v42;
  v43 = __chkstk_darwin(v41);
  v297 = (unsigned __int8 *)&v292 - v44;
  __chkstk_darwin(v43);
  v296 = (unsigned __int8 *)&v292 - v45;
  v46 = a1[1];
  v47 = _minimumMergeRunLength(_:)(v46);
  if (v47 >= v46)
  {
    if (v46 < 0)
      goto LABEL_157;
    if (v46)
      sub_100163C4C(0, v46, 1, a1);
    return;
  }
  v295 = v47;
  v313 = v1;
  sub_1000222C0(v46 / 2);
  v293 = v48;
  v311 = v49;
  v294 = v46;
  if (v46 > 0)
  {
    v50 = 0;
    v51 = _swiftEmptyArrayStorage;
    v52 = (void (*)(void))v46;
    v318 = v20;
    v320 = v23;
    v319 = v26;
    v321 = a1;
    v304 = v17;
    while (1)
    {
      v299 = v51;
      v303 = v50;
      if (v50 + 1 >= (uint64_t)v52)
      {
        v60 = v50 + 1;
      }
      else
      {
        v329 = v52;
        v53 = *a1;
        v54 = *(_QWORD *)(v312 + 72);
        v369 = v50 + 1;
        v55 = v296;
        sub_1000FB4A8(v53 + v54 * (v50 + 1), (uint64_t)v296, (uint64_t *)&unk_1002AC0F0);
        v325 = v53;
        v335 = v54;
        v56 = v53 + v54 * v303;
        v57 = v303;
        v58 = v297;
        sub_1000FB4A8(v56, (uint64_t)v297, (uint64_t *)&unk_1002AC0F0);
        v59 = v313;
        LODWORD(v328) = sub_100157DEC(v55, v58);
        v313 = v59;
        if (v59)
        {
          sub_100025A28((uint64_t)v58, (uint64_t *)&unk_1002AC0F0);
          sub_100025A28((uint64_t)v55, (uint64_t *)&unk_1002AC0F0);
LABEL_118:
          swift_bridgeObjectRelease();
          if (v294 < -1)
            goto LABEL_159;
          *(_QWORD *)(v293 + 16) = 0;
          swift_bridgeObjectRelease();
          return;
        }
        sub_100025A28((uint64_t)v58, (uint64_t *)&unk_1002AC0F0);
        sub_100025A28((uint64_t)v55, (uint64_t *)&unk_1002AC0F0);
        v60 = v57 + 2;
        if (v57 + 2 >= (uint64_t)v329)
        {
          v50 = v57;
        }
        else
        {
          v327 = v335 * v369;
          v61 = (char *)v325;
          v326 = v335 * v60;
          while (1)
          {
            v322 = v60;
            v62 = v305;
            sub_1000FB4A8((uint64_t)&v61[v326], (uint64_t)v305, (uint64_t *)&unk_1002AC0F0);
            v330 = v61;
            v63 = (uint64_t)&v61[v327];
            v64 = v306;
            sub_1000FB4A8(v63, (uint64_t)v306, (uint64_t *)&unk_1002AC0F0);
            v65 = *(int *)(v343 + 48);
            v66 = v343;
            v67 = v307;
            v68 = &v307[v65];
            v69 = &v64[v65];
            v346 = *v64;
            v70 = v64[1];
            v354 = v70;
            v71 = v64[2];
            v345 = (char *)v71;
            v72 = v64[3];
            v342 = v72;
            v73 = v64[4];
            v344 = (char *)v73;
            v74 = v64[5];
            v369 = v74;
            v75 = v64[6];
            v76 = v64[7];
            v367 = v76;
            v368 = v75;
            v77 = v64[8];
            v366 = v77;
            v78 = v64[9];
            v347 = v78;
            v79 = v64[10];
            v80 = v64[11];
            v364 = v80;
            v365 = v79;
            v81 = v64[12];
            v82 = v64[13];
            v362 = v82;
            v363 = v81;
            v83 = v64[14];
            v84 = v64[15];
            v360 = v84;
            v361 = v83;
            *v307 = v346;
            v67[1] = v70;
            v67[2] = v71;
            v67[3] = v72;
            v67[4] = v73;
            v67[5] = v74;
            v67[6] = v75;
            v67[7] = v76;
            v67[8] = v77;
            v67[9] = v78;
            v67[10] = v79;
            v67[11] = v80;
            v67[12] = v81;
            v67[13] = v82;
            v67[14] = v83;
            v67[15] = v84;
            v85 = type metadata accessor for UniversalControlDisplayLayout(0);
            v334 = *(_QWORD *)(v85 - 8);
            v86 = *(void (**)(_BYTE *, unsigned __int8 *))(v334 + 16);
            v333 = (uint64_t)v68;
            v87 = v85;
            v86(v68, v69);
            v88 = v308;
            v341 = (unint64_t)&v308[*(int *)(v66 + 48)];
            v89 = *v62;
            v90 = v62[1];
            v358 = v90;
            v359 = v89;
            v91 = v62[2];
            v92 = v62[3];
            v93 = v62[4];
            v357 = v93;
            v94 = v62[5];
            v338 = v94;
            v95 = v62[6];
            v96 = v62[7];
            v336 = v96;
            v97 = v62[8];
            v98 = v62[9];
            v355 = v98;
            v356 = v97;
            v99 = v62[10];
            v100 = v62[11];
            v352 = v100;
            v353 = v99;
            v101 = v62[12];
            v102 = v62[13];
            v350 = v102;
            v351 = v101;
            v103 = v62[14];
            LOBYTE(v69) = v62[15];
            v348 = v69;
            v349 = v103;
            *v308 = v89;
            v88[1] = v90;
            v88[2] = v91;
            v340 = v91;
            v88[3] = v92;
            v339 = v92;
            v88[4] = v93;
            v88[5] = v94;
            v88[6] = v95;
            v337 = v95;
            v88[7] = v96;
            v88[8] = v97;
            v88[9] = v98;
            v88[10] = v99;
            v88[11] = v100;
            v88[12] = v101;
            v88[13] = v102;
            v88[14] = v103;
            v88[15] = (_BYTE)v69;
            v104 = v87;
            v105 = (uint64_t (*)(_BYTE *, unint64_t, uint64_t))v86;
            ((void (*)(void))v86)();
            v106 = v301;
            v107 = &v301[*(int *)(v66 + 48)];
            *v301 = v346;
            v106[1] = v354;
            v106[2] = (_BYTE)v345;
            v106[3] = v342;
            v106[4] = (_BYTE)v344;
            v106[5] = v369;
            v106[6] = v368;
            v106[7] = v367;
            v106[8] = v366;
            v106[9] = v347;
            v106[10] = v365;
            v106[11] = v364;
            v106[12] = v363;
            v106[13] = v362;
            v106[14] = v361;
            v106[15] = v360;
            v108 = ((uint64_t (*)(_BYTE *, _BYTE *, uint64_t))v86)(v107, v68, v104);
            v332 = (unint64_t)v86;
            v331 = UniversalControlDisplayLayout.version.getter(v108);
            v109 = *(void (**)(_BYTE *, uint64_t))(v334 + 8);
            v110 = v104;
            v109(v107, v104);
            v111 = v302;
            v112 = &v302[*(int *)(v66 + 48)];
            *v302 = v359;
            v111[1] = v358;
            v111[2] = v91;
            v111[3] = v92;
            v111[4] = v357;
            v113 = v338;
            v111[5] = v338;
            v111[6] = v95;
            v114 = v336;
            v111[7] = v336;
            v111[8] = v356;
            v111[9] = v355;
            v111[10] = v353;
            v111[11] = v352;
            v111[12] = v351;
            v111[13] = v350;
            v111[14] = v349;
            v111[15] = v348;
            v115 = v105(v112, v341, v104);
            v116 = UniversalControlDisplayLayout.version.getter(v115);
            v117 = v331;
            LODWORD(v92) = v116 >= v331;
            v118 = v112;
            v119 = v110;
            v109(v118, v110);
            v120 = v342;
            v121 = v344;
            v122 = v343;
            v123 = *(int *)(v343 + 48);
            v124 = 2 * v92;
            v125 = v345;
            v126 = v117 < v116 ? 1 : v124;
            v127 = v309;
            *v309 = v359;
            v127[1] = v358;
            v127[2] = v340;
            v127[3] = v339;
            v127[4] = v357;
            v127[5] = v113;
            v127[6] = v337;
            v127[7] = v114;
            v127[8] = v356;
            v127[9] = v355;
            v127[10] = v353;
            v127[11] = v352;
            v127[12] = v351;
            v127[13] = v350;
            v127[14] = v349;
            v127[15] = v348;
            v128 = (void (*)(_BYTE *, uint64_t, uint64_t))v332;
            ((void (*)(_BYTE *, unint64_t, uint64_t))v332)(&v127[v123], v341, v119);
            v129 = v346;
            v130 = v310;
            v131 = &v310[*(int *)(v122 + 48)];
            *v310 = v346;
            v130[1] = v354;
            v130[2] = (_BYTE)v125;
            v132 = v120;
            v130[3] = v120;
            v133 = v121;
            v130[4] = (_BYTE)v121;
            v130[5] = v369;
            v130[6] = v368;
            v130[7] = v367;
            v130[8] = v366;
            v134 = v347;
            v130[9] = v347;
            v130[10] = v365;
            v130[11] = v364;
            v130[12] = v363;
            v130[13] = v362;
            v130[14] = v361;
            v130[15] = v360;
            v128(v131, v333, v119);
            if (v126 == 2)
            {
              v135 = v359 | (v358 << 8) | (v340 << 16) | (v339 << 24) | (v357 << 32) | (v338 << 40) | (v337 << 48) | (v336 << 56);
              v136 = v356 | (v355 << 8) | (v353 << 16) | (v352 << 24) | (v351 << 32) | (v350 << 40) | (v349 << 48) | (v348 << 56);
              v137 = v129 | (v354 << 8) | ((_QWORD)v125 << 16) | (v132 << 24) | ((_QWORD)v133 << 32) | (v369 << 40) | (v368 << 48) | (v367 << 56);
              v138 = v366 | (v134 << 8) | (v365 << 16) | (v364 << 24) | (v363 << 32) | (v362 << 40) | (v361 << 48) | (v360 << 56);
              if ((static UniversalControlDeviceID.< infix(_:_:)(v135, v136, v137, v138) & 1) != 0)
              {
                v139 = 1;
              }
              else
              {
                static UniversalControlDeviceID.< infix(_:_:)(v137, v138, v135, v136);
                v139 = 0;
              }
            }
            else
            {
              v139 = v126 != 0;
            }
            v20 = v318;
            v140 = v330;
            sub_100025A28((uint64_t)v310, (uint64_t *)&unk_1002AC0F0);
            sub_100025A28((uint64_t)v309, (uint64_t *)&unk_1002AC0F0);
            sub_100025A28((uint64_t)v308, (uint64_t *)&unk_1002AC0F0);
            sub_100025A28((uint64_t)v307, (uint64_t *)&unk_1002AC0F0);
            sub_100025A28((uint64_t)v306, (uint64_t *)&unk_1002AC0F0);
            sub_100025A28((uint64_t)v305, (uint64_t *)&unk_1002AC0F0);
            v60 = v322;
            if (((v328 ^ v139) & 1) != 0)
              break;
            v60 = v322 + 1;
            v61 = &v140[v335];
            if (v322 + 1 >= (uint64_t)v329)
            {
              v52 = v329;
              v60 = (uint64_t)v329;
              a1 = v321;
              v17 = v304;
              v23 = v320;
              v26 = v319;
              v50 = v303;
              goto LABEL_23;
            }
          }
          a1 = v321;
          v17 = v304;
          v23 = v320;
          v26 = v319;
          v50 = v303;
        }
        v52 = v329;
LABEL_23:
        v51 = v299;
        if ((v328 & 1) != 0)
        {
          if (v60 < v50)
            goto LABEL_162;
          if (v50 < v60)
          {
            v141 = 0;
            v142 = v335 * (v60 - 1);
            v143 = v60 * v335;
            v144 = v50;
            v145 = v50 * v335;
            v322 = v60;
            do
            {
              if (v144 != v60 + v141 - 1)
              {
                v146 = v325;
                if (!v325)
                  goto LABEL_166;
                v147 = v325 + v145;
                sub_10005FA70(v325 + v145, v300, (uint64_t *)&unk_1002AC0F0);
                if (v145 < v142 || v147 >= v146 + v143)
                {
                  swift_arrayInitWithTakeFrontToBack(v146 + v145, v146 + v142, 1, v343);
                }
                else if (v145 != v142)
                {
                  swift_arrayInitWithTakeBackToFront(v146 + v145, v146 + v142, 1, v343);
                }
                sub_10005FA70(v300, v146 + v142, (uint64_t *)&unk_1002AC0F0);
                v51 = v299;
                v60 = v322;
              }
              ++v144;
              --v141;
              v142 -= v335;
              v143 -= v335;
              v145 += v335;
            }
            while (v144 < v60 + v141);
            v20 = v318;
            v23 = v320;
            v26 = v319;
            v50 = v303;
            v52 = v329;
            a1 = v321;
          }
        }
      }
      if (v60 >= (uint64_t)v52)
        goto LABEL_64;
      v242 = __OFSUB__(v60, v50);
      v149 = v60 - v50;
      if (v242)
        goto LABEL_158;
      if (v149 < v295)
      {
        if (__OFADD__(v303, v295))
          goto LABEL_160;
        if (v303 + v295 >= (uint64_t)v52)
          v150 = v52;
        else
          v150 = (void (*)(void))(v303 + v295);
        if ((uint64_t)v150 < v303)
        {
LABEL_161:
          __break(1u);
LABEL_162:
          __break(1u);
          goto LABEL_163;
        }
        if ((void (*)(void))v60 == v150)
        {
          v50 = v303;
          goto LABEL_64;
        }
        v151 = *(_QWORD *)(v312 + 72);
        v335 = v151 * (v60 - 1);
        v317 = v151;
        v334 = v60 * v151;
        v298 = v150;
LABEL_51:
        v152 = 0;
        v153 = v303;
        v322 = v60;
        while (1)
        {
          v327 = v153;
          v154 = v152;
          v155 = *a1;
          v326 = v334 + v154;
          sub_1000FB4A8(v334 + v154 + v155, (uint64_t)v26, (uint64_t *)&unk_1002AC0F0);
          v328 = v154;
          v325 = v335 + v154;
          sub_1000FB4A8(v335 + v154 + v155, (uint64_t)v23, (uint64_t *)&unk_1002AC0F0);
          v156 = *(int *)(v343 + 48);
          v157 = v343;
          v158 = &v20[v156];
          v345 = &v20[v156];
          v159 = &v23[v156];
          v346 = *v23;
          v160 = v23[1];
          v369 = v160;
          v161 = v23[2];
          v162 = v23[3];
          v367 = v162;
          v368 = v161;
          v163 = v23[4];
          v164 = v23[5];
          v365 = v164;
          v366 = v163;
          v165 = v23[6];
          v166 = v23[7];
          v363 = v166;
          v364 = v165;
          v167 = v23[8];
          v168 = v23[9];
          v361 = v168;
          v362 = v167;
          v169 = v23[10];
          v170 = v23[11];
          v359 = v170;
          v360 = v169;
          v171 = v23[12];
          v172 = v23[13];
          v357 = v172;
          v358 = v171;
          v173 = v23[14];
          v174 = v23[15];
          v355 = v174;
          v356 = v173;
          *v20 = v346;
          v20[1] = v160;
          v20[2] = v161;
          v20[3] = v162;
          v20[4] = v163;
          v20[5] = v164;
          v20[6] = v165;
          v20[7] = v166;
          v20[8] = v167;
          v20[9] = v168;
          v20[10] = v169;
          v20[11] = v170;
          v20[12] = v171;
          v20[13] = v172;
          v20[14] = v173;
          v20[15] = v174;
          v175 = type metadata accessor for UniversalControlDisplayLayout(0);
          v336 = *(_QWORD *)(v175 - 8);
          v176 = *(void (**)(void))(v336 + 16);
          v177 = v158;
          v178 = v175;
          ((void (*)(char *, _BYTE *))v176)(v177, v159);
          v179 = v176;
          v180 = v157;
          v344 = &v17[*(int *)(v157 + 48)];
          v181 = *v26;
          v182 = v26[1];
          v351 = v182;
          v183 = v26[2];
          v184 = v26[3];
          v185 = v26[4];
          v338 = v185;
          v186 = v26[5];
          v354 = v186;
          v187 = v26[6];
          v337 = v187;
          v188 = v26[7];
          v189 = v26[8];
          v352 = v189;
          v353 = v188;
          LOBYTE(v169) = v26[9];
          v339 = v169;
          v190 = v26[10];
          v191 = v26[11];
          v349 = v191;
          v350 = v190;
          v192 = v26[12];
          v332 = v192;
          v193 = v26[13];
          v348 = v193;
          v194 = v26[14];
          v331 = v194;
          v195 = v26[15];
          v347 = v195;
          *v17 = v181;
          v342 = v181;
          v17[1] = v182;
          v17[2] = v183;
          v341 = v183;
          v17[3] = v184;
          v340 = v184;
          v17[4] = v185;
          v17[5] = v186;
          v17[6] = v187;
          v17[7] = v188;
          v17[8] = v189;
          v17[9] = v169;
          v17[10] = v190;
          v17[11] = v191;
          v17[12] = v192;
          v17[13] = v193;
          v17[14] = v194;
          v17[15] = v195;
          v196 = v178;
          v197 = v179;
          v179();
          v198 = v314;
          v199 = &v314[*(int *)(v180 + 48)];
          *v314 = v346;
          v198[1] = v369;
          v198[2] = v368;
          v198[3] = v367;
          v198[4] = v366;
          v198[5] = v365;
          v198[6] = v364;
          v198[7] = v363;
          v198[8] = v362;
          v198[9] = v361;
          v198[10] = v360;
          v198[11] = v359;
          v198[12] = v358;
          v198[13] = v357;
          v198[14] = v356;
          v198[15] = v355;
          v200 = ((uint64_t (*)(_BYTE *, char *, uint64_t))v197)(v199, v345, v178);
          v329 = v197;
          v333 = UniversalControlDisplayLayout.version.getter(v200);
          v330 = *(char **)(v336 + 8);
          ((void (*)(_BYTE *, uint64_t))v330)(v199, v178);
          v201 = v315;
          v202 = &v315[*(int *)(v180 + 48)];
          *v315 = v181;
          v201[1] = v351;
          v201[2] = v183;
          v201[3] = v184;
          LOBYTE(v178) = v338;
          v201[4] = v338;
          v201[5] = v354;
          LOBYTE(v180) = v337;
          v201[6] = v337;
          v201[7] = v353;
          v201[8] = v352;
          LOBYTE(v184) = v339;
          v201[9] = v339;
          v201[10] = v350;
          v201[11] = v349;
          v203 = v332;
          v201[12] = v332;
          v201[13] = v348;
          v204 = v331;
          v201[14] = v331;
          v201[15] = v347;
          v205 = ((uint64_t (*)(_BYTE *, char *, uint64_t))v197)(v202, v344, v196);
          v336 = UniversalControlDisplayLayout.version.getter(v205);
          ((void (*)(_BYTE *, uint64_t))v330)(v202, v196);
          v206 = v343;
          v207 = v323;
          v208 = &v323[*(int *)(v343 + 48)];
          *v323 = v342;
          v207[1] = v351;
          v207[2] = v341;
          v207[3] = v340;
          v207[4] = v178;
          v207[5] = v354;
          v207[6] = v180;
          v207[7] = v353;
          v207[8] = v352;
          v207[9] = v184;
          v207[10] = v350;
          v207[11] = v349;
          v209 = v203;
          v207[12] = v203;
          v207[13] = v348;
          v207[14] = v204;
          v207[15] = v347;
          v210 = v329;
          ((void (*)(_BYTE *, char *, uint64_t))v329)(v208, v344, v196);
          v211 = *(int *)(v206 + 48);
          v212 = v346;
          v213 = v316;
          v214 = &v316[v211];
          *v316 = v346;
          v213[1] = v369;
          v213[2] = v368;
          v213[3] = v367;
          v213[4] = v366;
          v213[5] = v365;
          v213[6] = v364;
          v213[7] = v363;
          v213[8] = v362;
          v213[9] = v361;
          v213[10] = v360;
          v213[11] = v359;
          v213[12] = v358;
          v213[13] = v357;
          v213[14] = v356;
          v213[15] = v355;
          ((void (*)(_BYTE *, char *, uint64_t))v210)(v214, v345, v196);
          v215 = v333;
          if (v333 == v336)
          {
            v216 = v342 | (v351 << 8) | (v341 << 16) | (v340 << 24) | (v338 << 32) | (v354 << 40) | (v337 << 48) | (v353 << 56);
            v217 = v352 | (v339 << 8) | (v350 << 16) | (v349 << 24) | (v209 << 32) | (v348 << 40) | (v204 << 48) | (v347 << 56);
            v218 = v212 | (v369 << 8) | (v368 << 16) | (v367 << 24) | (v366 << 32) | (v365 << 40) | (v364 << 48) | (v363 << 56);
            v219 = v362 | (v361 << 8) | (v360 << 16) | (v359 << 24) | (v358 << 32) | (v357 << 40) | (v356 << 48) | (v355 << 56);
            if ((static UniversalControlDeviceID.< infix(_:_:)(v216, v217, v218, v219) & 1) == 0)
            {
              static UniversalControlDeviceID.< infix(_:_:)(v218, v219, v216, v217);
              sub_100025A28((uint64_t)v213, (uint64_t *)&unk_1002AC0F0);
              sub_100025A28((uint64_t)v323, (uint64_t *)&unk_1002AC0F0);
              sub_100025A28((uint64_t)v17, (uint64_t *)&unk_1002AC0F0);
              v20 = v318;
              sub_100025A28((uint64_t)v318, (uint64_t *)&unk_1002AC0F0);
              v23 = v320;
              sub_100025A28((uint64_t)v320, (uint64_t *)&unk_1002AC0F0);
              v26 = v319;
              sub_100025A28((uint64_t)v319, (uint64_t *)&unk_1002AC0F0);
              a1 = v321;
LABEL_60:
              v224 = v322;
LABEL_61:
              v60 = v224 + 1;
              v335 += v317;
              v334 += v317;
              if ((void (*)(void))v60 == v298)
              {
                v60 = (uint64_t)v298;
                v51 = v299;
                break;
              }
              goto LABEL_51;
            }
            sub_100025A28((uint64_t)v213, (uint64_t *)&unk_1002AC0F0);
            sub_100025A28((uint64_t)v323, (uint64_t *)&unk_1002AC0F0);
            sub_100025A28((uint64_t)v17, (uint64_t *)&unk_1002AC0F0);
            v20 = v318;
            sub_100025A28((uint64_t)v318, (uint64_t *)&unk_1002AC0F0);
            v23 = v320;
            sub_100025A28((uint64_t)v320, (uint64_t *)&unk_1002AC0F0);
            v26 = v319;
            sub_100025A28((uint64_t)v319, (uint64_t *)&unk_1002AC0F0);
            a1 = v321;
          }
          else
          {
            sub_100025A28((uint64_t)v213, (uint64_t *)&unk_1002AC0F0);
            sub_100025A28((uint64_t)v207, (uint64_t *)&unk_1002AC0F0);
            sub_100025A28((uint64_t)v17, (uint64_t *)&unk_1002AC0F0);
            v20 = v318;
            sub_100025A28((uint64_t)v318, (uint64_t *)&unk_1002AC0F0);
            v23 = v320;
            sub_100025A28((uint64_t)v320, (uint64_t *)&unk_1002AC0F0);
            v26 = v319;
            sub_100025A28((uint64_t)v319, (uint64_t *)&unk_1002AC0F0);
            a1 = v321;
            if (v336 < v215)
              goto LABEL_60;
          }
          v220 = *a1;
          if (!*a1)
            goto LABEL_164;
          v221 = v328;
          v222 = v220 + v334 + v328;
          v223 = v220 + v335 + v328;
          sub_10005FA70(v222, v324, (uint64_t *)&unk_1002AC0F0);
          swift_arrayInitWithTakeFrontToBack(v222, v223, 1, v343);
          sub_10005FA70(v324, v223, (uint64_t *)&unk_1002AC0F0);
          v152 = v221 - v317;
          v153 = v327 + 1;
          v224 = v322;
          if (v322 == v327 + 1)
            goto LABEL_61;
        }
      }
      v50 = v303;
LABEL_64:
      if (v60 < v50)
        goto LABEL_156;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v51);
      v322 = v60;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v51 = v299;
      }
      else
      {
        sub_10006C984();
        v51 = v281;
      }
      v226 = v51[2];
      v227 = v226 + 1;
      if (v226 >= v51[3] >> 1)
      {
        sub_10006C984();
        v51 = v282;
      }
      v51[2] = v227;
      v228 = v51 + 4;
      v229 = &v51[2 * v226 + 4];
      v230 = v322;
      *v229 = v303;
      v229[1] = v230;
      if (v226)
      {
        while (1)
        {
          v231 = v227 - 1;
          if (v227 >= 4)
          {
            v236 = &v228[2 * v227];
            v237 = *(v236 - 8);
            v238 = *(v236 - 7);
            v242 = __OFSUB__(v238, v237);
            v239 = v238 - v237;
            if (v242)
              goto LABEL_141;
            v241 = *(v236 - 6);
            v240 = *(v236 - 5);
            v242 = __OFSUB__(v240, v241);
            v234 = v240 - v241;
            v235 = v242;
            if (v242)
              goto LABEL_142;
            v243 = v227 - 2;
            v244 = &v228[2 * v227 - 4];
            v246 = *v244;
            v245 = v244[1];
            v242 = __OFSUB__(v245, v246);
            v247 = v245 - v246;
            if (v242)
              goto LABEL_143;
            v242 = __OFADD__(v234, v247);
            v248 = v234 + v247;
            if (v242)
              goto LABEL_145;
            if (v248 >= v239)
            {
              v266 = &v228[2 * v231];
              v268 = *v266;
              v267 = v266[1];
              v242 = __OFSUB__(v267, v268);
              v269 = v267 - v268;
              if (v242)
                goto LABEL_151;
              v259 = v234 < v269;
              goto LABEL_101;
            }
          }
          else
          {
            if (v227 != 3)
            {
              v260 = v51[4];
              v261 = v51[5];
              v242 = __OFSUB__(v261, v260);
              v253 = v261 - v260;
              v254 = v242;
              goto LABEL_95;
            }
            v233 = v51[4];
            v232 = v51[5];
            v242 = __OFSUB__(v232, v233);
            v234 = v232 - v233;
            v235 = v242;
          }
          if ((v235 & 1) != 0)
            goto LABEL_144;
          v243 = v227 - 2;
          v249 = &v228[2 * v227 - 4];
          v251 = *v249;
          v250 = v249[1];
          v252 = __OFSUB__(v250, v251);
          v253 = v250 - v251;
          v254 = v252;
          if (v252)
            goto LABEL_146;
          v255 = &v228[2 * v231];
          v257 = *v255;
          v256 = v255[1];
          v242 = __OFSUB__(v256, v257);
          v258 = v256 - v257;
          if (v242)
            goto LABEL_148;
          if (__OFADD__(v253, v258))
            goto LABEL_150;
          if (v253 + v258 >= v234)
          {
            v259 = v234 < v258;
LABEL_101:
            if (v259)
              v231 = v243;
            goto LABEL_103;
          }
LABEL_95:
          if ((v254 & 1) != 0)
            goto LABEL_147;
          v262 = &v228[2 * v231];
          v264 = *v262;
          v263 = v262[1];
          v242 = __OFSUB__(v263, v264);
          v265 = v263 - v264;
          if (v242)
            goto LABEL_149;
          if (v265 < v253)
            goto LABEL_112;
LABEL_103:
          v270 = v231 - 1;
          if (v231 - 1 >= v227)
          {
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            __break(1u);
LABEL_149:
            __break(1u);
LABEL_150:
            __break(1u);
LABEL_151:
            __break(1u);
LABEL_152:
            __break(1u);
LABEL_153:
            __break(1u);
LABEL_154:
            __break(1u);
LABEL_155:
            __break(1u);
LABEL_156:
            __break(1u);
LABEL_157:
            __break(1u);
LABEL_158:
            __break(1u);
LABEL_159:
            __break(1u);
LABEL_160:
            __break(1u);
            goto LABEL_161;
          }
          v271 = *a1;
          if (!*a1)
            goto LABEL_165;
          v272 = v51;
          v273 = &v228[2 * v270];
          v274 = *v273;
          v275 = v228;
          v276 = v231;
          v277 = &v228[2 * v231];
          v278 = v277[1];
          v279 = v313;
          sub_100164CA4(v271 + *(_QWORD *)(v312 + 72) * *v273, v271 + *(_QWORD *)(v312 + 72) * *v277, v271 + *(_QWORD *)(v312 + 72) * v278, v311);
          v313 = v279;
          if (v279)
            goto LABEL_118;
          if (v278 < v274)
            goto LABEL_138;
          if (v276 > v272[2])
            goto LABEL_139;
          *v273 = v274;
          v275[2 * v270 + 1] = v278;
          v280 = v272[2];
          if (v276 >= v280)
            goto LABEL_140;
          v227 = v280 - 1;
          memmove(v277, v277 + 2, 16 * (v280 - 1 - v276));
          v228 = v275;
          v51 = v272;
          v272[2] = v280 - 1;
          v23 = v320;
          v26 = v319;
          v17 = v304;
          a1 = v321;
          if (v280 <= 2)
            goto LABEL_112;
        }
      }
      v227 = 1;
LABEL_112:
      v52 = (void (*)(void))a1[1];
      v50 = v322;
      v20 = v318;
      if (v322 >= (uint64_t)v52)
        goto LABEL_121;
    }
  }
  v51 = _swiftEmptyArrayStorage;
  v227 = _swiftEmptyArrayStorage[2];
LABEL_121:
  if (v227 >= 2)
  {
    v283 = *a1;
    do
    {
      v284 = v227 - 2;
      if (v227 < 2)
        goto LABEL_152;
      if (!v283)
        goto LABEL_167;
      v285 = v51;
      v286 = v51[2 * v284 + 4];
      v287 = v51[2 * v227 + 3];
      v288 = v313;
      sub_100164CA4(v283 + *(_QWORD *)(v312 + 72) * v286, v283 + *(_QWORD *)(v312 + 72) * v51[2 * v227 + 2], v283 + *(_QWORD *)(v312 + 72) * v287, v311);
      v313 = v288;
      if (v288)
        goto LABEL_118;
      if (v287 < v286)
        goto LABEL_153;
      if ((swift_isUniquelyReferenced_nonNull_native(v285) & 1) == 0)
      {
        sub_10006CA50();
        v285 = v291;
      }
      if (v284 >= v285[2])
        goto LABEL_154;
      v289 = &v285[2 * v284 + 4];
      *v289 = v286;
      v289[1] = v287;
      v290 = v285[2];
      if (v227 > v290)
        goto LABEL_155;
      memmove(&v285[2 * v227 + 2], &v285[2 * v227 + 4], 16 * (v290 - v227));
      v51 = v285;
      v285[2] = v290 - 1;
      v227 = v290 - 1;
    }
    while (v290 > 2);
  }
  swift_bridgeObjectRelease();
  if (v294 < -1)
  {
LABEL_163:
    __break(1u);
LABEL_164:
    __break(1u);
LABEL_165:
    __break(1u);
LABEL_166:
    __break(1u);
LABEL_167:
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v293 + 16) = 0;
    swift_bridgeObjectRelease();
  }
}

void sub_100162AB0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::Int v17;
  Swift::Int v18;
  uint64_t v19;
  uint64_t v20;
  Swift::Int v21;
  _QWORD *v22;
  Swift::Int v23;
  Swift::Int v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(void);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  Swift::Int v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  Swift::Int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v71;
  char *v72;
  Swift::Int v73;
  void (*v74)(uint64_t);
  uint64_t v75;
  Swift::Int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t (*v79)(uint64_t, uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(char *, char *, uint64_t);
  uint64_t v84;
  uint64_t (*v85)(uint64_t, uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  void (*v92)(uint64_t);
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  void (*v97)(uint64_t, char *, uint64_t);
  Swift::Int v98;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v100;
  unint64_t v101;
  _QWORD *v102;
  Swift::Int *v103;
  Swift::Int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  BOOL v115;
  _QWORD *v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  BOOL v125;
  uint64_t v126;
  char v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  BOOL v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  _QWORD *v144;
  uint64_t *v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  unint64_t v149;
  _QWORD *v150;
  _QWORD *v151;
  _QWORD *v152;
  uint64_t v153;
  unint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  unint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  Swift::Int v165;
  uint64_t v166;
  uint64_t v167;
  Swift::Int v168;
  _QWORD *v169;
  char *v170;
  Swift::Int v171;
  uint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  void (*v176)(uint64_t);
  void (*v177)(uint64_t, uint64_t);
  uint64_t (*v178)(uint64_t, uint64_t, uint64_t);
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  Swift::Int v184;
  char *v185;
  char *v186;
  Swift::Int v187;
  uint64_t v188;
  void (*v189)(char *, char *, uint64_t);
  uint64_t v190;
  _QWORD *v191;

  sub_10003AFC4();
  v1 = v0;
  v3 = (unint64_t)v2;
  v182 = sub_10016AB20();
  v175 = *(_QWORD *)(v182 - 8);
  sub_1000262EC();
  __chkstk_darwin(v4);
  sub_10003D69C();
  v181 = v5;
  sub_1000A3464();
  __chkstk_darwin(v6);
  sub_100026A8C();
  v180 = v7;
  v8 = sub_1000B9A80();
  v191 = *(_QWORD **)(v8 - 8);
  sub_1000262EC();
  __chkstk_darwin(v9);
  v170 = (char *)&v162 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000A3464();
  __chkstk_darwin(v11);
  sub_1000A34C8();
  v185 = v12;
  sub_1000A3464();
  __chkstk_darwin(v13);
  sub_1000A34C8();
  v179 = v14;
  sub_1000A3464();
  __chkstk_darwin(v15);
  sub_100026A8C();
  v190 = v16;
  v17 = *(_QWORD *)(v3 + 8);
  v18 = _minimumMergeRunLength(_:)(v17);
  if (v18 >= v17)
  {
    if ((v17 & 0x8000000000000000) == 0)
    {
      if (v17)
        sub_1001647A8();
      goto LABEL_119;
    }
    goto LABEL_142;
  }
  v165 = v18;
  sub_1000222CC(v17 / 2);
  v163 = v19;
  v172 = v20;
  v164 = v17;
  if (v17 <= 0)
  {
LABEL_105:
    v22 = _swiftEmptyArrayStorage;
    v101 = _swiftEmptyArrayStorage[2];
LABEL_106:
    if (v101 < 2)
    {
LABEL_117:
      swift_bridgeObjectRelease(v22);
      if (v164 >= -1)
        goto LABEL_118;
      goto LABEL_146;
    }
    v153 = *(_QWORD *)v3;
    while (1)
    {
      v154 = v101 - 2;
      if (v101 < 2)
        break;
      if (!v153)
        goto LABEL_150;
      v155 = v22;
      v156 = v22[2 * v154 + 4];
      v157 = v22[2 * v101 + 3];
      sub_10016B198();
      if (v0)
      {
        v152 = v155;
        goto LABEL_103;
      }
      if (v157 < v156)
        goto LABEL_137;
      if ((swift_isUniquelyReferenced_nonNull_native(v155) & 1) == 0)
      {
        sub_10006CA50();
        v155 = v160;
      }
      if (v154 >= v155[2])
        goto LABEL_138;
      v158 = &v155[2 * v154 + 4];
      *v158 = v156;
      v158[1] = v157;
      v159 = v155[2];
      if (v101 > v159)
        goto LABEL_139;
      memmove(&v155[2 * v101 + 2], &v155[2 * v101 + 4], 16 * (v159 - v101));
      v22 = v155;
      v155[2] = v159 - 1;
      v101 = v159 - 1;
      if (v159 <= 2)
        goto LABEL_117;
    }
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
    return;
  }
  v21 = 0;
  v22 = _swiftEmptyArrayStorage;
  v173 = (_QWORD *)v3;
  v183 = v8;
  while (1)
  {
    v23 = v21;
    v24 = v21 + 1;
    v169 = v22;
    v171 = v21;
    if (v21 + 1 >= v17)
    {
      v44 = v21 + 1;
    }
    else
    {
      v166 = v1;
      v167 = *(_QWORD *)v3;
      v25 = v167;
      v26 = v191[9];
      v187 = v17;
      v188 = v26;
      v27 = (void (*)(void))v191[2];
      v27();
      v28 = v179;
      v178 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v27;
      v29 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v27)(v179, v25 + v26 * v23, v183);
      v30 = v180;
      v31 = UniversalControlLink.endpoint2.getter(v29);
      v32 = sub_10016AD88(v31);
      v189 = (void (*)(char *, char *, uint64_t))v33;
      v34 = *(char **)(v175 + 8);
      v35 = v182;
      v36 = sub_10016ABA4(v30);
      v37 = v181;
      v38 = sub_10016AED4(v36);
      sub_10016AD88(v38);
      sub_10016AE20();
      v39 = v35;
      v23 = v171;
      v177 = (void (*)(uint64_t, uint64_t))v34;
      ((void (*)(uint64_t, uint64_t))v34)(v37, v39);
      LODWORD(v186) = sub_10016AB08(v32, (uint64_t)v189);
      v40 = (void (*)(uint64_t, uint64_t))v191[1];
      v8 = v183;
      v41 = v28;
      v42 = v167;
      v40(v41, v183);
      v17 = v187;
      v176 = (void (*)(uint64_t))v40;
      v40(v190, v8);
      v43 = v188;
      v44 = v23 + 2;
      if (v23 + 2 >= v17)
      {
        v1 = v166;
      }
      else
      {
        v174 = v188 * v24;
        sub_100101920(v188 * v44);
        while (1)
        {
          v184 = v44;
          sub_10016B174();
          v46 = v178;
          v178(v190, v42 + v45, v8);
          v47 = v46(v179, v42 + v174, v8);
          v48 = v180;
          v49 = sub_10016AB14(v47);
          v189 = (void (*)(char *, char *, uint64_t))sub_10016A84C(v49);
          v51 = v50;
          v52 = v182;
          v53 = v177;
          v54 = ((uint64_t (*)(uint64_t, uint64_t))v177)(v48, v182);
          v55 = v181;
          v56 = UniversalControlLink.endpoint2.getter(v54);
          sub_10016A84C(v56);
          v57 = v55;
          v8 = v183;
          v53(v57, v52);
          LODWORD(v46) = sub_10016AF4C((uint64_t)v189, v51);
          v58 = sub_10016AB48();
          v59 = v176;
          v176(v58);
          v60 = sub_1000FD3C8();
          v59(v60);
          if (((v186 ^ v46) & 1) != 0)
            break;
          v44 = v184 + 1;
          v17 = v187;
          v43 = v188;
          v42 += v188;
          if (v184 + 1 >= v187)
          {
            v44 = v187;
            v1 = v166;
            v3 = (unint64_t)v173;
            v23 = v171;
            goto LABEL_13;
          }
        }
        v1 = v166;
        v3 = (unint64_t)v173;
        v44 = v184;
        v23 = v171;
        v17 = v187;
        v43 = v188;
      }
LABEL_13:
      v22 = v169;
      if ((v186 & 1) != 0)
      {
        if (v44 < v23)
          goto LABEL_143;
        if (v23 < v44)
        {
          v61 = 0;
          v62 = v43 * (v44 - 1);
          v63 = v44 * v43;
          v64 = v23;
          v65 = v23 * v43;
          v184 = v44;
          do
          {
            if (v64 != v44 + v61 - 1)
            {
              v66 = v167;
              if (!v167)
                goto LABEL_149;
              v67 = v1;
              v68 = v167 + v65;
              v186 = (char *)(v167 + v62);
              v69 = v183;
              v189 = (void (*)(char *, char *, uint64_t))v191[4];
              ((void (*)(char *, uint64_t, uint64_t, _QWORD *))v189)(v170, v167 + v65, v183, v22);
              if (v65 < v62 || v68 >= v66 + v63)
              {
                v71 = v66 + v65;
                v72 = v186;
                swift_arrayInitWithTakeFrontToBack(v71, v186, 1, v69);
              }
              else
              {
                v72 = v186;
                if (v65 != v62)
                  swift_arrayInitWithTakeBackToFront(v68, v186, 1, v69);
              }
              v189(v72, v170, v69);
              v22 = v169;
              v3 = (unint64_t)v173;
              v1 = v67;
              v44 = v184;
              v43 = v188;
            }
            ++v64;
            --v61;
            v62 -= v43;
            v63 -= v43;
            v65 += v43;
          }
          while (v64 < v44 + v61);
          v8 = v183;
          v23 = v171;
          v17 = v187;
        }
      }
    }
    if (v44 < v17)
    {
      if (__OFSUB__(v44, v23))
        goto LABEL_141;
      if (v44 - v23 < v165)
      {
        if (__OFADD__(v23, v165))
          goto LABEL_144;
        if (v23 + v165 >= v17)
          v73 = v17;
        else
          v73 = v23 + v165;
        if (v73 < v23)
          goto LABEL_145;
        if (v44 != v73)
        {
          v166 = v1;
          v74 = (void (*)(uint64_t))v191[9];
          v174 = v191[2];
          v75 = (_QWORD)v74 * (v44 - 1);
          v176 = v74;
          v76 = v44 * (_QWORD)v74;
          v168 = v73;
          do
          {
            v77 = 0;
            v184 = v44;
            v177 = (void (*)(uint64_t, uint64_t))v76;
            v178 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v75;
            while (1)
            {
              v187 = v23;
              v78 = *(_QWORD *)v3;
              v186 = (char *)(v76 + v77);
              v79 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v174;
              ((void (*)(void))v174)();
              v80 = v79(v179, v75 + v77 + v78, v8);
              v81 = v180;
              v82 = UniversalControlLink.endpoint2.getter(v80);
              v83 = (void (*)(char *, uint64_t, uint64_t, _QWORD *))sub_10016A84C(v82);
              v188 = v84;
              v189 = (void (*)(char *, char *, uint64_t))v83;
              v85 = *(uint64_t (**)(uint64_t, uint64_t))(v175 + 8);
              v86 = v182;
              v87 = v85(v81, v182);
              v88 = v181;
              v89 = sub_10016AB14(v87);
              sub_10016A84C(v89);
              sub_10016AE20();
              v90 = v88;
              v8 = v183;
              v85(v90, v86);
              v91 = sub_10016AB08((uint64_t)v189, v188);
              v92 = (void (*)(uint64_t))v191[1];
              v93 = sub_1000FD3C8();
              v92(v93);
              ((void (*)(uint64_t, uint64_t))v92)(v190, v8);
              if ((v91 & 1) == 0)
                break;
              v94 = *(_QWORD *)v3;
              if (!*(_QWORD *)v3)
                goto LABEL_147;
              v76 = (Swift::Int)v177;
              v75 = (uint64_t)v178;
              v95 = (char *)v177 + v94 + v77;
              v96 = (char *)v178 + v94 + v77;
              v97 = (void (*)(uint64_t, char *, uint64_t))v191[4];
              v97((uint64_t)v185, v95, v8);
              swift_arrayInitWithTakeFrontToBack(v95, v96, 1, v8);
              v97((uint64_t)v96, v185, v8);
              v77 -= (uint64_t)v176;
              v23 = v187 + 1;
              v98 = v184;
              if (v184 == v187 + 1)
                goto LABEL_46;
            }
            v98 = v184;
            v76 = (Swift::Int)v177;
            v75 = (uint64_t)v178;
LABEL_46:
            v44 = v98 + 1;
            v75 += (uint64_t)v176;
            v76 += (Swift::Int)v176;
            v23 = v171;
          }
          while (v44 != v168);
          v44 = v168;
          v1 = v166;
          v22 = v169;
        }
      }
    }
    if (v44 < v23)
      goto LABEL_140;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v22);
    v184 = v44;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v22 = v169;
    }
    else
    {
      sub_10016B0E0();
      sub_10006C984();
      v22 = v150;
    }
    v100 = v22[2];
    v101 = v100 + 1;
    if (v100 >= v22[3] >> 1)
    {
      sub_10006C984();
      v22 = v151;
    }
    v22[2] = v101;
    v102 = v22 + 4;
    v103 = &v22[2 * v100 + 4];
    v104 = v184;
    *v103 = v171;
    v103[1] = v104;
    if (v100)
      break;
    v101 = 1;
LABEL_96:
    v3 = (unint64_t)v173;
    v17 = v173[1];
    v21 = v184;
    if (v184 >= v17)
      goto LABEL_106;
  }
  while (1)
  {
    v3 = v101 - 1;
    if (v101 >= 4)
    {
      v109 = &v102[2 * v101];
      v110 = *(v109 - 8);
      v111 = *(v109 - 7);
      v115 = __OFSUB__(v111, v110);
      v112 = v111 - v110;
      if (v115)
        goto LABEL_125;
      v114 = *(v109 - 6);
      v113 = *(v109 - 5);
      v115 = __OFSUB__(v113, v114);
      v107 = v113 - v114;
      v108 = v115;
      if (v115)
        goto LABEL_126;
      v116 = (_QWORD *)(v101 - 2);
      v117 = &v102[2 * v101 - 4];
      v119 = *v117;
      v118 = v117[1];
      v115 = __OFSUB__(v118, v119);
      v120 = v118 - v119;
      if (v115)
        goto LABEL_127;
      v115 = __OFADD__(v107, v120);
      v121 = v107 + v120;
      if (v115)
        goto LABEL_129;
      if (v121 >= v112)
      {
        v139 = &v102[2 * v3];
        v141 = *v139;
        v140 = v139[1];
        v115 = __OFSUB__(v140, v141);
        v142 = v140 - v141;
        if (v115)
          goto LABEL_135;
        v132 = v107 < v142;
        goto LABEL_85;
      }
    }
    else
    {
      if (v101 != 3)
      {
        v133 = v22[4];
        v134 = v22[5];
        v115 = __OFSUB__(v134, v133);
        v126 = v134 - v133;
        v127 = v115;
        goto LABEL_79;
      }
      v106 = v22[4];
      v105 = v22[5];
      v115 = __OFSUB__(v105, v106);
      v107 = v105 - v106;
      v108 = v115;
    }
    if ((v108 & 1) != 0)
      goto LABEL_128;
    v116 = (_QWORD *)(v101 - 2);
    v122 = &v102[2 * v101 - 4];
    v124 = *v122;
    v123 = v122[1];
    v125 = __OFSUB__(v123, v124);
    v126 = v123 - v124;
    v127 = v125;
    if (v125)
      goto LABEL_130;
    v128 = &v102[2 * v3];
    v130 = *v128;
    v129 = v128[1];
    v115 = __OFSUB__(v129, v130);
    v131 = v129 - v130;
    if (v115)
      goto LABEL_132;
    if (__OFADD__(v126, v131))
      goto LABEL_134;
    if (v126 + v131 >= v107)
    {
      v132 = v107 < v131;
LABEL_85:
      if (v132)
        v3 = (unint64_t)v116;
      goto LABEL_87;
    }
LABEL_79:
    if ((v127 & 1) != 0)
      goto LABEL_131;
    v135 = &v102[2 * v3];
    v137 = *v135;
    v136 = v135[1];
    v115 = __OFSUB__(v136, v137);
    v138 = v136 - v137;
    if (v115)
      goto LABEL_133;
    if (v138 < v126)
      goto LABEL_96;
LABEL_87:
    v143 = v3 - 1;
    if (v3 - 1 >= v101)
    {
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
      goto LABEL_136;
    }
    if (!*v173)
      goto LABEL_148;
    v144 = v22;
    v145 = &v102[2 * v143];
    v146 = *v145;
    v147 = &v102[2 * v3];
    v148 = v147[1];
    sub_10016B198();
    v1 = v0;
    if (v0)
      break;
    if (v148 < v146)
      goto LABEL_122;
    if (v3 > v144[2])
      goto LABEL_123;
    *v145 = v146;
    v102[2 * v143 + 1] = v148;
    v149 = v144[2];
    if (v3 >= v149)
      goto LABEL_124;
    v101 = v149 - 1;
    memmove(&v102[2 * v3], v147 + 2, 16 * (v149 - 1 - v3));
    v22 = v144;
    v144[2] = v149 - 1;
    v8 = v183;
    if (v149 <= 2)
      goto LABEL_96;
  }
  v152 = v144;
LABEL_103:
  swift_bridgeObjectRelease(v152);
  if (v164 < -1)
  {
    __break(1u);
    goto LABEL_105;
  }
LABEL_118:
  v161 = v163;
  *(_QWORD *)(v163 + 16) = 0;
  swift_bridgeObjectRelease(v161);
LABEL_119:
  sub_10003AF60();
}

void sub_100163568(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  Swift::Int v5;
  _QWORD *v6;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  _QWORD *v10;
  Swift::Int v11;
  int v12;
  Swift::Int v13;
  Swift::Int v14;
  uint64_t *v15;
  Swift::Int v16;
  Swift::Int v17;
  uint64_t *v18;
  uint64_t v19;
  Swift::Int v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  Swift::Int v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  Swift::Int *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  char v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  unint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  _QWORD *v75;
  unint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  unint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t *v91;
  Swift::Int v92;
  uint64_t v93;
  Swift::Int v94;
  _QWORD *v95;
  uint64_t v96;

  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        sub_100164A54(0, v3, 1, a1);
      return;
    }
LABEL_129:
    __break(1u);
    goto LABEL_130;
  }
  v5 = v4;
  sub_100022350(v3 / 2);
  v95 = v6;
  v96 = v7;
  v93 = v3;
  v91 = a1;
  if (v3 <= 0)
  {
LABEL_93:
    v10 = _swiftEmptyArrayStorage;
    v28 = _swiftEmptyArrayStorage[2];
LABEL_94:
    if (v28 < 2)
    {
LABEL_105:
      swift_bridgeObjectRelease(v10);
      if (v93 >= -1)
        goto LABEL_106;
      goto LABEL_133;
    }
    v83 = *v91;
    while (1)
    {
      v84 = v28 - 2;
      if (v28 < 2)
        break;
      if (!v83)
        goto LABEL_137;
      v85 = v10[2 * v84 + 4];
      v86 = v10[2 * v28 + 3];
      sub_100166604((_QWORD *)(v83 + 8 * v85), (_QWORD *)(v83 + 8 * v10[2 * v28 + 2]), v83 + 8 * v86, v95);
      if (v1)
        goto LABEL_91;
      if (v86 < v85)
        goto LABEL_124;
      if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
      {
        sub_10006CA50();
        v10 = v89;
      }
      if (v84 >= v10[2])
        goto LABEL_125;
      v87 = &v10[2 * v84 + 4];
      *v87 = v85;
      v87[1] = v86;
      v88 = v10[2];
      if (v28 > v88)
        goto LABEL_126;
      memmove(&v10[2 * v28 + 2], &v10[2 * v28 + 4], 16 * (v88 - v28));
      v10[2] = v88 - 1;
      v28 = v88 - 1;
      if (v88 <= 2)
        goto LABEL_105;
    }
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
    goto LABEL_129;
  }
  v92 = v5;
  v8 = 0;
  v9 = *a1;
  v90 = *a1 - 8;
  v10 = _swiftEmptyArrayStorage;
  while (1)
  {
    v11 = v8++;
    if (v8 >= v3)
      goto LABEL_20;
    v12 = static UniversalControlDeviceID.< infix(_:_:)(*(_QWORD *)(*(_QWORD *)(v9 + 8 * v8) + 40), *(_QWORD *)(*(_QWORD *)(v9 + 8 * v8) + 48), *(_QWORD *)(*(_QWORD *)(v9 + 8 * v11) + 40), *(_QWORD *)(*(_QWORD *)(v9 + 8 * v11) + 48));
    v8 = v11 + 2;
    if (v11 + 2 >= v3)
      goto LABEL_10;
    v13 = v11;
    do
    {
      if (((v12 ^ static UniversalControlDeviceID.< infix(_:_:)(*(_QWORD *)(*(_QWORD *)(v9 + 8 * v13 + 16) + 40), *(_QWORD *)(*(_QWORD *)(v9 + 8 * v13 + 16) + 48), *(_QWORD *)(*(_QWORD *)(v9 + 8 * v13 + 8) + 40), *(_QWORD *)(*(_QWORD *)(v9 + 8 * v13 + 8) + 48))) & 1) != 0)
      {
        v8 = v13 + 2;
        if ((v12 & 1) == 0)
          goto LABEL_20;
LABEL_13:
        if (v8 >= v11)
        {
          if (v11 < v8)
          {
            v15 = (uint64_t *)(v90 + 8 * v8);
            v16 = v8;
            v17 = v11;
            v18 = (uint64_t *)(v9 + 8 * v11);
            do
            {
              if (v17 != --v16)
              {
                if (!v9)
                  goto LABEL_136;
                v19 = *v18;
                *v18 = *v15;
                *v15 = v19;
              }
              ++v17;
              --v15;
              ++v18;
            }
            while (v17 < v16);
          }
          goto LABEL_20;
        }
LABEL_130:
        __break(1u);
LABEL_131:
        __break(1u);
LABEL_132:
        __break(1u);
LABEL_133:
        __break(1u);
LABEL_134:
        __break(1u);
LABEL_135:
        __break(1u);
LABEL_136:
        __break(1u);
LABEL_137:
        __break(1u);
        return;
      }
      v14 = v13 + 3;
      ++v13;
    }
    while (v14 < v3);
    v8 = v3;
LABEL_10:
    if ((v12 & 1) != 0)
      goto LABEL_13;
LABEL_20:
    if (v8 >= v3)
      goto LABEL_36;
    if (__OFSUB__(v8, v11))
      goto LABEL_128;
    if (v8 - v11 >= v92)
      goto LABEL_36;
    if (__OFADD__(v11, v92))
      goto LABEL_131;
    if (v11 + v92 >= v3)
      v20 = v3;
    else
      v20 = v11 + v92;
    if (v20 < v11)
      goto LABEL_132;
    if (v8 != v20)
    {
      v21 = v10;
      v22 = (_QWORD *)(v90 + 8 * v8);
      do
      {
        v23 = *(_QWORD *)(v9 + 8 * v8);
        v24 = v11;
        v25 = v22;
        do
        {
          if ((static UniversalControlDeviceID.< infix(_:_:)(*(_QWORD *)(v23 + 40), *(_QWORD *)(v23 + 48), *(_QWORD *)(*v25 + 40), *(_QWORD *)(*v25 + 48)) & 1) == 0)break;
          if (!v9)
            goto LABEL_134;
          v26 = *v25;
          v23 = v25[1];
          *v25 = v23;
          v25[1] = v26;
          --v25;
          ++v24;
        }
        while (v8 != v24);
        ++v8;
        ++v22;
      }
      while (v8 != v20);
      v8 = v20;
      v10 = v21;
    }
LABEL_36:
    if (v8 < v11)
      goto LABEL_127;
    if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
    {
      sub_10006C984();
      v10 = v80;
    }
    v27 = v10[2];
    v28 = v27 + 1;
    if (v27 >= v10[3] >> 1)
    {
      sub_10006C984();
      v10 = v81;
    }
    v10[2] = v28;
    v29 = v10 + 4;
    v30 = &v10[2 * v27 + 4];
    *v30 = v11;
    v30[1] = v8;
    if (v27)
      break;
    v28 = 1;
LABEL_85:
    v3 = v93;
    if (v8 >= v93)
      goto LABEL_94;
  }
  v94 = v8;
  while (1)
  {
    v31 = v28 - 1;
    if (v28 >= 4)
    {
      v36 = &v29[2 * v28];
      v37 = *(v36 - 8);
      v38 = *(v36 - 7);
      v42 = __OFSUB__(v38, v37);
      v39 = v38 - v37;
      if (v42)
        goto LABEL_112;
      v41 = *(v36 - 6);
      v40 = *(v36 - 5);
      v42 = __OFSUB__(v40, v41);
      v34 = v40 - v41;
      v35 = v42;
      if (v42)
        goto LABEL_113;
      v43 = v28 - 2;
      v44 = &v29[2 * v28 - 4];
      v46 = *v44;
      v45 = v44[1];
      v42 = __OFSUB__(v45, v46);
      v47 = v45 - v46;
      if (v42)
        goto LABEL_114;
      v42 = __OFADD__(v34, v47);
      v48 = v34 + v47;
      if (v42)
        goto LABEL_116;
      if (v48 >= v39)
      {
        v66 = &v29[2 * v31];
        v68 = *v66;
        v67 = v66[1];
        v42 = __OFSUB__(v67, v68);
        v69 = v67 - v68;
        if (v42)
          goto LABEL_122;
        v59 = v34 < v69;
        goto LABEL_74;
      }
    }
    else
    {
      if (v28 != 3)
      {
        v60 = v10[4];
        v61 = v10[5];
        v42 = __OFSUB__(v61, v60);
        v53 = v61 - v60;
        v54 = v42;
        goto LABEL_68;
      }
      v33 = v10[4];
      v32 = v10[5];
      v42 = __OFSUB__(v32, v33);
      v34 = v32 - v33;
      v35 = v42;
    }
    if ((v35 & 1) != 0)
      goto LABEL_115;
    v43 = v28 - 2;
    v49 = &v29[2 * v28 - 4];
    v51 = *v49;
    v50 = v49[1];
    v52 = __OFSUB__(v50, v51);
    v53 = v50 - v51;
    v54 = v52;
    if (v52)
      goto LABEL_117;
    v55 = &v29[2 * v31];
    v57 = *v55;
    v56 = v55[1];
    v42 = __OFSUB__(v56, v57);
    v58 = v56 - v57;
    if (v42)
      goto LABEL_119;
    if (__OFADD__(v53, v58))
      goto LABEL_121;
    if (v53 + v58 >= v34)
    {
      v59 = v34 < v58;
LABEL_74:
      if (v59)
        v31 = v43;
      goto LABEL_76;
    }
LABEL_68:
    if ((v54 & 1) != 0)
      goto LABEL_118;
    v62 = &v29[2 * v31];
    v64 = *v62;
    v63 = v62[1];
    v42 = __OFSUB__(v63, v64);
    v65 = v63 - v64;
    if (v42)
      goto LABEL_120;
    if (v65 < v53)
      goto LABEL_85;
LABEL_76:
    v70 = v9;
    v71 = v10;
    v72 = v31 - 1;
    if (v31 - 1 >= v28)
    {
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
      goto LABEL_123;
    }
    if (!v70)
      goto LABEL_135;
    v73 = &v29[2 * v72];
    v74 = *v73;
    v75 = v29;
    v76 = v31;
    v77 = &v29[2 * v31];
    v78 = v77[1];
    sub_100166604((_QWORD *)(v70 + 8 * *v73), (_QWORD *)(v70 + 8 * *v77), v70 + 8 * v78, v95);
    if (v1)
      break;
    if (v78 < v74)
      goto LABEL_109;
    if (v76 > v71[2])
      goto LABEL_110;
    *v73 = v74;
    v75[2 * v72 + 1] = v78;
    v79 = v71[2];
    if (v76 >= v79)
      goto LABEL_111;
    v10 = v71;
    v28 = v79 - 1;
    memmove(v77, v77 + 2, 16 * (v79 - 1 - v76));
    v29 = v75;
    v71[2] = v79 - 1;
    v9 = v70;
    v8 = v94;
    if (v79 <= 2)
      goto LABEL_85;
  }
  v10 = v71;
LABEL_91:
  swift_bridgeObjectRelease(v10);
  if (v93 < -1)
  {
    __break(1u);
    goto LABEL_93;
  }
LABEL_106:
  *(_QWORD *)((v96 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
  specialized Array._endMutation()(v82);
  swift_bridgeObjectRelease(v96);
}

uint64_t sub_100163B74(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + (a3 << 6) + 48;
    while (2)
    {
      v9 = v6;
      v10 = (_OWORD *)v8;
      do
      {
        v11 = v10 - 3;
        v12 = v10 - 7;
        result = static UniversalControlDisplayID.< infix(_:_:)(*((_QWORD *)v10 - 6), *((_QWORD *)v10 - 5), *((_QWORD *)v10 - 4), *((_QWORD *)v10 - 3), *((_QWORD *)v10 - 14), *((_QWORD *)v10 - 13), *((_QWORD *)v10 - 12), *((_QWORD *)v10 - 11));
        if ((result & 1) == 0)
          break;
        if (!v7)
        {
          __break(1u);
          return result;
        }
        v14 = *(v10 - 5);
        v13 = *(v10 - 4);
        *(v10 - 4) = *v10;
        v10 -= 4;
        v15 = v10[1];
        v16 = v10[2];
        v17 = v12[1];
        *v11 = *v12;
        v11[1] = v17;
        v18 = v10[3];
        v11[2] = v14;
        v11[3] = v13;
        *(v10 - 3) = v15;
        *(v10 - 2) = v16;
        *(v10 - 1) = v18;
        ++v9;
      }
      while (v4 != v9);
      ++v4;
      v8 += 64;
      if (v4 != a2)
        continue;
      break;
    }
  }
  return result;
}

void sub_100163C4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  _BYTE *v37;
  uint64_t v38;
  unsigned __int8 v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;
  unsigned __int8 v45;
  uint64_t v46;
  unsigned __int8 v47;
  uint64_t v48;
  unsigned __int8 v49;
  uint64_t v50;
  unsigned __int8 v51;
  uint64_t v52;
  unsigned __int8 v53;
  uint64_t v54;
  void (*v55)(void);
  void (*v56)(void);
  uint64_t v57;
  void (*v58)(_QWORD, _QWORD);
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 v61;
  unsigned __int8 v62;
  unsigned __int8 v63;
  uint64_t v64;
  unsigned __int8 v65;
  uint64_t v66;
  unsigned __int8 v67;
  unsigned __int8 v68;
  unsigned __int8 v69;
  unsigned __int8 v70;
  unsigned __int8 v71;
  unsigned __int8 v72;
  char v73;
  void (*v74)(void);
  _BYTE *v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  _BYTE *v79;
  _BYTE *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  _BYTE *v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE *v88;
  uint64_t v89;
  void (*v90)(void);
  uint64_t v91;
  _BYTE *v92;
  _BYTE *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  BOOL v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned __int8 *v107;
  char *v108;
  _BYTE *v109;
  _BYTE *v110;
  _BYTE *v111;
  _BYTE *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _BYTE *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void (*v134)(void);
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;

  v121 = a4;
  v106 = a1;
  v128 = sub_1000055B0((uint64_t *)&unk_1002AC0F0);
  v6 = __chkstk_darwin(v128);
  v118 = (uint64_t)&v104 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v112 = (char *)&v104 - v9;
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v104 - v11;
  v13 = __chkstk_darwin(v10);
  v111 = (char *)&v104 - v14;
  v15 = __chkstk_darwin(v13);
  v110 = (char *)&v104 - v16;
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v104 - v18;
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v104 - v21;
  v23 = __chkstk_darwin(v20);
  v25 = (char *)&v104 - v24;
  __chkstk_darwin(v23);
  v28 = (unsigned __int8 *)&v104 - v27;
  v116 = a3;
  v105 = a2;
  if (a3 == a2)
    return;
  v29 = *(_QWORD *)(v26 + 72);
  v30 = v29 * (v116 - 1);
  v113 = v29;
  v31 = v29 * v116;
  v117 = v12;
  v108 = v22;
  v109 = v25;
  v107 = (unsigned __int8 *)&v104 - v27;
  while (2)
  {
    v161 = 0;
    v122 = v106;
    v115 = v30;
    v114 = v31;
    while (1)
    {
      v32 = *v121;
      v33 = v161;
      v120 = v31 + v161;
      sub_1000FB4A8(v31 + v161 + v32, (uint64_t)v28, (uint64_t *)&unk_1002AC0F0);
      v119 = v30 + v33;
      sub_1000FB4A8(v30 + v33 + v32, (uint64_t)v25, (uint64_t *)&unk_1002AC0F0);
      v34 = *(int *)(v128 + 48);
      v35 = v128;
      v36 = &v22[v34];
      v37 = &v25[v34];
      v38 = *v25;
      v39 = v25[1];
      v159 = v39;
      v160 = v38;
      v40 = v25[2];
      v41 = v25[3];
      v157 = v41;
      v158 = v40;
      v42 = v25[4];
      v43 = v25[5];
      v155 = v43;
      v156 = v42;
      v44 = v25[6];
      v45 = v25[7];
      v153 = v45;
      v154 = v44;
      v46 = v25[8];
      v47 = v25[9];
      v151 = v47;
      v152 = v46;
      v48 = v25[10];
      v49 = v25[11];
      v149 = v49;
      v150 = v48;
      v50 = v25[12];
      v51 = v25[13];
      v147 = v51;
      v148 = v50;
      v52 = v25[14];
      v53 = v25[15];
      v145 = v53;
      v146 = v52;
      *v22 = v38;
      v22[1] = v39;
      v22[2] = v40;
      v22[3] = v41;
      v22[4] = v42;
      v22[5] = v43;
      v22[6] = v44;
      v22[7] = v45;
      v22[8] = v46;
      v22[9] = v47;
      v22[10] = v48;
      v22[11] = v49;
      v22[12] = v50;
      v22[13] = v51;
      v22[14] = v52;
      v22[15] = v53;
      v54 = type metadata accessor for UniversalControlDisplayLayout(0);
      v129 = *(_QWORD *)(v54 - 8);
      v55 = *(void (**)(void))(v129 + 16);
      v127 = v36;
      ((void (*)(char *, _BYTE *, uint64_t))v55)(v36, v37, v54);
      v56 = v55;
      v57 = v35;
      v125 = &v19[*(int *)(v35 + 48)];
      v58 = (void (*)(_QWORD, _QWORD))*v28;
      v59 = v28[1];
      v60 = v28[2];
      v61 = v28[3];
      v132 = v61;
      v62 = v28[4];
      v144 = v62;
      v63 = v28[5];
      v138 = v63;
      v64 = v28[6];
      v65 = v28[7];
      v142 = v65;
      v143 = v64;
      v66 = v28[8];
      LOBYTE(v48) = v28[9];
      v140 = v48;
      v141 = v66;
      v67 = v28[10];
      v139 = v67;
      v68 = v28[11];
      v130 = v68;
      v69 = v28[12];
      v137 = v69;
      v70 = v28[13];
      v124 = v70;
      v71 = v28[14];
      v136 = v71;
      v72 = v28[15];
      v135 = v72;
      *v19 = (char)v58;
      v19[1] = v59;
      v73 = v59;
      v133 = v59;
      v19[2] = v60;
      v131 = v60;
      v19[3] = v61;
      v19[4] = v62;
      v19[5] = v63;
      v19[6] = v64;
      v19[7] = v65;
      v19[8] = v66;
      v19[9] = v48;
      v19[10] = v67;
      v19[11] = v68;
      v19[12] = v69;
      v19[13] = v70;
      v19[14] = v71;
      v19[15] = v72;
      v74 = v56;
      v134 = v56;
      v56();
      v75 = v110;
      v76 = &v110[*(int *)(v57 + 48)];
      *v110 = v160;
      v75[1] = v159;
      v75[2] = v158;
      v75[3] = v157;
      v75[4] = v156;
      v75[5] = v155;
      v75[6] = v154;
      v75[7] = v153;
      v75[8] = v152;
      v75[9] = v151;
      v75[10] = v150;
      v75[11] = v149;
      v75[12] = v148;
      v75[13] = v147;
      v75[14] = v146;
      v75[15] = v145;
      v77 = ((uint64_t (*)(_BYTE *, char *, uint64_t))v74)(v76, v36, v54);
      v126 = UniversalControlDisplayLayout.version.getter(v77);
      v123 = *(_QWORD *)(v129 + 8);
      v78 = v54;
      ((void (*)(_BYTE *, uint64_t))v123)(v76, v54);
      v79 = v111;
      v80 = &v111[*(int *)(v57 + 48)];
      *v111 = (_BYTE)v58;
      v79[1] = v73;
      v79[2] = v60;
      LOBYTE(v74) = v132;
      v79[3] = v132;
      v79[4] = v144;
      v79[5] = v138;
      v79[6] = v143;
      v79[7] = v142;
      v79[8] = v141;
      v79[9] = v140;
      v79[10] = v139;
      LOBYTE(v60) = v130;
      v79[11] = v130;
      v79[12] = v137;
      v81 = v124;
      v79[13] = v124;
      v79[14] = v136;
      v79[15] = v135;
      v82 = v125;
      v83 = ((uint64_t (*)(_BYTE *, char *, uint64_t))v134)(v80, v125, v78);
      v129 = UniversalControlDisplayLayout.version.getter(v83);
      v84 = v80;
      v85 = v117;
      v86 = v78;
      ((void (*)(_BYTE *, uint64_t))v123)(v84, v78);
      v87 = v128;
      v88 = &v85[*(int *)(v128 + 48)];
      v123 = (unint64_t)v58;
      *v85 = (_BYTE)v58;
      v85[1] = v133;
      v85[2] = v131;
      v85[3] = (_BYTE)v74;
      v85[4] = v144;
      v85[5] = v138;
      v85[6] = v143;
      v85[7] = v142;
      v85[8] = v141;
      v85[9] = v140;
      v85[10] = v139;
      v85[11] = v60;
      v85[12] = v137;
      v89 = v81;
      v85[13] = v81;
      v85[14] = v136;
      v85[15] = v135;
      v90 = v134;
      ((void (*)(_BYTE *, char *, uint64_t))v134)(v88, v82, v86);
      v91 = *(int *)(v87 + 48);
      v92 = v112;
      v93 = &v112[v91];
      *v112 = v160;
      v92[1] = v159;
      v92[2] = v158;
      v92[3] = v157;
      v92[4] = v156;
      v92[5] = v155;
      v92[6] = v154;
      v92[7] = v153;
      v92[8] = v152;
      v92[9] = v151;
      v92[10] = v150;
      v92[11] = v149;
      v92[12] = v148;
      v92[13] = v147;
      v92[14] = v146;
      v92[15] = v145;
      ((void (*)(_BYTE *, char *, uint64_t))v90)(v93, v127, v86);
      v94 = v126;
      if (v126 != v129)
      {
        sub_100025A28((uint64_t)v92, (uint64_t *)&unk_1002AC0F0);
        sub_100025A28((uint64_t)v85, (uint64_t *)&unk_1002AC0F0);
        sub_100025A28((uint64_t)v19, (uint64_t *)&unk_1002AC0F0);
        v22 = v108;
        sub_100025A28((uint64_t)v108, (uint64_t *)&unk_1002AC0F0);
        v25 = v109;
        sub_100025A28((uint64_t)v109, (uint64_t *)&unk_1002AC0F0);
        v28 = v107;
        sub_100025A28((uint64_t)v107, (uint64_t *)&unk_1002AC0F0);
        v100 = v129 < v94;
        v30 = v115;
        v31 = v114;
        if (v100)
          goto LABEL_12;
        goto LABEL_8;
      }
      v95 = (uint64_t)v109;
      v96 = v123 | (v133 << 8) | (v131 << 16) | (v132 << 24) | (v144 << 32) | (v138 << 40) | (v143 << 48) | (v142 << 56);
      v97 = v141 | (v140 << 8) | (v139 << 16) | (v130 << 24) | (v137 << 32) | (v89 << 40) | (v136 << 48) | (v135 << 56);
      v98 = v160 | (v159 << 8) | (v158 << 16) | (v157 << 24) | (v156 << 32) | (v155 << 40) | (v154 << 48) | (v153 << 56);
      v99 = v152 | (v151 << 8) | (v150 << 16) | (v149 << 24) | (v148 << 32) | (v147 << 40) | (v146 << 48) | (v145 << 56);
      if ((static UniversalControlDeviceID.< infix(_:_:)(v96, v97, v98, v99) & 1) == 0)
        break;
      sub_100025A28((uint64_t)v92, (uint64_t *)&unk_1002AC0F0);
      sub_100025A28((uint64_t)v117, (uint64_t *)&unk_1002AC0F0);
      sub_100025A28((uint64_t)v19, (uint64_t *)&unk_1002AC0F0);
      v22 = v108;
      sub_100025A28((uint64_t)v108, (uint64_t *)&unk_1002AC0F0);
      v25 = (_BYTE *)v95;
      sub_100025A28(v95, (uint64_t *)&unk_1002AC0F0);
      v28 = v107;
      sub_100025A28((uint64_t)v107, (uint64_t *)&unk_1002AC0F0);
      v30 = v115;
      v31 = v114;
LABEL_8:
      v101 = *v121;
      if (!*v121)
      {
        __break(1u);
        return;
      }
      v102 = v101 + v31 + v161;
      v103 = v101 + v30 + v161;
      sub_10005FA70(v102, v118, (uint64_t *)&unk_1002AC0F0);
      swift_arrayInitWithTakeFrontToBack(v102, v103, 1, v128);
      sub_10005FA70(v118, v103, (uint64_t *)&unk_1002AC0F0);
      v161 -= v113;
      if (v116 == ++v122)
        goto LABEL_12;
    }
    static UniversalControlDeviceID.< infix(_:_:)(v98, v99, v96, v97);
    sub_100025A28((uint64_t)v92, (uint64_t *)&unk_1002AC0F0);
    sub_100025A28((uint64_t)v117, (uint64_t *)&unk_1002AC0F0);
    sub_100025A28((uint64_t)v19, (uint64_t *)&unk_1002AC0F0);
    v22 = v108;
    sub_100025A28((uint64_t)v108, (uint64_t *)&unk_1002AC0F0);
    v25 = (_BYTE *)v95;
    sub_100025A28(v95, (uint64_t *)&unk_1002AC0F0);
    v28 = v107;
    sub_100025A28((uint64_t)v107, (uint64_t *)&unk_1002AC0F0);
    v30 = v115;
    v31 = v114;
LABEL_12:
    v30 += v113;
    v31 += v113;
    if (++v116 != v105)
      continue;
    break;
  }
}

void sub_1001647A8()
{
  void (*v0)(char *, uint64_t, uint64_t);
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(void);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(void);
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  sub_10003AFC4();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v47 = v7;
  v8 = sub_10016AB20();
  v53 = *(_QWORD *)(v8 - 8);
  v54 = v8;
  sub_1000262EC();
  __chkstk_darwin(v9);
  sub_10003D69C();
  v52 = v10;
  sub_1000A3464();
  __chkstk_darwin(v11);
  sub_100026A8C();
  v51 = v12;
  v13 = sub_1000B9A80();
  v61 = *(_QWORD **)(v13 - 8);
  sub_1000262EC();
  __chkstk_darwin(v14);
  v58 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000A3464();
  __chkstk_darwin(v16);
  sub_1000A34C8();
  v50 = v17;
  sub_1000A3464();
  __chkstk_darwin(v18);
  sub_100026A8C();
  v65 = v19;
  v57 = v4;
  v46 = v6;
  if (v4 != v6)
  {
    v20 = v61[9];
    v48 = (void (*)(void))v61[2];
    v49 = v2;
    v21 = v20 * (v57 - 1);
    v55 = v20;
    v22 = v20 * v57;
    v23 = v50;
    while (2)
    {
      v24 = 0;
      v62 = v47;
      v56 = v22;
      do
      {
        v25 = *v2;
        v60 = v22 + v24;
        v26 = v48;
        v48();
        v59 = v21 + v24;
        v27 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v26)(v23, v21 + v24 + v25, v13);
        v28 = v51;
        v29 = UniversalControlLink.endpoint2.getter(v27);
        v30 = sub_10016AD88(v29);
        v63 = v31;
        v64 = v30;
        v32 = *(uint64_t (**)(uint64_t, uint64_t))(v53 + 8);
        v33 = v28;
        v34 = v54;
        v35 = v32(v33, v54);
        v36 = v21;
        v37 = v13;
        v38 = v52;
        v39 = sub_10016AED4(v35);
        v40 = v38;
        UniversalControlLink.Endpoint.device.getter(v39);
        sub_10016AE14();
        v41 = v38;
        v13 = v37;
        v21 = v36;
        v22 = v56;
        v32(v41, v34);
        LOBYTE(v40) = static UniversalControlDeviceID.< infix(_:_:)(v64, v63, v40, v0);
        sub_10016ABA4(v23);
        sub_10016ABA4(v65);
        v2 = v49;
        if ((v40 & 1) == 0)
          break;
        v42 = *v49;
        if (!*v49)
        {
          __break(1u);
          return;
        }
        v43 = v42 + v22 + v24;
        v44 = (char *)(v42 + v21 + v24);
        v0 = (void (*)(char *, uint64_t, uint64_t))v61[4];
        v0(v58, v43, v13);
        swift_arrayInitWithTakeFrontToBack(v43, v44, 1, v13);
        v0(v44, (uint64_t)v58, v13);
        v24 -= v55;
        ++v62;
      }
      while (v57 != v62);
      v21 += v55;
      v22 += v55;
      if (++v57 != v46)
        continue;
      break;
    }
  }
  sub_10003AF60();
}

uint64_t sub_100164A54(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 8 * a3 - 8;
    while (2)
    {
      v9 = *(_QWORD *)(v7 + 8 * v4);
      v10 = v6;
      v11 = (_QWORD *)v8;
      do
      {
        result = static UniversalControlDeviceID.< infix(_:_:)(*(_QWORD *)(v9 + 40), *(_QWORD *)(v9 + 48), *(_QWORD *)(*v11 + 40), *(_QWORD *)(*v11 + 48));
        if ((result & 1) == 0)
          break;
        if (!v7)
        {
          __break(1u);
          return result;
        }
        v12 = *v11;
        v9 = v11[1];
        *v11 = v9;
        v11[1] = v12;
        --v11;
        ++v10;
      }
      while (v4 != v10);
      ++v4;
      v8 += 8;
      if (v4 != a2)
        continue;
      break;
    }
  }
  return result;
}

uint64_t sub_100164AF8(char *a1, char *a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  BOOL v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  char *v19;
  char *v20;
  char *v21;
  BOOL v22;
  BOOL v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v4 = a4;
  v6 = a2;
  v7 = a1;
  v8 = a2 - a1;
  v9 = (a2 - a1) / 64;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 64;
  if (v9 >= v11)
  {
    sub_100078F2C(a2, (uint64_t)(a3 - (_QWORD)a2) / 64, a4);
    v12 = &v4[64 * v11];
    if (v7 >= v6 || v10 < 64)
      goto LABEL_35;
    v19 = (char *)(a3 - 64);
    while (1)
    {
      v20 = v19 + 64;
      v21 = v6 - 64;
      if ((static UniversalControlDisplayID.< infix(_:_:)(*((_QWORD *)v12 - 8), *((_QWORD *)v12 - 7), *((_QWORD *)v12 - 6), *((_QWORD *)v12 - 5), *((_QWORD *)v6 - 8), *((_QWORD *)v6 - 7), *((_QWORD *)v6 - 6), *((_QWORD *)v6 - 5)) & 1) != 0)
      {
        v22 = v20 != v6 || v19 >= v6;
        v6 -= 64;
        if (!v22)
          goto LABEL_31;
      }
      else
      {
        v23 = v20 != v12 || v19 >= v12;
        v21 = v12 - 64;
        v12 -= 64;
        if (!v23)
          goto LABEL_31;
      }
      v24 = *(_OWORD *)v21;
      v25 = *((_OWORD *)v21 + 1);
      v26 = *((_OWORD *)v21 + 3);
      *((_OWORD *)v19 + 2) = *((_OWORD *)v21 + 2);
      *((_OWORD *)v19 + 3) = v26;
      *(_OWORD *)v19 = v24;
      *((_OWORD *)v19 + 1) = v25;
LABEL_31:
      v19 -= 64;
      if (v12 <= v4 || v6 <= v7)
        goto LABEL_35;
    }
  }
  sub_100078F2C(a1, (a2 - a1) / 64, a4);
  v12 = &v4[64 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 64)
  {
    while ((static UniversalControlDisplayID.< infix(_:_:)(*(_QWORD *)v6, *((_QWORD *)v6 + 1), *((_QWORD *)v6 + 2), *((_QWORD *)v6 + 3), *(_QWORD *)v4, *((_QWORD *)v4 + 1), *((_QWORD *)v4 + 2), *((_QWORD *)v4 + 3)) & 1) == 0)
    {
      v13 = v4;
      v14 = v7 == v4;
      v4 += 64;
      if (!v14)
        goto LABEL_9;
LABEL_10:
      v7 += 64;
      if (v4 >= v12 || (unint64_t)v6 >= a3)
        goto LABEL_15;
    }
    v13 = v6;
    v14 = v7 == v6;
    v6 += 64;
    if (v14)
      goto LABEL_10;
LABEL_9:
    v15 = *(_OWORD *)v13;
    v16 = *((_OWORD *)v13 + 1);
    v17 = *((_OWORD *)v13 + 3);
    *((_OWORD *)v7 + 2) = *((_OWORD *)v13 + 2);
    *((_OWORD *)v7 + 3) = v17;
    *(_OWORD *)v7 = v15;
    *((_OWORD *)v7 + 1) = v16;
    goto LABEL_10;
  }
LABEL_15:
  v6 = v7;
LABEL_35:
  sub_100078F2C(v4, (v12 - v4) / 64, v6);
  return 1;
}

void sub_100164CA4(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 *v40;
  uint64_t v41;
  unsigned __int8 *v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  unsigned __int8 *v62;
  uint64_t v63;
  unsigned __int8 v64;
  uint64_t v65;
  unsigned __int8 v66;
  uint64_t v67;
  unsigned __int8 v68;
  uint64_t v69;
  unsigned __int8 v70;
  uint64_t v71;
  unsigned __int8 v72;
  uint64_t v73;
  unsigned __int8 v74;
  uint64_t v75;
  unsigned __int8 v76;
  unsigned __int8 v77;
  uint64_t v78;
  void (*v79)(char *, unsigned __int8 *, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned __int8 v83;
  unsigned __int8 v84;
  unsigned __int8 v85;
  unsigned __int8 v86;
  uint64_t v87;
  unsigned __int8 v88;
  uint64_t v89;
  unsigned __int8 v90;
  unsigned __int8 v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  void (*v96)(char *, unsigned __int8 *, uint64_t);
  uint64_t v97;
  _BYTE *v98;
  _BYTE *v99;
  uint64_t v100;
  void (*v101)(_BYTE *, uint64_t);
  _BYTE *v102;
  _BYTE *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _BYTE *v107;
  uint64_t v108;
  _BYTE *v109;
  void (*v110)(char *, char *, uint64_t);
  void (*v111)(void);
  char *v112;
  uint64_t v113;
  _BYTE *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  BOOL v125;
  BOOL v126;
  BOOL v127;
  uint64_t v128;
  _BYTE *v129;
  unsigned __int8 *v130;
  uint64_t v131;
  uint64_t v132;
  _BYTE *v133;
  uint64_t v134;
  _BYTE *v135;
  unsigned __int8 v136;
  unsigned __int8 v137;
  uint64_t v138;
  uint64_t v139;
  unsigned __int8 v140;
  uint64_t v141;
  unsigned __int8 v142;
  uint64_t v143;
  unsigned __int8 v144;
  uint64_t v145;
  unsigned __int8 v146;
  uint64_t v147;
  unsigned __int8 v148;
  uint64_t v149;
  unsigned __int8 v150;
  uint64_t v151;
  void (*v152)(void);
  uint64_t v153;
  void (*v154)(void);
  _BYTE *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  unsigned __int8 v159;
  uint64_t v160;
  unint64_t v161;
  unsigned __int8 v162;
  uint64_t v163;
  unsigned __int8 v164;
  uint64_t v165;
  unsigned __int8 v166;
  unsigned __int8 v167;
  unsigned __int8 v168;
  uint64_t v169;
  void (*v170)(void);
  _BYTE *v171;
  _BYTE *v172;
  uint64_t v173;
  void (*v174)(_BYTE *, uint64_t);
  _BYTE *v175;
  _BYTE *v176;
  char v177;
  char v178;
  uint64_t v179;
  uint64_t v180;
  _BYTE *v181;
  _BOOL4 v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  char *v188;
  unint64_t v189;
  unint64_t v190;
  void (*v191)(void);
  _BYTE *v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  BOOL v199;
  unint64_t v200;
  _BYTE *v201;
  uint64_t v204;
  uint64_t *v205;
  BOOL v206;
  int64_t v207;
  uint64_t v209;
  _BYTE *v210;
  uint64_t v211;
  _BYTE *v212;
  _BYTE *v213;
  uint64_t v214;
  char *v215;
  unsigned __int8 *v216;
  _BYTE *v217;
  _BYTE *v218;
  void (*v219)(void);
  unint64_t v220;
  uint64_t v221;
  unsigned __int8 *v222;
  uint64_t v223;
  _BYTE *v224;
  char *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  _BYTE *v232;
  unint64_t v233;
  uint64_t v234;
  unint64_t v235;
  unint64_t v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;

  v220 = a3;
  v264 = sub_1000055B0((uint64_t *)&unk_1002AC0F0);
  v7 = __chkstk_darwin(v264);
  v226 = (uint64_t)&v209 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v225 = (char *)&v209 - v10;
  v11 = __chkstk_darwin(v9);
  v213 = (char *)&v209 - v12;
  v13 = __chkstk_darwin(v11);
  v212 = (char *)&v209 - v14;
  v15 = __chkstk_darwin(v13);
  v224 = (char *)&v209 - v16;
  v17 = __chkstk_darwin(v15);
  v223 = (uint64_t)&v209 - v18;
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v209 - v20;
  v22 = __chkstk_darwin(v19);
  v222 = (unsigned __int8 *)&v209 - v23;
  v24 = __chkstk_darwin(v22);
  v219 = (void (*)(void))((char *)&v209 - v25);
  v26 = __chkstk_darwin(v24);
  v221 = (uint64_t)&v209 - v27;
  v28 = __chkstk_darwin(v26);
  v218 = (char *)&v209 - v29;
  v30 = __chkstk_darwin(v28);
  v217 = (char *)&v209 - v31;
  v32 = __chkstk_darwin(v30);
  v34 = (char *)&v209 - v33;
  v35 = __chkstk_darwin(v32);
  v37 = (char *)&v209 - v36;
  v38 = __chkstk_darwin(v35);
  v40 = (unsigned __int8 *)&v209 - v39;
  __chkstk_darwin(v38);
  v42 = (unsigned __int8 *)&v209 - v41;
  v44 = *(_QWORD *)(v43 + 72);
  if (!v44)
  {
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }
  if (a2 - a1 == 0x8000000000000000 && v44 == -1)
    goto LABEL_88;
  v46 = v220 - a2;
  if (v220 - a2 == 0x8000000000000000 && v44 == -1)
    goto LABEL_89;
  v263 = a2;
  v48 = (uint64_t)(a2 - a1) / v44;
  v49 = v46 / v44;
  v214 = v44;
  if (v48 >= v46 / v44)
  {
    v55 = v263;
    sub_100078F80(v263, v49);
    v56 = v49 * v44;
    v57 = v55;
    v51 = a4 + v56;
    if (v56 < 1 || a1 >= v55)
    {
      v54 = v44;
      goto LABEL_82;
    }
    v128 = -v44;
    v129 = (_BYTE *)v220;
    v236 = a4;
    v237 = a1;
    v211 = -v44;
    v210 = v21;
    while (1)
    {
      v217 = v129;
      v235 = v51;
      v216 = (unsigned __int8 *)(v51 + v128);
      v130 = v222;
      sub_1000FB4A8(v51 + v128, (uint64_t)v222, (uint64_t *)&unk_1002AC0F0);
      v263 = v57;
      v215 = (char *)(v57 + v128);
      sub_1000FB4A8(v57 + v128, (uint64_t)v21, (uint64_t *)&unk_1002AC0F0);
      v131 = *(int *)(v264 + 48);
      v132 = v264;
      v133 = (_BYTE *)v223;
      v134 = v223 + v131;
      v238 = v223 + v131;
      v135 = &v21[v131];
      v239 = *v21;
      v136 = v21[1];
      v234 = v136;
      v137 = v21[2];
      v245 = v137;
      v138 = v21[3];
      v139 = v21[4];
      v140 = v21[5];
      v261 = v140;
      v262 = v139;
      v141 = v21[6];
      v142 = v21[7];
      v259 = v142;
      v260 = v141;
      v143 = v21[8];
      v257 = v138;
      v258 = v143;
      v144 = v21[9];
      v240 = v144;
      v145 = v21[10];
      v146 = v21[11];
      v255 = v146;
      v256 = v145;
      v147 = v21[12];
      v148 = v21[13];
      v253 = v148;
      v254 = v147;
      v149 = v21[14];
      v150 = v21[15];
      v251 = v150;
      v252 = v149;
      *(_BYTE *)v223 = v239;
      v133[1] = v136;
      v133[2] = v137;
      v133[3] = v138;
      v133[4] = v139;
      v133[5] = v140;
      v133[6] = v141;
      v133[7] = v142;
      v133[8] = v143;
      v133[9] = v144;
      v133[10] = v145;
      v133[11] = v146;
      v133[12] = v147;
      v133[13] = v148;
      v133[14] = v149;
      v133[15] = v150;
      v151 = type metadata accessor for UniversalControlDisplayLayout(0);
      v221 = *(_QWORD *)(v151 - 8);
      v152 = *(void (**)(void))(v221 + 16);
      v153 = v151;
      ((void (*)(uint64_t, _BYTE *))v152)(v134, v135);
      v154 = v152;
      v155 = v224;
      v232 = &v224[*(int *)(v132 + 48)];
      v250 = *v130;
      v156 = (char *)v130[1];
      v157 = v130[2];
      v158 = v130[3];
      v159 = v130[4];
      v228 = v159;
      v160 = v130[5];
      v161 = v130[6];
      v162 = v130[7];
      v248 = v162;
      v249 = v160;
      LOBYTE(v147) = v130[8];
      v233 = v147;
      v163 = v130[9];
      v164 = v130[10];
      v246 = v164;
      v247 = v163;
      v165 = v130[11];
      v166 = v130[12];
      v243 = v166;
      v244 = v165;
      v167 = v130[13];
      v242 = v167;
      v168 = v130[14];
      v227 = v168;
      LOBYTE(v135) = v130[15];
      v241 = v135;
      *v224 = v250;
      v155[1] = (_BYTE)v156;
      v231 = v156;
      v155[2] = v157;
      v230 = v157;
      v155[3] = v158;
      v229 = v158;
      v155[4] = v159;
      v155[5] = v160;
      v155[6] = v161;
      v220 = v161;
      v155[7] = v162;
      v155[8] = v147;
      v155[9] = v163;
      v155[10] = v164;
      v155[11] = v165;
      v155[12] = v166;
      v155[13] = v167;
      v155[14] = v168;
      v155[15] = (_BYTE)v135;
      v169 = v153;
      v170 = v154;
      v154();
      v171 = v212;
      v172 = &v212[*(int *)(v132 + 48)];
      *v212 = v239;
      v171[1] = v234;
      v171[2] = v245;
      v171[3] = v257;
      v171[4] = v262;
      v171[5] = v261;
      v171[6] = v260;
      v171[7] = v259;
      v171[8] = v258;
      v171[9] = v240;
      v171[10] = v256;
      v171[11] = v255;
      v171[12] = v254;
      v171[13] = v253;
      v171[14] = v252;
      v171[15] = v251;
      v173 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v170)(v172, v238, v169);
      v219 = v170;
      v218 = (_BYTE *)UniversalControlDisplayLayout.version.getter(v173);
      v174 = *(void (**)(_BYTE *, uint64_t))(v221 + 8);
      v174(v172, v169);
      v175 = v213;
      v176 = &v213[*(int *)(v132 + 48)];
      *v213 = v250;
      v175[1] = (_BYTE)v156;
      v175[2] = v157;
      v175[3] = v158;
      v177 = v228;
      v175[4] = v228;
      v175[5] = v249;
      v175[6] = v161;
      v175[7] = v248;
      v175[8] = v233;
      v175[9] = v247;
      v175[10] = v246;
      v175[11] = v244;
      v175[12] = v243;
      v175[13] = v242;
      v178 = v227;
      v175[14] = v227;
      v175[15] = v241;
      v179 = ((uint64_t (*)(_BYTE *, _BYTE *, uint64_t))v170)(v176, v232, v169);
      v180 = UniversalControlDisplayLayout.version.getter(v179);
      v181 = v218;
      v182 = v180 >= (uint64_t)v218;
      v174(v176, v169);
      v183 = v234;
      v206 = (uint64_t)v181 < v180;
      v184 = v264;
      v185 = *(int *)(v264 + 48);
      v186 = v239;
      v187 = v206 ? 1 : 2 * v182;
      v188 = v225;
      *v225 = v250;
      v188[1] = (char)v231;
      v188[2] = v230;
      v188[3] = v229;
      v188[4] = v177;
      v188[5] = v249;
      v189 = v220;
      v188[6] = v220;
      v188[7] = v248;
      v190 = v233;
      v188[8] = v233;
      v188[9] = v247;
      v188[10] = v246;
      v188[11] = v244;
      v188[12] = v243;
      v188[13] = v242;
      v188[14] = v178;
      v188[15] = v241;
      v191 = v219;
      ((void (*)(char *, _BYTE *, uint64_t))v219)(&v188[v185], v232, v169);
      v192 = (_BYTE *)v226;
      v193 = v226 + *(int *)(v184 + 48);
      *(_BYTE *)v226 = v186;
      v192[1] = v183;
      v192[2] = v245;
      v192[3] = v257;
      v192[4] = v262;
      v192[5] = v261;
      v192[6] = v260;
      v192[7] = v259;
      v192[8] = v258;
      v194 = v240;
      v192[9] = v240;
      v192[10] = v256;
      v192[11] = v255;
      v192[12] = v254;
      v192[13] = v253;
      v192[14] = v252;
      v192[15] = v251;
      ((void (*)(uint64_t, uint64_t, uint64_t))v191)(v193, v238, v169);
      if (v187 == 2)
      {
        v195 = v250 | ((_QWORD)v231 << 8) | (v230 << 16) | (v229 << 24) | (v228 << 32) | (v249 << 40) | (v189 << 48) | (v248 << 56);
        v196 = v190 | (v247 << 8) | (v246 << 16) | (v244 << 24) | (v243 << 32) | (v242 << 40) | (v227 << 48) | (v241 << 56);
        v197 = v186 | (v183 << 8) | (v245 << 16) | (v257 << 24) | (v262 << 32) | (v261 << 40) | (v260 << 48) | (v259 << 56);
        v198 = v258 | (v194 << 8) | (v256 << 16) | (v255 << 24) | (v254 << 32) | (v253 << 40) | (v252 << 48) | (v251 << 56);
        if ((static UniversalControlDeviceID.< infix(_:_:)(v195, v196, v197, v198) & 1) != 0)
        {
          v199 = 1;
        }
        else
        {
          static UniversalControlDeviceID.< infix(_:_:)(v197, v198, v195, v196);
          v199 = 0;
        }
      }
      else
      {
        v199 = v187 != 0;
      }
      v200 = v237;
      v57 = v263;
      v201 = v217;
      v21 = v210;
      v128 = v211;
      v129 = &v217[v211];
      sub_100025A28(v226, (uint64_t *)&unk_1002AC0F0);
      sub_100025A28((uint64_t)v225, (uint64_t *)&unk_1002AC0F0);
      sub_100025A28((uint64_t)v224, (uint64_t *)&unk_1002AC0F0);
      sub_100025A28(v223, (uint64_t *)&unk_1002AC0F0);
      sub_100025A28((uint64_t)v21, (uint64_t *)&unk_1002AC0F0);
      sub_100025A28((uint64_t)v222, (uint64_t *)&unk_1002AC0F0);
      if (v199)
        break;
      if ((unint64_t)v201 < v235 || (unint64_t)v129 >= v235)
      {
        v204 = (uint64_t)v216;
        swift_arrayInitWithTakeFrontToBack(&v201[v128], v216, 1, v264);
      }
      else
      {
        if (v201 == (_BYTE *)v235)
        {
          v205 = &v248;
LABEL_75:
          v51 = *(v205 - 32);
          goto LABEL_76;
        }
        v204 = (uint64_t)v216;
        swift_arrayInitWithTakeBackToFront(&v201[v128], v216, 1, v264);
      }
      v51 = v204;
LABEL_76:
      a4 = v236;
      v206 = v51 > v236 && v57 > v200;
      if (!v206)
      {
        v54 = v214;
        goto LABEL_82;
      }
    }
    if ((unint64_t)v201 < v57 || (unint64_t)v129 >= v57)
    {
      v57 = (unint64_t)v215;
      swift_arrayInitWithTakeFrontToBack(&v201[v128], v215, 1, v264);
    }
    else if (v201 == (_BYTE *)v57)
    {
      v57 = (unint64_t)v215;
    }
    else
    {
      v57 = (unint64_t)v215;
      swift_arrayInitWithTakeBackToFront(&v201[v128], v215, 1, v264);
    }
    v205 = &v265;
    goto LABEL_75;
  }
  v50 = v48;
  sub_100078F80(a1, v48);
  v51 = a4 + v50 * v44;
  v52 = v263;
  if (v50 * v44 < 1 || v263 >= v220)
  {
    v54 = v44;
    goto LABEL_82;
  }
  v235 = a4 + v50 * v44;
  v211 = (uint64_t)v42;
  v216 = v40;
  v215 = v37;
  do
  {
    v237 = a1;
    v263 = v52;
    sub_1000FB4A8(v52, (uint64_t)v42, (uint64_t *)&unk_1002AC0F0);
    v236 = a4;
    sub_1000FB4A8(a4, (uint64_t)v40, (uint64_t *)&unk_1002AC0F0);
    v59 = *(int *)(v264 + 48);
    v60 = v264;
    v61 = &v37[v59];
    v62 = &v40[v59];
    v234 = *v40;
    v63 = v40[1];
    v64 = v40[2];
    v261 = v64;
    v262 = v63;
    v65 = v40[3];
    v66 = v40[4];
    v259 = v66;
    v260 = v65;
    v67 = v40[5];
    v68 = v40[6];
    v257 = v68;
    v258 = v67;
    v69 = v40[7];
    v70 = v40[8];
    v255 = v70;
    v256 = v69;
    v71 = v40[9];
    v72 = v40[10];
    v253 = v72;
    v254 = v71;
    v73 = v40[11];
    v74 = v40[12];
    v251 = v74;
    v252 = v73;
    v75 = v40[13];
    v76 = v40[14];
    v249 = v76;
    v250 = v75;
    v77 = v40[15];
    v248 = v77;
    *v37 = v234;
    v37[1] = v63;
    v37[2] = v64;
    v37[3] = v65;
    v37[4] = v66;
    v37[5] = v67;
    v37[6] = v68;
    v37[7] = v69;
    v37[8] = v70;
    v37[9] = v71;
    v37[10] = v72;
    v37[11] = v73;
    v37[12] = v74;
    v37[13] = v75;
    v37[14] = v76;
    v37[15] = v77;
    v78 = type metadata accessor for UniversalControlDisplayLayout(0);
    v226 = *(_QWORD *)(v78 - 8);
    v79 = *(void (**)(char *, unsigned __int8 *, uint64_t))(v226 + 16);
    v225 = v61;
    v79(v61, v62, v78);
    v80 = v60;
    v231 = &v34[*(int *)(v60 + 48)];
    v230 = *v42;
    v81 = v42[1];
    v82 = v42[2];
    v83 = v42[3];
    v228 = v83;
    v84 = v42[4];
    v227 = v84;
    v85 = v42[5];
    v247 = v85;
    v86 = v42[6];
    v232 = (_BYTE *)v86;
    v87 = v42[7];
    v88 = v42[8];
    v245 = v88;
    v246 = v87;
    v89 = v42[9];
    v90 = v42[10];
    v243 = v90;
    v244 = v89;
    v91 = v42[11];
    v242 = v91;
    v92 = v42[12];
    v241 = v92;
    v93 = v42[13];
    v240 = v93;
    v94 = v42[14];
    v239 = v94;
    v95 = v42[15];
    v238 = v95;
    *v34 = v230;
    v34[1] = v81;
    v229 = v81;
    v34[2] = v82;
    v34[3] = v83;
    v34[4] = v84;
    v34[5] = v85;
    v34[6] = v86;
    v34[7] = v87;
    v34[8] = v88;
    v34[9] = v89;
    v34[10] = v90;
    v34[11] = v91;
    v34[12] = v92;
    v34[13] = v93;
    v34[14] = v94;
    v34[15] = v95;
    v96 = v79;
    v233 = (unint64_t)v79;
    ((void (*)(void))v79)();
    v97 = v80;
    v98 = v217;
    v99 = &v217[*(int *)(v80 + 48)];
    *v217 = v234;
    v98[1] = v262;
    v98[2] = v261;
    v98[3] = v260;
    v98[4] = v259;
    v98[5] = v258;
    v98[6] = v257;
    v98[7] = v256;
    v98[8] = v255;
    v98[9] = v254;
    v98[10] = v253;
    v98[11] = v252;
    v98[12] = v251;
    v98[13] = v250;
    v98[14] = v249;
    v98[15] = v248;
    v100 = ((uint64_t (*)(_BYTE *, char *, uint64_t))v96)(v99, v61, v78);
    v224 = (_BYTE *)UniversalControlDisplayLayout.version.getter(v100);
    v101 = *(void (**)(_BYTE *, uint64_t))(v226 + 8);
    v101(v99, v78);
    v102 = v218;
    v103 = &v218[*(int *)(v97 + 48)];
    LOBYTE(v61) = v230;
    *v218 = v230;
    v102[1] = v81;
    v102[2] = v82;
    LOBYTE(v81) = v228;
    v102[3] = v228;
    LOBYTE(v97) = v227;
    v102[4] = v227;
    v102[5] = v247;
    v102[6] = (_BYTE)v232;
    v102[7] = v246;
    v102[8] = v245;
    v102[9] = v244;
    v102[10] = v243;
    v102[11] = v242;
    v102[12] = v241;
    v102[13] = v240;
    v102[14] = v239;
    v102[15] = v238;
    v104 = ((uint64_t (*)(_BYTE *, char *, uint64_t))v233)(v103, v231, v78);
    v226 = UniversalControlDisplayLayout.version.getter(v104);
    v101(v103, v78);
    v105 = v234;
    v106 = v264;
    v107 = (_BYTE *)v221;
    v108 = v221 + *(int *)(v264 + 48);
    *(_BYTE *)v221 = (_BYTE)v61;
    v107[1] = v229;
    v223 = v82;
    v107[2] = v82;
    v107[3] = v81;
    v107[4] = v97;
    v107[5] = v247;
    v109 = v232;
    v107[6] = (_BYTE)v232;
    v107[7] = v246;
    v107[8] = v245;
    v107[9] = v244;
    v107[10] = v243;
    v107[11] = v242;
    v107[12] = v241;
    v107[13] = v240;
    v107[14] = v239;
    v107[15] = v238;
    v110 = (void (*)(char *, char *, uint64_t))v233;
    ((void (*)(uint64_t, char *, uint64_t))v233)(v108, v231, v78);
    v111 = v219;
    v112 = (char *)v219 + *(int *)(v106 + 48);
    v113 = v105;
    *(_BYTE *)v219 = v105;
    *((_BYTE *)v111 + 1) = v262;
    *((_BYTE *)v111 + 2) = v261;
    *((_BYTE *)v111 + 3) = v260;
    *((_BYTE *)v111 + 4) = v259;
    *((_BYTE *)v111 + 5) = v258;
    *((_BYTE *)v111 + 6) = v257;
    *((_BYTE *)v111 + 7) = v256;
    *((_BYTE *)v111 + 8) = v255;
    *((_BYTE *)v111 + 9) = v254;
    *((_BYTE *)v111 + 10) = v253;
    *((_BYTE *)v111 + 11) = v252;
    *((_BYTE *)v111 + 12) = v251;
    *((_BYTE *)v111 + 13) = v250;
    *((_BYTE *)v111 + 14) = v249;
    *((_BYTE *)v111 + 15) = v248;
    v114 = v224;
    v110(v112, v225, v78);
    v115 = v226;
    if (v114 == (_BYTE *)v226)
    {
      v116 = (uint64_t)v216;
      v117 = (uint64_t)v215;
      v118 = v230 | (v229 << 8) | (v223 << 16) | (v228 << 24) | (v227 << 32) | (v247 << 40) | ((_QWORD)v109 << 48) | (v246 << 56);
      v119 = v245 | (v244 << 8) | (v243 << 16) | (v242 << 24) | (v241 << 32) | (v240 << 40) | (v239 << 48) | (v238 << 56);
      v120 = v113 | (v262 << 8) | (v261 << 16) | (v260 << 24) | (v259 << 32) | (v258 << 40) | (v257 << 48) | (v256 << 56);
      v121 = v255 | (v254 << 8) | (v253 << 16) | (v252 << 24) | (v251 << 32) | (v250 << 40) | (v249 << 48) | (v248 << 56);
      if ((static UniversalControlDeviceID.< infix(_:_:)(v118, v119, v120, v121) & 1) != 0)
      {
        sub_100025A28((uint64_t)v111, (uint64_t *)&unk_1002AC0F0);
        sub_100025A28(v221, (uint64_t *)&unk_1002AC0F0);
        sub_100025A28((uint64_t)v34, (uint64_t *)&unk_1002AC0F0);
        v37 = (char *)v117;
        sub_100025A28(v117, (uint64_t *)&unk_1002AC0F0);
        v40 = (unsigned __int8 *)v116;
        sub_100025A28(v116, (uint64_t *)&unk_1002AC0F0);
        v42 = (unsigned __int8 *)v211;
        sub_100025A28(v211, (uint64_t *)&unk_1002AC0F0);
        v54 = v214;
LABEL_28:
        v122 = v263;
        v123 = v263 + v54;
        v124 = v237;
        v125 = v237 < v263 || v237 >= v123;
        a4 = v236;
        if (v125)
          goto LABEL_33;
        goto LABEL_39;
      }
      static UniversalControlDeviceID.< infix(_:_:)(v120, v121, v118, v119);
      sub_100025A28((uint64_t)v111, (uint64_t *)&unk_1002AC0F0);
      sub_100025A28(v221, (uint64_t *)&unk_1002AC0F0);
      sub_100025A28((uint64_t)v34, (uint64_t *)&unk_1002AC0F0);
      v37 = (char *)v117;
      sub_100025A28(v117, (uint64_t *)&unk_1002AC0F0);
      v40 = (unsigned __int8 *)v116;
      sub_100025A28(v116, (uint64_t *)&unk_1002AC0F0);
      v42 = (unsigned __int8 *)v211;
      sub_100025A28(v211, (uint64_t *)&unk_1002AC0F0);
      v54 = v214;
    }
    else
    {
      sub_100025A28((uint64_t)v111, (uint64_t *)&unk_1002AC0F0);
      sub_100025A28((uint64_t)v107, (uint64_t *)&unk_1002AC0F0);
      sub_100025A28((uint64_t)v34, (uint64_t *)&unk_1002AC0F0);
      v37 = v215;
      sub_100025A28((uint64_t)v215, (uint64_t *)&unk_1002AC0F0);
      v40 = v216;
      sub_100025A28((uint64_t)v216, (uint64_t *)&unk_1002AC0F0);
      v42 = (unsigned __int8 *)v211;
      sub_100025A28(v211, (uint64_t *)&unk_1002AC0F0);
      v54 = v214;
      if (v115 >= (uint64_t)v114)
        goto LABEL_28;
    }
    v122 = v236;
    a4 = v236 + v54;
    v124 = v237;
    v126 = v237 < v236 || v237 >= a4;
    v123 = v263;
    if (v126)
    {
LABEL_33:
      swift_arrayInitWithTakeFrontToBack(v124, v122, 1, v264);
      goto LABEL_41;
    }
LABEL_39:
    if (v124 != v122)
      swift_arrayInitWithTakeBackToFront(v124, v122, 1, v264);
LABEL_41:
    v51 = v235;
    a1 = v124 + v54;
    v127 = a4 >= v235 || v123 >= v220;
    v52 = v123;
  }
  while (!v127);
LABEL_82:
  v207 = v51 - a4;
  if (v54 != -1 || v207 != 0x8000000000000000)
  {
    sub_100078F80(a4, v207 / v54);
    return;
  }
LABEL_90:
  __break(1u);
}

void sub_10016615C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  int64_t v29;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, unint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  unint64_t v52;
  unint64_t v53;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v60;
  uint64_t (*v61)(uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t (*v70)(uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  void (*v76)(uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int64_t v85;
  uint64_t v87;
  uint64_t (*v88)(uint64_t);
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t (*v92)(uint64_t, unint64_t, uint64_t);
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;

  sub_10003AFC4();
  v108 = v1;
  v109 = v2;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v101 = sub_10016AB20();
  sub_10016A76C();
  __chkstk_darwin(v11);
  v100 = (char *)&v87 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000A3464();
  v14 = __chkstk_darwin(v13);
  sub_10016B0AC(v14, v15, v16, v17, v18, v19, v20, v21, v87);
  v107 = sub_1000B9A80();
  __chkstk_darwin(v107);
  sub_10003D69C();
  v98 = v22;
  sub_1000A3464();
  __chkstk_darwin(v23);
  sub_100026A8C();
  v97 = v25;
  v102 = v24;
  v26 = *(_QWORD *)(v24 + 72);
  if (!v26)
  {
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }
  v27 = v8 - v10;
  if (v8 - v10 == 0x8000000000000000 && v26 == -1)
    goto LABEL_76;
  v29 = v6 - v8;
  if (v6 - v8 == 0x8000000000000000 && v26 == -1)
    goto LABEL_77;
  v31 = v27 / v26;
  v32 = v29 / v26;
  v96 = *(_QWORD *)(v24 + 72);
  if (v27 / v26 >= v29 / v26)
  {
    sub_100078F8C(v8, v29 / v26);
    v33 = v4 + v32 * v26;
    if (v32 * v26 < 1 || v10 >= v8)
      goto LABEL_70;
    v89 = -v26;
    v88 = *(uint64_t (**)(uint64_t))(v102 + 16);
    v104 = v10;
    v105 = v4;
    v95 = v0;
    while (1)
    {
      v92 = (uint64_t (*)(uint64_t, unint64_t, uint64_t))v8;
      v93 = v6;
      v103 = v33;
      v61 = v88;
      v60 = v89;
      v106 = v6 + v89;
      v62 = v97;
      v91 = v33 + v89;
      v63 = v107;
      v88(v97);
      v64 = v98;
      v90 = v8 + v60;
      v65 = v61(v98);
      v66 = v99;
      v67 = sub_10016AFB0(v65);
      v68 = sub_10016A84C(v67);
      v94 = v69;
      v70 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
      v71 = v66;
      v72 = v101;
      v73 = v70(v71, v101);
      v74 = v100;
      v75 = UniversalControlLink.endpoint2.getter(v73);
      sub_10016AECC(v75);
      sub_10016AE20();
      v70((uint64_t)v74, v72);
      LOBYTE(v60) = sub_10016AB08(v68, v94);
      v76 = *(void (**)(uint64_t, uint64_t))(v102 + 8);
      v76(v64, v63);
      v76(v62, v63);
      if ((v60 & 1) != 0)
      {
        v33 = v103;
        v6 = v106;
        if (v93 >= (unint64_t)v92 && v106 < (unint64_t)v92)
        {
          v81 = v104;
          v4 = v105;
          v0 = v95;
          v26 = v96;
          if ((uint64_t (*)(uint64_t, unint64_t, uint64_t))v93 == v92)
          {
            v8 = v90;
            goto LABEL_66;
          }
          v82 = v106;
          v8 = v90;
          v83 = v90;
          goto LABEL_63;
        }
        v78 = v106;
        v8 = v90;
        v79 = v90;
      }
      else
      {
        v8 = (unint64_t)v92;
        v6 = v106;
        if (v93 >= v103 && v106 < v103)
        {
          v81 = v104;
          v4 = v105;
          v0 = v95;
          v26 = v96;
          if (v93 == v103)
          {
            v33 = v91;
            goto LABEL_66;
          }
          v82 = v106;
          v33 = v91;
          v83 = v91;
LABEL_63:
          sub_10016AAB8(v82, v83);
          goto LABEL_66;
        }
        v78 = v106;
        v33 = v91;
        v79 = v91;
      }
      sub_10016AAAC(v78, v79);
      v81 = v104;
      v4 = v105;
      v0 = v95;
      v26 = v96;
LABEL_66:
      if (v33 <= v4 || v8 <= v81)
        goto LABEL_70;
    }
  }
  sub_100078F8C(v10, v27 / v26);
  v33 = v4 + v31 * v26;
  if (v31 * v26 >= 1 && v8 < v6)
  {
    v95 = v0;
    v92 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v102 + 16);
    v106 = v6;
    v103 = v4 + v31 * v26;
    v35 = v107;
    v36 = v98;
    while (1)
    {
      v104 = v10;
      v105 = v4;
      v37 = v97;
      v38 = sub_10016AE90();
      v39 = v92;
      ((void (*)(uint64_t))v92)(v38);
      v40 = v39(v36, v4, v35);
      v41 = v99;
      v42 = sub_10016AED4(v40);
      v43 = sub_10016A84C(v42);
      v93 = v44;
      v94 = v43;
      v45 = *(uint64_t (**)(uint64_t, uint64_t))(v95 + 8);
      v46 = v101;
      v47 = v45(v41, v101);
      v48 = v100;
      v49 = sub_10016AB14(v47);
      sub_10016A84C(v49);
      v50 = v8;
      v45((uint64_t)v48, v46);
      v51 = sub_10016AF4C(v94, v93);
      sub_10016ABA4(v36);
      sub_10016ABA4(v37);
      if ((v51 & 1) != 0)
        break;
      v26 = v96;
      v53 = v104;
      v52 = v105 + v96;
      if (v104 >= v105 && v104 < v52)
      {
        v56 = v106;
        if (v104 != v105)
          sub_10016AAB8(v104, v105);
LABEL_33:
        v4 = v52;
        goto LABEL_34;
      }
      sub_10016AAAC(v104, v105);
      v4 = v52;
      v56 = v106;
LABEL_34:
      v33 = v103;
      v10 = v53 + v26;
      if (v4 >= v103 || v8 >= v56)
        goto LABEL_70;
    }
    v53 = v104;
    v52 = v105;
    v26 = v96;
    v8 += v96;
    v54 = v104 < v50 || v104 >= v8;
    v55 = v50;
    if (!v54)
    {
      v56 = v106;
      v4 = v105;
      if (v104 != v55)
        sub_10016AAB8(v104, v55);
      goto LABEL_34;
    }
    sub_10016AAAC(v104, v50);
    v56 = v106;
    goto LABEL_33;
  }
LABEL_70:
  v85 = v33 - v4;
  if (v26 != -1 || v85 != 0x8000000000000000)
  {
    sub_100078F8C(v4, v85 / v26);
    return;
  }
LABEL_78:
  __break(1u);
}

uint64_t sub_100166604(_QWORD *a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v14;
  BOOL v15;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;
  BOOL v22;

  v4 = a4;
  v6 = a2;
  v7 = a1;
  v8 = (char *)a2 - (char *)a1;
  v9 = a2 - a1;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 8;
  if (v9 >= v11)
  {
    sub_100078D34(a2, (uint64_t)(a3 - (_QWORD)a2) / 8, a4);
    v12 = (unint64_t)&v4[v11];
    if (v7 >= v6 || v10 < 8)
      goto LABEL_39;
    v18 = (_QWORD *)(a3 - 8);
    while (1)
    {
      v19 = v18 + 1;
      v20 = v6 - 1;
      if ((static UniversalControlDeviceID.< infix(_:_:)(*(_QWORD *)(*(_QWORD *)(v12 - 8) + 40), *(_QWORD *)(*(_QWORD *)(v12 - 8) + 48), *(_QWORD *)(*(v6 - 1) + 40), *(_QWORD *)(*(v6 - 1) + 48)) & 1) != 0)
      {
        v21 = v19 != v6 || v18 >= v6;
        --v6;
        if (!v21)
          goto LABEL_35;
      }
      else
      {
        v22 = v19 != (_QWORD *)v12 || (unint64_t)v18 >= v12;
        v20 = (_QWORD *)(v12 - 8);
        v12 -= 8;
        if (!v22)
          goto LABEL_35;
      }
      *v18 = *v20;
LABEL_35:
      --v18;
      if (v6 <= v7 || v12 <= (unint64_t)v4)
        goto LABEL_39;
    }
  }
  sub_100078D34(a1, a2 - a1, a4);
  v12 = (unint64_t)&v4[v9];
  if ((unint64_t)v6 < a3 && v8 >= 8)
  {
    while ((static UniversalControlDeviceID.< infix(_:_:)(*(_QWORD *)(*v6 + 40), *(_QWORD *)(*v6 + 48), *(_QWORD *)(*v4 + 40), *(_QWORD *)(*v4 + 48)) & 1) == 0)
    {
      v14 = v4;
      v15 = v7 == v4++;
      if (!v15)
        goto LABEL_11;
LABEL_12:
      ++v7;
      if ((unint64_t)v4 >= v12 || (unint64_t)v6 >= a3)
        goto LABEL_17;
    }
    v14 = v6;
    v15 = v7 == v6++;
    if (v15)
      goto LABEL_12;
LABEL_11:
    *v7 = *v14;
    goto LABEL_12;
  }
LABEL_17:
  v6 = v7;
LABEL_39:
  sub_100078D34(v4, (uint64_t)(v12 - (_QWORD)v4) / 8, v6);
  return 1;
}

void *sub_100166798(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3;
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  void *v10;
  unint64_t *v11;
  uint64_t v13;

  v3 = isStackAllocationSafe;
  v4 = *(_BYTE *)(a2 + 32);
  v5 = v4 & 0x3F;
  v6 = (1 << v4) + 63;
  v7 = v6 >> 6;
  v8 = 8 * (v6 >> 6);
  if (v5 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v6 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    v9 = (unint64_t *)((char *)&v13 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_1001194A8(0, v7, v9);
    v10 = sub_100166A50(v9, v7, v3, a2);
    swift_release();
  }
  else
  {
    v11 = (unint64_t *)swift_slowAlloc(v8, -1);
    sub_1001194A8(0, v7, v11);
    v10 = sub_100166A50(v11, v7, v3, a2);
    swift_release();
    swift_slowDealloc(v11, -1, -1);
  }
  return v10;
}

uint64_t sub_100166924(uint64_t isStackAllocationSafe, uint64_t a2)
{
  char v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v2 = *(_BYTE *)(a2 + 32);
  v3 = v2 & 0x3F;
  v4 = (1 << v2) + 63;
  v5 = v4 >> 6;
  v6 = 8 * (v4 >> 6);
  if (v3 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v4 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    sub_10016ACF0();
    v7 = sub_10016A9C8();
    v6 = v5;
    v8 = sub_10002645C();
    if (!v5)
      return (uint64_t)v7;
    swift_willThrow(v8);
    swift_errorRelease(v5);
    __break(1u);
  }
  v9 = sub_10000797C(v6);
  sub_10016ACF0();
  v7 = sub_10016A9C8();
  sub_10002645C();
  if (!v5)
  {
    sub_100007958(v9);
    return (uint64_t)v7;
  }
  sub_10005FF90();
  result = sub_100007958(v9);
  __break(1u);
  return result;
}

void *sub_100166A50(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  char *v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t i;
  unint64_t v30;
  unint64_t v31;
  uint64_t v34;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  int64_t v39;
  char v40;
  char v41;
  char v42;
  char v43;
  unint64_t v44;
  char v45;
  char v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE v50[16];
  _QWORD v51[9];
  _QWORD v52[5];

  sub_100043078(v52, a3);
  v38 = v52[0];
  v39 = v52[3];
  v44 = v52[4];
  v36 = v52[1];
  v37 = (unint64_t)(v52[2] + 64) >> 6;
  v48 = a4 + 56;
  v49 = a4;
  swift_bridgeObjectRetain(a3);
  v6 = 0;
  while (2)
  {
    v34 = v6;
    do
    {
      while (1)
      {
        do
        {
          if (v44)
          {
            v7 = __clz(__rbit64(v44));
            v44 &= v44 - 1;
            v8 = v7 | (v39 << 6);
          }
          else
          {
            v9 = v39 + 1;
            if (__OFADD__(v39, 1))
              __break(1u);
            if (v9 >= v37)
              goto LABEL_32;
            v10 = *(_QWORD *)(v36 + 8 * v9);
            v11 = v39 + 1;
            if (!v10)
            {
              v11 = v39 + 2;
              if (v39 + 2 >= v37)
                goto LABEL_32;
              v10 = *(_QWORD *)(v36 + 8 * v11);
              if (!v10)
              {
                v11 = v39 + 3;
                if (v39 + 3 >= v37)
                  goto LABEL_32;
                v10 = *(_QWORD *)(v36 + 8 * v11);
                if (!v10)
                {
                  v11 = v39 + 4;
                  if (v39 + 4 >= v37)
                    goto LABEL_32;
                  v10 = *(_QWORD *)(v36 + 8 * v11);
                  if (!v10)
                  {
                    v11 = v39 + 5;
                    if (v39 + 5 >= v37)
                      goto LABEL_32;
                    v10 = *(_QWORD *)(v36 + 8 * v11);
                    if (!v10)
                    {
                      v12 = v39 + 6;
                      while (v12 < v37)
                      {
                        v10 = *(_QWORD *)(v36 + 8 * v12++);
                        if (v10)
                        {
                          v11 = v12 - 1;
                          goto LABEL_20;
                        }
                      }
                      goto LABEL_32;
                    }
                  }
                }
              }
            }
LABEL_20:
            v44 = (v10 - 1) & v10;
            v8 = __clz(__rbit64(v10)) + (v11 << 6);
            v39 = v11;
          }
          v13 = (char *)(*(_QWORD *)(v38 + 48) + 16 * v8);
          v14 = *v13;
          v15 = v13[1];
          v16 = v13[2];
          v17 = v13[3];
          v18 = v13[4];
          v43 = v13[5];
          v45 = v13[6];
          v46 = v13[7];
          v47 = v13[8];
          v19 = v13[9];
          v20 = v13[10];
          v42 = v13[11];
          v21 = v13[12];
          v22 = v13[14];
          v40 = v13[15];
          v41 = v13[13];
          Hasher.init(_seed:)(v51, *(_QWORD *)(v49 + 40));
          v50[0] = v14;
          v50[1] = v15;
          v50[2] = v16;
          v50[3] = v17;
          v50[4] = v18;
          v50[5] = v43;
          v50[6] = v45;
          v50[7] = v46;
          v50[8] = v47;
          v50[9] = v19;
          v50[10] = v20;
          v50[11] = v42;
          v50[12] = v21;
          v50[13] = v41;
          v50[14] = v22;
          v50[15] = v40;
          Hasher.combine(bytes:)(v50, v51);
          v23 = Hasher._finalize()();
          v24 = -1 << *(_BYTE *)(v49 + 32);
          v25 = v23 & ~v24;
          v26 = v25 >> 6;
          v27 = 1 << v25;
        }
        while (((1 << v25) & *(_QWORD *)(v48 + 8 * (v25 >> 6))) == 0);
        if (!static UniversalControlUUID.compare(lhs:rhs:)(*(_QWORD *)(*(_QWORD *)(v49 + 48) + 16 * v25), *(_QWORD *)(*(_QWORD *)(v49 + 48) + 16 * v25 + 8)))break;
        v28 = ~v24;
        for (i = v25 + 1; ; i = v30 + 1)
        {
          v30 = i & v28;
          if (((*(_QWORD *)(v48 + (((i & v28) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v28)) & 1) == 0)
            break;
          if (!static UniversalControlUUID.compare(lhs:rhs:)(*(_QWORD *)(*(_QWORD *)(v49 + 48) + 16 * v30), *(_QWORD *)(*(_QWORD *)(v49 + 48) + 16 * v30 + 8)))
          {
            v26 = v30 >> 6;
            v27 = 1 << v30;
            goto LABEL_28;
          }
        }
      }
LABEL_28:
      v31 = a1[v26];
      a1[v26] = v27 | v31;
    }
    while ((v27 & v31) != 0);
    v6 = v34 + 1;
    if (!__OFADD__(v34, 1))
      continue;
    break;
  }
  __break(1u);
LABEL_32:
  swift_release();
  swift_retain(v49);
  return sub_100199EDC(a1, a2, v34, v49);
}

void *sub_100166E78(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  char *v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  Swift::Int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t i;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int64_t v40;
  unint64_t v41;
  int64_t v42;
  int64_t v43;
  char *v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  Swift::Int v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t j;
  uint64_t v59;
  _QWORD *v63;
  uint64_t v64;
  int64_t v65;
  uint64_t v66;
  int64_t v67;
  unint64_t v68;
  int64_t v69;
  int64_t v70;
  char v71;
  char v72;
  char v73;
  char v74;
  char v75;
  char v76;
  char v77;
  char v78;
  unint64_t v79;
  char v80;
  char v81;
  char v82;
  char v83;
  unint64_t v84;
  char v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v91;
  char v92;
  char v93;
  char v94;
  char v95;
  char v96;
  char v97;
  char v98;
  char v99;
  char v100;
  char v101;
  char v102;
  char v103;
  char v104;
  char v105;
  char v106;
  _QWORD v107[9];

  v4 = (_QWORD *)a3;
  v89 = a4;
  v5 = 0;
  if (*(_QWORD *)(a4 + 16) < *(_QWORD *)(a3 + 16))
  {
    v64 = a4 + 56;
    v6 = 1 << *(_BYTE *)(a4 + 32);
    if (v6 < 64)
      v7 = ~(-1 << v6);
    else
      v7 = -1;
    v79 = v7 & *(_QWORD *)(a4 + 56);
    v67 = (unint64_t)(v6 + 63) >> 6;
    v69 = 0;
    v87 = a3 + 56;
    do
    {
      v66 = v5;
      do
      {
LABEL_7:
        if (v79)
        {
          v8 = __clz(__rbit64(v79));
          v79 &= v79 - 1;
          v9 = v8 | (v69 << 6);
          v10 = v89;
        }
        else
        {
          v11 = v69 + 1;
          v10 = v89;
          if (__OFADD__(v69, 1))
          {
            __break(1u);
LABEL_65:
            __break(1u);
            goto LABEL_66;
          }
          if (v11 >= v67)
            goto LABEL_63;
          v12 = *(_QWORD *)(v64 + 8 * v11);
          v13 = v69 + 1;
          if (!v12)
          {
            v13 = v69 + 2;
            if (v69 + 2 >= v67)
              goto LABEL_63;
            v12 = *(_QWORD *)(v64 + 8 * v13);
            if (!v12)
            {
              v13 = v69 + 3;
              if (v69 + 3 >= v67)
                goto LABEL_63;
              v12 = *(_QWORD *)(v64 + 8 * v13);
              if (!v12)
              {
                v14 = v69 + 4;
                if (v69 + 4 >= v67)
                  goto LABEL_63;
                v12 = *(_QWORD *)(v64 + 8 * v14);
                if (!v12)
                {
                  while (1)
                  {
                    v13 = v14 + 1;
                    if (__OFADD__(v14, 1))
                      break;
                    if (v13 >= v67)
                      goto LABEL_63;
                    v12 = *(_QWORD *)(v64 + 8 * v13);
                    ++v14;
                    if (v12)
                      goto LABEL_22;
                  }
LABEL_66:
                  __break(1u);
                  goto LABEL_67;
                }
                v13 = v69 + 4;
              }
            }
          }
LABEL_22:
          v79 = (v12 - 1) & v12;
          v69 = v13;
          v9 = __clz(__rbit64(v12)) + (v13 << 6);
        }
        v15 = (char *)(*(_QWORD *)(v10 + 48) + 16 * v9);
        v16 = *v15;
        v17 = v15[1];
        v18 = v15[2];
        v19 = v15[3];
        v20 = v15[4];
        v21 = v15[5];
        v77 = v15[6];
        v73 = v15[7];
        v71 = v15[8];
        v85 = v15[9];
        v22 = v15[10];
        v23 = v15[11];
        v24 = v15[12];
        v75 = v15[13];
        v81 = v15[15];
        v83 = v15[14];
        Hasher.init(_seed:)(v107, v4[5]);
        v91 = v16;
        v92 = v17;
        v93 = v18;
        v94 = v19;
        v95 = v20;
        v96 = v21;
        v97 = v77;
        v98 = v73;
        v99 = v71;
        v100 = v85;
        v101 = v22;
        v102 = v23;
        v103 = v24;
        v104 = v75;
        v105 = v83;
        v106 = v81;
        Hasher.combine(bytes:)(&v91, v107);
        v25 = Hasher._finalize()();
        v4 = (_QWORD *)a3;
        v26 = -1 << *(_BYTE *)(a3 + 32);
        v27 = v25 & ~v26;
        v28 = v27 >> 6;
        v29 = 1 << v27;
      }
      while (((1 << v27) & *(_QWORD *)(v87 + 8 * (v27 >> 6))) == 0);
      if (static UniversalControlUUID.compare(lhs:rhs:)(*(_QWORD *)(*(_QWORD *)(a3 + 48) + 16 * v27), *(_QWORD *)(*(_QWORD *)(a3 + 48) + 16 * v27 + 8)))
      {
        v30 = ~v26;
        for (i = v27 + 1; ; i = v32 + 1)
        {
          v32 = i & v30;
          v4 = (_QWORD *)a3;
          if (((*(_QWORD *)(v87 + (((i & v30) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v30)) & 1) == 0)
            goto LABEL_7;
          if (!static UniversalControlUUID.compare(lhs:rhs:)(*(_QWORD *)(*(_QWORD *)(a3 + 48) + 16 * v32), *(_QWORD *)(*(_QWORD *)(a3 + 48) + 16 * v32 + 8)))break;
        }
        v28 = v32 >> 6;
        v29 = 1 << v32;
      }
      v4 = (_QWORD *)a3;
      a1[v28] |= v29;
      v5 = v66 + 1;
    }
    while (!__OFADD__(v66, 1));
    __break(1u);
  }
  v70 = 0;
  v35 = v4[7];
  v34 = v4 + 7;
  v33 = v35;
  v36 = 1 << *((_BYTE *)v34 - 24);
  if (v36 < 64)
    v37 = ~(-1 << v36);
  else
    v37 = -1;
  v84 = v37 & v33;
  v63 = v34;
  v65 = (unint64_t)(v36 + 63) >> 6;
  v88 = a4 + 56;
  do
  {
    v66 = v5;
    while (1)
    {
      do
      {
        if (v84)
        {
          v38 = __clz(__rbit64(v84));
          v84 &= v84 - 1;
          v39 = v38 | (v70 << 6);
          v4 = (_QWORD *)a3;
        }
        else
        {
          v40 = v70 + 1;
          v4 = (_QWORD *)a3;
          if (__OFADD__(v70, 1))
            goto LABEL_65;
          if (v40 >= v65)
            goto LABEL_63;
          v41 = v63[v40];
          v42 = v70 + 1;
          if (!v41)
          {
            v42 = v70 + 2;
            if (v70 + 2 >= v65)
              goto LABEL_63;
            v41 = v63[v42];
            if (!v41)
            {
              v42 = v70 + 3;
              if (v70 + 3 >= v65)
                goto LABEL_63;
              v41 = v63[v42];
              if (!v41)
              {
                v43 = v70 + 4;
                if (v70 + 4 >= v65)
                  goto LABEL_63;
                v41 = v63[v43];
                if (!v41)
                {
                  while (1)
                  {
                    v42 = v43 + 1;
                    if (__OFADD__(v43, 1))
                      break;
                    if (v42 >= v65)
                      goto LABEL_63;
                    v41 = v63[v42];
                    ++v43;
                    if (v41)
                      goto LABEL_53;
                  }
LABEL_67:
                  __break(1u);
                }
                v42 = v70 + 4;
              }
            }
          }
LABEL_53:
          v84 = (v41 - 1) & v41;
          v70 = v42;
          v39 = __clz(__rbit64(v41)) + (v42 << 6);
        }
        v68 = v39;
        v44 = (char *)(v4[6] + 16 * v39);
        v45 = *v44;
        v46 = v44[1];
        v47 = v44[2];
        v48 = v44[3];
        v82 = v44[4];
        v80 = v44[5];
        v72 = v44[6];
        v86 = v44[7];
        v49 = v44[8];
        v50 = v44[9];
        v51 = v44[10];
        v78 = v44[11];
        v52 = v44[12];
        v53 = v44[14];
        v74 = v44[15];
        v76 = v44[13];
        Hasher.init(_seed:)(v107, *(_QWORD *)(a4 + 40));
        v91 = v45;
        v92 = v46;
        v93 = v47;
        v94 = v48;
        v95 = v82;
        v96 = v80;
        v97 = v72;
        v98 = v86;
        v99 = v49;
        v100 = v50;
        v101 = v51;
        v102 = v78;
        v103 = v52;
        v104 = v76;
        v105 = v53;
        v106 = v74;
        Hasher.combine(bytes:)(&v91, v107);
        v54 = Hasher._finalize()();
        a4 = v89;
        v55 = -1 << *(_BYTE *)(v89 + 32);
        v56 = v54 & ~v55;
      }
      while (((*(_QWORD *)(v88 + ((v56 >> 3) & 0xFFFFFFFFFFFFF8)) >> v56) & 1) == 0);
      if (!static UniversalControlUUID.compare(lhs:rhs:)(*(_QWORD *)(*(_QWORD *)(v89 + 48) + 16 * v56), *(_QWORD *)(*(_QWORD *)(v89 + 48) + 16 * v56 + 8)))break;
      v57 = ~v55;
      for (j = v56 + 1; ; j = v59 + 1)
      {
        v59 = j & v57;
        a4 = v89;
        if (((*(_QWORD *)(v88 + (((j & v57) >> 3) & 0xFFFFFFFFFFFFF8)) >> (j & v57)) & 1) == 0)
          break;
        if (!static UniversalControlUUID.compare(lhs:rhs:)(*(_QWORD *)(*(_QWORD *)(v89 + 48) + 16 * v59), *(_QWORD *)(*(_QWORD *)(v89 + 48) + 16 * v59 + 8)))goto LABEL_60;
      }
    }
LABEL_60:
    *(unint64_t *)((char *)a1 + ((v68 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v68;
    v5 = v66 + 1;
    a4 = v89;
  }
  while (!__OFADD__(v66, 1));
  __break(1u);
LABEL_63:
  swift_retain(v4);
  return sub_100199EDC(a1, a2, v66, (uint64_t)v4);
}

_QWORD *sub_1001675F4(void *a1)
{
  id v1;
  _QWORD *result;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  _OWORD *v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  char v26;

  v1 = a1;
  CGRegionRef.makeIterator()();

  result = dispatch thunk of _AnyIteratorBoxBase.next()(&v24);
  v3 = _swiftEmptyArrayStorage;
  v4 = 0;
  if ((v26 & 1) == 0)
  {
    v5 = v24;
    v6 = v25;
    v7 = &_swiftEmptyArrayStorage[4];
    while (1)
    {
      if (!v4)
      {
        v8 = v3[3];
        if ((uint64_t)((v8 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_24;
        v22 = v6;
        v23 = v5;
        v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
        if (v9 <= 1)
          v10 = 1;
        else
          v10 = v9;
        v11 = sub_1000055B0(&qword_1002B3488);
        v12 = (_QWORD *)sub_1000088D8(v11, 32 * v10 + 32);
        v13 = (uint64_t)(j__malloc_size(v12) - 32) / 32;
        v12[2] = v10;
        v12[3] = 2 * v13;
        v14 = (unint64_t)(v12 + 4);
        v15 = v3[3];
        v16 = v15 >> 1;
        if (v3[2])
        {
          if (v12 != v3 || v14 >= (unint64_t)&v3[4 * v16 + 4])
            memmove(v12 + 4, v3 + 4, 32 * v16);
          v3[2] = 0;
        }
        v7 = (_OWORD *)(v14 + 32 * v16);
        v4 = (v13 & 0x7FFFFFFFFFFFFFFFLL) - (v15 >> 1);
        result = (_QWORD *)sub_10002645C();
        v3 = v12;
        v6 = v22;
        v5 = v23;
      }
      v18 = __OFSUB__(v4--, 1);
      if (v18)
        break;
      *v7 = v5;
      v7[1] = v6;
      result = dispatch thunk of _AnyIteratorBoxBase.next()(&v24);
      v5 = v24;
      v6 = v25;
      v7 += 2;
      if ((v26 & 1) != 0)
        goto LABEL_19;
    }
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
LABEL_19:
  result = (_QWORD *)sub_10000B348();
  v19 = v3[3];
  if (v19 < 2)
    return v3;
  v20 = v19 >> 1;
  v18 = __OFSUB__(v20, v4);
  v21 = v20 - v4;
  if (!v18)
  {
    v3[2] = v21;
    return v3;
  }
LABEL_25:
  __break(1u);
  return result;
}

void sub_100167770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  size_t count;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t inited;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  BOOL v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;

  sub_1000E4A0C();
  a23 = v24;
  a24 = v25;
  v27 = v26;
  v28 = (void *)swift_unknownObjectRetain(v26);
  count = xpc_array_get_count(v28);
  v30 = sub_1000088D8((uint64_t)&unk_10028DC40, 24);
  *(_QWORD *)(v30 + 16) = 0;
  v31 = (_QWORD *)sub_1000088D8((uint64_t)&unk_10028DC68, 40);
  v31[2] = v30;
  v31[3] = count;
  v31[4] = v27;
  v32 = sub_1000055B0(&qword_1002ACD70);
  inited = swift_initStackObject(v32, &a9);
  *(_QWORD *)(inited + 16) = sub_100077E4C;
  *(_QWORD *)(inited + 24) = v31;
  v34 = sub_100079354();
  v35 = _swiftEmptyArrayStorage;
  if (v34)
  {
    v36 = v34;
    v37 = 0;
    v38 = &_swiftEmptyArrayStorage[4];
    while (1)
    {
      if (!v37)
      {
        v39 = v35[3];
        if ((uint64_t)((v39 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_26;
        v40 = v39 & 0xFFFFFFFFFFFFFFFELL;
        if (v40 <= 1)
          v41 = 1;
        else
          v41 = v40;
        v42 = sub_1000055B0(&qword_1002AC0E0);
        v43 = (_QWORD *)sub_1000088D8(v42, 8 * v41 + 32);
        v44 = (uint64_t)(j__malloc_size(v43) - 32) / 8;
        v43[2] = v41;
        v43[3] = (2 * v44) | 1;
        v45 = (unint64_t)(v43 + 4);
        v46 = v35[3];
        v47 = v46 >> 1;
        if (v35[2])
        {
          if (v43 != v35 || v45 >= (unint64_t)&v35[v47 + 4])
            memmove(v43 + 4, v35 + 4, 8 * v47);
          v35[2] = 0;
        }
        v38 = (uint64_t *)(v45 + 8 * v47);
        v37 = (v44 & 0x7FFFFFFFFFFFFFFFLL) - (v46 >> 1);
        sub_1000269A0();
        v35 = v43;
      }
      v49 = __OFSUB__(v37--, 1);
      if (v49)
        break;
      *v38++ = v36;
      v36 = sub_100079354();
      if (!v36)
        goto LABEL_21;
    }
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v37 = 0;
LABEL_21:
  sub_10002645C();
  v50 = v35[3];
  if (v50 < 2)
  {
LABEL_24:
    sub_1000088AC();
    return;
  }
  v51 = v50 >> 1;
  v49 = __OFSUB__(v51, v37);
  v52 = v51 - v37;
  if (!v49)
  {
    v35[2] = v52;
    goto LABEL_24;
  }
LABEL_27:
  __break(1u);
}

void sub_100167910(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *);
  unint64_t v25;
  __n128 v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  size_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  BOOL v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  int64_t v65;
  _QWORD *v66;
  uint64_t v67;
  void (*v68)(char *);
  char *v69;
  uint64_t v70;
  uint64_t (*v71)(char *);
  uint64_t v72;
  uint64_t v73;

  v2 = sub_1000055B0((uint64_t *)&unk_1002AC150);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v3);
  v8 = (char *)&v58 - v7;
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v58 - v10;
  __chkstk_darwin(v9);
  v63 = (char *)&v58 - v12;
  v13 = type metadata accessor for UniversalControlLink(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v69 = (char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v58 - v18;
  __chkstk_darwin(v17);
  v62 = (char *)&v58 - v20;
  v21 = *(unsigned __int8 *)(v14 + 80);
  v22 = (v21 + 32) & ~v21;
  v66 = _swiftEmptyArrayStorage;
  v64 = (uint64_t)_swiftEmptyArrayStorage + v22;
  v23 = *a1;
  v68 = (void (*)(char *))a1[1];
  v24 = (uint64_t (*)(char *))a1[3];
  v70 = a1[2];
  v71 = v24;
  v72 = a1[4];
  v73 = v23;
  v25 = *(_QWORD *)(v23 + 16);
  sub_100167E9C(&v73);
  v67 = v23 + v22;
  v59 = v21 | 7;
  v60 = v22;
  swift_retain(v70);
  v26 = swift_retain(v72);
  v27 = 0;
  v28 = 0;
  while (2)
  {
    v65 = v27;
    while (1)
    {
      if (v28 == v25)
      {
        v29 = 1;
        v28 = v25;
      }
      else
      {
        if (v28 >= v25)
        {
          __break(1u);
          goto LABEL_43;
        }
        (*(void (**)(char *, unint64_t, uint64_t, __n128))(v14 + 16))(v8, v67 + *(_QWORD *)(v14 + 72) * v28, v13, v26);
        v29 = 0;
        ++v28;
      }
      v30 = 1;
      _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v8, v29, 1, v13);
      sub_10005FA70((uint64_t)v8, (uint64_t)v5, (uint64_t *)&unk_1002AC150);
      if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v5, 1, v13) != 1)
      {
        v31 = v69;
        (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v69, v5, v13);
        v68(v31);
        (*(void (**)(char *, uint64_t))(v14 + 8))(v31, v13);
        v30 = 0;
      }
      _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v11, v30, 1, v13);
      if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0((uint64_t)v11, 1, v13) == 1)
      {
        sub_100025A28((uint64_t)v11, (uint64_t *)&unk_1002AC150);
        v33 = (uint64_t)v63;
        _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0((uint64_t)v63, 1, 1, v13);
        goto LABEL_38;
      }
      v32 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
      v32(v19, v11, v13);
      if ((v71(v19) & 1) != 0)
        break;
      (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13);
    }
    v33 = (uint64_t)v63;
    v32(v63, v19, v13);
    _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(v33, 0, 1, v13);
    if (_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v33, 1, v13) == 1)
    {
LABEL_38:
      sub_10003A2D4(&v73);
      swift_release();
      swift_release();
      sub_100025A28(v33, (uint64_t *)&unk_1002AC150);
      v55 = v66[3];
      if (v55 < 2)
        return;
      v56 = v55 >> 1;
      v53 = __OFSUB__(v56, v65);
      v57 = v56 - v65;
      if (!v53)
      {
        v66[2] = v57;
        return;
      }
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    v32(v62, (char *)v33, v13);
    v34 = v65;
    if (v65)
    {
      v61 = v66;
LABEL_35:
      v53 = __OFSUB__(v34, 1);
      v27 = v34 - 1;
      if (!v53)
      {
        v65 = v25;
        v54 = v64;
        v32((char *)v64, v62, v13);
        v64 = v54 + *(_QWORD *)(v14 + 72);
        v25 = v65;
        v66 = v61;
        continue;
      }
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    break;
  }
  v35 = v66[3];
  if ((uint64_t)((v35 >> 1) + 0x4000000000000000) < 0)
  {
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  v36 = v35 & 0xFFFFFFFFFFFFFFFELL;
  if (v36 <= 1)
    v36 = 1;
  v65 = v36;
  v37 = sub_1000055B0((uint64_t *)&unk_1002AC8C0);
  v64 = *(_QWORD *)(v14 + 72);
  v38 = v60;
  v61 = (_QWORD *)swift_allocObject(v37, v60 + v64 * v65, v59);
  v39 = j__malloc_size(v61);
  v40 = v64;
  if (!v64)
    goto LABEL_46;
  v41 = v39 - v38;
  if (v39 - v38 != 0x8000000000000000 || v64 != -1)
  {
    v43 = v38;
    v44 = v41 / v64;
    v45 = (char *)v61;
    v46 = (char *)v66;
    v61[2] = v65;
    *((_QWORD *)v45 + 3) = 2 * (v41 / v40);
    v47 = &v45[v43];
    v48 = *((_QWORD *)v46 + 3);
    v49 = v48 >> 1;
    v50 = (v48 >> 1) * v40;
    if (!*((_QWORD *)v46 + 2))
    {
LABEL_34:
      v64 = (uint64_t)&v47[v50];
      v34 = (v44 & 0x7FFFFFFFFFFFFFFFLL) - (v48 >> 1);
      swift_release();
      goto LABEL_35;
    }
    v51 = &v46[v43];
    if (v45 < v46 || v47 >= &v46[v43 + v50])
    {
      v64 = (uint64_t)&v45[v43];
      v65 = v48;
      v58 = v50;
      swift_arrayInitWithTakeFrontToBack(&v45[v43], v51, v49, v13);
    }
    else
    {
      if (v45 == v46)
      {
LABEL_33:
        *((_QWORD *)v46 + 2) = 0;
        goto LABEL_34;
      }
      v64 = (uint64_t)&v45[v43];
      v65 = v48;
      v58 = v50;
      swift_arrayInitWithTakeBackToFront(&v45[v43], v51, v49, v13);
    }
    v50 = v58;
    v47 = (char *)v64;
    v48 = v65;
    v46 = (char *)v66;
    goto LABEL_33;
  }
LABEL_47:
  __break(1u);
}

uint64_t sub_100167E20(uint64_t a1)
{
  uint64_t v1;

  return sub_10016045C(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_100167E3C(uint64_t a1)
{
  uint64_t v1;

  return sub_10015B4C0(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_100167E44()
{
  return sub_10015B7C0() & 1;
}

uint64_t sub_100167E60(uint64_t a1)
{
  uint64_t v1;

  return sub_100159F74(a1, *(_QWORD *)(v1 + 16), *(char **)(v1 + 24)) & 1;
}

uint64_t sub_100167E7C()
{
  return sub_10015A4FC();
}

uint64_t sub_100167E84(uint64_t a1)
{
  uint64_t v1;

  return sub_10015A2E8(a1, v1);
}

BOOL sub_100167E8C(uint64_t a1)
{
  uint64_t v1;

  return sub_10015A390(a1, v1);
}

double sub_100167E94(uint64_t a1)
{
  uint64_t v1;

  return sub_10015A44C(a1, *(_QWORD *)(v1 + 16));
}

_QWORD *sub_100167E9C(_QWORD *a1)
{
  swift_bridgeObjectRetain(*a1);
  return a1;
}

void sub_100167EC4(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  if (a1 < 0 || 1 << *(_BYTE *)(a3 + 32) <= a1)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a3 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a1) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a3 + 36) == a2)
  {
    v6 = *(_QWORD *)(a3 + 56);
    v7 = type metadata accessor for CompanionLinkDevice(0);
    sub_100022838(v6 + *(_QWORD *)(*(_QWORD *)(v7 - 8) + 72) * a1, a4, type metadata accessor for CompanionLinkDevice);
    sub_10000B350();
    return;
  }
LABEL_8:
  __break(1u);
}

uint64_t sub_100167F54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ConnectedDevices(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

BOOL sub_100167F98(uint64_t a1, uint64_t *a2)
{
  return sub_100147EE0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *a2);
}

BOOL sub_100167FC4(uint64_t a1)
{
  uint64_t v1;

  return sub_100167F98(a1, *(uint64_t **)(v1 + 16));
}

uint64_t sub_100167FE0()
{
  uint64_t v0;

  return sub_100079554(v0, 32);
}

uint64_t sub_100167FEC()
{
  uint64_t v0;

  return UniversalControlLink.normalized(for:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100168014()
{
  uint64_t v0;

  return sub_100079554(v0, 32);
}

BOOL sub_100168020(uint64_t a1)
{
  uint64_t v1;

  return sub_100157DA8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

unint64_t sub_100168028()
{
  unint64_t result;

  result = qword_1002B33C0;
  if (!qword_1002B33C0)
  {
    result = swift_getWitnessTable(&unk_1002281AC, &type metadata for SyncController.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B33C0);
  }
  return result;
}

unint64_t sub_100168064()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B33E0;
  if (!qword_1002B33E0)
  {
    v1 = sub_10000DCA0(&qword_1002B33D8);
    sub_100169DB8((uint64_t)&qword_1002B2910);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1002B33E0);
  }
  return result;
}

uint64_t sub_1001680E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(type metadata accessor for SyncMessage(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  sub_100026600();
  swift_release();
  v5 = v0 + v3;
  swift_bridgeObjectRelease();
  swift_release();
  v6 = (int *)sub_1000055B0(&qword_1002B1430);
  v7 = v6[16];
  v8 = v0 + v3 + v7 + *(int *)(sub_1000055B0((uint64_t *)&unk_1002B1DF0) + 56);
  v9 = sub_10009A58C();
  if (!_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v8, 1, v9))
  {
    v10 = sub_100141158();
    v11(v10);
  }
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v5 + v6[24] + 40))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v5 + v6[28] + 40) != 1)
    swift_bridgeObjectRelease();
  v12 = v6[32];
  v13 = v5 + v12 + *(int *)(sub_1000055B0((uint64_t *)&unk_1002B1E00) + 56);
  v14 = sub_100060154();
  if (!_s13EnsembleAgent26PasteboardAcquisitionErrorOwet_0(v13, 1, v14))
    sub_10009BE10(v13, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8));
  return swift_deallocObject(v0, v3 + v4, v2 | 7);
}

void sub_100168240(uint64_t a1)
{
  uint64_t v1;

  type metadata accessor for SyncMessage(0);
  sub_10016AFFC();
  sub_10015DD58(a1, *(_QWORD *)(v1 + 16), *(unsigned __int8 **)(v1 + 24));
}

uint64_t sub_10016827C()
{
  unsigned __int8 *v0;

  return sub_10015E480(v0);
}

unint64_t sub_100168284()
{
  unint64_t result;

  result = qword_1002B3430;
  if (!qword_1002B3430)
  {
    result = swift_getWitnessTable(&unk_10022815C, &type metadata for UniversalControlPreferencesDiagnostics.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B3430);
  }
  return result;
}

unint64_t sub_1001682C0()
{
  unint64_t result;

  result = qword_1002B3448;
  if (!qword_1002B3448)
  {
    result = swift_getWitnessTable(&unk_10022810C, &type metadata for UniversalControlConfigurationDiagnostics.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B3448);
  }
  return result;
}

unint64_t sub_1001682FC()
{
  unint64_t result;

  result = qword_1002B3458;
  if (!qword_1002B3458)
  {
    result = swift_getWitnessTable(&unk_1002280BC, &type metadata for InputDevicesDiagnostics.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B3458);
  }
  return result;
}

void sub_100168338(uint64_t a1)
{
  unint64_t *v1;

  if (!sub_1000F027C(a1))
  {
    sub_10016ADFC();
    sub_10000DCA0(&qword_1002B3460);
    sub_10016B168();
    atomic_store(sub_1000F00C8(), v1);
  }
  sub_1000F00A0();
}

unint64_t sub_100168388()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B3480;
  if (!qword_1002B3480)
  {
    v1 = sub_10000DCA0(&qword_1002B3478);
    sub_100168338((uint64_t)&unk_1002B3468);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1002B3480);
  }
  return result;
}

uint64_t sub_100168414(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;

  if (a3)
  {
    swift_bridgeObjectRelease(a3);
    return swift_bridgeObjectRelease(a7);
  }
  return result;
}

uint64_t sub_100168444()
{
  uint64_t v0;

  sub_100026600();
  swift_release();
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10016846C(uint64_t a1)
{
  uint64_t v1;

  return sub_100150398(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_10016847C()
{
  uint64_t v0;

  return sub_100079554(v0, 24);
}

uint64_t sub_100168488()
{
  uint64_t v0;

  sub_100026600();
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

BOOL sub_1001684B0()
{
  return sub_100151584();
}

void sub_1001684CC(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t v3;

  if (!sub_1000F027C(a1))
  {
    v3 = sub_10000DCA0(v2);
    atomic_store(sub_10016AE0C(v3, v3), v1);
  }
  sub_1000050D4();
}

uint64_t sub_100168500()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_weakDestroy(v0 + 16);
  v1 = sub_100026988();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_10016851C()
{
  uint64_t v0;

  return sub_10014FAAC(v0);
}

uint64_t sub_100168524()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100168548()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  v1 = sub_100026988();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_100168564()
{
  uint64_t v0;

  return sub_10014FB50(v0);
}

uint64_t sub_10016856C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10016857C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_100168584()
{
  unint64_t result;

  result = qword_1002B34B8;
  if (!qword_1002B34B8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UInt64, &type metadata for UInt64);
    atomic_store(result, (unint64_t *)&qword_1002B34B8);
  }
  return result;
}

uint64_t sub_1001685C0(uint64_t a1)
{
  uint64_t *v1;

  return sub_10015B004(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1001685CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10015B1C8(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), a2);
}

BOOL sub_1001685D8(uint64_t a1)
{
  uint64_t v1;

  return sub_10015B344(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t storeEnumTagSinglePayload for InputDevicesDiagnostics.DiagnosticState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10016862C + 4 * byte_1002279BB[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100168660 + 4 * byte_1002279B6[v4]))();
}

uint64_t sub_100168660(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100168668(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100168670);
  return result;
}

uint64_t sub_10016867C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100168684);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100168688(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100168690(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InputDevicesDiagnostics.DiagnosticState.CodingKeys()
{
  return &type metadata for InputDevicesDiagnostics.DiagnosticState.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for UniversalControlConfigurationDiagnostics.DiagnosticState.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1001686EC + 4 * byte_1002279C0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10016870C + 4 * byte_1002279C5[v4]))();
}

_BYTE *sub_1001686EC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10016870C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100168714(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10016871C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100168724(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10016872C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for UniversalControlConfigurationDiagnostics.DiagnosticState.CodingKeys()
{
  return &type metadata for UniversalControlConfigurationDiagnostics.DiagnosticState.CodingKeys;
}

uint64_t getEnumTagSinglePayload for UniversalControlPreferencesDiagnostics.DiagnosticState.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xED)
  {
    if (a2 + 19 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 19) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 20;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x14;
  v5 = v6 - 20;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for UniversalControlPreferencesDiagnostics.DiagnosticState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 19 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 19) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xED)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEC)
    return ((uint64_t (*)(void))((char *)&loc_10016881C + 4 * byte_1002279CF[v4]))();
  *a1 = a2 + 19;
  return ((uint64_t (*)(void))((char *)sub_100168850 + 4 * byte_1002279CA[v4]))();
}

uint64_t sub_100168850(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100168858(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100168860);
  return result;
}

uint64_t sub_10016886C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100168874);
  *(_BYTE *)result = a2 + 19;
  return result;
}

uint64_t sub_100168878(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100168880(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UniversalControlPreferencesDiagnostics.DiagnosticState.CodingKeys()
{
  return &type metadata for UniversalControlPreferencesDiagnostics.DiagnosticState.CodingKeys;
}

uint64_t getEnumTagSinglePayload for SyncController.DiagnosticState.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF9)
  {
    if (a2 + 7 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 7) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 8;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v5 = v6 - 8;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SyncController.DiagnosticState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_100168970 + 4 * byte_1002279D9[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1001689A4 + 4 * byte_1002279D4[v4]))();
}

uint64_t sub_1001689A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001689AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001689B4);
  return result;
}

uint64_t sub_1001689C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001689C8);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1001689CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001689D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SyncController.DiagnosticState.CodingKeys()
{
  return &type metadata for SyncController.DiagnosticState.CodingKeys;
}

uint64_t sub_1001689F0(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  return swift_bridgeObjectRelease(a1[9]);
}

uint64_t sub_100168A30(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v7;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t sub_100168AAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(a1 + 6) = *(_BYTE *)(a2 + 6);
  *(_BYTE *)(a1 + 7) = *(_BYTE *)(a2 + 7);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  *(_BYTE *)(a1 + 11) = *(_BYTE *)(a2 + 11);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(a1 + 13) = *(_BYTE *)(a2 + 13);
  *(_BYTE *)(a1 + 14) = *(_BYTE *)(a2 + 14);
  *(_BYTE *)(a1 + 15) = *(_BYTE *)(a2 + 15);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

uint64_t sub_100168BE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v4 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 72);
  v9 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t sub_100168C64(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 80))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100168CA4(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for SyncController.DeviceDiagnostic()
{
  sub_10003B1DC();
}

uint64_t sub_100168D04(_QWORD *a1)
{
  uint64_t v2;

  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[1]);
  v2 = a1[5];
  if (v2)
  {
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRelease(a1[6]);
    swift_bridgeObjectRelease(a1[7]);
    swift_bridgeObjectRelease(a1[9]);
    swift_bridgeObjectRelease(a1[11]);
  }
  swift_bridgeObjectRelease(a1[12]);
  swift_bridgeObjectRelease(a1[14]);
  swift_bridgeObjectRelease(a1[15]);
  return swift_bridgeObjectRelease(a1[18]);
}

uint64_t sub_100168D78(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = a2 + 2;
  v7 = a2[5];
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  if (v7)
  {
    *(_OWORD *)(a1 + 16) = *v6;
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v7;
    v8 = a2[6];
    v9 = a2[7];
    *(_QWORD *)(a1 + 48) = v8;
    *(_QWORD *)(a1 + 56) = v9;
    v10 = a2[9];
    *(_QWORD *)(a1 + 64) = a2[8];
    *(_QWORD *)(a1 + 72) = v10;
    v11 = a2[11];
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_QWORD *)(a1 + 88) = v11;
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
  }
  else
  {
    memcpy((void *)(a1 + 16), v6, 0x50uLL);
  }
  v12 = a2[12];
  v13 = a2[13];
  *(_QWORD *)(a1 + 96) = v12;
  *(_QWORD *)(a1 + 104) = v13;
  v14 = a2[14];
  v15 = a2[15];
  *(_QWORD *)(a1 + 112) = v14;
  *(_QWORD *)(a1 + 120) = v15;
  *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
  v16 = a2[18];
  *(_QWORD *)(a1 + 144) = v16;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v16);
  return a1;
}

uint64_t sub_100168E78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 40);
  if (!*(_QWORD *)(a1 + 40))
  {
    if (v4)
    {
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
LABEL_7:
    memcpy((void *)(a1 + 16), (const void *)(a2 + 16), 0x50uLL);
    goto LABEL_8;
  }
  if (!v4)
  {
    sub_1000FCE84((_QWORD *)(a1 + 16));
    goto LABEL_7;
  }
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_BYTE *)(a1 + 19) = *(_BYTE *)(a2 + 19);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_BYTE *)(a1 + 21) = *(_BYTE *)(a2 + 21);
  *(_BYTE *)(a1 + 22) = *(_BYTE *)(a2 + 22);
  *(_BYTE *)(a1 + 23) = *(_BYTE *)(a2 + 23);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(_BYTE *)(a1 + 27) = *(_BYTE *)(a2 + 27);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  *(_BYTE *)(a1 + 29) = *(_BYTE *)(a2 + 29);
  *(_BYTE *)(a1 + 30) = *(_BYTE *)(a2 + 30);
  *(_BYTE *)(a1 + 31) = *(_BYTE *)(a2 + 31);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_8:
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
  *(_BYTE *)(a1 + 130) = *(_BYTE *)(a2 + 130);
  *(_BYTE *)(a1 + 131) = *(_BYTE *)(a2 + 131);
  *(_BYTE *)(a1 + 132) = *(_BYTE *)(a2 + 132);
  *(_BYTE *)(a1 + 133) = *(_BYTE *)(a2 + 133);
  *(_BYTE *)(a1 + 134) = *(_BYTE *)(a2 + 134);
  *(_BYTE *)(a1 + 135) = *(_BYTE *)(a2 + 135);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_BYTE *)(a1 + 137) = *(_BYTE *)(a2 + 137);
  *(_BYTE *)(a1 + 138) = *(_BYTE *)(a2 + 138);
  *(_BYTE *)(a1 + 139) = *(_BYTE *)(a2 + 139);
  *(_BYTE *)(a1 + 140) = *(_BYTE *)(a2 + 140);
  *(_BYTE *)(a1 + 141) = *(_BYTE *)(a2 + 141);
  *(_BYTE *)(a1 + 142) = *(_BYTE *)(a2 + 142);
  *(_BYTE *)(a1 + 143) = *(_BYTE *)(a2 + 143);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *sub_100169178(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x98uLL);
}

uint64_t sub_100169180(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(a1 + 40))
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 40);
  if (!v4)
  {
    sub_1000FCE84((_QWORD *)(a1 + 16));
LABEL_5:
    memcpy((void *)(a1 + 16), (const void *)(a2 + 16), 0x50uLL);
    goto LABEL_6;
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v6;
  swift_bridgeObjectRelease();
LABEL_6:
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v7;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10016929C(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 152))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1001692DC(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 152) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 152) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for SyncController.DiagnosticState()
{
  sub_10003B1DC();
}

uint64_t sub_10016934C(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[13]);
  return swift_bridgeObjectRelease(a1[24]);
}

uint64_t sub_10016937C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)a1 = *(_WORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  v5 = *(_QWORD *)(a2 + 104);
  v4 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = v5;
  *(_QWORD *)(a1 + 112) = v4;
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  v7 = *(_QWORD *)(a2 + 192);
  v6 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = v7;
  *(_QWORD *)(a1 + 200) = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t sub_100169478(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v7;
  v8 = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v8;
  v9 = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v9;
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  *(_BYTE *)(a1 + 82) = *(_BYTE *)(a2 + 82);
  *(_BYTE *)(a1 + 83) = *(_BYTE *)(a2 + 83);
  v10 = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = v10;
  *(_BYTE *)(a1 + 97) = *(_BYTE *)(a2 + 97);
  v11 = *(_QWORD *)(a1 + 104);
  v12 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 104) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v11);
  v13 = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v13;
  v14 = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = v14;
  v15 = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = v15;
  v16 = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = v16;
  v17 = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = v17;
  v18 = *(_QWORD *)(a1 + 192);
  v19 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 192) = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v18);
  v20 = *(_QWORD *)(a2 + 200);
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = v20;
  return a1;
}

void *sub_1001695D4(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xD1uLL);
}

uint64_t sub_1001695DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_WORD *)a1 = *(_WORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(_BYTE *)(a1 + 82) = *(_BYTE *)(a2 + 82);
  *(_BYTE *)(a1 + 83) = *(_BYTE *)(a2 + 83);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  v6 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRelease(v6);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  v7 = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = v7;
  v8 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  swift_bridgeObjectRelease(v8);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  return a1;
}

uint64_t sub_1001696F8(uint64_t a1, unsigned int a2)
{
  int v2;
  unint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 209))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 16);
      if (v3 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10016974C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 200) = 0;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 208) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 209) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 209) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

void type metadata accessor for UniversalControlPreferencesDiagnostics.DiagnosticState()
{
  sub_10003B1DC();
}

_QWORD *initializeBufferWithCopyOfBuffer for P2PStreamName(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

_QWORD *assignWithCopy for P2PStreamName(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

_QWORD *assignWithTake for P2PStreamName(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t sub_100169880(uint64_t a1, unsigned int a2)
{
  int v2;
  unint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 8);
      if (v3 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1001698D4(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

void type metadata accessor for UniversalControlConfigurationDiagnostics.DiagnosticState()
{
  sub_10003B1DC();
}

uint64_t sub_100169934(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return swift_bridgeObjectRelease(a1[1]);
}

void sub_10016995C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = a2[1];
  *a1 = *a2;
  a1[1] = v2;
  swift_bridgeObjectRetain();
  sub_10003AFBC();
  sub_1000050D4();
}

uint64_t *sub_100169988(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

_QWORD *sub_1001699E4(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;

  swift_bridgeObjectRelease(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v4);
  return a1;
}

void type metadata accessor for InputDevicesDiagnostics.DiagnosticState()
{
  sub_10003B1DC();
}

unint64_t sub_100169A30()
{
  unint64_t result;

  result = qword_1002B34C8;
  if (!qword_1002B34C8)
  {
    result = swift_getWitnessTable(&unk_100227E6C, &type metadata for SyncController.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B34C8);
  }
  return result;
}

unint64_t sub_100169A70()
{
  unint64_t result;

  result = qword_1002B34D0;
  if (!qword_1002B34D0)
  {
    result = swift_getWitnessTable(&unk_100227F24, &type metadata for UniversalControlPreferencesDiagnostics.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B34D0);
  }
  return result;
}

unint64_t sub_100169AB0()
{
  unint64_t result;

  result = qword_1002B34D8;
  if (!qword_1002B34D8)
  {
    result = swift_getWitnessTable(&unk_100227FDC, &type metadata for UniversalControlConfigurationDiagnostics.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B34D8);
  }
  return result;
}

unint64_t sub_100169AF0()
{
  unint64_t result;

  result = qword_1002B34E0;
  if (!qword_1002B34E0)
  {
    result = swift_getWitnessTable(&unk_100228094, &type metadata for InputDevicesDiagnostics.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B34E0);
  }
  return result;
}

unint64_t sub_100169B30()
{
  unint64_t result;

  result = qword_1002B34E8;
  if (!qword_1002B34E8)
  {
    result = swift_getWitnessTable(&unk_100228004, &type metadata for InputDevicesDiagnostics.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B34E8);
  }
  return result;
}

unint64_t sub_100169B70()
{
  unint64_t result;

  result = qword_1002B34F0;
  if (!qword_1002B34F0)
  {
    result = swift_getWitnessTable(&unk_10022802C, &type metadata for InputDevicesDiagnostics.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B34F0);
  }
  return result;
}

unint64_t sub_100169BB0()
{
  unint64_t result;

  result = qword_1002B34F8;
  if (!qword_1002B34F8)
  {
    result = swift_getWitnessTable(&unk_100227F4C, &type metadata for UniversalControlConfigurationDiagnostics.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B34F8);
  }
  return result;
}

unint64_t sub_100169BF0()
{
  unint64_t result;

  result = qword_1002B3500;
  if (!qword_1002B3500)
  {
    result = swift_getWitnessTable(&unk_100227F74, &type metadata for UniversalControlConfigurationDiagnostics.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B3500);
  }
  return result;
}

unint64_t sub_100169C30()
{
  unint64_t result;

  result = qword_1002B3508;
  if (!qword_1002B3508)
  {
    result = swift_getWitnessTable(&unk_100227E94, &type metadata for UniversalControlPreferencesDiagnostics.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B3508);
  }
  return result;
}

unint64_t sub_100169C70()
{
  unint64_t result;

  result = qword_1002B3510;
  if (!qword_1002B3510)
  {
    result = swift_getWitnessTable(&unk_100227EBC, &type metadata for UniversalControlPreferencesDiagnostics.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B3510);
  }
  return result;
}

unint64_t sub_100169CB0()
{
  unint64_t result;

  result = qword_1002B3518;
  if (!qword_1002B3518)
  {
    result = swift_getWitnessTable(&unk_100227DDC, &type metadata for SyncController.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B3518);
  }
  return result;
}

unint64_t sub_100169CF0()
{
  unint64_t result;

  result = qword_1002B3520;
  if (!qword_1002B3520)
  {
    result = swift_getWitnessTable(&unk_100227E04, &type metadata for SyncController.DiagnosticState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B3520);
  }
  return result;
}

unint64_t sub_100169D2C()
{
  unint64_t result;

  result = qword_1002B3530;
  if (!qword_1002B3530)
  {
    result = swift_getWitnessTable(&unk_1002282DC, &type metadata for SyncController.DeviceDiagnostic.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B3530);
  }
  return result;
}

void sub_100169D68(uint64_t a1)
{
  unint64_t *v1;

  if (!sub_1000F027C(a1))
  {
    sub_10016ADFC();
    sub_10000DCA0(&qword_1002B4A00);
    sub_10016B168();
    atomic_store(sub_1000F00C8(), v1);
  }
  sub_1000F00A0();
}

void sub_100169DB8(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;

  if (!sub_1000F027C(a1))
  {
    v2 = sub_10000DCA0((uint64_t *)&unk_1002AC160);
    atomic_store(sub_10016AE0C(v2, v2), v1);
  }
  sub_100026914();
}

void sub_100169E04(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;

  if (!sub_1000F027C(a1))
  {
    v2 = sub_10000DCA0(&qword_1002B33C8);
    atomic_store(sub_10016AE0C(v2, v2), v1);
  }
  sub_100026914();
}

unint64_t sub_100169E50()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B3588;
  if (!qword_1002B3588)
  {
    v1 = sub_10000DCA0(&qword_1002B33D8);
    sub_100169DB8((uint64_t)&qword_1002AD110);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1002B3588);
  }
  return result;
}

void sub_100169ED0(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  void (*v3)(void);
  uint64_t v4;

  if (!sub_1000F027C(a1))
  {
    sub_10016ADFC();
    v4 = sub_10000DCA0(&qword_1002B33F8);
    v3();
    atomic_store(swift_getWitnessTable(v2, v4), v1);
  }
  sub_1000F00A0();
}

unint64_t sub_100169F28()
{
  unint64_t result;

  result = qword_1002B35A0;
  if (!qword_1002B35A0)
  {
    result = swift_getWitnessTable(&unk_100225BC8, &type metadata for SyncCoordinator.DiagnosticState);
    atomic_store(result, (unint64_t *)&qword_1002B35A0);
  }
  return result;
}

void sub_100169F64(uint64_t a1)
{
  unint64_t *v1;
  void (*v2)(void);
  void (*v3)(void);
  uint64_t v4;
  uint64_t v5;

  if (!sub_1000F027C(a1))
  {
    v3 = v2;
    sub_10000DCA0(&qword_1002AA560);
    v3();
    v4 = sub_100141400();
    atomic_store(swift_getWitnessTable(v4, v5), v1);
  }
  sub_100026914();
}

_QWORD *sub_100169FB8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v2 = a1[4];
  v11 = a1[3];
  v12 = a1[2];
  v3 = a1[5];
  v4 = a1[6];
  v5 = a1[7];
  v6 = a1[8];
  v8 = a1[9];
  v7 = a1[10];
  v9 = a1[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10005F508(v12, v11, v2, v3, v4, v5, v6, v8, v7, v9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *sub_10016A088(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[2];
  v3 = a1[13];
  swift_bridgeObjectRetain(a1[24]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  return a1;
}

void sub_10016A0D0(uint64_t a1)
{
  unint64_t *v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  if (!sub_1000F027C(a1))
  {
    v3 = v2(255);
    atomic_store(sub_10016AE0C(v3, v3), v1);
  }
  sub_1000050D4();
}

unint64_t sub_10016A104()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B35D0;
  if (!qword_1002B35D0)
  {
    v1 = sub_10000DCA0(&qword_1002B3478);
    sub_100168338((uint64_t)&unk_1002B35C0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1002B35D0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SyncController.DeviceDiagnostic.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_10016A1DC + 4 * byte_1002279E3[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10016A210 + 4 * byte_1002279DE[v4]))();
}

uint64_t sub_10016A210(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10016A218(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10016A220);
  return result;
}

uint64_t sub_10016A22C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10016A234);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_10016A238(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10016A240(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SyncController.DeviceDiagnostic.CodingKeys()
{
  return &type metadata for SyncController.DeviceDiagnostic.CodingKeys;
}

unint64_t sub_10016A260()
{
  unint64_t result;

  result = qword_1002B35D8;
  if (!qword_1002B35D8)
  {
    result = swift_getWitnessTable(&unk_1002282B4, &type metadata for SyncController.DeviceDiagnostic.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B35D8);
  }
  return result;
}

unint64_t sub_10016A2A0()
{
  unint64_t result;

  result = qword_1002B35E0;
  if (!qword_1002B35E0)
  {
    result = swift_getWitnessTable(&unk_100228224, &type metadata for SyncController.DeviceDiagnostic.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B35E0);
  }
  return result;
}

unint64_t sub_10016A2E0()
{
  unint64_t result;

  result = qword_1002B35E8;
  if (!qword_1002B35E8)
  {
    result = swift_getWitnessTable(&unk_10022824C, &type metadata for SyncController.DeviceDiagnostic.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B35E8);
  }
  return result;
}

uint64_t sub_10016A31C(uint64_t a1)
{
  return sub_100167E20(a1) & 1;
}

uint64_t sub_10016A348()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t sub_10016A358@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v4 - 88) = a3;
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, v4 - 88, v3);
}

uint64_t sub_10016A370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;
  uint64_t v11;

  return sub_10005F5EC(v10[19], v10[23], v10[20], v10[21], v10[22], v11, v10[18], v10[9], a9, a10);
}

uint64_t sub_10016A3A4()
{
  uint64_t v0;

  return ObservableObject<>.objectWillChange.getter(v0);
}

uint64_t sub_10016A3B4@<X0>(uint64_t a1@<X0>, char a2@<W8>)
{
  uint64_t v2;
  uint64_t v3;

  *(_BYTE *)(v3 - 88) = a2;
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, v3 - 88, v2);
}

uint64_t sub_10016A3CC()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 216) + 8))(*(_QWORD *)(v0 - 320), *(_QWORD *)(v0 - 256));
}

uint64_t sub_10016A3E8()
{
  uint64_t v0;

  return v0;
}

double sub_10016A408()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  double result;

  result = v2;
  *(_QWORD *)(v0 - 344) = v1;
  return result;
}

uint64_t sub_10016A454(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  return KeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, v5, v6, a5);
}

uint64_t sub_10016A468@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v4 - 88) = a3;
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, v4 - 88, v3);
}

uint64_t sub_10016A480()
{
  return type metadata accessor for SyncView(0);
}

uint64_t sub_10016A488()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 - 72));
}

uint64_t sub_10016A4B8@<X0>(uint64_t a1@<X8>)
{
  return swift_getObjectType(*(_QWORD *)(a1 + 8));
}

void sub_10016A4C4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 96) = 0;
  *(_QWORD *)(v0 + 104) = 0;
  *(_QWORD *)(v0 + 112) = 0;
  *(_QWORD *)(v0 + 120) = 0;
  *(_QWORD *)(v0 + 152) = 0;
  *(_QWORD *)(v0 + 160) = 0;
  *(_QWORD *)(v0 + 168) = 0;
  *(_QWORD *)(v0 + 184) = 0;
  *(_QWORD *)(v0 + 128) = 0;
  *(_QWORD *)(v0 + 136) = 0;
  *(_QWORD *)(v1 - 72) = 0;
  *(_DWORD *)(v0 + 180) = 2;
  *(_DWORD *)(v0 + 196) = 2;
}

uint64_t sub_10016A508()
{
  return type metadata accessor for SyncViewLocalData(0);
}

uint64_t sub_10016A510(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 - 408))(a1, *(_QWORD *)(v1 - 328));
}

void sub_10016A524()
{
  OS_dispatch_source_data_add.add(data:)(1uLL);
}

double sub_10016A530()
{
  double v0;

  return v0;
}

uint64_t sub_10016A548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a3, a4);
}

uint64_t sub_10016A554@<X0>(char a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 + 424) = a1;
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v1 + 424, v2);
}

uint64_t sub_10016A56C(uint64_t a1)
{
  return Logger.logObject.getter(a1);
}

uint64_t sub_10016A578@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v4 - 80) = a3;
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, v4 - 80, v3);
}

uint64_t sub_10016A590()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 - 272))();
}

uint64_t sub_10016A59C(uint64_t a1)
{
  uint64_t v1;

  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(a1, v1);
}

void sub_10016A5D4()
{
  _QWORD *v0;

  v0[12] = 0;
  v0[13] = 0;
  v0[14] = 0;
  v0[15] = 0;
  v0[19] = 0;
  v0[20] = 0;
  v0[21] = 0;
  v0[23] = 0;
  v0[16] = 0;
}

uint64_t sub_10016A5F0()
{
  uint64_t v0;
  uint64_t v1;

  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v0 + 424, v1);
}

uint64_t sub_10016A600(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 208) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 208, v3 - 200, v2, v1);
}

uint64_t sub_10016A624()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10016A62C@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 336) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return type metadata accessor for UniversalControlLink.Endpoint(0);
}

uint64_t sub_10016A650()
{
  uint64_t v0;

  return swift_endAccess(v0 + 408);
}

uint64_t sub_10016A658()
{
  uint64_t v0;
  uint64_t v1;

  return KeyedDecodingContainer.decode(_:forKey:)(v1 - 112, v0);
}

void sub_10016A66C()
{
  uint64_t v0;
  uint64_t v1;

  *(_BYTE *)(v0 + 507) = *(_DWORD *)(v0 + 196);
  *(_QWORD *)(v0 + 512) = *(_QWORD *)(v0 + 184);
  *(_BYTE *)(v0 + 520) = *(_BYTE *)(v1 - 128);
  *(_BYTE *)(v0 + 521) = *(_DWORD *)(v0 + 180);
  *(_WORD *)(v0 + 526) = *(_WORD *)(v1 - 130);
}

uint64_t sub_10016A698()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

uint64_t sub_10016A6A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return KeyedDecodingContainer.decode<A>(_:forKey:)(v0, v2 - 65, v1, v0);
}

uint64_t sub_10016A6C8()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v0, v2);
}

double sub_10016A6D4()
{
  CGFloat v0;
  CGFloat v1;
  CGFloat v2;
  CGFloat v3;
  CGRect v5;

  v5.origin.x = v3;
  v5.origin.y = v2;
  v5.size.width = v1;
  v5.size.height = v0;
  return CGRectGetMinX(v5);
}

double sub_10016A6E8()
{
  CGFloat v0;
  CGFloat v1;
  CGFloat v2;
  CGFloat v3;
  CGRect v5;

  v5.origin.x = v3;
  v5.origin.y = v2;
  v5.size.width = v1;
  v5.size.height = v0;
  return CGRectGetMinY(v5);
}

uint64_t sub_10016A6FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return KeyedEncodingContainer.encode<A>(_:forKey:)(v3 - 72, v3 - 81, v1, v2, a1);
}

uint64_t sub_10016A71C(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_10016A724(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

void sub_10016A72C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = v0[19];
  v0[4] = v1;
  v0[15] = *(_QWORD *)(v2 + 72);
}

uint64_t sub_10016A754(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_10016A77C(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

uint64_t sub_10016A790()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v3 - 88, v3 - 89, v0, v1, v2);
}

void sub_10016A7B0()
{
  uint64_t v0;

  *(_DWORD *)(v0 + 180) = 2;
  *(_DWORD *)(v0 + 196) = 2;
}

uint64_t sub_10016A7D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return swift_arrayDestroy(v3, 1, a3);
}

uint64_t sub_10016A7E0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 16) = v1;
  return swift_unknownObjectRetain_n(v1, 2);
}

uint64_t sub_10016A7F0()
{
  return type metadata accessor for UniversalControlLink.Endpoint(0);
}

uint64_t sub_10016A7FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return Publisher<>.sink(receiveValue:)(a1, a2, v2, v3);
}

uint64_t sub_10016A808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, v5, v4, a4);
}

void sub_10016A814()
{
  sub_100143ED8();
}

void sub_10016A830()
{
  sub_100143ED8();
}

uint64_t sub_10016A84C(uint64_t a1)
{
  return UniversalControlLink.Endpoint.device.getter(a1);
}

uint64_t sub_10016A854()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 168));
}

uint64_t sub_10016A85C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_100006FCC(a1, a2, (uint64_t *)(v2 - 72));
}

void sub_10016A868()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 96) = 0;
  *(_QWORD *)(v0 + 104) = 0;
  *(_QWORD *)(v0 + 112) = 0;
  *(_QWORD *)(v0 + 120) = 0;
  *(_QWORD *)(v0 + 152) = 0;
  *(_QWORD *)(v0 + 160) = 0;
  *(_QWORD *)(v0 + 168) = 0;
  *(_QWORD *)(v0 + 184) = 0;
  *(_DWORD *)(v0 + 180) = 2;
  *(_DWORD *)(v0 + 196) = 2;
}

uint64_t sub_10016A88C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 128) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 128, v3 - 120, v2, v1);
}

uint64_t sub_10016A8A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;

  return v3(v2, a2, v4);
}

uint64_t sub_10016A8B4()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 112));
}

double sub_10016A8D4()
{
  CGFloat v0;
  CGFloat v1;
  CGFloat v2;
  CGFloat v3;
  CGRect v5;

  v5.origin.x = v3;
  v5.origin.y = v2;
  v5.size.width = v1;
  v5.size.height = v0;
  return CGRectGetWidth(v5);
}

double sub_10016A8EC()
{
  CGFloat v0;
  CGFloat v1;
  CGFloat v2;
  CGFloat v3;
  CGRect v5;

  v5.origin.x = v3;
  v5.origin.y = v2;
  v5.size.width = v1;
  v5.size.height = v0;
  return CGRectGetHeight(v5);
}

uint64_t sub_10016A904(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

uint64_t sub_10016A910(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return dispatch thunk of static Equatable.== infix(_:_:)(v2, v3, v1, a1);
}

uint64_t sub_10016A928()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v4 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8);
  *(_QWORD *)(v3 - 272) = v4;
  return v4(v2, v0);
}

uint64_t sub_10016A940@<X0>(char a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 + 424) = a1;
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v1 + 424, v2);
}

uint64_t sub_10016A958@<X0>(char a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 + 424) = a1;
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v1 + 424, v2);
}

uint64_t sub_10016A970()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10016A978(uint64_t a1)
{
  return UniversalControlLink.endpoint1.getter(a1);
}

_QWORD *sub_10016A9A4(_QWORD *a1)
{
  uint64_t v1;

  return sub_10000DBE4(a1, v1);
}

uint64_t sub_10016A9BC()
{
  uint64_t v0;

  return v0;
}

void *sub_10016A9C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;

  return sub_100166E78(v3, v2, v0, v1);
}

double sub_10016AA00()
{
  double v0;

  return v0;
}

uint64_t sub_10016AA14()
{
  uint64_t v0;

  return dispatch thunk of ObservableObject.objectWillChange.getter(v0);
}

uint64_t sub_10016AA44()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 96));
}

void sub_10016AA4C()
{
  sub_100058678();
}

uint64_t sub_10016AA60(uint64_t a1)
{
  return UniversalControlLink.Endpoint.anchor.getter(a1);
}

uint64_t sub_10016AAAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_arrayInitWithTakeFrontToBack(a1, a2, 1, *(_QWORD *)(v2 - 72));
}

uint64_t sub_10016AAB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_arrayInitWithTakeBackToFront(a1, a2, 1, *(_QWORD *)(v2 - 72));
}

double sub_10016AAC4()
{
  double v0;

  return v0;
}

double sub_10016AAE0()
{
  CGFloat v0;
  CGFloat v1;
  CGFloat v2;
  CGFloat v3;
  CGRect v5;

  v5.origin.x = v3;
  v5.origin.y = v2;
  v5.size.width = v1;
  v5.size.height = v0;
  return CGRectGetMaxY(v5);
}

double sub_10016AAF4()
{
  CGFloat v0;
  CGFloat v1;
  CGFloat v2;
  CGFloat v3;
  CGRect v5;

  v5.origin.x = v3;
  v5.origin.y = v2;
  v5.size.width = v1;
  v5.size.height = v0;
  return CGRectGetMaxX(v5);
}

uint64_t sub_10016AB08(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return static UniversalControlDeviceID.< infix(_:_:)(a1, a2, v2, v3);
}

uint64_t sub_10016AB14(uint64_t a1)
{
  return UniversalControlLink.endpoint2.getter(a1);
}

uint64_t sub_10016AB20()
{
  return type metadata accessor for UniversalControlLink.Endpoint(0);
}

uint64_t sub_10016AB28()
{
  return type metadata accessor for ConnectedDevices(0);
}

void sub_10016AB30(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  sub_10005FA70(v3 - 272, v3 - 232, a3);
}

void sub_10016AB3C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  sub_10005FA70(v3 - 312, v3 - 192, a3);
}

uint64_t sub_10016AB48()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10016AB60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 344) = v1;
  return UniversalControlLink.endpoint2.getter(a1);
}

void sub_10016AB74(float a1)
{
  float *v1;

  *v1 = a1;
  UniversalControlDevice.label.getter();
}

uint64_t sub_10016AB88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;

  a14 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(&a14, v14, v15, a4);
}

uint64_t sub_10016AB9C()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 104));
}

uint64_t sub_10016ABA4(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_10016ABAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return _s13EnsembleAgent26PasteboardAcquisitionErrorOwst_0(a1, a2, 1, v2);
}

uint64_t sub_10016ABB8()
{
  uint64_t v0;
  unint64_t v1;

  return sub_100022AEC(v0, v1);
}

uint64_t sub_10016ABD0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 - 272))();
}

uint64_t sub_10016ABDC()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 256) + 8))(v0, *(_QWORD *)(v1 - 248));
}

uint64_t sub_10016ABEC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10016ABFC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10016AC0C()
{
  uint64_t v0;

  return v0;
}

void sub_10016AC24(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 304) = a1;
}

uint64_t sub_10016AC30(uint64_t a1)
{
  uint64_t v1;

  return dispatch thunk of CustomStringConvertible.description.getter(*(_QWORD *)(v1 - 240), a1);
}

uint64_t sub_10016AC40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return dispatch thunk of Encoder.container<A>(keyedBy:)(a1, a1, a3, v3, v4);
}

uint64_t sub_10016AC50(uint64_t a1)
{
  uint64_t v1;

  return dispatch thunk of CustomStringConvertible.description.getter(v1, a1);
}

uint64_t sub_10016AC60(uint64_t a1)
{
  uint64_t v1;

  return dispatch thunk of CustomStringConvertible.description.getter(v1, a1);
}

uint64_t sub_10016AC70@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 - 72) = a3;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 72, v3, a1, a2);
}

void sub_10016AC80()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  sub_1000F42D8(v2, v1, v0);
}

uint64_t sub_10016AC90()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10016AC9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

void sub_10016ACAC(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_1000255F0(a1, v1);
}

uint64_t HIDAccelerationTable.entry.getter(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRetain(a2);
}

uint64_t sub_10016ACBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 208, v4, v5, a4);
}

uint64_t sub_10016ACCC(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

void sub_10016ACE0(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t sub_10016ACF0()
{
  uint64_t v0;
  _QWORD *v1;

  return sub_1001194A8(0, v0, v1);
}

uint64_t sub_10016AD00()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10016AD18()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 152) + 8))(v0, *(_QWORD *)(v1 - 144));
}

uint64_t sub_10016AD28()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 - 152));
}

uint64_t sub_10016AD30(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

void sub_10016AD38(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_1000255F0(a1, v1);
}

uint64_t sub_10016AD40(uint64_t a1)
{
  return UniversalControlLink.Endpoint.display.getter(a1);
}

_QWORD *sub_10016AD48()
{
  uint64_t v0;
  uint64_t v1;

  *(_BYTE *)(v0 + 632) = *(_BYTE *)(v1 - 176);
  return sub_10013FD98((_QWORD *)(v0 + 424));
}

uint64_t sub_10016AD58(uint64_t a1)
{
  return UniversalControlLink.endpoint1.getter(a1);
}

uint64_t sub_10016AD88(uint64_t a1)
{
  return UniversalControlLink.Endpoint.device.getter(a1);
}

void sub_10016AD90(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + 492) = a1;
  *(_QWORD *)(v1 + 496) = *(_QWORD *)(v1 + 128);
  *(_BYTE *)(v1 + 504) = *(_BYTE *)(v2 - 120);
}

uint64_t sub_10016ADA8(uint64_t a1, uint64_t a2)
{
  return sub_10009A0AC(a1, a2);
}

uint64_t sub_10016ADB8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10016ADC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return Dictionary.init(dictionaryLiteral:)(a1, a2, a3, v3);
}

void sub_10016ADCC()
{
  _QWORD *v0;

  v0[12] = 0;
  v0[13] = 0;
  v0[14] = 0;
  v0[15] = 0;
  v0[19] = 0;
  v0[20] = 0;
  v0[21] = 0;
  v0[23] = 0;
}

uint64_t sub_10016ADE4()
{
  uint64_t v0;

  return v0 + 424;
}

uint64_t sub_10016ADF4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  return sub_100006FCC(a1, v3, a3);
}

uint64_t sub_10016AE0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_getWitnessTable(v2, a2);
}

uint64_t sub_10016AE3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return UUID.init(uuid:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

void sub_10016AE6C(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 344) = a1;
}

void sub_10016AE78(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 312) = a1;
}

void sub_10016AE84(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 288) = a1;
}

uint64_t sub_10016AE90()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10016AE9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return dispatch thunk of Decoder.container<A>(keyedBy:)(a1, a2, a3, v3, v4);
}

uint64_t sub_10016AEA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return static UniversalControlUUID.compare(lhs:rhs:)(a1, a2, a3, v3);
}

uint64_t sub_10016AEC4(uint64_t a1)
{
  return dispatch thunk of UniversalControlDevice.id.getter(a1);
}

uint64_t sub_10016AECC(uint64_t a1)
{
  return UniversalControlLink.Endpoint.device.getter(a1);
}

uint64_t sub_10016AED4(uint64_t a1)
{
  return UniversalControlLink.endpoint2.getter(a1);
}

void sub_10016AEDC(uint64_t a1)
{
  sub_1001684CC(a1);
}

uint64_t sub_10016AEE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return dispatch thunk of Decoder.container<A>(keyedBy:)(a1, a2, a3, v3, v4);
}

uint64_t sub_10016AEF0@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_10016AEFC()
{
  uint64_t v0;
  unint64_t v1;

  return sub_1001A8C70(v1, v0);
}

void sub_10016AF08(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_100025A28(v2, a2);
}

void sub_10016AF10(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 280) = a1;
}

uint64_t sub_10016AF1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t sub_10016AF24()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 232);
}

uint64_t sub_10016AF38@<X0>(uint64_t a1@<X8>)
{
  return *(_QWORD *)(a1 - 256);
}

uint64_t sub_10016AF4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return static UniversalControlDeviceID.< infix(_:_:)(a1, a2, v2, v3);
}

uint64_t sub_10016AF58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return static UniversalControlUUID.compare(lhs:rhs:)(a1, a2, v2, v3);
}

uint64_t sub_10016AF64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return dispatch thunk of static Equatable.== infix(_:_:)(a1, a2, v4, a4);
}

uint64_t sub_10016AF6C()
{
  return type metadata accessor for UniversalControlAnchor(0);
}

uint64_t sub_10016AF84()
{
  return type metadata accessor for UniversalControlPreferences(0);
}

uint64_t sub_10016AF8C()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
}

uint64_t sub_10016AF98()
{
  uint64_t v0;

  return swift_release_n(v0, 3);
}

uint64_t sub_10016AFA4()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t sub_10016AFB0(uint64_t a1)
{
  return UniversalControlLink.endpoint2.getter(a1);
}

void sub_10016AFB8()
{
  sub_10016FC9C();
}

uint64_t sub_10016AFC4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10016AFD0@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_10016AFDC()
{
  uint64_t v0;

  return v0;
}

void sub_10016AFE8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 568) = *(_QWORD *)(v0 + 120);
  *(_BYTE *)(v0 + 576) = *(_BYTE *)(v1 - 152);
}

uint64_t sub_10016B008@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t sub_10016B014(uint64_t a1)
{
  return dispatch thunk of UniversalControlDevice.id.getter(a1);
}

uint64_t sub_10016B01C()
{
  uint64_t v0;

  return swift_endAccess(v0 - 128);
}

uint64_t sub_10016B024()
{
  uint64_t v0;

  return swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 - 168));
}

uint64_t sub_10016B030()
{
  uint64_t v0;

  return sub_100005988(*(_QWORD **)(v0 + 136));
}

void sub_10016B038()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 552) = *(_QWORD *)(v0 + 152);
  *(_BYTE *)(v0 + 560) = *(_BYTE *)(v1 - 144);
}

uint64_t sub_10016B04C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 96))(a1, a2, v3);
}

uint64_t sub_10016B058@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, _QWORD)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, *(_QWORD *)(v3 - 256));
}

void sub_10016B064()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 600) = *(_QWORD *)(v0 + 104);
  *(_BYTE *)(v0 + 608) = *(_BYTE *)(v1 - 168);
}

uint64_t sub_10016B078(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return swift_allocObject(v3, a2, v2 | 7);
}

void sub_10016B084()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 584) = *(_QWORD *)(v0 + 112);
  *(_BYTE *)(v0 + 592) = *(_BYTE *)(v1 - 160);
}

void sub_10016B0AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v10 - 152) = (char *)&a9 - v9;
}

void sub_10016B0C0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 536) = *(_QWORD *)(v0 + 160);
  *(_BYTE *)(v0 + 544) = *(_BYTE *)(v1 - 136);
}

BOOL sub_10016B0D4(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10016B0E0()
{
  return 0;
}

uint64_t sub_10016B0F8()
{
  uint64_t v0;
  unint64_t v1;

  return sub_10002517C(v0, v1);
}

void sub_10016B118()
{
  _QWORD *v0;

  v0[12] = 0;
  v0[13] = 0;
  v0[14] = 0;
  v0[15] = 0;
  v0[19] = 0;
  v0[20] = 0;
  v0[21] = 0;
}

uint64_t sub_10016B12C()
{
  return 8;
}

uint64_t sub_10016B138()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10002D108(v0, v1);
}

uint64_t sub_10016B144()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10016B150(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  unint64_t v4;

  return sub_100006FCC(v3, v4, a3);
}

uint64_t sub_10016B15C()
{
  unint64_t v0;
  uint64_t v1;

  return sub_100022AEC(v1, v0);
}

void sub_10016B168()
{
  uint64_t v0;

  sub_10016A0D0(v0);
}

uint64_t sub_10016B180()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 - 272))();
}

void sub_10016B198()
{
  sub_10016615C();
}

char **EnsembleFeatureFlag.SystemUIScene.unsafeMutableAddressor()
{
  return &static EnsembleFeatureFlag.SystemUIScene;
}

uint64_t EnsembleFeatureFlag.isEnabled.getter()
{
  _OWORD *v0;
  _OWORD *v1;
  __int128 v2;
  char v3;
  _QWORD v5[5];

  v5[3] = &type metadata for EnsembleFeatureFlag;
  v5[4] = sub_100007794();
  v1 = (_OWORD *)swift_allocObject(&unk_10028E488, 64, 7);
  v5[0] = v1;
  v2 = v0[1];
  v1[1] = *v0;
  v1[2] = v2;
  *(_OWORD *)((char *)v1 + 42) = *(_OWORD *)((char *)v0 + 26);
  v3 = isFeatureEnabled(_:)(v5);
  sub_100005988(v5);
  return v3 & 1;
}

uint64_t sub_10016B224()
{
  uint64_t v0;

  return swift_deallocObject(v0, 64, 7);
}

uint64_t EnsembleFeatureFlag.domain.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t EnsembleFeatureFlag.feature.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

void static EnsembleFeatureFlag.SystemUIScene.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = "Ensemble";
  *(_QWORD *)(a1 + 8) = 8;
  *(_BYTE *)(a1 + 16) = 2;
  *(_QWORD *)(a1 + 24) = "SystemUIScene";
  *(_QWORD *)(a1 + 32) = 13;
  *(_WORD *)(a1 + 40) = 2;
}

__n128 initializeWithCopy for EnsembleFeatureFlag(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 26) = *(_OWORD *)(a2 + 26);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for EnsembleFeatureFlag(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;
  BOOL v4;

  if (a2)
  {
    if (a2 >= 0xFF && *(_BYTE *)(a1 + 42))
    {
      v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 41);
      v4 = v3 >= 2;
      v2 = (v3 + 2147483646) & 0x7FFFFFFF;
      if (!v4)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EnsembleFeatureFlag(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 42) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 42) = 0;
    if (a2)
      *(_BYTE *)(result + 41) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for EnsembleFeatureFlag()
{
  return &type metadata for EnsembleFeatureFlag;
}

void static CGImageSourceRef.new(url:options:)(uint64_t a1@<X1>, NSURL *a2@<X8>)
{
  const __CFURL *v3;
  const __CFURL *v4;
  NSDictionary v5;

  URL._bridgeToObjectiveC()(a2);
  v4 = v3;
  if (a1)
  {
    sub_10016B538();
    sub_10016B3B8();
    v5.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  else
  {
    v5.super.isa = 0;
  }
  CGImageSourceCreateWithURL(v4, v5.super.isa);

  sub_10000B350();
}

unint64_t sub_10016B3B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002AA4F0;
  if (!qword_1002AA4F0)
  {
    type metadata accessor for CFString(255);
    result = swift_getWitnessTable(&unk_10021C378, v1);
    atomic_store(result, (unint64_t *)&qword_1002AA4F0);
  }
  return result;
}

void CGImageSourceRef.image(at:options:)(size_t index, CFDictionaryRef options)
{
  CGImageSource *v2;
  const __CFDictionary *isa;

  isa = options;
  if (options)
  {
    sub_10016B538();
    sub_10016B3B8();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  CGImageSourceCreateImageAtIndex(v2, index, isa);

  sub_10000B350();
}

void static CGImageSourceRef.new(data:options:)(uint64_t a1, uint64_t a2, const __CFDictionary *isa)
{
  NSData v4;

  v4.super.isa = Data._bridgeToObjectiveC()().super.isa;
  if (isa)
  {
    sub_10016B538();
    sub_10016B3B8();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  CGImageSourceCreateWithData(v4.super.isa, isa);

  sub_10000B350();
}

size_t CGImageSourceRef.count.getter()
{
  CGImageSource *v0;

  return CGImageSourceGetCount(v0);
}

uint64_t CGImageSourceRef.type.getter()
{
  CGImageSource *v0;
  const __CFString *v1;
  __CFString *v2;
  uint64_t v3;

  v1 = (id)CGImageSourceGetType(v0);
  if (!v1)
    return 0;
  v2 = (__CFString *)v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

void sub_10016B538()
{
  type metadata accessor for CFString(0);
}

uint64_t sub_10016B540(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t result;

  v6 = String.utf8CString.getter(a1, a2);
  v7 = sub_10016B5CC((const char *)(v6 + 32));
  result = swift_release();
  if ((a4 & 1) != 0)
    goto LABEL_5;
  if (a3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a3 <= 0x7FFFFFFF)
  {
    dispatch_workloop_set_scheduler_priority(v7, a3, 1);
LABEL_5:
    dispatch_activate(v7);
    return (uint64_t)v7;
  }
  __break(1u);
  return result;
}

dispatch_workloop_t sub_10016B5CC(const char *a1)
{
  return dispatch_workloop_create_inactive(a1);
}

ValueMetadata *type metadata accessor for GenerationCount()
{
  return &type metadata for GenerationCount;
}

double sub_10016B5F0(uint64_t a1)
{
  double result;

  swift_bridgeObjectRetain();
  sub_10016B9B0(a1);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t sub_10016B630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0);
}

Swift::Int sub_10016B64C()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  swift_bridgeObjectRetain();
  sub_10016B9B0((uint64_t)v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int sub_10016B6A0()
{
  return sub_10016B64C();
}

double sub_10016B6A8(uint64_t a1)
{
  return sub_10016B5F0(a1);
}

Swift::Int sub_10016B6B0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v2 = *v1;
  v3 = v1[1];
  Hasher.init(_seed:)(v5, a1);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_10016B704(uint64_t *a1, uint64_t *a2)
{
  return sub_10016B630(*a1, a1[1], *a2, a2[1]);
}

uint64_t sub_10016B718(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[4];

  sub_10000DBE4(a1, a1[3]);
  v4 = sub_10016B99C();
  dispatch thunk of Decoder.singleValueContainer()(v4);
  if (v2)
  {
    sub_100005988(a1);
  }
  else
  {
    sub_10000DBE4(v7, v7[3]);
    v5 = sub_10016B99C();
    v1 = dispatch thunk of SingleValueDecodingContainer.decode(_:)(v5);
    sub_100005988(v7);
    sub_100005988(a1);
  }
  return v1;
}

uint64_t sub_10016B7C0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  v5 = a1[3];
  v6 = a1[4];
  sub_10000DBE4(a1, v5);
  dispatch thunk of Encoder.singleValueContainer()(v10, v5, v6);
  v7 = v11;
  v8 = v12;
  sub_10003FEF8((uint64_t)v10, v11);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)(a2, a3, v7, v8);
  return sub_100005988(v10);
}

uint64_t sub_10016B858@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_10016B718(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_10016B880(_QWORD *a1)
{
  uint64_t *v1;

  return sub_10016B7C0(a1, *v1, v1[1]);
}

uint64_t sub_10016B898(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain(a2);
  return a1;
}

uint64_t sub_10016B8C8()
{
  uint64_t *v0;

  return sub_10016B898(*v0, v0[1]);
}

uint64_t getEnumTagSinglePayload for P2PStreamName(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for P2PStreamName(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for P2PStreamName()
{
  return &type metadata for P2PStreamName;
}

unint64_t sub_10016B960()
{
  unint64_t result;

  result = qword_1002B35F0;
  if (!qword_1002B35F0)
  {
    result = swift_getWitnessTable(&unk_1002284A4, &type metadata for P2PStreamName);
    atomic_store(result, (unint64_t *)&qword_1002B35F0);
  }
  return result;
}

uint64_t sub_10016B99C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10016B9B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return String.hash(into:)(a1, v2, v1);
}

uint64_t Completion.__allocating_init(file:line:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = sub_10016C130();
  Completion.init(file:line:body:)(a1, a2, a3, a4, a5);
  return v10;
}

uint64_t Completion.callAsFunction(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _OWORD *v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t result;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[24];

  v2 = v1;
  v4 = (_OWORD *)(v1 + 16);
  sub_10000B2F8(v1 + 16, (uint64_t)v24, 1);
  v6 = *(void (**)(uint64_t))(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  if (!v6)
  {
    *v4 = xmmword_10021BB90;
    return sub_10016C140();
  }
  if (v6 != (void (*)(uint64_t))1)
  {
    *v4 = xmmword_10021BB90;
    swift_retain(v5);
    sub_10016C140();
    v6(a1);
    return sub_10016C140();
  }
  _StringGuts.grow(_:)(37);
  swift_bridgeObjectRelease(0xE000000000000000);
  v8 = sub_10016C0E0();
  sub_10016C120(v8, v9, v10, v11, v12, v13, v14, v15, v20, v21, v22, 0);
  swift_bridgeObjectRelease(v2);
  result = sub_10016C10C((uint64_t)"Fatal error", v16, v17, v23, 0xE000000000000000, (uint64_t)"EnsembleAgent/Completion.swift", v18, v19, 64, 0);
  __break(1u);
  return result;
}

uint64_t Completion.__allocating_init(file:line:)()
{
  uint64_t v0;

  v0 = sub_10016C130();
  Completion.init(file:line:)();
  return v0;
}

unint64_t Completion.state.getter()
{
  uint64_t v0;
  unint64_t v1;
  _BYTE v3[24];

  sub_10000B2F8(v0 + 16, (uint64_t)v3, 0);
  v1 = *(_QWORD *)(v0 + 16);
  sub_10016BD64(v1, *(_QWORD *)(v0 + 24));
  return v1;
}

unint64_t Completion.state.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  _BYTE v8[24];

  sub_10000B2F8(v2 + 16, (uint64_t)v8, 1);
  v5 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return sub_10016BD50(v5, v6);
}

uint64_t (*Completion.state.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  sub_10000B2F8(v1 + 16, a1, 33);
  return j__swift_endAccess;
}

uint64_t Completion.location.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 40));
  return v1;
}

_QWORD *Completion.init(file:line:)()
{
  _QWORD *v0;
  Swift::String v1;
  void *object;
  uint64_t v4;
  uint64_t v5;

  sub_10016C0F8();
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v1._object;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(object);
  v0[4] = v4;
  v0[5] = v5;
  v0[2] = 0;
  v0[3] = 0;
  return v0;
}

_QWORD *Completion.init(file:line:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  Swift::String v8;
  void *object;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  sub_10016C0F8();
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v8._object;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(object);
  v5[4] = v12;
  v5[5] = v13;
  if (a4)
    v10 = a5;
  else
    v10 = 0;
  v5[2] = a4;
  v5[3] = v10;
  return v5;
}

