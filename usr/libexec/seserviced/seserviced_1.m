uint64_t sub_1000B5AA4(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSString v24;
  id v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t result;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _BYTE v35[280];

  v33 = *a1;
  v4 = a1[2];
  v32 = a1[1];
  v31 = v4;
  v5 = a1[3];
  v6 = sub_100063D3C((uint64_t *)&unk_100346040);
  inited = swift_initStackObject(v6, v35);
  *(_OWORD *)(inited + 16) = xmmword_1002892A0;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CBCentralManagerScanOptionFilterIdentifierString);
  *(_QWORD *)(inited + 40) = v8;
  v10 = a3[2];
  v9 = a3[3];
  sub_1001BD2CC(v4, v5);
  v12 = v11;
  v13 = sub_100063D3C((uint64_t *)&unk_100346060);
  v14 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
  v15 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v13, v14);
  v17 = v16;
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRetain(v9);
  v18._countAndFlagsBits = v15;
  v18._object = v17;
  String.append(_:)(v18);
  swift_bridgeObjectRelease(v17);
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 48) = v10;
  *(_QWORD *)(inited + 56) = v9;
  *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(CBCentralManagerScanOptionMatchingRuleMaskKey);
  *(_QWORD *)(inited + 88) = v19;
  *(_QWORD *)(inited + 120) = &type metadata for Data;
  *(_QWORD *)(inited + 96) = v33;
  *(_QWORD *)(inited + 104) = v32;
  *(_QWORD *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)(CBCentralManagerScanOptionMatchingRulePayloadKey);
  *(_QWORD *)(inited + 136) = v20;
  *(_QWORD *)(inited + 168) = &type metadata for Data;
  *(_QWORD *)(inited + 144) = v31;
  *(_QWORD *)(inited + 152) = v5;
  *(_QWORD *)(inited + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)(CBCentralManagerScanOptionMatchingRuleRSSIKey);
  *(_QWORD *)(inited + 184) = v21;
  v22 = a3[4];
  *(_QWORD *)(inited + 216) = &type metadata for Int;
  *(_QWORD *)(inited + 192) = v22;
  *(_QWORD *)(inited + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)(CBCentralManagerScanOptionMatchingRuleServiceUUID);
  *(_QWORD *)(inited + 232) = v23;
  swift_bridgeObjectRetain(v9);
  sub_100063C8C(v33, v32);
  sub_100063C8C(v31, v5);
  v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v9);
  v25 = objc_msgSend((id)objc_opt_self(CBUUID), "UUIDWithString:", v24);

  *(_QWORD *)(inited + 264) = sub_10006C25C(0, (unint64_t *)&unk_100348970, CBUUID_ptr);
  *(_QWORD *)(inited + 240) = v25;
  v26 = sub_10017C218(inited);
  v27 = (_QWORD *)*a2;
  result = swift_isUniquelyReferenced_nonNull_native(*a2);
  *a2 = (uint64_t)v27;
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_1001C49D8(0, v27[2] + 1, 1, v27);
    v27 = (_QWORD *)result;
    *a2 = result;
  }
  v30 = v27[2];
  v29 = v27[3];
  if (v30 >= v29 >> 1)
  {
    result = (uint64_t)sub_1001C49D8((_QWORD *)(v29 > 1), v30 + 1, 1, v27);
    v27 = (_QWORD *)result;
    *a2 = result;
  }
  v27[2] = v30 + 1;
  v27[v30 + 4] = v26;
  return result;
}

void sub_1000B5D80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  id v14;
  char v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  os_log_type_t v21;
  _BOOL4 v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  void (*v40)(uint64_t, char *, uint64_t);
  uint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  NSObject *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  _BYTE v57[24];
  uint64_t v58;
  uint64_t v59;
  uint64_t v60[3];

  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchPredicate(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (uint64_t *)((char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v13 = (void *)qword_100354EE8;
  *v12 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8);
  v14 = v13;
  v15 = _dispatchPreconditionTest(_:)(v12);
  (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v12, v8);
  if ((v15 & 1) != 0)
  {
    v56 = v1;
    v16 = swift_retain_n(a1, 2);
    v17 = Logger.logObject.getter(v16);
    v21 = static os_log_type_t.info.getter(v17, v18, v19, v20);
    v22 = os_log_type_enabled(v17, v21);
    v55 = v7;
    if (v22)
    {
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      v24 = swift_slowAlloc(32, -1);
      v54 = v4;
      v25 = v24;
      v53 = v3;
      *(_DWORD *)v23 = 136315138;
      v60[0] = v24;
      v26 = swift_retain(a1);
      v27 = UUID.uuidString.getter(v26);
      v29 = v28;
      swift_release(a1);
      v58 = sub_1001C56EC(v27, v29, v60);
      v3 = v53;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v23 + 4, v23 + 12);
      swift_release_n(a1, 2);
      swift_bridgeObjectRelease(v29);
      _os_log_impl((void *)&_mh_execute_header, v17, v21, "Replacing connected peer %s", v23, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      v30 = v25;
      v4 = v54;
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v23, -1, -1);
    }
    else
    {
      swift_release_n(a1, 2);
    }

    v31 = (uint64_t *)(v56 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals);
    swift_beginAccess(v56 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals, v60, 0, 0);
    v32 = *v31;
    swift_retain(a1);
    v33 = swift_bridgeObjectRetain(v32);
    v34 = sub_1000D89A0(v33, a1);
    swift_bridgeObjectRelease(v32);
    v35 = swift_release(a1);
    if (v34)
    {
      v36 = v34[2];
      *(_BYTE *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_isConnected) = *(_BYTE *)(v36
                                                                                + OBJC_IVAR____TtC10seserviced4Peer_isConnected);
      v37 = v36 + OBJC_IVAR____TtC10seserviced4Peer_connectionIdentifier;
      swift_beginAccess(v36 + OBJC_IVAR____TtC10seserviced4Peer_connectionIdentifier, &v58, 0, 0);
      v38 = v55;
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v55, v37, v3);
      v39 = a1 + OBJC_IVAR____TtC10seserviced4Peer_connectionIdentifier;
      swift_beginAccess(a1 + OBJC_IVAR____TtC10seserviced4Peer_connectionIdentifier, v57, 33, 0);
      v40 = *(void (**)(uint64_t, char *, uint64_t))(v4 + 40);
      swift_retain(v36);
      v40(v39, v38, v3);
      swift_endAccess(v57);
      *(_QWORD *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_sequenceNumber) = *(_QWORD *)(v36
                                                                                     + OBJC_IVAR____TtC10seserviced4Peer_sequenceNumber);
      v41 = *(_QWORD *)(v36 + OBJC_IVAR____TtC10seserviced4Peer_buffer);
      v42 = *(_QWORD *)(v36 + OBJC_IVAR____TtC10seserviced4Peer_buffer + 8);
      sub_10006BA34(v41, v42);
      swift_release(v36);
      v43 = (uint64_t *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_buffer);
      v44 = *(_QWORD *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_buffer);
      v45 = *(_QWORD *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_buffer + 8);
      *v43 = v41;
      v43[1] = v42;
      sub_10006B9B4(v44, v45);
      v46 = v34[2];
      v34[2] = a1;
      swift_retain(a1);
      swift_release(v34);
      swift_release(v46);
    }
    else
    {
      v47 = Logger.logObject.getter(v35);
      v51 = static os_log_type_t.info.getter(v47, v48, v49, v50);
      if (os_log_type_enabled(v47, v51))
      {
        v52 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v52 = 0;
        _os_log_impl((void *)&_mh_execute_header, v47, v51, "Peer is not connected", v52, 2u);
        swift_slowDealloc(v52, -1, -1);
      }

    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1000B61EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  os_log_type_t v26;
  _BOOL4 v27;
  _DWORD *v28;
  _QWORD v29[2];
  __int128 v30;
  char *v31;
  __int128 v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  __int128 v48;
  unint64_t v49;
  uint64_t v50;
  _BYTE v51[8];

  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (_QWORD *)((char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v7 = qword_100354EE8;
  *v6 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) == 0)
  {
    __break(1u);
    JUMPOUT(0x1000B6434);
  }
  v9 = *(NSObject **)(a1 + 128);
  if (v9 && (v9 = -[NSObject outputStream](v9, "outputStream")) != 0)
  {
    v10 = v9;
    v11 = (uint64_t *)(a1 + 160);
    v12 = OBJC_IVAR____TtC10seserviced6DSKBLE_logger;
    swift_beginAccess(v11, v51, 0, 0);
    if (-[NSObject hasSpaceAvailable](v10, "hasSpaceAvailable"))
    {
      v35 = v1 + v12;
      *(_QWORD *)&v13 = 136315138;
      v32 = v13;
      *((_QWORD *)&v14 + 1) = 2;
      v48 = xmmword_1002888E0;
      v31 = (char *)&type metadata for Any + 8;
      *(_QWORD *)&v14 = 134218240;
      v30 = v14;
      v29[1] = v10;
      v29[0] = v11;
      v17 = *v11;
      if (*(_QWORD *)(*v11 + 16))
      {
        v19 = *(_QWORD *)(v17 + 32);
        v18 = *(_QWORD *)(v17 + 40);
        v20 = v18 >> 62;
        sub_100063C8C(v19, v18);
        sub_100063C8C(v19, v18);
        v21 = sub_100063C8C(v19, v18);
        v22 = Logger.logObject.getter(v21);
        v26 = static os_log_type_t.info.getter(v22, v23, v24, v25);
        v27 = os_log_type_enabled(v22, v26);
        v36 = v19 >> 8;
        v37 = v19 >> 16;
        v38 = v19 >> 24;
        v47 = HIDWORD(v19);
        v39 = v19 >> 40;
        v40 = HIWORD(v19);
        v41 = HIBYTE(v19);
        v42 = v18 >> 8;
        v43 = v18 >> 16;
        v44 = v18 >> 24;
        v45 = HIDWORD(v18);
        v46 = v18 >> 40;
        v49 = v18 >> 62;
        if (v27)
        {
          v28 = (_DWORD *)swift_slowAlloc(12, -1);
          v33 = swift_slowAlloc(32, -1);
          v50 = v33;
          v34 = v28;
          *v28 = v32;
          __asm { BR              X9 }
        }

        sub_100063CD0(v19, v18);
        sub_100063CD0(v19, v18);
        __asm { BR              X8 }
      }
    }
  }
  else
  {
    v10 = Logger.logObject.getter(v9);
    v15 = ((uint64_t (*)(void))static os_log_type_t.info.getter)();
    if (os_log_type_enabled(v10, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v15, "Output stream does not exist", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }
  }

}

void sub_1000B6FEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  NSObject *v23;
  uint64_t v24;
  os_log_type_t v25;
  uint8_t *v26;
  _BYTE v28[32];
  _BYTE v29[24];

  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = &v28[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v12 = qword_100354EE8;
  *v11 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v7);
  v13 = (id)v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v11);
  v14 = (*(uint64_t (**)(_QWORD *, uint64_t))(v8 + 8))(v11, v7);
  if ((v12 & 1) != 0)
  {
    if (*(_QWORD *)(v3 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager))
    {
      v15 = (uint64_t *)(v3 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectionRequests);
      swift_beginAccess(v3 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectionRequests, v29, 0, 0);
      v16 = *v15;
      swift_retain(a3);
      swift_bridgeObjectRetain(v16);
      v18 = sub_1000D9D38(v17, a3);
      swift_bridgeObjectRelease(v16);
      swift_release(a3);
      if (v18)
      {
        v18[8] = a1;
        v18[9] = a2;
        *((_BYTE *)v18 + 80) = 0;
        swift_release(v18);
      }
      v19 = (uint64_t *)(v3 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals);
      swift_beginAccess(v3 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals, v28, 0, 0);
      v20 = *v19;
      swift_retain(a3);
      swift_bridgeObjectRetain(v20);
      v22 = sub_1000D89A0(v21, a3);
      swift_bridgeObjectRelease(v20);
      swift_release(a3);
      if (v22)
      {
        v22[22] = a1;
        v22[23] = a2;
        *((_BYTE *)v22 + 192) = 0;
        if (*((_BYTE *)v22 + 168) != 2)
          sub_1000B725C(a1, a2, 0, 256, a3);
        swift_release(v22);
      }
    }
    else
    {
      v23 = Logger.logObject.getter(v14);
      v25 = static os_log_type_t.error.getter(v23, v24);
      if (os_log_type_enabled(v23, v25))
      {
        v26 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v26 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, v25, "Not running", v26, 2u);
        swift_slowDealloc(v26, -1, -1);
      }

    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1000B725C(uint64_t a1, uint64_t a2, char a3, int a4, uint64_t a5)
{
  char *v5;
  char *v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  void *v19;
  uint64_t *v20;
  uint64_t v21;
  id v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  NSObject *v37;
  uint64_t v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  NSObject *v42;
  uint64_t v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  NSObject *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  char v63;
  uint64_t v64;
  NSObject *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  os_log_type_t v69;
  _BOOL4 v70;
  char v71;
  __int16 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  NSObject *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  os_log_type_t v88;
  uint8_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v94;
  id v95;
  uint64_t v96;
  NSDictionary v97;
  id v98;
  _QWORD *v99;
  _QWORD *v100;
  void *v101;
  uint64_t v102;
  uint64_t inited;
  uint64_t v104;
  id v105;
  unint64_t v106;
  Class isa;
  id v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  int v112;
  char *v113;
  NSObject *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  os_log_type_t v118;
  _BOOL4 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  _BYTE v141[12];
  int v142;
  _QWORD *v143;
  id v144;
  uint64_t v145;
  uint64_t v146;
  _OWORD v147[2];
  __int128 v148;
  void *v149;
  uint64_t v150;
  char v151[24];
  char v152[112];
  char v153[32];

  v6 = v5;
  v145 = a1;
  v11 = type metadata accessor for DispatchPredicate(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v15 = &v141[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v16 = qword_100354EE8;
  *v15 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v12 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v11);
  v17 = (id)v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)(v15);
  v18 = (*(uint64_t (**)(_QWORD *, uint64_t))(v12 + 8))(v15, v11);
  if ((v16 & 1) == 0)
  {
    __break(1u);
    goto LABEL_44;
  }
  v19 = *(void **)&v6[OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager];
  if (v19)
  {
    v20 = (uint64_t *)&v6[OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals];
    swift_beginAccess(&v6[OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals], v153, 0, 0);
    v21 = *v20;
    swift_retain(a5);
    swift_bridgeObjectRetain(v21);
    v22 = v19;
    v23 = sub_1000D89A0(v21, a5);
    swift_bridgeObjectRelease(v21);
    v24 = swift_release(a5);
    if (!v23)
    {
      v41 = swift_retain_n(a5, 2);
      v42 = Logger.logObject.getter(v41);
      v44 = static os_log_type_t.error.getter(v42, v43);
      if (os_log_type_enabled(v42, v44))
      {
        v45 = (uint8_t *)swift_slowAlloc(12, -1);
        v46 = swift_slowAlloc(32, -1);
        v144 = v22;
        *(_DWORD *)v45 = 136315138;
        *(_QWORD *)&v148 = v46;
        v47 = swift_retain(a5);
        v48 = UUID.uuidString.getter(v47);
        v50 = v49;
        swift_release(a5);
        *(_QWORD *)&v147[0] = sub_1001C56EC(v48, v50, (uint64_t *)&v148);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v147, (char *)v147 + 8, v45 + 4, v45 + 12);
        swift_release_n(a5, 2);
        swift_bridgeObjectRelease(v50);
        _os_log_impl((void *)&_mh_execute_header, v42, v44, "Peripheral is not connected %s", v45, 0xCu);
        swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v46, -1, -1);
        swift_slowDealloc(v45, -1, -1);

      }
      else
      {
        swift_release_n(a5, 2);

      }
      return;
    }
    v23[22] = v145;
    v23[23] = a2;
    *((_BYTE *)v23 + 192) = a3 & 1;
    v143 = v23;
    v144 = v22;
    if ((a3 & 1) != 0)
    {
      v25 = swift_retain_n(a5, 2);
      v26 = Logger.logObject.getter(v25);
      v30 = static os_log_type_t.info.getter(v26, v27, v28, v29);
      if (os_log_type_enabled(v26, v30))
      {
        v31 = (uint8_t *)swift_slowAlloc(12, -1);
        v32 = swift_slowAlloc(32, -1);
        *(_DWORD *)v31 = 136315138;
        *(_QWORD *)&v148 = v32;
        v33 = swift_retain(a5);
        v34 = UUID.uuidString.getter(v33);
        v36 = v35;
        swift_release(a5);
        *(_QWORD *)&v147[0] = sub_1001C56EC(v34, v36, (uint64_t *)&v148);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v147, (char *)v147 + 8, v31 + 4, v31 + 12);
        swift_release_n(a5, 2);
        swift_bridgeObjectRelease(v36);
        _os_log_impl((void *)&_mh_execute_header, v26, v30, "Disabling RSSI zone detection for %s", v31, 0xCu);
        swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v32, -1, -1);
        swift_slowDealloc(v31, -1, -1);
      }
      else
      {
        swift_release_n(a5, 2);
      }

      v100 = v143;
      v101 = (void *)v143[3];
      v102 = sub_100063D3C(&qword_1003460E0);
      inited = swift_initStackObject(v102, v152);
      *(_OWORD *)(inited + 16) = xmmword_1002888E0;
      *(_QWORD *)&v148 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBRSSIStatisticAndDetectionEnable);
      *((_QWORD *)&v148 + 1) = v104;
      v105 = v101;
      AnyHashable.init<A>(_:)(&v148, &type metadata for String, &protocol witness table for String);
      *(_QWORD *)(inited + 96) = &type metadata for Bool;
      *(_BYTE *)(inited + 72) = 0;
      v106 = sub_10017C368(inited);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v106);
      v108 = v144;
      objc_msgSend(v144, "setRSSIStatisticsDetection:options:", v105, isa);

      *((_BYTE *)v100 + 168) = 2;
      swift_release(v100);
      return;
    }
    v142 = a4;
    if (*((_BYTE *)v23 + 168) == 2)
    {
      v51 = Logger.logObject.getter(v24);
      v55 = static os_log_type_t.info.getter(v51, v52, v53, v54);
      if (os_log_type_enabled(v51, v55))
      {
        v56 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v56 = 0;
        _os_log_impl((void *)&_mh_execute_header, v51, v55, "Starting RSSI zone detection", v56, 2u);
        swift_slowDealloc(v56, -1, -1);
      }

      *((_BYTE *)v23 + 168) = 1;
    }
    swift_beginAccess(v23 + 5, v151, 0, 0);
    v57 = v23[8];
    v58 = v23[9];
    v59 = sub_10006BA78(v23 + 5, v57);
    v60 = *(_QWORD *)(v57 - 8);
    __chkstk_darwin(v59, v59);
    v62 = &v141[-((v61 + 15) & 0xFFFFFFFFFFFFFFF0)];
    (*(void (**)(_BYTE *))(v60 + 16))(v62);
    v63 = (*(uint64_t (**)(uint64_t, uint64_t))(v58 + 72))(v57, v58);
    v64 = (*(uint64_t (**)(_BYTE *, uint64_t))(v60 + 8))(v62, v57);
    v65 = Logger.logObject.getter(v64);
    v69 = static os_log_type_t.info.getter(v65, v66, v67, v68);
    v70 = os_log_type_enabled(v65, v69);
    if ((v63 & 1) != 0)
    {
      v71 = v142;
      v72 = v142;
      if (v70)
      {
        v73 = swift_slowAlloc(22, -1);
        *(_DWORD *)v73 = 134218240;
        *(_QWORD *)&v148 = v145;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, (char *)&v148 + 8, v73 + 4, v73 + 12);
        *(_WORD *)(v73 + 12) = 2048;
        *(_QWORD *)&v148 = a2;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, (char *)&v148 + 8, v73 + 14, v73 + 22);
        _os_log_impl((void *)&_mh_execute_header, v65, v69, "Enabling AOP based zone detection thresholds closer %ld further %ld", (uint8_t *)v73, 0x16u);
        swift_slowDealloc(v73, -1, -1);
      }

      v74 = sub_100063D3C((uint64_t *)&unk_100346040);
      v75 = swift_allocObject(v74, 320, 7);
      *(_OWORD *)(v75 + 16) = xmmword_1002892B0;
      *(_QWORD *)(v75 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CBRSSIStatisticAndDetectionEnable);
      *(_QWORD *)(v75 + 40) = v76;
      *(_QWORD *)(v75 + 72) = &type metadata for Bool;
      *(_BYTE *)(v75 + 48) = 1;
      *(_QWORD *)(v75 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(CBRSSIStatisticAndDetectionEnableAOPPath);
      *(_QWORD *)(v75 + 88) = v77;
      *(_QWORD *)(v75 + 120) = &type metadata for Int;
      *(_QWORD *)(v75 + 96) = 3;
      *(_QWORD *)(v75 + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)(CBRSSIStatisticAndDetectionMaskDecisionLogic);
      *(_QWORD *)(v75 + 136) = v78;
      *(_QWORD *)(v75 + 168) = &type metadata for Int;
      *(_QWORD *)(v75 + 144) = 2;
      *(_QWORD *)(v75 + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)(CBRSSIStatisticAndDetectionMaximumThresholdCloser);
      *(_QWORD *)(v75 + 184) = v79;
      *(_QWORD *)(v75 + 216) = &type metadata for Int;
      *(_QWORD *)(v75 + 192) = v145;
      *(_QWORD *)(v75 + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)(CBRSSIStatisticAndDetectionMaximumThresholdFurther);
      *(_QWORD *)(v75 + 232) = v80;
      *(_QWORD *)(v75 + 264) = &type metadata for Int;
      *(_QWORD *)(v75 + 240) = a2;
      *(_QWORD *)(v75 + 272) = static String._unconditionallyBridgeFromObjectiveC(_:)(CBRSSIStatisticAndDetectionWindowConfiguration);
      *(_QWORD *)(v75 + 280) = v81;
      *(_QWORD *)(v75 + 312) = &type metadata for Int;
      *(_QWORD *)(v75 + 288) = 1;
      v82 = sub_10017C218(v75);
      v83 = v82;
      if ((v72 & 0x100) == 0)
      {
        v84 = Logger.logObject.getter(v82);
        v88 = static os_log_type_t.info.getter(v84, v85, v86, v87);
        if (os_log_type_enabled(v84, v88))
        {
          v89 = (uint8_t *)swift_slowAlloc(5, -1);
          *(_DWORD *)v89 = 16777472;
          LOBYTE(v148) = v71;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, (char *)&v148 + 1, v89 + 4, v89 + 5);
          _os_log_impl((void *)&_mh_execute_header, v84, v88, "Using peripheral TX power value %hhd", v89, 5u);
          swift_slowDealloc(v89, -1, -1);
        }

        v90 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBRSSIStatisticAndDetectionTxPower);
        v92 = v91;
        v149 = &type metadata for Int8;
        LOBYTE(v148) = v71;
        sub_10006C2B4(&v148, v147);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v83);
        v146 = v83;
        sub_10018DEC0(v147, v90, v92, isUniquelyReferenced_nonNull_native);
        v83 = v146;
        swift_bridgeObjectRelease(v92);
        swift_bridgeObjectRelease(0x8000000000000000);
      }
      v94 = v143;
      v95 = (id)v143[3];
      v96 = sub_10017D088(v83);
      swift_bridgeObjectRelease(v83);
      v97.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v96);
      v98 = v144;
      objc_msgSend(v144, "setRSSIStatisticsDetection:options:", v95, v97.super.isa);
      v99 = v94;
      goto LABEL_42;
    }
    v109 = a2;
    if (v70)
    {
      v110 = swift_slowAlloc(22, -1);
      *(_DWORD *)v110 = 134218240;
      *(_QWORD *)&v148 = v145;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, (char *)&v148 + 8, v110 + 4, v110 + 12);
      *(_WORD *)(v110 + 12) = 2048;
      *(_QWORD *)&v148 = a2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, (char *)&v148 + 8, v110 + 14, v110 + 22);
      _os_log_impl((void *)&_mh_execute_header, v65, v69, "Requested RSSI thresholds closer %ld further %ld", (uint8_t *)v110, 0x16u);
      swift_slowDealloc(v110, -1, -1);
    }

    v111 = v143;
    v112 = *((unsigned __int8 *)v143 + 168);
    if (v112 != 2)
    {
      v113 = v6;
      v114 = Logger.logObject.getter(v113);
      v118 = static os_log_type_t.info.getter(v114, v115, v116, v117);
      v119 = os_log_type_enabled(v114, v118);
      if ((v112 & 1) != 0)
      {
        if (v119)
        {
          v121 = swift_slowAlloc(22, -1);
          *(_DWORD *)v121 = 134218240;
          v122 = v145;
          *(_QWORD *)&v148 = v145;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, (char *)&v148 + 8, v121 + 4, v121 + 12);
          *(_WORD *)(v121 + 12) = 2048;
          *(_QWORD *)&v148 = -120;
          v111 = v143;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, (char *)&v148 + 8, v121 + 14, v121 + 22);

          _os_log_impl((void *)&_mh_execute_header, v114, v118, "Current zone further setting thresholds closer %ld further %ld", (uint8_t *)v121, 0x16u);
          swift_slowDealloc(v121, -1, -1);
        }
        else
        {

          v122 = v145;
        }

        v132 = (void *)v111[3];
        v133 = sub_100063D3C(&qword_1003460E0);
        v134 = swift_initStackObject(v133, &v150);
        *(_OWORD *)(v134 + 16) = xmmword_1002892A0;
        *(_QWORD *)&v148 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBRSSIStatisticAndDetectionEnable);
        *((_QWORD *)&v148 + 1) = v135;
        v95 = v132;
        AnyHashable.init<A>(_:)(&v148, &type metadata for String, &protocol witness table for String);
        *(_QWORD *)(v134 + 96) = &type metadata for Bool;
        *(_BYTE *)(v134 + 72) = 1;
        *(_QWORD *)&v148 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBRSSIStatisticAndDetectionMaskDecisionLogic);
        *((_QWORD *)&v148 + 1) = v136;
        AnyHashable.init<A>(_:)(&v148, &type metadata for String, &protocol witness table for String);
        *(_QWORD *)(v134 + 168) = &type metadata for Int;
        *(_QWORD *)(v134 + 144) = 2;
        *(_QWORD *)&v148 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBRSSIStatisticAndDetectionMaximumThresholdCloser);
        *((_QWORD *)&v148 + 1) = v137;
        AnyHashable.init<A>(_:)(&v148, &type metadata for String, &protocol witness table for String);
        *(_QWORD *)(v134 + 240) = &type metadata for Int;
        *(_QWORD *)(v134 + 216) = v122;
        *(_QWORD *)&v148 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBRSSIStatisticAndDetectionMaximumThresholdFurther);
        *((_QWORD *)&v148 + 1) = v138;
        AnyHashable.init<A>(_:)(&v148, &type metadata for String, &protocol witness table for String);
        *(_QWORD *)(v134 + 312) = &type metadata for Int;
        *(_QWORD *)(v134 + 288) = -120;
        *(_QWORD *)&v148 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBRSSIStatisticAndDetectionWindowConfiguration);
        *((_QWORD *)&v148 + 1) = v139;
        AnyHashable.init<A>(_:)(&v148, &type metadata for String, &protocol witness table for String);
        *(_QWORD *)(v134 + 384) = &type metadata for Int;
        *(_QWORD *)(v134 + 360) = 1;
        v131 = v134;
      }
      else
      {
        if (v119)
        {
          v120 = swift_slowAlloc(22, -1);
          *(_DWORD *)v120 = 134218240;
          *(_QWORD *)&v148 = 10;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, (char *)&v148 + 8, v120 + 4, v120 + 12);

          *(_WORD *)(v120 + 12) = 2048;
          *(_QWORD *)&v148 = a2;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, (char *)&v148 + 8, v120 + 14, v120 + 22);
          _os_log_impl((void *)&_mh_execute_header, v114, v118, "Current zone closer setting thresholds closer %ld further %ld", (uint8_t *)v120, 0x16u);
          swift_slowDealloc(v120, -1, -1);
        }
        else
        {

        }
        v123 = (void *)v111[3];
        v124 = sub_100063D3C(&qword_1003460E0);
        v125 = swift_allocObject(v124, 392, 7);
        *(_OWORD *)(v125 + 16) = xmmword_1002892A0;
        *(_QWORD *)&v148 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBRSSIStatisticAndDetectionEnable);
        *((_QWORD *)&v148 + 1) = v126;
        v95 = v123;
        AnyHashable.init<A>(_:)(&v148, &type metadata for String, &protocol witness table for String);
        *(_QWORD *)(v125 + 96) = &type metadata for Bool;
        *(_BYTE *)(v125 + 72) = 1;
        *(_QWORD *)&v148 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBRSSIStatisticAndDetectionMaskDecisionLogic);
        *((_QWORD *)&v148 + 1) = v127;
        AnyHashable.init<A>(_:)(&v148, &type metadata for String, &protocol witness table for String);
        *(_QWORD *)(v125 + 168) = &type metadata for Int;
        *(_QWORD *)(v125 + 144) = 2;
        *(_QWORD *)&v148 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBRSSIStatisticAndDetectionMaximumThresholdCloser);
        *((_QWORD *)&v148 + 1) = v128;
        AnyHashable.init<A>(_:)(&v148, &type metadata for String, &protocol witness table for String);
        *(_QWORD *)(v125 + 240) = &type metadata for Int;
        *(_QWORD *)(v125 + 216) = 10;
        *(_QWORD *)&v148 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBRSSIStatisticAndDetectionMaximumThresholdFurther);
        *((_QWORD *)&v148 + 1) = v129;
        AnyHashable.init<A>(_:)(&v148, &type metadata for String, &protocol witness table for String);
        *(_QWORD *)(v125 + 312) = &type metadata for Int;
        *(_QWORD *)(v125 + 288) = v109;
        *(_QWORD *)&v148 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBRSSIStatisticAndDetectionWindowConfiguration);
        *((_QWORD *)&v148 + 1) = v130;
        AnyHashable.init<A>(_:)(&v148, &type metadata for String, &protocol witness table for String);
        *(_QWORD *)(v125 + 384) = &type metadata for Int;
        *(_QWORD *)(v125 + 360) = 1;
        v131 = v125;
      }
      v140 = sub_10017C368(v131);
      v97.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v140);
      v98 = v144;
      objc_msgSend(v144, "setRSSIStatisticsDetection:options:", v95, v97.super.isa);
      v99 = v111;
LABEL_42:
      swift_release(v99);

      return;
    }
LABEL_44:
    __break(1u);
    return;
  }
  v37 = Logger.logObject.getter(v18);
  v39 = static os_log_type_t.error.getter(v37, v38);
  if (os_log_type_enabled(v37, v39))
  {
    v40 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v40 = 0;
    _os_log_impl((void *)&_mh_execute_header, v37, v39, "Not running", v40, 2u);
    swift_slowDealloc(v40, -1, -1);
  }

}

void sub_1000B81EC(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  NSString v39;
  void *v40;
  id v41;
  id v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  void *v47;
  uint64_t v48;
  Class isa;
  id v50;
  id v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  void *v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  os_log_t v61;
  uint64_t v62;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v64;
  id v65;
  NSData v66;
  void *v67;
  uint64_t v68;
  os_log_type_t v69;
  uint8_t *v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(char *, uint64_t, uint64_t);
  uint64_t v74;
  NSObject *v75;
  uint64_t v76;
  os_log_type_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  void (*v86)(char *, uint64_t);
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  os_log_t v90;
  uint64_t v91;
  uint64_t v92;
  NSObject *v93;
  uint64_t v94;
  os_log_type_t v95;
  uint8_t *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  NSObject *v101;
  uint64_t v102;
  os_log_type_t v103;
  uint8_t *v104;
  unint64_t v105;
  uint64_t v106;
  _BYTE *v107;
  void (*v108)(char *, uint64_t);
  unint64_t v109;
  uint64_t v110;
  _BYTE *v111;
  unint64_t v112;
  uint64_t v113;
  _BYTE *v114;
  NSObject *v115;
  uint64_t v116;
  os_log_type_t v117;
  uint8_t *v118;
  unint64_t v119;
  uint64_t v120;
  _BYTE *v121;
  uint64_t v122;
  id v123;
  id v124;
  char *v125;
  uint64_t v126;
  os_log_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _BYTE v132[16];
  uint64_t v133[3];
  char v134[24];
  uint64_t v135;

  v5 = v4;
  v126 = a2;
  v127 = a3;
  v130 = a1;
  v7 = type metadata accessor for UUID(0);
  v128 = *(_QWORD *)(v7 - 8);
  v129 = v7;
  v9 = __chkstk_darwin(v7, v8);
  v11 = (char *)&v122 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v9, v12);
  v15 = (char *)&v122 - v14;
  __chkstk_darwin(v13, v16);
  v125 = (char *)&v122 - v17;
  v18 = type metadata accessor for DispatchPredicate(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18, v20);
  v22 = (uint64_t *)((char *)&v122 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v23 = qword_100354EE8;
  *v22 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v19 + 104))(v22, enum case for DispatchPredicate.onQueue(_:), v18);
  v24 = (id)v23;
  LOBYTE(v23) = _dispatchPreconditionTest(_:)(v22);
  v25 = (*(uint64_t (**)(_QWORD *, uint64_t))(v19 + 8))(v22, v18);
  if ((v23 & 1) != 0)
  {
    if (!*(_QWORD *)(v5 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager))
    {
      v66.super.isa = (Class)Logger.logObject.getter(v25);
      v69 = static os_log_type_t.error.getter(v66.super.isa, v68);
      if (os_log_type_enabled((os_log_t)v66.super.isa, v69))
      {
        v70 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v70 = 0;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)v66.super.isa, v69, "Not running", v70, 2u);
        swift_slowDealloc(v70, -1, -1);
      }
      goto LABEL_14;
    }
    v26 = (uint64_t *)(v5 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals);
    v27 = swift_beginAccess(v5 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals, v134, 0, 0);
    v28 = *v26;
    __chkstk_darwin(v27, v29);
    *(&v122 - 2) = a4;
    swift_bridgeObjectRetain(v28);
    v30 = sub_1001F2028((uint64_t (*)(uint64_t *))sub_1000DCA58, (uint64_t)(&v122 - 4), v28);
    swift_bridgeObjectRelease(v28);
    if (v30)
    {
      if (*((unsigned __int8 *)v30 + 32) - 3 > 1)
      {
        v92 = swift_retain_n(v30, 2);
        v93 = Logger.logObject.getter(v92);
        v95 = static os_log_type_t.error.getter(v93, v94);
        if (os_log_type_enabled(v93, v95))
        {
          v96 = (uint8_t *)swift_slowAlloc(12, -1);
          v97 = swift_slowAlloc(32, -1);
          v133[0] = v97;
          *(_DWORD *)v96 = 136315138;
          LOBYTE(v131) = *((_BYTE *)v30 + 32);
          v98 = String.init<A>(describing:)(&v131, &type metadata for DSKBLE.BLEPeripheral.State);
          v100 = v99;
          v131 = sub_1001C56EC(v98, v99, v133);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v131, v132, v96 + 4, v96 + 12);
          swift_release_n(v30, 2);
          swift_bridgeObjectRelease(v100);
          _os_log_impl((void *)&_mh_execute_header, v93, v95, "Writing a characteristic in a bad state %s", v96, 0xCu);
          swift_arrayDestroy(v97, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v97, -1, -1);
          swift_slowDealloc(v96, -1, -1);
        }
        else
        {
          swift_release_n(v30, 2);
        }

        v112 = sub_1000AAC04();
        v113 = swift_allocError(&type metadata for DSKBLE.BLEError, v112, 0, 0);
        *v114 = 2;
        swift_willThrow(v113);
        swift_release(v30);
      }
      else
      {
        *((_BYTE *)v30 + 32) = 4;
        swift_beginAccess(v30 + 5, v133, 0, 0);
        v31 = v30[8];
        v32 = v30[9];
        v33 = sub_10006BA78(v30 + 5, v31);
        v34 = *(_QWORD *)(v31 - 8);
        __chkstk_darwin(v33, v33);
        v36 = (char *)&v122 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v34 + 16))(v36);
        (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v32);
        v38 = v37;
        (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v31);
        v39 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v38);
        v40 = (void *)objc_opt_self(CBUUID);
        v41 = objc_msgSend(v40, "UUIDWithString:", v39);

        v42 = objc_msgSend((id)v30[3], "services");
        if (!v42)
          goto LABEL_19;
        v43 = v42;
        v44 = sub_10006C25C(0, &qword_1003460E8, CBService_ptr);
        v45 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v43, v44);

        v46 = v41;
        v47 = sub_1000DA3D4(v45);
        swift_bridgeObjectRelease(v45);

        if (v47)
        {
          v124 = v46;
          v48 = v130;
          isa = UUID._bridgeToObjectiveC()().super.isa;
          v50 = objc_msgSend(v40, "UUIDWithNSUUID:", isa);

          v51 = objc_msgSend(v47, "characteristics");
          if (v51)
          {
            v52 = v51;
            v53 = sub_10006C25C(0, &qword_1003460F0, CBCharacteristic_ptr);
            v54 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v52, v53);

            v55 = v50;
            v56 = sub_1000DA3D4(v54);
            swift_bridgeObjectRelease(v54);

            if (v56)
            {
              v57 = v128;
              v58 = *(void (**)(char *, uint64_t, uint64_t))(v128 + 16);
              v123 = v47;
              v59 = (uint64_t)v125;
              v130 = (uint64_t)v56;
              v60 = v129;
              v58(v125, v48, v129);
              swift_beginAccess(v30 + 12, &v131, 33, 0);
              v62 = v126;
              v61 = v127;
              sub_100063C8C(v126, (unint64_t)v127);
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v30[12]);
              v135 = v30[12];
              v30[12] = 0x8000000000000000;
              sub_10018E894(v62, (uint64_t)v61, v59, isUniquelyReferenced_nonNull_native);
              v64 = v30[12];
              v30[12] = v135;
              swift_bridgeObjectRelease(v64);
              (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v59, v60);
              swift_endAccess(&v131);
              v65 = (id)v30[3];
              v66.super.isa = Data._bridgeToObjectiveC()().super.isa;
              v67 = (void *)v130;
              objc_msgSend(v65, "writeValue:forCharacteristic:type:", v66.super.isa, v130, 0);
              swift_release(v30);

LABEL_14:
              return;
            }
          }
          v115 = Logger.logObject.getter(v51);
          v117 = static os_log_type_t.error.getter(v115, v116);
          if (os_log_type_enabled(v115, v117))
          {
            v118 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v118 = 0;
            _os_log_impl((void *)&_mh_execute_header, v115, v117, "Peripheral's characteristic is null", v118, 2u);
            swift_slowDealloc(v118, -1, -1);
          }

          v119 = sub_1000AAC04();
          v120 = swift_allocError(&type metadata for DSKBLE.BLEError, v119, 0, 0);
          *v121 = 2;
          swift_willThrow(v120);
          swift_release(v30);

        }
        else
        {
LABEL_19:
          v101 = Logger.logObject.getter(v42);
          v103 = static os_log_type_t.error.getter(v101, v102);
          if (os_log_type_enabled(v101, v103))
          {
            v104 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v104 = 0;
            _os_log_impl((void *)&_mh_execute_header, v101, v103, "Peripheral's service is null", v104, 2u);
            swift_slowDealloc(v104, -1, -1);
          }

          v105 = sub_1000AAC04();
          v106 = swift_allocError(&type metadata for DSKBLE.BLEError, v105, 0, 0);
          *v107 = 2;
          swift_willThrow(v106);
          swift_release(v30);

        }
      }
    }
    else
    {
      v71 = v128;
      v72 = v129;
      v73 = *(void (**)(char *, uint64_t, uint64_t))(v128 + 16);
      v73(v15, v130, v129);
      v74 = ((uint64_t (*)(char *, uint64_t, uint64_t))v73)(v11, a4, v72);
      v75 = Logger.logObject.getter(v74);
      v77 = static os_log_type_t.error.getter(v75, v76);
      v78 = v77;
      if (os_log_type_enabled(v75, v77))
      {
        v79 = swift_slowAlloc(22, -1);
        v127 = v75;
        v80 = v71;
        v81 = v79;
        v130 = swift_slowAlloc(64, -1);
        v133[0] = v130;
        *(_DWORD *)v81 = 136315394;
        v82 = sub_1000C69C4((unint64_t *)&qword_100344CC8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        LODWORD(v126) = v78;
        v83 = dispatch thunk of CustomStringConvertible.description.getter(v72, v82);
        v85 = v84;
        v131 = sub_1001C56EC(v83, v84, v133);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v131, v132, v81 + 4, v81 + 12);
        swift_bridgeObjectRelease(v85);
        v86 = *(void (**)(char *, uint64_t))(v80 + 8);
        v86(v15, v72);
        *(_WORD *)(v81 + 12) = 2080;
        v87 = dispatch thunk of CustomStringConvertible.description.getter(v72, v82);
        v89 = v88;
        v131 = sub_1001C56EC(v87, v88, v133);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v131, v132, v81 + 14, v81 + 22);
        swift_bridgeObjectRelease(v89);
        v86(v11, v72);
        v90 = v127;
        _os_log_impl((void *)&_mh_execute_header, v127, (os_log_type_t)v126, "Writing characteristic %s for disconnected/unknown peripheral %s", (uint8_t *)v81, 0x16u);
        v91 = v130;
        swift_arrayDestroy(v130, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v91, -1, -1);
        swift_slowDealloc(v81, -1, -1);

      }
      else
      {

        v108 = *(void (**)(char *, uint64_t))(v71 + 8);
        v108(v15, v72);
        v108(v11, v72);
      }
      v109 = sub_1000AAC04();
      v110 = swift_allocError(&type metadata for DSKBLE.BLEError, v109, 0, 0);
      *v111 = 4;
      swift_willThrow(v110);
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000B8CAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v10;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend(*(id *)(*(_QWORD *)a1 + 24), "identifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  LOBYTE(a2) = static UUID.== infix(_:_:)(v7, a2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return a2 & 1;
}

void sub_1000B8D70(uint64_t a1)
{
  _QWORD *v1;
  id v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  char *v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  os_log_type_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  Class isa;
  id v42;
  uint64_t v43;
  id v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v53;
  void *v54;
  id v55;
  Class v56;
  NSObject *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint8_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  uint64_t v67;
  os_log_type_t v68;
  uint8_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  _QWORD v76[2];
  id v77;
  uint64_t v78;
  _OWORD v79[2];
  __int128 v80;
  void *v81;
  char v82[24];

  v3 = v1;
  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (_QWORD *)((char *)v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v10 = (void *)qword_100354EE8;
  *v9 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5);
  v11 = v10;
  v12 = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v9, v5);
  if ((v12 & 1) == 0)
  {
    __break(1u);
    goto LABEL_31;
  }
  v13 = *(void **)((char *)v3 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager);
  if (v13)
  {
    if ((*(_BYTE *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_isConnected) & 1) == 0)
    {
      v14 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralState);
      if (v14 >= 5 && (v14 == 10 || v14 == 5))
      {
        v16 = (char *)v3 + OBJC_IVAR____TtC10seserviced6DSKBLE_logger;
        swift_retain_n(a1, 2);
        v2 = v13;
        v17 = Logger.logObject.getter(v2);
        v21 = static os_log_type_t.info.getter(v17, v18, v19, v20);
        if (os_log_type_enabled(v17, v21))
        {
          v22 = swift_slowAlloc(12, -1);
          v76[1] = v16;
          v23 = (uint8_t *)v22;
          v24 = swift_slowAlloc(32, -1);
          v77 = v2;
          v25 = v24;
          *(_DWORD *)v23 = 136315138;
          *(_QWORD *)&v80 = v24;
          v26 = swift_retain(a1);
          v27 = UUID.uuidString.getter(v26);
          v29 = v28;
          swift_release(a1);
          *(_QWORD *)&v79[0] = sub_1001C56EC(v27, v29, (uint64_t *)&v80);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v79, (char *)v79 + 8, v23 + 4, v23 + 12);
          swift_release_n(a1, 2);
          swift_bridgeObjectRelease(v29);
          _os_log_impl((void *)&_mh_execute_header, v17, v21, "Resetting disconnection history for %s", v23, 0xCu);
          swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
          v30 = v25;
          v2 = v77;
          swift_slowDealloc(v30, -1, -1);
          swift_slowDealloc(v23, -1, -1);
        }
        else
        {
          swift_release_n(a1, 2);
        }

        v31 = (_QWORD *)((char *)v3 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectionRequests);
        swift_beginAccess((char *)v3 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectionRequests, v82, 0, 0);
        v32 = *v31;
        swift_retain(a1);
        v33 = swift_bridgeObjectRetain(v32);
        v3 = sub_1000D9D38(v33, a1);
        swift_bridgeObjectRelease(v32);
        v34 = swift_release(a1);
        if (!v3)
        {
          v57 = Logger.logObject.getter(v34);
          v61 = static os_log_type_t.info.getter(v57, v58, v59, v60);
          if (os_log_type_enabled(v57, (os_log_type_t)v61))
          {
            v62 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v62 = 0;
            _os_log_impl((void *)&_mh_execute_header, v57, (os_log_type_t)v61, "Connection request not found", v62, 2u);
            swift_slowDealloc(v62, -1, -1);
          }

          goto LABEL_28;
        }
        if (v3[7])
          goto LABEL_23;
        v35 = sub_100063D3C(&qword_100345398);
        v36 = type metadata accessor for UUID(0);
        v37 = *(_QWORD *)(v36 - 8);
        v38 = *(unsigned __int8 *)(v37 + 80);
        v39 = (v38 + 32) & ~v38;
        v40 = swift_allocObject(v35, v39 + *(_QWORD *)(v37 + 72), v38 | 7);
        *(_OWORD *)(v40 + 16) = xmmword_1002888E0;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 16))(v40 + v39, a1 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier, v36);
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v40);
        v42 = objc_msgSend(v2, "retrievePeripheralsWithIdentifiers:", isa);

        v43 = sub_10006C25C(0, &qword_1003460B0, CBPeripheral_ptr);
        v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v42, v43);

        if (!((unint64_t)v12 >> 62))
        {
          if (*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
LABEL_19:
            if ((v12 & 0xC000000000000001) != 0)
            {
              v44 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v12);
            }
            else
            {
              if (!*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
              {
                __break(1u);
                goto LABEL_40;
              }
              v44 = *(id *)(v12 + 32);
            }
            v45 = v44;
            swift_bridgeObjectRelease(v12);
            v46 = (void *)v3[7];
            v3[7] = v45;

LABEL_23:
            v47 = v3[6];
            v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBConnectPeripheralOptionResetDisconnectionHistory);
            v50 = v49;
            v81 = &type metadata for Bool;
            LOBYTE(v80) = 1;
            sub_10006C2B4(&v80, v79);
            v51 = swift_bridgeObjectRetain(v47);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v51);
            v78 = v47;
            sub_10018DEC0(v79, v48, v50, isUniquelyReferenced_nonNull_native);
            v53 = v78;
            swift_bridgeObjectRelease(v50);
            swift_bridgeObjectRelease(0x8000000000000000);
            v54 = (void *)v3[7];
            if (v54)
            {
              v55 = v54;
              v56 = Dictionary._bridgeToObjectiveC()().super.isa;
              swift_bridgeObjectRelease(v53);
              objc_msgSend(v2, "connectPeripheral:options:", v55, v56);
              swift_release(v3);

LABEL_28:
              return;
            }
LABEL_40:
            __break(1u);
            return;
          }
LABEL_35:
          swift_bridgeObjectRelease(v12);
          v65 = swift_retain_n(a1, 2);
          v66 = Logger.logObject.getter(v65);
          v68 = static os_log_type_t.error.getter(v66, v67);
          if (os_log_type_enabled(v66, v68))
          {
            v69 = (uint8_t *)swift_slowAlloc(12, -1);
            v70 = swift_slowAlloc(32, -1);
            v77 = v2;
            v71 = v70;
            *(_QWORD *)&v80 = v70;
            *(_DWORD *)v69 = 136315138;
            v72 = swift_retain(a1);
            v73 = UUID.uuidString.getter(v72);
            v75 = v74;
            swift_release(a1);
            *(_QWORD *)&v79[0] = sub_1001C56EC(v73, v75, (uint64_t *)&v80);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v79, (char *)v79 + 8, v69 + 4, v69 + 12);
            swift_release_n(a1, 2);
            swift_bridgeObjectRelease(v75);
            _os_log_impl((void *)&_mh_execute_header, v66, v68, "Peripheral not found for %s", v69, 0xCu);
            swift_arrayDestroy(v71, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v71, -1, -1);
            swift_slowDealloc(v69, -1, -1);
            swift_release(v3);

            return;
          }
          swift_release_n(a1, 2);
          swift_release(v3);

          goto LABEL_28;
        }
LABEL_31:
        if (v12 < 0)
          v63 = v12;
        else
          v63 = v12 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v12);
        v64 = _CocoaArrayWrapper.endIndex.getter(v63);
        swift_bridgeObjectRelease(v12);
        if (v64)
          goto LABEL_19;
        goto LABEL_35;
      }
    }
  }
}

void sub_1000B9494(Swift::UInt a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  os_log_type_t v23;
  uint8_t *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char v40;
  char v41;
  char v42;
  unsigned __int8 v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(_BYTE *, _QWORD);
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v56;
  uint64_t v57;
  Swift::UInt v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  _BYTE v65[32];
  uint64_t v66;
  uint64_t v67;
  unsigned __int8 v68;
  _QWORD *v69;

  v59 = a3;
  v58 = a1;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchPredicate(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (uint64_t *)((char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v14 = qword_100354EE8;
  *v13 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v10 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v9);
  v15 = (id)v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)(v13);
  v16 = (*(uint64_t (**)(_QWORD *, uint64_t))(v10 + 8))(v13, v9);
  if ((v14 & 1) != 0)
  {
    if (!*(_QWORD *)(v60 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager))
    {
      v19 = Logger.logObject.getter(v16);
      v23 = static os_log_type_t.info.getter(v19, v20, v21, v22);
      if (os_log_type_enabled(v19, v23))
      {
        v24 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v24 = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, v23, "Not running", v24, 2u);
        swift_slowDealloc(v24, -1, -1);
      }

      return;
    }
    v64 = a2 & 0xC000000000000001;
    if ((a2 & 0xC000000000000001) != 0)
    {
      if (a2 < 0)
        v17 = a2;
      else
        v17 = a2 & 0xFFFFFFFFFFFFFF8;
      v18 = __CocoaSet.count.getter(v17);
    }
    else
    {
      v18 = *(_QWORD *)(a2 + 16);
    }
    v25 = _swiftEmptyArrayStorage;
    if (!v18)
    {
LABEL_37:
      v53 = sub_100145D2C((uint64_t)v25);
      swift_bridgeObjectRelease(v25);
      v54 = (_QWORD *)(v60 + OBJC_IVAR____TtC10seserviced6DSKBLE_discoveryPairedPeripherals);
      swift_beginAccess(v60 + OBJC_IVAR____TtC10seserviced6DSKBLE_discoveryPairedPeripherals, v65, 33, 0);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v54);
      v66 = *v54;
      *v54 = 0x8000000000000000;
      sub_10018E454(v53, v59, v58, isUniquelyReferenced_nonNull_native);
      v56 = *v54;
      *v54 = v66;
      swift_bridgeObjectRelease(v56);
      swift_endAccess(v65);
      sub_1000B9940();
      return;
    }
    v69 = _swiftEmptyArrayStorage;
    sub_10019296C(0, v18 & ~(v18 >> 63), 0);
    if (v64)
    {
      if (a2 < 0)
        v26 = a2;
      else
        v26 = a2 & 0xFFFFFFFFFFFFFF8;
      v27 = __CocoaSet.startIndex.getter(v26);
      v29 = 1;
    }
    else
    {
      v27 = sub_100196CE0(a2);
      v29 = v30 & 1;
    }
    v66 = v27;
    v67 = v28;
    v68 = v29;
    if ((v18 & 0x8000000000000000) == 0)
    {
      v31 = a2 & 0xFFFFFFFFFFFFFF8;
      if (a2 < 0)
        v31 = a2;
      v63 = v31;
      v61 = v5;
      v62 = v4;
      do
      {
        while (1)
        {
          v44 = sub_10019671C(v66, v67, v68, a2);
          (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v44 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier, v4);
          swift_release(v44);
          v45 = v69;
          if ((swift_isUniquelyReferenced_nonNull_native(v69) & 1) == 0)
          {
            sub_10019296C(0, v45[2] + 1, 1);
            v45 = v69;
          }
          v47 = v45[2];
          v46 = v45[3];
          if (v47 >= v46 >> 1)
          {
            sub_10019296C(v46 > 1, v47 + 1, 1);
            v45 = v69;
          }
          v45[2] = v47 + 1;
          (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))((unint64_t)v45+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v47, v8, v4);
          v69 = v45;
          if (v64)
            break;
          v32 = v66;
          v33 = v67;
          v34 = v68;
          v35 = sub_100195EE4(v66, v67, v68, a2);
          v37 = v36;
          v38 = v8;
          v39 = a2;
          v41 = v40;
          v42 = v34;
          v4 = v62;
          sub_1000960E8(v32, v33, v42);
          v66 = v35;
          v67 = v37;
          v43 = v41 & 1;
          a2 = v39;
          v8 = v38;
          v5 = v61;
          v68 = v43;
          if (!--v18)
            goto LABEL_36;
        }
        if ((v68 & 1) == 0)
          goto LABEL_40;
        v48 = __CocoaSet.Index.handleBitPattern.getter(v66, v67);
        if (v48)
          v49 = swift_isUniquelyReferenced_nonNull_native(v48);
        else
          v49 = 1;
        v50 = sub_100063D3C(&qword_100345380);
        v51 = (void (*)(_BYTE *, _QWORD))Set.Index._asCocoa.modify(v65, v50);
        __CocoaSet.formIndex(after:isUnique:)(v52, v49, v63);
        v51(v65, 0);
        --v18;
      }
      while (v18);
LABEL_36:
      sub_1000960E8(v66, v67, v68);
      v25 = v69;
      goto LABEL_37;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_40:
  __break(1u);
}

uint64_t sub_1000B9940()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  id v13;
  uint64_t result;
  uint64_t *v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  id v35;
  Class isa;
  id v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  os_log_type_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  NSObject *v56;
  uint64_t v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t *v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67[2];
  char v68[31];
  char v69;
  char *v70;

  v1 = type metadata accessor for UUID(0);
  v64 = *(_QWORD *)(v1 - 8);
  v65 = v1;
  v3 = __chkstk_darwin(v1, v2);
  v63 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3, v5);
  v62 = (char *)&v60 - v6;
  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(uint64_t **)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1003447B8 != -1)
    goto LABEL_28;
  while (1)
  {
    v12 = qword_100354EE8;
    *(_QWORD *)v11 = qword_100354EE8;
    ((void (*)(char *, _QWORD, uint64_t))v8[13])(v11, enum case for DispatchPredicate.onQueue(_:), v7);
    v13 = (id)v12;
    LOBYTE(v12) = _dispatchPreconditionTest(_:)(v11);
    result = ((uint64_t (*)(char *, uint64_t))v8[1])(v11, v7);
    if ((v12 & 1) == 0)
    {
      __break(1u);
      goto LABEL_30;
    }
    v70 = (char *)&_swiftEmptySetSingleton;
    v69 = 0;
    v15 = (uint64_t *)((char *)v0 + OBJC_IVAR____TtC10seserviced6DSKBLE_discoveryPairedPeripherals);
    swift_beginAccess((char *)v0 + OBJC_IVAR____TtC10seserviced6DSKBLE_discoveryPairedPeripherals, v68, 0, 0);
    v7 = *v15;
    v8 = v0;
    v16 = swift_bridgeObjectRetain(v7);
    sub_1000DB178(v16, (uint64_t)v8, (uint64_t)&v70, &v69);
    swift_bridgeObjectRelease(v7);

    v11 = v70;
    v17 = *((_QWORD *)v70 + 2);
    v0 = _swiftEmptyArrayStorage;
    if (!v17)
      break;
    v60 = v8;
    v67[0] = (uint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v70);
    v0 = v67;
    sub_100192924(0, v17, 0);
    v18 = sub_1001F9BBC(v11);
    v20 = v19;
    v22 = v21 & 1;
    v61 = v11 + 56;
    while ((v18 & 0x8000000000000000) == 0 && v18 < 1 << v11[32])
    {
      if (((*(_QWORD *)&v61[((unint64_t)v18 >> 3) & 0xFFFFFFFFFFFFF8] >> v18) & 1) == 0)
        goto LABEL_26;
      if (*((_DWORD *)v11 + 9) != (_DWORD)v20)
        goto LABEL_27;
      v24 = v64;
      v23 = v65;
      v25 = v62;
      (*(void (**)(char *, uint64_t, uint64_t))(v64 + 16))(v62, *((_QWORD *)v11 + 6) + *(_QWORD *)(v64 + 72) * v18, v65);
      v26 = v63;
      v27 = (*(uint64_t (**)(char *, char *, uint64_t))(v24 + 32))(v63, v25, v23);
      v7 = UUID.uuidString.getter(v27);
      v8 = v28;
      (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
      v0 = (uint64_t *)v67[0];
      if ((swift_isUniquelyReferenced_nonNull_native(v67[0]) & 1) == 0)
      {
        sub_100192924(0, v0[2] + 1, 1);
        v0 = (uint64_t *)v67[0];
      }
      v30 = v0[2];
      v29 = v0[3];
      if (v30 >= v29 >> 1)
      {
        sub_100192924(v29 > 1, v30 + 1, 1);
        v0 = (uint64_t *)v67[0];
      }
      v0[2] = v30 + 1;
      v31 = &v0[2 * v30];
      v31[4] = v7;
      v31[5] = (uint64_t)v8;
      v32 = sub_100195EE4(v18, v20, v22 & 1, v11);
      v18 = v32;
      v20 = v33;
      v22 = v34 & 1;
      if (!--v17)
      {
        sub_1000960E8(v32, v33, v34 & 1);
        swift_bridgeObjectRelease(v11);
        v8 = v60;
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  }
LABEL_15:
  v35 = objc_msgSend(objc_allocWithZone((Class)CBDiscovery), "init");
  objc_msgSend(v35, "setDiscoveryFlags:", 570425344);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v0);
  objc_msgSend(v35, "setDeviceFilter:", isa);

  objc_msgSend(v35, "setBleRSSIThresholdHint:", v69);
  v37 = objc_msgSend(v35, "xpcSubscriberRepresentation");
  v38 = (void *)XPC_BOOL_TRUE.getter();
  xpc_dictionary_set_value(v37, "keepAlive", v38);
  swift_unknownObjectRelease(v38);
  v39 = String.utf8CString.getter(*(uint64_t *)((char *)v8 + OBJC_IVAR____TtC10seserviced6DSKBLE_discoveryEventName), *(uint64_t *)((char *)v8 + OBJC_IVAR____TtC10seserviced6DSKBLE_discoveryEventName + 8));
  swift_unknownObjectRetain(v37);
  xpc_set_event("com.apple.bluetooth.discovery", v39 + 32, v37);
  swift_release(v39);
  v40 = _CFXPCCreateCFObjectFromXPCObject(v37);
  result = swift_unknownObjectRelease(v37);
  if (!v40)
  {
LABEL_30:
    __break(1u);
    return result;
  }
  v67[0] = v40;
  v41 = sub_100063D3C((uint64_t *)&unk_100346140);
  v42 = swift_dynamicCast(&v66, v67, (char *)&type metadata for Swift.AnyObject + 8, v41, 6);
  if ((_DWORD)v42)
  {
    v43 = v66;
    v44 = swift_bridgeObjectRetain(v66);
    v45 = Logger.logObject.getter(v44);
    v49 = static os_log_type_t.info.getter(v45, v46, v47, v48);
    if (os_log_type_enabled(v45, v49))
    {
      v50 = swift_slowAlloc(22, -1);
      v65 = swift_slowAlloc(64, -1);
      v67[0] = v65;
      *(_DWORD *)v50 = 136315394;
      v66 = sub_1001C56EC(0xD00000000000001DLL, 0x80000001002BBB50, v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, v67, v50 + 4, v50 + 12);
      *(_WORD *)(v50 + 12) = 2080;
      v51 = swift_bridgeObjectRetain(v43);
      v52 = Dictionary.description.getter(v51, &type metadata for String, (char *)&type metadata for Swift.AnyObject + 8, &protocol witness table for String);
      v54 = v53;
      swift_bridgeObjectRelease(v43);
      v66 = sub_1001C56EC(v52, v54, v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, v67, v50 + 14, v50 + 22);
      swift_bridgeObjectRelease_n(v43, 2);
      swift_bridgeObjectRelease(v54);
      _os_log_impl((void *)&_mh_execute_header, v45, v49, "LaunchEvent %s configured with %s", (uint8_t *)v50, 0x16u);
      v55 = v65;
      swift_arrayDestroy(v65, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v55, -1, -1);
      swift_slowDealloc(v50, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v43, 2);
    }

    swift_unknownObjectRelease(v37);
  }
  else
  {
    v56 = Logger.logObject.getter(v42);
    v58 = static os_log_type_t.error.getter(v56, v57);
    if (os_log_type_enabled(v56, v58))
    {
      v59 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v59 = 0;
      _os_log_impl((void *)&_mh_execute_header, v56, v58, "Failed to convert discovery XPC object to Dictionary", v59, 2u);
      swift_slowDealloc(v59, -1, -1);
    }

    swift_unknownObjectRelease(v37);
  }
  return swift_bridgeObjectRelease(v70);
}

uint64_t sub_1000BA008(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t i;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  int64_t v27;

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = __chkstk_darwin(v2, v4);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v8);
  v10 = (char *)&v26 - v9;
  v11 = sub_100063D3C((uint64_t *)&unk_1003465E0);
  result = __chkstk_darwin(v11, v12);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = 0;
  v17 = a1 + 56;
  v18 = 1 << *(_BYTE *)(a1 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & *(_QWORD *)(a1 + 56);
  v27 = (unint64_t)(v18 + 63) >> 6;
  if (!v20)
    goto LABEL_5;
LABEL_4:
  v21 = __clz(__rbit64(v20));
  v20 &= v20 - 1;
  for (i = v21 | (v16 << 6); ; i = __clz(__rbit64(v24)) + (v16 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v15, *(_QWORD *)(a1 + 48) + *(_QWORD *)(v3 + 72) * i, v2);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v15, 0, 1, v2);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v15, 1, v2) == 1)
      return swift_release(a1);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v7, v15, v2);
    sub_1000C89FC((uint64_t)v10, v7);
    result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v10, v2);
    if (v20)
      goto LABEL_4;
LABEL_5:
    v23 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v23 >= v27)
      goto LABEL_24;
    v24 = *(_QWORD *)(v17 + 8 * v23);
    ++v16;
    if (!v24)
    {
      v16 = v23 + 1;
      if (v23 + 1 >= v27)
        goto LABEL_24;
      v24 = *(_QWORD *)(v17 + 8 * v16);
      if (!v24)
      {
        v16 = v23 + 2;
        if (v23 + 2 >= v27)
          goto LABEL_24;
        v24 = *(_QWORD *)(v17 + 8 * v16);
        if (!v24)
        {
          v16 = v23 + 3;
          if (v23 + 3 >= v27)
            goto LABEL_24;
          v24 = *(_QWORD *)(v17 + 8 * v16);
          if (!v24)
            break;
        }
      }
    }
LABEL_20:
    v20 = (v24 - 1) & v24;
  }
  v25 = v23 + 4;
  if (v25 >= v27)
  {
LABEL_24:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v15, 1, 1, v2);
    return swift_release(a1);
  }
  v24 = *(_QWORD *)(v17 + 8 * v25);
  if (v24)
  {
    v16 = v25;
    goto LABEL_20;
  }
  while (1)
  {
    v16 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v16 >= v27)
      goto LABEL_24;
    v24 = *(_QWORD *)(v17 + 8 * v16);
    ++v25;
    if (v24)
      goto LABEL_20;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1000BA298(uint64_t result)
{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  _BYTE v15[8];
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  _BYTE v19[24];
  __int128 v20;
  __int128 v21;

  v1 = result;
  v2 = 0;
  v3 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    v12 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v12 >= v7)
      return swift_release(v1);
    v13 = *(_QWORD *)(v3 + 8 * v12);
    ++v2;
    if (!v13)
    {
      v2 = v12 + 1;
      if (v12 + 1 >= v7)
        return swift_release(v1);
      v13 = *(_QWORD *)(v3 + 8 * v2);
      if (!v13)
      {
        v2 = v12 + 2;
        if (v12 + 2 >= v7)
          return swift_release(v1);
        v13 = *(_QWORD *)(v3 + 8 * v2);
        if (!v13)
        {
          v2 = v12 + 3;
          if (v12 + 3 >= v7)
            return swift_release(v1);
          v13 = *(_QWORD *)(v3 + 8 * v2);
          if (!v13)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v13 - 1) & v13;
    v9 = __clz(__rbit64(v13)) + (v2 << 6);
LABEL_5:
    v10 = *(_QWORD *)(v1 + 48) + 40 * v9;
    *(_QWORD *)&v19[16] = *(_QWORD *)(v10 + 32);
    v11 = *(_OWORD *)(v10 + 16);
    v18 = *(_OWORD *)v10;
    *(_OWORD *)v19 = v11;
    v20 = v18;
    v21 = *(_OWORD *)&v19[8];
    sub_10006F87C((uint64_t)&v20);
    sub_10006F87C((uint64_t)&v21);
    sub_1000C929C((uint64_t)v15, (uint64_t)&v18);
    swift_bridgeObjectRelease(v16);
    result = swift_bridgeObjectRelease(v17);
  }
  v14 = v12 + 4;
  if (v14 >= v7)
    return swift_release(v1);
  v13 = *(_QWORD *)(v3 + 8 * v14);
  if (v13)
  {
    v2 = v14;
    goto LABEL_22;
  }
  while (1)
  {
    v2 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v2 >= v7)
      return swift_release(v1);
    v13 = *(_QWORD *)(v3 + 8 * v2);
    ++v14;
    if (v13)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

void sub_1000BA438(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  _QWORD v25[5];

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 >= 0)
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    v2 = __CocoaSet.makeIterator()(a1);
    v3 = sub_10006C25C(0, (unint64_t *)&qword_100347710, SEEndPoint_ptr);
    v4 = sub_1000DCA84((unint64_t *)&qword_100346160, (unint64_t *)&qword_100347710, SEEndPoint_ptr);
    a1 = (uint64_t)Set.Iterator.init(_cocoa:)(v25, v2, v3, v4);
    v1 = v25[0];
    v22 = v25[1];
    v5 = v25[2];
    v6 = v25[3];
    v7 = v25[4];
  }
  else
  {
    v6 = 0;
    v8 = -1 << *(_BYTE *)(a1 + 32);
    v22 = a1 + 56;
    v5 = ~v8;
    v9 = -v8;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v7 = v10 & *(_QWORD *)(a1 + 56);
  }
  v11 = (unint64_t)(v5 + 64) >> 6;
  if (v1 < 0)
    goto LABEL_12;
  while (1)
  {
    if (v7)
    {
      v12 = (v7 - 1) & v7;
      v13 = __clz(__rbit64(v7)) | (v6 << 6);
      v14 = v6;
      goto LABEL_31;
    }
    v19 = v6 + 1;
    if (__OFADD__(v6, 1))
      break;
    if (v19 >= v11)
      goto LABEL_34;
    v20 = *(_QWORD *)(v22 + 8 * v19);
    v14 = v6 + 1;
    if (!v20)
    {
      v14 = v6 + 2;
      if (v6 + 2 >= v11)
        goto LABEL_34;
      v20 = *(_QWORD *)(v22 + 8 * v14);
      if (!v20)
      {
        v14 = v6 + 3;
        if (v6 + 3 >= v11)
          goto LABEL_34;
        v20 = *(_QWORD *)(v22 + 8 * v14);
        if (!v20)
        {
          v14 = v6 + 4;
          if (v6 + 4 >= v11)
            goto LABEL_34;
          v20 = *(_QWORD *)(v22 + 8 * v14);
          if (!v20)
          {
            v14 = v6 + 5;
            if (v6 + 5 >= v11)
              goto LABEL_34;
            v20 = *(_QWORD *)(v22 + 8 * v14);
            if (!v20)
            {
              v21 = v6 + 6;
              while (v11 != v21)
              {
                v20 = *(_QWORD *)(v22 + 8 * v21++);
                if (v20)
                {
                  v14 = v21 - 1;
                  goto LABEL_30;
                }
              }
LABEL_34:
              sub_10007EF58(v1);
              return;
            }
          }
        }
      }
    }
LABEL_30:
    v12 = (v20 - 1) & v20;
    v13 = __clz(__rbit64(v20)) + (v14 << 6);
LABEL_31:
    v18 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v13);
    if (!v18)
      goto LABEL_34;
    while (1)
    {
      sub_1000C6E04((Swift::Int *)&v24, v18);

      v6 = v14;
      v7 = v12;
      if ((v1 & 0x8000000000000000) == 0)
        break;
LABEL_12:
      v15 = __CocoaSet.Iterator.next()(a1);
      if (v15)
      {
        v16 = v15;
        v23 = v15;
        v17 = sub_10006C25C(0, (unint64_t *)&qword_100347710, SEEndPoint_ptr);
        swift_unknownObjectRetain(v16);
        swift_dynamicCast(&v24, &v23, (char *)&type metadata for Swift.AnyObject + 8, v17, 7);
        v18 = v24;
        swift_unknownObjectRelease(v16);
        v14 = v6;
        v12 = v7;
        if (v18)
          continue;
      }
      goto LABEL_34;
    }
  }
  __break(1u);
}

void sub_1000BA6EC(_QWORD *a1, id a2)
{
  id v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20[5];
  __int128 v21;
  __int128 v22;

  v2 = objc_msgSend(a2, "retrievePairingInfoForPeripheral:", *a1);
  v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  v18 = 0xD000000000000016;
  v19 = 0x80000001002BBAB0;
  AnyHashable.init<A>(_:)(&v18, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v3 + 16) && (v4 = sub_100187F3C((uint64_t)v20), (v5 & 1) != 0))
  {
    v6 = v3;
    sub_100096CB0(*(_QWORD *)(v3 + 56) + 32 * v4, (uint64_t)&v21);
  }
  else
  {
    v6 = v3;
    v21 = 0u;
    v22 = 0u;
  }
  sub_100098C48((uint64_t)v20);
  if (*((_QWORD *)&v22 + 1))
  {
    if ((swift_dynamicCast(&v18, &v21, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) != 0)
      __asm { BR              X10 }
  }
  else
  {
    sub_100096700((uint64_t)&v21, (uint64_t *)&unk_100346130);
  }
  v7 = v6;
  v8 = swift_bridgeObjectRetain(v6);
  v9 = Logger.logObject.getter(v8);
  v11 = static os_log_type_t.error.getter(v9, v10);
  if (os_log_type_enabled(v9, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v20[0] = v13;
    *(_DWORD *)v12 = 136315138;
    v14 = swift_bridgeObjectRetain(v7);
    v15 = Dictionary.description.getter(v14, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
    v17 = v16;
    swift_bridgeObjectRelease(v7);
    *(_QWORD *)&v21 = sub_1001C56EC(v15, v17, v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, (char *)&v21 + 8, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease_n(v7, 2);
    swift_bridgeObjectRelease(v17);
    _os_log_impl((void *)&_mh_execute_header, v9, v11, "Got invalid pairing info %s", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v7, 2);
  }

}

uint64_t sub_1000BAAC0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  va_list va;
  unint64_t v24;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v22 = va_arg(va1, _QWORD);
  v24 = va_arg(va1, _QWORD);
  if (BYTE6(a2) != 16)
  {
LABEL_12:
    sub_100063CD0(a1, a2);
    JUMPOUT(0x1000BAD7CLL);
  }
  v20 = a1;
  v21 = a2;
  v22 = v14 + 5;
  v24 = 0x80000001002BBAF0;
  AnyHashable.init<A>(_:)((uint64_t *)va, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v15 + 16) && (v17 = sub_100187F3C((uint64_t)va1), (v18 & 1) != 0))
  {
    sub_100096CB0(*(_QWORD *)(v15 + 56) + 32 * v17, v16 - 128);
  }
  else
  {
    *(_OWORD *)(v16 - 128) = 0u;
    *(_OWORD *)(v16 - 112) = 0u;
  }
  sub_100098C48((uint64_t)va1);
  if (!*(_QWORD *)(v16 - 104))
  {
    sub_100063CD0(v20, v21);
    JUMPOUT(0x1000BACC0);
  }
  if ((swift_dynamicCast((uint64_t *)va, v16 - 128, v13 + 8, &type metadata for Data, 6) & 1) == 0)
  {
    a1 = v20;
    a2 = v21;
    goto LABEL_12;
  }
  return ((uint64_t (*)(uint64_t))((char *)&loc_1000BABA4 + dword_1000BB0F4[v24 >> 62]))(v22);
}

void sub_1000BADE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, unint64_t a16, unint64_t a17, uint64_t a18, _QWORD **a19)
{
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  id v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  NSObject *v39;
  uint64_t v40;
  os_log_type_t v41;
  uint8_t *v42;

  if (BYTE6(a10) == 16)
  {
    swift_bridgeObjectRelease(v19);
    v26 = *v20;
    v27 = v20[1];
    *v20 = a18;
    v20[1] = a17;
    sub_100063C8C(a18, a17);
    sub_10006B9B4(v26, v27);
    v28 = *v21;
    v29 = v21[1];
    *v21 = a15;
    v21[1] = a16;
    sub_100063C8C(a15, a16);
    sub_10006B9B4(v28, v29);
    v30 = v23;
    v31 = *(_QWORD *)(v25 - 72);
    v32 = sub_1000D968C(v24, v30);
    *(_QWORD *)(v25 - 72) = v31;

    if (v32)
    {
      v34 = *a19;
      swift_retain(v32);
      sub_100063C8C(a13, a14);
      sub_100063C8C(v22, a10);
      sub_100063C8C(a11, a12);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v34);
      *a19 = v34;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v34 = sub_1001C4AE4(0, v34[2] + 1, 1, v34);
        *a19 = v34;
      }
      v37 = v34[2];
      v36 = v34[3];
      if (v37 >= v36 >> 1)
        v34 = sub_1001C4AE4((_QWORD *)(v36 > 1), v37 + 1, 1, v34);
      v34[2] = v37 + 1;
      v38 = &v34[7 * v37];
      v38[4] = v32;
      v38[5] = a13;
      v38[6] = a14;
      v38[7] = v22;
      v38[8] = a10;
      v38[9] = a11;
      v38[10] = a12;
      *a19 = v34;
      sub_100063CD0(a18, a17);
      sub_100063CD0(a15, a16);
      sub_100063CD0(a13, a14);
      sub_100063CD0(a11, a12);
      swift_release(v32);
      sub_100063CD0(v22, a10);
      JUMPOUT(0x1000BAA40);
    }
    v39 = Logger.logObject.getter(v33);
    v41 = static os_log_type_t.error.getter(v39, v40);
    if (os_log_type_enabled(v39, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v41, "Got invalid peripheral", v42, 2u);
      swift_slowDealloc(v42, -1, -1);
    }
    sub_100063CD0(a18, a17);
    sub_100063CD0(a15, a16);
    sub_100063CD0(a13, a14);
    sub_100063CD0(a11, a12);
    sub_100063CD0(v22, a10);
    JUMPOUT(0x1000BAA3CLL);
  }
  sub_100063CD0(v22, a10);
  JUMPOUT(0x1000BAF9CLL);
}

void sub_1000BAE34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, unint64_t a16, unint64_t a17, uint64_t a18, uint64_t *a19)
{
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v35;
  _QWORD *v36;

  if (!__OFSUB__(HIDWORD(v22), (_DWORD)v22))
  {
    if (HIDWORD(v22) - (_DWORD)v22 == 16)
    {
      swift_bridgeObjectRelease(v19);
      v26 = *v20;
      v27 = v20[1];
      *v20 = a18;
      v20[1] = a17;
      sub_100063C8C(a18, a17);
      sub_10006B9B4(v26, v27);
      v28 = *v21;
      v29 = v21[1];
      *v21 = a15;
      v21[1] = a16;
      sub_100063C8C(a15, a16);
      sub_10006B9B4(v28, v29);
      v30 = v23;
      v31 = *(_QWORD *)(v25 - 72);
      v32 = sub_1000D968C(v24, v30);
      *(_QWORD *)(v25 - 72) = v31;

      if (v32)
      {
        v33 = *a19;
        swift_retain(v32);
        sub_100063C8C(a13, a14);
        sub_100063C8C(v22, a10);
        sub_100063C8C(a11, a12);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v33);
        *a19 = v33;
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v35 = *(_QWORD *)(v33 + 16);
          if (v35 < *(_QWORD *)(v33 + 24) >> 1)
          {
            *(_QWORD *)(v33 + 16) = v35 + 1;
            v36 = (_QWORD *)(v33 + 56 * v35);
            v36[4] = v32;
            v36[5] = a13;
            v36[6] = a14;
            v36[7] = v22;
            v36[8] = a10;
            v36[9] = a11;
            v36[10] = a12;
            *a19 = v33;
            sub_100063CD0(a18, a17);
            sub_100063CD0(a15, a16);
            sub_100063CD0(a13, a14);
            sub_100063CD0(a11, a12);
            swift_release(v32);
            sub_100063CD0(v22, a10);
            JUMPOUT(0x1000BAA40);
          }
          JUMPOUT(0x1000BB0B4);
        }
        JUMPOUT(0x1000BB08CLL);
      }
      JUMPOUT(0x1000BAFC4);
    }
    sub_100063CD0(v22, a10);
    JUMPOUT(0x1000BAF9CLL);
  }
  __break(1u);
  JUMPOUT(0x1000BB088);
}

void sub_1000BAE4C()
{
  uint64_t v0;

  if (__OFSUB__(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 16)))
  {
    __break(1u);
    JUMPOUT(0x1000BB08CLL);
  }
  JUMPOUT(0x1000BAE5CLL);
}

void sub_1000BB124(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, void *);
  id v7;

  v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

uint64_t sub_1000BB184()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  sub_10006BA9C((_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 96));
  sub_10006B9B4(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 136));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 152));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 160));
  return v0;
}

uint64_t sub_1000BB1F0()
{
  uint64_t v0;

  v0 = sub_1000BB184();
  return swift_deallocClassInstance(v0, 193, 7);
}

Swift::Int sub_1000BB20C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  _QWORD v11[9];

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  v5 = (char *)&v11[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v0;
  Hasher.init(_seed:)(v11);
  v7 = objc_msgSend(*(id *)(v6 + 24), "identifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  v8 = sub_1000C69C4((unint64_t *)&unk_100347730, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v11, v1, v8);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  return Hasher._finalize()();
}

uint64_t sub_1000BB2FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v9;
  uint64_t v11;

  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend(*(id *)(*(_QWORD *)v1 + 24), "identifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  v9 = sub_1000C69C4((unint64_t *)&unk_100347730, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v3, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

Swift::Int sub_1000BB3D8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  _QWORD v11[9];

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  v5 = (char *)&v11[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v0;
  Hasher.init(_seed:)(v11);
  v7 = objc_msgSend(*(id *)(v6 + 24), "identifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  v8 = sub_1000C69C4((unint64_t *)&unk_100347730, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v11, v1, v8);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  return Hasher._finalize()();
}

uint64_t sub_1000BB4CC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  char v7;

  v2 = *a1;
  v3 = *a2;
  sub_10006C25C(0, &qword_100348B80, NSObject_ptr);
  v4 = *(void **)(v3 + 24);
  v5 = *(id *)(v2 + 24);
  v6 = v4;
  v7 = static NSObject.== infix(_:_:)(v5);

  return v7 & 1;
}

uint64_t sub_1000BB544(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, char a12, __int128 a13, __int128 a14, __int128 a15, __int128 a16, __int128 a17, __int128 a18, __int128 a19, uint64_t a20)
{
  uint64_t v20;

  *(_QWORD *)(v20 + 80) = 0;
  *(_QWORD *)(v20 + 88) = 0;
  *(_BYTE *)(v20 + 96) = 1;
  *(_QWORD *)(v20 + 16) = a1;
  *(_QWORD *)(v20 + 24) = a2;
  *(_QWORD *)(v20 + 32) = a3;
  *(_BYTE *)(v20 + 40) = a6 ^ 1;
  *(_QWORD *)(v20 + 64) = a7;
  swift_bridgeObjectRelease(0);
  *(_QWORD *)(v20 + 48) = a4;
  *(_QWORD *)(v20 + 56) = a5;
  *(_QWORD *)(v20 + 72) = a8;
  *(_QWORD *)(v20 + 80) = a9;
  *(_QWORD *)(v20 + 88) = a10;
  *(_BYTE *)(v20 + 96) = a11 & 1;
  *(_BYTE *)(v20 + 97) = a12;
  *(_OWORD *)(v20 + 104) = a13;
  *(_OWORD *)(v20 + 120) = a14;
  *(_OWORD *)(v20 + 136) = a15;
  *(_OWORD *)(v20 + 152) = a16;
  *(_OWORD *)(v20 + 168) = a17;
  *(_OWORD *)(v20 + 184) = a18;
  *(_OWORD *)(v20 + 200) = a19;
  *(_QWORD *)(v20 + 216) = a20;
  return v20;
}

BOOL sub_1000BB658(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

_QWORD *sub_1000BB670()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[8]);
  swift_bridgeObjectRelease(v0[9]);
  swift_bridgeObjectRelease(v0[13]);
  swift_release(v0[15]);
  swift_release(v0[17]);
  swift_release(v0[19]);
  swift_release(v0[21]);
  swift_release(v0[23]);
  sub_10008F210(v0[24], v0[25]);
  sub_10008F210(v0[26], v0[27]);
  return v0;
}

uint64_t sub_1000BB6EC()
{
  uint64_t v0;

  sub_1000BB670();
  return swift_deallocClassInstance(v0, 224, 7);
}

uint64_t sub_1000BB70C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)v0 + 24));
  return v1;
}

uint64_t sub_1000BB73C()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)v0 + 56));
}

uint64_t sub_1000BB748()
{
  uint64_t v0;

  return *(unsigned __int8 *)(*(_QWORD *)v0 + 97);
}

uint64_t sub_1000BB754()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 128);
  swift_retain(*(_QWORD *)(*(_QWORD *)v0 + 136));
  return v1;
}

uint64_t sub_1000BB784()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 144);
  swift_retain(*(_QWORD *)(*(_QWORD *)v0 + 152));
  return v1;
}

uint64_t sub_1000BB7B4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 160);
  swift_retain(*(_QWORD *)(*(_QWORD *)v0 + 168));
  return v1;
}

uint64_t sub_1000BB7E4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 176);
  swift_retain(*(_QWORD *)(*(_QWORD *)v0 + 184));
  return v1;
}

uint64_t sub_1000BB814()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 192);
  sub_1000DCA74(v1, *(_QWORD *)(*(_QWORD *)v0 + 200));
  return v1;
}

uint64_t sub_1000BB848()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 208);
  sub_1000DCA74(v1, *(_QWORD *)(*(_QWORD *)v0 + 216));
  return v1;
}

Swift::Int sub_1000BB87C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1000BB8D8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = *(_QWORD *)(v3 + 24);
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1000BB920()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1000BB978(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  v4 = *(_QWORD *)(*a1 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  if (v4 == v6 && v5 == v7)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v6, v7, 0);
}

uint64_t sub_1000BB9A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, char a9, __int128 a10, __int128 a11, __int128 a12, __int128 a13, __int128 a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;

  *(_QWORD *)(v16 + 16) = a1;
  *(_QWORD *)(v16 + 24) = a2;
  *(_QWORD *)(v16 + 32) = a3;
  *(_QWORD *)(v16 + 40) = a4;
  *(_QWORD *)(v16 + 64) = a6;
  *(_QWORD *)(v16 + 72) = a7;
  *(_BYTE *)(v16 + 80) = a8 & 1;
  *(_BYTE *)(v16 + 81) = a9;
  *(_QWORD *)(v16 + 48) = a5;
  *(_QWORD *)(v16 + 56) = 0;
  *(_OWORD *)(v16 + 88) = a10;
  *(_OWORD *)(v16 + 104) = a11;
  *(_OWORD *)(v16 + 120) = a12;
  *(_OWORD *)(v16 + 136) = a13;
  *(_OWORD *)(v16 + 152) = a14;
  *(_QWORD *)(v16 + 168) = a15;
  *(_QWORD *)(v16 + 176) = a16;
  return v16;
}

uint64_t sub_1000BB9FC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));

  swift_release(*(_QWORD *)(v0 + 96));
  swift_release(*(_QWORD *)(v0 + 112));
  swift_release(*(_QWORD *)(v0 + 128));
  swift_release(*(_QWORD *)(v0 + 144));
  sub_10008F210(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160));
  sub_10008F210(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 176));
  return v0;
}

uint64_t sub_1000BBA68()
{
  uint64_t v0;

  sub_1000BB9FC();
  return swift_deallocClassInstance(v0, 184, 7);
}

uint64_t sub_1000BBA88()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 24);
  swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)v0 + 32));
  return v1;
}

uint64_t sub_1000BBAB8()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)v0 + 40));
}

uint64_t sub_1000BBAC4()
{
  uint64_t v0;

  return *(unsigned __int8 *)(*(_QWORD *)v0 + 81);
}

uint64_t sub_1000BBAD0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  swift_retain(*(_QWORD *)(*(_QWORD *)v0 + 96));
  return v1;
}

uint64_t sub_1000BBB00()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 104);
  swift_retain(*(_QWORD *)(*(_QWORD *)v0 + 112));
  return v1;
}

uint64_t sub_1000BBB30()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 120);
  swift_retain(*(_QWORD *)(*(_QWORD *)v0 + 128));
  return v1;
}

uint64_t sub_1000BBB60()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 136);
  swift_retain(*(_QWORD *)(*(_QWORD *)v0 + 144));
  return v1;
}

uint64_t sub_1000BBB90()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 152);
  sub_1000DCA74(v1, *(_QWORD *)(*(_QWORD *)v0 + 160));
  return v1;
}

uint64_t sub_1000BBBC4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 168);
  sub_1000DCA74(v1, *(_QWORD *)(*(_QWORD *)v0 + 176));
  return v1;
}

Swift::Int sub_1000BBBF8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6);
  v2 = *(_QWORD *)(v1 + 16);
  v3 = type metadata accessor for UUID(0);
  v4 = sub_1000C69C4((unint64_t *)&unk_100347730, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  swift_retain(v2);
  dispatch thunk of Hashable.hash(into:)(v6, v3, v4);
  swift_release(v2);
  return Hasher._finalize()();
}

uint64_t sub_1000BBC9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v4 = type metadata accessor for UUID(0);
  v5 = sub_1000C69C4((unint64_t *)&unk_100347730, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  swift_retain(v3);
  dispatch thunk of Hashable.hash(into:)(a1, v4, v5);
  return swift_release(v3);
}

Swift::Int sub_1000BBD2C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6);
  v2 = *(_QWORD *)(v1 + 16);
  v3 = type metadata accessor for UUID(0);
  v4 = sub_1000C69C4((unint64_t *)&unk_100347730, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  swift_retain(v2);
  dispatch thunk of Hashable.hash(into:)(v6, v3, v4);
  swift_release(v2);
  return Hasher._finalize()();
}

uint64_t sub_1000BBDCC(uint64_t a1, uint64_t a2)
{
  return static UUID.== infix(_:_:)(*(_QWORD *)(*(_QWORD *)a1 + 16) + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier, *(_QWORD *)(*(_QWORD *)a2 + 16) + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier);
}

void sub_1000BBEBC(void *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char **v10;
  id v11;
  id v12;
  void (*v13)(_QWORD *, uint64_t);
  uint64_t v14;
  char *v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  id v23;
  unint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  unint64_t v31;
  id v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  os_log_type_t v37;
  uint8_t *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  void (*v48)(uint64_t);
  uint64_t v49;
  void (*v50)(_QWORD *, uint64_t);
  NSObject *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  os_log_type_t v55;
  uint8_t *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  NSObject *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  os_log_type_t v68;
  uint8_t *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD v73[2];
  unsigned int v74;
  void (*v75)(_QWORD *, _QWORD, uint64_t);
  char v76[24];
  uint64_t v77;
  uint64_t v78;
  uint64_t v79[3];

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (_QWORD *)((char *)v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v9 = qword_100354EE8;
  *v8 = qword_100354EE8;
  v10 = (char **)enum case for DispatchPredicate.onQueue(_:);
  v11 = *(id *)(v5 + 104);
  ((void (*)(_QWORD *, _QWORD, uint64_t))v11)(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  v12 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  v13 = *(void (**)(_QWORD *, uint64_t))(v5 + 8);
  v14 = ((uint64_t (*)(_QWORD *, uint64_t))v13)(v8, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    goto LABEL_47;
  }
  v15 = &v2[OBJC_IVAR____TtC10seserviced6DSKBLE_logger];
  if (*(_QWORD *)&v2[OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager])
  {
    v74 = v10;
    v75 = (void (*)(_QWORD *, _QWORD, uint64_t))v11;
    v11 = a1;
    v16 = Logger.logObject.getter(v11);
    v20 = static os_log_type_t.info.getter(v16, v17, v18, v19);
    v10 = &selRef_removeObject_;
    if (os_log_type_enabled(v16, v20))
    {
      v73[0] = v13;
      v73[1] = v15;
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      v22 = swift_slowAlloc(32, -1);
      v79[0] = v22;
      *(_DWORD *)v21 = 136315138;
      v23 = objc_msgSend(v11, "state");
      v24 = 0xE700000000000000;
      v25 = 0x6E776F6E6B6E75;
      switch((unint64_t)v23)
      {
        case 1uLL:
          v25 = 0x6E69747465736572;
          v24 = 0xE900000000000067;
          break;
        case 2uLL:
          v24 = 0xEB00000000646574;
          v25 = 0x726F707075736E75;
          break;
        case 3uLL:
          v24 = 0xEC00000064657A69;
          v25 = 0x726F687475616E75;
          break;
        case 4uLL:
          v25 = 0x4F64657265776F70;
          v24 = 0xEA00000000006666;
          break;
        case 5uLL:
          v25 = 0x4F64657265776F70;
          v24 = 0xE90000000000006ELL;
          break;
        case 0xAuLL:
          v25 = 0x7463697274736572;
          v24 = 0xEA00000000006465;
          break;
        default:
          break;
      }
      v77 = sub_1001C56EC(v25, v24, v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78, v21 + 4, v21 + 12);

      swift_bridgeObjectRelease(v24);
      _os_log_impl((void *)&_mh_execute_header, v16, v20, "Central manager changed state to %s", v21, 0xCu);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);

      v13 = (void (*)(_QWORD *, uint64_t))v73[0];
      v10 = &selRef_removeObject_;
    }
    else
    {

    }
    v30 = OBJC_IVAR____TtC10seserviced6DSKBLE_centralState;
    v31 = *(_QWORD *)&v2[OBJC_IVAR____TtC10seserviced6DSKBLE_centralState];
    v32 = objc_msgSend(v11, "state");
    *(_QWORD *)&v2[v30] = v32;
    if ((unint64_t)v32 < 5 || v32 != (id)10 && v32 != (id)5)
    {
      if (v31 >= 5 && (v31 == 10 || v31 == 5))
      {
        v50 = v13;
        v51 = Logger.logObject.getter(v32);
        v55 = static os_log_type_t.info.getter(v51, v52, v53, v54);
        if (os_log_type_enabled(v51, v55))
        {
          v56 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v56 = 0;
          _os_log_impl((void *)&_mh_execute_header, v51, v55, "Central became unavailable", v56, 2u);
          swift_slowDealloc(v56, -1, -1);
        }

        v57 = &v2[OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals];
        swift_beginAccess(&v2[OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals], &v77, 0, 0);
        v58 = *(_QWORD *)v57;
        v59 = v2;
        v60 = swift_bridgeObjectRetain(v58);
        sub_1000DBCF0(v60, (uint64_t)v59, 0);
        swift_bridgeObjectRelease(v58);

        if (qword_1003445A8 != -1)
          swift_once(&qword_1003445A8, sub_1000C35EC);
        v61 = qword_100354BD0;
        v62 = qword_100354EE8;
        *v8 = qword_100354EE8;
        v75(v8, v74, v4);
        v63 = (id)v62;
        LOBYTE(v62) = _dispatchPreconditionTest(_:)(v8);
        v50(v8, v4);
        if ((v62 & 1) == 0)
        {
          __break(1u);
          JUMPOUT(0x1000BC650);
        }
        *(_BYTE *)(v61 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_isCentralManagerPoweredOn) = 0;
      }
      goto LABEL_41;
    }
    if (v31 >= 5 && (v31 == 5 || v31 == 10))
    {
LABEL_41:
      if (objc_msgSend(v11, v10[271]) == (id)1)
      {
        v64 = Logger.logObject.getter(1);
        v68 = static os_log_type_t.info.getter(v64, v65, v66, v67);
        if (os_log_type_enabled(v64, v68))
        {
          v69 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v69 = 0;
          _os_log_impl((void *)&_mh_execute_header, v64, v68, "Detected possible BT crash", v69, 2u);
          swift_slowDealloc(v69, -1, -1);
        }

        v70 = &v2[OBJC_IVAR____TtC10seserviced6DSKBLE_connectionRequests];
        swift_beginAccess(v70, v79, 0, 0);
        v71 = *(_QWORD *)v70;
        v72 = swift_bridgeObjectRetain(v71);
        sub_1000ADA10(v72);
        swift_bridgeObjectRelease(v71);
      }
      return;
    }
    v33 = Logger.logObject.getter(v32);
    v37 = static os_log_type_t.info.getter(v33, v34, v35, v36);
    if (os_log_type_enabled(v33, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v37, "Central became available", v38, 2u);
      swift_slowDealloc(v38, -1, -1);
    }

    sub_1000B4314();
    v39 = &v2[OBJC_IVAR____TtC10seserviced6DSKBLE_connectionRequests];
    swift_beginAccess(&v2[OBJC_IVAR____TtC10seserviced6DSKBLE_connectionRequests], &v77, 0, 0);
    v40 = *(_QWORD *)v39;
    v41 = v2;
    v42 = swift_bridgeObjectRetain(v40);
    sub_1000DBFE0(v42);
    swift_bridgeObjectRelease(v40);

    v43 = &v41[OBJC_IVAR____TtC10seserviced6DSKBLE_closuresOnPowerOn];
    swift_beginAccess(v43, v76, 1, 0);
    v44 = *(_QWORD *)v43;
    v45 = *(_QWORD *)(*(_QWORD *)v43 + 16);
    if (v45)
    {
      swift_bridgeObjectRetain(*(_QWORD *)v43);
      v46 = (_QWORD *)(v44 + 40);
      do
      {
        v48 = (void (*)(uint64_t))*(v46 - 1);
        v47 = *v46;
        v49 = swift_retain(*v46);
        v48(v49);
        swift_release(v47);
        v46 += 2;
        --v45;
      }
      while (v45);
      swift_bridgeObjectRelease(v44);
      v44 = *(_QWORD *)v43;
      v10 = &selRef_removeObject_;
    }
    *(_QWORD *)v43 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(v44);
    if (qword_1003445A8 == -1)
    {
LABEL_31:
      sub_1000BC678(1);
      goto LABEL_41;
    }
LABEL_47:
    swift_once(&qword_1003445A8, sub_1000C35EC);
    goto LABEL_31;
  }
  v26 = Logger.logObject.getter(v14);
  v28 = static os_log_type_t.error.getter(v26, v27);
  if (os_log_type_enabled(v26, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v29 = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, v28, "Not running", v29, 2u);
    swift_slowDealloc(v29, -1, -1);
  }

}

void sub_1000BC678(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[24];
  _BYTE v18[24];

  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v8 = qword_100354EE8;
  *v7 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  v9 = (id)v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v7, v3);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  *(_BYTE *)(v1 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_isCentralManagerPoweredOn) = a1 & 1;
  if ((a1 & 1) == 0)
    return;
  v10 = (uint64_t *)(v1 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_unpairingRequests);
  swift_beginAccess(v1 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_unpairingRequests, v18, 0, 0);
  a1 = *v10;
  if ((unint64_t)a1 >> 62)
  {
LABEL_12:
    if (a1 < 0)
      v13 = a1;
    else
      v13 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v14 = _CocoaArrayWrapper.endIndex.getter(v13);
    swift_bridgeObjectRelease(a1);
    if (v14)
      goto LABEL_9;
    goto LABEL_7;
  }
  if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_9;
LABEL_7:
  v11 = (uint64_t *)(v1 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_pairingRequests);
  swift_beginAccess(v1 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_pairingRequests, v17, 0, 0);
  v12 = *v11;
  if (!((unint64_t)v12 >> 62))
  {
    if (!*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
      return;
    goto LABEL_9;
  }
  if (v12 < 0)
    v15 = v12;
  else
    v15 = v12 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v12);
  v16 = _CocoaArrayWrapper.endIndex.getter(v15);
  swift_bridgeObjectRelease(v12);
  if (v16)
LABEL_9:
    sub_1000C450C();
}

void sub_1000BCAF8(void *a1, uint64_t a2, void *a3, void *a4, void *a5, void (*a6)(id, void *))
{
  id v10;
  id v11;
  id v12;
  id v13;

  v10 = a3;
  v11 = a4;
  v12 = a1;
  v13 = a5;
  a6(v11, a5);

}

void sub_1000BCB78(void *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  id v16;
  char v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  os_log_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  NSObject *v25;
  NSObject *v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint8_t *v41;
  NSObject *v42;
  uint64_t v43;
  os_log_type_t v44;
  uint8_t *v45;
  NSObject *v46;
  NSObject *v47;
  uint64_t v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  id v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  NSString v70;
  void *v71;
  id v72;
  id v73;
  _QWORD *v74;
  os_log_t v75;
  uint8_t *v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  void (*v89)(char *, unint64_t, uint64_t);
  uint64_t v90;
  Class isa;
  id v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint8_t *v98;
  NSObject *v99;
  NSObject *v100;
  uint64_t v101;
  os_log_type_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  id v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint8_t *v111;
  uint64_t *v112;
  os_log_t v113;
  NSObject *v114;
  uint8_t *v115;
  NSObject *v116;
  NSObject *v117;
  uint64_t v118;
  os_log_type_t v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint8_t *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  void (*v132)(char *, uint64_t);
  id v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  id v145;
  uint64_t v146;
  os_log_t v147;
  uint8_t *v148;
  uint64_t *v149;
  uint64_t v150;
  _QWORD v151[3];
  char v152[8];
  uint64_t v153;
  uint64_t v154[3];
  _QWORD *v155;
  uint64_t v156;
  char v157[32];

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v150 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v141 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchPredicate(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (uint64_t *)((char *)&v141 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v15 = (void *)qword_100354EE8;
  *v14 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v10);
  v16 = v15;
  v17 = _dispatchPreconditionTest(_:)(v14);
  v18 = (*(uint64_t (**)(_QWORD *, uint64_t))(v11 + 8))(v14, v10);
  if ((v17 & 1) != 0)
  {
    if (!*(uint64_t *)((char *)v3 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager))
    {
      v42 = Logger.logObject.getter(v18);
      v44 = static os_log_type_t.error.getter(v42, v43);
      if (os_log_type_enabled(v42, v44))
      {
        v45 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v45 = 0;
        _os_log_impl((void *)&_mh_execute_header, v42, v44, "Not running", v45, 2u);
        swift_slowDealloc(v45, -1, -1);
      }
      goto LABEL_32;
    }
    v19 = (uint64_t *)((char *)v3 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals);
    swift_beginAccess((char *)v3 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals, v157, 0, 0);
    v20 = *v19;
    v21 = a1;
    v22 = swift_bridgeObjectRetain(v20);
    v23 = sub_1000D8FC0(v22);
    swift_bridgeObjectRelease(v20);

    if (v23)
    {
      if (a2)
      {
        v24 = v6;
        swift_errorRetain(a2);
        v25 = v21;
        swift_errorRetain(a2);
        v26 = v25;
        v27 = swift_errorRetain(a2);
        v28 = Logger.logObject.getter(v27);
        v30 = static os_log_type_t.error.getter(v28, v29);
        if (os_log_type_enabled(v28, v30))
        {
          v31 = swift_slowAlloc(22, -1);
          v149 = v3;
          v32 = v31;
          v148 = (uint8_t *)swift_slowAlloc(64, -1);
          v154[0] = (uint64_t)v148;
          *(_DWORD *)v32 = 136315394;
          v147 = (os_log_t)(v32 + 4);
          v33 = -[NSObject identifier](v26, "identifier");
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          v34 = sub_1000C69C4((unint64_t *)&qword_100344CC8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v35 = dispatch thunk of CustomStringConvertible.description.getter(v24, v34);
          v37 = v36;
          (*(void (**)(char *, uint64_t))(v150 + 8))(v9, v24);
          v155 = (_QWORD *)sub_1001C56EC(v35, v37, v154);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, &v156, v147, v32 + 12);

          swift_bridgeObjectRelease(v37);
          *(_WORD *)(v32 + 12) = 2080;
          swift_getErrorValue(a2, v152, v151);
          v38 = Error.localizedDescription.getter(v151[1], v151[2]);
          v40 = v39;
          v155 = (_QWORD *)sub_1001C56EC(v38, v39, v154);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, &v156, v32 + 14, v32 + 22);
          swift_bridgeObjectRelease(v40);
          swift_errorRelease(a2);
          swift_errorRelease(a2);
          _os_log_impl((void *)&_mh_execute_header, v28, v30, "Error while discovering services for %s %s", (uint8_t *)v32, 0x16u);
          v41 = v148;
          swift_arrayDestroy(v148, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v41, -1, -1);
          swift_slowDealloc(v32, -1, -1);

        }
        else
        {

          swift_errorRelease(a2);
          swift_errorRelease(a2);
        }
        sub_1000B4DF8(v26, 1, 0);
        swift_errorRelease(a2);
LABEL_21:
        swift_release(v23);
        return;
      }
      v58 = -[NSObject services](v21, "services");
      if (!v58)
      {
        v99 = v21;
        v100 = Logger.logObject.getter(v99);
        v102 = static os_log_type_t.error.getter(v100, v101);
        if (os_log_type_enabled(v100, v102))
        {
          v103 = swift_slowAlloc(12, -1);
          v149 = (uint64_t *)swift_slowAlloc(32, -1);
          v154[0] = (uint64_t)v149;
          v104 = v6;
          *(_DWORD *)v103 = 136315138;
          v105 = v103 + 12;
          v147 = (os_log_t)(v103 + 4);
          v148 = (uint8_t *)v103;
          v106 = -[NSObject identifier](v99, "identifier");
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          v107 = sub_1000C69C4((unint64_t *)&qword_100344CC8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v108 = dispatch thunk of CustomStringConvertible.description.getter(v104, v107);
          v110 = v109;
          (*(void (**)(char *, uint64_t))(v150 + 8))(v9, v104);
          v155 = (_QWORD *)sub_1001C56EC(v108, v110, v154);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, &v156, v147, v105);

          swift_bridgeObjectRelease(v110);
          v111 = v148;
          _os_log_impl((void *)&_mh_execute_header, v100, v102, "No services discovered for %s", v148, 0xCu);
          v112 = v149;
          swift_arrayDestroy(v149, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v112, -1, -1);
          swift_slowDealloc(v111, -1, -1);
        }
        else
        {

        }
        sub_1000B4DF8(v99, 1, 0);
        goto LABEL_21;
      }
      v59 = v58;
      v146 = v6;
      v149 = v3;
      v60 = sub_10006C25C(0, &qword_1003460E8, CBService_ptr);
      v61 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v59, v60);

      swift_beginAccess(v23 + 5, v154, 0, 0);
      v62 = v23[8];
      v63 = v23[9];
      v147 = (os_log_t)(v23 + 5);
      v64 = sub_10006BA78(v23 + 5, v62);
      v148 = (uint8_t *)v23;
      v65 = *(_QWORD *)(v62 - 8);
      __chkstk_darwin(v64, v64);
      v67 = (char *)&v141 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v65 + 16))(v67);
      (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v62, v63);
      v69 = v68;
      (*(void (**)(char *, uint64_t))(v65 + 8))(v67, v62);
      v70 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v69);
      v71 = (void *)objc_opt_self(CBUUID);
      v72 = objc_msgSend(v71, "UUIDWithString:", v70);

      v73 = v72;
      v74 = sub_1000DA3D4(v61);
      swift_bridgeObjectRelease(v61);

      if (v74)
      {
        v75 = v147;
        v76 = v148;
        v148[32] = 2;
        v78 = *((_QWORD *)v76 + 8);
        v77 = *((_QWORD *)v76 + 9);
        v79 = sub_10006BA78(v75, v78);
        v149 = &v141;
        v80 = *(_QWORD *)(v78 - 8);
        __chkstk_darwin(v79, v79);
        v82 = (char *)&v141 - ((v81 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v80 + 16))(v82);
        v83 = (*(uint64_t (**)(uint64_t, uint64_t))(v77 + 16))(v78, v77);
        (*(void (**)(char *, uint64_t))(v80 + 8))(v82, v78);
        v84 = *(_QWORD *)(v83 + 16);
        if (v84)
        {
          v144 = v74;
          v145 = v73;
          v147 = v21;
          v155 = _swiftEmptyArrayStorage;
          specialized ContiguousArray.reserveCapacity(_:)(v84);
          v85 = v150;
          v86 = (*(unsigned __int8 *)(v150 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v150 + 80);
          v143 = v83;
          v87 = v83 + v86;
          v88 = *(_QWORD *)(v150 + 72);
          v89 = *(void (**)(char *, unint64_t, uint64_t))(v150 + 16);
          v90 = v146;
          do
          {
            v89(v9, v87, v90);
            isa = UUID._bridgeToObjectiveC()().super.isa;
            v92 = objc_msgSend(v71, "UUIDWithNSUUID:", isa);

            v93 = (*(uint64_t (**)(char *, uint64_t))(v85 + 8))(v9, v90);
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v93);
            v94 = v155[2];
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v94);
            v95 = v94;
            v85 = v150;
            v96 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v95, v92);
            specialized ContiguousArray._endMutation()(v96);
            v87 += v88;
            --v84;
          }
          while (v84);
          v97 = v155;
          swift_bridgeObjectRelease(v143);
          v21 = v147;
          v98 = v148;
          v74 = v144;
          v73 = v145;
        }
        else
        {
          v98 = v76;
          swift_bridgeObjectRelease(v83);
          v97 = _swiftEmptyArrayStorage;
        }
        sub_10006C25C(0, (unint64_t *)&unk_100348970, CBUUID_ptr);
        v42 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v97);
        -[NSObject discoverCharacteristics:forService:](v21, "discoverCharacteristics:forService:", v42, v74);
        swift_release(v98);

LABEL_32:
        return;
      }
      v113 = v147;
      v114 = v21;
      v115 = v148;
      swift_retain_n(v148, 2);
      v116 = v114;
      v117 = Logger.logObject.getter(v116);
      v119 = static os_log_type_t.error.getter(v117, v118);
      v120 = v119;
      if (os_log_type_enabled(v117, v119))
      {
        v121 = swift_slowAlloc(22, -1);
        v144 = (_QWORD *)swift_slowAlloc(64, -1);
        v155 = v144;
        *(_DWORD *)v121 = 136315394;
        v142 = v121 + 4;
        LODWORD(v143) = v120;
        v145 = v73;
        v122 = *((_QWORD *)v115 + 8);
        v123 = *((_QWORD *)v115 + 9);
        v124 = sub_10006BA78(v113, v122);
        v125 = v115;
        v126 = *(_QWORD *)(v122 - 8);
        __chkstk_darwin(v124, v124);
        v147 = v117;
        v128 = (char *)&v141 - ((v127 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v126 + 16))(v128);
        v129 = (*(uint64_t (**)(uint64_t, uint64_t))(v123 + 8))(v122, v123);
        v131 = v130;
        v132 = *(void (**)(char *, uint64_t))(v126 + 8);
        v115 = v125;
        v132(v128, v122);
        v153 = sub_1001C56EC(v129, v131, (uint64_t *)&v155);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, v154, v142, v121 + 12);
        swift_release_n(v125, 2);
        swift_bridgeObjectRelease(v131);
        *(_WORD *)(v121 + 12) = 2080;
        v133 = -[NSObject identifier](v116, "identifier");
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        v134 = sub_1000C69C4((unint64_t *)&qword_100344CC8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v135 = v146;
        v136 = dispatch thunk of CustomStringConvertible.description.getter(v146, v134);
        v138 = v137;
        (*(void (**)(char *, uint64_t))(v150 + 8))(v9, v135);
        v153 = sub_1001C56EC(v136, v138, (uint64_t *)&v155);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, v154, v121 + 14, v121 + 22);

        v139 = v138;
        v73 = v145;
        swift_bridgeObjectRelease(v139);
        v117 = v147;
        _os_log_impl((void *)&_mh_execute_header, v147, (os_log_type_t)v143, "Target service UUID %s missing from %s", (uint8_t *)v121, 0x16u);
        v140 = v144;
        swift_arrayDestroy(v144, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v140, -1, -1);
        swift_slowDealloc(v121, -1, -1);
      }
      else
      {

        swift_release_n(v115, 2);
      }

      sub_1000B4DF8(v116, 1, 0);
      swift_release(v115);

    }
    else
    {
      v46 = v21;
      v47 = Logger.logObject.getter(v46);
      v49 = static os_log_type_t.error.getter(v47, v48);
      if (os_log_type_enabled(v47, v49))
      {
        v50 = (uint8_t *)swift_slowAlloc(12, -1);
        v51 = swift_slowAlloc(32, -1);
        v149 = v3;
        v52 = v51;
        v154[0] = v51;
        *(_DWORD *)v50 = 136315138;
        v148 = v50 + 4;
        v53 = -[NSObject identifier](v46, "identifier");
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        v54 = sub_1000C69C4((unint64_t *)&qword_100344CC8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v55 = dispatch thunk of CustomStringConvertible.description.getter(v6, v54);
        v57 = v56;
        (*(void (**)(char *, uint64_t))(v150 + 8))(v9, v6);
        v155 = (_QWORD *)sub_1001C56EC(v55, v57, v154);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, &v156, v148, v50 + 12);

        swift_bridgeObjectRelease(v57);
        _os_log_impl((void *)&_mh_execute_header, v47, v49, "Discovered services for unknown peripheral %s", v50, 0xCu);
        swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v52, -1, -1);
        swift_slowDealloc(v50, -1, -1);
      }
      else
      {

      }
      sub_1000B4DF8(v46, 1, 0);
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1000BD9EC(void *a1, void *a2, uint8_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  id v27;
  char v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  void **v34;
  uint8_t *v35;
  void *v36;
  id v37;
  id v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  os_log_type_t v42;
  _BOOL4 v43;
  uint64_t v44;
  id v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  void **v55;
  uint64_t v56;
  NSObject *v57;
  uint64_t v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint64_t v61;
  id v62;
  NSObject *v63;
  uint64_t v64;
  os_log_type_t v65;
  uint8_t *v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  id v73;
  id v74;
  void *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t (**v79)(uint64_t, void *);
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  void (*v85)(char *, uint64_t);
  char *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  void (*v94)(_QWORD *, char *, uint64_t);
  Class v95;
  id v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  NSObject *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  os_log_type_t v107;
  uint8_t *v108;
  NSObject *v109;
  uint64_t v110;
  os_log_type_t v111;
  uint8_t *v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t (**v116)(uint64_t, void *);
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  void (*v126)(_QWORD *, unint64_t, uint64_t);
  uint64_t v127;
  uint64_t v128;
  Class isa;
  id v130;
  uint64_t v131;
  void *v132;
  uint64_t v133;
  void **v134;
  uint64_t v135;
  id v136;
  NSObject *v137;
  uint64_t v138;
  os_log_type_t v139;
  _BOOL4 v140;
  _QWORD *v141;
  uint8_t *v142;
  id v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  id v149;
  char *v150;
  char *v151;
  void (*v152)(char *, uint64_t);
  uint64_t v153;
  void **v154;
  uint64_t *v155;
  id v156;
  void *v157;
  uint64_t *v158;
  id v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  unint64_t v166;
  void **v167;
  _QWORD *v168;
  uint64_t v169;
  void *v170;
  void *v171;
  id v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t *v175;
  uint64_t v176;
  void **v177;
  uint64_t v178;
  _QWORD *v179;
  char *v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t *v188;
  unint64_t v189;
  id v190;
  uint8_t *v191;
  id v192;
  _QWORD *v193;
  void **aBlock;
  _QWORD v195[4];
  void **v196;
  _QWORD *v197;
  _BYTE v198[24];
  char v199[16];

  v4 = v3;
  v190 = a2;
  v191 = a3;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v188 = *(uint64_t **)(v6 - 8);
  v189 = v6;
  __chkstk_darwin(v6, v7);
  v187 = (char *)&v174 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v186 = type metadata accessor for DispatchQoS(0);
  v185 = *(_QWORD *)(v186 - 8);
  __chkstk_darwin(v186, v9);
  v184 = (char *)&v174 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v183 = type metadata accessor for DispatchTime(0);
  v181 = *(_QWORD *)(v183 - 8);
  v12 = __chkstk_darwin(v183, v11);
  v180 = (char *)&v174 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v14);
  v182 = (char *)&v174 - v15;
  v16 = type metadata accessor for UUID(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16, v18);
  v20 = (char *)&v174 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for DispatchPredicate(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21, v23);
  v25 = (uint64_t *)((char *)&v174 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v26 = (void *)qword_100354EE8;
  *v25 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v22 + 104))(v25, enum case for DispatchPredicate.onQueue(_:), v21);
  v27 = v26;
  v28 = _dispatchPreconditionTest(_:)(v25);
  v29 = (*(uint64_t (**)(_QWORD *, uint64_t))(v22 + 8))(v25, v21);
  if ((v28 & 1) != 0)
  {
    if (*(_QWORD *)(v4 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager))
    {
      v30 = (uint64_t *)(v4 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals);
      swift_beginAccess(v4 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals, v199, 0, 0);
      v31 = *v30;
      v32 = a1;
      v33 = swift_bridgeObjectRetain(v31);
      v34 = (void **)sub_1000D8FC0(v33);
      swift_bridgeObjectRelease(v31);

      if (v34)
      {
        v179 = v20;
        v35 = v191;
        v178 = v17;
        if (v191)
        {
          v36 = (void *)(v4 + OBJC_IVAR____TtC10seserviced6DSKBLE_logger);
          swift_errorRetain(v191);
          v37 = v32;
          swift_errorRetain(v35);
          v38 = v37;
          v39 = swift_errorRetain(v35);
          v40 = Logger.logObject.getter(v39);
          v42 = static os_log_type_t.error.getter(v40, v41);
          v43 = os_log_type_enabled(v40, v42);
          v176 = v16;
          if (v43)
          {
            v44 = swift_slowAlloc(22, -1);
            v175 = (uint64_t *)swift_slowAlloc(8, -1);
            v177 = (void **)swift_slowAlloc(32, -1);
            aBlock = v177;
            *(_DWORD *)v44 = 136315394;
            v174 = v44 + 4;
            v45 = objc_msgSend(v38, "identifier");
            v46 = v179;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

            v47 = sub_1000C69C4((unint64_t *)&qword_100344CC8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            v48 = dispatch thunk of CustomStringConvertible.description.getter(v16, v47);
            v192 = v36;
            v49 = v38;
            v51 = v50;
            (*(void (**)(_QWORD *, uint64_t))(v178 + 8))(v46, v16);
            v197 = (_QWORD *)sub_1001C56EC(v48, v51, (uint64_t *)&aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v197, v198, v174, v44 + 12);

            swift_bridgeObjectRelease(v51);
            *(_WORD *)(v44 + 12) = 2112;
            swift_errorRetain(v191);
            v52 = _swift_stdlib_bridgeErrorToNSError(v191);
            v197 = (_QWORD *)v52;
            v38 = v49;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v197, v198, v44 + 14, v44 + 22);
            v53 = v175;
            *v175 = v52;
            swift_errorRelease(v191);
            swift_errorRelease(v191);
            _os_log_impl((void *)&_mh_execute_header, v40, v42, "Failed to discover characteristics for %s error %@", (uint8_t *)v44, 0x16u);
            v54 = sub_100063D3C((uint64_t *)&unk_100346090);
            swift_arrayDestroy(v53, 1, v54);
            swift_slowDealloc(v53, -1, -1);
            v55 = v177;
            swift_arrayDestroy(v177, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v55, -1, -1);
            v35 = v191;
            swift_slowDealloc(v44, -1, -1);

          }
          else
          {

            swift_errorRelease(v35);
            v56 = swift_errorRelease(v35);
          }
          v101 = (uint64_t)v34[10];
          if (v101 <= 2)
          {
            v175 = (uint64_t *)v38;
            v34[10] = (void *)(v101 + 1);
            v102 = swift_retain(v34);
            v103 = Logger.logObject.getter(v102);
            v107 = static os_log_type_t.info.getter(v103, v104, v105, v106);
            if (os_log_type_enabled(v103, v107))
            {
              v108 = (uint8_t *)swift_slowAlloc(12, -1);
              *(_DWORD *)v108 = 134217984;
              aBlock = (void **)v34[10];
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v195, v108 + 4, v108 + 12);
              swift_release(v34);
              _os_log_impl((void *)&_mh_execute_header, v103, v107, "Retry %ld for discovering characteristics", v108, 0xCu);
              swift_slowDealloc(v108, -1, -1);
            }
            else
            {
              swift_release(v34);
            }
            v113 = v178;
            v114 = v179;

            swift_beginAccess(v34 + 5, &v197, 0, 0);
            v115 = (uint64_t)v34[8];
            v116 = (uint64_t (**)(uint64_t, void *))v34[9];
            v177 = v34;
            v117 = sub_10006BA78(v34 + 5, v115);
            v118 = *(_QWORD *)(v115 - 8);
            __chkstk_darwin(v117, v117);
            v120 = (char *)&v174 - ((v119 + 15) & 0xFFFFFFFFFFFFFFF0);
            (*(void (**)(char *))(v118 + 16))(v120);
            v121 = v116[2](v115, v116);
            (*(void (**)(char *, uint64_t))(v118 + 8))(v120, v115);
            v122 = *(_QWORD *)(v121 + 16);
            if (v122)
            {
              v179 = &v174;
              aBlock = (void **)_swiftEmptyArrayStorage;
              specialized ContiguousArray.reserveCapacity(_:)(v122);
              v192 = (id)objc_opt_self(CBUUID);
              v123 = (*(unsigned __int8 *)(v113 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v113 + 80);
              v174 = v121;
              v124 = v121 + v123;
              v125 = *(_QWORD *)(v113 + 72);
              v126 = *(void (**)(_QWORD *, unint64_t, uint64_t))(v113 + 16);
              v127 = v176;
              v128 = v113;
              do
              {
                v126(v114, v124, v127);
                isa = UUID._bridgeToObjectiveC()().super.isa;
                v130 = objc_msgSend(v192, "UUIDWithNSUUID:", isa);

                v131 = (*(uint64_t (**)(_QWORD *, uint64_t))(v128 + 8))(v114, v127);
                specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v131);
                v132 = aBlock[2];
                specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v132);
                v133 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v132, v130);
                specialized ContiguousArray._endMutation()(v133);
                v124 += v125;
                --v122;
              }
              while (v122);
              v134 = aBlock;
              v135 = swift_bridgeObjectRelease(v174);
            }
            else
            {
              v135 = swift_bridgeObjectRelease(v121);
              v134 = (void **)_swiftEmptyArrayStorage;
            }
            v150 = v180;
            static DispatchTime.now()(v135);
            v151 = v182;
            + infix(_:_:)(v150, 5.0);
            v152 = *(void (**)(char *, uint64_t))(v181 + 8);
            v153 = v183;
            v152(v150, v183);
            v154 = (void **)swift_allocObject(&unk_100308580, 40, 7);
            v155 = v175;
            v154[2] = v175;
            v154[3] = v134;
            v156 = v190;
            v154[4] = v190;
            v195[3] = sub_1000E4FF4;
            v196 = v154;
            aBlock = _NSConcreteStackBlock;
            v195[0] = 1107296256;
            v195[1] = sub_100071C98;
            v195[2] = &unk_100308598;
            v157 = _Block_copy(&aBlock);
            v158 = v155;
            v159 = v156;
            v160 = v184;
            static DispatchQoS.unspecified.getter(v159);
            v193 = _swiftEmptyArrayStorage;
            v161 = sub_1000C69C4((unint64_t *)&qword_100344A20, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
            v162 = sub_100063D3C((uint64_t *)&unk_100346200);
            v163 = sub_10007EF60((unint64_t *)&qword_100344A30, (uint64_t *)&unk_100346200, (uint64_t)&protocol conformance descriptor for [A]);
            v164 = v187;
            v165 = v162;
            v166 = v189;
            dispatch thunk of SetAlgebra.init<A>(_:)(&v193, v165, v163, v189, v161);
            OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v151, v160, v164, v157);
            _Block_release(v157);
            swift_release(v177);
            swift_errorRelease(v191);
            ((void (*)(char *, unint64_t))v188[1])(v164, v166);
            (*(void (**)(char *, uint64_t))(v185 + 8))(v160, v186);
            v152(v151, v153);
            v167 = v196;
            goto LABEL_42;
          }
          v109 = Logger.logObject.getter(v56);
          v111 = static os_log_type_t.error.getter(v109, v110);
          if (os_log_type_enabled(v109, v111))
          {
            v112 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v112 = 0;
            _os_log_impl((void *)&_mh_execute_header, v109, v111, "Retries exhausted for discovering characteristics", v112, 2u);
            v35 = v191;
            swift_slowDealloc(v112, -1, -1);
          }

          sub_1000B4DF8(v38, 1, 0);
          swift_errorRelease(v35);
LABEL_41:
          v167 = v34;
LABEL_42:
          swift_release(v167);
          return;
        }
        v74 = objc_msgSend(v190, "characteristics");
        if (!v74)
        {
          v136 = v32;
          v137 = Logger.logObject.getter(v136);
          v139 = static os_log_type_t.error.getter(v137, v138);
          v140 = os_log_type_enabled(v137, v139);
          v141 = v179;
          if (v140)
          {
            v142 = (uint8_t *)swift_slowAlloc(12, -1);
            v192 = (id)swift_slowAlloc(32, -1);
            aBlock = (void **)v192;
            *(_DWORD *)v142 = 136315138;
            v191 = v142 + 4;
            v143 = objc_msgSend(v136, "identifier");
            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

            v144 = sub_1000C69C4((unint64_t *)&qword_100344CC8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            v145 = dispatch thunk of CustomStringConvertible.description.getter(v16, v144);
            v146 = v16;
            v148 = v147;
            (*(void (**)(_QWORD *, uint64_t))(v178 + 8))(v141, v146);
            v197 = (_QWORD *)sub_1001C56EC(v145, v148, (uint64_t *)&aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v197, v198, v191, v142 + 12);

            swift_bridgeObjectRelease(v148);
            _os_log_impl((void *)&_mh_execute_header, v137, v139, "No characteristics discovered for %s", v142, 0xCu);
            v149 = v192;
            swift_arrayDestroy(v192, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v149, -1, -1);
            swift_slowDealloc(v142, -1, -1);
          }
          else
          {

          }
          sub_1000B4DF8(v136, 1, 0);
          goto LABEL_41;
        }
        v75 = v74;
        v191 = 0;
        v76 = sub_10006C25C(0, &qword_1003460F0, CBCharacteristic_ptr);
        v77 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v75, v76);

        v34[10] = 0;
        *((_BYTE *)v34 + 32) = 3;
        swift_beginAccess(v34 + 5, &aBlock, 0, 0);
        v78 = (uint64_t)v34[8];
        v79 = (uint64_t (**)(uint64_t, void *))v34[9];
        v80 = sub_10006BA78(v34 + 5, v78);
        v81 = *(_QWORD *)(v78 - 8);
        __chkstk_darwin(v80, v80);
        v83 = (char *)&v174 - ((v82 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v81 + 16))(v83);
        v84 = v79[2](v78, v79);
        v85 = *(void (**)(char *, uint64_t))(v81 + 8);
        v86 = (char *)v84;
        v85(v83, v78);
        v87 = *((_QWORD *)v86 + 2);
        v88 = v179;
        if (v87)
        {
          v188 = &v174;
          v189 = v77;
          v190 = v32;
          v177 = v34;
          v197 = _swiftEmptyArrayStorage;
          specialized ContiguousArray.reserveCapacity(_:)(v87);
          v192 = (id)objc_opt_self(CBUUID);
          v89 = v178;
          v90 = (*(unsigned __int8 *)(v178 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v178 + 80);
          v91 = v16;
          v187 = v86;
          v92 = &v86[v90];
          v93 = *(_QWORD *)(v178 + 72);
          v94 = *(void (**)(_QWORD *, char *, uint64_t))(v178 + 16);
          do
          {
            v94(v88, v92, v91);
            v95 = UUID._bridgeToObjectiveC()().super.isa;
            v96 = objc_msgSend(v192, "UUIDWithNSUUID:", v95);

            v97 = (*(uint64_t (**)(_QWORD *, uint64_t))(v89 + 8))(v88, v91);
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v97);
            v98 = v197[2];
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v98);
            v99 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v98, v96);
            specialized ContiguousArray._endMutation()(v99);
            v92 += v93;
            --v87;
          }
          while (v87);
          v100 = v197;
          swift_bridgeObjectRelease(v187);
          v34 = v177;
          v77 = v189;
          v32 = v190;
        }
        else
        {
          swift_bridgeObjectRelease(v86);
          v100 = _swiftEmptyArrayStorage;
        }
        v168 = sub_1000D7D58(v77, (uint64_t)v100);
        swift_bridgeObjectRelease(v77);
        swift_bridgeObjectRelease(v100);
        v169 = sub_100146208((uint64_t)v168);
        swift_bridgeObjectRelease(v168);
        swift_beginAccess(v34 + 11, &v197, 1, 0);
        v170 = v34[11];
        v34[11] = (void *)v169;
        swift_bridgeObjectRelease(v170);
        v171 = v34[11];
        v172 = v32;
        v173 = swift_bridgeObjectRetain(v171);
        sub_1000DC290(v173, v172);
        swift_bridgeObjectRelease(v171);
        swift_release(v34);

      }
      else
      {
        v61 = v17;
        v62 = v32;
        v63 = Logger.logObject.getter(v62);
        v65 = static os_log_type_t.error.getter(v63, v64);
        if (os_log_type_enabled(v63, v65))
        {
          v66 = (uint8_t *)swift_slowAlloc(12, -1);
          v192 = (id)swift_slowAlloc(32, -1);
          aBlock = (void **)v192;
          *(_DWORD *)v66 = 136315138;
          v191 = v66 + 4;
          v67 = objc_msgSend(v62, "identifier");
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          v68 = sub_1000C69C4((unint64_t *)&qword_100344CC8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v69 = dispatch thunk of CustomStringConvertible.description.getter(v16, v68);
          v70 = v16;
          v72 = v71;
          (*(void (**)(char *, uint64_t))(v61 + 8))(v20, v70);
          v197 = (_QWORD *)sub_1001C56EC(v69, v72, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v197, v198, v191, v66 + 12);

          swift_bridgeObjectRelease(v72);
          _os_log_impl((void *)&_mh_execute_header, v63, v65, "Discovered characteristics for unknown peripheral %s", v66, 0xCu);
          v73 = v192;
          swift_arrayDestroy(v192, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v73, -1, -1);
          swift_slowDealloc(v66, -1, -1);
        }
        else
        {

        }
        sub_1000B4DF8(v62, 1, 0);
      }
    }
    else
    {
      v57 = Logger.logObject.getter(v29);
      v59 = static os_log_type_t.error.getter(v57, v58);
      if (os_log_type_enabled(v57, v59))
      {
        v60 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v60 = 0;
        _os_log_impl((void *)&_mh_execute_header, v57, v59, "Not running", v60, 2u);
        swift_slowDealloc(v60, -1, -1);
      }

    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1000BEAB8(void *a1, uint64_t a2, uint64_t a3)
{
  Class isa;

  sub_10006C25C(0, (unint64_t *)&unk_100348970, CBUUID_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a1, "discoverCharacteristics:forService:", isa, a3);

}

void sub_1000BEB3C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  _QWORD *v40;
  char *v41;
  id v42;
  id v43;
  id v44;
  NSObject *v45;
  uint64_t v46;
  os_log_type_t v47;
  int v48;
  _BOOL4 v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  void **v53;
  id v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  os_log_t v63;
  uint64_t v64;
  void **v65;
  uint64_t v66;
  NSObject *v67;
  uint64_t v68;
  os_log_type_t v69;
  uint8_t *v70;
  id v71;
  NSObject *v72;
  uint64_t v73;
  uint64_t v74;
  uint8_t *v75;
  id v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  void **v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  id v92;
  uint64_t *v93;
  uint64_t v94;
  id v95;
  id v96;
  id v97;
  id v98;
  uint64_t v99;
  os_log_type_t v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  id v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  void (*v111)(char *, uint64_t);
  void **v112;
  uint64_t v113;
  uint64_t v114;
  NSObject *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  os_log_type_t v119;
  uint8_t *v120;
  NSObject *v121;
  uint64_t v122;
  os_log_type_t v123;
  uint8_t *v124;
  void **v125;
  unint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  char v129;
  char v130;
  id v131;
  id v132;
  id v133;
  id v134;
  NSObject *v135;
  uint64_t v136;
  os_log_type_t v137;
  uint64_t v138;
  _QWORD *v139;
  _QWORD *v140;
  id v141;
  id v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t *v148;
  const char *v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  void **v154;
  void *v155;
  void *v156;
  void **v157;
  id v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  id v166;
  void *v167;
  void **v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  void (*v178)(uint64_t, uint64_t);
  uint64_t *v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  id v184;
  id v185;
  uint64_t v186;
  _QWORD *v187;
  _QWORD *v188;
  id v189;
  id v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  NSObject *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  os_log_type_t v206;
  _QWORD *v207;
  uint8_t *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  _QWORD *v215;
  uint64_t v216;
  uint64_t v217;
  _QWORD *v218;
  char *v219;
  uint64_t (*v220)(uint64_t, uint64_t);
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  __int16 v224;
  _QWORD *v225;
  uint64_t v226;
  NSObject *v227;
  uint64_t v228;
  os_log_type_t v229;
  _BOOL4 v230;
  uint64_t v231;
  uint8_t *v232;
  _QWORD *v233;
  __int16 v234;
  uint64_t v235;
  _QWORD *v236;
  uint64_t v237;
  NSObject *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  os_log_type_t v242;
  uint8_t *v243;
  uint64_t v244;
  uint64_t v245;
  _QWORD *v246;
  os_log_t v247;
  int v248;
  void **v249;
  char *v250;
  id v251;
  uint64_t v252;
  char *v253;
  uint64_t v254;
  char *v255;
  uint64_t v256;
  uint64_t v257;
  _QWORD *v258;
  _QWORD *v259;
  uint64_t *v260;
  void **v261;
  char *v262;
  uint64_t v263;
  uint64_t *v264;
  void (*v265)(char *, uint64_t);
  void **aBlock;
  _QWORD v267[4];
  uint64_t v268;
  _QWORD *v269;
  _BYTE v270[16];
  uint64_t v271;
  _QWORD *v272;
  char v273[8];
  char v274[4];

  v6 = sub_100063D3C((uint64_t *)&unk_1003465E0);
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v244 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v260 = (uint64_t *)type metadata accessor for DispatchWorkItemFlags(0);
  v259 = (_QWORD *)*(v260 - 1);
  __chkstk_darwin(v260, v10);
  v258 = (uint64_t *)((char *)&v244 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v257 = type metadata accessor for DispatchQoS(0);
  v256 = *(_QWORD *)(v257 - 8);
  __chkstk_darwin(v257, v12);
  v255 = (char *)&v244 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v254 = type metadata accessor for DispatchTime(0);
  v252 = *(_QWORD *)(v254 - 8);
  v15 = __chkstk_darwin(v254, v14);
  v17 = (char *)&v244 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v18);
  v253 = (char *)&v244 - v19;
  v20 = type metadata accessor for UUID(0);
  v21 = *(uint64_t **)(v20 - 8);
  v263 = v20;
  v264 = v21;
  v23 = __chkstk_darwin(v20, v22);
  v25 = (void **)((char *)&v244 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v23, v26);
  v262 = (char *)&v244 - v27;
  v28 = type metadata accessor for DispatchPredicate(0);
  v29 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28, v30);
  v32 = (uint64_t *)((char *)&v244 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v33 = qword_100354EE8;
  *v32 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v29 + 104))(v32, enum case for DispatchPredicate.onQueue(_:), v28);
  v34 = (id)v33;
  LOBYTE(v33) = _dispatchPreconditionTest(_:)(v32);
  v35 = (*(uint64_t (**)(_QWORD *, uint64_t))(v29 + 8))(v32, v28);
  if ((v33 & 1) == 0)
  {
    __break(1u);
    goto LABEL_71;
  }
  v261 = v25;
  if (!*(_QWORD *)((char *)v265 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager))
  {
    v67 = Logger.logObject.getter(v35);
    v69 = static os_log_type_t.error.getter(v67, v68);
    if (os_log_type_enabled(v67, v69))
    {
      v70 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v70 = 0;
      _os_log_impl((void *)&_mh_execute_header, v67, v69, "Not running", v70, 2u);
      swift_slowDealloc(v70, -1, -1);
    }
    goto LABEL_39;
  }
  v36 = (uint64_t *)((char *)v265 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals);
  swift_beginAccess((char *)v265 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals, v274, 0, 0);
  v37 = *v36;
  v38 = a1;
  v39 = swift_bridgeObjectRetain(v37);
  v40 = sub_1000D8FC0(v39);
  swift_bridgeObjectRelease(v37);

  if (!v40)
  {
    v71 = v38;
    v72 = Logger.logObject.getter(v71);
    v74 = static os_log_type_t.error.getter(v72, v73);
    if (os_log_type_enabled(v72, (os_log_type_t)v74))
    {
      v75 = (uint8_t *)swift_slowAlloc(12, -1);
      v261 = (void **)swift_slowAlloc(32, -1);
      aBlock = v261;
      *(_DWORD *)v75 = 136315138;
      v260 = (uint64_t *)(v75 + 4);
      v76 = objc_msgSend(v71, "identifier");
      v77 = v262;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      v78 = sub_1000C69C4((unint64_t *)&qword_100344CC8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v79 = v263;
      v80 = dispatch thunk of CustomStringConvertible.description.getter(v263, v78);
      v82 = v81;
      ((void (*)(char *, uint64_t))v264[1])(v77, v79);
      v272 = (_QWORD *)sub_1001C56EC(v80, v82, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v272, v273, v260, v75 + 12);

      swift_bridgeObjectRelease(v82);
      _os_log_impl((void *)&_mh_execute_header, v72, (os_log_type_t)v74, "Read characteristic for unknown peripheral %s", v75, 0xCu);
      v83 = v261;
      swift_arrayDestroy(v261, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v83, -1, -1);
      swift_slowDealloc(v75, -1, -1);
    }
    else
    {

    }
    sub_1000B4DF8(v71, 1, 0);
    return;
  }
  if (a3)
  {
    v41 = (char *)v265 + OBJC_IVAR____TtC10seserviced6DSKBLE_logger;
    swift_errorRetain(a3);
    v42 = v38;
    swift_errorRetain(a3);
    v43 = a2;
    v261 = (void **)v42;
    swift_errorRetain(a3);
    v44 = v43;
    v45 = Logger.logObject.getter(v44);
    v47 = static os_log_type_t.error.getter(v45, v46);
    v48 = v47;
    v49 = os_log_type_enabled(v45, v47);
    v251 = v44;
    if (v49)
    {
      v50 = swift_slowAlloc(32, -1);
      v51 = (_QWORD *)swift_slowAlloc(16, -1);
      v246 = v51;
      v249 = (void **)swift_slowAlloc(32, -1);
      aBlock = v249;
      *(_DWORD *)v50 = 138412802;
      v248 = v48;
      v52 = objc_msgSend(v44, "UUID");
      v272 = v52;
      v250 = v41;
      v247 = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v272, v273, v50 + 4, v50 + 12);
      *v51 = v52;

      *(_WORD *)(v50 + 12) = 2080;
      v245 = v50 + 14;
      v53 = v261;
      v54 = objc_msgSend(v261, "identifier");
      v55 = v262;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      v56 = sub_1000C69C4((unint64_t *)&qword_100344CC8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v57 = v263;
      v58 = dispatch thunk of CustomStringConvertible.description.getter(v263, v56);
      v60 = v59;
      ((void (*)(char *, uint64_t))v264[1])(v55, v57);
      v272 = (_QWORD *)sub_1001C56EC(v58, v60, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v272, v273, v245, v50 + 22);

      swift_bridgeObjectRelease(v60);
      *(_WORD *)(v50 + 22) = 2112;
      swift_errorRetain(a3);
      v61 = (_QWORD *)_swift_stdlib_bridgeErrorToNSError(a3);
      v272 = v61;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v272, v273, v50 + 24, v50 + 32);
      v62 = v246;
      v246[1] = v61;
      swift_errorRelease(a3);
      swift_errorRelease(a3);
      v63 = v247;
      _os_log_impl((void *)&_mh_execute_header, v247, (os_log_type_t)v248, "Failed to read characteristic %@ for %s error %@", (uint8_t *)v50, 0x20u);
      v64 = sub_100063D3C((uint64_t *)&unk_100346090);
      swift_arrayDestroy(v62, 2, v64);
      swift_slowDealloc(v62, -1, -1);
      v65 = v249;
      swift_arrayDestroy(v249, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v65, -1, -1);
      swift_slowDealloc(v50, -1, -1);

    }
    else
    {
      v112 = v261;

      swift_errorRelease(a3);
      v66 = swift_errorRelease(a3);
    }
    v113 = v40[10];
    if (v113 > 2)
    {
      v121 = Logger.logObject.getter(v66);
      v123 = static os_log_type_t.error.getter(v121, v122);
      if (os_log_type_enabled(v121, v123))
      {
        v124 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v124 = 0;
        _os_log_impl((void *)&_mh_execute_header, v121, v123, "Retries exhausted for reading characteristic", v124, 2u);
        swift_slowDealloc(v124, -1, -1);
      }

      sub_1000B4DF8(v261, 1, 0);
      swift_errorRelease(a3);
      swift_release(v40);
    }
    else
    {
      v40[10] = v113 + 1;
      v114 = swift_retain(v40);
      v115 = Logger.logObject.getter(v114);
      v119 = static os_log_type_t.info.getter(v115, v116, v117, v118);
      if (os_log_type_enabled(v115, v119))
      {
        v120 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v120 = 134217984;
        aBlock = (void **)v40[10];
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v267, v120 + 4, v120 + 12);
        swift_release(v40);
        _os_log_impl((void *)&_mh_execute_header, v115, v119, "Retry %ld for reading characteristic", v120, 0xCu);
        swift_slowDealloc(v120, -1, -1);
      }
      else
      {
        swift_release(v40);
      }

      v264 = (uint64_t *)qword_100354EE8;
      static DispatchTime.now()(v150);
      v151 = v253;
      + infix(_:_:)(v17, 5.0);
      v265 = *(void (**)(char *, uint64_t))(v252 + 8);
      v152 = v254;
      v265(v17, v254);
      v153 = swift_allocObject(&unk_100308530, 32, 7);
      v154 = v261;
      v155 = v251;
      *(_QWORD *)(v153 + 16) = v261;
      *(_QWORD *)(v153 + 24) = v155;
      v267[3] = sub_1000E4FB0;
      v268 = v153;
      aBlock = _NSConcreteStackBlock;
      v267[0] = 1107296256;
      v267[1] = sub_100071C98;
      v267[2] = &unk_100308548;
      v156 = _Block_copy(&aBlock);
      v157 = v154;
      v158 = v155;
      v159 = v255;
      static DispatchQoS.unspecified.getter(v158);
      v272 = _swiftEmptyArrayStorage;
      v160 = sub_1000C69C4((unint64_t *)&qword_100344A20, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v161 = sub_100063D3C((uint64_t *)&unk_100346200);
      v162 = sub_10007EF60((unint64_t *)&qword_100344A30, (uint64_t *)&unk_100346200, (uint64_t)&protocol conformance descriptor for [A]);
      v163 = (uint64_t)v258;
      v164 = v161;
      v165 = (unint64_t)v260;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v272, v164, v162, v260, v160);
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v151, v159, v163, v156);
      _Block_release(v156);
      swift_errorRelease(a3);
      swift_release(v40);
      ((void (*)(uint64_t, unint64_t))v259[1])(v163, v165);
      (*(void (**)(char *, uint64_t))(v256 + 8))(v159, v257);
      v265(v151, v152);
      swift_release(v268);
    }
    return;
  }
  v40[10] = 0;
  swift_beginAccess(v40 + 5, &aBlock, 0, 0);
  v84 = v40[8];
  v85 = v40[9];
  v259 = v40 + 5;
  v86 = sub_10006BA78(v40 + 5, v84);
  v260 = &v244;
  v87 = (unint64_t)v40;
  v88 = *(_QWORD *)(v84 - 8);
  __chkstk_darwin(v86, v86);
  v90 = (char *)&v244 - ((v89 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v88 + 16))(v90);
  v91 = (*(uint64_t (**)(uint64_t, uint64_t))(v85 + 16))(v84, v85);
  (*(void (**)(char *, uint64_t))(v88 + 8))(v90, v84);
  v92 = a2;
  sub_1000AC1CC(v91, v92, v9);
  swift_bridgeObjectRelease(v91);
  v94 = v263;
  v93 = v264;
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v264[6])(v9, 1, v263) == 1)
  {
    v260 = (uint64_t *)v87;
    sub_100096700((uint64_t)v9, (uint64_t *)&unk_1003465E0);
    v95 = v38;
    v96 = v92;
    v97 = v95;
    v98 = v96;
    v67 = Logger.logObject.getter(v98);
    v100 = static os_log_type_t.error.getter(v67, v99);
    if (os_log_type_enabled(v67, v100))
    {
      v101 = swift_slowAlloc(22, -1);
      v102 = (_QWORD *)swift_slowAlloc(8, -1);
      v265 = (void (*)(char *, uint64_t))swift_slowAlloc(32, -1);
      v272 = v265;
      *(_DWORD *)v101 = 138412546;
      v103 = objc_msgSend(v98, "UUID");
      v269 = v103;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v269, v270, v101 + 4, v101 + 12);
      *v102 = v103;

      *(_WORD *)(v101 + 12) = 2080;
      v261 = (void **)(v101 + 14);
      v104 = objc_msgSend(v97, "identifier");
      v105 = v262;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      v106 = sub_1000C69C4((unint64_t *)&qword_100344CC8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v107 = dispatch thunk of CustomStringConvertible.description.getter(v94, v106);
      v109 = v108;
      ((void (*)(char *, uint64_t))v264[1])(v105, v94);
      v269 = (_QWORD *)sub_1001C56EC(v107, v109, (uint64_t *)&v272);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v269, v270, v261, v101 + 22);

      swift_bridgeObjectRelease(v109);
      _os_log_impl((void *)&_mh_execute_header, v67, v100, "Ignoring read characteristic which was not requested %@ for %s", (uint8_t *)v101, 0x16u);
      v110 = sub_100063D3C((uint64_t *)&unk_100346090);
      swift_arrayDestroy(v102, 1, v110);
      swift_slowDealloc(v102, -1, -1);
      v111 = v265;
      swift_arrayDestroy(v265, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v111, -1, -1);
      swift_slowDealloc(v101, -1, -1);
    }
    else
    {

    }
    swift_release(v260);
LABEL_39:

    return;
  }
  v125 = v261;
  ((void (*)(void **, char *, uint64_t))v93[4])(v261, v9, v94);
  v126 = v87 + 96;
  swift_beginAccess(v87 + 96, &v272, 1, 0);
  v127 = *(_QWORD *)(v87 + 96);
  v128 = (_QWORD *)v87;
  if (*(_QWORD *)(v127 + 16))
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v87 + 96));
    sub_100187E34((uint64_t)v125);
    v130 = v129;
    swift_bridgeObjectRelease(v127);
    if ((v130 & 1) != 0)
    {
      v131 = v38;
      v132 = v92;
      v133 = v131;
      v134 = v132;
      v135 = Logger.logObject.getter(v134);
      v137 = static os_log_type_t.error.getter(v135, v136);
      if (os_log_type_enabled(v135, v137))
      {
        v138 = swift_slowAlloc(22, -1);
        v139 = (_QWORD *)swift_slowAlloc(8, -1);
        v258 = v139;
        v140 = (_QWORD *)swift_slowAlloc(32, -1);
        v260 = (uint64_t *)v87;
        v259 = v140;
        v269 = v140;
        *(_DWORD *)v138 = 138412546;
        v141 = objc_msgSend(v134, "UUID");
        v271 = (uint64_t)v141;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v271, &v272, v138 + 4, v138 + 12);
        *v139 = v141;

        *(_WORD *)(v138 + 12) = 2080;
        v142 = objc_msgSend(v133, "identifier");
        v143 = v262;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        v144 = sub_1000C69C4((unint64_t *)&qword_100344CC8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v145 = dispatch thunk of CustomStringConvertible.description.getter(v263, v144);
        v147 = v146;
        v148 = v264;
        ((void (*)(char *, uint64_t))v264[1])(v143, v263);
        v271 = sub_1001C56EC(v145, v147, (uint64_t *)&v269);
        v94 = v263;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v271, &v272, v138 + 14, v138 + 22);

        swift_bridgeObjectRelease(v147);
        v149 = "Read characteristic %@ multiple times for %s";
LABEL_42:
        _os_log_impl((void *)&_mh_execute_header, v135, v137, v149, (uint8_t *)v138, 0x16u);
        v196 = sub_100063D3C((uint64_t *)&unk_100346090);
        v197 = (uint64_t)v258;
        swift_arrayDestroy(v258, 1, v196);
        swift_slowDealloc(v197, -1, -1);
        v198 = v259;
        swift_arrayDestroy(v259, 1, (char *)&type metadata for Any + 8);
        v128 = v260;
        swift_slowDealloc(v198, -1, -1);
        v199 = v138;
        v125 = v261;
        swift_slowDealloc(v199, -1, -1);

LABEL_44:
        sub_1000B4DF8(v133, 1, 0);
        swift_release(v128);
        ((void (*)(void **, uint64_t))v148[1])(v125, v94);
        return;
      }
      goto LABEL_43;
    }
  }
  v166 = objc_msgSend(v92, "value");
  if (!v166)
  {
    v184 = v38;
    v185 = v92;
    v133 = v184;
    v134 = v185;
    v135 = Logger.logObject.getter(v134);
    v137 = static os_log_type_t.error.getter(v135, v186);
    if (os_log_type_enabled(v135, v137))
    {
      v138 = swift_slowAlloc(22, -1);
      v187 = (_QWORD *)swift_slowAlloc(8, -1);
      v258 = v187;
      v188 = (_QWORD *)swift_slowAlloc(32, -1);
      v260 = (uint64_t *)v87;
      v259 = v188;
      v269 = v188;
      *(_DWORD *)v138 = 138412546;
      v189 = objc_msgSend(v134, "UUID");
      v271 = (uint64_t)v189;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v271, &v272, v138 + 4, v138 + 12);
      *v187 = v189;

      *(_WORD *)(v138 + 12) = 2080;
      v190 = objc_msgSend(v133, "identifier");
      v191 = v262;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      v192 = sub_1000C69C4((unint64_t *)&qword_100344CC8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v193 = dispatch thunk of CustomStringConvertible.description.getter(v263, v192);
      v195 = v194;
      v148 = v264;
      ((void (*)(char *, uint64_t))v264[1])(v191, v263);
      v271 = sub_1001C56EC(v193, v195, (uint64_t *)&v269);
      v94 = v263;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v271, &v272, v138 + 14, v138 + 22);

      swift_bridgeObjectRelease(v195);
      v149 = "Read characteristic %@ but got no value for %s";
      goto LABEL_42;
    }
LABEL_43:

    v148 = v264;
    goto LABEL_44;
  }
  v167 = v166;
  v257 = 0;
  v168 = v125;
  v169 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v166);
  v170 = v94;
  v172 = v171;

  v173 = (uint64_t)v262;
  ((void (*)(char *, void **, uint64_t))v264[2])(v262, v168, v170);
  swift_beginAccess(v126, &v269, 33, 0);
  sub_100063C8C(v169, v172);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v128[12]);
  v271 = v128[12];
  v128[12] = 0x8000000000000000;
  v258 = (_QWORD *)v169;
  v260 = (uint64_t *)v172;
  v175 = v172;
  v176 = v170;
  sub_10018E894(v169, v175, v173, isUniquelyReferenced_nonNull_native);
  v177 = v128[12];
  v128[12] = v271;
  swift_bridgeObjectRelease(v177);
  v178 = (void (*)(uint64_t, uint64_t))v264[1];
  v178(v173, v170);
  swift_endAccess(&v269);
  v179 = v128 + 11;
  swift_beginAccess(v128 + 11, &v269, 33, 0);
  v180 = (void *)sub_1000D3D98(v92, &qword_1003460F0, CBCharacteristic_ptr, &qword_100346210);
  swift_endAccess(&v269);

  v181 = v128[11];
  if ((v181 & 0xC000000000000001) != 0)
  {
    if (v181 < 0)
      v182 = v128[11];
    else
      v182 = v181 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v128[11]);
    v183 = __CocoaSet.count.getter(v182);
    swift_bridgeObjectRelease(v181);
  }
  else
  {
    v183 = *(_QWORD *)(v181 + 16);
  }
  v200 = v257;
  if (!v183)
  {
    v212 = v128[12];
    v128[12] = &_swiftEmptyDictionarySingleton;
    v213 = v128[8];
    v214 = v128[9];
    v215 = sub_10006BA78(v259, v213);
    v264 = &v244;
    v216 = *(_QWORD *)(v213 - 8);
    __chkstk_darwin(v215, v215);
    v218 = v128;
    v219 = (char *)&v244 - ((v217 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v216 + 16))(v219);
    v220 = (uint64_t (*)(uint64_t, uint64_t))(*(uint64_t (**)(uint64_t, uint64_t))(v214 + 80))(v213, v214);
    v222 = v221;
    (*(void (**)(char *, uint64_t))(v216 + 8))(v219, v213);
    v223 = v218[2];
    swift_retain(v223);
    v224 = v220(v212, v223);
    if (v200)
    {
      v225 = v218;
      swift_release(v222);
      swift_release(v223);
      v226 = swift_bridgeObjectRelease(v212);
      v227 = Logger.logObject.getter(v226);
      v229 = static os_log_type_t.error.getter(v227, v228);
      v230 = os_log_type_enabled(v227, v229);
      v231 = v263;
      if (v230)
      {
        v232 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v232 = 0;
        _os_log_impl((void *)&_mh_execute_header, v227, v229, "Cancelling connection as requested by client", v232, 2u);
        swift_slowDealloc(v232, -1, -1);
      }

      sub_1000B4DF8(v38, 1, 0);
      swift_errorRelease(v200);
      v233 = v225;
      goto LABEL_57;
    }
    v234 = v224;
    swift_release(v223);
    swift_bridgeObjectRelease(v212);
    swift_release(v222);
    *((_WORD *)v218 + 60) = v234;
    *((_BYTE *)v218 + 122) = 0;
    v235 = v218[12];
    v236 = v218;
    v231 = v263;
    if (*(_QWORD *)(v235 + 16))
    {
      v237 = swift_retain(v236);
      v238 = Logger.logObject.getter(v237);
      v242 = static os_log_type_t.info.getter(v238, v239, v240, v241);
      if (!os_log_type_enabled(v238, v242))
      {
        swift_release(v236);
        sub_100063CD0((uint64_t)v258, (unint64_t)v260);

        swift_release(v236);
        goto LABEL_59;
      }
      v243 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v243 = 134217984;
      v269 = *(_QWORD **)(v236[12] + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v269, v270, v243 + 4, v243 + 12);
      swift_release(v236);
      _os_log_impl((void *)&_mh_execute_header, v238, v242, "Waiting for acknowledgement of written characteristics pending %ld", v243, 0xCu);
      swift_slowDealloc(v243, -1, -1);
      swift_release(v236);

LABEL_58:
      sub_100063CD0((uint64_t)v258, (unint64_t)v260);
LABEL_59:
      v178((uint64_t)v261, v231);
      return;
    }
    v236[12] = &_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease(v235);
    *((_BYTE *)v236 + 32) = 5;
    if ((*((_BYTE *)v236 + 122) & 1) == 0)
    {
      objc_msgSend((id)v236[3], "openL2CAPChannel:", *((unsigned __int16 *)v236 + 60));
      v233 = v236;
LABEL_57:
      swift_release(v233);
      goto LABEL_58;
    }
LABEL_71:
    __break(1u);
    return;
  }
  v201 = swift_retain(v128);
  v202 = Logger.logObject.getter(v201);
  v206 = static os_log_type_t.info.getter(v202, v203, v204, v205);
  if (os_log_type_enabled(v202, v206))
  {
    v207 = v128;
    v208 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v208 = 134217984;
    v209 = *v179;
    if ((*v179 & 0xC000000000000001) != 0)
    {
      if (v209 < 0)
        v210 = *v179;
      else
        v210 = v209 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*v179);
      v211 = __CocoaSet.count.getter(v210);
      swift_bridgeObjectRelease(v209);
    }
    else
    {
      v211 = *(_QWORD *)(v209 + 16);
    }
    v269 = (_QWORD *)v211;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v269, v270, v208 + 4, v208 + 12);
    swift_release(v207);
    _os_log_impl((void *)&_mh_execute_header, v202, v206, "Waiting to read %ld remaining characteristics", v208, 0xCu);
    swift_slowDealloc(v208, -1, -1);
    swift_release(v207);

    sub_100063CD0((uint64_t)v258, (unint64_t)v260);
  }
  else
  {
    swift_release(v128);
    sub_100063CD0((uint64_t)v258, (unint64_t)v260);

    swift_release(v128);
  }
  v178((uint64_t)v261, v176);
}

void sub_1000C050C(void *a1, void *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  id v50;
  id v51;
  id v52;
  NSObject *v53;
  uint64_t v54;
  os_log_type_t v55;
  uint64_t v56;
  _QWORD *v57;
  id v58;
  id v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  void **v67;
  uint64_t v68;
  os_log_type_t v69;
  uint64_t v70;
  id v71;
  id v72;
  id v73;
  id v74;
  uint64_t v75;
  os_log_type_t v76;
  _QWORD *v77;
  id v78;
  id v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  void **v87;
  void (*v88)(char *, char *, uint64_t);
  uint64_t v89;
  _QWORD *v90;
  char *v91;
  id v92;
  id v93;
  id v94;
  id v95;
  uint64_t v96;
  NSObject *v97;
  uint64_t v98;
  os_log_type_t v99;
  int v100;
  _BOOL4 v101;
  uint64_t v102;
  _QWORD *v103;
  id v104;
  id v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void **v113;
  uint64_t v114;
  uint64_t v115;
  id v116;
  id v117;
  id v118;
  id v119;
  NSObject *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  os_log_type_t v124;
  uint64_t v125;
  _QWORD *v126;
  id v127;
  id v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  void **v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  NSObject *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  os_log_type_t v145;
  _BOOL4 v146;
  uint64_t v147;
  uint8_t *v148;
  NSObject *v149;
  uint64_t v150;
  os_log_type_t v151;
  _BOOL4 v152;
  uint64_t v153;
  uint8_t *v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  char v159;
  uint64_t *v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  char *v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  void **v171;
  uint64_t *v172;
  void *v173;
  void *v174;
  id v175;
  void **v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  void *v185;
  id v186;
  id v187;
  id v188;
  NSObject *v189;
  uint64_t v190;
  os_log_type_t v191;
  uint64_t v192;
  _QWORD *v193;
  void **v194;
  id v195;
  id v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  void **v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  int v209;
  void **v210;
  void (*v211)(uint64_t, char *, uint64_t);
  id v212;
  void *v213;
  uint64_t v214;
  uint64_t v215;
  _QWORD *v216;
  char *v217;
  uint64_t v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  uint64_t v226;
  char *v227;
  char *v228;
  _QWORD *v229;
  uint64_t v230;
  void **v231;
  void **aBlock;
  _QWORD v233[4];
  uint64_t v234;
  __int128 v235;
  uint64_t v236;
  _BYTE v237[4];
  char v238[8];

  v229 = a3;
  v224 = type metadata accessor for DispatchWorkItemFlags(0);
  v223 = *(_QWORD *)(v224 - 8);
  __chkstk_darwin(v224, v5);
  v222 = (char *)&v208 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v221 = type metadata accessor for DispatchQoS(0);
  v220 = *(_QWORD *)(v221 - 8);
  __chkstk_darwin(v221, v7);
  v219 = (char *)&v208 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v226 = type metadata accessor for DispatchTime(0);
  v218 = *(_QWORD *)(v226 - 8);
  v10 = __chkstk_darwin(v226, v9);
  v217 = (char *)&v208 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v12);
  v225 = (char *)&v208 - v13;
  v14 = sub_100063D3C((uint64_t *)&unk_1003465E0);
  __chkstk_darwin(v14, v15);
  v17 = (char *)&v208 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for UUID(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(_QWORD *)(v19 + 64);
  v22 = __chkstk_darwin(v18, v21);
  v227 = (char *)&v208 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v23);
  v228 = (char *)&v208 - v24;
  v25 = type metadata accessor for DispatchPredicate(0);
  v26 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25, v27);
  v29 = (uint64_t *)((char *)&v208 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v30 = qword_100354EE8;
  *v29 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v26 + 104))(v29, enum case for DispatchPredicate.onQueue(_:), v25);
  v31 = (id)v30;
  LOBYTE(v30) = _dispatchPreconditionTest(_:)(v29);
  v32 = (*(uint64_t (**)(_QWORD *, uint64_t))(v26 + 8))(v29, v25);
  if ((v30 & 1) == 0)
  {
    __break(1u);
LABEL_44:
    __break(1u);
    return;
  }
  if (!*(void **)((char *)v231 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager))
  {
    v53 = Logger.logObject.getter(v32);
    v69 = static os_log_type_t.error.getter(v53, v68);
    if (!os_log_type_enabled(v53, v69))
    {
LABEL_20:

      return;
    }
    v70 = swift_slowAlloc(2, -1);
    *(_WORD *)v70 = 0;
    _os_log_impl((void *)&_mh_execute_header, v53, v69, "Not running", (uint8_t *)v70, 2u);
LABEL_13:
    swift_slowDealloc(v70, -1, -1);
    goto LABEL_20;
  }
  v230 = v19;
  v33 = (uint64_t *)((char *)v231 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals);
  swift_beginAccess((char *)v231 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals, v238, 0, 0);
  v34 = *v33;
  v35 = a1;
  v36 = swift_bridgeObjectRetain(v34);
  v37 = sub_1000D8FC0(v36);
  swift_bridgeObjectRelease(v34);

  if (!v37)
  {
    v71 = v35;
    v72 = a2;
    v73 = v71;
    v74 = v72;
    v53 = Logger.logObject.getter(v74);
    v76 = static os_log_type_t.error.getter(v53, v75);
    if (!os_log_type_enabled(v53, v76))
    {

      goto LABEL_20;
    }
    v70 = swift_slowAlloc(22, -1);
    v77 = (_QWORD *)swift_slowAlloc(8, -1);
    v229 = v77;
    v231 = (void **)swift_slowAlloc(32, -1);
    aBlock = v231;
    *(_DWORD *)v70 = 138412546;
    v78 = objc_msgSend(v74, "UUID");
    v236 = (uint64_t)v78;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v236, v237, v70 + 4, v70 + 12);
    *v77 = v78;

    *(_WORD *)(v70 + 12) = 2080;
    v79 = objc_msgSend(v73, "identifier");
    v80 = v227;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v81 = sub_1000C69C4((unint64_t *)&qword_100344CC8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v82 = dispatch thunk of CustomStringConvertible.description.getter(v18, v81);
    v84 = v83;
    (*(void (**)(char *, uint64_t))(v230 + 8))(v80, v18);
    v236 = sub_1001C56EC(v82, v84, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v236, v237, v70 + 14, v70 + 22);

    swift_bridgeObjectRelease(v84);
    _os_log_impl((void *)&_mh_execute_header, v53, v76, "Characteristic %@ written for disconnected/unknown peripheral %s", (uint8_t *)v70, 0x16u);
    v85 = sub_100063D3C((uint64_t *)&unk_100346090);
    v86 = v229;
    swift_arrayDestroy(v229, 1, v85);
    swift_slowDealloc(v86, -1, -1);
    v87 = v231;
    swift_arrayDestroy(v231, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v87, -1, -1);
    goto LABEL_13;
  }
  v38 = v37 + 5;
  swift_beginAccess(v37 + 5, &v236, 0, 0);
  v216 = v37;
  v40 = v37[8];
  v39 = v37[9];
  v41 = sub_10006BA78(v38, v40);
  v215 = v18;
  v42 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v41, v41);
  v44 = (char *)&v208 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v42 + 16))(v44);
  v45 = (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 16))(v40, v39);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v44, v40);
  v46 = a2;
  sub_1000AC1CC(v45, v46, v17);
  swift_bridgeObjectRelease(v45);
  v47 = v215;
  v48 = v230;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v230 + 48))(v17, 1, v215) == 1)
  {
    sub_100096700((uint64_t)v17, (uint64_t *)&unk_1003465E0);
    v49 = v35;
    v50 = v46;
    v51 = v49;
    v52 = v50;
    v53 = Logger.logObject.getter(v52);
    v55 = static os_log_type_t.error.getter(v53, v54);
    if (os_log_type_enabled(v53, v55))
    {
      v56 = swift_slowAlloc(22, -1);
      v57 = (_QWORD *)swift_slowAlloc(8, -1);
      v229 = v57;
      v231 = (void **)swift_slowAlloc(32, -1);
      aBlock = v231;
      *(_DWORD *)v56 = 138412546;
      v58 = objc_msgSend(v52, "UUID");
      *(_QWORD *)&v235 = v58;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v235, (char *)&v235 + 8, v56 + 4, v56 + 12);
      *v57 = v58;

      *(_WORD *)(v56 + 12) = 2080;
      v59 = objc_msgSend(v51, "identifier");
      v60 = v227;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      v61 = sub_1000C69C4((unint64_t *)&qword_100344CC8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v62 = dispatch thunk of CustomStringConvertible.description.getter(v47, v61);
      v64 = v63;
      (*(void (**)(char *, uint64_t))(v230 + 8))(v60, v47);
      *(_QWORD *)&v235 = sub_1001C56EC(v62, v64, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v235, (char *)&v235 + 8, v56 + 14, v56 + 22);

      swift_bridgeObjectRelease(v64);
      _os_log_impl((void *)&_mh_execute_header, v53, v55, "Unknown characteristic %@ for %s", (uint8_t *)v56, 0x16u);
      v65 = sub_100063D3C((uint64_t *)&unk_100346090);
      v66 = v229;
      swift_arrayDestroy(v229, 1, v65);
      swift_slowDealloc(v66, -1, -1);
      v67 = v231;
      swift_arrayDestroy(v231, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v67, -1, -1);
      swift_slowDealloc(v56, -1, -1);
    }
    else
    {

    }
    swift_release(v216);
    goto LABEL_20;
  }
  v88 = *(void (**)(char *, char *, uint64_t))(v48 + 32);
  v89 = (uint64_t)v228;
  v88(v228, v17, v47);
  v90 = v229;
  if (!v229)
  {
    v216[10] = 0;
    v116 = v35;
    v117 = v46;
    v118 = v116;
    v119 = v117;
    v120 = Logger.logObject.getter(v119);
    v124 = static os_log_type_t.info.getter(v120, v121, v122, v123);
    if (os_log_type_enabled(v120, v124))
    {
      v125 = swift_slowAlloc(22, -1);
      v126 = (_QWORD *)swift_slowAlloc(8, -1);
      v229 = v126;
      v231 = (void **)swift_slowAlloc(32, -1);
      aBlock = v231;
      *(_DWORD *)v125 = 138412546;
      v127 = objc_msgSend(v119, "UUID");
      *(_QWORD *)&v235 = v127;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v235, (char *)&v235 + 8, v125 + 4, v125 + 12);
      *v126 = v127;

      *(_WORD *)(v125 + 12) = 2080;
      v128 = objc_msgSend(v118, "identifier");
      v129 = v227;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      v130 = sub_1000C69C4((unint64_t *)&qword_100344CC8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v131 = dispatch thunk of CustomStringConvertible.description.getter(v47, v130);
      v133 = v132;
      (*(void (**)(char *, uint64_t))(v230 + 8))(v129, v47);
      *(_QWORD *)&v235 = sub_1001C56EC(v131, v133, (uint64_t *)&aBlock);
      v89 = (uint64_t)v228;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v235, (char *)&v235 + 8, v125 + 14, v125 + 22);

      swift_bridgeObjectRelease(v133);
      _os_log_impl((void *)&_mh_execute_header, v120, v124, "Characteristic %@ written for %s", (uint8_t *)v125, 0x16u);
      v134 = sub_100063D3C((uint64_t *)&unk_100346090);
      v135 = v229;
      swift_arrayDestroy(v229, 1, v134);
      swift_slowDealloc(v135, -1, -1);
      v136 = v231;
      swift_arrayDestroy(v231, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v136, -1, -1);
      swift_slowDealloc(v125, -1, -1);
    }
    else
    {

    }
    v155 = v216;
    swift_beginAccess(v216 + 12, &aBlock, 33, 0);
    sub_10012EA90(v89, &v235);
    sub_10006B9B4(v235, *((unint64_t *)&v235 + 1));
    swift_endAccess(&aBlock);
    v156 = v155[12];
    if (*(_QWORD *)(v156 + 16))
    {
      (*(void (**)(uint64_t, uint64_t))(v230 + 8))(v89, v215);
      swift_release(v155);
      return;
    }
    v155[12] = &_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease(v156);
    *((_BYTE *)v155 + 32) = 5;
    v206 = v215;
    v207 = v230;
    if ((*((_BYTE *)v155 + 122) & 1) == 0)
    {
      objc_msgSend((id)v155[3], "openL2CAPChannel:", *((unsigned __int16 *)v155 + 60));
      swift_release(v155);
      (*(void (**)(uint64_t, uint64_t))(v207 + 8))(v89, v206);
      return;
    }
    goto LABEL_44;
  }
  v91 = (char *)v231 + OBJC_IVAR____TtC10seserviced6DSKBLE_logger;
  swift_errorRetain(v229);
  v92 = v35;
  v93 = v46;
  swift_errorRetain(v90);
  v94 = v92;
  v95 = v93;
  v96 = swift_errorRetain(v90);
  v214 = (uint64_t)v91;
  v97 = Logger.logObject.getter(v96);
  v99 = static os_log_type_t.error.getter(v97, v98);
  v100 = v99;
  v101 = os_log_type_enabled(v97, v99);
  v213 = v94;
  v211 = (void (*)(uint64_t, char *, uint64_t))v88;
  v212 = v95;
  if (v101)
  {
    v102 = swift_slowAlloc(32, -1);
    v103 = (_QWORD *)swift_slowAlloc(16, -1);
    v210 = (void **)swift_slowAlloc(32, -1);
    aBlock = v210;
    *(_DWORD *)v102 = 138412802;
    v104 = objc_msgSend(v95, "UUID");
    *(_QWORD *)&v235 = v104;
    v209 = v100;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v235, (char *)&v235 + 8, v102 + 4, v102 + 12);
    *v103 = v104;

    *(_WORD *)(v102 + 12) = 2080;
    v208 = v102 + 14;
    v105 = objc_msgSend(v94, "identifier");
    v106 = v227;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v107 = sub_1000C69C4((unint64_t *)&qword_100344CC8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v108 = dispatch thunk of CustomStringConvertible.description.getter(v47, v107);
    v110 = v109;
    (*(void (**)(char *, uint64_t))(v230 + 8))(v106, v47);
    *(_QWORD *)&v235 = sub_1001C56EC(v108, v110, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v235, (char *)&v235 + 8, v208, v102 + 22);

    swift_bridgeObjectRelease(v110);
    *(_WORD *)(v102 + 22) = 2112;
    swift_errorRetain(v229);
    v111 = _swift_stdlib_bridgeErrorToNSError(v229);
    *(_QWORD *)&v235 = v111;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v235, (char *)&v235 + 8, v102 + 24, v102 + 32);
    v103[1] = v111;
    swift_errorRelease(v229);
    swift_errorRelease(v229);
    _os_log_impl((void *)&_mh_execute_header, v97, (os_log_type_t)v209, "Failed to write characteristic %@ for %s error %@", (uint8_t *)v102, 0x20u);
    v112 = sub_100063D3C((uint64_t *)&unk_100346090);
    swift_arrayDestroy(v103, 2, v112);
    swift_slowDealloc(v103, -1, -1);
    v113 = v210;
    swift_arrayDestroy(v210, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v113, -1, -1);
    v114 = v102;
    v90 = v229;
    swift_slowDealloc(v114, -1, -1);

  }
  else
  {

    swift_errorRelease(v90);
    v115 = swift_errorRelease(v90);
  }
  v137 = v216;
  v138 = v216[10];
  v139 = (uint64_t)v228;
  if (v138 > 2)
  {
    v149 = Logger.logObject.getter(v115);
    v151 = static os_log_type_t.error.getter(v149, v150);
    v152 = os_log_type_enabled(v149, v151);
    v153 = v230;
    if (v152)
    {
      v154 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v154 = 0;
      _os_log_impl((void *)&_mh_execute_header, v149, v151, "Retries exhausted for writing characteristics", v154, 2u);
      swift_slowDealloc(v154, -1, -1);
    }

    sub_1000B4DF8(v213, 1, 0);
    swift_release(v137);
    swift_errorRelease(v90);
    (*(void (**)(uint64_t, uint64_t))(v153 + 8))(v139, v47);
  }
  else
  {
    v216[10] = v138 + 1;
    v140 = swift_retain(v137);
    v141 = Logger.logObject.getter(v140);
    v145 = static os_log_type_t.info.getter(v141, v142, v143, v144);
    v146 = os_log_type_enabled(v141, v145);
    v147 = v230;
    if (v146)
    {
      v148 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v148 = 134217984;
      v137 = v216;
      aBlock = (void **)v216[10];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v233, v148 + 4, v148 + 12);
      swift_release(v137);
      _os_log_impl((void *)&_mh_execute_header, v141, v145, "Retry %ld for writing characteristics", v148, 0xCu);
      swift_slowDealloc(v148, -1, -1);
    }
    else
    {
      swift_release(v137);
    }

    swift_beginAccess(v137 + 12, &aBlock, 32, 0);
    v157 = v137[12];
    if (*(_QWORD *)(v157 + 16) && (v158 = sub_100187E34(v139), (v159 & 1) != 0))
    {
      v160 = (uint64_t *)(*(_QWORD *)(v157 + 56) + 16 * v158);
      v161 = *v160;
      v162 = v160[1];
      swift_endAccess(&aBlock);
      v214 = qword_100354EE8;
      v163 = sub_100063C8C(v161, v162);
      v164 = v217;
      static DispatchTime.now()(v163);
      + infix(_:_:)(v164, 5.0);
      v218 = *(_QWORD *)(v218 + 8);
      ((void (*)(char *, uint64_t))v218)(v164, v226);
      v165 = v227;
      (*(void (**)(char *, uint64_t, uint64_t))(v147 + 16))(v227, v139, v47);
      v166 = *(unsigned __int8 *)(v147 + 80);
      v167 = (v166 + 24) & ~v166;
      v168 = (v20 + v167 + 7) & 0xFFFFFFFFFFFFFFF8;
      v169 = (v168 + 23) & 0xFFFFFFFFFFFFFFF8;
      v170 = swift_allocObject(&unk_1003084E0, v169 + 8, v166 | 7);
      v171 = v231;
      *(_QWORD *)(v170 + 16) = v231;
      v211(v170 + v167, v165, v47);
      v172 = (uint64_t *)(v170 + v168);
      *v172 = v161;
      v172[1] = v162;
      v173 = v213;
      *(_QWORD *)(v170 + v169) = v213;
      v233[3] = sub_1000E4F30;
      v234 = v170;
      aBlock = _NSConcreteStackBlock;
      v233[0] = 1107296256;
      v233[1] = sub_100071C98;
      v233[2] = &unk_1003084F8;
      v174 = _Block_copy(&aBlock);
      v175 = v173;
      sub_100063C8C(v161, v162);
      v176 = v171;
      v177 = v219;
      static DispatchQoS.unspecified.getter(v176);
      *(_QWORD *)&v235 = _swiftEmptyArrayStorage;
      v178 = sub_1000C69C4((unint64_t *)&qword_100344A20, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v179 = sub_100063D3C((uint64_t *)&unk_100346200);
      v180 = sub_10007EF60((unint64_t *)&qword_100344A30, (uint64_t *)&unk_100346200, (uint64_t)&protocol conformance descriptor for [A]);
      v181 = v222;
      v182 = v179;
      v183 = v224;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v235, v182, v180, v224, v178);
      v184 = v225;
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v225, v177, v181, v174);
      _Block_release(v174);
      sub_100063CD0(v161, v162);
      swift_release(v216);
      swift_errorRelease(v229);
      (*(void (**)(char *, uint64_t))(v223 + 8))(v181, v183);
      (*(void (**)(char *, uint64_t))(v220 + 8))(v177, v221);
      ((void (*)(char *, uint64_t))v218)(v184, v226);
      (*(void (**)(char *, uint64_t))(v147 + 8))(v228, v47);
      swift_release(v234);
    }
    else
    {
      swift_endAccess(&aBlock);
      v185 = v213;
      v186 = v212;
      v187 = v185;
      v188 = v186;
      v189 = Logger.logObject.getter(v188);
      v191 = static os_log_type_t.error.getter(v189, v190);
      if (os_log_type_enabled(v189, v191))
      {
        v192 = swift_slowAlloc(22, -1);
        v193 = (_QWORD *)swift_slowAlloc(8, -1);
        v226 = (uint64_t)v193;
        aBlock = (void **)swift_slowAlloc(32, -1);
        v194 = aBlock;
        *(_DWORD *)v192 = 138412546;
        v195 = objc_msgSend(v188, "UUID");
        *(_QWORD *)&v235 = v195;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v235, (char *)&v235 + 8, v192 + 4, v192 + 12);
        *v193 = v195;

        *(_WORD *)(v192 + 12) = 2080;
        v196 = objc_msgSend(v187, "identifier");
        v197 = v227;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        v198 = sub_1000C69C4((unint64_t *)&qword_100344CC8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v199 = dispatch thunk of CustomStringConvertible.description.getter(v215, v198);
        v201 = v200;
        (*(void (**)(char *, uint64_t))(v230 + 8))(v197, v215);
        *(_QWORD *)&v235 = sub_1001C56EC(v199, v201, (uint64_t *)&aBlock);
        v90 = v229;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v235, (char *)&v235 + 8, v192 + 14, v192 + 22);

        swift_bridgeObjectRelease(v201);
        _os_log_impl((void *)&_mh_execute_header, v189, v191, "Missing value for %@ for %s", (uint8_t *)v192, 0x16u);
        v202 = sub_100063D3C((uint64_t *)&unk_100346090);
        v203 = v226;
        swift_arrayDestroy(v226, 1, v202);
        v47 = v215;
        swift_slowDealloc(v203, -1, -1);
        swift_arrayDestroy(v194, 1, (char *)&type metadata for Any + 8);
        v204 = v194;
        v147 = v230;
        swift_slowDealloc(v204, -1, -1);
        v205 = v192;
        v137 = v216;
        swift_slowDealloc(v205, -1, -1);
      }
      else
      {

      }
      sub_1000B4DF8(v187, 1, 0);
      swift_release(v137);
      swift_errorRelease(v90);
      (*(void (**)(char *, uint64_t))(v147 + 8))(v228, v47);
    }
  }
}

uint64_t sub_1000C1B38(uint64_t a1, uint64_t a2, uint64_t a3, NSObject *a4, void *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  uint64_t v16;

  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = objc_msgSend(a5, "identifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  sub_1000B81EC(a2, a3, a4, (uint64_t)v13);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

void sub_1000C1C28(void *a1, uint64_t a2, void *a3, void *a4, void *a5, void (*a6)(id, id, void *))
{
  id v10;
  id v11;
  id v12;
  id v13;

  v10 = a3;
  v11 = a4;
  v12 = a1;
  v13 = a5;
  a6(v10, v11, a5);

}

void sub_1000C1CAC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  NSObject *v35;
  uint64_t v36;
  os_log_type_t v37;
  uint8_t *v38;
  id v39;
  NSObject *v40;
  uint64_t v41;
  os_log_type_t v42;
  uint8_t *v43;
  _DWORD *v44;
  uint8_t *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  void *v52;
  id v53;
  id v54;
  void *v55;
  id v56;
  void *v57;
  __CFReadStream *v58;
  __CFWriteStream *v59;
  id v60;
  void *v61;
  NSObject *v62;
  NSObject *v63;
  uint64_t v64;
  os_log_type_t v65;
  uint8_t *v66;
  uint64_t v67;
  _DWORD *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD v71[3];
  _BYTE v72[8];
  uint64_t v73;
  uint64_t v74[2];
  _BYTE v75[24];

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchPredicate(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v15 = (uint64_t *)((char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v16 = qword_100354EE8;
  *v15 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v12 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v11);
  v17 = (id)v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)(v15);
  v18 = (*(uint64_t (**)(_QWORD *, uint64_t))(v12 + 8))(v15, v11);
  if ((v16 & 1) == 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  v19 = v70;
  if (!*(_QWORD *)(v70 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager))
  {
    v35 = Logger.logObject.getter(v18);
    v37 = static os_log_type_t.error.getter(v35, v36);
    if (os_log_type_enabled(v35, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v37, "Not running", v38, 2u);
      swift_slowDealloc(v38, -1, -1);
    }
    goto LABEL_19;
  }
  v20 = (uint64_t *)(v70 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals);
  swift_beginAccess(v70 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals, v75, 0, 0);
  v21 = *v20;
  v22 = a1;
  v23 = swift_bridgeObjectRetain(v21);
  v24 = sub_1000D8FC0(v23);
  swift_bridgeObjectRelease(v21);

  if (v24)
  {
    if (a3)
    {
      swift_errorRetain(a3);
      swift_errorRetain(a3);
      v26 = swift_errorRetain(a3);
      v27 = Logger.logObject.getter(v26);
      v29 = static os_log_type_t.error.getter(v27, v28);
      if (os_log_type_enabled(v27, v29))
      {
        v30 = (uint8_t *)swift_slowAlloc(12, -1);
        v31 = swift_slowAlloc(32, -1);
        v74[0] = v31;
        *(_DWORD *)v30 = 136315138;
        swift_getErrorValue(a3, v72, v71);
        v32 = Error.localizedDescription.getter(v71[1], v71[2]);
        v34 = v33;
        v73 = sub_1001C56EC(v32, v33, v74);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74, v30 + 4, v30 + 12);
        swift_bridgeObjectRelease(v34);
        swift_errorRelease(a3);
        swift_errorRelease(a3);
        _os_log_impl((void *)&_mh_execute_header, v27, v29, "Failed to open channel error %s", v30, 0xCu);
        swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v31, -1, -1);
        swift_slowDealloc(v30, -1, -1);

      }
      else
      {

        swift_errorRelease(a3);
        swift_errorRelease(a3);
      }
      sub_1000B4DF8(v22, 1, 1);
      swift_errorRelease(a3);
LABEL_22:
      swift_release(v24);
      return;
    }
    if (!a2)
    {
      v63 = Logger.logObject.getter(v25);
      v65 = static os_log_type_t.error.getter(v63, v64);
      if (os_log_type_enabled(v63, v65))
      {
        v66 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v66 = 0;
        _os_log_impl((void *)&_mh_execute_header, v63, v65, "Opened channel is null", v66, 2u);
        swift_slowDealloc(v66, -1, -1);
      }

      sub_1000B4DF8(v22, 1, 1);
      goto LABEL_22;
    }
    *((_BYTE *)v24 + 32) = 6;
    v52 = (void *)v24[16];
    v24[16] = a2;
    v53 = a2;

    v54 = objc_msgSend(v53, "inputStream");
    if (v54)
    {
      v55 = v54;
      objc_msgSend(v54, "setDelegate:", v19);

      v56 = objc_msgSend(v53, "outputStream");
      if (v56)
      {
        v57 = v56;
        objc_msgSend(v56, "setDelegate:", v19);

        v58 = (__CFReadStream *)objc_msgSend(v53, "inputStream");
        CFReadStreamSetDispatchQueue(v58, (dispatch_queue_t)qword_100354EE8);

        v59 = (__CFWriteStream *)objc_msgSend(v53, "outputStream");
        CFWriteStreamSetDispatchQueue(v59, (dispatch_queue_t)qword_100354EE8);

        v60 = objc_msgSend(v53, "inputStream");
        if (v60)
        {
          v61 = v60;
          objc_msgSend(v60, "open");

          v62 = objc_msgSend(v53, "outputStream");
          if (v62)
          {
            v35 = v62;
            -[NSObject open](v62, "open");
            swift_release(v24);

LABEL_19:
            return;
          }
          goto LABEL_32;
        }
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        return;
      }
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v39 = v22;
  v40 = Logger.logObject.getter(v39);
  v42 = static os_log_type_t.error.getter(v40, v41);
  if (os_log_type_enabled(v40, v42))
  {
    v43 = (uint8_t *)swift_slowAlloc(12, -1);
    v69 = swift_slowAlloc(32, -1);
    v74[0] = v69;
    *(_DWORD *)v43 = 136315138;
    v44 = v43 + 12;
    v68 = v43 + 4;
    v45 = v43;
    v46 = objc_msgSend(v39, "identifier");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v47 = sub_1000C69C4((unint64_t *)&qword_100344CC8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v48 = dispatch thunk of CustomStringConvertible.description.getter(v6, v47);
    v50 = v49;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    v73 = sub_1001C56EC(v48, v50, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74, v68, v44);

    swift_bridgeObjectRelease(v50);
    _os_log_impl((void *)&_mh_execute_header, v40, v42, "Channel open for disconnected/unknown peripheral %s", v45, 0xCu);
    v51 = v69;
    swift_arrayDestroy(v69, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v51, -1, -1);
    swift_slowDealloc(v45, -1, -1);
  }
  else
  {

  }
  sub_1000B4DF8(v39, 1, 0);
}

void sub_1000C2450(void *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _UNKNOWN **v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t *v30;
  id v31;
  char v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  os_log_type_t v38;
  uint8_t *v39;
  os_log_type_t v40;
  uint8_t *v41;
  const char *v42;
  NSObject *v43;
  uint64_t v44;
  os_log_type_t v45;
  uint8_t *v46;
  const char *v47;
  uint64_t v48;
  id v49;
  NSObject *v50;
  NSObject *v51;
  uint64_t v52;
  os_log_type_t v53;
  uint8_t *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  os_log_type_t v62;
  uint8_t *v63;
  uint64_t v64;
  os_log_type_t v65;
  uint8_t *v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  id v72;
  uint64_t *v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  os_log_type_t v79;
  uint8_t *v80;
  int v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  void (*v91)(_QWORD, id);
  uint64_t v92;
  uint64_t v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  _QWORD *v98;
  uint64_t v99;
  _QWORD *v100;
  id v101;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  NSObject *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  os_log_type_t v112;
  uint8_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t *v123;
  NSObject *v124;
  uint64_t v125;
  os_log_type_t v126;
  uint8_t *v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  void (*v134)(uint64_t, unint64_t, uint64_t);
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  Class isa;
  Class v140;
  uint64_t v141;
  uint64_t *v142;
  id v143;
  char v144[24];
  uint64_t v145;
  char v146[8];
  uint64_t v147[3];
  uint64_t v148;
  uint64_t v149;
  char v150[24];

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v141 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchPredicate(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v15 = (uint64_t *)((char *)&v141 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v16 = qword_100354EE8;
  *v15 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v12 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v11);
  v17 = (id)v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)(v15);
  v18 = (*(uint64_t (**)(_QWORD *, uint64_t))(v12 + 8))(v15, v11);
  if ((v16 & 1) == 0)
  {
    __break(1u);
    return;
  }
  if (!*(_QWORD *)(v3 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager))
  {
    v43 = Logger.logObject.getter(v18);
    v45 = static os_log_type_t.error.getter(v43, v44);
    if (os_log_type_enabled(v43, v45))
    {
      v46 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v46 = 0;
      v47 = "Not running";
LABEL_19:
      _os_log_impl((void *)&_mh_execute_header, v43, v45, v47, v46, 2u);
      swift_slowDealloc(v46, -1, -1);
    }
LABEL_20:

    return;
  }
  v19 = (uint64_t *)(v3 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals);
  swift_beginAccess(v3 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals, v150, 0, 0);
  v20 = *v19;
  v21 = a1;
  v22 = swift_bridgeObjectRetain(v20);
  v23 = sub_1000D92CC(v22, v21);
  swift_bridgeObjectRelease(v20);

  if (!v23)
  {
    v43 = Logger.logObject.getter(v24);
    v45 = static os_log_type_t.error.getter(v43, v48);
    if (os_log_type_enabled(v43, v45))
    {
      v46 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v46 = 0;
      v47 = "Received stream event for disconnected/unknown peripheral";
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  if ((a2 & 8) != 0)
  {
    v49 = objc_msgSend(v21, "streamError");
    if (v49)
    {
      v50 = v49;
      v51 = Logger.logObject.getter(v50);
      v53 = static os_log_type_t.error.getter(v51, v52);
      if (os_log_type_enabled(v51, v53))
      {
        v54 = (uint8_t *)swift_slowAlloc(12, -1);
        v55 = (uint64_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v54 = 138412290;
        v50 = v50;
        v56 = _swift_stdlib_bridgeErrorToNSError(v50);
        v148 = v56;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, &v149, v54 + 4, v54 + 12);
        *v55 = v56;

        _os_log_impl((void *)&_mh_execute_header, v51, v53, "Stream error %@", v54, 0xCu);
        v57 = sub_100063D3C((uint64_t *)&unk_100346090);
        swift_arrayDestroy(v55, 1, v57);
        swift_slowDealloc(v55, -1, -1);
        swift_slowDealloc(v54, -1, -1);

      }
      else
      {

      }
    }
    else
    {
      v50 = Logger.logObject.getter(0);
      v65 = static os_log_type_t.error.getter(v50, v64);
      if (os_log_type_enabled(v50, v65))
      {
        v66 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v66 = 0;
        _os_log_impl((void *)&_mh_execute_header, v50, v65, "Stream unknown error", v66, 2u);
        swift_slowDealloc(v66, -1, -1);
      }
    }

    goto LABEL_31;
  }
  if ((a2 & 0x10) != 0)
  {
    v58 = Logger.logObject.getter(v24);
    v62 = static os_log_type_t.info.getter(v58, v59, v60, v61);
    if (os_log_type_enabled(v58, v62))
    {
      v63 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v63 = 0;
      _os_log_impl((void *)&_mh_execute_header, v58, v62, "Stream ended", v63, 2u);
      swift_slowDealloc(v63, -1, -1);
    }

LABEL_31:
    v67 = (id)v23[3];
    sub_1000B4DF8(v67, 1, 1);
    swift_release(v23);

    return;
  }
  v25 = &_ss018_bridgeAnyObjectToB0yypyXlSgF_ptr;
  if ((a2 & 1) != 0)
  {
    v26 = objc_opt_self(NSInputStream);
    v27 = swift_dynamicCastObjCClass(v21, v26);
    if (v27)
    {
      v28 = (void *)v23[16];
      if (v28)
      {
        v29 = v27;
        v143 = v21;
        v30 = (uint64_t *)objc_msgSend(v28, "inputStream");
        if (v30)
        {
          v142 = v30;
          v141 = sub_10006C25C(0, &qword_1003461E8, NSInputStream_ptr);
          v31 = v143;
          v32 = static NSObject.== infix(_:_:)(v29);

          if ((v32 & 1) != 0)
          {
            v34 = Logger.logObject.getter(v33);
            v38 = static os_log_type_t.info.getter(v34, v35, v36, v37);
            if (os_log_type_enabled(v34, v38))
            {
              v39 = (uint8_t *)swift_slowAlloc(2, -1);
              v40 = v38;
              v41 = v39;
              *(_WORD *)v39 = 0;
              v42 = "Input stream is now open";
LABEL_39:
              _os_log_impl((void *)&_mh_execute_header, v34, v40, v42, v41, 2u);
              swift_slowDealloc(v41, -1, -1);
              goto LABEL_40;
            }
            goto LABEL_40;
          }
        }

      }
    }
    v68 = objc_opt_self(NSOutputStream);
    v69 = swift_dynamicCastObjCClass(v21, v68);
    if (!v69 || (v70 = (void *)v23[16]) == 0)
    {
LABEL_42:
      v81 = *((unsigned __int8 *)v23 + 32);
      if (v81 == 7)
      {
        *((_BYTE *)v23 + 32) = 8;
        v82 = (char *)v23[2];
        v83 = swift_retain(v82);
        UUID.init()(v83);
        v84 = &v82[OBJC_IVAR____TtC10seserviced4Peer_connectionIdentifier];
        v143 = v82;
        swift_beginAccess(&v82[OBJC_IVAR____TtC10seserviced4Peer_connectionIdentifier], &v148, 33, 0);
        (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v84, v10, v6);
        swift_endAccess(&v148);
        v82[OBJC_IVAR____TtC10seserviced4Peer_isConnected] = 1;
        swift_beginAccess(v23 + 5, v144, 0, 0);
        v85 = v23[8];
        v86 = v23[9];
        v87 = sub_10006BA78(v23 + 5, v85);
        v142 = &v141;
        v88 = *(_QWORD *)(v85 - 8);
        __chkstk_darwin(v87, v87);
        v90 = (char *)&v141 - ((v89 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v88 + 16))(v90);
        v91 = (void (*)(_QWORD, id))(*(uint64_t (**)(uint64_t, uint64_t))(v86 + 88))(v85, v86);
        v93 = v92;
        (*(void (**)(char *, uint64_t))(v88 + 8))(v90, v85);
        v94 = v143;
        v91(0, v143);
        swift_release(v93);
        swift_release(v94);
        v25 = &_ss018_bridgeAnyObjectToB0yypyXlSgF_ptr;
      }
      else
      {
        v25 = &_ss018_bridgeAnyObjectToB0yypyXlSgF_ptr;
        if (v81 == 6)
          *((_BYTE *)v23 + 32) = 7;
      }
      goto LABEL_46;
    }
    v71 = v69;
    v142 = (uint64_t *)v21;
    v72 = objc_msgSend(v70, "outputStream");
    if (!v72
      || (v143 = v72,
          v141 = sub_10006C25C(0, &qword_1003461E0, NSOutputStream_ptr),
          v73 = v142,
          v74 = static NSObject.== infix(_:_:)(v71),
          v73,
          v73,
          v143,
          (v74 & 1) == 0))
    {
LABEL_41:

      goto LABEL_42;
    }
    v34 = Logger.logObject.getter(v75);
    v79 = static os_log_type_t.info.getter(v34, v76, v77, v78);
    if (os_log_type_enabled(v34, v79))
    {
      v80 = (uint8_t *)swift_slowAlloc(2, -1);
      v40 = v79;
      v41 = v80;
      *(_WORD *)v80 = 0;
      v42 = "Output stream is now open";
      goto LABEL_39;
    }
LABEL_40:

    goto LABEL_41;
  }
LABEL_46:
  if ((a2 & 4) != 0)
    sub_1000B61EC((uint64_t)v23);
  if ((a2 & 2) != 0)
  {
    v95 = objc_opt_self(v25[309]);
    v96 = swift_dynamicCastObjCClass(v21, v95);
    if (v96)
    {
      v97 = (void *)v96;
      v98 = v23 + 17;
      swift_beginAccess(v23 + 17, &v148, 0, 0);
      v99 = *(_QWORD *)(v23[17] + 16);
      swift_beginAccess(v23 + 17, v147, 33, 0);
      v100 = (_QWORD *)v23[17];
      v101 = v21;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v100);
      v23[17] = v100;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        v100 = sub_1001C4D30(0, v100[2], 0, v100);
      *v98 = v100;
      swift_bridgeObjectRetain(v100);
      v103 = (uint64_t)objc_msgSend(v97, "read:maxLength:", v100 + 4, v99);
      swift_endAccess(v147);
      swift_bridgeObjectRelease(v100);
      if (v103 < 1)
      {
        swift_release(v23);
      }
      else
      {
        v104 = sub_100156630((_BYTE *)(*v98 + 32), v103);
        v106 = v105;
        sub_100063C8C(v104, v105);
        v107 = sub_100063C8C(v104, v106);
        v108 = Logger.logObject.getter(v107);
        v112 = static os_log_type_t.info.getter(v108, v109, v110, v111);
        if (os_log_type_enabled(v108, v112))
        {
          v113 = (uint8_t *)swift_slowAlloc(12, -1);
          v142 = (uint64_t *)swift_slowAlloc(32, -1);
          v147[0] = (uint64_t)v142;
          *(_DWORD *)v113 = 136315138;
          v141 = (uint64_t)(v113 + 4);
          sub_1001BD2CC(v104, v106);
          v115 = v114;
          v145 = v114;
          v116 = sub_100063D3C((uint64_t *)&unk_100346060);
          v143 = v101;
          v117 = v116;
          v118 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
          v119 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v117, v118);
          v121 = v120;
          swift_bridgeObjectRelease(v115);
          v145 = sub_1001C56EC(v119, v121, v147);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, v146, v141, v113 + 12);
          v122 = v121;
          v101 = v143;
          swift_bridgeObjectRelease(v122);
          sub_100063CD0(v104, v106);
          sub_100063CD0(v104, v106);
          _os_log_impl((void *)&_mh_execute_header, v108, v112, ">>> Received %s", v113, 0xCu);
          v123 = v142;
          swift_arrayDestroy(v142, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v123, -1, -1);
          swift_slowDealloc(v113, -1, -1);

        }
        else
        {

          sub_100063CD0(v104, v106);
          sub_100063CD0(v104, v106);
        }
        swift_beginAccess(v23 + 5, v147, 0, 0);
        v128 = v23[8];
        v129 = v23[9];
        v130 = sub_10006BA78(v23 + 5, v128);
        v131 = *(_QWORD *)(v128 - 8);
        __chkstk_darwin(v130, v130);
        v133 = (char *)&v141 - ((v132 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v131 + 16))(v133);
        v134 = (void (*)(uint64_t, unint64_t, uint64_t))(*(uint64_t (**)(uint64_t, uint64_t))(v129 + 96))(v128, v129);
        v136 = v135;
        (*(void (**)(char *, uint64_t))(v131 + 8))(v133, v128);
        v137 = v23[2];
        swift_retain(v137);
        v134(v104, v106, v137);
        swift_release(v136);
        swift_release(v137);
        v138 = (void *)objc_opt_self(CertificationLogging);
        isa = Data._bridgeToObjectiveC()().super.isa;
        v140 = UUID._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v138, "bleLogMessageReceived:peerUUID:", isa, v140);

        swift_release(v23);
        sub_100063CD0(v104, v106);
      }

    }
    else
    {
      v124 = Logger.logObject.getter(0);
      v126 = static os_log_type_t.error.getter(v124, v125);
      if (os_log_type_enabled(v124, v126))
      {
        v127 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v127 = 0;
        _os_log_impl((void *)&_mh_execute_header, v124, v126, "Unexpected stream", v127, 2u);
        swift_slowDealloc(v127, -1, -1);
      }
      swift_release(v23);

    }
  }
  else
  {
    swift_release(v23);
  }
}

void sub_1000C317C(uint64_t a1)
{
  sub_1000C319C(a1, (uint64_t (*)(uint64_t *))sub_1000D9CDC, -8);
}

void sub_1000C318C(uint64_t a1)
{
  sub_1000C319C(a1, (uint64_t (*)(uint64_t *))sub_1000D9CDC, -9);
}

void sub_1000C319C(uint64_t a1, uint64_t (*a2)(uint64_t *), uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  void *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  _QWORD *v21;
  NSObject *v22;
  uint64_t v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  _BYTE v27[24];

  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = &v27[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v12 = qword_100354EE8;
  *v11 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v7);
  v13 = (id)v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v11);
  v14 = (*(uint64_t (**)(_QWORD *, uint64_t))(v8 + 8))(v11, v7);
  if ((v12 & 1) != 0)
  {
    v15 = *(void **)(v3 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager);
    if (v15)
    {
      v16 = (uint64_t *)(v3 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals);
      v17 = swift_beginAccess(v16, v27, 0, 0);
      v18 = *v16;
      __chkstk_darwin(v17, v19);
      *(&v26 - 2) = a1;
      swift_bridgeObjectRetain(v18);
      v20 = v15;
      v21 = sub_1001F2028(a2, (uint64_t)(&v26 - 4), v18);
      swift_bridgeObjectRelease(v18);
      if (v21)
      {
        objc_msgSend(v20, "setDesiredConnectionLatency:forPeripheral:", a3, v21[3]);

        swift_release(v21);
      }
      else
      {

      }
    }
    else
    {
      v22 = Logger.logObject.getter(v14);
      v24 = static os_log_type_t.error.getter(v22, v23);
      if (os_log_type_enabled(v22, v24))
      {
        v25 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v25 = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, v24, "Not running", v25, 2u);
        swift_slowDealloc(v25, -1, -1);
      }

    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t CBManagerState.description.getter(uint64_t a1)
{
  uint64_t result;

  result = 0x6E776F6E6B6E75;
  switch(a1)
  {
    case 1:
      result = 0x6E69747465736572;
      break;
    case 2:
      result = 0x726F707075736E75;
      break;
    case 3:
      result = 0x726F687475616E75;
      break;
    case 4:
      result = 0x4F64657265776F70;
      break;
    case 5:
      result = 0x4F64657265776F70;
      break;
    case 10:
      result = 0x7463697274736572;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000C34BC()
{
  uint64_t *v0;

  return CBManagerState.description.getter(*v0);
}

uint64_t sub_1000C34C4()
{
  return type metadata accessor for DSKBLE(0);
}

uint64_t type metadata accessor for DSKBLE(uint64_t a1)
{
  return sub_10007BBF0(a1, (uint64_t *)&unk_1003458D0, (uint64_t)&nominal type descriptor for DSKBLE);
}

uint64_t sub_1000C34E0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[16];

  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "\b";
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[6] = &unk_100289360;
    v4[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[8] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[9] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[10] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[11] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[12] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[13] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[14] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[15] = (char *)&value witness table for Builtin.Int64 + 64;
    return swift_updateClassMetadata2(a1, 256, 16, v4, a1 + 80);
  }
  return result;
}

uint64_t type metadata accessor for DSKBLE.BLEPeripheral()
{
  return objc_opt_self(_TtCC10seserviced6DSKBLEP33_EA8857E1086AA758697F5E2B2EBBAD7913BLEPeripheral);
}

uint64_t type metadata accessor for DSKBLE.BLEScanRequest()
{
  return objc_opt_self(_TtCC10seserviced6DSKBLE14BLEScanRequest);
}

uint64_t type metadata accessor for DSKBLE.BLEConnectionRequest()
{
  return objc_opt_self(_TtCC10seserviced6DSKBLE20BLEConnectionRequest);
}

id sub_1000C35EC(uint64_t a1)
{
  return sub_1000C3600(a1, type metadata accessor for DSKBLEPairing, &qword_100354BD0);
}

id sub_1000C3600(uint64_t a1, uint64_t (*a2)(_QWORD), _QWORD *a3)
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)a2(0)), "init");
  *a3 = result;
  return result;
}

id sub_1000C3638()
{
  void *v0;
  void *v1;
  objc_class *ObjectType;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  id v11;
  id v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  id v17;
  _QWORD aBlock[5];
  uint64_t v20;
  objc_super v21;

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType(v0);
  v3 = type metadata accessor for DispatchQoS.QoSClass(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = SESLoggingSubsystem;
  v9 = v1;
  v10 = String.init(cString:)(v8);
  Logger.init(subsystem:category:)(v10);
  *(_QWORD *)&v9[OBJC_IVAR____TtC10seserviced13DSKBLEPairing_pairingRequests] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v9[OBJC_IVAR____TtC10seserviced13DSKBLEPairing_unpairingRequests] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v9[OBJC_IVAR____TtC10seserviced13DSKBLEPairing_currentPairingRequest] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC10seserviced13DSKBLEPairing_currentUnpairingRequest] = 0;
  v9[OBJC_IVAR____TtC10seserviced13DSKBLEPairing_isCentralManagerPoweredOn] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC10seserviced13DSKBLEPairing_pairingAgent] = 0;
  v9[OBJC_IVAR____TtC10seserviced13DSKBLEPairing_state] = 0;

  v21.receiver = v9;
  v21.super_class = ObjectType;
  v11 = objc_msgSendSuper2(&v21, "init");
  sub_10006C25C(0, (unint64_t *)&qword_1003461A0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v7, enum case for DispatchQoS.QoSClass.default(_:), v3);
  v12 = v11;
  v13 = (void *)static OS_dispatch_queue.global(qos:)(v7);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  v14 = swift_allocObject(&unk_100308490, 24, 7);
  *(_QWORD *)(v14 + 16) = v12;
  aBlock[4] = sub_1000E4E28;
  v20 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10017BF6C;
  aBlock[3] = &unk_1003084A8;
  v15 = _Block_copy(aBlock);
  v16 = v20;
  v17 = v12;
  swift_release(v16);
  os_state_add_handler(v13, v15);

  _Block_release(v15);
  return v17;
}

uint64_t sub_1000C3870()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t inited;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char isUniquelyReferenced_nonNull_native;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  char v94;
  char v95;
  uint64_t v96;
  BOOL v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  Class isa;
  _DWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  __int128 v110;
  __int128 v111;
  unint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  _OWORD v121[2];
  __int128 v122;
  uint64_t v123;
  void *v124;
  char v125[128];
  char v126[32];

  v1 = sub_100063D3C(&qword_1003461A8);
  v114 = *(_QWORD *)(v1 - 8);
  v115 = v1;
  __chkstk_darwin(v1, v2);
  v113 = (uint64_t *)((char *)&v106 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v107 = v0;
  v4 = (uint64_t *)(v0 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_pairingRequests);
  swift_beginAccess(v4, v126, 0, 0);
  v5 = *v4;
  if ((unint64_t)*v4 >> 62)
    goto LABEL_39;
  v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(*v4);
  while (v6)
  {
    *(_QWORD *)&v121[0] = _swiftEmptyArrayStorage;
    result = sub_1001929E4(0, v6 & ~(v6 >> 63), 0);
    if (v6 < 0)
    {
      __break(1u);
LABEL_56:
      __break(1u);
      return result;
    }
    v116 = v5 & 0xC000000000000001;
    v112 = sub_100063D3C(&qword_1003461B0);
    v8 = 0;
    v117 = &v123;
    v111 = xmmword_1002888F0;
    v109 = (uint64_t *)v5;
    *(_QWORD *)&v110 = 0x80000001002BBB70;
    v108 = v6;
    while (1)
    {
      if (v116)
      {
        v9 = specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v5);
      }
      else
      {
        v9 = *(_QWORD *)(v5 + 8 * v8 + 32);
        swift_retain(v9);
      }
      v10 = sub_100063D3C((uint64_t *)&unk_100346040);
      inited = swift_initStackObject(v10, v125);
      *(_OWORD *)(inited + 16) = v111;
      *(_QWORD *)(inited + 32) = 0xD000000000000010;
      *(_QWORD *)(inited + 40) = v110;
      v12 = *(_QWORD *)(v9 + 32) + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
      v13 = type metadata accessor for UUID(0);
      *(_QWORD *)(inited + 72) = v13;
      v14 = sub_1000960AC((_QWORD *)(inited + 48));
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v14, v12, v13);
      *(_QWORD *)(inited + 80) = 1936154996;
      *(_QWORD *)(inited + 88) = 0xE400000000000000;
      v15 = *(_QWORD *)(v9 + 40);
      *(_QWORD *)(inited + 120) = sub_100063D3C((uint64_t *)&unk_100346060);
      *(_QWORD *)(inited + 96) = v15;
      v16 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(2);
      swift_bridgeObjectRetain(v15);
      swift_retain(v16);
      sub_1000E4E48(inited + 32, (uint64_t)&v122, &qword_1003461B8);
      v5 = *((_QWORD *)&v122 + 1);
      v17 = v122;
      v18 = sub_100187ED0(v122, *((uint64_t *)&v122 + 1));
      if ((v19 & 1) != 0)
        break;
      *(_QWORD *)((char *)v16 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v18;
      v20 = (_QWORD *)(v16[6] + 16 * v18);
      *v20 = v17;
      v20[1] = v5;
      sub_10006C2B4(v117, (_OWORD *)(v16[7] + 32 * v18));
      v21 = v16[2];
      v22 = __OFADD__(v21, 1);
      v23 = v21 + 1;
      if (v22)
        goto LABEL_36;
      v16[2] = v23;
      sub_1000E4E48(inited + 80, (uint64_t)&v122, &qword_1003461B8);
      v5 = *((_QWORD *)&v122 + 1);
      v24 = v122;
      v25 = sub_100187ED0(v122, *((uint64_t *)&v122 + 1));
      if ((v26 & 1) != 0)
        break;
      *(_QWORD *)((char *)v16 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v25;
      v27 = (_QWORD *)(v16[6] + 16 * v25);
      *v27 = v24;
      v27[1] = v5;
      sub_10006C2B4(v117, (_OWORD *)(v16[7] + 32 * v25));
      v28 = v16[2];
      v22 = __OFADD__(v28, 1);
      v29 = v28 + 1;
      if (v22)
        goto LABEL_36;
      v16[2] = v29;
      swift_release(v16);
      swift_bridgeObjectRelease(inited);
      swift_release(v9);
      v30 = *(_QWORD **)&v121[0];
      if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)&v121[0]) & 1) == 0)
      {
        sub_1001929E4(0, v30[2] + 1, 1);
        v30 = *(_QWORD **)&v121[0];
      }
      v31 = v108;
      v5 = (uint64_t)v109;
      v33 = v30[2];
      v32 = v30[3];
      if (v33 >= v32 >> 1)
      {
        sub_1001929E4(v32 > 1, v33 + 1, 1);
        v30 = *(_QWORD **)&v121[0];
      }
      ++v8;
      v30[2] = v33 + 1;
      v30[v33 + 4] = v16;
      if (v31 == v8)
      {
        swift_bridgeObjectRelease(v5);
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    if (v5 < 0)
      v64 = v5;
    else
      v64 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v6 = _CocoaArrayWrapper.endIndex.getter(v64);
  }
  swift_bridgeObjectRelease(v5);
  v30 = _swiftEmptyArrayStorage;
LABEL_20:
  v124 = (void *)sub_100063D3C(&qword_100346050);
  *(_QWORD *)&v122 = v30;
  sub_10006C2B4(&v122, v121);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  v120 = &_swiftEmptyDictionarySingleton;
  sub_10018DEC0(v121, 0x52676E6972696170, 0xEF73747365757165, isUniquelyReferenced_nonNull_native);
  v106 = (uint64_t)v120;
  swift_bridgeObjectRelease(0x8000000000000000);
  v35 = (uint64_t *)(v107 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_unpairingRequests);
  swift_beginAccess(v107 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_unpairingRequests, &v120, 0, 0);
  v36 = *v35;
  if (!((unint64_t)*v35 >> 62))
  {
    v37 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(*v35);
    if (!v37)
      goto LABEL_47;
    goto LABEL_22;
  }
  if (v36 < 0)
    v65 = *v35;
  else
    v65 = v36 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v36);
  v37 = _CocoaArrayWrapper.endIndex.getter(v65);
  if (v37)
  {
LABEL_22:
    *(_QWORD *)&v122 = _swiftEmptyArrayStorage;
    result = sub_100192A10(0, v37 & ~(v37 >> 63), 0);
    if (v37 < 0)
      goto LABEL_56;
    v112 = v36 & 0xC000000000000001;
    *(_QWORD *)&v111 = sub_100063D3C(&qword_1003461C0);
    v38 = 0;
    v110 = xmmword_1002888E0;
    v108 = v37;
    v109 = (uint64_t *)v36;
    while (1)
    {
      v116 = v38;
      if (v112)
      {
        v39 = (uint64_t *)specialized _ArrayBuffer._getElementSlowPath(_:)(v38, v36);
      }
      else
      {
        v39 = *(uint64_t **)(v36 + 8 * v38 + 32);
        swift_retain(v39);
      }
      v40 = sub_100063D3C(&qword_1003461C8);
      v41 = *(unsigned __int8 *)(v114 + 80);
      v42 = (v41 + 32) & ~v41;
      v43 = swift_allocObject(v40, v42 + *(_QWORD *)(v114 + 72), v41 | 7);
      *(_OWORD *)(v43 + 16) = v110;
      v44 = (char *)(v43 + v42);
      v45 = v115;
      v46 = v43 + v42 + *(int *)(v115 + 48);
      strcpy(v44, "peerIdentifier");
      v44[15] = -18;
      v117 = v39;
      v47 = (char *)v39 + OBJC_IVAR____TtCC10seserviced13DSKBLEPairing19BLEUnpairingRequest_peerIdentifier;
      v48 = type metadata accessor for UUID(0);
      v49 = *(_QWORD *)(v48 - 8);
      (*(void (**)(uint64_t, char *, uint64_t))(v49 + 16))(v46, v47, v48);
      v50 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(1);
      v51 = *(int *)(v45 + 48);
      swift_retain(v50);
      v52 = (uint64_t)v44;
      v5 = (uint64_t)v113;
      sub_1000E4E48(v52, (uint64_t)v113, &qword_1003461A8);
      v53 = *(_QWORD *)v5;
      v54 = *(_QWORD *)(v5 + 8);
      v55 = sub_100187ED0(*(_QWORD *)v5, v54);
      if ((v56 & 1) != 0)
        goto LABEL_37;
      v50[(v55 >> 6) + 8] |= 1 << v55;
      v57 = (uint64_t *)(v50[6] + 16 * v55);
      *v57 = v53;
      v57[1] = v54;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v49 + 32))(v50[7] + *(_QWORD *)(v49 + 72) * v55, v5 + v51, v48);
      v58 = v50[2];
      v22 = __OFADD__(v58, 1);
      v59 = v58 + 1;
      if (v22)
        goto LABEL_38;
      v50[2] = v59;
      swift_release(v117);
      swift_release(v50);
      swift_bridgeObjectRelease(v43);
      v60 = (_QWORD *)v122;
      if ((swift_isUniquelyReferenced_nonNull_native(v122) & 1) == 0)
      {
        sub_100192A10(0, v60[2] + 1, 1);
        v60 = (_QWORD *)v122;
      }
      v61 = v116;
      v63 = v60[2];
      v62 = v60[3];
      if (v63 >= v62 >> 1)
      {
        sub_100192A10(v62 > 1, v63 + 1, 1);
        v60 = (_QWORD *)v122;
      }
      v38 = v61 + 1;
      v60[2] = v63 + 1;
      v60[v63 + 4] = v50;
      v36 = (uint64_t)v109;
      if (v108 == v38)
      {
        swift_bridgeObjectRelease(v109);
        goto LABEL_48;
      }
    }
  }
LABEL_47:
  swift_bridgeObjectRelease(v36);
  v60 = _swiftEmptyArrayStorage;
LABEL_48:
  v66 = v106;
  v124 = (void *)sub_100063D3C((uint64_t *)&unk_1003461D0);
  *(_QWORD *)&v122 = v60;
  sub_10006C2B4(&v122, v121);
  v67 = swift_isUniquelyReferenced_nonNull_native(v66);
  v119 = v66;
  sub_10018DEC0(v121, 0xD000000000000011, 0x80000001002BB910, v67);
  v68 = v119;
  swift_bridgeObjectRelease(0x8000000000000000);
  v69 = *(_QWORD *)(v107 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_currentPairingRequest);
  if (v69)
  {
    v70 = sub_100063D3C((uint64_t *)&unk_100346040);
    v71 = swift_initStackObject(v70, &v118);
    *(_OWORD *)(v71 + 16) = xmmword_1002888F0;
    *(_QWORD *)(v71 + 32) = 0xD000000000000010;
    *(_QWORD *)(v71 + 40) = 0x80000001002BBB70;
    v72 = *(_QWORD *)(v69 + 32) + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
    v73 = type metadata accessor for UUID(0);
    *(_QWORD *)(v71 + 72) = v73;
    v74 = sub_1000960AC((_QWORD *)(v71 + 48));
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 16))(v74, v72, v73);
    *(_QWORD *)(v71 + 80) = 1936154996;
    *(_QWORD *)(v71 + 88) = 0xE400000000000000;
    v75 = *(_QWORD *)(v69 + 40);
    *(_QWORD *)(v71 + 120) = sub_100063D3C((uint64_t *)&unk_100346060);
    *(_QWORD *)(v71 + 96) = v75;
    swift_retain(v69);
    swift_bridgeObjectRetain(v75);
    v76 = sub_10017C218(v71);
    v124 = (void *)sub_100063D3C(&qword_100345388);
    *(_QWORD *)&v122 = v76;
    sub_10006C2B4(&v122, v121);
    v77 = swift_isUniquelyReferenced_nonNull_native(v68);
    v119 = v68;
    sub_10018DEC0(v121, 0xD000000000000015, 0x80000001002BB930, v77);
    v78 = v119;
    swift_release(v69);
  }
  else
  {
    v124 = &type metadata for String;
    *(_QWORD *)&v122 = 1701736302;
    *((_QWORD *)&v122 + 1) = 0xE400000000000000;
    sub_10006C2B4(&v122, v121);
    v79 = swift_isUniquelyReferenced_nonNull_native(v68);
    v119 = v68;
    sub_10018DEC0(v121, 0xD000000000000015, 0x80000001002BB930, v79);
    v78 = v119;
  }
  swift_bridgeObjectRelease(0x8000000000000000);
  v80 = *(_QWORD *)(v107 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_currentUnpairingRequest);
  if (v80)
  {
    v81 = sub_100063D3C(&qword_1003461C8);
    v82 = *(unsigned __int8 *)(v114 + 80);
    v83 = (v82 + 32) & ~v82;
    v84 = swift_allocObject(v81, v83 + *(_QWORD *)(v114 + 72), v82 | 7);
    *(_OWORD *)(v84 + 16) = xmmword_1002888E0;
    v85 = (char *)(v84 + v83);
    v86 = v84 + v83 + *(int *)(v115 + 48);
    strcpy(v85, "peerIdentifier");
    v85[15] = -18;
    v87 = v80 + OBJC_IVAR____TtCC10seserviced13DSKBLEPairing19BLEUnpairingRequest_peerIdentifier;
    v88 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v88 - 8) + 16))(v86, v87, v88);
    swift_retain(v80);
    v89 = sub_10017C608(v84);
    v124 = (void *)sub_100063D3C((uint64_t *)&unk_100348B70);
    *(_QWORD *)&v122 = v89;
    sub_10006C2B4(&v122, v121);
    v90 = swift_isUniquelyReferenced_nonNull_native(v78);
    v119 = v78;
    sub_10018DEC0(v121, 0xD000000000000017, 0x80000001002BB950, v90);
    v91 = v119;
    swift_release(v80);
  }
  else
  {
    v124 = &type metadata for String;
    *(_QWORD *)&v122 = 1701736302;
    *((_QWORD *)&v122 + 1) = 0xE400000000000000;
    sub_10006C2B4(&v122, v121);
    v92 = swift_isUniquelyReferenced_nonNull_native(v78);
    v119 = v78;
    sub_10018DEC0(v121, 0xD000000000000017, 0x80000001002BB950, v92);
    v91 = v119;
  }
  swift_bridgeObjectRelease(0x8000000000000000);
  v93 = v107;
  v94 = *(_BYTE *)(v107 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_isCentralManagerPoweredOn);
  v124 = &type metadata for Bool;
  LOBYTE(v122) = v94;
  sub_10006C2B4(&v122, v121);
  v95 = swift_isUniquelyReferenced_nonNull_native(v91);
  v119 = v91;
  sub_10018DEC0(v121, 0xD000000000000019, 0x80000001002BB970, v95);
  v96 = v119;
  swift_bridgeObjectRelease(0x8000000000000000);
  v97 = *(_QWORD *)(v93 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_pairingAgent) != 0;
  v124 = &type metadata for Bool;
  LOBYTE(v122) = v97;
  sub_10006C2B4(&v122, v121);
  v98 = swift_isUniquelyReferenced_nonNull_native(v96);
  v119 = v96;
  sub_10018DEC0(v121, 0x41676E6972696170, 0xEC000000746E6567, v98);
  v99 = v119;
  swift_bridgeObjectRelease(0x8000000000000000);
  v124 = (void *)sub_100063D3C(&qword_100345388);
  *(_QWORD *)&v122 = v99;
  sub_10006C2B4(&v122, v121);
  v100 = swift_bridgeObjectRetain(v99);
  v101 = swift_isUniquelyReferenced_nonNull_native(v100);
  v119 = v99;
  sub_10018DEC0(v121, 0x6574617473, 0xE500000000000000, v101);
  v102 = v119;
  swift_bridgeObjectRelease(0x8000000000000000);
  v103 = sub_10017D088(v102);
  swift_bridgeObjectRelease(v102);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v103);
  v105 = sub_100015734((uint64_t)"dskblepairing.state", (uint64_t)isa);

  return (uint64_t)v105;
}

void sub_1000C450C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  os_log_type_t v30;
  uint8_t *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  Class isa;
  id v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  id v51;
  void *v52;
  uint64_t v53;
  void *v54;
  char *v55;
  id v56;
  uint64_t v57;
  NSObject *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  os_log_type_t v62;
  uint64_t v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint8_t *v70;
  uint64_t v71;
  NSObject *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  os_log_type_t v76;
  uint8_t *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;
  NSObject *v83;
  os_log_type_t v84;
  uint8_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  id v97;
  void *v98;
  char *v99;
  uint64_t v100;
  id v101;
  unint64_t v102;
  uint64_t v103;
  id v104;
  void *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  NSObject *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  os_log_type_t v113;
  uint8_t *v114;
  uint8_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint8_t *v121;
  uint64_t v122;
  uint64_t v123;
  NSObject *v124;
  os_log_type_t v125;
  uint8_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  char *v132;
  NSObject *v133;
  os_log_type_t v134;
  uint8_t *v135;
  _QWORD *v136;
  void (*v137)(uint64_t, uint64_t);
  unint64_t v138;
  uint64_t v139;
  _BYTE *v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  void (*v144)(uint64_t, uint64_t);
  unint64_t v145;
  uint64_t v146;
  _BYTE *v147;
  uint64_t v148;
  NSObject *v149;
  os_log_type_t v150;
  uint8_t *v151;
  unint64_t v152;
  uint64_t v153;
  _BYTE *v154;
  uint64_t v155;
  uint64_t v156;
  void (*v157)(uint64_t, unint64_t, uint64_t, unint64_t, uint64_t);
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint8_t *v176;
  uint8_t *v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint8_t *v181;
  char *v182;
  char v183[24];
  char v184[24];
  uint64_t v185;
  char *v186;
  uint64_t v187;
  _BYTE v188[24];
  uint64_t v189[3];
  uint64_t v190;
  _BYTE v191[24];

  v1 = type metadata accessor for DispatchPredicate(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin();
  v4 = (uint8_t **)((char *)&v176 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v5 = qword_100354EE8;
  *v4 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  v6 = (id)v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)(v4);
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) != 0)
  {
    if (qword_1003445A0 == -1)
      goto LABEL_5;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1003445A0, sub_1000B26B0);
LABEL_5:
  v7 = *(void **)(qword_100354BC8 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager);
  if (!v7)
    return;
  v8 = v0;
  v9 = v7;
  v10 = Logger.logObject.getter(v9);
  v14 = static os_log_type_t.info.getter(v10, v11, v12, v13);
  if (os_log_type_enabled(v10, v14))
  {
    v15 = swift_slowAlloc(22, -1);
    *(_DWORD *)v15 = 134218240;
    v16 = (uint64_t *)((char *)v8 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_pairingRequests);
    swift_beginAccess((char *)v8 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_pairingRequests, v184, 0, 0);
    v17 = *v16;
    if ((unint64_t)v17 >> 62)
    {
      if (v17 < 0)
        v87 = v17;
      else
        v87 = v17 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v17);
      v18 = _CocoaArrayWrapper.endIndex.getter(v87);
      swift_bridgeObjectRelease(v17);
    }
    else
    {
      v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v190 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v190, v191, v15 + 4, v15 + 12);
    *(_WORD *)(v15 + 12) = 2048;
    v19 = (uint64_t *)((char *)v8 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_unpairingRequests);
    swift_beginAccess((char *)v8 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_unpairingRequests, v183, 0, 0);
    v20 = *v19;
    if ((unint64_t)v20 >> 62)
    {
      if (v20 < 0)
        v88 = v20;
      else
        v88 = v20 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v20);
      v21 = _CocoaArrayWrapper.endIndex.getter(v88);

      swift_bridgeObjectRelease(v20);
    }
    else
    {
      v21 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);

    }
    v190 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v190, v191, v15 + 14, v15 + 22);

    _os_log_impl((void *)&_mh_execute_header, v10, v14, "Trying to process a pending queued request (pairing %ld unpairing %ld)", (uint8_t *)v15, 0x16u);
    swift_slowDealloc(v15, -1, -1);
  }
  else
  {

  }
  if (*((_BYTE *)v8 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_isCentralManagerPoweredOn) != 1)
  {
    v26 = Logger.logObject.getter(v22);
    v30 = static os_log_type_t.info.getter(v26, v33, v34, v35);
    if (os_log_type_enabled(v26, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v31 = 0;
      v32 = "Central manager is not running";
      goto LABEL_21;
    }
LABEL_22:

LABEL_23:
    return;
  }
  v23 = OBJC_IVAR____TtC10seserviced13DSKBLEPairing_state;
  if (*((_BYTE *)v8 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_state)
    || (v24 = OBJC_IVAR____TtC10seserviced13DSKBLEPairing_currentPairingRequest,
        *(_QWORD *)((char *)v8 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_currentPairingRequest))
    || (v25 = (char *)OBJC_IVAR____TtC10seserviced13DSKBLEPairing_currentUnpairingRequest,
        *(_QWORD *)((char *)v8 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_currentUnpairingRequest)))
  {
    v26 = Logger.logObject.getter(v22);
    v30 = static os_log_type_t.info.getter(v26, v27, v28, v29);
    if (os_log_type_enabled(v26, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v31 = 0;
      v32 = "A request is in progress";
LABEL_21:
      _os_log_impl((void *)&_mh_execute_header, v26, v30, v32, v31, 2u);
      swift_slowDealloc(v31, -1, -1);
      goto LABEL_22;
    }
    goto LABEL_22;
  }
  v36 = (uint64_t *)((char *)v8 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_unpairingRequests);
  swift_beginAccess((char *)v8 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_unpairingRequests, &v190, 0, 0);
  v37 = *v36;
  if (!((unint64_t)*v36 >> 62))
  {
    if (*(_QWORD *)((v37 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_27;
LABEL_63:
    v36 = (uint64_t *)((char *)v8 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_pairingRequests);
    v91 = swift_beginAccess((char *)v8 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_pairingRequests, v189, 0, 0);
    v38 = *v36;
    if (!((unint64_t)*v36 >> 62))
    {
      if (!*(_QWORD *)((v38 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_117:
        v26 = Logger.logObject.getter(v91);
        v30 = static os_log_type_t.info.getter(v26, v168, v169, v170);
        if (!os_log_type_enabled(v26, v30))
          goto LABEL_22;
        v31 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v31 = 0;
        v32 = "No requests pending";
        goto LABEL_21;
      }
LABEL_65:
      swift_beginAccess(v36, &v187, 33, 0);
      v92 = *v36;
      if ((unint64_t)*v36 >> 62)
      {
        if (v92 < 0)
          v171 = *v36;
        else
          v171 = v92 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(*v36);
        v172 = _CocoaArrayWrapper.endIndex.getter(v171);
        swift_bridgeObjectRelease(v92);
        if (v172)
        {
LABEL_67:
          v92 = *v36;
          if (!((unint64_t)*v36 >> 62))
          {
            v39 = *(_QWORD **)((v92 & 0xFFFFFFFFFFFFF8) + 0x10);
            if (v39)
              goto LABEL_69;
            goto LABEL_128;
          }
LABEL_124:
          if (v92 < 0)
            v173 = v92;
          else
            v173 = v92 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v92);
          v39 = (_QWORD *)_CocoaArrayWrapper.endIndex.getter(v173);
          swift_bridgeObjectRelease(v92);
          if (v39)
          {
LABEL_69:
            if ((v92 & 0xC000000000000001) == 0)
            {
              if (!*(_QWORD *)((v92 & 0xFFFFFFFFFFFFF8) + 0x10))
              {
                __break(1u);
                goto LABEL_131;
              }
              v39 = *(_QWORD **)(v92 + 32);
              swift_retain(v39);
LABEL_72:
              v92 = *v36;
              if (!((unint64_t)*v36 >> 62))
              {
                if (*(_QWORD *)((v92 & 0xFFFFFFFFFFFFF8) + 0x10))
                  goto LABEL_74;
                goto LABEL_135;
              }
LABEL_131:
              if (v92 < 0)
                v174 = v92;
              else
                v174 = v92 & 0xFFFFFFFFFFFFFF8;
              swift_bridgeObjectRetain(v92);
              v175 = _CocoaArrayWrapper.endIndex.getter(v174);
              swift_bridgeObjectRelease(v92);
              if (v175)
              {
LABEL_74:
                sub_1001F6288(0, 1);
                swift_endAccess(&v187);
                v93 = (uint64_t *)(qword_100354BC8 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals);
                swift_beginAccess(qword_100354BC8 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals, &v187, 0, 0);
                v94 = *v93;
                swift_retain(v39);
                v95 = swift_bridgeObjectRetain(v94);
                v96 = sub_1000D8690(v95, (uint64_t)v39);
                swift_bridgeObjectRelease(v94);
                swift_release(v39);
                if (!v96)
                {
                  v123 = swift_retain_n(v39, 2);
                  v124 = Logger.logObject.getter(v123);
                  v125 = static os_log_type_t.error.getter();
                  if (os_log_type_enabled(v124, v125))
                  {
                    v126 = (uint8_t *)swift_slowAlloc(12, -1);
                    v182 = (char *)swift_slowAlloc(32, -1);
                    v186 = v182;
                    *(_DWORD *)v126 = 136315138;
                    v181 = v126 + 4;
                    v127 = v39[4];
                    v128 = swift_retain(v127);
                    v129 = UUID.uuidString.getter(v128);
                    v131 = v130;
                    swift_release(v127);
                    v185 = sub_1001C56EC(v129, v131, (uint64_t *)&v186);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v185, &v186, v181, v126 + 12);
                    swift_release_n(v39, 2);
                    swift_bridgeObjectRelease(v131);
                    _os_log_impl((void *)&_mh_execute_header, v124, v125, "Peripheral not connected %s", v126, 0xCu);
                    v132 = v182;
                    swift_arrayDestroy(v182, 1, (char *)&type metadata for Any + 8);
                    swift_slowDealloc(v132, -1, -1);
                    swift_slowDealloc(v126, -1, -1);
                  }
                  else
                  {
                    swift_release_n(v39, 2);
                  }

                  v144 = (void (*)(uint64_t, uint64_t))v39[8];
                  v143 = v39[9];
                  v145 = sub_1000AAC04();
                  v146 = swift_allocError(&type metadata for DSKBLE.BLEError, v145, 0, 0);
                  *v147 = 4;
                  v148 = v39[4];
                  swift_retain(v143);
                  swift_retain(v148);
                  v144(v146, v148);
                  swift_release(v148);
                  swift_errorRelease(v146);
                  v86 = swift_release(v143);
                  goto LABEL_87;
                }
                v97 = objc_msgSend(v9, "sharedPairingAgent");
                if (!v97)
                {
                  v133 = Logger.logObject.getter(0);
                  v134 = static os_log_type_t.error.getter();
                  if (os_log_type_enabled(v133, v134))
                  {
                    v135 = (uint8_t *)swift_slowAlloc(2, -1);
                    *(_WORD *)v135 = 0;
                    _os_log_impl((void *)&_mh_execute_header, v133, v134, "Failed to retrieve shared pairing agent", v135, 2u);
                    swift_slowDealloc(v135, -1, -1);
                  }

                  v137 = (void (*)(uint64_t, uint64_t))v39[8];
                  v136 = (_QWORD *)v39[9];
                  v138 = sub_1000AAC04();
                  v139 = swift_allocError(&type metadata for DSKBLE.BLEError, v138, 0, 0);
                  *v140 = 2;
                  v141 = v39[4];
                  swift_retain(v136);
                  swift_retain(v141);
                  v137(v139, v141);
                  swift_release(v141);
                  swift_errorRelease(v139);

                  swift_release(v39);
                  swift_release(v96);
                  v142 = v136;
                  goto LABEL_88;
                }
                v98 = *(void **)((char *)v8 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_pairingAgent);
                *(_QWORD *)((char *)v8 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_pairingAgent) = v97;
                v99 = (char *)v97;

                objc_msgSend(v99, "setDelegate:", v8);
                v100 = v96[3];
                v182 = v99;
                v101 = objc_msgSend(v99, "setOOBPairingEnabled:forPeer:", 1, v100);
                v102 = v96[14];
                if (v102 >> 60 != 15)
                {
                  v103 = v96[3];
                  v181 = (uint8_t *)v96[13];
                  sub_100063C8C((uint64_t)v181, v102);
                  v104 = objc_msgSend(v182, "retrieveOOBDataForPeer:", v103);
                  if (v104)
                  {
                    v105 = v104;
                    v180 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
                    v179 = v106;

                    v107 = *(_QWORD *)((char *)v8 + v24);
                    *(_QWORD *)((char *)v8 + v24) = v39;
                    swift_retain(v39);
                    swift_release(v107);
                    *((_BYTE *)v8 + v23) = 1;
                    v108 = swift_retain_n(v39, 2);
                    v109 = Logger.logObject.getter(v108);
                    v113 = static os_log_type_t.info.getter(v109, v110, v111, v112);
                    if (os_log_type_enabled(v109, v113))
                    {
                      v114 = (uint8_t *)swift_slowAlloc(12, -1);
                      v178 = swift_slowAlloc(32, -1);
                      v186 = (char *)v178;
                      v177 = v114;
                      *(_DWORD *)v114 = 136315138;
                      v115 = v114 + 12;
                      v176 = v114 + 4;
                      v116 = v39[4];
                      v117 = swift_retain(v116);
                      v118 = UUID.uuidString.getter(v117);
                      v120 = v119;
                      swift_release(v116);
                      v185 = sub_1001C56EC(v118, v120, (uint64_t *)&v186);
                      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v185, &v186, v176, v115);
                      swift_release_n(v39, 2);
                      swift_bridgeObjectRelease(v120);
                      v121 = v177;
                      _os_log_impl((void *)&_mh_execute_header, v109, v113, "Pairing started for %s", v177, 0xCu);
                      v122 = v178;
                      swift_arrayDestroy(v178, 1, (char *)&type metadata for Any + 8);
                      swift_slowDealloc(v122, -1, -1);
                      swift_slowDealloc(v121, -1, -1);
                    }
                    else
                    {
                      swift_release_n(v39, 2);
                    }

                    v155 = (uint64_t)v181;
                    v157 = (void (*)(uint64_t, unint64_t, uint64_t, unint64_t, uint64_t))v39[6];
                    v156 = v39[7];
                    v158 = v39[4];
                    swift_retain(v156);
                    swift_retain(v158);
                    v159 = v180;
                    v160 = v179;
                    v157(v155, v102, v180, v179, v158);
                    swift_release(v156);
                    swift_release(v158);
                    sub_100063CD0(v159, v160);
                    sub_10006B9B4(v155, v102);
LABEL_95:

                    swift_release(v39);
                    swift_release(v96);

                    return;
                  }
                  v101 = (id)sub_10006B9B4((uint64_t)v181, v102);
                }
                v149 = Logger.logObject.getter(v101);
                v150 = static os_log_type_t.error.getter();
                if (os_log_type_enabled(v149, v150))
                {
                  v151 = (uint8_t *)swift_slowAlloc(2, -1);
                  *(_WORD *)v151 = 0;
                  _os_log_impl((void *)&_mh_execute_header, v149, v150, "Failed to retrieve OOB data", v151, 2u);
                  swift_slowDealloc(v151, -1, -1);
                }

                v152 = sub_1000AAC04();
                v153 = swift_allocError(&type metadata for DSKBLE.BLEError, v152, 0, 0);
                *v154 = 2;
                sub_1000C57FC(v153);
                swift_errorRelease(v153);
                goto LABEL_95;
              }
LABEL_135:
              __break(1u);
              return;
            }
LABEL_129:
            v39 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v92);
            goto LABEL_72;
          }
LABEL_128:
          __break(1u);
          goto LABEL_129;
        }
      }
      else if (*(_QWORD *)((v92 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_67;
      }
      __break(1u);
      goto LABEL_124;
    }
LABEL_113:
    if (v38 < 0)
      v166 = v38;
    else
      v166 = v38 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v38);
    v167 = _CocoaArrayWrapper.endIndex.getter(v166);
    v91 = swift_bridgeObjectRelease(v38);
    if (!v167)
      goto LABEL_117;
    goto LABEL_65;
  }
  if (v37 < 0)
    v89 = *v36;
  else
    v89 = v37 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v36);
  v90 = _CocoaArrayWrapper.endIndex.getter(v89);
  swift_bridgeObjectRelease(v37);
  if (!v90)
    goto LABEL_63;
LABEL_27:
  swift_beginAccess(v36, v189, 33, 0);
  v38 = *v36;
  if (!((unint64_t)*v36 >> 62))
  {
    if (*(_QWORD *)((v38 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_29;
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }
  if (v38 < 0)
    v161 = *v36;
  else
    v161 = v38 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v36);
  v162 = _CocoaArrayWrapper.endIndex.getter(v161);
  swift_bridgeObjectRelease(v38);
  if (!v162)
    goto LABEL_100;
LABEL_29:
  v38 = *v36;
  if (!((unint64_t)*v36 >> 62))
  {
    v39 = *(_QWORD **)((v38 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v39)
      goto LABEL_31;
LABEL_105:
    __break(1u);
    goto LABEL_106;
  }
LABEL_101:
  if (v38 < 0)
    v163 = v38;
  else
    v163 = v38 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v38);
  v39 = (_QWORD *)_CocoaArrayWrapper.endIndex.getter(v163);
  swift_bridgeObjectRelease(v38);
  if (!v39)
    goto LABEL_105;
LABEL_31:
  if ((v38 & 0xC000000000000001) != 0)
  {
LABEL_106:
    v39 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v38);
    goto LABEL_34;
  }
  if (!*(_QWORD *)((v38 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_108;
  }
  v39 = *(_QWORD **)(v38 + 32);
  swift_retain(v39);
LABEL_34:
  v182 = v25;
  v38 = *v36;
  if (!((unint64_t)*v36 >> 62))
  {
    if (*(_QWORD *)((v38 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_36;
    goto LABEL_112;
  }
LABEL_108:
  if (v38 < 0)
    v164 = v38;
  else
    v164 = v38 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v38);
  v165 = _CocoaArrayWrapper.endIndex.getter(v164);
  swift_bridgeObjectRelease(v38);
  if (!v165)
  {
LABEL_112:
    __break(1u);
    goto LABEL_113;
  }
LABEL_36:
  sub_1001F627C(0, 1);
  swift_endAccess(v189);
  v40 = sub_100063D3C(&qword_100345398);
  v41 = type metadata accessor for UUID(0);
  v42 = *(_QWORD *)(v41 - 8);
  v43 = *(unsigned __int8 *)(v42 + 80);
  v44 = (v43 + 32) & ~v43;
  v45 = swift_allocObject(v40, v44 + *(_QWORD *)(v42 + 72), v43 | 7);
  *(_OWORD *)(v45 + 16) = xmmword_1002888E0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 16))(v45 + v44, (uint64_t)v39 + OBJC_IVAR____TtCC10seserviced13DSKBLEPairing19BLEUnpairingRequest_peerIdentifier, v41);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v45);
  v47 = objc_msgSend(v9, "retrievePeripheralsWithIdentifiers:", isa);

  v48 = sub_10006C25C(0, &qword_1003460B0, CBPeripheral_ptr);
  v49 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v47, v48);

  swift_retain(v39);
  v50 = sub_1000D7000(v49, (uint64_t)v39);
  swift_bridgeObjectRelease(v49);
  swift_release(v39);
  if (!v50)
  {
    v71 = swift_retain_n(v39, 2);
    v72 = Logger.logObject.getter(v71);
    v76 = static os_log_type_t.info.getter(v72, v73, v74, v75);
    if (os_log_type_enabled(v72, v76))
    {
      v77 = (uint8_t *)swift_slowAlloc(12, -1);
      v182 = (char *)swift_slowAlloc(32, -1);
      v189[0] = (uint64_t)v182;
      *(_DWORD *)v77 = 136315138;
      v181 = v77 + 4;
      v78 = sub_1000C69C4((unint64_t *)&qword_100344CC8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v79 = dispatch thunk of CustomStringConvertible.description.getter(v41, v78);
      v81 = v80;
      v187 = sub_1001C56EC(v79, v80, v189);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, v188, v181, v77 + 12);
      swift_release_n(v39, 2);
      swift_bridgeObjectRelease(v81);
      _os_log_impl((void *)&_mh_execute_header, v72, v76, "No paired peripheral found for %s", v77, 0xCu);
      v82 = v182;
      swift_arrayDestroy(v182, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v82, -1, -1);
      swift_slowDealloc(v77, -1, -1);
    }
    else
    {
      swift_release_n(v39, 2);
    }

LABEL_87:
    sub_1000C450C(v86);

    v142 = v39;
LABEL_88:
    swift_release(v142);
    return;
  }
  v51 = objc_msgSend(v9, "sharedPairingAgent");
  if (!v51)
  {
    v83 = Logger.logObject.getter(0);
    v84 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v83, v84))
    {
      v85 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v85 = 0;
      _os_log_impl((void *)&_mh_execute_header, v83, v84, "Failed to retrieve shared pairing agent", v85, 2u);
      swift_slowDealloc(v85, -1, -1);
    }
    swift_release(v39);

    goto LABEL_23;
  }
  v52 = v51;
  v53 = *(_QWORD *)&v182[(_QWORD)v8];
  *(_QWORD *)&v182[(_QWORD)v8] = v39;
  swift_retain(v39);
  swift_release(v53);
  *((_BYTE *)v8 + v23) = 3;
  v54 = *(void **)((char *)v8 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_pairingAgent);
  *(_QWORD *)((char *)v8 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_pairingAgent) = v52;
  v55 = v52;

  v56 = v55;
  objc_msgSend(v55, "setDelegate:", v8);
  v57 = swift_retain_n(v39, 2);
  v58 = Logger.logObject.getter(v57);
  v62 = static os_log_type_t.info.getter(v58, v59, v60, v61);
  if (os_log_type_enabled(v58, v62))
  {
    v63 = swift_slowAlloc(12, -1);
    v182 = v55;
    v64 = (uint8_t *)v63;
    v181 = (uint8_t *)swift_slowAlloc(32, -1);
    v189[0] = (uint64_t)v181;
    *(_DWORD *)v64 = 136315138;
    v180 = (uint64_t)(v64 + 4);
    v65 = sub_1000C69C4((unint64_t *)&qword_100344CC8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v66 = dispatch thunk of CustomStringConvertible.description.getter(v41, v65);
    v68 = v67;
    v187 = sub_1001C56EC(v66, v67, v189);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, v188, v180, v64 + 12);
    swift_release_n(v39, 2);
    swift_bridgeObjectRelease(v68);
    _os_log_impl((void *)&_mh_execute_header, v58, v62, "Requesting unpairing for peripheral %s", v64, 0xCu);
    v69 = (uint64_t)v181;
    swift_arrayDestroy(v181, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v69, -1, -1);
    v70 = v64;
    v56 = v182;
    swift_slowDealloc(v70, -1, -1);
  }
  else
  {
    swift_release_n(v39, 2);
  }

  objc_msgSend(v56, "unpairPeer:", v50);
  swift_release(v39);

}

uint64_t sub_1000C57FC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  _BYTE v32[24];

  v4 = v1;
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin();
  v9 = &v32[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v10 = (void *)qword_100354EE8;
  *v9 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  v11 = v10;
  v12 = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
  if ((v12 & 1) == 0)
  {
    __break(1u);
LABEL_19:
    swift_once(&qword_1003445A0, sub_1000B26B0);
    goto LABEL_7;
  }
  v3 = &unk_100345000;
  v2 = &unk_100345000;
  if (!a1)
    goto LABEL_14;
  v12 = *(_QWORD *)(v4 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_currentPairingRequest);
  if (!v12)
    goto LABEL_14;
  v14 = *(void (**)(uint64_t, uint64_t))(v12 + 64);
  v13 = *(_QWORD *)(v12 + 72);
  v15 = *(_QWORD *)(v12 + 32);
  swift_retain(v13);
  swift_retain(v15);
  swift_errorRetain(a1);
  swift_retain(v12);
  v14(a1, v15);
  swift_release(v13);
  swift_release(v15);
  if (qword_1003445A0 != -1)
    goto LABEL_19;
LABEL_7:
  v16 = (uint64_t *)(qword_100354BC8 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals);
  swift_beginAccess(qword_100354BC8 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals, v32, 0, 0);
  v17 = *v16;
  swift_retain(v12);
  v18 = swift_bridgeObjectRetain(v17);
  v19 = sub_1000D8690(v18, v12);
  swift_bridgeObjectRelease(v17);
  swift_release(v12);
  if (v19)
  {
    v20 = *(void **)(v4 + v2[441]);
    if (v20)
    {
      v21 = (void *)v19[3];
      v22 = v20;
      v23 = v21;
      objc_msgSend(v22, "setOOBPairingEnabled:forPeer:", 0, v23);
      swift_errorRelease(a1);

    }
    else
    {
      swift_errorRelease(a1);
    }
    swift_release(v12);
    v12 = (uint64_t)v19;
  }
  else
  {
    swift_errorRelease(a1);
  }
  swift_release(v12);
LABEL_14:
  v24 = v3[438];
  v25 = *(_QWORD *)(v4 + v24);
  *(_QWORD *)(v4 + v24) = 0;
  swift_release(v25);
  v26 = *(_QWORD *)(v4 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_currentUnpairingRequest);
  *(_QWORD *)(v4 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_currentUnpairingRequest) = 0;
  swift_release(v26);
  v27 = v2[441];
  v28 = *(void **)(v4 + v27);
  if (v28)
  {
    objc_msgSend(v28, "setDelegate:", 0);
    v29 = *(void **)(v4 + v27);
  }
  else
  {
    v29 = 0;
  }
  *(_QWORD *)(v4 + v27) = 0;

  *(_BYTE *)(v4 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_state) = 0;
  return sub_1000C450C();
}

_QWORD *sub_1000C5AAC(uint64_t a1)
{
  int64_t v2;
  _QWORD *v3;
  uint64_t i;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  char v10;
  _BYTE v11[32];
  _QWORD *v12;

  v2 = *(_QWORD *)(a1 + 16);
  v12 = _swiftEmptyArrayStorage;
  sub_1001929C0(0, v2, 0);
  v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    for (i = a1 + 32; ; i += 32)
    {
      sub_100096CB0(i, (uint64_t)v11);
      if (!swift_dynamicCast(&v9, v11, (char *)&type metadata for Any + 8, &type metadata for UInt, 6))
        break;
      v5 = v9;
      if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
      {
        sub_1001929C0(0, v3[2] + 1, 1);
        v3 = v12;
      }
      v7 = v3[2];
      v6 = v3[3];
      if (v7 >= v6 >> 1)
      {
        sub_1001929C0(v6 > 1, v7 + 1, 1);
        v3 = v12;
      }
      v3[2] = v7 + 1;
      v3[v7 + 4] = v5;
      if (!--v2)
        return v3;
    }
    v9 = 0;
    v10 = 1;
    swift_release(v3);
    return 0;
  }
  return v3;
}

_QWORD *sub_1000C5BE8(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v10;
  _BYTE v11[32];
  _QWORD *v12;

  v12 = _swiftEmptyArrayStorage;
  v2 = *(_QWORD *)(a1 + 16);
  specialized ContiguousArray.reserveCapacity(_:)(v2);
  if (!v2)
    return v12;
  for (i = a1 + 32; ; i += 32)
  {
    sub_100096CB0(i, (uint64_t)v11);
    v4 = sub_10006C25C(0, &qword_100346168, CBPeer_ptr);
    v5 = swift_dynamicCast(&v10, v11, (char *)&type metadata for Any + 8, v4, 6);
    if (!(_DWORD)v5)
      break;
    v6 = v10;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v5);
    v7 = v12[2];
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v7);
    v8 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, v6);
    specialized ContiguousArray._endMutation()(v8);
    if (!--v2)
      return v12;
  }
  v10 = 0;
  swift_release(v12);

  return 0;
}

_QWORD *sub_1000C5D00(uint64_t a1)
{
  int64_t v2;
  _QWORD *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v2 = *(_QWORD *)(a1 + 16);
  v13 = _swiftEmptyArrayStorage;
  sub_1001929E4(0, v2, 0);
  v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    for (i = (uint64_t *)(a1 + 32); ; ++i)
    {
      v12 = *i;
      swift_bridgeObjectRetain(v12);
      v5 = sub_100063D3C((uint64_t *)&unk_100346180);
      v6 = sub_100063D3C(&qword_100345388);
      if (!swift_dynamicCast(&v11, &v12, v5, v6, 6))
        break;
      v7 = v11;
      if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
      {
        sub_1001929E4(0, v3[2] + 1, 1);
        v3 = v13;
      }
      v9 = v3[2];
      v8 = v3[3];
      if (v9 >= v8 >> 1)
      {
        sub_1001929E4(v8 > 1, v9 + 1, 1);
        v3 = v13;
      }
      v3[2] = v9 + 1;
      v3[v9 + 4] = v7;
      if (!--v2)
        return v3;
    }
    v11 = 0;
    swift_release(v3);
    swift_bridgeObjectRelease(v11);
    return 0;
  }
  return v3;
}

uint64_t sub_1000C5E4C()
{
  _QWORD *v0;

  sub_10006B9B4(v0[2], v0[3]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[5]);
  swift_release(v0[7]);
  swift_release(v0[9]);
  return swift_deallocClassInstance(v0, 80, 7);
}

uint64_t sub_1000C5E90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtCC10seserviced13DSKBLEPairing19BLEUnpairingRequest_peerIdentifier;
  v2 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtCC10seserviced13DSKBLEPairing19BLEUnpairingRequest_tag + 8));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000C5F84()
{
  return type metadata accessor for DSKBLEPairing(0);
}

uint64_t type metadata accessor for DSKBLEPairing(uint64_t a1)
{
  return sub_10007BBF0(a1, (uint64_t *)&unk_100345E00, (uint64_t)&nominal type descriptor for DSKBLEPairing);
}

uint64_t sub_1000C5FA0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[8];

  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[3] = "\b";
    v4[4] = "\b";
    v4[5] = &unk_100289540;
    v4[6] = "\b";
    v4[7] = &unk_100289558;
    result = swift_updateClassMetadata2(a1, 256, 8, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for DSKBLEPairing.BLEPairingRequest()
{
  return objc_opt_self(_TtCC10seserviced13DSKBLEPairing17BLEPairingRequest);
}

uint64_t sub_1000C605C()
{
  return type metadata accessor for DSKBLEPairing.BLEUnpairingRequest(0);
}

uint64_t type metadata accessor for DSKBLEPairing.BLEUnpairingRequest(uint64_t a1)
{
  return sub_10007BBF0(a1, qword_100345F08, (uint64_t)&nominal type descriptor for DSKBLEPairing.BLEUnpairingRequest);
}

uint64_t sub_1000C6078(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100289360;
    result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Peer.PeerType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for DSKBLEPairing.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1000C63A0 + 4 * byte_1002892DF[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000C63D4 + 4 * byte_1002892DA[v4]))();
}

uint64_t sub_1000C63D4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C63DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000C63E4);
  return result;
}

uint64_t sub_1000C63F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000C63F8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1000C63FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C6404(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DSKBLEPairing.State()
{
  return &type metadata for DSKBLEPairing.State;
}

uint64_t destroy for DSKBLE.ScanFilter(uint64_t a1)
{
  sub_100063CD0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return sub_100063CD0(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t *initializeWithCopy for DSKBLE.ScanFilter(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = a2[1];
  sub_100063C8C(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  v7 = a2[2];
  v6 = a2[3];
  sub_100063C8C(v7, v6);
  a1[2] = v7;
  a1[3] = v6;
  return a1;
}

uint64_t *assignWithCopy for DSKBLE.ScanFilter(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v4 = *a2;
  v5 = a2[1];
  sub_100063C8C(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_100063CD0(v6, v7);
  v9 = a2[2];
  v8 = a2[3];
  sub_100063C8C(v9, v8);
  v10 = a1[2];
  v11 = a1[3];
  a1[2] = v9;
  a1[3] = v8;
  sub_100063CD0(v10, v11);
  return a1;
}

__n128 initializeWithTake for DSKBLE.ScanFilter(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t *assignWithTake for DSKBLE.ScanFilter(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *a1;
  v5 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_100063CD0(v4, v5);
  v6 = a1[2];
  v7 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_100063CD0(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for DSKBLE.ScanFilter(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for DSKBLE.ScanFilter(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 13;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DSKBLE.ScanFilter()
{
  return &type metadata for DSKBLE.ScanFilter;
}

ValueMetadata *type metadata accessor for DSKBLE.BLEScanRequest.ScanMode()
{
  return &type metadata for DSKBLE.BLEScanRequest.ScanMode;
}

uint64_t _s10seserviced6DSKBLEC8RSSIZoneOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000C6670 + 4 * byte_1002892E9[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000C66A4 + 4 * byte_1002892E4[v4]))();
}

uint64_t sub_1000C66A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C66AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000C66B4);
  return result;
}

uint64_t sub_1000C66C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000C66C8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000C66CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C66D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DSKBLE.RSSIZone()
{
  return &type metadata for DSKBLE.RSSIZone;
}

uint64_t getEnumTagSinglePayload for DSKBLE.BLEPeripheral.State(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for DSKBLE.BLEPeripheral.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_1000C67CC + 4 * byte_1002892F3[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1000C6800 + 4 * byte_1002892EE[v4]))();
}

uint64_t sub_1000C6800(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C6808(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000C6810);
  return result;
}

uint64_t sub_1000C681C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000C6824);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_1000C6828(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C6830(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DSKBLE.BLEPeripheral.State()
{
  return &type metadata for DSKBLE.BLEPeripheral.State;
}

unint64_t sub_1000C6850()
{
  unint64_t result;

  result = qword_100345FF8;
  if (!qword_100345FF8)
  {
    result = swift_getWitnessTable(&unk_100289638, &type metadata for DSKBLE.BLEPeripheral.State);
    atomic_store(result, (unint64_t *)&qword_100345FF8);
  }
  return result;
}

unint64_t sub_1000C6898()
{
  unint64_t result;

  result = qword_100346000;
  if (!qword_100346000)
  {
    result = swift_getWitnessTable(&unk_1002896A0, &type metadata for DSKBLE.RSSIZone);
    atomic_store(result, (unint64_t *)&qword_100346000);
  }
  return result;
}

unint64_t sub_1000C68E0()
{
  unint64_t result;

  result = qword_100346008;
  if (!qword_100346008)
  {
    result = swift_getWitnessTable(&unk_100289708, &type metadata for DSKBLE.BLEScanRequest.ScanMode);
    atomic_store(result, (unint64_t *)&qword_100346008);
  }
  return result;
}

unint64_t sub_1000C6928()
{
  unint64_t result;

  result = qword_100346010;
  if (!qword_100346010)
  {
    result = swift_getWitnessTable(&unk_100289770, &type metadata for DSKBLEPairing.State);
    atomic_store(result, (unint64_t *)&qword_100346010);
  }
  return result;
}

uint64_t sub_1000C696C(uint64_t a1, uint64_t a2)
{
  return sub_1000C69C4(&qword_100346018, a2, (uint64_t (*)(uint64_t))type metadata accessor for DSKBLE.BLEConnectionRequest, (uint64_t)&unk_1002897A8);
}

uint64_t sub_1000C6998(uint64_t a1, uint64_t a2)
{
  return sub_1000C69C4(&qword_100346020, a2, (uint64_t (*)(uint64_t))type metadata accessor for DSKBLE.BLEScanRequest, (uint64_t)&unk_100289820);
}

uint64_t sub_1000C69C4(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000C6A04()
{
  return sub_1000C69C4(&qword_100346028, 255, (uint64_t (*)(uint64_t))type metadata accessor for DSKBLE.BLEPeripheral, (uint64_t)&unk_100289898);
}

uint64_t sub_1000C6A34(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  char v37;
  char v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  Swift::String v43;
  Swift::String v44;
  uint64_t v45;
  unint64_t v46;
  _OWORD v47[2];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _OWORD v52[2];
  uint64_t v53;

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    return swift_bridgeObjectRelease(a1);
  swift_bridgeObjectRetain(a1);
  sub_1000E4E48(a1 + 32, (uint64_t)&v50, &qword_1003461B8);
  v7 = v50;
  v8 = v51;
  v48 = v50;
  v49 = v51;
  sub_10006C2B4(v52, v47);
  v9 = (_QWORD *)*a3;
  v11 = sub_100187ED0(v7, v8);
  v12 = v9[2];
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
    goto LABEL_23;
  v15 = v10;
  if (v9[3] >= v14)
  {
    if ((a2 & 1) != 0)
    {
      if ((v10 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_10019000C();
      if ((v15 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v22 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    v23 = (uint64_t *)(v22[6] + 16 * v11);
    *v23 = v7;
    v23[1] = v8;
    sub_10006C2B4(v47, (_OWORD *)(v22[7] + 32 * v11));
    v24 = v22[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v22[2] = v26;
    v27 = v4 - 1;
    if (!v27)
      return swift_bridgeObjectRelease_n(a1, 2);
    for (i = a1 + 80; ; i += 48)
    {
      sub_1000E4E48(i, (uint64_t)&v50, &qword_1003461B8);
      v29 = v50;
      v30 = v51;
      v48 = v50;
      v49 = v51;
      sub_10006C2B4(v52, v47);
      v31 = (_QWORD *)*a3;
      v32 = sub_100187ED0(v29, v30);
      v34 = v31[2];
      v35 = (v33 & 1) == 0;
      v25 = __OFADD__(v34, v35);
      v36 = v34 + v35;
      if (v25)
        break;
      v37 = v33;
      if (v31[3] < v36)
      {
        sub_1001897D4(v36, 1);
        v32 = sub_100187ED0(v29, v30);
        if ((v37 & 1) != (v38 & 1))
          goto LABEL_25;
      }
      if ((v37 & 1) != 0)
        goto LABEL_10;
      v39 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v32 >> 6) + 64) |= 1 << v32;
      v40 = (uint64_t *)(v39[6] + 16 * v32);
      *v40 = v29;
      v40[1] = v30;
      sub_10006C2B4(v47, (_OWORD *)(v39[7] + 32 * v32));
      v41 = v39[2];
      v25 = __OFADD__(v41, 1);
      v42 = v41 + 1;
      if (v25)
        goto LABEL_24;
      v39[2] = v42;
      if (!--v27)
        return swift_bridgeObjectRelease_n(a1, 2);
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_1001897D4(v14, a2 & 1);
  v16 = sub_100187ED0(v7, v8);
  if ((v15 & 1) == (v17 & 1))
  {
    v11 = v16;
    if ((v15 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v19 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
    swift_willThrow(v19);
    v53 = v19;
    swift_errorRetain(v19);
    v20 = sub_100063D3C(&qword_100345378);
    if ((swift_dynamicCast(v20, &v53, v20, &type metadata for _MergeError, 0) & 1) == 0)
    {
      swift_bridgeObjectRelease(a1);
      sub_10006BA9C(v47);
      v21 = v49;
      swift_bridgeObjectRelease(a1);
      swift_bridgeObjectRelease(v21);
      return swift_errorRelease(v53);
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
LABEL_26:
  v45 = 0;
  v46 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v43._object = (void *)0x80000001002BBCA0;
  v43._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v43);
  _print_unlocked<A, B>(_:_:)(&v48, &v45, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v44._countAndFlagsBits = 39;
  v44._object = (void *)0xE100000000000000;
  String.append(_:)(v44);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v45, v46, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000C6E04(Swift::Int *a1, void *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t result;
  Swift::Int v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  char v18;
  uint64_t v19;
  id v20;
  char v21;
  void *v22;
  id v23;
  Swift::Int v24;
  unint64_t v25;
  uint64_t v26;
  id v27;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  Swift::Int v33;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v2);
    v8 = a2;
    v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease(v6);

      v32 = v9;
      v10 = sub_10006C25C(0, (unint64_t *)&qword_100347710, SEEndPoint_ptr);
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(&v33, &v32, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
      v11 = v33;
      swift_unknownObjectRelease(v9);
      result = 0;
      *a1 = v11;
      return result;
    }
    result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v24 = sub_1000CA3DC(v7, result + 1, (uint64_t *)&unk_100346100, (unint64_t *)&qword_100347710, SEEndPoint_ptr);
    v33 = v24;
    v25 = *(_QWORD *)(v24 + 16);
    if (*(_QWORD *)(v24 + 24) <= v25)
    {
      v30 = v25 + 1;
      v31 = v8;
      sub_1000CCBD0(v30, (uint64_t *)&unk_100346100);
      v26 = v33;
    }
    else
    {
      v26 = v24;
      v27 = v8;
    }
    sub_1000CDBEC((uint64_t)v8, v26);
    v29 = *v3;
    *v3 = v26;
  }
  else
  {
    v13 = *(_QWORD *)(v6 + 40);
    swift_bridgeObjectRetain(v6);
    v14 = NSObject._rawHashValue(seed:)(v13);
    v15 = -1 << *(_BYTE *)(v6 + 32);
    v16 = v14 & ~v15;
    if (((*(_QWORD *)(v6 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
    {
      sub_10006C25C(0, (unint64_t *)&qword_100347710, SEEndPoint_ptr);
      v17 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v16);
      v18 = static NSObject.== infix(_:_:)();

      if ((v18 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease(v6);
        v22 = *(void **)(*(_QWORD *)(*v3 + 48) + 8 * v16);
        *a1 = (Swift::Int)v22;
        v23 = v22;
        return 0;
      }
      v19 = ~v15;
      while (1)
      {
        v16 = (v16 + 1) & v19;
        if (((*(_QWORD *)(v6 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
          break;
        v20 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v16);
        v21 = static NSObject.== infix(_:_:)();

        if ((v21 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease(v6);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v33 = *v3;
    *v3 = 0x8000000000000000;
    v8 = a2;
    sub_1000CF610((uint64_t)v8, v16, isUniquelyReferenced_nonNull_native, (uint64_t *)&unk_100346100, (unint64_t *)&qword_100347710, SEEndPoint_ptr);
    v29 = *v3;
    *v3 = v33;
  }
  swift_bridgeObjectRelease(v29);
  *a1 = (Swift::Int)v8;
  return 1;
}

uint64_t sub_1000C70D8(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  Swift::Int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v36;
  _QWORD v37[9];
  uint64_t v38;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v2);
    v8 = swift_retain(a2);
    v9 = __CocoaSet.member(for:)(v8, v7);
    swift_release(a2);
    if (v9)
    {
      swift_bridgeObjectRelease(v6);
      swift_release(a2);
      v38 = v9;
      v10 = type metadata accessor for DSKBLE.BLEScanRequest();
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(v37, &v38, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
      *a1 = v37[0];
      swift_unknownObjectRelease(v9);
      return 0;
    }
    result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v25 = sub_1000CA824(v7, result + 1);
    v37[0] = v25;
    v26 = *(_QWORD *)(v25 + 16);
    if (*(_QWORD *)(v25 + 24) <= v26)
    {
      v28 = v26 + 1;
      swift_retain(a2);
      sub_1000CB358(v28);
      v27 = v37[0];
    }
    else
    {
      v27 = v25;
      swift_retain(a2);
    }
    sub_1000CD768(a2, v27);
    v29 = *v3;
    *v3 = v27;
  }
  else
  {
    Hasher.init(_seed:)(v37);
    v12 = *(_QWORD *)(a2 + 16);
    v13 = *(_QWORD *)(a2 + 24);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v13);
    String.hash(into:)(v37, v12, v13);
    swift_bridgeObjectRelease(v13);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v6 + 32);
    v16 = v14 & ~v15;
    if (((*(_QWORD *)(v6 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
    {
      v17 = *(_QWORD *)(v6 + 48);
      v18 = *(_QWORD *)(v17 + 8 * v16);
      v19 = *(_QWORD *)(v18 + 16);
      v20 = *(_QWORD *)(v18 + 24);
      v21 = *(_QWORD *)(a2 + 16);
      v22 = *(_QWORD *)(a2 + 24);
      v23 = v19 == v21 && v20 == v22;
      if (v23
        || (_stringCompareWithSmolCheck(_:_:expecting:)(v19, v20, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), 0) & 1) != 0)
      {
LABEL_13:
        swift_release(a2);
        swift_bridgeObjectRelease(v6);
        v24 = *(_QWORD *)(*(_QWORD *)(*v3 + 48) + 8 * v16);
        *a1 = v24;
        swift_retain(v24);
        return 0;
      }
      v30 = ~v15;
      while (1)
      {
        v16 = (v16 + 1) & v30;
        if (((*(_QWORD *)(v6 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
          break;
        v31 = *(_QWORD *)(v17 + 8 * v16);
        v32 = *(_QWORD *)(v31 + 16);
        v33 = *(_QWORD *)(v31 + 24);
        v34 = v32 == v21 && v33 == v22;
        if (v34 || (_stringCompareWithSmolCheck(_:_:expecting:)(v32, v33, v21, v22, 0) & 1) != 0)
          goto LABEL_13;
      }
    }
    swift_bridgeObjectRelease(v6);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v37[0] = *v3;
    *v3 = 0x8000000000000000;
    v36 = swift_retain(a2);
    sub_1000CDD2C(v36, v16, isUniquelyReferenced_nonNull_native);
    v29 = *v3;
    *v3 = v37[0];
  }
  swift_bridgeObjectRelease(v29);
  *a1 = a2;
  return 1;
}

uint64_t sub_1000C7394(Swift::UInt *a1, Swift::UInt a2)
{
  _QWORD *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  _QWORD v14[9];

  v5 = *v2;
  Hasher.init(_seed:)(v14);
  Hasher._combine(_:)(a2);
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v14[0] = *v2;
    *v2 = 0x8000000000000000;
    sub_1000CDEF0(a2, v8, isUniquelyReferenced_nonNull_native);
    v13 = *v2;
    *v2 = v14[0];
    swift_bridgeObjectRelease(v13);
    result = 1;
    goto LABEL_8;
  }
  v9 = *(_QWORD *)(v5 + 48);
  if (*(_QWORD *)(v9 + 8 * v8) != a2)
  {
    v10 = ~v7;
    do
    {
      v8 = (v8 + 1) & v10;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v9 + 8 * v8) != a2);
  }
  result = 0;
  a2 = *(_QWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v8);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_1000C74B0(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  Swift::UInt v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  uint64_t v20;
  Swift::Int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[9];
  uint64_t v26;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_retain(a2);
    swift_bridgeObjectRetain(v6);
    v8 = __CocoaSet.member(for:)(a2, v7);
    swift_release(a2);
    if (v8)
    {
      swift_bridgeObjectRelease(v6);
      swift_release(a2);
      v26 = v8;
      swift_unknownObjectRetain(v8);
      v9 = sub_100063D3C(&qword_100346170);
      swift_dynamicCast(v25, &v26, (char *)&type metadata for Swift.AnyObject + 8, v9, 7);
      *a1 = v25[0];
      swift_unknownObjectRelease(v8);
      return 0;
    }
    result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v21 = sub_1000CAA3C(v7, result + 1);
    v25[0] = v21;
    v22 = *(_QWORD *)(v21 + 16);
    if (*(_QWORD *)(v21 + 24) <= v22)
    {
      v24 = v22 + 1;
      swift_retain(a2);
      sub_1000CBC04(v24);
      v23 = v25[0];
    }
    else
    {
      v23 = v21;
      swift_retain(a2);
    }
    sub_1000CD900(a2, v23);
    v20 = *v3;
    *v3 = v23;
  }
  else
  {
    Hasher.init(_seed:)(v25);
    v11 = *(_QWORD *)(a2 + 16);
    Hasher._combine(_:)(v11);
    v12 = Hasher._finalize()();
    v13 = -1 << *(_BYTE *)(v6 + 32);
    v14 = v12 & ~v13;
    if (((*(_QWORD *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
    {
      v15 = *(_QWORD *)(v6 + 48);
      if (*(_QWORD *)(*(_QWORD *)(v15 + 8 * v14) + 16) == v11)
      {
LABEL_12:
        swift_release(a2);
        v17 = *(_QWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v14);
        *a1 = v17;
        swift_retain(v17);
        return 0;
      }
      v16 = ~v13;
      while (1)
      {
        v14 = (v14 + 1) & v16;
        if (((*(_QWORD *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
          break;
        if (*(_QWORD *)(*(_QWORD *)(v15 + 8 * v14) + 16) == v11)
          goto LABEL_12;
      }
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v25[0] = *v2;
    *v2 = 0x8000000000000000;
    v19 = swift_retain(a2);
    sub_1000CE03C(v19, v14, isUniquelyReferenced_nonNull_native);
    v20 = *v2;
    *v2 = v25[0];
  }
  swift_bridgeObjectRelease(v20);
  *a1 = a2;
  return 1;
}

uint64_t sub_1000C7708(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  unint64_t v25;
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v33[9];
  uint64_t v34;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v2);
    v8 = swift_retain(a2);
    v9 = __CocoaSet.member(for:)(v8, v7);
    swift_release(a2);
    if (v9)
    {
      swift_bridgeObjectRelease(v6);
      swift_release(a2);
      v34 = v9;
      v10 = type metadata accessor for Peer(0);
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(v33, &v34, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
      *a1 = v33[0];
      swift_unknownObjectRelease(v9);
      return 0;
    }
    result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v24 = sub_1000CA5DC(v7, result + 1);
    v33[0] = v24;
    v25 = *(_QWORD *)(v24 + 16);
    if (*(_QWORD *)(v24 + 24) <= v25)
    {
      v30 = v25 + 1;
      swift_retain(a2);
      sub_1000CB8F4(v30);
      v26 = v33[0];
    }
    else
    {
      v26 = v24;
      swift_retain(a2);
    }
    sub_1000CD820(a2, v26);
    v31 = *v3;
    *v3 = v26;
    swift_bridgeObjectRelease(v31);
    *a1 = a2;
  }
  else
  {
    Hasher.init(_seed:)(v33);
    v12 = a2 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
    v13 = type metadata accessor for UUID(0);
    v14 = sub_1000C69C4((unint64_t *)&unk_100347730, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    swift_bridgeObjectRetain(v6);
    dispatch thunk of Hashable.hash(into:)(v33, v13, v14);
    v15 = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v6 + 32);
    v17 = v15 & ~v16;
    if (((*(_QWORD *)(v6 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) != 0)
    {
      v18 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v17);
      v19 = v18 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
      swift_retain(v18);
      LOBYTE(v19) = static UUID.== infix(_:_:)(v19, v12);
      swift_release(v18);
      if ((v19 & 1) != 0)
      {
LABEL_12:
        swift_release(a2);
        swift_bridgeObjectRelease(v6);
        v23 = *(_QWORD *)(*(_QWORD *)(*v3 + 48) + 8 * v17);
        *a1 = v23;
        swift_retain(v23);
        return 0;
      }
      v20 = ~v16;
      while (1)
      {
        v17 = (v17 + 1) & v20;
        if (((*(_QWORD *)(v6 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
          break;
        v21 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v17);
        v22 = v21 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
        swift_retain(v21);
        LOBYTE(v22) = static UUID.== infix(_:_:)(v22, v12);
        swift_release(v21);
        if ((v22 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease(v6);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v33[0] = *v3;
    *v3 = 0x8000000000000000;
    v28 = swift_retain(a2);
    sub_1000CE1A8(v28, v17, isUniquelyReferenced_nonNull_native);
    v29 = *v3;
    *v3 = v33[0];
    swift_bridgeObjectRelease(v29);
    *a1 = a2;
  }
  return 1;
}

uint64_t sub_1000C7A18(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  _QWORD *v11;
  uint64_t __s1;

  v6 = *v3;
  Hasher.init(_seed:)(&__s1);
  swift_bridgeObjectRetain(v6);
  Data.hash(into:)(&__s1, a2, a3);
  v7 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v6 + 32));
  if (((*(_QWORD *)(v6 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
    __asm { BR              X8 }
  swift_bridgeObjectRelease(v6);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v11);
  __s1 = *v11;
  *v11 = 0x8000000000000000;
  sub_100063C8C(a2, a3);
  sub_1000CE3AC(a2, a3, v7, isUniquelyReferenced_nonNull_native);
  v9 = *v11;
  *v11 = __s1;
  swift_bridgeObjectRelease(v9);
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_1000C8444(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::Int v26;
  unint64_t v27;
  uint64_t v28;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v35[9];
  uint64_t v36;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v2);
    v8 = swift_retain(a2);
    v9 = __CocoaSet.member(for:)(v8, v7);
    swift_release(a2);
    if (v9)
    {
      swift_bridgeObjectRelease(v6);
      swift_release(a2);
      v36 = v9;
      v10 = type metadata accessor for DSKBLE.BLEConnectionRequest();
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(v35, &v36, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
      *a1 = v35[0];
      swift_unknownObjectRelease(v9);
      return 0;
    }
    result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v26 = sub_1000CAC34(v7, result + 1);
    v35[0] = v26;
    v27 = *(_QWORD *)(v26 + 16);
    if (*(_QWORD *)(v26 + 24) <= v27)
    {
      v32 = v27 + 1;
      swift_retain(a2);
      sub_1000CC188(v32);
      v28 = v35[0];
    }
    else
    {
      v28 = v26;
      swift_retain(a2);
    }
    sub_1000CD9A0(a2, v28);
    v33 = *v3;
    *v3 = v28;
    swift_bridgeObjectRelease(v33);
    *a1 = a2;
  }
  else
  {
    Hasher.init(_seed:)(v35);
    v12 = *(_QWORD *)(a2 + 16);
    v13 = type metadata accessor for UUID(0);
    v14 = sub_1000C69C4((unint64_t *)&unk_100347730, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    swift_bridgeObjectRetain(v6);
    swift_retain(v12);
    dispatch thunk of Hashable.hash(into:)(v35, v13, v14);
    swift_release(v12);
    v15 = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v6 + 32);
    v17 = v15 & ~v16;
    if (((*(_QWORD *)(v6 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) != 0)
    {
      v18 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v17);
      v19 = *(_QWORD *)(v18 + 16) + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
      v20 = *(_QWORD *)(a2 + 16) + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
      swift_retain(v18);
      LOBYTE(v19) = static UUID.== infix(_:_:)(v19, v20);
      swift_release(v18);
      if ((v19 & 1) != 0)
      {
LABEL_12:
        swift_release(a2);
        swift_bridgeObjectRelease(v6);
        v25 = *(_QWORD *)(*(_QWORD *)(*v3 + 48) + 8 * v17);
        *a1 = v25;
        swift_retain(v25);
        return 0;
      }
      v21 = ~v16;
      while (1)
      {
        v17 = (v17 + 1) & v21;
        if (((*(_QWORD *)(v6 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
          break;
        v22 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v17);
        v23 = *(_QWORD *)(v22 + 16) + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
        v24 = *(_QWORD *)(a2 + 16) + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
        swift_retain(v22);
        LOBYTE(v23) = static UUID.== infix(_:_:)(v23, v24);
        swift_release(v22);
        if ((v23 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease(v6);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v35[0] = *v3;
    *v3 = 0x8000000000000000;
    v30 = swift_retain(a2);
    sub_1000CEDF0(v30, v17, isUniquelyReferenced_nonNull_native);
    v31 = *v3;
    *v3 = v35[0];
    swift_bridgeObjectRelease(v31);
    *a1 = a2;
  }
  return 1;
}

uint64_t sub_1000C8778(Swift::Int *a1, void *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  char v17;
  uint64_t v18;
  id v19;
  char v20;
  void *v21;
  id v22;
  Swift::Int v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  Swift::Int v32;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v2);
    v8 = a2;
    v9 = __CocoaSet.member(for:)(v8, v7);

    if (v9)
    {
      swift_bridgeObjectRelease(v6);

      v31 = v9;
      v10 = type metadata accessor for UWBSession();
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(&v32, &v31, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
      *a1 = v32;
      swift_unknownObjectRelease(v9);
      return 0;
    }
    result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v23 = sub_1000CA1E4(v7, result + 1);
    v32 = v23;
    v24 = *(_QWORD *)(v23 + 16);
    if (*(_QWORD *)(v23 + 24) <= v24)
    {
      v29 = v24 + 1;
      v30 = v8;
      sub_1000CCBD0(v29, (uint64_t *)&unk_1003460D0);
      v25 = v32;
    }
    else
    {
      v25 = v23;
      v26 = v8;
    }
    sub_1000CDBEC((uint64_t)v8, v25);
    v28 = *v3;
    *v3 = v25;
  }
  else
  {
    v12 = *(_QWORD *)(v6 + 40);
    swift_bridgeObjectRetain(v6);
    v13 = NSObject._rawHashValue(seed:)(v12);
    v14 = -1 << *(_BYTE *)(v6 + 32);
    v15 = v13 & ~v14;
    if (((*(_QWORD *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
    {
      type metadata accessor for UWBSession();
      v16 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v15);
      v17 = static NSObject.== infix(_:_:)(v16);

      if ((v17 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease(v6);
        v21 = *(void **)(*(_QWORD *)(*v3 + 48) + 8 * v15);
        *a1 = (Swift::Int)v21;
        v22 = v21;
        return 0;
      }
      v18 = ~v14;
      while (1)
      {
        v15 = (v15 + 1) & v18;
        if (((*(_QWORD *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
          break;
        v19 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v15);
        v20 = static NSObject.== infix(_:_:)(v19);

        if ((v20 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease(v6);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v32 = *v3;
    *v3 = 0x8000000000000000;
    v8 = a2;
    sub_1000CF01C((uint64_t)v8, v15, isUniquelyReferenced_nonNull_native);
    v28 = *v3;
    *v3 = v32;
  }
  swift_bridgeObjectRelease(v28);
  *a1 = (Swift::Int)v8;
  return 1;
}

uint64_t sub_1000C89FC(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(_QWORD, _QWORD, _QWORD);
  uint64_t v22;
  void (*v23)(_QWORD, _QWORD, _QWORD);
  uint64_t v24;
  char v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  char isUniquelyReferenced_nonNull_native;
  char *v29;
  uint64_t v30;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v3;
  v12 = *(_QWORD *)(*v3 + 40);
  v14 = sub_1000C69C4((unint64_t *)&unk_100347730, 255, v13, (uint64_t)&protocol conformance descriptor for UUID);
  swift_bridgeObjectRetain(v11);
  v36 = a2;
  v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v12, v6, v14);
  v16 = -1 << *(_BYTE *)(v11 + 32);
  v17 = v15 & ~v16;
  v18 = v11;
  v19 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) != 0)
  {
    v32 = v3;
    v33 = a1;
    v34 = ~v16;
    v35 = v7;
    v20 = *(_QWORD *)(v7 + 72);
    v21 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v22 = v18;
      v23 = v21;
      v21(v10, *(_QWORD *)(v18 + 48) + v20 * v17, v6);
      v24 = sub_1000C69C4((unint64_t *)&qword_100346150, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v25 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v36, v6, v24);
      v26 = *(void (**)(char *, uint64_t))(v35 + 8);
      v26(v10, v6);
      if ((v25 & 1) != 0)
        break;
      v17 = (v17 + 1) & v34;
      v18 = v22;
      v21 = v23;
      if (((*(_QWORD *)(v19 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
      {
        swift_bridgeObjectRelease(v22);
        v3 = v32;
        a1 = v33;
        v27 = v35;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease(v22);
    v26(v36, v6);
    v23(v33, *(_QWORD *)(*v32 + 48) + v20 * v17, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v11);
    v21 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v27 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v29 = v36;
    v21(v10, v36, v6);
    v37 = *v3;
    *v3 = 0x8000000000000000;
    sub_1000CF1B0((uint64_t)v10, v17, isUniquelyReferenced_nonNull_native);
    v30 = *v3;
    *v3 = v37;
    swift_bridgeObjectRelease(v30);
    (*(void (**)(uint64_t, char *, uint64_t))(v27 + 32))(a1, v29, v6);
    return 1;
  }
}

uint64_t sub_1000C8C60(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  void *v17;
  id v18;
  uint64_t v19;
  Swift::Int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  char v29;
  uint64_t *v30;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v32;
  uint64_t v33;
  Swift::Int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  _QWORD v42[9];
  uint64_t v43;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v3;
  if ((*v3 & 0xC000000000000001) != 0)
  {
    if (v11 < 0)
      v12 = *v3;
    else
      v12 = v11 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v3);
    v13 = swift_retain(a2);
    v14 = __CocoaSet.member(for:)(v13, v12);
    swift_release(a2);
    if (v14)
    {
      swift_bridgeObjectRelease(v11);
      swift_release(a2);
      v43 = v14;
      v15 = type metadata accessor for DSKBLE.BLEPeripheral();
      swift_unknownObjectRetain(v14);
      swift_dynamicCast(v42, &v43, (char *)&type metadata for Swift.AnyObject + 8, v15, 7);
      *a1 = v42[0];
      swift_unknownObjectRelease(v14);
      return 0;
    }
    result = __CocoaSet.count.getter(v12);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v34 = sub_1000CAE8C(v12, result + 1);
    v42[0] = v34;
    v35 = *(_QWORD *)(v34 + 16);
    if (*(_QWORD *)(v34 + 24) <= v35)
    {
      v38 = v35 + 1;
      swift_retain(a2);
      sub_1000CC4D4(v38);
      v36 = v42[0];
    }
    else
    {
      v36 = v34;
      swift_retain(a2);
    }
    sub_1000CDAA0(a2, v36);
    v39 = *v3;
    *v3 = v36;
    swift_bridgeObjectRelease(v39);
    *a1 = a2;
    return 1;
  }
  v40 = v3;
  v41 = a1;
  Hasher.init(_seed:)(v42);
  v17 = *(void **)(a2 + 24);
  swift_bridgeObjectRetain(v11);
  v18 = objc_msgSend(v17, "identifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  v19 = sub_1000C69C4((unint64_t *)&unk_100347730, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v42, v6, v19);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v20 = Hasher._finalize()();
  v21 = -1 << *(_BYTE *)(v11 + 32);
  v22 = v20 & ~v21;
  if (((*(_QWORD *)(v11 + 56 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) == 0)
  {
LABEL_11:
    swift_bridgeObjectRelease(v11);
    v30 = v40;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v40);
    v42[0] = *v30;
    *v30 = 0x8000000000000000;
    v32 = swift_retain(a2);
    sub_1000CF3BC(v32, v22, isUniquelyReferenced_nonNull_native);
    v33 = *v30;
    *v30 = v42[0];
    swift_bridgeObjectRelease(v33);
    *v41 = a2;
    return 1;
  }
  v23 = ~v21;
  sub_10006C25C(0, &qword_100348B80, NSObject_ptr);
  while (1)
  {
    v24 = *(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * v22);
    v25 = *(void **)(v24 + 24);
    v26 = *(void **)(a2 + 24);
    swift_retain(v24);
    v27 = v25;
    v28 = v26;
    v29 = static NSObject.== infix(_:_:)(v27);
    swift_release(v24);

    if ((v29 & 1) != 0)
      break;
    v22 = (v22 + 1) & v23;
    if (((*(_QWORD *)(v11 + 56 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) == 0)
      goto LABEL_11;
  }
  swift_release(a2);
  swift_bridgeObjectRelease(v11);
  v37 = *(_QWORD *)(*(_QWORD *)(*v40 + 48) + 8 * v22);
  *v41 = v37;
  swift_retain(v37);
  return 0;
}

uint64_t sub_1000C8FC8(Swift::Int *a1, void *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  char v17;
  uint64_t v18;
  id v19;
  char v20;
  void *v21;
  id v22;
  Swift::Int v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  Swift::Int v32;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v2);
    v8 = a2;
    v9 = __CocoaSet.member(for:)(v8, v7);

    if (v9)
    {
      swift_bridgeObjectRelease(v6);

      v31 = v9;
      v10 = sub_10006C25C(0, &qword_1003460F0, CBCharacteristic_ptr);
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(&v32, &v31, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
      *a1 = v32;
      swift_unknownObjectRelease(v9);
      return 0;
    }
    result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v23 = sub_1000CA3DC(v7, result + 1, &qword_100346210, &qword_1003460F0, CBCharacteristic_ptr);
    v32 = v23;
    v24 = *(_QWORD *)(v23 + 16);
    if (*(_QWORD *)(v23 + 24) <= v24)
    {
      v29 = v24 + 1;
      v30 = v8;
      sub_1000CCBD0(v29, &qword_100346210);
      v25 = v32;
    }
    else
    {
      v25 = v23;
      v26 = v8;
    }
    sub_1000CDBEC((uint64_t)v8, v25);
    v28 = *v3;
    *v3 = v25;
  }
  else
  {
    v12 = *(_QWORD *)(v6 + 40);
    swift_bridgeObjectRetain(v6);
    v13 = NSObject._rawHashValue(seed:)(v12);
    v14 = -1 << *(_BYTE *)(v6 + 32);
    v15 = v13 & ~v14;
    if (((*(_QWORD *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
    {
      sub_10006C25C(0, &qword_1003460F0, CBCharacteristic_ptr);
      v16 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v15);
      v17 = static NSObject.== infix(_:_:)(v16);

      if ((v17 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease(v6);
        v21 = *(void **)(*(_QWORD *)(*v3 + 48) + 8 * v15);
        *a1 = (Swift::Int)v21;
        v22 = v21;
        return 0;
      }
      v18 = ~v14;
      while (1)
      {
        v15 = (v15 + 1) & v18;
        if (((*(_QWORD *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
          break;
        v19 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v15);
        v20 = static NSObject.== infix(_:_:)(v19);

        if ((v20 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease(v6);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v32 = *v3;
    *v3 = 0x8000000000000000;
    v8 = a2;
    sub_1000CF610((uint64_t)v8, v15, isUniquelyReferenced_nonNull_native, &qword_100346210, &qword_1003460F0, CBCharacteristic_ptr);
    v28 = *v3;
    *v3 = v32;
  }
  swift_bridgeObjectRelease(v28);
  *a1 = (Swift::Int)v8;
  return 1;
}

uint64_t sub_1000C929C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  BOOL v22;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v24;
  __int128 v25;
  _QWORD v26[9];
  __int128 v27;

  v6 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v27 = *(_OWORD *)(a2 + 24);
  v7 = *v2;
  Hasher.init(_seed:)(v26);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v26, v6, v5);
  swift_bridgeObjectRelease(v5);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 40 * v10);
    v13 = v12[1];
    v14 = *v12 == v6 && v13 == v5;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, v6, v5, 0) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(v5);
      swift_bridgeObjectRelease(v7);
      sub_10006F8A4((uint64_t)&v27);
      v15 = *(_QWORD *)(*v2 + 48) + 40 * v10;
      v16 = *(_QWORD *)(v15 + 8);
      v17 = *(_QWORD *)(v15 + 32);
      *(_QWORD *)a1 = *(_QWORD *)v15;
      *(_QWORD *)(a1 + 8) = v16;
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(v15 + 16);
      *(_QWORD *)(a1 + 32) = v17;
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRetain(v17);
      return 0;
    }
    v19 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v19;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v20 = (_QWORD *)(v11 + 40 * v10);
      v21 = v20[1];
      v22 = *v20 == v6 && v21 == v5;
      if (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v6, v5, 0) & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease(v7);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v26[0] = *v2;
  *v2 = 0x8000000000000000;
  swift_bridgeObjectRetain(v5);
  sub_10006F87C((uint64_t)&v27);
  sub_1000CF7A0((uint64_t *)a2, v10, isUniquelyReferenced_nonNull_native);
  v24 = *v2;
  *v2 = v26[0];
  swift_bridgeObjectRelease(v24);
  v25 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v25;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return 1;
}

uint64_t sub_1000C949C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  _QWORD v24[9];

  v7 = *v3;
  Hasher.init(_seed:)(v24);
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v24, a2, a3);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = v12[1];
    v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      v15 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0;
    }
    v18 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v18;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v19 = (_QWORD *)(v11 + 16 * v10);
      v20 = v19[1];
      v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0) & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease(v7);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain(a3);
  sub_1000CF984(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  v23 = *v3;
  *v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_1000C9648(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  unint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  Swift::Int v18;
  Swift::Int v19;
  uint64_t v20;
  Swift::Int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::Int *v27;
  uint64_t v29;
  uint64_t __s2;
  Swift::Int __s1;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v6);
    v8 = swift_retain(a2);
    v9 = __CocoaSet.member(for:)(v8, v7);
    swift_release(a2);
    if (v9)
    {
      swift_bridgeObjectRelease(v6);
      swift_release(a2);
      __s2 = v9;
      v10 = type metadata accessor for DSKExpress.ExpressKey();
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(&__s1, &__s2, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
      *a1 = __s1;
      swift_unknownObjectRelease(v9);
      return 0;
    }
    v20 = __CocoaSet.count.getter(v7);
    if (__OFADD__(v20, 1))
    {
      __break(1u);
      JUMPOUT(0x1000CA128);
    }
    v21 = sub_1000CB128(v7, v20 + 1);
    __s1 = v21;
    v22 = *(_QWORD *)(v21 + 16);
    if (*(_QWORD *)(v21 + 24) <= v22)
    {
      v25 = v22 + 1;
      v24 = a2;
      swift_retain(a2);
      sub_1000CD478(v25);
      v23 = __s1;
    }
    else
    {
      v23 = v21;
      v24 = a2;
      swift_retain(a2);
    }
    sub_1000CDC6C(v24, v23);
    v26 = *v3;
    *v3 = v23;
    swift_bridgeObjectRelease(v26);
    *a1 = v24;
  }
  else
  {
    v27 = v2;
    v29 = *v2;
    Hasher.init(_seed:)(&__s1);
    v12 = *(_QWORD *)(a2 + 16);
    v13 = *(_QWORD *)(a2 + 24);
    swift_bridgeObjectRetain(v6);
    sub_100063C8C(v12, v13);
    Data.hash(into:)(&__s1, v12, v13);
    sub_100063CD0(v12, v13);
    v14 = Hasher._finalize()();
    v15 = v6;
    v16 = v14 & ~(-1 << *(_BYTE *)(v6 + 32));
    if (((*(_QWORD *)(v15 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
      __asm { BR              X10 }
    swift_bridgeObjectRelease(v29);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v27);
    __s1 = *v27;
    *v27 = 0x8000000000000000;
    v18 = swift_retain(a2);
    sub_1000CFB1C(v18, v16, isUniquelyReferenced_nonNull_native);
    v19 = *v27;
    *v27 = __s1;
    swift_bridgeObjectRelease(v19);
    *a1 = a2;
  }
  return 1;
}

Swift::Int sub_1000CA1E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (a2)
  {
    sub_100063D3C((uint64_t *)&unk_1003460D0);
    v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
    v23 = v4;
    v5 = __CocoaSet.makeIterator()(a1);
    v6 = __CocoaSet.Iterator.next()(v5);
    if (v6)
    {
      v7 = v6;
      v8 = type metadata accessor for UWBSession();
      do
      {
        v21 = v7;
        swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v8, 7);
        v4 = v23;
        v16 = *(_QWORD *)(v23 + 16);
        if (*(_QWORD *)(v23 + 24) <= v16)
        {
          sub_1000CCBD0(v16 + 1, (uint64_t *)&unk_1003460D0);
          v4 = v23;
        }
        v9 = v22;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
        v11 = v4 + 56;
        v12 = -1 << *(_BYTE *)(v4 + 32);
        v13 = result & ~v12;
        v14 = v13 >> 6;
        if (((-1 << v13) & ~*(_QWORD *)(v4 + 56 + 8 * (v13 >> 6))) != 0)
        {
          v15 = __clz(__rbit64((-1 << v13) & ~*(_QWORD *)(v4 + 56 + 8 * (v13 >> 6)))) | v13 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v17 = 0;
          v18 = (unint64_t)(63 - v12) >> 6;
          do
          {
            if (++v14 == v18 && (v17 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v19 = v14 == v18;
            if (v14 == v18)
              v14 = 0;
            v17 |= v19;
            v20 = *(_QWORD *)(v11 + 8 * v14);
          }
          while (v20 == -1);
          v15 = __clz(__rbit64(~v20)) + (v14 << 6);
        }
        *(_QWORD *)(v11 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = v9;
        ++*(_QWORD *)(v4 + 16);
        v7 = __CocoaSet.Iterator.next()(result);
      }
      while (v7);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v4;
}

Swift::Int sub_1000CA3DC(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int result;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (a2)
  {
    sub_100063D3C(a3);
    v10 = static _SetStorage.convert(_:capacity:)(a1, a2);
    v29 = v10;
    v11 = __CocoaSet.makeIterator()(a1);
    v12 = __CocoaSet.Iterator.next()();
    if (v12)
    {
      v13 = v12;
      v14 = sub_10006C25C(0, a4, a5);
      do
      {
        v27 = v13;
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v14, 7);
        v10 = v29;
        v22 = *(_QWORD *)(v29 + 16);
        if (*(_QWORD *)(v29 + 24) <= v22)
        {
          sub_1000CCBD0(v22 + 1, a3);
          v10 = v29;
        }
        v15 = v28;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v10 + 40));
        v17 = v10 + 56;
        v18 = -1 << *(_BYTE *)(v10 + 32);
        v19 = result & ~v18;
        v20 = v19 >> 6;
        if (((-1 << v19) & ~*(_QWORD *)(v10 + 56 + 8 * (v19 >> 6))) != 0)
        {
          v21 = __clz(__rbit64((-1 << v19) & ~*(_QWORD *)(v10 + 56 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v23 = 0;
          v24 = (unint64_t)(63 - v18) >> 6;
          do
          {
            if (++v20 == v24 && (v23 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v25 = v20 == v24;
            if (v20 == v24)
              v20 = 0;
            v23 |= v25;
            v26 = *(_QWORD *)(v17 + 8 * v20);
          }
          while (v26 == -1);
          v21 = __clz(__rbit64(~v26)) + (v20 << 6);
        }
        *(_QWORD *)(v17 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
        *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v21) = v15;
        ++*(_QWORD *)(v10 + 16);
        v13 = __CocoaSet.Iterator.next()();
      }
      while (v13);
    }
    swift_release(v11);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v10;
}

Swift::Int sub_1000CA5DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int result;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  _QWORD v23[9];
  uint64_t v24;
  uint64_t v25;

  if (a2)
  {
    sub_100063D3C(&qword_1003489C0);
    v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
    v25 = v4;
    v5 = __CocoaSet.makeIterator()(a1);
    v6 = __CocoaSet.Iterator.next()(v5);
    if (v6)
    {
      v7 = v6;
      v8 = type metadata accessor for Peer(0);
      do
      {
        v23[0] = v7;
        swift_dynamicCast(&v24, v23, (char *)&type metadata for Swift.AnyObject + 8, v8, 7);
        v4 = v25;
        v18 = *(_QWORD *)(v25 + 16);
        if (*(_QWORD *)(v25 + 24) <= v18)
        {
          sub_1000CB8F4(v18 + 1);
          v4 = v25;
        }
        v9 = v24;
        Hasher.init(_seed:)(v23);
        v10 = type metadata accessor for UUID(0);
        v11 = sub_1000C69C4((unint64_t *)&unk_100347730, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        dispatch thunk of Hashable.hash(into:)(v23, v10, v11);
        result = Hasher._finalize()();
        v13 = v4 + 56;
        v14 = -1 << *(_BYTE *)(v4 + 32);
        v15 = result & ~v14;
        v16 = v15 >> 6;
        if (((-1 << v15) & ~*(_QWORD *)(v4 + 56 + 8 * (v15 >> 6))) != 0)
        {
          v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v4 + 56 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v19 = 0;
          v20 = (unint64_t)(63 - v14) >> 6;
          do
          {
            if (++v16 == v20 && (v19 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v21 = v16 == v20;
            if (v16 == v20)
              v16 = 0;
            v19 |= v21;
            v22 = *(_QWORD *)(v13 + 8 * v16);
          }
          while (v22 == -1);
          v17 = __clz(__rbit64(~v22)) + (v16 << 6);
        }
        *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v17) = v9;
        ++*(_QWORD *)(v4 + 16);
        v7 = __CocoaSet.Iterator.next()(result);
      }
      while (v7);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v4;
}

Swift::Int sub_1000CA824(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int result;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  _QWORD v23[9];
  uint64_t v24;
  uint64_t v25;

  if (a2)
  {
    sub_100063D3C((uint64_t *)&unk_100346070);
    v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
    v25 = v4;
    v5 = __CocoaSet.makeIterator()(a1);
    v6 = __CocoaSet.Iterator.next()(v5);
    if (v6)
    {
      v7 = v6;
      v8 = type metadata accessor for DSKBLE.BLEScanRequest();
      do
      {
        v23[0] = v7;
        swift_dynamicCast(&v24, v23, (char *)&type metadata for Swift.AnyObject + 8, v8, 7);
        v4 = v25;
        v18 = *(_QWORD *)(v25 + 16);
        if (*(_QWORD *)(v25 + 24) <= v18)
        {
          sub_1000CB358(v18 + 1);
          v4 = v25;
        }
        v9 = v24;
        Hasher.init(_seed:)(v23);
        v10 = *(_QWORD *)(v9 + 16);
        v11 = *(_QWORD *)(v9 + 24);
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v23, v10, v11);
        swift_bridgeObjectRelease(v11);
        result = Hasher._finalize()();
        v13 = v4 + 56;
        v14 = -1 << *(_BYTE *)(v4 + 32);
        v15 = result & ~v14;
        v16 = v15 >> 6;
        if (((-1 << v15) & ~*(_QWORD *)(v4 + 56 + 8 * (v15 >> 6))) != 0)
        {
          v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v4 + 56 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v19 = 0;
          v20 = (unint64_t)(63 - v14) >> 6;
          do
          {
            if (++v16 == v20 && (v19 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v21 = v16 == v20;
            if (v16 == v20)
              v16 = 0;
            v19 |= v21;
            v22 = *(_QWORD *)(v13 + 8 * v16);
          }
          while (v22 == -1);
          v17 = __clz(__rbit64(~v22)) + (v16 << 6);
        }
        *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v17) = v9;
        ++*(_QWORD *)(v4 + 16);
        v7 = __CocoaSet.Iterator.next()(result);
      }
      while (v7);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v4;
}

Swift::Int sub_1000CAA3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  Swift::Int result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD v20[9];
  uint64_t v21;
  uint64_t v22;

  if (a2)
  {
    sub_100063D3C(&qword_100346110);
    v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
    v22 = v4;
    v5 = __CocoaSet.makeIterator()(a1);
    for (i = __CocoaSet.Iterator.next()(v5); i; i = __CocoaSet.Iterator.next()(result))
    {
      v20[0] = i;
      v14 = sub_100063D3C(&qword_100346170);
      swift_dynamicCast(&v21, v20, (char *)&type metadata for Swift.AnyObject + 8, v14, 7);
      v15 = *(_QWORD *)(v4 + 16);
      if (*(_QWORD *)(v4 + 24) <= v15)
      {
        sub_1000CBC04(v15 + 1);
        v4 = v22;
      }
      v7 = v21;
      Hasher.init(_seed:)(v20);
      Hasher._combine(_:)(*(_QWORD *)(v7 + 16));
      result = Hasher._finalize()();
      v9 = v4 + 56;
      v10 = -1 << *(_BYTE *)(v4 + 32);
      v11 = result & ~v10;
      v12 = v11 >> 6;
      if (((-1 << v11) & ~*(_QWORD *)(v4 + 56 + 8 * (v11 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v11) & ~*(_QWORD *)(v4 + 56 + 8 * (v11 >> 6)))) | v11 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v16 = 0;
        v17 = (unint64_t)(63 - v10) >> 6;
        do
        {
          if (++v12 == v17 && (v16 & 1) != 0)
          {
            __break(1u);
            return result;
          }
          v18 = v12 == v17;
          if (v12 == v17)
            v12 = 0;
          v16 |= v18;
          v19 = *(_QWORD *)(v9 + 8 * v12);
        }
        while (v19 == -1);
        v13 = __clz(__rbit64(~v19)) + (v12 << 6);
      }
      *(_QWORD *)(v9 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v13) = v7;
      ++*(_QWORD *)(v4 + 16);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v4;
}

Swift::Int sub_1000CAC34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  _QWORD v24[9];
  uint64_t v25;
  uint64_t v26;

  if (a2)
  {
    sub_100063D3C((uint64_t *)&unk_100346080);
    v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
    v26 = v4;
    v5 = __CocoaSet.makeIterator()(a1);
    v6 = __CocoaSet.Iterator.next()(v5);
    if (v6)
    {
      v7 = v6;
      v8 = type metadata accessor for DSKBLE.BLEConnectionRequest();
      do
      {
        v24[0] = v7;
        swift_dynamicCast(&v25, v24, (char *)&type metadata for Swift.AnyObject + 8, v8, 7);
        v4 = v26;
        v19 = *(_QWORD *)(v26 + 16);
        if (*(_QWORD *)(v26 + 24) <= v19)
        {
          sub_1000CC188(v19 + 1);
          v4 = v26;
        }
        v9 = v25;
        Hasher.init(_seed:)(v24);
        v10 = *(_QWORD *)(v9 + 16);
        v11 = type metadata accessor for UUID(0);
        v12 = sub_1000C69C4((unint64_t *)&unk_100347730, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        swift_retain(v10);
        dispatch thunk of Hashable.hash(into:)(v24, v11, v12);
        swift_release(v10);
        result = Hasher._finalize()();
        v14 = v4 + 56;
        v15 = -1 << *(_BYTE *)(v4 + 32);
        v16 = result & ~v15;
        v17 = v16 >> 6;
        if (((-1 << v16) & ~*(_QWORD *)(v4 + 56 + 8 * (v16 >> 6))) != 0)
        {
          v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v4 + 56 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v20 = 0;
          v21 = (unint64_t)(63 - v15) >> 6;
          do
          {
            if (++v17 == v21 && (v20 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v22 = v17 == v21;
            if (v17 == v21)
              v17 = 0;
            v20 |= v22;
            v23 = *(_QWORD *)(v14 + 8 * v17);
          }
          while (v23 == -1);
          v18 = __clz(__rbit64(~v23)) + (v17 << 6);
        }
        *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v18) = v9;
        ++*(_QWORD *)(v4 + 16);
        v7 = __CocoaSet.Iterator.next()(result);
      }
      while (v7);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v4;
}

Swift::Int sub_1000CAE8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  Swift::Int result;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD v29[9];
  uint64_t v30;
  uint64_t v31;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v29[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    sub_100063D3C((uint64_t *)&unk_1003460A0);
    v9 = static _SetStorage.convert(_:capacity:)(a1, a2);
    v31 = v9;
    v10 = __CocoaSet.makeIterator()(a1);
    v11 = __CocoaSet.Iterator.next()(v10);
    if (v11)
    {
      v12 = v11;
      v13 = type metadata accessor for DSKBLE.BLEPeripheral();
      do
      {
        v29[0] = v12;
        swift_dynamicCast(&v30, v29, (char *)&type metadata for Swift.AnyObject + 8, v13, 7);
        v9 = v31;
        v23 = *(_QWORD *)(v31 + 16);
        if (*(_QWORD *)(v31 + 24) <= v23)
        {
          sub_1000CC4D4(v23 + 1);
          v9 = v31;
        }
        v14 = v30;
        Hasher.init(_seed:)(v29);
        v15 = objc_msgSend(*(id *)(v14 + 24), "identifier");
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        v16 = sub_1000C69C4((unint64_t *)&unk_100347730, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        dispatch thunk of Hashable.hash(into:)(v29, v4, v16);
        (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
        result = Hasher._finalize()();
        v18 = v9 + 56;
        v19 = -1 << *(_BYTE *)(v9 + 32);
        v20 = result & ~v19;
        v21 = v20 >> 6;
        if (((-1 << v20) & ~*(_QWORD *)(v9 + 56 + 8 * (v20 >> 6))) != 0)
        {
          v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v9 + 56 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v24 = 0;
          v25 = (unint64_t)(63 - v19) >> 6;
          do
          {
            if (++v21 == v25 && (v24 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v26 = v21 == v25;
            if (v21 == v25)
              v21 = 0;
            v24 |= v26;
            v27 = *(_QWORD *)(v18 + 8 * v21);
          }
          while (v27 == -1);
          v22 = __clz(__rbit64(~v27)) + (v21 << 6);
        }
        *(_QWORD *)(v18 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
        *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v22) = v14;
        ++*(_QWORD *)(v9 + 16);
        v12 = __CocoaSet.Iterator.next()(result);
      }
      while (v12);
    }
    swift_release(v10);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v9;
}

Swift::Int sub_1000CB128(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  Swift::Int result;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  _QWORD v23[9];
  uint64_t v24;
  uint64_t v25;

  if (a2)
  {
    sub_100063D3C(&qword_100346178);
    v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
    v25 = v4;
    v5 = __CocoaSet.makeIterator()(a1);
    v6 = __CocoaSet.Iterator.next()(v5);
    if (v6)
    {
      v7 = v6;
      v8 = type metadata accessor for DSKExpress.ExpressKey();
      do
      {
        v23[0] = v7;
        swift_dynamicCast(&v24, v23, (char *)&type metadata for Swift.AnyObject + 8, v8, 7);
        v4 = v25;
        v18 = *(_QWORD *)(v25 + 16);
        if (*(_QWORD *)(v25 + 24) <= v18)
        {
          sub_1000CD478(v18 + 1);
          v4 = v25;
        }
        v9 = v24;
        Hasher.init(_seed:)(v23);
        v10 = *(_QWORD *)(v9 + 16);
        v11 = *(_QWORD *)(v9 + 24);
        sub_100063C8C(v10, v11);
        Data.hash(into:)(v23, v10, v11);
        sub_100063CD0(v10, v11);
        result = Hasher._finalize()();
        v13 = v4 + 56;
        v14 = -1 << *(_BYTE *)(v4 + 32);
        v15 = result & ~v14;
        v16 = v15 >> 6;
        if (((-1 << v15) & ~*(_QWORD *)(v4 + 56 + 8 * (v15 >> 6))) != 0)
        {
          v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v4 + 56 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v19 = 0;
          v20 = (unint64_t)(63 - v14) >> 6;
          do
          {
            if (++v16 == v20 && (v19 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v21 = v16 == v20;
            if (v16 == v20)
              v16 = 0;
            v19 |= v21;
            v22 = *(_QWORD *)(v13 + 8 * v16);
          }
          while (v22 == -1);
          v17 = __clz(__rbit64(~v22)) + (v16 << 6);
        }
        *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v17) = v9;
        ++*(_QWORD *)(v4 + 16);
        v7 = __CocoaSet.Iterator.next()(result);
      }
      while (v7);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v4;
}

Swift::Int sub_1000CB34C(uint64_t a1)
{
  return sub_1000CCBD0(a1, (uint64_t *)&unk_1003460D0);
}

Swift::Int sub_1000CB358(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  _QWORD *v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100063D3C((uint64_t *)&unk_100346070);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v31 = v2;
    v32 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    result = swift_retain(v3);
    v13 = 0;
    while (1)
    {
      if (v9)
      {
        v15 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v16 = v15 | (v13 << 6);
      }
      else
      {
        v17 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v17 >= v10)
          goto LABEL_36;
        v18 = v32[v17];
        ++v13;
        if (!v18)
        {
          v13 = v17 + 1;
          if (v17 + 1 >= v10)
            goto LABEL_36;
          v18 = v32[v13];
          if (!v18)
          {
            v13 = v17 + 2;
            if (v17 + 2 >= v10)
              goto LABEL_36;
            v18 = v32[v13];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v10)
              {
LABEL_36:
                swift_release(v3);
                v2 = v31;
                v30 = 1 << *(_BYTE *)(v3 + 32);
                if (v30 > 63)
                  bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v32 = -1 << v30;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v32[v19];
              if (!v18)
              {
                while (1)
                {
                  v13 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v13 >= v10)
                    goto LABEL_36;
                  v18 = v32[v13];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v13 = v19;
            }
          }
        }
LABEL_26:
        v9 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v13 << 6);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
      Hasher.init(_seed:)(v33);
      v21 = *(_QWORD *)(v20 + 16);
      v22 = *(_QWORD *)(v20 + 24);
      swift_bridgeObjectRetain(v22);
      String.hash(into:)(v33, v21, v22);
      swift_bridgeObjectRelease(v22);
      result = Hasher._finalize()();
      v23 = -1 << *(_BYTE *)(v6 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v11 + 8 * (v24 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v11 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v11 + 8 * v25);
        }
        while (v29 == -1);
        v14 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

Swift::Int sub_1000CB640(uint64_t a1)
{
  return sub_1000CCBD0(a1, (uint64_t *)&unk_100346100);
}

Swift::Int sub_1000CB64C(uint64_t a1)
{
  Swift::Int *v1;
  Swift::Int *v2;
  Swift::Int v3;
  uint64_t v4;
  Swift::Int result;
  Swift::Int v6;
  int64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  Swift::Int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int *v29;
  uint64_t v30[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100063D3C(&qword_100346118);
  result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = result;
  if (*(_QWORD *)(v3 + 16))
  {
    v29 = v2;
    v7 = 0;
    v8 = (_QWORD *)(v3 + 56);
    v9 = 1 << *(_BYTE *)(v3 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v3 + 56);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 56;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v7 << 6);
      }
      else
      {
        v17 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v17 >= v12)
          goto LABEL_36;
        v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          v7 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_36;
          v18 = v8[v7];
          if (!v18)
          {
            v7 = v17 + 2;
            if (v17 + 2 >= v12)
              goto LABEL_36;
            v18 = v8[v7];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_36:
                v28 = 1 << *(_BYTE *)(v3 + 32);
                if (v28 > 63)
                  bzero((void *)(v3 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v28;
                v2 = v29;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  v7 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v7 >= v12)
                    goto LABEL_36;
                  v18 = v8[v7];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v7 = v19;
            }
          }
        }
LABEL_26:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
      Hasher.init(_seed:)(v30);
      Hasher._combine(_:)(v20);
      result = Hasher._finalize()();
      v21 = -1 << *(_BYTE *)(v6 + 32);
      v22 = result & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v26 = v23 == v25;
          if (v23 == v25)
            v23 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v23);
        }
        while (v27 == -1);
        v14 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

Swift::Int sub_1000CB8F4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD v32[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100063D3C(&qword_1003489C0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v31 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    result = swift_retain(v3);
    v13 = 0;
    while (1)
    {
      if (v9)
      {
        v15 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v16 = v15 | (v13 << 6);
      }
      else
      {
        v17 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v17 >= v10)
          goto LABEL_36;
        v18 = v31[v17];
        ++v13;
        if (!v18)
        {
          v13 = v17 + 1;
          if (v17 + 1 >= v10)
            goto LABEL_36;
          v18 = v31[v13];
          if (!v18)
          {
            v13 = v17 + 2;
            if (v17 + 2 >= v10)
              goto LABEL_36;
            v18 = v31[v13];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v10)
              {
LABEL_36:
                swift_release(v3);
                v30 = 1 << *(_BYTE *)(v3 + 32);
                if (v30 > 63)
                  bzero(v31, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v31 = -1 << v30;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v31[v19];
              if (!v18)
              {
                while (1)
                {
                  v13 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v13 >= v10)
                    goto LABEL_36;
                  v18 = v31[v13];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v13 = v19;
            }
          }
        }
LABEL_26:
        v9 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v13 << 6);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
      Hasher.init(_seed:)(v32);
      v21 = type metadata accessor for UUID(0);
      v22 = sub_1000C69C4((unint64_t *)&unk_100347730, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      dispatch thunk of Hashable.hash(into:)(v32, v21, v22);
      result = Hasher._finalize()();
      v23 = -1 << *(_BYTE *)(v6 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v11 + 8 * (v24 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v11 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v11 + 8 * v25);
        }
        while (v29 == -1);
        v14 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

Swift::Int sub_1000CBC04(uint64_t a1)
{
  Swift::Int *v1;
  Swift::Int *v2;
  Swift::Int v3;
  uint64_t v4;
  Swift::Int result;
  Swift::Int v6;
  int64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  Swift::Int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int *v29;
  uint64_t v30[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100063D3C(&qword_100346110);
  result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = result;
  if (*(_QWORD *)(v3 + 16))
  {
    v29 = v2;
    v7 = 0;
    v8 = (_QWORD *)(v3 + 56);
    v9 = 1 << *(_BYTE *)(v3 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v3 + 56);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 56;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v7 << 6);
      }
      else
      {
        v17 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v17 >= v12)
          goto LABEL_36;
        v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          v7 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_36;
          v18 = v8[v7];
          if (!v18)
          {
            v7 = v17 + 2;
            if (v17 + 2 >= v12)
              goto LABEL_36;
            v18 = v8[v7];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_36:
                v28 = 1 << *(_BYTE *)(v3 + 32);
                if (v28 > 63)
                  bzero((void *)(v3 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v28;
                v2 = v29;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  v7 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v7 >= v12)
                    goto LABEL_36;
                  v18 = v8[v7];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v7 = v19;
            }
          }
        }
LABEL_26:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
      Hasher.init(_seed:)(v30);
      Hasher._combine(_:)(*(_QWORD *)(v20 + 16));
      result = Hasher._finalize()();
      v21 = -1 << *(_BYTE *)(v6 + 32);
      v22 = result & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v26 = v23 == v25;
          if (v23 == v25)
            v23 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v23);
        }
        while (v27 == -1);
        v14 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

Swift::Int sub_1000CBEAC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100063D3C(&qword_1003460F8);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    result = swift_retain(v3);
    v13 = 0;
    while (1)
    {
      if (v9)
      {
        v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v18 >= v10)
          goto LABEL_36;
        v19 = v33[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v10)
            goto LABEL_36;
          v19 = v33[v13];
          if (!v19)
          {
            v13 = v18 + 2;
            if (v18 + 2 >= v10)
              goto LABEL_36;
            v19 = v33[v13];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v10)
              {
LABEL_36:
                swift_release(v3);
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  v13 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v13 >= v10)
                    goto LABEL_36;
                  v19 = v33[v13];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v13 = v20;
            }
          }
        }
LABEL_26:
        v9 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
      v22 = *v21;
      v23 = v21[1];
      Hasher.init(_seed:)(v34);
      Data.hash(into:)(v34, v22, v23);
      result = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v11 + 8 * v26);
        }
        while (v30 == -1);
        v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
      *v15 = v22;
      v15[1] = v23;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

Swift::Int sub_1000CC188(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  Swift::Int result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  int64_t v33;
  _QWORD *v34;
  _QWORD v35[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100063D3C((uint64_t *)&unk_100346080);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v34 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v32 = v2;
    v33 = (unint64_t)(v7 + 63) >> 6;
    v10 = v5 + 56;
    result = swift_retain(v3);
    v12 = 0;
    while (1)
    {
      if (v9)
      {
        v14 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v15 = v14 | (v12 << 6);
      }
      else
      {
        v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v16 >= v33)
          goto LABEL_36;
        v17 = v34[v16];
        ++v12;
        if (!v17)
        {
          v12 = v16 + 1;
          if (v16 + 1 >= v33)
            goto LABEL_36;
          v17 = v34[v12];
          if (!v17)
          {
            v12 = v16 + 2;
            if (v16 + 2 >= v33)
              goto LABEL_36;
            v17 = v34[v12];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v33)
              {
LABEL_36:
                swift_release(v3);
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v34, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v34 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v17 = v34[v18];
              if (!v17)
              {
                while (1)
                {
                  v12 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_42;
                  if (v12 >= v33)
                    goto LABEL_36;
                  v17 = v34[v12];
                  ++v18;
                  if (v17)
                    goto LABEL_26;
                }
              }
              v12 = v18;
            }
          }
        }
LABEL_26:
        v9 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      v19 = v3;
      v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v15);
      Hasher.init(_seed:)(v35);
      v21 = *(_QWORD *)(v20 + 16);
      v22 = type metadata accessor for UUID(0);
      v23 = sub_1000C69C4((unint64_t *)&unk_100347730, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      swift_retain(v21);
      dispatch thunk of Hashable.hash(into:)(v35, v22, v23);
      swift_release(v21);
      result = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v10 + 8 * (v25 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v10 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v10 + 8 * v26);
        }
        while (v30 == -1);
        v13 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v13) = v20;
      ++*(_QWORD *)(v6 + 16);
      v3 = v19;
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

Swift::Int sub_1000CC4D4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  Swift::Int result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD v40[9];

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v39 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100063D3C((uint64_t *)&unk_1003460A0);
  v9 = static _SetStorage.resize(original:capacity:move:)(v8, a1, 1);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_39;
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 56);
  v38 = (_QWORD *)(v8 + 56);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v36 = v2;
  v37 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 56;
  result = swift_retain(v8);
  v17 = 0;
  while (1)
  {
    if (v14)
    {
      v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v20 = v19 | (v17 << 6);
      goto LABEL_26;
    }
    v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return result;
    }
    if (v21 >= v37)
      goto LABEL_35;
    v22 = v38[v21];
    ++v17;
    if (!v22)
    {
      v17 = v21 + 1;
      if (v21 + 1 >= v37)
        goto LABEL_35;
      v22 = v38[v17];
      if (!v22)
      {
        v17 = v21 + 2;
        if (v21 + 2 >= v37)
          goto LABEL_35;
        v22 = v38[v17];
        if (!v22)
          break;
      }
    }
LABEL_25:
    v14 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v17 << 6);
LABEL_26:
    v24 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v20);
    Hasher.init(_seed:)(v40);
    v25 = objc_msgSend(*(id *)(v24 + 24), "identifier");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v26 = sub_1000C69C4((unint64_t *)&unk_100347730, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v40, v4, v26);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v7, v4);
    result = Hasher._finalize()();
    v27 = -1 << *(_BYTE *)(v10 + 32);
    v28 = result & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v15 + 8 * (v28 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v15 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }
        v32 = v29 == v31;
        if (v29 == v31)
          v29 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v15 + 8 * v29);
      }
      while (v33 == -1);
      v18 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v18) = v24;
    ++*(_QWORD *)(v10 + 16);
  }
  v23 = v21 + 3;
  if (v23 < v37)
  {
    v22 = v38[v23];
    if (!v22)
    {
      while (1)
      {
        v17 = v23 + 1;
        if (__OFADD__(v23, 1))
          goto LABEL_41;
        if (v17 >= v37)
          goto LABEL_35;
        v22 = v38[v17];
        ++v23;
        if (v22)
          goto LABEL_25;
      }
    }
    v17 = v23;
    goto LABEL_25;
  }
LABEL_35:
  swift_release(v8);
  v2 = v36;
  v34 = 1 << *(_BYTE *)(v8 + 32);
  if (v34 > 63)
    bzero(v38, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v38 = -1 << v34;
  *(_QWORD *)(v8 + 16) = 0;
LABEL_39:
  result = swift_release(v8);
  *v2 = v10;
  return result;
}

uint64_t sub_1000CC860(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, unint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  uint64_t v41;

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v41 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100063D3C((uint64_t *)&unk_100348A00);
  v9 = static _SetStorage.resize(original:capacity:move:)(v8, a1, 1);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_39;
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 56);
  v40 = (_QWORD *)(v8 + 56);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v38 = v2;
  v39 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 56;
  result = swift_retain(v8);
  v17 = 0;
  while (1)
  {
    if (v14)
    {
      v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v20 = v19 | (v17 << 6);
      goto LABEL_26;
    }
    v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return result;
    }
    if (v21 >= v39)
      goto LABEL_35;
    v22 = v40[v21];
    ++v17;
    if (!v22)
    {
      v17 = v21 + 1;
      if (v21 + 1 >= v39)
        goto LABEL_35;
      v22 = v40[v17];
      if (!v22)
      {
        v17 = v21 + 2;
        if (v21 + 2 >= v39)
          goto LABEL_35;
        v22 = v40[v17];
        if (!v22)
          break;
      }
    }
LABEL_25:
    v14 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v17 << 6);
LABEL_26:
    v24 = v8;
    v25 = *(_QWORD *)(v8 + 48);
    v26 = *(_QWORD *)(v41 + 72);
    v27 = *(void (**)(char *, unint64_t, uint64_t))(v41 + 32);
    v27(v7, v25 + v26 * v20, v4);
    v28 = *(_QWORD *)(v10 + 40);
    v29 = sub_1000C69C4((unint64_t *)&unk_100347730, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v28, v4, v29);
    v30 = -1 << *(_BYTE *)(v10 + 32);
    v31 = result & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v15 + 8 * (v31 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v15 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }
        v35 = v32 == v34;
        if (v32 == v34)
          v32 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v15 + 8 * v32);
      }
      while (v36 == -1);
      v18 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v27)(*(_QWORD *)(v10 + 48) + v18 * v26, v7, v4);
    ++*(_QWORD *)(v10 + 16);
    v8 = v24;
  }
  v23 = v21 + 3;
  if (v23 < v39)
  {
    v22 = v40[v23];
    if (!v22)
    {
      while (1)
      {
        v17 = v23 + 1;
        if (__OFADD__(v23, 1))
          goto LABEL_41;
        if (v17 >= v39)
          goto LABEL_35;
        v22 = v40[v17];
        ++v23;
        if (v22)
          goto LABEL_25;
      }
    }
    v17 = v23;
    goto LABEL_25;
  }
LABEL_35:
  swift_release(v8);
  v2 = v38;
  v37 = 1 << *(_BYTE *)(v8 + 32);
  if (v37 > 63)
    bzero(v40, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v40 = -1 << v37;
  *(_QWORD *)(v8 + 16) = 0;
LABEL_39:
  result = swift_release(v8);
  *v2 = v10;
  return result;
}

Swift::Int sub_1000CCBD0(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;

  v3 = v2;
  v4 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v5 = a1;
  else
    v5 = *(_QWORD *)(*v2 + 24);
  sub_100063D3C(a2);
  v6 = static _SetStorage.resize(original:capacity:move:)(v4, v5, 1);
  v7 = v6;
  if (*(_QWORD *)(v4 + 16))
  {
    v31 = v3;
    v8 = 1 << *(_BYTE *)(v4 + 32);
    v9 = (_QWORD *)(v4 + 56);
    if (v8 < 64)
      v10 = ~(-1 << v8);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v4 + 56);
    v12 = (unint64_t)(v8 + 63) >> 6;
    v13 = v6 + 56;
    result = swift_retain(v4);
    v15 = 0;
    while (1)
    {
      if (v11)
      {
        v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v18 = v17 | (v15 << 6);
      }
      else
      {
        v19 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v19 >= v12)
          goto LABEL_36;
        v20 = v9[v19];
        ++v15;
        if (!v20)
        {
          v15 = v19 + 1;
          if (v19 + 1 >= v12)
            goto LABEL_36;
          v20 = v9[v15];
          if (!v20)
          {
            v15 = v19 + 2;
            if (v19 + 2 >= v12)
              goto LABEL_36;
            v20 = v9[v15];
            if (!v20)
            {
              v21 = v19 + 3;
              if (v21 >= v12)
              {
LABEL_36:
                swift_release(v4);
                v3 = v31;
                v30 = 1 << *(_BYTE *)(v4 + 32);
                if (v30 > 63)
                  bzero((void *)(v4 + 56), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v9 = -1 << v30;
                *(_QWORD *)(v4 + 16) = 0;
                break;
              }
              v20 = v9[v21];
              if (!v20)
              {
                while (1)
                {
                  v15 = v21 + 1;
                  if (__OFADD__(v21, 1))
                    goto LABEL_42;
                  if (v15 >= v12)
                    goto LABEL_36;
                  v20 = v9[v15];
                  ++v21;
                  if (v20)
                    goto LABEL_26;
                }
              }
              v15 = v21;
            }
          }
        }
LABEL_26:
        v11 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v15 << 6);
      }
      v22 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v18);
      result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v7 + 40));
      v23 = -1 << *(_BYTE *)(v7 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v13 + 8 * v25);
        }
        while (v29 == -1);
        v16 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v16) = v22;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release(v4);
  *v3 = v7;
  return result;
}

Swift::Int sub_1000CCE68(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  Swift::Int result;
  int64_t i;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  int64_t v39;
  _QWORD v40[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100063D3C(&qword_100346198);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v38 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v36 = v2;
    v37 = (unint64_t)(v7 + 63) >> 6;
    v10 = v5 + 56;
    result = swift_retain(v3);
    for (i = 0; ; i = v39)
    {
      if (v9)
      {
        v15 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v39 = i;
        v16 = v15 | (i << 6);
      }
      else
      {
        v17 = i + 1;
        if (__OFADD__(i, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v17 >= v37)
          goto LABEL_36;
        v18 = v38[v17];
        v19 = i + 1;
        if (!v18)
        {
          v19 = i + 2;
          if (i + 2 >= v37)
            goto LABEL_36;
          v18 = v38[v19];
          if (!v18)
          {
            v19 = i + 3;
            if (i + 3 >= v37)
              goto LABEL_36;
            v18 = v38[v19];
            if (!v18)
            {
              v20 = i + 4;
              if (i + 4 >= v37)
              {
LABEL_36:
                swift_release(v3);
                v2 = v36;
                v35 = 1 << *(_BYTE *)(v3 + 32);
                if (v35 > 63)
                  bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v38 = -1 << v35;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v38[v20];
              if (!v18)
              {
                while (1)
                {
                  v19 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v19 >= v37)
                    goto LABEL_36;
                  v18 = v38[v19];
                  ++v20;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v19 = i + 4;
            }
          }
        }
LABEL_26:
        v9 = (v18 - 1) & v18;
        v39 = v19;
        v16 = __clz(__rbit64(v18)) + (v19 << 6);
      }
      v21 = v3;
      v22 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 40 * v16);
      v23 = *v22;
      v24 = v22[1];
      v25 = v22[2];
      v26 = v22[3];
      v27 = v22[4];
      Hasher.init(_seed:)(v40);
      swift_bridgeObjectRetain(v24);
      String.hash(into:)(v40, v23, v24);
      swift_bridgeObjectRelease(v24);
      result = Hasher._finalize()();
      v28 = -1 << *(_BYTE *)(v6 + 32);
      v29 = result & ~v28;
      v30 = v29 >> 6;
      if (((-1 << v29) & ~*(_QWORD *)(v10 + 8 * (v29 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v10 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v31 = 0;
        v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v33 = v30 == v32;
          if (v30 == v32)
            v30 = 0;
          v31 |= v33;
          v34 = *(_QWORD *)(v10 + 8 * v30);
        }
        while (v34 == -1);
        v13 = __clz(__rbit64(~v34)) + (v30 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 40 * v13);
      *v14 = v23;
      v14[1] = v24;
      v14[2] = v25;
      v14[3] = v26;
      v14[4] = v27;
      ++*(_QWORD *)(v6 + 16);
      v3 = v21;
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

Swift::Int sub_1000CD19C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100063D3C(&qword_100346190);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    result = swift_retain(v3);
    v13 = 0;
    while (1)
    {
      if (v9)
      {
        v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v18 >= v10)
          goto LABEL_36;
        v19 = v33[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v10)
            goto LABEL_36;
          v19 = v33[v13];
          if (!v19)
          {
            v13 = v18 + 2;
            if (v18 + 2 >= v10)
              goto LABEL_36;
            v19 = v33[v13];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v10)
              {
LABEL_36:
                swift_release(v3);
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  v13 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v13 >= v10)
                    goto LABEL_36;
                  v19 = v33[v13];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v13 = v20;
            }
          }
        }
LABEL_26:
        v9 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
      v22 = *v21;
      v23 = v21[1];
      Hasher.init(_seed:)(v34);
      String.hash(into:)(v34, v22, v23);
      result = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v11 + 8 * v26);
        }
        while (v30 == -1);
        v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
      *v15 = v22;
      v15[1] = v23;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

Swift::Int sub_1000CD478(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  _QWORD *v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100063D3C(&qword_100346178);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v31 = v2;
    v32 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    result = swift_retain(v3);
    v13 = 0;
    while (1)
    {
      if (v9)
      {
        v15 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v16 = v15 | (v13 << 6);
      }
      else
      {
        v17 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v17 >= v10)
          goto LABEL_36;
        v18 = v32[v17];
        ++v13;
        if (!v18)
        {
          v13 = v17 + 1;
          if (v17 + 1 >= v10)
            goto LABEL_36;
          v18 = v32[v13];
          if (!v18)
          {
            v13 = v17 + 2;
            if (v17 + 2 >= v10)
              goto LABEL_36;
            v18 = v32[v13];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v10)
              {
LABEL_36:
                swift_release(v3);
                v2 = v31;
                v30 = 1 << *(_BYTE *)(v3 + 32);
                if (v30 > 63)
                  bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v32 = -1 << v30;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v32[v19];
              if (!v18)
              {
                while (1)
                {
                  v13 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v13 >= v10)
                    goto LABEL_36;
                  v18 = v32[v13];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v13 = v19;
            }
          }
        }
LABEL_26:
        v9 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v13 << 6);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
      Hasher.init(_seed:)(v33);
      v21 = *(_QWORD *)(v20 + 16);
      v22 = *(_QWORD *)(v20 + 24);
      sub_100063C8C(v21, v22);
      Data.hash(into:)(v33, v21, v22);
      sub_100063CD0(v21, v22);
      result = Hasher._finalize()();
      v23 = -1 << *(_BYTE *)(v6 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v11 + 8 * (v24 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v11 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v11 + 8 * v25);
        }
        while (v29 == -1);
        v14 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

unint64_t sub_1000CD768(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  unint64_t result;
  _QWORD v8[9];

  Hasher.init(_seed:)(v8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v8, v4, v5);
  swift_bridgeObjectRelease(v5);
  v6 = Hasher._finalize()();
  result = _HashTable.nextHole(atOrAfter:)(v6 & ~(-1 << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1 << *(_BYTE *)(a2 + 32)));
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

unint64_t sub_1000CD820(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  unint64_t result;
  _QWORD v8[9];

  Hasher.init(_seed:)(v8);
  v4 = type metadata accessor for UUID(0);
  v5 = sub_1000C69C4((unint64_t *)&unk_100347730, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v8, v4, v5);
  v6 = Hasher._finalize()();
  result = _HashTable.nextHole(atOrAfter:)(v6 & ~(-1 << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1 << *(_BYTE *)(a2 + 32)));
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

unint64_t sub_1000CD900(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;
  unint64_t result;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6);
  Hasher._combine(_:)(*(_QWORD *)(a1 + 16));
  v4 = Hasher._finalize()();
  result = _HashTable.nextHole(atOrAfter:)(v4 & ~(-1 << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1 << *(_BYTE *)(a2 + 32)));
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

unint64_t sub_1000CD9A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  unint64_t result;
  _QWORD v9[9];

  Hasher.init(_seed:)(v9);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = type metadata accessor for UUID(0);
  v6 = sub_1000C69C4((unint64_t *)&unk_100347730, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  swift_retain(v4);
  dispatch thunk of Hashable.hash(into:)(v9, v5, v6);
  swift_release(v4);
  v7 = Hasher._finalize()();
  result = _HashTable.nextHole(atOrAfter:)(v7 & ~(-1 << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1 << *(_BYTE *)(a2 + 32)));
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

unint64_t sub_1000CDAA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  uint64_t v10;
  Swift::Int v11;
  unint64_t result;
  _QWORD v14[9];

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v14[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)(v14);
  v9 = objc_msgSend(*(id *)(a1 + 24), "identifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  v10 = sub_1000C69C4((unint64_t *)&unk_100347730, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v14, v4, v10);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  v11 = Hasher._finalize()();
  result = _HashTable.nextHole(atOrAfter:)(v11 & ~(-1 << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1 << *(_BYTE *)(a2 + 32)));
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

unint64_t sub_1000CDBEC(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;
  unint64_t result;

  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a2 + 40));
  result = _HashTable.nextHole(atOrAfter:)(v4 & ~(-1 << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1 << *(_BYTE *)(a2 + 32)));
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

unint64_t sub_1000CDC6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  Swift::Int v6;
  unint64_t result;
  _QWORD v8[9];

  Hasher.init(_seed:)(v8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  sub_100063C8C(v4, v5);
  Data.hash(into:)(v8, v4, v5);
  sub_100063CD0(v4, v5);
  v6 = Hasher._finalize()();
  result = _HashTable.nextHole(atOrAfter:)(v6 & ~(-1 << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1 << *(_BYTE *)(a2 + 32)));
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

uint64_t sub_1000CDD2C(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  _QWORD v32[9];

  v4 = v3;
  v6 = result;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_22;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000CB358(v9);
  }
  else
  {
    if (v8 > v7)
    {
      result = (uint64_t)sub_1000D1008((uint64_t *)&unk_100346070);
      goto LABEL_22;
    }
    sub_1000D171C(v9);
  }
  v10 = *v3;
  Hasher.init(_seed:)(v32);
  v11 = *(_QWORD *)(v6 + 16);
  v12 = *(_QWORD *)(v6 + 24);
  swift_bridgeObjectRetain(v12);
  String.hash(into:)(v32, v11, v12);
  swift_bridgeObjectRelease(v12);
  result = Hasher._finalize()();
  v13 = -1 << *(_BYTE *)(v10 + 32);
  a2 = result & ~v13;
  v14 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v15 = type metadata accessor for DSKBLE.BLEScanRequest();
    v16 = *(_QWORD *)(v10 + 48);
    v17 = *(_QWORD *)(v16 + 8 * a2);
    v18 = *(_QWORD *)(v17 + 16);
    v19 = *(_QWORD *)(v17 + 24);
    v20 = *(_QWORD *)(v6 + 16);
    v21 = *(_QWORD *)(v6 + 24);
    v22 = v18 == v20 && v19 == v21;
    if (v22
      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v19, *(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 24), 0), (result & 1) != 0))
    {
LABEL_21:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v15);
      __break(1u);
    }
    else
    {
      v23 = ~v13;
      while (1)
      {
        a2 = (a2 + 1) & v23;
        if (((*(_QWORD *)(v14 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v24 = *(_QWORD *)(v16 + 8 * a2);
        v25 = *(_QWORD *)(v24 + 16);
        v26 = *(_QWORD *)(v24 + 24);
        if (v25 != v20 || v26 != v21)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v26, v20, v21, 0);
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v28 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v28 + 48) + 8 * a2) = v6;
  v29 = *(_QWORD *)(v28 + 16);
  v30 = __OFADD__(v29, 1);
  v31 = v29 + 1;
  if (v30)
    __break(1u);
  else
    *(_QWORD *)(v28 + 16) = v31;
  return result;
}

uint64_t sub_1000CDEF0(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  Swift::UInt v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  _QWORD v17[9];

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000CB64C(v8);
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_1000D0584();
      goto LABEL_14;
    }
    sub_1000D11A8(v8);
  }
  v9 = *v3;
  Hasher.init(_seed:)(v17);
  Hasher._combine(_:)(v5);
  result = Hasher._finalize()();
  v10 = -1 << *(_BYTE *)(v9 + 32);
  a2 = result & ~v10;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v11 = *(_QWORD *)(v9 + 48);
    if (*(_QWORD *)(v11 + 8 * a2) == v5)
    {
LABEL_13:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for DSK.Module);
      __break(1u);
    }
    else
    {
      v12 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(v11 + 8 * a2) == v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v13 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v13 + 48) + 8 * a2) = v5;
  v14 = *(_QWORD *)(v13 + 16);
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    *(_QWORD *)(v13 + 16) = v16;
  return result;
}

uint64_t sub_1000CE03C(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::UInt v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  _QWORD v19[9];

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000CBC04(v8);
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_1000D1008(&qword_100346110);
      goto LABEL_14;
    }
    sub_1000D19D4(v8);
  }
  v9 = *v3;
  Hasher.init(_seed:)(v19);
  v10 = *(_QWORD *)(v5 + 16);
  Hasher._combine(_:)(v10);
  result = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v9 + 32);
  a2 = result & ~v11;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v12 = *(_QWORD *)(v9 + 48);
    if (*(_QWORD *)(*(_QWORD *)(v12 + 8 * a2) + 16) == v10)
    {
LABEL_13:
      v14 = sub_100063D3C(&qword_100346170);
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v14);
      __break(1u);
    }
    else
    {
      v13 = ~v11;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(*(_QWORD *)(v12 + 8 * a2) + 16) == v10)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v15 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v15 + 48) + 8 * a2) = v5;
  v16 = *(_QWORD *)(v15 + 16);
  v17 = __OFADD__(v16, 1);
  v18 = v16 + 1;
  if (v17)
    __break(1u);
  else
    *(_QWORD *)(v15 + 16) = v18;
  return result;
}

uint64_t sub_1000CE1A8(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[9];

  v4 = v3;
  v6 = result;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_14;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000CB8F4(v9);
  }
  else
  {
    if (v8 > v7)
    {
      result = (uint64_t)sub_1000D1008(&qword_1003489C0);
      goto LABEL_14;
    }
    sub_1000D1420(v9);
  }
  v10 = *v3;
  Hasher.init(_seed:)(v25);
  v11 = v6 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
  v12 = type metadata accessor for UUID(0);
  v13 = sub_1000C69C4((unint64_t *)&unk_100347730, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v25, v12, v13);
  result = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v10 + 32);
  a2 = result & ~v14;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v24 = type metadata accessor for Peer(0);
    v15 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * a2);
    v16 = v15 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
    swift_retain(v15);
    LOBYTE(v16) = static UUID.== infix(_:_:)(v16, v11);
    result = swift_release(v15);
    if ((v16 & 1) != 0)
    {
LABEL_13:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v24);
      __break(1u);
    }
    else
    {
      v17 = ~v14;
      while (1)
      {
        a2 = (a2 + 1) & v17;
        if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v18 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * a2);
        v19 = v18 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
        swift_retain(v18);
        LOBYTE(v19) = static UUID.== infix(_:_:)(v19, v11);
        result = swift_release(v18);
        if ((v19 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v20 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v20 + 48) + 8 * a2) = v6;
  v21 = *(_QWORD *)(v20 + 16);
  v22 = __OFADD__(v21, 1);
  v23 = v21 + 1;
  if (v22)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v23;
  return result;
}

Swift::Int sub_1000CE3AC(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  Swift::Int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t __s1;

  v7 = result;
  v8 = *(_QWORD *)(*v4 + 16);
  v9 = *(_QWORD *)(*v4 + 24);
  if (v9 <= v8 || (a4 & 1) == 0)
  {
    v10 = v8 + 1;
    if ((a4 & 1) != 0)
    {
      sub_1000CBEAC(v10);
    }
    else
    {
      if (v9 > v8)
      {
        result = (Swift::Int)sub_1000D0718();
        goto LABEL_10;
      }
      sub_1000D1C54(v10);
    }
    v11 = *v4;
    Hasher.init(_seed:)(&__s1);
    Data.hash(into:)(&__s1, v7, a2);
    result = Hasher._finalize()();
    a3 = result & ~(-1 << *(_BYTE *)(v11 + 32));
    if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
      __asm { BR              X8 }
  }
LABEL_10:
  v12 = *v4;
  *(_QWORD *)(*v4 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v13 = (Swift::Int *)(*(_QWORD *)(v12 + 48) + 16 * a3);
  *v13 = v7;
  v13[1] = a2;
  v14 = *(_QWORD *)(v12 + 16);
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
  {
    __break(1u);
    JUMPOUT(0x1000CED14);
  }
  *(_QWORD *)(v12 + 16) = v16;
  return result;
}

uint64_t sub_1000CEDF0(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[9];

  v4 = v3;
  v6 = result;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_14;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000CC188(v9);
  }
  else
  {
    if (v8 > v7)
    {
      result = (uint64_t)sub_1000D1008((uint64_t *)&unk_100346080);
      goto LABEL_14;
    }
    sub_1000D1F04(v9);
  }
  v10 = *v3;
  Hasher.init(_seed:)(v27);
  v11 = *(_QWORD *)(v6 + 16);
  v12 = type metadata accessor for UUID(0);
  v13 = sub_1000C69C4((unint64_t *)&unk_100347730, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  swift_retain(v11);
  dispatch thunk of Hashable.hash(into:)(v27, v12, v13);
  swift_release(v11);
  result = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v10 + 32);
  a2 = result & ~v14;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v26 = type metadata accessor for DSKBLE.BLEConnectionRequest();
    v15 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * a2);
    v16 = *(_QWORD *)(v15 + 16) + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
    v17 = *(_QWORD *)(v6 + 16) + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
    swift_retain(v15);
    LOBYTE(v16) = static UUID.== infix(_:_:)(v16, v17);
    result = swift_release(v15);
    if ((v16 & 1) != 0)
    {
LABEL_13:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v26);
      __break(1u);
    }
    else
    {
      v18 = ~v14;
      while (1)
      {
        a2 = (a2 + 1) & v18;
        if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v19 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * a2);
        v20 = *(_QWORD *)(v19 + 16) + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
        v21 = *(_QWORD *)(v6 + 16) + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
        swift_retain(v19);
        LOBYTE(v20) = static UUID.== infix(_:_:)(v20, v21);
        result = swift_release(v19);
        if ((v20 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v22 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v22 + 48) + 8 * a2) = v6;
  v23 = *(_QWORD *)(v22 + 16);
  v24 = __OFADD__(v23, 1);
  v25 = v23 + 1;
  if (v24)
    __break(1u);
  else
    *(_QWORD *)(v22 + 16) = v25;
  return result;
}

void sub_1000CF01C(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  char v15;
  uint64_t v16;
  id v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v4 = v3;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_14;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000CCBD0(v9, (uint64_t *)&unk_1003460D0);
  }
  else
  {
    if (v8 > v7)
    {
      sub_1000D0AEC((uint64_t *)&unk_1003460D0);
      goto LABEL_14;
    }
    sub_1000D28A4(v9, (uint64_t *)&unk_1003460D0);
  }
  v10 = *v3;
  v11 = NSObject._rawHashValue(seed:)(*(_QWORD *)(*v3 + 40));
  v12 = -1 << *(_BYTE *)(v10 + 32);
  a2 = v11 & ~v12;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v13 = type metadata accessor for UWBSession();
    v14 = *(id *)(*(_QWORD *)(v10 + 48) + 8 * a2);
    v15 = static NSObject.== infix(_:_:)(v14);

    if ((v15 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v13);
      __break(1u);
    }
    else
    {
      v16 = ~v12;
      while (1)
      {
        a2 = (a2 + 1) & v16;
        if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v17 = *(id *)(*(_QWORD *)(v10 + 48) + 8 * a2);
        v18 = static NSObject.== infix(_:_:)(v17);

        if ((v18 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v19 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v19 + 48) + 8 * a2) = a1;
  v20 = *(_QWORD *)(v19 + 16);
  v21 = __OFADD__(v20, 1);
  v22 = v20 + 1;
  if (v21)
    __break(1u);
  else
    *(_QWORD *)(v19 + 16) = v22;
}

uint64_t sub_1000CF1B0(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, unint64_t, uint64_t);
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;

  v31 = a1;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(*v3 + 16);
  v12 = *(_QWORD *)(*v3 + 24);
  v30 = v3;
  if (v12 > v11 && (a3 & 1) != 0)
    goto LABEL_12;
  v13 = v11 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000CC860(v13);
  }
  else
  {
    if (v12 > v11)
    {
      sub_1000D08C8();
      goto LABEL_12;
    }
    sub_1000D2578(v13);
  }
  v14 = *v3;
  v15 = *(_QWORD *)(*v3 + 40);
  v16 = sub_1000C69C4((unint64_t *)&unk_100347730, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v17 = dispatch thunk of Hashable._rawHashValue(seed:)(v15, v6, v16);
  v18 = -1 << *(_BYTE *)(v14 + 32);
  a2 = v17 & ~v18;
  if (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v19 = ~v18;
    v20 = *(_QWORD *)(v7 + 72);
    v21 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v21(v10, *(_QWORD *)(v14 + 48) + v20 * a2, v6);
      v22 = sub_1000C69C4((unint64_t *)&qword_100346150, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v23 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v31, v6, v22);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      if ((v23 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v19;
    }
    while (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v24 = v31;
  v25 = *v30;
  *(_QWORD *)(*v30 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v25 + 48) + *(_QWORD *)(v7 + 72) * a2, v24, v6);
  v27 = *(_QWORD *)(v25 + 16);
  v28 = __OFADD__(v27, 1);
  v29 = v27 + 1;
  if (!v28)
  {
    *(_QWORD *)(v25 + 16) = v29;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

void sub_1000CF3BC(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  _QWORD v34[9];

  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(*v3 + 16);
  v13 = *(_QWORD *)(*v3 + 24);
  v33 = v3;
  if (v13 > v12 && (a3 & 1) != 0)
    goto LABEL_12;
  v14 = v12 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000CC4D4(v14);
  }
  else
  {
    if (v13 > v12)
    {
      sub_1000D1008((uint64_t *)&unk_1003460A0);
      goto LABEL_12;
    }
    sub_1000D2218(v14);
  }
  v15 = *v3;
  Hasher.init(_seed:)(v34);
  v16 = objc_msgSend(*(id *)(a1 + 24), "identifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  v17 = sub_1000C69C4((unint64_t *)&unk_100347730, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v34, v7, v17);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  v18 = Hasher._finalize()();
  v19 = -1 << *(_BYTE *)(v15 + 32);
  a2 = v18 & ~v19;
  if (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v20 = ~v19;
    v32 = type metadata accessor for DSKBLE.BLEPeripheral();
    sub_10006C25C(0, &qword_100348B80, NSObject_ptr);
    do
    {
      v21 = *(_QWORD *)(*(_QWORD *)(v15 + 48) + 8 * a2);
      v22 = *(void **)(v21 + 24);
      v23 = *(void **)(a1 + 24);
      swift_retain(v21);
      v24 = v22;
      v25 = v23;
      v26 = static NSObject.== infix(_:_:)(v24);
      swift_release(v21);

      if ((v26 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v20;
    }
    while (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v27 = *v33;
  *(_QWORD *)(v27 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v27 + 48) + 8 * a2) = a1;
  v28 = *(_QWORD *)(v27 + 16);
  v29 = __OFADD__(v28, 1);
  v30 = v28 + 1;
  if (!v29)
  {
    *(_QWORD *)(v27 + 16) = v30;
    return;
  }
  __break(1u);
LABEL_15:
  ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v32);
  __break(1u);
}

void sub_1000CF610(uint64_t a1, unint64_t a2, char a3, uint64_t *a4, unint64_t *a5, _QWORD *a6)
{
  uint64_t *v6;
  uint64_t *v9;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  char v20;
  uint64_t v21;
  id v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  v9 = v6;
  v12 = *(_QWORD *)(*v6 + 16);
  v13 = *(_QWORD *)(*v6 + 24);
  if (v13 > v12 && (a3 & 1) != 0)
    goto LABEL_14;
  v14 = v12 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000CCBD0(v14, a4);
  }
  else
  {
    if (v13 > v12)
    {
      sub_1000D0AEC(a4);
      goto LABEL_14;
    }
    sub_1000D28A4(v14, a4);
  }
  v15 = *v6;
  v16 = NSObject._rawHashValue(seed:)(*(_QWORD *)(*v6 + 40));
  v17 = -1 << *(_BYTE *)(v15 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = sub_10006C25C(0, a5, a6);
    v19 = *(id *)(*(_QWORD *)(v15 + 48) + 8 * a2);
    v20 = static NSObject.== infix(_:_:)();

    if ((v20 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v18);
      __break(1u);
    }
    else
    {
      v21 = ~v17;
      while (1)
      {
        a2 = (a2 + 1) & v21;
        if (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v22 = *(id *)(*(_QWORD *)(v15 + 48) + 8 * a2);
        v23 = static NSObject.== infix(_:_:)();

        if ((v23 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v24 = *v9;
  *(_QWORD *)(*v9 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v24 + 48) + 8 * a2) = a1;
  v25 = *(_QWORD *)(v24 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (v26)
    __break(1u);
  else
    *(_QWORD *)(v24 + 16) = v27;
}

void sub_1000CF7A0(uint64_t *a1, unint64_t i, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  _QWORD v30[9];

  v4 = v3;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_21;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000CCE68(v9);
  }
  else
  {
    if (v8 > v7)
    {
      sub_1000D0C8C();
      goto LABEL_21;
    }
    sub_1000D2B18(v9);
  }
  v10 = *v3;
  Hasher.init(_seed:)(v30);
  v11 = *a1;
  v12 = a1[1];
  swift_bridgeObjectRetain(v12);
  String.hash(into:)(v30, v11, v12);
  swift_bridgeObjectRelease(v12);
  v13 = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v10 + 32);
  i = v13 & ~v14;
  v15 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v16 = *(_QWORD *)(v10 + 48);
    v17 = (_QWORD *)(v16 + 40 * i);
    v18 = v17[1];
    v19 = *v17 == v11 && v18 == v12;
    if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, v11, v12, 0) & 1) != 0)
      goto LABEL_24;
    v20 = ~v14;
    for (i = (i + 1) & v20; ((*(_QWORD *)(v15 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v20)
    {
      v21 = (_QWORD *)(v16 + 40 * i);
      v22 = v21[1];
      v23 = *v21 == v11 && v22 == v12;
      if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v21, v22, v11, v12, 0) & 1) != 0)
        goto LABEL_24;
    }
  }
LABEL_21:
  v24 = *v4;
  *(_QWORD *)(*v4 + 8 * (i >> 6) + 56) |= 1 << i;
  v25 = *(_QWORD *)(v24 + 48) + 40 * i;
  v26 = *((_OWORD *)a1 + 1);
  *(_OWORD *)v25 = *(_OWORD *)a1;
  *(_OWORD *)(v25 + 16) = v26;
  *(_QWORD *)(v25 + 32) = a1[4];
  v27 = *(_QWORD *)(v24 + 16);
  v28 = __OFADD__(v27, 1);
  v29 = v27 + 1;
  if (!v28)
  {
    *(_QWORD *)(v24 + 16) = v29;
    return;
  }
  __break(1u);
LABEL_24:
  ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for DefaultAppInfo);
  __break(1u);
}

uint64_t sub_1000CF984(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD v28[9];

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_1000CD19C(v11);
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_1000D0E58();
      goto LABEL_22;
    }
    sub_1000D2E14(v11);
  }
  v12 = *v4;
  Hasher.init(_seed:)(v28);
  String.hash(into:)(v28, v8, a2);
  result = Hasher._finalize()();
  v13 = -1 << *(_BYTE *)(v12 + 32);
  a3 = result & ~v13;
  v14 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v15 = *(_QWORD *)(v12 + 48);
    v16 = (_QWORD *)(v15 + 16 * a3);
    v17 = v16[1];
    v18 = *v16 == v8 && v17 == a2;
    if (v18 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, a2, 0), (result & 1) != 0))
    {
LABEL_21:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }
    else
    {
      v19 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v19;
        if (((*(_QWORD *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v20 = (_QWORD *)(v15 + 16 * a3);
        v21 = v20[1];
        if (*v20 != v8 || v21 != a2)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, a2, 0);
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v23 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v24 = (uint64_t *)(*(_QWORD *)(v23 + 48) + 16 * a3);
  *v24 = v8;
  v24[1] = a2;
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (v26)
    __break(1u);
  else
    *(_QWORD *)(v23 + 16) = v27;
  return result;
}

Swift::Int sub_1000CFB1C(Swift::Int result, unint64_t a2, char a3)
{
  uint64_t *v3;
  Swift::Int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD __s1[9];

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    v8 = v6 + 1;
    if ((a3 & 1) != 0)
    {
      sub_1000CD478(v8);
    }
    else
    {
      if (v7 > v6)
      {
        result = (Swift::Int)sub_1000D1008(&qword_100346178);
        goto LABEL_10;
      }
      sub_1000D30C0(v8);
    }
    v9 = *v3;
    Hasher.init(_seed:)(__s1);
    v10 = *(_QWORD *)(v5 + 16);
    v11 = *(_QWORD *)(v5 + 24);
    sub_100063C8C(v10, v11);
    Data.hash(into:)(__s1, v10, v11);
    sub_100063CD0(v10, v11);
    result = Hasher._finalize()();
    v12 = v9;
    a2 = result & ~(-1 << *(_BYTE *)(v9 + 32));
    if (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
    {
      v18 = v12;
      type metadata accessor for DSKExpress.ExpressKey();
      __asm { BR              X10 }
    }
  }
LABEL_10:
  v13 = *v17;
  *(_QWORD *)(*v17 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v13 + 48) + 8 * a2) = v5;
  v14 = *(_QWORD *)(v13 + 16);
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
  {
    __break(1u);
    JUMPOUT(0x1000D04C4);
  }
  *(_QWORD *)(v13 + 16) = v16;
  return result;
}

void *sub_1000D0584()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  sub_100063D3C(&qword_100346118);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1000D0718()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  sub_100063D3C(&qword_1003460F8);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = (void *)sub_100063C8C(v17, *((unint64_t *)&v17 + 1));
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1000D08C8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *result;
  uint64_t v11;
  unint64_t v12;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t *v26;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100063D3C((uint64_t *)&unk_100348A00);
  v7 = *v0;
  v8 = static _SetStorage.copy(original:)(*v0);
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
    result = (void *)swift_release(v7);
LABEL_30:
    *v1 = v9;
    return result;
  }
  v26 = v1;
  result = (void *)(v8 + 56);
  v11 = v7 + 56;
  v12 = (unint64_t)((1 << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 56 + 8 * v12)
    result = memmove(result, (const void *)(v7 + 56), 8 * v12);
  v14 = 0;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v7 + 16);
  v15 = 1 << *(_BYTE *)(v7 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(v7 + 56);
  v18 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v20 = v19 | (v14 << 6);
      goto LABEL_12;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v22 >= v18)
      goto LABEL_28;
    v23 = *(_QWORD *)(v11 + 8 * v22);
    ++v14;
    if (!v23)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v18)
        goto LABEL_28;
      v23 = *(_QWORD *)(v11 + 8 * v14);
      if (!v23)
      {
        v14 = v22 + 2;
        if (v22 + 2 >= v18)
          goto LABEL_28;
        v23 = *(_QWORD *)(v11 + 8 * v14);
        if (!v23)
          break;
      }
    }
LABEL_27:
    v17 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_12:
    v21 = *(_QWORD *)(v3 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v6, *(_QWORD *)(v7 + 48) + v21, v2);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v9 + 48) + v21, v6, v2);
  }
  v24 = v22 + 3;
  if (v24 >= v18)
  {
LABEL_28:
    result = (void *)swift_release(v7);
    v1 = v26;
    goto LABEL_30;
  }
  v23 = *(_QWORD *)(v11 + 8 * v24);
  if (v23)
  {
    v14 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    v14 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v14 >= v18)
      goto LABEL_28;
    v23 = *(_QWORD *)(v11 + 8 * v14);
    ++v24;
    if (v23)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
  return result;
}

id sub_1000D0AEC(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v2 = v1;
  sub_100063D3C(a1);
  v3 = *v1;
  v4 = static _SetStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_28:
    result = (id)swift_release(v3);
    *v2 = v5;
    return result;
  }
  result = (id)(v4 + 56);
  v7 = v3 + 56;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 56);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v19 >= v14)
      goto LABEL_28;
    v20 = *(_QWORD *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      v10 = v19 + 1;
      if (v19 + 1 >= v14)
        goto LABEL_28;
      v20 = *(_QWORD *)(v7 + 8 * v10);
      if (!v20)
      {
        v10 = v19 + 2;
        if (v19 + 2 >= v14)
          goto LABEL_28;
        v20 = *(_QWORD *)(v7 + 8 * v10);
        if (!v20)
          break;
      }
    }
LABEL_27:
    v13 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(void **)(*(_QWORD *)(v3 + 48) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = v18;
    result = v18;
  }
  v21 = v19 + 3;
  if (v21 >= v14)
    goto LABEL_28;
  v20 = *(_QWORD *)(v7 + 8 * v21);
  if (v20)
  {
    v10 = v21;
    goto LABEL_27;
  }
  while (1)
  {
    v10 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v10 >= v14)
      goto LABEL_28;
    v20 = *(_QWORD *)(v7 + 8 * v10);
    ++v21;
    if (v20)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_1000D0C8C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_100063D3C(&qword_100346198);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_28;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_28;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
      {
        v9 = v22 + 2;
        if (v22 + 2 >= v13)
          goto LABEL_28;
        v23 = *(_QWORD *)(v6 + 8 * v9);
        if (!v23)
          break;
      }
    }
LABEL_27:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    v17 = *(_QWORD *)(v2 + 48) + v16;
    v18 = *(_QWORD *)(v17 + 8);
    v19 = *(_QWORD *)(v17 + 32);
    v20 = *(_QWORD *)(v4 + 48) + v16;
    v21 = *(_OWORD *)(v17 + 16);
    *(_QWORD *)v20 = *(_QWORD *)v17;
    *(_QWORD *)(v20 + 8) = v18;
    *(_OWORD *)(v20 + 16) = v21;
    *(_QWORD *)(v20 + 32) = v19;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v19);
  }
  v24 = v22 + 3;
  if (v24 >= v13)
    goto LABEL_28;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void *sub_1000D0E58()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_100063D3C(&qword_100346190);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain(v18);
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1000D1008(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v2 = v1;
  sub_100063D3C(a1);
  v3 = *v1;
  v4 = static _SetStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v3);
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 56);
  v7 = v3 + 56;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 56);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v19 >= v14)
      goto LABEL_28;
    v20 = *(_QWORD *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      v10 = v19 + 1;
      if (v19 + 1 >= v14)
        goto LABEL_28;
      v20 = *(_QWORD *)(v7 + 8 * v10);
      if (!v20)
      {
        v10 = v19 + 2;
        if (v19 + 2 >= v14)
          goto LABEL_28;
        v20 = *(_QWORD *)(v7 + 8 * v10);
        if (!v20)
          break;
      }
    }
LABEL_27:
    v13 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = v18;
    result = (void *)swift_retain(v18);
  }
  v21 = v19 + 3;
  if (v21 >= v14)
    goto LABEL_28;
  v20 = *(_QWORD *)(v7 + 8 * v21);
  if (v20)
  {
    v10 = v21;
    goto LABEL_27;
  }
  while (1)
  {
    v10 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v10 >= v14)
      goto LABEL_28;
    v20 = *(_QWORD *)(v7 + 8 * v10);
    ++v21;
    if (v20)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

Swift::Int sub_1000D11A8(uint64_t a1)
{
  Swift::Int *v1;
  Swift::Int *v2;
  Swift::Int v3;
  uint64_t v4;
  Swift::Int result;
  Swift::Int v6;
  int64_t v7;
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  Swift::Int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  Swift::Int *v28;
  uint64_t v29[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100063D3C(&qword_100346118);
  result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = result;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v28 = v2;
  v7 = 0;
  v8 = v3 + 56;
  v9 = 1 << *(_BYTE *)(v3 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v3 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v16 = v15 | (v7 << 6);
      goto LABEL_27;
    }
    v17 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      v7 = v17 + 1;
      if (v17 + 1 >= v12)
        goto LABEL_36;
      v18 = *(_QWORD *)(v8 + 8 * v7);
      if (!v18)
      {
        v7 = v17 + 2;
        if (v17 + 2 >= v12)
          goto LABEL_36;
        v18 = *(_QWORD *)(v8 + 8 * v7);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v11 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_27:
    v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
    Hasher.init(_seed:)(v29);
    Hasher._combine(_:)(v20);
    result = Hasher._finalize()();
    v21 = -1 << *(_BYTE *)(v6 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v13 + 8 * v23);
      }
      while (v27 == -1);
      v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_36:
    result = swift_release(v3);
    v2 = v28;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v7 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v7 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v7 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v7);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

Swift::Int sub_1000D1420(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  Swift::Int result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int64_t v31;
  _QWORD v32[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100063D3C(&qword_1003489C0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v29 = v2;
  v30 = v3 + 56;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v3 + 56);
  v31 = (unint64_t)(v7 + 63) >> 6;
  v10 = v5 + 56;
  result = swift_retain(v3);
  v12 = 0;
  while (1)
  {
    if (v9)
    {
      v14 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v15 = v14 | (v12 << 6);
      goto LABEL_27;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v16 >= v31)
      goto LABEL_36;
    v17 = *(_QWORD *)(v30 + 8 * v16);
    ++v12;
    if (!v17)
    {
      v12 = v16 + 1;
      if (v16 + 1 >= v31)
        goto LABEL_36;
      v17 = *(_QWORD *)(v30 + 8 * v12);
      if (!v17)
      {
        v12 = v16 + 2;
        if (v16 + 2 >= v31)
          goto LABEL_36;
        v17 = *(_QWORD *)(v30 + 8 * v12);
        if (!v17)
          break;
      }
    }
LABEL_26:
    v9 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_27:
    v19 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v15);
    Hasher.init(_seed:)(v32);
    v20 = type metadata accessor for UUID(0);
    v21 = sub_1000C69C4((unint64_t *)&unk_100347730, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    swift_retain(v19);
    dispatch thunk of Hashable.hash(into:)(v32, v20, v21);
    result = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v6 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v10 + 8 * (v23 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v10 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v10 + 8 * v24);
      }
      while (v28 == -1);
      v13 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v13) = v19;
    ++*(_QWORD *)(v6 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v31)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v29;
    goto LABEL_38;
  }
  v17 = *(_QWORD *)(v30 + 8 * v18);
  if (v17)
  {
    v12 = v18;
    goto LABEL_26;
  }
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v12 >= v31)
      goto LABEL_36;
    v17 = *(_QWORD *)(v30 + 8 * v12);
    ++v18;
    if (v17)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

Swift::Int sub_1000D171C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  int64_t v31;
  _QWORD v32[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100063D3C((uint64_t *)&unk_100346070);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v30 = v2;
  v31 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  result = swift_retain(v3);
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v16 = v15 | (v13 << 6);
      goto LABEL_27;
    }
    v17 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v31)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v13;
    if (!v18)
    {
      v13 = v17 + 1;
      if (v17 + 1 >= v31)
        goto LABEL_36;
      v18 = *(_QWORD *)(v8 + 8 * v13);
      if (!v18)
      {
        v13 = v17 + 2;
        if (v17 + 2 >= v31)
          goto LABEL_36;
        v18 = *(_QWORD *)(v8 + 8 * v13);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v10 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v13 << 6);
LABEL_27:
    v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
    Hasher.init(_seed:)(v32);
    v21 = *(_QWORD *)(v20 + 16);
    v22 = *(_QWORD *)(v20 + 24);
    swift_retain(v20);
    swift_bridgeObjectRetain(v22);
    String.hash(into:)(v32, v21, v22);
    swift_bridgeObjectRelease(v22);
    result = Hasher._finalize()();
    v23 = -1 << *(_BYTE *)(v6 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v11 + 8 * (v24 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v11 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v11 + 8 * v25);
      }
      while (v29 == -1);
      v14 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v31)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v30;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v13 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v13 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v13 >= v31)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v13);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

Swift::Int sub_1000D19D4(uint64_t a1)
{
  Swift::Int *v1;
  Swift::Int *v2;
  Swift::Int v3;
  uint64_t v4;
  Swift::Int result;
  Swift::Int v6;
  int64_t v7;
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  Swift::Int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  Swift::Int *v28;
  uint64_t v29[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100063D3C(&qword_100346110);
  result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = result;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v28 = v2;
  v7 = 0;
  v8 = v3 + 56;
  v9 = 1 << *(_BYTE *)(v3 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v3 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v16 = v15 | (v7 << 6);
      goto LABEL_27;
    }
    v17 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      v7 = v17 + 1;
      if (v17 + 1 >= v12)
        goto LABEL_36;
      v18 = *(_QWORD *)(v8 + 8 * v7);
      if (!v18)
      {
        v7 = v17 + 2;
        if (v17 + 2 >= v12)
          goto LABEL_36;
        v18 = *(_QWORD *)(v8 + 8 * v7);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v11 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_27:
    v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
    Hasher.init(_seed:)(v29);
    Hasher._combine(_:)(*(_QWORD *)(v20 + 16));
    result = Hasher._finalize()();
    v21 = -1 << *(_BYTE *)(v6 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v13 + 8 * v23);
      }
      while (v27 == -1);
      v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
    ++*(_QWORD *)(v6 + 16);
    result = swift_retain(v20);
  }
  v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_36:
    result = swift_release(v3);
    v2 = v28;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v7 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v7 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v7 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v7);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

Swift::Int sub_1000D1C54(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100063D3C(&qword_1003460F8);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  result = swift_retain(v3);
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v32)
        goto LABEL_36;
      v19 = *(_QWORD *)(v8 + 8 * v13);
      if (!v19)
      {
        v13 = v18 + 2;
        if (v18 + 2 >= v32)
          goto LABEL_36;
        v19 = *(_QWORD *)(v8 + 8 * v13);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
    v22 = *v21;
    v23 = v21[1];
    Hasher.init(_seed:)(v33);
    sub_100063C8C(v22, v23);
    Data.hash(into:)(v33, v22, v23);
    result = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v26);
      }
      while (v30 == -1);
      v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v14);
    *v15 = v22;
    v15[1] = v23;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v13 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v13 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v13 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v13);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

Swift::Int sub_1000D1F04(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  Swift::Int result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100063D3C((uint64_t *)&unk_100346080);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v30 = v2;
  v31 = v3 + 56;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v3 + 56);
  v32 = (unint64_t)(v7 + 63) >> 6;
  v10 = v5 + 56;
  result = swift_retain(v3);
  v12 = 0;
  while (1)
  {
    if (v9)
    {
      v14 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v15 = v14 | (v12 << 6);
      goto LABEL_27;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v16 >= v32)
      goto LABEL_36;
    v17 = *(_QWORD *)(v31 + 8 * v16);
    ++v12;
    if (!v17)
    {
      v12 = v16 + 1;
      if (v16 + 1 >= v32)
        goto LABEL_36;
      v17 = *(_QWORD *)(v31 + 8 * v12);
      if (!v17)
      {
        v12 = v16 + 2;
        if (v16 + 2 >= v32)
          goto LABEL_36;
        v17 = *(_QWORD *)(v31 + 8 * v12);
        if (!v17)
          break;
      }
    }
LABEL_26:
    v9 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_27:
    v19 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v15);
    Hasher.init(_seed:)(v33);
    v20 = *(_QWORD *)(v19 + 16);
    v21 = type metadata accessor for UUID(0);
    v22 = sub_1000C69C4((unint64_t *)&unk_100347730, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    swift_retain(v19);
    swift_retain(v20);
    dispatch thunk of Hashable.hash(into:)(v33, v21, v22);
    swift_release(v20);
    result = Hasher._finalize()();
    v23 = -1 << *(_BYTE *)(v6 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v10 + 8 * (v24 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v10 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v10 + 8 * v25);
      }
      while (v29 == -1);
      v13 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v13) = v19;
    ++*(_QWORD *)(v6 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v32)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v30;
    goto LABEL_38;
  }
  v17 = *(_QWORD *)(v31 + 8 * v18);
  if (v17)
  {
    v12 = v18;
    goto LABEL_26;
  }
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v12 >= v32)
      goto LABEL_36;
    v17 = *(_QWORD *)(v31 + 8 * v12);
    ++v18;
    if (v17)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

Swift::Int sub_1000D2218(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  Swift::Int result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  _QWORD v40[9];

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v39 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100063D3C((uint64_t *)&unk_1003460A0);
  v9 = static _SetStorage.resize(original:capacity:move:)(v8, a1, 0);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
    result = swift_release(v8);
LABEL_37:
    *v2 = v10;
    return result;
  }
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 56);
  v36 = v2;
  v37 = v8 + 56;
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v38 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 56;
  result = swift_retain(v8);
  v17 = 0;
  while (1)
  {
    if (v14)
    {
      v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v20 = v19 | (v17 << 6);
      goto LABEL_26;
    }
    v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v21 >= v38)
      goto LABEL_35;
    v22 = *(_QWORD *)(v37 + 8 * v21);
    ++v17;
    if (!v22)
    {
      v17 = v21 + 1;
      if (v21 + 1 >= v38)
        goto LABEL_35;
      v22 = *(_QWORD *)(v37 + 8 * v17);
      if (!v22)
      {
        v17 = v21 + 2;
        if (v21 + 2 >= v38)
          goto LABEL_35;
        v22 = *(_QWORD *)(v37 + 8 * v17);
        if (!v22)
          break;
      }
    }
LABEL_25:
    v14 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v17 << 6);
LABEL_26:
    v24 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v20);
    Hasher.init(_seed:)(v40);
    v25 = *(void **)(v24 + 24);
    swift_retain(v24);
    v26 = objc_msgSend(v25, "identifier");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v27 = sub_1000C69C4((unint64_t *)&unk_100347730, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v40, v4, v27);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v7, v4);
    result = Hasher._finalize()();
    v28 = -1 << *(_BYTE *)(v10 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v15 + 8 * (v29 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v15 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v15 + 8 * v30);
      }
      while (v34 == -1);
      v18 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v18) = v24;
    ++*(_QWORD *)(v10 + 16);
  }
  v23 = v21 + 3;
  if (v23 >= v38)
  {
LABEL_35:
    result = swift_release_n(v8, 2);
    v2 = v36;
    goto LABEL_37;
  }
  v22 = *(_QWORD *)(v37 + 8 * v23);
  if (v22)
  {
    v17 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v17 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v17 >= v38)
      goto LABEL_35;
    v22 = *(_QWORD *)(v37 + 8 * v17);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_1000D2578(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  int64_t v38;

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100063D3C((uint64_t *)&unk_100348A00);
  v10 = static _SetStorage.resize(original:capacity:move:)(v9, a1, 0);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
  {
    result = swift_release(v9);
LABEL_37:
    *v2 = v11;
    return result;
  }
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 56);
  v36 = v2;
  v37 = v9 + 56;
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v38 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 56;
  result = swift_retain(v9);
  v18 = 0;
  while (1)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v21 = v20 | (v18 << 6);
      goto LABEL_26;
    }
    v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v22 >= v38)
      goto LABEL_35;
    v23 = *(_QWORD *)(v37 + 8 * v22);
    ++v18;
    if (!v23)
    {
      v18 = v22 + 1;
      if (v22 + 1 >= v38)
        goto LABEL_35;
      v23 = *(_QWORD *)(v37 + 8 * v18);
      if (!v23)
      {
        v18 = v22 + 2;
        if (v22 + 2 >= v38)
          goto LABEL_35;
        v23 = *(_QWORD *)(v37 + 8 * v18);
        if (!v23)
          break;
      }
    }
LABEL_25:
    v15 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v18 << 6);
LABEL_26:
    v25 = *(_QWORD *)(v5 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v8, *(_QWORD *)(v9 + 48) + v25 * v21, v4);
    v26 = *(_QWORD *)(v11 + 40);
    v27 = sub_1000C69C4((unint64_t *)&unk_100347730, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v26, v4, v27);
    v28 = -1 << *(_BYTE *)(v11 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v16 + 8 * v30);
      }
      while (v34 == -1);
      v19 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(_QWORD *)(v11 + 48) + v19 * v25, v8, v4);
    ++*(_QWORD *)(v11 + 16);
  }
  v24 = v22 + 3;
  if (v24 >= v38)
  {
LABEL_35:
    result = swift_release_n(v9, 2);
    v2 = v36;
    goto LABEL_37;
  }
  v23 = *(_QWORD *)(v37 + 8 * v24);
  if (v23)
  {
    v18 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v18 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v18 >= v38)
      goto LABEL_35;
    v23 = *(_QWORD *)(v37 + 8 * v18);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_39:
  __break(1u);
  return result;
}

Swift::Int sub_1000D28A4(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  Swift::Int v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;

  v3 = v2;
  v4 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v5 = a1;
  else
    v5 = *(_QWORD *)(*v2 + 24);
  sub_100063D3C(a2);
  v6 = static _SetStorage.resize(original:capacity:move:)(v4, v5, 0);
  v7 = v6;
  if (!*(_QWORD *)(v4 + 16))
  {
    result = swift_release(v4);
LABEL_38:
    *v3 = v7;
    return result;
  }
  v31 = v3;
  v8 = 1 << *(_BYTE *)(v4 + 32);
  v9 = v4 + 56;
  if (v8 < 64)
    v10 = ~(-1 << v8);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v4 + 56);
  v12 = (unint64_t)(v8 + 63) >> 6;
  v13 = v6 + 56;
  result = swift_retain(v4);
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v18 = v17 | (v15 << 6);
      goto LABEL_27;
    }
    v19 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v19 >= v12)
      goto LABEL_36;
    v20 = *(_QWORD *)(v9 + 8 * v19);
    ++v15;
    if (!v20)
    {
      v15 = v19 + 1;
      if (v19 + 1 >= v12)
        goto LABEL_36;
      v20 = *(_QWORD *)(v9 + 8 * v15);
      if (!v20)
      {
        v15 = v19 + 2;
        if (v19 + 2 >= v12)
          goto LABEL_36;
        v20 = *(_QWORD *)(v9 + 8 * v15);
        if (!v20)
          break;
      }
    }
LABEL_26:
    v11 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v15 << 6);
LABEL_27:
    v22 = *(_QWORD *)(v7 + 40);
    v23 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v18);
    result = NSObject._rawHashValue(seed:)(v22);
    v24 = -1 << *(_BYTE *)(v7 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v13 + 8 * (v25 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v13 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v26);
      }
      while (v30 == -1);
      v16 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v16) = v23;
    ++*(_QWORD *)(v7 + 16);
  }
  v21 = v19 + 3;
  if (v21 >= v12)
  {
LABEL_36:
    result = swift_release_n(v4, 2);
    v3 = v31;
    goto LABEL_38;
  }
  v20 = *(_QWORD *)(v9 + 8 * v21);
  if (v20)
  {
    v15 = v21;
    goto LABEL_26;
  }
  while (1)
  {
    v15 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v15 >= v12)
      goto LABEL_36;
    v20 = *(_QWORD *)(v9 + 8 * v15);
    ++v21;
    if (v20)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

Swift::Int sub_1000D2B18(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  Swift::Int result;
  int64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int64_t v35;
  uint64_t i;
  _QWORD v37[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100063D3C(&qword_100346198);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v33 = v2;
  v34 = v3 + 56;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v3 + 56);
  v35 = (unint64_t)(v7 + 63) >> 6;
  v10 = v5 + 56;
  result = swift_retain(v3);
  v12 = 0;
  for (i = v3; ; v3 = i)
  {
    if (v9)
    {
      v15 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v16 = v15 | (v12 << 6);
      goto LABEL_27;
    }
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v35)
      goto LABEL_36;
    v18 = *(_QWORD *)(v34 + 8 * v17);
    ++v12;
    if (!v18)
    {
      v12 = v17 + 1;
      if (v17 + 1 >= v35)
        goto LABEL_36;
      v18 = *(_QWORD *)(v34 + 8 * v12);
      if (!v18)
      {
        v12 = v17 + 2;
        if (v17 + 2 >= v35)
          goto LABEL_36;
        v18 = *(_QWORD *)(v34 + 8 * v12);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v12 << 6);
LABEL_27:
    v20 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 40 * v16);
    v21 = *v20;
    v22 = v20[1];
    v23 = v20[2];
    v24 = v20[3];
    v25 = v20[4];
    Hasher.init(_seed:)(v37);
    swift_bridgeObjectRetain_n(v22, 2);
    swift_bridgeObjectRetain(v25);
    String.hash(into:)(v37, v21, v22);
    swift_bridgeObjectRelease(v22);
    result = Hasher._finalize()();
    v26 = -1 << *(_BYTE *)(v6 + 32);
    v27 = result & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v10 + 8 * (v27 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v10 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v31 = v28 == v30;
        if (v28 == v30)
          v28 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v10 + 8 * v28);
      }
      while (v32 == -1);
      v13 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    v14 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 40 * v13);
    *v14 = v21;
    v14[1] = v22;
    v14[2] = v23;
    v14[3] = v24;
    v14[4] = v25;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v35)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v33;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v34 + 8 * v19);
  if (v18)
  {
    v12 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v12 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v12 >= v35)
      goto LABEL_36;
    v18 = *(_QWORD *)(v34 + 8 * v12);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

Swift::Int sub_1000D2E14(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100063D3C(&qword_100346190);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  result = swift_retain(v3);
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v32)
        goto LABEL_36;
      v19 = *(_QWORD *)(v8 + 8 * v13);
      if (!v19)
      {
        v13 = v18 + 2;
        if (v18 + 2 >= v32)
          goto LABEL_36;
        v19 = *(_QWORD *)(v8 + 8 * v13);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
    v22 = *v21;
    v23 = v21[1];
    Hasher.init(_seed:)(v33);
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v33, v22, v23);
    result = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v26);
      }
      while (v30 == -1);
      v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
    *v15 = v22;
    v15[1] = v23;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v13 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v13 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v13 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v13);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

Swift::Int sub_1000D30C0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  int64_t v31;
  _QWORD v32[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100063D3C(&qword_100346178);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v30 = v2;
  v31 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  result = swift_retain(v3);
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v16 = v15 | (v13 << 6);
      goto LABEL_27;
    }
    v17 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v31)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v13;
    if (!v18)
    {
      v13 = v17 + 1;
      if (v17 + 1 >= v31)
        goto LABEL_36;
      v18 = *(_QWORD *)(v8 + 8 * v13);
      if (!v18)
      {
        v13 = v17 + 2;
        if (v17 + 2 >= v31)
          goto LABEL_36;
        v18 = *(_QWORD *)(v8 + 8 * v13);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v10 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v13 << 6);
LABEL_27:
    v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
    Hasher.init(_seed:)(v32);
    v21 = *(_QWORD *)(v20 + 16);
    v22 = *(_QWORD *)(v20 + 24);
    swift_retain(v20);
    sub_100063C8C(v21, v22);
    Data.hash(into:)(v32, v21, v22);
    sub_100063CD0(v21, v22);
    result = Hasher._finalize()();
    v23 = -1 << *(_BYTE *)(v6 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v11 + 8 * (v24 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v11 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v11 + 8 * v25);
      }
      while (v29 == -1);
      v14 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v31)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v30;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v13 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v13 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v13 >= v31)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v13);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_1000D3380(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  id v6;
  char v7;
  uint64_t v8;
  Swift::Int v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  char v14;
  uint64_t v15;
  id v16;
  char v17;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v2 = v1;
  v4 = *v1;
  if ((*v1 & 0xC000000000000001) != 0)
  {
    if (v4 < 0)
      v5 = *v1;
    else
      v5 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v6 = a1;
    v7 = __CocoaSet.contains(_:)(v6, v5);

    if ((v7 & 1) != 0)
    {
      v8 = sub_1000D436C(v5, (uint64_t)v6);
      swift_bridgeObjectRelease(v4);
      return v8;
    }
LABEL_15:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  v9 = *(_QWORD *)(v4 + 40);
  swift_bridgeObjectRetain(v4);
  v10 = NSObject._rawHashValue(seed:)(v9);
  v11 = -1 << *(_BYTE *)(v4 + 32);
  v12 = v10 & ~v11;
  if (((*(_QWORD *)(v4 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
    goto LABEL_15;
  type metadata accessor for UWBSession();
  v13 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v12);
  v14 = static NSObject.== infix(_:_:)(v13);

  if ((v14 & 1) == 0)
  {
    v15 = ~v11;
    do
    {
      v12 = (v12 + 1) & v15;
      if (((*(_QWORD *)(v4 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
        goto LABEL_15;
      v16 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v12);
      v17 = static NSObject.== infix(_:_:)(v16);

    }
    while ((v17 & 1) == 0);
  }
  swift_bridgeObjectRelease(v4);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v19 = *v2;
  v22 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000D0AEC((uint64_t *)&unk_1003460D0);
    v19 = v22;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v19 + 48) + 8 * v12);
  sub_1000D5598(v12);
  v20 = *v2;
  *v2 = v22;
  swift_bridgeObjectRelease(v20);
  return v8;
}

uint64_t sub_1000D354C(Swift::UInt a1)
{
  _QWORD *v1;
  uint64_t v3;
  Swift::Int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[9];

  v3 = *v1;
  Hasher.init(_seed:)(v14);
  Hasher._combine(_:)(a1);
  v4 = Hasher._finalize()();
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = v4 & ~v5;
  if (((*(_QWORD *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 0;
  v7 = *(_QWORD *)(v3 + 48);
  if (*(_QWORD *)(v7 + 8 * v6) != a1)
  {
    v8 = ~v5;
    do
    {
      v6 = (v6 + 1) & v8;
      if (((*(_QWORD *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
        return 0;
    }
    while (*(_QWORD *)(v7 + 8 * v6) != a1);
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  v10 = *v1;
  v14[0] = *v1;
  *v1 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000D0584();
    v10 = v14[0];
  }
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v6);
  sub_1000D4D14(v6);
  v12 = *v1;
  *v1 = v14[0];
  swift_bridgeObjectRelease(v12);
  return v11;
}

uint64_t sub_1000D3670(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[9];

  v2 = v1;
  v4 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v4 < 0)
      v5 = *v2;
    else
      v5 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v2);
    v6 = swift_retain(a1);
    v7 = __CocoaSet.contains(_:)(v6, v5);
    swift_release(a1);
    if ((v7 & 1) != 0)
    {
      v8 = sub_1000D44F4(v5, a1);
      swift_bridgeObjectRelease(v4);
      return v8;
    }
LABEL_15:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  Hasher.init(_seed:)(v24);
  v9 = a1 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
  v10 = type metadata accessor for UUID(0);
  v11 = sub_1000C69C4((unint64_t *)&unk_100347730, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  swift_bridgeObjectRetain(v4);
  dispatch thunk of Hashable.hash(into:)(v24, v10, v11);
  v12 = Hasher._finalize()();
  v13 = -1 << *(_BYTE *)(v4 + 32);
  v14 = v12 & ~v13;
  if (((*(_QWORD *)(v4 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
    goto LABEL_15;
  v15 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v14);
  v16 = v15 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
  swift_retain(v15);
  LOBYTE(v16) = static UUID.== infix(_:_:)(v16, v9);
  swift_release(v15);
  if ((v16 & 1) == 0)
  {
    v17 = ~v13;
    do
    {
      v14 = (v14 + 1) & v17;
      if (((*(_QWORD *)(v4 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
        goto LABEL_15;
      v18 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v14);
      v19 = v18 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
      swift_retain(v18);
      LOBYTE(v19) = static UUID.== infix(_:_:)(v19, v9);
      swift_release(v18);
    }
    while ((v19 & 1) == 0);
  }
  swift_bridgeObjectRelease(v4);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v21 = *v2;
  v24[0] = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000D1008(&qword_1003489C0);
    v21 = v24[0];
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v21 + 48) + 8 * v14);
  sub_1000D4EBC(v14);
  v22 = *v2;
  *v2 = v24[0];
  swift_bridgeObjectRelease(v22);
  return v8;
}

uint64_t sub_1000D38AC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  Swift::Int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  char v26;
  uint64_t *v28;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD v33[9];

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v33[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v9 < 0)
      v10 = *v2;
    else
      v10 = v9 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v2);
    v11 = swift_retain(a1);
    v12 = __CocoaSet.contains(_:)(v11, v10);
    swift_release(a1);
    if ((v12 & 1) != 0)
    {
      v13 = sub_1000D46E4(v10, a1);
      swift_bridgeObjectRelease(v9);
      return v13;
    }
LABEL_11:
    swift_bridgeObjectRelease(v9);
    return 0;
  }
  Hasher.init(_seed:)(v33);
  v14 = *(void **)(a1 + 24);
  swift_bridgeObjectRetain(v9);
  v15 = objc_msgSend(v14, "identifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  v16 = sub_1000C69C4((unint64_t *)&unk_100347730, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v33, v4, v16);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  v17 = Hasher._finalize()();
  v18 = -1 << *(_BYTE *)(v9 + 32);
  v19 = v17 & ~v18;
  if (((*(_QWORD *)(v9 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) == 0)
    goto LABEL_11;
  v32 = v2;
  v20 = ~v18;
  sub_10006C25C(0, &qword_100348B80, NSObject_ptr);
  while (1)
  {
    v21 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v19);
    v22 = *(void **)(v21 + 24);
    v23 = *(void **)(a1 + 24);
    swift_retain(v21);
    v24 = v22;
    v25 = v23;
    v26 = static NSObject.== infix(_:_:)(v24);
    swift_release(v21);

    if ((v26 & 1) != 0)
      break;
    v19 = (v19 + 1) & v20;
    if (((*(_QWORD *)(v9 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) == 0)
      goto LABEL_11;
  }
  swift_bridgeObjectRelease(v9);
  v28 = v32;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v32);
  v30 = *v28;
  v33[0] = *v28;
  *v28 = 0x8000000000000000;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_1000D1008((uint64_t *)&unk_1003460A0);
    v30 = v33[0];
  }
  v13 = *(_QWORD *)(*(_QWORD *)(v30 + 48) + 8 * v19);
  sub_1000D50C4(v19);
  v31 = *v28;
  *v28 = v33[0];
  swift_bridgeObjectRelease(v31);
  return v13;
}

uint64_t sub_1000D3B40(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[9];

  v2 = v1;
  v4 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v4 < 0)
      v5 = *v2;
    else
      v5 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v2);
    v6 = swift_retain(a1);
    v7 = __CocoaSet.contains(_:)(v6, v5);
    swift_release(a1);
    if ((v7 & 1) != 0)
    {
      v8 = sub_1000D495C(v5, a1);
      swift_bridgeObjectRelease(v4);
      return v8;
    }
LABEL_15:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  Hasher.init(_seed:)(v25);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = v9 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
  v11 = type metadata accessor for UUID(0);
  v12 = sub_1000C69C4((unint64_t *)&unk_100347730, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  swift_bridgeObjectRetain(v4);
  swift_retain(v9);
  dispatch thunk of Hashable.hash(into:)(v25, v11, v12);
  swift_release(v9);
  v13 = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v4 + 32);
  v15 = v13 & ~v14;
  if (((*(_QWORD *)(v4 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
    goto LABEL_15;
  v16 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15);
  v17 = *(_QWORD *)(v16 + 16) + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
  swift_retain(v16);
  LOBYTE(v17) = static UUID.== infix(_:_:)(v17, v10);
  swift_release(v16);
  if ((v17 & 1) == 0)
  {
    v18 = ~v14;
    do
    {
      v15 = (v15 + 1) & v18;
      if (((*(_QWORD *)(v4 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
        goto LABEL_15;
      v19 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15);
      v20 = *(_QWORD *)(v19 + 16) + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
      swift_retain(v19);
      LOBYTE(v20) = static UUID.== infix(_:_:)(v20, v10);
      swift_release(v19);
    }
    while ((v20 & 1) == 0);
  }
  swift_bridgeObjectRelease(v4);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v22 = *v2;
  v25[0] = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000D1008((uint64_t *)&unk_100346080);
    v22 = v25[0];
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v22 + 48) + 8 * v15);
  sub_1000D5338(v15);
  v23 = *v2;
  *v2 = v25[0];
  swift_bridgeObjectRelease(v23);
  return v8;
}

uint64_t sub_1000D3D98(void *a1, unint64_t *a2, _QWORD *a3, uint64_t *a4)
{
  _QWORD *v4;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  id v12;
  char v13;
  uint64_t v14;
  Swift::Int v15;
  Swift::Int v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  char v20;
  uint64_t v21;
  id v22;
  char v23;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;

  v8 = v4;
  v10 = *v4;
  if ((*v4 & 0xC000000000000001) != 0)
  {
    if (v10 < 0)
      v11 = *v4;
    else
      v11 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v10);
    v12 = a1;
    v13 = __CocoaSet.contains(_:)(v12, v11);

    if ((v13 & 1) != 0)
    {
      v14 = sub_1000D4B6C(v11, (uint64_t)v12, a4, a2, a3);
      swift_bridgeObjectRelease(v10);
      return v14;
    }
LABEL_15:
    swift_bridgeObjectRelease(v10);
    return 0;
  }
  v15 = *(_QWORD *)(v10 + 40);
  swift_bridgeObjectRetain(v10);
  v16 = NSObject._rawHashValue(seed:)(v15);
  v17 = -1 << *(_BYTE *)(v10 + 32);
  v18 = v16 & ~v17;
  if (((*(_QWORD *)(v10 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
    goto LABEL_15;
  sub_10006C25C(0, a2, a3);
  v19 = *(id *)(*(_QWORD *)(v10 + 48) + 8 * v18);
  v20 = static NSObject.== infix(_:_:)(v19);

  if ((v20 & 1) == 0)
  {
    v21 = ~v17;
    do
    {
      v18 = (v18 + 1) & v21;
      if (((*(_QWORD *)(v10 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
        goto LABEL_15;
      v22 = *(id *)(*(_QWORD *)(v10 + 48) + 8 * v18);
      v23 = static NSObject.== infix(_:_:)(v22);

    }
    while ((v23 & 1) == 0);
  }
  swift_bridgeObjectRelease(v10);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v8);
  v25 = *v8;
  v28 = *v8;
  *v8 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000D0AEC(a4);
    v25 = v28;
  }
  v14 = *(_QWORD *)(*(_QWORD *)(v25 + 48) + 8 * v18);
  sub_1000D5598(v18);
  v26 = *v8;
  *v8 = v28;
  swift_bridgeObjectRelease(v26);
  return v14;
}

uint64_t sub_1000D3F80(void *a1)
{
  return sub_1000D3D98(a1, (unint64_t *)&qword_100347710, SEEndPoint_ptr, (uint64_t *)&unk_100346100);
}

uint64_t sub_1000D3F9C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  _QWORD v22[9];

  v5 = *v2;
  Hasher.init(_seed:)(v22);
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v22, a1, a2);
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  v9 = *(_QWORD *)(v5 + 48);
  v10 = (_QWORD *)(v9 + 16 * v8);
  v11 = v10[1];
  v12 = *v10 == a1 && v11 == a2;
  if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
  {
    v17 = ~v7;
    do
    {
      v8 = (v8 + 1) & v17;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_18;
      v18 = (_QWORD *)(v9 + 16 * v8);
      v19 = v18[1];
      v20 = *v18 == a1 && v19 == a2;
    }
    while (!v20 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v18, v19, a1, a2, 0) & 1) == 0);
  }
  swift_bridgeObjectRelease(v5);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v14 = *v2;
  v22[0] = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000D0E58();
    v14 = v22[0];
  }
  v15 = *(_QWORD *)(*(_QWORD *)(v14 + 48) + 16 * v8);
  sub_1000D5738(v8);
  v16 = *v2;
  *v2 = v22[0];
  swift_bridgeObjectRelease(v16);
  return v15;
}

uint64_t sub_1000D4128@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  unint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t *v25;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v3;
  v12 = *(_QWORD *)(*v3 + 40);
  v14 = sub_1000C69C4((unint64_t *)&unk_100347730, 255, v13, (uint64_t)&protocol conformance descriptor for UUID);
  swift_bridgeObjectRetain(v11);
  v34 = a1;
  v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v12, v6, v14);
  v16 = -1 << *(_BYTE *)(v11 + 32);
  v17 = v15 & ~v16;
  if (((*(_QWORD *)(v11 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) != 0)
  {
    v32 = v3;
    v33 = a2;
    v18 = ~v16;
    v19 = *(_QWORD *)(v7 + 72);
    v35 = v7;
    v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    while (1)
    {
      v21 = v19 * v17;
      v20(v10, *(_QWORD *)(v11 + 48) + v19 * v17, v6);
      v22 = sub_1000C69C4((unint64_t *)&qword_100346150, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v23 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v34, v6, v22);
      (*(void (**)(char *, uint64_t))(v35 + 8))(v10, v6);
      if ((v23 & 1) != 0)
        break;
      v17 = (v17 + 1) & v18;
      if (((*(_QWORD *)(v11 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
      {
        swift_bridgeObjectRelease(v11);
        v24 = 1;
        a2 = v33;
        v7 = v35;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v24, 1, v6);
      }
    }
    swift_bridgeObjectRelease(v11);
    v25 = v32;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v32);
    v27 = *v25;
    v36 = *v25;
    *v25 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1000D08C8();
      v27 = v36;
    }
    v28 = *(_QWORD *)(v27 + 48) + v21;
    v7 = v35;
    a2 = v33;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v35 + 32))(v33, v28, v6);
    sub_1000D58FC(v17);
    v29 = *v25;
    *v25 = v36;
    swift_bridgeObjectRelease(v29);
    v24 = 0;
  }
  else
  {
    swift_bridgeObjectRelease(v11);
    v24 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v24, 1, v6);
}

uint64_t sub_1000D436C(uint64_t a1, uint64_t a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  Swift::Int v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  char v14;
  uint64_t v15;
  id v16;
  char v17;
  uint64_t result;
  Swift::Int v19;

  v3 = v2;
  swift_bridgeObjectRelease(*v3);
  v6 = __CocoaSet.count.getter(a1);
  v7 = swift_unknownObjectRetain(a1);
  v8 = sub_1000CA1E4(v7, v6);
  v19 = v8;
  v9 = *(_QWORD *)(v8 + 40);
  swift_retain(v8);
  v10 = NSObject._rawHashValue(seed:)(v9);
  v11 = -1 << *(_BYTE *)(v8 + 32);
  v12 = v10 & ~v11;
  if (((*(_QWORD *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
  {
    type metadata accessor for UWBSession();
    v13 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * v12);
    v14 = static NSObject.== infix(_:_:)(v13);

    if ((v14 & 1) != 0)
    {
LABEL_6:
      swift_release(v8);
      v8 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v12);
      sub_1000D5598(v12);
      if ((static NSObject.== infix(_:_:)(a2) & 1) != 0)
      {
        *v3 = v19;
        return v8;
      }
      __break(1u);
    }
    else
    {
      v15 = ~v11;
      while (1)
      {
        v12 = (v12 + 1) & v15;
        if (((*(_QWORD *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
          break;
        v16 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * v12);
        v17 = static NSObject.== infix(_:_:)(v16);

        if ((v17 & 1) != 0)
          goto LABEL_6;
      }
    }
    swift_release(v8);
    __break(1u);
  }
  result = swift_release(v8);
  __break(1u);
  return result;
}

uint64_t sub_1000D44F4(uint64_t a1, uint64_t a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  _QWORD v21[9];
  Swift::Int v22;

  v3 = v2;
  swift_bridgeObjectRelease(*v3);
  v6 = __CocoaSet.count.getter(a1);
  v7 = swift_unknownObjectRetain(a1);
  v8 = sub_1000CA5DC(v7, v6);
  v22 = v8;
  Hasher.init(_seed:)(v21);
  v9 = a2 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
  v10 = type metadata accessor for UUID(0);
  v11 = sub_1000C69C4((unint64_t *)&unk_100347730, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  swift_retain(v8);
  dispatch thunk of Hashable.hash(into:)(v21, v10, v11);
  v12 = Hasher._finalize()();
  v13 = -1 << *(_BYTE *)(v8 + 32);
  v14 = v12 & ~v13;
  if (((*(_QWORD *)(v8 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v15 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v14);
    v16 = v15 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
    swift_retain(v15);
    LOBYTE(v16) = static UUID.== infix(_:_:)(v16, v9);
    swift_release(v15);
    if ((v16 & 1) != 0)
    {
LABEL_6:
      swift_release(v8);
      v8 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v14);
      sub_1000D4EBC(v14);
      if ((static UUID.== infix(_:_:)(v9, v8 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier) & 1) != 0)
      {
        *v3 = v22;
        return v8;
      }
      __break(1u);
    }
    else
    {
      v17 = ~v13;
      while (1)
      {
        v14 = (v14 + 1) & v17;
        if (((*(_QWORD *)(v8 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
          break;
        v18 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v14);
        v19 = v18 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
        swift_retain(v18);
        LOBYTE(v19) = static UUID.== infix(_:_:)(v19, v9);
        swift_release(v18);
        if ((v19 & 1) != 0)
          goto LABEL_6;
      }
    }
    swift_release(v8);
    __break(1u);
  }
  result = swift_release(v8);
  __break(1u);
  return result;
}

uint64_t sub_1000D46E4(uint64_t a1, uint64_t a2)
{
  Swift::Int *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  void *v13;
  id v14;
  uint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  char v28;
  uint64_t result;
  uint64_t v30;
  Swift::Int *v31;
  _QWORD v32[9];
  Swift::Int v33;

  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = v2;
  swift_bridgeObjectRelease(*v2);
  v10 = __CocoaSet.count.getter(a1);
  v11 = swift_unknownObjectRetain(a1);
  v12 = sub_1000CAE8C(v11, v10);
  v33 = v12;
  Hasher.init(_seed:)(v32);
  v13 = *(void **)(a2 + 24);
  swift_retain(v12);
  v14 = objc_msgSend(v13, "identifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  v15 = sub_1000C69C4((unint64_t *)&unk_100347730, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v32, v5, v15);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  v16 = Hasher._finalize()();
  v17 = -1 << *(_BYTE *)(v12 + 32);
  v18 = v16 & ~v17;
  if (((*(_QWORD *)(v12 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) != 0)
  {
    v19 = ~v17;
    sub_10006C25C(0, &qword_100348B80, NSObject_ptr);
    while (1)
    {
      v20 = *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * v18);
      v21 = *(void **)(v20 + 24);
      v22 = *(void **)(a2 + 24);
      swift_retain(v20);
      v23 = v21;
      v24 = v22;
      LOBYTE(v21) = static NSObject.== infix(_:_:)(v23);
      swift_release(v20);

      if ((v21 & 1) != 0)
        break;
      v18 = (v18 + 1) & v19;
      if (((*(_QWORD *)(v12 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
      {
        swift_release(v12);
        __break(1u);
        break;
      }
    }
    swift_release(v12);
    v12 = *(_QWORD *)(*(_QWORD *)(v33 + 48) + 8 * v18);
    sub_1000D50C4(v18);
    v25 = *(void **)(v12 + 24);
    v26 = *(id *)(a2 + 24);
    v27 = v25;
    v28 = static NSObject.== infix(_:_:)(v26);

    if ((v28 & 1) != 0)
    {
      *v31 = v33;
      return v12;
    }
    __break(1u);
  }
  result = swift_release(v12);
  __break(1u);
  return result;
}

uint64_t sub_1000D495C(uint64_t a1, uint64_t a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  _QWORD v22[9];
  Swift::Int v23;

  v3 = v2;
  swift_bridgeObjectRelease(*v3);
  v6 = __CocoaSet.count.getter(a1);
  v7 = swift_unknownObjectRetain(a1);
  v8 = sub_1000CAC34(v7, v6);
  v23 = v8;
  Hasher.init(_seed:)(v22);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = v9 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
  v11 = type metadata accessor for UUID(0);
  v12 = sub_1000C69C4((unint64_t *)&unk_100347730, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  swift_retain(v8);
  swift_retain(v9);
  dispatch thunk of Hashable.hash(into:)(v22, v11, v12);
  swift_release(v9);
  v13 = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v8 + 32);
  v15 = v13 & ~v14;
  if (((*(_QWORD *)(v8 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
  {
    v16 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v15);
    v17 = *(_QWORD *)(v16 + 16) + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
    swift_retain(v16);
    LOBYTE(v17) = static UUID.== infix(_:_:)(v17, v10);
    swift_release(v16);
    if ((v17 & 1) != 0)
    {
LABEL_6:
      swift_release(v8);
      v8 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v15);
      sub_1000D5338(v15);
      if ((static UUID.== infix(_:_:)(v10, *(_QWORD *)(v8 + 16) + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier) & 1) != 0)
      {
        *v3 = v23;
        return v8;
      }
      __break(1u);
    }
    else
    {
      v18 = ~v14;
      while (1)
      {
        v15 = (v15 + 1) & v18;
        if (((*(_QWORD *)(v8 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
          break;
        v19 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v15);
        v20 = *(_QWORD *)(v19 + 16) + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
        swift_retain(v19);
        LOBYTE(v20) = static UUID.== infix(_:_:)(v20, v10);
        swift_release(v19);
        if ((v20 & 1) != 0)
          goto LABEL_6;
      }
    }
    swift_release(v8);
    __break(1u);
  }
  result = swift_release(v8);
  __break(1u);
  return result;
}

uint64_t sub_1000D4B6C(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, _QWORD *a5)
{
  Swift::Int *v5;
  Swift::Int *v9;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  Swift::Int v15;
  Swift::Int v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  char v20;
  uint64_t v21;
  id v22;
  char v23;
  uint64_t result;
  Swift::Int v25;

  v9 = v5;
  swift_bridgeObjectRelease(*v9);
  v12 = __CocoaSet.count.getter(a1);
  v13 = swift_unknownObjectRetain(a1);
  v14 = sub_1000CA3DC(v13, v12, a3, a4, a5);
  v25 = v14;
  v15 = *(_QWORD *)(v14 + 40);
  swift_retain(v14);
  v16 = NSObject._rawHashValue(seed:)(v15);
  v17 = -1 << *(_BYTE *)(v14 + 32);
  v18 = v16 & ~v17;
  if (((*(_QWORD *)(v14 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) != 0)
  {
    sub_10006C25C(0, a4, a5);
    v19 = *(id *)(*(_QWORD *)(v14 + 48) + 8 * v18);
    v20 = static NSObject.== infix(_:_:)(v19);

    if ((v20 & 1) != 0)
    {
LABEL_6:
      swift_release(v14);
      v14 = *(_QWORD *)(*(_QWORD *)(v14 + 48) + 8 * v18);
      sub_1000D5598(v18);
      if ((static NSObject.== infix(_:_:)(a2) & 1) != 0)
      {
        *v9 = v25;
        return v14;
      }
      __break(1u);
    }
    else
    {
      v21 = ~v17;
      while (1)
      {
        v18 = (v18 + 1) & v21;
        if (((*(_QWORD *)(v14 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
          break;
        v22 = *(id *)(*(_QWORD *)(v14 + 48) + 8 * v18);
        v23 = static NSObject.== infix(_:_:)(v22);

        if ((v23 & 1) != 0)
          goto LABEL_6;
      }
    }
    swift_release(v14);
    __break(1u);
  }
  result = swift_release(v14);
  __break(1u);
  return result;
}

unint64_t sub_1000D4D14(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::UInt v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  _QWORD v18[9];

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v6);
        Hasher.init(_seed:)(v18);
        Hasher._combine(_:)(v10);
        v11 = Hasher._finalize()() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9)
            goto LABEL_5;
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(v3 + 48);
          v13 = (_QWORD *)(v12 + 8 * v2);
          v14 = (_QWORD *)(v12 + 8 * v6);
          if (v2 != v6 || (v2 = v6, v13 >= v14 + 1))
          {
            *v13 = *v14;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v15 = *(_QWORD *)(v3 + 16);
  v16 = __OFSUB__(v15, 1);
  v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

unint64_t sub_1000D4EBC(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD v21[9];

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v6);
        Hasher.init(_seed:)(v21);
        v11 = type metadata accessor for UUID(0);
        v12 = sub_1000C69C4((unint64_t *)&unk_100347730, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        swift_retain(v10);
        dispatch thunk of Hashable.hash(into:)(v21, v11, v12);
        v13 = Hasher._finalize()();
        swift_release(v10);
        v14 = v13 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v14 < v9)
            goto LABEL_5;
        }
        else if (v14 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v14)
        {
LABEL_11:
          v15 = *(_QWORD *)(v3 + 48);
          v16 = (_QWORD *)(v15 + 8 * v2);
          v17 = (_QWORD *)(v15 + 8 * v6);
          if (v2 != v6 || (v2 = v6, v16 >= v17 + 1))
          {
            *v16 = *v17;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v18 = *(_QWORD *)(v3 + 16);
  v19 = __OFSUB__(v18, 1);
  v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_1000D50C4(unint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  Swift::Int v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD v31[9];

  v3 = type metadata accessor for UUID(0);
  v30 = *(_QWORD *)(v3 - 8);
  result = __chkstk_darwin(v3, v4);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v9 = *v1 + 56;
  v10 = -1 << *(_BYTE *)(*v1 + 32);
  v11 = (a1 + 1) & ~v10;
  if (((1 << v11) & *(_QWORD *)(v9 + 8 * (v11 >> 6))) != 0)
  {
    v29 = v1;
    v12 = ~v10;
    swift_retain(v8);
    v13 = _HashTable.previousHole(before:)(a1, v9, v12);
    if ((*(_QWORD *)(v9 + 8 * (v11 >> 6)) & (1 << v11)) != 0)
    {
      v14 = (v13 + 1) & v12;
      do
      {
        v15 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v11);
        Hasher.init(_seed:)(v31);
        v16 = *(void **)(v15 + 24);
        swift_retain(v15);
        v17 = objc_msgSend(v16, "identifier");
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        v18 = sub_1000C69C4((unint64_t *)&unk_100347730, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        dispatch thunk of Hashable.hash(into:)(v31, v3, v18);
        (*(void (**)(char *, uint64_t))(v30 + 8))(v7, v3);
        v19 = Hasher._finalize()();
        swift_release(v15);
        v20 = v19 & v12;
        if ((uint64_t)a1 >= (uint64_t)v14)
        {
          if (v20 < v14)
            goto LABEL_5;
        }
        else if (v20 >= v14)
        {
          goto LABEL_11;
        }
        if ((uint64_t)a1 >= (uint64_t)v20)
        {
LABEL_11:
          v21 = *(_QWORD *)(v8 + 48);
          v22 = (_QWORD *)(v21 + 8 * a1);
          v23 = (_QWORD *)(v21 + 8 * v11);
          if (a1 != v11 || (a1 = v11, v22 >= v23 + 1))
          {
            *v22 = *v23;
            a1 = v11;
          }
        }
LABEL_5:
        v11 = (v11 + 1) & v12;
      }
      while (((*(_QWORD *)(v9 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
    }
    *(_QWORD *)(v9 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    result = swift_release(v8);
    v1 = v29;
  }
  else
  {
    *(_QWORD *)(v9 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  v24 = *v1;
  v25 = *(_QWORD *)(*v1 + 16);
  v26 = __OFSUB__(v25, 1);
  v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v24 + 16) = v27;
    ++*(_DWORD *)(v24 + 36);
  }
  return result;
}

unint64_t sub_1000D5338(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  uint64_t v20;
  Swift::Int v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[9];

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      v28 = v4;
      do
      {
        v10 = v3;
        v11 = v2;
        v12 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v6);
        v13 = v9;
        Hasher.init(_seed:)(v29);
        v14 = *(_QWORD *)(v12 + 16);
        v15 = type metadata accessor for UUID(0);
        v16 = v7;
        v17 = sub_1000C69C4((unint64_t *)&unk_100347730, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        swift_retain(v12);
        swift_retain(v14);
        v18 = v17;
        v7 = v16;
        dispatch thunk of Hashable.hash(into:)(v29, v15, v18);
        swift_release(v14);
        v19 = Hasher._finalize()();
        v20 = v12;
        v2 = v11;
        swift_release(v20);
        v9 = v13;
        v21 = v19 & v16;
        if (v11 >= (uint64_t)v13)
        {
          if (v21 < v13)
          {
            v4 = v28;
            v3 = v10;
          }
          else
          {
            v4 = v28;
            v3 = v10;
            if (v2 >= v21)
              goto LABEL_12;
          }
        }
        else
        {
          v4 = v28;
          v3 = v10;
          if (v21 >= v9 || v2 >= v21)
          {
LABEL_12:
            v22 = *(_QWORD *)(v3 + 48);
            v23 = (_QWORD *)(v22 + 8 * v2);
            v24 = (_QWORD *)(v22 + 8 * v6);
            if (v2 != v6 || (v2 = v6, v23 >= v24 + 1))
            {
              *v23 = *v24;
              v2 = v6;
            }
          }
        }
        v6 = (v6 + 1) & v16;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v25 = *(_QWORD *)(v3 + 16);
  v26 = __OFSUB__(v25, 1);
  v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v27;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

unint64_t sub_1000D5598(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  id v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(v3 + 40);
        v11 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v6);
        v12 = NSObject._rawHashValue(seed:)(v10);

        v13 = v12 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v2 >= v13)
          {
LABEL_16:
            v16 = *(_QWORD *)(v3 + 48);
            v17 = (_QWORD *)(v16 + 8 * v2);
            v18 = (_QWORD *)(v16 + 8 * v6);
            if (v2 != v6 || (v2 = v6, v17 >= v18 + 1))
            {
              *v17 = *v18;
              v2 = v6;
            }
          }
        }
        else if (v13 >= v9 || v2 >= v13)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v19 = *(_QWORD *)(v3 + 16);
  v20 = __OFSUB__(v19, 1);
  v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v21;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

unint64_t sub_1000D5738(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD v21[9];

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v6);
        v11 = *v10;
        v12 = v10[1];
        Hasher.init(_seed:)(v21);
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v21, v11, v12);
        v13 = Hasher._finalize()();
        swift_bridgeObjectRelease(v12);
        v14 = v13 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v14 < v9)
            goto LABEL_5;
        }
        else if (v14 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v14)
        {
LABEL_11:
          v15 = *(_QWORD *)(v3 + 48);
          v16 = (_OWORD *)(v15 + 16 * v2);
          v17 = (_OWORD *)(v15 + 16 * v6);
          if (v2 != v6 || (v2 = v6, v16 >= v17 + 1))
          {
            *v16 = *v17;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v18 = *(_QWORD *)(v3 + 16);
  v19 = __OFSUB__(v18, 1);
  v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_1000D58FC(int64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  void (*v32)(char *, unint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;

  v3 = type metadata accessor for UUID(0);
  v34 = *(_QWORD *)(v3 - 8);
  result = __chkstk_darwin(v3, v4);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v9 = *v1 + 56;
  v10 = -1 << *(_BYTE *)(*v1 + 32);
  v11 = (a1 + 1) & ~v10;
  if (((1 << v11) & *(_QWORD *)(v9 + 8 * (v11 >> 6))) != 0)
  {
    v31 = v1;
    v12 = ~v10;
    swift_retain(v8);
    v13 = _HashTable.previousHole(before:)(a1, v9, v12);
    v33 = v9;
    if ((*(_QWORD *)(v9 + 8 * (v11 >> 6)) & (1 << v11)) != 0)
    {
      v14 = (v13 + 1) & v12;
      v15 = *(_QWORD *)(v34 + 72);
      v32 = *(void (**)(char *, unint64_t, uint64_t))(v34 + 16);
      do
      {
        v16 = v15 * v11;
        v32(v7, *(_QWORD *)(v8 + 48) + v15 * v11, v3);
        v17 = *(_QWORD *)(v8 + 40);
        v18 = sub_1000C69C4((unint64_t *)&unk_100347730, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v19 = dispatch thunk of Hashable._rawHashValue(seed:)(v17, v3, v18);
        (*(void (**)(char *, uint64_t))(v34 + 8))(v7, v3);
        v20 = v19 & v12;
        if (a1 >= (uint64_t)v14)
        {
          if (v20 < v14 || a1 < (uint64_t)v20)
            goto LABEL_6;
        }
        else if (v20 < v14 && a1 < (uint64_t)v20)
        {
          goto LABEL_6;
        }
        v23 = *(_QWORD *)(v8 + 48);
        v24 = v15 * a1;
        v25 = v23 + v15 * a1;
        v26 = v23 + v16;
        if (v15 * a1 < v16 || v25 >= v26 + v15)
        {
          swift_arrayInitWithTakeFrontToBack(v25, v26, 1, v3);
        }
        else
        {
          a1 = v11;
          if (v24 == v16)
            goto LABEL_6;
          swift_arrayInitWithTakeBackToFront();
        }
        a1 = v11;
LABEL_6:
        v11 = (v11 + 1) & v12;
      }
      while (((*(_QWORD *)(v33 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
    }
    *(_QWORD *)(v33 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    result = swift_release(v8);
    v1 = v31;
  }
  else
  {
    *(_QWORD *)(v9 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  v27 = *v1;
  v28 = *(_QWORD *)(*v1 + 16);
  v29 = __OFSUB__(v28, 1);
  v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v27 + 16) = v30;
    ++*(_DWORD *)(v27 + 36);
  }
  return result;
}

Swift::Int sub_1000D5B7C(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::Int result;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  id v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  Swift::Int v30;
  _QWORD v31[2];
  _QWORD v32[9];
  uint64_t v33;
  _QWORD *v34;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v9 = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 0xC000000000000001) != 0)
  {
    v1 = &_swiftEmptySetSingleton;
    v34 = &_swiftEmptySetSingleton;
    if (a1 < 0)
      v10 = a1;
    else
      v10 = a1 & 0xFFFFFFFFFFFFFF8;
    v11 = __CocoaSet.makeIterator()(v10);
    v12 = __CocoaSet.Iterator.next()(v11);
    if (v12)
    {
      v13 = v12;
      v31[1] = v2;
      v14 = type metadata accessor for DSKBLE.BLEPeripheral();
      do
      {
        v32[0] = v13;
        swift_dynamicCast(&v33, v32, (char *)&type metadata for Swift.AnyObject + 8, v14, 7);
        v16 = v33;
        if (*(_BYTE *)(v33 + 32))
        {
          result = swift_release(v33);
        }
        else
        {
          v17 = v34;
          v18 = v34[2];
          if (v34[3] <= v18)
          {
            sub_1000CC4D4(v18 + 1);
            v17 = v34;
          }
          Hasher.init(_seed:)(v32);
          v19 = objc_msgSend(*(id *)(v16 + 24), "identifier");
          static UUID._unconditionallyBridgeFromObjectiveC(_:)(v19);

          v20 = sub_1000C69C4((unint64_t *)&unk_100347730, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          dispatch thunk of Hashable.hash(into:)(v32, v4, v20);
          (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
          result = Hasher._finalize()();
          v21 = v17 + 7;
          v22 = -1 << *((_BYTE *)v17 + 32);
          v23 = result & ~v22;
          v24 = v23 >> 6;
          if (((-1 << v23) & ~v17[(v23 >> 6) + 7]) != 0)
          {
            v25 = __clz(__rbit64((-1 << v23) & ~v17[(v23 >> 6) + 7])) | v23 & 0x7FFFFFFFFFFFFFC0;
          }
          else
          {
            v26 = 0;
            v27 = (unint64_t)(63 - v22) >> 6;
            do
            {
              if (++v24 == v27 && (v26 & 1) != 0)
              {
                __break(1u);
                return result;
              }
              v28 = v24 == v27;
              if (v24 == v27)
                v24 = 0;
              v26 |= v28;
              v29 = v21[v24];
            }
            while (v29 == -1);
            v25 = __clz(__rbit64(~v29)) + (v24 << 6);
          }
          *(_QWORD *)((char *)v21 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
          *(_QWORD *)(v17[6] + 8 * v25) = v16;
          ++v17[2];
        }
        v13 = __CocoaSet.Iterator.next()(result);
      }
      while (v13);
      v1 = v34;
    }
    swift_release(v11);
  }
  else
  {
    v30 = sub_1000D5E34(a1, v7);
    if (!v2)
      return v30;
  }
  return (Swift::Int)v1;
}

Swift::Int sub_1000D5E34(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v2;
  char v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  BOOL v20;
  char *v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  unint64_t v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  Swift::Int v35;
  uint64_t v36;

  v2 = isStackAllocationSafe;
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = v3 & 0x3F;
  v5 = (1 << v3) + 63;
  v6 = v5 >> 6;
  v7 = 8 * (v5 >> 6);
  if (v4 > 0xD)
  {
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8);
    if ((isStackAllocationSafe & 1) == 0)
    {
      v22 = (char *)swift_slowAlloc(v7, -1);
      bzero(v22, v7);
      v23 = 0;
      v24 = 0;
      v25 = v2 + 56;
      v26 = 1 << *(_BYTE *)(v2 + 32);
      if (v26 < 64)
        v27 = ~(-1 << v26);
      else
        v27 = -1;
      v28 = v27 & *(_QWORD *)(v2 + 56);
      v29 = (unint64_t)(v26 + 63) >> 6;
      while (1)
      {
        if (v28)
        {
          v30 = __clz(__rbit64(v28));
          v28 &= v28 - 1;
          v31 = v30 | (v24 << 6);
        }
        else
        {
          v32 = v24 + 1;
          if (__OFADD__(v24, 1))
            goto LABEL_54;
          if (v32 >= v29)
            goto LABEL_51;
          v33 = *(_QWORD *)(v25 + 8 * v32);
          ++v24;
          if (!v33)
          {
            v24 = v32 + 1;
            if (v32 + 1 >= v29)
              goto LABEL_51;
            v33 = *(_QWORD *)(v25 + 8 * v24);
            if (!v33)
            {
              v24 = v32 + 2;
              if (v32 + 2 >= v29)
                goto LABEL_51;
              v33 = *(_QWORD *)(v25 + 8 * v24);
              if (!v33)
              {
                v34 = v32 + 3;
                if (v34 >= v29)
                  goto LABEL_51;
                v33 = *(_QWORD *)(v25 + 8 * v34);
                if (!v33)
                {
                  while (1)
                  {
                    v24 = v34 + 1;
                    if (__OFADD__(v34, 1))
                      goto LABEL_56;
                    if (v24 >= v29)
                      break;
                    v33 = *(_QWORD *)(v25 + 8 * v24);
                    ++v34;
                    if (v33)
                      goto LABEL_47;
                  }
LABEL_51:
                  v35 = sub_1001958D8((unint64_t *)v22, v6, v23, v2);
                  swift_slowDealloc(v22, -1, -1);
                  return v35;
                }
                v24 = v34;
              }
            }
          }
LABEL_47:
          v28 = (v33 - 1) & v33;
          v31 = __clz(__rbit64(v33)) + (v24 << 6);
        }
        if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v31) + 32))
        {
          *(_QWORD *)&v22[(v31 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v31;
          v20 = __OFADD__(v23++, 1);
          if (v20)
          {
            __break(1u);
            goto LABEL_51;
          }
        }
      }
    }
  }
  __chkstk_darwin(isStackAllocationSafe, a2);
  bzero((char *)&v36 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
  v8 = 0;
  v9 = 0;
  v10 = v2 + 56;
  v11 = 1 << *(_BYTE *)(v2 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v2 + 56);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v9 << 6);
    }
    else
    {
      v17 = v9 + 1;
      if (__OFADD__(v9, 1))
      {
        __break(1u);
LABEL_54:
        __break(1u);
        goto LABEL_55;
      }
      if (v17 >= v14)
        return sub_1001958D8((unint64_t *)((char *)&v36 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)), v6, v8, v2);
      v18 = *(_QWORD *)(v10 + 8 * v17);
      ++v9;
      if (!v18)
      {
        v9 = v17 + 1;
        if (v17 + 1 >= v14)
          return sub_1001958D8((unint64_t *)((char *)&v36 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)), v6, v8, v2);
        v18 = *(_QWORD *)(v10 + 8 * v9);
        if (!v18)
        {
          v9 = v17 + 2;
          if (v17 + 2 >= v14)
            return sub_1001958D8((unint64_t *)((char *)&v36 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)), v6, v8, v2);
          v18 = *(_QWORD *)(v10 + 8 * v9);
          if (!v18)
          {
            v19 = v17 + 3;
            if (v19 >= v14)
              return sub_1001958D8((unint64_t *)((char *)&v36 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)), v6, v8, v2);
            v18 = *(_QWORD *)(v10 + 8 * v19);
            if (!v18)
            {
              while (1)
              {
                v9 = v19 + 1;
                if (__OFADD__(v19, 1))
                  break;
                if (v9 >= v14)
                  return sub_1001958D8((unint64_t *)((char *)&v36 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)), v6, v8, v2);
                v18 = *(_QWORD *)(v10 + 8 * v9);
                ++v19;
                if (v18)
                  goto LABEL_22;
              }
LABEL_55:
              __break(1u);
LABEL_56:
              __break(1u);
            }
            v9 = v19;
          }
        }
      }
LABEL_22:
      v13 = (v18 - 1) & v18;
      v16 = __clz(__rbit64(v18)) + (v9 << 6);
    }
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v16) + 32))
    {
      *(uint64_t *)((char *)&v36 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8) - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)) |= 1 << v16;
      v20 = __OFADD__(v8++, 1);
      if (v20)
        break;
    }
  }
  __break(1u);
  return sub_1001958D8((unint64_t *)((char *)&v36 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)), v6, v8, v2);
}

uint64_t sub_1000D61BC(uint64_t a1)
{
  Swift::Int *v1;
  Swift::Int *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  Swift::Int v10;
  Swift::Int v11;
  Swift::Int v12;

  v2 = v1;
  v4 = *v1;
  if ((v4 & 0xC000000000000001) == 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
    v12 = *v2;
    *v2 = 0x8000000000000000;
    v8 = sub_1000D639C(a1, isUniquelyReferenced_nonNull_native);
    v10 = *v2;
    *v2 = v12;
    swift_bridgeObjectRelease(v10);
    return v8;
  }
  if (v4 < 0)
    v5 = v4;
  else
    v5 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v4);
  v6 = __CocoaSet.count.getter(v5);
  result = swift_bridgeObjectRelease(v4);
  if (!__OFADD__(v6, 1))
  {
    v11 = sub_1000CAC34(v5, v6 + 1);
    v8 = sub_1000D639C(a1, 1);
    *v2 = v11;
    return v8;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000D62A0(uint64_t a1)
{
  Swift::Int *v1;
  Swift::Int *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  Swift::Int v12;
  Swift::Int v13;
  Swift::Int v14;

  v2 = v1;
  v4 = *v1;
  if ((*v1 & 0xC000000000000001) == 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
    v14 = *v1;
    *v1 = 0x8000000000000000;
    sub_1000D6764(a1, isUniquelyReferenced_nonNull_native);
    v9 = v11;
    v12 = *v2;
    *v2 = v14;
    swift_bridgeObjectRelease(v12);
    return v9;
  }
  if (v4 < 0)
    v5 = *v1;
  else
    v5 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v4);
  v6 = __CocoaSet.count.getter(v5);
  result = swift_bridgeObjectRelease(v4);
  if (!__OFADD__(v6, 1))
  {
    v13 = sub_1000CA3DC(v5, v6 + 1, (uint64_t *)&unk_100346100, (unint64_t *)&qword_100347710, SEEndPoint_ptr);
    sub_1000D6764(a1, 1);
    v9 = v8;
    *v2 = v13;
    return v9;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000D639C(uint64_t a1, char a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v46;
  _QWORD v47[9];

  v3 = v2;
  v5 = *v2;
  Hasher.init(_seed:)(v47);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = type metadata accessor for UUID(0);
  v8 = sub_1000C69C4((unint64_t *)&unk_100347730, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  swift_retain(v6);
  v43 = v8;
  v44 = v7;
  dispatch thunk of Hashable.hash(into:)(v47, v7, v8);
  swift_release(v6);
  v9 = Hasher._finalize()();
  v10 = -1 << *(_BYTE *)(v5 + 32);
  v11 = v9 & ~v10;
  v12 = v5 + 56;
  v46 = v2;
  if (((*(_QWORD *)(v5 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
  {
    v13 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v11);
    v14 = *(_QWORD *)(v13 + 16) + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
    v15 = *(_QWORD *)(a1 + 16) + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
    swift_retain(v13);
    LOBYTE(v14) = static UUID.== infix(_:_:)(v14, v15);
    swift_release(v13);
    if ((v14 & 1) != 0)
    {
      v16 = 0;
      v17 = 1;
    }
    else
    {
      v18 = ~v10;
      v11 = (v11 + 1) & v18;
      if (((*(_QWORD *)(v12 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
      {
        v16 = 1;
        while (1)
        {
          v19 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v11);
          v20 = *(_QWORD *)(v19 + 16) + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
          v21 = *(_QWORD *)(a1 + 16) + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
          swift_retain(v19);
          v17 = static UUID.== infix(_:_:)(v20, v21);
          swift_release(v19);
          if ((v17 & 1) != 0)
            break;
          v11 = (v11 + 1) & v18;
          if (((*(_QWORD *)(v12 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
            goto LABEL_12;
        }
        v16 = 0;
      }
      else
      {
        v17 = 0;
        v16 = 1;
      }
    }
LABEL_12:
    v3 = v46;
  }
  else
  {
    v17 = 0;
    v16 = 1;
  }
  v22 = *(_QWORD *)(v5 + 16);
  v23 = v22 + v16;
  if (__OFADD__(v22, v16))
  {
    __break(1u);
    goto LABEL_36;
  }
  v24 = *(_QWORD *)(v5 + 24);
  if (v24 >= v23 && (a2 & 1) != 0)
  {
    if ((v17 & 1) == 0)
      goto LABEL_32;
LABEL_30:
    v36 = *(_QWORD *)(*v3 + 48);
    result = *(_QWORD *)(v36 + 8 * v11);
    *(_QWORD *)(v36 + 8 * v11) = a1;
    return result;
  }
  if ((a2 & 1) != 0)
  {
    sub_1000CC188(v23);
    goto LABEL_24;
  }
  if (v24 < v23)
  {
    sub_1000D1F04(v23);
LABEL_24:
    v25 = *v3;
    Hasher.init(_seed:)(v47);
    v26 = *(_QWORD *)(a1 + 16);
    swift_retain(v26);
    dispatch thunk of Hashable.hash(into:)(v47, v44, v43);
    swift_release(v26);
    v27 = Hasher._finalize()();
    v28 = -1 << *(_BYTE *)(v25 + 32);
    v11 = v27 & ~v28;
    if (((*(_QWORD *)(v25 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
    {
      v29 = *(_QWORD *)(*(_QWORD *)(v25 + 48) + 8 * v11);
      v30 = *(_QWORD *)(v29 + 16) + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
      v31 = *(_QWORD *)(a1 + 16) + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
      swift_retain(v29);
      LOBYTE(v30) = static UUID.== infix(_:_:)(v30, v31);
      swift_release(v29);
      if ((v30 & 1) != 0)
      {
LABEL_29:
        v3 = v46;
        if ((v17 & 1) != 0)
          goto LABEL_30;
LABEL_37:
        v42 = type metadata accessor for DSKBLE.BLEConnectionRequest();
        result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v42);
        __break(1u);
        return result;
      }
      v32 = ~v28;
      while (1)
      {
        v11 = (v11 + 1) & v32;
        if (((*(_QWORD *)(v25 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
          break;
        v33 = *(_QWORD *)(*(_QWORD *)(v25 + 48) + 8 * v11);
        v34 = *(_QWORD *)(v33 + 16) + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
        v35 = *(_QWORD *)(a1 + 16) + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
        swift_retain(v33);
        LOBYTE(v34) = static UUID.== infix(_:_:)(v34, v35);
        swift_release(v33);
        if ((v34 & 1) != 0)
          goto LABEL_29;
      }
    }
    v3 = v46;
    if ((v17 & 1) == 0)
      goto LABEL_32;
    goto LABEL_37;
  }
  sub_1000D1008((uint64_t *)&unk_100346080);
  if ((v17 & 1) != 0)
    goto LABEL_30;
LABEL_32:
  v38 = *v3;
  *(_QWORD *)(*v3 + 8 * (v11 >> 6) + 56) |= 1 << v11;
  *(_QWORD *)(*(_QWORD *)(v38 + 48) + 8 * v11) = a1;
  v39 = *(_QWORD *)(v38 + 16);
  v40 = __OFADD__(v39, 1);
  v41 = v39 + 1;
  if (v40)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  result = 0;
  *(_QWORD *)(v38 + 16) = v41;
  return result;
}

void sub_1000D6764(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  id v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::Int v21;
  uint64_t v22;
  uint64_t *v23;
  id v24;
  char v25;
  uint64_t v26;
  id v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;

  v3 = v2;
  v6 = *v2;
  v7 = NSObject._rawHashValue(seed:)(*(_QWORD *)(*v2 + 40));
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  v10 = v6 + 56;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
  {
    sub_10006C25C(0, (unint64_t *)&qword_100347710, SEEndPoint_ptr);
    v11 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v9);
    v12 = static NSObject.== infix(_:_:)(v11);

    if ((v12 & 1) != 0)
    {
      v13 = 0;
      v14 = 1;
    }
    else
    {
      v15 = ~v8;
      v9 = (v9 + 1) & v15;
      if (((*(_QWORD *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
      {
        v13 = 1;
        while (1)
        {
          v16 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v9);
          v14 = static NSObject.== infix(_:_:)(v16);

          if ((v14 & 1) != 0)
            break;
          v9 = (v9 + 1) & v15;
          if (((*(_QWORD *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
            goto LABEL_12;
        }
        v13 = 0;
      }
      else
      {
        v14 = 0;
        v13 = 1;
      }
    }
LABEL_12:
    v3 = v2;
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v17 = *(_QWORD *)(v6 + 16);
  v18 = v17 + v13;
  if (__OFADD__(v17, v13))
    goto LABEL_36;
  v19 = *(_QWORD *)(v6 + 24);
  if (v19 >= v18 && (a2 & 1) != 0)
  {
    if ((v14 & 1) == 0)
      goto LABEL_32;
LABEL_30:
    *(_QWORD *)(*(_QWORD *)(*v3 + 48) + 8 * v9) = a1;
    return;
  }
  if ((a2 & 1) != 0)
  {
    sub_1000CCBD0(v18, (uint64_t *)&unk_100346100);
  }
  else
  {
    if (v19 >= v18)
    {
      sub_1000D0AEC((uint64_t *)&unk_100346100);
      if ((v14 & 1) != 0)
        goto LABEL_30;
      goto LABEL_32;
    }
    sub_1000D28A4(v18, (uint64_t *)&unk_100346100);
  }
  v20 = *v3;
  v21 = NSObject._rawHashValue(seed:)(*(_QWORD *)(*v3 + 40));
  v22 = -1 << *(_BYTE *)(v20 + 32);
  v9 = v21 & ~v22;
  if (((*(_QWORD *)(v20 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
    if ((v14 & 1) == 0)
      goto LABEL_32;
    goto LABEL_35;
  }
  v23 = v3;
  sub_10006C25C(0, (unint64_t *)&qword_100347710, SEEndPoint_ptr);
  v24 = *(id *)(*(_QWORD *)(v20 + 48) + 8 * v9);
  v25 = static NSObject.== infix(_:_:)(v24);

  if ((v25 & 1) != 0)
  {
LABEL_29:
    v3 = v23;
    if ((v14 & 1) != 0)
      goto LABEL_30;
    goto LABEL_35;
  }
  v26 = ~v22;
  while (1)
  {
    v9 = (v9 + 1) & v26;
    if (((*(_QWORD *)(v20 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
      break;
    v27 = *(id *)(*(_QWORD *)(v20 + 48) + 8 * v9);
    v28 = static NSObject.== infix(_:_:)(v27);

    if ((v28 & 1) != 0)
      goto LABEL_29;
  }
  v3 = v23;
  if ((v14 & 1) != 0)
  {
LABEL_35:
    v33 = sub_10006C25C(0, (unint64_t *)&qword_100347710, SEEndPoint_ptr);
    ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v33);
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
LABEL_32:
  v29 = *v3;
  *(_QWORD *)(*v3 + 8 * (v9 >> 6) + 56) |= 1 << v9;
  *(_QWORD *)(*(_QWORD *)(v29 + 48) + 8 * v9) = a1;
  v30 = *(_QWORD *)(v29 + 16);
  v31 = __OFADD__(v30, 1);
  v32 = v30 + 1;
  if (!v31)
  {
    *(_QWORD *)(v29 + 16) = v32;
    return;
  }
LABEL_37:
  __break(1u);
}

_QWORD *sub_1000D6A7C(_QWORD *a1)
{
  return sub_1001C4254(0, a1[2], 0, a1);
}

uint64_t sub_1000D6A94(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v4 = a1;
    else
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v4);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0, a1);
}

uint64_t sub_1000D6AFC(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t result;
  uint64_t v14;
  _BYTE v16[24];
  _BYTE v17[40];
  _QWORD v18[5];

  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v18[3] = type metadata accessor for DSKBLE(0);
  v18[4] = &off_1003082F0;
  v18[0] = a1;
  v9 = qword_1003447B8;
  v10 = a1;
  if (v9 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v11 = qword_100354EE8;
  *v8 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  v12 = (id)v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v8);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  if ((v11 & 1) != 0)
  {
    sub_1000E504C((uint64_t)v18, (uint64_t)v17);
    v14 = a2 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_delegate;
    swift_beginAccess(v14, v16, 33, 0);
    sub_1000E5090((uint64_t)v17, v14);
    swift_endAccess(v16);
    return sub_10006BA9C(v18);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000D6C48(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  char v11;
  _QWORD v13[5];

  v13[3] = type metadata accessor for DSKBLE.BLEScanRequest();
  v13[4] = &off_100308388;
  v13[0] = a3;
  *(_QWORD *)(a5 + 80) = 0;
  *(_QWORD *)(a5 + 88) = &_swiftEmptySetSingleton;
  *(_QWORD *)(a5 + 96) = &_swiftEmptyDictionarySingleton;
  *(_OWORD *)(a5 + 104) = xmmword_1002888D0;
  *(_WORD *)(a5 + 120) = 0;
  *(_BYTE *)(a5 + 122) = 1;
  *(_QWORD *)(a5 + 128) = 0;
  v10 = static Array._allocateBufferUninitialized(minimumCapacity:)(4096, &type metadata for UInt8);
  *(_QWORD *)(v10 + 16) = 4096;
  bzero((void *)(v10 + 32), 0x1000uLL);
  *(_QWORD *)(a5 + 136) = v10;
  *(_QWORD *)(a5 + 144) = 0;
  *(_QWORD *)(a5 + 152) = 0;
  *(_QWORD *)(a5 + 160) = _swiftEmptyArrayStorage;
  *(_BYTE *)(a5 + 168) = 2;
  *(_QWORD *)(a5 + 176) = 0;
  *(_QWORD *)(a5 + 184) = 0;
  *(_BYTE *)(a5 + 192) = 1;
  *(_QWORD *)(a5 + 24) = a1;
  *(_BYTE *)(a5 + 32) = a2;
  sub_1000E504C((uint64_t)v13, a5 + 40);
  *(_QWORD *)(a5 + 16) = a4;
  v11 = *(_BYTE *)(a3 + 96);
  *(_OWORD *)(a5 + 176) = *(_OWORD *)(a3 + 80);
  *(_BYTE *)(a5 + 192) = v11;
  sub_10006BA9C(v13);
  return a5;
}

uint64_t sub_1000D6D58(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  char v11;
  _QWORD v13[5];

  v13[3] = type metadata accessor for DSKBLE.BLEConnectionRequest();
  v13[4] = &off_100308308;
  v13[0] = a3;
  *(_QWORD *)(a5 + 80) = 0;
  *(_QWORD *)(a5 + 88) = &_swiftEmptySetSingleton;
  *(_QWORD *)(a5 + 96) = &_swiftEmptyDictionarySingleton;
  *(_OWORD *)(a5 + 104) = xmmword_1002888D0;
  *(_WORD *)(a5 + 120) = 0;
  *(_BYTE *)(a5 + 122) = 1;
  *(_QWORD *)(a5 + 128) = 0;
  v10 = static Array._allocateBufferUninitialized(minimumCapacity:)(4096, &type metadata for UInt8);
  *(_QWORD *)(v10 + 16) = 4096;
  bzero((void *)(v10 + 32), 0x1000uLL);
  *(_QWORD *)(a5 + 136) = v10;
  *(_QWORD *)(a5 + 144) = 0;
  *(_QWORD *)(a5 + 152) = 0;
  *(_QWORD *)(a5 + 160) = _swiftEmptyArrayStorage;
  *(_BYTE *)(a5 + 168) = 2;
  *(_QWORD *)(a5 + 176) = 0;
  *(_QWORD *)(a5 + 184) = 0;
  *(_BYTE *)(a5 + 192) = 1;
  *(_QWORD *)(a5 + 24) = a1;
  *(_BYTE *)(a5 + 32) = a2;
  sub_1000E504C((uint64_t)v13, a5 + 40);
  *(_QWORD *)(a5 + 16) = a4;
  v11 = *(_BYTE *)(a3 + 80);
  *(_OWORD *)(a5 + 176) = *(_OWORD *)(a3 + 64);
  *(_BYTE *)(a5 + 192) = v11;
  sub_10006BA9C(v13);
  return a5;
}

void *sub_1000D6E68(unint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v3 = a1;
  if (a1 >> 62)
    goto LABEL_16;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    while (1)
    {
      v5 = 0;
      v6 = &OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
      v7 = a2 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
      a2 = v3 & 0xC000000000000001;
      v8 = v3 & 0xFFFFFFFFFFFFFF8;
      v20 = v3 & 0xFFFFFFFFFFFFFF8;
      v21 = v3 & 0xC000000000000001;
      while (a2)
      {
        v16 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v3);
        v17 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_13:
          __break(1u);
          return &_swiftEmptyArrayStorage;
        }
LABEL_9:
        if ((static UUID.== infix(_:_:)(*(_QWORD *)(v16 + 32) + *v6, v7) & 1) != 0)
        {
          swift_release(v16);
        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          v9 = v7;
          v10 = v6;
          v11 = v4;
          v12 = v3;
          v13 = *((_QWORD *)&_swiftEmptyArrayStorage + 2);
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v13);
          v14 = v13;
          v3 = v12;
          v4 = v11;
          v6 = v10;
          v7 = v9;
          v8 = v20;
          v15 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v16);
          specialized ContiguousArray._endMutation()(v15);
          a2 = v21;
        }
        ++v5;
        if (v17 == v4)
          return &_swiftEmptyArrayStorage;
      }
      if (v5 < *(_QWORD *)(v8 + 16))
        break;
      __break(1u);
LABEL_16:
      if (v3 < 0)
        v19 = v3;
      else
        v19 = v3 & 0xFFFFFFFFFFFFFF8;
      v4 = _CocoaArrayWrapper.endIndex.getter(v19);
      if (!v4)
        return &_swiftEmptyArrayStorage;
    }
    v16 = *(_QWORD *)(v3 + 8 * v5 + 32);
    swift_retain(v16);
    v17 = v5 + 1;
    if (__OFADD__(v5, 1))
      goto LABEL_13;
    goto LABEL_9;
  }
  return &_swiftEmptyArrayStorage;
}

void *sub_1000D7000(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  NSString v9;
  unsigned int v10;
  uint64_t v11;

  if ((unint64_t)a1 >> 62)
    goto LABEL_13;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v4; v4 = _CocoaArrayWrapper.endIndex.getter(v11))
  {
    a2 = *(_QWORD *)(a2 + OBJC_IVAR____TtCC10seserviced13DSKBLEPairing19BLEUnpairingRequest_tag);
    v5 = 4;
    while (1)
    {
      v6 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, a1)
         : *(id *)(a1 + 8 * v5);
      v7 = v6;
      v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1))
        break;
      v9 = String._bridgeToObjectiveC()();
      v10 = objc_msgSend(v7, "hasTag:", v9);

      if (v10)
      {
        swift_bridgeObjectRelease(a1);
        return v7;
      }

      ++v5;
      if (v8 == v4)
        goto LABEL_17;
    }
    __break(1u);
LABEL_13:
    if (a1 < 0)
      v11 = a1;
    else
      v11 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
LABEL_17:
  swift_bridgeObjectRelease(a1);
  return 0;
}

uint64_t sub_1000D7158(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  if ((unint64_t)a1 >> 62)
    goto LABEL_13;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v4)
  {
    a2 += OBJC_IVAR____TtCC10seserviced13DSKBLEPairing19BLEUnpairingRequest_peerIdentifier;
    v5 = 4;
    while (1)
    {
      v6 = v5 - 4;
      if ((a1 & 0xC000000000000001) == 0)
        break;
      v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, a1);
      v8 = v5 - 3;
      if (__OFADD__(v6, 1))
        goto LABEL_12;
LABEL_9:
      v9 = static UUID.== infix(_:_:)(v7 + OBJC_IVAR____TtCC10seserviced13DSKBLEPairing19BLEUnpairingRequest_peerIdentifier, a2);
      swift_release(v7);
      if ((v9 & 1) == 0)
      {
        ++v5;
        if (v8 != v4)
          continue;
      }
      goto LABEL_18;
    }
    v7 = *(_QWORD *)(a1 + 8 * v5);
    swift_retain(v7);
    v8 = v5 - 3;
    if (!__OFADD__(v6, 1))
      goto LABEL_9;
LABEL_12:
    __break(1u);
LABEL_13:
    if (a1 < 0)
      v10 = a1;
    else
      v10 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v4 = _CocoaArrayWrapper.endIndex.getter(v10);
  }
  v9 = 0;
LABEL_18:
  swift_bridgeObjectRelease(a1);
  return v9 & 1;
}

void sub_1000D7270(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSString v12;
  id v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;

  v18 = a2;
  v20 = 0;
  v4 = 0;
  v21 = a3 + 56;
  v5 = 1 << *(_BYTE *)(a3 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a3 + 56);
  v22 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v8 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v9 = v8 | (v4 << 6);
      goto LABEL_5;
    }
    v14 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v14 >= v22)
      goto LABEL_24;
    v15 = *(_QWORD *)(v21 + 8 * v14);
    ++v4;
    if (!v15)
    {
      v4 = v14 + 1;
      if (v14 + 1 >= v22)
        goto LABEL_24;
      v15 = *(_QWORD *)(v21 + 8 * v4);
      if (!v15)
      {
        v4 = v14 + 2;
        if (v14 + 2 >= v22)
          goto LABEL_24;
        v15 = *(_QWORD *)(v21 + 8 * v4);
        if (!v15)
          break;
      }
    }
LABEL_20:
    v7 = (v15 - 1) & v15;
    v9 = __clz(__rbit64(v15)) + (v4 << 6);
LABEL_5:
    v10 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v9);
    v11 = *(_QWORD *)(v10 + 24);
    swift_retain(v10);
    swift_bridgeObjectRetain(v11);
    v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v11);
    v13 = objc_msgSend((id)objc_opt_self(CBUUID), "UUIDWithString:", v12, v18);

    sub_10006C25C(0, (unint64_t *)&unk_100348970, CBUUID_ptr);
    LOBYTE(v11) = static NSObject.== infix(_:_:)(v13);
    swift_release(v10);

    if ((v11 & 1) == 0)
    {
      *(unint64_t *)((char *)a1 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
      if (__OFADD__(v20++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain(a3);
        sub_100194BA8(a1, v18, v20, a3);
        return;
      }
    }
  }
  v16 = v14 + 3;
  if (v16 >= v22)
    goto LABEL_24;
  v15 = *(_QWORD *)(v21 + 8 * v16);
  if (v15)
  {
    v4 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    v4 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v4 >= v22)
      goto LABEL_24;
    v15 = *(_QWORD *)(v21 + 8 * v4);
    ++v16;
    if (v15)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
}

Swift::Int sub_1000D74C4(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  Swift::Int result;
  uint64_t v11;
  NSString v12;
  id v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  _QWORD v32[9];
  uint64_t v33;
  _QWORD *v34;

  if ((a1 & 0xC000000000000001) == 0)
    return sub_1000E1F74(a1, a2, (uint64_t (*)(char *, unint64_t, uint64_t, id))sub_1000D7270);
  v2 = &_swiftEmptySetSingleton;
  v34 = &_swiftEmptySetSingleton;
  if (a1 < 0)
    v3 = a1;
  else
    v3 = a1 & 0xFFFFFFFFFFFFFF8;
  v4 = a2;
  v5 = __CocoaSet.makeIterator()(v3);
  v6 = __CocoaSet.Iterator.next()(v5);
  if (v6)
  {
    v7 = v6;
    v8 = type metadata accessor for DSKBLE.BLEScanRequest();
    v9 = (char *)&type metadata for Swift.AnyObject + 8;
    do
    {
      v32[0] = v7;
      swift_dynamicCast(&v33, v32, v9, v8, 7);
      v11 = *(_QWORD *)(v33 + 24);
      swift_bridgeObjectRetain(v11);
      v12 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v11);
      v13 = objc_msgSend((id)objc_opt_self(CBUUID), "UUIDWithString:", v12);

      sub_10006C25C(0, (unint64_t *)&unk_100348970, CBUUID_ptr);
      LOBYTE(v11) = static NSObject.== infix(_:_:)(v13);

      v14 = v33;
      if ((v11 & 1) != 0)
      {
        result = swift_release(v33);
      }
      else
      {
        v15 = v9;
        v16 = v5;
        v17 = v8;
        v18 = v4;
        v19 = v34;
        v20 = v34[2];
        if (v34[3] <= v20)
        {
          sub_1000CB358(v20 + 1);
          v19 = v34;
        }
        Hasher.init(_seed:)(v32);
        v22 = *(_QWORD *)(v14 + 16);
        v21 = *(_QWORD *)(v14 + 24);
        swift_bridgeObjectRetain(v21);
        String.hash(into:)(v32, v22, v21);
        swift_bridgeObjectRelease(v21);
        result = Hasher._finalize()();
        v23 = v19 + 7;
        v24 = -1 << *((_BYTE *)v19 + 32);
        v25 = result & ~v24;
        v26 = v25 >> 6;
        if (((-1 << v25) & ~v19[(v25 >> 6) + 7]) != 0)
        {
          v27 = __clz(__rbit64((-1 << v25) & ~v19[(v25 >> 6) + 7])) | v25 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v28 = 0;
          v29 = (unint64_t)(63 - v24) >> 6;
          do
          {
            if (++v26 == v29 && (v28 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v30 = v26 == v29;
            if (v26 == v29)
              v26 = 0;
            v28 |= v30;
            v31 = v23[v26];
          }
          while (v31 == -1);
          v27 = __clz(__rbit64(~v31)) + (v26 << 6);
        }
        *(_QWORD *)((char *)v23 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
        *(_QWORD *)(v19[6] + 8 * v27) = v14;
        ++v19[2];
        v4 = v18;
        v8 = v17;
        v5 = v16;
        v9 = v15;
      }
      v7 = __CocoaSet.Iterator.next()(result);
    }
    while (v7);
    v2 = v34;
  }

  swift_release(v5);
  return (Swift::Int)v2;
}

BOOL sub_1000D77A8(unint64_t a1)
{
  _BOOL4 v2;

  v2 = a1 == 5 || a1 == 10;
  return a1 >= 5 && v2;
}

uint64_t sub_1000D77C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  if ((unint64_t)a1 >> 62)
    goto LABEL_13;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v4)
  {
    a2 = *(_QWORD *)(a2 + 32) + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
    v5 = 4;
    while (1)
    {
      v6 = v5 - 4;
      if ((a1 & 0xC000000000000001) == 0)
        break;
      v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, a1);
      v8 = v5 - 3;
      if (__OFADD__(v6, 1))
        goto LABEL_12;
LABEL_9:
      v9 = static UUID.== infix(_:_:)(*(_QWORD *)(v7 + 32) + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier, a2);
      swift_release(v7);
      if ((v9 & 1) == 0)
      {
        ++v5;
        if (v8 != v4)
          continue;
      }
      goto LABEL_18;
    }
    v7 = *(_QWORD *)(a1 + 8 * v5);
    swift_retain(v7);
    v8 = v5 - 3;
    if (!__OFADD__(v6, 1))
      goto LABEL_9;
LABEL_12:
    __break(1u);
LABEL_13:
    if (a1 < 0)
      v10 = a1;
    else
      v10 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v4 = _CocoaArrayWrapper.endIndex.getter(v10);
  }
  v9 = 0;
LABEL_18:
  swift_bridgeObjectRelease(a1);
  return v9 & 1;
}

_QWORD *sub_1000D78E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v30;
  _QWORD v31[5];
  uint64_t v32;

  v2 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v3 = a1;
    else
      v3 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v4 = __CocoaSet.makeIterator()(v3);
    v5 = type metadata accessor for DSKBLE.BLEPeripheral();
    v6 = sub_1000C69C4(&qword_1003460B8, 255, (uint64_t (*)(uint64_t))type metadata accessor for DSKBLE.BLEPeripheral, (uint64_t)&unk_1002898C0);
    result = Set.Iterator.init(_cocoa:)(v31, v4, v5, v6);
    v2 = v31[0];
    v28 = v31[1];
    v8 = v31[2];
    v9 = v31[3];
    v10 = v31[4];
  }
  else
  {
    v11 = -1 << *(_BYTE *)(a1 + 32);
    v28 = a1 + 56;
    v8 = ~v11;
    v12 = -v11;
    if (v12 < 64)
      v13 = ~(-1 << v12);
    else
      v13 = -1;
    v10 = v13 & *(_QWORD *)(a1 + 56);
    result = (_QWORD *)swift_bridgeObjectRetain(a1);
    v9 = 0;
  }
  v27 = (unint64_t)(v8 + 64) >> 6;
  while (1)
  {
    v20 = v9;
    if (v2 < 0)
    {
      v24 = __CocoaSet.Iterator.next()(result);
      if (!v24)
        goto LABEL_36;
      v25 = v24;
      v30 = v24;
      v26 = type metadata accessor for DSKBLE.BLEPeripheral();
      swift_unknownObjectRetain(v25);
      swift_dynamicCast(&v32, &v30, (char *)&type metadata for Swift.AnyObject + 8, v26, 7);
      v16 = v32;
      swift_unknownObjectRelease(v25);
      if (!v16)
        goto LABEL_37;
      goto LABEL_13;
    }
    if (!v10)
      break;
    v14 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    v15 = v14 | (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    swift_retain(v16);
    if (!v16)
      goto LABEL_37;
LABEL_13:
    v17 = *(_QWORD *)(v16 + 16);
    v18 = v17 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
    v19 = *(_QWORD *)(a2 + 32) + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
    swift_retain(v17);
    LOBYTE(v19) = static UUID.== infix(_:_:)(v18, v19);
    swift_release(v16);
    result = (_QWORD *)swift_release(v17);
    if ((v19 & 1) != 0)
    {
      v16 = 1;
      goto LABEL_37;
    }
  }
  v21 = v9 + 1;
  if (!__OFADD__(v9, 1))
  {
    if (v21 >= v27)
      goto LABEL_36;
    v22 = *(_QWORD *)(v28 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v20 + 2;
      if (v20 + 2 >= v27)
        goto LABEL_36;
      v22 = *(_QWORD *)(v28 + 8 * v9);
      if (!v22)
      {
        v9 = v20 + 3;
        if (v20 + 3 >= v27)
          goto LABEL_36;
        v22 = *(_QWORD *)(v28 + 8 * v9);
        if (!v22)
        {
          v9 = v20 + 4;
          if (v20 + 4 >= v27)
            goto LABEL_36;
          v22 = *(_QWORD *)(v28 + 8 * v9);
          if (!v22)
          {
            v9 = v20 + 5;
            if (v20 + 5 >= v27)
              goto LABEL_36;
            v22 = *(_QWORD *)(v28 + 8 * v9);
            if (!v22)
            {
              v23 = v20 + 6;
              while (v27 != v23)
              {
                v22 = *(_QWORD *)(v28 + 8 * v23++);
                if (v22)
                {
                  v9 = v23 - 1;
                  goto LABEL_31;
                }
              }
LABEL_36:
              v16 = 0;
LABEL_37:
              sub_10007EF58(v2);
              return (_QWORD *)v16;
            }
          }
        }
      }
    }
LABEL_31:
    v10 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000D7BF4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  id v4;
  void *v5;
  unint64_t v6;
  NSString v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  if ((unint64_t)a1 >> 62)
    goto LABEL_16;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v2)
  {
    while (1)
    {
      v3 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3, a1);
LABEL_9:
        v5 = v4;
        v6 = v3 + 1;
        if (__OFADD__(v3, 1))
          goto LABEL_15;
        v7 = String._bridgeToObjectiveC()();
        v8 = objc_msgSend(v5, "hasTag:", v7);

        if (v8)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          v9 = _swiftEmptyArrayStorage[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v9);
          v10 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, v5);
          specialized ContiguousArray._endMutation()(v10);
        }
        else
        {

        }
        ++v3;
        if (v6 == v2)
          return _swiftEmptyArrayStorage;
      }
      if (v3 < *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        break;
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      if (a1 < 0)
        v12 = a1;
      else
        v12 = a1 & 0xFFFFFFFFFFFFFF8;
      v2 = _CocoaArrayWrapper.endIndex.getter(v12);
      if (!v2)
        return _swiftEmptyArrayStorage;
    }
    v4 = *(id *)(a1 + 8 * v3 + 32);
    goto LABEL_9;
  }
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_1000D7D58(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v12;
  uint64_t v13;
  id v14;
  void *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  char v25;
  id v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  _QWORD *v37;

  v3 = a1;
  v37 = _swiftEmptyArrayStorage;
  if (a1 >> 62)
    goto LABEL_44;
  for (i = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10); i; i = _CocoaArrayWrapper.endIndex.getter(v28))
  {
    v30 = v3;
    v5 = 0;
    v6 = v3 & 0xC000000000000001;
    v34 = v3 + 32;
    v35 = v3 & 0xFFFFFFFFFFFFFF8;
    v7 = a2 & 0xFFFFFFFFFFFFFF8;
    if (a2 < 0)
      v7 = a2;
    v29 = v7;
    v32 = i;
    v33 = a2 & 0xC000000000000001;
    v31 = v3 & 0xC000000000000001;
    while (1)
    {
      if (v6)
      {
        v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v30);
      }
      else
      {
        if (v5 >= *(_QWORD *)(v35 + 16))
          goto LABEL_41;
        v10 = *(id *)(v34 + 8 * v5);
      }
      v3 = (uint64_t)v10;
      if (__OFADD__(v5++, 1))
        goto LABEL_42;
      v12 = objc_msgSend(v10, "UUID");
      if ((unint64_t)a2 >> 62)
      {
        swift_bridgeObjectRetain(a2);
        v13 = _CocoaArrayWrapper.endIndex.getter(v29);
        if (!v13)
        {
LABEL_36:

          goto LABEL_37;
        }
      }
      else
      {
        v13 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(a2);
        if (!v13)
          goto LABEL_36;
      }
      v36 = (id)v3;
      if (v33)
        v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2);
      else
        v14 = *(id *)(a2 + 32);
      v15 = v14;
      v3 = sub_10006C25C(0, (unint64_t *)&unk_100348970, CBUUID_ptr);
      v16 = static NSObject.== infix(_:_:)(v15);

      if ((v16 & 1) != 0)
      {

        swift_bridgeObjectRelease(a2);
LABEL_32:
        v26 = objc_msgSend(v36, "properties");
        if ((v26 & 2) != 0)
        {
          v3 = (uint64_t)&v37;
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v26);
          v8 = v37[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v8);
          v9 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8, v36);
          specialized ContiguousArray._endMutation()(v9);
        }
        else
        {

        }
        goto LABEL_7;
      }
      if (v13 != 1)
        break;

LABEL_37:
      swift_bridgeObjectRelease(a2);
LABEL_7:
      if (v5 == i)
        return v37;
    }
    if (v33)
    {
      v17 = 1;
      while (1)
      {
        v18 = specialized _ArrayBuffer._getElementSlowPath(_:)(v17, a2);
        v19 = v17 + 1;
        if (__OFADD__(v17, 1))
          break;
        v20 = v18;
        v21 = static NSObject.== infix(_:_:)(v18);
        swift_unknownObjectRelease(v20);
        if ((v21 & 1) != 0)
          goto LABEL_31;
        ++v17;
        if (v19 == v13)
          goto LABEL_30;
      }
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    v22 = 5;
    while (1)
    {
      v23 = v22 - 3;
      if (__OFADD__(v22 - 4, 1))
        break;
      v24 = *(id *)(a2 + 8 * v22);
      v25 = static NSObject.== infix(_:_:)(v24);

      if ((v25 & 1) != 0)
      {
LABEL_31:

        swift_bridgeObjectRelease(a2);
        v6 = v31;
        i = v32;
        goto LABEL_32;
      }
      ++v22;
      if (v23 == v13)
      {
LABEL_30:

        swift_bridgeObjectRelease(a2);
        v6 = v31;
        i = v32;
        goto LABEL_7;
      }
    }
LABEL_43:
    __break(1u);
LABEL_44:
    if (v3 < 0)
      v28 = v3;
    else
      v28 = v3 & 0xFFFFFFFFFFFFFF8;
  }
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_1000D806C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v31;
  _QWORD v32[5];
  uint64_t v33;

  v2 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v3 = a1;
    else
      v3 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v4 = __CocoaSet.makeIterator()(v3);
    v5 = type metadata accessor for DSKBLE.BLEPeripheral();
    v6 = sub_1000C69C4(&qword_1003460B8, 255, (uint64_t (*)(uint64_t))type metadata accessor for DSKBLE.BLEPeripheral, (uint64_t)&unk_1002898C0);
    result = Set.Iterator.init(_cocoa:)(v32, v4, v5, v6);
    v2 = v32[0];
    v29 = v32[1];
    v8 = v32[2];
    v9 = v32[3];
    v10 = v32[4];
  }
  else
  {
    v11 = -1 << *(_BYTE *)(a1 + 32);
    v29 = a1 + 56;
    v12 = ~v11;
    v13 = -v11;
    if (v13 < 64)
      v14 = ~(-1 << v13);
    else
      v14 = -1;
    v10 = v14 & *(_QWORD *)(a1 + 56);
    result = (_QWORD *)swift_bridgeObjectRetain(a1);
    v8 = v12;
    v9 = 0;
  }
  v28 = (unint64_t)(v8 + 64) >> 6;
  if (v2 < 0)
    goto LABEL_13;
LABEL_11:
  if (v10)
  {
    v15 = (v10 - 1) & v10;
    v16 = __clz(__rbit64(v10)) | (v9 << 6);
    v17 = v9;
    goto LABEL_32;
  }
  v22 = v9 + 1;
  if (!__OFADD__(v9, 1))
  {
    if (v22 < v28)
    {
      v23 = *(_QWORD *)(v29 + 8 * v22);
      v17 = v9 + 1;
      if (v23)
        goto LABEL_31;
      v17 = v9 + 2;
      if (v9 + 2 < v28)
      {
        v23 = *(_QWORD *)(v29 + 8 * v17);
        if (v23)
          goto LABEL_31;
        v17 = v9 + 3;
        if (v9 + 3 < v28)
        {
          v23 = *(_QWORD *)(v29 + 8 * v17);
          if (v23)
            goto LABEL_31;
          v17 = v9 + 4;
          if (v9 + 4 < v28)
          {
            v23 = *(_QWORD *)(v29 + 8 * v17);
            if (v23)
              goto LABEL_31;
            v17 = v9 + 5;
            if (v9 + 5 < v28)
            {
              v23 = *(_QWORD *)(v29 + 8 * v17);
              if (!v23)
              {
                v24 = v9 + 6;
                while (v28 != v24)
                {
                  v23 = *(_QWORD *)(v29 + 8 * v24++);
                  if (v23)
                  {
                    v17 = v24 - 1;
                    goto LABEL_31;
                  }
                }
                goto LABEL_36;
              }
LABEL_31:
              v15 = (v23 - 1) & v23;
              v16 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_32:
              v21 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v16);
              swift_retain(v21);
              for (; v21; v15 = v10)
              {
                v25 = *(_QWORD *)(v21 + 16);
                v26 = v25 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
                v27 = *(_QWORD *)(a2 + 16) + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
                swift_retain(v25);
                LOBYTE(v27) = static UUID.== infix(_:_:)(v26, v27);
                swift_release(v25);
                if ((v27 & 1) != 0)
                  break;
                result = (_QWORD *)swift_release(v21);
                v9 = v17;
                v10 = v15;
                if ((v2 & 0x8000000000000000) == 0)
                  goto LABEL_11;
LABEL_13:
                v18 = __CocoaSet.Iterator.next()(result);
                if (!v18)
                  goto LABEL_36;
                v19 = v18;
                v31 = v18;
                v20 = type metadata accessor for DSKBLE.BLEPeripheral();
                swift_unknownObjectRetain(v19);
                swift_dynamicCast(&v33, &v31, (char *)&type metadata for Swift.AnyObject + 8, v20, 7);
                v21 = v33;
                swift_unknownObjectRelease(v19);
                v17 = v9;
              }
              goto LABEL_37;
            }
          }
        }
      }
    }
LABEL_36:
    v21 = 0;
LABEL_37:
    sub_10007EF58(v2);
    return (_QWORD *)v21;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000D837C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v31;
  _QWORD v32[5];
  uint64_t v33;

  v2 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v3 = a1;
    else
      v3 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v4 = __CocoaSet.makeIterator()(v3);
    v5 = type metadata accessor for DSKBLE.BLEPeripheral();
    v6 = sub_1000C69C4(&qword_1003460B8, 255, (uint64_t (*)(uint64_t))type metadata accessor for DSKBLE.BLEPeripheral, (uint64_t)&unk_1002898C0);
    result = Set.Iterator.init(_cocoa:)(v32, v4, v5, v6);
    v2 = v32[0];
    v29 = v32[1];
    v8 = v32[2];
    v9 = v32[3];
    v10 = v32[4];
  }
  else
  {
    v11 = -1 << *(_BYTE *)(a1 + 32);
    v29 = a1 + 56;
    v12 = ~v11;
    v13 = -v11;
    if (v13 < 64)
      v14 = ~(-1 << v13);
    else
      v14 = -1;
    v10 = v14 & *(_QWORD *)(a1 + 56);
    result = (_QWORD *)swift_bridgeObjectRetain(a1);
    v8 = v12;
    v9 = 0;
  }
  v28 = (unint64_t)(v8 + 64) >> 6;
  while (v2 < 0)
  {
    v18 = __CocoaSet.Iterator.next()(result);
    if (!v18)
      goto LABEL_38;
    v19 = v18;
    v31 = v18;
    v20 = type metadata accessor for DSKBLE.BLEPeripheral();
    swift_unknownObjectRetain(v19);
    swift_dynamicCast(&v33, &v31, (char *)&type metadata for Swift.AnyObject + 8, v20, 7);
    v21 = v33;
    swift_unknownObjectRelease(v19);
    v17 = v9;
    v15 = v10;
    if (!v21)
      goto LABEL_39;
LABEL_35:
    v25 = *(_QWORD *)(v21 + 16);
    v26 = v25 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
    v27 = a2 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
    swift_retain(v25);
    LOBYTE(v27) = static UUID.== infix(_:_:)(v26, v27);
    swift_release(v25);
    if ((v27 & 1) != 0 && *(_BYTE *)(v21 + 32))
      goto LABEL_39;
    result = (_QWORD *)swift_release(v21);
    v9 = v17;
    v10 = v15;
  }
  if (v10)
  {
    v15 = (v10 - 1) & v10;
    v16 = __clz(__rbit64(v10)) | (v9 << 6);
    v17 = v9;
LABEL_34:
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v16);
    swift_retain(v21);
    if (!v21)
      goto LABEL_39;
    goto LABEL_35;
  }
  v22 = v9 + 1;
  if (!__OFADD__(v9, 1))
  {
    if (v22 >= v28)
      goto LABEL_38;
    v23 = *(_QWORD *)(v29 + 8 * v22);
    v17 = v9 + 1;
    if (!v23)
    {
      v17 = v9 + 2;
      if (v9 + 2 >= v28)
        goto LABEL_38;
      v23 = *(_QWORD *)(v29 + 8 * v17);
      if (!v23)
      {
        v17 = v9 + 3;
        if (v9 + 3 >= v28)
          goto LABEL_38;
        v23 = *(_QWORD *)(v29 + 8 * v17);
        if (!v23)
        {
          v17 = v9 + 4;
          if (v9 + 4 >= v28)
            goto LABEL_38;
          v23 = *(_QWORD *)(v29 + 8 * v17);
          if (!v23)
          {
            v17 = v9 + 5;
            if (v9 + 5 >= v28)
              goto LABEL_38;
            v23 = *(_QWORD *)(v29 + 8 * v17);
            if (!v23)
            {
              v24 = v9 + 6;
              while (v28 != v24)
              {
                v23 = *(_QWORD *)(v29 + 8 * v24++);
                if (v23)
                {
                  v17 = v24 - 1;
                  goto LABEL_33;
                }
              }
LABEL_38:
              v21 = 0;
LABEL_39:
              sub_10007EF58(v2);
              return (_QWORD *)v21;
            }
          }
        }
      }
    }
LABEL_33:
    v15 = (v23 - 1) & v23;
    v16 = __clz(__rbit64(v23)) + (v17 << 6);
    goto LABEL_34;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000D8690(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v31;
  _QWORD v32[5];
  uint64_t v33;

  v2 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v3 = a1;
    else
      v3 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v4 = __CocoaSet.makeIterator()(v3);
    v5 = type metadata accessor for DSKBLE.BLEPeripheral();
    v6 = sub_1000C69C4(&qword_1003460B8, 255, (uint64_t (*)(uint64_t))type metadata accessor for DSKBLE.BLEPeripheral, (uint64_t)&unk_1002898C0);
    result = Set.Iterator.init(_cocoa:)(v32, v4, v5, v6);
    v2 = v32[0];
    v29 = v32[1];
    v8 = v32[2];
    v9 = v32[3];
    v10 = v32[4];
  }
  else
  {
    v11 = -1 << *(_BYTE *)(a1 + 32);
    v29 = a1 + 56;
    v12 = ~v11;
    v13 = -v11;
    if (v13 < 64)
      v14 = ~(-1 << v13);
    else
      v14 = -1;
    v10 = v14 & *(_QWORD *)(a1 + 56);
    result = (_QWORD *)swift_bridgeObjectRetain(a1);
    v8 = v12;
    v9 = 0;
  }
  v28 = (unint64_t)(v8 + 64) >> 6;
  if (v2 < 0)
    goto LABEL_13;
LABEL_11:
  if (v10)
  {
    v15 = (v10 - 1) & v10;
    v16 = __clz(__rbit64(v10)) | (v9 << 6);
    v17 = v9;
    goto LABEL_32;
  }
  v22 = v9 + 1;
  if (!__OFADD__(v9, 1))
  {
    if (v22 < v28)
    {
      v23 = *(_QWORD *)(v29 + 8 * v22);
      v17 = v9 + 1;
      if (v23)
        goto LABEL_31;
      v17 = v9 + 2;
      if (v9 + 2 < v28)
      {
        v23 = *(_QWORD *)(v29 + 8 * v17);
        if (v23)
          goto LABEL_31;
        v17 = v9 + 3;
        if (v9 + 3 < v28)
        {
          v23 = *(_QWORD *)(v29 + 8 * v17);
          if (v23)
            goto LABEL_31;
          v17 = v9 + 4;
          if (v9 + 4 < v28)
          {
            v23 = *(_QWORD *)(v29 + 8 * v17);
            if (v23)
              goto LABEL_31;
            v17 = v9 + 5;
            if (v9 + 5 < v28)
            {
              v23 = *(_QWORD *)(v29 + 8 * v17);
              if (!v23)
              {
                v24 = v9 + 6;
                while (v28 != v24)
                {
                  v23 = *(_QWORD *)(v29 + 8 * v24++);
                  if (v23)
                  {
                    v17 = v24 - 1;
                    goto LABEL_31;
                  }
                }
                goto LABEL_36;
              }
LABEL_31:
              v15 = (v23 - 1) & v23;
              v16 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_32:
              v21 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v16);
              swift_retain(v21);
              for (; v21; v15 = v10)
              {
                v25 = *(_QWORD *)(v21 + 16);
                v26 = v25 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
                v27 = *(_QWORD *)(a2 + 32) + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
                swift_retain(v25);
                LOBYTE(v27) = static UUID.== infix(_:_:)(v26, v27);
                swift_release(v25);
                if ((v27 & 1) != 0)
                  break;
                result = (_QWORD *)swift_release(v21);
                v9 = v17;
                v10 = v15;
                if ((v2 & 0x8000000000000000) == 0)
                  goto LABEL_11;
LABEL_13:
                v18 = __CocoaSet.Iterator.next()(result);
                if (!v18)
                  goto LABEL_36;
                v19 = v18;
                v31 = v18;
                v20 = type metadata accessor for DSKBLE.BLEPeripheral();
                swift_unknownObjectRetain(v19);
                swift_dynamicCast(&v33, &v31, (char *)&type metadata for Swift.AnyObject + 8, v20, 7);
                v21 = v33;
                swift_unknownObjectRelease(v19);
                v17 = v9;
              }
              goto LABEL_37;
            }
          }
        }
      }
    }
LABEL_36:
    v21 = 0;
LABEL_37:
    sub_10007EF58(v2);
    return (_QWORD *)v21;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000D89A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v31;
  _QWORD v32[5];
  uint64_t v33;

  v2 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v3 = a1;
    else
      v3 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v4 = __CocoaSet.makeIterator()(v3);
    v5 = type metadata accessor for DSKBLE.BLEPeripheral();
    v6 = sub_1000C69C4(&qword_1003460B8, 255, (uint64_t (*)(uint64_t))type metadata accessor for DSKBLE.BLEPeripheral, (uint64_t)&unk_1002898C0);
    result = Set.Iterator.init(_cocoa:)(v32, v4, v5, v6);
    v2 = v32[0];
    v29 = v32[1];
    v8 = v32[2];
    v9 = v32[3];
    v10 = v32[4];
  }
  else
  {
    v11 = -1 << *(_BYTE *)(a1 + 32);
    v29 = a1 + 56;
    v12 = ~v11;
    v13 = -v11;
    if (v13 < 64)
      v14 = ~(-1 << v13);
    else
      v14 = -1;
    v10 = v14 & *(_QWORD *)(a1 + 56);
    result = (_QWORD *)swift_bridgeObjectRetain(a1);
    v8 = v12;
    v9 = 0;
  }
  v28 = (unint64_t)(v8 + 64) >> 6;
  if (v2 < 0)
    goto LABEL_13;
LABEL_11:
  if (v10)
  {
    v15 = (v10 - 1) & v10;
    v16 = __clz(__rbit64(v10)) | (v9 << 6);
    v17 = v9;
    goto LABEL_32;
  }
  v22 = v9 + 1;
  if (!__OFADD__(v9, 1))
  {
    if (v22 < v28)
    {
      v23 = *(_QWORD *)(v29 + 8 * v22);
      v17 = v9 + 1;
      if (v23)
        goto LABEL_31;
      v17 = v9 + 2;
      if (v9 + 2 < v28)
      {
        v23 = *(_QWORD *)(v29 + 8 * v17);
        if (v23)
          goto LABEL_31;
        v17 = v9 + 3;
        if (v9 + 3 < v28)
        {
          v23 = *(_QWORD *)(v29 + 8 * v17);
          if (v23)
            goto LABEL_31;
          v17 = v9 + 4;
          if (v9 + 4 < v28)
          {
            v23 = *(_QWORD *)(v29 + 8 * v17);
            if (v23)
              goto LABEL_31;
            v17 = v9 + 5;
            if (v9 + 5 < v28)
            {
              v23 = *(_QWORD *)(v29 + 8 * v17);
              if (!v23)
              {
                v24 = v9 + 6;
                while (v28 != v24)
                {
                  v23 = *(_QWORD *)(v29 + 8 * v24++);
                  if (v23)
                  {
                    v17 = v24 - 1;
                    goto LABEL_31;
                  }
                }
                goto LABEL_36;
              }
LABEL_31:
              v15 = (v23 - 1) & v23;
              v16 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_32:
              v21 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v16);
              swift_retain(v21);
              for (; v21; v15 = v10)
              {
                v25 = *(_QWORD *)(v21 + 16);
                v26 = v25 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
                v27 = a2 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
                swift_retain(v25);
                LOBYTE(v27) = static UUID.== infix(_:_:)(v26, v27);
                swift_release(v25);
                if ((v27 & 1) != 0)
                  break;
                result = (_QWORD *)swift_release(v21);
                v9 = v17;
                v10 = v15;
                if ((v2 & 0x8000000000000000) == 0)
                  goto LABEL_11;
LABEL_13:
                v18 = __CocoaSet.Iterator.next()(result);
                if (!v18)
                  goto LABEL_36;
                v19 = v18;
                v31 = v18;
                v20 = type metadata accessor for DSKBLE.BLEPeripheral();
                swift_unknownObjectRetain(v19);
                swift_dynamicCast(&v33, &v31, (char *)&type metadata for Swift.AnyObject + 8, v20, 7);
                v21 = v33;
                swift_unknownObjectRelease(v19);
                v17 = v9;
              }
              goto LABEL_37;
            }
          }
        }
      }
    }
LABEL_36:
    v21 = 0;
LABEL_37:
    sub_10007EF58(v2);
    return (_QWORD *)v21;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000D8CAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  char v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[5];
  uint64_t v30;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = type metadata accessor for DSKBLE.BLEPeripheral();
    v5 = sub_1000C69C4(&qword_1003460B8, 255, (uint64_t (*)(uint64_t))type metadata accessor for DSKBLE.BLEPeripheral, (uint64_t)&unk_1002898C0);
    result = Set.Iterator.init(_cocoa:)(v29, v3, v4, v5);
    v1 = v29[0];
    v27 = v29[1];
    v7 = v29[2];
    v8 = v29[3];
    v9 = v29[4];
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v27 = a1 + 56;
    v11 = ~v10;
    v12 = -v10;
    if (v12 < 64)
      v13 = ~(-1 << v12);
    else
      v13 = -1;
    v9 = v13 & *(_QWORD *)(a1 + 56);
    result = (_QWORD *)swift_bridgeObjectRetain(a1);
    v7 = v11;
    v8 = 0;
  }
  v26 = (unint64_t)(v7 + 64) >> 6;
  while (v1 < 0)
  {
    v17 = __CocoaSet.Iterator.next()(result);
    if (!v17)
      goto LABEL_38;
    v18 = v17;
    v28 = v17;
    v19 = type metadata accessor for DSKBLE.BLEPeripheral();
    swift_unknownObjectRetain(v18);
    swift_dynamicCast(&v30, &v28, (char *)&type metadata for Swift.AnyObject + 8, v19, 7);
    v20 = v30;
    swift_unknownObjectRelease(v18);
    v16 = v8;
    v14 = v9;
    if (!v20)
      goto LABEL_39;
LABEL_35:
    sub_10006C25C(0, &qword_100348B80, NSObject_ptr);
    v24 = *(id *)(v20 + 24);
    v25 = static NSObject.== infix(_:_:)(v24);

    if ((v25 & 1) != 0 && !*(_BYTE *)(v20 + 32))
      goto LABEL_39;
    result = (_QWORD *)swift_release(v20);
    v8 = v16;
    v9 = v14;
  }
  if (v9)
  {
    v14 = (v9 - 1) & v9;
    v15 = __clz(__rbit64(v9)) | (v8 << 6);
    v16 = v8;
LABEL_34:
    v20 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v15);
    swift_retain(v20);
    if (!v20)
      goto LABEL_39;
    goto LABEL_35;
  }
  v21 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v21 >= v26)
      goto LABEL_38;
    v22 = *(_QWORD *)(v27 + 8 * v21);
    v16 = v8 + 1;
    if (!v22)
    {
      v16 = v8 + 2;
      if (v8 + 2 >= v26)
        goto LABEL_38;
      v22 = *(_QWORD *)(v27 + 8 * v16);
      if (!v22)
      {
        v16 = v8 + 3;
        if (v8 + 3 >= v26)
          goto LABEL_38;
        v22 = *(_QWORD *)(v27 + 8 * v16);
        if (!v22)
        {
          v16 = v8 + 4;
          if (v8 + 4 >= v26)
            goto LABEL_38;
          v22 = *(_QWORD *)(v27 + 8 * v16);
          if (!v22)
          {
            v16 = v8 + 5;
            if (v8 + 5 >= v26)
              goto LABEL_38;
            v22 = *(_QWORD *)(v27 + 8 * v16);
            if (!v22)
            {
              v23 = v8 + 6;
              while (v26 != v23)
              {
                v22 = *(_QWORD *)(v27 + 8 * v23++);
                if (v22)
                {
                  v16 = v23 - 1;
                  goto LABEL_33;
                }
              }
LABEL_38:
              v20 = 0;
LABEL_39:
              sub_10007EF58(v1);
              return (_QWORD *)v20;
            }
          }
        }
      }
    }
LABEL_33:
    v14 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v16 << 6);
    goto LABEL_34;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000D8FC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  char v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[5];
  uint64_t v30;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = type metadata accessor for DSKBLE.BLEPeripheral();
    v5 = sub_1000C69C4(&qword_1003460B8, 255, (uint64_t (*)(uint64_t))type metadata accessor for DSKBLE.BLEPeripheral, (uint64_t)&unk_1002898C0);
    result = Set.Iterator.init(_cocoa:)(v29, v3, v4, v5);
    v1 = v29[0];
    v27 = v29[1];
    v7 = v29[2];
    v8 = v29[3];
    v9 = v29[4];
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v27 = a1 + 56;
    v11 = ~v10;
    v12 = -v10;
    if (v12 < 64)
      v13 = ~(-1 << v12);
    else
      v13 = -1;
    v9 = v13 & *(_QWORD *)(a1 + 56);
    result = (_QWORD *)swift_bridgeObjectRetain(a1);
    v7 = v11;
    v8 = 0;
  }
  v26 = (unint64_t)(v7 + 64) >> 6;
  if (v1 < 0)
    goto LABEL_13;
LABEL_11:
  if (v9)
  {
    v14 = (v9 - 1) & v9;
    v15 = __clz(__rbit64(v9)) | (v8 << 6);
    v16 = v8;
    goto LABEL_32;
  }
  v21 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v21 < v26)
    {
      v22 = *(_QWORD *)(v27 + 8 * v21);
      v16 = v8 + 1;
      if (v22)
        goto LABEL_31;
      v16 = v8 + 2;
      if (v8 + 2 < v26)
      {
        v22 = *(_QWORD *)(v27 + 8 * v16);
        if (v22)
          goto LABEL_31;
        v16 = v8 + 3;
        if (v8 + 3 < v26)
        {
          v22 = *(_QWORD *)(v27 + 8 * v16);
          if (v22)
            goto LABEL_31;
          v16 = v8 + 4;
          if (v8 + 4 < v26)
          {
            v22 = *(_QWORD *)(v27 + 8 * v16);
            if (v22)
              goto LABEL_31;
            v16 = v8 + 5;
            if (v8 + 5 < v26)
            {
              v22 = *(_QWORD *)(v27 + 8 * v16);
              if (!v22)
              {
                v23 = v8 + 6;
                while (v26 != v23)
                {
                  v22 = *(_QWORD *)(v27 + 8 * v23++);
                  if (v22)
                  {
                    v16 = v23 - 1;
                    goto LABEL_31;
                  }
                }
                goto LABEL_36;
              }
LABEL_31:
              v14 = (v22 - 1) & v22;
              v15 = __clz(__rbit64(v22)) + (v16 << 6);
LABEL_32:
              v20 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v15);
              swift_retain(v20);
              for (; v20; v14 = v9)
              {
                sub_10006C25C(0, &qword_100348B80, NSObject_ptr);
                v24 = *(id *)(v20 + 24);
                v25 = static NSObject.== infix(_:_:)(v24);

                if ((v25 & 1) != 0)
                  break;
                result = (_QWORD *)swift_release(v20);
                v8 = v16;
                v9 = v14;
                if ((v1 & 0x8000000000000000) == 0)
                  goto LABEL_11;
LABEL_13:
                v17 = __CocoaSet.Iterator.next()(result);
                if (!v17)
                  goto LABEL_36;
                v18 = v17;
                v28 = v17;
                v19 = type metadata accessor for DSKBLE.BLEPeripheral();
                swift_unknownObjectRetain(v18);
                swift_dynamicCast(&v30, &v28, (char *)&type metadata for Swift.AnyObject + 8, v19, 7);
                v20 = v30;
                swift_unknownObjectRelease(v18);
                v16 = v8;
              }
              goto LABEL_37;
            }
          }
        }
      }
    }
LABEL_36:
    v20 = 0;
LABEL_37:
    sub_10007EF58(v1);
    return (_QWORD *)v20;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000D92CC(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  id v28;
  void *v29;
  id v30;
  void *v31;
  id v32;
  id v33;
  char v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[5];
  uint64_t v41;

  v2 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v3 = a1;
    else
      v3 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v4 = __CocoaSet.makeIterator()(v3);
    v5 = type metadata accessor for DSKBLE.BLEPeripheral();
    v6 = sub_1000C69C4(&qword_1003460B8, 255, (uint64_t (*)(uint64_t))type metadata accessor for DSKBLE.BLEPeripheral, (uint64_t)&unk_1002898C0);
    result = Set.Iterator.init(_cocoa:)(v40, v4, v5, v6);
    v2 = v40[0];
    v36 = v40[1];
    v8 = v40[2];
    v9 = v40[3];
    v10 = v40[4];
  }
  else
  {
    v11 = -1 << *(_BYTE *)(a1 + 32);
    v36 = a1 + 56;
    v8 = ~v11;
    v12 = -v11;
    if (v12 < 64)
      v13 = ~(-1 << v12);
    else
      v13 = -1;
    v10 = v13 & *(_QWORD *)(a1 + 56);
    result = (_QWORD *)swift_bridgeObjectRetain(a1);
    v9 = 0;
  }
  v35 = (unint64_t)(v8 + 64) >> 6;
  v38 = v2;
  while (1)
  {
    v14 = v9;
    if ((v2 & 0x8000000000000000) == 0)
      break;
    v17 = __CocoaSet.Iterator.next()(result);
    if (!v17)
      goto LABEL_42;
    v18 = v17;
    v39 = v17;
    v19 = type metadata accessor for DSKBLE.BLEPeripheral();
    swift_unknownObjectRetain(v18);
    swift_dynamicCast(&v41, &v39, (char *)&type metadata for Swift.AnyObject + 8, v19, 7);
    v20 = v41;
    swift_unknownObjectRelease(v18);
    if (!v20)
      goto LABEL_43;
LABEL_35:
    v24 = *(void **)(v20 + 128);
    if (v24)
    {
      v25 = objc_msgSend(v24, "inputStream");
      if (v25)
      {
        v26 = v25;
        sub_10006C25C(0, (unint64_t *)&unk_1003461F0, NSStream_ptr);
        v27 = a2;
        v28 = v26;
        v2 = v38;
        LOBYTE(v26) = static NSObject.== infix(_:_:)(v28);

        if ((v26 & 1) != 0)
          goto LABEL_43;
      }
      v29 = *(void **)(v20 + 128);
      if (v29)
      {
        v30 = objc_msgSend(v29, "outputStream");
        if (v30)
        {
          v31 = v30;
          sub_10006C25C(0, (unint64_t *)&unk_1003461F0, NSStream_ptr);
          v32 = a2;
          v33 = v31;
          v34 = static NSObject.== infix(_:_:)(v33);

          v2 = v38;
          if ((v34 & 1) != 0)
            goto LABEL_43;
        }
      }
    }
    result = (_QWORD *)swift_release(v20);
  }
  if (v10)
  {
    v15 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    v16 = v15 | (v9 << 6);
LABEL_34:
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v16);
    swift_retain(v20);
    if (!v20)
      goto LABEL_43;
    goto LABEL_35;
  }
  v21 = v9 + 1;
  if (!__OFADD__(v9, 1))
  {
    if (v21 >= v35)
      goto LABEL_42;
    v22 = *(_QWORD *)(v36 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v14 + 2;
      if (v14 + 2 >= v35)
        goto LABEL_42;
      v22 = *(_QWORD *)(v36 + 8 * v9);
      if (!v22)
      {
        v9 = v14 + 3;
        if (v14 + 3 >= v35)
          goto LABEL_42;
        v22 = *(_QWORD *)(v36 + 8 * v9);
        if (!v22)
        {
          v9 = v14 + 4;
          if (v14 + 4 >= v35)
            goto LABEL_42;
          v22 = *(_QWORD *)(v36 + 8 * v9);
          if (!v22)
          {
            v9 = v14 + 5;
            if (v14 + 5 >= v35)
              goto LABEL_42;
            v22 = *(_QWORD *)(v36 + 8 * v9);
            if (!v22)
            {
              v23 = v14 + 6;
              while (v35 != v23)
              {
                v22 = *(_QWORD *)(v36 + 8 * v23++);
                if (v22)
                {
                  v9 = v23 - 1;
                  goto LABEL_33;
                }
              }
LABEL_42:
              v20 = 0;
LABEL_43:
              sub_10007EF58(v2);
              return (_QWORD *)v20;
            }
          }
        }
      }
    }
LABEL_33:
    v10 = (v22 - 1) & v22;
    v16 = __clz(__rbit64(v22)) + (v9 << 6);
    goto LABEL_34;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000D968C(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *result;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  int64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  _QWORD v33[2];
  uint64_t v34;
  char *v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  _QWORD v43[5];
  uint64_t v44;

  v41 = a2;
  v4 = type metadata accessor for UUID(0);
  v39 = *(_QWORD *)(v4 - 8);
  v40 = v4;
  __chkstk_darwin(v4, v5);
  v7 = (char *)v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = v2;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v8 = a1;
    else
      v8 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v9 = __CocoaSet.makeIterator()(v8);
    v10 = type metadata accessor for Peer(0);
    v11 = sub_1000C69C4((unint64_t *)&qword_100347720, 255, type metadata accessor for Peer, (uint64_t)&unk_10028BFA8);
    result = Set.Iterator.init(_cocoa:)(v43, v9, v10, v11);
    a1 = v43[0];
    v38 = v43[1];
    v13 = v43[2];
    v14 = v43[3];
    v15 = v43[4];
  }
  else
  {
    v16 = -1 << *(_BYTE *)(a1 + 32);
    v17 = *(_QWORD *)(a1 + 56);
    v38 = a1 + 56;
    v18 = ~v16;
    v19 = -v16;
    if (v19 < 64)
      v20 = ~(-1 << v19);
    else
      v20 = -1;
    v15 = v20 & v17;
    result = (_QWORD *)swift_bridgeObjectRetain(a1);
    v13 = v18;
    v14 = 0;
  }
  v33[1] = v13;
  v36 = a1 & 0x7FFFFFFFFFFFFFFFLL;
  v37 = (unint64_t)(v13 + 64) >> 6;
  v35 = (char *)&type metadata for Swift.AnyObject + 8;
  if (a1 < 0)
    goto LABEL_13;
LABEL_11:
  if (v15)
  {
    v21 = (v15 - 1) & v15;
    v22 = __clz(__rbit64(v15)) | (v14 << 6);
    goto LABEL_32;
  }
  v27 = v14 + 1;
  if (!__OFADD__(v14, 1))
  {
    if (v27 >= v37)
    {
LABEL_36:
      v26 = 0;
LABEL_38:
      sub_10007EF58(a1);
      return (_QWORD *)v26;
    }
    v28 = v14;
    v29 = *(_QWORD *)(v38 + 8 * v27);
    ++v14;
    if (!v29)
    {
      v14 = v27 + 1;
      if (v27 + 1 >= v37)
        goto LABEL_37;
      v29 = *(_QWORD *)(v38 + 8 * v14);
      if (v29)
        goto LABEL_31;
      v14 = v27 + 2;
      if (v27 + 2 >= v37)
        goto LABEL_37;
      v29 = *(_QWORD *)(v38 + 8 * v14);
      if (v29)
        goto LABEL_31;
      v14 = v27 + 3;
      if (v27 + 3 >= v37)
        goto LABEL_37;
      v29 = *(_QWORD *)(v38 + 8 * v14);
      if (v29)
        goto LABEL_31;
      v14 = v27 + 4;
      if (v27 + 4 >= v37)
      {
LABEL_37:
        v26 = 0;
        goto LABEL_38;
      }
      v29 = *(_QWORD *)(v38 + 8 * v14);
      if (!v29)
      {
        v30 = v28 + 6;
        while (v37 != v30)
        {
          v29 = *(_QWORD *)(v38 + 8 * v30++);
          if (v29)
          {
            v14 = v30 - 1;
            goto LABEL_31;
          }
        }
        goto LABEL_36;
      }
    }
LABEL_31:
    v21 = (v29 - 1) & v29;
    v22 = __clz(__rbit64(v29)) + (v14 << 6);
LABEL_32:
    v26 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v22);
    swift_retain(v26);
    for (; v26; v21 = v15)
    {
      v31 = v26 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
      v32 = objc_msgSend(v41, "identifier");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      LOBYTE(v32) = static UUID.== infix(_:_:)(v31, v7);
      (*(void (**)(char *, uint64_t))(v39 + 8))(v7, v40);
      if ((v32 & 1) != 0)
        break;
      result = (_QWORD *)swift_release(v26);
      v15 = v21;
      if ((a1 & 0x8000000000000000) == 0)
        goto LABEL_11;
LABEL_13:
      v23 = __CocoaSet.Iterator.next()(result);
      if (!v23)
        goto LABEL_36;
      v24 = v23;
      v42 = v23;
      v25 = type metadata accessor for Peer(0);
      swift_unknownObjectRetain(v24);
      swift_dynamicCast(&v44, &v42, v35, v25, 7);
      v26 = v44;
      swift_unknownObjectRelease(v24);
    }
    goto LABEL_38;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000D9A0C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[5];
  uint64_t v30;

  v3 = a1;
  v4 = *a2;
  v25 = *a2;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v5 = a1;
    else
      v5 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v6 = __CocoaSet.makeIterator()(v5);
    v8 = sub_1000C69C4((unint64_t *)&unk_1003460C0, v7, (uint64_t (*)(uint64_t))type metadata accessor for DSKBLE.BLEConnectionRequest, (uint64_t)&unk_1002897D0);
    result = Set.Iterator.init(_cocoa:)(v29, v6, v4, v8);
    v3 = v29[0];
    v27 = v29[1];
    v10 = v29[2];
    v11 = v29[3];
    v12 = v29[4];
  }
  else
  {
    v13 = -1 << *(_BYTE *)(a1 + 32);
    v27 = a1 + 56;
    v10 = ~v13;
    v14 = -v13;
    if (v14 < 64)
      v15 = ~(-1 << v14);
    else
      v15 = -1;
    v12 = v15 & *(_QWORD *)(a1 + 56);
    result = (_QWORD *)swift_bridgeObjectRetain(a1);
    v11 = 0;
  }
  v26 = (unint64_t)(v10 + 64) >> 6;
  if ((v3 & 0x8000000000000000) == 0)
    goto LABEL_14;
LABEL_11:
  v16 = __CocoaSet.Iterator.next()(result);
  if (v16)
  {
    v17 = v16;
    v28 = v16;
    swift_unknownObjectRetain(v16);
    swift_dynamicCast(&v30, &v28, (char *)&type metadata for Swift.AnyObject + 8, v25, 7);
    v18 = v30;
    swift_unknownObjectRelease(v17);
    v19 = v11;
    v20 = v12;
    if (v18)
    {
      while ((static UUID.== infix(_:_:)(*(_QWORD *)(v18 + 16) + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier, a2[2] + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier) & 1) == 0)
      {
        result = (_QWORD *)swift_release(v18);
        v11 = v19;
        v12 = v20;
        if (v3 < 0)
          goto LABEL_11;
LABEL_14:
        if (v12)
        {
          v20 = (v12 - 1) & v12;
          v21 = __clz(__rbit64(v12)) | (v11 << 6);
          v19 = v11;
        }
        else
        {
          v22 = v11 + 1;
          if (__OFADD__(v11, 1))
          {
            __break(1u);
            return result;
          }
          if (v22 >= v26)
            goto LABEL_36;
          v23 = *(_QWORD *)(v27 + 8 * v22);
          v19 = v11 + 1;
          if (!v23)
          {
            v19 = v11 + 2;
            if (v11 + 2 >= v26)
              goto LABEL_36;
            v23 = *(_QWORD *)(v27 + 8 * v19);
            if (!v23)
            {
              v19 = v11 + 3;
              if (v11 + 3 >= v26)
                goto LABEL_36;
              v23 = *(_QWORD *)(v27 + 8 * v19);
              if (!v23)
              {
                v19 = v11 + 4;
                if (v11 + 4 >= v26)
                  goto LABEL_36;
                v23 = *(_QWORD *)(v27 + 8 * v19);
                if (!v23)
                {
                  v19 = v11 + 5;
                  if (v11 + 5 >= v26)
                    goto LABEL_36;
                  v23 = *(_QWORD *)(v27 + 8 * v19);
                  if (!v23)
                  {
                    v24 = v11 + 6;
                    while (v26 != v24)
                    {
                      v23 = *(_QWORD *)(v27 + 8 * v24++);
                      if (v23)
                      {
                        v19 = v24 - 1;
                        goto LABEL_31;
                      }
                    }
                    goto LABEL_36;
                  }
                }
              }
            }
          }
LABEL_31:
          v20 = (v23 - 1) & v23;
          v21 = __clz(__rbit64(v23)) + (v19 << 6);
        }
        v18 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v21);
        swift_retain(v18);
        if (!v18)
          break;
      }
    }
  }
  else
  {
LABEL_36:
    v18 = 0;
  }
  sub_10007EF58(v3);
  return (_QWORD *)v18;
}

uint64_t sub_1000D9CDC(uint64_t a1)
{
  return sub_1000D9CF4(a1) & 1;
}

uint64_t sub_1000D9CF4(uint64_t a1)
{
  uint64_t v1;

  return static UUID.== infix(_:_:)(*(_QWORD *)(*(_QWORD *)a1 + 16) + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier, *(_QWORD *)(v1 + 16)) & 1;
}

_QWORD *sub_1000D9D38(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[5];
  uint64_t v30;

  v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v4 = a1;
    else
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v5 = __CocoaSet.makeIterator()(v4);
    v6 = type metadata accessor for DSKBLE.BLEConnectionRequest();
    v8 = sub_1000C69C4((unint64_t *)&unk_1003460C0, v7, (uint64_t (*)(uint64_t))type metadata accessor for DSKBLE.BLEConnectionRequest, (uint64_t)&unk_1002897D0);
    result = Set.Iterator.init(_cocoa:)(v29, v5, v6, v8);
    v3 = v29[0];
    v27 = v29[1];
    v10 = v29[2];
    v11 = v29[3];
    v12 = v29[4];
  }
  else
  {
    v13 = -1 << *(_BYTE *)(a1 + 32);
    v27 = a1 + 56;
    v10 = ~v13;
    v14 = -v13;
    if (v14 < 64)
      v15 = ~(-1 << v14);
    else
      v15 = -1;
    v12 = v15 & *(_QWORD *)(a1 + 56);
    result = (_QWORD *)swift_bridgeObjectRetain(a1);
    v11 = 0;
  }
  v26 = (unint64_t)(v10 + 64) >> 6;
  if (v3 < 0)
    goto LABEL_13;
LABEL_11:
  if (v12)
  {
    v16 = (v12 - 1) & v12;
    v17 = __clz(__rbit64(v12)) | (v11 << 6);
    v18 = v11;
    goto LABEL_32;
  }
  v23 = v11 + 1;
  if (!__OFADD__(v11, 1))
  {
    if (v23 < v26)
    {
      v24 = *(_QWORD *)(v27 + 8 * v23);
      v18 = v11 + 1;
      if (v24)
        goto LABEL_31;
      v18 = v11 + 2;
      if (v11 + 2 < v26)
      {
        v24 = *(_QWORD *)(v27 + 8 * v18);
        if (v24)
          goto LABEL_31;
        v18 = v11 + 3;
        if (v11 + 3 < v26)
        {
          v24 = *(_QWORD *)(v27 + 8 * v18);
          if (v24)
            goto LABEL_31;
          v18 = v11 + 4;
          if (v11 + 4 < v26)
          {
            v24 = *(_QWORD *)(v27 + 8 * v18);
            if (v24)
              goto LABEL_31;
            v18 = v11 + 5;
            if (v11 + 5 < v26)
            {
              v24 = *(_QWORD *)(v27 + 8 * v18);
              if (!v24)
              {
                v25 = v11 + 6;
                while (v26 != v25)
                {
                  v24 = *(_QWORD *)(v27 + 8 * v25++);
                  if (v24)
                  {
                    v18 = v25 - 1;
                    goto LABEL_31;
                  }
                }
                goto LABEL_36;
              }
LABEL_31:
              v16 = (v24 - 1) & v24;
              v17 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_32:
              v22 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v17);
              swift_retain(v22);
              for (; v22; v16 = v12)
              {
                if ((static UUID.== infix(_:_:)(*(_QWORD *)(v22 + 16) + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier, a2 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier) & 1) != 0)break;
                result = (_QWORD *)swift_release(v22);
                v11 = v18;
                v12 = v16;
                if ((v3 & 0x8000000000000000) == 0)
                  goto LABEL_11;
LABEL_13:
                v19 = __CocoaSet.Iterator.next()(result);
                if (!v19)
                  goto LABEL_36;
                v20 = v19;
                v28 = v19;
                v21 = type metadata accessor for DSKBLE.BLEConnectionRequest();
                swift_unknownObjectRetain(v20);
                swift_dynamicCast(&v30, &v28, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
                v22 = v30;
                swift_unknownObjectRelease(v20);
                v18 = v11;
              }
              goto LABEL_37;
            }
          }
        }
      }
    }
LABEL_36:
    v22 = 0;
LABEL_37:
    sub_10007EF58(v3);
    return (_QWORD *)v22;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000DA014(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  id v37;
  char *v38;
  void (*v39)(char *, uint64_t);
  _QWORD v40[2];
  uint64_t v41;
  char *v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  _QWORD v54[5];
  uint64_t v55;

  v52 = a2;
  v4 = type metadata accessor for UUID(0);
  v50 = *(_QWORD *)(v4 - 8);
  v51 = v4;
  v6 = __chkstk_darwin(v4, v5);
  v49 = (char *)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v8);
  v48 = (char *)v40 - v9;
  v41 = v2;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v10 = a1;
    else
      v10 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v11 = __CocoaSet.makeIterator()(v10);
    v12 = type metadata accessor for DSKBLE.BLEConnectionRequest();
    v14 = sub_1000C69C4((unint64_t *)&unk_1003460C0, v13, (uint64_t (*)(uint64_t))type metadata accessor for DSKBLE.BLEConnectionRequest, (uint64_t)&unk_1002897D0);
    result = Set.Iterator.init(_cocoa:)(v54, v11, v12, v14);
    a1 = v54[0];
    v45 = v54[1];
    v16 = v54[2];
    v17 = v54[3];
    v18 = v54[4];
  }
  else
  {
    v19 = -1 << *(_BYTE *)(a1 + 32);
    v20 = *(_QWORD *)(a1 + 56);
    v45 = a1 + 56;
    v21 = ~v19;
    v22 = -v19;
    if (v22 < 64)
      v23 = ~(-1 << v22);
    else
      v23 = -1;
    v18 = v23 & v20;
    result = (_QWORD *)swift_bridgeObjectRetain(a1);
    v16 = v21;
    v17 = 0;
  }
  v40[1] = v16;
  v43 = a1 & 0x7FFFFFFFFFFFFFFFLL;
  v44 = (unint64_t)(v16 + 64) >> 6;
  v42 = (char *)&type metadata for Swift.AnyObject + 8;
  v24 = v51;
  if ((a1 & 0x8000000000000000) == 0)
    goto LABEL_14;
LABEL_11:
  v25 = __CocoaSet.Iterator.next()(result);
  if (v25)
  {
    v26 = v25;
    v53 = v25;
    v27 = type metadata accessor for DSKBLE.BLEConnectionRequest();
    swift_unknownObjectRetain(v26);
    swift_dynamicCast(&v55, &v53, v42, v27, 7);
    v28 = v55;
    swift_unknownObjectRelease(v26);
    v29 = v17;
    v30 = v18;
    while (v28)
    {
      v46 = v17;
      v47 = v18;
      v35 = v50;
      v36 = v48;
      (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v48, *(_QWORD *)(v28 + 16) + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier, v24);
      v37 = objc_msgSend(v52, "identifier");
      v38 = v49;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      LOBYTE(v37) = static UUID.== infix(_:_:)(v36, v38);
      v39 = *(void (**)(char *, uint64_t))(v35 + 8);
      v39(v38, v24);
      v39(v36, v24);
      if ((v37 & 1) != 0)
        break;
      result = (_QWORD *)swift_release(v28);
      v17 = v29;
      v18 = v30;
      if (a1 < 0)
        goto LABEL_11;
LABEL_14:
      if (v18)
      {
        v30 = (v18 - 1) & v18;
        v31 = __clz(__rbit64(v18)) | (v17 << 6);
        v29 = v17;
      }
      else
      {
        v32 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
          __break(1u);
          return result;
        }
        if (v32 >= v44)
          goto LABEL_37;
        v33 = *(_QWORD *)(v45 + 8 * v32);
        v29 = v17 + 1;
        if (!v33)
        {
          v29 = v17 + 2;
          if (v17 + 2 >= v44)
            goto LABEL_37;
          v33 = *(_QWORD *)(v45 + 8 * v29);
          if (!v33)
          {
            v29 = v17 + 3;
            if (v17 + 3 >= v44)
              goto LABEL_37;
            v33 = *(_QWORD *)(v45 + 8 * v29);
            if (!v33)
            {
              v29 = v17 + 4;
              if (v17 + 4 >= v44)
                goto LABEL_37;
              v33 = *(_QWORD *)(v45 + 8 * v29);
              if (!v33)
              {
                v29 = v17 + 5;
                if (v17 + 5 >= v44)
                  goto LABEL_37;
                v33 = *(_QWORD *)(v45 + 8 * v29);
                if (!v33)
                {
                  v34 = v17 + 6;
                  while (v44 != v34)
                  {
                    v33 = *(_QWORD *)(v45 + 8 * v34++);
                    if (v33)
                    {
                      v29 = v34 - 1;
                      goto LABEL_31;
                    }
                  }
                  goto LABEL_37;
                }
              }
            }
          }
        }
LABEL_31:
        v30 = (v33 - 1) & v33;
        v31 = __clz(__rbit64(v33)) + (v29 << 6);
      }
      v28 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v31);
      swift_retain(v28);
    }
  }
  else
  {
LABEL_37:
    v28 = 0;
  }
  sub_10007EF58(a1);
  return (_QWORD *)v28;
}

void *sub_1000DA3D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  char v8;
  uint64_t v9;

  if ((unint64_t)a1 >> 62)
    goto LABEL_13;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v2; v2 = _CocoaArrayWrapper.endIndex.getter(v9))
  {
    sub_10006C25C(0, &qword_100348B80, NSObject_ptr);
    v3 = 4;
    while (1)
    {
      v4 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3 - 4, a1)
         : *(id *)(a1 + 8 * v3);
      v5 = v4;
      v6 = v3 - 3;
      if (__OFADD__(v3 - 4, 1))
        break;
      v7 = objc_msgSend(v4, "UUID");
      v8 = static NSObject.== infix(_:_:)(v7);

      if ((v8 & 1) != 0)
      {
        swift_bridgeObjectRelease(a1);
        return v5;
      }

      ++v3;
      if (v6 == v2)
        goto LABEL_17;
    }
    __break(1u);
LABEL_13:
    if (a1 < 0)
      v9 = a1;
    else
      v9 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
LABEL_17:
  swift_bridgeObjectRelease(a1);
  return 0;
}

void *sub_1000DA52C(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  id v9;
  void *v10;
  uint64_t v12;
  id v13;
  void *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  id v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;

  v3 = a1;
  if (a1 >> 62)
  {
LABEL_41:
    if (v3 < 0)
      v24 = v3;
    else
      v24 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    v4 = _CocoaArrayWrapper.endIndex.getter(v24);
    if (v4)
      goto LABEL_3;
LABEL_45:
    swift_bridgeObjectRelease(v3);
    return 0;
  }
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  if (!v4)
    goto LABEL_45;
LABEL_3:
  v26 = v3;
  v5 = 0;
  v6 = v3 & 0xC000000000000001;
  v7 = a2 & 0xFFFFFFFFFFFFFF8;
  if (a2 < 0)
    v7 = a2;
  v29 = v4;
  v30 = v7;
  v31 = a2 & 0xC000000000000001;
  v8 = (unint64_t)a2 >> 62;
  v28 = v3 & 0xC000000000000001;
  v27 = v3 + 32;
  while (1)
  {
    while (1)
    {
      if (v6)
        v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v3);
      else
        v9 = *(id *)(v27 + 8 * v5);
      v10 = v9;
      if (__OFADD__(v5++, 1))
        goto LABEL_40;
      if (!v8)
        break;
      swift_bridgeObjectRetain(a2);
      v12 = _CocoaArrayWrapper.endIndex.getter(v30);
      if (v12)
        goto LABEL_15;
LABEL_6:

      swift_bridgeObjectRelease(a2);
      if (v5 == v4)
        goto LABEL_45;
    }
    v12 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a2);
    if (!v12)
      goto LABEL_6;
LABEL_15:
    v13 = v31 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2) : *(id *)(a2 + 32);
    v14 = v13;
    sub_10006C25C(0, (unint64_t *)&unk_100348970, CBUUID_ptr);
    v15 = static NSObject.== infix(_:_:)(v14);

    if ((v15 & 1) != 0)
      break;
    if (v12 != 1)
    {
      if (v31)
      {
        v16 = 1;
        while (1)
        {
          v17 = specialized _ArrayBuffer._getElementSlowPath(_:)(v16, a2);
          v3 = v16 + 1;
          if (__OFADD__(v16, 1))
            break;
          v18 = v17;
          v19 = static NSObject.== infix(_:_:)(v17);
          swift_unknownObjectRelease(v18);
          if ((v19 & 1) != 0)
            goto LABEL_34;
          ++v16;
          if (v3 == v12)
            goto LABEL_30;
        }
        __break(1u);
      }
      else
      {
        v20 = 5;
        while (1)
        {
          v3 = v20 - 3;
          if (__OFADD__(v20 - 4, 1))
            break;
          v21 = *(id *)(a2 + 8 * v20);
          v22 = static NSObject.== infix(_:_:)(v21);

          if ((v22 & 1) != 0)
          {
LABEL_34:
            v23 = v26;
            goto LABEL_35;
          }
          ++v20;
          if (v3 == v12)
          {
LABEL_30:

            swift_bridgeObjectRelease(a2);
            v3 = v26;
            goto LABEL_31;
          }
        }
      }
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }

    swift_bridgeObjectRelease(a2);
LABEL_31:
    v6 = v28;
    v4 = v29;
    v8 = (unint64_t)a2 >> 62;
    if (v5 == v29)
      goto LABEL_45;
  }
  v23 = v3;
LABEL_35:
  swift_bridgeObjectRelease(v23);
  swift_bridgeObjectRelease(a2);
  return v10;
}

void sub_1000DA7D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t i;
  id v13;
  uint64_t v14;
  unint64_t v16;
  int64_t v17;
  void *v18;
  id v19;
  id v20;
  void *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  char v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  unint64_t v39;

  v3 = a1;
  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v38 = (unint64_t)(v5 + 63) >> 6;
  v8 = a2 & 0xFFFFFFFFFFFFFF8;
  if (a2 < 0)
    v9 = a2;
  else
    v9 = a2 & 0xFFFFFFFFFFFFFF8;
  v34 = v9;
  v39 = a2 & 0xC000000000000001;
  v10 = 0;
  v36 = swift_bridgeObjectRetain(a1);
  v37 = v8;
  v35 = v4;
  if (!v7)
    goto LABEL_10;
LABEL_7:
  v11 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (i = v11 | (v10 << 6); ; i = __clz(__rbit64(v16)) + (v10 << 6))
  {
    v18 = *(void **)(*(_QWORD *)(v3 + 48) + 8 * i);
    if ((unint64_t)a2 >> 62)
    {
      v13 = v18;
      swift_bridgeObjectRetain(a2);
      v14 = _CocoaArrayWrapper.endIndex.getter(v34);
      if (!v14)
        goto LABEL_9;
    }
    else
    {
      v14 = *(_QWORD *)(v8 + 16);
      v19 = v18;
      swift_bridgeObjectRetain(a2);
      if (!v14)
      {
LABEL_9:

        swift_bridgeObjectRelease(a2);
        if (v7)
          goto LABEL_7;
        goto LABEL_10;
      }
    }
    v20 = v39 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2) : *(id *)(a2 + 32);
    v21 = v20;
    sub_10006C25C(0, (unint64_t *)&unk_100348970, CBUUID_ptr);
    v22 = static NSObject.== infix(_:_:)(v21);

    if ((v22 & 1) != 0)
      break;
    if (v14 != 1)
    {
      if (v39)
      {
        v23 = 1;
        while (1)
        {
          v24 = specialized _ArrayBuffer._getElementSlowPath(_:)(v23, a2);
          v25 = v23 + 1;
          if (__OFADD__(v23, 1))
            break;
          v26 = v24;
          v27 = static NSObject.== infix(_:_:)(v24);
          swift_unknownObjectRelease(v26);
          if ((v27 & 1) != 0)
            goto LABEL_48;
          ++v23;
          if (v25 == v14)
            goto LABEL_38;
        }
        __break(1u);
      }
      else
      {
        v28 = 5;
        while (1)
        {
          v29 = v28 - 3;
          if (__OFADD__(v28 - 4, 1))
            break;
          v30 = *(id *)(a2 + 8 * v28);
          v31 = static NSObject.== infix(_:_:)(v30);

          if ((v31 & 1) != 0)
          {
LABEL_48:
            v33 = v36;
            goto LABEL_49;
          }
          ++v28;
          if (v29 == v14)
          {
LABEL_38:

            swift_bridgeObjectRelease(a2);
            v3 = v36;
            v4 = v35;
            goto LABEL_39;
          }
        }
      }
      __break(1u);
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }

    swift_bridgeObjectRelease(a2);
LABEL_39:
    v8 = v37;
    if (v7)
      goto LABEL_7;
LABEL_10:
    if (__OFADD__(v10++, 1))
      goto LABEL_54;
    if (v10 >= v38)
    {
LABEL_50:
      swift_release(v3);
      return;
    }
    v16 = *(_QWORD *)(v4 + 8 * v10);
    if (!v16)
    {
      v17 = v10 + 1;
      if (v10 + 1 >= v38)
        goto LABEL_50;
      v16 = *(_QWORD *)(v4 + 8 * v17);
      if (v16)
        goto LABEL_19;
      v17 = v10 + 2;
      if (v10 + 2 >= v38)
        goto LABEL_50;
      v16 = *(_QWORD *)(v4 + 8 * v17);
      if (v16)
        goto LABEL_19;
      v17 = v10 + 3;
      if (v10 + 3 >= v38)
        goto LABEL_50;
      v16 = *(_QWORD *)(v4 + 8 * v17);
      if (v16)
      {
LABEL_19:
        v10 = v17;
      }
      else
      {
        v32 = v10 + 4;
        if (v10 + 4 >= v38)
          goto LABEL_50;
        v16 = *(_QWORD *)(v4 + 8 * v32);
        v10 += 4;
        if (!v16)
        {
          while (1)
          {
            v10 = v32 + 1;
            if (__OFADD__(v32, 1))
              break;
            if (v10 >= v38)
              goto LABEL_50;
            v16 = *(_QWORD *)(v4 + 8 * v10);
            ++v32;
            if (v16)
              goto LABEL_20;
          }
LABEL_55:
          __break(1u);
          return;
        }
      }
    }
LABEL_20:
    v7 = (v16 - 1) & v16;
  }
  v33 = v3;
LABEL_49:
  swift_release(v33);
  swift_bridgeObjectRelease(a2);
}

_QWORD *sub_1000DAB08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSString v26;
  id v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[5];
  uint64_t v32;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = type metadata accessor for DSKBLE.BLEScanRequest();
    v6 = sub_1000C69C4(&qword_100346058, v5, (uint64_t (*)(uint64_t))type metadata accessor for DSKBLE.BLEScanRequest, (uint64_t)&unk_100289848);
    result = Set.Iterator.init(_cocoa:)(v31, v3, v4, v6);
    v1 = v31[0];
    v29 = v31[1];
    v8 = v31[2];
    v9 = v31[3];
    v10 = v31[4];
  }
  else
  {
    v11 = -1 << *(_BYTE *)(a1 + 32);
    v29 = a1 + 56;
    v12 = ~v11;
    v13 = -v11;
    if (v13 < 64)
      v14 = ~(-1 << v13);
    else
      v14 = -1;
    v10 = v14 & *(_QWORD *)(a1 + 56);
    result = (_QWORD *)swift_bridgeObjectRetain(a1);
    v8 = v12;
    v9 = 0;
  }
  v28 = (unint64_t)(v8 + 64) >> 6;
  if ((v1 & 0x8000000000000000) == 0)
    goto LABEL_14;
LABEL_11:
  v15 = __CocoaSet.Iterator.next()(result);
  if (v15)
  {
    v16 = v15;
    v30 = v15;
    v17 = type metadata accessor for DSKBLE.BLEScanRequest();
    swift_unknownObjectRetain(v16);
    swift_dynamicCast(&v32, &v30, (char *)&type metadata for Swift.AnyObject + 8, v17, 7);
    v18 = v32;
    swift_unknownObjectRelease(v16);
    v19 = v9;
    v20 = v10;
    while (v18)
    {
      sub_10006C25C(0, &qword_100348B80, NSObject_ptr);
      v25 = *(_QWORD *)(v18 + 24);
      swift_bridgeObjectRetain(v25);
      v26 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v25);
      v27 = objc_msgSend((id)objc_opt_self(CBUUID), "UUIDWithString:", v26);

      LOBYTE(v26) = static NSObject.== infix(_:_:)(v27);
      if ((v26 & 1) != 0)
        break;
      result = (_QWORD *)swift_release(v18);
      v9 = v19;
      v10 = v20;
      if (v1 < 0)
        goto LABEL_11;
LABEL_14:
      if (v10)
      {
        v20 = (v10 - 1) & v10;
        v21 = __clz(__rbit64(v10)) | (v9 << 6);
        v19 = v9;
      }
      else
      {
        v22 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          return result;
        }
        if (v22 >= v28)
          goto LABEL_36;
        v23 = *(_QWORD *)(v29 + 8 * v22);
        v19 = v9 + 1;
        if (!v23)
        {
          v19 = v9 + 2;
          if (v9 + 2 >= v28)
            goto LABEL_36;
          v23 = *(_QWORD *)(v29 + 8 * v19);
          if (!v23)
          {
            v19 = v9 + 3;
            if (v9 + 3 >= v28)
              goto LABEL_36;
            v23 = *(_QWORD *)(v29 + 8 * v19);
            if (!v23)
            {
              v19 = v9 + 4;
              if (v9 + 4 >= v28)
                goto LABEL_36;
              v23 = *(_QWORD *)(v29 + 8 * v19);
              if (!v23)
              {
                v19 = v9 + 5;
                if (v9 + 5 >= v28)
                  goto LABEL_36;
                v23 = *(_QWORD *)(v29 + 8 * v19);
                if (!v23)
                {
                  v24 = v9 + 6;
                  while (v28 != v24)
                  {
                    v23 = *(_QWORD *)(v29 + 8 * v24++);
                    if (v23)
                    {
                      v19 = v24 - 1;
                      goto LABEL_31;
                    }
                  }
                  goto LABEL_36;
                }
              }
            }
          }
        }
LABEL_31:
        v20 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v19 << 6);
      }
      v18 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v21);
      swift_retain(v18);
    }
  }
  else
  {
LABEL_36:
    v18 = 0;
  }
  sub_10007EF58(v1);
  return (_QWORD *)v18;
}

_QWORD *sub_1000DAE50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v30;
  _QWORD v31[5];
  uint64_t v32;

  v2 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v3 = a1;
    else
      v3 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v4 = __CocoaSet.makeIterator()(v3);
    v5 = type metadata accessor for DSKBLE.BLEPeripheral();
    v6 = sub_1000C69C4(&qword_1003460B8, 255, (uint64_t (*)(uint64_t))type metadata accessor for DSKBLE.BLEPeripheral, (uint64_t)&unk_1002898C0);
    result = Set.Iterator.init(_cocoa:)(v31, v4, v5, v6);
    v2 = v31[0];
    v28 = v31[1];
    v8 = v31[2];
    v9 = v31[3];
    v10 = v31[4];
  }
  else
  {
    v11 = -1 << *(_BYTE *)(a1 + 32);
    v28 = a1 + 56;
    v8 = ~v11;
    v12 = -v11;
    if (v12 < 64)
      v13 = ~(-1 << v12);
    else
      v13 = -1;
    v10 = v13 & *(_QWORD *)(a1 + 56);
    result = (_QWORD *)swift_bridgeObjectRetain(a1);
    v9 = 0;
  }
  v27 = (unint64_t)(v8 + 64) >> 6;
  while (1)
  {
    v20 = v9;
    if (v2 < 0)
    {
      v24 = __CocoaSet.Iterator.next()(result);
      if (!v24)
        goto LABEL_36;
      v25 = v24;
      v30 = v24;
      v26 = type metadata accessor for DSKBLE.BLEPeripheral();
      swift_unknownObjectRetain(v25);
      swift_dynamicCast(&v32, &v30, (char *)&type metadata for Swift.AnyObject + 8, v26, 7);
      v16 = v32;
      swift_unknownObjectRelease(v25);
      if (!v16)
        goto LABEL_37;
      goto LABEL_13;
    }
    if (!v10)
      break;
    v14 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    v15 = v14 | (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    swift_retain(v16);
    if (!v16)
      goto LABEL_37;
LABEL_13:
    v17 = *(_QWORD *)(v16 + 16);
    v18 = v17 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
    v19 = *(_QWORD *)(a2 + 16) + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
    swift_retain(v17);
    LOBYTE(v19) = static UUID.== infix(_:_:)(v18, v19);
    swift_release(v16);
    result = (_QWORD *)swift_release(v17);
    if ((v19 & 1) != 0)
    {
      v16 = 1;
      goto LABEL_37;
    }
  }
  v21 = v9 + 1;
  if (!__OFADD__(v9, 1))
  {
    if (v21 >= v27)
      goto LABEL_36;
    v22 = *(_QWORD *)(v28 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v20 + 2;
      if (v20 + 2 >= v27)
        goto LABEL_36;
      v22 = *(_QWORD *)(v28 + 8 * v9);
      if (!v22)
      {
        v9 = v20 + 3;
        if (v20 + 3 >= v27)
          goto LABEL_36;
        v22 = *(_QWORD *)(v28 + 8 * v9);
        if (!v22)
        {
          v9 = v20 + 4;
          if (v20 + 4 >= v27)
            goto LABEL_36;
          v22 = *(_QWORD *)(v28 + 8 * v9);
          if (!v22)
          {
            v9 = v20 + 5;
            if (v20 + 5 >= v27)
              goto LABEL_36;
            v22 = *(_QWORD *)(v28 + 8 * v9);
            if (!v22)
            {
              v23 = v20 + 6;
              while (v27 != v23)
              {
                v22 = *(_QWORD *)(v28 + 8 * v23++);
                if (v22)
                {
                  v9 = v23 - 1;
                  goto LABEL_31;
                }
              }
LABEL_36:
              v16 = 0;
LABEL_37:
              sub_10007EF58(v2);
              return (_QWORD *)v16;
            }
          }
        }
      }
    }
LABEL_31:
    v10 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000DB160(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_1000DB178(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  int64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t i;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  Swift::UInt v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int64_t v26;
  _BYTE *v27;
  int v28;
  char v29;
  uint64_t v30;
  _BYTE v31[24];
  char *v32;

  v32 = a4;
  v4 = a1;
  v5 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 64);
  v9 = (uint64_t *)(a2 + OBJC_IVAR____TtC10seserviced6DSKBLE_discoveryPairedPeripherals);
  v10 = (unint64_t)(v6 + 63) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v12 = 0;
  v30 = v5;
  if (v8)
    goto LABEL_6;
LABEL_7:
  v15 = v12 + 1;
  if (!__OFADD__(v12, 1))
  {
    if (v15 < v10)
    {
      v16 = *(_QWORD *)(v5 + 8 * v15);
      ++v12;
      if (v16)
        goto LABEL_22;
      v12 = v15 + 1;
      if (v15 + 1 >= v10)
        return swift_release(v4);
      v16 = *(_QWORD *)(v5 + 8 * v12);
      if (v16)
        goto LABEL_22;
      v12 = v15 + 2;
      if (v15 + 2 >= v10)
        return swift_release(v4);
      v16 = *(_QWORD *)(v5 + 8 * v12);
      if (v16)
        goto LABEL_22;
      v12 = v15 + 3;
      if (v15 + 3 >= v10)
        return swift_release(v4);
      v16 = *(_QWORD *)(v5 + 8 * v12);
      if (v16)
      {
LABEL_22:
        v8 = (v16 - 1) & v16;
        for (i = __clz(__rbit64(v16)) + (v12 << 6); ; i = v13 | (v12 << 6))
        {
          v18 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * i);
          swift_beginAccess(v9, v31, 32, 0);
          v19 = *v9;
          if (*(_QWORD *)(*v9 + 16) && (v20 = sub_100187EE4(v18), (v21 & 1) != 0))
          {
            v22 = *(_QWORD *)(v19 + 56) + 16 * v20;
            v23 = *(_QWORD *)v22;
            v24 = *(char *)(v22 + 8);
            swift_endAccess(v31);
            swift_bridgeObjectRetain_n(v23, 2);
            sub_1000BA008(v23);
            v25 = v4;
            v26 = v10;
            v27 = v32;
            v28 = *v32;
            result = swift_bridgeObjectRelease(v23);
            if (v24 >= v28)
              v29 = v28;
            else
              v29 = v24;
            v5 = v30;
            *v27 = v29;
            v10 = v26;
            v4 = v25;
            if (!v8)
              goto LABEL_7;
          }
          else
          {
            result = swift_endAccess(v31);
            if (!v8)
              goto LABEL_7;
          }
LABEL_6:
          v13 = __clz(__rbit64(v8));
          v8 &= v8 - 1;
        }
      }
      v17 = v15 + 4;
      if (v17 < v10)
      {
        v16 = *(_QWORD *)(v5 + 8 * v17);
        if (v16)
        {
          v12 = v17;
          goto LABEL_22;
        }
        while (1)
        {
          v12 = v17 + 1;
          if (__OFADD__(v17, 1))
            goto LABEL_32;
          if (v12 >= v10)
            return swift_release(v4);
          v16 = *(_QWORD *)(v5 + 8 * v12);
          ++v17;
          if (v16)
            goto LABEL_22;
        }
      }
    }
    return swift_release(v4);
  }
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_1000DB38C(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  char v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  id v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  Swift::Int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  id v62;
  id v63;
  id v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  Swift::Int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  void *v75;
  id v76;
  id v77;
  char v78;
  void *v79;
  id v80;
  uint64_t *v81;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v83;
  uint64_t v84;
  uint64_t result;
  _QWORD v86[3];
  char *v87;
  uint64_t v88;
  int64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  _QWORD v101[9];
  _QWORD v102[3];
  char v103[24];
  _QWORD v104[5];
  unint64_t v105;

  v97 = a2;
  v95 = type metadata accessor for UUID(0);
  v94 = *(_QWORD *)(v95 - 8);
  __chkstk_darwin(v95, v4);
  v93 = (char *)v86 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v6 = a1;
    else
      v6 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = __CocoaSet.makeIterator()(v6);
    v7 = type metadata accessor for DSKBLE.BLEPeripheral();
    v8 = sub_1000C69C4(&qword_1003460B8, 255, (uint64_t (*)(uint64_t))type metadata accessor for DSKBLE.BLEPeripheral, (uint64_t)&unk_1002898C0);
    v9 = Set.Iterator.init(_cocoa:)(v104, v2, v7, v8);
    a1 = v104[0];
    v90 = v104[1];
    v10 = v104[2];
    v11 = v104[3];
    v12 = v104[4];
  }
  else
  {
    v13 = -1 << *(_BYTE *)(a1 + 32);
    v14 = *(_QWORD *)(a1 + 56);
    v90 = a1 + 56;
    v10 = ~v13;
    v15 = -v13;
    if (v15 < 64)
      v16 = ~(-1 << v15);
    else
      v16 = -1;
    v12 = v16 & v14;
    swift_bridgeObjectRetain(a1);
    v11 = 0;
  }
  v88 = a1 & 0x7FFFFFFFFFFFFFFFLL;
  v86[1] = v10;
  v89 = (unint64_t)(v10 + 64) >> 6;
  v87 = (char *)&type metadata for Swift.AnyObject + 8;
  v91 = a1;
  while (1)
  {
    if (a1 < 0)
    {
      v21 = __CocoaSet.Iterator.next()(v9);
      if (!v21)
        return sub_10007EF58(a1);
      v22 = v21;
      v102[0] = v21;
      v23 = type metadata accessor for DSKBLE.BLEPeripheral();
      swift_unknownObjectRetain(v22);
      swift_dynamicCast(v101, v102, v87, v23, 7);
      v24 = (_QWORD *)v101[0];
      swift_unknownObjectRelease(v22);
      v20 = v11;
      v18 = v12;
      if (!v24)
        return sub_10007EF58(a1);
    }
    else
    {
      if (v12)
      {
        v18 = (v12 - 1) & v12;
        v19 = __clz(__rbit64(v12)) | (v11 << 6);
        v20 = v11;
      }
      else
      {
        v25 = v11 + 1;
        if (__OFADD__(v11, 1))
          goto LABEL_60;
        if (v25 >= v89)
          return sub_10007EF58(a1);
        v26 = *(_QWORD *)(v90 + 8 * v25);
        v20 = v11 + 1;
        if (!v26)
        {
          v20 = v11 + 2;
          if (v11 + 2 >= v89)
            return sub_10007EF58(a1);
          v26 = *(_QWORD *)(v90 + 8 * v20);
          if (!v26)
          {
            v20 = v11 + 3;
            if (v11 + 3 >= v89)
              return sub_10007EF58(a1);
            v26 = *(_QWORD *)(v90 + 8 * v20);
            if (!v26)
            {
              v20 = v11 + 4;
              if (v11 + 4 >= v89)
                return sub_10007EF58(a1);
              v26 = *(_QWORD *)(v90 + 8 * v20);
              if (!v26)
              {
                v20 = v11 + 5;
                if (v11 + 5 >= v89)
                  return sub_10007EF58(a1);
                v26 = *(_QWORD *)(v90 + 8 * v20);
                if (!v26)
                {
                  v27 = v11 + 6;
                  while (v89 != v27)
                  {
                    v26 = *(_QWORD *)(v90 + 8 * v27++);
                    if (v26)
                    {
                      v20 = v27 - 1;
                      goto LABEL_35;
                    }
                  }
                  return sub_10007EF58(a1);
                }
              }
            }
          }
        }
LABEL_35:
        v18 = (v26 - 1) & v26;
        v19 = __clz(__rbit64(v26)) + (v20 << 6);
      }
      v24 = *(_QWORD **)(*(_QWORD *)(a1 + 48) + 8 * v19);
      swift_retain(v24);
      if (!v24)
        return sub_10007EF58(a1);
    }
    v98 = v18;
    v99 = v20;
    swift_beginAccess(v24 + 5, v103, 0, 0);
    v28 = v24[8];
    v29 = v24[9];
    v30 = sub_10006BA78(v24 + 5, v28);
    v31 = v24;
    v32 = *(_QWORD *)(v28 - 8);
    __chkstk_darwin(v30, v30);
    v34 = (char *)v86 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v32 + 16))(v34);
    v35 = (void (*)(uint64_t, uint64_t))(*(uint64_t (**)(uint64_t, uint64_t))(v29 + 88))(v28, v29);
    v37 = v36;
    (*(void (**)(char *, uint64_t))(v32 + 8))(v34, v28);
    v38 = sub_1000AAC04();
    v39 = swift_allocError(&type metadata for DSKBLE.BLEError, v38, 0, 0);
    *v40 = 3;
    v41 = v31[2];
    swift_retain(v41);
    v35(v39, v41);
    swift_release(v41);
    swift_errorRelease(v39);
    swift_release(v37);
    v42 = (uint64_t *)(v97 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals);
    swift_beginAccess(v97 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals, v102, 33, 0);
    v43 = *v42;
    v44 = (*v42 & 0xC000000000000001) == 0;
    v100 = v31;
    if (!v44)
      break;
    Hasher.init(_seed:)(v101);
    v64 = objc_msgSend((id)v31[3], "identifier", swift_bridgeObjectRetain(v43).n128_f64[0]);
    v65 = v93;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v64);

    v66 = sub_1000C69C4((unint64_t *)&unk_100347730, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v67 = v95;
    dispatch thunk of Hashable.hash(into:)(v101, v95, v66);
    (*(void (**)(char *, uint64_t))(v94 + 8))(v65, v67);
    v68 = Hasher._finalize()();
    v69 = -1 << *(_BYTE *)(v43 + 32);
    v2 = v68 & ~v69;
    v70 = v43 + 56;
    v47 = v31;
    if (((*(_QWORD *)(v43 + 56 + ((v2 >> 3) & 0xFFFFFFFFFFFFF8)) >> v2) & 1) == 0)
      goto LABEL_11;
    v96 = v42;
    v71 = ~v69;
    sub_10006C25C(0, &qword_100348B80, NSObject_ptr);
    while (1)
    {
      v72 = v43;
      v73 = *(_QWORD *)(*(_QWORD *)(v43 + 48) + 8 * v2);
      v74 = *(void **)(v73 + 24);
      v75 = (void *)v47[3];
      swift_retain(v73);
      v76 = v74;
      v77 = v75;
      v78 = static NSObject.== infix(_:_:)(v76);
      swift_release(v73);

      if ((v78 & 1) != 0)
        break;
      v2 = (v2 + 1) & v71;
      v47 = v100;
      v43 = v72;
      if (((*(_QWORD *)(v70 + ((v2 >> 3) & 0xFFFFFFFFFFFFF8)) >> v2) & 1) == 0)
      {
        swift_bridgeObjectRelease(v72);
        v17 = 0;
        v11 = v99;
        v12 = v98;
        goto LABEL_57;
      }
    }
    swift_bridgeObjectRelease(v72);
    v81 = v96;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v96);
    v83 = *v81;
    v101[0] = *v81;
    *v81 = 0x8000000000000000;
    v11 = v99;
    v12 = v98;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1000D1008((uint64_t *)&unk_1003460A0);
      v83 = v101[0];
    }
    v17 = *(_QWORD *)(*(_QWORD *)(v83 + 48) + 8 * v2);
    sub_1000D50C4(v2);
    v84 = *v81;
    *v81 = v101[0];
    swift_bridgeObjectRelease(v84);
    v47 = v100;
LABEL_57:
    a1 = v91;
LABEL_13:
    swift_endAccess(v102);
    swift_release(v47);
    v9 = (_QWORD *)swift_release(v17);
  }
  if (v43 < 0)
    v2 = v43;
  else
    v2 = v43 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v43);
  v45 = swift_retain(v31);
  v46 = __CocoaSet.contains(_:)(v45, v2);
  swift_release(v31);
  v47 = v31;
  if ((v46 & 1) == 0)
  {
LABEL_11:
    swift_bridgeObjectRelease(v43);
    v17 = 0;
LABEL_12:
    v11 = v99;
    v12 = v98;
    goto LABEL_13;
  }
  v92 = v43;
  v96 = v42;
  swift_bridgeObjectRelease(*v42);
  v48 = __CocoaSet.count.getter(v2);
  v49 = swift_unknownObjectRetain(v2);
  v2 = sub_1000CAE8C(v49, v48);
  v105 = v2;
  Hasher.init(_seed:)(v101);
  v50 = (void *)v31[3];
  swift_retain(v2);
  v51 = objc_msgSend(v50, "identifier");
  v52 = v93;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v51);

  v53 = sub_1000C69C4((unint64_t *)&unk_100347730, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v54 = v95;
  dispatch thunk of Hashable.hash(into:)(v101, v95, v53);
  (*(void (**)(char *, uint64_t))(v94 + 8))(v52, v54);
  v55 = Hasher._finalize()();
  v56 = -1 << *(_BYTE *)(v2 + 32);
  v57 = v55 & ~v56;
  if (((*(_QWORD *)(v2 + 56 + ((v57 >> 3) & 0xFFFFFFFFFFFFF8)) >> v57) & 1) == 0)
    goto LABEL_62;
  v58 = ~v56;
  sub_10006C25C(0, &qword_100348B80, NSObject_ptr);
  while (1)
  {
    v59 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v57);
    v60 = *(void **)(v59 + 24);
    v61 = (void *)v47[3];
    swift_retain(v59);
    v62 = v60;
    v63 = v61;
    LOBYTE(v61) = static NSObject.== infix(_:_:)(v62);
    swift_release(v59);

    if ((v61 & 1) != 0)
      break;
    v57 = (v57 + 1) & v58;
    v47 = v100;
    if (((*(_QWORD *)(v2 + 56 + ((v57 >> 3) & 0xFFFFFFFFFFFFF8)) >> v57) & 1) == 0)
      goto LABEL_61;
  }
  swift_release(v2);
  v17 = *(_QWORD *)(*(_QWORD *)(v105 + 48) + 8 * v57);
  sub_1000D50C4(v57);
  v47 = v100;
  v79 = *(void **)(v17 + 24);
  v2 = (unint64_t)(id)v100[3];
  v80 = v79;
  LOBYTE(v79) = static NSObject.== infix(_:_:)(v2);

  if ((v79 & 1) != 0)
  {
    *v96 = v105;
    swift_bridgeObjectRelease(v92);
    a1 = v91;
    goto LABEL_12;
  }
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  swift_release(v2);
  __break(1u);
LABEL_62:
  result = swift_release(v2);
  __break(1u);
  return result;
}

void sub_1000DBCF0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  uint64_t v27;
  id v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[5];
  uint64_t v33;

  v4 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v5 = a1;
    else
      v5 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v6 = __CocoaSet.makeIterator()(v5);
    v7 = type metadata accessor for DSKBLE.BLEPeripheral();
    v8 = sub_1000C69C4(&qword_1003460B8, 255, (uint64_t (*)(uint64_t))type metadata accessor for DSKBLE.BLEPeripheral, (uint64_t)&unk_1002898C0);
    v9 = Set.Iterator.init(_cocoa:)(v32, v6, v7, v8);
    v4 = v32[0];
    v30 = v32[1];
    v10 = v32[2];
    v11 = v32[3];
    v12 = v32[4];
  }
  else
  {
    v13 = -1 << *(_BYTE *)(a1 + 32);
    v30 = a1 + 56;
    v14 = ~v13;
    v15 = -v13;
    if (v15 < 64)
      v16 = ~(-1 << v15);
    else
      v16 = -1;
    v12 = v16 & *(_QWORD *)(a1 + 56);
    v9 = (_QWORD *)swift_bridgeObjectRetain(a1);
    v10 = v14;
    v11 = 0;
  }
  v29 = (unint64_t)(v10 + 64) >> 6;
  v17 = a3 & 1;
  if (v4 < 0)
    goto LABEL_13;
  while (1)
  {
    if (v12)
    {
      v18 = (v12 - 1) & v12;
      v19 = __clz(__rbit64(v12)) | (v11 << 6);
      v20 = v11;
      goto LABEL_32;
    }
    v25 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v25 >= v29)
      goto LABEL_35;
    v26 = *(_QWORD *)(v30 + 8 * v25);
    v20 = v11 + 1;
    if (!v26)
    {
      v20 = v11 + 2;
      if (v11 + 2 >= v29)
        goto LABEL_35;
      v26 = *(_QWORD *)(v30 + 8 * v20);
      if (!v26)
      {
        v20 = v11 + 3;
        if (v11 + 3 >= v29)
          goto LABEL_35;
        v26 = *(_QWORD *)(v30 + 8 * v20);
        if (!v26)
        {
          v20 = v11 + 4;
          if (v11 + 4 >= v29)
            goto LABEL_35;
          v26 = *(_QWORD *)(v30 + 8 * v20);
          if (!v26)
          {
            v20 = v11 + 5;
            if (v11 + 5 >= v29)
              goto LABEL_35;
            v26 = *(_QWORD *)(v30 + 8 * v20);
            if (!v26)
            {
              v27 = v11 + 6;
              while (v29 != v27)
              {
                v26 = *(_QWORD *)(v30 + 8 * v27++);
                if (v26)
                {
                  v20 = v27 - 1;
                  goto LABEL_31;
                }
              }
LABEL_35:
              sub_10007EF58(v4);
              return;
            }
          }
        }
      }
    }
LABEL_31:
    v18 = (v26 - 1) & v26;
    v19 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_32:
    v24 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v19);
    swift_retain(v24);
    if (!v24)
      goto LABEL_35;
    while (1)
    {
      v28 = *(id *)(v24 + 24);
      sub_1000B4DF8(v28, v17, 0);
      swift_release(v24);

      v11 = v20;
      v12 = v18;
      if ((v4 & 0x8000000000000000) == 0)
        break;
LABEL_13:
      v21 = __CocoaSet.Iterator.next()(v9);
      if (v21)
      {
        v22 = v21;
        v31 = v21;
        v23 = type metadata accessor for DSKBLE.BLEPeripheral();
        swift_unknownObjectRetain(v22);
        swift_dynamicCast(&v33, &v31, (char *)&type metadata for Swift.AnyObject + 8, v23, 7);
        v24 = v33;
        swift_unknownObjectRelease(v22);
        v20 = v11;
        v18 = v12;
        if (v24)
          continue;
      }
      goto LABEL_35;
    }
  }
  __break(1u);
}

_QWORD *sub_1000DBFE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[5];
  uint64_t *v28;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = type metadata accessor for DSKBLE.BLEConnectionRequest();
    v6 = sub_1000C69C4((unint64_t *)&unk_1003460C0, v5, (uint64_t (*)(uint64_t))type metadata accessor for DSKBLE.BLEConnectionRequest, (uint64_t)&unk_1002897D0);
    result = Set.Iterator.init(_cocoa:)(v27, v3, v4, v6);
    v1 = v27[0];
    v25 = v27[1];
    v9 = v27[2];
    v8 = v27[3];
    v10 = v27[4];
  }
  else
  {
    v11 = -1 << *(_BYTE *)(a1 + 32);
    v25 = a1 + 56;
    v9 = ~v11;
    v12 = -v11;
    if (v12 < 64)
      v13 = ~(-1 << v12);
    else
      v13 = -1;
    v10 = v13 & *(_QWORD *)(a1 + 56);
    result = (_QWORD *)swift_bridgeObjectRetain(a1);
    v8 = 0;
  }
  v14 = (unint64_t)(v9 + 64) >> 6;
  if (v1 < 0)
    goto LABEL_13;
  while (1)
  {
    if (v10)
    {
      v15 = (v10 - 1) & v10;
      v16 = __clz(__rbit64(v10)) | (v8 << 6);
      v17 = v8;
      goto LABEL_32;
    }
    v22 = v8 + 1;
    if (__OFADD__(v8, 1))
      break;
    if (v22 >= v14)
      return (_QWORD *)sub_10007EF58(v1);
    v23 = *(_QWORD *)(v25 + 8 * v22);
    v17 = v8 + 1;
    if (!v23)
    {
      v17 = v8 + 2;
      if (v8 + 2 >= v14)
        return (_QWORD *)sub_10007EF58(v1);
      v23 = *(_QWORD *)(v25 + 8 * v17);
      if (!v23)
      {
        v17 = v8 + 3;
        if (v8 + 3 >= v14)
          return (_QWORD *)sub_10007EF58(v1);
        v23 = *(_QWORD *)(v25 + 8 * v17);
        if (!v23)
        {
          v17 = v8 + 4;
          if (v8 + 4 >= v14)
            return (_QWORD *)sub_10007EF58(v1);
          v23 = *(_QWORD *)(v25 + 8 * v17);
          if (!v23)
          {
            v17 = v8 + 5;
            if (v8 + 5 >= v14)
              return (_QWORD *)sub_10007EF58(v1);
            v23 = *(_QWORD *)(v25 + 8 * v17);
            if (!v23)
            {
              v24 = v8 + 6;
              while (v14 != v24)
              {
                v23 = *(_QWORD *)(v25 + 8 * v24++);
                if (v23)
                {
                  v17 = v24 - 1;
                  goto LABEL_31;
                }
              }
              return (_QWORD *)sub_10007EF58(v1);
            }
          }
        }
      }
    }
LABEL_31:
    v15 = (v23 - 1) & v23;
    v16 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_32:
    v21 = *(uint64_t **)(*(_QWORD *)(v1 + 48) + 8 * v16);
    swift_retain(v21);
    if (!v21)
      return (_QWORD *)sub_10007EF58(v1);
    while (1)
    {
      sub_1000B0F98(v21, 0);
      result = (_QWORD *)swift_release(v21);
      v8 = v17;
      v10 = v15;
      if ((v1 & 0x8000000000000000) == 0)
        break;
LABEL_13:
      v18 = __CocoaSet.Iterator.next()(result);
      if (v18)
      {
        v19 = v18;
        v26 = v18;
        v20 = type metadata accessor for DSKBLE.BLEConnectionRequest();
        swift_unknownObjectRetain(v19);
        swift_dynamicCast(&v28, &v26, (char *)&type metadata for Swift.AnyObject + 8, v20, 7);
        v21 = v28;
        swift_unknownObjectRelease(v19);
        v17 = v8;
        v15 = v10;
        if (v21)
          continue;
      }
      return (_QWORD *)sub_10007EF58(v1);
    }
  }
  __break(1u);
  return result;
}

void sub_1000DC290(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[5];
  void *v29;

  v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v4 = a1;
    else
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v5 = __CocoaSet.makeIterator()(v4);
    v6 = sub_10006C25C(0, &qword_1003460F0, CBCharacteristic_ptr);
    v7 = sub_1000DCA84(&qword_100346218, &qword_1003460F0, CBCharacteristic_ptr);
    v8 = Set.Iterator.init(_cocoa:)(v28, v5, v6, v7);
    v3 = v28[0];
    v26 = v28[1];
    v9 = v28[2];
    v10 = v28[3];
    v11 = v28[4];
  }
  else
  {
    v12 = -1 << *(_BYTE *)(a1 + 32);
    v26 = a1 + 56;
    v9 = ~v12;
    v13 = -v12;
    if (v13 < 64)
      v14 = ~(-1 << v13);
    else
      v14 = -1;
    v11 = v14 & *(_QWORD *)(a1 + 56);
    v8 = (_QWORD *)swift_bridgeObjectRetain(a1);
    v10 = 0;
  }
  v25 = (unint64_t)(v9 + 64) >> 6;
  if (v3 < 0)
    goto LABEL_13;
  while (1)
  {
    if (v11)
    {
      v15 = (v11 - 1) & v11;
      v16 = __clz(__rbit64(v11)) | (v10 << 6);
      v17 = v10;
      goto LABEL_32;
    }
    v22 = v10 + 1;
    if (__OFADD__(v10, 1))
      break;
    if (v22 >= v25)
      goto LABEL_35;
    v23 = *(_QWORD *)(v26 + 8 * v22);
    v17 = v10 + 1;
    if (!v23)
    {
      v17 = v10 + 2;
      if (v10 + 2 >= v25)
        goto LABEL_35;
      v23 = *(_QWORD *)(v26 + 8 * v17);
      if (!v23)
      {
        v17 = v10 + 3;
        if (v10 + 3 >= v25)
          goto LABEL_35;
        v23 = *(_QWORD *)(v26 + 8 * v17);
        if (!v23)
        {
          v17 = v10 + 4;
          if (v10 + 4 >= v25)
            goto LABEL_35;
          v23 = *(_QWORD *)(v26 + 8 * v17);
          if (!v23)
          {
            v17 = v10 + 5;
            if (v10 + 5 >= v25)
              goto LABEL_35;
            v23 = *(_QWORD *)(v26 + 8 * v17);
            if (!v23)
            {
              v24 = v10 + 6;
              while (v25 != v24)
              {
                v23 = *(_QWORD *)(v26 + 8 * v24++);
                if (v23)
                {
                  v17 = v24 - 1;
                  goto LABEL_31;
                }
              }
LABEL_35:
              sub_10007EF58(v3);
              return;
            }
          }
        }
      }
    }
LABEL_31:
    v15 = (v23 - 1) & v23;
    v16 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_32:
    v21 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v16);
    if (!v21)
      goto LABEL_35;
    while (1)
    {
      objc_msgSend(a2, "readValueForCharacteristic:", v21);

      v10 = v17;
      v11 = v15;
      if ((v3 & 0x8000000000000000) == 0)
        break;
LABEL_13:
      v18 = __CocoaSet.Iterator.next()(v8);
      if (v18)
      {
        v19 = v18;
        v27 = v18;
        v20 = sub_10006C25C(0, &qword_1003460F0, CBCharacteristic_ptr);
        swift_unknownObjectRetain(v19);
        swift_dynamicCast(&v29, &v27, (char *)&type metadata for Swift.AnyObject + 8, v20, 7);
        v21 = v29;
        swift_unknownObjectRelease(v19);
        v17 = v10;
        v15 = v11;
        if (v21)
          continue;
      }
      goto LABEL_35;
    }
  }
  __break(1u);
}

void sub_1000DC57C(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t *v18;
  uint64_t v19;
  id v20;
  _QWORD *v21;
  Class isa;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint8_t *v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t aBlock[5];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45[32];

  v8 = type metadata accessor for DispatchPredicate(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (uint8_t **)((char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = swift_allocObject(&unk_100308418, 32, 7);
  *(_QWORD *)(v13 + 16) = a3;
  *(_QWORD *)(v13 + 24) = a4;
  v14 = qword_1003447B8;
  swift_retain(a3);
  swift_retain(a4);
  if (v14 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v15 = qword_100354EE8;
  *v12 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8);
  v16 = (id)v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)(v12);
  (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v12, v8);
  if ((v15 & 1) != 0)
  {
    v17 = *(void **)(a2 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager);
    if (v17)
    {
      v18 = (uint64_t *)(a2 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals);
      swift_beginAccess(a2 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals, v45, 0, 0);
      v19 = *v18;
      swift_retain(a1);
      swift_bridgeObjectRetain(v19);
      v20 = v17;
      v21 = sub_1000D89A0(v19, a1);
      swift_bridgeObjectRelease(v19);
      swift_release(a1);
      if (v21)
      {
        isa = UUID._bridgeToObjectiveC()().super.isa;
        v23 = swift_allocObject(&unk_100308440, 32, 7);
        *(_QWORD *)(v23 + 16) = sub_1000DC9CC;
        *(_QWORD *)(v23 + 24) = v13;
        aBlock[4] = (uint64_t)sub_1000DCA04;
        v42 = v23;
        aBlock[0] = (uint64_t)_NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = (uint64_t)sub_1000BB124;
        aBlock[3] = (uint64_t)&unk_100308458;
        v24 = _Block_copy(aBlock);
        v25 = v42;
        swift_retain(v13);
        swift_release(v25);
        objc_msgSend(v20, "retrieveConnectionHandleWithIdentifier:completion:", isa, v24);
        _Block_release(v24);
        swift_release(v13);

        swift_release(v21);
      }
      else
      {
        v26 = swift_retain_n(a1, 2);
        v27 = Logger.logObject.getter(v26);
        v29 = static os_log_type_t.error.getter(v27, v28);
        if (os_log_type_enabled(v27, v29))
        {
          v30 = (uint8_t *)swift_slowAlloc(12, -1);
          v40 = swift_slowAlloc(32, -1);
          aBlock[0] = v40;
          v39 = v30;
          *(_DWORD *)v30 = 136315138;
          v38 = v30 + 4;
          v31 = type metadata accessor for UUID(0);
          v32 = sub_1000C69C4((unint64_t *)&qword_100344CC8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v33 = dispatch thunk of CustomStringConvertible.description.getter(v31, v32);
          v35 = v34;
          v43 = sub_1001C56EC(v33, v34, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v38, v30 + 12);
          swift_release_n(a1, 2);
          swift_bridgeObjectRelease(v35);
          v36 = v39;
          _os_log_impl((void *)&_mh_execute_header, v27, v29, "Peripheral not connected %s", v39, 0xCu);
          v37 = v40;
          swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v37, -1, -1);
          swift_slowDealloc(v36, -1, -1);
        }
        else
        {
          swift_release_n(a1, 2);
        }

        sub_1000A58A8(65540, a3, a4);
        swift_release(v13);

      }
    }
    else
    {
      sub_1000A58A8(65539, a3, a4);
      swift_release(v13);
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000DC9A0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1000DC9CC(int a1)
{
  uint64_t v1;

  sub_1000A58A8(a1 & 0x1FFFF, *(NSObject **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1000DC9E0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000DCA04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a2)
    a1 = 65538;
  else
    a1 = (unsigned __int16)a1;
  return (*(uint64_t (**)(uint64_t))(v2 + 16))(a1);
}

uint64_t sub_1000DCA40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000DCA50(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000DCA58(uint64_t a1)
{
  uint64_t v1;

  return sub_1000B8CAC(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_1000DCA74(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_retain(a2);
  return result;
}

uint64_t sub_1000DCA84(unint64_t *a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_10006C25C(255, a2, a3);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v5);
    atomic_store(result, a1);
  }
  return result;
}

void sub_1000DCAC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  id v16;
  char v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[5];
  uint64_t v29;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = type metadata accessor for DSKBLE.BLEPeripheral();
    v5 = sub_1000C69C4(&qword_1003460B8, 255, (uint64_t (*)(uint64_t))type metadata accessor for DSKBLE.BLEPeripheral, (uint64_t)&unk_1002898C0);
    v6 = Set.Iterator.init(_cocoa:)(v28, v3, v4, v5);
    v1 = v28[0];
    v26 = v28[1];
    v7 = v28[2];
    v8 = v28[3];
    v9 = v28[4];
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v26 = a1 + 56;
    v7 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v9 = v12 & *(_QWORD *)(a1 + 56);
    v6 = (_QWORD *)swift_bridgeObjectRetain(a1);
    v8 = 0;
  }
  v25 = (unint64_t)(v7 + 64) >> 6;
  while (1)
  {
    v18 = v8;
    if ((v1 & 0x8000000000000000) == 0)
      break;
    v22 = __CocoaSet.Iterator.next()(v6);
    if (!v22)
      goto LABEL_34;
    v23 = v22;
    v27 = v22;
    v24 = type metadata accessor for DSKBLE.BLEPeripheral();
    swift_unknownObjectRetain(v23);
    swift_dynamicCast(&v29, &v27, (char *)&type metadata for Swift.AnyObject + 8, v24, 7);
    v15 = v29;
    swift_unknownObjectRelease(v23);
    if (!v15)
      goto LABEL_34;
LABEL_13:
    sub_10006C25C(0, &qword_100348B80, NSObject_ptr);
    v16 = *(id *)(v15 + 24);
    v17 = static NSObject.== infix(_:_:)(v16);
    swift_release(v15);

    if ((v17 & 1) != 0)
      goto LABEL_34;
  }
  if (v9)
  {
    v13 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v14 = v13 | (v8 << 6);
LABEL_12:
    v15 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v14);
    swift_retain(v15);
    if (!v15)
      goto LABEL_34;
    goto LABEL_13;
  }
  v19 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v19 >= v25)
      goto LABEL_34;
    v20 = *(_QWORD *)(v26 + 8 * v19);
    ++v8;
    if (!v20)
    {
      v8 = v18 + 2;
      if (v18 + 2 >= v25)
        goto LABEL_34;
      v20 = *(_QWORD *)(v26 + 8 * v8);
      if (!v20)
      {
        v8 = v18 + 3;
        if (v18 + 3 >= v25)
          goto LABEL_34;
        v20 = *(_QWORD *)(v26 + 8 * v8);
        if (!v20)
        {
          v8 = v18 + 4;
          if (v18 + 4 >= v25)
            goto LABEL_34;
          v20 = *(_QWORD *)(v26 + 8 * v8);
          if (!v20)
          {
            v8 = v18 + 5;
            if (v18 + 5 >= v25)
              goto LABEL_34;
            v20 = *(_QWORD *)(v26 + 8 * v8);
            if (!v20)
            {
              v21 = v18 + 6;
              while (v25 != v21)
              {
                v20 = *(_QWORD *)(v26 + 8 * v21++);
                if (v20)
                {
                  v8 = v21 - 1;
                  goto LABEL_31;
                }
              }
LABEL_34:
              sub_10007EF58(v1);
              return;
            }
          }
        }
      }
    }
LABEL_31:
    v9 = (v20 - 1) & v20;
    v14 = __clz(__rbit64(v20)) + (v8 << 6);
    goto LABEL_12;
  }
  __break(1u);
}

_QWORD *sub_1000DCDD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  uint64_t v22;
  id v23;
  char v24;
  int v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[5];
  uint64_t v30;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = type metadata accessor for DSKBLE.BLEPeripheral();
    v5 = sub_1000C69C4(&qword_1003460B8, 255, (uint64_t (*)(uint64_t))type metadata accessor for DSKBLE.BLEPeripheral, (uint64_t)&unk_1002898C0);
    result = Set.Iterator.init(_cocoa:)(v29, v3, v4, v5);
    v1 = v29[0];
    v27 = v29[1];
    v7 = v29[2];
    v8 = v29[3];
    v9 = v29[4];
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v27 = a1 + 56;
    v7 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v9 = v12 & *(_QWORD *)(a1 + 56);
    result = (_QWORD *)swift_bridgeObjectRetain(a1);
    v8 = 0;
  }
  v26 = (unint64_t)(v7 + 64) >> 6;
  while (1)
  {
    v13 = v8;
    if (v1 < 0)
    {
      v16 = __CocoaSet.Iterator.next()(result);
      v17 = v16;
      if (!v16)
        goto LABEL_39;
      v28 = v16;
      v18 = type metadata accessor for DSKBLE.BLEPeripheral();
      swift_unknownObjectRetain(v17);
      swift_dynamicCast(&v30, &v28, (char *)&type metadata for Swift.AnyObject + 8, v18, 7);
      v19 = v30;
      swift_unknownObjectRelease(v17);
      if (!v19)
        goto LABEL_38;
      goto LABEL_35;
    }
    if (!v9)
      break;
    v14 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v15 = v14 | (v8 << 6);
LABEL_34:
    v19 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v15);
    swift_retain(v19);
    if (!v19)
      goto LABEL_38;
LABEL_35:
    sub_10006C25C(0, &qword_100348B80, NSObject_ptr);
    v23 = *(id *)(v19 + 24);
    v24 = static NSObject.== infix(_:_:)(v23);

    if ((v24 & 1) != 0)
    {
      v25 = *(unsigned __int8 *)(v19 + 32);
      result = (_QWORD *)swift_release(v19);
      if (v25)
      {
        v17 = 1;
        goto LABEL_39;
      }
    }
    else
    {
      result = (_QWORD *)swift_release(v19);
    }
  }
  v20 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v20 >= v26)
      goto LABEL_38;
    v21 = *(_QWORD *)(v27 + 8 * v20);
    ++v8;
    if (!v21)
    {
      v8 = v13 + 2;
      if (v13 + 2 >= v26)
        goto LABEL_38;
      v21 = *(_QWORD *)(v27 + 8 * v8);
      if (!v21)
      {
        v8 = v13 + 3;
        if (v13 + 3 >= v26)
          goto LABEL_38;
        v21 = *(_QWORD *)(v27 + 8 * v8);
        if (!v21)
        {
          v8 = v13 + 4;
          if (v13 + 4 >= v26)
            goto LABEL_38;
          v21 = *(_QWORD *)(v27 + 8 * v8);
          if (!v21)
          {
            v8 = v13 + 5;
            if (v13 + 5 >= v26)
              goto LABEL_38;
            v21 = *(_QWORD *)(v27 + 8 * v8);
            if (!v21)
            {
              v22 = v13 + 6;
              while (v26 != v22)
              {
                v21 = *(_QWORD *)(v27 + 8 * v22++);
                if (v21)
                {
                  v8 = v22 - 1;
                  goto LABEL_33;
                }
              }
LABEL_38:
              v17 = 0;
LABEL_39:
              sub_10007EF58(v1);
              return (_QWORD *)v17;
            }
          }
        }
      }
    }
LABEL_33:
    v9 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v8 << 6);
    goto LABEL_34;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000DD0EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return _swiftEmptyArrayStorage;
  v16 = swift_bridgeObjectRetain(a1);
  v4 = (uint64_t *)(v16 + 40);
  v5 = _swiftEmptyArrayStorage;
  do
  {
    v6 = *v4;
    if (*(_QWORD *)(a2 + 16))
    {
      v7 = *(v4 - 1);
      swift_bridgeObjectRetain_n(*v4, 2);
      v8 = sub_100187ED0(v7, v6);
      if ((v9 & 1) != 0)
      {
        sub_100096CB0(*(_QWORD *)(a2 + 56) + 32 * v8, (uint64_t)&v20);
      }
      else
      {
        v20 = 0u;
        v21 = 0u;
      }
      swift_bridgeObjectRelease(v6);
      if (*((_QWORD *)&v21 + 1))
      {
        sub_10006C2B4(&v20, &v17);
        *(_QWORD *)&v22 = v7;
        *((_QWORD *)&v22 + 1) = v6;
        sub_10006C2B4(&v17, &v23);
        if (!*((_QWORD *)&v22 + 1))
          goto LABEL_3;
        goto LABEL_14;
      }
    }
    else
    {
      v20 = 0u;
      v21 = 0u;
      swift_bridgeObjectRetain(v6);
    }
    sub_100096700((uint64_t)&v20, (uint64_t *)&unk_100346130);
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    swift_bridgeObjectRelease(v6);
    if (!*((_QWORD *)&v22 + 1))
    {
LABEL_3:
      sub_100096700((uint64_t)&v22, &qword_100346240);
      goto LABEL_4;
    }
LABEL_14:
    v17 = v22;
    v18 = v23;
    v19 = v24;
    if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
      v5 = sub_1001C4C0C(0, v5[2] + 1, 1, v5);
    v11 = v5[2];
    v10 = v5[3];
    if (v11 >= v10 >> 1)
      v5 = sub_1001C4C0C((_QWORD *)(v10 > 1), v11 + 1, 1, v5);
    v5[2] = v11 + 1;
    v12 = &v5[6 * v11];
    v13 = v17;
    v14 = v19;
    v12[3] = v18;
    v12[4] = v14;
    v12[2] = v13;
LABEL_4:
    v4 += 2;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease(v16);
  return v5;
}

uint64_t sub_1000DD2E4()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  char v9;
  unint64_t v10;

  v0 = (void *)_convertErrorToNSError(_:)();
  v1 = objc_msgSend(v0, "domain");
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v4 = v3;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBErrorDomain);
  if (v2 == v5 && v4 == v6)
  {
    swift_bridgeObjectRelease_n(v4, 2);
  }
  else
  {
    v8 = v6;
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, v4, v5, v6, 0);
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(v8);
    if ((v9 & 1) == 0)
    {

      return 0;
    }
  }
  v10 = (unint64_t)objc_msgSend(v0, "code");

  if (v10 < 0xF)
    return (0x6104u >> v10) & 1;
  return 0;
}

Swift::Int sub_1000DD3CC(Swift::Int result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t *v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = (unint64_t *)result;
  v7 = 0;
  v8 = 0;
  v9 = a3 + 56;
  v10 = 1 << *(_BYTE *)(a3 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(a3 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (v12)
  {
    v14 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    v15 = v14 | (v8 << 6);
LABEL_20:
    v19 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v15);
    result = *(_QWORD *)(v19 + 16);
    v20 = *(_QWORD *)(v19 + 24);
    v21 = *(_QWORD *)(a4 + 16);
    v22 = *(_QWORD *)(a4 + 24);
    if (result != v21 || v20 != v22)
    {
      result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v20, v21, v22, 0);
      if ((result & 1) == 0)
      {
        *(unint64_t *)((char *)v6 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
        if (__OFADD__(v7++, 1))
        {
          __break(1u);
LABEL_28:
          swift_retain(a3);
          return sub_100194BA8(v6, a2, v7, a3);
        }
      }
    }
  }
  v16 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v16 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v9 + 8 * v16);
  ++v8;
  if (v17)
    goto LABEL_19;
  v8 = v16 + 1;
  if (v16 + 1 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v9 + 8 * v8);
  if (v17)
    goto LABEL_19;
  v8 = v16 + 2;
  if (v16 + 2 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v9 + 8 * v8);
  if (v17)
  {
LABEL_19:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v8 << 6);
    goto LABEL_20;
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v9 + 8 * v18);
  if (v17)
  {
    v8 = v18;
    goto LABEL_19;
  }
  while (1)
  {
    v8 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v8 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v9 + 8 * v8);
    ++v18;
    if (v17)
      goto LABEL_19;
  }
LABEL_30:
  __break(1u);
  return result;
}

Swift::Int sub_1000DD574(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v6;
  unsigned int v7;
  unint64_t v8;
  size_t v9;
  uint64_t isStackAllocationSafe;
  uint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;

  v3 = v2;
  v6 = *(_BYTE *)(a1 + 32);
  v7 = v6 & 0x3F;
  v8 = (unint64_t)((1 << v6) + 63) >> 6;
  v9 = 8 * v8;
  isStackAllocationSafe = swift_retain_n(a2, 2);
  if (v7 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(v9, 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe, v11);
    bzero((char *)&v16 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    swift_retain(a2);
    v12 = sub_1000DD3CC((Swift::Int)&v16 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v8, a1, a2);
    swift_release(a1);
    v13 = swift_release(a2);
    if (v3)
      swift_willThrow(v13);
    swift_release_n(a2, 2);
  }
  else
  {
    v14 = (void *)swift_slowAlloc(v9, -1);
    bzero(v14, v9);
    swift_retain(a2);
    v12 = sub_1000DD3CC((Swift::Int)v14, v8, a1, a2);
    swift_release(a1);
    swift_release(a2);
    swift_slowDealloc(v14, -1, -1);
    swift_release_n(a2, 2);
  }
  return v12;
}

uint64_t sub_1000DD738(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[9];
  uint64_t v27;
  _QWORD *v28;

  if ((a1 & 0xC000000000000001) == 0)
    return sub_1000DD574(a1, (uint64_t)a2);
  v3 = *a2;
  v4 = &_swiftEmptySetSingleton;
  v28 = &_swiftEmptySetSingleton;
  if (a1 < 0)
    v5 = a1;
  else
    v5 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_retain(a2);
  v6 = __CocoaSet.makeIterator()(v5);
  v7 = __CocoaSet.Iterator.next()(v6);
  if (v7)
  {
    v8 = &_swiftEmptySetSingleton;
    do
    {
      v26[0] = v7;
      swift_dynamicCast(&v27, v26, (char *)&type metadata for Swift.AnyObject + 8, v3, 7);
      v10 = v27;
      v12 = *(_QWORD *)(v27 + 16);
      v11 = *(_QWORD *)(v27 + 24);
      v13 = a2[2];
      v14 = a2[3];
      v15 = v12 == v13 && v11 == v14;
      if (v15
        || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)(v27 + 16), *(_QWORD *)(v27 + 24), v13, v14, 0) & 1) != 0)
      {
        result = swift_release(v10);
      }
      else
      {
        v16 = v8[2];
        if (v8[3] <= v16)
        {
          sub_1000CB358(v16 + 1);
          v8 = v28;
        }
        Hasher.init(_seed:)(v26);
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v12, v11);
        swift_bridgeObjectRelease(v11);
        result = Hasher._finalize()();
        v17 = (char *)(v8 + 7);
        v18 = -1 << *((_BYTE *)v8 + 32);
        v19 = result & ~v18;
        v20 = v19 >> 6;
        if (((-1 << v19) & ~v8[(v19 >> 6) + 7]) != 0)
        {
          v21 = __clz(__rbit64((-1 << v19) & ~v8[(v19 >> 6) + 7])) | v19 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v22 = 0;
          v23 = (unint64_t)(63 - v18) >> 6;
          do
          {
            if (++v20 == v23 && (v22 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v24 = v20 == v23;
            if (v20 == v23)
              v20 = 0;
            v22 |= v24;
            v25 = *(_QWORD *)&v17[8 * v20];
          }
          while (v25 == -1);
          v21 = __clz(__rbit64(~v25)) + (v20 << 6);
        }
        *(_QWORD *)&v17[(v21 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v21;
        *(_QWORD *)(v8[6] + 8 * v21) = v10;
        ++v8[2];
      }
      v7 = __CocoaSet.Iterator.next()(result);
    }
    while (v7);
    v4 = v28;
  }
  swift_release(a2);
  swift_release(v6);
  return (uint64_t)v4;
}

void sub_1000DD984(void *a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  char v26;
  char v27;
  NSObject *v28;
  uint64_t v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  id v33;
  id v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  os_log_type_t v39;
  _BOOL4 v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  NSObject *v53;
  uint64_t *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  void *v64;
  NSObject *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  NSString v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v83;
  void (*v84)(__int128 *, _QWORD);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  unint64_t v92;
  NSObject *v93;
  void *v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  id v100;
  NSObject *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  os_log_type_t v105;
  uint8_t *v106;
  _QWORD *v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  NSObject *v111;
  uint64_t v112;
  NSObject *v113;
  uint64_t v114;
  id v115;
  id v116;
  id v117;
  id v118;
  id v119;
  NSObject *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  os_log_type_t v124;
  uint64_t v125;
  id v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  id v133;
  uint64_t isa;
  uint64_t v135;
  NSObject *v136;
  NSObject *v137;
  uint64_t v138;
  int v139;
  uint8_t *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unsigned __int8 v147;
  _QWORD *v148;
  NSObject *v149;
  uint64_t v150;
  os_log_type_t v151;
  uint8_t *v152;
  Class v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  void *v158;
  char v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char v164;
  char v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  unint64_t v172;
  unint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  void (*v178)(__int128 *, _QWORD);
  uint64_t v179;
  uint8_t *v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  id v184;
  os_log_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  NSObject *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  os_log_type_t v194;
  _BOOL4 v195;
  uint8_t *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  unint64_t v201;
  uint64_t v202;
  NSObject *v203;
  uint64_t v204;
  os_log_type_t v205;
  uint64_t v206;
  uint64_t v207;
  Class v208;
  uint64_t v209;
  uint64_t v210;
  NSObject *v211;
  uint64_t v212;
  unint64_t v213;
  unint64_t v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  uint64_t v218;
  id v219;
  id v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  id v225;
  os_log_t v226;
  uint64_t v227;
  _QWORD *v228;
  Class v229;
  void (*v230)(Class, Class, uint64_t, uint64_t);
  Class v231;
  Class v232;
  Class v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  NSObject *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  os_log_type_t v241;
  uint8_t *v242;
  NSObject *v243;
  uint64_t *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  Class v249;
  uint64_t v250;
  _QWORD *v251;
  uint64_t v252;
  NSString v253;
  Class v254;
  Class v255;
  id v256;
  NSObject *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  NSObject *v261;
  uint64_t v262;
  os_log_type_t v263;
  uint8_t *v264;
  _QWORD *v265;
  char *v266;
  id v267;
  uint64_t *v268;
  id v269;
  uint64_t v270;
  uint64_t v271;
  uint8_t *v272;
  id v273;
  os_log_t v274;
  id v275;
  uint64_t v276;
  NSObject *v277;
  _QWORD *v278;
  __int128 v279;
  __int128 v280;
  uint64_t v281;
  uint64_t v282;
  unsigned __int8 v283;
  _QWORD *v284;
  uint64_t v285;
  _BYTE v286[24];
  char v287[32];

  v4 = v3;
  v275 = a3;
  v7 = type metadata accessor for UUID(0);
  v8 = *(id *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)&v265 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchPredicate(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v16 = (_QWORD **)((char *)&v265 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v17 = qword_100354EE8;
  *v16 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v13 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v12);
  v18 = (id)v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)(v16);
  v19 = (*(uint64_t (**)(_QWORD *, uint64_t))(v13 + 8))(v16, v12);
  if ((v17 & 1) == 0)
  {
    __break(1u);
LABEL_123:
    if (v4 < 0)
      v258 = v4;
    else
      v258 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v259 = _CocoaArrayWrapper.endIndex.getter(v258);
    swift_bridgeObjectRelease(v4);
    if (v259)
      goto LABEL_37;
LABEL_127:
    v260 = swift_bridgeObjectRelease(v4);
    v261 = Logger.logObject.getter(v260);
    v263 = static os_log_type_t.error.getter(v261, v262);
    if (os_log_type_enabled(v261, v263))
    {
      v264 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v264 = 0;
      _os_log_impl((void *)&_mh_execute_header, v261, v263, "Discovered a peripheral but there's no scan request", v264, 2u);
      swift_slowDealloc(v264, -1, -1);
    }

    goto LABEL_130;
  }
  v20 = *(void **)(v4 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager);
  if (!v20)
  {
    v28 = Logger.logObject.getter(v19);
    v30 = static os_log_type_t.error.getter(v28, v29);
    if (os_log_type_enabled(v28, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v30, "Not running", v31, 2u);
      swift_slowDealloc(v31, -1, -1);
    }
    goto LABEL_9;
  }
  v276 = a2;
  v21 = (_QWORD *)(v4 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals);
  swift_beginAccess(v4 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals, v287, 0, 0);
  v22 = *v21;
  v23 = a1;
  v24 = v20;
  v25 = swift_bridgeObjectRetain(v22);
  sub_1000DCAC4(v25);
  v27 = v26;
  v274 = 0;
  swift_bridgeObjectRelease(v22);

  if ((v27 & 1) != 0)
  {

    return;
  }
  v270 = (uint64_t)v8;
  v271 = v7;
  v273 = v24;
  v32 = v4 + OBJC_IVAR____TtC10seserviced6DSKBLE_logger;
  v33 = v23;
  v13 = v276;
  swift_bridgeObjectRetain_n(v276, 2);
  v34 = v33;
  v272 = (uint8_t *)v32;
  v35 = Logger.logObject.getter(v34);
  v39 = static os_log_type_t.info.getter(v35, v36, v37, v38);
  v40 = os_log_type_enabled(v35, v39);
  v266 = v11;
  v265 = v21;
  v267 = v34;
  if (v40)
  {
    v41 = swift_slowAlloc(22, -1);
    v277 = swift_slowAlloc(64, -1);
    *(_QWORD *)&v279 = v277;
    *(_DWORD *)v41 = 136315394;
    v269 = (id)(v41 + 4);
    v42 = objc_msgSend(v34, "identifier");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v43 = sub_1000C69C4((unint64_t *)&qword_100344CC8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v44 = v271;
    v45 = dispatch thunk of CustomStringConvertible.description.getter(v271, v43);
    v47 = v46;
    (*(void (**)(char *, uint64_t))(v270 + 8))(v11, v44);
    v285 = sub_1001C56EC(v45, v47, (uint64_t *)&v279);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v285, v286, v269, v41 + 12);

    swift_bridgeObjectRelease(v47);
    *(_WORD *)(v41 + 12) = 2080;
    swift_bridgeObjectRetain(v13);
    v48 = v4;
    v49 = Dictionary.description.getter(v13, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
    v51 = v50;
    swift_bridgeObjectRelease(v13);
    v52 = v49;
    v4 = v48;
    v285 = sub_1001C56EC(v52, v51, (uint64_t *)&v279);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v285, v286, v41 + 14, v41 + 22);
    swift_bridgeObjectRelease_n(v13, 2);
    swift_bridgeObjectRelease(v51);
    _os_log_impl((void *)&_mh_execute_header, v35, v39, "Discovered new peripheral %s with advertisement data %s", (uint8_t *)v41, 0x16u);
    v53 = v277;
    swift_arrayDestroy(v277, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v53, -1, -1);
    swift_slowDealloc(v41, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v13, 2);

  }
  v269 = (id)v4;
  v54 = (uint64_t *)(v4 + OBJC_IVAR____TtC10seserviced6DSKBLE_scanRequests);
  swift_beginAccess(v4 + OBJC_IVAR____TtC10seserviced6DSKBLE_scanRequests, &v285, 1, 0);
  v268 = v54;
  v55 = *v54;
  v56 = *v54 & 0xC000000000000001;
  if (v56)
  {
    v57 = v55 & 0xFFFFFFFFFFFFFF8;
    if (v55 < 0)
      v58 = *v54;
    else
      v58 = v55 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v55);
    v59 = __CocoaSet.count.getter(v58);
    if (!v59)
      goto LABEL_34;
    v60 = v59;
    v284 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v59);
    v281 = __CocoaSet.startIndex.getter(v58);
    v282 = v61;
    v283 = 1;
    if ((v60 & 0x8000000000000000) == 0)
      goto LABEL_22;
    __break(1u);
  }
  v60 = *(_QWORD *)(v55 + 16);
  swift_bridgeObjectRetain(v55);
  if (!v60)
  {
LABEL_34:
    swift_bridgeObjectRelease(v55);
    v4 = (uint64_t)_swiftEmptyArrayStorage;
    goto LABEL_35;
  }
  v284 = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(v60);
  v281 = sub_100196CE0(v55);
  v282 = v62;
  v283 = v63 & 1;
  v57 = v55 & 0xFFFFFFFFFFFFFF8;
LABEL_22:
  v64 = (void *)objc_opt_self(CBUUID);
  if (v55 < 0)
    v65 = v55;
  else
    v65 = v57;
  v277 = v65;
  do
  {
    while (1)
    {
      v72 = v281;
      v71 = v282;
      v73 = v283;
      v74 = sub_100195FCC(v281, v282, v283, v55);
      v75 = *(_QWORD *)(v74 + 24);
      swift_bridgeObjectRetain(v75);
      v76 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v75);
      v77 = objc_msgSend(v64, "UUIDWithString:", v76);
      swift_release(v74);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v78);
      v79 = v284[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v79);
      v80 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v79, v77);
      specialized ContiguousArray._endMutation()(v80);
      if (v56)
        break;
      v66 = sub_100195EE4(v72, v71, v73, v55);
      v68 = v67;
      v70 = v69;
      sub_1000960E8(v72, v71, v73);
      v281 = v66;
      v282 = v68;
      v283 = v70 & 1;
      if (!--v60)
        goto LABEL_33;
    }
    if ((v73 & 1) == 0)
      goto LABEL_132;
    v81 = __CocoaSet.Index.handleBitPattern.getter(v72, v71);
    if (v81)
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v81);
    else
      isUniquelyReferenced_nonNull_native = 1;
    v83 = sub_100063D3C(&qword_100346038);
    v84 = (void (*)(__int128 *, _QWORD))Set.Index._asCocoa.modify(&v279, v83);
    __CocoaSet.formIndex(after:isUnique:)(v85, isUniquelyReferenced_nonNull_native, v277);
    v84(&v279, 0);
    --v60;
  }
  while (v60);
LABEL_33:
  sub_1000960E8(v281, v282, v283);
  v4 = (uint64_t)v284;
  swift_bridgeObjectRelease(v55);
  v13 = v276;
LABEL_35:
  v8 = v273;
  if ((unint64_t)v4 >> 62)
    goto LABEL_123;
  if (!*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_127;
LABEL_37:
  v86 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBAdvertisementDataServiceUUIDsKey);
  v88 = v87;
  if (*(_QWORD *)(v13 + 16) && (v89 = sub_100187ED0(v86, v87), (v90 & 1) != 0))
  {
    sub_100096CB0(*(_QWORD *)(v13 + 56) + 32 * v89, (uint64_t)&v279);
  }
  else
  {
    v279 = 0u;
    v280 = 0u;
  }
  swift_bridgeObjectRelease(v88);
  if (*((_QWORD *)&v280 + 1))
  {
    v91 = sub_100063D3C((uint64_t *)&unk_100346230);
    if ((swift_dynamicCast(&v281, &v279, (char *)&type metadata for Any + 8, v91, 6) & 1) != 0)
    {
      v92 = v281;
      swift_bridgeObjectRetain(v4);
      v93 = v274;
      v94 = sub_1000DA52C(v92, v4);
      swift_bridgeObjectRelease(v92);
      swift_bridgeObjectRelease(v4);
      if (v94)
      {
        swift_bridgeObjectRelease(v4);
        goto LABEL_50;
      }
      v274 = v93;
      v13 = v276;
      if (!*(_QWORD *)(v276 + 16))
        goto LABEL_58;
      goto LABEL_47;
    }
  }
  else
  {
    sub_100096700((uint64_t)&v279, (uint64_t *)&unk_100346130);
  }
  if (!*(_QWORD *)(v13 + 16))
  {
LABEL_58:
    swift_bridgeObjectRelease(v4);
    goto LABEL_59;
  }
LABEL_47:
  v95 = sub_100187ED0(0xD000000000000015, 0x80000001002BBC40);
  if ((v96 & 1) == 0)
    goto LABEL_58;
  sub_100096CB0(*(_QWORD *)(v13 + 56) + 32 * v95, (uint64_t)&v279);
  v97 = sub_100063D3C(&qword_100346228);
  if ((swift_dynamicCast(&v281, &v279, (char *)&type metadata for Any + 8, v97, 6) & 1) == 0)
    goto LABEL_58;
  v98 = v281;
  swift_bridgeObjectRetain(v4);
  v93 = v274;
  sub_1000DA7D8(v98, v4);
  v94 = v99;
  swift_bridgeObjectRelease(v98);
  swift_bridgeObjectRelease_n(v4, 2);
  if (!v94)
  {
LABEL_59:
    v77 = v269;
    v137 = Logger.logObject.getter(v77);
    v139 = static os_log_type_t.error.getter(v137, v138);
    if (os_log_type_enabled(v137, (os_log_type_t)v139))
    {
      v274 = v137;
      v275 = v77;
      v140 = (uint8_t *)swift_slowAlloc(12, -1);
      v270 = swift_slowAlloc(32, -1);
      v284 = (_QWORD *)v270;
      v272 = v140;
      *(_DWORD *)v140 = 136315138;
      v141 = *v268;
      v277 = (*v268 & 0xC000000000000001);
      if ((v141 & 0xC000000000000001) != 0)
      {
        if (v141 < 0)
          v142 = v141;
        else
          v142 = v141 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v141);
        v143 = __CocoaSet.count.getter(v142);
      }
      else
      {
        v143 = *(_QWORD *)(v141 + 16);
        swift_bridgeObjectRetain(v141);
      }
      LODWORD(v271) = v139;
      if (v143)
      {
        v278 = _swiftEmptyArrayStorage;
        sub_100192924(0, v143 & ~(v143 >> 63), 0);
        if (v277)
        {
          if (v141 < 0)
            v144 = v141;
          else
            v144 = v141 & 0xFFFFFFFFFFFFFF8;
          v145 = __CocoaSet.startIndex.getter(v144);
          v147 = 1;
        }
        else
        {
          v145 = sub_100196CE0(v141);
          v147 = v159 & 1;
        }
        v281 = v145;
        v282 = v146;
        v283 = v147;
        if (v143 < 0)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:

          __break(1u);
          goto LABEL_134;
        }
        v160 = v141 & 0xFFFFFFFFFFFFFF8;
        if (v141 < 0)
          v160 = v141;
        v276 = v160;
        do
        {
          while (1)
          {
            v166 = v281;
            v167 = v282;
            v77 = (id)v283;
            v168 = sub_100195FCC(v281, v282, v283, v141);
            v170 = *(_QWORD *)(v168 + 16);
            v169 = *(_QWORD *)(v168 + 24);
            swift_bridgeObjectRetain(v169);
            swift_release(v168);
            v171 = v278;
            if ((swift_isUniquelyReferenced_nonNull_native(v278) & 1) == 0)
            {
              sub_100192924(0, v171[2] + 1, 1);
              v171 = v278;
            }
            v173 = v171[2];
            v172 = v171[3];
            if (v173 >= v172 >> 1)
            {
              sub_100192924(v172 > 1, v173 + 1, 1);
              v171 = v278;
            }
            v171[2] = v173 + 1;
            v174 = &v171[2 * v173];
            v174[4] = v170;
            v174[5] = v169;
            if (v277)
              break;
            v161 = sub_100195EE4(v166, v167, v77, v141);
            v163 = v162;
            v165 = v164;
            sub_1000960E8(v166, v167, (char)v77);
            v281 = v161;
            v282 = v163;
            v283 = v165 & 1;
            if (!--v143)
              goto LABEL_94;
          }
          if ((v77 & 1) == 0)
            goto LABEL_133;
          v175 = __CocoaSet.Index.handleBitPattern.getter(v166, v167);
          if (v175)
            v176 = swift_isUniquelyReferenced_nonNull_native(v175);
          else
            v176 = 1;
          v177 = sub_100063D3C(&qword_100346038);
          v178 = (void (*)(__int128 *, _QWORD))Set.Index._asCocoa.modify(&v279, v177);
          __CocoaSet.formIndex(after:isUnique:)(v179, v176, v276);
          v178(&v279, 0);
          --v143;
        }
        while (v143);
LABEL_94:
        sub_1000960E8(v281, v282, v283);
        swift_bridgeObjectRelease(v141);
        v148 = v278;
      }
      else
      {
        swift_bridgeObjectRelease(v141);
        v148 = _swiftEmptyArrayStorage;
      }
      v180 = v272;
      v181 = Array.description.getter(v148, &type metadata for String);
      v183 = v182;
      swift_bridgeObjectRelease(v148);
      *(_QWORD *)&v279 = sub_1001C56EC(v181, v183, (uint64_t *)&v284);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v279, (char *)&v279 + 8, v180 + 4, v180 + 12);
      v184 = v275;

      swift_bridgeObjectRelease(v183);
      v185 = v274;
      _os_log_impl((void *)&_mh_execute_header, v274, (os_log_type_t)v271, "Discovered a peripheral which does not include any service we're scanning for %s", v180, 0xCu);
      v186 = v270;
      swift_arrayDestroy(v270, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v186, -1, -1);
      swift_slowDealloc(v180, -1, -1);

      return;
    }

LABEL_130:
    return;
  }
LABEL_50:
  v274 = v93;
  v100 = v94;
  v101 = Logger.logObject.getter(v100);
  v105 = static os_log_type_t.info.getter(v101, v102, v103, v104);
  if (os_log_type_enabled(v101, v105))
  {
    v106 = (uint8_t *)swift_slowAlloc(12, -1);
    v107 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v106 = 138412290;
    *(_QWORD *)&v279 = v100;
    v108 = v100;
    v8 = v273;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v279, (char *)&v279 + 8, v106 + 4, v106 + 12);
    *v107 = v94;

    _os_log_impl((void *)&_mh_execute_header, v101, v105, "Discovered service %@", v106, 0xCu);
    v109 = sub_100063D3C((uint64_t *)&unk_100346090);
    swift_arrayDestroy(v107, 1, v109);
    swift_slowDealloc(v107, -1, -1);
    swift_slowDealloc(v106, -1, -1);
  }
  else
  {

  }
  v110 = *v268;
  v111 = v100;
  v112 = swift_bridgeObjectRetain(v110);
  v77 = v274;
  v113 = sub_1000DAB08(v112);
  swift_bridgeObjectRelease(v110);

  if (!v113)
  {
    v149 = Logger.logObject.getter(v114);
    v151 = static os_log_type_t.error.getter(v149, v150);
    if (os_log_type_enabled(v149, v151))
    {
      v152 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v152 = 0;
      _os_log_impl((void *)&_mh_execute_header, v149, v151, "Failed to retrieve scan request", v152, 2u);
      swift_slowDealloc(v152, -1, -1);

LABEL_111:
      return;
    }

LABEL_110:
    goto LABEL_111;
  }
  v115 = v275;
  if ((uint64_t)objc_msgSend(v275, "integerValue") < (uint64_t)v113[4].isa)
  {
    v116 = v267;
    swift_retain_n(v113, 2);
    v117 = v115;
    v118 = v116;
    v119 = v117;
    v120 = Logger.logObject.getter(v119);
    v124 = static os_log_type_t.info.getter(v120, v121, v122, v123);
    if (os_log_type_enabled(v120, v124))
    {
      v125 = swift_slowAlloc(32, -1);
      v276 = swift_slowAlloc(32, -1);
      v277 = v111;
      *(_QWORD *)&v279 = v276;
      *(_DWORD *)v125 = 136315650;
      v275 = (id)(v125 + 4);
      v126 = objc_msgSend(v118, "identifier");
      v127 = v266;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      v128 = sub_1000C69C4((unint64_t *)&qword_100344CC8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v129 = v271;
      v130 = dispatch thunk of CustomStringConvertible.description.getter(v271, v128);
      v132 = v131;
      (*(void (**)(char *, uint64_t))(v270 + 8))(v127, v129);
      v281 = sub_1001C56EC(v130, v132, (uint64_t *)&v279);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v281, &v282, v275, v125 + 12);

      swift_bridgeObjectRelease(v132);
      *(_WORD *)(v125 + 12) = 2048;
      v133 = objc_msgSend(v119, "integerValue");

      v281 = (uint64_t)v133;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v281, &v282, v125 + 14, v125 + 22);

      *(_WORD *)(v125 + 22) = 2048;
      isa = (uint64_t)v113[4].isa;
      swift_release(v113);
      v281 = isa;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v281, &v282, v125 + 24, v125 + 32);
      swift_release(v113);
      _os_log_impl((void *)&_mh_execute_header, v120, v124, "Ignoring %s due to RSSI %ld minimum %ld", (uint8_t *)v125, 0x20u);
      v135 = v276;
      swift_arrayDestroy(v276, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v135, -1, -1);
      swift_slowDealloc(v125, -1, -1);
      v136 = v277;

      swift_release(v113);
    }
    else
    {

      swift_release_n(v113, 3);
    }
    return;
  }
  v153 = v113[6].isa;
  v154 = v276;
  swift_bridgeObjectRetain(v276);
  v155 = swift_bridgeObjectRetain(v153);
  v156 = sub_1000DD0EC(v155, v154);
  swift_bridgeObjectRelease(v153);
  swift_bridgeObjectRelease(v154);
  v157 = v156[2];
  if (v157)
  {
    sub_100063D3C(&qword_1003461B0);
    v158 = (void *)static _DictionaryStorage.allocate(capacity:)(v157);
  }
  else
  {
    v158 = &_swiftEmptyDictionarySingleton;
  }
  *(_QWORD *)&v279 = v158;
  v187 = swift_bridgeObjectRetain(v156);
  sub_1000C6A34(v187, 1, &v279);
  if (v77)
  {
LABEL_134:
    swift_unexpectedError(v77, "Swift/Dictionary.swift", 22, 1, 489);
    __break(1u);
    return;
  }
  swift_bridgeObjectRelease(v156);
  v188 = v279;
  if (*((_QWORD *)v113[6].isa + 2) != *(_QWORD *)(v279 + 16))
  {
    swift_retain_n(v113, 2);
    v202 = swift_retain(v188);
    v203 = Logger.logObject.getter(v202);
    v205 = static os_log_type_t.error.getter(v203, v204);
    if (os_log_type_enabled(v203, v205))
    {
      v206 = swift_slowAlloc(22, -1);
      v207 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v279 = v207;
      *(_DWORD *)v206 = 136315394;
      v277 = v111;
      v208 = v113[6].isa;
      v209 = swift_bridgeObjectRetain(v208);
      v210 = Array.description.getter(v209, &type metadata for String);
      v211 = v113;
      v274 = v113;
      v212 = v210;
      v214 = v213;
      swift_bridgeObjectRelease(v208);
      v281 = sub_1001C56EC(v212, v214, (uint64_t *)&v279);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v281, &v282, v206 + 4, v206 + 12);
      swift_release_n(v211, 2);
      swift_bridgeObjectRelease(v214);
      *(_WORD *)(v206 + 12) = 2080;
      swift_retain(v188);
      v215 = Dictionary.Keys.description.getter(v188, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
      v217 = v216;
      swift_release(v188);
      v281 = sub_1001C56EC(v215, v217, (uint64_t *)&v279);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v281, &v282, v206 + 14, v206 + 22);
      swift_release_n(v188, 2);
      swift_bridgeObjectRelease(v217);
      _os_log_impl((void *)&_mh_execute_header, v203, v205, "Missing advertisements requested %s found %s", (uint8_t *)v206, 0x16u);
      swift_arrayDestroy(v207, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v207, -1, -1);
      swift_slowDealloc(v206, -1, -1);
      v28 = v277;

      swift_release(v274);
LABEL_9:

      return;
    }

    swift_release_n(v188, 2);
    swift_release_n(v113, 3);
    goto LABEL_110;
  }
  v276 = 0;
  v274 = v113;
  v189 = swift_retain_n(v279, 2);
  v190 = Logger.logObject.getter(v189);
  v194 = static os_log_type_t.info.getter(v190, v191, v192, v193);
  v195 = os_log_type_enabled(v190, v194);
  v277 = v111;
  if (v195)
  {
    v196 = (uint8_t *)swift_slowAlloc(12, -1);
    v197 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v279 = v197;
    *(_DWORD *)v196 = 136315138;
    v198 = swift_retain(v188);
    v199 = Dictionary.description.getter(v198, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
    v201 = v200;
    swift_release(v188);
    v281 = sub_1001C56EC(v199, v201, (uint64_t *)&v279);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v281, &v282, v196 + 4, v196 + 12);
    swift_release_n(v188, 2);
    swift_bridgeObjectRelease(v201);
    _os_log_impl((void *)&_mh_execute_header, v190, v194, "Found advertisements %s", v196, 0xCu);
    swift_arrayDestroy(v197, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v197, -1, -1);
    swift_slowDealloc(v196, -1, -1);
  }
  else
  {
    swift_release_n(v188, 2);
  }

  v218 = (uint64_t)v266;
  v219 = v267;
  v220 = objc_msgSend(v267, "identifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  v221 = type metadata accessor for Peer(0);
  swift_allocObject(v221, *(unsigned int *)(v221 + 48), *(unsigned __int16 *)(v221 + 52));
  v222 = sub_1001A3188(v218);
  v223 = type metadata accessor for DSKBLE.BLEPeripheral();
  v224 = swift_allocObject(v223, 193, 7);
  v225 = v219;
  v226 = v274;
  swift_retain(v274);
  swift_retain(v222);
  v227 = sub_1000D6C48((uint64_t)v225, 0, (uint64_t)v226, v222, v224);
  v228 = v265;
  swift_beginAccess(v265, &v279, 33, 0);
  swift_retain(v227);
  sub_1000C8C60(&v281, v227);
  swift_endAccess(&v279);
  swift_release(v281);
  v230 = (void (*)(Class, Class, uint64_t, uint64_t))v226[14].isa;
  v229 = v226[15].isa;
  v231 = v226[2].isa;
  v232 = v226[3].isa;
  swift_retain(v229);
  swift_bridgeObjectRetain(v232);
  v233 = v231;
  v234 = v276;
  v230(v233, v232, v188, v222);
  swift_release(v229);
  swift_bridgeObjectRelease(v232);
  swift_release(v188);
  if (v234)
  {
    swift_beginAccess(v228, &v279, 33, 0);
    v235 = sub_1000D38AC(v227);
    swift_endAccess(&v279);
    v236 = swift_release(v235);
    v237 = Logger.logObject.getter(v236);
    v241 = static os_log_type_t.info.getter(v237, v238, v239, v240);
    if (os_log_type_enabled(v237, v241))
    {
      v242 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v242 = 0;
      _os_log_impl((void *)&_mh_execute_header, v237, v241, "Ignoring discovery as requested by client", v242, 2u);
      swift_slowDealloc(v242, -1, -1);

      swift_errorRelease(v234);
      v243 = v277;

      swift_release(v274);
      swift_release(v222);
      swift_release(v227);
    }
    else
    {
      swift_release(v227);
      swift_release(v222);
      swift_release(v274);
      v243 = v277;

      swift_errorRelease(v234);
    }

  }
  else
  {
    if (((uint64_t)v226[5].isa & 1) == 0)
    {
      v244 = v268;
      v245 = *v268;
      swift_retain(v226);
      v246 = swift_bridgeObjectRetain(v245);
      v247 = sub_1000DD738(v246, (uint64_t *)v226);
      swift_release(v226);
      v248 = *v244;
      *v244 = v247;
      swift_bridgeObjectRelease(v248);
      sub_1000B4314();
    }
    v249 = v226[13].isa;
    if (v249)
    {
      v250 = *((_QWORD *)v249 + 2);
      if (v250)
      {
        swift_bridgeObjectRetain_n(v226[13].isa, 2);
        v251 = (_QWORD *)((char *)v249 + 40);
        do
        {
          v252 = *v251;
          swift_bridgeObjectRetain(*v251);
          v253 = String._bridgeToObjectiveC()();
          objc_msgSend(v225, "tag:", v253);
          swift_bridgeObjectRelease(v252);

          v251 += 2;
          --v250;
        }
        while (v250);
        swift_bridgeObjectRelease_n(v249, 2);
        v226 = v274;
      }
    }
    v254 = v226[9].isa;
    swift_bridgeObjectRetain(v254);
    v255 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v254);
    v256 = v273;
    objc_msgSend(v273, "connectPeripheral:options:", v225, v255);
    v257 = v277;

    swift_release(v226);
    swift_release(v222);
    swift_release(v227);

  }
}

void sub_1000DF320(_QWORD *a1)
{
  uint8_t *v1;
  void (**v3)(char *, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  void *v14;
  uint8_t *v15;
  uint64_t v16;
  _QWORD *v17;
  id v18;
  uint64_t v19;
  unsigned __int8 v20;
  uint8_t *v21;
  _QWORD *v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _BOOL4 v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  id v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  NSObject *v39;
  uint64_t v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint8_t *v43;
  id v44;
  uint8_t *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint8_t *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  id v67;
  void *v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  NSObject *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  os_log_type_t v79;
  uint8_t *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  id v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  Swift::String v97;
  void *object;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  _QWORD *v107;
  NSObject *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  os_log_type_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  id v118;
  uint64_t v119;
  uint64_t v120;
  void (**v121)(char *, uint64_t);
  _QWORD *v122;
  void (**v123)(char *, uint64_t);
  id v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  void (**v131)(char *, uint64_t);
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  NSString v144;
  id v145;
  uint64_t v146;
  uint64_t v147;
  Class isa;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  NSObject *v153;
  uint64_t v154;
  os_log_type_t v155;
  uint8_t *v156;
  uint64_t v157;
  id v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  uint8_t *v165;
  uint64_t v166;
  _QWORD *v167;
  void (*v168)(char *, uint64_t);
  uint8_t *v169;
  id v170;
  void (**v171)(char *, uint64_t);
  char *v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD v175[2];
  uint64_t v176;
  _QWORD v177[2];
  uint64_t v178;
  _BYTE v179[16];
  uint64_t v180[3];
  char v181[24];

  v173 = type metadata accessor for UUID(0);
  v3 = *(void (***)(char *, uint64_t))(v173 - 8);
  __chkstk_darwin(v173, v4);
  v172 = (char *)&v165 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (uint8_t **)((char *)&v165 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v11 = qword_100354EE8;
  *v10 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  v12 = (id)v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v10);
  v13 = (*(uint64_t (**)(_QWORD *, uint64_t))(v7 + 8))(v10, v6);
  if ((v11 & 1) == 0)
  {
    __break(1u);
    goto LABEL_44;
  }
  v14 = *(void **)&v1[OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager];
  if (v14)
  {
    v171 = v3;
    v15 = &v1[OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals];
    swift_beginAccess(&v1[OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals], v181, 0, 0);
    v16 = *(_QWORD *)v15;
    v17 = a1;
    v18 = v14;
    v19 = swift_bridgeObjectRetain(v16);
    v20 = sub_1000DCDD0(v19);
    swift_bridgeObjectRelease(v16);

    v169 = v1;
    v21 = &v1[OBJC_IVAR____TtC10seserviced6DSKBLE_logger];
    v22 = v17;
    v23 = Logger.logObject.getter(v22);
    v27 = static os_log_type_t.info.getter(v23, v24, v25, v26);
    v28 = os_log_type_enabled(v23, (os_log_type_t)v27);
    if ((v20 & 1) != 0)
    {
      if (!v28)
      {

        return;
      }
      v29 = v27;
      v30 = (uint8_t *)swift_slowAlloc(12, -1);
      v31 = swift_slowAlloc(32, -1);
      v180[0] = v31;
      v170 = v18;
      *(_DWORD *)v30 = 136315138;
      v169 = v30 + 4;
      v32 = objc_msgSend(v22, "identifier");
      v33 = v172;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      v34 = sub_1000C69C4((unint64_t *)&qword_100344CC8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v35 = v173;
      v36 = dispatch thunk of CustomStringConvertible.description.getter(v173, v34);
      v38 = v37;
      v171[1](v33, v35);
      v178 = sub_1001C56EC(v36, v38, v180);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v178, v179, v169, v30 + 12);

      swift_bridgeObjectRelease(v38);
      _os_log_impl((void *)&_mh_execute_header, v23, v29, "Ignoring unexpected connection to already connected peripheral %s", v30, 0xCu);
      swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v30, -1, -1);

      goto LABEL_42;
    }
    v168 = 0;
    v170 = v18;
    if (v28)
    {
      LODWORD(v167) = v27;
      v43 = (uint8_t *)swift_slowAlloc(12, -1);
      v166 = swift_slowAlloc(32, -1);
      v180[0] = v166;
      *(_DWORD *)v43 = 136315138;
      v165 = v43 + 4;
      v44 = objc_msgSend(v22, "identifier");
      v45 = v21;
      v46 = v172;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      v47 = sub_1000C69C4((unint64_t *)&qword_100344CC8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v48 = v173;
      v49 = dispatch thunk of CustomStringConvertible.description.getter(v173, v47);
      v51 = v50;
      v52 = v46;
      v21 = v45;
      v171[1](v52, v48);
      v178 = sub_1001C56EC(v49, v51, v180);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v178, v179, v165, v43 + 12);

      swift_bridgeObjectRelease(v51);
      _os_log_impl((void *)&_mh_execute_header, v23, (os_log_type_t)v167, "New connection to peripheral %s", v43, 0xCu);
      v53 = v166;
      swift_arrayDestroy(v166, 1, (char *)&type metadata for Any + 8);
      v18 = v170;
      swift_slowDealloc(v53, -1, -1);
      swift_slowDealloc(v43, -1, -1);
    }
    else
    {

    }
    v54 = *(_QWORD *)v15;
    v55 = v22;
    v56 = swift_bridgeObjectRetain(v54);
    v57 = (uint64_t)sub_1000D8CAC(v56);
    swift_bridgeObjectRelease(v54);

    if (v57)
    {
      *(_BYTE *)(v57 + 32) = 1;
      v175[0] = v57;
    }
    else
    {
      v58 = &v169[OBJC_IVAR____TtC10seserviced6DSKBLE_connectionRequests];
      swift_beginAccess(&v169[OBJC_IVAR____TtC10seserviced6DSKBLE_connectionRequests], v180, 0, 0);
      v59 = *(_QWORD *)v58;
      v60 = v55;
      v61 = swift_bridgeObjectRetain(v59);
      v62 = sub_1000DA014(v61, v60);
      swift_bridgeObjectRelease(v59);

      if (!v62)
      {
        v152 = v60;
        v153 = Logger.logObject.getter(v152);
        v155 = static os_log_type_t.error.getter(v153, v154);
        if (os_log_type_enabled(v153, v155))
        {
          v156 = (uint8_t *)swift_slowAlloc(12, -1);
          v157 = swift_slowAlloc(32, -1);
          v178 = v157;
          *(_DWORD *)v156 = 136315138;
          v168 = (void (*)(char *, uint64_t))(v156 + 4);
          v158 = objc_msgSend(v152, "identifier");
          v159 = v172;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          v160 = sub_1000C69C4((unint64_t *)&qword_100344CC8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v161 = v173;
          v162 = dispatch thunk of CustomStringConvertible.description.getter(v173, v160);
          v164 = v163;
          v171[1](v159, v161);
          v176 = sub_1001C56EC(v162, v164, &v178);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, v177, v168, v156 + 12);

          swift_bridgeObjectRelease(v164);
          _os_log_impl((void *)&_mh_execute_header, v153, v155, "Cancelling connection to unknown peripheral %s", v156, 0xCu);
          swift_arrayDestroy(v157, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v157, -1, -1);
          swift_slowDealloc(v156, -1, -1);
        }
        else
        {

        }
        sub_1000B4DF8(v152, 1, 0);
LABEL_42:

        return;
      }
      v63 = v62[2];
      v64 = type metadata accessor for DSKBLE.BLEPeripheral();
      v65 = swift_allocObject(v64, 193, 7);
      v66 = v60;
      swift_retain(v62);
      swift_retain(v63);
      v57 = sub_1000D6D58((uint64_t)v66, 1, (uint64_t)v62, v63, v65);
      v175[0] = v57;
      swift_beginAccess(v15, &v178, 33, 0);
      swift_retain(v57);
      sub_1000C8C60(&v176, v57);
      swift_endAccess(&v178);
      swift_release(v62);
      swift_release(v176);
    }
    swift_retain(v57);
    v67 = objc_msgSend(v18, "advertisingAddress");
    if (v67)
    {
      v68 = v67;
      v69 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v67);
      v71 = v70;

    }
    else
    {
      v69 = 0;
      v71 = 0xF000000000000000;
    }
    v72 = *(_QWORD *)(v57 + 104);
    v73 = *(_QWORD *)(v57 + 112);
    *(_QWORD *)(v57 + 104) = v69;
    *(_QWORD *)(v57 + 112) = v71;
    sub_10006B9B4(v72, v73);
    v74 = swift_retain(v57);
    v75 = Logger.logObject.getter(v74);
    v79 = static os_log_type_t.info.getter(v75, v76, v77, v78);
    if (os_log_type_enabled(v75, v79))
    {
      v168 = (void (*)(char *, uint64_t))v21;
      v80 = (uint8_t *)swift_slowAlloc(12, -1);
      v81 = swift_slowAlloc(32, -1);
      v178 = v81;
      *(_DWORD *)v80 = 136315138;
      v82 = *(_QWORD *)(v57 + 112);
      if (v82 >> 60 == 15)
      {
        v83 = 0xE300000000000000;
        v84 = 7104878;
      }
      else
      {
        v85 = *(_QWORD *)(v57 + 104);
        sub_100063C8C(v85, *(_QWORD *)(v57 + 112));
        sub_1001BD2CC(v85, v82);
        v167 = v55;
        v87 = v86;
        v176 = v86;
        v88 = sub_100063D3C((uint64_t *)&unk_100346060);
        v89 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
        v84 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v88, v89);
        v83 = v90;
        v91 = v87;
        v55 = v167;
        swift_bridgeObjectRelease(v91);
        sub_10006B9B4(v85, v82);
      }
      v176 = sub_1001C56EC(v84, v83, &v178);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, v177, v80 + 4, v80 + 12);
      swift_release_n(v57, 2);
      swift_bridgeObjectRelease(v83);
      _os_log_impl((void *)&_mh_execute_header, v75, v79, "Advertising address %s", v80, 0xCu);
      swift_arrayDestroy(v81, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v81, -1, -1);
      swift_slowDealloc(v80, -1, -1);

    }
    else
    {
      swift_release_n(v57, 2);

    }
    swift_beginAccess(v175, &v178, 0, 0);
    v92 = v175[0];
    v176 = 0;
    v177[0] = 0xE000000000000000;
    swift_retain(v175[0]);
    _StringGuts.grow(_:)(48);
    swift_bridgeObjectRelease(v177[0]);
    v176 = 0xD00000000000002ELL;
    v177[0] = 0x80000001002BBC10;
    v93 = objc_msgSend(v55, "identifier");
    v94 = v172;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v95 = sub_1000C69C4((unint64_t *)&qword_100344CC8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v96 = v173;
    v97._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v173, v95);
    object = v97._object;
    String.append(_:)(v97);
    swift_bridgeObjectRelease(object);
    v168 = v171[1];
    v168(v94, v96);
    v99 = v177[0];
    v100 = String.utf8CString.getter(v176, v177[0]);
    swift_bridgeObjectRelease(v99);
    v101 = os_transaction_create(v100 + 32);
    swift_release(v100);
    v102 = *(_QWORD *)(v92 + 152);
    *(_QWORD *)(v92 + 152) = v101;
    swift_release(v92);
    swift_unknownObjectRelease(v102);
    v103 = v175[0];
    v104 = swift_retain(v175[0]);
    v105 = voucher_copy(v104);
    v106 = *(void **)(v103 + 144);
    *(_QWORD *)(v103 + 144) = v105;
    swift_release(v103);

    v107 = v55;
    swift_retain_n(v103, 2);
    v171 = v107;
    v108 = Logger.logObject.getter(v171);
    v112 = static os_log_type_t.info.getter(v108, v109, v110, v111);
    if (os_log_type_enabled(v108, v112))
    {
      v113 = swift_slowAlloc(22, -1);
      v167 = (_QWORD *)swift_slowAlloc(8, -1);
      v114 = swift_slowAlloc(32, -1);
      v115 = v114;
      v176 = v114;
      *(_DWORD *)v113 = 138412546;
      v116 = *(void **)(v103 + 144);
      if (v116)
      {
        v174 = *(_QWORD *)(v103 + 144);
        v117 = v114;
        v118 = v116;
        v115 = v117;
        v119 = v113 + 4;
        v120 = v113 + 12;
      }
      else
      {
        v120 = v113 + 12;
        v174 = 0;
        v119 = v113 + 4;
      }
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v174, v175, v119, v120);
      v122 = v167;
      *v167 = v116;
      swift_release_n(v103, 2);
      *(_WORD *)(v113 + 12) = 2080;
      v166 = v113 + 14;
      v123 = v171;
      v124 = objc_msgSend(v171, "identifier");
      v125 = v172;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      v126 = v173;
      v127 = dispatch thunk of CustomStringConvertible.description.getter(v173, v95);
      v129 = v128;
      v168(v125, v126);
      v174 = sub_1001C56EC(v127, v129, &v176);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v174, v175, v166, v113 + 22);

      swift_bridgeObjectRelease(v129);
      _os_log_impl((void *)&_mh_execute_header, v108, v112, "Got voucher (BT) %@ for %s", (uint8_t *)v113, 0x16u);
      v130 = sub_100063D3C((uint64_t *)&unk_100346090);
      swift_arrayDestroy(v122, 1, v130);
      swift_slowDealloc(v122, -1, -1);
      swift_arrayDestroy(v115, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v115, -1, -1);
      swift_slowDealloc(v113, -1, -1);
    }
    else
    {
      v121 = v171;

      swift_release_n(v103, 2);
    }

    v131 = v171;
    objc_msgSend(v171, "setDelegate:", v169);
    v132 = sub_100063D3C(&qword_100346220);
    v133 = swift_allocObject(v132, 40, 7);
    *(_OWORD *)(v133 + 16) = xmmword_100288CD0;
    v134 = v175[0];
    v135 = (_QWORD *)(v175[0] + 40);
    swift_beginAccess(v175[0] + 40, &v176, 0, 0);
    v136 = *(_QWORD *)(v134 + 64);
    v137 = *(_QWORD *)(v134 + 72);
    v138 = sub_10006BA78(v135, v136);
    v139 = *(_QWORD *)(v136 - 8);
    __chkstk_darwin(v138, v138);
    v141 = (char *)&v165 - ((v140 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v139 + 16))(v141);
    (*(void (**)(uint64_t, uint64_t))(v137 + 8))(v136, v137);
    v143 = v142;
    (*(void (**)(char *, uint64_t))(v139 + 8))(v141, v136);
    v144 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v143);
    v145 = objc_msgSend((id)objc_opt_self(CBUUID), "UUIDWithString:", v144);

    *(_QWORD *)(v133 + 32) = v145;
    v174 = v133;
    specialized Array._endMutation()(v146);
    v147 = v174;
    sub_10006C25C(0, (unint64_t *)&unk_100348970, CBUUID_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v147);
    objc_msgSend(v131, "discoverServices:", isa);

    a1 = (_QWORD *)v175[0];
    if ((*(_BYTE *)(v175[0] + 192) & 1) == 0)
    {
      v150 = *(_QWORD *)(v175[0] + 176);
      v149 = *(_QWORD *)(v175[0] + 184);
      v151 = *(_QWORD *)(v175[0] + 16);
      swift_retain(v151);
      sub_1000B725C(v150, v149, 0, 256, v151);
      swift_release(v151);
    }
    v10 = v170;
    if (qword_1003447C8 == -1)
    {
LABEL_37:
      sub_1001F2798(a1[2] + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier);
      swift_release(a1);

      return;
    }
LABEL_44:
    swift_once(&qword_1003447C8, sub_1001F416C);
    goto LABEL_37;
  }
  v39 = Logger.logObject.getter(v13);
  v41 = static os_log_type_t.error.getter(v39, v40);
  if (os_log_type_enabled(v39, v41))
  {
    v42 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v42 = 0;
    _os_log_impl((void *)&_mh_execute_header, v39, v41, "Not running", v42, 2u);
    swift_slowDealloc(v42, -1, -1);
  }

}

void sub_1000E03D0(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  NSObject *v27;
  uint64_t v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  id v36;
  uint64_t v37;
  os_log_type_t v38;
  uint8_t *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  void (*v57)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  uint64_t v64;
  os_log_type_t v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  os_log_type_t v76;
  uint8_t *v77;
  uint64_t v78;
  uint8_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83[5];
  __int128 v84;
  __int128 v85;
  char v86[24];

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchPredicate(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v15 = (uint64_t *)((char *)&v78 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v16 = qword_100354EE8;
  *v15 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v12 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v11);
  v17 = (id)v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)(v15);
  v18 = (*(uint64_t (**)(_QWORD *, uint64_t))(v12 + 8))(v15, v11);
  if ((v16 & 1) != 0)
  {
    if (*(_QWORD *)(v3 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager))
    {
      v19 = (uint64_t *)(v3 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals);
      swift_beginAccess(v3 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals, v86, 0, 0);
      v20 = *v19;
      v21 = a1;
      v22 = swift_bridgeObjectRetain(v20);
      v23 = sub_1000D8FC0(v22);
      swift_bridgeObjectRelease(v20);

      if (v23)
      {
        v81 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBCentralManagerControllerBTClockEventType);
        v82 = v24;
        AnyHashable.init<A>(_:)(&v81, &type metadata for String, &protocol witness table for String);
        if (*(_QWORD *)(a2 + 16) && (v25 = sub_100187F3C((uint64_t)v83), (v26 & 1) != 0))
        {
          sub_100096CB0(*(_QWORD *)(a2 + 56) + 32 * v25, (uint64_t)&v84);
        }
        else
        {
          v84 = 0u;
          v85 = 0u;
        }
        sub_100098C48((uint64_t)v83);
        if (!*((_QWORD *)&v85 + 1))
          goto LABEL_33;
        if ((swift_dynamicCast(&v81, &v84, (char *)&type metadata for Any + 8, &type metadata for Int, 6) & 1) == 0)
          goto LABEL_34;
        v32 = v81;
        v81 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBCentralManagerControllerBTLocalClock);
        v82 = v33;
        AnyHashable.init<A>(_:)(&v81, &type metadata for String, &protocol witness table for String);
        if (*(_QWORD *)(a2 + 16) && (v34 = sub_100187F3C((uint64_t)v83), (v35 & 1) != 0))
        {
          sub_100096CB0(*(_QWORD *)(a2 + 56) + 32 * v34, (uint64_t)&v84);
        }
        else
        {
          v84 = 0u;
          v85 = 0u;
        }
        sub_100098C48((uint64_t)v83);
        if (!*((_QWORD *)&v85 + 1))
          goto LABEL_33;
        if ((swift_dynamicCast(&v81, &v84, (char *)&type metadata for Any + 8, &type metadata for UInt64, 6) & 1) == 0)
          goto LABEL_34;
        v46 = v81;
        v81 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBCentralManagerControllerBTClockEventCounter);
        v82 = v47;
        AnyHashable.init<A>(_:)(&v81, &type metadata for String, &protocol witness table for String);
        if (*(_QWORD *)(a2 + 16) && (v48 = sub_100187F3C((uint64_t)v83), (v49 & 1) != 0))
        {
          sub_100096CB0(*(_QWORD *)(a2 + 56) + 32 * v48, (uint64_t)&v84);
        }
        else
        {
          v84 = 0u;
          v85 = 0u;
        }
        sub_100098C48((uint64_t)v83);
        if (*((_QWORD *)&v85 + 1))
        {
          if ((swift_dynamicCast(&v81, &v84, (char *)&type metadata for Any + 8, &type metadata for UInt64, 6) & 1) != 0)
          {
            v80 = v81;
            swift_beginAccess(v23 + 5, v83, 0, 0);
            v51 = v23[8];
            v50 = v23[9];
            v52 = sub_10006BA78(v23 + 5, v51);
            v53 = v23;
            v54 = *(_QWORD *)(v51 - 8);
            __chkstk_darwin(v52, v52);
            v56 = (char *)&v78 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
            (*(void (**)(char *))(v54 + 16))(v56);
            v57 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(uint64_t (**)(uint64_t, uint64_t))(v50 + 112))(v51, v50);
            v59 = v58;
            v60 = (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v56, v51);
            if (v57)
            {
              v61 = v53[2];
              swift_retain(v61);
              v57(v32, v46, v80, v61);
              swift_release(v61);
              sub_10008F210((uint64_t)v57, v59);
              swift_release(v53);
              return;
            }
            v74 = v53;
            v63 = Logger.logObject.getter(v60);
            v76 = static os_log_type_t.error.getter(v63, v75);
            if (os_log_type_enabled(v63, v76))
            {
              v77 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v77 = 0;
              _os_log_impl((void *)&_mh_execute_header, v63, v76, "No callback registered for onTimeSyncEvent", v77, 2u);
              swift_slowDealloc(v77, -1, -1);
            }
            v73 = v74;
            goto LABEL_37;
          }
        }
        else
        {
LABEL_33:
          sub_100096700((uint64_t)&v84, (uint64_t *)&unk_100346130);
        }
LABEL_34:
        v62 = swift_bridgeObjectRetain_n(a2, 2);
        v63 = Logger.logObject.getter(v62);
        v65 = static os_log_type_t.error.getter(v63, v64);
        if (os_log_type_enabled(v63, v65))
        {
          v66 = (uint8_t *)swift_slowAlloc(12, -1);
          v67 = swift_slowAlloc(32, -1);
          v83[0] = v67;
          *(_DWORD *)v66 = 136315138;
          v68 = swift_bridgeObjectRetain(a2);
          v69 = Dictionary.description.getter(v68, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
          v80 = (uint64_t)v23;
          v70 = v69;
          v72 = v71;
          swift_bridgeObjectRelease(a2);
          *(_QWORD *)&v84 = sub_1001C56EC(v70, v72, v83);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, (char *)&v84 + 8, v66 + 4, v66 + 12);
          swift_bridgeObjectRelease_n(a2, 2);
          swift_bridgeObjectRelease(v72);
          _os_log_impl((void *)&_mh_execute_header, v63, v65, "Invalid time sync data %s", v66, 0xCu);
          swift_arrayDestroy(v67, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v67, -1, -1);
          swift_slowDealloc(v66, -1, -1);
          v73 = (_QWORD *)v80;
        }
        else
        {
          swift_bridgeObjectRelease_n(a2, 2);
          v73 = v23;
        }
LABEL_37:
        swift_release(v73);

        return;
      }
      v36 = v21;
      v27 = Logger.logObject.getter(v36);
      v38 = static os_log_type_t.error.getter(v27, v37);
      if (!os_log_type_enabled(v27, v38))
      {

        goto LABEL_21;
      }
      v39 = (uint8_t *)swift_slowAlloc(12, -1);
      v80 = swift_slowAlloc(32, -1);
      v83[0] = v80;
      *(_DWORD *)v39 = 136315138;
      v79 = v39 + 4;
      v40 = objc_msgSend(v36, "identifier");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      v41 = sub_1000C69C4((unint64_t *)&qword_100344CC8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v42 = dispatch thunk of CustomStringConvertible.description.getter(v6, v41);
      v44 = v43;
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      *(_QWORD *)&v84 = sub_1001C56EC(v42, v44, v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, (char *)&v84 + 8, v79, v39 + 12);

      swift_bridgeObjectRelease(v44);
      _os_log_impl((void *)&_mh_execute_header, v27, v38, "Got time sync event for unknown peripheral %s", v39, 0xCu);
      v45 = v80;
      swift_arrayDestroy(v80, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1, -1);
      v31 = v39;
    }
    else
    {
      v27 = Logger.logObject.getter(v18);
      v29 = static os_log_type_t.error.getter(v27, v28);
      if (!os_log_type_enabled(v27, v29))
      {
LABEL_21:

        return;
      }
      v30 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v29, "Not running", v30, 2u);
      v31 = v30;
    }
    swift_slowDealloc(v31, -1, -1);
    goto LABEL_21;
  }
  __break(1u);
}

void sub_1000E0C18(uint8_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  void *v19;
  char *v20;
  NSObject *v21;
  uint64_t v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  NSObject *v29;
  uint64_t v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t *v36;
  uint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t inited;
  uint64_t v49;
  unint64_t v50;
  Class isa;
  int v52;
  uint8_t *v53;
  NSObject *v54;
  uint64_t v55;
  os_log_type_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint8_t *v64;
  uint64_t v65;
  NSObject *v66;
  uint64_t v67;
  os_log_type_t v68;
  uint8_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint8_t *v75;
  NSObject *v76;
  uint64_t v77;
  os_log_type_t v78;
  uint8_t *v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  NSObject *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  os_log_type_t v99;
  uint64_t v100;
  char v101;
  NSObject *v102;
  uint64_t v103;
  os_log_type_t v104;
  uint8_t *v105;
  const char *v106;
  uint64_t v107;
  uint8_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  os_log_type_t v112;
  uint8_t *v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  void (*v130)(uint64_t, uint64_t);
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  Class v138;
  Class v139;
  uint64_t v140;
  uint64_t v141;
  uint8_t *v142;
  uint64_t v143;
  _QWORD *v144;
  uint8_t *v145;
  char *v146;
  uint8_t *v147;
  uint64_t v148;
  _QWORD v149[3];
  uint64_t v150;
  int64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD v155[3];
  _QWORD *v156;
  _QWORD v157[4];
  __int128 v158;
  __int128 v159;

  v4 = v3;
  v148 = a2;
  v7 = type metadata accessor for UUID(0);
  v147 = *(uint8_t **)(v7 - 8);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v143 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchPredicate(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v15 = (uint64_t *)((char *)&v143 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v16 = qword_100354EE8;
  *v15 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v12 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v11);
  v17 = (id)v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)(v15);
  v18 = (*(uint64_t (**)(_QWORD *, uint64_t))(v12 + 8))(v15, v11);
  if ((v16 & 1) == 0)
  {
    __break(1u);
    goto LABEL_66;
  }
  v19 = *(void **)(v4 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager);
  if (!v19)
  {
    v29 = Logger.logObject.getter(v18);
    v31 = static os_log_type_t.error.getter(v29, v30);
    if (os_log_type_enabled(v29, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v31, "Not running", v32, 2u);
      swift_slowDealloc(v32, -1, -1);
    }

    return;
  }
  if (a3)
  {
    swift_errorRetain(a3);
    swift_errorRetain(a3);
    swift_errorRetain(a3);
    v20 = v19;
    v21 = Logger.logObject.getter(v20);
    v23 = static os_log_type_t.error.getter(v21, v22);
    if (!os_log_type_enabled(v21, v23))
    {
      swift_errorRelease(a3);

      swift_errorRelease(a3);
      swift_errorRelease(a3);
      return;
    }
    v24 = (uint8_t *)swift_slowAlloc(12, -1);
    v25 = swift_slowAlloc(32, -1);
    v156 = (_QWORD *)v25;
    *(_DWORD *)v24 = 136315138;
    swift_getErrorValue(a3, &v150, v149);
    v26 = Error.localizedDescription.getter(v149[1], v149[2]);
    v28 = v27;
    *(_QWORD *)&v158 = sub_1001C56EC(v26, v27, (uint64_t *)&v156);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, (char *)&v158 + 8, v24 + 4, v24 + 12);
    swift_bridgeObjectRelease(v28);
    swift_errorRelease(a3);
    swift_errorRelease(a3);
    _os_log_impl((void *)&_mh_execute_header, v21, v23, "Error on reception of RSSI update %s", v24, 0xCu);
    swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v24, -1, -1);
    swift_errorRelease(a3);

    goto LABEL_31;
  }
  v155[0] = 0x724167734D42436BLL;
  v155[1] = 0xEF746C7573655267;
  v20 = v19;
  AnyHashable.init<A>(_:)(v155, &type metadata for String, &protocol witness table for String);
  v33 = v148;
  if (*(_QWORD *)(v148 + 16) && (v34 = sub_100187F3C((uint64_t)&v156), (v35 & 1) != 0))
  {
    sub_100096CB0(*(_QWORD *)(v33 + 56) + 32 * v34, (uint64_t)&v158);
  }
  else
  {
    v158 = 0u;
    v159 = 0u;
  }
  sub_100098C48((uint64_t)&v156);
  if (!*((_QWORD *)&v159 + 1))
  {
    sub_100096700((uint64_t)&v158, (uint64_t *)&unk_100346130);
LABEL_27:
    v65 = swift_bridgeObjectRetain_n(v33, 2);
    v66 = Logger.logObject.getter(v65);
    v68 = static os_log_type_t.error.getter(v66, v67);
    if (!os_log_type_enabled(v66, v68))
    {
      swift_bridgeObjectRelease_n(v33, 2);

LABEL_31:
      return;
    }
    v69 = (uint8_t *)swift_slowAlloc(12, -1);
    v70 = swift_slowAlloc(32, -1);
    v156 = (_QWORD *)v70;
    *(_DWORD *)v69 = 136315138;
    v146 = v20;
    v147 = v69 + 4;
    v71 = swift_bridgeObjectRetain(v33);
    v72 = Dictionary.description.getter(v71, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
    v74 = v73;
    swift_bridgeObjectRelease(v33);
    *(_QWORD *)&v158 = sub_1001C56EC(v72, v74, (uint64_t *)&v156);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, (char *)&v158 + 8, v147, v69 + 12);
    swift_bridgeObjectRelease_n(v33, 2);
    swift_bridgeObjectRelease(v74);
    _os_log_impl((void *)&_mh_execute_header, v66, v68, "RSSI detection failed %s", v69, 0xCu);
    swift_arrayDestroy(v70, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v70, -1, -1);
    swift_slowDealloc(v69, -1, -1);

LABEL_29:
    return;
  }
  if ((swift_dynamicCast(v155, &v158, (char *)&type metadata for Any + 8, &type metadata for Int, 6) & 1) == 0
    || v155[0])
  {
    goto LABEL_27;
  }
  v146 = v20;
  v36 = (uint64_t *)(v4 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals);
  swift_beginAccess(v4 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals, v155, 0, 0);
  v37 = *v36;
  v38 = a1;
  v39 = swift_bridgeObjectRetain(v37);
  v40 = sub_1000D8FC0(v39);
  swift_bridgeObjectRelease(v37);

  if (!v40)
  {
    v75 = v38;
    v76 = Logger.logObject.getter(v75);
    v78 = static os_log_type_t.error.getter(v76, v77);
    if (os_log_type_enabled(v76, v78))
    {
      v79 = (uint8_t *)swift_slowAlloc(12, -1);
      v148 = swift_slowAlloc(32, -1);
      v156 = (_QWORD *)v148;
      *(_DWORD *)v79 = 136315138;
      v145 = v79 + 4;
      v80 = -[uint8_t identifier](v75, "identifier");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      v81 = sub_1000C69C4((unint64_t *)&qword_100344CC8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v82 = dispatch thunk of CustomStringConvertible.description.getter(v7, v81);
      v84 = v83;
      (*((void (**)(char *, uint64_t))v147 + 1))(v10, v7);
      *(_QWORD *)&v158 = sub_1001C56EC(v82, v84, (uint64_t *)&v156);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, (char *)&v158 + 8, v145, v79 + 12);

      swift_bridgeObjectRelease(v84);
      _os_log_impl((void *)&_mh_execute_header, v76, v78, "Got RSSI update for unknown peripheral %s", v79, 0xCu);
      v85 = v148;
      swift_arrayDestroy(v148, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v85, -1, -1);
      swift_slowDealloc(v79, -1, -1);
    }
    else
    {

    }
    goto LABEL_29;
  }
  swift_beginAccess(v40 + 5, &v154, 0, 0);
  v41 = v40[8];
  v42 = v40[9];
  v144 = v40 + 5;
  v145 = (uint8_t *)v40;
  v43 = sub_10006BA78(v40 + 5, v41);
  v44 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v43, v43);
  v46 = (char *)&v143 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v44 + 16))(v46);
  LOBYTE(v42) = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 72))(v41, v42);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v46, v41);
  if ((v42 & 1) == 0)
  {
    v47 = sub_100063D3C(&qword_1003460E0);
    inited = swift_initStackObject(v47, &v153);
    *(_OWORD *)(inited + 16) = xmmword_1002888E0;
    v156 = (_QWORD *)static String._unconditionallyBridgeFromObjectiveC(_:)(CBRSSIStatisticAndDetectionEnable);
    v157[0] = v49;
    AnyHashable.init<A>(_:)(&v156, &type metadata for String, &protocol witness table for String);
    *(_QWORD *)(inited + 96) = &type metadata for Bool;
    *(_BYTE *)(inited + 72) = 0;
    v50 = sub_10017C368(inited);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v50);
    objc_msgSend(v146, "setRSSIStatisticsDetection:options:", v38, isa);

  }
  a1 = v145;
  v52 = v145[168];
  if (v52 == 2 || (v145[192] & 1) != 0)
  {
    v53 = v38;
    v54 = Logger.logObject.getter(v53);
    v56 = static os_log_type_t.error.getter(v54, v55);
    if (os_log_type_enabled(v54, v56))
    {
      v57 = swift_slowAlloc(12, -1);
      v148 = swift_slowAlloc(32, -1);
      v156 = (_QWORD *)v148;
      *(_DWORD *)v57 = 136315138;
      v144 = (_QWORD *)(v57 + 4);
      v58 = -[uint8_t identifier](v53, "identifier");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      v59 = sub_1000C69C4((unint64_t *)&qword_100344CC8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v60 = dispatch thunk of CustomStringConvertible.description.getter(v7, v59);
      v62 = v61;
      (*((void (**)(char *, uint64_t))v147 + 1))(v10, v7);
      *(_QWORD *)&v158 = sub_1001C56EC(v60, v62, (uint64_t *)&v156);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, (char *)&v158 + 8, v144, v57 + 12);

      swift_bridgeObjectRelease(v62);
      _os_log_impl((void *)&_mh_execute_header, v54, v56, "Got RSSI update while detection is disabled for %s", (uint8_t *)v57, 0xCu);
      v63 = v148;
      swift_arrayDestroy(v148, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v63, -1, -1);
      swift_slowDealloc(v57, -1, -1);
      v64 = v145;
    }
    else
    {

      v64 = a1;
    }
    swift_release(v64);

    goto LABEL_29;
  }
  if ((v52 & 1) == 0)
  {
    v86 = *((_QWORD *)v145 + 23);
    v151 = 0xD000000000000024;
    v152 = 0x80000001002BBBE0;
    AnyHashable.init<A>(_:)(&v151, &type metadata for String, &protocol witness table for String);
    v87 = v148;
    v10 = v146;
    if (*(_QWORD *)(v148 + 16) && (v88 = sub_100187F3C((uint64_t)&v156), (v89 & 1) != 0))
    {
      sub_100096CB0(*(_QWORD *)(v87 + 56) + 32 * v88, (uint64_t)&v158);
    }
    else
    {
      v158 = 0u;
      v159 = 0u;
    }
    sub_100098C48((uint64_t)&v156);
    if (*((_QWORD *)&v159 + 1))
    {
      v93 = swift_dynamicCast(&v151, &v158, (char *)&type metadata for Any + 8, &type metadata for Int, 6);
      if ((v93 & 1) != 0)
      {
        v94 = v151;
        if (v86 >= v151)
        {
          v95 = Logger.logObject.getter(v93);
          v99 = static os_log_type_t.info.getter(v95, v96, v97, v98);
          if (os_log_type_enabled(v95, v99))
          {
            v100 = swift_slowAlloc(22, -1);
            *(_DWORD *)v100 = 134218240;
            v156 = (_QWORD *)v94;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, v157, v100 + 4, v100 + 12);
            *(_WORD *)(v100 + 12) = 2048;
            v156 = (_QWORD *)v86;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, v157, v100 + 14, v100 + 22);
            _os_log_impl((void *)&_mh_execute_header, v95, v99, "Device detected in the further zone RSSI %ld <= %ld", (uint8_t *)v100, 0x16u);
            v101 = 1;
LABEL_68:
            swift_slowDealloc(v100, -1, -1);
            a1 = v145;
            goto LABEL_71;
          }
          v101 = 1;
          goto LABEL_71;
        }
LABEL_55:

        swift_release(a1);
        return;
      }
    }
    else
    {
      v93 = sub_100096700((uint64_t)&v158, (uint64_t *)&unk_100346130);
    }
    v102 = Logger.logObject.getter(v93);
    v104 = static os_log_type_t.error.getter(v102, v103);
    if (os_log_type_enabled(v102, v104))
    {
      v105 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v105 = 0;
      v106 = "Failed to retrieve kCBGetRssiStatisticsDetectionMinimum";
LABEL_62:
      _os_log_impl((void *)&_mh_execute_header, v102, v104, v106, v105, 2u);
      swift_slowDealloc(v105, -1, -1);
      goto LABEL_63;
    }
    goto LABEL_63;
  }
  v15 = (_QWORD *)*((_QWORD *)v145 + 22);
  v151 = 0xD000000000000024;
  v152 = 0x80000001002BBBB0;
  AnyHashable.init<A>(_:)(&v151, &type metadata for String, &protocol witness table for String);
  v90 = v148;
  v10 = v146;
  if (*(_QWORD *)(v148 + 16) && (v91 = sub_100187F3C((uint64_t)&v156), (v92 & 1) != 0))
  {
    sub_100096CB0(*(_QWORD *)(v90 + 56) + 32 * v91, (uint64_t)&v158);
  }
  else
  {
    v158 = 0u;
    v159 = 0u;
  }
  sub_100098C48((uint64_t)&v156);
  if (!*((_QWORD *)&v159 + 1))
  {
    v18 = sub_100096700((uint64_t)&v158, (uint64_t *)&unk_100346130);
LABEL_60:
    v102 = Logger.logObject.getter(v18);
    v104 = static os_log_type_t.error.getter(v102, v107);
    if (os_log_type_enabled(v102, v104))
    {
      v105 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v105 = 0;
      v106 = "Failed to retrieve kCBGetRssiStatisticsDetectionMaximum";
      goto LABEL_62;
    }
LABEL_63:
    v108 = a1;
LABEL_64:
    swift_release(v108);

    return;
  }
  v18 = swift_dynamicCast(&v151, &v158, (char *)&type metadata for Any + 8, &type metadata for Int, 6);
  if ((v18 & 1) == 0)
    goto LABEL_60;
  v4 = v151;
  if (v151 < (uint64_t)v15)
    goto LABEL_55;
LABEL_66:
  v95 = Logger.logObject.getter(v18);
  v112 = static os_log_type_t.info.getter(v95, v109, v110, v111);
  if (os_log_type_enabled(v95, v112))
  {
    v100 = swift_slowAlloc(22, -1);
    *(_DWORD *)v100 = 134218240;
    v156 = (_QWORD *)v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, v157, v100 + 4, v100 + 12);
    *(_WORD *)(v100 + 12) = 2048;
    v156 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, v157, v100 + 14, v100 + 22);
    _os_log_impl((void *)&_mh_execute_header, v95, v112, "Device detected in the closer zone RSSI %ld >= %ld", (uint8_t *)v100, 0x16u);
    v101 = 0;
    goto LABEL_68;
  }
  v101 = 0;
LABEL_71:

  a1[168] = v101;
  v113 = a1;
  v114 = *((_QWORD *)a1 + 8);
  v115 = *((_QWORD *)a1 + 9);
  v116 = sub_10006BA78(v144, v114);
  v117 = *(_QWORD *)(v114 - 8);
  __chkstk_darwin(v116, v116);
  v119 = (char *)&v143 - ((v118 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v117 + 16))(v119);
  LOBYTE(v115) = (*(uint64_t (**)(uint64_t, uint64_t))(v115 + 72))(v114, v115);
  (*(void (**)(char *, uint64_t))(v117 + 8))(v119, v114);
  if ((v115 & 1) == 0)
  {
    v120 = *((_QWORD *)v113 + 22);
    v121 = *((_QWORD *)v113 + 23);
    v122 = v113[192];
    v123 = *((_QWORD *)v113 + 2);
    swift_retain(v123);
    sub_1000B725C(v120, v121, v122, 256, v123);
    swift_release(v123);
  }
  if (v113[32] != 8)
    goto LABEL_77;
  v125 = *((_QWORD *)v113 + 8);
  v124 = *((_QWORD *)v113 + 9);
  v126 = sub_10006BA78(v144, v125);
  v127 = *(_QWORD *)(v125 - 8);
  __chkstk_darwin(v126, v126);
  v129 = (char *)&v143 - ((v128 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v127 + 16))(v129);
  v130 = (void (*)(uint64_t, uint64_t))(*(uint64_t (**)(uint64_t, uint64_t))(v124 + 120))(v125, v124);
  v132 = v131;
  v133 = (*(uint64_t (**)(char *, uint64_t))(v127 + 8))(v129, v125);
  if (!v130)
  {
    v102 = Logger.logObject.getter(v133);
    v141 = static os_log_type_t.error.getter(v102, v140);
    if (os_log_type_enabled(v102, (os_log_type_t)v141))
    {
      v142 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v142 = 0;
      _os_log_impl((void *)&_mh_execute_header, v102, (os_log_type_t)v141, "No callback registered for onRSSIZoneUpdate", v142, 2u);
      swift_slowDealloc(v142, -1, -1);
    }
    v108 = v145;
    goto LABEL_64;
  }
  v134 = v113[168];
  if (v134 != 2)
  {
    v135 = v134 & 1;
    v136 = *((_QWORD *)v113 + 2);
    swift_retain(v136);
    v130(v135, v136);
    swift_release(v136);
    v137 = (void *)objc_opt_self(CertificationLogging);
    v138 = Dictionary._bridgeToObjectiveC()().super.isa;
    v139 = UUID._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v137, "bleLogRSSI:peerUUID:", v138, v139);

    sub_10008F210((uint64_t)v130, v132);
LABEL_77:

    swift_release(v113);
    return;
  }
  __break(1u);
}

void sub_1000E1D4C(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  char v20;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;

  v23 = 0;
  v6 = 0;
  v24 = a3 + 56;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 56);
  v25 = (unint64_t)(v7 + 63) >> 6;
  while (v9)
  {
    v11 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v12 = v11 | (v6 << 6);
LABEL_21:
    v16 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v12);
    v17 = *(void **)(v16 + 56);
    if (!v17)
      goto LABEL_30;
    sub_10006C25C(0, &qword_1003460B0, CBPeripheral_ptr);
    swift_retain(v16);
    v18 = v17;
    v19 = a4;
    v20 = static NSObject.== infix(_:_:)(v18);
    swift_release(v16);

    if ((v20 & 1) == 0)
    {
LABEL_30:
      *(unint64_t *)((char *)a1 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v23++, 1))
        goto LABEL_27;
    }
  }
  v13 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v13 >= v25)
    goto LABEL_24;
  v14 = *(_QWORD *)(v24 + 8 * v13);
  ++v6;
  if (v14)
    goto LABEL_20;
  v6 = v13 + 1;
  if (v13 + 1 >= v25)
    goto LABEL_24;
  v14 = *(_QWORD *)(v24 + 8 * v6);
  if (v14)
    goto LABEL_20;
  v6 = v13 + 2;
  if (v13 + 2 >= v25)
    goto LABEL_24;
  v14 = *(_QWORD *)(v24 + 8 * v6);
  if (v14)
  {
LABEL_20:
    v9 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v6 << 6);
    goto LABEL_21;
  }
  v15 = v13 + 3;
  if (v15 >= v25)
  {
LABEL_24:
    swift_retain(a3);
    sub_100195BFC(a1, a2, v23, a3);
    return;
  }
  v14 = *(_QWORD *)(v24 + 8 * v15);
  if (v14)
  {
    v6 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    v6 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v6 >= v25)
      goto LABEL_24;
    v14 = *(_QWORD *)(v24 + 8 * v6);
    ++v15;
    if (v14)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
}

uint64_t sub_1000E1F74(uint64_t a1, void *a2, uint64_t (*a3)(char *, unint64_t, uint64_t, id))
{
  uint64_t v3;
  char v6;
  unsigned int v7;
  unint64_t v8;
  id v9;
  char *v10;
  id v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v16;

  v6 = *(_BYTE *)(a1 + 32);
  v7 = v6 & 0x3F;
  v8 = (unint64_t)((1 << v6) + 63) >> 6;
  v9 = a2;
  if (v7 <= 0xD || (swift_stdlib_isStackAllocationSafe(8 * v8, 8) & 1) != 0)
  {
    __chkstk_darwin();
    v10 = (char *)&v16 - ((8 * v8 + 15) & 0x3FFFFFFFFFFFFFF0);
    bzero(v10, 8 * v8);
    v11 = v9;
    v12 = a3(v10, v8, a1, v11);
    swift_release(a1);

    if (v3)
      swift_willThrow();

  }
  else
  {
    v13 = (void *)swift_slowAlloc(8 * v8, -1);
    bzero(v13, 8 * v8);
    v14 = v9;
    v12 = a3((char *)v13, v8, a1, v14);
    swift_release(a1);

    swift_slowDealloc(v13, -1, -1);
  }
  return v12;
}

Swift::Int sub_1000E2124(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::Int result;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  char v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  id v28;
  _QWORD v29[9];
  uint64_t v30;
  _QWORD *v31;

  if ((a1 & 0xC000000000000001) == 0)
    return sub_1000E1F74(a1, a2, (uint64_t (*)(char *, unint64_t, uint64_t, id))sub_1000E1D4C);
  v2 = &_swiftEmptySetSingleton;
  v31 = &_swiftEmptySetSingleton;
  if (a1 < 0)
    v3 = a1;
  else
    v3 = a1 & 0xFFFFFFFFFFFFFF8;
  v28 = a2;
  v4 = __CocoaSet.makeIterator()(v3);
  v5 = __CocoaSet.Iterator.next()(v4);
  if (v5)
  {
    v6 = v5;
    v7 = type metadata accessor for DSKBLE.BLEConnectionRequest();
    do
    {
      v29[0] = v6;
      swift_dynamicCast(&v30, v29, (char *)&type metadata for Swift.AnyObject + 8, v7, 7);
      v9 = v30;
      v10 = *(void **)(v30 + 56);
      if (v10
        && (sub_10006C25C(0, &qword_1003460B0, CBPeripheral_ptr),
            v11 = v28,
            v12 = v10,
            v13 = static NSObject.== infix(_:_:)(v12),
            v12,
            v11,
            v9 = v30,
            (v13 & 1) != 0))
      {
        result = swift_release(v30);
      }
      else
      {
        v14 = v31;
        v15 = v31[2];
        if (v31[3] <= v15)
        {
          sub_1000CC188(v15 + 1);
          v14 = v31;
        }
        Hasher.init(_seed:)(v29);
        v16 = *(_QWORD *)(v9 + 16);
        v17 = type metadata accessor for UUID(0);
        v18 = sub_1000C69C4((unint64_t *)&unk_100347730, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        swift_retain(v16);
        dispatch thunk of Hashable.hash(into:)(v29, v17, v18);
        swift_release(v16);
        result = Hasher._finalize()();
        v19 = v14 + 7;
        v20 = -1 << *((_BYTE *)v14 + 32);
        v21 = result & ~v20;
        v22 = v21 >> 6;
        if (((-1 << v21) & ~v14[(v21 >> 6) + 7]) != 0)
        {
          v23 = __clz(__rbit64((-1 << v21) & ~v14[(v21 >> 6) + 7])) | v21 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v24 = 0;
          v25 = (unint64_t)(63 - v20) >> 6;
          do
          {
            if (++v22 == v25 && (v24 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v26 = v22 == v25;
            if (v22 == v25)
              v22 = 0;
            v24 |= v26;
            v27 = v19[v22];
          }
          while (v27 == -1);
          v23 = __clz(__rbit64(~v27)) + (v22 << 6);
        }
        *(_QWORD *)((char *)v19 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
        *(_QWORD *)(v14[6] + 8 * v23) = v9;
        ++v14[2];
      }
      v6 = __CocoaSet.Iterator.next()(result);
    }
    while (v6);
    v2 = v31;
  }

  swift_release(v4);
  return (Swift::Int)v2;
}

void sub_1000E23F0(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  void *v18;
  uint8_t *v19;
  id v20;
  id v21;
  id v22;
  NSObject *v23;
  uint64_t v24;
  os_log_type_t v25;
  uint64_t v26;
  id v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  NSObject *v43;
  uint64_t v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint8_t *v47;
  id v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint8_t *v57;
  uint64_t v58;
  id v59;
  NSObject *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  os_log_type_t v64;
  uint8_t *v65;
  id v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  Swift::Int *v77;
  Swift::Int v78;
  id v79;
  uint64_t v80;
  Swift::Int v81;
  Swift::Int v82;
  uint64_t *v83;
  uint64_t v84;
  id v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  void (*v95)(uint64_t, uint64_t);
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  _BYTE *v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint8_t *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  _BYTE v110[24];
  uint64_t v111;
  _BYTE v112[16];
  uint64_t v113[3];

  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v102 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchPredicate(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (uint64_t **)((char *)&v102 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v15 = qword_100354EE8;
  *v14 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v10);
  v16 = (id)v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)(v14);
  v17 = (*(uint64_t (**)(_QWORD *, uint64_t))(v11 + 8))(v14, v10);
  if ((v15 & 1) == 0)
    __break(1u);
  v18 = *(void **)(v2 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager);
  if (v18)
  {
    v107 = v9;
    v108 = v6;
    v109 = v5;
    v106 = v2;
    v19 = (uint8_t *)(v2 + OBJC_IVAR____TtC10seserviced6DSKBLE_logger);
    v20 = a1;
    swift_errorRetain(a2);
    v21 = v20;
    swift_errorRetain(a2);
    v22 = v18;
    v23 = Logger.logObject.getter(v22);
    v25 = static os_log_type_t.error.getter(v23, v24);
    if (os_log_type_enabled(v23, v25))
    {
      v104 = v19;
      v105 = (uint64_t)v22;
      v26 = swift_slowAlloc(22, -1);
      v102 = (uint64_t *)swift_slowAlloc(8, -1);
      v103 = swift_slowAlloc(32, -1);
      v113[0] = v103;
      *(_DWORD *)v26 = 136315394;
      v27 = objc_msgSend(v21, "identifier");
      v28 = v107;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      v29 = sub_1000C69C4((unint64_t *)&qword_100344CC8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v30 = v109;
      v31 = dispatch thunk of CustomStringConvertible.description.getter(v109, v29);
      v33 = v32;
      (*(void (**)(char *, uint64_t))(v108 + 8))(v28, v30);
      v111 = sub_1001C56EC(v31, v33, v113);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, v112, v26 + 4, v26 + 12);

      swift_bridgeObjectRelease(v33);
      *(_WORD *)(v26 + 12) = 2112;
      if (a2)
      {
        swift_errorRetain(a2);
        v34 = _swift_stdlib_bridgeErrorToNSError(a2);
        v111 = v34;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, v112, v26 + 14, v26 + 22);
      }
      else
      {
        v111 = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, v112, v26 + 14, v26 + 22);
        v34 = 0;
      }
      v39 = v102;
      *v102 = v34;
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v23, v25, "Peripheral failed to connect %s error %@", (uint8_t *)v26, 0x16u);
      v40 = sub_100063D3C((uint64_t *)&unk_100346090);
      swift_arrayDestroy(v39, 1, v40);
      swift_slowDealloc(v39, -1, -1);
      v41 = v103;
      swift_arrayDestroy(v103, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v26, -1, -1);

      v22 = (id)v105;
      if (!a2)
        goto LABEL_19;
    }
    else
    {

      swift_errorRelease(a2);
      swift_errorRelease(a2);
      if (!a2)
        goto LABEL_19;
    }
    swift_errorRetain(a2);
    if ((sub_1000DD2E4() & 1) != 0)
    {
      v42 = v21;
      v43 = Logger.logObject.getter(v42);
      v45 = static os_log_type_t.error.getter(v43, v44);
      if (os_log_type_enabled(v43, v45))
      {
        v46 = (uint8_t *)swift_slowAlloc(12, -1);
        v105 = swift_slowAlloc(32, -1);
        v113[0] = v105;
        *(_DWORD *)v46 = 136315138;
        v47 = v46 + 12;
        v103 = (uint64_t)(v46 + 4);
        v104 = v46;
        v48 = objc_msgSend(v42, "identifier");
        v49 = v107;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        v50 = sub_1000C69C4((unint64_t *)&qword_100344CC8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v51 = v109;
        v52 = dispatch thunk of CustomStringConvertible.description.getter(v109, v50);
        v53 = v22;
        v55 = v54;
        (*(void (**)(char *, uint64_t))(v108 + 8))(v49, v51);
        v111 = sub_1001C56EC(v52, v55, v113);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, v112, v103, v47);

        v56 = v55;
        v22 = v53;
        swift_bridgeObjectRelease(v56);
        v57 = v104;
        _os_log_impl((void *)&_mh_execute_header, v43, v45, "Fatal failure %s", v104, 0xCu);
        v58 = v105;
        swift_arrayDestroy(v105, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v58, -1, -1);
        swift_slowDealloc(v57, -1, -1);
      }
      else
      {

      }
      v76 = v106;
      v77 = (Swift::Int *)(v106 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectionRequests);
      swift_beginAccess(v106 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectionRequests, v113, 1, 0);
      v78 = *v77;
      v79 = v42;
      v80 = swift_bridgeObjectRetain(v78);
      v81 = sub_1000E2124(v80, v79);

      v82 = *v77;
      *v77 = v81;
      swift_bridgeObjectRelease(v82);
      v83 = (uint64_t *)(v76 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals);
      swift_beginAccess(v76 + OBJC_IVAR____TtC10seserviced6DSKBLE_connectedPeripherals, &v111, 0, 0);
      v84 = *v83;
      v85 = v79;
      v86 = swift_bridgeObjectRetain(v84);
      v87 = sub_1000D8FC0(v86);
      swift_bridgeObjectRelease(v84);

      if (v87)
      {
        swift_beginAccess(v83, v110, 33, 0);
        v88 = sub_1000D38AC((uint64_t)v87);
        swift_endAccess(v110);
        swift_release(v88);
        swift_beginAccess(v87 + 5, v110, 0, 0);
        v89 = v87[8];
        v90 = v87[9];
        v91 = sub_10006BA78(v87 + 5, v89);
        v92 = *(_QWORD *)(v89 - 8);
        __chkstk_darwin(v91, v91);
        v94 = (char *)&v102 - ((v93 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v92 + 16))(v94);
        v95 = (void (*)(uint64_t, uint64_t))(*(uint64_t (**)(uint64_t, uint64_t))(v90 + 88))(v89, v90);
        v97 = v96;
        (*(void (**)(char *, uint64_t))(v92 + 8))(v94, v89);
        v98 = sub_1000AAC04();
        v99 = swift_allocError(&type metadata for DSKBLE.BLEError, v98, 0, 0);
        *v100 = 1;
        v101 = v87[2];
        swift_retain(v101);
        v95(v99, v101);
        swift_errorRelease(a2);
        swift_release(v87);
        swift_release(v101);

        swift_errorRelease(v99);
        swift_release(v97);
        return;
      }
      swift_errorRelease(a2);
LABEL_23:

      return;
    }
    swift_errorRelease(a2);
LABEL_19:
    v59 = v21;
    v60 = Logger.logObject.getter(v59);
    v64 = static os_log_type_t.info.getter(v60, v61, v62, v63);
    if (os_log_type_enabled(v60, v64))
    {
      v65 = (uint8_t *)swift_slowAlloc(12, -1);
      v106 = swift_slowAlloc(32, -1);
      v113[0] = v106;
      *(_DWORD *)v65 = 136315138;
      v105 = (uint64_t)(v65 + 4);
      v66 = objc_msgSend(v59, "identifier");
      v67 = v107;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      v68 = sub_1000C69C4((unint64_t *)&qword_100344CC8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v69 = v109;
      v70 = dispatch thunk of CustomStringConvertible.description.getter(v109, v68);
      v71 = v22;
      v73 = v72;
      (*(void (**)(char *, uint64_t))(v108 + 8))(v67, v69);
      v111 = sub_1001C56EC(v70, v73, v113);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, v112, v105, v65 + 12);

      v74 = v73;
      v22 = v71;
      swift_bridgeObjectRelease(v74);
      _os_log_impl((void *)&_mh_execute_header, v60, v64, "Retrying connection to %s", v65, 0xCu);
      v75 = v106;
      swift_arrayDestroy(v106, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v75, -1, -1);
      swift_slowDealloc(v65, -1, -1);
    }
    else
    {

    }
    objc_msgSend(v22, "connectPeripheral:options:", v59, 0);
    goto LABEL_23;
  }
  v35 = Logger.logObject.getter(v17);
  v37 = static os_log_type_t.error.getter(v35, v36);
  if (os_log_type_enabled(v35, v37))
  {
    v38 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v38 = 0;
    _os_log_impl((void *)&_mh_execute_header, v35, v37, "Not running", v38, 2u);
    swift_slowDealloc(v38, -1, -1);
  }

}

void sub_1000E2DCC(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  id v19;
  id v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  os_log_type_t v25;
  uint64_t v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  os_log_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  uint64_t v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  os_log_t v44;
  uint64_t *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchPredicate(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v15 = (uint64_t *)((char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v16 = qword_100354EE8;
  *v15 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v12 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v11);
  v17 = (id)v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)(v15);
  v18 = (*(uint64_t (**)(_QWORD *, uint64_t))(v12 + 8))(v15, v11);
  if ((v16 & 1) != 0)
  {
    if (*(_QWORD *)(v3 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralManager))
    {
      if (a2)
      {
        swift_errorRetain(a2);
        swift_errorRetain(a2);
        v47 = a1;
        v19 = a1;
        swift_errorRetain(a2);
        v20 = v19;
        v21 = Logger.logObject.getter(v20);
        v25 = static os_log_type_t.info.getter(v21, v22, v23, v24);
        if (os_log_type_enabled(v21, v25))
        {
          v26 = swift_slowAlloc(22, -1);
          v45 = (uint64_t *)swift_slowAlloc(8, -1);
          v46 = swift_slowAlloc(32, -1);
          v49 = v46;
          *(_DWORD *)v26 = 136315394;
          v43 = v26 + 4;
          v27 = objc_msgSend(v20, "identifier");
          v44 = v21;
          v28 = v27;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          v30 = UUID.uuidString.getter(v29);
          v32 = v31;
          (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
          v48 = sub_1001C56EC(v30, v32, &v49);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v43, v26 + 12);

          swift_bridgeObjectRelease(v32);
          *(_WORD *)(v26 + 12) = 2112;
          swift_errorRetain(a2);
          v33 = _swift_stdlib_bridgeErrorToNSError(a2);
          v48 = v33;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v26 + 14, v26 + 22);
          v34 = v45;
          *v45 = v33;
          swift_errorRelease(a2);
          swift_errorRelease(a2);
          v35 = v44;
          _os_log_impl((void *)&_mh_execute_header, v44, v25, "Disconnected %s with error %@", (uint8_t *)v26, 0x16u);
          v36 = sub_100063D3C((uint64_t *)&unk_100346090);
          swift_arrayDestroy(v34, 1, v36);
          swift_slowDealloc(v34, -1, -1);
          v37 = v46;
          swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v37, -1, -1);
          swift_slowDealloc(v26, -1, -1);
          swift_errorRelease(a2);

        }
        else
        {
          swift_errorRelease(a2);

          swift_errorRelease(a2);
          swift_errorRelease(a2);
        }
        a1 = v47;
      }
      sub_1000B4DF8(a1, 0, 1);
    }
    else
    {
      v38 = Logger.logObject.getter(v18);
      v40 = static os_log_type_t.error.getter(v38, v39);
      if (os_log_type_enabled(v38, v40))
      {
        v41 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v41 = 0;
        _os_log_impl((void *)&_mh_execute_header, v38, v40, "Not running", v41, 2u);
        swift_slowDealloc(v41, -1, -1);
      }

    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1000E31E8(uint8_t *a1, void *a2, uint8_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  char *v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint8_t *v32;
  _QWORD *v33;
  id v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  NSObject *v40;
  uint64_t v41;
  os_log_type_t v42;
  uint8_t *v43;
  const char *v44;
  id v45;
  NSObject *v46;
  uint64_t v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  char *v63;
  NSObject *v64;
  uint64_t v65;
  os_log_type_t v66;
  uint8_t *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  uint64_t v79;
  os_log_type_t v80;
  uint8_t *v81;
  uint8_t *v82;
  uint64_t v83;
  uint64_t inited;
  uint64_t v85;
  unint64_t v86;
  Class isa;
  unint64_t v88;
  uint64_t v89;
  _BYTE *v90;
  os_log_type_t v91;
  uint8_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  _BYTE *v100;
  uint8_t *v101;
  uint8_t *v102;
  char *v103;
  uint64_t v104[2];
  char v105[104];
  uint64_t v106;
  uint64_t v107;

  v102 = a3;
  v101 = a1;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v7 = __chkstk_darwin(v4, v6);
  v9 = (char *)&v101 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v7, v10);
  v13 = (char *)&v101 - v12;
  __chkstk_darwin(v11, v14);
  v16 = (char *)&v101 - v15;
  v17 = type metadata accessor for DispatchPredicate(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17, v19);
  v21 = (uint8_t **)((char *)&v101 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v22 = qword_100354EE8;
  *v21 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v18 + 104))(v21, enum case for DispatchPredicate.onQueue(_:), v17);
  v23 = (id)v22;
  LOBYTE(v22) = _dispatchPreconditionTest(_:)(v21);
  v24 = (*(uint64_t (**)(_QWORD *, uint64_t))(v18 + 8))(v21, v17);
  if ((v22 & 1) == 0)
  {
    __break(1u);
    goto LABEL_42;
  }
  v25 = v103;
  v26 = Logger.logObject.getter(v24);
  v30 = static os_log_type_t.info.getter(v26, v27, v28, v29);
  if (os_log_type_enabled(v26, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v31 = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, v30, "Peripheral did request pairing", v31, 2u);
    v32 = v31;
    v25 = v103;
    swift_slowDealloc(v32, -1, -1);
  }

  v33 = *(_QWORD **)&v25[OBJC_IVAR____TtC10seserviced13DSKBLEPairing_currentPairingRequest];
  if (!v33)
    goto LABEL_15;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v16, v33[4] + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier, v4);
  if (!a2)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  swift_retain(v33);
  v34 = objc_msgSend(a2, "identifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  LOBYTE(v34) = static UUID.== infix(_:_:)(v16, v13);
  v35 = *(void (**)(char *, uint64_t))(v5 + 8);
  v35(v13, v4);
  v36 = ((uint64_t (*)(char *, uint64_t))v35)(v16, v4);
  if ((v34 & 1) != 0)
  {
    v37 = v103;
    if (!*(_QWORD *)&v103[OBJC_IVAR____TtC10seserviced13DSKBLEPairing_pairingAgent])
    {
      v40 = Logger.logObject.getter(v36);
      v42 = static os_log_type_t.error.getter(v40, v58);
      if (os_log_type_enabled(v40, v42))
      {
        v43 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v43 = 0;
        v44 = "Missing shared pairing agent";
        goto LABEL_24;
      }
LABEL_25:

      v59 = sub_1000AAC04();
      v60 = swift_allocError(&type metadata for DSKBLE.BLEError, v59, 0, 0);
      *v61 = 2;
      sub_1000C57FC(v60);
      v62 = v60;
LABEL_35:
      swift_errorRelease(v62);
LABEL_36:
      swift_release(v33);
      return;
    }
    v38 = OBJC_IVAR____TtC10seserviced13DSKBLEPairing_state;
    if (v103[OBJC_IVAR____TtC10seserviced13DSKBLEPairing_state] != 2)
    {
      v63 = v103;
      v64 = Logger.logObject.getter(v63);
      v66 = static os_log_type_t.error.getter(v64, v65);
      if (os_log_type_enabled(v64, v66))
      {
        v67 = (uint8_t *)swift_slowAlloc(12, -1);
        v68 = swift_slowAlloc(32, -1);
        *(_DWORD *)v67 = 136315138;
        v104[0] = v68;
        LOBYTE(v106) = v37[v38];
        v69 = String.init<A>(describing:)(&v106, &type metadata for DSKBLEPairing.State);
        v71 = v70;
        v106 = sub_1001C56EC(v69, v70, v104);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, &v107, v67 + 4, v67 + 12);

        swift_bridgeObjectRelease(v71);
        _os_log_impl((void *)&_mh_execute_header, v64, v66, "Peripheral requested pairing in wrong state %s", v67, 0xCu);
        swift_arrayDestroy(v68, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v68, -1, -1);
        swift_slowDealloc(v67, -1, -1);
      }
      else
      {

      }
      v88 = sub_1000AAC04();
      v89 = swift_allocError(&type metadata for DSKBLE.BLEError, v88, 0, 0);
      *v90 = 2;
      sub_1000C57FC(v89);
      v62 = v89;
      goto LABEL_35;
    }
    v39 = v33[3];
    if (v39 >> 60 == 15)
    {
      v40 = Logger.logObject.getter(v36);
      v42 = static os_log_type_t.error.getter(v40, v41);
      if (os_log_type_enabled(v40, v42))
      {
        v43 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v43 = 0;
        v44 = "Missing OOB data";
LABEL_24:
        _os_log_impl((void *)&_mh_execute_header, v40, v42, v44, v43, 2u);
        swift_slowDealloc(v43, -1, -1);
        goto LABEL_25;
      }
      goto LABEL_25;
    }
    v72 = v33[2];
    v73 = sub_100063C8C(v72, v33[3]);
    v74 = Logger.logObject.getter(v73);
    v78 = v74;
    v79 = (uint64_t)v102;
    if (v102 != (uint8_t *)5)
    {
      v91 = static os_log_type_t.error.getter(v74, v75);
      if (os_log_type_enabled(v78, v91))
      {
        v92 = (uint8_t *)swift_slowAlloc(12, -1);
        v93 = swift_slowAlloc(32, -1);
        v104[0] = v93;
        *(_DWORD *)v92 = 136315138;
        v101 = v92 + 4;
        v106 = v79;
        type metadata accessor for CBPairingType(0);
        v95 = String.init<A>(describing:)(&v106, v94);
        v97 = v96;
        v106 = sub_1001C56EC(v95, v96, v104);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, &v107, v101, v92 + 12);
        swift_bridgeObjectRelease(v97);
        _os_log_impl((void *)&_mh_execute_header, v78, v91, "Peer requested unsupported pairing type %s", v92, 0xCu);
        swift_arrayDestroy(v93, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v93, -1, -1);
        swift_slowDealloc(v92, -1, -1);
      }

      v98 = sub_1000AAC04();
      v99 = swift_allocError(&type metadata for DSKBLE.BLEError, v98, 0, 0);
      *v100 = 2;
      sub_1000C57FC(v99);
      swift_errorRelease(v99);
      goto LABEL_40;
    }
    v80 = static os_log_type_t.info.getter(v74, v75, v76, v77);
    if (os_log_type_enabled(v78, v80))
    {
      v81 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v81 = 0;
      _os_log_impl((void *)&_mh_execute_header, v78, v80, "Responding to pairing request with OOB data", v81, 2u);
      swift_slowDealloc(v81, -1, -1);
    }

    v82 = v101;
    if (v101)
    {
      v83 = sub_100063D3C(&qword_1003460E0);
      inited = swift_initStackObject(v83, v105);
      *(_OWORD *)(inited + 16) = xmmword_1002888E0;
      v104[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(CBPairingAgentPairingDataOOBTKKey);
      v104[1] = v85;
      AnyHashable.init<A>(_:)(v104, &type metadata for String, &protocol witness table for String);
      *(_QWORD *)(inited + 96) = &type metadata for Data;
      *(_QWORD *)(inited + 72) = v72;
      *(_QWORD *)(inited + 80) = v39;
      sub_100063C8C(v72, v39);
      v86 = sub_10017C368(inited);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v86);
      -[uint8_t respondToPairingRequest:type:accept:data:](v82, "respondToPairingRequest:type:accept:data:", a2, 5, 1, isa);

LABEL_40:
      sub_10006B9B4(v72, v39);
      goto LABEL_36;
    }
    goto LABEL_44;
  }
  swift_release(v33);
  v25 = v103;
LABEL_15:
  v45 = a2;
  v46 = Logger.logObject.getter(v45);
  v48 = static os_log_type_t.error.getter(v46, v47);
  if (!os_log_type_enabled(v46, v48))
  {

    goto LABEL_19;
  }
  v49 = (uint8_t *)swift_slowAlloc(12, -1);
  v50 = swift_slowAlloc(32, -1);
  v104[0] = v50;
  *(_DWORD *)v49 = 136315138;
  if (!a2)
  {
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    return;
  }
  v51 = v50;
  v102 = v49 + 4;
  v52 = objc_msgSend(v45, "identifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  v53 = sub_1000C69C4((unint64_t *)&qword_100344CC8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v54 = dispatch thunk of CustomStringConvertible.description.getter(v4, v53);
  v56 = v55;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
  v106 = sub_1001C56EC(v54, v56, v104);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, &v107, v102, v49 + 12);

  swift_bridgeObjectRelease(v56);
  _os_log_impl((void *)&_mh_execute_header, v46, v48, "Peripheral did request pairing for unknown request %s", v49, 0xCu);
  swift_arrayDestroy(v51, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v51, -1, -1);
  swift_slowDealloc(v49, -1, -1);

  v25 = v103;
LABEL_19:
  v57 = *(void **)&v25[OBJC_IVAR____TtC10seserviced13DSKBLEPairing_pairingAgent];
  if (v57)
    objc_msgSend(v57, "setOOBPairingEnabled:forPeer:", 0, v45);
  sub_1000C57FC(0);
}

void sub_1000E3B7C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  id v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  os_log_type_t v32;
  _BOOL4 v33;
  uint8_t *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  char *v45;
  id v46;
  char *v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  NSString v53;
  uint64_t v54;
  void (*v55)(_QWORD, uint64_t);
  uint64_t v56;
  id v57;
  NSObject *v58;
  uint64_t v59;
  os_log_type_t v60;
  uint64_t v61;
  uint8_t *v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  void *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v7 = __chkstk_darwin(v4, v6);
  v75 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7, v9);
  v12 = (char *)&v72 - v11;
  v14 = __chkstk_darwin(v10, v13);
  v79 = (char *)&v72 - v15;
  __chkstk_darwin(v14, v16);
  v18 = (char *)&v72 - v17;
  v19 = type metadata accessor for DispatchPredicate(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19, v21);
  v23 = (uint64_t *)((char *)&v72 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v24 = qword_100354EE8;
  *v23 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v20 + 104))(v23, enum case for DispatchPredicate.onQueue(_:), v19);
  v25 = (id)v24;
  LOBYTE(v24) = _dispatchPreconditionTest(_:)(v23);
  (*(void (**)(_QWORD *, uint64_t))(v20 + 8))(v23, v19);
  if ((v24 & 1) == 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  v76 = v12;
  v26 = v2 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_logger;
  v27 = a1;
  v77 = v26;
  v28 = Logger.logObject.getter(v27);
  v32 = static os_log_type_t.info.getter(v28, v29, v30, v31);
  v33 = os_log_type_enabled(v28, v32);
  v78 = a1;
  if (v33)
  {
    v73 = v2;
    v74 = v5;
    v34 = (uint8_t *)swift_slowAlloc(12, -1);
    v72 = swift_slowAlloc(32, -1);
    v81 = v72;
    *(_DWORD *)v34 = 136315138;
    if (!a1)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v35 = objc_msgSend(v27, "identifier");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v36 = sub_1000C69C4((unint64_t *)&qword_100344CC8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v37 = dispatch thunk of CustomStringConvertible.description.getter(v4, v36);
    v39 = v38;
    v40 = v4;
    v41 = v74;
    (*(void (**)(char *, uint64_t))(v74 + 8))(v18, v40);
    v80 = sub_1001C56EC(v37, v39, &v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, &v81, v34 + 4, v34 + 12);

    v42 = v39;
    v5 = v41;
    v4 = v40;
    swift_bridgeObjectRelease(v42);
    _os_log_impl((void *)&_mh_execute_header, v28, v32, "Pairing completed for %s", v34, 0xCu);
    v43 = v72;
    swift_arrayDestroy(v72, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1, -1);
    swift_slowDealloc(v34, -1, -1);

    v2 = v73;
  }
  else
  {

  }
  v44 = *(_QWORD **)(v2 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_currentPairingRequest);
  v45 = v79;
  if (!v44)
  {
LABEL_17:
    v57 = v27;
    v58 = Logger.logObject.getter(v57);
    v60 = static os_log_type_t.error.getter(v58, v59);
    if (!os_log_type_enabled(v58, v60))
    {

      goto LABEL_21;
    }
    v61 = v5;
    v62 = (uint8_t *)swift_slowAlloc(12, -1);
    v63 = swift_slowAlloc(32, -1);
    v81 = v63;
    *(_DWORD *)v62 = 136315138;
    if (v78)
    {
      v64 = v63;
      v65 = objc_msgSend(v57, "identifier");
      v66 = v75;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      v67 = sub_1000C69C4((unint64_t *)&qword_100344CC8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v68 = dispatch thunk of CustomStringConvertible.description.getter(v4, v67);
      v69 = v66;
      v71 = v70;
      (*(void (**)(char *, uint64_t))(v61 + 8))(v69, v4);
      v80 = sub_1001C56EC(v68, v71, &v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, &v81, v62 + 4, v62 + 12);

      swift_bridgeObjectRelease(v71);
      _os_log_impl((void *)&_mh_execute_header, v58, v60, "Peripheral pairing completed for unknown request %s", v62, 0xCu);
      swift_arrayDestroy(v64, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v64, -1, -1);
      swift_slowDealloc(v62, -1, -1);
LABEL_21:

      return;
    }
LABEL_25:
    __break(1u);
    return;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v79, v44[4] + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier, v4);
  if (!v78)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  swift_retain(v44);
  v46 = objc_msgSend(v27, "identifier");
  v47 = v76;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  LOBYTE(v46) = static UUID.== infix(_:_:)(v45, v47);
  v48 = *(void (**)(char *, uint64_t))(v5 + 8);
  v48(v47, v4);
  v48(v45, v4);
  if ((v46 & 1) == 0)
  {
    swift_release(v44);
    goto LABEL_17;
  }
  v49 = v44[5];
  v50 = *(_QWORD *)(v49 + 16);
  if (v50)
  {
    swift_bridgeObjectRetain_n(v44[5], 2);
    v51 = (_QWORD *)(v49 + 40);
    do
    {
      v52 = *v51;
      swift_bridgeObjectRetain(*v51);
      v53 = String._bridgeToObjectiveC()();
      objc_msgSend(v27, "tag:", v53);
      swift_bridgeObjectRelease(v52);

      v51 += 2;
      --v50;
    }
    while (v50);
    swift_bridgeObjectRelease_n(v49, 2);
  }
  sub_1000C57FC(0);
  v55 = (void (*)(_QWORD, uint64_t))v44[8];
  v54 = v44[9];
  v56 = v44[4];
  swift_retain(v54);
  swift_retain(v56);
  v55(0, v56);
  swift_release(v44);
  swift_release(v54);
  swift_release(v56);
}

void sub_1000E41C4(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  id v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  id v43;
  char *v44;
  void (*v45)(char *, uint64_t);
  id v46;
  NSObject *v47;
  uint64_t v48;
  os_log_type_t v49;
  uint64_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint8_t *v61;
  void *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v65 = a2;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v7 = __chkstk_darwin(v4, v6);
  v9 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v7, v10);
  v66 = (char *)&v60 - v12;
  v14 = __chkstk_darwin(v11, v13);
  v68 = (char *)&v60 - v15;
  __chkstk_darwin(v14, v16);
  v18 = (char *)&v60 - v17;
  v19 = type metadata accessor for DispatchPredicate(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19, v21);
  v23 = (uint64_t *)((char *)&v60 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v24 = qword_100354EE8;
  *v23 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v20 + 104))(v23, enum case for DispatchPredicate.onQueue(_:), v19);
  v25 = (id)v24;
  LOBYTE(v24) = _dispatchPreconditionTest(_:)(v23);
  (*(void (**)(_QWORD *, uint64_t))(v20 + 8))(v23, v19);
  if ((v24 & 1) == 0)
  {
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v69 = v2;
  v26 = v2 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_logger;
  v27 = a1;
  v67 = v26;
  v28 = Logger.logObject.getter(v27);
  v32 = static os_log_type_t.info.getter(v28, v29, v30, v31);
  if (os_log_type_enabled(v28, v32))
  {
    v63 = v9;
    v64 = v5;
    v33 = (uint8_t *)swift_slowAlloc(12, -1);
    v34 = swift_slowAlloc(32, -1);
    v71 = v34;
    *(_DWORD *)v33 = 136315138;
    v62 = a1;
    if (!a1)
    {
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
    v35 = v34;
    v61 = v33 + 4;
    v36 = objc_msgSend(v27, "identifier");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v37 = sub_1000C69C4((unint64_t *)&qword_100344CC8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v38 = dispatch thunk of CustomStringConvertible.description.getter(v4, v37);
    v40 = v39;
    v5 = v64;
    (*(void (**)(char *, uint64_t))(v64 + 8))(v18, v4);
    v70 = sub_1001C56EC(v38, v40, &v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v61, v33 + 12);

    swift_bridgeObjectRelease(v40);
    _os_log_impl((void *)&_mh_execute_header, v28, v32, "Pairing failed for %s", v33, 0xCu);
    swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v33, -1, -1);

    a1 = v62;
    v9 = v63;
  }
  else
  {

  }
  v41 = v68;
  v42 = *(_QWORD *)(v69 + OBJC_IVAR____TtC10seserviced13DSKBLEPairing_currentPairingRequest);
  if (v42)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v68, *(_QWORD *)(v42 + 32) + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier, v4);
    if (a1)
    {
      swift_retain(v42);
      v43 = objc_msgSend(v27, "identifier");
      v44 = v66;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      LOBYTE(v43) = static UUID.== infix(_:_:)(v41, v44);
      v45 = *(void (**)(char *, uint64_t))(v5 + 8);
      v45(v44, v4);
      v45(v41, v4);
      if ((v43 & 1) != 0)
      {
        sub_1000C57FC(v65);
        swift_release(v42);
        return;
      }
      swift_release(v42);
      goto LABEL_13;
    }
    goto LABEL_19;
  }
LABEL_13:
  v46 = v27;
  v47 = Logger.logObject.getter(v46);
  v49 = static os_log_type_t.error.getter(v47, v48);
  if (!os_log_type_enabled(v47, v49))
  {

    goto LABEL_17;
  }
  v50 = v5;
  v51 = (uint8_t *)swift_slowAlloc(12, -1);
  v52 = swift_slowAlloc(32, -1);
  v71 = v52;
  *(_DWORD *)v51 = 136315138;
  if (a1)
  {
    v53 = v52;
    v54 = objc_msgSend(v46, "identifier");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v55 = sub_1000C69C4((unint64_t *)&qword_100344CC8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v56 = dispatch thunk of CustomStringConvertible.description.getter(v4, v55);
    v57 = v9;
    v59 = v58;
    (*(void (**)(char *, uint64_t))(v50 + 8))(v57, v4);
    v70 = sub_1001C56EC(v56, v59, &v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v51 + 4, v51 + 12);

    swift_bridgeObjectRelease(v59);
    _os_log_impl((void *)&_mh_execute_header, v47, v49, "Got peerDidCompletePairing for unknown request %s", v51, 0xCu);
    swift_arrayDestroy(v53, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v53, -1, -1);
    swift_slowDealloc(v51, -1, -1);
LABEL_17:

    return;
  }
LABEL_21:
  __break(1u);
}

void sub_1000E4748(void *a1)
{
  _BYTE *v1;
  _BYTE *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  id v25;
  char *v26;
  void *v27;
  id v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  os_log_type_t v33;
  _BOOL4 v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  id v52;
  char *v53;
  void (*v54)(char *, uint64_t);
  _BYTE *v55;
  NSObject *v56;
  uint64_t v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  id v64;
  NSObject *v65;
  uint64_t v66;
  os_log_type_t v67;
  uint64_t v68;
  uint8_t *v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint8_t *v80;
  char *v81;
  _BYTE *v82;
  char *v83;
  char *v84;
  char *v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v7 = __chkstk_darwin(v4, v6);
  v9 = (char *)&v79 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v7, v10);
  v84 = (char *)&v79 - v12;
  v14 = __chkstk_darwin(v11, v13);
  v85 = (char *)&v79 - v15;
  __chkstk_darwin(v14, v16);
  v18 = (char *)&v79 - v17;
  v19 = type metadata accessor for DispatchPredicate(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19, v21);
  v23 = (uint64_t *)((char *)&v79 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v24 = qword_100354EE8;
  *v23 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v20 + 104))(v23, enum case for DispatchPredicate.onQueue(_:), v19);
  v25 = (id)v24;
  LOBYTE(v24) = _dispatchPreconditionTest(_:)(v23);
  (*(void (**)(_QWORD *, uint64_t))(v20 + 8))(v23, v19);
  if ((v24 & 1) == 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  v83 = v9;
  v26 = &v2[OBJC_IVAR____TtC10seserviced13DSKBLEPairing_logger];
  v27 = a1;
  v28 = a1;
  v29 = Logger.logObject.getter(v28);
  v33 = static os_log_type_t.info.getter(v29, v30, v31, v32);
  v34 = os_log_type_enabled(v29, v33);
  v86 = v27;
  if (v34)
  {
    v81 = v26;
    v82 = v2;
    v35 = (uint8_t *)swift_slowAlloc(12, -1);
    v36 = swift_slowAlloc(32, -1);
    v88 = v36;
    *(_DWORD *)v35 = 136315138;
    if (v27)
    {
      v37 = v36;
      v80 = v35 + 4;
      v38 = objc_msgSend(v28, "identifier");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      v39 = sub_1000C69C4((unint64_t *)&qword_100344CC8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v40 = dispatch thunk of CustomStringConvertible.description.getter(v4, v39);
      v41 = v4;
      v43 = v42;
      v44 = v5;
      v45 = *(void (**)(char *, uint64_t))(v5 + 8);
      v46 = v41;
      v45(v18, v41);
      v87 = sub_1001C56EC(v40, v43, &v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, &v88, v80, v35 + 12);

      swift_bridgeObjectRelease(v43);
      _os_log_impl((void *)&_mh_execute_header, v29, v33, "Peripheral unpaired successfully %s", v35, 0xCu);
      swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v35, -1, -1);

      v2 = v82;
      goto LABEL_8;
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v44 = v5;
  v46 = v4;

LABEL_8:
  v47 = OBJC_IVAR____TtC10seserviced13DSKBLEPairing_state;
  if (v2[OBJC_IVAR____TtC10seserviced13DSKBLEPairing_state] == 3)
  {
    v48 = *(_QWORD *)&v2[OBJC_IVAR____TtC10seserviced13DSKBLEPairing_currentUnpairingRequest];
    v49 = v46;
    v50 = v44;
    if (!v48)
    {
LABEL_18:
      v64 = v28;
      v65 = Logger.logObject.getter(v64);
      v67 = static os_log_type_t.error.getter(v65, v66);
      if (!os_log_type_enabled(v65, v67))
      {

        goto LABEL_22;
      }
      v68 = v50;
      v69 = (uint8_t *)swift_slowAlloc(12, -1);
      v70 = swift_slowAlloc(32, -1);
      v88 = v70;
      *(_DWORD *)v69 = 136315138;
      if (v86)
      {
        v71 = v70;
        v72 = objc_msgSend(v64, "identifier");
        v73 = v83;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        v74 = sub_1000C69C4((unint64_t *)&qword_100344CC8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v75 = dispatch thunk of CustomStringConvertible.description.getter(v49, v74);
        v76 = v49;
        v78 = v77;
        (*(void (**)(char *, uint64_t))(v68 + 8))(v73, v76);
        v87 = sub_1001C56EC(v75, v78, &v88);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, &v88, v69 + 4, v69 + 12);

        swift_bridgeObjectRelease(v78);
        _os_log_impl((void *)&_mh_execute_header, v65, v67, "Unexpected peripheral unpaired %s", v69, 0xCu);
        swift_arrayDestroy(v71, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v71, -1, -1);
        swift_slowDealloc(v69, -1, -1);
LABEL_22:

        return;
      }
      goto LABEL_26;
    }
    v51 = v85;
    (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v85, v48 + OBJC_IVAR____TtCC10seserviced13DSKBLEPairing19BLEUnpairingRequest_peerIdentifier, v49);
    if (v86)
    {
      swift_retain(v48);
      v52 = objc_msgSend(v28, "identifier");
      v53 = v84;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      LOBYTE(v52) = static UUID.== infix(_:_:)(v51, v53);
      v54 = *(void (**)(char *, uint64_t))(v50 + 8);
      v54(v53, v49);
      v54(v51, v49);
      if ((v52 & 1) != 0)
      {
        sub_1000C57FC(0);
        swift_release(v48);
        return;
      }
      swift_release(v48);
      goto LABEL_18;
    }
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    return;
  }
  v55 = v2;
  v56 = Logger.logObject.getter(v55);
  v58 = static os_log_type_t.error.getter(v56, v57);
  if (os_log_type_enabled(v56, v58))
  {
    v59 = (uint8_t *)swift_slowAlloc(12, -1);
    v60 = swift_slowAlloc(32, -1);
    *(_DWORD *)v59 = 136315138;
    v88 = v60;
    LOBYTE(v87) = v2[v47];
    v61 = String.init<A>(describing:)(&v87, &type metadata for DSKBLEPairing.State);
    v63 = v62;
    v87 = sub_1001C56EC(v61, v62, &v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, &v88, v59 + 4, v59 + 12);

    swift_bridgeObjectRelease(v63);
    _os_log_impl((void *)&_mh_execute_header, v56, v58, "Peripheral unpaired in wrong state %s", v59, 0xCu);
    swift_arrayDestroy(v60, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v60, -1, -1);
    swift_slowDealloc(v59, -1, -1);
  }
  else
  {

  }
}

uint64_t sub_1000E4E28()
{
  return sub_1000C3870();
}

uint64_t sub_1000E4E48(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100063D3C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000E4E8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  sub_100063CD0(*(_QWORD *)(v0 + v6), *(_QWORD *)(v0 + v6 + 8));

  return swift_deallocObject(v0, v7 + 8, v5);
}

uint64_t sub_1000E4F30()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1000C1B38(*(_QWORD *)(v0 + 16), v0 + v2, *(_QWORD *)(v0 + v3), *(NSObject **)(v0 + v3 + 8), *(void **)(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1000E4F84()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_1000E4FB0()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "readValueForCharacteristic:", *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000E4FC0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

void sub_1000E4FF4()
{
  uint64_t v0;

  sub_1000BEAB8(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1000E5000()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1000E5024(uint64_t a1)
{
  uint64_t v1;

  sub_1000B2A88(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1000E502C()
{
  return sub_1000B355C();
}

uint64_t sub_1000E504C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1000E5090(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100063D3C(&qword_100346258);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t getEnumTagSinglePayload for DSKBLE.BLEError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for DSKBLE.BLEError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1000E51B4 + 4 * byte_1002892FD[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1000E51E8 + 4 * byte_1002892F8[v4]))();
}

uint64_t sub_1000E51E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E51F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000E51F8);
  return result;
}

uint64_t sub_1000E5204(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000E520CLL);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1000E5210(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E5218(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DSKBLE.BLEError()
{
  return &type metadata for DSKBLE.BLEError;
}

unint64_t sub_1000E5238()
{
  unint64_t result;

  result = qword_100346260;
  if (!qword_100346260)
  {
    result = swift_getWitnessTable(&unk_10028994C, &type metadata for DSKBLE.BLEError);
    atomic_store(result, (unint64_t *)&qword_100346260);
  }
  return result;
}

uint64_t sub_1000E53FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  uint64_t v11;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  Class isa;
  Class v31;
  Class v32;
  Class v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  id v45;
  void *v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE v55[24];

  v14 = (uint64_t *)(v11 + OBJC_IVAR____TtC10seserviced35SESKeyDesignationStorageCoordinator_keys);
  swift_beginAccess(v11 + OBJC_IVAR____TtC10seserviced35SESKeyDesignationStorageCoordinator_keys, v55, 33, 0);
  v15 = *v14;
  v53 = a3;
  v54 = v11;
  if ((unint64_t)*v14 >> 62)
  {
    if (v15 < 0)
      v37 = *v14;
    else
      v37 = v15 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v15);
    v17 = a11;
    if (_CocoaArrayWrapper.endIndex.getter(v37))
      goto LABEL_3;
LABEL_8:
    swift_bridgeObjectRelease(v15);
    v24 = *v14;
    if ((unint64_t)*v14 >> 62)
    {
      if (v24 < 0)
        v39 = *v14;
      else
        v39 = v24 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*v14);
      v18 = _CocoaArrayWrapper.endIndex.getter(v39);
      swift_bridgeObjectRelease(v24);
    }
    else
    {
      v18 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    goto LABEL_12;
  }
  v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v15);
  v17 = a11;
  if (!v16)
    goto LABEL_8;
LABEL_3:
  v18 = 0;
  if ((v15 & 0xC000000000000001) != 0)
    v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v15);
  else
    v19 = *(id *)(v15 + 32);
  v20 = v19;
  if (objc_msgSend(v19, "designation") != v17)
  {
    v21 = objc_msgSend(v20, "keyIdentifier");
    static Data._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v23 = v22;

    __asm { BR              X10 }
  }
  swift_bridgeObjectRelease(v15);

  a8 = 1;
  v25 = *v14;
  if (!((unint64_t)*v14 >> 62))
  {
    if (*(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10) == 1)
      goto LABEL_12;
LABEL_35:
    v42 = 5;
    while (1)
    {
      v43 = v42 - 4;
      v44 = *v14;
      if ((*v14 & 0xC000000000000001) != 0)
      {
        v45 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v42 - 4, v44);
      }
      else
      {
        if ((v43 & 0x8000000000000000) != 0)
        {
          __break(1u);
LABEL_54:
          __break(1u);
LABEL_55:
          __break(1u);
          JUMPOUT(0x1000E6A54);
        }
        if (v43 >= *(_QWORD *)((v44 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_54;
        v45 = *(id *)(v44 + 8 * v42);
      }
      v46 = v45;
      if (objc_msgSend(v45, "designation") != v17)
      {
        v47 = objc_msgSend(v46, "keyIdentifier");
        static Data._unconditionallyBridgeFromObjectiveC(_:)(v47);
        v49 = v48;

        __asm { BR              X10 }
      }

      a8 = v42 - 3;
      if (__OFADD__(v43, 1))
        goto LABEL_55;
      v50 = *v14;
      if ((unint64_t)*v14 >> 62)
      {
        if (v50 < 0)
          v52 = *v14;
        else
          v52 = v50 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(*v14);
        v51 = _CocoaArrayWrapper.endIndex.getter(v52);
        swift_bridgeObjectRelease(v50);
      }
      else
      {
        v51 = *(_QWORD *)((v50 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      ++v42;
      if (a8 == v51)
        goto LABEL_12;
    }
  }
  if (v25 < 0)
    v40 = *v14;
  else
    v40 = v25 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v25);
  v41 = _CocoaArrayWrapper.endIndex.getter(v40);
  swift_bridgeObjectRelease(v25);
  if (v41 != 1)
    goto LABEL_35;
LABEL_12:
  v26 = *v14;
  if (!((unint64_t)*v14 >> 62))
  {
    v27 = v26 & 0xFFFFFFFFFFFFF8;
    v28 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v28 >= v18)
      goto LABEL_14;
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v26 < 0)
    v38 = *v14;
  else
    v38 = v26 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v14);
  v28 = _CocoaArrayWrapper.endIndex.getter(v38);
  swift_bridgeObjectRelease(v26);
  if (v28 < v18)
    goto LABEL_25;
LABEL_14:
  sub_1001F6C58(v18, v28);
  swift_endAccess(v55);
  v29 = (void *)objc_opt_self(SESDesignatedKey);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v31 = Data._bridgeToObjectiveC()().super.isa;
  v32 = Data._bridgeToObjectiveC()().super.isa;
  v33 = Data._bridgeToObjectiveC()().super.isa;
  v26 = (uint64_t)objc_msgSend(v29, "withAID:slotNumber:keyIdentifier:assetACL:assetACLAttestation:operationApprovalVersion:designation:", isa, v53, v31, v32, v33, a10, v17);

  v34 = swift_beginAccess(v14, v55, 33, 0);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v34);
  a8 = *(_QWORD *)((*v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v27 = *(_QWORD *)((*v14 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (a8 >= v27 >> 1)
LABEL_26:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, a8 + 1, 1);
  v35 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(a8, v26);
  specialized Array._endMutation()(v35);
  result = swift_endAccess(v55);
  *(_BYTE *)(v54 + OBJC_IVAR____TtC10seserviced35SESKeyDesignationStorageCoordinator_mutated) = 1;
  return result;
}

uint64_t sub_1000E6E68(id a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  id v22;
  id v23;
  int isUniquelyReferenced_nonNull_bridgeObject;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[24];

  v2 = v1;
  v4 = (uint64_t *)(v1 + OBJC_IVAR____TtC10seserviced35SESKeyDesignationStorageCoordinator_keys);
  swift_beginAccess(v4, v42, 33, 0);
  v5 = *v4;
  if ((unint64_t)*v4 >> 62)
    goto LABEL_67;
  v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(*v4);
  while (v6)
  {
    v7 = 0;
    while (1)
    {
      if ((v5 & 0xC000000000000001) != 0)
        v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v5);
      else
        v8 = *(id *)(v5 + 8 * v7 + 32);
      v9 = v8;
      v10 = objc_msgSend(v8, "designation");

      if (v10 == a1)
      {
        swift_bridgeObjectRelease(v5);
        v15 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
          __break(1u);
        }
        else
        {
          v5 = *v4;
          if (!((unint64_t)*v4 >> 62))
          {
            if (v15 == *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_12;
            goto LABEL_18;
          }
        }
        if (v5 < 0)
          v40 = v5;
        else
          v40 = v5 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v5);
        v41 = _CocoaArrayWrapper.endIndex.getter(v40);
        swift_bridgeObjectRelease(v5);
        if (v15 == v41)
          goto LABEL_12;
LABEL_18:
        v16 = v7 + 5;
        while (2)
        {
          v5 = v16 - 4;
          v17 = *v4;
          if ((*v4 & 0xC000000000000001) != 0)
          {
            v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v16 - 4, v17);
          }
          else
          {
            if (v5 < 0)
              goto LABEL_57;
            if ((unint64_t)v5 >= *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_58;
            v18 = *(id *)(v17 + 8 * v16);
          }
          v19 = v18;
          v20 = objc_msgSend(v18, "designation");

          if (v20 == a1)
            goto LABEL_44;
          if (v5 == v7)
            goto LABEL_43;
          v21 = *v4;
          if ((*v4 & 0xC000000000000001) != 0)
          {
            v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, *v4);
            v21 = *v4;
            if ((*v4 & 0xC000000000000001) == 0)
              goto LABEL_29;
          }
          else
          {
            if (v7 < 0)
              goto LABEL_61;
            if ((unint64_t)v7 >= *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_62;
            v22 = *(id *)(v21 + 8 * v7 + 32);
            if ((v21 & 0xC000000000000001) == 0)
            {
LABEL_29:
              if (v5 < 0)
                goto LABEL_63;
              if ((unint64_t)v5 >= *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10))
                goto LABEL_64;
              v23 = *(id *)(v21 + 8 * v16);
LABEL_32:
              isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(v21);
              *v4 = v21;
              if (!isUniquelyReferenced_nonNull_bridgeObject || v21 < 0 || (v21 & 0x4000000000000000) != 0)
              {
                v21 = sub_1000D6A90(v21);
                *v4 = v21;
              }
              v25 = *(void **)((v21 & 0xFFFFFFFFFFFFFF8) + 8 * v7 + 0x20);
              *(_QWORD *)((v21 & 0xFFFFFFFFFFFFFF8) + 8 * v7 + 0x20) = v23;

              specialized Array._endMutation()(v26);
              v27 = *v4;
              v28 = swift_isUniquelyReferenced_nonNull_bridgeObject(*v4);
              *v4 = v27;
              if (!v28 || v27 < 0 || (v27 & 0x4000000000000000) != 0)
              {
                v27 = sub_1000D6A90(v27);
                *v4 = v27;
              }
              if (v5 < 0)
                goto LABEL_65;
              v29 = v27 & 0xFFFFFFFFFFFFFF8;
              if ((unint64_t)v5 >= *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10))
                goto LABEL_66;
              v30 = *(void **)(v29 + 8 * v16);
              *(_QWORD *)(v29 + 8 * v16) = v22;

              specialized Array._endMutation()(v31);
LABEL_43:
              if (__OFADD__(v7++, 1))
                goto LABEL_60;
LABEL_44:
              v33 = v16 - 3;
              if (__OFADD__(v5, 1))
                goto LABEL_59;
              v34 = *v4;
              if ((unint64_t)*v4 >> 62)
              {
                if (v34 < 0)
                  v36 = *v4;
                else
                  v36 = v34 & 0xFFFFFFFFFFFFFF8;
                swift_bridgeObjectRetain(*v4);
                v35 = _CocoaArrayWrapper.endIndex.getter(v36);
                swift_bridgeObjectRelease(v34);
              }
              else
              {
                v35 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFF8) + 0x10);
              }
              ++v16;
              if (v33 == v35)
                goto LABEL_12;
              continue;
            }
          }
          break;
        }
        v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v16 - 4, v21);
        v21 = *v4;
        goto LABEL_32;
      }
      v11 = v7 + 1;
      if (__OFADD__(v7, 1))
        break;
      ++v7;
      if (v11 == v6)
        goto LABEL_10;
    }
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    if (v5 < 0)
      v37 = v5;
    else
      v37 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v6 = _CocoaArrayWrapper.endIndex.getter(v37);
  }
LABEL_10:
  swift_bridgeObjectRelease(v5);
  v12 = *v4;
  if ((unint64_t)*v4 >> 62)
    goto LABEL_77;
  v7 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_12:
  while (1)
  {
    v12 = *v4;
    if ((unint64_t)*v4 >> 62)
      break;
    v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v13 >= v7)
      goto LABEL_14;
LABEL_76:
    __break(1u);
LABEL_77:
    if (v12 < 0)
      v39 = v12;
    else
      v39 = v12 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v12);
    v7 = _CocoaArrayWrapper.endIndex.getter(v39);
    swift_bridgeObjectRelease(v12);
  }
  if (v12 < 0)
    v38 = *v4;
  else
    v38 = v12 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v4);
  v13 = _CocoaArrayWrapper.endIndex.getter(v38);
  swift_bridgeObjectRelease(v12);
  if (v13 < v7)
    goto LABEL_76;
LABEL_14:
  sub_1001F6C58(v7, v13);
  result = swift_endAccess(v42);
  *(_BYTE *)(v2 + OBJC_IVAR____TtC10seserviced35SESKeyDesignationStorageCoordinator_mutated) = 1;
  return result;
}

id sub_1000E73BC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SESKeyDesignationStorageCoordinator();
  return objc_msgSendSuper2(&v2, "dealloc");
}

BOOL static SecureElementType.< infix(_:_:)(unint64_t a1, unint64_t a2)
{
  return a1 < a2;
}

unint64_t sub_1000E740C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1003462D0;
  if (!qword_1003462D0)
  {
    type metadata accessor for SecureElementType(255);
    result = swift_getWitnessTable(&unk_1002882A0, v1);
    atomic_store(result, (unint64_t *)&qword_1003462D0);
  }
  return result;
}

BOOL sub_1000E7454(_QWORD *a1, _QWORD *a2)
{
  return *a1 < *a2;
}

BOOL sub_1000E7468(_QWORD *a1, _QWORD *a2)
{
  return *a2 >= *a1;
}

BOOL sub_1000E747C(_QWORD *a1, _QWORD *a2)
{
  return *a1 >= *a2;
}

BOOL sub_1000E7490(_QWORD *a1, _QWORD *a2)
{
  return *a2 < *a1;
}

uint64_t type metadata accessor for SESKeyDesignationStorageCoordinator()
{
  return objc_opt_self(_TtC10seserviced35SESKeyDesignationStorageCoordinator);
}

uint64_t sub_1000E74C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v8 = a1;
    else
      v8 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    if (_CocoaArrayWrapper.endIndex.getter(v8))
    {
LABEL_3:
      if ((a1 & 0xC000000000000001) != 0)
        v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
      else
        v4 = *(id *)(a1 + 32);
      v5 = objc_msgSend(v4, "keyIdentifier", HIDWORD(a2) - (int)a2);
      static Data._unconditionallyBridgeFromObjectiveC(_:)(v5);
      v7 = v6;

      __asm { BR              X10 }
    }
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v3)
      goto LABEL_3;
  }
  swift_bridgeObjectRelease(a1);
  return 0;
}

id sub_1000E7A80()
{
  id result;
  id v1;
  void *v2;
  unint64_t v3;
  uint64_t v4;
  id v5;
  objc_class *v6;
  _BYTE *v7;
  objc_super v8;
  id v9;

  v9 = 0;
  result = (id)SESKeyGetDesignatedKeys(&v9);
  v1 = v9;
  if (result)
  {
    v2 = result;
    v3 = sub_1000E7B88();
    v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);
    v5 = v1;

    v6 = (objc_class *)type metadata accessor for SESKeyDesignationStorageCoordinator();
    v7 = objc_allocWithZone(v6);
    v7[OBJC_IVAR____TtC10seserviced35SESKeyDesignationStorageCoordinator_mutated] = 0;
    *(_QWORD *)&v7[OBJC_IVAR____TtC10seserviced35SESKeyDesignationStorageCoordinator_keys] = v4;
    v8.receiver = v7;
    v8.super_class = v6;
    v1 = objc_msgSendSuper2(&v8, "init");

    return v1;
  }
  if (v9)
  {
    swift_willThrow(v9);
    return v1;
  }
  __break(1u);
  return result;
}

unint64_t sub_1000E7B88()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100346310;
  if (!qword_100346310)
  {
    v1 = objc_opt_self(SESDesignatedKey);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100346310);
  }
  return result;
}

uint64_t sub_1000E7BC4(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v7 = a1;
    else
      v7 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v8 = _CocoaArrayWrapper.endIndex.getter(v7);
    swift_bridgeObjectRelease(a1);
    if (v8)
    {
LABEL_3:
      if ((a1 & 0xC000000000000001) != 0)
        v2 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
      else
        v2 = *(id *)(a1 + 32);
      v3 = objc_msgSend(v2, "keyIdentifier");
      static Data._unconditionallyBridgeFromObjectiveC(_:)(v3);
      v5 = v4;

      __asm { BR              X10 }
    }
  }
  else if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  return 0;
}

uint64_t sub_1000E811C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t i;
  unint64_t v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  id v18;
  id v19;
  int isUniquelyReferenced_nonNull_bridgeObject;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v3 = *a1;
  v4 = swift_bridgeObjectRetain(*a1);
  v5 = sub_1000E7BC4(v4);
  v7 = v6;
  swift_bridgeObjectRelease(v3);
  if (v1)
    return v5;
  if ((v7 & 1) == 0)
  {
    v8 = v5 + 1;
    if (__OFADD__(v5, 1))
      goto LABEL_57;
    v7 = *a1;
    if ((unint64_t)*a1 >> 62)
    {
LABEL_58:
      if ((v7 & 0x8000000000000000) != 0)
        v34 = v7;
      else
        v34 = v7 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v7);
      v35 = _CocoaArrayWrapper.endIndex.getter(v34);
      swift_bridgeObjectRelease(v7);
      if (v8 != v35)
        goto LABEL_6;
    }
    else if (v8 != *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_6:
      for (i = v5 + 5; ; ++i)
      {
        v7 = i - 4;
        v10 = *a1;
        if ((*a1 & 0xC000000000000001) != 0)
        {
          v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v10);
        }
        else
        {
          if ((v7 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_48:
            __break(1u);
LABEL_49:
            __break(1u);
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
LABEL_55:
            __break(1u);
LABEL_56:
            __break(1u);
LABEL_57:
            __break(1u);
            goto LABEL_58;
          }
          if (v7 >= *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_48;
          v11 = *(id *)(v10 + 8 * i);
        }
        v12 = v11;
        v13 = objc_msgSend(v11, "keyIdentifier");
        v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v13);
        v8 = v15;

        sub_10007C23C(v14, v8);
        LOBYTE(v13) = v16;
        sub_100063CD0(v14, v8);

        if ((v13 & 1) == 0)
          break;
LABEL_32:
        v8 = i - 3;
        if (__OFADD__(v7, 1))
          goto LABEL_49;
        v29 = *a1;
        if ((unint64_t)*a1 >> 62)
        {
          if (v29 < 0)
            v31 = *a1;
          else
            v31 = v29 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(*a1);
          v30 = _CocoaArrayWrapper.endIndex.getter(v31);
          swift_bridgeObjectRelease(v29);
        }
        else
        {
          v30 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        if (v8 == v30)
          return v5;
      }
      if (v7 == v5)
      {
LABEL_31:
        if (__OFADD__(v5++, 1))
          goto LABEL_50;
        goto LABEL_32;
      }
      v17 = *a1;
      if ((*a1 & 0xC000000000000001) != 0)
      {
        v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, *a1);
        v17 = *a1;
        if ((*a1 & 0xC000000000000001) == 0)
        {
LABEL_17:
          if ((v7 & 0x8000000000000000) != 0)
            goto LABEL_53;
          if (v7 >= *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_54;
          v19 = *(id *)(v17 + 8 * i);
          goto LABEL_20;
        }
      }
      else
      {
        if ((v5 & 0x8000000000000000) != 0)
          goto LABEL_51;
        if (v5 >= *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_52;
        v18 = *(id *)(v17 + 8 * v5 + 32);
        if ((v17 & 0xC000000000000001) == 0)
          goto LABEL_17;
      }
      v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v17);
      v17 = *a1;
LABEL_20:
      isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(v17);
      *a1 = v17;
      if (!isUniquelyReferenced_nonNull_bridgeObject || v17 < 0 || (v17 & 0x4000000000000000) != 0)
      {
        v17 = sub_1000D6A90(v17);
        *a1 = v17;
      }
      v21 = *(void **)((v17 & 0xFFFFFFFFFFFFFF8) + 8 * v5 + 0x20);
      *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 8 * v5 + 0x20) = v19;

      specialized Array._endMutation()(v22);
      v23 = *a1;
      v24 = swift_isUniquelyReferenced_nonNull_bridgeObject(*a1);
      *a1 = v23;
      if (!v24 || v23 < 0 || (v23 & 0x4000000000000000) != 0)
      {
        v23 = sub_1000D6A90(v23);
        *a1 = v23;
      }
      if ((v7 & 0x8000000000000000) != 0)
        goto LABEL_55;
      v25 = v23 & 0xFFFFFFFFFFFFFF8;
      if (v7 >= *(_QWORD *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_56;
      v26 = *(void **)(v25 + 8 * i);
      *(_QWORD *)(v25 + 8 * i) = v18;

      specialized Array._endMutation()(v27);
      goto LABEL_31;
    }
    return v5;
  }
  v32 = *a1;
  if (!((unint64_t)v32 >> 62))
    return *(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v32 < 0)
    v36 = v32;
  else
    v36 = v32 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v32);
  v37 = _CocoaArrayWrapper.endIndex.getter(v36);
  swift_bridgeObjectRelease(v32);
  return v37;
}

uint64_t sub_1000E848C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  Swift::String_optional v5;
  uint64_t v6;
  char v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;

  swift_bridgeObjectRetain(a2);
  v4 = _swiftEmptyArrayStorage;
  while (1)
  {
    v5 = String.Iterator.next()();
    if (!v5.value._object)
      break;
    v6 = Character.hexDigitValue.getter(v5.value._countAndFlagsBits);
    v8 = v7;
    swift_bridgeObjectRelease(v5.value._object);
    if ((v8 & 1) == 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) == 0)
        v4 = sub_1001C4360(0, v4[2] + 1, 1, v4);
      v10 = v4[2];
      v9 = v4[3];
      if (v10 >= v9 >> 1)
        v4 = sub_1001C4360((_QWORD *)(v9 > 1), v10 + 1, 1, v4);
      v4[2] = v10 + 1;
      v4[v10 + 4] = v6;
    }
  }
  swift_bridgeObjectRelease(a2);
  v11 = v4[2];
  if ((v11 & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    goto LABEL_18;
  }
  v12 = String.count.getter(a1, a2);
  swift_bridgeObjectRelease(a2);
  if (v11 != v12)
  {
LABEL_18:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  v13 = sub_10007C71C(v11 >> 1);
  if (v11)
  {
    v15 = v4[2];
    if (v15)
    {
      if (v15 > 1)
      {
        v16 = v4[5] | (16 * v4[4]);
        if ((v16 & 0x8000000000000000) != 0)
        {
          _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
        }
        else
        {
          if (v16 < 0x100)
            __asm { BR              X11 }
          _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
        }
        __break(1u);
        JUMPOUT(0x1000E8798);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  v17 = v13;
  swift_bridgeObjectRelease(v4);
  return v17;
}

uint64_t sub_1000E87A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = type metadata accessor for SECDataMigrationCompletionListener(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0xD000000000000019;
  *(_QWORD *)(v1 + 32) = 0x80000001002BBEB0;
  result = Logger.init(subsystem:category:)(0xD000000000000014);
  qword_100354BE0 = v1;
  return result;
}

uint64_t sub_1000E8840()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  id v18;
  uint64_t result;
  void *v20;
  NSString v21;
  unsigned int v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint8_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint8_t *v34;
  int v35;
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  _QWORD *v52;
  uint64_t aBlock[5];
  uint64_t v54;
  uint64_t v55[5];
  uint64_t v56;
  unint64_t v57;
  __int128 v58;
  uint64_t v59;
  _BYTE v60[24];
  __int128 v61;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v51 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = type metadata accessor for DispatchQoS(0);
  v49 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50, v6);
  v48 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = type metadata accessor for DispatchQoS.QoSClass(0);
  v8 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47, v9);
  v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchPredicate(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v16 = (uint64_t *)((char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003445E0 != -1)
    swift_once(&qword_1003445E0, sub_1001256C0);
  v17 = *(void **)(qword_100354C58 + OBJC_IVAR____TtC10seserviced23SECNotificationListener_queue);
  *v16 = v17;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v13 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v12);
  v18 = v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)(v16);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v13 + 8))(v16, v12);
  if ((v17 & 1) != 0)
  {
    v20 = (void *)objc_opt_self(SESBootUUID);
    v21 = String._bridgeToObjectiveC()();
    v22 = objc_msgSend(v20, "isFirstLaunchAfterBootForKey:", v21);

    v24 = Logger.logObject.getter(v23);
    v28 = static os_log_type_t.info.getter(v24, v25, v26, v27);
    v29 = os_log_type_enabled(v24, v28);
    if (v22)
    {
      if (v29)
      {
        v45 = v3;
        v30 = (uint8_t *)swift_slowAlloc(12, -1);
        v31 = swift_slowAlloc(32, -1);
        aBlock[0] = v31;
        *(_DWORD *)v30 = 136315138;
        sub_1001EBCCC(v55);
        sub_1000E9350((uint64_t)v55, (uint64_t)&v56);
        v32 = v57;
        v46 = v2;
        if (v57)
        {
          v33 = v56;
          *(_OWORD *)v60 = v58;
          *(_QWORD *)&v60[16] = v59;
          v61 = *(_OWORD *)&v60[8];
          sub_10006F8A4((uint64_t)&v61);
        }
        else
        {
          v32 = 0xE400000000000000;
          v33 = 1701736270;
        }
        v52 = (_QWORD *)sub_1001C56EC(v33, v32, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, aBlock, v30 + 4, v30 + 12);
        swift_bridgeObjectRelease(v32);
        _os_log_impl((void *)&_mh_execute_header, v24, v28, "Migration -- current default app %s", v30, 0xCu);
        swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v31, -1, -1);
        swift_slowDealloc(v30, -1, -1);

        v2 = v46;
        v3 = v45;
        v35 = *(unsigned __int8 *)(v1 + 16);
        if (*(_BYTE *)(v1 + 16))
          return v35 == 1;
      }
      else
      {

        v35 = *(unsigned __int8 *)(v1 + 16);
        if (*(_BYTE *)(v1 + 16))
          return v35 == 1;
      }
      *(_BYTE *)(v1 + 16) = 1;
      sub_100071AEC();
      v36 = v47;
      (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v11, enum case for DispatchQoS.QoSClass.userInitiated(_:), v47);
      v37 = (void *)static OS_dispatch_queue.global(qos:)(v11);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v36);
      aBlock[4] = (uint64_t)sub_1000E9330;
      v54 = v1;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_100071C98;
      aBlock[3] = (uint64_t)&unk_100308828;
      v38 = _Block_copy(aBlock);
      v39 = swift_retain(v1);
      v40 = v48;
      static DispatchQoS.unspecified.getter(v39);
      v52 = _swiftEmptyArrayStorage;
      v41 = sub_100099850();
      v42 = sub_100063D3C((uint64_t *)&unk_100346200);
      v43 = sub_100063D7C();
      v44 = v51;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v52, v42, v43, v2, v41);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v40, v44, v38);
      _Block_release(v38);

      (*(void (**)(char *, uint64_t))(v3 + 8))(v44, v2);
      (*(void (**)(char *, uint64_t))(v49 + 8))(v40, v50);
      swift_release(v54);
      v35 = *(unsigned __int8 *)(v1 + 16);
      return v35 == 1;
    }
    if (v29)
    {
      v34 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v28, "After first launch, migration completed", v34, 2u);
      swift_slowDealloc(v34, -1, -1);
    }

    result = 0;
    *(_BYTE *)(v1 + 16) = 2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000E8DA0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_log_type_t v17;
  uint8_t *v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27;
  _QWORD *v28;
  _QWORD aBlock[5];
  uint64_t v30;

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  v10 = __chkstk_darwin(v7, v9);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = Logger.logObject.getter(v10);
  v17 = static os_log_type_t.info.getter(v13, v14, v15, v16);
  if (os_log_type_enabled(v13, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v17, "Perform Migration", v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }

  DMPerformMigrationIfNeeded();
  if (qword_1003445E0 != -1)
    swift_once(&qword_1003445E0, sub_1001256C0);
  v19 = *(void **)(qword_100354C58 + OBJC_IVAR____TtC10seserviced23SECNotificationListener_queue);
  aBlock[4] = sub_1000E9398;
  v30 = a1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100071C98;
  aBlock[3] = &unk_100308850;
  v20 = _Block_copy(aBlock);
  v21 = v19;
  v22 = swift_retain(a1);
  static DispatchQoS.unspecified.getter(v22);
  v28 = _swiftEmptyArrayStorage;
  v23 = sub_100099850();
  v24 = sub_100063D3C((uint64_t *)&unk_100346200);
  v25 = sub_100063D7C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v28, v24, v25, v2, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v6, v20);
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
  return swift_release(v30);
}

uint64_t sub_1000E9000(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  void *v8;
  NSString v9;

  v2 = Logger.logObject.getter(a1);
  v6 = static os_log_type_t.info.getter(v2, v3, v4, v5);
  if (os_log_type_enabled(v2, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v6, "Migration completed, Reconciling now", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  v8 = (void *)objc_opt_self(SESBootUUID);
  v9 = String._bridgeToObjectiveC()();
  objc_msgSend(v8, "setFirstLaunchAfterBootDoneForKey:", v9);

  *(_BYTE *)(a1 + 16) = 2;
  if (qword_1003445E0 != -1)
    swift_once(&qword_1003445E0, sub_1001256C0);
  return sub_1001270C0();
}

uint64_t sub_1000E9100()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_bridgeObjectRelease(v0[4]);
  v1 = (char *)v0 + OBJC_IVAR____TtC10seserviced34SECDataMigrationCompletionListener_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_1000E9158()
{
  return type metadata accessor for SECDataMigrationCompletionListener(0);
}

uint64_t type metadata accessor for SECDataMigrationCompletionListener(uint64_t a1)
{
  uint64_t result;

  result = qword_100346348;
  if (!qword_100346348)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SECDataMigrationCompletionListener);
  return result;
}

uint64_t sub_1000E919C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_100289A88;
  v4[1] = &unk_100289AA0;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for DataMigrationState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000E9268 + 4 * byte_100289A45[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000E929C + 4 * asc_100289A40[v4]))();
}

uint64_t sub_1000E929C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E92A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000E92ACLL);
  return result;
}

uint64_t sub_1000E92B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000E92C0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000E92C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E92CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DataMigrationState()
{
  return &type metadata for DataMigrationState;
}

unint64_t sub_1000E92EC()
{
  unint64_t result;

  result = qword_1003463E0;
  if (!qword_1003463E0)
  {
    result = swift_getWitnessTable(&unk_100289B14, &type metadata for DataMigrationState);
    atomic_store(result, (unint64_t *)&qword_1003463E0);
  }
  return result;
}

uint64_t sub_1000E9330()
{
  uint64_t v0;

  return sub_1000E8DA0(v0);
}

uint64_t sub_1000E9338(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000E9348(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000E9350(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100063D3C(&qword_1003463E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E9398()
{
  uint64_t v0;

  return sub_1000E9000(v0);
}

uint64_t sub_1000E93A8(void *a1, const char *a2)
{
  id v3;
  unsigned int v4;
  uint64_t v5;
  Class isa;
  BOOL v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  NSObject *v20;
  uint64_t v21;
  os_log_type_t v22;
  uint8_t *v23;
  const char *v24;
  id v25;
  NSObject *v26;
  uint64_t v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  const char *v51;
  Class v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  os_log_type_t v61;
  uint8_t *v62;
  const char *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  _QWORD v92[3];
  _BYTE v93[8];
  _QWORD v94[3];
  _BYTE v95[8];
  uint64_t v96;
  _BYTE v97[16];
  uint64_t v98;

  v3 = sub_10005066C(a1, a2);
  v4 = objc_msgSend(v3, "isSkyOrLater");

  if (!v4)
  {
    v20 = Logger.logObject.getter(v5);
    v22 = static os_log_type_t.error.getter(v20, v21);
    if (os_log_type_enabled(v20, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      v24 = "SE is not Sky or later ...";
LABEL_11:
      _os_log_impl((void *)&_mh_execute_header, v20, v22, v24, v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }
LABEL_29:

    return 7;
  }
  if (qword_1003445F8 != -1)
    swift_once(&qword_1003445F8, sub_100130F58);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v7 = sub_1000500FC(a1, isa);

  if (!v7)
  {
    v25 = sub_100011DAC(a1, (uint64_t)"SLAMInstallHenosis");
    if (v25)
    {
      v20 = v25;
      v26 = Logger.logObject.getter(v20);
      v28 = static os_log_type_t.error.getter(v26, v27);
      if (os_log_type_enabled(v26, v28))
      {
        v29 = (uint8_t *)swift_slowAlloc(12, -1);
        v30 = swift_slowAlloc(32, -1);
        v98 = v30;
        *(_DWORD *)v29 = 136315138;
        swift_getErrorValue(v20, v95, v94);
        v31 = Error.localizedDescription.getter(v94[1], v94[2]);
        v33 = v32;
        v96 = sub_1001C56EC(v31, v32, &v98);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, v97, v29 + 4, v29 + 12);

        swift_bridgeObjectRelease(v33);
        _os_log_impl((void *)&_mh_execute_header, v26, v28, "SLAM Error on install : %s", v29, 0xCu);
        swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v30, -1, -1);
        swift_slowDealloc(v29, -1, -1);

      }
      else
      {

      }
      goto LABEL_29;
    }
    v53 = Data._bridgeToObjectiveC()().super.isa;
    v54 = sub_1000500FC(a1, v53);

    if (v54)
    {
      v56 = sub_100130FA0(a1);
      if (v57 >> 60 == 15)
      {
        v11 = Logger.logObject.getter(v56);
        v61 = static os_log_type_t.info.getter(v11, v58, v59, v60);
        if (os_log_type_enabled(v11, v61))
        {
          v62 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v62 = 0;
          v63 = "Applied installation script but no configID?";
LABEL_26:
          _os_log_impl((void *)&_mh_execute_header, v11, v61, v63, v62, 2u);
          swift_slowDealloc(v62, -1, -1);
        }
LABEL_31:

        return 8;
      }
      v34 = v56;
      v35 = v57;
      sub_100063C8C(v56, v57);
      v70 = sub_100063C8C(v34, v35);
      v37 = Logger.logObject.getter(v70);
      v41 = static os_log_type_t.info.getter(v37, v71, v72, v73);
      if (!os_log_type_enabled(v37, v41))
        goto LABEL_36;
      v42 = (uint8_t *)swift_slowAlloc(12, -1);
      v43 = swift_slowAlloc(32, -1);
      v98 = v43;
      *(_DWORD *)v42 = 136315138;
      sub_1001BD2CC(v34, v35);
      v75 = v74;
      v76 = sub_100063D3C((uint64_t *)&unk_100346060);
      v77 = sub_10006B86C();
      v78 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v76, v77);
      v80 = v79;
      swift_bridgeObjectRelease(v75);
      v96 = sub_1001C56EC(v78, v80, &v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, v97, v42 + 4, v42 + 12);
      swift_bridgeObjectRelease(v80);
      sub_10006B9B4(v34, v35);
      sub_10006B9B4(v34, v35);
      v51 = "Henosis installed with id %s";
LABEL_17:
      _os_log_impl((void *)&_mh_execute_header, v37, v41, v51, v42, 0xCu);
      swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v42, -1, -1);
      sub_10006B9B4(v34, v35);

      return 35;
    }
    v20 = Logger.logObject.getter(v55);
    v22 = static os_log_type_t.error.getter(v20, v69);
    if (os_log_type_enabled(v20, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      v24 = "After SLAM but AID still not present?!";
      goto LABEL_11;
    }
    goto LABEL_29;
  }
  v8 = sub_100130FA0(a1);
  if (v9 >> 60 != 15)
  {
    v34 = v8;
    v35 = v9;
    sub_100063C8C(v8, v9);
    v36 = sub_100063C8C(v34, v35);
    v37 = Logger.logObject.getter(v36);
    v41 = static os_log_type_t.info.getter(v37, v38, v39, v40);
    if (!os_log_type_enabled(v37, v41))
      goto LABEL_36;
    v42 = (uint8_t *)swift_slowAlloc(12, -1);
    v43 = swift_slowAlloc(32, -1);
    v98 = v43;
    *(_DWORD *)v42 = 136315138;
    sub_1001BD2CC(v34, v35);
    v45 = v44;
    v46 = sub_100063D3C((uint64_t *)&unk_100346060);
    v47 = sub_10006B86C();
    v48 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v46, v47);
    v50 = v49;
    swift_bridgeObjectRelease(v45);
    v96 = sub_1001C56EC(v48, v50, &v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, v97, v42 + 4, v42 + 12);
    swift_bridgeObjectRelease(v50);
    sub_10006B9B4(v34, v35);
    sub_10006B9B4(v34, v35);
    v51 = "Henosis already configured with id %s";
    goto LABEL_17;
  }
  v10 = sub_100011DAC(a1, (uint64_t)"SLAMPersonalizeHenosis");
  if (v10)
  {
    v11 = v10;
    v12 = Logger.logObject.getter(v11);
    v14 = static os_log_type_t.error.getter(v12, v13);
    if (os_log_type_enabled(v12, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v16 = swift_slowAlloc(32, -1);
      v98 = v16;
      *(_DWORD *)v15 = 136315138;
      swift_getErrorValue(v11, v93, v92);
      v17 = Error.localizedDescription.getter(v92[1], v92[2]);
      v19 = v18;
      v96 = sub_1001C56EC(v17, v18, &v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, v97, v15 + 4, v15 + 12);

      swift_bridgeObjectRelease(v19);
      _os_log_impl((void *)&_mh_execute_header, v12, v14, "SLAM Error on personalize : %s", v15, 0xCu);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);

    }
    else
    {

    }
    goto LABEL_31;
  }
  v64 = sub_100130FA0(a1);
  if (v65 >> 60 == 15)
  {
    v11 = Logger.logObject.getter(v64);
    v61 = static os_log_type_t.info.getter(v11, v66, v67, v68);
    if (os_log_type_enabled(v11, v61))
    {
      v62 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v62 = 0;
      v63 = "Applied personalization script but no configID?";
      goto LABEL_26;
    }
    goto LABEL_31;
  }
  v34 = v64;
  v35 = v65;
  sub_100063C8C(v64, v65);
  v81 = sub_100063C8C(v34, v35);
  v37 = Logger.logObject.getter(v81);
  v41 = static os_log_type_t.info.getter(v37, v82, v83, v84);
  if (os_log_type_enabled(v37, v41))
  {
    v42 = (uint8_t *)swift_slowAlloc(12, -1);
    v43 = swift_slowAlloc(32, -1);
    v98 = v43;
    *(_DWORD *)v42 = 136315138;
    sub_1001BD2CC(v34, v35);
    v86 = v85;
    v87 = sub_100063D3C((uint64_t *)&unk_100346060);
    v88 = sub_10006B86C();
    v89 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v87, v88);
    v91 = v90;
    swift_bridgeObjectRelease(v86);
    v96 = sub_1001C56EC(v89, v91, &v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, v97, v42 + 4, v42 + 12);
    swift_bridgeObjectRelease(v91);
    sub_10006B9B4(v34, v35);
    sub_10006B9B4(v34, v35);
    v51 = "Henosis configured with id %s";
    goto LABEL_17;
  }
LABEL_36:
  sub_10006B9B4(v34, v35);

  sub_10006B9B4(v34, v35);
  sub_10006B9B4(v34, v35);
  return 35;
}

uint64_t sub_1000E9D68(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  void *v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27;
  _QWORD *v28;
  _QWORD aBlock[5];
  _QWORD *v30;

  v27 = a3;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (_QWORD *)swift_allocObject(&unk_1003088C0, 48, 7);
  v19[2] = a1;
  v19[3] = a4;
  v19[4] = a5;
  v19[5] = a2;
  aBlock[4] = sub_1000EA038;
  v30 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100071C98;
  aBlock[3] = &unk_1003088D8;
  v20 = _Block_copy(aBlock);
  v21 = a1;
  swift_retain(a5);
  v22 = swift_errorRetain(a2);
  static DispatchQoS.unspecified.getter(v22);
  v28 = _swiftEmptyArrayStorage;
  v23 = sub_100099850();
  v24 = sub_100063D3C((uint64_t *)&unk_100346200);
  v25 = sub_100063D7C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v28, v24, v25, v9, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v18, v13, v20);
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  return swift_release(v30);
}

void sub_1000E9F38(void *a1, void (*a2)(id, uint64_t), uint64_t a3, void *a4)
{
  id v6;
  uint64_t v7;
  id v9;

  if (a1)
  {
    v9 = a1;
    v6 = a1;
    v7 = 0;
LABEL_3:
    a2(v6, v7);

    return;
  }
  if (!a4)
  {
    sub_100098CBC();
    v6 = sub_1001E2838(0, 1, 0x75736F6C63206F4ELL, 0xEA00000000006572, 0);
    v9 = v6;
    v7 = 1;
    goto LABEL_3;
  }
  swift_errorRetain(a4);
  a2(a4, 1);
  swift_errorRelease(a4);
}

uint64_t sub_1000EA004()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  swift_errorRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

void sub_1000EA038()
{
  uint64_t v0;

  sub_1000E9F38(*(void **)(v0 + 16), *(void (**)(id, uint64_t))(v0 + 24), *(_QWORD *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_1000EA044(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000EA054(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_1000EA05C(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1000EA0B4@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t bytes, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  _QWORD *v17;
  uint64_t v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;

  v21 = v18;
  LOWORD(v22) = a1;
  BYTE2(v22) = BYTE2(a1);
  HIBYTE(v22) = BYTE3(a1);
  v23 = BYTE4(a1);
  v24 = BYTE5(a1);
  v25 = BYTE6(a1);
  result = SecRandomCopyBytes(kSecRandomDefault, BYTE6(a1), &v21);
  v20 = v22 | ((unint64_t)v23 << 32) | ((unint64_t)v24 << 40) | ((unint64_t)v25 << 48);
  *v17 = v21;
  v17[1] = v20;
  return result;
}

uint64_t sub_1000EA2F0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int64_t v8;
  uint64_t v9;
  size_t v10;

  result = __DataStorage._bytes.getter();
  if (!result)
    goto LABEL_10;
  v5 = result;
  result = __DataStorage._offset.getter();
  v6 = a1 - result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_9;
  }
  v7 = __OFSUB__(a2, a1);
  v8 = a2 - a1;
  if (v7)
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  v9 = __DataStorage._length.getter();
  if (v9 >= v8)
    v10 = v8;
  else
    v10 = v9;
  return SecRandomCopyBytes(kSecRandomDefault, v10, (void *)(v5 + v6));
}

uint64_t sub_1000EA378(uint64_t a1)
{
  unint64_t v1;
  int v2;
  int v3;
  Swift::String v4;
  void *object;
  id v6;
  uint64_t v8;
  unint64_t v9;
  int v10;

  v8 = sub_100090DA8(a1);
  v9 = v1;
  sub_1000EA05C((uint64_t)&v8);
  if (!v2)
    return v8;
  v3 = v2;
  sub_100098CBC();
  _StringGuts.grow(_:)(37);
  swift_bridgeObjectRelease(0xE000000000000000);
  v10 = v3;
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
  object = v4._object;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(object);
  v6 = sub_1001E2838(0, 1, 0xD000000000000023, 0x80000001002BBF10, 0);
  swift_willThrow(v6);
  return sub_100063CD0(v8, v9);
}

uint64_t sub_1000EA470(uint64_t a1, id a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t *);
  id v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  id *v20;
  _BYTE v21[24];
  uint64_t v22;
  _QWORD v23[4];
  id v24;

  v24 = a2;
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    swift_beginAccess(a1 + 32, v23, 33, 0);
    v4 = (void *)sub_1000D62A0((uint64_t)a2);
    swift_endAccess(v23);
    if (v4)
    {

      v5 = swift_beginAccess(a1 + 16, v23, 0, 0);
      v6 = *(_QWORD *)(a1 + 16);
      __chkstk_darwin(v5, v7);
      v20 = &v24;
      swift_bridgeObjectRetain(v6);
      v8 = (void (*)(uint64_t *))sub_1000EB32C;
    }
    else
    {
      v14 = swift_beginAccess(a1 + 16, v23, 0, 0);
      v6 = *(_QWORD *)(a1 + 16);
      __chkstk_darwin(v14, v15);
      v20 = &v24;
      swift_bridgeObjectRetain(v6);
      v8 = (void (*)(uint64_t *))sub_1000EB2F4;
    }
  }
  else
  {
    v9 = objc_msgSend(a2, "copyWithZone:", 0);
    _bridgeAnyObjectToAny(_:)(v23);
    swift_unknownObjectRelease(v9);
    v10 = sub_1000EB1A0();
    swift_dynamicCast(&v22, v23, (char *)&type metadata for Any + 8, v10, 7);
    swift_beginAccess(a1 + 32, v21, 33, 0);
    v11 = (void *)sub_1000D62A0(v22);
    swift_endAccess(v21);
    if (v11)
    {

      v12 = swift_beginAccess(a1 + 16, v23, 0, 0);
      v6 = *(_QWORD *)(a1 + 16);
      __chkstk_darwin(v12, v13);
      v20 = &v24;
      swift_bridgeObjectRetain(v6);
      v8 = (void (*)(uint64_t *))sub_1000EB39C;
    }
    else
    {
      v16 = swift_beginAccess(a1 + 16, v23, 0, 0);
      v6 = *(_QWORD *)(a1 + 16);
      __chkstk_darwin(v16, v17);
      v20 = &v24;
      swift_bridgeObjectRetain(v6);
      v8 = (void (*)(uint64_t *))sub_1000EB364;
    }
  }
  sub_100162D18(v8, (uint64_t)&v19, v6);
  return swift_bridgeObjectRelease(v6);
}

void sub_1000EA6DC(uint64_t a1, void *a2)
{
  uint64_t ObjectType;
  uint64_t v4;
  uint64_t v5;
  id v6;
  unint64_t v7;
  id v8;
  _QWORD v9[4];

  ObjectType = swift_getObjectType(*(_QWORD *)(a1 + 16));
  v4 = swift_conformsToProtocol2(ObjectType, &protocol descriptor for StoreDelegate);
  if (v4)
  {
    v5 = v4;
    v6 = objc_msgSend(a2, "copyWithZone:", 0);
    _bridgeAnyObjectToAny(_:)(v9);
    swift_unknownObjectRelease(v6);
    v7 = sub_1000EB1A0();
    swift_dynamicCast(&v8, v9, (char *)&type metadata for Any + 8, v7, 7);
    (*(void (**)(id *, unint64_t, uint64_t, uint64_t))(v5 + 8))(&v8, v7, ObjectType, v5);

  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000EA7A4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD aBlock[5];
  uint64_t v30;
  _QWORD *v31;

  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v28 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for DispatchQoS(0);
  v14 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27, v15);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = *(_QWORD *)(a1 + 24);
  v18 = swift_allocObject(a3, 32, 7);
  *(_QWORD *)(v18 + 16) = a1;
  *(_QWORD *)(v18 + 24) = a2;
  aBlock[4] = a4;
  v30 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100071C98;
  aBlock[3] = a5;
  v19 = _Block_copy(aBlock);
  v20 = a2;
  v21 = swift_retain(a1);
  static DispatchQoS.unspecified.getter(v21);
  v31 = _swiftEmptyArrayStorage;
  v22 = sub_1000639EC((unint64_t *)&qword_100344A20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v23 = sub_100063D3C((uint64_t *)&unk_100346200);
  v24 = sub_100063D7C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v23, v24, v10, v22);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v17, v13, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v13, v10);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v27);
  return swift_release(v30);
}

void sub_1000EA984(uint64_t a1, void *a2)
{
  uint64_t ObjectType;
  uint64_t v4;
  uint64_t v5;
  id v6;
  unint64_t v7;
  id v8;
  _QWORD v9[4];

  ObjectType = swift_getObjectType(*(_QWORD *)(a1 + 16));
  v4 = swift_conformsToProtocol2(ObjectType, &protocol descriptor for StoreDelegate);
  if (v4)
  {
    v5 = v4;
    v6 = objc_msgSend(a2, "copyWithZone:", 0);
    _bridgeAnyObjectToAny(_:)(v9);
    swift_unknownObjectRelease(v6);
    v7 = sub_1000EB1A0();
    swift_dynamicCast(&v8, v9, (char *)&type metadata for Any + 8, v7, 7);
    (*(void (**)(id *, unint64_t, uint64_t, uint64_t))(v5 + 16))(&v8, v7, ObjectType, v5);

  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000EAA4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v0 = sub_100063D3C(&qword_100346420);
  v1 = swift_allocObject(v0, 48, 7);
  *(_QWORD *)(v1 + 16) = &_swiftEmptySetSingleton;
  *(_QWORD *)(v1 + 32) = &_swiftEmptySetSingleton;
  v2 = sub_100063D3C(&qword_100346428);
  result = swift_allocObject(v2, 20, 7);
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)(v1 + 40) = result;
  *(_BYTE *)(v1 + 24) = 0;
  off_1003463F0 = (_UNKNOWN *)v1;
  return result;
}

uint64_t type metadata accessor for EndpointStore()
{
  return objc_opt_self(_TtC10seserviced13EndpointStore);
}

_QWORD *sub_1000EABFC@<X0>(_QWORD *(*a1)(uint64_t *__return_ptr)@<X1>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = a1(&v5);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_1000EAC38@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(id *)@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t result;
  _BYTE v11[24];

  swift_beginAccess(a1 + 32, v11, 0, 0);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = swift_bridgeObjectRetain(v6);
  sub_1000EADB8(v7, a2);
  v9 = v8;
  result = swift_bridgeObjectRelease(v6);
  *a3 = v9 & 1;
  return result;
}

uint64_t sub_1000EACC8(uint64_t a1, uint64_t *a2)
{
  uint64_t ObjectType;
  uint64_t result;
  uint64_t v4;
  uint64_t (*v5)(uint64_t *, unint64_t, uint64_t, uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *a2;
  ObjectType = swift_getObjectType(*(_QWORD *)(a1 + 16));
  result = swift_conformsToProtocol2(ObjectType, &protocol descriptor for StoreDelegate);
  if (result)
  {
    v4 = result;
    v5 = *(uint64_t (**)(uint64_t *, unint64_t, uint64_t, uint64_t))(result + 8);
    v6 = sub_1000EB1A0();
    return v5(&v7, v6, ObjectType, v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000EAD40(uint64_t a1, uint64_t *a2)
{
  uint64_t ObjectType;
  uint64_t result;
  uint64_t v4;
  uint64_t (*v5)(uint64_t *, unint64_t, uint64_t, uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *a2;
  ObjectType = swift_getObjectType(*(_QWORD *)(a1 + 16));
  result = swift_conformsToProtocol2(ObjectType, &protocol descriptor for StoreDelegate);
  if (result)
  {
    v4 = result;
    v5 = *(uint64_t (**)(uint64_t *, unint64_t, uint64_t, uint64_t))(result + 16);
    v6 = sub_1000EB1A0();
    return v5(&v7, v6, ObjectType, v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1000EADB8(uint64_t a1, uint64_t (*a2)(id *))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  id v17;
  char v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[5];
  id v30;

  v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v4 = a1;
    else
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v5 = __CocoaSet.makeIterator()(v4);
    v6 = sub_1000EB1A0();
    v7 = sub_1000639EC((unint64_t *)&qword_100346160, (uint64_t (*)(uint64_t))sub_1000EB1A0, (uint64_t)&protocol conformance descriptor for NSObject);
    v8 = Set.Iterator.init(_cocoa:)(v29, v5, v6, v7);
    v3 = v29[0];
    v27 = v29[1];
    v9 = v29[2];
    v10 = v29[3];
    v11 = v29[4];
  }
  else
  {
    v12 = -1 << *(_BYTE *)(a1 + 32);
    v27 = a1 + 56;
    v9 = ~v12;
    v13 = -v12;
    if (v13 < 64)
      v14 = ~(-1 << v13);
    else
      v14 = -1;
    v11 = v14 & *(_QWORD *)(a1 + 56);
    v8 = (_QWORD *)swift_bridgeObjectRetain(a1);
    v10 = 0;
  }
  v26 = (unint64_t)(v9 + 64) >> 6;
  while (1)
  {
    v19 = v10;
    if ((v3 & 0x8000000000000000) == 0)
      break;
    v23 = __CocoaSet.Iterator.next()(v8);
    v24 = v23;
    if (!v23)
      goto LABEL_34;
    v28 = v23;
    v25 = sub_1000EB1A0();
    swift_unknownObjectRetain(v24);
    swift_dynamicCast(&v30, &v28, (char *)&type metadata for Swift.AnyObject + 8, v25, 7);
    v17 = v30;
    swift_unknownObjectRelease(v24);
    if (!v17)
      goto LABEL_34;
LABEL_13:
    v30 = v17;
    v18 = a2(&v30);

    if ((v18 & 1) != 0)
      goto LABEL_34;
  }
  if (v11)
  {
    v15 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    v16 = v15 | (v10 << 6);
LABEL_12:
    v17 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v16);
    if (!v17)
      goto LABEL_34;
    goto LABEL_13;
  }
  v20 = v10 + 1;
  if (!__OFADD__(v10, 1))
  {
    if (v20 >= v26)
      goto LABEL_34;
    v21 = *(_QWORD *)(v27 + 8 * v20);
    ++v10;
    if (!v21)
    {
      v10 = v19 + 2;
      if (v19 + 2 >= v26)
        goto LABEL_34;
      v21 = *(_QWORD *)(v27 + 8 * v10);
      if (!v21)
      {
        v10 = v19 + 3;
        if (v19 + 3 >= v26)
          goto LABEL_34;
        v21 = *(_QWORD *)(v27 + 8 * v10);
        if (!v21)
        {
          v10 = v19 + 4;
          if (v19 + 4 >= v26)
            goto LABEL_34;
          v21 = *(_QWORD *)(v27 + 8 * v10);
          if (!v21)
          {
            v10 = v19 + 5;
            if (v19 + 5 >= v26)
              goto LABEL_34;
            v21 = *(_QWORD *)(v27 + 8 * v10);
            if (!v21)
            {
              v22 = v19 + 6;
              while (v26 != v22)
              {
                v21 = *(_QWORD *)(v27 + 8 * v22++);
                if (v21)
                {
                  v10 = v22 - 1;
                  goto LABEL_31;
                }
              }
LABEL_34:
              sub_10007EF58(v3);
              return;
            }
          }
        }
      }
    }
LABEL_31:
    v11 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v10 << 6);
    goto LABEL_12;
  }
  __break(1u);
}

uint64_t sub_1000EB09C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  unsigned __int8 v8;

  if (qword_1003445B8 != -1)
    a1 = swift_once(&qword_1003445B8, sub_1000EAA4C);
  v2 = __chkstk_darwin(a1, a2);
  __chkstk_darwin(v2, v3);
  v5 = v4 + 4;
  os_unfair_lock_lock(v4 + 4);
  sub_1000EB184(&v8);
  v6 = v8;
  os_unfair_lock_unlock(v5);
  return v6;
}

uint64_t sub_1000EB184@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_1000EAC38(*(_QWORD *)(v1 + 16), *(uint64_t (**)(id *))(v1 + 24), a1);
}

unint64_t sub_1000EB1A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100347710;
  if (!qword_100347710)
  {
    v1 = objc_opt_self(SEEndPoint);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100347710);
  }
  return result;
}

uint64_t sub_1000EB1DC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

void sub_1000EB1FC(uint64_t a1, uint64_t (*a2)(void))
{
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;
  uint64_t v5;

  if (qword_1003445B8 != -1)
    a1 = swift_once(&qword_1003445B8, sub_1000EAA4C);
  __chkstk_darwin(a1, a2);
  v4 = v3 + 4;
  os_unfair_lock_lock(v3 + 4);
  sub_10016B0FC(v5, a2);
  os_unfair_lock_unlock(v4);
}

void sub_1000EB2BC()
{
  uint64_t v0;

  sub_100163740(*(_QWORD *)(v0 + 16), **(void ***)(v0 + 24));
}

uint64_t sub_1000EB2D8()
{
  uint64_t v0;

  return sub_1000EA470(*(_QWORD *)(v0 + 16), **(id **)(v0 + 24));
}

uint64_t sub_1000EB2F4(uint64_t *a1)
{
  uint64_t v1;

  return sub_1000EA7A4(*a1, **(void ***)(v1 + 16), (uint64_t)&unk_100308A00, (uint64_t)sub_1000EB444, (uint64_t)&unk_100308A18);
}

uint64_t sub_1000EB32C(uint64_t *a1)
{
  uint64_t v1;

  return sub_1000EA7A4(*a1, **(void ***)(v1 + 16), (uint64_t)&unk_1003089B0, (uint64_t)sub_1000EB408, (uint64_t)&unk_1003089C8);
}

uint64_t sub_1000EB364(uint64_t *a1)
{
  uint64_t v1;

  return sub_1000EA7A4(*a1, **(void ***)(v1 + 16), (uint64_t)&unk_100308960, (uint64_t)sub_1000EB3FC, (uint64_t)&unk_100308978);
}

uint64_t sub_1000EB39C(uint64_t *a1)
{
  uint64_t v1;

  return sub_1000EA7A4(*a1, **(void ***)(v1 + 16), (uint64_t)&unk_100308910, (uint64_t)sub_1000EB3D8, (uint64_t)&unk_100308928);
}

void sub_1000EB3D8()
{
  uint64_t v0;

  sub_1000EA984(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1000EB3E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000EB3F0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_1000EB3FC()
{
  uint64_t v0;

  sub_1000EA6DC(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1000EB408()
{
  uint64_t v0;

  return sub_1000EAD40(*(_QWORD *)(v0 + 16), (uint64_t *)(v0 + 24));
}

uint64_t sub_1000EB418()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000EB444()
{
  uint64_t v0;

  return sub_1000EACC8(*(_QWORD *)(v0 + 16), (uint64_t *)(v0 + 24));
}

void sub_1000EB450()
{
  uint64_t v0;

  sub_100163238(*(_QWORD *)(v0 + 16), **(id **)(v0 + 24));
}

id sub_1000EB484()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AlishaHUP(0)), "init");
  qword_100354BE8 = (uint64_t)result;
  return result;
}

id sub_1000EB4B4()
{
  void *v0;
  objc_class *ObjectType;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  _QWORD aBlock[5];
  uint64_t v19;
  objc_super v20;

  ObjectType = (objc_class *)swift_getObjectType(v0);
  v2 = type metadata accessor for DispatchQoS.QoSClass(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = SESLoggingSubsystem;
  v8 = v0;
  v9 = String.init(cString:)(v7);
  Logger.init(subsystem:category:)(v9);
  *(_QWORD *)&v8[OBJC_IVAR____TtC10seserviced9AlishaHUP_hupTimeoutSec] = 0x4072C00000000000;
  *(_QWORD *)&v8[OBJC_IVAR____TtC10seserviced9AlishaHUP_sessions] = _swiftEmptyArrayStorage;

  v20.receiver = v8;
  v20.super_class = ObjectType;
  v10 = objc_msgSendSuper2(&v20, "init");
  sub_10006C25C(0, (unint64_t *)&qword_1003461A0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchQoS.QoSClass.default(_:), v2);
  v11 = v10;
  v12 = (void *)static OS_dispatch_queue.global(qos:)(v6);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  v13 = swift_allocObject(&unk_100308DE8, 24, 7);
  *(_QWORD *)(v13 + 16) = v11;
  aBlock[4] = sub_1000F1D48;
  v19 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10017BF6C;
  aBlock[3] = &unk_100308E00;
  v14 = _Block_copy(aBlock);
  v15 = v19;
  v16 = v11;
  swift_release(v15);
  os_state_add_handler(v12, v14);

  _Block_release(v14);
  return v16;
}

uint64_t sub_1000EB6AC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  Class isa;
  _DWORD *v20;
  _OWORD v21[2];
  _BYTE v22[24];
  __int128 v23;
  uint64_t v24;

  v2 = (uint64_t *)(a2 + OBJC_IVAR____TtC10seserviced9AlishaHUP_sessions);
  swift_beginAccess(a2 + OBJC_IVAR____TtC10seserviced9AlishaHUP_sessions, v22, 0, 0);
  v3 = *v2;
  if (!((unint64_t)v3 >> 62))
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain_n(v3, 2);
    if (v4)
      goto LABEL_3;
LABEL_19:
    v7 = _swiftEmptyArrayStorage;
LABEL_20:
    swift_bridgeObjectRelease_n(v3, 2);
    v24 = sub_100063D3C((uint64_t *)&unk_1003465F0);
    *(_QWORD *)&v23 = v7;
    sub_10006C2B4(&v23, v21);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    sub_10018DEC0(v21, 0xD000000000000010, 0x80000001002BC140, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease(0x8000000000000000);
    v18 = sub_10017D088((uint64_t)&_swiftEmptyDictionarySingleton);
    swift_bridgeObjectRelease(&_swiftEmptyDictionarySingleton);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v18);
    v20 = sub_100015734((uint64_t)"alishahup.state", (uint64_t)isa);

    return (uint64_t)v20;
  }
  if (v3 < 0)
    v16 = v3;
  else
    v16 = v3 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain_n(v3, 2);
  result = _CocoaArrayWrapper.endIndex.getter(v16);
  v4 = result;
  if (!result)
    goto LABEL_19;
LABEL_3:
  if (v4 >= 1)
  {
    v6 = 0;
    v7 = _swiftEmptyArrayStorage;
    v8 = &qword_100346000;
    do
    {
      if ((v3 & 0xC000000000000001) != 0)
      {
        v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v3);
      }
      else
      {
        v10 = *(_QWORD *)(v3 + 8 * v6 + 32);
        swift_retain(v10);
      }
      v11 = (uint64_t *)(*(_QWORD *)(v10 + v8[145]) + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
      v12 = *v11;
      v13 = v11[1];
      sub_10006BA34(*v11, v13);
      swift_release(v10);
      if (v13 >> 60 != 15)
      {
        if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
          v7 = sub_1001C4254(0, v7[2] + 1, 1, v7);
        v15 = v7[2];
        v14 = v7[3];
        if (v15 >= v14 >> 1)
          v7 = sub_1001C4254((_QWORD *)(v14 > 1), v15 + 1, 1, v7);
        v7[2] = v15 + 1;
        v9 = &v7[2 * v15];
        v9[4] = v12;
        v9[5] = v13;
        v8 = &qword_100346000;
      }
      ++v6;
    }
    while (v4 != v6);
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

void sub_1000EB954(uint64_t a1, unint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void (*v21)(_QWORD);
  id v22;
  void (*v23)(_QWORD *, unint64_t);
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  os_log_type_t v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  os_unfair_lock_s *v51;
  os_unfair_lock_s *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  id v56;
  void *v57;
  unsigned __int8 v58;
  NSObject *v59;
  uint64_t v60;
  os_log_type_t v61;
  uint8_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  os_log_type_t v70;
  uint8_t *v71;
  NSObject *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  os_log_type_t v76;
  uint8_t *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  void *v82;
  void *v83;
  void (*v84)(_QWORD *, _QWORD, unint64_t);
  _QWORD *v85;
  unint64_t v86;
  id v87;
  char v88;
  void *v89;
  unint64_t v90;
  unint64_t v91;
  id v92;
  void *v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  unint64_t v98;
  void *v99;
  void *v100;
  id v101;
  id v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  _QWORD v108[2];
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  void (*v116)(_QWORD *, unint64_t);
  unint64_t v117;
  uint64_t v118;
  void (*v119)(_QWORD);
  _QWORD *v120;
  unint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t aBlock[5];
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;

  v5 = v4;
  v121 = a2;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v115 = (char *)v108 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = type metadata accessor for DispatchQoS(0);
  v113 = *(_QWORD *)(v114 - 8);
  __chkstk_darwin(v114, v13);
  v112 = (char *)v108 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchPredicate(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15, v17);
  v19 = (_QWORD *)((char *)v108 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v20 = qword_100354EE8;
  *v19 = qword_100354EE8;
  v21 = *(void (**)(_QWORD))(v16 + 104);
  LODWORD(v118) = enum case for DispatchPredicate.onQueue(_:);
  v119 = v21;
  v21(v19);
  v22 = (id)v20;
  LOBYTE(v20) = _dispatchPreconditionTest(_:)(v19);
  v23 = *(void (**)(_QWORD *, unint64_t))(v16 + 8);
  v120 = v19;
  v23(v19, v15);
  if ((v20 & 1) == 0)
  {
    __break(1u);
LABEL_45:
    swift_once(&qword_1003445B8, sub_1000EAA4C);
    goto LABEL_9;
  }
  v116 = v23;
  v117 = v15;
  v24 = v5 + OBJC_IVAR____TtC10seserviced9AlishaHUP_logger;
  v25 = swift_retain_n(a4, 2);
  v122 = v24;
  v26 = Logger.logObject.getter(v25);
  v30 = static os_log_type_t.info.getter(v26, v27, v28, v29);
  v31 = os_log_type_enabled(v26, v30);
  v111 = v9;
  v110 = v10;
  if (v31)
  {
    v32 = swift_slowAlloc(18, -1);
    v109 = swift_slowAlloc(32, -1);
    aBlock[0] = v109;
    *(_DWORD *)v32 = 67109378;
    LODWORD(v126) = a3 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, (char *)&v126 + 4, v32 + 4, v32 + 8);
    *(_WORD *)(v32 + 8) = 2080;
    v33 = swift_retain(a4);
    v34 = UUID.uuidString.getter(v33);
    v35 = v5;
    v36 = a3;
    v37 = a1;
    v39 = v38;
    swift_release(a4);
    v126 = sub_1001C56EC(v34, v39, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, &v127, v32 + 10, v32 + 18);
    swift_release_n(a4, 2);
    v40 = v39;
    a1 = v37;
    a3 = v36;
    v5 = v35;
    swift_bridgeObjectRelease(v40);
    _os_log_impl((void *)&_mh_execute_header, v26, v30, "triggerHeadUnitPairing isRequestedByVehicle %{BOOL}d peer %s", (uint8_t *)v32, 0x12u);
    v41 = v109;
    swift_arrayDestroy(v109, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1, -1);
    swift_slowDealloc(v32, -1, -1);
  }
  else
  {
    swift_release_n(a4, 2);
  }

  v42 = (uint64_t *)(v5 + OBJC_IVAR____TtC10seserviced9AlishaHUP_sessions);
  swift_beginAccess(v5 + OBJC_IVAR____TtC10seserviced9AlishaHUP_sessions, &v126, 0, 0);
  v43 = *v42;
  swift_retain(a4);
  v44 = swift_bridgeObjectRetain(v43);
  v23 = 0;
  v45 = sub_1000F18F8(v44, a4);
  swift_bridgeObjectRelease(v43);
  swift_release(a4);
  if ((v45 & 1) != 0)
    return;
  v108[1] = v42;
  v109 = v5;
  v46 = qword_1003445B8;
  swift_retain(a4);
  if (v46 != -1)
    goto LABEL_45;
LABEL_9:
  v47 = off_1003463F0;
  v48 = swift_allocObject(&unk_100308A78, 32, 7);
  *(_QWORD *)(v48 + 16) = sub_1000F17B4;
  *(_QWORD *)(v48 + 24) = a4;
  v50 = __chkstk_darwin(v48, v49);
  v108[-4] = sub_100096F30;
  v108[-3] = v50;
  v108[-2] = v47;
  v52 = v51 + 4;
  swift_retain(a4);
  os_unfair_lock_lock(v52);
  sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_100096F14, aBlock);
  os_unfair_lock_unlock(v52);
  v53 = aBlock[0];
  swift_release(a4);
  swift_release(v48);
  v54 = (void *)sub_10009F618(v53);
  v55 = swift_bridgeObjectRelease(v53);
  if (v54)
  {
    v56 = objc_msgSend(v54, "hupDone");
    if (v56)
    {
      v57 = v56;
      v58 = objc_msgSend(v56, "BOOLValue");

    }
    else
    {
      v58 = 0;
    }
    v63 = type metadata accessor for AlishaPeer(0);
    v64 = swift_dynamicCastClass(a4, v63);
    if (v64)
    {
      if ((v58 & 1) != 0)
        goto LABEL_23;
      if ((*(_BYTE *)(*(_QWORD *)(v64 + OBJC_IVAR____TtC10seserviced10AlishaPeer_configuration) + 64) & 1) == 0)
      {
        v65 = swift_retain(a4);
        v66 = Logger.logObject.getter(v65);
        v70 = static os_log_type_t.info.getter(v66, v67, v68, v69);
        if (os_log_type_enabled(v66, v70))
        {
          v71 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v71 = 0;
          _os_log_impl((void *)&_mh_execute_header, v66, v70, "HUP disabled by configuration", v71, 2u);
          swift_slowDealloc(v71, -1, -1);
        }

        sub_1000ECB58();
        v64 = swift_release(a4);
LABEL_23:
        v72 = Logger.logObject.getter(v64);
        v76 = static os_log_type_t.info.getter(v72, v73, v74, v75);
        if (os_log_type_enabled(v72, v76))
        {
          v77 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v77 = 0;
          _os_log_impl((void *)&_mh_execute_header, v72, v76, "HUP already done", v77, 2u);
          swift_slowDealloc(v77, -1, -1);
        }

        if ((a3 & 1) != 0)
        {
          if (qword_100344680 != -1)
            swift_once(&qword_100344680, sub_10016E9A8);
          v78 = sub_1000E848C(0xD000000000000094, 0x80000001002BC080);
          if (v79 >> 60 == 15)
          {
            __break(1u);
            JUMPOUT(0x1000ECB28);
          }
          v80 = v78;
          v81 = v79;
          v82 = v54;
          v83 = (void *)qword_100354EE8;
          v84 = (void (*)(_QWORD *, _QWORD, unint64_t))v119;
          v85 = v120;
          *v120 = qword_100354EE8;
          v86 = v117;
          v84(v85, v118, v117);
          v87 = v83;
          v88 = _dispatchPreconditionTest(_:)(v85);
          v116(v85, v86);
          if ((v88 & 1) != 0)
          {
            sub_100176C18(6, 23, v80, v81);
            v83 = v89;
            v86 = v90;
            if (qword_1003445A0 == -1)
              goto LABEL_31;
          }
          else
          {
            __break(1u);
          }
          swift_once(&qword_1003445A0, sub_1000B26B0);
LABEL_31:
          sub_1000ADCAC((uint64_t)v83, v86, a4);
          sub_100063CD0((uint64_t)v83, v86);
          if (v23)
          {
            sub_10006B9B4(v80, v81);

            swift_errorRelease(v23);
          }
          else
          {

            sub_10006B9B4(v80, v81);
          }
          return;
        }
LABEL_35:

        return;
      }
    }
    else if ((v58 & 1) != 0)
    {
      goto LABEL_23;
    }
    if (v121 >> 60 != 15)
    {
      LODWORD(v120) = a3;
      v91 = v121 >> 62;
      sub_100063C8C(a1, v121);
      v92 = objc_msgSend(v54, "hupData");
      if (v92)
      {
        v93 = v92;
        v94 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v92);
        v96 = v95;

        sub_100063CD0(v94, v96);
      }
      else
      {
        v119 = (void (*)(_QWORD))v91;
        if (qword_1003447C0 != -1)
          swift_once(&qword_1003447C0, sub_1001EF020);
        v118 = qword_100354EF0;
        v97 = (_QWORD *)swift_allocObject(&unk_100308AA0, 48, 7);
        v97[2] = v54;
        v97[3] = a1;
        v98 = v121;
        v99 = (void *)v109;
        v97[4] = v121;
        v97[5] = v99;
        aBlock[4] = (uint64_t)sub_1000F1A5C;
        v125 = v97;
        aBlock[0] = (uint64_t)_NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = (uint64_t)sub_100071C98;
        aBlock[3] = (uint64_t)&unk_100308AB8;
        v100 = _Block_copy(aBlock);
        sub_10006BA34(a1, v98);
        v101 = v54;
        v102 = v99;
        v103 = v112;
        static DispatchQoS.unspecified.getter(v102);
        v123 = _swiftEmptyArrayStorage;
        v91 = sub_100099850();
        v104 = sub_100063D3C((uint64_t *)&unk_100346200);
        v105 = sub_10007EF60((unint64_t *)&qword_100344A30, (uint64_t *)&unk_100346200, (uint64_t)&protocol conformance descriptor for [A]);
        v106 = v115;
        v107 = v111;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v123, v104, v105, v111, v91);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v103, v106, v100);
        _Block_release(v100);
        (*(void (**)(char *, uint64_t))(v110 + 8))(v106, v107);
        (*(void (**)(char *, uint64_t))(v113 + 8))(v103, v114);
        swift_release(v125);
        LODWORD(v91) = (_DWORD)v119;
      }
      __asm { BR              X10 }
    }
    sub_1000ECB58();
    goto LABEL_35;
  }
  v59 = Logger.logObject.getter(v55);
  v61 = static os_log_type_t.error.getter(v59, v60);
  if (os_log_type_enabled(v59, v61))
  {
    v62 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v62 = 0;
    _os_log_impl((void *)&_mh_execute_header, v59, v61, "Endpoint does not exist", v62, 2u);
    swift_slowDealloc(v62, -1, -1);
  }

}

void sub_1000ECB58()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  unsigned __int8 v20;
  uint64_t v21;
  void *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD aBlock[5];
  uint64_t v29;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v26 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1, v2);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchPredicate(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (uint64_t *)((char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v15 = qword_100354EE8;
  *v14 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v10);
  v16 = (id)v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)(v14);
  (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v14, v10);
  if ((v15 & 1) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  v17 = objc_msgSend(v0, "hupDone");

  if (!v17)
    goto LABEL_7;
  v18 = objc_msgSend(v0, "hupDone");
  if (!v18)
  {
    __break(1u);
    return;
  }
  v19 = v18;
  v20 = objc_msgSend(v18, "BOOLValue");

  if ((v20 & 1) == 0)
  {
LABEL_7:
    if (qword_1003447C0 == -1)
    {
LABEL_8:
      v21 = swift_allocObject(&unk_100308C30, 24, 7);
      *(_QWORD *)(v21 + 16) = v0;
      aBlock[4] = sub_1000F1BB4;
      v29 = v21;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100071C98;
      aBlock[3] = &unk_100308C48;
      v22 = _Block_copy(aBlock);
      static DispatchQoS.unspecified.getter(v0);
      v27 = _swiftEmptyArrayStorage;
      v23 = sub_100099850();
      v24 = sub_100063D3C((uint64_t *)&unk_100346200);
      v25 = sub_10007EF60((unint64_t *)&qword_100344A30, (uint64_t *)&unk_100346200, (uint64_t)&protocol conformance descriptor for [A]);
      dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v24, v25, v1, v23);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v4, v22);
      _Block_release(v22);
      (*(void (**)(char *, uint64_t))(v26 + 8))(v4, v1);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      swift_release(v29);
      return;
    }
LABEL_11:
    swift_once(&qword_1003447C0, sub_1001EF020);
    goto LABEL_8;
  }
}

uint64_t sub_1000ECE5C(void *a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void **v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSString v25;
  uint64_t v26;
  void *v27;
  _QWORD *v28;
  id v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  void **aBlock;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  _QWORD *v51;

  v40 = a4;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v44 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v42 = *(_QWORD *)(v11 - 8);
  v43 = v11;
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = a1;
  v15 = objc_msgSend(a1, "publicKeyIdentifier");
  v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v15);
  v18 = v17;

  sub_1001BD2CC(v16, v18);
  v20 = v19;
  aBlock = v19;
  v21 = sub_100063D3C((uint64_t *)&unk_100346060);
  v22 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
  BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v21, v22);
  v24 = v23;
  swift_bridgeObjectRelease(v20);
  sub_100063CD0(v16, v18);
  v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v24);
  v26 = swift_allocObject(&unk_100308B90, 32, 7);
  *(_QWORD *)(v26 + 16) = a2;
  *(_QWORD *)(v26 + 24) = a3;
  v50 = sub_1000F1B08;
  v51 = (_QWORD *)v26;
  aBlock = _NSConcreteStackBlock;
  v47 = 1107296256;
  v48 = sub_100087BE8;
  v49 = &unk_100308BA8;
  v27 = _Block_copy(&aBlock);
  v28 = v51;
  sub_100063C8C(a2, a3);
  swift_release(v28);
  v29 = (id)SESEndPointUpdateWithBlock(v25, v27);
  _Block_release(v27);

  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v30 = (_QWORD *)swift_allocObject(&unk_100308BE0, 40, 7);
  v32 = v40;
  v31 = v41;
  v30[2] = v29;
  v30[3] = v32;
  v30[4] = v31;
  v50 = sub_1000F1B84;
  v51 = v30;
  aBlock = _NSConcreteStackBlock;
  v47 = 1107296256;
  v48 = sub_100071C98;
  v49 = &unk_100308BF8;
  v33 = _Block_copy(&aBlock);
  v34 = v29;
  v35 = v32;
  static DispatchQoS.unspecified.getter(v31);
  v45 = _swiftEmptyArrayStorage;
  v36 = sub_100099850();
  v37 = sub_100063D3C((uint64_t *)&unk_100346200);
  v38 = sub_10007EF60((unint64_t *)&qword_100344A30, (uint64_t *)&unk_100346200, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v45, v37, v38, v7, v36);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v10, v33);
  _Block_release(v33);

  (*(void (**)(char *, uint64_t))(v44 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v14, v43);
  return swift_release(v51);
}

void sub_1000ED1D0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  os_log_type_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  os_log_type_t v28;
  uint8_t *v29;
  os_log_t osloga;
  NSObject *oslog;
  _QWORD v32[3];
  _BYTE v33[8];
  uint64_t v34;
  _BYTE v35[16];
  os_log_t v36;

  if (a1)
  {
    swift_errorRetain(a1);
    swift_errorRetain(a1);
    v5 = a3;
    swift_errorRetain(a1);
    v6 = v5;
    v7 = Logger.logObject.getter(v6);
    v9 = static os_log_type_t.error.getter(v7, v8);
    if (os_log_type_enabled(v7, v9))
    {
      v10 = swift_slowAlloc(22, -1);
      osloga = (os_log_t)swift_slowAlloc(64, -1);
      v36 = osloga;
      *(_DWORD *)v10 = 136315394;
      v11 = objc_msgSend(v6, "publicKeyIdentifier");
      v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v11);
      v14 = v13;

      sub_1001BD2CC(v12, v14);
      v16 = v15;
      v17 = sub_100063D3C((uint64_t *)&unk_100346060);
      v18 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
      v19 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v17, v18);
      v21 = v20;
      swift_bridgeObjectRelease(v16);
      sub_100063CD0(v12, v14);
      v34 = sub_1001C56EC(v19, v21, (uint64_t *)&v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, v35, v10 + 4, v10 + 12);

      swift_bridgeObjectRelease(v21);
      *(_WORD *)(v10 + 12) = 2080;
      swift_getErrorValue(a1, v33, v32);
      v22 = Error.localizedDescription.getter(v32[1], v32[2]);
      v24 = v23;
      v34 = sub_1001C56EC(v22, v23, (uint64_t *)&v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, v35, v10 + 14, v10 + 22);
      swift_bridgeObjectRelease(v24);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v7, v9, "Failed to update HUP data for %s %s", (uint8_t *)v10, 0x16u);
      swift_arrayDestroy(osloga, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(osloga, -1, -1);
      swift_slowDealloc(v10, -1, -1);
      swift_errorRelease(a1);

    }
    else
    {
      swift_errorRelease(a1);

      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }
  }
  else
  {
    oslog = Logger.logObject.getter(0);
    v28 = static os_log_type_t.info.getter(oslog, v25, v26, v27);
    if (os_log_type_enabled(oslog, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v28, "Endpoint updated with hupData", v29, 2u);
      swift_slowDealloc(v29, -1, -1);
    }

  }
}

void sub_1000ED534(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t Strong;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  os_unfair_lock_s *v25;
  os_unfair_lock_s *v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  os_log_type_t v32;
  uint8_t *v33;
  _QWORD v34[2];
  _BYTE v35[24];
  _BYTE v36[24];

  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (_QWORD *)((char *)v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v11 = qword_100354EE8;
  *v10 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  v12 = (id)v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v10);
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v10, v6);
  if ((v11 & 1) == 0)
  {
    __break(1u);
LABEL_13:
    swift_once(&qword_1003445B8, sub_1000EAA4C);
    goto LABEL_6;
  }
  v13 = a1 + 16;
  swift_beginAccess(v13, v36, 0, 0);
  Strong = swift_weakLoadStrong(v13);
  if (!Strong)
    return;
  v6 = Strong;
  objc_msgSend(*(id *)(Strong + 16), "invalidate");
  v15 = (uint64_t *)(a2 + OBJC_IVAR____TtC10seserviced9AlishaHUP_sessions);
  swift_beginAccess(a2 + OBJC_IVAR____TtC10seserviced9AlishaHUP_sessions, v35, 1, 0);
  v16 = *v15;
  swift_retain(v6);
  v17 = swift_bridgeObjectRetain(v16);
  v18 = sub_1000F14C8(v17, v6);
  swift_bridgeObjectRelease(v16);
  swift_release(v6);
  v19 = *v15;
  *v15 = (uint64_t)v18;
  swift_bridgeObjectRelease(v19);
  v20 = qword_1003445B8;
  swift_retain(a3);
  if (v20 != -1)
    goto LABEL_13;
LABEL_6:
  v21 = off_1003463F0;
  v22 = swift_allocObject(&unk_100308B68, 32, 7);
  *(_QWORD *)(v22 + 16) = sub_1000F17B4;
  *(_QWORD *)(v22 + 24) = a3;
  v24 = __chkstk_darwin(v22, v23);
  v34[-4] = sub_100096F30;
  v34[-3] = v24;
  v34[-2] = v21;
  v26 = v25 + 4;
  swift_retain(a3);
  os_unfair_lock_lock(v26);
  sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_100096F14, v34);
  os_unfair_lock_unlock(v26);
  v27 = v34[0];
  swift_release(a3);
  swift_release(v22);
  v28 = sub_10009F618(v27);
  v29 = swift_bridgeObjectRelease(v27);
  if (v28)
  {
    sub_1000ECB58();
    v30 = objc_opt_self(SESDAnalyticsLogger);
    sub_100049264(v30, v28, 2147483652);
  }
  else
  {
    v28 = Logger.logObject.getter(v29);
    v32 = static os_log_type_t.error.getter(v28, v31);
    if (os_log_type_enabled(v28, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v32, "Endpoint does not exist", v33, 2u);
      swift_slowDealloc(v33, -1, -1);
    }
  }
  swift_release(v6);

}

uint64_t sub_1000ED854(unint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;
  uint64_t result;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33[2];
  _BYTE v34[24];

  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (_QWORD *)((char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v8 = qword_100354EE8;
  *v7 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  v9 = (id)v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v4 + 8))(v7, v3);
  if ((v8 & 1) != 0)
  {
    v11 = (uint64_t *)(v1 + OBJC_IVAR____TtC10seserviced9AlishaHUP_sessions);
    swift_beginAccess(v1 + OBJC_IVAR____TtC10seserviced9AlishaHUP_sessions, v34, 1, 0);
    v12 = *v11;
    swift_retain(a1);
    swift_bridgeObjectRetain(v12);
    v14 = sub_1000F166C(v13, a1);
    swift_bridgeObjectRelease(v12);
    result = swift_release(a1);
    if (v14)
    {
      v15 = swift_retain_n(a1, 2);
      v16 = Logger.logObject.getter(v15);
      v20 = static os_log_type_t.info.getter(v16, v17, v18, v19);
      if (os_log_type_enabled(v16, v20))
      {
        v21 = (uint8_t *)swift_slowAlloc(12, -1);
        v22 = swift_slowAlloc(32, -1);
        *(_DWORD *)v21 = 136315138;
        v33[0] = v22;
        v31[0] = v21 + 4;
        v23 = swift_retain(a1);
        v24 = UUID.uuidString.getter(v23);
        v31[1] = 0;
        v26 = v25;
        swift_release(a1);
        v32 = sub_1001C56EC(v24, v26, v33);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, v33, v31[0], v21 + 12);
        swift_release_n(a1, 2);
        swift_bridgeObjectRelease(v26);
        _os_log_impl((void *)&_mh_execute_header, v16, v20, "Cancelling HUP for %s", v21, 0xCu);
        swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v22, -1, -1);
        swift_slowDealloc(v21, -1, -1);
      }
      else
      {
        swift_release_n(a1, 2);
      }

      objc_msgSend(*(id *)(v14 + 16), "invalidate");
      v27 = *v11;
      swift_retain(a1);
      swift_bridgeObjectRetain(v27);
      v29 = sub_1000F1328(v28, a1);
      swift_release(v14);
      swift_bridgeObjectRelease(v27);
      swift_release(a1);
      v30 = *v11;
      *v11 = (uint64_t)v29;
      return swift_bridgeObjectRelease(v30);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1000EDB50(char a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  id v20;
  char v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  os_log_type_t v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  os_log_type_t v41;
  _BOOL4 v42;
  uint64_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  os_log_type_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  os_unfair_lock_s *v72;
  os_unfair_lock_s *v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  id v77;
  void *v78;
  unsigned __int8 v79;
  NSObject *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  os_log_type_t v84;
  uint8_t *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  NSObject *v96;
  uint64_t v97;
  os_log_type_t v98;
  uint8_t *v99;
  void *v100;
  _QWORD v101[2];
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108[3];
  uint64_t v109;
  _BYTE v110[16];

  v9 = v8;
  LODWORD(v104) = a8;
  v106 = a6;
  v107 = a7;
  v105 = a5;
  v14 = type metadata accessor for DispatchPredicate(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  v18 = (_QWORD *)((char *)v101 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v19 = (void *)qword_100354EE8;
  *v18 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v15 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v14);
  v20 = v19;
  v21 = _dispatchPreconditionTest(_:)(v18);
  (*(void (**)(_QWORD *, uint64_t))(v15 + 8))(v18, v14);
  if ((v21 & 1) == 0)
  {
    __break(1u);
LABEL_35:
    swift_once(&qword_1003445B8, sub_1000EAA4C);
    goto LABEL_16;
  }
  if (a1 != 24)
  {
    if (a1 == 22)
    {
      v22 = swift_retain_n(a4, 2);
      v23 = Logger.logObject.getter(v22);
      v27 = static os_log_type_t.info.getter(v23, v24, v25, v26);
      if (os_log_type_enabled(v23, v27))
      {
        v28 = swift_slowAlloc(12, -1);
        v103 = v9;
        v29 = (uint8_t *)v28;
        v30 = swift_slowAlloc(32, -1);
        v107 = a2;
        *(_DWORD *)v29 = 136315138;
        v108[0] = v30;
        v31 = swift_retain(a4);
        v32 = UUID.uuidString.getter(v31);
        v34 = v33;
        swift_release(a4);
        v109 = sub_1001C56EC(v32, v34, v108);
        a2 = v107;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110, v29 + 4, v29 + 12);
        swift_release_n(a4, 2);
        swift_bridgeObjectRelease(v34);
        _os_log_impl((void *)&_mh_execute_header, v23, v27, "Received HUP HU_PP from %s", v29, 0xCu);
        swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v30, -1, -1);
        swift_slowDealloc(v29, -1, -1);
      }
      else
      {
        swift_release_n(a4, 2);
      }

      sub_1000EB954(a2, a3, 1, a4);
    }
    else
    {
      sub_100063C8C(a2, a3);
      v52 = sub_100063C8C(a2, a3);
      v53 = Logger.logObject.getter(v52);
      v57 = static os_log_type_t.info.getter(v53, v54, v55, v56);
      if (os_log_type_enabled(v53, v57))
      {
        v58 = swift_slowAlloc(15, -1);
        v59 = swift_slowAlloc(32, -1);
        v108[0] = v59;
        *(_DWORD *)v58 = 16777730;
        LOBYTE(v109) = a1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, (char *)&v109 + 1, v58 + 4, v58 + 5);
        *(_WORD *)(v58 + 5) = 2080;
        sub_1001BD2CC(a2, a3);
        v61 = v60;
        v109 = v60;
        v62 = sub_100063D3C((uint64_t *)&unk_100346060);
        v63 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
        v64 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v62, v63);
        v66 = v65;
        swift_bridgeObjectRelease(v61);
        v109 = sub_1001C56EC(v64, v66, v108);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110, v58 + 7, v58 + 15);
        swift_bridgeObjectRelease(v66);
        sub_100063CD0(a2, a3);
        sub_100063CD0(a2, a3);
        _os_log_impl((void *)&_mh_execute_header, v53, v57, "Ignoring unknown message with identifier %hhu payload %s", (uint8_t *)v58, 0xFu);
        swift_arrayDestroy(v59, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v59, -1, -1);
        swift_slowDealloc(v58, -1, -1);

      }
      else
      {

        sub_100063CD0(a2, a3);
        sub_100063CD0(a2, a3);
      }
    }
    return;
  }
  v35 = v9 + OBJC_IVAR____TtC10seserviced9AlishaHUP_logger;
  v36 = swift_retain_n(a4, 2);
  v37 = Logger.logObject.getter(v36);
  v41 = static os_log_type_t.info.getter(v37, v38, v39, v40);
  v42 = os_log_type_enabled(v37, v41);
  v103 = v9;
  if (v42)
  {
    v43 = swift_slowAlloc(12, -1);
    v101[1] = v35;
    v44 = (uint8_t *)v43;
    v45 = swift_slowAlloc(32, -1);
    v102 = a3;
    v46 = v45;
    *(_DWORD *)v44 = 136315138;
    v108[0] = v45;
    v47 = swift_retain(a4);
    v48 = UUID.uuidString.getter(v47);
    v50 = v49;
    swift_release(a4);
    v109 = sub_1001C56EC(v48, v50, v108);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110, v44 + 4, v44 + 12);
    swift_release_n(a4, 2);
    swift_bridgeObjectRelease(v50);
    _os_log_impl((void *)&_mh_execute_header, v37, v41, "Received HUP HUP_RS from %s", v44, 0xCu);
    swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
    v51 = v46;
    a3 = v102;
    swift_slowDealloc(v51, -1, -1);
    swift_slowDealloc(v44, -1, -1);
  }
  else
  {
    swift_release_n(a4, 2);
  }

  v67 = qword_1003445B8;
  swift_retain(a4);
  if (v67 != -1)
    goto LABEL_35;
LABEL_16:
  v68 = off_1003463F0;
  v69 = swift_allocObject(&unk_100308A50, 32, 7);
  *(_QWORD *)(v69 + 16) = sub_1000F17B4;
  *(_QWORD *)(v69 + 24) = a4;
  v71 = __chkstk_darwin(v69, v70);
  v101[-4] = sub_100095FDC;
  v101[-3] = v71;
  v100 = v68;
  v73 = v72 + 4;
  swift_retain(a4);
  os_unfair_lock_lock(v73);
  sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_10007EFBC, v108);
  os_unfair_lock_unlock(v73);
  v74 = v108[0];
  swift_release(a4);
  swift_release(v69);
  v75 = (void *)sub_10009F618(v74);
  v76 = swift_bridgeObjectRelease(v74);
  if (!v75)
  {
LABEL_20:
    v80 = Logger.logObject.getter(v76);
    v84 = static os_log_type_t.info.getter(v80, v81, v82, v83);
    if (os_log_type_enabled(v80, v84))
    {
      v85 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v85 = 0;
      _os_log_impl((void *)&_mh_execute_header, v80, v84, "HUP already done", v85, 2u);
      swift_slowDealloc(v85, -1, -1);
    }

    if (qword_100344680 != -1)
      swift_once(&qword_100344680, sub_10016E9A8);
    v86 = sub_1000E848C(0xD000000000000094, 0x80000001002BC080);
    if (v87 >> 60 == 15)
    {
      __break(1u);
      JUMPOUT(0x1000EE7E8);
    }
    v88 = v86;
    v89 = v87;
    sub_10016E310(6u, 23, v86, v87, a4, v105, v106, v107, v104 & 1);
    sub_10006B9B4(v88, v89);
    return;
  }
  v77 = objc_msgSend(v75, "hupDone");
  if (v77)
  {
    v78 = v77;
    v79 = objc_msgSend(v77, "BOOLValue");

    if ((v79 & 1) != 0)
    {

      goto LABEL_20;
    }
  }
  v90 = (uint64_t *)(v103 + OBJC_IVAR____TtC10seserviced9AlishaHUP_sessions);
  swift_beginAccess(v103 + OBJC_IVAR____TtC10seserviced9AlishaHUP_sessions, v108, 0, 0);
  v91 = *v90;
  swift_retain(a4);
  v92 = swift_bridgeObjectRetain(v91);
  v93 = sub_1000F166C(v92, a4);
  swift_bridgeObjectRelease(v91);
  v94 = swift_release(a4);
  if (v93)
  {
    v95 = *(_QWORD *)(v93 + OBJC_IVAR____TtCC10seserviced9AlishaHUPP33_064FC107EADA2071ABEBB0503A0F3D3810HUPSession_timer);
    if (v95)
      sub_10004C548(v95);
    __asm { BR              X10 }
  }
  v96 = Logger.logObject.getter(v94);
  v98 = static os_log_type_t.error.getter(v96, v97);
  if (os_log_type_enabled(v96, v98))
  {
    v99 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v99 = 0;
    _os_log_impl((void *)&_mh_execute_header, v96, v98, "No active HUP session", v99, 2u);
    swift_slowDealloc(v99, -1, -1);
  }

  sub_1000ECB58();
}

uint64_t sub_1000EE7F8(void *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v11;
  char v12;

  v3 = objc_msgSend(a1, "publicKeyIdentifier");
  v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  v7 = a2 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier;
  v8 = *(_QWORD *)(a2 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
  v9 = *(_QWORD *)(v7 + 8);
  if (v9 >> 60 == 15)
  {
    sub_10006B9B4(v4, v6);
    sub_10006B9B4(v8, v9);
    return 0;
  }
  else
  {
    sub_100063C8C(v4, v6);
    sub_10006BA34(v8, v9);
    sub_10007C23C(v4, v6);
    v12 = v11;
    sub_10006B9B4(v8, v9);
    sub_100063CD0(v4, v6);
    sub_100063CD0(v4, v6);
    return v12 & 1;
  }
}

void sub_1000EE8E4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  id v14;
  char v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  os_log_type_t v37;
  uint8_t *v38;
  char v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45[3];

  v4 = v3;
  v8 = type metadata accessor for DispatchPredicate(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (unint64_t *)((char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v13 = (void *)qword_100354EE8;
  *v12 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8);
  v14 = v13;
  v15 = _dispatchPreconditionTest(_:)(v12);
  (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v12, v8);
  if ((v15 & 1) != 0)
  {
    v16 = swift_retain_n(a3, 2);
    v17 = Logger.logObject.getter(v16);
    v21 = static os_log_type_t.info.getter(v17, v18, v19, v20);
    if (os_log_type_enabled(v17, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      v23 = swift_slowAlloc(32, -1);
      v42 = a1;
      v24 = v23;
      v40 = a2;
      v41 = v4;
      *(_DWORD *)v22 = 136315138;
      v45[0] = v23;
      v25 = swift_retain(a3);
      v26 = UUID.uuidString.getter(v25);
      v28 = v27;
      swift_release(a3);
      v43 = sub_1001C56EC(v26, v28, v45);
      a2 = v40;
      v4 = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v22 + 4, v22 + 12);
      swift_release_n(a3, 2);
      swift_bridgeObjectRelease(v28);
      _os_log_impl((void *)&_mh_execute_header, v17, v21, "Received HUP event from %s", v22, 0xCu);
      swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
      v29 = v24;
      a1 = v42;
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v22, -1, -1);
    }
    else
    {
      swift_release_n(a3, 2);
    }

    v30 = (uint64_t *)(v4 + OBJC_IVAR____TtC10seserviced9AlishaHUP_sessions);
    swift_beginAccess(v4 + OBJC_IVAR____TtC10seserviced9AlishaHUP_sessions, v45, 0, 0);
    v31 = *v30;
    swift_retain(a3);
    v32 = swift_bridgeObjectRetain(v31);
    v33 = sub_1000F166C(v32, a3);
    swift_bridgeObjectRelease(v31);
    v34 = swift_release(a3);
    if (v33)
    {
      sub_100063C8C(a1, a2);
      sub_1000723E8(a1, a2, 0);
      objc_msgSend(*(id *)(v33 + 16), "handleVehicleReportedResult:", v39 == 0);
      swift_release(v33);
    }
    else
    {
      v35 = Logger.logObject.getter(v34);
      v37 = static os_log_type_t.error.getter(v35, v36);
      if (os_log_type_enabled(v35, v37))
      {
        v38 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v38 = 0;
        _os_log_impl((void *)&_mh_execute_header, v35, v37, "No active HUP session", v38, 2u);
        swift_slowDealloc(v38, -1, -1);
      }

    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000EECDC()
{
  id *v0;
  char *v1;
  uint64_t v2;

  v1 = (char *)v0
     + OBJC_IVAR____TtCC10seserviced9AlishaHUPP33_064FC107EADA2071ABEBB0503A0F3D3810HUPSession_connectionIdentifier;
  v2 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release(*(id *)((char *)v0
                      + OBJC_IVAR____TtCC10seserviced9AlishaHUPP33_064FC107EADA2071ABEBB0503A0F3D3810HUPSession_peer));
  objc_release(*(id *)((char *)v0
                     + OBJC_IVAR____TtCC10seserviced9AlishaHUPP33_064FC107EADA2071ABEBB0503A0F3D3810HUPSession_timer));
  return swift_deallocClassInstance(v0, *((unsigned int *)*v0 + 12), *((unsigned __int16 *)*v0 + 26));
}

uint64_t sub_1000EED54(_QWORD *a1, _QWORD *a2)
{
  return static UUID.== infix(_:_:)(*(_QWORD *)(*a1 + OBJC_IVAR____TtCC10seserviced9AlishaHUPP33_064FC107EADA2071ABEBB0503A0F3D3810HUPSession_peer)+ OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier, *(_QWORD *)(*a2 + OBJC_IVAR____TtCC10seserviced9AlishaHUPP33_064FC107EADA2071ABEBB0503A0F3D3810HUPSession_peer)+ OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier);
}

uint64_t sub_1000EEDD4()
{
  return type metadata accessor for AlishaHUP(0);
}

uint64_t type metadata accessor for AlishaHUP(uint64_t a1)
{
  return sub_10007BBF0(a1, (uint64_t *)&unk_100346470, (uint64_t)&nominal type descriptor for AlishaHUP);
}

uint64_t sub_1000EEDF0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1000EEE78()
{
  return type metadata accessor for AlishaHUP.HUPSession(0);
}

uint64_t type metadata accessor for AlishaHUP.HUPSession(uint64_t a1)
{
  return sub_10007BBF0(a1, qword_1003464C0, (uint64_t)&nominal type descriptor for AlishaHUP.HUPSession);
}

uint64_t sub_1000EEE94(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = &unk_100289B88;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[4] = &unk_100289BA0;
    result = swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1000EEF30(void *a1, uint64_t a2, unint64_t a3, void *a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, unint64_t a12)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  id v29;
  id v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  const void *v38;
  id v40;
  void *v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  id v51;
  _QWORD *v52;
  _QWORD aBlock[5];
  _QWORD *v54;

  v41 = a4;
  v42 = a8;
  v50 = a12;
  v46 = type metadata accessor for DispatchWorkItemFlags(0);
  v49 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46, v18);
  v45 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for DispatchQoS(0);
  v47 = *(_QWORD *)(v20 - 8);
  v48 = v20;
  __chkstk_darwin(v20, v21);
  v43 = (char *)&v40 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v44 = qword_100354EE8;
  v23 = (_QWORD *)swift_allocObject(&unk_100308D70, 120, 7);
  v23[2] = v51;
  v23[3] = a1;
  v23[4] = a2;
  v23[5] = a3;
  v24 = a5;
  v23[6] = a5;
  v23[7] = a6;
  v25 = a6;
  v26 = a7;
  v23[8] = a7;
  v27 = v42;
  v23[9] = v42;
  v23[10] = a9;
  v23[11] = a10;
  v23[12] = a11;
  v40 = a1;
  v28 = v41;
  v23[13] = v50;
  v23[14] = v28;
  aBlock[4] = sub_1000F1D04;
  v54 = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100071C98;
  aBlock[3] = &unk_100308D88;
  v41 = _Block_copy(aBlock);
  v29 = v51;
  v30 = v40;
  sub_100063C8C(a2, a3);
  sub_10006BA34(v24, v25);
  sub_10006BA34(v26, v27);
  sub_10006BA34(a9, a10);
  v31 = sub_10006BA34(a11, v50);
  v32 = v43;
  static DispatchQoS.unspecified.getter(v31);
  v52 = _swiftEmptyArrayStorage;
  v33 = sub_100099850();
  v34 = sub_100063D3C((uint64_t *)&unk_100346200);
  v35 = sub_10007EF60((unint64_t *)&qword_100344A30, (uint64_t *)&unk_100346200, (uint64_t)&protocol conformance descriptor for [A]);
  v36 = v45;
  v37 = v46;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v52, v34, v35, v46, v33);
  v38 = v41;
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v32, v36, v41);
  _Block_release(v38);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v36, v37);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v32, v48);
  return swift_release(v54);
}

void sub_1000EF1E8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  os_log_type_t v20;
  uint8_t *v21;
  _QWORD *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  os_unfair_lock_s *v34;
  os_unfair_lock_s *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  uint64_t v40;
  os_log_type_t v41;
  uint8_t *v42;
  NSObject *v43;
  uint64_t v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  void *v51;
  _QWORD v52[12];
  uint64_t v53;
  _BYTE v54[24];

  v52[10] = a5;
  v52[11] = a6;
  v52[9] = a3;
  v13 = sub_100063D3C((uint64_t *)&unk_1003465E0);
  v15 = __chkstk_darwin(v13, v14);
  v16 = Logger.logObject.getter(v15);
  v20 = static os_log_type_t.info.getter(v16, v17, v18, v19);
  if (os_log_type_enabled(v16, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v20, "Received HUP delegate requestedPairingWithDeviceAddress for CARWirelessPairingSession", v21, 2u);
    swift_slowDealloc(v21, -1, -1);
  }

  v22 = (_QWORD *)(a1 + OBJC_IVAR____TtC10seserviced9AlishaHUP_sessions);
  swift_beginAccess(a1 + OBJC_IVAR____TtC10seserviced9AlishaHUP_sessions, v54, 1, 0);
  v23 = *v22;
  v24 = a2;
  v25 = swift_bridgeObjectRetain(v23);
  v26 = sub_1000F17F4(v25, (uint64_t)v24);
  swift_bridgeObjectRelease(v23);

  if (v26)
  {
    v52[6] = OBJC_IVAR____TtCC10seserviced9AlishaHUPP33_064FC107EADA2071ABEBB0503A0F3D3810HUPSession_timer;
    v28 = *(_QWORD *)(v26 + OBJC_IVAR____TtCC10seserviced9AlishaHUPP33_064FC107EADA2071ABEBB0503A0F3D3810HUPSession_timer);
    if (v28)
      sub_10004C548(v28);
    v52[7] = a7;
    v52[8] = a8;
    v29 = qword_1003445B8;
    swift_retain(v26);
    if (v29 != -1)
      swift_once(&qword_1003445B8, sub_1000EAA4C);
    v30 = off_1003463F0;
    v31 = swift_allocObject(&unk_100308DC0, 32, 7);
    *(_QWORD *)(v31 + 16) = sub_1000F1D40;
    *(_QWORD *)(v31 + 24) = v26;
    v33 = __chkstk_darwin(v31, v32);
    v52[-4] = sub_100096F30;
    v52[-3] = v33;
    v51 = v30;
    v35 = v34 + 4;
    swift_retain(v26);
    os_unfair_lock_lock(v35);
    sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_100096F14, &v53);
    os_unfair_lock_unlock(v35);
    v36 = v53;
    swift_release(v26);
    swift_release(v31);
    v37 = sub_10009F618(v36);
    v38 = swift_bridgeObjectRelease(v36);
    if (v37)
      __asm { BR              X10 }
    v43 = Logger.logObject.getter(v38);
    v45 = static os_log_type_t.error.getter(v43, v44);
    if (os_log_type_enabled(v43, v45))
    {
      v46 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v46 = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, v45, "Endpoint does not exist or is not paired", v46, 2u);
      swift_slowDealloc(v46, -1, -1);
    }

    objc_msgSend(*(id *)(v26 + 16), "invalidate");
    v47 = *v22;
    v48 = swift_bridgeObjectRetain(*v22);
    v49 = sub_1000F14C8(v48, v26);
    swift_bridgeObjectRelease(v47);
    swift_release(v26);
    v50 = *v22;
    *v22 = v49;
    swift_bridgeObjectRelease(v50);
  }
  else
  {
    v39 = Logger.logObject.getter(v27);
    v41 = static os_log_type_t.error.getter(v39, v40);
    if (os_log_type_enabled(v39, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v41, "No active HUP session", v42, 2u);
      swift_slowDealloc(v42, -1, -1);
    }

  }
}

uint64_t sub_1000F0018(void *a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  char v12;
  uint64_t result;

  v4 = objc_msgSend(a1, "publicKeyIdentifier");
  v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  v8 = (uint64_t *)(*(_QWORD *)(a2
                             + OBJC_IVAR____TtCC10seserviced9AlishaHUPP33_064FC107EADA2071ABEBB0503A0F3D3810HUPSession_peer)
                 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
  v9 = *v8;
  v10 = v8[1];
  if (v10 >> 60 == 15)
  {
    sub_10006B9B4(v5, v7);
    sub_10006B9B4(v9, v10);
    return 0;
  }
  sub_100063C8C(v5, v7);
  sub_10006BA34(v9, v10);
  sub_10007C23C(v5, v7);
  v12 = v11;
  sub_10006B9B4(v9, v10);
  sub_100063CD0(v5, v7);
  sub_100063CD0(v5, v7);
  if ((v12 & 1) == 0)
    return 0;
  result = (uint64_t)objc_msgSend(a1, "bleUUID");
  if (result)
  {

    return 1;
  }
  return result;
}

uint64_t sub_1000F02F4(void *a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  void *v15;
  id v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  _QWORD *v22;
  _QWORD aBlock[5];
  _QWORD *v24;

  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v21 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v14 = (_QWORD *)swift_allocObject(&unk_100308CF8, 40, 7);
  v14[2] = v2;
  v14[3] = a2;
  v14[4] = a1;
  aBlock[4] = sub_1000F1C1C;
  v24 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100071C98;
  aBlock[3] = &unk_100308D10;
  v15 = _Block_copy(aBlock);
  v16 = v2;
  static DispatchQoS.unspecified.getter(a1);
  v22 = _swiftEmptyArrayStorage;
  v17 = sub_100099850();
  v18 = sub_100063D3C((uint64_t *)&unk_100346200);
  v19 = sub_10007EF60((unint64_t *)&qword_100344A30, (uint64_t *)&unk_100346200, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v18, v19, v5, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v8, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  return swift_release(v24);
}

void sub_1000F04FC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  uint64_t v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  os_unfair_lock_s *v53;
  os_unfair_lock_s *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  os_log_type_t v59;
  uint8_t *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67[3];

  v6 = sub_100063D3C((uint64_t *)&unk_1003465E0);
  v8 = __chkstk_darwin(v6, v7);
  v63 = (uint64_t)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1 + OBJC_IVAR____TtC10seserviced9AlishaHUP_logger;
  v11 = Logger.logObject.getter(v8);
  v15 = static os_log_type_t.info.getter(v11, v12, v13, v14);
  if (os_log_type_enabled(v11, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    v17 = swift_slowAlloc(32, -1);
    v64 = v10;
    v18 = v17;
    v67[0] = v17;
    *(_DWORD *)v16 = 136315138;
    v65 = a2;
    type metadata accessor for CARWirelessPairingResult(0);
    v20 = String.init<A>(describing:)(&v65, v19);
    v22 = v21;
    v65 = sub_1001C56EC(v20, v21, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v16 + 4, v16 + 12);
    swift_bridgeObjectRelease(v22);
    _os_log_impl((void *)&_mh_execute_header, v11, v15, "Received HUP delegate completedWithResult %s", v16, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    v23 = v18;
    v10 = v64;
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v16, -1, -1);
  }

  objc_msgSend(a3, "invalidate");
  v24 = (uint64_t *)(a1 + OBJC_IVAR____TtC10seserviced9AlishaHUP_sessions);
  swift_beginAccess(a1 + OBJC_IVAR____TtC10seserviced9AlishaHUP_sessions, v67, 1, 0);
  v25 = *v24;
  v26 = a3;
  v27 = swift_bridgeObjectRetain(v25);
  v28 = sub_1000F17F4(v27, (uint64_t)v26);
  swift_bridgeObjectRelease(v25);

  if (!v28)
  {
    v44 = Logger.logObject.getter(v29);
    v46 = static os_log_type_t.error.getter(v44, v45);
    if (os_log_type_enabled(v44, v46))
    {
      v47 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v47 = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, v46, "No active HUP session", v47, 2u);
      swift_slowDealloc(v47, -1, -1);
    }
    goto LABEL_21;
  }
  v30 = *(_QWORD *)(v28 + OBJC_IVAR____TtCC10seserviced9AlishaHUPP33_064FC107EADA2071ABEBB0503A0F3D3810HUPSession_timer);
  if (v30)
    sub_10004C548(v30);
  v31 = *v24;
  swift_retain(v28);
  v32 = swift_bridgeObjectRetain(v31);
  v33 = sub_1000F14C8(v32, v28);
  swift_bridgeObjectRelease(v31);
  swift_release(v28);
  v34 = *v24;
  *v24 = (uint64_t)v33;
  swift_bridgeObjectRelease(v34);
  if (!a2 || *(_BYTE *)(v28 + 24) != 1)
  {
LABEL_14:
    v48 = qword_1003445B8;
    swift_retain(v28);
    if (v48 != -1)
      swift_once(&qword_1003445B8, sub_1000EAA4C);
    v49 = off_1003463F0;
    v50 = swift_allocObject(&unk_100308D48, 32, 7);
    *(_QWORD *)(v50 + 16) = sub_1000F1C28;
    *(_QWORD *)(v50 + 24) = v28;
    v52 = __chkstk_darwin(v50, v51);
    *(&v62 - 4) = (uint64_t)sub_100096F30;
    *(&v62 - 3) = v52;
    v61 = v49;
    v54 = v53 + 4;
    swift_retain(v28);
    os_unfair_lock_lock(v54);
    sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_100096F14, &v65);
    os_unfair_lock_unlock(v54);
    v55 = v65;
    swift_release(v28);
    swift_release(v50);
    v44 = sub_10009F618(v55);
    v56 = swift_bridgeObjectRelease(v55);
    if (v44)
    {
      sub_1000ECB58();
      v57 = objc_opt_self(SESDAnalyticsLogger);
      sub_100049264(v57, v44, a2);
    }
    else
    {
      v44 = Logger.logObject.getter(v56);
      v59 = static os_log_type_t.error.getter(v44, v58);
      if (os_log_type_enabled(v44, v59))
      {
        v60 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v60 = 0;
        _os_log_impl((void *)&_mh_execute_header, v44, v59, "No endpoint found", v60, 2u);
        swift_slowDealloc(v60, -1, -1);
      }
    }
    swift_release(v28);
LABEL_21:

    return;
  }
  if (qword_100344680 != -1)
    swift_once(&qword_100344680, sub_10016E9A8);
  v64 = v10;
  v62 = qword_100354D60;
  v35 = sub_1000E848C(0xD000000000000094, 0x80000001002BC080);
  if (v36 >> 60 != 15)
  {
    v37 = v35;
    v38 = v36;
    v39 = *(_QWORD *)(v28 + OBJC_IVAR____TtCC10seserviced9AlishaHUPP33_064FC107EADA2071ABEBB0503A0F3D3810HUPSession_peer);
    v40 = v28
        + OBJC_IVAR____TtCC10seserviced9AlishaHUPP33_064FC107EADA2071ABEBB0503A0F3D3810HUPSession_connectionIdentifier;
    v41 = type metadata accessor for UUID(0);
    v42 = *(_QWORD *)(v41 - 8);
    v43 = v63;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 16))(v63, v40, v41);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v42 + 56))(v43, 0, 1, v41);
    sub_10016E310(6u, 23, v37, v38, v39, 1, v43, 0, 1);
    sub_10006B9B4(v37, v38);
    sub_1000F1C30(v63);
    goto LABEL_14;
  }
  __break(1u);
}

uint64_t sub_1000F0A98(void *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  char v11;
  char v12;

  v3 = objc_msgSend(a1, "publicKeyIdentifier");
  v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  v7 = (uint64_t *)(*(_QWORD *)(a2
                             + OBJC_IVAR____TtCC10seserviced9AlishaHUPP33_064FC107EADA2071ABEBB0503A0F3D3810HUPSession_peer)
                 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
  v8 = *v7;
  v9 = v7[1];
  if (v9 >> 60 == 15)
  {
    sub_10006B9B4(v4, v6);
    sub_10006B9B4(v8, v9);
    return 0;
  }
  else
  {
    sub_100063C8C(v4, v6);
    sub_10006BA34(v8, v9);
    sub_10007C23C(v4, v6);
    v12 = v11;
    sub_10006B9B4(v8, v9);
    sub_100063CD0(v4, v6);
    sub_100063CD0(v4, v6);
    return v12 & 1;
  }
}

uint64_t sub_1000F0BEC(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void **v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSString v20;
  void *v21;
  id v22;
  uint64_t v23;
  void *v24;
  id v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  void **aBlock;
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v32 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31, v7);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = objc_msgSend(a1, "publicKeyIdentifier");
  v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v13 = v12;

  sub_1001BD2CC(v11, v13);
  v15 = v14;
  aBlock = v14;
  v16 = sub_100063D3C((uint64_t *)&unk_100346060);
  v17 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
  BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v16, v17);
  v19 = v18;
  swift_bridgeObjectRelease(v15);
  sub_100063CD0(v11, v13);
  v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v19);
  v38 = sub_1000F0F14;
  v39 = 0;
  aBlock = _NSConcreteStackBlock;
  v35 = 1107296256;
  v36 = sub_100087BE8;
  v37 = &unk_100308C70;
  v21 = _Block_copy(&aBlock);
  v22 = (id)SESEndPointUpdateWithBlock(v20, v21);
  _Block_release(v21);

  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v23 = swift_allocObject(&unk_100308CA8, 32, 7);
  *(_QWORD *)(v23 + 16) = v22;
  *(_QWORD *)(v23 + 24) = a1;
  v38 = sub_1000F1BE8;
  v39 = v23;
  aBlock = _NSConcreteStackBlock;
  v35 = 1107296256;
  v36 = sub_100071C98;
  v37 = &unk_100308CC0;
  v24 = _Block_copy(&aBlock);
  v25 = v22;
  static DispatchQoS.unspecified.getter(a1);
  v33 = _swiftEmptyArrayStorage;
  v26 = sub_100099850();
  v27 = sub_100063D3C((uint64_t *)&unk_100346200);
  v28 = sub_10007EF60((unint64_t *)&qword_100344A30, (uint64_t *)&unk_100346200, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v33, v27, v28, v2, v26);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v5, v24);
  _Block_release(v24);

  (*(void (**)(char *, uint64_t))(v32 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v31);
  return swift_release(v39);
}

void sub_1000F0F14(void *a1)
{
  Class isa;

  sub_10006C25C(0, (unint64_t *)&qword_100344CD8, NSNumber_ptr);
  isa = NSNumber.init(integerLiteral:)(1).super.super.isa;
  objc_msgSend(a1, "setHupDone:", isa);

}

void sub_1000F0F78(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  os_log_type_t v27;
  uint8_t *v28;
  NSObject *oslog;
  _QWORD v30[3];
  _BYTE v31[8];
  uint64_t v32;
  _BYTE v33[16];
  uint64_t v34;

  if (a1)
  {
    v3 = a1;
    swift_errorRetain(a1);
    if (qword_1003447B0 != -1)
      swift_once(&qword_1003447B0, sub_1001EEF58);
    swift_errorRetain(v3);
    v4 = a2;
    swift_errorRetain(v3);
    v5 = v4;
    oslog = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(oslog, v6);
    if (os_log_type_enabled(oslog, v7))
    {
      v8 = swift_slowAlloc(22, -1);
      v9 = swift_slowAlloc(64, -1);
      v34 = v9;
      *(_DWORD *)v8 = 136315394;
      v10 = objc_msgSend(v5, "publicKeyIdentifier");
      v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v10);
      v13 = v12;

      sub_1001BD2CC(v11, v13);
      v15 = v14;
      v16 = sub_100063D3C((uint64_t *)&unk_100346060);
      v17 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
      v18 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v16, v17);
      v20 = v19;
      swift_bridgeObjectRelease(v15);
      sub_100063CD0(v11, v13);
      v32 = sub_1001C56EC(v18, v20, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, v33, v8 + 4, v8 + 12);

      swift_bridgeObjectRelease(v20);
      *(_WORD *)(v8 + 12) = 2080;
      swift_getErrorValue(v3, v31, v30);
      v21 = Error.localizedDescription.getter(v30[1], v30[2]);
      v23 = v22;
      v32 = sub_1001C56EC(v21, v22, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, v33, v8 + 14, v8 + 22);
      swift_bridgeObjectRelease(v23);
      swift_errorRelease(v3);
      swift_errorRelease(v3);
      _os_log_impl((void *)&_mh_execute_header, oslog, v7, "Failed to update HUP done for %s %s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy(v9, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);

      swift_errorRelease(v3);
      return;
    }
    swift_errorRelease(v3);

    swift_errorRelease(v3);
    swift_errorRelease(v3);
  }
  else
  {
    if (qword_1003447B0 != -1)
      a1 = swift_once(&qword_1003447B0, sub_1001EEF58);
    oslog = Logger.logObject.getter(a1);
    v27 = static os_log_type_t.info.getter(oslog, v24, v25, v26);
    if (os_log_type_enabled(oslog, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v27, "Endpoint updated with hupDone", v28, 2u);
      swift_slowDealloc(v28, -1, -1);
    }
  }

}

_QWORD *sub_1000F1328(unint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v3 = a1;
  if (a1 >> 62)
    goto LABEL_16;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    while (1)
    {
      v5 = 0;
      v6 = &OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
      v7 = a2 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
      a2 = v3 & 0xC000000000000001;
      v8 = v3 & 0xFFFFFFFFFFFFFF8;
      v20 = v3 & 0xFFFFFFFFFFFFFF8;
      v21 = v3 & 0xC000000000000001;
      while (a2)
      {
        v16 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v3);
        v17 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_13:
          __break(1u);
          return _swiftEmptyArrayStorage;
        }
LABEL_9:
        if ((static UUID.== infix(_:_:)(*(_QWORD *)(v16+ OBJC_IVAR____TtCC10seserviced9AlishaHUPP33_064FC107EADA2071ABEBB0503A0F3D3810HUPSession_peer)+ *v6, v7) & 1) != 0)
        {
          swift_release(v16);
        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          v9 = v7;
          v10 = v6;
          v11 = v4;
          v12 = v3;
          v13 = _swiftEmptyArrayStorage[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v13);
          v14 = v13;
          v3 = v12;
          v4 = v11;
          v6 = v10;
          v7 = v9;
          v8 = v20;
          v15 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v16);
          specialized ContiguousArray._endMutation()(v15);
          a2 = v21;
        }
        ++v5;
        if (v17 == v4)
          return _swiftEmptyArrayStorage;
      }
      if (v5 < *(_QWORD *)(v8 + 16))
        break;
      __break(1u);
LABEL_16:
      if (v3 < 0)
        v19 = v3;
      else
        v19 = v3 & 0xFFFFFFFFFFFFFF8;
      v4 = _CocoaArrayWrapper.endIndex.getter(v19);
      if (!v4)
        return _swiftEmptyArrayStorage;
    }
    v16 = *(_QWORD *)(v3 + 8 * v5 + 32);
    swift_retain(v16);
    v17 = v5 + 1;
    if (__OFADD__(v5, 1))
      goto LABEL_13;
    goto LABEL_9;
  }
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_1000F14C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;

  if ((unint64_t)a1 >> 62)
    goto LABEL_16;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    while (1)
    {
      v5 = 0;
      v6 = OBJC_IVAR____TtCC10seserviced9AlishaHUPP33_064FC107EADA2071ABEBB0503A0F3D3810HUPSession_peer;
      v7 = a1 & 0xC000000000000001;
      v17 = OBJC_IVAR____TtCC10seserviced9AlishaHUPP33_064FC107EADA2071ABEBB0503A0F3D3810HUPSession_peer;
      while (v7)
      {
        v13 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
        v14 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_13:
          __break(1u);
          return _swiftEmptyArrayStorage;
        }
LABEL_9:
        if ((static UUID.== infix(_:_:)(*(_QWORD *)(v13+ OBJC_IVAR____TtCC10seserviced9AlishaHUPP33_064FC107EADA2071ABEBB0503A0F3D3810HUPSession_peer)+ OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier, *(_QWORD *)(a2 + v6) + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier) & 1) != 0)
        {
          swift_release(v13);
        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          v8 = v7;
          v9 = v4;
          v10 = _swiftEmptyArrayStorage[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v10);
          v11 = v10;
          v4 = v9;
          v7 = v8;
          v12 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v13);
          specialized ContiguousArray._endMutation()(v12);
          v6 = v17;
        }
        ++v5;
        if (v14 == v4)
          return _swiftEmptyArrayStorage;
      }
      if (v5 < *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        break;
      __break(1u);
LABEL_16:
      if (a1 < 0)
        v16 = a1;
      else
        v16 = a1 & 0xFFFFFFFFFFFFFF8;
      v4 = _CocoaArrayWrapper.endIndex.getter(v16);
      if (!v4)
        return _swiftEmptyArrayStorage;
    }
    v13 = *(_QWORD *)(a1 + 8 * v5 + 32);
    swift_retain(v13);
    v14 = v5 + 1;
    if (__OFADD__(v5, 1))
      goto LABEL_13;
    goto LABEL_9;
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1000F166C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;

  if ((unint64_t)a1 >> 62)
    goto LABEL_14;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v4)
  {
    a2 += OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
    v5 = 4;
    while (1)
    {
      v6 = v5 - 4;
      if ((a1 & 0xC000000000000001) == 0)
        break;
      v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, a1);
      v8 = __OFADD__(v6, 1);
      v9 = v5 - 3;
      if (v8)
        goto LABEL_13;
LABEL_9:
      if ((static UUID.== infix(_:_:)(*(_QWORD *)(v7+ OBJC_IVAR____TtCC10seserviced9AlishaHUPP33_064FC107EADA2071ABEBB0503A0F3D3810HUPSession_peer)+ OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier, a2) & 1) != 0)
      {
        swift_bridgeObjectRelease(a1);
        return v7;
      }
      swift_release(v7);
      ++v5;
      if (v9 == v4)
        goto LABEL_18;
    }
    v7 = *(_QWORD *)(a1 + 8 * v5);
    swift_retain(v7);
    v8 = __OFADD__(v6, 1);
    v9 = v5 - 3;
    if (!v8)
      goto LABEL_9;
LABEL_13:
    __break(1u);
LABEL_14:
    if (a1 < 0)
      v10 = a1;
    else
      v10 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v4 = _CocoaArrayWrapper.endIndex.getter(v10);
  }
LABEL_18:
  swift_bridgeObjectRelease(a1);
  return 0;
}

uint64_t sub_1000F17B4(void *a1)
{
  uint64_t v1;

  return sub_1000EE7F8(a1, v1) & 1;
}

uint64_t sub_1000F17D0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000F17F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v11;

  if ((unint64_t)a1 >> 62)
    goto LABEL_15;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v4)
  {
    v5 = 4;
    while (1)
    {
      v6 = v5 - 4;
      if ((a1 & 0xC000000000000001) == 0)
        break;
      v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, a1);
      v8 = __OFADD__(v6, 1);
      v9 = v5 - 3;
      if (v8)
        goto LABEL_14;
LABEL_9:
      if (*(_QWORD *)(v7 + 16) == a2)
      {
        swift_bridgeObjectRelease(a1);
        return v7;
      }
      swift_release(v7);
      ++v5;
      if (v9 == v4)
        goto LABEL_11;
    }
    v7 = *(_QWORD *)(a1 + 8 * v5);
    swift_retain(v7);
    v8 = __OFADD__(v6, 1);
    v9 = v5 - 3;
    if (!v8)
      goto LABEL_9;
LABEL_14:
    __break(1u);
LABEL_15:
    if (a1 < 0)
      v11 = a1;
    else
      v11 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v4 = _CocoaArrayWrapper.endIndex.getter(v11);
  }
LABEL_11:
  swift_bridgeObjectRelease(a1);
  return 0;
}

uint64_t sub_1000F18F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  if ((unint64_t)a1 >> 62)
    goto LABEL_13;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v4)
  {
    a2 += OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
    v5 = 4;
    while (1)
    {
      v6 = v5 - 4;
      if ((a1 & 0xC000000000000001) == 0)
        break;
      v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, a1);
      v8 = v5 - 3;
      if (__OFADD__(v6, 1))
        goto LABEL_12;
LABEL_9:
      v9 = static UUID.== infix(_:_:)(*(_QWORD *)(v7+ OBJC_IVAR____TtCC10seserviced9AlishaHUPP33_064FC107EADA2071ABEBB0503A0F3D3810HUPSession_peer)+ OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier, a2);
      swift_release(v7);
      if ((v9 & 1) == 0)
      {
        ++v5;
        if (v8 != v4)
          continue;
      }
      goto LABEL_18;
    }
    v7 = *(_QWORD *)(a1 + 8 * v5);
    swift_retain(v7);
    v8 = v5 - 3;
    if (!__OFADD__(v6, 1))
      goto LABEL_9;
LABEL_12:
    __break(1u);
LABEL_13:
    if (a1 < 0)
      v10 = a1;
    else
      v10 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v4 = _CocoaArrayWrapper.endIndex.getter(v10);
  }
  v9 = 0;
LABEL_18:
  swift_bridgeObjectRelease(a1);
  return v9 & 1;
}

uint64_t sub_1000F1A28()
{
  uint64_t v0;

  sub_100063CD0(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000F1A5C()
{
  uint64_t v0;

  return sub_1000ECE5C(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_1000F1A68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000F1A78(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000F1A80()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000F1AA4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_1000F1AD8()
{
  uint64_t *v0;

  sub_1000ED534(v0[2], v0[3], v0[4]);
}

uint64_t sub_1000F1AE4()
{
  uint64_t v0;

  sub_100063CD0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1000F1B08(void *a1)
{
  Class isa;

  isa = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a1, "setHupData:", isa);

}

uint64_t sub_1000F1B50()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

void sub_1000F1B84()
{
  uint64_t v0;

  sub_1000ED1D0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_1000F1B90()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000F1BB4()
{
  uint64_t v0;

  return sub_1000F0BEC(*(void **)(v0 + 16));
}

uint64_t sub_1000F1BBC()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

void sub_1000F1BE8()
{
  uint64_t v0;

  sub_1000F0F78(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1000F1BF0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 40, 7);
}

void sub_1000F1C1C()
{
  uint64_t v0;

  sub_1000F04FC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_1000F1C28(void *a1)
{
  uint64_t v1;

  return sub_1000F0A98(a1, v1);
}

uint64_t sub_1000F1C30(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100063D3C((uint64_t *)&unk_1003465E0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000F1C70()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  sub_100063CD0(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  v1 = *(_QWORD *)(v0 + 56);
  if (v1 >> 60 != 15)
    sub_100063CD0(*(_QWORD *)(v0 + 48), v1);
  v2 = *(_QWORD *)(v0 + 72);
  if (v2 >> 60 != 15)
    sub_100063CD0(*(_QWORD *)(v0 + 64), v2);
  v3 = *(_QWORD *)(v0 + 88);
  if (v3 >> 60 != 15)
    sub_100063CD0(*(_QWORD *)(v0 + 80), v3);
  v4 = *(_QWORD *)(v0 + 104);
  if (v4 >> 60 != 15)
    sub_100063CD0(*(_QWORD *)(v0 + 96), v4);
  return swift_deallocObject(v0, 120, 7);
}

void sub_1000F1D04()
{
  uint64_t v0;

  sub_1000EF1E8(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
}

uint64_t sub_1000F1D40(void *a1)
{
  uint64_t v1;

  return sub_1000F0018(a1, v1);
}

uint64_t sub_1000F1D48(uint64_t a1)
{
  uint64_t v1;

  return sub_1000EB6AC(a1, *(_QWORD *)(v1 + 16));
}

BOOL sub_1000F1DAC(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

BOOL sub_1000F1DB8(uint64_t a1, uint64_t a2)
{
  return a2 >= a1;
}

void sub_1000F1DC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X11 }
}

unint64_t sub_1000F1ED8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100345210;
  if (!qword_100345210)
  {
    v1 = sub_100063DC8(&qword_100345200);
    result = swift_getWitnessTable(&protocol conformance descriptor for Range<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100345210);
  }
  return result;
}

void sub_1000F1F24(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }
}

unint64_t sub_1000F1F5C()
{
  Swift::String v0;
  void *object;
  Swift::String v2;

  _StringGuts.grow(_:)(44);
  swift_bridgeObjectRelease(0xE000000000000000);
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  v2._countAndFlagsBits = 0x746E756F636E6520;
  v2._object = (void *)0xEC00000064657265;
  String.append(_:)(v2);
  return 0xD00000000000001ELL;
}

void sub_1000F2158()
{
  JUMPOUT(0x1000F2144);
}

uint64_t sub_1000F21A0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  uint64_t v10;
  id v11;
  void *v12;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    v5 = sub_100063D3C(&qword_100345378);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else
  {
    v12 = a2;
    v10 = *(_QWORD *)(*(_QWORD *)(v3 + 64) + 40);
    v11 = a2;
    sub_1000F72B0((uint64_t)&v12, v10);
    return swift_continuation_throwingResume(v3);
  }
}

uint64_t sub_1000F2240(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    v5 = sub_100063D3C(&qword_100345378);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else
  {
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
    v11 = *(uint64_t **)(*(_QWORD *)(v3 + 64) + 40);
    *v11 = v10;
    v11[1] = v12;
    return swift_continuation_throwingResume(v3);
  }
}

uint64_t sub_1000F22C8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    v5 = sub_100063D3C(&qword_100345378);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else
  {
    **(_QWORD **)(*(_QWORD *)(v3 + 64) + 40) = a2;
    return swift_continuation_throwingResume(v3);
  }
}

uint64_t sub_1000F2348()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Logger(0);
  sub_1000980F8(v0, qword_100354BF0);
  sub_10009673C(v0, (uint64_t)qword_100354BF0);
  v1 = String.init(cString:)(SESLoggingSubsystem);
  return Logger.init(subsystem:category:)(v1);
}

uint64_t sub_1000F23B8()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for SESDataTask()
{
  return objc_opt_self(_TtC10seserviced11SESDataTask);
}

uint64_t sub_1000F23E8(uint64_t result, uint64_t a2, char a3)
{
  switch(a3)
  {
    case 1:
    case 3:
    case 4:
      result = swift_bridgeObjectRelease(a2);
      break;
    case 2:
      result = swift_errorRelease(result);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000F2420(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 128) = a1;
  return swift_task_switch(sub_1000F2438, 0, 0);
}

uint64_t sub_1000F2438()
{
  uint64_t v0;
  Swift::String v1;
  void *object;
  Swift::String v3;
  void *v4;
  Swift::String v5;
  void *v6;
  uint64_t v8;
  id v9;
  uint64_t v10;
  _QWORD *v11;

  v1._countAndFlagsBits = 0x2D656C7070612D78;
  v1._object = (void *)0xEE006D2D646D2D69;
  object = URLRequest.value(forHTTPHeaderField:)(v1).value._object;
  swift_bridgeObjectRelease(object);
  if (object)
  {
    v3._countAndFlagsBits = 0x2D656C7070612D78;
    v3._object = (void *)0xEC000000646D2D69;
    v4 = URLRequest.value(forHTTPHeaderField:)(v3).value._object;
    swift_bridgeObjectRelease(v4);
    if (v4)
    {
      v5._object = (void *)0x80000001002BC360;
      v5._countAndFlagsBits = 0xD000000000000012;
      v6 = URLRequest.value(forHTTPHeaderField:)(v5).value._object;
      swift_bridgeObjectRelease(v6);
      if (v6)
        return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
  v8 = v0 + 16;
  v9 = objc_msgSend(objc_allocWithZone((Class)AKAnisetteProvisioningController), "init");
  *(_QWORD *)(v0 + 136) = v9;
  *(_QWORD *)(v0 + 56) = v0 + 120;
  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = sub_1000F25A8;
  v10 = swift_continuation_init(v0 + 16, 1);
  *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
  v11 = (_QWORD *)(v0 + 80);
  v11[1] = 0x40000000;
  v11[2] = sub_1000F21A0;
  v11[3] = &unk_100308E78;
  v11[4] = v10;
  objc_msgSend(v9, "anisetteDataWithCompletion:", v11);
  return swift_continuation_await(v8);
}

uint64_t sub_1000F25A8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 144) = v1;
  if (v1)
    v2 = sub_1000F28B4;
  else
    v2 = sub_1000F2608;
  return swift_task_switch(v2, 0, 0);
}

id sub_1000F2608()
{
  uint64_t v0;
  void *v1;
  id result;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String_optional v7;
  void *object;
  Swift::String v9;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  os_log_type_t v19;
  uint8_t *v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(void);
  void *v26;
  Swift::String_optional v27;
  Swift::String v28;
  Swift::String_optional v29;
  void *v30;
  Swift::String v31;

  v1 = *(void **)(v0 + 120);
  if (!v1)
  {
    if (qword_1003445C8 != -1)
      swift_once(&qword_1003445C8, sub_1000F2348);
    v15 = type metadata accessor for Logger(0);
    v16 = sub_10009673C(v15, (uint64_t)qword_100354BF0);
    v17 = Logger.logObject.getter(v16);
    v19 = static os_log_type_t.error.getter(v17, v18);
    if (os_log_type_enabled(v17, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v19, "Anisette data is nil", v20, 2u);
      swift_slowDealloc(v20, -1, -1);
    }
    v21 = *(void **)(v0 + 136);

    v22 = sub_1000F71B0();
    v23 = swift_allocError(&type metadata for SESDataTask.ErrorCode, v22, 0, 0);
    *(_OWORD *)v24 = xmmword_100289C80;
    *(_BYTE *)(v24 + 16) = 5;
    swift_willThrow(v23);

    v25 = *(uint64_t (**)(void))(v0 + 8);
    return (id)v25();
  }
  result = objc_msgSend(*(id *)(v0 + 120), "machineID");
  if (result)
  {
    v3 = result;
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v6 = v5;

    *(_QWORD *)(v0 + 80) = v4;
    *(_QWORD *)(v0 + 88) = v6;
    v7.value._countAndFlagsBits = String.init<A>(_:)(v0 + 80, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
    object = v7.value._object;
    v9._countAndFlagsBits = 0x2D656C7070612D78;
    v9._object = (void *)0xEE006D2D646D2D69;
    URLRequest.setValue(_:forHTTPHeaderField:)(v7, v9);
    swift_bridgeObjectRelease(object);
    v10 = objc_msgSend(v1, "oneTimePassword");
    if (v10)
    {
      v11 = v10;
      v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
      v14 = v13;

    }
    else
    {
      v12 = 0;
      v14 = 0;
    }
    v26 = *(void **)(v0 + 136);
    v27.value._countAndFlagsBits = v12;
    v27.value._object = v14;
    v28._countAndFlagsBits = 0x2D656C7070612D78;
    v28._object = (void *)0xEC000000646D2D69;
    URLRequest.setValue(_:forHTTPHeaderField:)(v27, v28);
    swift_bridgeObjectRelease(v14);
    *(_QWORD *)(v0 + 80) = objc_msgSend(v1, "routingInfo");
    v29.value._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
    v30 = v29.value._object;
    v31._object = (void *)0x80000001002BC360;
    v31._countAndFlagsBits = 0xD000000000000012;
    URLRequest.setValue(_:forHTTPHeaderField:)(v29, v31);
    swift_bridgeObjectRelease(v30);

    v25 = *(uint64_t (**)(void))(v0 + 8);
    return (id)v25();
  }
  __break(1u);
  return result;
}

uint64_t sub_1000F28B4()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 136);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F28F4(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 224) = a1;
  return swift_task_switch(sub_1000F290C, 0, 0);
}

uint64_t sub_1000F290C()
{
  uint64_t v0;
  Swift::String v1;
  void *object;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  Swift::String_optional v18;
  Swift::String v19;
  uint64_t (*v20)(void);
  id v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSString v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  os_log_type_t v39;
  uint8_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v1._countAndFlagsBits = 0x7A69726F68747561;
  v1._object = (void *)0xED00006E6F697461;
  object = URLRequest.value(forHTTPHeaderField:)(v1).value._object;
  swift_bridgeObjectRelease(object);
  if (object)
  {
    if (qword_1003445C8 != -1)
      swift_once(&qword_1003445C8, sub_1000F2348);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_10009673C(v3, (uint64_t)qword_100354BF0);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Auth header already exists", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }

LABEL_13:
    v20 = *(uint64_t (**)(void))(v0 + 8);
    return v20();
  }
  *(_WORD *)(v0 + 152) = word_100346620;
  v9 = unk_100346600;
  v8 = unk_100346610;
  *(_OWORD *)(v0 + 120) = unk_100346600;
  *(_OWORD *)(v0 + 136) = v8;
  *(_OWORD *)(v0 + 176) = v9;
  *(_OWORD *)(v0 + 160) = *(_OWORD *)(v0 + 136);
  sub_10006F87C(v0 + 176);
  v10 = sub_10006F87C(v0 + 160);
  sub_10015348C(v10);
  v12 = v11;
  sub_10006F8A4(v0 + 176);
  sub_10006F8A4(v0 + 160);
  if ((v12 & 1) != 0)
  {
    if (qword_1003445C8 != -1)
      swift_once(&qword_1003445C8, sub_1000F2348);
    v13 = type metadata accessor for Logger(0);
    v14 = sub_10009673C(v13, (uint64_t)qword_100354BF0);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Skipping AuthKit header", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }

    v18.value._countAndFlagsBits = 0xD00000000000001ALL;
    v18.value._object = (void *)0x80000001002BC320;
    v19._countAndFlagsBits = 0x7A69726F68747561;
    v19._object = (void *)0xED00006E6F697461;
    URLRequest.setValue(_:forHTTPHeaderField:)(v18, v19);
    goto LABEL_13;
  }
  v22 = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
  *(_QWORD *)(v0 + 232) = v22;
  if (!v22)
  {
LABEL_22:
    if (qword_1003445C8 != -1)
      swift_once(&qword_1003445C8, sub_1000F2348);
    v35 = type metadata accessor for Logger(0);
    v36 = sub_10009673C(v35, (uint64_t)qword_100354BF0);
    v37 = Logger.logObject.getter(v36);
    v39 = static os_log_type_t.error.getter(v37, v38);
    if (os_log_type_enabled(v37, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v40 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v39, "Unable to get AIDA information", v40, 2u);
      swift_slowDealloc(v40, -1, -1);
    }

    v41 = sub_1000F71B0();
    v42 = swift_allocError(&type metadata for SESDataTask.ErrorCode, v41, 0, 0);
    *(_QWORD *)v43 = 0;
    *(_QWORD *)(v43 + 8) = 0;
    *(_BYTE *)(v43 + 16) = 5;
    swift_willThrow(v42);
    v20 = *(uint64_t (**)(void))(v0 + 8);
    return v20();
  }
  v23 = v22;
  v24 = objc_msgSend(v22, "aida_accountForPrimaryiCloudAccount");
  *(_QWORD *)(v0 + 240) = v24;
  if (!v24)
  {
    v25 = v23;
LABEL_21:

    goto LABEL_22;
  }
  v25 = v24;
  v26 = objc_msgSend(v24, "aida_alternateDSID");
  if (!v26)
  {

    goto LABEL_21;
  }
  v27 = v26;
  v28 = v0 + 16;
  v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
  v31 = v30;
  *(_QWORD *)(v0 + 208) = v29;
  *(_QWORD *)(v0 + 216) = v30;

  *(_QWORD *)(v0 + 248) = v31;
  v32 = String._bridgeToObjectiveC()();
  *(_QWORD *)(v0 + 256) = v32;
  *(_QWORD *)(v0 + 56) = v0 + 192;
  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = sub_1000F2D9C;
  v33 = swift_continuation_init(v0 + 16, 1);
  *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
  v34 = (_QWORD *)(v0 + 80);
  v34[1] = 0x40000000;
  v34[2] = sub_1000F2240;
  v34[3] = &unk_100308E48;
  v34[4] = v33;
  objc_msgSend(v25, "aida_tokenForService:completionHandler:", v32, v34);
  return swift_continuation_await(v28);
}

uint64_t sub_1000F2D9C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD **)v0;
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 264) = v2;
  if (v2)
  {
    swift_bridgeObjectRelease(v1[31]);
    v3 = sub_1000F2F10;
  }
  else
  {
    v1[34] = v1[26];
    v3 = sub_1000F2E0C;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000F2E0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::String_optional v10;
  void *object;
  Swift::String v12;

  v1 = *(_QWORD *)(v0 + 272);
  v2 = *(_QWORD *)(v0 + 248);
  v3 = *(void **)(v0 + 232);
  v4 = *(void **)(v0 + 240);
  v5 = *(_QWORD *)(v0 + 192);
  v6 = *(_QWORD *)(v0 + 200);

  v7 = sub_100063D3C((uint64_t *)&unk_1003477E0);
  v8 = swift_allocObject(v7, 112, 7);
  *(_OWORD *)(v8 + 16) = xmmword_1002888F0;
  *(_QWORD *)(v8 + 56) = &type metadata for String;
  v9 = sub_1000F726C();
  *(_QWORD *)(v8 + 32) = v1;
  *(_QWORD *)(v8 + 40) = v2;
  *(_QWORD *)(v8 + 96) = &type metadata for String;
  *(_QWORD *)(v8 + 104) = v9;
  *(_QWORD *)(v8 + 64) = v9;
  *(_QWORD *)(v8 + 72) = v5;
  *(_QWORD *)(v8 + 80) = v6;
  v10.value._countAndFlagsBits = String.init(format:_:)(0xD000000000000010, 0x80000001002BC300, v8);
  object = v10.value._object;
  v12._countAndFlagsBits = 0x7A69726F68747561;
  v12._object = (void *)0xED00006E6F697461;
  URLRequest.setValue(_:forHTTPHeaderField:)(v10, v12);
  swift_bridgeObjectRelease(object);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F2F10(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(void **)(v1 + 256);
  swift_willThrow(a1);

  if (qword_1003445C8 != -1)
    swift_once(&qword_1003445C8, sub_1000F2348);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10009673C(v3, (uint64_t)qword_100354BF0);
  v5 = Logger.logObject.getter(v4);
  v7 = static os_log_type_t.error.getter(v5, v6);
  if (os_log_type_enabled(v5, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v7, "Unable to get AIDA token", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }
  v9 = *(_QWORD *)(v1 + 264);
  v11 = *(void **)(v1 + 232);
  v10 = *(void **)(v1 + 240);

  v12 = sub_1000F71B0();
  v13 = swift_allocError(&type metadata for SESDataTask.ErrorCode, v12, 0, 0);
  *(_QWORD *)v14 = 0;
  *(_QWORD *)(v14 + 8) = 0;
  *(_BYTE *)(v14 + 16) = 5;
  swift_willThrow(v13);
  swift_errorRelease(v9);

  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000F304C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 128) = a1;
  *(_QWORD *)(v2 + 136) = a2;
  return swift_task_switch(sub_1000F3064, 0, 0);
}

uint64_t sub_1000F3064()
{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Class isa;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  os_log_type_t v16;
  uint8_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
  *(_QWORD *)(v0 + 144) = v1;
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend(v1, "aida_accountForPrimaryiCloudAccount");
    *(_QWORD *)(v0 + 152) = v3;
    if (v3)
    {
      v4 = v3;
      v5 = v0 + 16;
      v6 = sub_100063D3C(&qword_100348B30);
      v7 = swift_allocObject(v6, 64, 7);
      *(_OWORD *)(v7 + 16) = xmmword_1002888E0;
      *(_QWORD *)(v7 + 56) = &type metadata for String;
      *(_QWORD *)(v7 + 32) = 0xD000000000000014;
      *(_QWORD *)(v7 + 40) = 0x80000001002BC2C0;
      isa = Array._bridgeToObjectiveC()().super.isa;
      *(_QWORD *)(v0 + 160) = isa;
      swift_bridgeObjectRelease(v7);
      *(_QWORD *)(v0 + 56) = v0 + 120;
      *(_QWORD *)(v0 + 16) = v0;
      *(_QWORD *)(v0 + 24) = sub_1000F32D8;
      v9 = swift_continuation_init(v0 + 16, 1);
      *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
      v10 = (_QWORD *)(v0 + 80);
      v10[1] = 0x40000000;
      v10[2] = sub_1000F22C8;
      v10[3] = &unk_100308E60;
      v10[4] = v9;
      objc_msgSend(v2, "aida_renewCredentialsForAccount:services:force:completion:", v4, isa, 1, v10);
      return swift_continuation_await(v5);
    }

  }
  if (qword_1003445C8 != -1)
    swift_once(&qword_1003445C8, sub_1000F2348);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_10009673C(v12, (uint64_t)qword_100354BF0);
  v14 = Logger.logObject.getter(v13);
  v16 = static os_log_type_t.error.getter(v14, v15);
  if (os_log_type_enabled(v14, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v16, "Unable to get AIDA information", v17, 2u);
    swift_slowDealloc(v17, -1, -1);
  }

  v18 = sub_1000F71B0();
  v19 = swift_allocError(&type metadata for SESDataTask.ErrorCode, v18, 0, 0);
  *(_QWORD *)v20 = 0;
  *(_QWORD *)(v20 + 8) = 0;
  *(_BYTE *)(v20 + 16) = 5;
  swift_willThrow(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F32D8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 168) = v1;
  if (v1)
    v2 = sub_1000F3708;
  else
    v2 = sub_1000F3338;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000F3338()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  NSString v19;
  id v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  Swift::String_optional v36;
  void *object;
  Swift::String v38;
  uint64_t (*v39)(void);
  uint64_t v40;
  void *v41;
  void *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v1 = *(_QWORD *)(v0 + 120);

  if (v1)
  {
    if (qword_1003445C8 != -1)
      swift_once(&qword_1003445C8, sub_1000F2348);
    v2 = type metadata accessor for Logger(0);
    v3 = sub_10009673C(v2, (uint64_t)qword_100354BF0);
    v4 = Logger.logObject.getter(v3);
    v6 = static os_log_type_t.error.getter(v4, v5);
    if (!os_log_type_enabled(v4, v6))
      goto LABEL_17;
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    v8 = "Grandslam token renewal failed";
    goto LABEL_16;
  }
  if (qword_1003445C8 != -1)
    swift_once(&qword_1003445C8, sub_1000F2348);
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10009673C(v9, (uint64_t)qword_100354BF0);
  v11 = Logger.logObject.getter(v10);
  v15 = static os_log_type_t.info.getter(v11, v12, v13, v14);
  if (os_log_type_enabled(v11, v15))
  {
    v16 = *(_QWORD *)(v0 + 136);
    v17 = swift_slowAlloc(22, -1);
    *(_DWORD *)v17 = 134218240;
    *(_QWORD *)(v0 + 80) = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v17 + 4, v17 + 12);
    *(_WORD *)(v17 + 12) = 2048;
    *(_QWORD *)(v0 + 80) = 3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v17 + 14, v17 + 22);
    _os_log_impl((void *)&_mh_execute_header, v11, v15, "Grandslam token renewal successful, trying again %ld out of %ld", (uint8_t *)v17, 0x16u);
    swift_slowDealloc(v17, -1, -1);
  }
  v18 = *(void **)(v0 + 152);

  v19 = String._bridgeToObjectiveC()();
  v20 = objc_msgSend(v18, "aida_tokenWithExpiryCheckForService:", v19);

  if (!v20)
  {
LABEL_14:
    v4 = Logger.logObject.getter(v21);
    v6 = static os_log_type_t.error.getter(v4, v40);
    if (!os_log_type_enabled(v4, v6))
    {
LABEL_17:
      v42 = *(void **)(v0 + 144);
      v41 = *(void **)(v0 + 152);

      v43 = sub_1000F71B0();
      v44 = swift_allocError(&type metadata for SESDataTask.ErrorCode, v43, 0, 0);
      *(_QWORD *)v45 = 0;
      *(_QWORD *)(v45 + 8) = 0;
      *(_BYTE *)(v45 + 16) = 5;
      swift_willThrow(v44);

      v39 = *(uint64_t (**)(void))(v0 + 8);
      return v39();
    }
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    v8 = "Unable to get aida info after renewal";
LABEL_16:
    _os_log_impl((void *)&_mh_execute_header, v4, v6, v8, v7, 2u);
    swift_slowDealloc(v7, -1, -1);
    goto LABEL_17;
  }
  v22 = *(void **)(v0 + 152);
  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v25 = v24;

  v26 = objc_msgSend(v22, "aida_alternateDSID");
  if (!v26)
  {
    v21 = swift_bridgeObjectRelease(v25);
    goto LABEL_14;
  }
  v27 = v26;
  v28 = *(void **)(v0 + 144);
  v29 = *(void **)(v0 + 152);
  v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
  v32 = v31;

  v33 = sub_100063D3C((uint64_t *)&unk_1003477E0);
  v34 = swift_allocObject(v33, 112, 7);
  *(_OWORD *)(v34 + 16) = xmmword_1002888F0;
  *(_QWORD *)(v34 + 56) = &type metadata for String;
  v35 = sub_1000F726C();
  *(_QWORD *)(v34 + 32) = v30;
  *(_QWORD *)(v34 + 40) = v32;
  *(_QWORD *)(v34 + 96) = &type metadata for String;
  *(_QWORD *)(v34 + 104) = v35;
  *(_QWORD *)(v34 + 64) = v35;
  *(_QWORD *)(v34 + 72) = v23;
  *(_QWORD *)(v34 + 80) = v25;
  v36.value._countAndFlagsBits = String.init(format:_:)(0xD000000000000010, 0x80000001002BC300, v34);
  object = v36.value._object;
  v38._countAndFlagsBits = 0x7A69726F68747561;
  v38._object = (void *)0xED00006E6F697461;
  URLRequest.setValue(_:forHTTPHeaderField:)(v36, v38);
  swift_bridgeObjectRelease(object);

  v39 = *(uint64_t (**)(void))(v0 + 8);
  return v39();
}

uint64_t sub_1000F3708(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(void **)(v1 + 160);
  swift_willThrow(a1);

  if (qword_1003445C8 != -1)
    swift_once(&qword_1003445C8, sub_1000F2348);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10009673C(v3, (uint64_t)qword_100354BF0);
  v5 = Logger.logObject.getter(v4);
  v7 = static os_log_type_t.error.getter(v5, v6);
  if (os_log_type_enabled(v5, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v7, "Unable to renew credentials with AIDA", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }
  v9 = *(_QWORD *)(v1 + 168);
  v11 = *(void **)(v1 + 144);
  v10 = *(void **)(v1 + 152);

  v12 = sub_1000F71B0();
  v13 = swift_allocError(&type metadata for SESDataTask.ErrorCode, v12, 0, 0);
  *(_QWORD *)v14 = 0;
  *(_QWORD *)(v14 + 8) = 0;
  *(_BYTE *)(v14 + 16) = 5;
  swift_willThrow(v13);
  swift_errorRelease(v9);

  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000F3844(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  *(_QWORD *)(v6 + 80) = a5;
  *(_QWORD *)(v6 + 88) = a6;
  *(_QWORD *)(v6 + 64) = a3;
  *(_QWORD *)(v6 + 72) = a4;
  *(_BYTE *)(v6 + 120) = a2;
  *(_QWORD *)(v6 + 56) = a1;
  return swift_task_switch(sub_1000F3868, 0, 0);
}

uint64_t sub_1000F3868()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  void *v12;
  uint8_t *v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  os_log_type_t v18;
  _BOOL4 v19;
  void *v20;
  char **v21;
  uint8_t *v22;
  uint64_t v23;
  id v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  uint64_t v36;
  unint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  Swift::String v40;
  id v41;
  void *v42;
  NSObject *v44;
  uint64_t v45;
  os_log_type_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  _QWORD *v50;
  uint64_t v51;
  void *v52;
  id v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint8_t *v65;
  uint64_t v66;
  id v67;
  uint64_t v68[2];

  v1 = *(_QWORD *)(v0 + 88);
  v2 = objc_opt_self(NSHTTPURLResponse);
  v3 = swift_dynamicCastObjCClass(v1, v2);
  *(_QWORD *)(v0 + 96) = v3;
  v4 = qword_1003445C8;
  if (v3)
  {
    v5 = (void *)v3;
    v66 = v0 + 48;
    v6 = *(id *)(v0 + 88);
    if (v4 == -1)
    {
      v7 = v6;
    }
    else
    {
      swift_once(&qword_1003445C8, sub_1000F2348);
      v7 = *(void **)(v0 + 88);
    }
    v8 = type metadata accessor for Logger(0);
    sub_10009673C(v8, (uint64_t)qword_100354BF0);
    v9 = Logger.logObject.getter(v7);
    v10 = static os_log_type_t.debug.getter();
    v11 = os_log_type_enabled(v9, v10);
    v12 = *(void **)(v0 + 88);
    v67 = v5;
    if (v11)
    {
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v13 = 134217984;
      *(_QWORD *)(v0 + 48) = objc_msgSend(v5, "statusCode");
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v66, v0 + 56, v13 + 4, v13 + 12);

      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Response Status : %ld", v13, 0xCu);
      swift_slowDealloc(v13, -1, -1);
    }
    else
    {

    }
    v29 = v0 + 40;

    v31 = *(_QWORD *)(v0 + 72);
    v30 = *(_QWORD *)(v0 + 80);
    sub_100063C8C(v31, v30);
    v32 = sub_100063C8C(v31, v30);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.debug.getter();
    v35 = os_log_type_enabled(v33, v34);
    v36 = *(_QWORD *)(v0 + 72);
    v37 = *(_QWORD *)(v0 + 80);
    if (v35)
    {
      v38 = (uint8_t *)swift_slowAlloc(12, -1);
      v39 = swift_slowAlloc(32, -1);
      v68[0] = v39;
      *(_DWORD *)v38 = 136315138;
      v65 = v38 + 4;
      v40 = Data.base64EncodedString(options:)(0);
      *(_QWORD *)(v0 + 40) = sub_1001C56EC(v40._countAndFlagsBits, (unint64_t)v40._object, v68);
      v29 = v0 + 40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v66, v38 + 4, v38 + 12);
      swift_bridgeObjectRelease(v40._object);
      sub_100063CD0(v36, v37);
      sub_100063CD0(v36, v37);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Response Data   : %s", v38, 0xCu);
      swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v38, -1, -1);
    }
    else
    {
      sub_100063CD0(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
      sub_100063CD0(v36, v37);
    }

    v41 = objc_msgSend(v67, "statusCode");
    if (v41 == (id)401)
    {
      v44 = Logger.logObject.getter(401);
      v46 = static os_log_type_t.error.getter(v44, v45);
      if (os_log_type_enabled(v44, v46))
      {
        v47 = *(_QWORD *)(v0 + 64);
        v48 = swift_slowAlloc(22, -1);
        *(_DWORD *)v48 = 134218240;
        *(_QWORD *)(v0 + 24) = v47;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v48 + 4, v48 + 12);
        *(_WORD *)(v48 + 12) = 2048;
        *(_QWORD *)(v0 + 32) = 3;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v29, v48 + 14, v48 + 22);
        _os_log_impl((void *)&_mh_execute_header, v44, v46, "GS Token invalid: attempt %ld of %ld", (uint8_t *)v48, 0x16u);
        swift_slowDealloc(v48, -1, -1);
      }
      v49 = *(unsigned __int8 *)(v0 + 120);

      if (v49 == 1)
      {
        v50 = (_QWORD *)swift_task_alloc(dword_100346704);
        *(_QWORD *)(v0 + 104) = v50;
        *v50 = v0;
        v50[1] = sub_1000F3F18;
        v51 = *(_QWORD *)(v0 + 64);
        v50[16] = *(_QWORD *)(v0 + 56);
        v50[17] = v51;
        return swift_task_switch(sub_1000F3064, 0, 0);
      }
    }
    else if (v41 == (id)200)
    {
      v42 = *(void **)(v0 + 88);
      sub_100063C8C(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));

      return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
    }
    v52 = *(void **)(v0 + 88);
    v53 = objc_msgSend(*(id *)(v0 + 96), "statusCode", v65);
    v54 = sub_1000F71B0();
    v55 = swift_allocError(&type metadata for SESDataTask.ErrorCode, v54, 0, 0);
    *(_QWORD *)v56 = v53;
    *(_QWORD *)(v56 + 8) = 0;
    *(_BYTE *)(v56 + 16) = 0;
    swift_willThrow(v55);

  }
  else
  {
    if (qword_1003445C8 != -1)
      swift_once(&qword_1003445C8, sub_1000F2348);
    v14 = *(void **)(v0 + 88);
    v15 = type metadata accessor for Logger(0);
    sub_10009673C(v15, (uint64_t)qword_100354BF0);
    v16 = Logger.logObject.getter(v14);
    v18 = static os_log_type_t.error.getter(v16, v17);
    v19 = os_log_type_enabled(v16, v18);
    v20 = *(void **)(v0 + 88);
    v21 = &selRef_defaultCenter;
    if (v19)
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      v23 = swift_slowAlloc(32, -1);
      v68[0] = v23;
      *(_DWORD *)v22 = 136315138;
      v24 = v20;
      v25 = objc_msgSend(v24, "description");
      v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      v28 = v27;

      v21 = &selRef_defaultCenter;
      *(_QWORD *)(v0 + 16) = sub_1001C56EC(v26, v28, v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v22 + 4, v22 + 12);
      swift_bridgeObjectRelease(v28);

      _os_log_impl((void *)&_mh_execute_header, v16, v18, "Invalid or nil HTTP response? %s", v22, 0xCu);
      swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v22, -1, -1);
    }
    else
    {

    }
    v57 = *(id *)(v0 + 88);
    v58 = objc_msgSend(v57, v21[10]);
    v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
    v61 = v60;

    v62 = sub_1000F71B0();
    v63 = swift_allocError(&type metadata for SESDataTask.ErrorCode, v62, 0, 0);
    *(_QWORD *)v64 = v59;
    *(_QWORD *)(v64 + 8) = v61;
    *(_BYTE *)(v64 + 16) = 1;
    swift_willThrow(v63);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F3F18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000F4000;
  else
    v3 = sub_1000F3F7C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000F3F7C()
{
  uint64_t v0;
  void *v1;
  id v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(void **)(v0 + 88);
  v2 = objc_msgSend(*(id *)(v0 + 96), "statusCode");
  v3 = sub_1000F71B0();
  v4 = swift_allocError(&type metadata for SESDataTask.ErrorCode, v3, 0, 0);
  *(_QWORD *)v5 = v2;
  *(_QWORD *)(v5 + 8) = 0;
  *(_BYTE *)(v5 + 16) = 0;
  swift_willThrow(v4);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F4000()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F4034(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_BYTE *)(v2 + 249) = a2;
  *(_QWORD *)(v2 + 448) = a1;
  v3 = type metadata accessor for URL(0);
  *(_QWORD *)(v2 + 456) = v3;
  v4 = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v2 + 464) = v4;
  *(_QWORD *)(v2 + 472) = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100063D3C(&qword_1003466C8);
  *(_QWORD *)(v2 + 480) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  *(_QWORD *)(v2 + 488) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v2 + 496) = v7;
  *(_QWORD *)(v2 + 504) = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URLRequest(0);
  *(_QWORD *)(v2 + 512) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v2 + 520) = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v2 + 528) = swift_task_alloc(v10);
  *(_QWORD *)(v2 + 536) = swift_task_alloc(v10);
  return swift_task_switch(sub_1000F411C, 0, 0);
}

uint64_t sub_1000F411C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);
  _QWORD *v5;

  v1 = v0[67];
  v2 = v0[64];
  v3 = v0[56];
  v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[65] + 16);
  v0[68] = v4;
  v4(v1, v3, v2);
  v5 = (_QWORD *)swift_task_alloc(dword_1003466D4);
  v0[69] = v5;
  *v5 = v0;
  v5[1] = sub_1000F4198;
  v5[16] = v0[67];
  return swift_task_switch(sub_1000F2438, 0, 0);
}

uint64_t sub_1000F4198()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 552);
  *(_QWORD *)(*(_QWORD *)v1 + 560) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000F491C;
  else
    v3 = sub_1000F41FC;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000F41FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  Swift::String_optional v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint64_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v60;
  unint64_t v61;
  Swift::String v62;
  void (*v63)(uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t *v72;

  v2 = *(_QWORD *)(v1 + 496);
  *(_QWORD *)(v1 + 576) = 1;
  *(_QWORD *)(v1 + 568) = 0;
  if (*(_BYTE *)(v1 + 249) == 1)
  {
    swift_beginAccess(*(_QWORD *)(v1 + 536), v1 + 160, 33, 0);
    v3 = (_QWORD *)swift_task_alloc(dword_1003466F4);
    *(_QWORD *)(v1 + 584) = v3;
    *v3 = v1;
    v3[1] = sub_1000F49A0;
    v3[28] = *(_QWORD *)(v1 + 536);
    return swift_task_switch(sub_1000F290C, 0, 0);
  }
  else
  {
    v70 = (uint64_t *)(v1 + 416);
    v5 = *(_QWORD *)(v1 + 536);
    v6 = *(_QWORD *)(v1 + 504);
    v7 = *(_QWORD *)(v1 + 488);
    v8 = UUID.init()(a1);
    v9 = UUID.uuidString.getter(v8);
    v11 = v10;
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v6, v7);
    *(_QWORD *)(v1 + 256) = v9;
    *(_QWORD *)(v1 + 264) = v11;
    *(_QWORD *)(v1 + 272) = 45;
    *(_QWORD *)(v1 + 280) = 0xE100000000000000;
    *(_QWORD *)(v1 + 288) = 0;
    *(_QWORD *)(v1 + 296) = 0xE000000000000000;
    v12 = sub_1000F716C();
    v13 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v1 + 272, v1 + 288, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v12, v12, v12);
    v15 = v14;
    swift_bridgeObjectRelease(v11);
    swift_beginAccess(v5, v1 + 88, 33, 0);
    v16.value._countAndFlagsBits = v13;
    v16.value._object = v15;
    v17._countAndFlagsBits = 0x7365757165722D78;
    v17._object = (void *)0xEC00000064692D74;
    URLRequest.setValue(_:forHTTPHeaderField:)(v16, v17);
    swift_endAccess(v1 + 88);
    swift_bridgeObjectRelease(v15);
    if (qword_1003445C8 != -1)
      swift_once(&qword_1003445C8, sub_1000F2348);
    v72 = (uint64_t *)(v1 + 392);
    v18 = type metadata accessor for Logger(0);
    v19 = sub_10009673C(v18, (uint64_t)qword_100354BF0);
    *(_QWORD *)(v1 + 600) = v19;
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v68 = (uint64_t *)(v1 + 432);
      v22 = *(_QWORD *)(v1 + 536);
      v23 = *(_QWORD *)(v1 + 480);
      v25 = *(_QWORD *)(v1 + 456);
      v24 = *(_QWORD *)(v1 + 464);
      v26 = (uint8_t *)swift_slowAlloc(12, -1);
      v69 = swift_slowAlloc(32, -1);
      *(_QWORD *)(v1 + 416) = v69;
      *(_DWORD *)v26 = 136315138;
      v27 = swift_beginAccess(v22, v1 + 40, 32, 0);
      URLRequest.url.getter(v27);
      v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v23, 1, v25);
      v29 = *(_QWORD *)(v1 + 480);
      if (v28)
      {
        sub_1000F722C(*(_QWORD *)(v1 + 480));
        swift_endAccess(v1 + 40);
        v30 = 0xE400000000000000;
        v31 = 1701736302;
      }
      else
      {
        v33 = *(_QWORD *)(v1 + 464);
        v34 = *(_QWORD *)(v1 + 472);
        v35 = *(_QWORD *)(v1 + 456);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v33 + 16))(v34, *(_QWORD *)(v1 + 480), v35);
        sub_1000F722C(v29);
        v36 = swift_endAccess(v1 + 40);
        v31 = URL.absoluteString.getter(v36);
        v30 = v37;
        (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v34, v35);
      }
      *v68 = sub_1001C56EC(v31, v30, v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v68, v1 + 440, v26 + 4, v26 + 12);
      swift_bridgeObjectRelease(v30);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Request URL: %s", v26, 0xCu);
      swift_arrayDestroy(v69, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v69, -1, -1);
      swift_slowDealloc(v26, -1, -1);

    }
    else
    {

    }
    v38 = Logger.logObject.getter(v32);
    v39 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = *(_QWORD *)(v1 + 536);
      v41 = (uint8_t *)swift_slowAlloc(12, -1);
      v42 = swift_slowAlloc(32, -1);
      *(_QWORD *)(v1 + 392) = v42;
      *(_DWORD *)v41 = 136315138;
      v43 = swift_beginAccess(v40, v1 + 64, 32, 0);
      v44 = URLRequest.allHTTPHeaderFields.getter(v43);
      if (v44)
      {
        v45 = v44;
        swift_endAccess(v1 + 64);
        v46 = Dictionary.debugDescription.getter(v45, &type metadata for String, &type metadata for String, &protocol witness table for String);
        v48 = v47;
        swift_bridgeObjectRelease(v45);
      }
      else
      {
        v46 = 0x3E656E6F6E3CLL;
        swift_endAccess(v1 + 64);
        v48 = 0xE600000000000000;
      }
      *(_QWORD *)(v1 + 408) = sub_1001C56EC(v46, v48, v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 408, v70, v41 + 4, v41 + 12);
      swift_bridgeObjectRelease(v48);
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Request headers: %s", v41, 0xCu);
      swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v42, -1, -1);
      swift_slowDealloc(v41, -1, -1);

    }
    else
    {

    }
    v50 = Logger.logObject.getter(v49);
    v51 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v50, v51))
    {
      v71 = (uint64_t *)(v1 + 384);
      v52 = *(_QWORD *)(v1 + 536);
      v53 = (uint8_t *)swift_slowAlloc(12, -1);
      v54 = swift_slowAlloc(32, -1);
      *(_QWORD *)(v1 + 368) = v54;
      *(_DWORD *)v53 = 136315138;
      v55 = swift_beginAccess(v52, v1 + 112, 32, 0);
      v56 = URLRequest.httpBody.getter(v55);
      if (v57 >> 60 == 15)
      {
        countAndFlagsBits = 0x3E656E6F6E3CLL;
        swift_endAccess(v1 + 112);
        object = (void *)0xE600000000000000;
      }
      else
      {
        v60 = v56;
        v61 = v57;
        swift_endAccess(v1 + 112);
        v62 = Data.base64EncodedString(options:)(0);
        countAndFlagsBits = v62._countAndFlagsBits;
        object = v62._object;
        sub_10006B9B4(v60, v61);
      }
      *v71 = sub_1001C56EC(countAndFlagsBits, (unint64_t)object, (uint64_t *)(v1 + 368));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v71, v72, v53 + 4, v53 + 12);
      swift_bridgeObjectRelease(object);
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "Request body: %s", v53, 0xCu);
      swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v54, -1, -1);
      swift_slowDealloc(v53, -1, -1);
    }

    v63 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 544);
    v64 = *(_QWORD *)(v1 + 536);
    v65 = *(_QWORD *)(v1 + 528);
    v66 = *(_QWORD *)(v1 + 512);
    *(_QWORD *)(v1 + 608) = objc_msgSend((id)objc_opt_self(NSURLSession), "sharedSession");
    v63(v65, v64, v66);
    v67 = (_QWORD *)swift_task_alloc(async function pointer to NSURLSession.data(for:delegate:)[1]);
    *(_QWORD *)(v1 + 616) = v67;
    *v67 = v1;
    v67[1] = sub_1000F5138;
    return NSURLSession.data(for:delegate:)(*(_QWORD *)(v1 + 528), 0);
  }
}

uint64_t sub_1000F491C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 536);
  v2 = *(_QWORD *)(v0 + 528);
  v3 = *(_QWORD *)(v0 + 504);
  v5 = *(_QWORD *)(v0 + 472);
  v4 = *(_QWORD *)(v0 + 480);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 520) + 8))(v1, *(_QWORD *)(v0 + 512));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F49A0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 584);
  *(_QWORD *)(*v1 + 592) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000F50A0;
  }
  else
  {
    swift_endAccess(v2 + 160);
    v4 = sub_1000F4A0C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000F4A0C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  Swift::String_optional v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint64_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v60;
  unint64_t v61;
  Swift::String v62;
  void (*v63)(uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t **v67;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;

  v69 = v1 + 52;
  v2 = v1[67];
  v4 = v1[62];
  v3 = v1[63];
  v5 = v1[61];
  v6 = UUID.init()(a1);
  v7 = UUID.uuidString.getter(v6);
  v9 = v8;
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  v1[32] = v7;
  v1[33] = v9;
  v1[34] = 45;
  v1[35] = 0xE100000000000000;
  v1[36] = 0;
  v1[37] = 0xE000000000000000;
  v10 = sub_1000F716C();
  v11 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v1 + 34, v1 + 36, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v10, v10, v10);
  v13 = v12;
  swift_bridgeObjectRelease(v9);
  swift_beginAccess(v2, v1 + 11, 33, 0);
  v14.value._countAndFlagsBits = v11;
  v14.value._object = v13;
  v15._countAndFlagsBits = 0x7365757165722D78;
  v15._object = (void *)0xEC00000064692D74;
  URLRequest.setValue(_:forHTTPHeaderField:)(v14, v15);
  swift_endAccess(v1 + 11);
  swift_bridgeObjectRelease(v13);
  if (qword_1003445C8 != -1)
    swift_once(&qword_1003445C8, sub_1000F2348);
  v71 = v1 + 49;
  v16 = type metadata accessor for Logger(0);
  v17 = sub_10009673C(v16, (uint64_t)qword_100354BF0);
  v1[75] = v17;
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.debug.getter();
  v20 = (_QWORD *)&unk_100287000;
  if (os_log_type_enabled(v18, v19))
  {
    v21 = v1[67];
    v22 = v1[60];
    v23 = v1[57];
    v24 = v1[58];
    v25 = (uint8_t *)swift_slowAlloc(12, -1);
    v26 = swift_slowAlloc(32, -1);
    v1[52] = v26;
    *(_DWORD *)v25 = 136315138;
    v27 = swift_beginAccess(v21, v1 + 5, 32, 0);
    URLRequest.url.getter(v27);
    v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23);
    v29 = v1[60];
    if (v28)
    {
      sub_1000F722C(v1[60]);
      swift_endAccess(v1 + 5);
      v30 = 0xE400000000000000;
      v31 = 1701736302;
    }
    else
    {
      v34 = v1[58];
      v33 = v1[59];
      v35 = v1[57];
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v33, v1[60], v35);
      sub_1000F722C(v29);
      v36 = swift_endAccess(v1 + 5);
      v31 = URL.absoluteString.getter(v36);
      v30 = v37;
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
    }
    v1[54] = sub_1001C56EC(v31, v30, v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 54, v1 + 55, v25 + 4, v25 + 12);
    swift_bridgeObjectRelease(v30);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Request URL: %s", v25, 0xCu);
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v25, -1, -1);

    v20 = &unk_100287000;
  }
  else
  {

  }
  v38 = Logger.logObject.getter(v32);
  v39 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v38, v39))
  {
    v40 = v1[67];
    v41 = (uint8_t *)swift_slowAlloc(12, -1);
    v42 = swift_slowAlloc(32, -1);
    v1[49] = v42;
    *(_DWORD *)v41 = v20[416];
    v43 = swift_beginAccess(v40, v1 + 8, 32, 0);
    v44 = URLRequest.allHTTPHeaderFields.getter(v43);
    if (v44)
    {
      v45 = v44;
      swift_endAccess(v1 + 8);
      v46 = Dictionary.debugDescription.getter(v45, &type metadata for String, &type metadata for String, &protocol witness table for String);
      v48 = v47;
      swift_bridgeObjectRelease(v45);
    }
    else
    {
      v46 = 0x3E656E6F6E3CLL;
      swift_endAccess(v1 + 8);
      v48 = 0xE600000000000000;
    }
    v1[51] = sub_1001C56EC(v46, v48, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 51, v69, v41 + 4, v41 + 12);
    swift_bridgeObjectRelease(v48);
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "Request headers: %s", v41, 0xCu);
    swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    swift_slowDealloc(v41, -1, -1);

  }
  else
  {

  }
  v50 = Logger.logObject.getter(v49);
  v51 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v50, v51))
  {
    v70 = v1 + 48;
    v52 = v1[67];
    v53 = (uint8_t *)swift_slowAlloc(12, -1);
    v54 = swift_slowAlloc(32, -1);
    v1[46] = v54;
    *(_DWORD *)v53 = 136315138;
    v55 = swift_beginAccess(v52, v1 + 14, 32, 0);
    v56 = URLRequest.httpBody.getter(v55);
    if (v57 >> 60 == 15)
    {
      countAndFlagsBits = 0x3E656E6F6E3CLL;
      swift_endAccess(v1 + 14);
      object = (void *)0xE600000000000000;
    }
    else
    {
      v60 = v56;
      v61 = v57;
      swift_endAccess(v1 + 14);
      v62 = Data.base64EncodedString(options:)(0);
      countAndFlagsBits = v62._countAndFlagsBits;
      object = v62._object;
      sub_10006B9B4(v60, v61);
    }
    *v70 = sub_1001C56EC(countAndFlagsBits, (unint64_t)object, v1 + 46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v70, v71, v53 + 4, v53 + 12);
    swift_bridgeObjectRelease(object);
    _os_log_impl((void *)&_mh_execute_header, v50, v51, "Request body: %s", v53, 0xCu);
    swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v54, -1, -1);
    swift_slowDealloc(v53, -1, -1);
  }

  v63 = (void (*)(uint64_t, uint64_t, uint64_t))v1[68];
  v64 = v1[67];
  v65 = v1[66];
  v66 = v1[64];
  v1[76] = (uint64_t)objc_msgSend((id)objc_opt_self(NSURLSession), "sharedSession");
  v63(v65, v64, v66);
  v67 = (uint64_t **)swift_task_alloc(async function pointer to NSURLSession.data(for:delegate:)[1]);
  v1[77] = (uint64_t)v67;
  *v67 = v1;
  v67[1] = (uint64_t *)sub_1000F5138;
  return NSURLSession.data(for:delegate:)(v1[66], 0);
}

uint64_t sub_1000F50A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 568);
  swift_endAccess(v0 + 160);
  swift_errorRelease(v1);
  v2 = *(_QWORD *)(v0 + 536);
  v3 = *(_QWORD *)(v0 + 528);
  v4 = *(_QWORD *)(v0 + 504);
  v6 = *(_QWORD *)(v0 + 472);
  v5 = *(_QWORD *)(v0 + 480);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 520) + 8))(v2, *(_QWORD *)(v0 + 512));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F5138(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t (*v11)();

  v5 = *(_QWORD **)v4;
  v6 = *(_QWORD *)(*(_QWORD *)v4 + 616);
  v5[78] = a1;
  v5[79] = a2;
  v5[80] = a3;
  v5[81] = v3;
  swift_task_dealloc(v6);
  v7 = (void *)v5[76];
  v8 = v5[66];
  v9 = v5[64];
  v10 = *(void (**)(uint64_t, uint64_t))(v5[65] + 8);
  if (v3)
  {
    v10(v8, v9);

    v11 = sub_1000F62A4;
  }
  else
  {
    v5[82] = v10;
    v10(v8, v9);

    v11 = sub_1000F51E0;
  }
  return swift_task_switch(v11, 0, 0);
}

uint64_t sub_1000F51E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  __int128 v5;

  swift_beginAccess(*(_QWORD *)(v0 + 536), v0 + 136, 33, 0);
  v1 = swift_task_alloc(dword_1003466EC);
  *(_QWORD *)(v0 + 664) = v1;
  *(_QWORD *)v1 = v0;
  *(_QWORD *)(v1 + 8) = sub_1000F5270;
  v2 = *(_QWORD *)(v0 + 576);
  v3 = *(_QWORD *)(v0 + 536);
  v4 = *(_BYTE *)(v0 + 249);
  v5 = *(_OWORD *)(v0 + 624);
  *(_QWORD *)(v1 + 88) = *(_QWORD *)(v0 + 640);
  *(_OWORD *)(v1 + 72) = v5;
  *(_BYTE *)(v1 + 120) = v4;
  *(_QWORD *)(v1 + 56) = v3;
  *(_QWORD *)(v1 + 64) = v2;
  return swift_task_switch(sub_1000F3868, 0, 0);
}

uint64_t sub_1000F5270(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v6 = *v3;
  v7 = *(_QWORD *)(*v3 + 664);
  *(_QWORD *)(*v3 + 672) = v2;
  swift_task_dealloc(v7);
  if (v2)
  {
    v8 = sub_1000F53B8;
  }
  else
  {
    *(_QWORD *)(v6 + 680) = a2;
    *(_QWORD *)(v6 + 688) = a1;
    swift_endAccess(v6 + 136);
    v8 = sub_1000F52F4;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_1000F52F4()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  void *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 656);
  v2 = *(void **)(v0 + 640);
  v3 = *(_QWORD *)(v0 + 632);
  v4 = *(_QWORD *)(v0 + 624);
  v5 = *(_QWORD *)(v0 + 536);
  v6 = *(_QWORD *)(v0 + 528);
  v8 = *(_QWORD *)(v0 + 504);
  v7 = *(_QWORD *)(v0 + 512);
  v9 = *(_QWORD *)(v0 + 480);
  v11 = *(_QWORD *)(v0 + 472);
  swift_errorRelease(*(_QWORD *)(v0 + 568));

  sub_100063CD0(v4, v3);
  v1(v5, v7);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 688), *(_QWORD *)(v0 + 680));
}

uint64_t sub_1000F53B8()
{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  os_log_type_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  os_log_type_t v42;
  uint64_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  void *v79;
  void *v80;
  Swift::String_optional v81;
  Swift::String v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  os_log_type_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint8_t *v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  NSObject *v104;
  os_log_type_t v105;
  uint64_t v106;
  uint8_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  NSObject *v116;
  os_log_type_t v117;
  uint64_t v118;
  uint8_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v126;
  unint64_t v127;
  Swift::String v128;
  void (*v129)(uint64_t, uint64_t, uint64_t);
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t *v140;
  char v141;
  uint64_t *v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t *v146;
  uint64_t *v147;
  uint64_t v148[2];

  v145 = (uint64_t *)(v0 + 408);
  v147 = (uint64_t *)(v0 + 368);
  v1 = *(void **)(v0 + 640);
  v2 = *(_QWORD *)(v0 + 632);
  v3 = *(_QWORD *)(v0 + 624);
  v143 = (uint64_t *)(v0 + 432);
  v144 = v0 + 440;
  swift_endAccess(v0 + 136);

  sub_100063CD0(v3, v2);
  v4 = *(_QWORD *)(v0 + 672);
  *(_QWORD *)(v0 + 376) = v4;
  swift_errorRetain(v4);
  v5 = sub_100063D3C(&qword_100345378);
  if ((swift_dynamicCast(v0 + 232, v0 + 376, v5, &type metadata for SESDataTask.ErrorCode, 0) & 1) != 0)
  {
    swift_errorRelease(v4);
    v6 = *(_QWORD *)(v0 + 232);
    v7 = *(_QWORD *)(v0 + 240);
    v8 = *(_BYTE *)(v0 + 248);
    sub_1000F71F4(v6, v7, v8);
    v9 = sub_1000F71F4(v6, v7, v8);
    v10 = Logger.logObject.getter(v9);
    v12 = static os_log_type_t.error.getter(v10, v11);
    v138 = v6;
    if (os_log_type_enabled(v10, v12))
    {
      v134 = *(_QWORD *)(v0 + 576);
      v13 = swift_slowAlloc(32, -1);
      v135 = swift_slowAlloc(32, -1);
      v148[0] = v135;
      *(_DWORD *)v13 = 136315650;
      sub_1000F1F24(v6, v7, v8);
      v15 = v14;
      *(_QWORD *)(v0 + 336) = sub_1001C56EC(v16, v14, v148);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 336, v0 + 344, v13 + 4, v13 + 12);
      swift_bridgeObjectRelease(v15);
      sub_1000F23E8(v6, v7, v8);
      sub_1000F23E8(v6, v7, v8);
      *(_WORD *)(v13 + 12) = 2048;
      *(_QWORD *)(v0 + 344) = v134;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 344, v0 + 352, v13 + 14, v13 + 22);
      *(_WORD *)(v13 + 22) = 2048;
      *(_QWORD *)(v0 + 352) = 3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 352, v0 + 360, v13 + 24, v13 + 32);
      _os_log_impl((void *)&_mh_execute_header, v10, v12, "Connection error %s : attempt %ld of %ld", (uint8_t *)v13, 0x20u);
      swift_arrayDestroy(v135, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v135, -1, -1);
      swift_slowDealloc(v13, -1, -1);
    }
    else
    {
      sub_1000F23E8(v6, v7, v8);
      sub_1000F23E8(v6, v7, v8);
    }

    v27 = Logger.logObject.getter(v26);
    v29 = static os_log_type_t.error.getter(v27, v28);
    if (os_log_type_enabled(v27, v29))
    {
      v141 = v8;
      v30 = v7;
      v31 = *(_QWORD *)(v0 + 536);
      v32 = (uint8_t *)swift_slowAlloc(12, -1);
      v137 = swift_slowAlloc(32, -1);
      *(_QWORD *)(v0 + 312) = v137;
      *(_DWORD *)v32 = 136315138;
      v33 = swift_beginAccess(v31, v0 + 16, 32, 0);
      v34 = URLRequest.allHTTPHeaderFields.getter(v33);
      if (v34)
      {
        v35 = v34;
        swift_endAccess(v0 + 16);
        v36 = Dictionary.debugDescription.getter(v35, &type metadata for String, &type metadata for String, &protocol witness table for String);
        v38 = v37;
        swift_bridgeObjectRelease(v35);
      }
      else
      {
        v36 = 0x3E656E6F6E3CLL;
        swift_endAccess(v0 + 16);
        v38 = 0xE600000000000000;
      }
      v7 = v30;
      *(_QWORD *)(v0 + 328) = sub_1001C56EC(v36, v38, (uint64_t *)(v0 + 312));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 328, v0 + 336, v32 + 4, v32 + 12);
      swift_bridgeObjectRelease(v38);
      _os_log_impl((void *)&_mh_execute_header, v27, v29, "Request headers: %s", v32, 0xCu);
      swift_arrayDestroy(v137, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v137, -1, -1);
      swift_slowDealloc(v32, -1, -1);

      v8 = v141;
    }
    else
    {

    }
    v52 = *(_QWORD *)(v0 + 568);
    v53 = sub_1000F71B0();
    v54 = swift_allocError(&type metadata for SESDataTask.ErrorCode, v53, 0, 0);
    *(_QWORD *)v55 = v138;
    *(_QWORD *)(v55 + 8) = v7;
    *(_BYTE *)(v55 + 16) = v8;
    swift_errorRelease(v52);
    v56 = *(_QWORD *)(v0 + 376);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 376));
    swift_errorRetain(v4);
    v17 = swift_errorRetain(v4);
    v18 = Logger.logObject.getter(v17);
    v20 = static os_log_type_t.error.getter(v18, v19);
    v140 = (uint64_t *)(v0 + 360);
    if (os_log_type_enabled(v18, v20))
    {
      v136 = *(_QWORD *)(v0 + 576);
      v21 = swift_slowAlloc(32, -1);
      v22 = swift_slowAlloc(32, -1);
      v148[0] = v22;
      *(_DWORD *)v21 = 136315650;
      swift_getErrorValue(v4, v144, v0 + 208);
      v23 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 224));
      v25 = v24;
      *(_QWORD *)(v0 + 424) = sub_1001C56EC(v23, v24, v148);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 424, v143, v21 + 4, v21 + 12);
      swift_bridgeObjectRelease(v25);
      swift_errorRelease(v4);
      swift_errorRelease(v4);
      *(_WORD *)(v21 + 12) = 2048;
      *(_QWORD *)(v0 + 400) = v136;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 400, v145, v21 + 14, v21 + 22);
      *(_WORD *)(v21 + 22) = 2048;
      *(_QWORD *)(v0 + 304) = 3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 304, v0 + 312, v21 + 24, v21 + 32);
      _os_log_impl((void *)&_mh_execute_header, v18, v20, "URL Session error %s : attempt %ld of %ld", (uint8_t *)v21, 0x20u);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);
    }
    else
    {
      swift_errorRelease(v4);
      swift_errorRelease(v4);
    }

    v40 = Logger.logObject.getter(v39);
    v42 = static os_log_type_t.error.getter(v40, v41);
    if (os_log_type_enabled(v40, v42))
    {
      v43 = *(_QWORD *)(v0 + 536);
      v44 = (uint8_t *)swift_slowAlloc(12, -1);
      v45 = swift_slowAlloc(32, -1);
      *(_QWORD *)(v0 + 320) = v45;
      *(_DWORD *)v44 = 136315138;
      v46 = swift_beginAccess(v43, v0 + 184, 32, 0);
      v47 = URLRequest.allHTTPHeaderFields.getter(v46);
      if (v47)
      {
        v48 = v47;
        swift_endAccess(v0 + 184);
        v49 = Dictionary.debugDescription.getter(v48, &type metadata for String, &type metadata for String, &protocol witness table for String);
        v51 = v50;
        swift_bridgeObjectRelease(v48);
      }
      else
      {
        v49 = 0x3E656E6F6E3CLL;
        swift_endAccess(v0 + 184);
        v51 = 0xE600000000000000;
      }
      *v140 = sub_1001C56EC(v49, v51, (uint64_t *)(v0 + 320));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v140, v147, v44 + 4, v44 + 12);
      swift_bridgeObjectRelease(v51);
      _os_log_impl((void *)&_mh_execute_header, v40, v42, "Request headers: %s", v44, 0xCu);
      swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1, -1);
      swift_slowDealloc(v44, -1, -1);
    }

    v57 = *(_QWORD *)(v0 + 568);
    v58 = sub_1000F71B0();
    v54 = swift_allocError(&type metadata for SESDataTask.ErrorCode, v58, 0, 0);
    *(_QWORD *)v59 = v4;
    *(_QWORD *)(v59 + 8) = 0;
    *(_BYTE *)(v59 + 16) = 2;
    v56 = v57;
  }
  v60 = swift_errorRelease(v56);
  v61 = *(_QWORD *)(v0 + 576);
  if (v61 == 3)
  {
    swift_willThrow(v60);
    v62 = *(_QWORD *)(v0 + 536);
    v63 = *(_QWORD *)(v0 + 528);
    v64 = *(_QWORD *)(v0 + 504);
    v66 = *(_QWORD *)(v0 + 472);
    v65 = *(_QWORD *)(v0 + 480);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 520) + 8))(v62, *(_QWORD *)(v0 + 512));
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_QWORD *)(v0 + 576) = v61 + 1;
    *(_QWORD *)(v0 + 568) = v54;
    if (*(_BYTE *)(v0 + 249) == 1)
    {
      swift_beginAccess(*(_QWORD *)(v0 + 536), v0 + 160, 33, 0);
      v68 = (_QWORD *)swift_task_alloc(dword_1003466F4);
      *(_QWORD *)(v0 + 584) = v68;
      *v68 = v0;
      v68[1] = sub_1000F49A0;
      v68[28] = *(_QWORD *)(v0 + 536);
      return swift_task_switch(sub_1000F290C, 0, 0);
    }
    else
    {
      v69 = *(_QWORD *)(v0 + 536);
      v71 = *(_QWORD *)(v0 + 496);
      v70 = *(_QWORD *)(v0 + 504);
      v139 = (uint64_t *)(v0 + 416);
      v72 = *(_QWORD *)(v0 + 488);
      v73 = UUID.init()(v60);
      v74 = UUID.uuidString.getter(v73);
      v76 = v75;
      (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v70, v72);
      *(_QWORD *)(v0 + 256) = v74;
      *(_QWORD *)(v0 + 264) = v76;
      *(_QWORD *)(v0 + 272) = 45;
      *(_QWORD *)(v0 + 280) = 0xE100000000000000;
      *(_QWORD *)(v0 + 288) = 0;
      *(_QWORD *)(v0 + 296) = 0xE000000000000000;
      v77 = sub_1000F716C();
      v78 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v0 + 272, v0 + 288, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v77, v77, v77);
      v80 = v79;
      swift_bridgeObjectRelease(v76);
      swift_beginAccess(v69, v0 + 88, 33, 0);
      v81.value._countAndFlagsBits = v78;
      v81.value._object = v80;
      v82._countAndFlagsBits = 0x7365757165722D78;
      v82._object = (void *)0xEC00000064692D74;
      URLRequest.setValue(_:forHTTPHeaderField:)(v81, v82);
      swift_endAccess(v0 + 88);
      swift_bridgeObjectRelease(v80);
      if (qword_1003445C8 != -1)
        swift_once(&qword_1003445C8, sub_1000F2348);
      v142 = (uint64_t *)(v0 + 392);
      v83 = type metadata accessor for Logger(0);
      v84 = sub_10009673C(v83, (uint64_t)qword_100354BF0);
      *(_QWORD *)(v0 + 600) = v84;
      v85 = Logger.logObject.getter(v84);
      v86 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v85, v86))
      {
        v87 = *(_QWORD *)(v0 + 536);
        v88 = *(_QWORD *)(v0 + 480);
        v90 = *(_QWORD *)(v0 + 456);
        v89 = *(_QWORD *)(v0 + 464);
        v91 = (uint8_t *)swift_slowAlloc(12, -1);
        v92 = swift_slowAlloc(32, -1);
        *(_QWORD *)(v0 + 416) = v92;
        *(_DWORD *)v91 = 136315138;
        v93 = swift_beginAccess(v87, v0 + 40, 32, 0);
        URLRequest.url.getter(v93);
        v94 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v89 + 48))(v88, 1, v90);
        v95 = *(_QWORD *)(v0 + 480);
        if (v94)
        {
          sub_1000F722C(*(_QWORD *)(v0 + 480));
          swift_endAccess(v0 + 40);
          v96 = 0xE400000000000000;
          v97 = 1701736302;
        }
        else
        {
          v99 = *(_QWORD *)(v0 + 464);
          v100 = *(_QWORD *)(v0 + 472);
          v101 = *(_QWORD *)(v0 + 456);
          (*(void (**)(uint64_t, _QWORD, uint64_t))(v99 + 16))(v100, *(_QWORD *)(v0 + 480), v101);
          sub_1000F722C(v95);
          v102 = swift_endAccess(v0 + 40);
          v97 = URL.absoluteString.getter(v102);
          v96 = v103;
          (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v100, v101);
        }
        *v143 = sub_1001C56EC(v97, v96, v139);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v143, v144, v91 + 4, v91 + 12);
        swift_bridgeObjectRelease(v96);
        _os_log_impl((void *)&_mh_execute_header, v85, v86, "Request URL: %s", v91, 0xCu);
        swift_arrayDestroy(v92, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v92, -1, -1);
        swift_slowDealloc(v91, -1, -1);

      }
      else
      {

      }
      v104 = Logger.logObject.getter(v98);
      v105 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v104, v105))
      {
        v106 = *(_QWORD *)(v0 + 536);
        v107 = (uint8_t *)swift_slowAlloc(12, -1);
        v108 = swift_slowAlloc(32, -1);
        *(_QWORD *)(v0 + 392) = v108;
        *(_DWORD *)v107 = 136315138;
        v109 = swift_beginAccess(v106, v0 + 64, 32, 0);
        v110 = URLRequest.allHTTPHeaderFields.getter(v109);
        if (v110)
        {
          v111 = v110;
          swift_endAccess(v0 + 64);
          v112 = Dictionary.debugDescription.getter(v111, &type metadata for String, &type metadata for String, &protocol witness table for String);
          v114 = v113;
          swift_bridgeObjectRelease(v111);
        }
        else
        {
          v112 = 0x3E656E6F6E3CLL;
          swift_endAccess(v0 + 64);
          v114 = 0xE600000000000000;
        }
        *v145 = sub_1001C56EC(v112, v114, v142);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v145, v139, v107 + 4, v107 + 12);
        swift_bridgeObjectRelease(v114);
        _os_log_impl((void *)&_mh_execute_header, v104, v105, "Request headers: %s", v107, 0xCu);
        swift_arrayDestroy(v108, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v108, -1, -1);
        swift_slowDealloc(v107, -1, -1);
      }

      v116 = Logger.logObject.getter(v115);
      v117 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v116, v117))
      {
        v146 = (uint64_t *)(v0 + 384);
        v118 = *(_QWORD *)(v0 + 536);
        v119 = (uint8_t *)swift_slowAlloc(12, -1);
        v120 = swift_slowAlloc(32, -1);
        *(_QWORD *)(v0 + 368) = v120;
        *(_DWORD *)v119 = 136315138;
        v121 = swift_beginAccess(v118, v0 + 112, 32, 0);
        v122 = URLRequest.httpBody.getter(v121);
        if (v123 >> 60 == 15)
        {
          countAndFlagsBits = 0x3E656E6F6E3CLL;
          swift_endAccess(v0 + 112);
          object = (void *)0xE600000000000000;
        }
        else
        {
          v126 = v122;
          v127 = v123;
          swift_endAccess(v0 + 112);
          v128 = Data.base64EncodedString(options:)(0);
          countAndFlagsBits = v128._countAndFlagsBits;
          object = v128._object;
          sub_10006B9B4(v126, v127);
        }
        *v146 = sub_1001C56EC(countAndFlagsBits, (unint64_t)object, v147);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v146, v142, v119 + 4, v119 + 12);
        swift_bridgeObjectRelease(object);
        _os_log_impl((void *)&_mh_execute_header, v116, v117, "Request body: %s", v119, 0xCu);
        swift_arrayDestroy(v120, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v120, -1, -1);
        swift_slowDealloc(v119, -1, -1);
      }

      v129 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 544);
      v130 = *(_QWORD *)(v0 + 536);
      v131 = *(_QWORD *)(v0 + 528);
      v132 = *(_QWORD *)(v0 + 512);
      *(_QWORD *)(v0 + 608) = objc_msgSend((id)objc_opt_self(NSURLSession), "sharedSession");
      v129(v131, v130, v132);
      v133 = (_QWORD *)swift_task_alloc(async function pointer to NSURLSession.data(for:delegate:)[1]);
      *(_QWORD *)(v0 + 616) = v133;
      *v133 = v0;
      v133[1] = sub_1000F5138;
      return NSURLSession.data(for:delegate:)(*(_QWORD *)(v0 + 528), 0);
    }
  }
}

uint64_t sub_1000F62A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  os_log_type_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  os_log_type_t v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  NSObject *v39;
  uint64_t v40;
  os_log_type_t v41;
  uint64_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  void *v78;
  void *v79;
  Swift::String_optional v80;
  Swift::String v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  os_log_type_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint8_t *v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  NSObject *v103;
  os_log_type_t v104;
  uint64_t v105;
  uint8_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  NSObject *v115;
  os_log_type_t v116;
  uint64_t v117;
  uint8_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v125;
  unint64_t v126;
  Swift::String v127;
  void (*v128)(uint64_t, uint64_t, uint64_t);
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t *v138;
  uint64_t *v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t *v143;
  uint64_t *v144;
  uint64_t v145[2];

  v142 = (uint64_t *)(v0 + 408);
  v144 = (uint64_t *)(v0 + 368);
  v140 = (uint64_t *)(v0 + 432);
  v141 = v0 + 440;
  v1 = *(_QWORD *)(v0 + 648);
  *(_QWORD *)(v0 + 376) = v1;
  swift_errorRetain(v1);
  v2 = sub_100063D3C(&qword_100345378);
  if ((swift_dynamicCast(v0 + 232, v0 + 376, v2, &type metadata for SESDataTask.ErrorCode, 0) & 1) != 0)
  {
    swift_errorRelease(v1);
    v4 = *(_QWORD *)(v0 + 232);
    v3 = *(_QWORD *)(v0 + 240);
    v5 = *(_BYTE *)(v0 + 248);
    sub_1000F71F4(v4, v3, v5);
    v6 = sub_1000F71F4(v4, v3, v5);
    v7 = Logger.logObject.getter(v6);
    v9 = static os_log_type_t.error.getter(v7, v8);
    v136 = v3;
    if (os_log_type_enabled(v7, v9))
    {
      v133 = *(_QWORD *)(v0 + 576);
      v10 = swift_slowAlloc(32, -1);
      v134 = swift_slowAlloc(32, -1);
      v145[0] = v134;
      *(_DWORD *)v10 = 136315650;
      sub_1000F1F24(v4, v3, v5);
      v11 = v5;
      v12 = v4;
      v14 = v13;
      *(_QWORD *)(v0 + 336) = sub_1001C56EC(v15, v13, v145);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 336, v0 + 344, v10 + 4, v10 + 12);
      swift_bridgeObjectRelease(v14);
      sub_1000F23E8(v12, v3, v11);
      sub_1000F23E8(v12, v3, v11);
      *(_WORD *)(v10 + 12) = 2048;
      *(_QWORD *)(v0 + 344) = v133;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 344, v0 + 352, v10 + 14, v10 + 22);
      *(_WORD *)(v10 + 22) = 2048;
      v4 = v12;
      v5 = v11;
      *(_QWORD *)(v0 + 352) = 3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 352, v0 + 360, v10 + 24, v10 + 32);
      _os_log_impl((void *)&_mh_execute_header, v7, v9, "Connection error %s : attempt %ld of %ld", (uint8_t *)v10, 0x20u);
      swift_arrayDestroy(v134, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v134, -1, -1);
      swift_slowDealloc(v10, -1, -1);
    }
    else
    {
      sub_1000F23E8(v4, v3, v5);
      sub_1000F23E8(v4, v3, v5);
    }

    v27 = Logger.logObject.getter(v26);
    v29 = static os_log_type_t.error.getter(v27, v28);
    if (os_log_type_enabled(v27, v29))
    {
      v30 = *(_QWORD *)(v0 + 536);
      v31 = (uint8_t *)swift_slowAlloc(12, -1);
      v135 = swift_slowAlloc(32, -1);
      *(_QWORD *)(v0 + 312) = v135;
      *(_DWORD *)v31 = 136315138;
      v32 = swift_beginAccess(v30, v0 + 16, 32, 0);
      v33 = URLRequest.allHTTPHeaderFields.getter(v32);
      if (v33)
      {
        v34 = v33;
        swift_endAccess(v0 + 16);
        v35 = Dictionary.debugDescription.getter(v34, &type metadata for String, &type metadata for String, &protocol witness table for String);
        v37 = v36;
        swift_bridgeObjectRelease(v34);
      }
      else
      {
        v35 = 0x3E656E6F6E3CLL;
        swift_endAccess(v0 + 16);
        v37 = 0xE600000000000000;
      }
      *(_QWORD *)(v0 + 328) = sub_1001C56EC(v35, v37, (uint64_t *)(v0 + 312));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 328, v0 + 336, v31 + 4, v31 + 12);
      swift_bridgeObjectRelease(v37);
      _os_log_impl((void *)&_mh_execute_header, v27, v29, "Request headers: %s", v31, 0xCu);
      swift_arrayDestroy(v135, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v135, -1, -1);
      swift_slowDealloc(v31, -1, -1);

    }
    else
    {

    }
    v51 = *(_QWORD *)(v0 + 568);
    v52 = sub_1000F71B0();
    v53 = swift_allocError(&type metadata for SESDataTask.ErrorCode, v52, 0, 0);
    *(_QWORD *)v54 = v4;
    *(_QWORD *)(v54 + 8) = v136;
    *(_BYTE *)(v54 + 16) = v5;
    swift_errorRelease(v51);
    v55 = *(_QWORD *)(v0 + 376);
  }
  else
  {
    v138 = (uint64_t *)(v0 + 360);
    swift_errorRelease(*(_QWORD *)(v0 + 376));
    swift_errorRetain(v1);
    v16 = swift_errorRetain(v1);
    v17 = Logger.logObject.getter(v16);
    v19 = static os_log_type_t.error.getter(v17, v18);
    if (os_log_type_enabled(v17, v19))
    {
      v20 = *(_QWORD *)(v0 + 576);
      v21 = swift_slowAlloc(32, -1);
      v22 = swift_slowAlloc(32, -1);
      v145[0] = v22;
      *(_DWORD *)v21 = 136315650;
      swift_getErrorValue(v1, v141, v0 + 208);
      v23 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 224));
      v25 = v24;
      *(_QWORD *)(v0 + 424) = sub_1001C56EC(v23, v24, v145);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 424, v140, v21 + 4, v21 + 12);
      swift_bridgeObjectRelease(v25);
      swift_errorRelease(v1);
      swift_errorRelease(v1);
      *(_WORD *)(v21 + 12) = 2048;
      *(_QWORD *)(v0 + 400) = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 400, v142, v21 + 14, v21 + 22);
      *(_WORD *)(v21 + 22) = 2048;
      *(_QWORD *)(v0 + 304) = 3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 304, v0 + 312, v21 + 24, v21 + 32);
      _os_log_impl((void *)&_mh_execute_header, v17, v19, "URL Session error %s : attempt %ld of %ld", (uint8_t *)v21, 0x20u);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);
    }
    else
    {
      swift_errorRelease(v1);
      swift_errorRelease(v1);
    }

    v39 = Logger.logObject.getter(v38);
    v41 = static os_log_type_t.error.getter(v39, v40);
    if (os_log_type_enabled(v39, v41))
    {
      v42 = *(_QWORD *)(v0 + 536);
      v43 = (uint8_t *)swift_slowAlloc(12, -1);
      v44 = swift_slowAlloc(32, -1);
      *(_QWORD *)(v0 + 320) = v44;
      *(_DWORD *)v43 = 136315138;
      v45 = swift_beginAccess(v42, v0 + 184, 32, 0);
      v46 = URLRequest.allHTTPHeaderFields.getter(v45);
      if (v46)
      {
        v47 = v46;
        swift_endAccess(v0 + 184);
        v48 = Dictionary.debugDescription.getter(v47, &type metadata for String, &type metadata for String, &protocol witness table for String);
        v50 = v49;
        swift_bridgeObjectRelease(v47);
      }
      else
      {
        v48 = 0x3E656E6F6E3CLL;
        swift_endAccess(v0 + 184);
        v50 = 0xE600000000000000;
      }
      *v138 = sub_1001C56EC(v48, v50, (uint64_t *)(v0 + 320));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v138, v144, v43 + 4, v43 + 12);
      swift_bridgeObjectRelease(v50);
      _os_log_impl((void *)&_mh_execute_header, v39, v41, "Request headers: %s", v43, 0xCu);
      swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v44, -1, -1);
      swift_slowDealloc(v43, -1, -1);
    }

    v56 = *(_QWORD *)(v0 + 568);
    v57 = sub_1000F71B0();
    v53 = swift_allocError(&type metadata for SESDataTask.ErrorCode, v57, 0, 0);
    *(_QWORD *)v58 = v1;
    *(_QWORD *)(v58 + 8) = 0;
    *(_BYTE *)(v58 + 16) = 2;
    v55 = v56;
  }
  v59 = swift_errorRelease(v55);
  v60 = *(_QWORD *)(v0 + 576);
  if (v60 == 3)
  {
    swift_willThrow(v59);
    v61 = *(_QWORD *)(v0 + 536);
    v62 = *(_QWORD *)(v0 + 528);
    v63 = *(_QWORD *)(v0 + 504);
    v65 = *(_QWORD *)(v0 + 472);
    v64 = *(_QWORD *)(v0 + 480);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 520) + 8))(v61, *(_QWORD *)(v0 + 512));
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_QWORD *)(v0 + 576) = v60 + 1;
    *(_QWORD *)(v0 + 568) = v53;
    if (*(_BYTE *)(v0 + 249) == 1)
    {
      swift_beginAccess(*(_QWORD *)(v0 + 536), v0 + 160, 33, 0);
      v67 = (_QWORD *)swift_task_alloc(dword_1003466F4);
      *(_QWORD *)(v0 + 584) = v67;
      *v67 = v0;
      v67[1] = sub_1000F49A0;
      v67[28] = *(_QWORD *)(v0 + 536);
      return swift_task_switch(sub_1000F290C, 0, 0);
    }
    else
    {
      v68 = *(_QWORD *)(v0 + 536);
      v70 = *(_QWORD *)(v0 + 496);
      v69 = *(_QWORD *)(v0 + 504);
      v137 = (uint64_t *)(v0 + 416);
      v71 = *(_QWORD *)(v0 + 488);
      v72 = UUID.init()(v59);
      v73 = UUID.uuidString.getter(v72);
      v75 = v74;
      (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v69, v71);
      *(_QWORD *)(v0 + 256) = v73;
      *(_QWORD *)(v0 + 264) = v75;
      *(_QWORD *)(v0 + 272) = 45;
      *(_QWORD *)(v0 + 280) = 0xE100000000000000;
      *(_QWORD *)(v0 + 288) = 0;
      *(_QWORD *)(v0 + 296) = 0xE000000000000000;
      v76 = sub_1000F716C();
      v77 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v0 + 272, v0 + 288, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v76, v76, v76);
      v79 = v78;
      swift_bridgeObjectRelease(v75);
      swift_beginAccess(v68, v0 + 88, 33, 0);
      v80.value._countAndFlagsBits = v77;
      v80.value._object = v79;
      v81._countAndFlagsBits = 0x7365757165722D78;
      v81._object = (void *)0xEC00000064692D74;
      URLRequest.setValue(_:forHTTPHeaderField:)(v80, v81);
      swift_endAccess(v0 + 88);
      swift_bridgeObjectRelease(v79);
      if (qword_1003445C8 != -1)
        swift_once(&qword_1003445C8, sub_1000F2348);
      v139 = (uint64_t *)(v0 + 392);
      v82 = type metadata accessor for Logger(0);
      v83 = sub_10009673C(v82, (uint64_t)qword_100354BF0);
      *(_QWORD *)(v0 + 600) = v83;
      v84 = Logger.logObject.getter(v83);
      v85 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v84, v85))
      {
        v86 = *(_QWORD *)(v0 + 536);
        v87 = *(_QWORD *)(v0 + 480);
        v89 = *(_QWORD *)(v0 + 456);
        v88 = *(_QWORD *)(v0 + 464);
        v90 = (uint8_t *)swift_slowAlloc(12, -1);
        v91 = swift_slowAlloc(32, -1);
        *(_QWORD *)(v0 + 416) = v91;
        *(_DWORD *)v90 = 136315138;
        v92 = swift_beginAccess(v86, v0 + 40, 32, 0);
        URLRequest.url.getter(v92);
        v93 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v88 + 48))(v87, 1, v89);
        v94 = *(_QWORD *)(v0 + 480);
        if (v93)
        {
          sub_1000F722C(*(_QWORD *)(v0 + 480));
          swift_endAccess(v0 + 40);
          v95 = 0xE400000000000000;
          v96 = 1701736302;
        }
        else
        {
          v98 = *(_QWORD *)(v0 + 464);
          v99 = *(_QWORD *)(v0 + 472);
          v100 = *(_QWORD *)(v0 + 456);
          (*(void (**)(uint64_t, _QWORD, uint64_t))(v98 + 16))(v99, *(_QWORD *)(v0 + 480), v100);
          sub_1000F722C(v94);
          v101 = swift_endAccess(v0 + 40);
          v96 = URL.absoluteString.getter(v101);
          v95 = v102;
          (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v99, v100);
        }
        *v140 = sub_1001C56EC(v96, v95, v137);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v140, v141, v90 + 4, v90 + 12);
        swift_bridgeObjectRelease(v95);
        _os_log_impl((void *)&_mh_execute_header, v84, v85, "Request URL: %s", v90, 0xCu);
        swift_arrayDestroy(v91, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v91, -1, -1);
        swift_slowDealloc(v90, -1, -1);

      }
      else
      {

      }
      v103 = Logger.logObject.getter(v97);
      v104 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v103, v104))
      {
        v105 = *(_QWORD *)(v0 + 536);
        v106 = (uint8_t *)swift_slowAlloc(12, -1);
        v107 = swift_slowAlloc(32, -1);
        *(_QWORD *)(v0 + 392) = v107;
        *(_DWORD *)v106 = 136315138;
        v108 = swift_beginAccess(v105, v0 + 64, 32, 0);
        v109 = URLRequest.allHTTPHeaderFields.getter(v108);
        if (v109)
        {
          v110 = v109;
          swift_endAccess(v0 + 64);
          v111 = Dictionary.debugDescription.getter(v110, &type metadata for String, &type metadata for String, &protocol witness table for String);
          v113 = v112;
          swift_bridgeObjectRelease(v110);
        }
        else
        {
          v111 = 0x3E656E6F6E3CLL;
          swift_endAccess(v0 + 64);
          v113 = 0xE600000000000000;
        }
        *v142 = sub_1001C56EC(v111, v113, v139);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v142, v137, v106 + 4, v106 + 12);
        swift_bridgeObjectRelease(v113);
        _os_log_impl((void *)&_mh_execute_header, v103, v104, "Request headers: %s", v106, 0xCu);
        swift_arrayDestroy(v107, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v107, -1, -1);
        swift_slowDealloc(v106, -1, -1);
      }

      v115 = Logger.logObject.getter(v114);
      v116 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v115, v116))
      {
        v143 = (uint64_t *)(v0 + 384);
        v117 = *(_QWORD *)(v0 + 536);
        v118 = (uint8_t *)swift_slowAlloc(12, -1);
        v119 = swift_slowAlloc(32, -1);
        *(_QWORD *)(v0 + 368) = v119;
        *(_DWORD *)v118 = 136315138;
        v120 = swift_beginAccess(v117, v0 + 112, 32, 0);
        v121 = URLRequest.httpBody.getter(v120);
        if (v122 >> 60 == 15)
        {
          countAndFlagsBits = 0x3E656E6F6E3CLL;
          swift_endAccess(v0 + 112);
          object = (void *)0xE600000000000000;
        }
        else
        {
          v125 = v121;
          v126 = v122;
          swift_endAccess(v0 + 112);
          v127 = Data.base64EncodedString(options:)(0);
          countAndFlagsBits = v127._countAndFlagsBits;
          object = v127._object;
          sub_10006B9B4(v125, v126);
        }
        *v143 = sub_1001C56EC(countAndFlagsBits, (unint64_t)object, v144);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v143, v139, v118 + 4, v118 + 12);
        swift_bridgeObjectRelease(object);
        _os_log_impl((void *)&_mh_execute_header, v115, v116, "Request body: %s", v118, 0xCu);
        swift_arrayDestroy(v119, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v119, -1, -1);
        swift_slowDealloc(v118, -1, -1);
      }

      v128 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 544);
      v129 = *(_QWORD *)(v0 + 536);
      v130 = *(_QWORD *)(v0 + 528);
      v131 = *(_QWORD *)(v0 + 512);
      *(_QWORD *)(v0 + 608) = objc_msgSend((id)objc_opt_self(NSURLSession), "sharedSession");
      v128(v130, v129, v131);
      v132 = (_QWORD *)swift_task_alloc(async function pointer to NSURLSession.data(for:delegate:)[1]);
      *(_QWORD *)(v0 + 616) = v132;
      *v132 = v0;
      v132[1] = sub_1000F5138;
      return NSURLSession.data(for:delegate:)(*(_QWORD *)(v0 + 528), 0);
    }
  }
}

unint64_t sub_1000F716C()
{
  unint64_t result;

  result = qword_1003466D8;
  if (!qword_1003466D8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1003466D8);
  }
  return result;
}

unint64_t sub_1000F71B0()
{
  unint64_t result;

  result = qword_1003466E0;
  if (!qword_1003466E0)
  {
    result = swift_getWitnessTable(&unk_100289C2C, &type metadata for SESDataTask.ErrorCode);
    atomic_store(result, &qword_1003466E0);
  }
  return result;
}

uint64_t sub_1000F71F4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  switch(a3)
  {
    case 1:
    case 3:
    case 4:
      result = swift_bridgeObjectRetain(a2);
      break;
    case 2:
      result = swift_errorRetain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000F722C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100063D3C(&qword_1003466C8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000F726C()
{
  unint64_t result;

  result = qword_1003466F8;
  if (!qword_1003466F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, &qword_1003466F8);
  }
  return result;
}

uint64_t sub_1000F72B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100063D3C(&qword_100346708);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t destroy for SESDataTask.ErrorCode(uint64_t a1)
{
  return sub_1000F23E8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s10seserviced11SESDataTaskC9ErrorCodeOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1000F71F4(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for SESDataTask.ErrorCode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1000F71F4(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_1000F23E8(v6, v7, v8);
  return a1;
}

__n128 initializeWithTake for SESDataTask.ErrorCode(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for SESDataTask.ErrorCode(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_1000F23E8(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for SESDataTask.ErrorCode(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFB && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 251);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 5)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SESDataTask.ErrorCode(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 251;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_1000F748C(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 4u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 5);
}

uint64_t sub_1000F74A4(uint64_t result, unsigned int a2)
{
  if (a2 >= 5)
  {
    *(_QWORD *)result = a2 - 5;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 5;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SESDataTask.ErrorCode()
{
  return &type metadata for SESDataTask.ErrorCode;
}

id SERServer.__allocating_init(machServiceName:isTest:)(uint64_t a1, uint64_t a2, char a3)
{
  objc_class *v3;
  _BYTE *v6;
  uint64_t v7;
  NSString v8;
  id v9;
  objc_super v11;

  v6 = objc_allocWithZone(v3);
  v7 = type metadata accessor for SERServerHelperToConformToSERProtocol();
  *(_QWORD *)&v6[OBJC_IVAR____TtC10seserviced9SERServer_helper] = swift_allocObject(v7, 16, 7);
  v6[OBJC_IVAR____TtC10seserviced9SERServer_testServer] = a3;
  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v11.receiver = v6;
  v11.super_class = v3;
  v9 = objc_msgSendSuper2(&v11, "initWithMachServiceName:", v8);

  objc_msgSend(v9, "setDelegate:", v9);
  return v9;
}

id SERServer.init(machServiceName:isTest:)(uint64_t a1, uint64_t a2, char a3)
{
  _BYTE *v3;
  uint64_t v6;
  NSString v7;
  id v8;
  objc_super v10;

  v6 = type metadata accessor for SERServerHelperToConformToSERProtocol();
  *(_QWORD *)&v3[OBJC_IVAR____TtC10seserviced9SERServer_helper] = swift_allocObject(v6, 16, 7);
  v3[OBJC_IVAR____TtC10seserviced9SERServer_testServer] = a3;
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v10.receiver = v3;
  v10.super_class = (Class)type metadata accessor for SERServer();
  v8 = objc_msgSendSuper2(&v10, "initWithMachServiceName:", v7);

  objc_msgSend(v8, "setDelegate:", v8);
  return v8;
}

uint64_t type metadata accessor for SERServerHelperToConformToSERProtocol()
{
  return objc_opt_self(_TtC10seserviced37SERServerHelperToConformToSERProtocol);
}

uint64_t type metadata accessor for SERServer()
{
  return objc_opt_self(_TtC10seserviced9SERServer);
}

id SERServer.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), "init");
}

id SERServer.init()()
{
  uint64_t v0;
  objc_class *v1;
  _BYTE *v2;
  uint64_t v3;
  NSString v4;
  id v5;
  uint64_t ObjectType;
  objc_super v8;

  v1 = (objc_class *)type metadata accessor for SERServer();
  v2 = objc_allocWithZone(v1);
  v3 = type metadata accessor for SERServerHelperToConformToSERProtocol();
  *(_QWORD *)&v2[OBJC_IVAR____TtC10seserviced9SERServer_helper] = swift_allocObject(v3, 16, 7);
  v2[OBJC_IVAR____TtC10seserviced9SERServer_testServer] = 0;
  v4 = String._bridgeToObjectiveC()();
  v8.receiver = v2;
  v8.super_class = v1;
  v5 = objc_msgSendSuper2(&v8, "initWithMachServiceName:", v4);

  objc_msgSend(v5, "setDelegate:", v5);
  ObjectType = swift_getObjectType(v0);
  swift_deallocPartialClassInstance(v0, ObjectType, 24, 7);
  return v5;
}

Swift::Bool __swiftcall SERServer.listener(_:shouldAcceptNewConnection:)(NSXPCListener _, NSXPCConnection shouldAcceptNewConnection)
{
  Swift::Bool result;

  sub_1000F9140(shouldAcceptNewConnection.super.isa);
  return result;
}

id sub_1000F7798(void *a1, const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;

  if (qword_1003445D0 != -1)
    swift_once(&qword_1003445D0, sub_1000F8E24);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10009673C(v4, (uint64_t)qword_100346710);
  v6 = Logger.logObject.getter(v5);
  v8 = static os_log_type_t.error.getter(v6, v7);
  if (os_log_type_enabled(v6, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v8, a2, v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  return objc_msgSend(a1, "invalidate");
}

id SERServer.__allocating_init(machServiceName:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  id v4;
  NSString v5;
  id v6;

  v4 = objc_allocWithZone(v2);
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v6 = objc_msgSend(v4, "initWithMachServiceName:", v5);

  return v6;
}

void SERServer.init(machServiceName:)()
{
  _swift_stdlib_reportUnimplementedInitializer("seserviced.SERServer", 20, "init(machServiceName:)", 22, 0);
  __break(1u);
}

id SERServer.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SERServer();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000F7AFC(const void *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t (__cdecl *v4)();

  *(_QWORD *)(v1 + 16) = _Block_copy(a1);
  v4 = (uint64_t (__cdecl *)())((char *)&dword_100346A08 + dword_100346A08);
  v2 = (_QWORD *)swift_task_alloc(unk_100346A0C);
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = sub_1000F7B5C;
  return v4();
}

uint64_t sub_1000F7B5C(void *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  void (**v7)(_QWORD, _QWORD, _QWORD);
  void *v8;

  v3 = v1;
  v5 = *(_QWORD *)(*v2 + 24);
  v6 = *v2;
  swift_task_dealloc(v5);
  v7 = *(void (***)(_QWORD, _QWORD, _QWORD))(v6 + 16);
  if (v3)
  {
    v8 = (void *)_convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    ((void (**)(_QWORD, _QWORD, void *))v7)[2](v7, 0, v8);

    _Block_release(v7);
  }
  else
  {
    ((void (**)(_QWORD, void *, _QWORD))v7)[2](v7, a1, 0);
    _Block_release(v7);

  }
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_1000F7D4C(uint64_t a1, void *a2, void *aBlock, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, uint64_t);

  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v10 = v9;
  v4[4] = v9;
  v11 = a2;
  swift_retain(a4);
  v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v14 = v13;

  v4[5] = v12;
  v4[6] = v14;
  v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1003469D8 + dword_1003469D8);
  v15 = (_QWORD *)swift_task_alloc(unk_1003469DC);
  v4[7] = v15;
  *v15 = v4;
  v15[1] = sub_1000F7E1C;
  return v17(v8, v10, v12, v14);
}

uint64_t sub_1000F7E1C(void *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (**v8)(_QWORD, _QWORD, _QWORD);
  uint64_t v9;
  void *v10;

  v3 = v1;
  v5 = *(_QWORD *)(*v2 + 56);
  v6 = *(_QWORD *)(*v2 + 16);
  v7 = *v2;
  swift_task_dealloc(v5);
  swift_release(v6);
  v8 = *(void (***)(_QWORD, _QWORD, _QWORD))(v7 + 24);
  v9 = *(_QWORD *)(v7 + 32);
  sub_100063CD0(*(_QWORD *)(v7 + 40), *(_QWORD *)(v7 + 48));
  swift_bridgeObjectRelease(v9);
  if (v3)
  {
    v10 = (void *)_convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    ((void (**)(_QWORD, _QWORD, void *))v8)[2](v8, 0, v10);

    _Block_release(v8);
  }
  else
  {
    ((void (**)(_QWORD, void *, _QWORD))v8)[2](v8, a1, 0);
    _Block_release(v8);

  }
  return (*(uint64_t (**)(void))(v7 + 8))();
}

uint64_t sub_1000F8030(uint64_t a1, void *a2, const void *a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);

  v4[2] = a4;
  v9 = type metadata accessor for UUID(0);
  v4[3] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[4] = v10;
  v11 = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4[5] = v11;
  v4[6] = _Block_copy(a3);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v12 = a2;
  swift_retain(a4);
  v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v15 = v14;

  v4[7] = v13;
  v4[8] = v15;
  v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1003469B0 + dword_1003469B0);
  v16 = (_QWORD *)swift_task_alloc(unk_1003469B4);
  v4[9] = v16;
  *v16 = v4;
  v16[1] = sub_1000F8124;
  return v18(v11, v13, v15);
}

uint64_t sub_1000F8124(void *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void (**v9)(_QWORD, _QWORD, _QWORD);
  uint64_t v10;
  void *v11;

  v3 = v1;
  v5 = *(_QWORD *)(*v2 + 72);
  v6 = *v2;
  swift_task_dealloc(v5);
  v8 = *(_QWORD *)(v6 + 56);
  v7 = *(_QWORD *)(v6 + 64);
  v9 = *(void (***)(_QWORD, _QWORD, _QWORD))(v6 + 48);
  v10 = *(_QWORD *)(v6 + 16);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v6 + 32) + 8))(*(_QWORD *)(v6 + 40), *(_QWORD *)(v6 + 24));
  swift_release(v10);
  sub_100063CD0(v8, v7);
  if (v3)
  {
    v11 = (void *)_convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    ((void (**)(_QWORD, _QWORD, void *))v9)[2](v9, 0, v11);

    _Block_release(v9);
  }
  else
  {
    ((void (**)(_QWORD, void *, _QWORD))v9)[2](v9, a1, 0);
    _Block_release(v9);

  }
  swift_task_dealloc(*(_QWORD *)(v6 + 40));
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_1000F834C(uint64_t a1, const void *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t);

  v3[2] = a3;
  v7 = type metadata accessor for UUID(0);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v3[4] = v8;
  v9 = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3[5] = v9;
  v3[6] = _Block_copy(a2);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v10 = unk_10034698C;
  v13 = (uint64_t (*)(uint64_t))((char *)&dword_100346988 + dword_100346988);
  swift_retain(a3);
  v11 = (_QWORD *)swift_task_alloc(v10);
  v3[7] = v11;
  *v11 = v3;
  v11[1] = sub_1000F8414;
  return v13(v9);
}

uint64_t sub_1000F8414(void *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  void (**v7)(_QWORD, _QWORD, _QWORD);
  uint64_t v8;
  void *v9;

  v3 = v1;
  v5 = *(_QWORD *)(*v2 + 56);
  v6 = *v2;
  swift_task_dealloc(v5);
  v7 = *(void (***)(_QWORD, _QWORD, _QWORD))(v6 + 48);
  v8 = *(_QWORD *)(v6 + 16);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v6 + 32) + 8))(*(_QWORD *)(v6 + 40), *(_QWORD *)(v6 + 24));
  swift_release(v8);
  if (v3)
  {
    v9 = (void *)_convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    ((void (**)(_QWORD, _QWORD, void *))v7)[2](v7, 0, v9);

    _Block_release(v7);
  }
  else
  {
    ((void (**)(_QWORD, void *, _QWORD))v7)[2](v7, a1, 0);
    _Block_release(v7);

  }
  swift_task_dealloc(*(_QWORD *)(v6 + 40));
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_1000F8624(uint64_t a1, const void *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t);

  v3[2] = a3;
  v7 = type metadata accessor for UUID(0);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v3[4] = v8;
  v9 = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3[5] = v9;
  v3[6] = _Block_copy(a2);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v10 = unk_100346964;
  v13 = (uint64_t (*)(uint64_t))((char *)&dword_100346960 + dword_100346960);
  swift_retain(a3);
  v11 = (_QWORD *)swift_task_alloc(v10);
  v3[7] = v11;
  *v11 = v3;
  v11[1] = sub_1000F86EC;
  return v13(v9);
}

uint64_t sub_1000F86EC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v2 = *(_QWORD *)(*v1 + 56);
  v4 = *(_QWORD *)(*v1 + 32);
  v3 = *(_QWORD *)(*v1 + 40);
  v6 = *(_QWORD *)(*v1 + 16);
  v5 = *(_QWORD *)(*v1 + 24);
  v7 = *v1;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_release(v6);
  v8 = *(_QWORD *)(v7 + 48);
  if (v0)
  {
    v9 = (void *)_convertErrorToNSError(_:)(v0);
    swift_errorRelease(v0);
    (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v9);

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v8 + 16))(*(_QWORD *)(v7 + 48), 0);
  }
  v10 = *(_QWORD *)(v7 + 40);
  _Block_release(*(const void **)(v7 + 48));
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v7 + 8))();
}

uint64_t sub_1000F88D4(const void *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t (__cdecl *v4)();

  *(_QWORD *)(v1 + 16) = _Block_copy(a1);
  v4 = (uint64_t (__cdecl *)())((char *)&dword_100346928 + dword_100346928);
  v2 = (_QWORD *)swift_task_alloc(unk_10034692C);
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = sub_1000F8934;
  return v4();
}

uint64_t sub_1000F8934(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Class isa;
  void *v10;
  void (**v11)(_QWORD, _QWORD, _QWORD);

  v3 = v1;
  v5 = *v2;
  v6 = *(_QWORD *)(*v2 + 24);
  v7 = *v2;
  swift_task_dealloc(v6);
  if (v3)
  {
    v8 = _convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    isa = 0;
    v10 = (void *)v8;
  }
  else
  {
    type metadata accessor for Reservation(0);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
    v8 = 0;
    v10 = isa;
  }
  v11 = *(void (***)(_QWORD, _QWORD, _QWORD))(v5 + 16);
  ((void (**)(_QWORD, Class, uint64_t))v11)[2](v11, isa, v8);

  _Block_release(v11);
  return (*(uint64_t (**)(void))(v7 + 8))();
}

uint64_t sub_1000F8B18(const void *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t (__cdecl *v4)();

  *(_QWORD *)(v1 + 16) = _Block_copy(a1);
  v4 = (uint64_t (__cdecl *)())((char *)&dword_100346900 + dword_100346900);
  v2 = (_QWORD *)swift_task_alloc(unk_100346904);
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = sub_1000F8B78;
  return v4();
}

uint64_t sub_1000F8B78()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *(_QWORD *)(*v1 + 24);
  v3 = *v1;
  swift_task_dealloc(v2);
  v4 = *(_QWORD *)(v3 + 16);
  if (v0)
  {
    v5 = (void *)_convertErrorToNSError(_:)(v0);
    swift_errorRelease(v0);
    (*(void (**)(uint64_t, void *))(v4 + 16))(v4, v5);

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v4 + 16))(*(_QWORD *)(v3 + 16), 0);
  }
  _Block_release(*(const void **)(v3 + 16));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1000F8D30(const void *a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a2;
  *(_QWORD *)(v2 + 24) = _Block_copy(a1);
  swift_retain(a2);
  return swift_task_switch(sub_1000F8D7C, 0, 0);
}

uint64_t sub_1000F8D7C()
{
  uint64_t v0;
  void (**v1)(_QWORD, _QWORD, _QWORD);
  uint64_t v2;
  const __CFDictionary *v3;
  _BOOL8 v4;
  id v5;
  void *v6;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(void (***)(_QWORD, _QWORD, _QWORD))(v0 + 24);
  v3 = IOServiceNameMatching("rose");
  v4 = IOServiceGetMatchingService(kIOMainPortDefault, v3) != 0;
  v5 = objc_allocWithZone((Class)type metadata accessor for DeviceCapability(0));
  v6 = (void *)DeviceCapability.init(supportsUWB:)(v4);
  swift_release(v2);
  ((void (**)(_QWORD, void *, _QWORD))v1)[2](v1, v6, 0);
  _Block_release(v1);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F8E24()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000980F8(v0, qword_100346710);
  sub_10009673C(v0, (uint64_t)qword_100346710);
  return Logger.init(subsystem:category:)(0xD000000000000014);
}

uint64_t sub_1000F8E9C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  v4 = (_QWORD *)swift_task_alloc(a3[1]);
  *(_QWORD *)(v3 + 16) = v4;
  *v4 = v3;
  v4[1] = sub_1000FAD2C;
  return v6();
}

uint64_t sub_1000F8EF0(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  v5 = (_QWORD *)swift_task_alloc(a4[1]);
  *(_QWORD *)(v4 + 16) = v5;
  *v5 = v4;
  v5[1] = sub_1000FAD2C;
  return v7();
}

uint64_t sub_1000F8F44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_100096700(a1, &qword_100346898);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v15 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v16 = swift_allocObject(&unk_100308FD8, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v17 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  else
  {
    v17 = 0;
  }
  return swift_task_create(v8, v17, &type metadata for () + 1, &unk_1003468D8, v16);
}

uint64_t sub_1000F9090(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_1000F90F4;
  return v6(a1);
}

uint64_t sub_1000F90F4()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

void sub_1000F9140(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  os_log_type_t v15;
  uint8_t *v16;
  id v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  Class isa;
  uint64_t v24;
  NSString v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  id v33;
  NSString v34;
  id v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 aBlock;
  __int128 v48;
  id (*v49)();
  uint64_t v50;

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1003445D0 != -1)
    swift_once(&qword_1003445D0, sub_1000F8E24);
  v9 = sub_10009673C(v4, (uint64_t)qword_100346710);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v9, v4);
  v10 = a1;
  v11 = Logger.logObject.getter(v10);
  v15 = static os_log_type_t.info.getter(v11, v12, v13, v14);
  if (os_log_type_enabled(v11, v15))
  {
    v43 = v5;
    v44 = v2;
    v45 = v9;
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    v42 = swift_slowAlloc(32, -1);
    *(_QWORD *)&aBlock = v42;
    *(_DWORD *)v16 = 136315138;
    v17 = objc_msgSend(v10, "serviceName");
    if (!v17)
    {

      __break(1u);
      return;
    }
    v18 = v17;
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v21 = v20;

    v46 = sub_1001C56EC(v19, v21, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &aBlock, v16 + 4, v16 + 12);

    swift_bridgeObjectRelease(v21);
    _os_log_impl((void *)&_mh_execute_header, v11, v15, "Accepting %s", v16, 0xCu);
    v22 = v42;
    swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    (*(void (**)(char *, uint64_t))(v43 + 8))(v8, v4);
    v2 = v44;
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  isa = SERInterface()().super.isa;
  objc_msgSend(v10, "setExportedInterface:", isa);

  v24 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10seserviced9SERServer_helper);
  objc_msgSend(v10, "setExportedObject:", v24);
  v25 = String._bridgeToObjectiveC()();
  SESPrivateLogSERProtocolDetails(v25, &OBJC_PROTOCOL____TtP9SEService11SERProtocol_, v24);

  v26 = swift_allocObject(&unk_100309348, 24, 7);
  *(_QWORD *)(v26 + 16) = v10;
  v49 = sub_1000FACD4;
  v50 = v26;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v48 = sub_100071C98;
  *((_QWORD *)&v48 + 1) = &unk_100309360;
  v27 = _Block_copy(&aBlock);
  v28 = v50;
  v29 = v10;
  swift_release(v28);
  objc_msgSend(v29, "setInvalidationHandler:", v27);
  _Block_release(v27);
  v30 = swift_allocObject(&unk_100309398, 24, 7);
  *(_QWORD *)(v30 + 16) = v29;
  v49 = sub_1000FAD0C;
  v50 = v30;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v48 = sub_100071C98;
  *((_QWORD *)&v48 + 1) = &unk_1003093B0;
  v31 = _Block_copy(&aBlock);
  v32 = v50;
  v33 = v29;
  swift_release(v32);
  objc_msgSend(v33, "setInterruptionHandler:", v31);
  _Block_release(v31);
  v34 = String._bridgeToObjectiveC()();
  v35 = objc_msgSend(v33, "valueForEntitlement:", v34);

  if (v35)
  {
    _bridgeAnyObjectToAny(_:)(&aBlock);
    swift_unknownObjectRelease(v35);
    sub_100096700((uint64_t)&aBlock, (uint64_t *)&unk_100346130);
    objc_msgSend(v33, "resume");
  }
  else
  {
    aBlock = 0u;
    v48 = 0u;
    v36 = sub_100096700((uint64_t)&aBlock, (uint64_t *)&unk_100346130);
    v37 = Logger.logObject.getter(v36);
    v39 = static os_log_type_t.error.getter(v37, v38);
    if (os_log_type_enabled(v37, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v40 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v39, "Client not entitled!", v40, 2u);
      swift_slowDealloc(v40, -1, -1);
    }

  }
}

uint64_t sub_1000F961C()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_1003468A4);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_1000FAD2C;
  return ((uint64_t (*)(const void *, uint64_t))((char *)&dword_1003468A0 + dword_1003468A0))(v2, v3);
}

uint64_t sub_1000F9684()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (int *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_1003468B4);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1000FAD2C;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_1003468B0 + dword_1003468B0))(v2, v3, v4);
}

uint64_t sub_1000F9700(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1003468C4);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1000FAD2C;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1003468C0 + dword_1003468C0))(a1, v4, v5, v6);
}

uint64_t sub_1000F9784()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000F97A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1003468D4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1000F9818;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1003468D0 + dword_1003468D0))(a1, v4);
}

uint64_t sub_1000F9818()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1000F9864()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  _QWORD *v3;

  v2 = *(const void **)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc(dword_1003468E4);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1000FAD2C;
  return ((uint64_t (*)(const void *))((char *)&dword_1003468E0 + dword_1003468E0))(v2);
}

uint64_t sub_1000F98D0()
{
  return swift_task_switch(sub_1000F98E4, 0, 0);
}

uint64_t sub_1000F98E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v1 = qword_1003494C0;
  if (qword_1003494C0)
  {
    v2 = qword_1003494C0;
LABEL_3:
    *(_QWORD *)(v0 + 16) = 0;
    *(_QWORD *)(v0 + 24) = v2;
    swift_retain(v1);
    return swift_task_switch(sub_1000F99A0, v2, 0);
  }
  v4 = type metadata accessor for SERPersistenceController(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = sub_1001BA1B4();
  v6 = qword_1003494C0;
  qword_1003494C0 = (uint64_t)v5;
  result = swift_release(v6);
  v2 = qword_1003494C0;
  if (qword_1003494C0)
  {
    swift_retain(qword_1003494C0);
    v1 = 0;
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000F99A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  sub_1001B7F38();
  v4 = v3;
  v5 = swift_release(v1);
  if (!v2)
    v5 = v4;
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v5);
}

uint64_t sub_1000F99FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  v5 = sub_100063D3C((uint64_t *)&unk_100346930);
  v4[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CredentialType(0);
  v4[7] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[8] = v7;
  v4[9] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000F9A84, 0, 0);
}

uint64_t sub_1000F9A84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  Swift::String v8;
  Swift::String v9;
  id v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain(v4);
  CredentialType.init(rawValue:)(v5, v4);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    v7 = *(_QWORD *)(v0 + 16);
    v6 = *(void **)(v0 + 24);
    sub_100096700(*(_QWORD *)(v0 + 48), (uint64_t *)&unk_100346930);
    sub_100098CBC();
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease(0xE000000000000000);
    v8._countAndFlagsBits = v7;
    v8._object = v6;
    String.append(_:)(v8);
    v9._countAndFlagsBits = 0xD000000000000019;
    v9._object = (void *)0x80000001002BC6E0;
    String.append(_:)(v9);
    v10 = sub_1001E2838(23, 0, 0xD000000000000012, 0x80000001002BC6C0, 0);
    swift_willThrow(v10);
    v11 = *(_QWORD *)(v0 + 48);
    swift_task_dealloc(*(_QWORD *)(v0 + 72));
    swift_task_dealloc(v11);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 32))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  v13 = qword_1003494C0;
  if (qword_1003494C0)
  {
    v14 = qword_1003494C0;
LABEL_5:
    *(_QWORD *)(v0 + 80) = 0;
    *(_QWORD *)(v0 + 88) = v14;
    swift_retain(v13);
    return swift_task_switch(sub_1000F9C6C, v14, 0);
  }
  v15 = type metadata accessor for SERPersistenceController(0);
  swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  v16 = sub_1001BA1B4();
  v17 = qword_1003494C0;
  qword_1003494C0 = (uint64_t)v16;
  result = swift_release(v17);
  v14 = qword_1003494C0;
  if (qword_1003494C0)
  {
    swift_retain(qword_1003494C0);
    v13 = 0;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000F9C6C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = v0[10];
  v1 = v0[11];
  sub_1001B913C(v0[9], v0[4], v0[5]);
  v0[12] = v3;
  v0[13] = v2;
  swift_release(v1);
  if (v2)
    v4 = sub_1000F9D28;
  else
    v4 = sub_1000F9CD4;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000F9CD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 48);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(v1, *(_QWORD *)(v0 + 56));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 96));
}

uint64_t sub_1000F9D28()
{
  uint64_t v0;
  uint64_t v1;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 56));
  v1 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F9D78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch(sub_1000F9D94, 0, 0);
}

uint64_t sub_1000F9D94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v1 = qword_1003494C0;
  if (qword_1003494C0)
  {
    v2 = qword_1003494C0;
LABEL_3:
    *(_QWORD *)(v0 + 40) = 0;
    *(_QWORD *)(v0 + 48) = v2;
    swift_retain(v1);
    return swift_task_switch(sub_1000F9E50, v2, 0);
  }
  v4 = type metadata accessor for SERPersistenceController(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = sub_1001BA1B4();
  v6 = qword_1003494C0;
  qword_1003494C0 = (uint64_t)v5;
  result = swift_release(v6);
  v2 = qword_1003494C0;
  if (qword_1003494C0)
  {
    swift_retain(qword_1003494C0);
    v1 = 0;
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000F9E50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);
  sub_1001B9628(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  v4 = v3;
  v5 = swift_release(v1);
  if (!v2)
    v5 = v4;
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v5);
}

uint64_t sub_1000F9EB4(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_1000F9ECC, 0, 0);
}

uint64_t sub_1000F9ECC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v1 = qword_1003494C0;
  if (qword_1003494C0)
  {
    v2 = qword_1003494C0;
LABEL_3:
    *(_QWORD *)(v0 + 24) = 0;
    *(_QWORD *)(v0 + 32) = v2;
    swift_retain(v1);
    return swift_task_switch(sub_1000F9F88, v2, 0);
  }
  v4 = type metadata accessor for SERPersistenceController(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = sub_1001BA1B4();
  v6 = qword_1003494C0;
  qword_1003494C0 = (uint64_t)v5;
  result = swift_release(v6);
  v2 = qword_1003494C0;
  if (qword_1003494C0)
  {
    swift_retain(qword_1003494C0);
    v1 = 0;
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000F9F88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 24);
  v1 = *(_QWORD *)(v0 + 32);
  v3 = sub_1001B8E1C(*(_QWORD *)(v0 + 16));
  v4 = swift_release(v1);
  if (!v2)
    v4 = (uint64_t)v3;
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v4);
}

uint64_t sub_1000F9FE8(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_1000FA000, 0, 0);
}

uint64_t sub_1000FA000()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v1 = qword_1003494C0;
  if (qword_1003494C0)
  {
    v2 = qword_1003494C0;
LABEL_3:
    *(_QWORD *)(v0 + 24) = 0;
    *(_QWORD *)(v0 + 32) = v2;
    swift_retain(v1);
    return swift_task_switch(sub_1000FA0BC, v2, 0);
  }
  v4 = type metadata accessor for SERPersistenceController(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = sub_1001BA1B4();
  v6 = qword_1003494C0;
  qword_1003494C0 = (uint64_t)v5;
  result = swift_release(v6);
  v2 = qword_1003494C0;
  if (qword_1003494C0)
  {
    swift_retain(qword_1003494C0);
    v1 = 0;
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000FA0BC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  id v5;
  id v6;
  NSString v7;
  Class isa;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(void **)(v1 + 112);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 16);
    v4 = (_QWORD *)swift_task_alloc(48);
    v4[2] = v1;
    v4[3] = v3;
    v4[4] = v2;
    v5 = v2;
    NSManagedObjectContext.performAndWait<A>(_:)(&type metadata for (), sub_1000FA9DC, v4, &type metadata for () + 1);

    swift_release(v1);
    swift_task_dealloc(v4);
  }
  else
  {
    v6 = objc_allocWithZone((Class)NSError);
    v7 = String._bridgeToObjectiveC()();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v6, "initWithDomain:code:userInfo:", v7, 21, isa);

    swift_willThrow(v9);
    swift_release(v1);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000FA1F0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = sub_100063D3C((uint64_t *)&unk_100346930);
  v0[2] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for UUID(0);
  v0[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v0[4] = v3;
  v0[5] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100063D3C((uint64_t *)&unk_1003465E0);
  v0[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000FA294, 0, 0);
}

uint64_t sub_1000FA294()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v1 = qword_1003494C0;
  if (qword_1003494C0)
  {
    v2 = qword_1003494C0;
LABEL_3:
    *(_QWORD *)(v0 + 56) = 0;
    *(_QWORD *)(v0 + 64) = v2;
    swift_retain(v1);
    return swift_task_switch(sub_1000FA36C, v2, 0);
  }
  v4 = type metadata accessor for SERPersistenceController(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = sub_1001BA1B4();
  v6 = qword_1003494C0;
  qword_1003494C0 = (uint64_t)v5;
  result = swift_release(v6);
  v2 = qword_1003494C0;
  if (qword_1003494C0)
  {
    swift_retain(qword_1003494C0);
    v1 = 0;
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000FA36C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v0 + 56);
  v1 = *(_QWORD *)(v0 + 64);
  sub_1001B8918();
  *(_QWORD *)(v0 + 72) = v3;
  swift_release(v1);
  if (!v2)
    return swift_task_switch(sub_1000FA3F8, 0, 0);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 16);
  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_1000FA3F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD **v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id result;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;

  v2 = *(_QWORD *)(v0 + 72);
  if ((unint64_t)v2 >> 62)
  {
    if (v2 < 0)
      v30 = *(_QWORD *)(v0 + 72);
    else
      v30 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 72));
    v3 = _CocoaArrayWrapper.endIndex.getter(v30);
    swift_bridgeObjectRelease(v2);
    if (v3)
      goto LABEL_3;
LABEL_19:
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72));
    v29 = _swiftEmptyArrayStorage;
LABEL_20:
    v31 = *(_QWORD *)(v0 + 40);
    v32 = *(_QWORD *)(v0 + 16);
    swift_task_dealloc(*(_QWORD *)(v0 + 48));
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    return (id)(*(uint64_t (**)(_QWORD *))(v0 + 8))(v29);
  }
  v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v3)
    goto LABEL_19;
LABEL_3:
  v35 = _swiftEmptyArrayStorage;
  v4 = &v35;
  specialized ContiguousArray.reserveCapacity(_:)(v3);
  if (v3 < 0)
  {
    __break(1u);
  }
  else
  {
    v5 = 0;
    v1 = *(_QWORD *)(v0 + 32);
    v33 = *(_QWORD *)(v0 + 72) + 32;
    v34 = v2 & 0xC000000000000001;
    while (1)
    {
      v6 = v34
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, *(_QWORD *)(v0 + 72))
         : *(id *)(v33 + 8 * v5);
      v7 = v6;
      v8 = objc_msgSend(v6, "uuid", v33);
      v4 = *(_QWORD ***)(v0 + 48);
      if (!v8)
        break;
      v9 = v8;
      v10 = *(_QWORD *)(v0 + 40);
      v11 = *(_QWORD *)(v0 + 24);
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(_QWORD **, uint64_t, uint64_t))(v1 + 32))(v4, v10, v11);
      (*(void (**)(_QWORD **, _QWORD, uint64_t, uint64_t))(v1 + 56))(v4, 0, 1, v11);
      result = (id)(*(uint64_t (**)(_QWORD **, uint64_t, uint64_t))(v1 + 48))(v4, 1, v11);
      if ((_DWORD)result == 1)
        goto LABEL_23;
      result = objc_msgSend(v7, "type");
      if (!result)
        goto LABEL_24;
      v13 = result;
      v14 = *(_QWORD *)(v0 + 16);
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
      v17 = v16;

      CredentialType.init(rawValue:)(v15, v17);
      v18 = type metadata accessor for CredentialType(0);
      result = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(v14, 1, v18);
      if ((_DWORD)result == 1)
        goto LABEL_25;
      result = objc_msgSend(v7, "metadata");
      if (!result)
        goto LABEL_26;
      v19 = result;
      ++v5;
      v20 = *(_QWORD *)(v0 + 48);
      v21 = *(_QWORD *)(v0 + 16);
      v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v24 = v23;

      v25 = objc_allocWithZone((Class)type metadata accessor for Reservation(0));
      v26 = Reservation.init(uuid:type:metadata:)(v20, v21, v22, v24);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      v27 = v35[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v27);
      v28 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v27, v26);
      specialized ContiguousArray._endMutation()(v28);
      if (v3 == v5)
      {
        v29 = v35;
        swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72));
        goto LABEL_20;
      }
    }
  }
  result = (id)(*(uint64_t (**)(_QWORD **, uint64_t, uint64_t, _QWORD))(v1 + 56))(v4, 1, 1, *(_QWORD *)(v0 + 24));
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1000FA6DC()
{
  return swift_task_switch(sub_1000FA6F0, 0, 0);
}

uint64_t sub_1000FA6F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v1 = qword_1003494C0;
  if (qword_1003494C0)
  {
    v2 = qword_1003494C0;
LABEL_3:
    *(_QWORD *)(v0 + 16) = 0;
    *(_QWORD *)(v0 + 24) = v2;
    swift_retain(v1);
    return swift_task_switch(sub_1000FA7AC, v2, 0);
  }
  v4 = type metadata accessor for SERPersistenceController(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = sub_1001BA1B4();
  v6 = qword_1003494C0;
  qword_1003494C0 = (uint64_t)v5;
  result = swift_release(v6);
  v2 = qword_1003494C0;
  if (qword_1003494C0)
  {
    swift_retain(qword_1003494C0);
    v1 = 0;
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000FA7AC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  id v4;
  id v5;
  NSString v6;
  Class isa;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(void **)(v1 + 112);
  if (v2)
  {
    v3 = swift_task_alloc(32);
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = v2;
    NSManagedObjectContext.performAndWait<A>(_:)(&type metadata for (), sub_1000FA8DC, v3, &type metadata for () + 1);

    swift_release(v1);
    swift_task_dealloc(v3);
  }
  else
  {
    v5 = objc_allocWithZone((Class)NSError);
    v6 = String._bridgeToObjectiveC()();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v5, "initWithDomain:code:userInfo:", v6, 21, isa);

    swift_willThrow(v8);
    swift_release(v1);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000FA8DC()
{
  uint64_t v0;

  sub_1001B9ED8(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1000FA8F8()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  _QWORD *v3;

  v2 = *(const void **)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc(dword_10034690C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1000F9818;
  return ((uint64_t (*)(const void *))((char *)&dword_100346908 + dword_100346908))(v2);
}

uint64_t sub_1000FA968()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  const void *v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (const void *)v0[3];
  v4 = v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_100346944);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1000FAD2C;
  return ((uint64_t (*)(uint64_t, const void *, uint64_t))((char *)&dword_100346940 + dword_100346940))(v2, v3, v4);
}

void sub_1000FA9DC()
{
  uint64_t v0;

  sub_1001B9CBC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_1000FA9FC()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000FAA30()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  const void *v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (const void *)v0[3];
  v4 = v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_10034696C);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1000FAD2C;
  return ((uint64_t (*)(uint64_t, const void *, uint64_t))((char *)&dword_100346968 + dword_100346968))(v2, v3, v4);
}

uint64_t sub_1000FAAA8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  const void *v5;
  _QWORD *v6;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v5 = (const void *)v0[4];
  v4 = v0[5];
  v6 = (_QWORD *)swift_task_alloc(dword_100346994);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_1000FAD2C;
  return ((uint64_t (*)(uint64_t, void *, const void *, uint64_t))((char *)&dword_100346990 + dword_100346990))(v2, v3, v5, v4);
}

uint64_t sub_1000FAB2C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000FAB68()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v5 = (void *)v0[4];
  v4 = v0[5];
  v6 = (_QWORD *)swift_task_alloc(dword_1003469BC);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_1000FAD2C;
  return ((uint64_t (*)(uint64_t, void *, void *, uint64_t))((char *)&dword_1003469B8 + dword_1003469B8))(v2, v3, v5, v4);
}

uint64_t sub_1000FABEC()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000FAC18()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  _QWORD *v3;

  v2 = *(const void **)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc(dword_1003469EC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1000FAD2C;
  return ((uint64_t (*)(const void *))((char *)&dword_1003469E8 + dword_1003469E8))(v2);
}

uint64_t sub_1000FAC84()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000FACB0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_1000FACD4()
{
  uint64_t v0;

  return sub_1000F7798(*(void **)(v0 + 16), "XPC Server Invalidated");
}

uint64_t sub_1000FACF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000FAD04(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

id sub_1000FAD0C()
{
  uint64_t v0;

  return sub_1000F7798(*(void **)(v0 + 16), "XPC Server Interrupted");
}

uint64_t sub_1000FAD3C(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 1701602409;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x46676E6974696177;
    else
      v4 = 0x6572676F72506E69;
    if (v3 == 1)
      v5 = 0xEC0000004553726FLL;
    else
      v5 = 0xEA00000000007373;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v2 = 0x46676E6974696177;
      else
        v2 = 0x6572676F72506E69;
      if (v6 == 1)
        v7 = 0xEC0000004553726FLL;
      else
        v7 = 0xEA00000000007373;
      if (v4 != v2)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0xE400000000000000;
    v4 = 1701602409;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE400000000000000;
  if (v4 != 1701602409)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

_QWORD *sub_1000FAE5C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;
  void **v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v2);
    v4 = (void **)(a1 + 72);
    do
    {
      v5 = *v4;
      v4 += 6;
      v6 = v5;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      v7 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v7);
      v8 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, v6);
      specialized ContiguousArray._endMutation()(v8);
      --v2;
    }
    while (v2);
    return _swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_1000FAF08(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  uint64_t v15;
  uint64_t v17;

  v4 = v3;
  if ((unint64_t)a3 >> 62)
    goto LABEL_17;
  v6 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a3);
  while (v6)
  {
    v7 = 4;
    while (1)
    {
      v8 = v7 - 4;
      if ((a3 & 0xC000000000000001) == 0)
        break;
      v9 = specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, a3);
      v10 = v7 - 3;
      if (__OFADD__(v8, 1))
        goto LABEL_16;
LABEL_9:
      v17 = v9;
      v11 = a1(&v17);
      if (v4)
      {
        swift_bridgeObjectRelease(a3);
        swift_release(v9);
        return v13 & 1;
      }
      v12 = v11;
      swift_release(v9);
      if ((v12 & 1) != 0)
      {
        swift_bridgeObjectRelease(a3);
        v13 = 1;
        return v13 & 1;
      }
      ++v7;
      if (v10 == v6)
        goto LABEL_12;
    }
    v9 = *(_QWORD *)(a3 + 8 * v7);
    swift_retain(v9);
    v10 = v7 - 3;
    if (!__OFADD__(v8, 1))
      goto LABEL_9;
LABEL_16:
    __break(1u);
LABEL_17:
    if (a3 < 0)
      v15 = a3;
    else
      v15 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v6 = _CocoaArrayWrapper.endIndex.getter(v15);
  }
LABEL_12:
  swift_bridgeObjectRelease(a3);
  v13 = 0;
  return v13 & 1;
}

uint64_t sub_1000FB04C(uint64_t (*a1)(id *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  uint64_t v15;
  id v17;

  v4 = v3;
  if ((unint64_t)a3 >> 62)
    goto LABEL_16;
  v6 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a3);
  for (; v6; v6 = _CocoaArrayWrapper.endIndex.getter(v15))
  {
    v7 = 4;
    while (1)
    {
      v8 = (a3 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, a3)
         : *(id *)(a3 + 8 * v7);
      v9 = v8;
      v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1))
        break;
      v17 = v8;
      v11 = a1(&v17);
      if (v4)
      {
        swift_bridgeObjectRelease(a3);

        return v13 & 1;
      }
      v12 = v11;

      if ((v12 & 1) != 0)
      {
        swift_bridgeObjectRelease(a3);
        v13 = 1;
        return v13 & 1;
      }
      ++v7;
      if (v10 == v6)
        goto LABEL_11;
    }
    __break(1u);
LABEL_16:
    if (a3 < 0)
      v15 = a3;
    else
      v15 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
  }
LABEL_11:
  swift_bridgeObjectRelease(a3);
  v13 = 0;
  return v13 & 1;
}

void sub_1000FB17C(uint64_t a1, uint64_t a2)
{
  char *v2;
  _QWORD v3[5];

  v3[3] = &type metadata for Data;
  v3[4] = &protocol witness table for Data;
  v3[0] = a1;
  v3[1] = a2;
  v2 = (char *)&loc_1000FB1E0 + dword_1000FB384[sub_10006BA78(v3, (uint64_t)&type metadata for Data)[1] >> 62];
  __asm { BR              X10 }
}

uint64_t sub_1000FB1F0()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  __int16 v6;
  char v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;

  v5 = v2;
  v6 = v3;
  v7 = BYTE2(v3);
  v8 = BYTE3(v3);
  v9 = BYTE4(v3);
  v10 = BYTE5(v3);
  sub_100063C8C(v1, v0);
  Data._Representation.append(contentsOf:)(&v5, (char *)&v5 + BYTE6(v3));
  return sub_10006BA9C(&v11);
}

id sub_1000FB394()
{
  uint64_t v0;
  id result;

  v0 = type metadata accessor for SEKeySyncManager(0);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  result = sub_1000FB5A4();
  qword_100354C08 = (uint64_t)result;
  return result;
}

id sub_1000FB3D0()
{
  uint64_t v0;

  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  return sub_1000FB5A4();
}

void sub_1000FB490(char a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  NSString v8;
  id v9;
  uint64_t v10;
  NSString v11;
  char v12;
  _BYTE v13[24];

  v4 = v2 + *a2;
  v5 = swift_beginAccess(v4, v13, 33, 0);
  if (*(_BYTE *)(v4 + 33) == 1 && !SESInternalVariant(v5))
    goto LABEL_5;
  v6 = *(_QWORD *)(v4 + 8);
  v7 = objc_allocWithZone((Class)NSUserDefaults);
  swift_bridgeObjectRetain(v6);
  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  v9 = objc_msgSend(v7, "initWithSuiteName:", v8);

  if (v9)
  {
    v12 = a1 & 1;
    v10 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v12, &type metadata for Bool);
    v11 = String._bridgeToObjectiveC()();
    objc_msgSend(v9, "setValue:forKey:", v10, v11);

    swift_unknownObjectRelease(v10);
LABEL_5:
    swift_endAccess(v13);
    return;
  }
  __break(1u);
}

id sub_1000FB5A4()
{
  _BYTE *v0;
  objc_class *ObjectType;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  NSString v8;
  id v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  objc_super v20;

  ObjectType = (objc_class *)swift_getObjectType(v0);
  swift_defaultActor_initialize(v0);
  v2 = SESLoggingSubsystem;
  swift_retain(v0);
  v3 = String.init(cString:)(v2);
  Logger.init(subsystem:category:)(v3);
  v4 = &v0[OBJC_IVAR____TtC10seserviced16SEKeySyncManager_ptcViewName];
  *v4 = 0x4354502D4553;
  v4[1] = 0xE600000000000000;
  v5 = OBJC_IVAR____TtC10seserviced16SEKeySyncManager_keychainWrapper;
  *(_QWORD *)&v0[v5] = objc_msgSend((id)objc_opt_self(SESKeychainWrapper), "sharedInstance");
  v6 = OBJC_IVAR____TtC10seserviced16SEKeySyncManager_caStatisticsActivity;
  v7 = objc_allocWithZone((Class)NSBackgroundActivityScheduler);
  v8 = String._bridgeToObjectiveC()();
  v9 = objc_msgSend(v7, "initWithIdentifier:", v8);

  *(_QWORD *)&v0[v6] = v9;
  *(_QWORD *)&v0[OBJC_IVAR____TtC10seserviced16SEKeySyncManager_recoveryPending] = &_swiftEmptySetSingleton;
  *(_QWORD *)&v0[OBJC_IVAR____TtC10seserviced16SEKeySyncManager_notificationTokens] = &_swiftEmptySetSingleton;
  v0[OBJC_IVAR____TtC10seserviced16SEKeySyncManager_preconditionsMet] = 2;
  v0[OBJC_IVAR____TtC10seserviced16SEKeySyncManager_allViewsSynchronized] = 2;
  v0[OBJC_IVAR____TtC10seserviced16SEKeySyncManager_stopped] = 0;
  v0[OBJC_IVAR____TtC10seserviced16SEKeySyncManager_notifiedPassdOfFidoViewSynced] = 0;
  v10 = &v0[OBJC_IVAR____TtC10seserviced16SEKeySyncManager__errorCount];
  *(_QWORD *)v10 = 0xD000000000000014;
  *((_QWORD *)v10 + 1) = 0x80000001002BA5B0;
  *((_QWORD *)v10 + 2) = 0xD000000000000013;
  *((_QWORD *)v10 + 3) = 0x80000001002BCCA0;
  *((_QWORD *)v10 + 4) = 0;
  v10[40] = 0;
  v11 = &v0[OBJC_IVAR____TtC10seserviced16SEKeySyncManager__recoveryRequiredPref];
  *(_QWORD *)v11 = 0xD000000000000014;
  *((_QWORD *)v11 + 1) = 0x80000001002BA5B0;
  *((_QWORD *)v11 + 2) = 0xD000000000000019;
  *((_QWORD *)v11 + 3) = 0x80000001002BCCC0;
  *((_WORD *)v11 + 16) = 0;
  v12 = &v0[OBJC_IVAR____TtC10seserviced16SEKeySyncManager__cachedLocalIdentity];
  *v12 = 0xD000000000000014;
  v12[1] = 0x80000001002BA5B0;
  v12[2] = 0xD000000000000017;
  v12[3] = 0x80000001002BCCE0;
  v13 = &v0[OBJC_IVAR____TtC10seserviced16SEKeySyncManager__didRecoverTLK];
  *(_QWORD *)v13 = 0xD000000000000014;
  *((_QWORD *)v13 + 1) = 0x80000001002BA5B0;
  *((_QWORD *)v13 + 2) = 0xD000000000000017;
  *((_QWORD *)v13 + 3) = 0x80000001002BCD00;
  *((_WORD *)v13 + 16) = 0;
  v14 = &v0[OBJC_IVAR____TtC10seserviced16SEKeySyncManager__recoveryForce];
  *(_QWORD *)v14 = 0xD000000000000014;
  *((_QWORD *)v14 + 1) = 0x80000001002BA5B0;
  *((_QWORD *)v14 + 2) = 0xD00000000000001ALL;
  *((_QWORD *)v14 + 3) = 0x80000001002BCD20;
  *((_WORD *)v14 + 16) = 256;
  v15 = &v0[OBJC_IVAR____TtC10seserviced16SEKeySyncManager__disableKeySync];
  *(_QWORD *)v15 = 0xD000000000000014;
  *((_QWORD *)v15 + 1) = 0x80000001002BA5B0;
  *((_QWORD *)v15 + 2) = 0xD000000000000015;
  *((_QWORD *)v15 + 3) = 0x80000001002BCD40;
  *((_WORD *)v15 + 16) = 256;
  v0[OBJC_IVAR____TtC10seserviced16SEKeySyncManager_syncProgressState] = 0;
  v0[OBJC_IVAR____TtC10seserviced16SEKeySyncManager_requiresResync] = 0;
  v16 = OBJC_IVAR____TtC10seserviced16SEKeySyncManager_state;
  v17 = sub_100063D3C(&qword_100346CA8);
  v18 = swift_allocObject(v17, 52, 7);
  *(_DWORD *)(v18 + 48) = 0;
  *(_OWORD *)(v18 + 16) = xmmword_1002888D0;
  *(_QWORD *)(v18 + 32) = 0;
  *(_QWORD *)(v18 + 40) = 0;
  *(_QWORD *)&v0[v16] = v18;
  *(_QWORD *)&v0[OBJC_IVAR____TtC10seserviced16SEKeySyncManager_secureElementInfo] = 0;
  swift_release(v0);
  v20.receiver = v0;
  v20.super_class = ObjectType;
  return objc_msgSendSuper2(&v20, "init");
}

uint64_t sub_1000FB8D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD v21[4];

  v1 = sub_100063D3C(&qword_100346898);
  __chkstk_darwin(v1, v2);
  v4 = (char *)v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TaskPriority(0);
  v6 = *(_QWORD *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  v7 = (_QWORD *)swift_allocObject(&unk_1003098B0, 40, 7);
  v7[2] = 0;
  v8 = v7 + 2;
  v7[3] = 0;
  v7[4] = v0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_100096700((uint64_t)v4, &qword_100346898);
    v9 = 0;
    v10 = 0;
    v11 = 7168;
  }
  else
  {
    v12 = TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    v11 = v12 | 0x1C00;
    v13 = *v8;
    if (*v8)
    {
      v14 = v7[3];
      ObjectType = swift_getObjectType(*v8);
      swift_unknownObjectRetain(v13);
      v9 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v14);
      v10 = v16;
      swift_unknownObjectRelease(v13);
    }
    else
    {
      v9 = 0;
      v10 = 0;
    }
  }
  v17 = swift_allocObject(&unk_1003098D8, 32, 7);
  *(_QWORD *)(v17 + 16) = &unk_100346D28;
  *(_QWORD *)(v17 + 24) = v7;
  if (v10 | v9)
  {
    v21[0] = 0;
    v21[1] = 0;
    v18 = v21;
    v21[2] = v9;
    v21[3] = v10;
  }
  else
  {
    v18 = 0;
  }
  v19 = swift_task_create(v11, v18, &type metadata for () + 1, &unk_100346D30, v17);
  return swift_release(v19);
}

uint64_t sub_1000FBA98()
{
  return swift_task_switch(sub_1000FBAAC, 0, 0);
}

uint64_t sub_1000FBAAC()
{
  uint64_t v0;
  uint64_t v1;

  if (qword_1003445D8 != -1)
    swift_once(&qword_1003445D8, sub_1000FB394);
  v1 = qword_100354C08;
  *(_QWORD *)(v0 + 16) = qword_100354C08;
  return swift_task_switch(sub_1000FBB10, v1, 0);
}

uint64_t sub_1000FBB10()
{
  uint64_t v0;

  sub_1000FBB40();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000FBB40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __int128 v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  void *v20;
  NSString v21;
  uint64_t v22;
  uint64_t inited;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  Swift::String v31;
  uint64_t v32;
  NSString v33;
  Swift::String v34;
  uint64_t v35;
  NSString v36;
  Swift::String v37;
  uint64_t v38;
  NSString v39;
  NSString v40;
  NSString v41;
  unsigned __int8 v42;
  NSString v43;
  unsigned __int8 v44;
  NSString v45;
  unsigned __int8 v46;
  NSString v47;
  unsigned __int8 v48;
  void *v49;
  NSString v50;
  unsigned __int8 v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  void *v55;
  void *v56;
  uint64_t v57;
  void *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  void **aBlock;
  uint64_t v74;
  void *v75;
  void *v76;
  void *v77;
  uint64_t v78;
  char v79[72];
  __int128 v80;
  __int128 v81;
  __int16 v82;
  __int128 v83;
  __int128 v84;

  v1 = v0;
  v2 = sub_100063D3C(&qword_100346898);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v66 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS.QoSClass(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_OWORD *)(v0 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__disableKeySync + 16);
  v80 = *(_OWORD *)(v0 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__disableKeySync);
  v81 = v11;
  v82 = *(_WORD *)(v0 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__disableKeySync + 32);
  v83 = v80;
  v84 = v11;
  sub_10006F87C((uint64_t)&v83);
  v12 = sub_10006F87C((uint64_t)&v84);
  sub_10015348C(v12);
  v14 = v13;
  sub_10006F8A4((uint64_t)&v83);
  v15 = sub_10006F8A4((uint64_t)&v84);
  if ((v14 & 1) != 0)
  {
    v16 = Logger.logObject.getter(v15);
    v18 = static os_log_type_t.error.getter(v16, v17);
    if (os_log_type_enabled(v16, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v18, "KEY SYNC DISABLED BY INTERNAL SETTING", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }

    return;
  }
  v69 = v10;
  v70 = v7;
  v71 = v6;
  v67 = v5;
  v20 = (void *)objc_opt_self(SESBootUUID);
  v21 = String._bridgeToObjectiveC()();
  v72 = objc_msgSend(v20, "isFirstLaunchAfterBootForKey:", v21);

  v22 = sub_100063D3C(&qword_100346C88);
  inited = swift_initStackObject(v22, v79);
  *(_OWORD *)(inited + 16) = xmmword_1002888E0;
  v24 = sub_1000E848C(0xD000000000000018, 0x80000001002BCBD0);
  if (v25 >> 60 == 15)
  {
    __break(1u);
    return;
  }
  *(_QWORD *)(inited + 32) = 0x4354502D4553;
  *(_QWORD *)(inited + 40) = 0xE600000000000000;
  *(_QWORD *)(inited + 48) = v24;
  *(_QWORD *)(inited + 56) = v25;
  *(_BYTE *)(inited + 64) = 1;
  v26 = (void *)objc_opt_self(SESDarwinNotificationMonitor);
  v27 = *(_QWORD *)(inited + 32);
  v28 = *(void **)(inited + 40);
  v29 = *(_QWORD *)(inited + 48);
  v30 = *(_QWORD *)(inited + 56);
  swift_bridgeObjectRetain(v28);
  v68 = v29;
  sub_100063C8C(v29, v30);
  aBlock = (void **)0xD00000000000001FLL;
  v74 = (uint64_t)"readerIdentifier";
  swift_bridgeObjectRetain_n("readerIdentifier", 2);
  v31._countAndFlagsBits = v27;
  v31._object = v28;
  String.append(_:)(v31);
  swift_bridgeObjectRelease("readerIdentifier");
  v32 = v74;
  v33 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v32);
  LOBYTE(v32) = objc_msgSend(v26, "registerDelegate:forEvent:", v1, v33);

  if ((v32 & 1) != 0)
  {
    aBlock = (void **)0xD00000000000001ELL;
    v74 = (uint64_t)"com.apple.security.view-change.";
    swift_bridgeObjectRetain_n("com.apple.security.view-change.", 2);
    v34._countAndFlagsBits = v27;
    v34._object = v28;
    String.append(_:)(v34);
    swift_bridgeObjectRelease("com.apple.security.view-change.");
    v35 = v74;
    v36 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v35);
    objc_msgSend(v26, "registerDelegate:forEvent:", v1, v36);

LABEL_9:
    v72 = 1;
    goto LABEL_10;
  }
  aBlock = (void **)0xD00000000000001ELL;
  v74 = (uint64_t)"com.apple.security.view-change.";
  swift_bridgeObjectRetain_n("com.apple.security.view-change.", 2);
  v37._countAndFlagsBits = v27;
  v37._object = v28;
  String.append(_:)(v37);
  swift_bridgeObjectRelease("com.apple.security.view-change.");
  v38 = v74;
  v39 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v38);
  LOBYTE(v38) = objc_msgSend(v26, "registerDelegate:forEvent:", v1, v39);

  if ((v38 & 1) != 0)
    goto LABEL_9;
LABEL_10:
  swift_bridgeObjectRelease(v28);
  sub_100063CD0(v68, v30);
  swift_bridgeObjectRelease(inited);
  swift_arrayDestroy(&qword_100305608, 2, &type metadata for String);
  v40 = String._bridgeToObjectiveC()();
  LODWORD(v68) = objc_msgSend(v26, "registerDelegate:forEvent:", v1, v40);

  v41 = String._bridgeToObjectiveC()();
  v42 = objc_msgSend(v26, "registerDelegate:forEvent:", v1, v41);

  v43 = String._bridgeToObjectiveC()();
  v44 = objc_msgSend(v26, "registerDelegate:forEvent:", v1, v43);

  v45 = String._bridgeToObjectiveC()();
  v46 = objc_msgSend(v26, "registerDelegate:forEvent:", v1, v45);

  v47 = String._bridgeToObjectiveC()();
  v48 = objc_msgSend(v26, "registerDelegate:forEvent:", v1, v47);

  v49 = (void *)objc_opt_self(SESAlarm);
  v50 = String._bridgeToObjectiveC()();
  v51 = objc_msgSend(v49, "registerAlarm:handler:", v50, v1);

  sub_10006C25C(0, (unint64_t *)&qword_1003461A0, OS_dispatch_queue_ptr);
  v52 = v70;
  v53 = v69;
  v54 = v71;
  (*(void (**)(char *, _QWORD, uint64_t))(v70 + 104))(v69, enum case for DispatchQoS.QoSClass.default(_:), v71);
  v55 = (void *)static OS_dispatch_queue.global(qos:)(v53);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v53, v54);
  v77 = sub_10012510C;
  v78 = v1;
  aBlock = _NSConcreteStackBlock;
  v74 = 1107296256;
  v75 = sub_10017BF6C;
  v76 = &unk_1003098F0;
  v56 = _Block_copy(&aBlock);
  v57 = v78;
  swift_retain(v1);
  swift_release(v57);
  os_state_add_handler(v55, v56);
  _Block_release(v56);

  v58 = *(void **)(v1 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_caStatisticsActivity);
  objc_msgSend(v58, "setPreregistered:", 1);
  v77 = sub_10012512C;
  v78 = v1;
  aBlock = _NSConcreteStackBlock;
  v74 = 1107296256;
  v75 = sub_10016D660;
  v76 = &unk_100309918;
  v59 = _Block_copy(&aBlock);
  v60 = v78;
  swift_retain(v1);
  swift_release(v60);
  objc_msgSend(v58, "scheduleWithBlock:", v59);
  _Block_release(v59);
  if ((v51 & 1) != 0 || (v48 & 1) != 0 || (v46 & 1) != 0 || (v44 & 1) != 0 || (v42 & 1) != 0 || (v68 & 1) != 0 || v72)
  {
    v61 = type metadata accessor for TaskPriority(0);
    v62 = (uint64_t)v67;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v67, 1, 1, v61);
    v63 = sub_1000639EC(&qword_100346D40, type metadata accessor for SEKeySyncManager, (uint64_t)&unk_100289EF4);
    v64 = (_QWORD *)swift_allocObject(&unk_100309950, 40, 7);
    v64[2] = v1;
    v64[3] = v63;
    v64[4] = v1;
    swift_retain_n(v1, 2);
    v65 = sub_1000FC3B4(v62, (uint64_t)&unk_100346D48, (uint64_t)v64);
    swift_release(v65);
  }
}

uint64_t sub_1000FC3B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_100096700(a1, &qword_100346898);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v15 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v16 = swift_allocObject(&unk_1003095E8, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v17 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  else
  {
    v17 = 0;
  }
  return swift_task_create(v8, v17, &type metadata for () + 1, &unk_100346B40, v16);
}

uint64_t sub_1000FC524(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  dispatch_semaphore_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = sub_100063D3C(&qword_100346898);
  __chkstk_darwin(v3, v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain(a2);
  v7 = dispatch_semaphore_create(0);
  v8 = sub_100063D3C(&qword_100346D60);
  v9 = swift_allocObject(v8, 24, 7);
  *(_QWORD *)(v9 + 16) = 0;
  v10 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v6, 1, 1, v10);
  v11 = (_QWORD *)swift_allocObject(&unk_1003099A0, 64, 7);
  v11[2] = 0;
  v11[3] = 0;
  v11[4] = v9;
  v11[5] = sub_100125298;
  v11[6] = a2;
  v11[7] = v7;
  swift_retain(v9);
  swift_retain(a2);
  v12 = v7;
  v13 = sub_1000FC3B4((uint64_t)v6, (uint64_t)&unk_100346D70, (uint64_t)v11);
  swift_release(v13);
  OS_dispatch_semaphore.wait()();
  swift_release(a2);

  v14 = *(_QWORD *)(v9 + 16);
  swift_release(v9);
  return v14;
}

uint64_t sub_1000FC664()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  void *v18;
  NSString v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  __int128 *v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  os_unfair_lock_s *v39;
  uint64_t *v40;
  os_unfair_lock_s *v41;
  uint64_t v42;
  char v43;
  void *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  Swift::String v54;
  void *object;
  __int128 v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  void **v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  id v66;
  Swift::String v67;
  void *v68;
  __int128 v69;
  id v70;
  unint64_t v71;
  void *v72;
  id v73;
  uint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  char v78;
  unint64_t v79;
  uint64_t v80;
  _BOOL8 v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  char v85;
  _QWORD *v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  BOOL v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  Class isa;
  _DWORD *v97;
  uint64_t result;
  unint64_t v99;
  uint64_t v100;
  __int128 v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  _QWORD v108[2];
  __int128 v109;
  __int128 v110;
  void *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  char v116;
  __int128 v117;
  __int128 v118;
  void *v119;
  uint64_t v120;
  __int128 v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  char v128;
  __int128 v129;
  _OWORD v130[2];
  __int128 v131;
  _OWORD v132[2];

  v1 = v0;
  v2 = sub_100063D3C(&qword_100346BB0);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v99 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SESPeerIdentityData(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v99 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = v1 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__cachedLocalIdentity;
  swift_beginAccess(v1 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__cachedLocalIdentity, &v120, 0, 0);
  v12 = *(_QWORD *)(v11 + 8);
  v13 = *(_QWORD *)(v11 + 24);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  sub_100120444(v12, (uint64_t)v5);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_100096700((uint64_t)v5, &qword_100346BB0);
    v106 = &_swiftEmptyDictionarySingleton;
  }
  else
  {
    sub_100124884((uint64_t)v5, (uint64_t)v10, type metadata accessor for SESPeerIdentityData);
    *(_QWORD *)&v121 = sub_1001BD7A4();
    v14 = sub_10006C25C(0, &qword_100346D78, NSDictionary_ptr);
    v15 = sub_100125358();
    AnyHashable.init<A>(_:)(&v121, v14, v15);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    *(_QWORD *)&v121 = &_swiftEmptyDictionarySingleton;
    sub_10018EA00((uint64_t)&v109, 0xD000000000000013, 0x80000001002BCE80, isUniquelyReferenced_nonNull_native);
    v17 = v121;
    swift_bridgeObjectRelease(0x8000000000000000);
    *(_QWORD *)&v109 = 0;
    *((_QWORD *)&v109 + 1) = 0xE000000000000000;
    v18 = (void *)objc_opt_self(SESAlarm);
    v19 = String._bridgeToObjectiveC()();
    v20 = objc_msgSend(v18, "isAlarmSet:", v19);

    if (v20)
      v21 = 1702195828;
    else
      v21 = 0x65736C6166;
    v22 = 0xE500000000000000;
    if (v20)
      v23 = 0xE400000000000000;
    else
      v23 = 0xE500000000000000;
    v24 = v23;
    String.append(_:)(*(Swift::String *)&v21);
    swift_bridgeObjectRelease(v23);
    v121 = v109;
    AnyHashable.init<A>(_:)(&v121, &type metadata for String, &protocol witness table for String);
    v25 = swift_isUniquelyReferenced_nonNull_native(v17);
    *(_QWORD *)&v121 = v17;
    sub_10018EA00((uint64_t)&v109, 0x466E497972746572, 0xED0000746867696CLL, v25);
    v26 = v121;
    swift_bridgeObjectRelease(0x8000000000000000);
    v27 = (__int128 *)(v1 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__errorCount);
    swift_beginAccess(v1 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__errorCount, &v107, 0, 0);
    v28 = *(__int128 *)((char *)v27 + 25);
    v29 = v27[1];
    v129 = *v27;
    v130[0] = v29;
    *(_OWORD *)((char *)v130 + 9) = v28;
    v131 = v129;
    v132[0] = v130[0];
    sub_10006F87C((uint64_t)&v131);
    v30 = sub_10006F87C((uint64_t)v132);
    sub_100153718(v30);
    v32 = v31;
    sub_10006F8A4((uint64_t)&v131);
    sub_10006F8A4((uint64_t)v132);
    *(_QWORD *)&v109 = v32;
    *(_QWORD *)&v121 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    *((_QWORD *)&v121 + 1) = v33;
    AnyHashable.init<A>(_:)(&v121, &type metadata for String, &protocol witness table for String);
    v34 = swift_isUniquelyReferenced_nonNull_native(v26);
    *(_QWORD *)&v121 = v26;
    sub_10018EA00((uint64_t)&v109, 0x756F43726F727265, 0xEA0000000000746ELL, v34);
    v35 = v121;
    swift_bridgeObjectRelease(0x8000000000000000);
    *(_QWORD *)&v109 = 0;
    *((_QWORD *)&v109 + 1) = 0xE000000000000000;
    if (*(_BYTE *)(v1 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_stopped))
      v36 = 1702195828;
    else
      v36 = 0x65736C6166;
    if (*(_BYTE *)(v1 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_stopped))
      v22 = 0xE400000000000000;
    v37 = v22;
    String.append(_:)(*(Swift::String *)&v36);
    swift_bridgeObjectRelease(v22);
    v121 = v109;
    AnyHashable.init<A>(_:)(&v121, &type metadata for String, &protocol witness table for String);
    v38 = swift_isUniquelyReferenced_nonNull_native(v35);
    *(_QWORD *)&v121 = v35;
    sub_10018EA00((uint64_t)&v109, 0x646570706F7473, 0xE700000000000000, v38);
    v106 = (void *)v121;
    swift_bridgeObjectRelease(0x8000000000000000);
    sub_1001247E8((uint64_t)v10, type metadata accessor for SESPeerIdentityData);
  }
  v39 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_state);
  v40 = (uint64_t *)&v39[4];
  v41 = v39 + 12;
  os_unfair_lock_lock(v39 + 12);
  sub_1000FDD64(v40, (uint64_t *)&v109);
  os_unfair_lock_unlock(v41);
  v99 = *((_QWORD *)&v109 + 1);
  v100 = v109;
  v42 = *((_QWORD *)&v110 + 1);
  v101 = v110;
  if ((_QWORD)v110)
  {
    *(_QWORD *)&v118 = 0;
    v117 = (unint64_t)v110;
    swift_bridgeObjectRetain(v110);
    sub_1000FDDB4((uint64_t)&v109);
    v43 = v116;
    if (v116 == 2)
    {
      v44 = v106;
    }
    else
    {
      v46 = *((_QWORD *)&v109 + 1);
      v45 = v109;
      v48 = *((_QWORD *)&v110 + 1);
      v47 = v110;
      v49 = v111;
      v50 = v112;
      v52 = v113;
      v51 = v114;
      v53 = v115;
      v44 = v106;
      do
      {
        v102 = v47;
        v103 = v46;
        v104 = v45;
        v105 = v48;
        v106 = v49;
        *(_QWORD *)&v121 = v46;
        *((_QWORD *)&v121 + 1) = v47;
        v122 = v48;
        v123 = v49;
        v124 = v50;
        v125 = v52;
        v126 = v51;
        v127 = v53;
        v128 = v43 & 1;
        *(_QWORD *)&v109 = 0x2D45536E4F6B6C74;
        *((_QWORD *)&v109 + 1) = 0xE800000000000000;
        v108[0] = v45;
        v54._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
        object = v54._object;
        String.append(_:)(v54);
        swift_bridgeObjectRelease(object);
        v56 = v109;
        v108[0] = sub_1001AAAF4();
        v108[1] = v57;
        AnyHashable.init<A>(_:)(v108, &type metadata for String, &protocol witness table for String);
        v58 = swift_isUniquelyReferenced_nonNull_native(v44);
        v108[0] = v44;
        sub_10018EA00((uint64_t)&v109, v56, *((uint64_t *)&v56 + 1), v58);
        v44 = (void *)v108[0];
        swift_bridgeObjectRelease(*((_QWORD *)&v56 + 1));
        swift_bridgeObjectRelease(0x8000000000000000);
        sub_1001253EC(v104, v103, v102, v105, (unint64_t)v106, v50, v52, v51, v53, v43);
        sub_1000FDDB4((uint64_t)&v109);
        v46 = *((_QWORD *)&v109 + 1);
        v45 = v109;
        v48 = *((_QWORD *)&v110 + 1);
        v47 = v110;
        v49 = v111;
        v50 = v112;
        v52 = v113;
        v51 = v114;
        v53 = v115;
        v43 = v116;
      }
      while (v116 != 2);
    }
    v106 = v44;
    swift_bridgeObjectRelease(v117);
    v42 = *((_QWORD *)&v101 + 1);
  }
  v59 = (uint64_t)v106;
  if (v42 && (v102 = *(_QWORD *)(v42 + 16)) != 0)
  {
    swift_bridgeObjectRetain(v42);
    v60 = 0;
    v61 = (void **)(v42 + 72);
    while (1)
    {
      v62 = (uint64_t)*(v61 - 4);
      v63 = (uint64_t)*(v61 - 3);
      v64 = (unint64_t)*(v61 - 2);
      v65 = *v61;
      *(_QWORD *)&v109 = 0x2D77656976;
      *((_QWORD *)&v109 + 1) = 0xE500000000000000;
      v105 = v60;
      *(_QWORD *)&v117 = v60;
      swift_bridgeObjectRetain(v62);
      sub_100063C8C(v63, v64);
      v66 = v65;
      v67._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v68 = v67._object;
      String.append(_:)(v67);
      swift_bridgeObjectRelease(v68);
      v69 = v109;
      swift_bridgeObjectRetain(v62);
      sub_100063C8C(v63, v64);
      v70 = v66;
      swift_bridgeObjectRelease(v62);
      v103 = v64;
      v104 = v63;
      v71 = v64;
      v72 = v70;
      sub_100063CD0(v63, v71);
      v73 = objc_msgSend(v70, "dumpState", v99, v100, (_QWORD)v101);

      *(_QWORD *)&v117 = v73;
      v74 = sub_10006C25C(0, &qword_100346D78, NSDictionary_ptr);
      v75 = sub_100125358();
      AnyHashable.init<A>(_:)(&v117, v74, v75);
      v117 = v109;
      v118 = v110;
      v119 = v111;
      v76 = v106;
      v77 = swift_isUniquelyReferenced_nonNull_native(v106);
      v108[0] = v76;
      v79 = sub_100187ED0(v69, *((uint64_t *)&v69 + 1));
      v80 = v76[2];
      v81 = (v78 & 1) == 0;
      v82 = v80 + v81;
      if (__OFADD__(v80, v81))
        break;
      v83 = v78;
      if (v76[3] >= v82)
      {
        if ((v77 & 1) == 0)
          sub_1001912F8();
      }
      else
      {
        sub_10018B720(v82, v77);
        v84 = sub_100187ED0(v69, *((uint64_t *)&v69 + 1));
        if ((v83 & 1) != (v85 & 1))
          goto LABEL_39;
        v79 = v84;
      }
      v86 = (_QWORD *)v108[0];
      v106 = (void *)v108[0];
      if ((v83 & 1) != 0)
      {
        sub_1001253B0((uint64_t)&v117, *(_QWORD *)(v108[0] + 56) + 40 * v79);
      }
      else
      {
        *(_QWORD *)(v108[0] + 8 * (v79 >> 6) + 64) |= 1 << v79;
        *(_OWORD *)(v86[6] + 16 * v79) = v69;
        v87 = v86[7] + 40 * v79;
        v88 = v117;
        v89 = v118;
        *(_QWORD *)(v87 + 32) = v119;
        *(_OWORD *)v87 = v88;
        *(_OWORD *)(v87 + 16) = v89;
        v90 = v86[2];
        v91 = __OFADD__(v90, 1);
        v92 = v90 + 1;
        if (v91)
          goto LABEL_38;
        v86[2] = v92;
        swift_bridgeObjectRetain(*((_QWORD *)&v69 + 1));
      }
      v60 = v105 + 1;
      swift_bridgeObjectRelease(v62);
      swift_bridgeObjectRelease(*((_QWORD *)&v69 + 1));
      swift_bridgeObjectRelease(0x8000000000000000);
      sub_100063CD0(v104, v103);

      v61 += 6;
      if (v102 == v60)
      {
        v42 = *((_QWORD *)&v101 + 1);
        swift_bridgeObjectRelease(*((_QWORD *)&v101 + 1));
        v59 = (uint64_t)v106;
        goto LABEL_36;
      }
    }
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
  }
  else
  {
LABEL_36:
    v93 = sub_10017D7F4(v59);
    v94 = v59;
    v95 = v93;
    swift_bridgeObjectRelease(v94);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v95);
    v97 = sub_100015734((uint64_t)"keysyncmanager.state", (uint64_t)isa);
    sub_10006B9B4(v100, v99);

    swift_bridgeObjectRelease(v42);
    swift_bridgeObjectRelease(v101);
    return (uint64_t)v97;
  }
  return result;
}

uint64_t sub_1000FCFF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;

  v6 = sub_100063D3C(&qword_100346898);
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = (_QWORD *)swift_allocObject(&unk_100309978, 56, 7);
  v11[2] = 0;
  v11[3] = 0;
  v11[4] = a3;
  v11[5] = a1;
  v11[6] = a2;
  swift_retain(a3);
  swift_retain(a2);
  v12 = sub_1000FC3B4((uint64_t)v9, (uint64_t)&unk_100346D58, (uint64_t)v11);
  return swift_release(v12);
}

uint64_t sub_1000FD0D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  _QWORD *v7;

  v6[2] = a5;
  v6[3] = a6;
  v7 = (_QWORD *)swift_task_alloc(dword_10034962C);
  v6[4] = v7;
  *v7 = v6;
  v7[1] = sub_1000FD11C;
  return sub_1001BB5A4();
}

uint64_t sub_1000FD11C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 32));
  return swift_task_switch(sub_1000FD170, 0, 0);
}

uint64_t sub_1000FD170()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(v0 + 16))(1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000FD1A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_100346B4C);
  *(_QWORD *)(v4 + 16) = v6;
  *v6 = v4;
  v6[1] = sub_1000FAD2C;
  v6[11] = 0xE700000000000000;
  v6[12] = a4;
  v6[10] = 0x70757472617473;
  return swift_task_switch(sub_1000FD238, a4, 0);
}

uint64_t sub_1000FD21C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[11] = a2;
  v3[12] = v2;
  v3[10] = a1;
  return swift_task_switch(sub_1000FD238, v2, 0);
}

uint64_t sub_1000FD238(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  NSObject *v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v26;
  NSString v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  os_log_type_t v33;
  uint8_t *v34;
  _QWORD *v35;
  uint64_t v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;

  v2 = *(_QWORD *)(v1 + 96);
  v3 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_stopped);
  *(_QWORD *)(v1 + 104) = OBJC_IVAR____TtC10seserviced16SEKeySyncManager_logger;
  if (v3 == 1)
  {
    v4 = Logger.logObject.getter(a1);
    v6 = static os_log_type_t.error.getter(v4, v5);
    if (os_log_type_enabled(v4, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v6, "KeySync machinery is stopped", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }

    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  swift_bridgeObjectRetain_n(*(_QWORD *)(v1 + 88), 2);
  v8 = swift_retain_n(v2, 2);
  v9 = Logger.logObject.getter(v8);
  v11 = static os_log_type_t.error.getter(v9, v10);
  v12 = os_log_type_enabled(v9, v11);
  v14 = *(_QWORD *)(v1 + 88);
  v13 = *(_QWORD *)(v1 + 96);
  v15 = &qword_100346000;
  if (v12)
  {
    v37 = v11;
    v16 = *(_QWORD *)(v1 + 80);
    v17 = swift_slowAlloc(22, -1);
    v38 = swift_slowAlloc(64, -1);
    v39 = v38;
    *(_DWORD *)v17 = 136446466;
    swift_bridgeObjectRetain(v14);
    *(_QWORD *)(v1 + 64) = sub_1001C56EC(v16, v14, &v39);
    v15 = &qword_100346000;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 64, v1 + 72, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease_n(v14, 3);
    *(_WORD *)(v17 + 12) = 2082;
    if (*(_BYTE *)(v13 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_syncProgressState))
    {
      if (*(_BYTE *)(v13 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_syncProgressState) == 1)
      {
        v18 = 0xEC0000004553726FLL;
        v19 = 0x46676E6974696177;
      }
      else
      {
        v18 = 0xEA00000000007373;
        v19 = 0x6572676F72506E69;
      }
    }
    else
    {
      v18 = 0xE400000000000000;
      v19 = 1701602409;
    }
    v20 = *(_QWORD *)(v1 + 96);
    *(_QWORD *)(v1 + 72) = sub_1001C56EC(v19, v18, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 72, v1 + 80, v17 + 14, v17 + 22);
    swift_release_n(v20, 2);
    swift_bridgeObjectRelease(v18);
    _os_log_impl((void *)&_mh_execute_header, v9, v37, "Request to synchronize for reason %{public}s in state %{public}s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v38, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {
    swift_release_n(*(_QWORD *)(v1 + 96), 2);
    swift_bridgeObjectRelease_n(v14, 2);

  }
  v21 = *(_QWORD *)(v1 + 80);
  v22 = *(_QWORD *)(v1 + 88);
  if (v21 == 0xD00000000000002DLL && v22 == 0x80000001002BCA40
    || (_stringCompareWithSmolCheck(_:_:expecting:)(v21, v22, 0xD00000000000002DLL, 0x80000001002BCA40, 0) & 1) != 0)
  {
    sub_1000FB490(1, &OBJC_IVAR____TtC10seserviced16SEKeySyncManager__recoveryRequiredPref);
  }
  v23 = *(_QWORD *)(v1 + 96);
  v24 = v15[329];
  if (*(_BYTE *)(v23 + v24))
  {
    if (*(_BYTE *)(v23 + v24) != 1)
      *(_BYTE *)(v23 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_requiresResync) = 1;
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  *(_BYTE *)(v23 + v24) = 1;
  v26 = (void *)objc_opt_self(SESAlarm);
  v27 = String._bridgeToObjectiveC()();
  objc_msgSend(v26, "clearAlarm:", v27);

  v29 = Logger.logObject.getter(v28);
  v33 = static os_log_type_t.info.getter(v29, v30, v31, v32);
  if (os_log_type_enabled(v29, v33))
  {
    v34 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v34 = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, v33, "Sync Progress -- checking preconditions", v34, 2u);
    swift_slowDealloc(v34, -1, -1);
  }

  v35 = (_QWORD *)swift_task_alloc(dword_100346B54);
  *(_QWORD *)(v1 + 112) = v35;
  *v35 = v1;
  v35[1] = sub_1000FD6C4;
  v36 = *(_QWORD *)(v1 + 96);
  v35[22] = v36;
  return swift_task_switch(sub_10010188C, v36, 0);
}

uint64_t sub_1000FD6C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 112);
  v4[15] = a1;
  v4[16] = a2;
  v4[17] = v2;
  swift_task_dealloc(v5);
  if (v2)
    v6 = sub_1000FD954;
  else
    v6 = sub_1000FD734;
  return swift_task_switch(v6, v4[12], 0);
}

void sub_1000FD734()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t *v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 96);
  if (v1 >> 60 == 15)
  {
    v3 = *(_QWORD *)(v0 + 136);
    *(_BYTE *)(v2 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_preconditionsMet) = 0;
    v4 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_state);
    v5 = (uint64_t *)&v4[4];
    v6 = v4 + 12;
    os_unfair_lock_lock(v4 + 12);
    sub_1001017D4(v5);
    os_unfair_lock_unlock(v6);
    if (!v3)
    {
      sub_1001015D8(*(_QWORD *)(v0 + 96));
      (*(void (**)(void))(v0 + 8))();
    }
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 120);
    v8 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_state);
    v9 = swift_task_alloc(32);
    *(_QWORD *)(v9 + 16) = v7;
    *(_QWORD *)(v9 + 24) = v1;
    os_unfair_lock_lock((os_unfair_lock_t)(v8 + 48));
    v10 = *(_QWORD *)(v9 + 16);
    v11 = *(_QWORD *)(v9 + 24);
    v12 = *(_QWORD *)(v8 + 16);
    v13 = *(_QWORD *)(v8 + 24);
    sub_100063C8C(v10, v11);
    sub_10006B9B4(v12, v13);
    *(_QWORD *)(v8 + 16) = v10;
    *(_QWORD *)(v8 + 24) = v11;
    os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 48));
    swift_task_dealloc(v9);
    *(_BYTE *)(v2 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_preconditionsMet) = 1;
    v14 = (_QWORD *)swift_task_alloc(dword_100346B5C);
    *(_QWORD *)(v0 + 144) = v14;
    *v14 = v0;
    v14[1] = sub_1000FD8B8;
    sub_1001020BC(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128));
  }
}

uint64_t sub_1000FD8B8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 144);
  *(_QWORD *)(*v1 + 152) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1000FDB58;
  else
    v4 = sub_1000FD91C;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 96), 0);
}

uint64_t sub_1000FD91C()
{
  uint64_t v0;

  sub_10006B9B4(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128));
  sub_1001015D8(*(_QWORD *)(v0 + 96));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000FD954()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 136);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v5 = static os_log_type_t.error.getter(v3, v4);
  if (os_log_type_enabled(v3, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v14 = v7;
    *(_DWORD *)v6 = 136315138;
    swift_getErrorValue(v1, v0 + 48, v0 + 16);
    v8 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
    v10 = v9;
    *(_QWORD *)(v0 + 56) = sub_1001C56EC(v8, v9, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v10);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v5, "Sync Progress -- ended with error %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }
  *(_QWORD *)(v0 + 40) = v1;
  swift_errorRetain(v1);
  v11 = sub_100063D3C(&qword_100345378);
  if (swift_dynamicCast(v0 + 160, v0 + 40, v11, &type metadata for KeySyncEvent, 6))
    v12 = *(_BYTE *)(v0 + 160);
  else
    v12 = 28;
  sub_10011A034(v12, 0);
  swift_errorRelease(v1);
  sub_1001015D8(*(_QWORD *)(v0 + 96));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000FDB58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v14;

  sub_10006B9B4(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128));
  v1 = *(_QWORD *)(v0 + 152);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v5 = static os_log_type_t.error.getter(v3, v4);
  if (os_log_type_enabled(v3, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v14 = v7;
    *(_DWORD *)v6 = 136315138;
    swift_getErrorValue(v1, v0 + 48, v0 + 16);
    v8 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
    v10 = v9;
    *(_QWORD *)(v0 + 56) = sub_1001C56EC(v8, v9, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v10);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v5, "Sync Progress -- ended with error %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }
  *(_QWORD *)(v0 + 40) = v1;
  swift_errorRetain(v1);
  v11 = sub_100063D3C(&qword_100345378);
  if (swift_dynamicCast(v0 + 160, v0 + 40, v11, &type metadata for KeySyncEvent, 6))
    v12 = *(_BYTE *)(v0 + 160);
  else
    v12 = 28;
  sub_10011A034(v12, 0);
  swift_errorRelease(v1);
  sub_1001015D8(*(_QWORD *)(v0 + 96));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000FDD64@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a1;
  v2 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v4;
  a2[3] = v5;
  sub_10006BA34(v3, v2);
  swift_bridgeObjectRetain(v5);
  return swift_bridgeObjectRetain(v4);
}

void sub_1000FDDB4(uint64_t a1@<X8>)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;

  v2 = v1[1];
  v3 = *(_QWORD *)(*v1 + 16);
  if (v2 == v3)
  {
    *(_QWORD *)(a1 + 64) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_BYTE *)(a1 + 72) = 2;
    return;
  }
  if (v2 >= v3)
  {
    __break(1u);
  }
  else
  {
    v4 = *v1 + 72 * v2;
    v5 = *(_QWORD *)(v4 + 32);
    v6 = *(_QWORD *)(v4 + 40);
    v7 = *(_QWORD *)(v4 + 48);
    v8 = *(_QWORD *)(v4 + 56);
    v9 = *(_QWORD *)(v4 + 64);
    v10 = *(_QWORD *)(v4 + 72);
    v11 = *(_QWORD *)(v4 + 80);
    v12 = *(_QWORD *)(v4 + 88);
    v13 = *(_BYTE *)(v4 + 96);
    v1[1] = v2 + 1;
    v14 = v1[2];
    if (!__OFADD__(v14, 1))
    {
      v1[2] = v14 + 1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v6;
      *(_QWORD *)(a1 + 24) = v7;
      *(_QWORD *)(a1 + 32) = v8;
      *(_QWORD *)(a1 + 40) = v9;
      *(_QWORD *)(a1 + 48) = v10;
      *(_QWORD *)(a1 + 56) = v11;
      *(_QWORD *)(a1 + 64) = v12;
      *(_BYTE *)(a1 + 72) = v13;
      sub_100063C8C(v5, v6);
      sub_100063C8C(v7, v8);
      sub_100063C8C(v9, v10);
      sub_100063C8C(v11, v12);
      return;
    }
  }
  __break(1u);
}

uint64_t sub_1000FDEA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v10;

  v10 = (_QWORD *)swift_task_alloc(dword_100346B4C);
  *(_QWORD *)(v6 + 16) = v10;
  *v10 = v6;
  v10[1] = sub_1000FAD2C;
  v10[11] = a6;
  v10[12] = a4;
  v10[10] = a5;
  return swift_task_switch(sub_1000FD238, a4, 0);
}

uint64_t sub_1000FE014(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;

  v7 = sub_100063D3C(&qword_100346898);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(os_unfair_lock_s **)(v3 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_state);
  v12 = (uint64_t)&v11[4];
  v13 = v11 + 12;
  os_unfair_lock_lock(v11 + 12);
  sub_1000FE350(v12, a1, a2, (uint64_t)&v39);
  os_unfair_lock_unlock(v13);
  v14 = v47;
  if (v47 == 2)
  {
    v15 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v10, 1, 1, v15);
    v16 = (_QWORD *)swift_allocObject(&unk_1003097E0, 40, 7);
    v16[2] = 0;
    v16[3] = 0;
    v16[4] = v3;
    swift_retain(v3);
    v17 = sub_1000FC3B4((uint64_t)v10, (uint64_t)&unk_100346CC0, (uint64_t)v16);
    swift_release(v17);
    v18 = swift_bridgeObjectRetain_n(a2, 2);
    v19 = Logger.logObject.getter(v18);
    v23 = static os_log_type_t.info.getter(v19, v20, v21, v22);
    if (os_log_type_enabled(v19, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(12, -1);
      v25 = swift_slowAlloc(32, -1);
      v39 = v25;
      *(_DWORD *)v24 = 136315138;
      swift_bridgeObjectRetain(a2);
      v37 = sub_1001C56EC(a1, a2, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v24 + 4, v24 + 12);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v19, v23, "Falling back to listing SE for %s", v24, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
    v34 = sub_100131124(a3);
    sub_1000FF5C4(a1, a2, (uint64_t)v34, (uint64_t)&v37);
    swift_bridgeObjectRelease(v34);
    sub_10006C218((uint64_t)&v37, (uint64_t)&v39, &qword_100346CC8);
    if (v47 == 2)
    {
      return 0;
    }
    else
    {
      v26 = v39;
      sub_100063C8C(v39, v40);
      sub_100124CC4((uint64_t)&v37);
    }
  }
  else
  {
    v26 = v39;
    v27 = v40;
    v28 = v41;
    v29 = v42;
    v30 = v43;
    v31 = v44;
    v32 = v45;
    v33 = v46;
    sub_100063C8C(v39, v40);
    sub_100124EE0(v26, v27, v28, v29, v30, v31, v32, v33, v14, (void (*)(void))sub_100063CD0);
  }
  return v26;
}

void sub_1000FE350(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  id v24;
  id v25;
  id v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  os_log_type_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  os_log_type_t v52;
  unint64_t v53;
  uint64_t v54;
  NSObject *log;
  uint64_t v56;
  uint64_t v57;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;

  v5 = *(_QWORD *)(a1 + 24);
  v66 = v5;
  v51 = a4;
  if (!v5)
  {
    v63 = 0;
LABEL_13:
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v10 = 0;
    v64 = 0;
    v23 = 0xF000000000000000;
    goto LABEL_20;
  }
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
  {
    v63 = 0;
    v5 = 0;
    goto LABEL_13;
  }
  v65 = a1;
  swift_bridgeObjectRetain_n(v5, 2);
  v7 = (void **)(v66 + 72);
  while (1)
  {
    v60 = (uint64_t)*(v7 - 5);
    v8 = (uint64_t)*(v7 - 3);
    v9 = (unint64_t)*(v7 - 2);
    v10 = *((unsigned __int8 *)v7 - 8);
    v11 = *v7;
    v12 = (uint64_t)*(v7 - 4);
    swift_bridgeObjectRetain(v12);
    v13 = v9;
    sub_100063C8C(v8, v9);
    v64 = v11;
    v14 = objc_msgSend(v64, "viewName");
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v17 = v16;

    if (v15 == a2 && v17 == a3)
    {
      swift_bridgeObjectRelease_n(v66, 2);
      swift_bridgeObjectRelease(a3);
      goto LABEL_16;
    }
    v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v17, a2, a3, 0);
    swift_bridgeObjectRelease(v17);
    if ((v19 & 1) != 0)
      break;
    v7 += 6;
    swift_bridgeObjectRelease(v12);
    sub_100063CD0(v8, v13);

    if (!--v6)
    {
      swift_bridgeObjectRelease_n(v66, 2);
      v63 = 0;
      v5 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v10 = 0;
      v64 = 0;
      v23 = 0xF000000000000000;
      a1 = v65;
      goto LABEL_20;
    }
  }
  swift_bridgeObjectRelease_n(v66, 2);
LABEL_16:
  v22 = v13;
  v20 = v12;
  swift_bridgeObjectRetain(v12);
  sub_100063C8C(v8, v22);
  v24 = v64;
  swift_bridgeObjectRelease(v12);
  sub_100063CD0(v8, v22);
  v25 = objc_msgSend(v24, "currentTLK");

  if (v25)
  {
    v26 = objc_msgSend(v25, "tlkUUID");

    v63 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v26);
    v23 = v27;

  }
  else
  {
    v63 = 0;
    v23 = 0xF000000000000000;
  }
  v5 = v60;
  a1 = v65;
  v21 = v8;
LABEL_20:
  v28 = *(_QWORD *)(a1 + 16);
  v61 = v5;
  v62 = v23;
  v53 = v22;
  v54 = v21;
  v57 = v20;
  if (v28)
  {
    v29 = *(_QWORD *)(v28 + 16);
    if (v29)
    {
      swift_bridgeObjectRetain_n(v28, 2);
      v30 = v28 + 48;
      do
      {
        v31 = *(_QWORD *)(v30 - 16);
        v32 = *(_QWORD *)(v30 - 8);
        if (v23 >> 60 != 15)
          __asm { BR              X8 }
        sub_100063C8C(*(_QWORD *)(v30 - 16), *(_QWORD *)(v30 - 8));
        sub_10006B9B4(v31, v32);
        sub_10006B9B4(v63, v23);
        v30 += 72;
        --v29;
      }
      while (v29);
      swift_bridgeObjectRelease_n(v28, 2);
    }
  }
  v56 = v10;
  sub_10006BA34(v63, v23);
  swift_bridgeObjectRetain(a3);
  sub_100124E94(v61, v20, v54, v53, v10, v64);
  sub_100124EE0(0, 0, 0, 0, 0, 0, 0, 0, 2, (void (*)(void))sub_100063C8C);
  sub_10006BA34(v63, v23);
  swift_bridgeObjectRetain(a3);
  sub_100124E94(v61, v20, v54, v53, v10, v64);
  v33 = sub_100124EE0(0, 0, 0, 0, 0, 0, 0, 0, 2, (void (*)(void))sub_100063C8C);
  v34 = Logger.logObject.getter(v33);
  v38 = static os_log_type_t.info.getter(v34, v35, v36, v37);
  if (os_log_type_enabled(v34, v38))
  {
    log = v34;
    v39 = swift_slowAlloc(34, -1);
    v50 = swift_slowAlloc(64, -1);
    v69 = v50;
    *(_DWORD *)v39 = 136315906;
    swift_bridgeObjectRetain(a3);
    v67 = sub_1001C56EC(a2, a3, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v39 + 4, v39 + 12);
    swift_bridgeObjectRelease_n(a3, 3);
    *(_WORD *)(v39 + 12) = 1024;
    sub_100124F84(v61, v57, v54, v53, v56, v64);
    LODWORD(v67) = v57 != 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, (char *)&v67 + 4, v39 + 14, v39 + 18);
    sub_100124F84(v61, v57, v54, v53, v56, v64);
    *(_WORD *)(v39 + 18) = 2080;
    v52 = v38;
    if (v23 >> 60 == 15)
    {
      v40 = 0xE500000000000000;
      v41 = 0x3E6C696E3CLL;
      v42 = v63;
    }
    else
    {
      v42 = v63;
      sub_100063C8C(v63, v23);
      sub_1001BD150(4, v63, v23);
      v43 = v67;
      v44 = v68;
      sub_1001BD2CC(v67, v68);
      v46 = v45;
      v47 = sub_100063D3C((uint64_t *)&unk_100346060);
      v48 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
      v41 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v47, v48);
      v40 = v49;
      swift_bridgeObjectRelease(v46);
      sub_100063CD0(v43, v44);
    }
    v67 = sub_1001C56EC(v41, v40, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v39 + 20, v39 + 28);
    swift_bridgeObjectRelease(v40);
    sub_10006B9B4(v42, v62);
    sub_10006B9B4(v42, v62);
    *(_WORD *)(v39 + 28) = 1024;
    sub_100124EE0(0, 0, 0, 0, 0, 0, 0, 0, 2, (void (*)(void))sub_100063CD0);
    LODWORD(v67) = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, (char *)&v67 + 4, v39 + 30, v39 + 34);
    sub_100124EE0(0, 0, 0, 0, 0, 0, 0, 0, 2, (void (*)(void))sub_100063CD0);
    _os_log_impl((void *)&_mh_execute_header, log, v52, "For view %s cachedView %{BOOL}d currentTLK %s loadedTLK %{BOOL}d", (uint8_t *)v39, 0x22u);
    swift_arrayDestroy(v50, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v50, -1, -1);
    swift_slowDealloc(v39, -1, -1);
    sub_100124F84(v61, v57, v54, v53, v56, v64);
    sub_10006B9B4(v63, v62);

  }
  else
  {
    sub_100124EE0(0, 0, 0, 0, 0, 0, 0, 0, 2, (void (*)(void))sub_100063CD0);
    sub_100124F84(v61, v57, v54, v53, v56, v64);
    sub_100124F84(v61, v57, v54, v53, v56, v64);
    sub_10006B9B4(v63, v23);
    swift_bridgeObjectRelease_n(a3, 2);

    sub_100124F84(v61, v57, v54, v53, v56, v64);
    sub_10006B9B4(v63, v23);
    sub_10006B9B4(v63, v23);
    sub_100124EE0(0, 0, 0, 0, 0, 0, 0, 0, 2, (void (*)(void))sub_100063CD0);
  }
  *(_QWORD *)v51 = 0;
  *(_QWORD *)(v51 + 8) = 0;
  *(_QWORD *)(v51 + 16) = 0;
  *(_QWORD *)(v51 + 24) = 0;
  *(_QWORD *)(v51 + 32) = 0;
  *(_QWORD *)(v51 + 40) = 0;
  *(_QWORD *)(v51 + 48) = 0;
  *(_QWORD *)(v51 + 56) = 0;
  *(_BYTE *)(v51 + 64) = 2;
}

uint64_t sub_1000FF340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_100346CD4);
  *(_QWORD *)(v4 + 16) = v6;
  *v6 = v4;
  v6[1] = sub_1000FAD2C;
  v6[2] = a4;
  return swift_task_switch(sub_1000FF3B8, 0, 0);
}

uint64_t sub_1000FF3A0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_1000FF3B8, 0, 0);
}

uint64_t sub_1000FF3B8(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  _QWORD *v8;

  v2 = Logger.logObject.getter(a1);
  v6 = static os_log_type_t.info.getter(v2, v3, v4, v5);
  if (os_log_type_enabled(v2, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v6, "Asking CK to synchronize everything", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  v8 = (_QWORD *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(_QWORD *)(v1 + 24) = v8;
  *v8 = v1;
  v8[1] = sub_1000FF4B0;
  return withTaskGroup<A, B>(of:returning:isolation:body:)();
}

uint64_t sub_1000FF4B0()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 24));
  return swift_task_switch(sub_1000FF504, 0, 0);
}

uint64_t sub_1000FF504()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)swift_task_alloc(dword_100346B4C);
  *(_QWORD *)(v0 + 32) = v1;
  *v1 = v0;
  v1[1] = sub_1000FF57C;
  v2 = *(_QWORD *)(v0 + 16);
  v1[11] = 0x80000001002BCD60;
  v1[12] = v2;
  v1[10] = 0xD000000000000017;
  return swift_task_switch(sub_1000FD238, v2, 0);
}

uint64_t sub_1000FF57C()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 32));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1000FF5C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  _QWORD v13[4];
  char v14;

  v8 = sub_1000E848C(0xD000000000000018, 0x80000001002BCBD0);
  if (v9 >> 60 == 15)
    __break(1u);
  v10 = v9;
  v13[0] = 0x4354502D4553;
  v13[1] = 0xE600000000000000;
  v12 = v8;
  v13[2] = v8;
  v13[3] = v9;
  v14 = 1;
  if (a1 == 0x4354502D4553 && a2 == 0xE600000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x4354502D4553, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRetain(0xE600000000000000);
    sub_100063C8C(v12, v10);
    swift_arrayDestroy(v13, 1, &type metadata for SEKeySyncManager.ViewConfiguration);
    if (*(_QWORD *)(a3 + 16))
    {
      swift_bridgeObjectRetain(a3);
      __asm { BR              X10 }
    }
    swift_bridgeObjectRelease(0xE600000000000000);
    result = sub_100063CD0(v12, v10);
  }
  else
  {
    result = swift_arrayDestroy(v13, 1, &type metadata for SEKeySyncManager.ViewConfiguration);
  }
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 32) = 0;
  *(_QWORD *)(a4 + 40) = 0;
  *(_QWORD *)(a4 + 48) = 0;
  *(_QWORD *)(a4 + 56) = 0;
  *(_BYTE *)(a4 + 64) = 2;
  return result;
}

Class sub_1000FFE30(uint64_t a1, unint64_t a2, void *a3)
{
  Class isa;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  os_log_type_t v42;
  int v43;
  uint64_t v44;
  uint8_t *v45;
  uint8_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  os_log_t v59;
  uint8_t *v60;
  uint64_t v61;
  Class v62;
  _QWORD *v63;
  uint64_t v64;
  NSObject *v65;
  uint64_t v66;
  os_log_type_t v67;
  uint8_t *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  NSObject *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  os_log_type_t v79;
  uint8_t *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  os_unfair_lock_s *v87;
  uint64_t v88;
  uint64_t v89;
  _BOOL4 v90;
  uint64_t v91;
  _QWORD *v92;
  uint8_t *v93;
  uint8_t *v94;
  uint64_t v95;
  uint64_t v96;
  os_log_t v97;
  char *v98;
  os_unfair_lock_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD v107[3];
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  __n128 v114;
  __n128 v115;
  uint64_t v116;
  uint64_t v117[2];
  uint64_t v118;
  unint64_t v119;
  __n128 v120;
  __n128 v121;

  v8 = sub_100063D3C(&qword_100346898);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v91 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001AFAB0((uint64_t)&v114);
  v112 = a1;
  v113 = a2;
  sub_100063C8C(a1, a2);
  sub_100063C8C(a1, a2);
  v12 = sub_100136C5C(&v112, &v114);
  v13 = v4;
  sub_100063CD0(v112, v113);
  if (!v4)
  {
    sub_100124140(&v115, &v120);
    sub_10012417C((uint64_t)&v120);
    v109 = v116;
    sub_1001241D0(&v109);
    sub_1001AFC4C(v12, v117);
    sub_100063CD0(a1, a2);
    v103 = a3;
    v16 = v118;
    v15 = v119;
    v102 = v119 >> 62;
    sub_100063C8C(v118, v119);
    sub_1001241F8(v117);
    v17 = *(_QWORD *)((char *)isa + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_state);
    os_unfair_lock_lock((os_unfair_lock_t)(v17 + 48));
    v18 = *(_QWORD **)(v17 + 32);
    swift_bridgeObjectRetain(v18);
    os_unfair_lock_unlock((os_unfair_lock_t)(v17 + 48));
    v105 = v16;
    v101 = v15;
    if (v18)
    {
      v104 = 0;
      v19 = swift_bridgeObjectRetain_n(v18, 2);
      v20 = Logger.logObject.getter(v19);
      v24 = static os_log_type_t.info.getter(v20, v21, v22, v23);
      if (os_log_type_enabled(v20, v24))
      {
        v25 = (uint8_t *)swift_slowAlloc(12, -1);
        v26 = swift_slowAlloc(32, -1);
        v112 = v26;
        *(_DWORD *)v25 = 136315138;
        v103 = v25 + 4;
        swift_bridgeObjectRetain(v18);
        v28 = Array.description.getter(v27, &_s13ListTLKOutputVN);
        v30 = v29;
        swift_bridgeObjectRelease(v18);
        v111 = sub_1001C56EC(v28, v30, &v112);
        v16 = v105;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112, v103, v25 + 12);
        swift_bridgeObjectRelease(v30);
        swift_bridgeObjectRelease_n(v18, 2);
        _os_log_impl((void *)&_mh_execute_header, v20, v24, "Have (cached) TLKs %s", v25, 0xCu);
        swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v26, -1, -1);
        swift_slowDealloc(v25, -1, -1);

        if (v18[2])
          goto LABEL_8;
      }
      else
      {

        swift_bridgeObjectRelease_n(v18, 2);
        if (v18[2])
        {
LABEL_8:
          v31 = __OFSUB__(HIDWORD(v16), (_DWORD)v16);
          LODWORD(v94) = v31;
          v93 = (uint8_t *)(HIDWORD(v16) - (int)v16);
          v32 = BYTE6(v101);
          swift_bridgeObjectRetain(v18);
          v92 = v18;
          v95 = v32;
          v96 = v102;
          __asm { BR              X10 }
        }
      }
      swift_bridgeObjectRelease(v18);
      v62 = (Class)objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithBool:", 0);
    }
    else
    {
      v99 = (os_unfair_lock_t)(v17 + 48);
      v100 = v17;
      v33 = type metadata accessor for TaskPriority(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v11, 1, 1, v33);
      v34 = (_QWORD *)swift_allocObject(&unk_1003095C0, 56, 7);
      v34[2] = 0;
      v34[3] = 0;
      v34[4] = isa;
      v34[5] = 0xD000000000000013;
      v34[6] = 0x80000001002BCA20;
      swift_retain(isa);
      v35 = sub_1000FC3B4((uint64_t)v11, (uint64_t)&unk_100346B30, (uint64_t)v34);
      swift_release(v35);
      v36 = (char *)isa + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_logger;
      sub_100063C8C(v16, v15);
      v37 = sub_100063C8C(v16, v15);
      v38 = Logger.logObject.getter(v37);
      v42 = static os_log_type_t.info.getter(v38, v39, v40, v41);
      v43 = v42;
      if (os_log_type_enabled(v38, v42))
      {
        v97 = v38;
        v44 = swift_slowAlloc(12, -1);
        LODWORD(v95) = v43;
        v45 = (uint8_t *)v44;
        v96 = swift_slowAlloc(32, -1);
        v111 = v96;
        *(_DWORD *)v45 = 136315138;
        v46 = v45 + 12;
        v93 = v45 + 4;
        v94 = v45;
        sub_100063C8C(v105, v15);
        sub_1001BD150(4, v105, v15);
        v48 = v112;
        v47 = v113;
        v98 = v36;
        sub_1001BD2CC(v112, v113);
        v50 = v49;
        v104 = 0;
        v106 = v49;
        v51 = sub_100063D3C((uint64_t *)&unk_100346060);
        v52 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
        v53 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v51, v52);
        v55 = v54;
        v56 = v101;
        swift_bridgeObjectRelease(v50);
        v57 = v48;
        v13 = v104;
        sub_100063CD0(v57, v47);
        v112 = sub_1001C56EC(v53, v55, &v111);
        v58 = v105;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113, v93, v46);
        swift_bridgeObjectRelease(v55);
        sub_100063CD0(v58, v56);
        sub_100063CD0(v58, v56);
        v59 = v97;
        v60 = v94;
        _os_log_impl((void *)&_mh_execute_header, v97, (os_log_type_t)v95, "Falling back to listing SE for %s", v94, 0xCu);
        v61 = v96;
        swift_arrayDestroy(v96, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v61, -1, -1);
        swift_slowDealloc(v60, -1, -1);

      }
      else
      {

        sub_100063CD0(v16, v15);
        sub_100063CD0(v16, v15);
      }
      v63 = sub_100131124(v103);
      if (v13)
      {
        swift_errorRetain(v13);
        v64 = swift_errorRetain(v13);
        v65 = Logger.logObject.getter(v64);
        v67 = static os_log_type_t.error.getter(v65, v66);
        if (os_log_type_enabled(v65, v67))
        {
          v68 = (uint8_t *)swift_slowAlloc(12, -1);
          v69 = swift_slowAlloc(32, -1);
          v112 = v69;
          *(_DWORD *)v68 = 136315138;
          swift_getErrorValue(v13, &v108, v107);
          v70 = Error.localizedDescription.getter(v107[1], v107[2]);
          v72 = v71;
          v111 = sub_1001C56EC(v70, v71, &v112);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112, v68 + 4, v68 + 12);
          swift_bridgeObjectRelease(v72);
          swift_errorRelease(v13);
          swift_errorRelease(v13);
          _os_log_impl((void *)&_mh_execute_header, v65, v67, "Failed to list TLKS : %s", v68, 0xCu);
          swift_arrayDestroy(v69, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v69, -1, -1);
          swift_slowDealloc(v68, -1, -1);

        }
        else
        {

          swift_errorRelease(v13);
          swift_errorRelease(v13);
        }
        sub_10006C25C(0, (unint64_t *)&qword_100344CD8, NSNumber_ptr);
        isa = NSNumber.init(BOOLeanLiteral:)(0).super.super.isa;
        swift_errorRelease(v13);
        goto LABEL_25;
      }
      v73 = v63;
      v74 = swift_bridgeObjectRetain_n(v63, 2);
      v75 = Logger.logObject.getter(v74);
      v79 = static os_log_type_t.info.getter(v75, v76, v77, v78);
      if (os_log_type_enabled(v75, v79))
      {
        v80 = (uint8_t *)swift_slowAlloc(12, -1);
        v104 = swift_slowAlloc(32, -1);
        v112 = v104;
        *(_DWORD *)v80 = 136315138;
        v103 = v80 + 4;
        swift_bridgeObjectRetain(v73);
        v82 = Array.description.getter(v81, &_s13ListTLKOutputVN);
        v84 = v83;
        swift_bridgeObjectRelease(v73);
        v85 = v82;
        v13 = 0;
        v111 = sub_1001C56EC(v85, v84, &v112);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112, v103, v80 + 12);
        swift_bridgeObjectRelease(v84);
        swift_bridgeObjectRelease_n(v73, 2);
        _os_log_impl((void *)&_mh_execute_header, v75, v79, "Got TLKS %s", v80, 0xCu);
        v86 = v104;
        swift_arrayDestroy(v104, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v86, -1, -1);
        swift_slowDealloc(v80, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v73, 2);
      }
      v87 = v99;
      os_unfair_lock_lock(v99);
      v88 = v100;
      v89 = *(_QWORD *)(v100 + 32);
      swift_bridgeObjectRetain(v73);
      swift_bridgeObjectRelease(v89);
      *(_QWORD *)(v88 + 32) = v73;
      v104 = v13;
      os_unfair_lock_unlock(v87);
      if (v73[2])
      {
        v90 = __OFSUB__(HIDWORD(v105), (_DWORD)v105);
        LODWORD(v94) = v90;
        v93 = (uint8_t *)(HIDWORD(v105) - (int)v105);
        v103 = (void *)BYTE6(v101);
        swift_bridgeObjectRetain(v73);
        v92 = v73;
        v95 = v102;
        __asm { BR              X10 }
      }
      swift_bridgeObjectRelease(v73);
      sub_10006C25C(0, (unint64_t *)&qword_100344CD8, NSNumber_ptr);
      v62 = NSNumber.init(BOOLeanLiteral:)(0).super.super.isa;
    }
    isa = v62;
LABEL_25:
    sub_100063CD0(v105, v101);
    return isa;
  }
  sub_100063CD0(a1, a2);
  sub_100124140(&v115, &v121);
  sub_10012417C((uint64_t)&v121);
  v110 = v116;
  sub_1001241D0(&v110);
  return isa;
}

uint64_t sub_100101378(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1000FAD3C(*a1, *a2);
}

Swift::Int sub_100101384()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7);
  v2 = 0xEC0000004553726FLL;
  v3 = 0x46676E6974696177;
  if (v1 != 1)
  {
    v3 = 0x6572676F72506E69;
    v2 = 0xEA00000000007373;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 1701602409;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE400000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_100101428(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xEC0000004553726FLL;
  v3 = 0x46676E6974696177;
  if (*v1 != 1)
  {
    v3 = 0x6572676F72506E69;
    v2 = 0xEA00000000007373;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 1701602409;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE400000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1001014A8()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7);
  v2 = 0xEC0000004553726FLL;
  v3 = 0x46676E6974696177;
  if (v1 != 1)
  {
    v3 = 0x6572676F72506E69;
    v2 = 0xEA00000000007373;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 1701602409;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE400000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

unint64_t sub_100101548@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1001240F8(*a1);
  *a2 = result;
  return result;
}

void sub_100101574(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE400000000000000;
  v4 = 0xEC0000004553726FLL;
  v5 = 0x46676E6974696177;
  if (v2 != 1)
  {
    v5 = 0x6572676F72506E69;
    v4 = 0xEA00000000007373;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 1701602409;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

void sub_1001015D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  NSString v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;

  v2 = sub_100063D3C(&qword_100346898);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (void *)objc_opt_self(SESBootUUID);
  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(v6, "setFirstLaunchAfterBootDoneForKey:", v7);

  v8 = swift_retain(a1);
  v9 = Logger.logObject.getter(v8);
  v13 = static os_log_type_t.info.getter(v9, v10, v11, v12);
  if (os_log_type_enabled(v9, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v14 = 67109120;
    v19 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_requiresResync);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v14 + 4, v14 + 8);
    swift_release(a1);
    _os_log_impl((void *)&_mh_execute_header, v9, v13, "Sync completed, requiresResync %{BOOL}d", v14, 8u);
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {

    swift_release(a1);
  }
  *(_BYTE *)(a1 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_syncProgressState) = 0;
  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_requiresResync) == 1)
  {
    *(_BYTE *)(a1 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_requiresResync) = 0;
    v15 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v5, 1, 1, v15);
    v16 = swift_allocObject(&unk_100309778, 32, 7);
    *(_QWORD *)(v16 + 16) = 0;
    *(_QWORD *)(v16 + 24) = 0;
    v17 = sub_1000FC3B4((uint64_t)v5, (uint64_t)&unk_100346C98, v16);
    swift_release(v17);
  }
}

uint64_t sub_1001017D4(uint64_t *a1)
{
  uint64_t result;

  sub_10006B9B4(*a1, a1[1]);
  *(_OWORD *)a1 = xmmword_1002888D0;
  swift_bridgeObjectRelease(a1[3]);
  a1[3] = 0;
  result = swift_bridgeObjectRelease(a1[2]);
  a1[2] = 0;
  return result;
}

uint64_t sub_100101828()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 176) = v0;
  return swift_task_switch(sub_10010188C, v0, 0);
}

uint64_t sub_10010188C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  if (qword_100344600 != -1)
    swift_once(&qword_100344600, sub_10013DEC0);
  v1 = (_QWORD *)swift_task_alloc(dword_100346B64);
  *(_QWORD *)(v0 + 184) = v1;
  *v1 = v0;
  v1[1] = sub_10010193C;
  v2 = *(_QWORD *)(v0 + 176);
  v1[20] = v2;
  return swift_task_switch(sub_1001095A0, v2, 0);
}

uint64_t sub_10010193C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*v2 + 184);
  v4 = *v2;
  *(_QWORD *)(v4 + 192) = a1;
  swift_task_dealloc(v3);
  if (v1)
    return (*(uint64_t (**)(void))(v4 + 8))();
  else
    return swift_task_switch(sub_100101A00, *(_QWORD *)(v4 + 176), 0);
}

uint64_t sub_100101A00(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  _BOOL8 v5;
  void *v6;
  id v7;
  char v8;
  NSObject *v9;
  uint64_t v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  void *v14;
  NSString v15;
  unint64_t v16;
  _BYTE *v17;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  os_log_type_t v28;
  _BOOL4 v29;
  void *v30;
  uint8_t *v31;

  v3 = *(void **)(v2 + 192);
  *(_BYTE *)(*(_QWORD *)(v2 + 176) + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_syncProgressState) = 2;
  v4 = sub_1000E93A8(v3, a2);
  if (v4 != 35)
  {
    v8 = v4;
    v9 = Logger.logObject.getter(v4);
    v11 = static os_log_type_t.error.getter(v9, v10);
    if (os_log_type_enabled(v9, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v11, "Sync Progress -- disabling Key Sync due to SLAM error", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }
    v6 = *(void **)(v2 + 192);
    v13 = *(_QWORD *)(v2 + 176);

    v14 = (void *)objc_opt_self(SESAlarm);
    v15 = String._bridgeToObjectiveC()();
    objc_msgSend(v14, "deregisterAlarm:", v15);

    *(_BYTE *)(v13 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_stopped) = 1;
    *(_BYTE *)(v13 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_requiresResync) = 0;
    v16 = sub_10012443C();
    v7 = (id)swift_allocError(&type metadata for KeySyncEvent, v16, 0, 0);
    *v17 = v8;
    goto LABEL_7;
  }
  *(_QWORD *)(v2 + 160) = 0;
  v5 = sub_100050170(*(void **)(v2 + 192), (_QWORD *)(v2 + 160));
  if (*(_QWORD *)(v2 + 160))
  {
    v6 = *(void **)(v2 + 192);
    v7 = *(id *)(v2 + 160);
LABEL_7:
    swift_willThrow(v7);

    return (*(uint64_t (**)(void))(v2 + 8))();
  }
  if (v5)
  {
    v19 = v2 + 16;
    v20 = *(_QWORD *)(v2 + 176);

    v21 = *(void **)(v20 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_keychainWrapper);
    *(_QWORD *)(v2 + 56) = v2 + 120;
    *(_QWORD *)(v2 + 16) = v2;
    *(_QWORD *)(v2 + 24) = sub_100101D58;
    v22 = swift_continuation_init(v2 + 16, 1);
    *(_QWORD *)(v2 + 80) = _NSConcreteStackBlock;
    v23 = (_QWORD *)(v2 + 80);
    v23[1] = 0x40000000;
    v23[2] = sub_1001098FC;
    v23[3] = &unk_100309790;
    v23[4] = v22;
    objc_msgSend(v21, "canSyncSEKeys:", v23);
    return swift_continuation_await(v19);
  }
  else
  {
    v24 = Logger.logObject.getter(v5);
    v28 = static os_log_type_t.info.getter(v24, v25, v26, v27);
    v29 = os_log_type_enabled(v24, v28);
    v30 = *(void **)(v2 + 192);
    if (v29)
    {
      v31 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v28, "Sync Progress -- not continuing because SE not paired", v31, 2u);
      swift_slowDealloc(v31, -1, -1);
    }

    return (*(uint64_t (**)(_QWORD, unint64_t))(v2 + 8))(0, 0xF000000000000000);
  }
}

uint64_t sub_100101D58()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 200) = v2;
  if (v2)
    v3 = sub_10010201C;
  else
    v3 = sub_100101DFC;
  return swift_task_switch(v3, *(_QWORD *)(v1 + 176), 0);
}

uint64_t sub_100101DFC()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;

  v1 = *(unsigned __int8 *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 136);
  sub_10006BA34(v2, v3);
  v4 = sub_10006BA34(v2, v3);
  v5 = Logger.logObject.getter(v4);
  v9 = static os_log_type_t.info.getter(v5, v6, v7, v8);
  if (os_log_type_enabled(v5, v9))
  {
    v10 = swift_slowAlloc(18, -1);
    v11 = swift_slowAlloc(32, -1);
    v17 = v11;
    *(_DWORD *)v10 = 67109378;
    *(_DWORD *)(v0 + 208) = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 212, v10 + 4, v10 + 8);
    *(_WORD *)(v10 + 8) = 2080;
    *(_QWORD *)(v0 + 144) = v2;
    *(_QWORD *)(v0 + 152) = v3;
    sub_10006BA34(v2, v3);
    v12 = sub_100063D3C(&qword_100346CA0);
    v13 = String.init<A>(describing:)(v0 + 144, v12);
    v15 = v14;
    *(_QWORD *)(v0 + 168) = sub_1001C56EC(v13, v14, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v10 + 10, v10 + 18);
    swift_bridgeObjectRelease(v15);
    sub_10006B9B4(v2, v3);
    sub_10006B9B4(v2, v3);
    _os_log_impl((void *)&_mh_execute_header, v5, v9, "Sync Progress -- canSyncSEKeys %{BOOL}d %s", (uint8_t *)v10, 0x12u);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

    sub_10006B9B4(v2, v3);
    sub_10006B9B4(v2, v3);
  }
  return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v2, v3);
}

uint64_t sub_10010201C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _BYTE *v5;

  v2 = *(_QWORD *)(v1 + 200);
  swift_willThrow(a1);
  v3 = sub_10012443C();
  v4 = swift_allocError(&type metadata for KeySyncEvent, v3, 0, 0);
  *v5 = 20;
  swift_willThrow(v4);
  swift_errorRelease(v2);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1001020BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[75] = v2;
  v3[74] = a2;
  v3[73] = a1;
  v4 = type metadata accessor for SESPeerIdentityData(0);
  v3[76] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100102148, v2, 0);
}

uint64_t sub_100102148(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  void *v16;
  _QWORD *v17;

  *(_QWORD *)(v1 + 616) = OBJC_IVAR____TtC10seserviced16SEKeySyncManager_logger;
  v2 = Logger.logObject.getter(a1);
  v6 = static os_log_type_t.info.getter(v2, v3, v4, v5);
  if (os_log_type_enabled(v2, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v6, "Sync progress -- loading views & TLKS", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }
  v8 = *(_QWORD *)(v1 + 600);

  v9 = OBJC_IVAR____TtC10seserviced16SEKeySyncManager_secureElementInfo;
  *(_QWORD *)(v1 + 624) = OBJC_IVAR____TtC10seserviced16SEKeySyncManager_secureElementInfo;
  v10 = *(void **)(v8 + v9);
  if (v10)
  {
    *(_QWORD *)(v1 + 640) = v10;
    v11 = dword_100346B6C;
    v12 = v10;
    v13 = swift_task_alloc(v11);
    *(_QWORD *)(v1 + 648) = v13;
    *(_QWORD *)v13 = v1;
    *(_QWORD *)(v13 + 8) = sub_100102398;
    v14 = *(_QWORD *)(v1 + 600);
    v15 = *(_OWORD *)(v1 + 584);
    *(_QWORD *)(v13 + 32) = v14;
    *(_OWORD *)(v13 + 16) = v15;
    v16 = sub_1001099DC;
  }
  else
  {
    v17 = (_QWORD *)swift_task_alloc(dword_100346B64);
    *(_QWORD *)(v1 + 632) = v17;
    *v17 = v1;
    v17[1] = sub_1001022D0;
    v14 = *(_QWORD *)(v1 + 600);
    v17[20] = v14;
    v16 = sub_1001095A0;
  }
  return swift_task_switch(v16, v14, 0);
}

uint64_t sub_1001022D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v4 = (_QWORD *)*v2;
  v5 = *(_QWORD *)(*v2 + 632);
  v6 = *v2;
  swift_task_dealloc(v5);
  if (v1)
  {
    swift_task_dealloc(v4[76]);
    return (*(uint64_t (**)(void))(v6 + 8))();
  }
  else
  {
    v8 = v4[75];
    v4[84] = a1;
    return swift_task_switch(sub_100102454, v8, 0);
  }
}

uint64_t sub_100102398(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v5 = *(_QWORD **)v3;
  v6 = *(_QWORD *)(*(_QWORD *)v3 + 648);
  v5[82] = a2;
  v5[83] = v2;
  swift_task_dealloc(v6);
  v7 = v5[75];
  if (v2)
  {
    v8 = sub_100108FCC;
  }
  else
  {
    v5[85] = a1;
    v8 = sub_100102534;
  }
  return swift_task_switch(v8, v7, 0);
}

uint64_t sub_100102454(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;

  v3 = *(void **)(v2 + 672);
  v4 = *(_QWORD *)(v2 + 624);
  v5 = *(_QWORD *)(v2 + 600);
  v6 = sub_10005066C(v3, a2);

  v7 = *(void **)(v5 + v4);
  *(_QWORD *)(v5 + v4) = v6;
  v8 = v6;

  *(_QWORD *)(v2 + 640) = v8;
  v9 = swift_task_alloc(dword_100346B6C);
  *(_QWORD *)(v2 + 648) = v9;
  *(_QWORD *)v9 = v2;
  *(_QWORD *)(v9 + 8) = sub_100102398;
  v10 = *(_QWORD *)(v2 + 600);
  v11 = *(_OWORD *)(v2 + 584);
  *(_QWORD *)(v9 + 32) = v10;
  *(_OWORD *)(v9 + 16) = v11;
  return swift_task_switch(sub_1001099DC, v10, 0);
}

uint64_t sub_100102534(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  char v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  void *v14;
  uint64_t v15;
  void *v16;
  NSString v17;
  _QWORD *v19;

  *(_QWORD *)(v1 + 552) = *(_QWORD *)(v1 + 680);
  v2 = Logger.logObject.getter(a1);
  v6 = static os_log_type_t.info.getter(v2, v3, v4, v5);
  if (os_log_type_enabled(v2, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v6, "Sync progress -- initial views and TLKs loaded", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }
  v8 = *(_QWORD *)(v1 + 664);
  v9 = *(_QWORD *)(v1 + 656);
  v10 = *(void **)(v1 + 640);

  v11 = sub_100109D54(v9, v10);
  if (v8)
  {
    v12 = *(_QWORD *)(v1 + 656);

    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(*(_QWORD *)(v1 + 552));
    swift_task_dealloc(*(_QWORD *)(v1 + 608));
    v13 = *(uint64_t (**)(void))(v1 + 8);
    return v13();
  }
  if ((v11 & 1) != 0)
  {
    v14 = *(void **)(v1 + 640);
    v15 = *(_QWORD *)(v1 + 600);
    swift_bridgeObjectRelease(*(_QWORD *)(v1 + 656));
    v16 = (void *)objc_opt_self(SESAlarm);
    v17 = String._bridgeToObjectiveC()();
    objc_msgSend(v16, "deregisterAlarm:", v17);

    *(_BYTE *)(v15 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_stopped) = 1;
    swift_bridgeObjectRelease(*(_QWORD *)(v1 + 552));
    swift_task_dealloc(*(_QWORD *)(v1 + 608));
    v13 = *(uint64_t (**)(void))(v1 + 8);
    return v13();
  }
  v19 = (_QWORD *)swift_task_alloc(dword_100346B74);
  *(_QWORD *)(v1 + 688) = v19;
  *v19 = v1;
  v19[1] = sub_100102770;
  return sub_10010B704(*(_QWORD *)(v1 + 608), *(_QWORD *)(v1 + 584), *(_QWORD *)(v1 + 592));
}

uint64_t sub_100102770()
{
  uint64_t v0;
  uint64_t **v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t **v6;

  v2 = (*v1)[86];
  v3 = *v1;
  v3[87] = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    v4 = v3[75];
    swift_bridgeObjectRelease(v3[82]);
    return swift_task_switch(sub_100109034, v4, 0);
  }
  else
  {
    v6 = (uint64_t **)swift_task_alloc(dword_100346B7C);
    v3[88] = (uint64_t)v6;
    *v6 = v3;
    v6[1] = (uint64_t *)sub_100102868;
    return sub_10010C498(v3[73], v3[74], v3[76]);
  }
}

uint64_t sub_100102868(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 704);
  v3[89] = a1;
  v3[90] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[75];
    swift_bridgeObjectRelease(v3[82]);
    v6 = sub_1001090A4;
    v7 = v5;
  }
  else
  {
    v7 = v3[75];
    v6 = sub_100102934;
  }
  return swift_task_switch(v6, v7, 0);
}

uint64_t sub_100102934(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  void *v17;
  uint64_t v18;
  id v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;

  v2 = Logger.logObject.getter(a1);
  v6 = static os_log_type_t.info.getter(v2, v3, v4, v5);
  if (os_log_type_enabled(v2, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v6, "Sync progress -- identity aligned with Octagon", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }
  v8 = *(_QWORD *)(v1 + 656);

  *(_BYTE *)(v1 + 86) = 0;
  v10 = *(_QWORD *)(v8 + 16);
  *(_QWORD *)(v1 + 728) = v10;
  if (v10)
  {
    v11 = *(_QWORD *)(v1 + 656);
    *(_QWORD *)(v1 + 736) = 0;
    v13 = *(_QWORD *)(v11 + 32);
    v12 = *(_QWORD *)(v11 + 40);
    *(_QWORD *)(v1 + 744) = v12;
    v14 = *(_QWORD *)(v11 + 48);
    *(_QWORD *)(v1 + 752) = v14;
    v15 = *(_QWORD *)(v11 + 56);
    *(_QWORD *)(v1 + 760) = v15;
    v16 = *(_BYTE *)(v11 + 64);
    v17 = *(void **)(v11 + 72);
    *(_QWORD *)(v1 + 768) = v17;
    *(_QWORD *)(v1 + 224) = v13;
    *(_QWORD *)(v1 + 232) = v12;
    *(_QWORD *)(v1 + 240) = v14;
    *(_QWORD *)(v1 + 248) = v15;
    *(_BYTE *)(v1 + 256) = v16;
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v11);
    sub_100063C8C(v14, v15);
    v18 = dword_100346B84;
    v19 = v17;
    v20 = (_QWORD *)swift_task_alloc(v18);
    *(_QWORD *)(v1 + 776) = v20;
    *v20 = v1;
    v20[1] = sub_100102C60;
    v21 = *(_QWORD *)(v1 + 608);
    v22 = *(_QWORD *)(v1 + 600);
    v23 = *(_QWORD *)(v1 + 584);
    v20[40] = *(_QWORD *)(v1 + 592);
    v20[41] = v22;
    v20[38] = v21;
    v20[39] = v23;
    v20[36] = v1 + 224;
    v20[37] = v19;
    v24 = sub_10010DA24;
  }
  else
  {
    v25 = Logger.logObject.getter(v9);
    v29 = static os_log_type_t.info.getter(v25, v26, v27, v28);
    if (os_log_type_enabled(v25, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v30 = 67109120;
      *(_DWORD *)(v1 + 132) = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 132, v1 + 136, v30 + 4, v30 + 8);
      _os_log_impl((void *)&_mh_execute_header, v25, v29, "Sync progress -- anyTLKProposed %{BOOL}d", v30, 8u);
      swift_slowDealloc(v30, -1, -1);
    }

    swift_beginAccess(v1 + 86, v1 + 464, 0, 0);
    if ((*(_BYTE *)(v1 + 86) & 1) != 0)
    {
      swift_bridgeObjectRelease(*(_QWORD *)(v1 + 656));
      v31 = swift_task_alloc(dword_100346B6C);
      *(_QWORD *)(v1 + 792) = v31;
      *(_QWORD *)v31 = v1;
      *(_QWORD *)(v31 + 8) = sub_100103044;
      v22 = *(_QWORD *)(v1 + 600);
      v32 = *(_OWORD *)(v1 + 584);
      *(_QWORD *)(v31 + 32) = v22;
      *(_OWORD *)(v31 + 16) = v32;
      v24 = sub_1001099DC;
    }
    else
    {
      v33 = *(_QWORD *)(v1 + 552);
      v34 = *(_QWORD *)(v1 + 656);
      *(_QWORD *)(v1 + 832) = v34;
      *(_QWORD *)(v1 + 824) = v33;
      v35 = dword_100346B8C;
      swift_bridgeObjectRetain(v33);
      v36 = (_QWORD *)swift_task_alloc(v35);
      *(_QWORD *)(v1 + 840) = v36;
      *v36 = v1;
      v36[1] = sub_1001031DC;
      v22 = *(_QWORD *)(v1 + 600);
      v36[28] = v33;
      v36[29] = v22;
      v36[27] = v34;
      v24 = sub_10010E690;
    }
  }
  return swift_task_switch(v24, v22, 0);
}

uint64_t sub_100102C60(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v9;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 776);
  *(_QWORD *)(*v2 + 784) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = *(_QWORD *)(v4 + 656);
    v7 = *(_QWORD *)(v4 + 600);
    swift_bridgeObjectRelease(*(_QWORD *)(v4 + 712));
    swift_bridgeObjectRelease_n(v6, 2);
    v8 = sub_100109128;
    v9 = v7;
  }
  else
  {
    v9 = *(_QWORD *)(v4 + 600);
    *(_BYTE *)(v4 + 87) = a1 & 1;
    v8 = sub_100102D3C;
  }
  return swift_task_switch(v8, v9, 0);
}

uint64_t sub_100102D3C()
{
  uint64_t v0;
  char v1;
  void *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  void *v26;
  uint64_t v27;
  id v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;

  v1 = *(_BYTE *)(v0 + 87);
  v2 = *(void **)(v0 + 768);
  v3 = *(_QWORD *)(v0 + 760);
  v4 = *(_QWORD *)(v0 + 752);
  v5 = *(_QWORD *)(v0 + 736);
  v6 = *(_QWORD *)(v0 + 728);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 744));

  sub_100063CD0(v4, v3);
  v7 = *(_BYTE *)(v0 + 86) | v1;
  *(_BYTE *)(v0 + 86) = v7 & 1;
  if (v5 + 1 == v6)
  {
    v8 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 656));
    v9 = Logger.logObject.getter(v8);
    v13 = static os_log_type_t.info.getter(v9, v10, v11, v12);
    if (os_log_type_enabled(v9, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v14 = 67109120;
      *(_DWORD *)(v0 + 132) = v7 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 132, v0 + 136, v14 + 4, v14 + 8);
      _os_log_impl((void *)&_mh_execute_header, v9, v13, "Sync progress -- anyTLKProposed %{BOOL}d", v14, 8u);
      swift_slowDealloc(v14, -1, -1);
    }

    swift_beginAccess(v0 + 86, v0 + 464, 0, 0);
    if ((*(_BYTE *)(v0 + 86) & 1) != 0)
    {
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 656));
      v15 = swift_task_alloc(dword_100346B6C);
      *(_QWORD *)(v0 + 792) = v15;
      *(_QWORD *)v15 = v0;
      *(_QWORD *)(v15 + 8) = sub_100103044;
      v16 = *(_QWORD *)(v0 + 600);
      v17 = *(_OWORD *)(v0 + 584);
      *(_QWORD *)(v15 + 32) = v16;
      *(_OWORD *)(v15 + 16) = v17;
      v18 = sub_1001099DC;
    }
    else
    {
      v32 = *(_QWORD *)(v0 + 552);
      v33 = *(_QWORD *)(v0 + 656);
      *(_QWORD *)(v0 + 832) = v33;
      *(_QWORD *)(v0 + 824) = v32;
      v34 = dword_100346B8C;
      swift_bridgeObjectRetain(v32);
      v35 = (_QWORD *)swift_task_alloc(v34);
      *(_QWORD *)(v0 + 840) = v35;
      *v35 = v0;
      v35[1] = sub_1001031DC;
      v16 = *(_QWORD *)(v0 + 600);
      v35[28] = v32;
      v35[29] = v16;
      v35[27] = v33;
      v18 = sub_10010E690;
    }
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 736) + 1;
    *(_QWORD *)(v0 + 736) = v19;
    v20 = *(_QWORD *)(v0 + 656) + 48 * v19;
    v22 = *(_QWORD *)(v20 + 32);
    v21 = *(_QWORD *)(v20 + 40);
    *(_QWORD *)(v0 + 744) = v21;
    v23 = *(_QWORD *)(v20 + 48);
    *(_QWORD *)(v0 + 752) = v23;
    v24 = *(_QWORD *)(v20 + 56);
    *(_QWORD *)(v0 + 760) = v24;
    v25 = *(_BYTE *)(v20 + 64);
    v26 = *(void **)(v20 + 72);
    *(_QWORD *)(v0 + 768) = v26;
    *(_QWORD *)(v0 + 224) = v22;
    *(_QWORD *)(v0 + 232) = v21;
    *(_QWORD *)(v0 + 240) = v23;
    *(_QWORD *)(v0 + 248) = v24;
    *(_BYTE *)(v0 + 256) = v25;
    swift_bridgeObjectRetain(v21);
    sub_100063C8C(v23, v24);
    v27 = dword_100346B84;
    v28 = v26;
    v29 = (_QWORD *)swift_task_alloc(v27);
    *(_QWORD *)(v0 + 776) = v29;
    *v29 = v0;
    v29[1] = sub_100102C60;
    v30 = *(_QWORD *)(v0 + 608);
    v16 = *(_QWORD *)(v0 + 600);
    v31 = *(_QWORD *)(v0 + 584);
    v29[40] = *(_QWORD *)(v0 + 592);
    v29[41] = v16;
    v29[38] = v30;
    v29[39] = v31;
    v29[36] = v0 + 224;
    v29[37] = v28;
    v18 = sub_10010DA24;
  }
  return swift_task_switch(v18, v16, 0);
}

uint64_t sub_100103044(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v10;

  v6 = *(_QWORD **)v3;
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 792);
  *(_QWORD *)(*(_QWORD *)v3 + 800) = v2;
  swift_task_dealloc(v7);
  if (v2)
  {
    v8 = v6[75];
    swift_bridgeObjectRelease(v6[89]);
    v9 = sub_1001091E4;
    v10 = v8;
  }
  else
  {
    v10 = v6[75];
    v6[101] = a2;
    v6[102] = a1;
    v9 = sub_10010311C;
  }
  return swift_task_switch(v9, v10, 0);
}

uint64_t sub_10010311C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v1 = v0[102];
  swift_bridgeObjectRelease(v0[69]);
  v0[69] = v1;
  v2 = v0[102];
  v3 = v0[101];
  v0[104] = v3;
  v0[103] = v2;
  v4 = dword_100346B8C;
  swift_bridgeObjectRetain(v2);
  v5 = (_QWORD *)swift_task_alloc(v4);
  v0[105] = v5;
  *v5 = v0;
  v5[1] = sub_1001031DC;
  v6 = v0[75];
  v5[28] = v2;
  v5[29] = v6;
  v5[27] = v3;
  return swift_task_switch(sub_10010E690, v6, 0);
}

uint64_t sub_1001031DC(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v10;
  uint64_t v11;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 840);
  *(_QWORD *)(*v2 + 848) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = *(_QWORD *)(v4 + 832);
    v7 = *(_QWORD *)(v4 + 824);
    v8 = *(_QWORD *)(v4 + 600);
    swift_bridgeObjectRelease(*(_QWORD *)(v4 + 712));
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v6);
    v9 = sub_100109268;
    v10 = v8;
  }
  else
  {
    v11 = *(_QWORD *)(v4 + 600);
    swift_bridgeObjectRelease(*(_QWORD *)(v4 + 824));
    *(_BYTE *)(v4 + 129) = a1 & 1;
    v9 = sub_1001032D4;
    v10 = v11;
  }
  return swift_task_switch(v9, v10, 0);
}

uint64_t sub_1001032D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  id v29;
  uint64_t v30;
  id v31;
  NSString v32;
  id v33;
  char *v34;
  NSString v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  NSObject *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  void *v56;
  uint64_t v57;
  id v58;
  _QWORD *v59;
  uint64_t v60;
  char v61;
  unint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  uint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  id v89;
  void *v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  void *v96;
  NSString v97;
  unsigned int v98;
  uint64_t v99;
  NSObject *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  os_log_type_t v104;
  BOOL v105;
  uint64_t v106;
  __int128 *v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  __int128 *v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  BOOL v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void **v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  void *v133;
  id v134;
  id v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  id v156;
  char v157;
  char v158;
  uint64_t v159;
  char v160;
  uint64_t v161;
  uint64_t v162;

  if ((*(_BYTE *)(v0 + 129) & 1) != 0)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 832));
    v1 = swift_task_alloc(dword_100346B6C);
    *(_QWORD *)(v0 + 856) = v1;
    *(_QWORD *)v1 = v0;
    *(_QWORD *)(v1 + 8) = sub_1001045A0;
    v2 = *(_QWORD *)(v0 + 600);
    v3 = *(_OWORD *)(v0 + 584);
    *(_QWORD *)(v1 + 32) = v2;
    *(_OWORD *)(v1 + 16) = v3;
    return swift_task_switch(sub_1001099DC, v2, 0);
  }
  v5 = *(_QWORD *)(v0 + 832);
  *(_QWORD *)(v0 + 888) = v5;
  v6 = swift_task_alloc(32);
  *(_QWORD *)(v6 + 16) = v0 + 552;
  v7 = swift_bridgeObjectRetain(v5);
  sub_100122140(v7, (uint64_t (*)(_QWORD *, id))sub_1001243AC);
  v9 = v8;
  *(_QWORD *)(v0 + 896) = v8;
  swift_bridgeObjectRelease(v5);
  swift_task_dealloc(v6);
  v10 = swift_bridgeObjectRetain(v9);
  v11 = Logger.logObject.getter(v10);
  v15 = static os_log_type_t.info.getter(v11, v12, v13, v14);
  if (os_log_type_enabled(v11, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v16 = 134217984;
    *(_QWORD *)(v0 + 568) = *(_QWORD *)(v9 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 568, v0 + 576, v16 + 4, v16 + 12);
    swift_bridgeObjectRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v11, v15, "Sync progress - handling %ld absent views", v16, 0xCu);
    swift_slowDealloc(v16, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease(v9);
  }

  v17 = *(_QWORD *)(v9 + 16);
  *(_QWORD *)(v0 + 904) = v17;
  if (!v17)
  {
    v155 = v0 + 184;
    swift_bridgeObjectRelease(v9);
    *(_QWORD *)(v0 + 1040) = v5;
    v37 = swift_task_alloc(32);
    *(_QWORD *)(v37 + 16) = v0 + 552;
    v38 = swift_bridgeObjectRetain(v5);
    v39 = sub_100122AE4(v38, (void (*)(_QWORD *__return_ptr, _QWORD *, id))sub_1001243B4);
    *(_QWORD *)(v0 + 1048) = v39;
    swift_bridgeObjectRelease(v5);
    swift_task_dealloc(v37);
    v40 = swift_bridgeObjectRetain(v39);
    v41 = Logger.logObject.getter(v40);
    v45 = static os_log_type_t.info.getter(v41, v42, v43, v44);
    if (os_log_type_enabled(v41, v45))
    {
      v46 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v46 = 134217984;
      *(_QWORD *)(v0 + 560) = v39[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 560, v0 + 568, v46 + 4, v46 + 12);
      swift_bridgeObjectRelease(v39);
      _os_log_impl((void *)&_mh_execute_header, v41, v45, "Sync progress - handling %ld present views", v46, 0xCu);
      swift_slowDealloc(v46, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease(v39);
    }

    v47 = v39[2];
    *(_QWORD *)(v0 + 1056) = v47;
    if (v47)
    {
      *(_QWORD *)(v0 + 1064) = 0;
      v48 = *(_QWORD *)(v0 + 1048);
      v49 = *(_QWORD *)(v48 + 32);
      *(_QWORD *)(v0 + 1072) = v49;
      v50 = *(_QWORD *)(v48 + 40);
      *(_QWORD *)(v0 + 1080) = v50;
      v51 = *(_QWORD *)(v48 + 48);
      *(_QWORD *)(v0 + 1088) = v51;
      v52 = *(_QWORD *)(v48 + 56);
      *(_QWORD *)(v0 + 1096) = v52;
      v53 = *(_QWORD *)(v48 + 64);
      *(_QWORD *)(v0 + 1104) = v53;
      v54 = *(_QWORD *)(v48 + 72);
      *(_QWORD *)(v0 + 1112) = v54;
      v55 = *(_BYTE *)(v48 + 80);
      v56 = *(void **)(v48 + 88);
      *(_QWORD *)(v0 + 1120) = v56;
      *(_QWORD *)(v0 + 184) = v51;
      *(_QWORD *)(v0 + 192) = v52;
      *(_QWORD *)(v0 + 200) = v53;
      *(_QWORD *)(v0 + 208) = v54;
      *(_BYTE *)(v0 + 216) = v55;
      sub_100063C8C(v49, v50);
      swift_bridgeObjectRetain(v52);
      sub_100063C8C(v53, v54);
      v57 = dword_100346BA4;
      v58 = v56;
      v59 = (_QWORD *)swift_task_alloc(v57);
      *(_QWORD *)(v0 + 1128) = v59;
      *v59 = v0;
      v59[1] = sub_1001080D4;
      return sub_100111D10(*(_QWORD *)(v0 + 584), *(_QWORD *)(v0 + 592), v49, v50, v155, (uint64_t)v58, *(_QWORD *)(v0 + 608), *(_QWORD *)(v0 + 712));
    }
    v68 = *(_QWORD *)(v0 + 1048);
    v69 = *(_QWORD *)(v0 + 1040);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 712));
    swift_bridgeObjectRelease(v68);
    v154 = v69;
    v70 = *(_QWORD *)(v69 + 16);
    if (v70)
    {
      v71 = *(_QWORD *)(v0 + 1040);
      v72 = v71 + 32;
      v73 = *(_QWORD *)(v0 + 552);
      swift_bridgeObjectRetain(v71);
      v147 = v72;
      v148 = v70;
      v150 = v73;
      v146 = v73 + 48;
      v74 = *(_QWORD *)(v73 + 16);
      if (v74)
      {
        v75 = v72;
        v77 = *(_QWORD *)(v72 + 8);
        v76 = *(_QWORD *)(v72 + 16);
        v78 = *(_QWORD *)(v75 + 24);
        v79 = *(void **)(v75 + 40);
        v149 = 1;
        swift_bridgeObjectRetain_n(v73, 2);
        v151 = v77;
        swift_bridgeObjectRetain(v77);
        v152 = v78;
        v153 = v76;
        sub_100063C8C(v76, v78);
        v156 = v79;
        v80 = (uint64_t *)(v73 + 48);
        do
        {
          v159 = v74;
          v82 = *(v80 - 2);
          v81 = *(v80 - 1);
          v84 = *v80;
          v83 = v80[1];
          v86 = v80[2];
          v85 = v80[3];
          v88 = v80[4];
          v87 = v80[5];
          sub_100063C8C(v82, v81);
          sub_100063C8C(v84, v83);
          sub_100063C8C(v86, v85);
          sub_100063C8C(v88, v87);
          sub_100063C8C(v82, v81);
          v89 = objc_msgSend(v156, "currentTLK", v146, v147, v148, v149);
          if (v89)
          {
            v90 = v89;
            v91 = objc_msgSend(v89, "tlkUUID");

            static Data._unconditionallyBridgeFromObjectiveC(_:)(v91);
            __asm { BR              X8 }
          }
          sub_10006B9B4(v82, v81);
          sub_10006B9B4(0, 0xF000000000000000);
          sub_100063CD0(v82, v81);
          sub_100063CD0(v84, v83);
          sub_100063CD0(v86, v85);
          sub_100063CD0(v88, v87);
          v80 += 9;
          v74 = v159 - 1;
        }
        while (v159 != 1);
        v93 = *(_QWORD *)(v0 + 1040);
        swift_bridgeObjectRelease(v151);
        swift_bridgeObjectRelease_n(v150, 2);
        sub_100063CD0(v153, v152);
        swift_bridgeObjectRelease(v93);

      }
      else
      {
        swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1040));
      }
      LODWORD(v92) = 1;
    }
    else
    {
      LODWORD(v92) = 0;
    }
    v94 = *(_QWORD *)(v0 + 600);
    v95 = v92 ^ 1;
    v96 = (void *)objc_opt_self(SESAlarm);
    v97 = String._bridgeToObjectiveC()();
    v98 = objc_msgSend(v96, "isAlarmSet:", v97);

    v99 = swift_retain(v94);
    v100 = Logger.logObject.getter(v99);
    v104 = static os_log_type_t.info.getter(v100, v101, v102, v103);
    v105 = os_log_type_enabled(v100, v104);
    v106 = *(_QWORD *)(v0 + 600);
    if (v105)
    {
      v160 = v92;
      v92 = swift_slowAlloc(24, -1);
      *(_DWORD *)v92 = 67109632;
      *(_DWORD *)(v0 + 220) = v95;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 220, v0 + 224, v92 + 4, v92 + 8);
      *(_WORD *)(v92 + 8) = 1024;
      *(_DWORD *)(v0 + 180) = v98;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 180, v155, v92 + 10, v92 + 14);
      *(_WORD *)(v92 + 14) = 2048;
      v107 = (__int128 *)(v106 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__errorCount);
      swift_beginAccess(v106 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__errorCount, v0 + 392, 0, 0);
      v108 = *v107;
      v109 = v107[1];
      *(_OWORD *)(v0 + 161) = *(__int128 *)((char *)v107 + 25);
      *(_OWORD *)(v0 + 136) = v108;
      *(_OWORD *)(v0 + 152) = v109;
      *(_OWORD *)(v0 + 536) = *v107;
      *(_OWORD *)(v0 + 520) = *(_OWORD *)(v0 + 152);
      sub_10006F87C(v0 + 536);
      v110 = sub_10006F87C(v0 + 520);
      sub_100153718(v110);
      v112 = v111;
      sub_10006F8A4(v0 + 536);
      sub_10006F8A4(v0 + 520);
      *(_QWORD *)(v0 + 576) = v112;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 576, v0 + 584, v92 + 16, v92 + 24);
      swift_release(v106);
      _os_log_impl((void *)&_mh_execute_header, v100, v104, "Sync progress -- completed w/ haveAllViewsOnSE %{BOOL}d retryInFlight %{BOOL}d errorCount %ld", (uint8_t *)v92, 0x18u);
      v113 = v92;
      LOBYTE(v92) = v160;
      swift_slowDealloc(v113, -1, -1);
    }
    else
    {
      swift_release(v106);
    }
    v114 = *(_QWORD *)(v0 + 600);

    *(_BYTE *)(v114 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_allViewsSynchronized) = v95;
    if ((v92 & 1) == 0)
    {
      sub_1000FB490(0, &OBJC_IVAR____TtC10seserviced16SEKeySyncManager__recoveryRequiredPref);
      if ((v98 & 1) == 0)
      {
        v115 = (__int128 *)(*(_QWORD *)(v0 + 600) + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__errorCount);
        swift_beginAccess(v115, v0 + 416, 0, 0);
        v116 = *v115;
        v117 = v115[1];
        *(_OWORD *)(v0 + 113) = *(__int128 *)((char *)v115 + 25);
        *(_OWORD *)(v0 + 88) = v116;
        *(_OWORD *)(v0 + 104) = v117;
        *(_OWORD *)(v0 + 504) = *v115;
        *(_OWORD *)(v0 + 488) = *(_OWORD *)(v0 + 104);
        sub_10006F87C(v0 + 504);
        v118 = sub_10006F87C(v0 + 488);
        sub_100153718(v118);
        v120 = v119;
        sub_10006F8A4(v0 + 504);
        sub_10006F8A4(v0 + 488);
        if (v120 >= 1)
        {
          v121 = swift_beginAccess(v115, v0 + 368, 33, 0);
          v122 = *v115;
          v123 = v115[1];
          *(_OWORD *)(v0 + 41) = *(__int128 *)((char *)v115 + 25);
          *(_OWORD *)(v0 + 16) = v122;
          *(_OWORD *)(v0 + 32) = v123;
          sub_100153718(v121);
          v125 = __OFSUB__(v124, 1);
          v126 = v124 - 1;
          if (v125)
            __break(1u);
          sub_100120358(v126);
          swift_endAccess(v0 + 368);
        }
      }
    }
    v127 = *(_QWORD *)(v154 + 16);
    v128 = *(_QWORD *)(v0 + 1040);
    if (v127)
    {
      v129 = (void **)(swift_bridgeObjectRetain(v128) + 72);
      while (1)
      {
        v131 = (uint64_t)*(v129 - 4);
        v130 = (uint64_t)*(v129 - 3);
        v132 = (unint64_t)*(v129 - 2);
        v133 = *v129;
        swift_bridgeObjectRetain(v131);
        sub_100063C8C(v130, v132);
        v134 = v133;
        v135 = objc_msgSend(v134, "viewName");
        v136 = static String._unconditionallyBridgeFromObjectiveC(_:)(v135);
        v138 = v137;

        if (v136 == 0x4354502D4553 && v138 == 0xE600000000000000)
        {
          v142 = *(_QWORD *)(v0 + 1040);
          swift_bridgeObjectRelease(v131);
          swift_bridgeObjectRelease(0xE600000000000000);
          sub_100063CD0(v130, v132);

          goto LABEL_58;
        }
        v140 = _stringCompareWithSmolCheck(_:_:expecting:)(v136, v138, 0x4354502D4553, 0xE600000000000000, 0);
        swift_bridgeObjectRelease(v131);
        swift_bridgeObjectRelease(v138);
        sub_100063CD0(v130, v132);

        if ((v140 & 1) != 0)
          break;
        v129 += 6;
        if (!--v127)
        {
          v141 = *(void **)(v0 + 640);
          swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 1040), 2);
          goto LABEL_59;
        }
      }
      v142 = *(_QWORD *)(v0 + 1040);
LABEL_58:
      swift_bridgeObjectRelease_n(v142, 2);
      v143 = *(_QWORD *)(v0 + 600);
      v144 = OBJC_IVAR____TtC10seserviced16SEKeySyncManager_notifiedPassdOfFidoViewSynced;
      v141 = *(void **)(v0 + 640);
      if ((*(_BYTE *)(v143 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_notifiedPassdOfFidoViewSynced) & 1) == 0)
      {
        v145 = *(_QWORD *)(v0 + 608);
        notify_post("com.apple.seserviced.keysync.fido.tlk.synced");

        sub_1001247E8(v145, type metadata accessor for SESPeerIdentityData);
        *(_BYTE *)(v143 + v144) = 1;
LABEL_61:
        swift_bridgeObjectRelease(*(_QWORD *)(v0 + 552));
        swift_task_dealloc(*(_QWORD *)(v0 + 608));
        __asm { BR              X0 }
      }
    }
    else
    {
      v141 = *(void **)(v0 + 640);
      swift_bridgeObjectRelease(v128);
    }
LABEL_59:

    sub_1001247E8(*(_QWORD *)(v0 + 608), type metadata accessor for SESPeerIdentityData);
    goto LABEL_61;
  }
  v18 = *(_QWORD *)(v0 + 600);
  v19 = OBJC_IVAR____TtC10seserviced16SEKeySyncManager__recoveryForce;
  *(_QWORD *)(v0 + 912) = OBJC_IVAR____TtC10seserviced16SEKeySyncManager__recoveryForce;
  swift_beginAccess(v18 + v19, v0 + 440, 0, 0);
  *(_BYTE *)(v0 + 130) = 0;
  *(_QWORD *)(v0 + 920) = 0;
  v20 = *(_QWORD *)(v0 + 896);
  if (!*(_QWORD *)(v20 + 16))
  {
    __break(1u);
    JUMPOUT(0x100104544);
  }
  v21 = *(_QWORD *)(v0 + 600) + *(_QWORD *)(v0 + 912);
  v162 = *(_QWORD *)(v20 + 32);
  *(_QWORD *)(v0 + 928) = v162;
  v22 = *(_QWORD *)(v20 + 40);
  *(_QWORD *)(v0 + 936) = v22;
  v23 = *(_QWORD *)(v20 + 48);
  *(_QWORD *)(v0 + 944) = v23;
  v24 = *(_QWORD *)(v20 + 56);
  *(_QWORD *)(v0 + 952) = v24;
  v158 = *(_BYTE *)(v20 + 64);
  v25 = *(void **)(v20 + 72);
  *(_QWORD *)(v0 + 960) = v25;
  v26 = *(_QWORD *)(v21 + 8);
  v27 = *(_QWORD *)(v21 + 24);
  v157 = *(_BYTE *)(v21 + 32);
  v28 = *(unsigned __int8 *)(v21 + 33);
  v161 = v22;
  swift_bridgeObjectRetain(v22);
  sub_100063C8C(v23, v24);
  v29 = v25;
  swift_bridgeObjectRetain(v26);
  v30 = swift_bridgeObjectRetain(v27);
  if (v28 == 1 && !SESInternalVariant(v30))
  {
    swift_bridgeObjectRelease(v27);
    swift_bridgeObjectRelease(v26);
    *(_QWORD *)(v0 + 264) = v162;
    *(_QWORD *)(v0 + 272) = v161;
    *(_QWORD *)(v0 + 280) = v23;
    *(_QWORD *)(v0 + 288) = v24;
    *(_BYTE *)(v0 + 296) = v158;
    goto LABEL_26;
  }
  v31 = objc_allocWithZone((Class)NSUserDefaults);
  swift_bridgeObjectRetain(v26);
  v32 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v26);
  v33 = objc_msgSend(v31, "initWithSuiteName:", v32);

  if (!v33)
  {
    __break(1u);
    JUMPOUT(0x100104570);
  }
  v34 = (char *)(v0 + 85);
  v35 = String._bridgeToObjectiveC()();
  v36 = objc_msgSend(v33, "valueForKey:", v35);

  if (v36)
  {
    _bridgeAnyObjectToAny(_:)((_QWORD *)(v0 + 336));
    swift_unknownObjectRelease(v36);
    sub_10006C2B4((_OWORD *)(v0 + 336), (_OWORD *)(v0 + 304));
  }
  else
  {
    *(_OWORD *)(v0 + 304) = 0u;
    *(_OWORD *)(v0 + 320) = 0u;
  }
  v60 = sub_100063D3C((uint64_t *)&unk_100346130);
  if (swift_dynamicCast(v0 + 85, v0 + 304, v60, &type metadata for Bool, 6))
  {
    v61 = *v34;
  }
  else
  {
    v61 = 2;
    *v34 = 2;
  }
  swift_bridgeObjectRelease(v27);
  swift_bridgeObjectRelease(v26);
  *(_QWORD *)(v0 + 264) = v162;
  *(_QWORD *)(v0 + 272) = v161;
  *(_QWORD *)(v0 + 280) = v23;
  *(_QWORD *)(v0 + 288) = v24;
  *(_BYTE *)(v0 + 296) = v158;
  if (v61 == 2)
  {
LABEL_26:
    if ((v157 & 1) != 0)
      goto LABEL_24;
    goto LABEL_27;
  }
  if ((v61 & 1) != 0)
  {
LABEL_24:
    v62 = *(_QWORD *)(v0 + 952);
    v63 = *(_QWORD *)(v0 + 944);
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 936));
    sub_100063C8C(v63, v62);
    sub_100063CD0(v63, v62);
    v64 = (_QWORD *)swift_task_alloc(dword_100346B9C);
    *(_QWORD *)(v0 + 992) = v64;
    *v64 = v0;
    v64[1] = sub_100105ED8;
    return sub_100110BAC(*(_QWORD *)(v0 + 928), *(_QWORD *)(v0 + 936), *(_QWORD *)(v0 + 960), *(_QWORD *)(v0 + 712), *(_QWORD *)(v0 + 608), *(_QWORD *)(v0 + 640), *(_QWORD *)(v0 + 584), *(_QWORD *)(v0 + 592));
  }
LABEL_27:
  v65 = *(_QWORD *)(v0 + 552);
  *(_QWORD *)(v0 + 968) = v65;
  v66 = dword_100346B94;
  swift_bridgeObjectRetain(v65);
  v67 = (_QWORD *)swift_task_alloc(v66);
  *(_QWORD *)(v0 + 976) = v67;
  *v67 = v0;
  v67[1] = sub_1001058C0;
  return sub_100122CB4(v0 + 264, (uint64_t)v29, *(_QWORD *)(v0 + 608));
}

uint64_t sub_1001045A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v10;

  v6 = *(_QWORD **)v3;
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 856);
  *(_QWORD *)(*(_QWORD *)v3 + 864) = v2;
  swift_task_dealloc(v7);
  if (v2)
  {
    v8 = v6[75];
    swift_bridgeObjectRelease(v6[89]);
    v9 = sub_1001092EC;
    v10 = v8;
  }
  else
  {
    v10 = v6[75];
    v6[109] = a2;
    v6[110] = a1;
    v9 = sub_100104678;
  }
  return swift_task_switch(v9, v10, 0);
}

uint64_t sub_100104678()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  id v26;
  uint64_t v27;
  id v28;
  NSString v29;
  id v30;
  char *v31;
  NSString v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  void *v53;
  uint64_t v54;
  id v55;
  _QWORD *v56;
  uint64_t v58;
  char v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  void *v77;
  uint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  id v87;
  void *v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  void *v94;
  NSString v95;
  unsigned int v96;
  uint64_t v97;
  NSObject *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  os_log_type_t v102;
  BOOL v103;
  uint64_t v104;
  __int128 *v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __int128 *v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __int128 v120;
  __int128 v121;
  uint64_t v122;
  BOOL v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void **v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  void *v131;
  id v132;
  id v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  id v152;
  char v153;
  char v154;
  uint64_t v155;
  char v156;
  uint64_t v157;
  uint64_t v158;

  v1 = *(_QWORD *)(v0 + 880);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 552));
  *(_QWORD *)(v0 + 552) = v1;
  v2 = *(_QWORD *)(v0 + 872);
  *(_QWORD *)(v0 + 888) = v2;
  v3 = swift_task_alloc(32);
  *(_QWORD *)(v3 + 16) = v0 + 552;
  v4 = swift_bridgeObjectRetain(v2);
  sub_100122140(v4, (uint64_t (*)(_QWORD *, id))sub_1001243AC);
  v6 = v5;
  *(_QWORD *)(v0 + 896) = v5;
  swift_bridgeObjectRelease(v2);
  swift_task_dealloc(v3);
  v7 = swift_bridgeObjectRetain(v6);
  v8 = Logger.logObject.getter(v7);
  v12 = static os_log_type_t.info.getter(v8, v9, v10, v11);
  if (os_log_type_enabled(v8, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v13 = 134217984;
    *(_QWORD *)(v0 + 568) = *(_QWORD *)(v6 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 568, v0 + 576, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease(v6);
    _os_log_impl((void *)&_mh_execute_header, v8, v12, "Sync progress - handling %ld absent views", v13, 0xCu);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease(v6);
  }

  v14 = *(_QWORD *)(v6 + 16);
  *(_QWORD *)(v0 + 904) = v14;
  if (!v14)
  {
    swift_bridgeObjectRelease(v6);
    *(_QWORD *)(v0 + 1040) = v2;
    v34 = swift_task_alloc(32);
    *(_QWORD *)(v34 + 16) = v0 + 552;
    v35 = swift_bridgeObjectRetain(v2);
    v36 = sub_100122AE4(v35, (void (*)(_QWORD *__return_ptr, _QWORD *, id))sub_1001243B4);
    *(_QWORD *)(v0 + 1048) = v36;
    swift_bridgeObjectRelease(v2);
    swift_task_dealloc(v34);
    v37 = swift_bridgeObjectRetain(v36);
    v38 = Logger.logObject.getter(v37);
    v42 = static os_log_type_t.info.getter(v38, v39, v40, v41);
    if (os_log_type_enabled(v38, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v43 = 134217984;
      *(_QWORD *)(v0 + 560) = v36[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 560, v0 + 568, v43 + 4, v43 + 12);
      swift_bridgeObjectRelease(v36);
      _os_log_impl((void *)&_mh_execute_header, v38, v42, "Sync progress - handling %ld present views", v43, 0xCu);
      swift_slowDealloc(v43, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease(v36);
    }

    v44 = v36[2];
    *(_QWORD *)(v0 + 1056) = v44;
    if (v44)
    {
      *(_QWORD *)(v0 + 1064) = 0;
      v45 = *(_QWORD *)(v0 + 1048);
      v46 = *(_QWORD *)(v45 + 32);
      *(_QWORD *)(v0 + 1072) = v46;
      v47 = *(_QWORD *)(v45 + 40);
      *(_QWORD *)(v0 + 1080) = v47;
      v48 = *(_QWORD *)(v45 + 48);
      *(_QWORD *)(v0 + 1088) = v48;
      v49 = *(_QWORD *)(v45 + 56);
      *(_QWORD *)(v0 + 1096) = v49;
      v50 = *(_QWORD *)(v45 + 64);
      *(_QWORD *)(v0 + 1104) = v50;
      v51 = *(_QWORD *)(v45 + 72);
      *(_QWORD *)(v0 + 1112) = v51;
      v52 = *(_BYTE *)(v45 + 80);
      v53 = *(void **)(v45 + 88);
      *(_QWORD *)(v0 + 1120) = v53;
      *(_QWORD *)(v0 + 184) = v48;
      *(_QWORD *)(v0 + 192) = v49;
      *(_QWORD *)(v0 + 200) = v50;
      *(_QWORD *)(v0 + 208) = v51;
      *(_BYTE *)(v0 + 216) = v52;
      sub_100063C8C(v46, v47);
      swift_bridgeObjectRetain(v49);
      sub_100063C8C(v50, v51);
      v54 = dword_100346BA4;
      v55 = v53;
      v56 = (_QWORD *)swift_task_alloc(v54);
      *(_QWORD *)(v0 + 1128) = v56;
      *v56 = v0;
      v56[1] = sub_1001080D4;
      return sub_100111D10(*(_QWORD *)(v0 + 584), *(_QWORD *)(v0 + 592), v46, v47, v0 + 184, (uint64_t)v55, *(_QWORD *)(v0 + 608), *(_QWORD *)(v0 + 712));
    }
    v66 = *(_QWORD *)(v0 + 1048);
    v67 = *(_QWORD *)(v0 + 1040);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 712));
    swift_bridgeObjectRelease(v66);
    v151 = v67;
    v68 = *(_QWORD *)(v67 + 16);
    if (v68)
    {
      v69 = *(_QWORD *)(v0 + 1040);
      v70 = v69 + 32;
      v71 = *(_QWORD *)(v0 + 552);
      swift_bridgeObjectRetain(v69);
      v144 = v70;
      v145 = v68;
      v147 = v71;
      v72 = *(_QWORD *)(v71 + 16);
      if (v72)
      {
        v73 = v70;
        v75 = *(_QWORD *)(v70 + 8);
        v74 = *(_QWORD *)(v70 + 16);
        v76 = *(_QWORD *)(v73 + 24);
        v77 = *(void **)(v73 + 40);
        v146 = 1;
        swift_bridgeObjectRetain_n(v71, 2);
        v148 = v75;
        swift_bridgeObjectRetain(v75);
        v149 = v76;
        v150 = v74;
        sub_100063C8C(v74, v76);
        v152 = v77;
        v78 = (uint64_t *)(v71 + 48);
        do
        {
          v155 = v72;
          v80 = *(v78 - 2);
          v79 = *(v78 - 1);
          v82 = *v78;
          v81 = v78[1];
          v84 = v78[2];
          v83 = v78[3];
          v86 = v78[4];
          v85 = v78[5];
          sub_100063C8C(v80, v79);
          sub_100063C8C(v82, v81);
          sub_100063C8C(v84, v83);
          sub_100063C8C(v86, v85);
          sub_100063C8C(v80, v79);
          v87 = objc_msgSend(v152, "currentTLK", v144, v145, v146);
          if (v87)
          {
            v88 = v87;
            v89 = objc_msgSend(v87, "tlkUUID");

            static Data._unconditionallyBridgeFromObjectiveC(_:)(v89);
            __asm { BR              X8 }
          }
          sub_10006B9B4(v80, v79);
          sub_10006B9B4(0, 0xF000000000000000);
          sub_100063CD0(v80, v79);
          sub_100063CD0(v82, v81);
          sub_100063CD0(v84, v83);
          sub_100063CD0(v86, v85);
          v78 += 9;
          v72 = v155 - 1;
        }
        while (v155 != 1);
        v91 = *(_QWORD *)(v0 + 1040);
        swift_bridgeObjectRelease(v148);
        swift_bridgeObjectRelease_n(v147, 2);
        sub_100063CD0(v150, v149);
        swift_bridgeObjectRelease(v91);

      }
      else
      {
        swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1040));
      }
      LODWORD(v90) = 1;
    }
    else
    {
      LODWORD(v90) = 0;
    }
    v92 = *(_QWORD *)(v0 + 600);
    v93 = v90 ^ 1;
    v94 = (void *)objc_opt_self(SESAlarm);
    v95 = String._bridgeToObjectiveC()();
    v96 = objc_msgSend(v94, "isAlarmSet:", v95);

    v97 = swift_retain(v92);
    v98 = Logger.logObject.getter(v97);
    v102 = static os_log_type_t.info.getter(v98, v99, v100, v101);
    v103 = os_log_type_enabled(v98, v102);
    v104 = *(_QWORD *)(v0 + 600);
    if (v103)
    {
      v156 = v90;
      v90 = swift_slowAlloc(24, -1);
      *(_DWORD *)v90 = 67109632;
      *(_DWORD *)(v0 + 220) = v93;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 220, v0 + 224, v90 + 4, v90 + 8);
      *(_WORD *)(v90 + 8) = 1024;
      *(_DWORD *)(v0 + 180) = v96;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 180, v0 + 184, v90 + 10, v90 + 14);
      *(_WORD *)(v90 + 14) = 2048;
      v105 = (__int128 *)(v104 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__errorCount);
      swift_beginAccess(v104 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__errorCount, v0 + 392, 0, 0);
      v106 = *v105;
      v107 = v105[1];
      *(_OWORD *)(v0 + 161) = *(__int128 *)((char *)v105 + 25);
      *(_OWORD *)(v0 + 136) = v106;
      *(_OWORD *)(v0 + 152) = v107;
      *(_OWORD *)(v0 + 536) = *v105;
      *(_OWORD *)(v0 + 520) = *(_OWORD *)(v0 + 152);
      sub_10006F87C(v0 + 536);
      v108 = sub_10006F87C(v0 + 520);
      sub_100153718(v108);
      v110 = v109;
      sub_10006F8A4(v0 + 536);
      sub_10006F8A4(v0 + 520);
      *(_QWORD *)(v0 + 576) = v110;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 576, v0 + 584, v90 + 16, v90 + 24);
      swift_release(v104);
      _os_log_impl((void *)&_mh_execute_header, v98, v102, "Sync progress -- completed w/ haveAllViewsOnSE %{BOOL}d retryInFlight %{BOOL}d errorCount %ld", (uint8_t *)v90, 0x18u);
      v111 = v90;
      LOBYTE(v90) = v156;
      swift_slowDealloc(v111, -1, -1);
    }
    else
    {
      swift_release(v104);
    }
    v112 = *(_QWORD *)(v0 + 600);

    *(_BYTE *)(v112 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_allViewsSynchronized) = v93;
    if ((v90 & 1) == 0)
    {
      sub_1000FB490(0, &OBJC_IVAR____TtC10seserviced16SEKeySyncManager__recoveryRequiredPref);
      if ((v96 & 1) == 0)
      {
        v113 = (__int128 *)(*(_QWORD *)(v0 + 600) + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__errorCount);
        swift_beginAccess(v113, v0 + 416, 0, 0);
        v114 = *v113;
        v115 = v113[1];
        *(_OWORD *)(v0 + 113) = *(__int128 *)((char *)v113 + 25);
        *(_OWORD *)(v0 + 88) = v114;
        *(_OWORD *)(v0 + 104) = v115;
        *(_OWORD *)(v0 + 504) = *v113;
        *(_OWORD *)(v0 + 488) = *(_OWORD *)(v0 + 104);
        sub_10006F87C(v0 + 504);
        v116 = sub_10006F87C(v0 + 488);
        sub_100153718(v116);
        v118 = v117;
        sub_10006F8A4(v0 + 504);
        sub_10006F8A4(v0 + 488);
        if (v118 >= 1)
        {
          v119 = swift_beginAccess(v113, v0 + 368, 33, 0);
          v120 = *v113;
          v121 = v113[1];
          *(_OWORD *)(v0 + 41) = *(__int128 *)((char *)v113 + 25);
          *(_OWORD *)(v0 + 16) = v120;
          *(_OWORD *)(v0 + 32) = v121;
          sub_100153718(v119);
          v123 = __OFSUB__(v122, 1);
          v124 = v122 - 1;
          if (v123)
            __break(1u);
          sub_100120358(v124);
          swift_endAccess(v0 + 368);
        }
      }
    }
    v125 = *(_QWORD *)(v151 + 16);
    v126 = *(_QWORD *)(v0 + 1040);
    if (v125)
    {
      v127 = (void **)(swift_bridgeObjectRetain(v126) + 72);
      while (1)
      {
        v129 = (uint64_t)*(v127 - 4);
        v128 = (uint64_t)*(v127 - 3);
        v130 = (unint64_t)*(v127 - 2);
        v131 = *v127;
        swift_bridgeObjectRetain(v129);
        sub_100063C8C(v128, v130);
        v132 = v131;
        v133 = objc_msgSend(v132, "viewName");
        v134 = static String._unconditionallyBridgeFromObjectiveC(_:)(v133);
        v136 = v135;

        if (v134 == 0x4354502D4553 && v136 == 0xE600000000000000)
        {
          v140 = *(_QWORD *)(v0 + 1040);
          swift_bridgeObjectRelease(v129);
          swift_bridgeObjectRelease(0xE600000000000000);
          sub_100063CD0(v128, v130);

          goto LABEL_56;
        }
        v138 = _stringCompareWithSmolCheck(_:_:expecting:)(v134, v136, 0x4354502D4553, 0xE600000000000000, 0);
        swift_bridgeObjectRelease(v129);
        swift_bridgeObjectRelease(v136);
        sub_100063CD0(v128, v130);

        if ((v138 & 1) != 0)
          break;
        v127 += 6;
        if (!--v125)
        {
          v139 = *(void **)(v0 + 640);
          swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 1040), 2);
          goto LABEL_57;
        }
      }
      v140 = *(_QWORD *)(v0 + 1040);
LABEL_56:
      swift_bridgeObjectRelease_n(v140, 2);
      v141 = *(_QWORD *)(v0 + 600);
      v142 = OBJC_IVAR____TtC10seserviced16SEKeySyncManager_notifiedPassdOfFidoViewSynced;
      v139 = *(void **)(v0 + 640);
      if ((*(_BYTE *)(v141 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_notifiedPassdOfFidoViewSynced) & 1) == 0)
      {
        v143 = *(_QWORD *)(v0 + 608);
        notify_post("com.apple.seserviced.keysync.fido.tlk.synced");

        sub_1001247E8(v143, type metadata accessor for SESPeerIdentityData);
        *(_BYTE *)(v141 + v142) = 1;
LABEL_59:
        swift_bridgeObjectRelease(*(_QWORD *)(v0 + 552));
        swift_task_dealloc(*(_QWORD *)(v0 + 608));
        __asm { BR              X0 }
      }
    }
    else
    {
      v139 = *(void **)(v0 + 640);
      swift_bridgeObjectRelease(v126);
    }
LABEL_57:

    sub_1001247E8(*(_QWORD *)(v0 + 608), type metadata accessor for SESPeerIdentityData);
    goto LABEL_59;
  }
  v15 = *(_QWORD *)(v0 + 600);
  v16 = OBJC_IVAR____TtC10seserviced16SEKeySyncManager__recoveryForce;
  *(_QWORD *)(v0 + 912) = OBJC_IVAR____TtC10seserviced16SEKeySyncManager__recoveryForce;
  swift_beginAccess(v15 + v16, v0 + 440, 0, 0);
  *(_BYTE *)(v0 + 130) = 0;
  *(_QWORD *)(v0 + 920) = 0;
  v17 = *(_QWORD *)(v0 + 896);
  if (!*(_QWORD *)(v17 + 16))
  {
    __break(1u);
    JUMPOUT(0x100105864);
  }
  v18 = *(_QWORD *)(v0 + 600) + *(_QWORD *)(v0 + 912);
  v158 = *(_QWORD *)(v17 + 32);
  *(_QWORD *)(v0 + 928) = v158;
  v19 = *(_QWORD *)(v17 + 40);
  *(_QWORD *)(v0 + 936) = v19;
  v20 = *(_QWORD *)(v17 + 48);
  *(_QWORD *)(v0 + 944) = v20;
  v21 = *(_QWORD *)(v17 + 56);
  *(_QWORD *)(v0 + 952) = v21;
  v154 = *(_BYTE *)(v17 + 64);
  v22 = *(void **)(v17 + 72);
  *(_QWORD *)(v0 + 960) = v22;
  v23 = *(_QWORD *)(v18 + 8);
  v24 = *(_QWORD *)(v18 + 24);
  v153 = *(_BYTE *)(v18 + 32);
  v25 = *(unsigned __int8 *)(v18 + 33);
  v157 = v19;
  swift_bridgeObjectRetain(v19);
  sub_100063C8C(v20, v21);
  v26 = v22;
  swift_bridgeObjectRetain(v23);
  v27 = swift_bridgeObjectRetain(v24);
  if (v25 == 1 && !SESInternalVariant(v27))
  {
    swift_bridgeObjectRelease(v24);
    swift_bridgeObjectRelease(v23);
    *(_QWORD *)(v0 + 264) = v158;
    *(_QWORD *)(v0 + 272) = v157;
    *(_QWORD *)(v0 + 280) = v20;
    *(_QWORD *)(v0 + 288) = v21;
    *(_BYTE *)(v0 + 296) = v154;
    goto LABEL_24;
  }
  v28 = objc_allocWithZone((Class)NSUserDefaults);
  swift_bridgeObjectRetain(v23);
  v29 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v23);
  v30 = objc_msgSend(v28, "initWithSuiteName:", v29);

  if (!v30)
  {
    __break(1u);
    JUMPOUT(0x100105890);
  }
  v31 = (char *)(v0 + 85);
  v32 = String._bridgeToObjectiveC()();
  v33 = objc_msgSend(v30, "valueForKey:", v32);

  if (v33)
  {
    _bridgeAnyObjectToAny(_:)((_QWORD *)(v0 + 336));
    swift_unknownObjectRelease(v33);
    sub_10006C2B4((_OWORD *)(v0 + 336), (_OWORD *)(v0 + 304));
  }
  else
  {
    *(_OWORD *)(v0 + 304) = 0u;
    *(_OWORD *)(v0 + 320) = 0u;
  }
  v58 = sub_100063D3C((uint64_t *)&unk_100346130);
  if (swift_dynamicCast(v0 + 85, v0 + 304, v58, &type metadata for Bool, 6))
  {
    v59 = *v31;
  }
  else
  {
    v59 = 2;
    *v31 = 2;
  }
  swift_bridgeObjectRelease(v24);
  swift_bridgeObjectRelease(v23);
  *(_QWORD *)(v0 + 264) = v158;
  *(_QWORD *)(v0 + 272) = v157;
  *(_QWORD *)(v0 + 280) = v20;
  *(_QWORD *)(v0 + 288) = v21;
  *(_BYTE *)(v0 + 296) = v154;
  if (v59 == 2)
  {
LABEL_24:
    if ((v153 & 1) != 0)
      goto LABEL_22;
    goto LABEL_25;
  }
  if ((v59 & 1) != 0)
  {
LABEL_22:
    v60 = *(_QWORD *)(v0 + 952);
    v61 = *(_QWORD *)(v0 + 944);
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 936));
    sub_100063C8C(v61, v60);
    sub_100063CD0(v61, v60);
    v62 = (_QWORD *)swift_task_alloc(dword_100346B9C);
    *(_QWORD *)(v0 + 992) = v62;
    *v62 = v0;
    v62[1] = sub_100105ED8;
    return sub_100110BAC(*(_QWORD *)(v0 + 928), *(_QWORD *)(v0 + 936), *(_QWORD *)(v0 + 960), *(_QWORD *)(v0 + 712), *(_QWORD *)(v0 + 608), *(_QWORD *)(v0 + 640), *(_QWORD *)(v0 + 584), *(_QWORD *)(v0 + 592));
  }
LABEL_25:
  v63 = *(_QWORD *)(v0 + 552);
  *(_QWORD *)(v0 + 968) = v63;
  v64 = dword_100346B94;
  swift_bridgeObjectRetain(v63);
  v65 = (_QWORD *)swift_task_alloc(v64);
  *(_QWORD *)(v0 + 976) = v65;
  *v65 = v0;
  v65[1] = sub_1001058C0;
  return sub_100122CB4(v0 + 264, (uint64_t)v26, *(_QWORD *)(v0 + 608));
}

uint64_t sub_1001058C0(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 976);
  *(_QWORD *)(*v2 + 984) = v1;
  swift_task_dealloc(v5);
  v6 = *(_QWORD *)(v4 + 968);
  if (v1)
  {
    v7 = *(_QWORD *)(v4 + 896);
    v8 = *(_QWORD *)(v4 + 888);
    v9 = *(_QWORD *)(v4 + 600);
    swift_bridgeObjectRelease(*(_QWORD *)(v4 + 712));
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v7);
    v10 = sub_100105E1C;
    v11 = v9;
  }
  else
  {
    v12 = *(_QWORD *)(v4 + 600);
    swift_bridgeObjectRelease(*(_QWORD *)(v4 + 968));
    *(_BYTE *)(v4 + 131) = a1 & 1;
    v10 = sub_1001059C4;
    v11 = v12;
  }
  return swift_task_switch(v10, v11, 0);
}

void sub_1001059C4()
{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  id v22;
  uint64_t v23;
  id v24;
  NSString v25;
  id v26;
  char *v27;
  NSString v28;
  id v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;

  if ((*(_BYTE *)(v0 + 131) & 1) == 0)
    goto LABEL_16;
  v1 = *(void **)(v0 + 960);
  v2 = *(_QWORD *)(v0 + 952);
  v3 = *(_QWORD *)(v0 + 944);
  v4 = *(_QWORD *)(v0 + 920);
  v5 = *(_QWORD *)(v0 + 904);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 936));
  sub_100063CD0(v3, v2);

  if (v4 + 1 == v5)
  {
    v6 = *(_QWORD *)(v0 + 896);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 888));
    swift_bridgeObjectRelease(v6);
    v7 = swift_task_alloc(dword_100346B6C);
    *(_QWORD *)(v0 + 1008) = v7;
    *(_QWORD *)v7 = v0;
    *(_QWORD *)(v7 + 8) = sub_1001071E4;
    v8 = *(_QWORD *)(v0 + 600);
    v9 = *(_OWORD *)(v0 + 584);
    *(_QWORD *)(v7 + 32) = v8;
    *(_OWORD *)(v7 + 16) = v9;
    swift_task_switch(sub_1001099DC, v8, 0);
    return;
  }
  v10 = *(_QWORD *)(v0 + 920) + 1;
  *(_BYTE *)(v0 + 130) = 1;
  *(_QWORD *)(v0 + 920) = v10;
  v11 = *(_QWORD *)(v0 + 896);
  if (v10 >= *(_QWORD *)(v11 + 16))
    __break(1u);
  v12 = *(_QWORD *)(v0 + 600) + *(_QWORD *)(v0 + 912);
  v13 = v11 + 48 * v10;
  v41 = *(_QWORD *)(v13 + 32);
  *(_QWORD *)(v0 + 928) = v41;
  v14 = *(_QWORD *)(v13 + 40);
  *(_QWORD *)(v0 + 936) = v14;
  v15 = *(_QWORD *)(v13 + 48);
  *(_QWORD *)(v0 + 944) = v15;
  v16 = *(_QWORD *)(v13 + 56);
  *(_QWORD *)(v0 + 952) = v16;
  v17 = *(_BYTE *)(v13 + 64);
  v18 = *(void **)(v13 + 72);
  *(_QWORD *)(v0 + 960) = v18;
  v19 = *(_QWORD *)(v12 + 8);
  v20 = *(_QWORD *)(v12 + 24);
  v38 = *(_BYTE *)(v12 + 32);
  v39 = v17;
  v21 = *(unsigned __int8 *)(v12 + 33);
  v40 = v14;
  swift_bridgeObjectRetain(v14);
  sub_100063C8C(v15, v16);
  v22 = v18;
  swift_bridgeObjectRetain(v19);
  v23 = swift_bridgeObjectRetain(v20);
  if (v21 == 1 && !SESInternalVariant(v23))
  {
    swift_bridgeObjectRelease(v20);
    swift_bridgeObjectRelease(v19);
    *(_QWORD *)(v0 + 264) = v41;
    *(_QWORD *)(v0 + 272) = v40;
    *(_QWORD *)(v0 + 280) = v15;
    *(_QWORD *)(v0 + 288) = v16;
    *(_BYTE *)(v0 + 296) = v39;
    goto LABEL_18;
  }
  v24 = objc_allocWithZone((Class)NSUserDefaults);
  swift_bridgeObjectRetain(v19);
  v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v19);
  v26 = objc_msgSend(v24, "initWithSuiteName:", v25);

  if (v26)
  {
    v27 = (char *)(v0 + 85);
    v28 = String._bridgeToObjectiveC()();
    v29 = objc_msgSend(v26, "valueForKey:", v28);

    if (v29)
    {
      _bridgeAnyObjectToAny(_:)((_QWORD *)(v0 + 336));
      swift_unknownObjectRelease(v29);
      sub_10006C2B4((_OWORD *)(v0 + 336), (_OWORD *)(v0 + 304));
    }
    else
    {
      *(_OWORD *)(v0 + 304) = 0u;
      *(_OWORD *)(v0 + 320) = 0u;
    }
    v30 = sub_100063D3C((uint64_t *)&unk_100346130);
    if (swift_dynamicCast(v0 + 85, v0 + 304, v30, &type metadata for Bool, 6))
    {
      v31 = *v27;
    }
    else
    {
      v31 = 2;
      *v27 = 2;
    }
    swift_bridgeObjectRelease(v20);
    swift_bridgeObjectRelease(v19);
    *(_QWORD *)(v0 + 264) = v41;
    *(_QWORD *)(v0 + 272) = v40;
    *(_QWORD *)(v0 + 280) = v15;
    *(_QWORD *)(v0 + 288) = v16;
    *(_BYTE *)(v0 + 296) = v39;
    if (v31 != 2)
    {
      if ((v31 & 1) != 0)
      {
LABEL_16:
        v32 = *(_QWORD *)(v0 + 952);
        v33 = *(_QWORD *)(v0 + 944);
        swift_bridgeObjectRetain(*(_QWORD *)(v0 + 936));
        sub_100063C8C(v33, v32);
        sub_100063CD0(v33, v32);
        v34 = (_QWORD *)swift_task_alloc(dword_100346B9C);
        *(_QWORD *)(v0 + 992) = v34;
        *v34 = v0;
        v34[1] = sub_100105ED8;
        sub_100110BAC(*(_QWORD *)(v0 + 928), *(_QWORD *)(v0 + 936), *(_QWORD *)(v0 + 960), *(_QWORD *)(v0 + 712), *(_QWORD *)(v0 + 608), *(_QWORD *)(v0 + 640), *(_QWORD *)(v0 + 584), *(_QWORD *)(v0 + 592));
        return;
      }
      goto LABEL_19;
    }
LABEL_18:
    if ((v38 & 1) != 0)
      goto LABEL_16;
LABEL_19:
    v35 = *(_QWORD *)(v0 + 552);
    *(_QWORD *)(v0 + 968) = v35;
    v36 = dword_100346B94;
    swift_bridgeObjectRetain(v35);
    v37 = (_QWORD *)swift_task_alloc(v36);
    *(_QWORD *)(v0 + 976) = v37;
    *v37 = v0;
    v37[1] = sub_1001058C0;
    sub_100122CB4(v0 + 264, (uint64_t)v22, *(_QWORD *)(v0 + 608));
    return;
  }
  __break(1u);
}

uint64_t sub_100105E1C()
{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(void **)(v0 + 960);
  v2 = *(_QWORD *)(v0 + 952);
  v3 = *(_QWORD *)(v0 + 944);
  v4 = *(_QWORD *)(v0 + 936);
  v5 = *(_QWORD *)(v0 + 608);

  swift_bridgeObjectRelease(v4);
  sub_100063CD0(v3, v2);

  sub_1001247E8(v5, type metadata accessor for SESPeerIdentityData);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 552));
  swift_task_dealloc(*(_QWORD *)(v0 + 608));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100105ED8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 992);
  *(_QWORD *)(*(_QWORD *)v1 + 1000) = v0;
  swift_task_dealloc(v3);
  v4 = v2[117];
  if (v0)
  {
    v5 = v2[112];
    v6 = v2[111];
    v7 = v2[75];
    swift_bridgeObjectRelease(v2[89]);
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v5);
    v8 = sub_100109370;
  }
  else
  {
    v7 = v2[75];
    swift_bridgeObjectRelease(v2[117]);
    v8 = sub_100105FCC;
  }
  return swift_task_switch(v8, v7, 0);
}

uint64_t sub_100105FCC()
{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  id v22;
  uint64_t v23;
  id v24;
  NSString v25;
  id v26;
  char *v27;
  NSString v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  void *v55;
  uint64_t v56;
  id v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  void *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  id v82;
  void *v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  void *v89;
  NSString v90;
  unsigned int v91;
  uint64_t v92;
  NSObject *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  os_log_type_t v97;
  BOOL v98;
  uint64_t v99;
  __int128 *v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 *v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  BOOL v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void **v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  void *v126;
  id v127;
  id v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  id v144;
  char v145;
  char v146;
  uint64_t v147;
  char v148;
  uint64_t v149;
  uint64_t v150;

  v1 = *(void **)(v0 + 960);
  v2 = *(_QWORD *)(v0 + 952);
  v3 = *(_QWORD *)(v0 + 944);
  v4 = *(_QWORD *)(v0 + 920);
  v5 = *(_QWORD *)(v0 + 904);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 936));
  sub_100063CD0(v3, v2);

  if (v4 + 1 == v5)
  {
    v6 = *(_BYTE *)(v0 + 130);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 896));
    if ((v6 & 1) != 0)
    {
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 888));
      v7 = swift_task_alloc(dword_100346B6C);
      *(_QWORD *)(v0 + 1008) = v7;
      *(_QWORD *)v7 = v0;
      *(_QWORD *)(v7 + 8) = sub_1001071E4;
      v8 = *(_QWORD *)(v0 + 600);
      v9 = *(_OWORD *)(v0 + 584);
      *(_QWORD *)(v7 + 32) = v8;
      *(_OWORD *)(v7 + 16) = v9;
      return swift_task_switch(sub_1001099DC, v8, 0);
    }
    v30 = *(_QWORD *)(v0 + 888);
    *(_QWORD *)(v0 + 1040) = v30;
    v31 = swift_task_alloc(32);
    *(_QWORD *)(v31 + 16) = v0 + 552;
    v32 = swift_bridgeObjectRetain(v30);
    v33 = sub_100122AE4(v32, (void (*)(_QWORD *__return_ptr, _QWORD *, id))sub_1001243B4);
    *(_QWORD *)(v0 + 1048) = v33;
    swift_bridgeObjectRelease(v30);
    swift_task_dealloc(v31);
    v34 = swift_bridgeObjectRetain(v33);
    v35 = Logger.logObject.getter(v34);
    v39 = static os_log_type_t.info.getter(v35, v36, v37, v38);
    if (os_log_type_enabled(v35, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v40 = 134217984;
      *(_QWORD *)(v0 + 560) = v33[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 560, v0 + 568, v40 + 4, v40 + 12);
      swift_bridgeObjectRelease(v33);
      _os_log_impl((void *)&_mh_execute_header, v35, v39, "Sync progress - handling %ld present views", v40, 0xCu);
      swift_slowDealloc(v40, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease(v33);
    }

    v46 = v33[2];
    *(_QWORD *)(v0 + 1056) = v46;
    if (v46)
    {
      *(_QWORD *)(v0 + 1064) = 0;
      v47 = *(_QWORD *)(v0 + 1048);
      v48 = *(_QWORD *)(v47 + 32);
      *(_QWORD *)(v0 + 1072) = v48;
      v49 = *(_QWORD *)(v47 + 40);
      *(_QWORD *)(v0 + 1080) = v49;
      v50 = *(_QWORD *)(v47 + 48);
      *(_QWORD *)(v0 + 1088) = v50;
      v51 = *(_QWORD *)(v47 + 56);
      *(_QWORD *)(v0 + 1096) = v51;
      v52 = *(_QWORD *)(v47 + 64);
      *(_QWORD *)(v0 + 1104) = v52;
      v53 = *(_QWORD *)(v47 + 72);
      *(_QWORD *)(v0 + 1112) = v53;
      v54 = *(_BYTE *)(v47 + 80);
      v55 = *(void **)(v47 + 88);
      *(_QWORD *)(v0 + 1120) = v55;
      *(_QWORD *)(v0 + 184) = v50;
      *(_QWORD *)(v0 + 192) = v51;
      *(_QWORD *)(v0 + 200) = v52;
      *(_QWORD *)(v0 + 208) = v53;
      *(_BYTE *)(v0 + 216) = v54;
      sub_100063C8C(v48, v49);
      swift_bridgeObjectRetain(v51);
      sub_100063C8C(v52, v53);
      v56 = dword_100346BA4;
      v57 = v55;
      v58 = (_QWORD *)swift_task_alloc(v56);
      *(_QWORD *)(v0 + 1128) = v58;
      *v58 = v0;
      v58[1] = sub_1001080D4;
      return sub_100111D10(*(_QWORD *)(v0 + 584), *(_QWORD *)(v0 + 592), v48, v49, v0 + 184, (uint64_t)v57, *(_QWORD *)(v0 + 608), *(_QWORD *)(v0 + 712));
    }
    v62 = *(_QWORD *)(v0 + 1048);
    v63 = *(_QWORD *)(v0 + 1040);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 712));
    swift_bridgeObjectRelease(v62);
    v143 = v63;
    if (*(_QWORD *)(v63 + 16))
    {
      v64 = *(_QWORD *)(v0 + 1040);
      v65 = v64 + 32;
      v66 = *(_QWORD *)(v0 + 552);
      swift_bridgeObjectRetain(v64);
      v67 = (uint64_t *)(v66 + 48);
      v139 = v66;
      v68 = *(_QWORD *)(v66 + 16);
      if (v68)
      {
        v69 = v65;
        v71 = *(_QWORD *)(v65 + 8);
        v70 = *(_QWORD *)(v65 + 16);
        v72 = *(_QWORD *)(v69 + 24);
        v73 = *(void **)(v69 + 40);
        swift_bridgeObjectRetain_n(v66, 2);
        v140 = v71;
        swift_bridgeObjectRetain(v71);
        v141 = v72;
        v142 = v70;
        sub_100063C8C(v70, v72);
        v144 = v73;
        do
        {
          v147 = v68;
          v75 = *(v67 - 2);
          v74 = *(v67 - 1);
          v76 = *v67;
          v77 = v67[1];
          v79 = v67[2];
          v78 = v67[3];
          v81 = v67[4];
          v80 = v67[5];
          sub_100063C8C(v75, v74);
          sub_100063C8C(v76, v77);
          sub_100063C8C(v79, v78);
          sub_100063C8C(v81, v80);
          sub_100063C8C(v75, v74);
          v82 = objc_msgSend(v144, "currentTLK");
          if (v82)
          {
            v83 = v82;
            v84 = objc_msgSend(v82, "tlkUUID");

            static Data._unconditionallyBridgeFromObjectiveC(_:)(v84);
            __asm { BR              X8 }
          }
          sub_10006B9B4(v75, v74);
          sub_10006B9B4(0, 0xF000000000000000);
          sub_100063CD0(v75, v74);
          sub_100063CD0(v76, v77);
          sub_100063CD0(v79, v78);
          sub_100063CD0(v81, v80);
          v67 += 9;
          v68 = v147 - 1;
        }
        while (v147 != 1);
        v86 = *(_QWORD *)(v0 + 1040);
        swift_bridgeObjectRelease(v140);
        swift_bridgeObjectRelease_n(v139, 2);
        sub_100063CD0(v142, v141);
        swift_bridgeObjectRelease(v86);

      }
      else
      {
        swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1040));
      }
      LODWORD(v85) = 1;
    }
    else
    {
      LODWORD(v85) = 0;
    }
    v87 = *(_QWORD *)(v0 + 600);
    v88 = v85 ^ 1;
    v89 = (void *)objc_opt_self(SESAlarm);
    v90 = String._bridgeToObjectiveC()();
    v91 = objc_msgSend(v89, "isAlarmSet:", v90);

    v92 = swift_retain(v87);
    v93 = Logger.logObject.getter(v92);
    v97 = static os_log_type_t.info.getter(v93, v94, v95, v96);
    v98 = os_log_type_enabled(v93, v97);
    v99 = *(_QWORD *)(v0 + 600);
    if (v98)
    {
      v148 = v85;
      v85 = swift_slowAlloc(24, -1);
      *(_DWORD *)v85 = 67109632;
      *(_DWORD *)(v0 + 220) = v88;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 220, v0 + 224, v85 + 4, v85 + 8);
      *(_WORD *)(v85 + 8) = 1024;
      *(_DWORD *)(v0 + 180) = v91;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 180, v0 + 184, v85 + 10, v85 + 14);
      *(_WORD *)(v85 + 14) = 2048;
      v100 = (__int128 *)(v99 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__errorCount);
      swift_beginAccess(v99 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__errorCount, v0 + 392, 0, 0);
      v101 = *v100;
      v102 = v100[1];
      *(_OWORD *)(v0 + 161) = *(__int128 *)((char *)v100 + 25);
      *(_OWORD *)(v0 + 136) = v101;
      *(_OWORD *)(v0 + 152) = v102;
      *(_OWORD *)(v0 + 536) = *v100;
      *(_OWORD *)(v0 + 520) = *(_OWORD *)(v0 + 152);
      sub_10006F87C(v0 + 536);
      v103 = sub_10006F87C(v0 + 520);
      sub_100153718(v103);
      v105 = v104;
      sub_10006F8A4(v0 + 536);
      sub_10006F8A4(v0 + 520);
      *(_QWORD *)(v0 + 576) = v105;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 576, v0 + 584, v85 + 16, v85 + 24);
      swift_release(v99);
      _os_log_impl((void *)&_mh_execute_header, v93, v97, "Sync progress -- completed w/ haveAllViewsOnSE %{BOOL}d retryInFlight %{BOOL}d errorCount %ld", (uint8_t *)v85, 0x18u);
      v106 = v85;
      LOBYTE(v85) = v148;
      swift_slowDealloc(v106, -1, -1);
    }
    else
    {
      swift_release(v99);
    }
    v107 = *(_QWORD *)(v0 + 600);

    *(_BYTE *)(v107 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_allViewsSynchronized) = v88;
    if ((v85 & 1) == 0)
    {
      sub_1000FB490(0, &OBJC_IVAR____TtC10seserviced16SEKeySyncManager__recoveryRequiredPref);
      if ((v91 & 1) == 0)
      {
        v108 = (__int128 *)(*(_QWORD *)(v0 + 600) + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__errorCount);
        swift_beginAccess(v108, v0 + 416, 0, 0);
        v109 = *v108;
        v110 = v108[1];
        *(_OWORD *)(v0 + 113) = *(__int128 *)((char *)v108 + 25);
        *(_OWORD *)(v0 + 88) = v109;
        *(_OWORD *)(v0 + 104) = v110;
        *(_OWORD *)(v0 + 504) = *v108;
        *(_OWORD *)(v0 + 488) = *(_OWORD *)(v0 + 104);
        sub_10006F87C(v0 + 504);
        v111 = sub_10006F87C(v0 + 488);
        sub_100153718(v111);
        v113 = v112;
        sub_10006F8A4(v0 + 504);
        sub_10006F8A4(v0 + 488);
        if (v113 >= 1)
        {
          v114 = swift_beginAccess(v108, v0 + 368, 33, 0);
          v115 = *v108;
          v116 = v108[1];
          *(_OWORD *)(v0 + 41) = *(__int128 *)((char *)v108 + 25);
          *(_OWORD *)(v0 + 16) = v115;
          *(_OWORD *)(v0 + 32) = v116;
          sub_100153718(v114);
          v118 = __OFSUB__(v117, 1);
          v119 = v117 - 1;
          if (v118)
            __break(1u);
          sub_100120358(v119);
          swift_endAccess(v0 + 368);
        }
      }
    }
    v120 = *(_QWORD *)(v143 + 16);
    v121 = *(_QWORD *)(v0 + 1040);
    if (v120)
    {
      v122 = (void **)(swift_bridgeObjectRetain(v121) + 72);
      while (1)
      {
        v124 = (uint64_t)*(v122 - 4);
        v123 = (uint64_t)*(v122 - 3);
        v125 = (unint64_t)*(v122 - 2);
        v126 = *v122;
        swift_bridgeObjectRetain(v124);
        sub_100063C8C(v123, v125);
        v127 = v126;
        v128 = objc_msgSend(v127, "viewName");
        v129 = static String._unconditionallyBridgeFromObjectiveC(_:)(v128);
        v131 = v130;

        if (v129 == 0x4354502D4553 && v131 == 0xE600000000000000)
        {
          v135 = *(_QWORD *)(v0 + 1040);
          swift_bridgeObjectRelease(v124);
          swift_bridgeObjectRelease(0xE600000000000000);
          sub_100063CD0(v123, v125);

          goto LABEL_55;
        }
        v133 = _stringCompareWithSmolCheck(_:_:expecting:)(v129, v131, 0x4354502D4553, 0xE600000000000000, 0);
        swift_bridgeObjectRelease(v124);
        swift_bridgeObjectRelease(v131);
        sub_100063CD0(v123, v125);

        if ((v133 & 1) != 0)
          break;
        v122 += 6;
        if (!--v120)
        {
          v134 = *(void **)(v0 + 640);
          swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 1040), 2);
          goto LABEL_56;
        }
      }
      v135 = *(_QWORD *)(v0 + 1040);
LABEL_55:
      swift_bridgeObjectRelease_n(v135, 2);
      v136 = *(_QWORD *)(v0 + 600);
      v137 = OBJC_IVAR____TtC10seserviced16SEKeySyncManager_notifiedPassdOfFidoViewSynced;
      v134 = *(void **)(v0 + 640);
      if ((*(_BYTE *)(v136 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_notifiedPassdOfFidoViewSynced) & 1) == 0)
      {
        v138 = *(_QWORD *)(v0 + 608);
        notify_post("com.apple.seserviced.keysync.fido.tlk.synced");

        sub_1001247E8(v138, type metadata accessor for SESPeerIdentityData);
        *(_BYTE *)(v136 + v137) = 1;
LABEL_58:
        swift_bridgeObjectRelease(*(_QWORD *)(v0 + 552));
        swift_task_dealloc(*(_QWORD *)(v0 + 608));
        __asm { BR              X0 }
      }
    }
    else
    {
      v134 = *(void **)(v0 + 640);
      swift_bridgeObjectRelease(v121);
    }
LABEL_56:

    sub_1001247E8(*(_QWORD *)(v0 + 608), type metadata accessor for SESPeerIdentityData);
    goto LABEL_58;
  }
  v11 = *(_QWORD *)(v0 + 920) + 1;
  *(_QWORD *)(v0 + 920) = v11;
  v12 = *(_QWORD *)(v0 + 896);
  if (v11 >= *(_QWORD *)(v12 + 16))
  {
    __break(1u);
    JUMPOUT(0x100107188);
  }
  v13 = *(_QWORD *)(v0 + 600) + *(_QWORD *)(v0 + 912);
  v14 = v12 + 48 * v11;
  v150 = *(_QWORD *)(v14 + 32);
  *(_QWORD *)(v0 + 928) = v150;
  v15 = *(_QWORD *)(v14 + 40);
  *(_QWORD *)(v0 + 936) = v15;
  v16 = *(_QWORD *)(v14 + 48);
  *(_QWORD *)(v0 + 944) = v16;
  v17 = *(_QWORD *)(v14 + 56);
  *(_QWORD *)(v0 + 952) = v17;
  v146 = *(_BYTE *)(v14 + 64);
  v18 = *(void **)(v14 + 72);
  *(_QWORD *)(v0 + 960) = v18;
  v19 = *(_QWORD *)(v13 + 8);
  v20 = *(_QWORD *)(v13 + 24);
  v145 = *(_BYTE *)(v13 + 32);
  v21 = *(unsigned __int8 *)(v13 + 33);
  v149 = v15;
  swift_bridgeObjectRetain(v15);
  sub_100063C8C(v16, v17);
  v22 = v18;
  swift_bridgeObjectRetain(v19);
  v23 = swift_bridgeObjectRetain(v20);
  if (v21 == 1 && !SESInternalVariant(v23))
  {
    swift_bridgeObjectRelease(v20);
    swift_bridgeObjectRelease(v19);
    *(_QWORD *)(v0 + 264) = v150;
    *(_QWORD *)(v0 + 272) = v149;
    *(_QWORD *)(v0 + 280) = v16;
    *(_QWORD *)(v0 + 288) = v17;
    *(_BYTE *)(v0 + 296) = v146;
    goto LABEL_23;
  }
  v24 = objc_allocWithZone((Class)NSUserDefaults);
  swift_bridgeObjectRetain(v19);
  v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v19);
  v26 = objc_msgSend(v24, "initWithSuiteName:", v25);

  if (!v26)
  {
    __break(1u);
    JUMPOUT(0x1001071B4);
  }
  v27 = (char *)(v0 + 85);
  v28 = String._bridgeToObjectiveC()();
  v29 = objc_msgSend(v26, "valueForKey:", v28);

  if (v29)
  {
    _bridgeAnyObjectToAny(_:)((_QWORD *)(v0 + 336));
    swift_unknownObjectRelease(v29);
    sub_10006C2B4((_OWORD *)(v0 + 336), (_OWORD *)(v0 + 304));
  }
  else
  {
    *(_OWORD *)(v0 + 304) = 0u;
    *(_OWORD *)(v0 + 320) = 0u;
  }
  v41 = sub_100063D3C((uint64_t *)&unk_100346130);
  if (swift_dynamicCast(v0 + 85, v0 + 304, v41, &type metadata for Bool, 6))
  {
    v42 = *v27;
  }
  else
  {
    v42 = 2;
    *v27 = 2;
  }
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v19);
  *(_QWORD *)(v0 + 264) = v150;
  *(_QWORD *)(v0 + 272) = v149;
  *(_QWORD *)(v0 + 280) = v16;
  *(_QWORD *)(v0 + 288) = v17;
  *(_BYTE *)(v0 + 296) = v146;
  if (v42 == 2)
  {
LABEL_23:
    if ((v145 & 1) != 0)
      goto LABEL_18;
    goto LABEL_24;
  }
  if ((v42 & 1) != 0)
  {
LABEL_18:
    v43 = *(_QWORD *)(v0 + 952);
    v44 = *(_QWORD *)(v0 + 944);
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 936));
    sub_100063C8C(v44, v43);
    sub_100063CD0(v44, v43);
    v45 = (_QWORD *)swift_task_alloc(dword_100346B9C);
    *(_QWORD *)(v0 + 992) = v45;
    *v45 = v0;
    v45[1] = sub_100105ED8;
    return sub_100110BAC(*(_QWORD *)(v0 + 928), *(_QWORD *)(v0 + 936), *(_QWORD *)(v0 + 960), *(_QWORD *)(v0 + 712), *(_QWORD *)(v0 + 608), *(_QWORD *)(v0 + 640), *(_QWORD *)(v0 + 584), *(_QWORD *)(v0 + 592));
  }
LABEL_24:
  v59 = *(_QWORD *)(v0 + 552);
  *(_QWORD *)(v0 + 968) = v59;
  v60 = dword_100346B94;
  swift_bridgeObjectRetain(v59);
  v61 = (_QWORD *)swift_task_alloc(v60);
  *(_QWORD *)(v0 + 976) = v61;
  *v61 = v0;
  v61[1] = sub_1001058C0;
  return sub_100122CB4(v0 + 264, (uint64_t)v22, *(_QWORD *)(v0 + 608));
}

uint64_t sub_1001071E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v10;

  v6 = *(_QWORD **)v3;
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 1008);
  *(_QWORD *)(*(_QWORD *)v3 + 1016) = v2;
  swift_task_dealloc(v7);
  if (v2)
  {
    v8 = v6[75];
    swift_bridgeObjectRelease(v6[89]);
    v9 = sub_10010942C;
    v10 = v8;
  }
  else
  {
    v10 = v6[75];
    v6[128] = a2;
    v6[129] = a1;
    v9 = sub_1001072BC;
  }
  return swift_task_switch(v9, v10, 0);
}

uint64_t sub_1001072BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  void *v23;
  uint64_t v24;
  id v25;
  _QWORD *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  id v49;
  void *v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 *v55;
  void *v56;
  NSString v57;
  unsigned int v58;
  uint64_t v59;
  NSObject *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  os_log_type_t v64;
  BOOL v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 *v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void **v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  void *v93;
  id v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  id v117;
  uint64_t v118;
  os_log_type_t v119;
  char v120;
  char v121;

  v1 = v0 + 184;
  v2 = *(_QWORD *)(v0 + 1032);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 552));
  *(_QWORD *)(v0 + 552) = v2;
  v3 = *(_QWORD *)(v0 + 1024);
  *(_QWORD *)(v0 + 1040) = v3;
  v4 = swift_task_alloc(32);
  *(_QWORD *)(v4 + 16) = v0 + 552;
  v5 = swift_bridgeObjectRetain(v3);
  v6 = sub_100122AE4(v5, (void (*)(_QWORD *__return_ptr, _QWORD *, id))sub_1001243B4);
  *(_QWORD *)(v0 + 1048) = v6;
  swift_bridgeObjectRelease(v3);
  swift_task_dealloc(v4);
  v7 = swift_bridgeObjectRetain(v6);
  v8 = Logger.logObject.getter(v7);
  v12 = static os_log_type_t.info.getter(v8, v9, v10, v11);
  if (os_log_type_enabled(v8, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v13 = 134217984;
    *(_QWORD *)(v0 + 560) = v6[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 560, v0 + 568, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease(v6);
    _os_log_impl((void *)&_mh_execute_header, v8, v12, "Sync progress - handling %ld present views", v13, 0xCu);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease(v6);
  }

  v14 = v6[2];
  *(_QWORD *)(v0 + 1056) = v14;
  if (!v14)
  {
    v28 = *(_QWORD *)(v0 + 1048);
    v29 = *(_QWORD *)(v0 + 1040);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 712));
    swift_bridgeObjectRelease(v28);
    v115 = v29;
    v30 = *(_QWORD *)(v29 + 16);
    v116 = v0;
    if (v30)
    {
      v31 = *(_QWORD *)(v0 + 1040);
      v32 = (_QWORD *)(v31 + 32);
      v33 = *(_QWORD *)(v0 + 552);
      swift_bridgeObjectRetain(v31);
      v110 = v33;
      v111 = v0 + 184;
      v107 = v32;
      v108 = v30;
      v106 = v33 + 48;
      v34 = *(_QWORD *)(v33 + 16);
      if (v34)
      {
        v35 = v32;
        v37 = v32[1];
        v36 = v35[2];
        v38 = v35[3];
        v39 = (void *)v35[5];
        v109 = 1;
        swift_bridgeObjectRetain_n(v33, 2);
        v112 = v37;
        swift_bridgeObjectRetain(v37);
        v113 = v38;
        v114 = v36;
        sub_100063C8C(v36, v38);
        v117 = v39;
        v40 = (uint64_t *)(v33 + 48);
        do
        {
          v42 = *(v40 - 2);
          v41 = *(v40 - 1);
          v44 = *v40;
          v43 = v40[1];
          v46 = v40[2];
          v45 = v40[3];
          v47 = v40[4];
          v48 = v40[5];
          sub_100063C8C(v42, v41);
          sub_100063C8C(v44, v43);
          sub_100063C8C(v46, v45);
          sub_100063C8C(v47, v48);
          sub_100063C8C(v42, v41);
          v49 = objc_msgSend(v117, "currentTLK", v106, v107, v108, v109);
          if (v49)
          {
            v50 = v49;
            v51 = objc_msgSend(v49, "tlkUUID");

            static Data._unconditionallyBridgeFromObjectiveC(_:)(v51);
            __asm { BR              X8 }
          }
          sub_10006B9B4(v42, v41);
          sub_10006B9B4(0, 0xF000000000000000);
          sub_100063CD0(v42, v41);
          sub_100063CD0(v44, v43);
          sub_100063CD0(v46, v45);
          sub_100063CD0(v47, v48);
          v40 += 9;
          --v34;
        }
        while (v34);
        v0 = v116;
        v53 = *(_QWORD *)(v116 + 1040);
        swift_bridgeObjectRelease(v112);
        swift_bridgeObjectRelease_n(v110, 2);
        sub_100063CD0(v114, v113);
        swift_bridgeObjectRelease(v53);

        LODWORD(v52) = 1;
        v1 = v111;
      }
      else
      {
        swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1040));
        LODWORD(v52) = 1;
      }
    }
    else
    {
      LODWORD(v52) = 0;
    }
    v54 = *(_QWORD *)(v0 + 600);
    LODWORD(v55) = v52 ^ 1;
    v56 = (void *)objc_opt_self(SESAlarm);
    v57 = String._bridgeToObjectiveC()();
    v58 = objc_msgSend(v56, "isAlarmSet:", v57);

    v59 = swift_retain(v54);
    v60 = Logger.logObject.getter(v59);
    v64 = static os_log_type_t.info.getter(v60, v61, v62, v63);
    v65 = os_log_type_enabled(v60, v64);
    v66 = *(_QWORD *)(v0 + 600);
    if (v65)
    {
      v118 = v0 + 576;
      v121 = v52 ^ 1;
      v119 = v64;
      v120 = v52;
      v52 = swift_slowAlloc(24, -1);
      *(_DWORD *)v52 = 67109632;
      *(_DWORD *)(v116 + 220) = (_DWORD)v55;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 220, v116 + 224, v52 + 4, v52 + 8);
      *(_WORD *)(v52 + 8) = 1024;
      *(_DWORD *)(v116 + 180) = v58;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 180, v1, v52 + 10, v52 + 14);
      *(_WORD *)(v52 + 14) = 2048;
      v55 = (__int128 *)(v66 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__errorCount);
      swift_beginAccess(v66 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__errorCount, v0 + 392, 0, 0);
      v67 = *v55;
      v68 = v55[1];
      *(_OWORD *)(v0 + 161) = *(__int128 *)((char *)v55 + 25);
      *(_OWORD *)(v0 + 136) = v67;
      *(_OWORD *)(v0 + 152) = v68;
      v69 = *v55;
      LOBYTE(v55) = v121;
      *(_OWORD *)(v116 + 536) = v69;
      *(_OWORD *)(v116 + 520) = *(_OWORD *)(v116 + 152);
      sub_10006F87C(v116 + 536);
      v70 = sub_10006F87C(v116 + 520);
      sub_100153718(v70);
      v72 = v71;
      sub_10006F8A4(v116 + 536);
      v0 = v116;
      sub_10006F8A4(v116 + 520);
      *(_QWORD *)(v116 + 576) = v72;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v118, v116 + 584, v52 + 16, v52 + 24);
      swift_release(v66);
      _os_log_impl((void *)&_mh_execute_header, v60, v119, "Sync progress -- completed w/ haveAllViewsOnSE %{BOOL}d retryInFlight %{BOOL}d errorCount %ld", (uint8_t *)v52, 0x18u);
      v73 = v52;
      LOBYTE(v52) = v120;
      swift_slowDealloc(v73, -1, -1);
    }
    else
    {
      swift_release(v66);
    }
    v74 = *(_QWORD *)(v0 + 600);

    *(_BYTE *)(v74 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_allViewsSynchronized) = (_BYTE)v55;
    if ((v52 & 1) == 0)
    {
      sub_1000FB490(0, &OBJC_IVAR____TtC10seserviced16SEKeySyncManager__recoveryRequiredPref);
      if ((v58 & 1) == 0)
      {
        v75 = (__int128 *)(*(_QWORD *)(v0 + 600) + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__errorCount);
        swift_beginAccess(v75, v0 + 416, 0, 0);
        v76 = *v75;
        v77 = v75[1];
        *(_OWORD *)(v0 + 113) = *(__int128 *)((char *)v75 + 25);
        *(_OWORD *)(v0 + 88) = v76;
        *(_OWORD *)(v0 + 104) = v77;
        *(_OWORD *)(v0 + 504) = *v75;
        *(_OWORD *)(v0 + 488) = *(_OWORD *)(v0 + 104);
        sub_10006F87C(v0 + 504);
        v78 = sub_10006F87C(v0 + 488);
        sub_100153718(v78);
        v80 = v79;
        sub_10006F8A4(v0 + 504);
        sub_10006F8A4(v0 + 488);
        if (v80 >= 1)
        {
          v81 = swift_beginAccess(v75, v0 + 368, 33, 0);
          v82 = *v75;
          v83 = v75[1];
          *(_OWORD *)(v0 + 41) = *(__int128 *)((char *)v75 + 25);
          *(_OWORD *)(v0 + 16) = v82;
          *(_OWORD *)(v0 + 32) = v83;
          sub_100153718(v81);
          v85 = __OFSUB__(v84, 1);
          v86 = v84 - 1;
          if (v85)
            __break(1u);
          sub_100120358(v86);
          swift_endAccess(v0 + 368);
        }
      }
    }
    v87 = *(_QWORD *)(v115 + 16);
    v88 = *(_QWORD *)(v0 + 1040);
    if (v87)
    {
      v89 = (void **)(swift_bridgeObjectRetain(v88) + 72);
      while (1)
      {
        v91 = (uint64_t)*(v89 - 4);
        v90 = (uint64_t)*(v89 - 3);
        v92 = (unint64_t)*(v89 - 2);
        v93 = *v89;
        swift_bridgeObjectRetain(v91);
        sub_100063C8C(v90, v92);
        v94 = v93;
        v95 = objc_msgSend(v94, "viewName");
        v96 = static String._unconditionallyBridgeFromObjectiveC(_:)(v95);
        v98 = v97;

        if (v96 == 0x4354502D4553 && v98 == 0xE600000000000000)
        {
          v0 = v116;
          v102 = *(_QWORD *)(v116 + 1040);
          swift_bridgeObjectRelease(v91);
          swift_bridgeObjectRelease(0xE600000000000000);
          sub_100063CD0(v90, v92);

          goto LABEL_35;
        }
        v100 = _stringCompareWithSmolCheck(_:_:expecting:)(v96, v98, 0x4354502D4553, 0xE600000000000000, 0);
        swift_bridgeObjectRelease(v91);
        swift_bridgeObjectRelease(v98);
        sub_100063CD0(v90, v92);

        if ((v100 & 1) != 0)
          break;
        v89 += 6;
        if (!--v87)
        {
          v0 = v116;
          v101 = *(void **)(v116 + 640);
          swift_bridgeObjectRelease_n(*(_QWORD *)(v116 + 1040), 2);
          goto LABEL_36;
        }
      }
      v0 = v116;
      v102 = *(_QWORD *)(v116 + 1040);
LABEL_35:
      swift_bridgeObjectRelease_n(v102, 2);
      v103 = *(_QWORD *)(v0 + 600);
      v104 = OBJC_IVAR____TtC10seserviced16SEKeySyncManager_notifiedPassdOfFidoViewSynced;
      v101 = *(void **)(v0 + 640);
      if ((*(_BYTE *)(v103 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_notifiedPassdOfFidoViewSynced) & 1) == 0)
      {
        v105 = *(_QWORD *)(v0 + 608);
        notify_post("com.apple.seserviced.keysync.fido.tlk.synced");

        sub_1001247E8(v105, type metadata accessor for SESPeerIdentityData);
        *(_BYTE *)(v103 + v104) = 1;
LABEL_38:
        swift_bridgeObjectRelease(*(_QWORD *)(v0 + 552));
        swift_task_dealloc(*(_QWORD *)(v0 + 608));
        __asm { BR              X0 }
      }
    }
    else
    {
      v101 = *(void **)(v0 + 640);
      swift_bridgeObjectRelease(v88);
    }
LABEL_36:

    sub_1001247E8(*(_QWORD *)(v0 + 608), type metadata accessor for SESPeerIdentityData);
    goto LABEL_38;
  }
  *(_QWORD *)(v0 + 1064) = 0;
  v15 = *(_QWORD *)(v0 + 1048);
  v16 = *(_QWORD *)(v15 + 32);
  *(_QWORD *)(v0 + 1072) = v16;
  v17 = *(_QWORD *)(v15 + 40);
  *(_QWORD *)(v0 + 1080) = v17;
  v18 = *(_QWORD *)(v15 + 48);
  *(_QWORD *)(v0 + 1088) = v18;
  v19 = *(_QWORD *)(v15 + 56);
  *(_QWORD *)(v0 + 1096) = v19;
  v20 = *(_QWORD *)(v15 + 64);
  *(_QWORD *)(v0 + 1104) = v20;
  v21 = *(_QWORD *)(v15 + 72);
  *(_QWORD *)(v0 + 1112) = v21;
  v22 = *(_BYTE *)(v15 + 80);
  v23 = *(void **)(v15 + 88);
  *(_QWORD *)(v0 + 1120) = v23;
  *(_QWORD *)(v0 + 184) = v18;
  *(_QWORD *)(v0 + 192) = v19;
  *(_QWORD *)(v0 + 200) = v20;
  *(_QWORD *)(v0 + 208) = v21;
  *(_BYTE *)(v0 + 216) = v22;
  sub_100063C8C(v16, v17);
  swift_bridgeObjectRetain(v19);
  sub_100063C8C(v20, v21);
  v24 = dword_100346BA4;
  v25 = v23;
  v26 = (_QWORD *)swift_task_alloc(v24);
  *(_QWORD *)(v0 + 1128) = v26;
  *v26 = v0;
  v26[1] = sub_1001080D4;
  return sub_100111D10(*(_QWORD *)(v0 + 584), *(_QWORD *)(v0 + 592), v16, v17, v1, (uint64_t)v25, *(_QWORD *)(v0 + 608), *(_QWORD *)(v0 + 712));
}

uint64_t sub_1001080D4()
{
  uint64_t v0;
  uint64_t **v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t **v8;

  v2 = (*v1)[141];
  v3 = *v1;
  v3[142] = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    v4 = v3[130];
    v5 = v3[89];
    v6 = v3[75];
    swift_bridgeObjectRelease(v3[131]);
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(v5);
    return swift_task_switch(sub_1001094B0, v6, 0);
  }
  else
  {
    v8 = (uint64_t **)swift_task_alloc(dword_100346BAC);
    v3[143] = (uint64_t)v8;
    *v8 = v3;
    v8[1] = (uint64_t *)sub_100108200;
    return sub_10011881C(v3[136], v3[137], v3[134], v3[135], v3[73], v3[74], v3[76]);
  }
}

uint64_t sub_100108200()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 600);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1144));
  return swift_task_switch(sub_100108284, v1, 0);
}

uint64_t sub_100108284()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  id v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  void *v43;
  uint64_t v44;
  id v45;
  _QWORD *v46;
  uint64_t v48;
  uint64_t v49;
  __int128 *v50;
  void *v51;
  NSString v52;
  unsigned int v53;
  uint64_t v54;
  NSObject *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  os_log_type_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 *v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void **v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  void *v89;
  id v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  id v113;
  os_log_type_t v114;
  char v115;
  char v116;

  v1 = v0 + 184;
  v2 = *(_QWORD *)(v0 + 1112);
  v3 = *(_QWORD *)(v0 + 1104);
  v4 = *(_QWORD *)(v0 + 1096);
  v5 = *(_QWORD *)(v0 + 1080);
  v6 = *(_QWORD *)(v0 + 1072);
  v7 = *(_QWORD *)(v0 + 1064);
  v8 = *(_QWORD *)(v0 + 1056);

  swift_bridgeObjectRelease(v4);
  sub_100063CD0(v3, v2);
  sub_100063CD0(v6, v5);
  if (v7 + 1 == v8)
  {
    v9 = *(_QWORD *)(v0 + 1040);
    v10 = *(_QWORD *)(v0 + 712);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1048));
    swift_bridgeObjectRelease(v10);
    v111 = v9;
    v11 = *(_QWORD *)(v9 + 16);
    v112 = v0;
    if (v11)
    {
      v12 = *(_QWORD *)(v0 + 1040);
      v13 = v12 + 32;
      v14 = *(_QWORD *)(v0 + 552);
      swift_bridgeObjectRetain(v12);
      v106 = v14;
      v107 = v1;
      v103 = v13;
      v104 = v11;
      v102 = v14 + 48;
      v15 = *(_QWORD *)(v14 + 16);
      if (v15)
      {
        v16 = v13;
        v18 = *(_QWORD *)(v13 + 8);
        v17 = *(_QWORD *)(v13 + 16);
        v19 = *(_QWORD *)(v16 + 24);
        v20 = *(void **)(v16 + 40);
        v105 = 1;
        swift_bridgeObjectRetain_n(v14, 2);
        v108 = v18;
        swift_bridgeObjectRetain(v18);
        v109 = v19;
        v110 = v17;
        sub_100063C8C(v17, v19);
        v113 = v20;
        v21 = (uint64_t *)(v14 + 48);
        do
        {
          v22 = *(v21 - 2);
          v23 = *(v21 - 1);
          v25 = *v21;
          v24 = v21[1];
          v27 = v21[2];
          v26 = v21[3];
          v28 = v21[4];
          v29 = v21[5];
          sub_100063C8C(v22, v23);
          sub_100063C8C(v25, v24);
          sub_100063C8C(v27, v26);
          sub_100063C8C(v28, v29);
          sub_100063C8C(v22, v23);
          v30 = objc_msgSend(v113, "currentTLK", v102, v103, v104, v105);
          if (v30)
          {
            v31 = v30;
            v32 = objc_msgSend(v30, "tlkUUID");

            static Data._unconditionallyBridgeFromObjectiveC(_:)(v32);
            __asm { BR              X8 }
          }
          sub_10006B9B4(v22, v23);
          sub_10006B9B4(0, 0xF000000000000000);
          sub_100063CD0(v22, v23);
          sub_100063CD0(v25, v24);
          sub_100063CD0(v27, v26);
          sub_100063CD0(v28, v29);
          v21 += 9;
          --v15;
        }
        while (v15);
        v0 = v112;
        v48 = *(_QWORD *)(v112 + 1040);
        swift_bridgeObjectRelease_n(v106, 2);
        swift_bridgeObjectRelease(v108);
        sub_100063CD0(v110, v109);

        swift_bridgeObjectRelease(v48);
        LODWORD(v33) = 1;
        v1 = v107;
      }
      else
      {
        v0 = v112;
        swift_bridgeObjectRelease(*(_QWORD *)(v112 + 1040));
        LODWORD(v33) = 1;
      }
    }
    else
    {
      LODWORD(v33) = 0;
    }
    v49 = *(_QWORD *)(v0 + 600);
    LODWORD(v50) = v33 ^ 1;
    v51 = (void *)objc_opt_self(SESAlarm);
    v52 = String._bridgeToObjectiveC()();
    v53 = objc_msgSend(v51, "isAlarmSet:", v52);

    v54 = swift_retain(v49);
    v55 = Logger.logObject.getter(v54);
    v59 = static os_log_type_t.info.getter(v55, v56, v57, v58);
    v60 = os_log_type_enabled(v55, v59);
    v61 = *(_QWORD *)(v0 + 600);
    if (v60)
    {
      v114 = v59;
      v62 = v0 + 520;
      v116 = v33 ^ 1;
      v115 = v33;
      v33 = swift_slowAlloc(24, -1);
      *(_DWORD *)v33 = 67109632;
      *(_DWORD *)(v112 + 220) = (_DWORD)v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v112 + 220, v112 + 224, v33 + 4, v33 + 8);
      *(_WORD *)(v33 + 8) = 1024;
      *(_DWORD *)(v112 + 180) = v53;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v112 + 180, v1, v33 + 10, v33 + 14);
      *(_WORD *)(v33 + 14) = 2048;
      v50 = (__int128 *)(v61 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__errorCount);
      swift_beginAccess(v61 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__errorCount, v0 + 392, 0, 0);
      v63 = *v50;
      v64 = v50[1];
      *(_OWORD *)(v0 + 161) = *(__int128 *)((char *)v50 + 25);
      *(_OWORD *)(v0 + 136) = v63;
      *(_OWORD *)(v0 + 152) = v64;
      v65 = *v50;
      LOBYTE(v50) = v116;
      *(_OWORD *)(v112 + 536) = v65;
      *(_OWORD *)(v0 + 520) = *(_OWORD *)(v112 + 152);
      sub_10006F87C(v112 + 536);
      v66 = sub_10006F87C(v0 + 520);
      sub_100153718(v66);
      v68 = v67;
      v0 = v112;
      sub_10006F8A4(v112 + 536);
      sub_10006F8A4(v62);
      *(_QWORD *)(v112 + 576) = v68;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v112 + 576, v112 + 584, v33 + 16, v33 + 24);
      swift_release(v61);
      _os_log_impl((void *)&_mh_execute_header, v55, v114, "Sync progress -- completed w/ haveAllViewsOnSE %{BOOL}d retryInFlight %{BOOL}d errorCount %ld", (uint8_t *)v33, 0x18u);
      v69 = v33;
      LOBYTE(v33) = v115;
      swift_slowDealloc(v69, -1, -1);
    }
    else
    {
      swift_release(v61);
    }
    v70 = *(_QWORD *)(v0 + 600);

    *(_BYTE *)(v70 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_allViewsSynchronized) = (_BYTE)v50;
    if ((v33 & 1) == 0)
    {
      sub_1000FB490(0, &OBJC_IVAR____TtC10seserviced16SEKeySyncManager__recoveryRequiredPref);
      if ((v53 & 1) == 0)
      {
        v71 = (__int128 *)(*(_QWORD *)(v0 + 600) + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__errorCount);
        swift_beginAccess(v71, v0 + 416, 0, 0);
        v72 = *v71;
        v73 = v71[1];
        *(_OWORD *)(v0 + 113) = *(__int128 *)((char *)v71 + 25);
        *(_OWORD *)(v0 + 88) = v72;
        *(_OWORD *)(v0 + 104) = v73;
        *(_OWORD *)(v0 + 504) = *v71;
        *(_OWORD *)(v0 + 488) = *(_OWORD *)(v0 + 104);
        sub_10006F87C(v0 + 504);
        v74 = sub_10006F87C(v0 + 488);
        sub_100153718(v74);
        v76 = v75;
        sub_10006F8A4(v0 + 504);
        sub_10006F8A4(v0 + 488);
        if (v76 >= 1)
        {
          v77 = swift_beginAccess(v71, v0 + 368, 33, 0);
          v78 = *v71;
          v79 = v71[1];
          *(_OWORD *)(v0 + 41) = *(__int128 *)((char *)v71 + 25);
          *(_OWORD *)(v0 + 16) = v78;
          *(_OWORD *)(v0 + 32) = v79;
          sub_100153718(v77);
          v81 = __OFSUB__(v80, 1);
          v82 = v80 - 1;
          if (v81)
            __break(1u);
          sub_100120358(v82);
          swift_endAccess(v0 + 368);
        }
      }
    }
    v83 = *(_QWORD *)(v111 + 16);
    v84 = *(_QWORD *)(v0 + 1040);
    if (v83)
    {
      v85 = (void **)(swift_bridgeObjectRetain(v84) + 72);
      while (1)
      {
        v86 = (uint64_t)*(v85 - 4);
        v87 = (uint64_t)*(v85 - 3);
        v88 = (unint64_t)*(v85 - 2);
        v89 = *v85;
        swift_bridgeObjectRetain(v86);
        sub_100063C8C(v87, v88);
        v90 = v89;
        v91 = objc_msgSend(v90, "viewName");
        v92 = static String._unconditionallyBridgeFromObjectiveC(_:)(v91);
        v94 = v93;

        if (v92 == 0x4354502D4553 && v94 == 0xE600000000000000)
        {
          v0 = v112;
          v98 = *(_QWORD *)(v112 + 1040);
          swift_bridgeObjectRelease(0xE600000000000000);
          swift_bridgeObjectRelease(v86);
          sub_100063CD0(v87, v88);

          goto LABEL_32;
        }
        v96 = _stringCompareWithSmolCheck(_:_:expecting:)(v92, v94, 0x4354502D4553, 0xE600000000000000, 0);
        swift_bridgeObjectRelease(v94);
        swift_bridgeObjectRelease(v86);
        sub_100063CD0(v87, v88);

        if ((v96 & 1) != 0)
          break;
        v85 += 6;
        if (!--v83)
        {
          v0 = v112;
          v97 = *(void **)(v112 + 640);
          swift_bridgeObjectRelease_n(*(_QWORD *)(v112 + 1040), 2);
          goto LABEL_33;
        }
      }
      v0 = v112;
      v98 = *(_QWORD *)(v112 + 1040);
LABEL_32:
      swift_bridgeObjectRelease_n(v98, 2);
      v99 = *(_QWORD *)(v0 + 600);
      v100 = OBJC_IVAR____TtC10seserviced16SEKeySyncManager_notifiedPassdOfFidoViewSynced;
      v97 = *(void **)(v0 + 640);
      if ((*(_BYTE *)(v99 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_notifiedPassdOfFidoViewSynced) & 1) == 0)
      {
        v101 = *(_QWORD *)(v0 + 608);
        notify_post("com.apple.seserviced.keysync.fido.tlk.synced");

        sub_1001247E8(v101, type metadata accessor for SESPeerIdentityData);
        *(_BYTE *)(v99 + v100) = 1;
LABEL_35:
        swift_bridgeObjectRelease(*(_QWORD *)(v0 + 552));
        swift_task_dealloc(*(_QWORD *)(v0 + 608));
        __asm { BR              X0 }
      }
    }
    else
    {
      v97 = *(void **)(v0 + 640);
      swift_bridgeObjectRelease(v84);
    }
LABEL_33:

    sub_1001247E8(*(_QWORD *)(v0 + 608), type metadata accessor for SESPeerIdentityData);
    goto LABEL_35;
  }
  v34 = *(_QWORD *)(v0 + 1064) + 1;
  *(_QWORD *)(v0 + 1064) = v34;
  v35 = *(_QWORD *)(v0 + 1048) + (v34 << 6);
  v36 = *(_QWORD *)(v35 + 32);
  *(_QWORD *)(v0 + 1072) = v36;
  v37 = *(_QWORD *)(v35 + 40);
  *(_QWORD *)(v0 + 1080) = v37;
  v38 = *(_QWORD *)(v35 + 48);
  *(_QWORD *)(v0 + 1088) = v38;
  v39 = *(_QWORD *)(v35 + 56);
  *(_QWORD *)(v0 + 1096) = v39;
  v40 = *(_QWORD *)(v35 + 64);
  *(_QWORD *)(v0 + 1104) = v40;
  v41 = *(_QWORD *)(v35 + 72);
  *(_QWORD *)(v0 + 1112) = v41;
  v42 = *(_BYTE *)(v35 + 80);
  v43 = *(void **)(v35 + 88);
  *(_QWORD *)(v0 + 1120) = v43;
  *(_QWORD *)(v0 + 184) = v38;
  *(_QWORD *)(v0 + 192) = v39;
  *(_QWORD *)(v0 + 200) = v40;
  *(_QWORD *)(v0 + 208) = v41;
  *(_BYTE *)(v0 + 216) = v42;
  sub_100063C8C(v36, v37);
  swift_bridgeObjectRetain(v39);
  sub_100063C8C(v40, v41);
  v44 = dword_100346BA4;
  v45 = v43;
  v46 = (_QWORD *)swift_task_alloc(v44);
  *(_QWORD *)(v0 + 1128) = v46;
  *v46 = v0;
  v46[1] = sub_1001080D4;
  return sub_100111D10(*(_QWORD *)(v0 + 584), *(_QWORD *)(v0 + 592), v36, v37, v1, (uint64_t)v45, *(_QWORD *)(v0 + 608), *(_QWORD *)(v0 + 712));
}

uint64_t sub_100108FCC()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 608));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100109034()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 552));
  swift_task_dealloc(*(_QWORD *)(v0 + 608));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001090A4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 608);

  sub_1001247E8(v1, type metadata accessor for SESPeerIdentityData);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 552));
  swift_task_dealloc(*(_QWORD *)(v0 + 608));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100109128()
{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(void **)(v0 + 768);
  v2 = *(_QWORD *)(v0 + 760);
  v3 = *(_QWORD *)(v0 + 752);
  v4 = *(_QWORD *)(v0 + 744);
  v5 = *(_QWORD *)(v0 + 608);

  swift_bridgeObjectRelease(v4);
  sub_100063CD0(v3, v2);
  sub_1001247E8(v5, type metadata accessor for SESPeerIdentityData);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 552));
  swift_task_dealloc(*(_QWORD *)(v0 + 608));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001091E4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 608);

  sub_1001247E8(v1, type metadata accessor for SESPeerIdentityData);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 552));
  swift_task_dealloc(*(_QWORD *)(v0 + 608));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100109268()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 608);

  sub_1001247E8(v1, type metadata accessor for SESPeerIdentityData);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 552));
  swift_task_dealloc(*(_QWORD *)(v0 + 608));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001092EC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 608);

  sub_1001247E8(v1, type metadata accessor for SESPeerIdentityData);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 552));
  swift_task_dealloc(*(_QWORD *)(v0 + 608));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100109370()
{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(void **)(v0 + 960);
  v2 = *(_QWORD *)(v0 + 952);
  v3 = *(_QWORD *)(v0 + 944);
  v4 = *(_QWORD *)(v0 + 936);
  v5 = *(_QWORD *)(v0 + 608);

  swift_bridgeObjectRelease(v4);
  sub_100063CD0(v3, v2);

  sub_1001247E8(v5, type metadata accessor for SESPeerIdentityData);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 552));
  swift_task_dealloc(*(_QWORD *)(v0 + 608));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10010942C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 608);

  sub_1001247E8(v1, type metadata accessor for SESPeerIdentityData);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 552));
  swift_task_dealloc(*(_QWORD *)(v0 + 608));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001094B0()
{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(void **)(v0 + 1120);
  v2 = *(_QWORD *)(v0 + 1112);
  v3 = *(_QWORD *)(v0 + 1104);
  v4 = *(_QWORD *)(v0 + 1096);
  v5 = *(_QWORD *)(v0 + 1080);
  v6 = *(_QWORD *)(v0 + 1072);
  v7 = *(_QWORD *)(v0 + 608);

  sub_100063CD0(v6, v5);
  swift_bridgeObjectRelease(v4);
  sub_100063CD0(v3, v2);
  sub_1001247E8(v7, type metadata accessor for SESPeerIdentityData);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 552));
  swift_task_dealloc(*(_QWORD *)(v0 + 608));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100109588()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 160) = v0;
  return swift_task_switch(sub_1001095A0, v0, 0);
}

uint64_t sub_1001095A0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  NSString v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0 + 2;
  v2 = objc_opt_self(SecureElementManager);
  v3 = String._bridgeToObjectiveC()();
  v0[21] = v3;
  v0[7] = v0 + 18;
  v0[2] = v0;
  v0[3] = sub_100109668;
  v4 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v5 = v0 + 10;
  v5[1] = 0x40000000;
  v5[2] = sub_100118F3C;
  v5[3] = &unk_100309750;
  v5[4] = v4;
  sub_100051680(v2, v3, v5);
  return swift_continuation_await(v1);
}

uint64_t sub_100109668()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 176) = v2;
  if (v2)
    v3 = sub_100109704;
  else
    v3 = sub_1001096C8;
  return swift_task_switch(v3, *(_QWORD *)(v1 + 160), 0);
}

uint64_t sub_1001096C8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 144);

  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_100109704(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v20;

  v3 = *(void **)(v1 + 168);
  v2 = *(_QWORD *)(v1 + 176);
  swift_willThrow(a1);

  swift_errorRetain(v2);
  v4 = swift_errorRetain(v2);
  v5 = Logger.logObject.getter(v4);
  v7 = static os_log_type_t.error.getter(v5, v6);
  if (os_log_type_enabled(v5, v7))
  {
    v8 = *(_QWORD *)(v1 + 176);
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v20 = v10;
    *(_DWORD *)v9 = 136315138;
    swift_getErrorValue(v8, v1 + 152, v1 + 120);
    v11 = Error.localizedDescription.getter(*(_QWORD *)(v1 + 128), *(_QWORD *)(v1 + 136));
    v13 = v12;
    *(_QWORD *)(v1 + 80) = sub_1001C56EC(v11, v12, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 80, v1 + 88, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease(v13);
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v7, "Failed to get SE : %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

  }
  else
  {
    v14 = *(_QWORD *)(v1 + 176);

    swift_errorRelease(v14);
    swift_errorRelease(v14);
  }
  v15 = *(_QWORD *)(v1 + 176);
  v16 = sub_10012443C();
  v17 = swift_allocError(&type metadata for KeySyncEvent, v16, 0, 0);
  *v18 = 4;
  swift_willThrow(v17);
  swift_errorRelease(v15);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1001098FC(uint64_t a1, char a2, void *a3, void *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a1 + 32);
  if (a4)
  {
    v6 = sub_100063D3C(&qword_100345378);
    v7 = swift_allocError(v6, &protocol self-conformance witness table for Error, 0, 0);
    *v8 = a4;
    v9 = a4;
    return swift_continuation_throwingResumeWithError(v4, v7);
  }
  else
  {
    if (a3)
    {
      v13 = a3;
      v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a3);
      v16 = v15;

    }
    else
    {
      v14 = 0;
      v16 = 0xF000000000000000;
    }
    v17 = *(_QWORD *)(*(_QWORD *)(v4 + 64) + 40);
    *(_BYTE *)v17 = a2;
    *(_QWORD *)(v17 + 8) = v14;
    *(_QWORD *)(v17 + 16) = v16;
    return swift_continuation_throwingResume(v4);
  }
}

uint64_t sub_1001099C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch(sub_1001099DC, v2, 0);
}

uint64_t sub_1001099DC(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  _QWORD *v5;

  *(_QWORD *)(v1 + 40) = OBJC_IVAR____TtC10seserviced16SEKeySyncManager_logger;
  v2 = Logger.logObject.getter(a1);
  v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Refreshing SE contents", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  v5 = (_QWORD *)swift_task_alloc(dword_100346C7C);
  *(_QWORD *)(v1 + 48) = v5;
  *v5 = v1;
  v5[1] = sub_100109AAC;
  return sub_10011E0E8();
}

uint64_t sub_100109AAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*v2 + 48);
  v4 = *v2;
  *(_QWORD *)(v4 + 56) = a1;
  swift_task_dealloc(v3);
  if (v1)
    return (*(uint64_t (**)(void))(v4 + 8))();
  else
    return swift_task_switch(sub_100109B20, *(_QWORD *)(v4 + 32), 0);
}

uint64_t sub_100109B20(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v2 = Logger.logObject.getter(a1);
  v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Refreshing CK contents", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  v5 = swift_task_alloc(dword_100346C84);
  *(_QWORD *)(v1 + 64) = v5;
  *(_QWORD *)v5 = v1;
  *(_QWORD *)(v5 + 8) = sub_100109C00;
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(v5 + 264) = v6;
  *(_OWORD *)(v5 + 248) = v7;
  return swift_task_switch(sub_10011E408, v6, 0);
}

uint64_t sub_100109C00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 64);
  v3[9] = a1;
  v3[10] = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_100109D20;
  else
    v5 = sub_100109C6C;
  return swift_task_switch(v5, v3[4], 0);
}

void sub_100109C6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = *(os_unfair_lock_s **)(*(_QWORD *)(v0 + 32) + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_state);
  v5 = swift_task_alloc(32);
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v1;
  os_unfair_lock_lock(v4 + 12);
  sub_10011EA9C((uint64_t)&v4[4], *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24));
  os_unfair_lock_unlock(v4 + 12);
  if (!v2)
  {
    swift_task_dealloc(v5);
    (*(void (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 72));
  }
}

uint64_t sub_100109D20()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100109D54(unint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t inited;
  unint64_t v30;
  uint64_t v31;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  const char *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  BOOL v43;
  unint64_t v44;
  id v45;
  void *v46;
  id v47;
  unint64_t v48;
  unint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  _BOOL4 v55;
  id v56;
  unint64_t v57;
  id v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  id v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  os_log_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  NSObject *v112;
  uint64_t v113;
  _BOOL4 v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  const char *v128;
  _QWORD *v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint8_t *v144;
  os_log_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  NSObject *v150;
  uint64_t v151;
  os_log_type_t v152;
  uint8_t *v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  __int128 v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  id v176;
  uint64_t v177;
  _BOOL4 v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  os_log_t v188;
  const char *v189;
  unint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199[2];
  uint64_t v200;
  void *v201;
  uint64_t v202[2];
  unint64_t v203;
  unint64_t v204;
  __n128 v205;
  uint64_t v206;
  uint64_t v207;
  char v208;
  _QWORD *v209;
  __n128 v210;
  uint64_t v211;
  uint64_t v212;
  char v213;
  _QWORD *v214;

  v190 = a1;
  v193 = type metadata accessor for SESTLKShareData(0);
  v191 = *(_QWORD *)(v193 - 8);
  v5 = __chkstk_darwin(v193, v4);
  v164 = (uint64_t)&v159 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5, v7);
  v175 = (uint64_t)&v159 - v9;
  v11 = __chkstk_darwin(v8, v10);
  v188 = (os_log_t)((char *)&v159 - v12);
  __chkstk_darwin(v11, v13);
  v183 = (uint64_t)&v159 - v14;
  v15 = sub_100063D3C(&qword_100346C70);
  v17 = __chkstk_darwin(v15, v16);
  v172 = (uint64_t)&v159 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v17, v19);
  v192 = (char *)&v159 - v21;
  __chkstk_darwin(v20, v22);
  v174 = (uint64_t)&v159 - v23;
  v24 = objc_msgSend(a2, "casdCertificate");
  v25 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v24);
  v27 = v26;

  v28 = sub_100063D3C(&qword_100348A70);
  inited = swift_initStackObject(v28, &v198);
  v171 = xmmword_100288AD0;
  *(_OWORD *)(inited + 16) = xmmword_100288AD0;
  strcpy((char *)(inited + 32), "serialNumber");
  *(_BYTE *)(inited + 45) = 0;
  *(_WORD *)(inited + 46) = -5120;
  *(_QWORD *)(inited + 48) = 147;
  *(_WORD *)(inited + 56) = 0;
  *(_OWORD *)(inited + 64) = 0u;
  *(_BYTE *)(inited + 80) = -64;
  *(_QWORD *)(inited + 88) = _swiftEmptyArrayStorage;
  strcpy((char *)(inited + 96), "caIdentifier");
  *(_BYTE *)(inited + 109) = 0;
  *(_WORD *)(inited + 110) = -5120;
  *(_QWORD *)(inited + 112) = 66;
  *(_WORD *)(inited + 120) = 0;
  *(_OWORD *)(inited + 128) = 0u;
  *(_BYTE *)(inited + 144) = -64;
  *(_QWORD *)(inited + 152) = _swiftEmptyArrayStorage;
  *(_QWORD *)(inited + 160) = 0xD000000000000011;
  *(_QWORD *)(inited + 168) = 0x80000001002BCAC0;
  *(_QWORD *)(inited + 176) = 24352;
  *(_WORD *)(inited + 184) = 0;
  *(_OWORD *)(inited + 192) = 0u;
  *(_BYTE *)(inited + 208) = -64;
  *(_QWORD *)(inited + 216) = _swiftEmptyArrayStorage;
  *(_QWORD *)(inited + 224) = 0x656761735579656BLL;
  *(_QWORD *)(inited + 232) = 0xE800000000000000;
  *(_QWORD *)(inited + 240) = 149;
  *(_WORD *)(inited + 248) = 0;
  *(_OWORD *)(inited + 256) = 0u;
  *(_BYTE *)(inited + 272) = -64;
  *(_QWORD *)(inited + 280) = _swiftEmptyArrayStorage;
  strcpy((char *)(inited + 288), "effectiveDate");
  *(_WORD *)(inited + 302) = -4864;
  *(_QWORD *)(inited + 304) = 37;
  *(_WORD *)(inited + 312) = 256;
  *(_OWORD *)(inited + 320) = 0u;
  *(_BYTE *)(inited + 336) = -64;
  *(_QWORD *)(inited + 344) = _swiftEmptyArrayStorage;
  strcpy((char *)(inited + 352), "expirationDate");
  *(_BYTE *)(inited + 367) = -18;
  *(_QWORD *)(inited + 368) = 24356;
  *(_WORD *)(inited + 376) = 256;
  *(_OWORD *)(inited + 384) = 0u;
  *(_BYTE *)(inited + 400) = -64;
  *(_QWORD *)(inited + 408) = _swiftEmptyArrayStorage;
  *(_QWORD *)(inited + 416) = 0x4E4944536163;
  *(_QWORD *)(inited + 424) = 0xE600000000000000;
  *(_QWORD *)(inited + 432) = 69;
  *(_WORD *)(inited + 440) = 0;
  *(_OWORD *)(inited + 448) = 0u;
  *(_BYTE *)(inited + 464) = -64;
  *(_QWORD *)(inited + 472) = _swiftEmptyArrayStorage;
  *(_QWORD *)(inited + 480) = 0xD000000000000011;
  *(_QWORD *)(inited + 488) = 0x80000001002BCAE0;
  *(_QWORD *)(inited + 496) = 83;
  *(_WORD *)(inited + 504) = 0;
  *(_OWORD *)(inited + 512) = 0u;
  *(_BYTE *)(inited + 528) = -64;
  *(_QWORD *)(inited + 536) = _swiftEmptyArrayStorage;
  *(_QWORD *)(inited + 544) = 0x654B63696C627570;
  *(_QWORD *)(inited + 552) = 0xE900000000000079;
  *(_QWORD *)(inited + 560) = 32585;
  *(_WORD *)(inited + 568) = 0;
  *(_OWORD *)(inited + 576) = 0u;
  *(_BYTE *)(inited + 592) = -64;
  *(_QWORD *)(inited + 600) = _swiftEmptyArrayStorage;
  v210.n128_u64[0] = 32545;
  v210.n128_u16[4] = 0;
  v211 = inited;
  v212 = 0;
  v213 = 64;
  v214 = _swiftEmptyArrayStorage;
  v196 = v25;
  v197 = v27;
  sub_100063C8C(v25, v27);
  v30 = sub_100136C5C(&v196, &v210);
  v31 = v2;
  sub_100063CD0(v196, v197);
  if (!v2)
  {
    v189 = "subjectIdentifier";
    v165 = v28;
    swift_bridgeObjectRelease(inited);
    sub_1001C06EC(v30, v199);
    sub_100063CD0(v25, v27);
    v33 = v200;
    v34 = v201;
    sub_100063C8C(v200, (unint64_t)v201);
    sub_100124944(v199, (void (*)(uint64_t, uint64_t))sub_100063CD0);
    v35 = (uint64_t)sub_1000FAE5C(v190);
    v36 = v35;
    if ((unint64_t)v35 >> 62)
    {
      if (v35 < 0)
        v158 = v35;
      else
        v158 = v35 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v35);
      v37 = _CocoaArrayWrapper.endIndex.getter(v158);
      swift_bridgeObjectRelease(v36);
      v38 = v189;
      if (v37)
        goto LABEL_7;
    }
    else
    {
      v37 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10);
      v38 = v189;
      if (v37)
      {
LABEL_7:
        v39 = 0;
        v168 = (unint64_t)v34;
        v169 = v36 & 0xC000000000000001;
        v159 = v36 + 32;
        v160 = v36 & 0xFFFFFFFFFFFFFF8;
        v161 = (unint64_t)v38 | 0x8000000000000000;
        v162 = 0x80000001002BCAC0;
        v170 = v33;
        v166 = v37;
        v167 = v36;
        do
        {
          if (v169)
          {
            v42 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v39, v36);
            v43 = __OFADD__(v39, 1);
            v44 = v39 + 1;
            if (v43)
              goto LABEL_83;
          }
          else
          {
            if (v39 >= *(_QWORD *)(v160 + 16))
            {
              __break(1u);
              JUMPOUT(0x10010B628);
            }
            v42 = *(id *)(v159 + 8 * v39);
            v43 = __OFADD__(v39, 1);
            v44 = v39 + 1;
            if (v43)
            {
LABEL_83:
              __break(1u);
              goto LABEL_84;
            }
          }
          v173 = v44;
          v176 = v42;
          v45 = objc_msgSend(v42, "currentTLK", v159);
          if (v45)
          {
            v46 = v45;
            v47 = objc_msgSend(v45, "tlkUUID");

            v184 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v47);
            v49 = v48;

          }
          else
          {
            v184 = 0;
            v49 = 0xF000000000000000;
          }
          v50 = objc_msgSend(v176, "tlkShares");
          v51 = sub_10006C25C(0, &qword_100346BB8, SESTLKShare_ptr);
          v34 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v50, v51);

          v52 = (uint64_t)sub_1001212D4((unint64_t)v34);
          swift_bridgeObjectRelease(v34);
          v194 = _swiftEmptyArrayStorage;
          if ((unint64_t)v52 >> 62)
          {
            if (v52 < 0)
              v106 = v52;
            else
              v106 = v52 & 0xFFFFFFFFFFFFFF8;
            sub_10006BA34(v184, v49);
            v53 = _CocoaArrayWrapper.endIndex.getter(v106);
          }
          else
          {
            v53 = *(_QWORD *)((v52 & 0xFFFFFFFFFFFFF8) + 0x10);
            sub_10006BA34(v184, v49);
          }
          v189 = (const char *)(v49 >> 60);
          v190 = v49;
          if (!v53)
          {
            v61 = (unint64_t)_swiftEmptyArrayStorage;
            goto LABEL_37;
          }
          v179 = v31;
          v180 = v52;
          v54 = 0;
          v186 = v52 & 0xFFFFFFFFFFFFFF8;
          v187 = v52 & 0xC000000000000001;
          v55 = __OFSUB__(HIDWORD(v184), (_DWORD)v184);
          v178 = v55;
          v177 = HIDWORD(v184) - (int)v184;
          v181 = BYTE6(v49);
          v182 = v49 >> 62;
          v185 = v53;
          do
          {
            if (v187)
            {
              v56 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v54, v52);
            }
            else
            {
              if (v54 >= *(_QWORD *)(v186 + 16))
                goto LABEL_73;
              v56 = *(id *)(v52 + 8 * v54 + 32);
            }
            v34 = v56;
            v57 = v54 + 1;
            if (__OFADD__(v54, 1))
            {
              __break(1u);
LABEL_73:
              __break(1u);
LABEL_74:
              swift_bridgeObjectRelease(v167);
              v108 = v163 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_logger;
              sub_100063C8C(v52, (unint64_t)v34);
              v109 = v184;
              v110 = v190;
              sub_10006BA34(v184, v190);
              sub_100063C8C(v54, v36);
              sub_100063C8C(v52, (unint64_t)v34);
              sub_10006BA34(v109, v110);
              v111 = sub_100063C8C(v54, v36);
              v193 = v108;
              v112 = Logger.logObject.getter(v111);
              LODWORD(v192) = static os_log_type_t.error.getter(v112, v113);
              v114 = os_log_type_enabled(v112, (os_log_type_t)v192);
              v115 = (unint64_t)v34;
              v116 = v175;
              if (v114)
              {
                v188 = v112;
                v117 = swift_slowAlloc(32, -1);
                v187 = swift_slowAlloc(96, -1);
                v196 = v187;
                *(_DWORD *)v117 = 136315650;
                v191 = v117;
                if ((unint64_t)v189 <= 0xE)
                {
                  v120 = v184;
                  sub_1001BD2CC(v184, v190);
                  v123 = v122;
                  v194 = v122;
                  v124 = sub_100063D3C((uint64_t *)&unk_100346060);
                  v125 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
                  v119 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v124, v125);
                  v118 = v126;
                  v117 = v191;
                  swift_bridgeObjectRelease(v123);
                }
                else
                {
                  v118 = 0xE300000000000000;
                  v119 = 7104878;
                  v120 = v184;
                }
                v194 = (_QWORD *)sub_1001C56EC(v119, v118, &v196);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v194, &v195, v117 + 4, v117 + 12);
                swift_bridgeObjectRelease(v118);
                v127 = v190;
                sub_10006B9B4(v120, v190);
                sub_10006B9B4(v120, v127);
                *(_WORD *)(v117 + 12) = 2080;
                v185 = v117 + 14;
                v128 = (const char *)v49;
                sub_1001BD2CC(v54, v36);
                v130 = v129;
                v189 = v128;
                v194 = v129;
                v131 = sub_100063D3C((uint64_t *)&unk_100346060);
                v186 = v131;
                v132 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
                v133 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v131, v132);
                v135 = v134;
                swift_bridgeObjectRelease(v130);
                v194 = (_QWORD *)sub_1001C56EC(v133, v135, &v196);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v194, &v195, v185, v117 + 22);
                swift_bridgeObjectRelease(v135);
                sub_100063CD0(v54, v36);
                sub_100063CD0(v54, v36);
                *(_WORD *)(v117 + 22) = 2080;
                v185 = v117 + 24;
                v136 = v170;
                v137 = v168;
                sub_1001BD2CC(v170, v168);
                v139 = v138;
                v194 = v138;
                v140 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v186, v132);
                v142 = v141;
                swift_bridgeObjectRelease(v139);
                v143 = sub_1001C56EC(v140, v142, &v196);
                v144 = (uint8_t *)v191;
                v194 = (_QWORD *)v143;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v194, &v195, v185, v191 + 32);
                swift_bridgeObjectRelease(v142);
                sub_100063CD0(v136, v137);
                sub_100063CD0(v136, v137);
                v145 = v188;
                _os_log_impl((void *)&_mh_execute_header, v188, (os_log_type_t)v192, "Found self share for UUID %s with CASDCA %s != myCASDCA %s", v144, 0x20u);
                v146 = v187;
                swift_arrayDestroy(v187, 3, (char *)&type metadata for Any + 8);
                swift_slowDealloc(v146, -1, -1);
                swift_slowDealloc(v144, -1, -1);

                v116 = v175;
              }
              else
              {

                sub_10006B9B4(v109, v110);
                sub_10006B9B4(v109, v110);
                sub_100063CD0(v54, v36);
                sub_100063CD0(v54, v36);
                v121 = v170;
                sub_100063CD0(v170, v115);
                sub_100063CD0(v121, v115);
              }
              v147 = v164;
              v148 = sub_100124B74(v116, v164, type metadata accessor for SESTLKShareData);
              v149 = v116;
              v150 = Logger.logObject.getter(v148);
              v152 = static os_log_type_t.error.getter(v150, v151);
              if (os_log_type_enabled(v150, v152))
              {
                v153 = (uint8_t *)swift_slowAlloc(12, -1);
                v193 = swift_slowAlloc(32, -1);
                v196 = v193;
                *(_DWORD *)v153 = 136315138;
                v192 = (char *)(v153 + 4);
                v154 = sub_1001BE4B4();
                v156 = v155;
                v194 = (_QWORD *)sub_1001C56EC(v154, v155, &v196);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v194, &v195, v192, v153 + 12);
                swift_bridgeObjectRelease(v156);
                sub_1001247E8(v164, type metadata accessor for SESTLKShareData);
                _os_log_impl((void *)&_mh_execute_header, v150, v152, "Offending peer is %s", v153, 0xCu);
                LOBYTE(v25) = 1;
                v157 = v193;
                swift_arrayDestroy(v193, 1, (char *)&type metadata for Any + 8);
                swift_slowDealloc(v157, -1, -1);
                swift_slowDealloc(v153, -1, -1);

                sub_100063CD0(v170, v168);
                sub_100063CD0(v54, v36);
                sub_10006B9B4(v184, v190);
                sub_1001247E8(v175, type metadata accessor for SESTLKShareData);
                sub_100096700(v174, &qword_100346C70);
              }
              else
              {

                sub_1001247E8(v147, type metadata accessor for SESTLKShareData);
                sub_100063CD0(v170, v168);
                sub_100063CD0(v54, v36);
                sub_10006B9B4(v184, v190);
                sub_1001247E8(v149, type metadata accessor for SESTLKShareData);
                sub_100096700(v174, &qword_100346C70);
                LOBYTE(v25) = 1;
              }
              return v25 & 1;
            }
            v58 = objc_msgSend(v56, "tlkUUID");
            v59 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v58);
            v36 = v60;

            if ((unint64_t)v189 <= 0xE)
              __asm { BR              X8 }
            sub_10006B9B4(v59, v36);
            sub_10006B9B4(v184, v49);

            ++v54;
          }
          while (v57 != v185);
          v61 = (unint64_t)v194;
          v31 = v179;
LABEL_37:
          sub_10006B9B4(v184, v49);
          swift_bridgeObjectRelease(v52);
          if ((v61 & 0x8000000000000000) != 0 || (v61 & 0x4000000000000000) != 0)
          {
            swift_bridgeObjectRetain(v61);
            v62 = _CocoaArrayWrapper.endIndex.getter(v107);
          }
          else
          {
            v62 = *(_QWORD *)(v61 + 16);
            swift_bridgeObjectRetain(v61);
          }
          v63 = _swiftEmptyArrayStorage;
          if (v62)
          {
            if (v62 >= 1)
            {
              v64 = 0;
              v185 = v61 & 0xC000000000000001;
              v186 = v61;
              v187 = v62;
              do
              {
                v66 = v31;
                if (v185)
                  v67 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v64, v61);
                else
                  v67 = *(id *)(v61 + 8 * v64 + 32);
                v68 = v67;
                v69 = type metadata accessor for PropertyListDecoder(0);
                v70 = swift_allocObject(v69, *(unsigned int *)(v69 + 48), *(unsigned __int16 *)(v69 + 52));
                v74 = PropertyListDecoder.init()(v70, v71, v72, v73);
                v75 = objc_msgSend(v68, "shareData");
                v76 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v75);
                v78 = v77;

                v79 = sub_1000639EC(&qword_100346C38, type metadata accessor for SESTLKShareData, (uint64_t)&unk_10028AE14);
                dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v193, v76, v78, v193, v79);
                v31 = v66;
                sub_100063CD0(v76, v78);
                swift_release(v74);
                if (v66)
                {
                  swift_errorRelease(v66);
                  v31 = 0;
                  v80 = 1;
                }
                else
                {
                  v80 = 0;
                }
                v81 = v191;
                v82 = (uint64_t)v192;
                v83 = v193;
                (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v191 + 56))(v192, v80, 1, v193);

                v84 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v81 + 48))(v82, 1, v83) == 1;
                v49 = v190;
                if (v84)
                {
                  sub_100096700(v82, &qword_100346C70);
                  v65 = v187;
                }
                else
                {
                  v85 = v183;
                  sub_100124884(v82, v183, type metadata accessor for SESTLKShareData);
                  sub_100124884(v85, (uint64_t)v188, type metadata accessor for SESTLKShareData);
                  if ((swift_isUniquelyReferenced_nonNull_native(v63) & 1) == 0)
                    v63 = (_QWORD *)sub_1001C51B0(0, v63[2] + 1, 1, (unint64_t)v63);
                  v65 = v187;
                  v86 = v188;
                  v88 = v63[2];
                  v87 = v63[3];
                  v89 = v191;
                  if (v88 >= v87 >> 1)
                  {
                    v90 = sub_1001C51B0(v87 > 1, v88 + 1, 1, (unint64_t)v63);
                    v89 = v191;
                    v63 = (_QWORD *)v90;
                    v86 = v188;
                  }
                  v63[2] = v88 + 1;
                  sub_100124884((uint64_t)v86, (uint64_t)v63+ ((*(unsigned __int8 *)(v89 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v89 + 80))+ *(_QWORD *)(v89 + 72) * v88, type metadata accessor for SESTLKShareData);
                }
                ++v64;
                v61 = v186;
              }
              while (v65 != v64);
              goto LABEL_57;
            }
LABEL_84:
            __break(1u);
            JUMPOUT(0x10010B61CLL);
          }
LABEL_57:
          swift_release_n(v61, 2);
          if (v63[2])
          {
            v91 = v191;
            v92 = v174;
            sub_100124B74((uint64_t)v63+ ((*(unsigned __int8 *)(v191 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v191 + 80)), v174, type metadata accessor for SESTLKShareData);
            v93 = 0;
            v94 = v175;
          }
          else
          {
            v93 = 1;
            v92 = v174;
            v94 = v175;
            v91 = v191;
          }
          v95 = v193;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v91 + 56))(v92, v93, 1, v193);
          swift_bridgeObjectRelease(v63);
          v96 = v172;
          sub_1000E4E48(v92, v172, &qword_100346C70);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v91 + 48))(v96, 1, v95) == 1)
          {
            sub_100096700(v92, &qword_100346C70);
            sub_10006B9B4(v184, v49);

            v40 = v96;
            v36 = v167;
            v34 = (void *)v168;
            v41 = v166;
            v39 = v173;
            goto LABEL_9;
          }
          sub_100124884(v96, v94, type metadata accessor for SESTLKShareData);
          v98 = *(_QWORD *)(v94 + 48);
          v97 = *(_QWORD *)(v94 + 56);
          v99 = swift_allocObject(v165, 608, 7);
          *(_BYTE *)(v99 + 109) = 0;
          *(_WORD *)(v99 + 110) = -5120;
          *(_OWORD *)(v99 + 16) = v171;
          strcpy((char *)(v99 + 32), "serialNumber");
          *(_BYTE *)(v99 + 45) = 0;
          *(_WORD *)(v99 + 46) = -5120;
          *(_QWORD *)(v99 + 48) = 147;
          *(_WORD *)(v99 + 56) = 0;
          *(_OWORD *)(v99 + 64) = 0u;
          *(_BYTE *)(v99 + 80) = -64;
          *(_QWORD *)(v99 + 88) = _swiftEmptyArrayStorage;
          strcpy((char *)(v99 + 96), "caIdentifier");
          *(_QWORD *)(v99 + 112) = 66;
          *(_WORD *)(v99 + 120) = 0;
          *(_OWORD *)(v99 + 128) = 0u;
          *(_BYTE *)(v99 + 144) = -64;
          *(_QWORD *)(v99 + 152) = _swiftEmptyArrayStorage;
          *(_QWORD *)(v99 + 160) = 0xD000000000000011;
          *(_QWORD *)(v99 + 168) = v162;
          *(_QWORD *)(v99 + 176) = 24352;
          *(_WORD *)(v99 + 184) = 0;
          *(_OWORD *)(v99 + 192) = 0u;
          *(_BYTE *)(v99 + 208) = -64;
          *(_QWORD *)(v99 + 216) = _swiftEmptyArrayStorage;
          *(_QWORD *)(v99 + 224) = 0x656761735579656BLL;
          *(_QWORD *)(v99 + 232) = 0xE800000000000000;
          *(_QWORD *)(v99 + 240) = 149;
          *(_WORD *)(v99 + 248) = 0;
          *(_OWORD *)(v99 + 256) = 0u;
          *(_BYTE *)(v99 + 272) = -64;
          *(_QWORD *)(v99 + 280) = _swiftEmptyArrayStorage;
          strcpy((char *)(v99 + 288), "effectiveDate");
          *(_WORD *)(v99 + 302) = -4864;
          *(_QWORD *)(v99 + 304) = 37;
          *(_WORD *)(v99 + 312) = 256;
          *(_OWORD *)(v99 + 320) = 0u;
          *(_BYTE *)(v99 + 336) = -64;
          *(_QWORD *)(v99 + 344) = _swiftEmptyArrayStorage;
          strcpy((char *)(v99 + 352), "expirationDate");
          *(_BYTE *)(v99 + 367) = -18;
          *(_QWORD *)(v99 + 368) = 24356;
          *(_WORD *)(v99 + 376) = 256;
          *(_OWORD *)(v99 + 384) = 0u;
          *(_BYTE *)(v99 + 400) = -64;
          *(_QWORD *)(v99 + 408) = _swiftEmptyArrayStorage;
          *(_QWORD *)(v99 + 416) = 0x4E4944536163;
          *(_QWORD *)(v99 + 424) = 0xE600000000000000;
          *(_QWORD *)(v99 + 432) = 69;
          *(_WORD *)(v99 + 440) = 0;
          *(_OWORD *)(v99 + 448) = 0u;
          *(_BYTE *)(v99 + 464) = -64;
          *(_QWORD *)(v99 + 472) = _swiftEmptyArrayStorage;
          *(_QWORD *)(v99 + 480) = 0xD000000000000011;
          *(_QWORD *)(v99 + 488) = v161;
          *(_QWORD *)(v99 + 496) = 83;
          *(_WORD *)(v99 + 504) = 0;
          *(_OWORD *)(v99 + 512) = 0u;
          *(_BYTE *)(v99 + 528) = -64;
          *(_QWORD *)(v99 + 536) = _swiftEmptyArrayStorage;
          *(_QWORD *)(v99 + 544) = 0x654B63696C627570;
          *(_QWORD *)(v99 + 552) = 0xE900000000000079;
          *(_QWORD *)(v99 + 560) = 32585;
          *(_WORD *)(v99 + 568) = 0;
          *(_OWORD *)(v99 + 576) = 0u;
          *(_BYTE *)(v99 + 592) = -64;
          *(_QWORD *)(v99 + 600) = _swiftEmptyArrayStorage;
          v205.n128_u64[0] = 32545;
          v205.n128_u16[4] = 0;
          v206 = v99;
          v207 = 0;
          v208 = 64;
          v209 = _swiftEmptyArrayStorage;
          v196 = v98;
          v197 = v97;
          sub_100063C8C(v98, v97);
          sub_100063C8C(v98, v97);
          v100 = sub_100136C5C(&v196, &v205);
          v101 = v31;
          if (v31)
          {
            sub_100063CD0(v196, v197);
            sub_100063CD0(v98, v97);

            swift_bridgeObjectRelease(v99);
            v31 = 0;
            sub_10006B9B4(v184, v49);
            swift_errorRelease(v101);
            v104 = v174;
            v103 = v175;
            v34 = (void *)v168;
            goto LABEL_64;
          }
          v102 = v100;
          sub_100063CD0(v196, v197);
          swift_bridgeObjectRelease(v99);
          sub_1001C06EC(v102, v202);
          v49 = 0;
          sub_100063CD0(v98, v97);
          v54 = v203;
          v36 = v204;
          sub_100063C8C(v203, v204);
          sub_100124944(v202, (void (*)(uint64_t, uint64_t))sub_100063CD0);
          v52 = v170;
          v34 = (void *)v168;
          sub_10007C23C(v54, v36);
          if ((v105 & 1) == 0)
            goto LABEL_74;

          sub_100063CD0(v54, v36);
          sub_10006B9B4(v184, v190);
          v104 = v174;
          v103 = v175;
          v31 = 0;
LABEL_64:
          sub_1001247E8(v103, type metadata accessor for SESTLKShareData);
          v40 = v104;
          v41 = v166;
          v36 = v167;
          v39 = v173;
LABEL_9:
          sub_100096700(v40, &qword_100346C70);
          v33 = v170;
        }
        while (v39 != v41);
      }
    }
    swift_bridgeObjectRelease(v36);
    sub_100063CD0(v33, (unint64_t)v34);
    LOBYTE(v25) = 0;
    return v25 & 1;
  }
  sub_100063CD0(v25, v27);
  swift_bridgeObjectRelease(inited);
  return v25 & 1;
}

uint64_t sub_10010B704(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4[32] = a3;
  v4[33] = v3;
  v4[30] = a1;
  v4[31] = a2;
  v5 = (*(_QWORD *)(*(_QWORD *)(sub_100063D3C(&qword_100346BB0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[34] = swift_task_alloc(v5);
  v4[35] = swift_task_alloc(v5);
  v4[36] = swift_task_alloc(v5);
  v6 = type metadata accessor for SESPeerIdentityData(0);
  v4[37] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[38] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[39] = swift_task_alloc(v8);
  v4[40] = swift_task_alloc(v8);
  v4[41] = swift_task_alloc(v8);
  v4[42] = swift_task_alloc(v8);
  v4[43] = swift_task_alloc(v8);
  return swift_task_switch(sub_10010B7DC, v3, 0);
}

uint64_t sub_10010B7DC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  NSString v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0 + 2;
  v2 = objc_opt_self(SecureElementManager);
  v3 = String._bridgeToObjectiveC()();
  v0[44] = v3;
  v0[7] = v0 + 25;
  v0[2] = v0;
  v0[3] = sub_10010B8A4;
  v4 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v5 = v0 + 10;
  v5[1] = 0x40000000;
  v5[2] = sub_100118F3C;
  v5[3] = &unk_100309720;
  v5[4] = v4;
  sub_100051680(v2, v3, v5);
  return swift_continuation_await(v1);
}

uint64_t sub_10010B8A4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 360) = v2;
  if (v2)
    v3 = sub_10010C33C;
  else
    v3 = sub_10010B904;
  return swift_task_switch(v3, *(_QWORD *)(v1 + 264), 0);
}

uint64_t sub_10010B904()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  unint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  void *v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  os_log_type_t v33;
  _BOOL4 v34;
  uint64_t v35;
  uint64_t v36;
  uint8_t *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  os_log_type_t v53;
  _BOOL4 v54;
  uint64_t v55;
  uint8_t *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  os_log_type_t v67;
  _BOOL4 v68;
  uint64_t v69;
  uint8_t *v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  NSObject *v75;
  uint64_t v76;
  os_log_type_t v77;
  uint8_t *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  _BYTE *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t *v94;
  void *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98[2];

  v1 = *(void **)(v0 + 200);

  if (v1)
  {
    v3 = sub_100118F40(v1);
    v96 = v11;
    v97 = (uint64_t)v3;
    v94 = (uint64_t *)(v0 + 224);
    v95 = v1;
    v93 = (uint64_t *)(v0 + 232);
    v13 = *(_QWORD *)(v0 + 296);
    v12 = *(_QWORD *)(v0 + 304);
    v14 = *(_QWORD *)(v0 + 288);
    v15 = *(_QWORD *)(v0 + 264) + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__cachedLocalIdentity;
    swift_beginAccess(v15, v0 + 144, 0, 0);
    v16 = *(_QWORD *)(v15 + 8);
    v17 = *(_QWORD *)(v15 + 24);
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v17);
    sub_100120444(v16, v14);
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease(v17);
    v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v14, 1, v13);
    if (v18 == 1)
    {
      sub_100096700(*(_QWORD *)(v0 + 288), &qword_100346BB0);
      v19 = v95;
    }
    else
    {
      v20 = *(uint64_t **)(v0 + 344);
      sub_100124884(*(_QWORD *)(v0 + 288), (uint64_t)v20, type metadata accessor for SESPeerIdentityData);
      v22 = *v20;
      v21 = v20[1];
      sub_100063C8C(v22, v21);
      sub_10007C23C(v22, v21);
      v24 = v23;
      sub_100063CD0(v22, v21);
      v25 = *(_QWORD *)(v0 + 344);
      if ((v24 & 1) != 0)
      {
        v26 = *(_QWORD *)(v0 + 240);
        v27 = *(_QWORD *)(v0 + 336);
        sub_100124B74(v25, v26, type metadata accessor for SESPeerIdentityData);
        v28 = sub_100124B74(v26, v27, type metadata accessor for SESPeerIdentityData);
        v29 = Logger.logObject.getter(v28);
        v33 = static os_log_type_t.info.getter(v29, v30, v31, v32);
        v34 = os_log_type_enabled(v29, v33);
        v36 = *(_QWORD *)(v0 + 336);
        v35 = *(_QWORD *)(v0 + 344);
        if (v34)
        {
          v91 = *(_QWORD *)(v0 + 344);
          v37 = (uint8_t *)swift_slowAlloc(12, -1);
          v38 = swift_slowAlloc(32, -1);
          v98[0] = v38;
          *(_DWORD *)v37 = 136315138;
          v39 = sub_1001BE4B4();
          v41 = v40;
          *v93 = sub_1001C56EC(v39, v40, v98);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v93, v0 + 240, v37 + 4, v37 + 12);
          swift_bridgeObjectRelease(v41);
          sub_1001247E8(v36, type metadata accessor for SESPeerIdentityData);
          _os_log_impl((void *)&_mh_execute_header, v29, v33, "Using cached identity for %s", v37, 0xCu);
          swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v38, -1, -1);
          swift_slowDealloc(v37, -1, -1);

          v42 = v91;
        }
        else
        {
          sub_1001247E8(*(_QWORD *)(v0 + 336), type metadata accessor for SESPeerIdentityData);

          v42 = v35;
        }
        goto LABEL_16;
      }
      sub_1001247E8(v25, type metadata accessor for SESPeerIdentityData);
      v19 = v95;
    }
    sub_100119480(v19, *(uint64_t **)(v0 + 328));
    v92 = *(_QWORD *)(v0 + 320);
    v44 = *(_QWORD *)(v0 + 296);
    v43 = *(_QWORD *)(v0 + 304);
    v46 = *(_QWORD *)(v0 + 272);
    v45 = *(_QWORD *)(v0 + 280);
    v47 = *(_QWORD *)(v0 + 240);
    sub_100124884(*(_QWORD *)(v0 + 328), v47, type metadata accessor for SESPeerIdentityData);
    sub_100124B74(v47, v45, type metadata accessor for SESPeerIdentityData);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v43 + 56))(v45, 0, 1, v44);
    sub_1000E4E48(v45, v46, &qword_100346BB0);
    swift_beginAccess(v15, v0 + 168, 33, 0);
    sub_100120680(v46);
    swift_endAccess(v0 + 168);
    sub_100096700(v45, &qword_100346BB0);
    v48 = sub_100124B74(v47, v92, type metadata accessor for SESPeerIdentityData);
    v49 = Logger.logObject.getter(v48);
    v53 = static os_log_type_t.info.getter(v49, v50, v51, v52);
    v54 = os_log_type_enabled(v49, v53);
    v55 = *(_QWORD *)(v0 + 320);
    if (v54)
    {
      v56 = (uint8_t *)swift_slowAlloc(12, -1);
      v57 = swift_slowAlloc(32, -1);
      v98[0] = v57;
      *(_DWORD *)v56 = 136315138;
      v58 = sub_1001BE4B4();
      v60 = v59;
      *v94 = sub_1001C56EC(v58, v59, v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v94, v93, v56 + 4, v56 + 12);
      swift_bridgeObjectRelease(v60);
      sub_1001247E8(v55, type metadata accessor for SESPeerIdentityData);
      _os_log_impl((void *)&_mh_execute_header, v49, v53, "Created & cached device identity for %s", v56, 0xCu);
      swift_arrayDestroy(v57, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v57, -1, -1);
      swift_slowDealloc(v56, -1, -1);

      goto LABEL_17;
    }

    v42 = v55;
LABEL_16:
    sub_1001247E8(v42, type metadata accessor for SESPeerIdentityData);
LABEL_17:
    v61 = sub_1001197D8(*(_QWORD **)(v0 + 240), *(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256), v97, v96);
    if ((v61 & 1) != 0)
    {
      v62 = sub_100124B74(*(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 312), type metadata accessor for SESPeerIdentityData);
      v63 = Logger.logObject.getter(v62);
      v67 = static os_log_type_t.info.getter(v63, v64, v65, v66);
      v68 = os_log_type_enabled(v63, v67);
      v69 = *(_QWORD *)(v0 + 312);
      if (v68)
      {
        v70 = (uint8_t *)swift_slowAlloc(12, -1);
        v71 = swift_slowAlloc(32, -1);
        v98[0] = v71;
        *(_DWORD *)v70 = 136315138;
        v72 = sub_1001BE4B4();
        v74 = v73;
        *(_QWORD *)(v0 + 216) = sub_1001C56EC(v72, v73, v98);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v94, v70 + 4, v70 + 12);
        swift_bridgeObjectRelease(v74);
        sub_1001247E8(v69, type metadata accessor for SESPeerIdentityData);
        _os_log_impl((void *)&_mh_execute_header, v63, v67, "Got SE identity: %s", v70, 0xCu);
        swift_arrayDestroy(v71, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v71, -1, -1);
        swift_slowDealloc(v70, -1, -1);
        sub_100063CD0(v97, v96);

      }
      else
      {
        sub_100063CD0(v97, v96);

        sub_1001247E8(v69, type metadata accessor for SESPeerIdentityData);
      }
    }
    else
    {
      v75 = Logger.logObject.getter(v61);
      v77 = static os_log_type_t.error.getter(v75, v76);
      if (os_log_type_enabled(v75, v77))
      {
        v78 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v78 = 0;
        _os_log_impl((void *)&_mh_execute_header, v75, v77, "DSID mismatch!", v78, 2u);
        swift_slowDealloc(v78, -1, -1);
      }

      sub_1001324F0(v95);
      v79 = *(_QWORD *)(v0 + 240);
      v80 = sub_10012443C();
      v81 = swift_allocError(&type metadata for KeySyncEvent, v80, 0, 0);
      *v82 = 29;
      swift_willThrow(v81);
      sub_100063CD0(v97, v96);

      sub_1001247E8(v79, type metadata accessor for SESPeerIdentityData);
    }
    goto LABEL_24;
  }
  v4 = Logger.logObject.getter(v2);
  v6 = static os_log_type_t.error.getter(v4, v5);
  if (os_log_type_enabled(v4, (os_log_type_t)v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, (os_log_type_t)v6, "Failed to get secure element", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  v8 = sub_10012443C();
  v9 = swift_allocError(&type metadata for KeySyncEvent, v8, 0, 0);
  *v10 = 4;
  swift_willThrow(v9);
LABEL_24:
  v83 = *(_QWORD *)(v0 + 336);
  v85 = *(_QWORD *)(v0 + 320);
  v84 = *(_QWORD *)(v0 + 328);
  v86 = *(_QWORD *)(v0 + 312);
  v88 = *(_QWORD *)(v0 + 280);
  v87 = *(_QWORD *)(v0 + 288);
  v89 = *(_QWORD *)(v0 + 272);
  swift_task_dealloc(*(_QWORD *)(v0 + 344));
  swift_task_dealloc(v83);
  swift_task_dealloc(v84);
  swift_task_dealloc(v85);
  swift_task_dealloc(v86);
  swift_task_dealloc(v87);
  swift_task_dealloc(v88);
  swift_task_dealloc(v89);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10010C33C(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  unint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(void **)(v1 + 352);
  v3 = *(_QWORD *)(v1 + 360);
  swift_willThrow(a1);
  swift_errorRelease(v3);

  v5 = Logger.logObject.getter(v4);
  v7 = static os_log_type_t.error.getter(v5, v6);
  if (os_log_type_enabled(v5, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v7, "Failed to get secure element", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  v9 = sub_10012443C();
  v10 = swift_allocError(&type metadata for KeySyncEvent, v9, 0, 0);
  *v11 = 4;
  swift_willThrow(v10);
  v12 = *(_QWORD *)(v1 + 336);
  v14 = *(_QWORD *)(v1 + 320);
  v13 = *(_QWORD *)(v1 + 328);
  v15 = *(_QWORD *)(v1 + 312);
  v17 = *(_QWORD *)(v1 + 280);
  v16 = *(_QWORD *)(v1 + 288);
  v18 = *(_QWORD *)(v1 + 272);
  swift_task_dealloc(*(_QWORD *)(v1 + 344));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10010C498(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4[72] = v3;
  v4[71] = a3;
  v4[70] = a2;
  v4[69] = a1;
  v5 = type metadata accessor for SESPeerIdentityData(0);
  v4[73] = v5;
  v4[74] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10010C500, v3, 0);
}

uint64_t sub_10010C500()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  Class isa;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0 + 10;
  v2 = *(void **)(v0[72] + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_keychainWrapper);
  v0[75] = v2;
  isa = Data._bridgeToObjectiveC()().super.isa;
  v0[76] = isa;
  v0[15] = v0 + 41;
  v0[10] = v0;
  v0[11] = sub_10010C5C4;
  v4 = swift_continuation_init(v0 + 10, 1);
  v0[26] = _NSConcreteStackBlock;
  v5 = v0 + 26;
  v5[1] = 0x40000000;
  v5[2] = sub_10011A3E8;
  v5[3] = &unk_1003096D8;
  v5[4] = v4;
  objc_msgSend(v2, "getSEPeerIdentityInfo:withCompletion:", isa, v5);
  return swift_continuation_await(v1);
}

uint64_t sub_10010C5C4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 112);
  *(_QWORD *)(*v0 + 616) = v2;
  if (v2)
    v3 = sub_10010D3B4;
  else
    v3 = sub_10010C624;
  return swift_task_switch(v3, *(_QWORD *)(v1 + 576), 0);
}

uint64_t sub_10010C624()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  os_log_type_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Class v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  char v38;
  void *v40;
  Class isa;
  Class v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  void *v46;
  void *v47;
  Class v48;
  id v49;
  Class v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  os_log_type_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;

  v1 = *(void **)(v0 + 608);
  v2 = *(_QWORD *)(v0 + 328);
  v3 = *(_QWORD *)(v0 + 336);
  *(_QWORD *)(v0 + 624) = v2;
  *(_QWORD *)(v0 + 632) = v3;
  v4 = *(_QWORD *)(v0 + 344);
  *(_QWORD *)(v0 + 640) = v4;
  sub_10006BA34(v2, v3);

  *(_QWORD *)(v0 + 648) = OBJC_IVAR____TtC10seserviced16SEKeySyncManager_logger;
  sub_10006BA34(v2, v3);
  swift_bridgeObjectRetain(v4);
  sub_10006BA34(v2, v3);
  swift_bridgeObjectRetain(v4);
  v6 = Logger.logObject.getter(v5);
  v10 = static os_log_type_t.info.getter(v6, v7, v8, v9);
  v11 = v3 >> 60;
  if (os_log_type_enabled(v6, v10))
  {
    v56 = v10;
    v54 = v0 + 544;
    v12 = swift_slowAlloc(22, -1);
    v55 = swift_slowAlloc(32, -1);
    *(_DWORD *)v12 = 136315394;
    v57 = v55;
    if (v3 >> 60 == 15)
    {
      v13 = 0;
      v14 = 0;
    }
    else
    {
      sub_100063C8C(v2, v3);
      sub_100063C8C(v2, v3);
      sub_1001BD150(4, v2, v3);
      v52 = v59;
      v53 = v58;
      sub_1001BD2CC(v58, v59);
      v16 = v15;
      *(_QWORD *)(v0 + 520) = v15;
      v17 = sub_100063D3C((uint64_t *)&unk_100346060);
      v18 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
      v13 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v17, v18);
      v14 = v19;
      swift_bridgeObjectRelease(v16);
      sub_100063CD0(v53, v52);
    }
    *(_QWORD *)(v0 + 424) = v13;
    *(_QWORD *)(v0 + 432) = v14;
    v20 = sub_100063D3C((uint64_t *)&unk_100347DD0);
    v21 = String.init<A>(describing:)(v0 + 424, v20);
    v23 = v22;
    sub_10006B9B4(v2, v3);
    *(_QWORD *)(v0 + 536) = sub_1001C56EC(v21, v23, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 536, v54, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease(v23);
    sub_10006B9B4(v2, v3);
    sub_10006B9B4(v2, v3);
    *(_WORD *)(v12 + 12) = 2048;
    if ((unint64_t)v4 >> 62)
    {
      if (v4 < 0)
        v51 = v4;
      else
        v51 = v4 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v4);
      v24 = _CocoaArrayWrapper.endIndex.getter(v51);
      swift_bridgeObjectRelease(v4);
    }
    else
    {
      v24 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v11 = v3 >> 60;
    swift_bridgeObjectRelease(v4);
    *(_QWORD *)(v0 + 544) = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v54, v0 + 552, v12 + 14, v12 + 22);
    swift_bridgeObjectRelease(v4);
    _os_log_impl((void *)&_mh_execute_header, v6, v56, "Got local KC peer identifier %s and %ld other peers", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy(v55, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v55, -1, -1);
    swift_slowDealloc(v12, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease(v4);

    sub_10006B9B4(v2, v3);
    sub_10006B9B4(v2, v3);
    swift_bridgeObjectRelease(v4);
  }
  *(_QWORD *)(v0 + 656) = 0;
  v25 = *(uint64_t **)(v0 + 568);
  v26 = *v25;
  *(_QWORD *)(v0 + 664) = *v25;
  v27 = v25[1];
  *(_QWORD *)(v0 + 672) = v27;
  if (v11 <= 0xE)
  {
    sub_10006BA34(v2, v3);
    sub_100063C8C(v26, v27);
    sub_10007C23C(v2, v3);
    v38 = v37;
    sub_100063CD0(v26, v27);
    sub_10006B9B4(v2, v3);
    if ((v38 & 1) != 0)
    {
      sub_10006B9B4(v2, v3);
      sub_10006B9B4(v2, v3);
      swift_task_dealloc(*(_QWORD *)(v0 + 592));
      return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 640));
    }
    v45 = v0 + 16;
    v40 = *(void **)(v0 + 600);
    isa = Data._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)(v0 + 680) = isa;
    v42 = Data._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)(v0 + 688) = v42;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_10010CCA0;
    v43 = swift_continuation_init(v0 + 16, 1);
    *(_QWORD *)(v0 + 248) = _NSConcreteStackBlock;
    v44 = (_QWORD *)(v0 + 248);
    v44[1] = 0x40000000;
    v44[2] = sub_10011A4E0;
    v44[3] = &unk_100309708;
    v44[4] = v43;
    objc_msgSend(v40, "removeLocalSEPeerIdentity:altDSID:completion:", isa, v42, v44, v52, v53);
  }
  else
  {
    sub_100063C8C(v26, v27);
    sub_10006B9B4(v2, v3);
    sub_10006B9B4(v26, v27);
    v28 = *(_QWORD *)(v0 + 584);
    v29 = *(_QWORD *)(v0 + 568);
    v30 = Data._bridgeToObjectiveC()().super.isa;
    v31 = type metadata accessor for PropertyListEncoder(0);
    swift_allocObject(v31, *(unsigned int *)(v31 + 48), *(unsigned __int16 *)(v31 + 52));
    v32 = PropertyListEncoder.init()();
    v33 = sub_1000639EC(&qword_100346C58, type metadata accessor for SESPeerIdentityData, (uint64_t)&unk_10028AD24);
    v34 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v29, v28, v33);
    v36 = v35;
    swift_release(v32);
    v45 = v0 + 144;
    v46 = *(void **)(v0 + 600);
    v47 = (void *)objc_opt_self(SESPeerIdentity);
    v48 = Data._bridgeToObjectiveC()().super.isa;
    sub_100063CD0(v34, v36);
    v49 = objc_msgSend(v47, "withPeerIdentifier:peerData:", v30, v48);
    *(_QWORD *)(v0 + 704) = v49;

    v50 = Data._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)(v0 + 712) = v50;
    *(_QWORD *)(v0 + 144) = v0;
    *(_QWORD *)(v0 + 152) = sub_10010D164;
    *(_QWORD *)(v0 + 320) = swift_continuation_init(v0 + 144, 1);
    *(_QWORD *)(v0 + 288) = _NSConcreteStackBlock;
    *(_QWORD *)(v0 + 296) = 0x40000000;
    *(_QWORD *)(v0 + 304) = sub_10011A4E0;
    *(_QWORD *)(v0 + 312) = &unk_1003096F0;
    objc_msgSend(v46, "addLocalSEPeerIdentity:altDSID:completion:", v49, v50, v0 + 288, v52, v53);
  }
  return swift_continuation_await(v45);
}

uint64_t sub_10010CCA0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 696) = v2;
  if (v2)
  {
    v3 = *(_QWORD *)(v1 + 576);
    swift_bridgeObjectRelease(*(_QWORD *)(v1 + 640));
    v4 = sub_10010D5B8;
    v5 = v3;
  }
  else
  {
    v5 = *(_QWORD *)(v1 + 576);
    v4 = sub_10010CD10;
  }
  return swift_task_switch(v4, v5, 0);
}

uint64_t sub_10010CD10()
{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  os_log_type_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  _DWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSData v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  void *v36;
  void *v37;
  Class isa;
  id v39;
  Class v40;
  unint64_t v41;
  _DWORD *v42;
  uint8_t *buf;
  uint64_t v44;
  os_log_type_t type;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;

  v1 = *(void **)(v0 + 680);
  v2 = *(_QWORD *)(v0 + 632);
  v3 = *(_QWORD *)(v0 + 624);

  sub_100063C8C(v3, v2);
  v4 = sub_100063C8C(v3, v2);
  v5 = Logger.logObject.getter(v4);
  v9 = static os_log_type_t.info.getter(v5, v6, v7, v8);
  if (os_log_type_enabled(v5, v9))
  {
    type = v9;
    v10 = *(_QWORD *)(v0 + 656);
    v11 = *(_QWORD *)(v0 + 632);
    v12 = *(_QWORD *)(v0 + 624);
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v44 = swift_slowAlloc(32, -1);
    v46 = v44;
    buf = v13;
    *(_DWORD *)v13 = 136315138;
    v14 = v13 + 12;
    v41 = v11;
    v42 = v13 + 4;
    sub_100063C8C(v12, v11);
    sub_1001BD150(4, v12, v11);
    v15 = v47;
    v16 = v48;
    sub_1001BD2CC(v47, v48);
    v18 = v17;
    *(_QWORD *)(v0 + 496) = v17;
    v19 = sub_100063D3C((uint64_t *)&unk_100346060);
    v20 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
    v21 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v19, v20);
    v23 = v22;
    swift_bridgeObjectRelease(v18);
    sub_100063CD0(v15, v16);
    *(_QWORD *)(v0 + 504) = sub_1001C56EC(v21, v23, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 504, v0 + 512, v42, v14);
    swift_bridgeObjectRelease(v23);
    sub_10006B9B4(v12, v41);
    sub_10006B9B4(v12, v41);
    _os_log_impl((void *)&_mh_execute_header, v5, type, "Removed local SE Peer Identifier %s)", buf, 0xCu);
    swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1, -1);
    swift_slowDealloc(buf, -1, -1);
    sub_10006B9B4(v12, v41);

  }
  else
  {
    v24 = *(_QWORD *)(v0 + 632);
    v25 = *(_QWORD *)(v0 + 624);
    sub_10006B9B4(v25, v24);

    sub_10006B9B4(v25, v24);
    sub_10006B9B4(v25, v24);
    v10 = *(_QWORD *)(v0 + 656);
  }
  v26 = *(_QWORD *)(v0 + 584);
  v27 = *(_QWORD *)(v0 + 568);
  v28.super.isa = Data._bridgeToObjectiveC()().super.isa;
  v29 = type metadata accessor for PropertyListEncoder(0);
  swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
  v30 = PropertyListEncoder.init()();
  v31 = sub_1000639EC(&qword_100346C58, type metadata accessor for SESPeerIdentityData, (uint64_t)&unk_10028AD24);
  v32 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v27, v26, v31);
  v34 = v33;
  swift_release(v30);
  if (v10)
    return swift_unexpectedError(v10, "seserviced/SEKeySync+Encoding.swift", 35, 1, 68);
  v36 = *(void **)(v0 + 600);
  v37 = (void *)objc_opt_self(SESPeerIdentity);
  isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100063CD0(v32, v34);
  v39 = objc_msgSend(v37, "withPeerIdentifier:peerData:", v28.super.isa, isa);
  *(_QWORD *)(v0 + 704) = v39;

  v40 = Data._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)(v0 + 712) = v40;
  *(_QWORD *)(v0 + 144) = v0;
  *(_QWORD *)(v0 + 152) = sub_10010D164;
  *(_QWORD *)(v0 + 320) = swift_continuation_init(v0 + 144, 1);
  *(_QWORD *)(v0 + 288) = _NSConcreteStackBlock;
  *(_QWORD *)(v0 + 296) = 0x40000000;
  *(_QWORD *)(v0 + 304) = sub_10011A4E0;
  *(_QWORD *)(v0 + 312) = &unk_1003096F0;
  objc_msgSend(v36, "addLocalSEPeerIdentity:altDSID:completion:", v39, v40, v0 + 288);
  return swift_continuation_await(v0 + 144);
}

uint64_t sub_10010D164()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 176);
  *(_QWORD *)(*v0 + 720) = v2;
  if (v2)
  {
    v3 = *(_QWORD *)(v1 + 576);
    swift_bridgeObjectRelease(*(_QWORD *)(v1 + 640));
    v4 = sub_10010D7E4;
    v5 = v3;
  }
  else
  {
    v5 = *(_QWORD *)(v1 + 576);
    v4 = sub_10010D1D4;
  }
  return swift_task_switch(v4, v5, 0);
}

uint64_t sub_10010D1D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 592);
  v2 = *(_QWORD *)(v0 + 568);

  v3 = sub_100124B74(v2, v1, type metadata accessor for SESPeerIdentityData);
  v4 = Logger.logObject.getter(v3);
  v8 = static os_log_type_t.info.getter(v4, v5, v6, v7);
  if (os_log_type_enabled(v4, v8))
  {
    v19 = *(_QWORD *)(v0 + 632);
    v20 = *(void **)(v0 + 704);
    v18 = *(_QWORD *)(v0 + 624);
    v9 = *(_QWORD *)(v0 + 592);
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v21 = v11;
    *(_DWORD *)v10 = 136315138;
    v12 = sub_1001BE4B4();
    v14 = v13;
    *(_QWORD *)(v0 + 440) = sub_1001C56EC(v12, v13, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 440, v0 + 448, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease(v14);
    sub_1001247E8(v9, type metadata accessor for SESPeerIdentityData);
    _os_log_impl((void *)&_mh_execute_header, v4, v8, "KeySyncManager: Added identity to Keychain Successfully : %s", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);
    sub_10006B9B4(v18, v19);

  }
  else
  {
    v15 = *(void **)(v0 + 704);
    v16 = *(_QWORD *)(v0 + 592);
    sub_10006B9B4(*(_QWORD *)(v0 + 624), *(_QWORD *)(v0 + 632));

    sub_1001247E8(v16, type metadata accessor for SESPeerIdentityData);
  }
  swift_task_dealloc(*(_QWORD *)(v0 + 592));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 640));
}

uint64_t sub_10010D3B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v20;

  v2 = *(_QWORD *)(v1 + 616);
  v3 = *(void **)(v1 + 608);
  swift_willThrow(a1);

  swift_errorRetain(v2);
  v4 = swift_errorRetain(v2);
  v5 = Logger.logObject.getter(v4);
  v7 = static os_log_type_t.error.getter(v5, v6);
  if (os_log_type_enabled(v5, v7))
  {
    v8 = *(_QWORD *)(v1 + 616);
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v20 = v10;
    *(_DWORD *)v9 = 136315138;
    swift_getErrorValue(v8, v1 + 456, v1 + 352);
    v11 = Error.localizedDescription.getter(*(_QWORD *)(v1 + 360), *(_QWORD *)(v1 + 368));
    v13 = v12;
    *(_QWORD *)(v1 + 448) = sub_1001C56EC(v11, v12, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 448, v1 + 456, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease(v13);
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v7, "Failed to get SE Peer Identity Info %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

  }
  else
  {
    v14 = *(_QWORD *)(v1 + 616);

    swift_errorRelease(v14);
    swift_errorRelease(v14);
  }
  v15 = sub_10012443C();
  v16 = swift_allocError(&type metadata for KeySyncEvent, v15, 0, 0);
  *v17 = 20;
  swift_willThrow(v16);
  v18 = *(_QWORD *)(v1 + 592);
  swift_errorRelease(*(_QWORD *)(v1 + 616));
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10010D5B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  os_log_type_t v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v23;

  v2 = *(_QWORD *)(v1 + 696);
  v3 = *(void **)(v1 + 688);
  v4 = *(void **)(v1 + 680);
  swift_willThrow(a1);

  swift_errorRetain(v2);
  v5 = swift_errorRetain(v2);
  v6 = Logger.logObject.getter(v5);
  v8 = static os_log_type_t.error.getter(v6, v7);
  if (os_log_type_enabled(v6, v8))
  {
    v9 = *(_QWORD *)(v1 + 696);
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v23 = v11;
    *(_DWORD *)v10 = 136315138;
    swift_getErrorValue(v9, v1 + 464, v1 + 400);
    v12 = Error.localizedDescription.getter(*(_QWORD *)(v1 + 408), *(_QWORD *)(v1 + 416));
    v14 = v13;
    *(_QWORD *)(v1 + 480) = sub_1001C56EC(v12, v13, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 480, v1 + 488, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease(v14);
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v6, v8, "Failed to remove local SE Peer Identifier %s", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {
    v15 = *(_QWORD *)(v1 + 696);

    swift_errorRelease(v15);
    swift_errorRelease(v15);
  }
  v16 = *(_QWORD *)(v1 + 632);
  v17 = *(_QWORD *)(v1 + 624);
  v18 = sub_10012443C();
  v19 = swift_allocError(&type metadata for KeySyncEvent, v18, 0, 0);
  *v20 = 20;
  swift_willThrow(v19);
  sub_10006B9B4(v17, v16);
  sub_10006B9B4(v17, v16);
  v21 = *(_QWORD *)(v1 + 592);
  swift_errorRelease(*(_QWORD *)(v1 + 696));
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10010D7E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v23;

  v2 = *(_QWORD *)(v1 + 720);
  v3 = *(void **)(v1 + 712);
  swift_willThrow(a1);

  swift_errorRetain(v2);
  v4 = swift_errorRetain(v2);
  v5 = Logger.logObject.getter(v4);
  v7 = static os_log_type_t.error.getter(v5, v6);
  if (os_log_type_enabled(v5, v7))
  {
    v8 = *(_QWORD *)(v1 + 720);
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v23 = v10;
    *(_DWORD *)v9 = 136315138;
    swift_getErrorValue(v8, v1 + 528, v1 + 376);
    v11 = Error.localizedDescription.getter(*(_QWORD *)(v1 + 384), *(_QWORD *)(v1 + 392));
    v13 = v12;
    *(_QWORD *)(v1 + 472) = sub_1001C56EC(v11, v12, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 472, v1 + 480, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease(v13);
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v7, "Failed to add local SE Peer Identity %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

  }
  else
  {
    v14 = *(_QWORD *)(v1 + 720);

    swift_errorRelease(v14);
    swift_errorRelease(v14);
  }
  v15 = *(void **)(v1 + 704);
  v16 = *(_QWORD *)(v1 + 632);
  v17 = *(_QWORD *)(v1 + 624);
  v18 = sub_10012443C();
  v19 = swift_allocError(&type metadata for KeySyncEvent, v18, 0, 0);
  *v20 = 21;
  swift_willThrow(v19);
  sub_10006B9B4(v17, v16);

  v21 = *(_QWORD *)(v1 + 592);
  swift_errorRelease(*(_QWORD *)(v1 + 720));
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10010DA04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;

  v6[40] = a5;
  v6[41] = v5;
  v6[38] = a3;
  v6[39] = a4;
  v6[36] = a1;
  v6[37] = a2;
  return swift_task_switch(sub_10010DA24, v5, 0);
}

uint64_t sub_10010DA24()
{
  uint64_t v0;
  id v1;
  uint64_t *v2;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  id v10;
  id v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_log_type_t v16;
  _BOOL4 v17;
  _QWORD *v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  os_log_type_t v29;
  _BOOL4 v30;
  uint64_t *v31;
  uint8_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  char v41;
  _QWORD *v42;
  _QWORD *v43;
  NSObject *v44;
  uint64_t v45;
  os_log_type_t v46;
  _BOOL4 v47;
  _QWORD *v48;
  uint8_t *v49;
  uint64_t v50;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  _QWORD **v59;
  _OWORD *v60;
  _OWORD *v61;
  unint64_t v62;
  uint64_t v63;

  v1 = objc_msgSend(*(id *)(v0 + 296), "currentTLK");
  *(_QWORD *)(v0 + 336) = v1;
  v2 = *(uint64_t **)(v0 + 288);
  if (v1)
  {
    v3 = v1;
    v60 = (_OWORD *)(v0 + 224);
    v61 = (_OWORD *)(v0 + 208);
    v58 = (uint64_t *)(v0 + 272);
    v4 = *v2;
    v5 = v2[1];
    v6 = objc_msgSend(v1, "tlkUUID");
    v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v6);
    v9 = v8;

    sub_100158724(v4, v5);
    sub_100063CD0(v7, v9);
    sub_100124480(v2);
    v10 = v3;
    sub_100124480(v2);
    v11 = v10;
    v12 = Logger.logObject.getter(v11);
    v16 = static os_log_type_t.info.getter(v12, v13, v14, v15);
    v17 = os_log_type_enabled(v12, v16);
    v59 = (_QWORD **)(v0 + 288);
    v18 = *(_QWORD **)(v0 + 288);
    v57 = v4;
    if (v17)
    {
      v62 = v5;
      v19 = swift_slowAlloc(22, -1);
      v55 = (_QWORD *)swift_slowAlloc(8, -1);
      v56 = swift_slowAlloc(32, -1);
      v63 = v56;
      *(_DWORD *)v19 = 136315394;
      swift_bridgeObjectRetain(v62);
      *v58 = sub_1001C56EC(v4, v62, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v58, v0 + 280, v19 + 4, v19 + 12);
      swift_bridgeObjectRelease(v62);
      sub_1001248C8(v18);
      sub_1001248C8(v18);
      *(_WORD *)(v19 + 12) = 2112;
      *(_QWORD *)(v0 + 280) = v11;
      v20 = v11;
      v21 = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v59, v19 + 14, v19 + 22);
      *v55 = v3;

      v11 = v20;
      _os_log_impl((void *)&_mh_execute_header, v12, v16, "View %s already has TLK %@", (uint8_t *)v19, 0x16u);
      v22 = sub_100063D3C((uint64_t *)&unk_100346090);
      swift_arrayDestroy(v55, 1, v22);
      swift_slowDealloc(v55, -1, -1);
      swift_arrayDestroy(v56, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v56, -1, -1);
      v23 = v19;
      v5 = v62;
      swift_slowDealloc(v23, -1, -1);

    }
    else
    {

      sub_1001248C8(v18);
      sub_1001248C8(v18);

    }
    v36 = *(_QWORD *)(v0 + 328) + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__recoveryForce;
    swift_beginAccess(v36, v0 + 184, 0, 0);
    v37 = *(_OWORD *)v36;
    v38 = *(_OWORD *)(v36 + 16);
    *(_WORD *)(v0 + 152) = *(_WORD *)(v36 + 32);
    *(_OWORD *)(v0 + 120) = v37;
    *(_OWORD *)(v0 + 136) = v38;
    *v60 = *(_OWORD *)v36;
    *v61 = *(_OWORD *)(v0 + 136);
    sub_10006F87C((uint64_t)v60);
    v39 = sub_10006F87C((uint64_t)v61);
    sub_10015348C(v39);
    v41 = v40;
    sub_10006F8A4((uint64_t)v60);
    sub_10006F8A4((uint64_t)v61);
    if ((v41 & 1) != 0)
    {
      v42 = *v59;
      sub_100124480(*v59);
      v43 = sub_100124480(v42);
      v44 = Logger.logObject.getter(v43);
      v46 = static os_log_type_t.error.getter(v44, v45);
      v47 = os_log_type_enabled(v44, v46);
      v48 = *v59;
      if (v47)
      {
        v49 = (uint8_t *)swift_slowAlloc(12, -1);
        v50 = swift_slowAlloc(32, -1);
        v63 = v50;
        *(_DWORD *)v49 = 136315138;
        swift_bridgeObjectRetain(v5);
        *(_QWORD *)(v0 + 264) = sub_1001C56EC(v57, v5, &v63);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 264, v58, v49 + 4, v49 + 12);
        swift_bridgeObjectRelease(v5);
        sub_1001248C8(v48);
        sub_1001248C8(v48);
        _os_log_impl((void *)&_mh_execute_header, v44, v46, "Forcibly deleting TLK for %s", v49, 0xCu);
        swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v50, -1, -1);
        swift_slowDealloc(v49, -1, -1);

      }
      else
      {

        sub_1001248C8(v48);
        sub_1001248C8(v48);
      }
      v53 = (_QWORD *)swift_task_alloc(dword_100346B64);
      *(_QWORD *)(v0 + 344) = v53;
      *v53 = v0;
      v53[1] = sub_10010E0B8;
      v54 = *(_QWORD *)(v0 + 328);
      v53[20] = v54;
      return swift_task_switch(sub_1001095A0, v54, 0);
    }
    else
    {

      return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
    }
  }
  else
  {
    *(_QWORD *)(v0 + 368) = OBJC_IVAR____TtC10seserviced16SEKeySyncManager_logger;
    sub_100124480(v2);
    v24 = sub_100124480(v2);
    v25 = Logger.logObject.getter(v24);
    v29 = static os_log_type_t.info.getter(v25, v26, v27, v28);
    v30 = os_log_type_enabled(v25, v29);
    v31 = *(uint64_t **)(v0 + 288);
    if (v30)
    {
      v32 = (uint8_t *)swift_slowAlloc(12, -1);
      v33 = swift_slowAlloc(32, -1);
      v63 = v33;
      *(_DWORD *)v32 = 136315138;
      v35 = *v31;
      v34 = v31[1];
      swift_bridgeObjectRetain(v34);
      *(_QWORD *)(v0 + 248) = sub_1001C56EC(v35, v34, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 248, v0 + 256, v32 + 4, v32 + 12);
      swift_bridgeObjectRelease(v34);
      sub_1001248C8(v31);
      sub_1001248C8(v31);
      _os_log_impl((void *)&_mh_execute_header, v25, v29, "Creating TLK and self share for view %s", v32, 0xCu);
      swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v32, -1, -1);

    }
    else
    {

      sub_1001248C8(v31);
      sub_1001248C8(v31);
    }
    v52 = (_QWORD *)swift_task_alloc(dword_100346C4C);
    *(_QWORD *)(v0 + 376) = v52;
    *v52 = v0;
    v52[1] = sub_10010E1CC;
    return sub_10011A554(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 304));
  }
}

uint64_t sub_10010E0B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 344);
  v3[44] = a1;
  v3[45] = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_10010E3E4;
  else
    v5 = sub_10010E124;
  return swift_task_switch(v5, v3[41], 0);
}

uint64_t sub_10010E124()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  void *v7;
  void *v8;

  v2 = *(void **)(v0 + 352);
  v1 = *(_QWORD *)(v0 + 360);
  v3 = objc_msgSend(*(id *)(v0 + 336), "tlkUUID");
  v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  sub_100132660(v2, v4, v6);
  v7 = *(void **)(v0 + 352);
  v8 = *(void **)(v0 + 336);
  if (v1)
    swift_errorRelease(v1);

  sub_100063CD0(v4, v6);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(1);
}

uint64_t sub_10010E1CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(*v3 + 376);
  v5 = *v3;
  *(_QWORD *)(v5 + 384) = a1;
  *(_QWORD *)(v5 + 392) = a2;
  swift_task_dealloc(v4);
  if (v2)
    return (*(uint64_t (**)(_QWORD))(v5 + 8))(0);
  else
    return swift_task_switch(sub_10010E244, *(_QWORD *)(v5 + 328), 0);
}

uint64_t sub_10010E244()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  NSString v5;
  Class isa;
  uint64_t v7;
  _QWORD *v8;

  v1 = v0 + 2;
  v3 = v0[48];
  v2 = v0[49];
  v4 = *(void **)(v0[41] + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_keychainWrapper);
  v5 = String._bridgeToObjectiveC()();
  v0[50] = v5;
  isa = Data._bridgeToObjectiveC()().super.isa;
  v0[51] = isa;
  v0[2] = v0;
  v0[3] = sub_10010E334;
  v7 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v8 = v0 + 10;
  v8[1] = 0x40000000;
  v8[2] = sub_10011A4E0;
  v8[3] = &unk_1003096C0;
  v8[4] = v7;
  objc_msgSend(v4, "proposeTLKForView:record:selfShare:altDSID:completion:", v5, v3, v2, isa, v8);
  return swift_continuation_await(v1);
}

uint64_t sub_10010E334()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 416) = v2;
  if (v2)
    v3 = sub_10010E41C;
  else
    v3 = sub_10010E394;
  return swift_task_switch(v3, *(_QWORD *)(v1 + 328), 0);
}

uint64_t sub_10010E394()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;

  v1 = *(void **)(v0 + 400);
  v2 = *(void **)(v0 + 408);
  v3 = *(void **)(v0 + 384);

  return (*(uint64_t (**)(uint64_t))(v0 + 8))(1);
}

uint64_t sub_10010E3E4()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_10010E41C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  os_log_type_t v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  unint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v23;

  v3 = *(void **)(v1 + 408);
  v2 = *(_QWORD *)(v1 + 416);
  v4 = *(void **)(v1 + 400);
  swift_willThrow(a1);

  swift_errorRetain(v2);
  v5 = swift_errorRetain(v2);
  v6 = Logger.logObject.getter(v5);
  v8 = static os_log_type_t.error.getter(v6, v7);
  if (os_log_type_enabled(v6, v8))
  {
    v9 = *(_QWORD *)(v1 + 416);
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v23 = v11;
    *(_DWORD *)v10 = 136315138;
    swift_getErrorValue(v9, v1 + 256, v1 + 160);
    v12 = Error.localizedDescription.getter(*(_QWORD *)(v1 + 168), *(_QWORD *)(v1 + 176));
    v14 = v13;
    *(_QWORD *)(v1 + 240) = sub_1001C56EC(v12, v13, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 240, v1 + 248, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease(v14);
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v6, v8, "Failed to propose TLK : %s", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {
    v15 = *(_QWORD *)(v1 + 416);

    swift_errorRelease(v15);
    swift_errorRelease(v15);
  }
  v16 = *(_QWORD *)(v1 + 416);
  v18 = *(void **)(v1 + 384);
  v17 = *(void **)(v1 + 392);
  v19 = sub_10012443C();
  v20 = swift_allocError(&type metadata for KeySyncEvent, v19, 0, 0);
  *v21 = 22;
  swift_willThrow(v20);
  swift_errorRelease(v16);

  return (*(uint64_t (**)(_QWORD))(v1 + 8))(0);
}

uint64_t sub_10010E628(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[28] = a2;
  v3[29] = v2;
  v3[27] = a1;
  return swift_task_switch(sub_10010E690, v2, 0);
}

uint64_t sub_10010E690()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  NSString v51;
  _QWORD *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57[2];

  v1 = v0[27];
  v2 = *(_QWORD *)(v1 + 16);
  v0[30] = v2;
  v55 = v2;
  if (!v2)
    return ((uint64_t (*)(_QWORD))v0[1])(0);
  v0[31] = OBJC_IVAR____TtC10seserviced16SEKeySyncManager_logger;
  v52 = v0 + 11;
  v53 = v0 + 10;
  swift_bridgeObjectRetain(v1);
  v3 = 0;
  v4 = 0;
  v56 = v0;
  while (1)
  {
    v0[32] = v4;
    if (v55 == v4)
    {
      __break(1u);
      goto LABEL_19;
    }
    v5 = (_QWORD *)(v0[27] + v3);
    v7 = v5[4];
    v6 = v5[5];
    v0[33] = v6;
    v8 = v5[6];
    v0[34] = v8;
    v9 = v5[7];
    v0[35] = v9;
    v10 = (void *)v5[9];
    v0[36] = v10;
    swift_bridgeObjectRetain(v6);
    sub_100063C8C(v8, v9);
    v11 = v10;
    v12 = objc_msgSend(v11, "currentTLK");
    v0[37] = v12;
    if (!v12)
    {
      swift_bridgeObjectRetain(v6);
      sub_100063C8C(v8, v9);
      swift_bridgeObjectRetain(v6);
      v23 = sub_100063C8C(v8, v9);
      v24 = Logger.logObject.getter(v23);
      v26 = static os_log_type_t.error.getter(v24, v25);
      if (os_log_type_enabled(v24, v26))
      {
        v54 = v7;
        v27 = swift_slowAlloc(12, -1);
        v28 = swift_slowAlloc(32, -1);
        v57[0] = v28;
        *(_DWORD *)v27 = 136315138;
        swift_bridgeObjectRetain(v6);
        *(_QWORD *)(v27 + 4) = sub_1001C56EC(v54, v6, v57);
        swift_bridgeObjectRelease_n(v6, 2);
        sub_100063CD0(v8, v9);
        swift_bridgeObjectRelease(v6);
        sub_100063CD0(v8, v9);
        _os_log_impl((void *)&_mh_execute_header, v24, v26, "View %s doesn't have a TLK?", (uint8_t *)v27, 0xCu);
        swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v28, -1, -1);
        v0 = v56;
        swift_slowDealloc(v27, -1, -1);

        swift_bridgeObjectRelease(v6);
        sub_100063CD0(v8, v9);

      }
      else
      {

        swift_bridgeObjectRelease(v6);
        sub_100063CD0(v8, v9);

        swift_bridgeObjectRelease(v6);
        sub_100063CD0(v8, v9);
        swift_bridgeObjectRelease(v6);
        sub_100063CD0(v8, v9);
      }
      goto LABEL_4;
    }
    v13 = v4;
    v14 = v3;
    v15 = v9;
    v16 = v8;
    v17 = v56[28];
    v18 = v12;
    v19 = v11;
    swift_bridgeObjectRetain(v17);
    v21 = sub_100121A80(v20, v18);
    v56[38] = v21;

    v0 = v56;
    swift_bridgeObjectRelease(v17);
    v22 = v21[2];
    v56[39] = v22;
    if (v22)
      break;
    swift_bridgeObjectRelease(v21);

    swift_bridgeObjectRelease(v6);
    sub_100063CD0(v16, v15);
    v3 = v14;
    v4 = v13;
LABEL_4:
    ++v4;
    v3 += 48;
    if (v4 == v0[30])
    {
      swift_bridgeObjectRelease(v0[27]);
      return ((uint64_t (*)(_QWORD))v0[1])(0);
    }
  }
  v30 = swift_bridgeObjectRetain_n(v21, 2);
  v31 = Logger.logObject.getter(v30);
  v33 = static os_log_type_t.error.getter(v31, v32);
  if (os_log_type_enabled(v31, v33))
  {
    v34 = (uint8_t *)swift_slowAlloc(12, -1);
    v35 = swift_slowAlloc(32, -1);
    v57[0] = v35;
    *(_DWORD *)v34 = 136315138;
    swift_bridgeObjectRetain(v21);
    v37 = Array.description.getter(v36, &_s13ListTLKOutputVN);
    v39 = v38;
    swift_bridgeObjectRelease(v21);
    *v53 = sub_1001C56EC(v37, v39, v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v53, v52, v34 + 4, v34 + 12);
    swift_bridgeObjectRelease(v39);
    swift_bridgeObjectRelease_n(v21, 2);
    _os_log_impl((void *)&_mh_execute_header, v31, v33, "Removing stale TLKs %s", v34, 0xCu);
    swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
    v0 = v56;
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v34, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v21, 2);
  }
  v40 = objc_opt_self(SecureElementManager);
  v0[40] = v40;
  v0[41] = 0;
  v0[42] = 0;
  v41 = (_QWORD *)v0[38];
  if (!v41[2])
LABEL_19:
    __break(1u);
  v42 = v40;
  v43 = v41[4];
  v0[43] = v43;
  v44 = v41[5];
  v0[44] = v44;
  v45 = v41[6];
  v0[45] = v45;
  v46 = v41[7];
  v0[46] = v46;
  v47 = v41[8];
  v0[47] = v47;
  v48 = v41[9];
  v0[48] = v48;
  v49 = v41[10];
  v0[49] = v49;
  v50 = v41[11];
  v0[50] = v50;
  sub_100063C8C(v43, v44);
  sub_100063C8C(v45, v46);
  sub_100063C8C(v47, v48);
  sub_100063C8C(v49, v50);
  v51 = String._bridgeToObjectiveC()();
  v0[51] = v51;
  v0[7] = v0 + 21;
  v0[2] = v0;
  v0[3] = sub_10010ECC4;
  v0[14] = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_100118F3C;
  v0[13] = &unk_1003096A8;
  sub_100051680(v42, v51, v53);
  return swift_continuation_await(v0 + 2);
}

uint64_t sub_10010ECC4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 416) = v2;
  if (v2)
    v3 = sub_10010FB30;
  else
    v3 = sub_10010ED68;
  return swift_task_switch(v3, *(_QWORD *)(v1 + 232), 0);
}

void sub_10010ED68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;

  v1 = sub_100063D3C(&qword_100345220);
  *(_QWORD *)(v0 + 104) = v1;
  v2 = sub_10007EF60((unint64_t *)&qword_100345228, &qword_100345220, (uint64_t)&protocol conformance descriptor for <A> [A]);
  *(_QWORD *)(v0 + 80) = &off_100305D60;
  *(_QWORD *)(v0 + 112) = v2;
  v3 = sub_10006BA78((_QWORD *)(v0 + 80), v1);
  v4 = *v3;
  v5 = *(_QWORD *)(*v3 + 16);
  if (v5)
  {
    v6 = v4 + 32;
    if (v5 <= 0xE)
    {
      *(_QWORD *)(v0 + 190) = 0;
      *(_QWORD *)(v0 + 184) = 0;
      *(_BYTE *)(v0 + 198) = v5;
      memcpy((void *)(v0 + 184), (const void *)(v4 + 32), v5);
      v10 = *(_QWORD *)(v0 + 184);
      v11 = *(unsigned int *)(v0 + 192) | ((unint64_t)*(unsigned __int8 *)(v0 + 196) << 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 197) << 40) | ((unint64_t)*(unsigned __int8 *)(v0 + 198) << 48);
    }
    else
    {
      v7 = type metadata accessor for __DataStorage(0);
      swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
      v8 = __DataStorage.init(bytes:length:)(v6, v5);
      v9 = v8;
      if (v5 >= 0x7FFFFFFF)
      {
        v12 = type metadata accessor for Data.RangeReference(0);
        v10 = swift_allocObject(v12, 32, 7);
        *(_QWORD *)(v10 + 16) = 0;
        *(_QWORD *)(v10 + 24) = v5;
        v11 = v9 | 0x8000000000000000;
      }
      else
      {
        v10 = v5 << 32;
        v11 = v8 | 0x4000000000000000;
      }
    }
  }
  else
  {
    v10 = 0;
    v11 = 0xC000000000000000;
  }
  v13 = *(_QWORD *)(v0 + 344);
  v14 = *(_QWORD *)(v0 + 352);
  sub_10006BA9C((_QWORD *)(v0 + 80));
  *(_QWORD *)(v0 + 88) = v14;
  *(_QWORD *)(v0 + 168) = v10;
  *(_QWORD *)(v0 + 176) = v11;
  *(_QWORD *)(v0 + 104) = &type metadata for Data;
  *(_QWORD *)(v0 + 112) = &protocol witness table for Data;
  *(_QWORD *)(v0 + 80) = v13;
  v15 = (char *)&loc_10010EF24
      + *((int *)qword_10010FB20 + (sub_10006BA78((_QWORD *)(v0 + 80), (uint64_t)&type metadata for Data)[1] >> 62));
  __asm { BR              X10 }
}

uint64_t sub_10010EF3C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  void **v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  NSObject *v12;
  uint64_t v13;
  Class isa;
  id v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  Class v33;
  id v34;
  void *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  id v41;
  unint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void **v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  void *v55;
  id v56;
  id v57;
  void **v58;
  unint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  os_log_type_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v72;
  uint64_t v73;
  NSObject *v74;
  uint64_t v75;
  os_log_type_t v76;
  uint8_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  NSString v95;
  unint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  unint64_t v101;
  char *v102;
  unint64_t v103;
  _QWORD *v104;
  uint64_t v105[13];

  v7 = v1[43];
  v8 = v1[44];
  v1[23] = v5;
  *((_WORD *)v1 + 96) = v2;
  *((_BYTE *)v1 + 194) = BYTE2(v2);
  *((_BYTE *)v1 + 195) = BYTE3(v2);
  *((_BYTE *)v1 + 196) = BYTE4(v2);
  *((_BYTE *)v1 + 197) = BYTE5(v2);
  sub_100063C8C(v7, v8);
  sub_100063C8C(v7, v8);
  sub_100063C8C(v0, v6);
  Data._Representation.append(contentsOf:)(v4, v4 + BYTE6(v2));
  v9 = v102;
  v10 = v1[43];
  v11 = v1[44];
  sub_10006BA9C(v3);
  sub_100063CD0(v10, v11);
  sub_100063CD0(v0, v6);
  v13 = v1[21];
  v12 = v1[22];
  if (qword_1003445F8 != -1)
LABEL_31:
    swift_once(&qword_1003445F8, sub_100130F58);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v15 = sub_10004FBA0(v9, isa);

  if (!v15)
  {
    v33 = Data._bridgeToObjectiveC()().super.isa;
    *v3 = 0;
    v34 = sub_10004F6A8(v9, v33, v3);

    v35 = *v3;
    if (v34)
    {
      v99 = v1[49];
      v101 = v1[50];
      v36 = v1[47];
      v96 = v1[48];
      v37 = v1[46];
      v38 = v104[45];
      v39 = v104[44];
      v40 = v104[43];
      v41 = v35;

      sub_100063CD0(v13, (unint64_t)v12);
      sub_100063CD0(v40, v39);
      v1 = v104;
      sub_100063CD0(v38, v37);
      sub_100063CD0(v36, v96);
      sub_100063CD0(v99, v101);

      v102 = (char *)v104[41];
      goto LABEL_9;
    }
    v72 = v35;
    v15 = (id)_convertNSErrorToError(_:)(v35);

  }
  swift_willThrow(v16);
  sub_100063CD0(v13, (unint64_t)v12);

  swift_errorRetain(v15);
  v17 = swift_errorRetain(v15);
  v18 = Logger.logObject.getter(v17);
  v20 = static os_log_type_t.error.getter(v18, v19);
  if (os_log_type_enabled(v18, v20))
  {
    v21 = swift_slowAlloc(12, -1);
    v22 = swift_slowAlloc(32, -1);
    v105[0] = v22;
    *(_DWORD *)v21 = 136315138;
    swift_getErrorValue(v15, v99, v100);
    v23 = Error.localizedDescription.getter(v1[16], v1[17]);
    v25 = v24;
    *(_QWORD *)(v21 + 4) = sub_1001C56EC(v23, v24, v105);
    swift_bridgeObjectRelease(v25);
    swift_errorRelease(v15);
    swift_errorRelease(v15);
    _os_log_impl((void *)&_mh_execute_header, v18, v20, "Failed to delete stale TLK : %s", (uint8_t *)v21, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v21, -1, -1);

  }
  else
  {

    swift_errorRelease(v15);
    swift_errorRelease(v15);
  }
  v26 = v1[49];
  v103 = v1[50];
  v27 = v1[48];
  v28 = v104[47];
  v29 = v104[46];
  v30 = v104[45];
  v31 = v104[44];
  v32 = v104[43];
  sub_10011A034(0x20u, 0);
  sub_100063CD0(v32, v31);
  sub_100063CD0(v30, v29);
  v1 = v104;
  sub_100063CD0(v28, v27);
  sub_100063CD0(v26, v103);
  swift_errorRelease(v15);
  v102 = 0;
LABEL_9:
  v42 = v1[42] + 1;
  if (v42 == v1[39])
  {
    v43 = (void *)v1[37];
    v12 = v1[35];
    v44 = (void *)v1[36];
    v13 = v1[33];
    v45 = v1[34];
    v46 = v1[32];
    v47 = v1[30];
    swift_bridgeObjectRelease(v1[38]);

    swift_bridgeObjectRelease(v13);
    sub_100063CD0(v45, (unint64_t)v12);
    if (v46 + 1 != v47)
    {
      v48 = v1[32];
      v9 = (char *)(v48 + 1);
      v49 = v1[30];
      if (v48 + 1 > v49)
        v49 = v48 + 1;
      v100 = (char *)v49;
      v3 = (void **)(48 * v48 + 120);
      do
      {
        v1[32] = v9;
        if (v100 == v9)
        {
          __break(1u);
          goto LABEL_31;
        }
        v50 = (void **)((char *)v3 + v1[27]);
        v51 = (uint64_t)*(v50 - 5);
        v52 = (unint64_t)*(v50 - 4);
        v1[33] = v52;
        v53 = (uint64_t)*(v50 - 3);
        v1[34] = v53;
        v54 = (unint64_t)*(v50 - 2);
        v1[35] = v54;
        v55 = *v50;
        v1[36] = *v50;
        swift_bridgeObjectRetain(v52);
        sub_100063C8C(v53, v54);
        v56 = v55;
        v57 = objc_msgSend(v56, "currentTLK");
        v1[37] = v57;
        if (v57)
        {
          v13 = (uint64_t)v9;
          v58 = v3;
          v59 = v54;
          v60 = v104[28];
          v12 = v57;
          v61 = v56;
          swift_bridgeObjectRetain(v60);
          v63 = sub_100121A80(v62, v12);
          v104[38] = v63;

          v1 = v104;
          swift_bridgeObjectRelease(v60);
          v64 = v63[2];
          v104[39] = v64;
          if (v64)
          {
            v73 = swift_bridgeObjectRetain_n(v63, 2);
            v74 = Logger.logObject.getter(v73);
            v76 = static os_log_type_t.error.getter(v74, v75);
            if (os_log_type_enabled(v74, v76))
            {
              v77 = (uint8_t *)swift_slowAlloc(12, -1);
              v78 = swift_slowAlloc(32, -1);
              v105[0] = v78;
              *(_DWORD *)v77 = 136315138;
              swift_bridgeObjectRetain(v63);
              v80 = Array.description.getter(v79, &_s13ListTLKOutputVN);
              v82 = v81;
              swift_bridgeObjectRelease(v63);
              *v97 = sub_1001C56EC(v80, v82, v105);
              ((void (*)(uint8_t *, uint8_t *))UnsafeMutableRawBufferPointer.copyMemory(from:))(v77 + 4, v77 + 12);
              v1 = v104;
              swift_bridgeObjectRelease(v82);
              swift_bridgeObjectRelease_n(v63, 2);
              _os_log_impl((void *)&_mh_execute_header, v74, v76, "Removing stale TLKs %s", v77, 0xCu);
              swift_arrayDestroy(v78, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v78, -1, -1);
              swift_slowDealloc(v77, -1, -1);

            }
            else
            {

              swift_bridgeObjectRelease_n(v63, 2);
            }
            v83 = objc_opt_self(SecureElementManager);
            v42 = 0;
            v1[40] = v83;
            goto LABEL_28;
          }
          swift_bridgeObjectRelease(v63);

          swift_bridgeObjectRelease(v52);
          sub_100063CD0(v53, v59);
          v3 = v58;
          v9 = (char *)v13;
        }
        else
        {
          swift_bridgeObjectRetain(v52);
          sub_100063C8C(v53, v54);
          swift_bridgeObjectRetain(v52);
          v65 = sub_100063C8C(v53, v54);
          v12 = Logger.logObject.getter(v65);
          v67 = static os_log_type_t.error.getter(v12, v66);
          v13 = v67;
          if (os_log_type_enabled(v12, v67))
          {
            v68 = v51;
            v69 = swift_slowAlloc(12, -1);
            v99 = v54;
            v70 = swift_slowAlloc(32, -1);
            v105[0] = v70;
            *(_DWORD *)v69 = 136315138;
            swift_bridgeObjectRetain(v52);
            *(_QWORD *)(v69 + 4) = sub_1001C56EC(v68, v52, v105);
            swift_bridgeObjectRelease_n(v52, 2);
            sub_100063CD0(v53, v99);
            swift_bridgeObjectRelease(v52);
            sub_100063CD0(v53, v99);
            _os_log_impl((void *)&_mh_execute_header, v12, (os_log_type_t)v13, "View %s doesn't have a TLK?", (uint8_t *)v69, 0xCu);
            swift_arrayDestroy(v70, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v70, -1, -1);
            v1 = v104;
            swift_slowDealloc(v69, -1, -1);

            swift_bridgeObjectRelease(v52);
            sub_100063CD0(v53, v99);

          }
          else
          {

            swift_bridgeObjectRelease(v52);
            sub_100063CD0(v53, v54);

            swift_bridgeObjectRelease(v52);
            sub_100063CD0(v53, v54);
            swift_bridgeObjectRelease(v52);
            sub_100063CD0(v53, v54);
          }
        }
        ++v9;
        v3 += 6;
      }
      while (v9 != (char *)v1[30]);
    }
    swift_bridgeObjectRelease(v1[27]);
    return ((uint64_t (*)(uint64_t))v1[1])(1);
  }
  else
  {
LABEL_28:
    v1[41] = v102;
    v1[42] = v42;
    v84 = v1[38];
    if (v42 >= *(_QWORD *)(v84 + 16))
    {
      __break(1u);
      JUMPOUT(0x10010FB0CLL);
    }
    v85 = v1[40];
    v86 = (_QWORD *)(v84 + 72 * v42);
    v87 = v86[4];
    v1[43] = v87;
    v88 = v86[5];
    v1[44] = v88;
    v89 = v86[6];
    v1[45] = v89;
    v90 = v86[7];
    v1[46] = v90;
    v91 = v86[8];
    v1[47] = v91;
    v92 = v86[9];
    v1[48] = v92;
    v93 = v86[10];
    v1[49] = v93;
    v94 = v86[11];
    v1[50] = v94;
    sub_100063C8C(v87, v88);
    sub_100063C8C(v89, v90);
    sub_100063C8C(v91, v92);
    sub_100063C8C(v93, v94);
    v95 = String._bridgeToObjectiveC()();
    v1[51] = v95;
    v1[7] = v98;
    v1[2] = v1;
    v1[3] = sub_10010ECC4;
    v1[14] = swift_continuation_init(v1 + 2, 1);
    v1[10] = _NSConcreteStackBlock;
    v1[11] = 0x40000000;
    v1[12] = sub_100118F3C;
    v1[13] = &unk_1003096A8;
    sub_100051680(v85, v95, v97);
    return swift_continuation_await(v1 + 2);
  }
}

uint64_t sub_10010FB30(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  NSString v55;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  void **v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  void *v66;
  id v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  id v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  uint64_t v81;
  os_log_type_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  NSObject *v87;
  uint64_t v88;
  os_log_type_t v89;
  uint8_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102[2];

  v3 = (void *)v1[51];
  v2 = v1[52];
  swift_willThrow(a1);

  swift_errorRetain(v2);
  v4 = swift_errorRetain(v2);
  v5 = Logger.logObject.getter(v4);
  v7 = static os_log_type_t.error.getter(v5, v6);
  v101 = v1;
  if (os_log_type_enabled(v5, v7))
  {
    v8 = v1[52];
    v9 = swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v102[0] = v10;
    *(_DWORD *)v9 = 136315138;
    swift_getErrorValue(v8, v1 + 25, v1 + 18);
    v11 = Error.localizedDescription.getter(v1[19], v1[20]);
    v13 = v12;
    *(_QWORD *)(v9 + 4) = sub_1001C56EC(v11, v12, v102);
    swift_bridgeObjectRelease(v13);
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v7, "Failed to get SE : %s", (uint8_t *)v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

  }
  else
  {
    v14 = v1[52];

    swift_errorRelease(v14);
    swift_errorRelease(v14);
  }
  v97 = v1 + 10;
  v15 = v1[52];
  v16 = sub_10012443C();
  v17 = swift_allocError(&type metadata for KeySyncEvent, v16, 0, 0);
  *v18 = 4;
  swift_willThrow(v17);
  swift_errorRelease(v15);
  swift_errorRetain(v17);
  v19 = swift_errorRetain(v17);
  v20 = Logger.logObject.getter(v19);
  v22 = static os_log_type_t.error.getter(v20, v21);
  v100 = v17;
  if (os_log_type_enabled(v20, v22))
  {
    v23 = swift_slowAlloc(12, -1);
    v24 = swift_slowAlloc(32, -1);
    v102[0] = v24;
    *(_DWORD *)v23 = 136315138;
    swift_getErrorValue(v17, v1 + 26, v1 + 15);
    v25 = Error.localizedDescription.getter(v1[16], v1[17]);
    v27 = v26;
    *(_QWORD *)(v23 + 4) = sub_1001C56EC(v25, v26, v102);
    swift_bridgeObjectRelease(v27);
    swift_errorRelease(v17);
    swift_errorRelease(v17);
    _os_log_impl((void *)&_mh_execute_header, v20, v22, "Failed to delete stale TLK : %s", (uint8_t *)v23, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v23, -1, -1);

  }
  else
  {

    swift_errorRelease(v17);
    swift_errorRelease(v17);
  }
  v29 = v1[49];
  v28 = v1[50];
  v30 = v1[48];
  v31 = v1[47];
  v32 = v1[46];
  v33 = v1[45];
  v34 = v1[44];
  v35 = v1[43];
  sub_10011A034(0x20u, 0);
  sub_100063CD0(v35, v34);
  sub_100063CD0(v33, v32);
  sub_100063CD0(v31, v30);
  sub_100063CD0(v29, v28);
  swift_errorRelease(v100);
  v36 = v1[42] + 1;
  if (v36 != v1[39])
    goto LABEL_10;
  v37 = (void *)v1[37];
  v38 = v1[35];
  v39 = (void *)v1[36];
  v41 = v1[33];
  v40 = v1[34];
  v42 = v1[32];
  v43 = v1[30];
  swift_bridgeObjectRelease(v1[38]);

  swift_bridgeObjectRelease(v41);
  sub_100063CD0(v40, v38);
  if (v42 + 1 != v43)
  {
    v57 = v1[32];
    v58 = v57 + 1;
    v59 = v1[30];
    if (v57 + 1 > v59)
      v59 = v57 + 1;
    v99 = v59;
    v60 = 48 * v57 + 120;
    while (1)
    {
      v1[32] = v58;
      if (v99 == v58)
        break;
      v61 = (void **)(v1[27] + v60);
      v62 = (uint64_t)*(v61 - 5);
      v63 = (unint64_t)*(v61 - 4);
      v1[33] = v63;
      v64 = (uint64_t)*(v61 - 3);
      v1[34] = v64;
      v65 = (unint64_t)*(v61 - 2);
      v1[35] = v65;
      v66 = *v61;
      v1[36] = *v61;
      swift_bridgeObjectRetain(v63);
      sub_100063C8C(v64, v65);
      v67 = v66;
      v68 = objc_msgSend(v67, "currentTLK");
      v1[37] = v68;
      if (v68)
      {
        v69 = v58;
        v70 = v60;
        v71 = v65;
        v72 = v64;
        v73 = v101[28];
        v74 = v68;
        v75 = v67;
        v76 = swift_bridgeObjectRetain(v73);
        v77 = sub_100121A80(v76, v74);
        v101[38] = v77;

        v1 = v101;
        swift_bridgeObjectRelease(v73);
        v78 = v77[2];
        v101[39] = v78;
        if (v78)
        {
          v86 = swift_bridgeObjectRetain_n(v77, 2);
          v87 = Logger.logObject.getter(v86);
          v89 = static os_log_type_t.error.getter(v87, v88);
          if (os_log_type_enabled(v87, v89))
          {
            v90 = (uint8_t *)swift_slowAlloc(12, -1);
            v91 = swift_slowAlloc(32, -1);
            v102[0] = v91;
            *(_DWORD *)v90 = 136315138;
            v92 = swift_bridgeObjectRetain(v77);
            v93 = Array.description.getter(v92, &_s13ListTLKOutputVN);
            v95 = v94;
            swift_bridgeObjectRelease(v77);
            v101[10] = sub_1001C56EC(v93, v95, v102);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v97, v101 + 11, v90 + 4, v90 + 12);
            swift_bridgeObjectRelease(v95);
            swift_bridgeObjectRelease_n(v77, 2);
            _os_log_impl((void *)&_mh_execute_header, v87, v89, "Removing stale TLKs %s", v90, 0xCu);
            swift_arrayDestroy(v91, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v91, -1, -1);
            v1 = v101;
            swift_slowDealloc(v90, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n(v77, 2);
          }
          v96 = objc_opt_self(SecureElementManager);
          v36 = 0;
          v1[40] = v96;
LABEL_10:
          v1[41] = 0;
          v1[42] = v36;
          v44 = v1[38];
          if (v36 < *(_QWORD *)(v44 + 16))
          {
            v45 = v1[40];
            v46 = (_QWORD *)(v44 + 72 * v36);
            v47 = v46[4];
            v1[43] = v47;
            v48 = v46[5];
            v1[44] = v48;
            v49 = v46[6];
            v1[45] = v49;
            v50 = v46[7];
            v1[46] = v50;
            v51 = v46[8];
            v1[47] = v51;
            v52 = v46[9];
            v1[48] = v52;
            v53 = v46[10];
            v1[49] = v53;
            v54 = v46[11];
            v1[50] = v54;
            sub_100063C8C(v47, v48);
            sub_100063C8C(v49, v50);
            sub_100063C8C(v51, v52);
            sub_100063C8C(v53, v54);
            v55 = String._bridgeToObjectiveC()();
            v1[51] = v55;
            v1[7] = v1 + 21;
            v1[2] = v1;
            v1[3] = sub_10010ECC4;
            v1[14] = swift_continuation_init(v1 + 2, 1);
            v1[10] = _NSConcreteStackBlock;
            v1[11] = 0x40000000;
            v1[12] = sub_100118F3C;
            v1[13] = &unk_1003096A8;
            sub_100051680(v45, v55, v97);
            return swift_continuation_await(v1 + 2);
          }
LABEL_29:
          __break(1u);
        }
        swift_bridgeObjectRelease(v77);

        swift_bridgeObjectRelease(v63);
        sub_100063CD0(v72, v71);
        v60 = v70;
        v58 = v69;
      }
      else
      {
        swift_bridgeObjectRetain(v63);
        sub_100063C8C(v64, v65);
        swift_bridgeObjectRetain(v63);
        v79 = sub_100063C8C(v64, v65);
        v80 = Logger.logObject.getter(v79);
        v82 = static os_log_type_t.error.getter(v80, v81);
        if (os_log_type_enabled(v80, v82))
        {
          v98 = v64;
          v83 = swift_slowAlloc(12, -1);
          v84 = v62;
          v85 = swift_slowAlloc(32, -1);
          v102[0] = v85;
          *(_DWORD *)v83 = 136315138;
          swift_bridgeObjectRetain(v63);
          *(_QWORD *)(v83 + 4) = sub_1001C56EC(v84, v63, v102);
          swift_bridgeObjectRelease_n(v63, 2);
          sub_100063CD0(v98, v65);
          swift_bridgeObjectRelease(v63);
          sub_100063CD0(v98, v65);
          _os_log_impl((void *)&_mh_execute_header, v80, v82, "View %s doesn't have a TLK?", (uint8_t *)v83, 0xCu);
          swift_arrayDestroy(v85, 1, (char *)&type metadata for Any + 8);
          v1 = v101;
          swift_slowDealloc(v85, -1, -1);
          swift_slowDealloc(v83, -1, -1);

          swift_bridgeObjectRelease(v63);
          sub_100063CD0(v98, v65);

        }
        else
        {

          swift_bridgeObjectRelease(v63);
          sub_100063CD0(v64, v65);

          swift_bridgeObjectRelease(v63);
          sub_100063CD0(v64, v65);
          swift_bridgeObjectRelease(v63);
          sub_100063CD0(v64, v65);
        }
      }
      ++v58;
      v60 += 48;
      if (v58 == v1[30])
        goto LABEL_23;
    }
    __break(1u);
    goto LABEL_29;
  }
LABEL_23:
  swift_bridgeObjectRelease(v1[27]);
  return ((uint64_t (*)(uint64_t))v1[1])(1);
}

uint64_t sub_10011054C(int a1, id a2, _QWORD *a3)
{
  id v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v4 = objc_msgSend(a2, "currentTLK");

  if (!v4)
    return 0;
  v5 = *(_QWORD *)(*a3 + 16);
  if (!v5)
    return 1;
  v22 = swift_bridgeObjectRetain(*a3);
  v6 = (uint64_t *)(v22 + 48);
  do
  {
    v8 = *(v6 - 2);
    v7 = *(v6 - 1);
    v10 = *v6;
    v9 = v6[1];
    v12 = v6[2];
    v11 = v6[3];
    v14 = v6[4];
    v13 = v6[5];
    sub_100063C8C(v8, v7);
    sub_100063C8C(v10, v9);
    sub_100063C8C(v12, v11);
    sub_100063C8C(v14, v13);
    v15 = objc_msgSend(a2, "currentTLK");
    if (v15)
    {
      v16 = v15;
      v17 = objc_msgSend(v15, "tlkUUID", v22);

      static Data._unconditionallyBridgeFromObjectiveC(_:)(v17);
      v19 = v18;

      __asm { BR              X8 }
    }
    sub_100063C8C(v8, v7);
    sub_10006B9B4(0, 0xF000000000000000);
    sub_10006B9B4(v8, v7);
    sub_100063CD0(v8, v7);
    sub_100063CD0(v10, v9);
    sub_100063CD0(v12, v11);
    sub_100063CD0(v14, v13);
    v6 += 9;
    --v5;
  }
  while (v5);
  v20 = 1;
  swift_bridgeObjectRelease(v22);
  return v20;
}

uint64_t sub_100110BAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v9[33] = a8;
  v9[34] = v8;
  v9[31] = a6;
  v9[32] = a7;
  v9[29] = a4;
  v9[30] = a5;
  v9[27] = a2;
  v9[28] = a3;
  v9[26] = a1;
  v10 = *(_QWORD *)(type metadata accessor for SESPeerIdentityData(0) - 8);
  v9[35] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v9[36] = v11;
  v9[37] = swift_task_alloc((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100063D3C(&qword_100346898);
  v9[38] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for SEKeySyncRecovery.RecoveryRecord(0);
  v9[39] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100110C60, v8, 0);
}

id sub_100110C60()
{
  uint64_t v0;
  id v1;
  void *v2;
  id result;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  NSObject *v13;
  uint64_t v14;
  os_log_type_t v15;
  uint8_t *v16;
  unint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(void);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  os_log_type_t v30;
  _BOOL4 v31;
  unint64_t v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t *v52;
  id v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  void *v63;
  uint64_t v64;
  unint64_t v65;
  void *v66;
  uint64_t v67[3];

  v1 = objc_msgSend(*(id *)(v0 + 224), "currentTLK");
  *(_QWORD *)(v0 + 320) = v1;
  if (!v1)
  {
    v13 = Logger.logObject.getter(0);
    v15 = static os_log_type_t.error.getter(v13, v14);
    if (os_log_type_enabled(v13, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v15, "Recovery but TLK is not set?", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }

    v17 = sub_10012443C();
    v18 = swift_allocError(&type metadata for KeySyncEvent, v17, 0, 0);
    *v19 = 27;
    swift_willThrow(v18);
    v20 = *(_QWORD *)(v0 + 304);
    v21 = *(_QWORD *)(v0 + 296);
    swift_task_dealloc(*(_QWORD *)(v0 + 312));
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    v22 = *(uint64_t (**)(void))(v0 + 8);
    return (id)v22();
  }
  v2 = v1;
  if ((sub_10011C25C(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 216), *(void **)(v0 + 224), *(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 240)) & 1) == 0)
  {

LABEL_13:
    v56 = *(_QWORD *)(v0 + 304);
    v57 = *(_QWORD *)(v0 + 296);
    swift_task_dealloc(*(_QWORD *)(v0 + 312));
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    v22 = *(uint64_t (**)(void))(v0 + 8);
    return (id)v22();
  }
  v66 = v2;
  result = objc_msgSend(*(id *)(v0 + 224), "currentTLK");
  if (result)
  {
    v4 = result;
    v5 = *(_QWORD *)(v0 + 312);
    v6 = *(_QWORD *)(v0 + 256);
    v62 = (uint64_t *)(v0 + 200);
    v64 = *(_QWORD *)(v0 + 264);
    v7 = *(_QWORD *)(v0 + 208);
    v8 = *(_QWORD *)(v0 + 216);
    v9 = objc_msgSend(result, "tlkUUID");

    v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v12 = v11;

    sub_1001567F0(v7, v8, v10, v12, v6, v64, v5);
    v23 = v0 + 144;
    v24 = *(_QWORD *)(v0 + 216);
    sub_1001247E8(*(_QWORD *)(v0 + 312), type metadata accessor for SEKeySyncRecovery.RecoveryRecord);
    sub_100063CD0(v10, v12);
    v25 = swift_bridgeObjectRetain_n(v24, 2);
    v26 = Logger.logObject.getter(v25);
    v30 = static os_log_type_t.info.getter(v26, v27, v28, v29);
    v31 = os_log_type_enabled(v26, v30);
    v32 = *(_QWORD *)(v0 + 216);
    if (v31)
    {
      v33 = *(_QWORD *)(v0 + 208);
      v34 = (uint8_t *)swift_slowAlloc(12, -1);
      v35 = swift_slowAlloc(32, -1);
      v67[0] = v35;
      *(_DWORD *)v34 = 136315138;
      swift_bridgeObjectRetain(v32);
      *v62 = sub_1001C56EC(v33, v32, v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v62, v0 + 208, v34 + 4, v34 + 12);
      swift_bridgeObjectRelease_n(v32, 3);
      _os_log_impl((void *)&_mh_execute_header, v26, v30, "Detaching a recovery request for view %s", v34, 0xCu);
      swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
      v36 = v35;
      v23 = v0 + 144;
      swift_slowDealloc(v36, -1, -1);
      swift_slowDealloc(v34, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 216), 2);
    }

    v38 = *(_QWORD *)(v0 + 296);
    v37 = *(_QWORD *)(v0 + 304);
    v39 = *(_QWORD *)(v0 + 288);
    v58 = *(_QWORD *)(v0 + 280);
    v59 = v37;
    v60 = *(_QWORD *)(v0 + 272);
    v61 = *(_QWORD *)(v0 + 256);
    v40 = *(_QWORD *)(v0 + 240);
    v63 = *(void **)(v0 + 248);
    v65 = *(_QWORD *)(v0 + 264);
    v42 = *(_QWORD *)(v0 + 216);
    v41 = *(void **)(v0 + 224);
    v43 = *(_QWORD *)(v0 + 208);
    swift_beginAccess(v60 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_recoveryPending, v23, 33, 0);
    swift_bridgeObjectRetain(v42);
    sub_1000C949C(v67, v43, v42);
    swift_endAccess(v23);
    swift_bridgeObjectRelease(v67[1]);
    v44 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v37, 1, 1, v44);
    v45 = v38;
    sub_100124B74(v40, v38, type metadata accessor for SESPeerIdentityData);
    v46 = *(unsigned __int8 *)(v58 + 80);
    v47 = (v46 + 56) & ~v46;
    v48 = (v39 + v47 + 7) & 0xFFFFFFFFFFFFFFF8;
    v49 = (v48 + 23) & 0xFFFFFFFFFFFFFFF8;
    v50 = (v49 + 15) & 0xFFFFFFFFFFFFFFF8;
    v51 = (_QWORD *)swift_allocObject(&unk_100309640, v50 + 8, v46 | 7);
    v51[2] = 0;
    v51[3] = 0;
    v51[4] = v43;
    v51[5] = v42;
    v51[6] = v41;
    sub_100124884(v45, (uint64_t)v51 + v47, type metadata accessor for SESPeerIdentityData);
    v52 = (_QWORD *)((char *)v51 + v48);
    *v52 = v61;
    v52[1] = v65;
    *(_QWORD *)((char *)v51 + v49) = v63;
    *(_QWORD *)((char *)v51 + v50) = v60;
    swift_bridgeObjectRetain(v42);
    v53 = v41;
    sub_100063C8C(v61, v65);
    v54 = v63;
    swift_retain(v60);
    v55 = sub_10011DAF0(v59, (uint64_t)&unk_100346BE0, (uint64_t)v51);

    swift_release(v55);
    sub_100096700(v59, &qword_100346898);
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t sub_10011141C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 352) = v2;
  if (v2)
    v3 = sub_100111528;
  else
    v3 = sub_10011147C;
  return swift_task_switch(v3, *(_QWORD *)(v1 + 272), 0);
}

uint64_t sub_10011147C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  unint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(void **)(v0 + 336);
  v2 = *(_QWORD *)(v0 + 272);

  *(_BYTE *)(v2 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_requiresResync) = 1;
  v3 = *(void **)(v0 + 320);
  v4 = sub_10012443C();
  v5 = swift_allocError(&type metadata for KeySyncEvent, v4, 0, 0);
  *v6 = 17;
  swift_willThrow(v5);

  swift_errorRelease(*(_QWORD *)(v0 + 176));
  v7 = *(_QWORD *)(v0 + 304);
  v8 = *(_QWORD *)(v0 + 296);
  swift_task_dealloc(*(_QWORD *)(v0 + 312));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100111528(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  os_log_type_t v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  unint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v3 = *(void **)(v1 + 344);
  v2 = *(_QWORD *)(v1 + 352);
  v4 = *(void **)(v1 + 336);
  swift_willThrow(a1);

  swift_errorRetain(v2);
  v5 = swift_errorRetain(v2);
  v6 = Logger.logObject.getter(v5);
  v8 = static os_log_type_t.error.getter(v6, v7);
  if (os_log_type_enabled(v6, v8))
  {
    v9 = *(_QWORD *)(v1 + 352);
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v24 = v11;
    *(_DWORD *)v10 = 136315138;
    swift_getErrorValue(v9, v1 + 168, v1 + 120);
    v12 = Error.localizedDescription.getter(*(_QWORD *)(v1 + 128), *(_QWORD *)(v1 + 136));
    v14 = v13;
    *(_QWORD *)(v1 + 184) = sub_1001C56EC(v12, v13, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 184, v1 + 192, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease(v14);
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v6, v8, "Failed to delete SE View? %s", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {
    v15 = *(_QWORD *)(v1 + 352);

    swift_errorRelease(v15);
    swift_errorRelease(v15);
  }
  v16 = *(_QWORD *)(v1 + 352);
  v17 = *(void **)(v1 + 320);
  v18 = sub_10012443C();
  v19 = swift_allocError(&type metadata for KeySyncEvent, v18, 0, 0);
  *v20 = 34;
  swift_willThrow(v19);

  swift_errorRelease(v16);
  swift_errorRelease(*(_QWORD *)(v1 + 176));
  v21 = *(_QWORD *)(v1 + 304);
  v22 = *(_QWORD *)(v1 + 296);
  swift_task_dealloc(*(_QWORD *)(v1 + 312));
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_10011174C(id a1@<X1>, uint64_t *a2@<X0>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;

  v7 = *a2;
  v8 = a2[1];
  v9 = a2[2];
  v10 = *((_BYTE *)a2 + 32);
  v24 = objc_msgSend(a1, "currentTLK");
  if (v24)
  {
    v22 = v9;
    v23 = v8;
    if (*(_QWORD *)(*a3 + 16))
    {
      v21 = a4;
      v19 = v10 & 1;
      v20 = (uint64_t *)swift_bridgeObjectRetain(*a3);
      v11 = v20[5];
      v13 = v20[6];
      v12 = v20[7];
      v14 = v20[8];
      v15 = v20[9];
      v17 = v20[10];
      v16 = v20[11];
      sub_100063C8C(v20[4], v11);
      sub_100063C8C(v13, v12);
      sub_100063C8C(v14, v15);
      sub_100063C8C(v17, v16);
      v18 = objc_msgSend(v24, "tlkUUID", v19, v7, v20, v21, v22, a1, v23);
      static Data._unconditionallyBridgeFromObjectiveC(_:)(v18);

      __asm { BR              X9 }
    }

  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  a4[3] = 0;
  a4[4] = 0;
  a4[5] = 0;
  a4[6] = 0;
  a4[7] = 0;
}

uint64_t sub_100111D10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v9[127] = v8;
  v9[126] = a8;
  v9[125] = a7;
  v9[124] = a6;
  v9[123] = a5;
  v9[122] = a4;
  v9[121] = a3;
  v9[120] = a2;
  v9[119] = a1;
  v10 = sub_100063D3C(&qword_100346BB0);
  v9[128] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for SESPeerIdentityData(0);
  v9[129] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v9[130] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v9[131] = swift_task_alloc(v13);
  v9[132] = swift_task_alloc(v13);
  return swift_task_switch(sub_100111DF8, v8, 0);
}

uint64_t sub_100111DF8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  unint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  id v9;
  uint64_t v10;
  _QWORD *v11;
  char v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t (*v33)(uint64_t);
  uint64_t v34;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t (*v49)(uint64_t);
  uint64_t v50;
  id v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t (*v65)(uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  char v78;
  unint64_t v79;
  uint64_t v80;
  id v81;
  unint64_t v82;
  id v83;
  NSObject *v84;
  uint64_t v85;
  _BOOL4 v86;
  unint64_t v87;
  _DWORD *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  NSObject *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  os_log_type_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  NSString v108;
  Class isa;
  uint64_t v110;
  Class v111;
  Class v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  NSObject *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  os_log_type_t v120;
  unint64_t v121;
  uint64_t v122;
  _DWORD *v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  os_log_type_t v143;
  char v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;

  v1 = *(_QWORD *)(v0 + 1000);
  v2 = *(void **)(v0 + 992);
  v3 = *(_QWORD *)(v0 + 976);
  v4 = *(_QWORD *)(v0 + 968);
  v5 = objc_msgSend(v2, "tlkShares");
  v6 = sub_10006C25C(0, &qword_100346BB8, SESTLKShare_ptr);
  *(_QWORD *)(v0 + 1064) = v6;
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);

  v8 = (_QWORD *)swift_task_alloc(48);
  v8[2] = v4;
  v8[3] = v3;
  v8[4] = v1;
  *(_QWORD *)(v0 + 1072) = sub_1001F1CBC(sub_1001243BC, v8, v7);
  swift_task_dealloc(v8);
  *(_QWORD *)(v0 + 920) = _swiftEmptyArrayStorage;
  v9 = objc_msgSend(v2, "tlkShares");
  v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, v6);

  v11 = (_QWORD *)swift_task_alloc(48);
  v11[2] = v4;
  v11[3] = v3;
  v11[4] = v1;
  v12 = sub_1000FB04C(sub_1001243DC, (uint64_t)v11, v10);
  swift_bridgeObjectRelease(v10);
  swift_task_dealloc(v11);
  *(_QWORD *)(v0 + 1080) = OBJC_IVAR____TtC10seserviced16SEKeySyncManager_logger;
  sub_100063C8C(v4, v3);
  v13 = sub_100063C8C(v4, v3);
  v14 = Logger.logObject.getter(v13);
  v18 = static os_log_type_t.info.getter(v14, v15, v16, v17);
  if (os_log_type_enabled(v14, v18))
  {
    v143 = v18;
    v19 = *(_QWORD *)(v0 + 976);
    v20 = *(_QWORD *)(v0 + 968);
    v21 = swift_slowAlloc(18, -1);
    v142 = swift_slowAlloc(32, -1);
    v146 = v142;
    *(_DWORD *)v21 = 136315394;
    sub_100063C8C(v20, v19);
    sub_1001BD150(4, v20, v19);
    v144 = v12;
    v23 = v147;
    v22 = v148;
    sub_1001BD2CC(v147, v148);
    v25 = v24;
    *(_QWORD *)(v0 + 944) = v24;
    v26 = v14;
    v27 = sub_100063D3C((uint64_t *)&unk_100346060);
    v28 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
    v29 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v27, v28);
    v31 = v30;
    swift_bridgeObjectRelease(v25);
    sub_100063CD0(v23, v22);
    *(_QWORD *)(v0 + 728) = sub_1001C56EC(v29, v31, &v146);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 728, v0 + 736, v21 + 4, v21 + 12);
    swift_bridgeObjectRelease(v31);
    sub_100063CD0(v20, v19);
    sub_100063CD0(v20, v19);
    *(_WORD *)(v21 + 12) = 1024;
    *(_DWORD *)(v0 + 1240) = v144 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1240, v0 + 1244, v21 + 14, v21 + 18);
    _os_log_impl((void *)&_mh_execute_header, v26, v143, "Self share for %s present? %{BOOL}d", (uint8_t *)v21, 0x12u);
    swift_arrayDestroy(v142, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v142, -1, -1);
    swift_slowDealloc(v21, -1, -1);

    if ((v144 & 1) == 0)
    {
LABEL_3:
      v32 = (_QWORD *)swift_task_alloc(dword_100346B64);
      *(_QWORD *)(v0 + 1088) = v32;
      v33 = sub_100113D8C;
LABEL_4:
      *v32 = v0;
      v32[1] = v33;
      v34 = *(_QWORD *)(v0 + 1016);
      v32[20] = v34;
      return swift_task_switch(sub_1001095A0, v34, 0);
    }
  }
  else
  {
    v36 = *(_QWORD *)(v0 + 976);
    v37 = *(_QWORD *)(v0 + 968);

    sub_100063CD0(v37, v36);
    sub_100063CD0(v37, v36);
    if ((v12 & 1) == 0)
      goto LABEL_3;
  }
  sub_10011BBC4((_OWORD *)(v0 + 288));
  v38 = *(_QWORD *)(v0 + 1008);
  v39 = *(_QWORD *)(v0 + 1000);
  v40 = *(_QWORD *)(v0 + 992);
  v41 = *(_QWORD *)(v0 + 976);
  v42 = *(_QWORD *)(v0 + 968);
  v43 = *(_QWORD *)(v0 + 304);
  v44 = *(_QWORD *)(v0 + 312);
  *(_QWORD *)(v0 + 1112) = v43;
  *(_QWORD *)(v0 + 1120) = v44;
  sub_100063C8C(v43, v44);
  sub_100124944((uint64_t *)(v0 + 288), (void (*)(uint64_t, uint64_t))sub_100063CD0);
  v45 = (_QWORD *)swift_task_alloc(48);
  v45[2] = v40;
  v45[3] = v42;
  v45[4] = v41;
  v45[5] = v39;
  swift_bridgeObjectRetain(v38);
  v46 = (uint64_t)sub_1001F1CBC((uint64_t (*)(id *))sub_1001243FC, v45, v38);
  *(_QWORD *)(v0 + 1128) = v46;
  swift_task_dealloc(v45);
  if ((unint64_t)v46 >> 62)
  {
    if (v46 < 0)
      v127 = v46;
    else
      v127 = v46 & 0xFFFFFFFFFFFFFF8;
    v47 = _CocoaArrayWrapper.endIndex.getter(v127);
  }
  else
  {
    v47 = *(_QWORD *)((v46 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  *(_QWORD *)(v0 + 1136) = v47;
  if (v47)
  {
    v48 = 0;
    v141 = (uint64_t *)(v0 + 352);
    v137 = v0 + 856;
    v138 = v0 + 864;
    v139 = v0 + 832;
    v140 = v0 + 872;
    v49 = type metadata accessor for SESPeerIdentityData;
    while (1)
    {
      v50 = *(_QWORD *)(v0 + 1128);
      if ((v50 & 0xC000000000000001) != 0)
      {
        v51 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v48, v50);
      }
      else
      {
        if (v48 >= *(_QWORD *)((v50 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          JUMPOUT(0x10011372CLL);
        }
        v51 = *(id *)(v50 + 8 * v48 + 32);
      }
      v52 = v51;
      *(_QWORD *)(v0 + 1144) = v51;
      *(_QWORD *)(v0 + 1152) = v48 + 1;
      if (__OFADD__(v48, 1))
      {
        __break(1u);
        JUMPOUT(0x1001136CCLL);
      }
      v53 = *(_QWORD *)(v0 + 1032);
      v54 = type metadata accessor for PropertyListDecoder(0);
      v55 = swift_allocObject(v54, *(unsigned int *)(v54 + 48), *(unsigned __int16 *)(v54 + 52));
      v59 = PropertyListDecoder.init()(v55, v56, v57, v58);
      v145 = v52;
      v60 = objc_msgSend(v52, "peerData", v137, v138, v139, v140);
      v61 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v60);
      v63 = v62;

      v64 = sub_1000639EC(&qword_100346BC0, v49, (uint64_t)&unk_10028AE3C);
      dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v53, v61, v63, v53, v64);
      v65 = v49;
      v66 = *(_QWORD *)(v0 + 1056);
      v67 = *(_QWORD *)(v0 + 1040);
      v68 = *(_QWORD *)(v0 + 1032);
      v69 = *(_QWORD *)(v0 + 1024);
      sub_100063CD0(v61, v63);
      swift_release(v59);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v67 + 56))(v69, 0, 1, v68);
      sub_100124884(v69, v66, v65);
      v71 = *(_QWORD *)(v66 + 48);
      v70 = *(_QWORD *)(v66 + 56);
      v72 = sub_100063D3C(&qword_100348A70);
      v73 = swift_allocObject(v72, 608, 7);
      *(_BYTE *)(v73 + 109) = 0;
      *(_WORD *)(v73 + 110) = -5120;
      *(_OWORD *)(v73 + 16) = xmmword_100288AD0;
      strcpy((char *)(v73 + 32), "serialNumber");
      *(_BYTE *)(v73 + 45) = 0;
      *(_WORD *)(v73 + 46) = -5120;
      *(_QWORD *)(v73 + 48) = 147;
      *(_WORD *)(v73 + 56) = 0;
      *(_OWORD *)(v73 + 64) = 0u;
      *(_BYTE *)(v73 + 80) = -64;
      *(_QWORD *)(v73 + 88) = _swiftEmptyArrayStorage;
      strcpy((char *)(v73 + 96), "caIdentifier");
      *(_QWORD *)(v73 + 112) = 66;
      *(_WORD *)(v73 + 120) = 0;
      *(_OWORD *)(v73 + 128) = 0u;
      *(_BYTE *)(v73 + 144) = -64;
      *(_QWORD *)(v73 + 152) = _swiftEmptyArrayStorage;
      *(_QWORD *)(v73 + 160) = 0xD000000000000011;
      *(_QWORD *)(v73 + 168) = 0x80000001002BCAC0;
      *(_QWORD *)(v73 + 176) = 24352;
      *(_WORD *)(v73 + 184) = 0;
      *(_OWORD *)(v73 + 192) = 0u;
      *(_BYTE *)(v73 + 208) = -64;
      *(_QWORD *)(v73 + 216) = _swiftEmptyArrayStorage;
      *(_QWORD *)(v73 + 224) = 0x656761735579656BLL;
      *(_QWORD *)(v73 + 232) = 0xE800000000000000;
      *(_QWORD *)(v73 + 240) = 149;
      *(_WORD *)(v73 + 248) = 0;
      *(_OWORD *)(v73 + 256) = 0u;
      *(_BYTE *)(v73 + 272) = -64;
      *(_QWORD *)(v73 + 280) = _swiftEmptyArrayStorage;
      strcpy((char *)(v73 + 288), "effectiveDate");
      *(_WORD *)(v73 + 302) = -4864;
      *(_QWORD *)(v73 + 304) = 37;
      *(_WORD *)(v73 + 312) = 256;
      *(_OWORD *)(v73 + 320) = 0u;
      *(_BYTE *)(v73 + 336) = -64;
      *(_QWORD *)(v73 + 344) = _swiftEmptyArrayStorage;
      strcpy((char *)(v73 + 352), "expirationDate");
      *(_BYTE *)(v73 + 367) = -18;
      *(_QWORD *)(v73 + 368) = 24356;
      *(_WORD *)(v73 + 376) = 256;
      *(_OWORD *)(v73 + 384) = 0u;
      *(_BYTE *)(v73 + 400) = -64;
      *(_QWORD *)(v73 + 408) = _swiftEmptyArrayStorage;
      *(_QWORD *)(v73 + 416) = 0x4E4944536163;
      *(_QWORD *)(v73 + 424) = 0xE600000000000000;
      *(_QWORD *)(v73 + 432) = 69;
      *(_WORD *)(v73 + 440) = 0;
      *(_OWORD *)(v73 + 448) = 0u;
      *(_BYTE *)(v73 + 464) = -64;
      *(_QWORD *)(v73 + 472) = _swiftEmptyArrayStorage;
      *(_QWORD *)(v73 + 480) = 0xD000000000000011;
      *(_QWORD *)(v73 + 488) = 0x80000001002BCAE0;
      *(_QWORD *)(v73 + 496) = 83;
      *(_WORD *)(v73 + 504) = 0;
      *(_OWORD *)(v73 + 512) = 0u;
      *(_BYTE *)(v73 + 528) = -64;
      *(_QWORD *)(v73 + 536) = _swiftEmptyArrayStorage;
      *(_QWORD *)(v73 + 544) = 0x654B63696C627570;
      *(_QWORD *)(v73 + 552) = 0xE900000000000079;
      *(_QWORD *)(v73 + 560) = 32585;
      *(_WORD *)(v73 + 568) = 0;
      *(_OWORD *)(v73 + 576) = 0u;
      *(_BYTE *)(v73 + 592) = -64;
      *(_QWORD *)(v73 + 600) = _swiftEmptyArrayStorage;
      *(_QWORD *)(v0 + 416) = 32545;
      *(_BYTE *)(v0 + 424) = 0;
      *(_BYTE *)(v0 + 425) = 0;
      *(_QWORD *)(v0 + 432) = v73;
      *(_QWORD *)(v0 + 440) = 0;
      *(_BYTE *)(v0 + 448) = 64;
      *(_QWORD *)(v0 + 456) = _swiftEmptyArrayStorage;
      *(_QWORD *)(v0 + 648) = v71;
      *(_QWORD *)(v0 + 656) = v70;
      sub_100063C8C(v71, v70);
      sub_100063C8C(v71, v70);
      v74 = sub_100136C5C((uint64_t *)(v0 + 648), (__n128 *)(v0 + 416));
      sub_100063CD0(*(_QWORD *)(v0 + 648), *(_QWORD *)(v0 + 656));
      v49 = v65;
      swift_bridgeObjectRelease(v73);
      sub_1001C06EC(v74, v141);
      sub_100063CD0(v71, v70);
      v75 = *(_QWORD *)(v0 + 368);
      v76 = *(_QWORD *)(v0 + 376);
      *(_QWORD *)(v0 + 1160) = v75;
      *(_QWORD *)(v0 + 1168) = v76;
      sub_100063C8C(v75, v76);
      v77 = v75;
      sub_100124944(v141, (void (*)(uint64_t, uint64_t))sub_100063CD0);
      sub_10007C23C(v75, v76);
      if ((v78 & 1) != 0)
        break;
      v79 = *(_QWORD *)(v0 + 1120);
      v80 = *(_QWORD *)(v0 + 1112);
      sub_100063C8C(v80, v79);
      sub_100063C8C(v75, v76);
      v81 = v145;
      v82 = v76;
      sub_100063C8C(v80, v79);
      sub_100063C8C(v77, v76);
      v83 = v81;
      v84 = Logger.logObject.getter(v83);
      LOBYTE(v81) = static os_log_type_t.error.getter(v84, v85);
      v86 = os_log_type_enabled(v84, (os_log_type_t)v81);
      v87 = *(_QWORD *)(v0 + 1120);
      if (v86)
      {
        v88 = (_DWORD *)swift_slowAlloc(32, -1);
        swift_slowAlloc(8, -1);
        *(_QWORD *)(v0 + 824) = swift_slowAlloc(64, -1);
        *v88 = 136315650;
        __asm { BR              X8 }
      }
      v89 = *(_QWORD *)(v0 + 1112);
      v90 = *(_QWORD *)(v0 + 1056);
      sub_100063CD0(v77, v82);

      sub_100063CD0(v89, v87);
      sub_100063CD0(v89, v87);
      sub_100063CD0(v77, v82);
      sub_100063CD0(v77, v82);

      sub_1001247E8(v90, v49);
      v48 = *(_QWORD *)(v0 + 1152);
      if (v48 == *(_QWORD *)(v0 + 1136))
        goto LABEL_22;
    }
    v113 = *(_QWORD *)(v0 + 976);
    v114 = *(_QWORD *)(v0 + 968);
    sub_100124B74(*(_QWORD *)(v0 + 1056), *(_QWORD *)(v0 + 1048), type metadata accessor for SESPeerIdentityData);
    sub_100063C8C(v114, v113);
    v115 = sub_100063C8C(v114, v113);
    v116 = Logger.logObject.getter(v115);
    v120 = static os_log_type_t.info.getter(v116, v117, v118, v119);
    if (os_log_type_enabled(v116, v120))
    {
      v121 = *(_QWORD *)(v0 + 976);
      v122 = *(_QWORD *)(v0 + 968);
      v123 = (_DWORD *)swift_slowAlloc(22, -1);
      *(_QWORD *)(v0 + 832) = swift_slowAlloc(64, -1);
      *v123 = 136315394;
      sub_100063C8C(v122, v121);
      sub_1001BD150(4, v122, v121);
      __asm { BR              X9 }
    }
    v124 = *(_QWORD *)(v0 + 1048);
    v125 = *(_QWORD *)(v0 + 976);
    v126 = *(_QWORD *)(v0 + 968);

    sub_100063CD0(v126, v125);
    sub_100063CD0(v126, v125);
    sub_1001247E8(v124, type metadata accessor for SESPeerIdentityData);
    v32 = (_QWORD *)swift_task_alloc(dword_100346B64);
    *(_QWORD *)(v0 + 1176) = v32;
    v33 = sub_100115DEC;
    goto LABEL_4;
  }
LABEL_22:
  v91 = *(_QWORD *)(v0 + 1120);
  v92 = *(_QWORD *)(v0 + 1112);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1128));
  sub_100063CD0(v92, v91);
  v93 = *(_QWORD *)(v0 + 920);
  if ((unint64_t)v93 >> 62)
  {
    if (v93 < 0)
      v128 = *(_QWORD *)(v0 + 920);
    else
      v128 = v93 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 920));
    v129 = _CocoaArrayWrapper.endIndex.getter(v128);
    swift_bridgeObjectRelease(v93);
    v94 = *(_QWORD *)(v0 + 1072);
    if (v129)
      goto LABEL_26;
LABEL_24:
    if ((unint64_t)v94 >> 62)
    {
      if (v94 < 0)
        v133 = v94;
      else
        v133 = v94 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v94);
      v134 = _CocoaArrayWrapper.endIndex.getter(v133);
      swift_bridgeObjectRelease(v94);
      v94 = *(_QWORD *)(v0 + 1072);
      if (v134)
        goto LABEL_26;
    }
    else if (*(_QWORD *)((v94 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_26;
    }
    swift_bridgeObjectRelease(v93);
    swift_bridgeObjectRelease(v94);
    v135 = *(_QWORD *)(v0 + 1048);
    v136 = *(_QWORD *)(v0 + 1024);
    swift_task_dealloc(*(_QWORD *)(v0 + 1056));
    swift_task_dealloc(v135);
    swift_task_dealloc(v136);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v94 = *(_QWORD *)(v0 + 1072);
  if (!*(_QWORD *)((v93 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_24;
LABEL_26:
  swift_bridgeObjectRetain_n(v94, 2);
  v95 = swift_bridgeObjectRetain_n(v93, 2);
  v96 = Logger.logObject.getter(v95);
  v100 = static os_log_type_t.info.getter(v96, v97, v98, v99);
  if (os_log_type_enabled(v96, v100))
  {
    v101 = swift_slowAlloc(22, -1);
    *(_DWORD *)v101 = 134218240;
    if ((unint64_t)v93 >> 62)
    {
      if (v93 < 0)
        v130 = v93;
      else
        v130 = v93 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v93);
      v102 = _CocoaArrayWrapper.endIndex.getter(v130);
      swift_bridgeObjectRelease(v93);
    }
    else
    {
      v102 = *(_QWORD *)((v93 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v103 = *(_QWORD *)(v0 + 1072);
    swift_bridgeObjectRelease(v93);
    *(_QWORD *)(v0 + 880) = v102;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 880, v0 + 888, v101 + 4, v101 + 12);
    swift_bridgeObjectRelease(v93);
    *(_WORD *)(v101 + 12) = 2048;
    if (v103 >> 62)
    {
      v131 = *(_QWORD *)(v0 + 1072);
      if (v131 < 0)
        v132 = *(_QWORD *)(v0 + 1072);
      else
        v132 = v103 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*(_QWORD *)(v0 + 1072));
      v104 = _CocoaArrayWrapper.endIndex.getter(v132);
      swift_bridgeObjectRelease(v131);
    }
    else
    {
      v104 = *(_QWORD *)((v103 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v105 = *(_QWORD *)(v0 + 1072);
    swift_bridgeObjectRelease(v105);
    *(_QWORD *)(v0 + 840) = v104;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 840, v0 + 848, v101 + 14, v101 + 22);
    swift_bridgeObjectRelease(v105);
    _os_log_impl((void *)&_mh_execute_header, v96, v100, "Adding %ld shares and removing %ld shares", (uint8_t *)v101, 0x16u);
    swift_slowDealloc(v101, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 1072), 2);
    swift_bridgeObjectRelease_n(v93, 2);
  }

  v106 = *(_QWORD *)(v0 + 1072);
  v107 = *(void **)(*(_QWORD *)(v0 + 1016) + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_keychainWrapper);
  v108 = String._bridgeToObjectiveC()();
  *(_QWORD *)(v0 + 1200) = v108;
  isa = Data._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)(v0 + 1208) = isa;
  swift_beginAccess(v0 + 920, v0 + 504, 0, 0);
  v110 = *(_QWORD *)(v0 + 920);
  swift_bridgeObjectRetain(v110);
  v111 = Array._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)(v0 + 1216) = v111;
  swift_bridgeObjectRelease(v110);
  v112 = Array._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)(v0 + 1224) = v112;
  swift_bridgeObjectRelease(v106);
  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = sub_1001182DC;
  *(_QWORD *)(v0 + 496) = swift_continuation_init(v0 + 16, 1);
  *(_QWORD *)(v0 + 464) = _NSConcreteStackBlock;
  *(_QWORD *)(v0 + 472) = 0x40000000;
  *(_QWORD *)(v0 + 480) = sub_10011A4E0;
  *(_QWORD *)(v0 + 488) = &unk_100309600;
  objc_msgSend(v107, "modifyTLKSharesForView:altDSID:addingShares:removingShares:completion:", v108, isa, v111, v112, v0 + 464);
  return swift_continuation_await(v0 + 16);
}

uint64_t sub_100113D8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 1088);
  v3[137] = a1;
  v3[138] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[134];
    v6 = v3[127];
    swift_bridgeObjectRelease(v3[115]);
    swift_bridgeObjectRelease(v5);
    v7 = sub_100118430;
    v8 = v6;
  }
  else
  {
    v8 = v3[127];
    v7 = sub_100113E64;
  }
  return swift_task_switch(v7, v8, 0);
}

uint64_t sub_100113E64()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  os_log_type_t v12;
  _BOOL4 v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  id v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char v69;
  unint64_t v70;
  uint64_t v71;
  id v72;
  id v73;
  NSObject *v74;
  uint64_t v75;
  _BOOL4 v76;
  unint64_t v77;
  _DWORD *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  NSObject *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  os_log_type_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  NSString v98;
  Class isa;
  uint64_t v100;
  Class v101;
  Class v102;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  NSObject *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  os_log_type_t v111;
  unint64_t v112;
  uint64_t v113;
  _DWORD *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  _QWORD *v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  NSObject *v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;

  v1 = (uint64_t *)(v0 + 288);
  v2 = v0 + 888;
  v3 = (_QWORD *)(v0 + 920);
  v4 = *(_QWORD *)(v0 + 1104);
  v5 = sub_10011B144(*(void **)(v0 + 1096), *(uint64_t **)(v0 + 984), *(_QWORD *)(v0 + 968), *(_QWORD *)(v0 + 976), *(_QWORD *)(v0 + 1000), *(_QWORD *)(v0 + 1000));
  if (v4)
  {
    v6 = v4;
    v7 = *(_QWORD *)(v0 + 976);
    v8 = *(_QWORD *)(v0 + 968);
    sub_100063C8C(v8, v7);
    swift_errorRetain(v6);
    sub_100063C8C(v8, v7);
    v9 = swift_errorRetain(v6);
    v10 = Logger.logObject.getter(v9);
    v12 = static os_log_type_t.error.getter(v10, v11);
    v13 = os_log_type_enabled(v10, v12);
    v14 = *(_QWORD *)(v0 + 976);
    v15 = *(_QWORD *)(v0 + 968);
    if (v13)
    {
      v137 = v10;
      v16 = swift_slowAlloc(22, -1);
      v136 = swift_slowAlloc(64, -1);
      v139 = v136;
      *(_DWORD *)v16 = 136315394;
      sub_100063C8C(v15, v14);
      sub_1001BD150(4, v15, v14);
      v134 = v140;
      v135 = v141;
      sub_1001BD2CC(v140, v141);
      v18 = v17;
      *(_QWORD *)(v0 + 896) = v17;
      v19 = sub_100063D3C((uint64_t *)&unk_100346060);
      v20 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
      v21 = v19;
      v1 = (uint64_t *)(v0 + 288);
      v22 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v21, v20);
      v24 = v23;
      v25 = v18;
      v3 = (_QWORD *)(v0 + 920);
      swift_bridgeObjectRelease(v25);
      sub_100063CD0(v134, v135);
      *(_QWORD *)(v0 + 904) = sub_1001C56EC(v22, v24, &v139);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 904, v0 + 912, v16 + 4, v16 + 12);
      v26 = v24;
      v2 = v0 + 888;
      swift_bridgeObjectRelease(v26);
      sub_100063CD0(v15, v14);
      sub_100063CD0(v15, v14);
      *(_WORD *)(v16 + 12) = 2080;
      swift_getErrorValue(v6, v0 + 912, v0 + 552);
      v27 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 560), *(_QWORD *)(v0 + 568));
      v29 = v28;
      *(_QWORD *)(v0 + 928) = sub_1001C56EC(v27, v28, &v139);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 928, v0 + 936, v16 + 14, v16 + 22);
      swift_bridgeObjectRelease(v29);
      swift_errorRelease(v6);
      swift_errorRelease(v6);
      _os_log_impl((void *)&_mh_execute_header, v137, v12, "Failed to create self-share for tlk %s : %s", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy(v136, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v136, -1, -1);
      swift_slowDealloc(v16, -1, -1);

    }
    else
    {

      sub_100063CD0(v15, v14);
      sub_100063CD0(v15, v14);
      swift_errorRelease(v6);
      swift_errorRelease(v6);
    }
    v35 = *(void **)(v0 + 1096);
    sub_10011A034(0xDu, 0);

    swift_errorRelease(v6);
  }
  else
  {
    v30 = v5;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v5);
    v32 = *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v31 = *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v32 >= v31 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1);
    v33 = *(void **)(v0 + 1096);
    v34 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v32, v30);
    specialized Array._endMutation()(v34);

  }
  sub_10011BBC4(v1);
  v131 = v2;
  v133 = v3;
  v36 = *(_QWORD *)(v0 + 1008);
  v37 = *(_QWORD *)(v0 + 1000);
  v38 = *(_QWORD *)(v0 + 992);
  v39 = *(_QWORD *)(v0 + 976);
  v40 = *(_QWORD *)(v0 + 968);
  v41 = *(_QWORD *)(v0 + 304);
  v42 = *(_QWORD *)(v0 + 312);
  *(_QWORD *)(v0 + 1112) = v41;
  *(_QWORD *)(v0 + 1120) = v42;
  sub_100063C8C(v41, v42);
  sub_100124944(v1, (void (*)(uint64_t, uint64_t))sub_100063CD0);
  v43 = (_QWORD *)swift_task_alloc(48);
  v43[2] = v38;
  v43[3] = v40;
  v43[4] = v39;
  v43[5] = v37;
  swift_bridgeObjectRetain(v36);
  v44 = (uint64_t)sub_1001F1CBC((uint64_t (*)(id *))sub_1001243FC, v43, v36);
  *(_QWORD *)(v0 + 1128) = v44;
  swift_task_dealloc(v43);
  if ((unint64_t)v44 >> 62)
  {
    if (v44 < 0)
      v120 = v44;
    else
      v120 = v44 & 0xFFFFFFFFFFFFFF8;
    v45 = _CocoaArrayWrapper.endIndex.getter(v120);
  }
  else
  {
    v45 = *(_QWORD *)((v44 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  *(_QWORD *)(v0 + 1136) = v45;
  if (!v45)
  {
LABEL_25:
    v81 = *(_QWORD *)(v0 + 1120);
    v82 = *(_QWORD *)(v0 + 1112);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1128));
    sub_100063CD0(v82, v81);
    v83 = *(_QWORD *)(v0 + 920);
    if ((unint64_t)v83 >> 62)
    {
      if (v83 < 0)
        v121 = *(_QWORD *)(v0 + 920);
      else
        v121 = v83 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*(_QWORD *)(v0 + 920));
      v122 = _CocoaArrayWrapper.endIndex.getter(v121);
      swift_bridgeObjectRelease(v83);
      if (v122)
        goto LABEL_29;
    }
    else if (*(_QWORD *)((v83 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_29:
      swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 1072), 2);
      v85 = swift_bridgeObjectRetain_n(v83, 2);
      v86 = Logger.logObject.getter(v85);
      v90 = static os_log_type_t.info.getter(v86, v87, v88, v89);
      if (os_log_type_enabled(v86, v90))
      {
        v91 = swift_slowAlloc(22, -1);
        *(_DWORD *)v91 = 134218240;
        if ((unint64_t)v83 >> 62)
        {
          if (v83 < 0)
            v123 = v83;
          else
            v123 = v83 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v83);
          v92 = _CocoaArrayWrapper.endIndex.getter(v123);
          swift_bridgeObjectRelease(v83);
        }
        else
        {
          v92 = *(_QWORD *)((v83 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        v93 = *(_QWORD *)(v0 + 1072);
        swift_bridgeObjectRelease(v83);
        *(_QWORD *)(v0 + 880) = v92;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 880, v131, v91 + 4, v91 + 12);
        swift_bridgeObjectRelease(v83);
        *(_WORD *)(v91 + 12) = 2048;
        if (v93 >> 62)
        {
          v124 = *(_QWORD *)(v0 + 1072);
          if (v124 < 0)
            v125 = *(_QWORD *)(v0 + 1072);
          else
            v125 = v93 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(*(_QWORD *)(v0 + 1072));
          v94 = _CocoaArrayWrapper.endIndex.getter(v125);
          swift_bridgeObjectRelease(v124);
        }
        else
        {
          v94 = *(_QWORD *)((v93 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        v95 = *(_QWORD *)(v0 + 1072);
        swift_bridgeObjectRelease(v95);
        *(_QWORD *)(v0 + 840) = v94;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 840, v0 + 848, v91 + 14, v91 + 22);
        swift_bridgeObjectRelease(v95);
        _os_log_impl((void *)&_mh_execute_header, v86, v90, "Adding %ld shares and removing %ld shares", (uint8_t *)v91, 0x16u);
        swift_slowDealloc(v91, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 1072), 2);
        swift_bridgeObjectRelease_n(v83, 2);
      }

      v96 = *(_QWORD *)(v0 + 1072);
      v97 = *(void **)(*(_QWORD *)(v0 + 1016) + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_keychainWrapper);
      v98 = String._bridgeToObjectiveC()();
      *(_QWORD *)(v0 + 1200) = v98;
      isa = Data._bridgeToObjectiveC()().super.isa;
      *(_QWORD *)(v0 + 1208) = isa;
      swift_beginAccess(v133, v0 + 504, 0, 0);
      v100 = *(_QWORD *)(v0 + 920);
      swift_bridgeObjectRetain(v100);
      v101 = Array._bridgeToObjectiveC()().super.isa;
      *(_QWORD *)(v0 + 1216) = v101;
      swift_bridgeObjectRelease(v100);
      v102 = Array._bridgeToObjectiveC()().super.isa;
      *(_QWORD *)(v0 + 1224) = v102;
      swift_bridgeObjectRelease(v96);
      *(_QWORD *)(v0 + 16) = v0;
      *(_QWORD *)(v0 + 24) = sub_1001182DC;
      *(_QWORD *)(v0 + 496) = swift_continuation_init(v0 + 16, 1);
      *(_QWORD *)(v0 + 464) = _NSConcreteStackBlock;
      *(_QWORD *)(v0 + 472) = 0x40000000;
      *(_QWORD *)(v0 + 480) = sub_10011A4E0;
      *(_QWORD *)(v0 + 488) = &unk_100309600;
      objc_msgSend(v97, "modifyTLKSharesForView:altDSID:addingShares:removingShares:completion:", v98, isa, v101, v102, v0 + 464);
      return swift_continuation_await(v0 + 16);
    }
    v84 = *(_QWORD *)(v0 + 1072);
    if ((unint64_t)v84 >> 62)
    {
      if (v84 < 0)
        v126 = *(_QWORD *)(v0 + 1072);
      else
        v126 = v84 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*(_QWORD *)(v0 + 1072));
      v127 = _CocoaArrayWrapper.endIndex.getter(v126);
      swift_bridgeObjectRelease(v84);
      if (v127)
        goto LABEL_29;
    }
    else if (*(_QWORD *)((v84 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_29;
    }
    v128 = *(_QWORD *)(v0 + 1072);
    swift_bridgeObjectRelease(v83);
    swift_bridgeObjectRelease(v128);
    v129 = *(_QWORD *)(v0 + 1048);
    v130 = *(_QWORD *)(v0 + 1024);
    swift_task_dealloc(*(_QWORD *)(v0 + 1056));
    swift_task_dealloc(v129);
    swift_task_dealloc(v130);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v46 = 0;
  v132 = (uint64_t *)(v0 + 352);
  while (1)
  {
    v47 = *(_QWORD *)(v0 + 1128);
    if ((v47 & 0xC000000000000001) != 0)
    {
      v48 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v46, v47);
    }
    else
    {
      if (v46 >= *(_QWORD *)((v47 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        JUMPOUT(0x100115714);
      }
      v48 = *(id *)(v47 + 8 * v46 + 32);
    }
    v49 = v48;
    *(_QWORD *)(v0 + 1144) = v48;
    *(_QWORD *)(v0 + 1152) = v46 + 1;
    if (__OFADD__(v46, 1))
    {
      __break(1u);
      JUMPOUT(0x1001156B4);
    }
    v50 = *(_QWORD *)(v0 + 1032);
    v51 = type metadata accessor for PropertyListDecoder(0);
    swift_allocObject(v51, *(unsigned int *)(v51 + 48), *(unsigned __int16 *)(v51 + 52));
    v52 = PropertyListDecoder.init()();
    v138 = v49;
    v53 = objc_msgSend(v49, "peerData");
    v54 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v53);
    v56 = v55;

    v57 = sub_1000639EC(&qword_100346BC0, type metadata accessor for SESPeerIdentityData, (uint64_t)&unk_10028AE3C);
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v50, v54, v56, v50, v57);
    v58 = *(_QWORD *)(v0 + 1056);
    v59 = *(_QWORD *)(v0 + 1040);
    v60 = *(_QWORD *)(v0 + 1032);
    v61 = *(_QWORD *)(v0 + 1024);
    sub_100063CD0(v54, v56);
    swift_release(v52);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v59 + 56))(v61, 0, 1, v60);
    sub_100124884(v61, v58, type metadata accessor for SESPeerIdentityData);
    v62 = *(_QWORD *)(v58 + 48);
    v63 = *(_QWORD *)(v58 + 56);
    v64 = sub_100063D3C(&qword_100348A70);
    v65 = swift_allocObject(v64, 608, 7);
    *(_BYTE *)(v65 + 109) = 0;
    *(_WORD *)(v65 + 110) = -5120;
    *(_OWORD *)(v65 + 16) = xmmword_100288AD0;
    strcpy((char *)(v65 + 32), "serialNumber");
    *(_BYTE *)(v65 + 45) = 0;
    *(_WORD *)(v65 + 46) = -5120;
    *(_QWORD *)(v65 + 48) = 147;
    *(_WORD *)(v65 + 56) = 0;
    *(_OWORD *)(v65 + 64) = 0u;
    *(_BYTE *)(v65 + 80) = -64;
    *(_QWORD *)(v65 + 88) = _swiftEmptyArrayStorage;
    strcpy((char *)(v65 + 96), "caIdentifier");
    *(_QWORD *)(v65 + 112) = 66;
    *(_WORD *)(v65 + 120) = 0;
    *(_OWORD *)(v65 + 128) = 0u;
    *(_BYTE *)(v65 + 144) = -64;
    *(_QWORD *)(v65 + 152) = _swiftEmptyArrayStorage;
    *(_QWORD *)(v65 + 160) = 0xD000000000000011;
    *(_QWORD *)(v65 + 168) = 0x80000001002BCAC0;
    *(_QWORD *)(v65 + 176) = 24352;
    *(_WORD *)(v65 + 184) = 0;
    *(_OWORD *)(v65 + 192) = 0u;
    *(_BYTE *)(v65 + 208) = -64;
    *(_QWORD *)(v65 + 216) = _swiftEmptyArrayStorage;
    *(_QWORD *)(v65 + 224) = 0x656761735579656BLL;
    *(_QWORD *)(v65 + 232) = 0xE800000000000000;
    *(_QWORD *)(v65 + 240) = 149;
    *(_WORD *)(v65 + 248) = 0;
    *(_OWORD *)(v65 + 256) = 0u;
    *(_BYTE *)(v65 + 272) = -64;
    *(_QWORD *)(v65 + 280) = _swiftEmptyArrayStorage;
    strcpy((char *)(v65 + 288), "effectiveDate");
    *(_WORD *)(v65 + 302) = -4864;
    *(_QWORD *)(v65 + 304) = 37;
    *(_WORD *)(v65 + 312) = 256;
    *(_OWORD *)(v65 + 320) = 0u;
    *(_BYTE *)(v65 + 336) = -64;
    *(_QWORD *)(v65 + 344) = _swiftEmptyArrayStorage;
    strcpy((char *)(v65 + 352), "expirationDate");
    *(_BYTE *)(v65 + 367) = -18;
    *(_QWORD *)(v65 + 368) = 24356;
    *(_WORD *)(v65 + 376) = 256;
    *(_OWORD *)(v65 + 384) = 0u;
    *(_BYTE *)(v65 + 400) = -64;
    *(_QWORD *)(v65 + 408) = _swiftEmptyArrayStorage;
    *(_QWORD *)(v65 + 416) = 0x4E4944536163;
    *(_QWORD *)(v65 + 424) = 0xE600000000000000;
    *(_QWORD *)(v65 + 432) = 69;
    *(_WORD *)(v65 + 440) = 0;
    *(_OWORD *)(v65 + 448) = 0u;
    *(_BYTE *)(v65 + 464) = -64;
    *(_QWORD *)(v65 + 472) = _swiftEmptyArrayStorage;
    *(_QWORD *)(v65 + 480) = 0xD000000000000011;
    *(_QWORD *)(v65 + 488) = 0x80000001002BCAE0;
    *(_QWORD *)(v65 + 496) = 83;
    *(_WORD *)(v65 + 504) = 0;
    *(_OWORD *)(v65 + 512) = 0u;
    *(_BYTE *)(v65 + 528) = -64;
    *(_QWORD *)(v65 + 536) = _swiftEmptyArrayStorage;
    *(_QWORD *)(v65 + 544) = 0x654B63696C627570;
    *(_QWORD *)(v65 + 552) = 0xE900000000000079;
    *(_QWORD *)(v65 + 560) = 32585;
    *(_WORD *)(v65 + 568) = 0;
    *(_OWORD *)(v65 + 576) = 0u;
    *(_BYTE *)(v65 + 592) = -64;
    *(_QWORD *)(v65 + 600) = _swiftEmptyArrayStorage;
    *(_QWORD *)(v0 + 416) = 32545;
    *(_BYTE *)(v0 + 424) = 0;
    *(_BYTE *)(v0 + 425) = 0;
    *(_QWORD *)(v0 + 432) = v65;
    *(_QWORD *)(v0 + 440) = 0;
    *(_BYTE *)(v0 + 448) = 64;
    *(_QWORD *)(v0 + 456) = _swiftEmptyArrayStorage;
    *(_QWORD *)(v0 + 648) = v62;
    *(_QWORD *)(v0 + 656) = v63;
    sub_100063C8C(v62, v63);
    sub_100063C8C(v62, v63);
    v66 = sub_100136C5C((uint64_t *)(v0 + 648), (__n128 *)(v0 + 416));
    sub_100063CD0(*(_QWORD *)(v0 + 648), *(_QWORD *)(v0 + 656));
    swift_bridgeObjectRelease(v65);
    sub_1001C06EC(v66, v132);
    sub_100063CD0(v62, v63);
    v68 = *(_QWORD *)(v0 + 368);
    v67 = *(_QWORD *)(v0 + 376);
    *(_QWORD *)(v0 + 1160) = v68;
    *(_QWORD *)(v0 + 1168) = v67;
    sub_100063C8C(v68, v67);
    sub_100124944(v132, (void (*)(uint64_t, uint64_t))sub_100063CD0);
    sub_10007C23C(v68, v67);
    if ((v69 & 1) != 0)
      break;
    v70 = *(_QWORD *)(v0 + 1120);
    v71 = *(_QWORD *)(v0 + 1112);
    sub_100063C8C(v71, v70);
    sub_100063C8C(v68, v67);
    v72 = v138;
    sub_100063C8C(v71, v70);
    sub_100063C8C(v68, v67);
    v73 = v72;
    v74 = Logger.logObject.getter(v73);
    LOBYTE(v71) = static os_log_type_t.error.getter(v74, v75);
    v76 = os_log_type_enabled(v74, (os_log_type_t)v71);
    v77 = *(_QWORD *)(v0 + 1120);
    if (v76)
    {
      v78 = (_DWORD *)swift_slowAlloc(32, -1);
      swift_slowAlloc(8, -1);
      *(_QWORD *)(v0 + 824) = swift_slowAlloc(64, -1);
      *v78 = 136315650;
      __asm { BR              X8 }
    }
    v79 = *(_QWORD *)(v0 + 1112);
    v80 = *(_QWORD *)(v0 + 1056);
    sub_100063CD0(v68, v67);

    sub_100063CD0(v79, v77);
    sub_100063CD0(v79, v77);
    sub_100063CD0(v68, v67);
    sub_100063CD0(v68, v67);

    sub_1001247E8(v80, type metadata accessor for SESPeerIdentityData);
    v46 = *(_QWORD *)(v0 + 1152);
    if (v46 == *(_QWORD *)(v0 + 1136))
      goto LABEL_25;
  }
  v104 = *(_QWORD *)(v0 + 976);
  v105 = *(_QWORD *)(v0 + 968);
  sub_100124B74(*(_QWORD *)(v0 + 1056), *(_QWORD *)(v0 + 1048), type metadata accessor for SESPeerIdentityData);
  sub_100063C8C(v105, v104);
  v106 = sub_100063C8C(v105, v104);
  v107 = Logger.logObject.getter(v106);
  v111 = static os_log_type_t.info.getter(v107, v108, v109, v110);
  if (os_log_type_enabled(v107, v111))
  {
    v112 = *(_QWORD *)(v0 + 976);
    v113 = *(_QWORD *)(v0 + 968);
    v114 = (_DWORD *)swift_slowAlloc(22, -1);
    *(_QWORD *)(v0 + 832) = swift_slowAlloc(64, -1);
    *v114 = 136315394;
    sub_100063C8C(v113, v112);
    sub_1001BD150(4, v113, v112);
    __asm { BR              X9 }
  }
  v115 = *(_QWORD *)(v0 + 1048);
  v116 = *(_QWORD *)(v0 + 976);
  v117 = *(_QWORD *)(v0 + 968);

  sub_100063CD0(v117, v116);
  sub_100063CD0(v117, v116);
  sub_1001247E8(v115, type metadata accessor for SESPeerIdentityData);
  v118 = (_QWORD *)swift_task_alloc(dword_100346B64);
  *(_QWORD *)(v0 + 1176) = v118;
  *v118 = v0;
  v118[1] = sub_100115DEC;
  v119 = *(_QWORD *)(v0 + 1016);
  v118[20] = v119;
  return swift_task_switch(sub_1001095A0, v119, 0);
}

uint64_t sub_100115DEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 1176);
  v3[148] = a1;
  v3[149] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[141];
    v6 = v3[127];
    swift_bridgeObjectRelease(v3[134]);
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v3[115]);
    v7 = sub_1001184B0;
    v8 = v6;
  }
  else
  {
    v8 = v3[127];
    v7 = sub_100115ECC;
  }
  return swift_task_switch(v7, v8, 0);
}

uint64_t sub_100115ECC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  os_log_type_t v13;
  unint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  id *v17;
  uint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t inited;
  uint64_t v31;
  unint64_t v32;
  Class isa;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char v75;
  unint64_t v76;
  uint64_t v77;
  id v78;
  id v79;
  NSObject *v80;
  uint64_t v81;
  _BOOL4 v82;
  unint64_t v83;
  _DWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  NSString v89;
  Class v90;
  uint64_t v91;
  Class v92;
  Class v93;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  NSObject *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  os_log_type_t v102;
  unint64_t v103;
  uint64_t v104;
  _DWORD *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  void *v122;
  void *v123;

  v1 = (_QWORD *)(v0 + 920);
  v2 = *(_QWORD *)(v0 + 1192);
  v3 = sub_10011B144(*(void **)(v0 + 1184), *(uint64_t **)(v0 + 984), *(_QWORD *)(v0 + 968), *(_QWORD *)(v0 + 976), *(_QWORD *)(v0 + 1000), *(_QWORD *)(v0 + 1056));
  if (v2)
  {
    v4 = v2;
    v5 = *(void **)(v0 + 1144);
    v6 = *(_QWORD *)(v0 + 976);
    v7 = *(_QWORD *)(v0 + 968);
    sub_100063C8C(v7, v6);
    v8 = v5;
    swift_errorRetain(v4);
    sub_100063C8C(v7, v6);
    v9 = v8;
    v10 = swift_errorRetain(v4);
    v11 = Logger.logObject.getter(v10);
    v13 = static os_log_type_t.error.getter(v11, v12);
    if (os_log_type_enabled(v11, v13))
    {
      v14 = *(_QWORD *)(v0 + 976);
      v15 = *(_QWORD *)(v0 + 968);
      v16 = (_DWORD *)swift_slowAlloc(32, -1);
      swift_slowAlloc(8, -1);
      *(_QWORD *)(v0 + 752) = swift_slowAlloc(64, -1);
      *v16 = 136315650;
      sub_100063C8C(v15, v14);
      sub_1001BD150(4, v15, v14);
      __asm { BR              X9 }
    }
    v23 = *(void **)(v0 + 1144);
    v24 = *(_QWORD *)(v0 + 976);
    v25 = *(_QWORD *)(v0 + 968);

    sub_100063CD0(v25, v24);
    sub_100063CD0(v25, v24);

    swift_errorRelease(v4);
    swift_errorRelease(v4);
    v17 = (id *)(v0 + 1144);
    v122 = *(void **)(v0 + 1184);
    *(_QWORD *)(v0 + 720) = v4;
    swift_errorRetain(v4);
    v26 = sub_100063D3C(&qword_100345378);
    if (swift_dynamicCast(v0 + 1300, v0 + 720, v26, &type metadata for KeySyncEvent, 6))
      v27 = *(_BYTE *)(v0 + 1300);
    else
      v27 = 28;
    v28 = objc_opt_self(SESDAnalyticsLogger);
    v29 = sub_100063D3C(&qword_1003460E0);
    inited = swift_initStackObject(v29, v0 + 80);
    *(_OWORD *)(inited + 16) = xmmword_1002888E0;
    *(_QWORD *)(v0 + 600) = sub_1001BBA58(v27);
    *(_QWORD *)(v0 + 608) = v31;
    AnyHashable.init<A>(_:)(v0 + 600, &type metadata for String, &protocol witness table for String);
    *(_QWORD *)(inited + 96) = &type metadata for Int;
    *(_QWORD *)(inited + 72) = 1;
    v32 = sub_10017C368(inited);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v32);
    sub_10004A310(v28, isa);

    swift_errorRelease(v4);
  }
  else
  {
    v17 = (id *)(v0 + 1184);
    v18 = v3;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v18);
    v20 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v19 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v20 >= v19 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
    v21 = *(void **)(v0 + 1144);
    v22 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, v18);
    specialized Array._endMutation()(v22);

  }
  v34 = *(_QWORD *)(v0 + 1168);
  v35 = *(_QWORD *)(v0 + 1160);
  v36 = *(_QWORD *)(v0 + 1056);

  sub_100063CD0(v35, v34);
  sub_1001247E8(v36, type metadata accessor for SESPeerIdentityData);
  v37 = *(_QWORD *)(v0 + 1152);
  if (v37 == *(_QWORD *)(v0 + 1136))
  {
LABEL_12:
    v38 = *(_QWORD *)(v0 + 1120);
    v39 = *(_QWORD *)(v0 + 1112);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1128));
    sub_100063CD0(v39, v38);
    v40 = *(_QWORD *)(v0 + 920);
    if ((unint64_t)v40 >> 62)
    {
      if (v40 < 0)
        v111 = *(_QWORD *)(v0 + 920);
      else
        v111 = v40 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*(_QWORD *)(v0 + 920));
      v112 = _CocoaArrayWrapper.endIndex.getter(v111);
      swift_bridgeObjectRelease(v40);
      if (v112)
        goto LABEL_16;
    }
    else if (*(_QWORD *)((v40 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_16:
      swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 1072), 2);
      v42 = swift_bridgeObjectRetain_n(v40, 2);
      v43 = Logger.logObject.getter(v42);
      v47 = static os_log_type_t.info.getter(v43, v44, v45, v46);
      if (os_log_type_enabled(v43, v47))
      {
        v48 = swift_slowAlloc(22, -1);
        *(_DWORD *)v48 = 134218240;
        if ((unint64_t)v40 >> 62)
        {
          if (v40 < 0)
            v113 = v40;
          else
            v113 = v40 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v40);
          v49 = _CocoaArrayWrapper.endIndex.getter(v113);
          swift_bridgeObjectRelease(v40);
        }
        else
        {
          v49 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        v50 = *(_QWORD *)(v0 + 1072);
        swift_bridgeObjectRelease(v40);
        *(_QWORD *)(v0 + 880) = v49;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 880, v0 + 888, v48 + 4, v48 + 12);
        swift_bridgeObjectRelease(v40);
        *(_WORD *)(v48 + 12) = 2048;
        if (v50 >> 62)
        {
          v114 = *(_QWORD *)(v0 + 1072);
          if (v114 < 0)
            v115 = *(_QWORD *)(v0 + 1072);
          else
            v115 = v50 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(*(_QWORD *)(v0 + 1072));
          v51 = _CocoaArrayWrapper.endIndex.getter(v115);
          swift_bridgeObjectRelease(v114);
        }
        else
        {
          v51 = *(_QWORD *)((v50 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        v52 = *(_QWORD *)(v0 + 1072);
        swift_bridgeObjectRelease(v52);
        *(_QWORD *)(v0 + 840) = v51;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 840, v0 + 848, v48 + 14, v48 + 22);
        swift_bridgeObjectRelease(v52);
        _os_log_impl((void *)&_mh_execute_header, v43, v47, "Adding %ld shares and removing %ld shares", (uint8_t *)v48, 0x16u);
        swift_slowDealloc(v48, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 1072), 2);
        swift_bridgeObjectRelease_n(v40, 2);
      }

      v87 = *(_QWORD *)(v0 + 1072);
      v88 = *(void **)(*(_QWORD *)(v0 + 1016) + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_keychainWrapper);
      v89 = String._bridgeToObjectiveC()();
      *(_QWORD *)(v0 + 1200) = v89;
      v90 = Data._bridgeToObjectiveC()().super.isa;
      *(_QWORD *)(v0 + 1208) = v90;
      swift_beginAccess(v0 + 920, v0 + 504, 0, 0);
      v91 = *(_QWORD *)(v0 + 920);
      swift_bridgeObjectRetain(v91);
      v92 = Array._bridgeToObjectiveC()().super.isa;
      *(_QWORD *)(v0 + 1216) = v92;
      swift_bridgeObjectRelease(v91);
      v93 = Array._bridgeToObjectiveC()().super.isa;
      *(_QWORD *)(v0 + 1224) = v93;
      swift_bridgeObjectRelease(v87);
      *(_QWORD *)(v0 + 16) = v0;
      *(_QWORD *)(v0 + 24) = sub_1001182DC;
      *(_QWORD *)(v0 + 496) = swift_continuation_init(v0 + 16, 1);
      *(_QWORD *)(v0 + 464) = _NSConcreteStackBlock;
      *(_QWORD *)(v0 + 472) = 0x40000000;
      *(_QWORD *)(v0 + 480) = sub_10011A4E0;
      *(_QWORD *)(v0 + 488) = &unk_100309600;
      objc_msgSend(v88, "modifyTLKSharesForView:altDSID:addingShares:removingShares:completion:", v89, v90, v92, v93, v0 + 464);
      return swift_continuation_await(v0 + 16);
    }
    v41 = *(_QWORD *)(v0 + 1072);
    if ((unint64_t)v41 >> 62)
    {
      if (v41 < 0)
        v116 = *(_QWORD *)(v0 + 1072);
      else
        v116 = v41 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*(_QWORD *)(v0 + 1072));
      v117 = _CocoaArrayWrapper.endIndex.getter(v116);
      swift_bridgeObjectRelease(v41);
      if (v117)
        goto LABEL_16;
    }
    else if (*(_QWORD *)((v41 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_16;
    }
    v118 = *(_QWORD *)(v0 + 1072);
    swift_bridgeObjectRelease(v40);
    swift_bridgeObjectRelease(v118);
    v119 = *(_QWORD *)(v0 + 1048);
    v120 = *(_QWORD *)(v0 + 1024);
    swift_task_dealloc(*(_QWORD *)(v0 + 1056));
    swift_task_dealloc(v119);
    swift_task_dealloc(v120);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v121 = (uint64_t *)(v0 + 352);
  while (1)
  {
    v53 = *(_QWORD *)(v0 + 1128);
    if ((v53 & 0xC000000000000001) != 0)
    {
      v54 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v37, v53);
    }
    else
    {
      if (v37 >= *(_QWORD *)((v53 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        JUMPOUT(0x100117B6CLL);
      }
      v54 = *(id *)(v53 + 8 * v37 + 32);
    }
    v55 = v54;
    *(_QWORD *)(v0 + 1144) = v54;
    *(_QWORD *)(v0 + 1152) = v37 + 1;
    if (__OFADD__(v37, 1))
    {
      __break(1u);
      JUMPOUT(0x100117B0CLL);
    }
    v56 = *(_QWORD *)(v0 + 1032);
    v57 = type metadata accessor for PropertyListDecoder(0);
    swift_allocObject(v57, *(unsigned int *)(v57 + 48), *(unsigned __int16 *)(v57 + 52));
    v58 = PropertyListDecoder.init()();
    v123 = v55;
    v59 = objc_msgSend(v55, "peerData");
    v60 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v59);
    v62 = v61;

    v63 = sub_1000639EC(&qword_100346BC0, type metadata accessor for SESPeerIdentityData, (uint64_t)&unk_10028AE3C);
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v56, v60, v62, v56, v63);
    v64 = *(_QWORD *)(v0 + 1056);
    v65 = *(_QWORD *)(v0 + 1040);
    v66 = *(_QWORD *)(v0 + 1032);
    v67 = *(_QWORD *)(v0 + 1024);
    sub_100063CD0(v60, v62);
    swift_release(v58);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v65 + 56))(v67, 0, 1, v66);
    sub_100124884(v67, v64, type metadata accessor for SESPeerIdentityData);
    v68 = *(_QWORD *)(v64 + 48);
    v69 = *(_QWORD *)(v64 + 56);
    v70 = sub_100063D3C(&qword_100348A70);
    v71 = swift_allocObject(v70, 608, 7);
    *(_BYTE *)(v71 + 109) = 0;
    *(_WORD *)(v71 + 110) = -5120;
    *(_OWORD *)(v71 + 16) = xmmword_100288AD0;
    strcpy((char *)(v71 + 32), "serialNumber");
    *(_BYTE *)(v71 + 45) = 0;
    *(_WORD *)(v71 + 46) = -5120;
    *(_QWORD *)(v71 + 48) = 147;
    *(_WORD *)(v71 + 56) = 0;
    *(_OWORD *)(v71 + 64) = 0u;
    *(_BYTE *)(v71 + 80) = -64;
    *(_QWORD *)(v71 + 88) = _swiftEmptyArrayStorage;
    strcpy((char *)(v71 + 96), "caIdentifier");
    *(_QWORD *)(v71 + 112) = 66;
    *(_WORD *)(v71 + 120) = 0;
    *(_OWORD *)(v71 + 128) = 0u;
    *(_BYTE *)(v71 + 144) = -64;
    *(_QWORD *)(v71 + 152) = _swiftEmptyArrayStorage;
    *(_QWORD *)(v71 + 160) = 0xD000000000000011;
    *(_QWORD *)(v71 + 168) = 0x80000001002BCAC0;
    *(_QWORD *)(v71 + 176) = 24352;
    *(_WORD *)(v71 + 184) = 0;
    *(_OWORD *)(v71 + 192) = 0u;
    *(_BYTE *)(v71 + 208) = -64;
    *(_QWORD *)(v71 + 216) = _swiftEmptyArrayStorage;
    *(_QWORD *)(v71 + 224) = 0x656761735579656BLL;
    *(_QWORD *)(v71 + 232) = 0xE800000000000000;
    *(_QWORD *)(v71 + 240) = 149;
    *(_WORD *)(v71 + 248) = 0;
    *(_OWORD *)(v71 + 256) = 0u;
    *(_BYTE *)(v71 + 272) = -64;
    *(_QWORD *)(v71 + 280) = _swiftEmptyArrayStorage;
    strcpy((char *)(v71 + 288), "effectiveDate");
    *(_WORD *)(v71 + 302) = -4864;
    *(_QWORD *)(v71 + 304) = 37;
    *(_WORD *)(v71 + 312) = 256;
    *(_OWORD *)(v71 + 320) = 0u;
    *(_BYTE *)(v71 + 336) = -64;
    *(_QWORD *)(v71 + 344) = _swiftEmptyArrayStorage;
    strcpy((char *)(v71 + 352), "expirationDate");
    *(_BYTE *)(v71 + 367) = -18;
    *(_QWORD *)(v71 + 368) = 24356;
    *(_WORD *)(v71 + 376) = 256;
    *(_OWORD *)(v71 + 384) = 0u;
    *(_BYTE *)(v71 + 400) = -64;
    *(_QWORD *)(v71 + 408) = _swiftEmptyArrayStorage;
    *(_QWORD *)(v71 + 416) = 0x4E4944536163;
    *(_QWORD *)(v71 + 424) = 0xE600000000000000;
    *(_QWORD *)(v71 + 432) = 69;
    *(_WORD *)(v71 + 440) = 0;
    *(_OWORD *)(v71 + 448) = 0u;
    *(_BYTE *)(v71 + 464) = -64;
    *(_QWORD *)(v71 + 472) = _swiftEmptyArrayStorage;
    *(_QWORD *)(v71 + 480) = 0xD000000000000011;
    *(_QWORD *)(v71 + 488) = 0x80000001002BCAE0;
    *(_QWORD *)(v71 + 496) = 83;
    *(_WORD *)(v71 + 504) = 0;
    *(_OWORD *)(v71 + 512) = 0u;
    *(_BYTE *)(v71 + 528) = -64;
    *(_QWORD *)(v71 + 536) = _swiftEmptyArrayStorage;
    *(_QWORD *)(v71 + 544) = 0x654B63696C627570;
    *(_QWORD *)(v71 + 552) = 0xE900000000000079;
    *(_QWORD *)(v71 + 560) = 32585;
    *(_WORD *)(v71 + 568) = 0;
    *(_OWORD *)(v71 + 576) = 0u;
    *(_BYTE *)(v71 + 592) = -64;
    *(_QWORD *)(v71 + 600) = _swiftEmptyArrayStorage;
    *(_QWORD *)(v0 + 416) = 32545;
    *(_BYTE *)(v0 + 424) = 0;
    *(_BYTE *)(v0 + 425) = 0;
    *(_QWORD *)(v0 + 432) = v71;
    *(_QWORD *)(v0 + 440) = 0;
    *(_BYTE *)(v0 + 448) = 64;
    *(_QWORD *)(v0 + 456) = _swiftEmptyArrayStorage;
    *(_QWORD *)(v0 + 648) = v68;
    *(_QWORD *)(v0 + 656) = v69;
    sub_100063C8C(v68, v69);
    sub_100063C8C(v68, v69);
    v72 = sub_100136C5C((uint64_t *)(v0 + 648), (__n128 *)(v0 + 416));
    sub_100063CD0(*(_QWORD *)(v0 + 648), *(_QWORD *)(v0 + 656));
    swift_bridgeObjectRelease(v71);
    sub_1001C06EC(v72, v121);
    sub_100063CD0(v68, v69);
    v74 = *(_QWORD *)(v0 + 368);
    v73 = *(_QWORD *)(v0 + 376);
    *(_QWORD *)(v0 + 1160) = v74;
    *(_QWORD *)(v0 + 1168) = v73;
    sub_100063C8C(v74, v73);
    sub_100124944(v121, (void (*)(uint64_t, uint64_t))sub_100063CD0);
    sub_10007C23C(v74, v73);
    if ((v75 & 1) != 0)
      break;
    v76 = *(_QWORD *)(v0 + 1120);
    v77 = *(_QWORD *)(v0 + 1112);
    sub_100063C8C(v77, v76);
    sub_100063C8C(v74, v73);
    v78 = v123;
    sub_100063C8C(v77, v76);
    sub_100063C8C(v74, v73);
    v79 = v78;
    v80 = Logger.logObject.getter(v79);
    LOBYTE(v77) = static os_log_type_t.error.getter(v80, v81);
    v82 = os_log_type_enabled(v80, (os_log_type_t)v77);
    v83 = *(_QWORD *)(v0 + 1120);
    if (v82)
    {
      v84 = (_DWORD *)swift_slowAlloc(32, -1);
      swift_slowAlloc(8, -1);
      *(_QWORD *)(v0 + 824) = swift_slowAlloc(64, -1);
      *v84 = 136315650;
      __asm { BR              X8 }
    }
    v85 = *(_QWORD *)(v0 + 1112);
    v86 = *(_QWORD *)(v0 + 1056);
    sub_100063CD0(v74, v73);

    sub_100063CD0(v85, v83);
    sub_100063CD0(v85, v83);
    sub_100063CD0(v74, v73);
    sub_100063CD0(v74, v73);

    sub_1001247E8(v86, type metadata accessor for SESPeerIdentityData);
    v37 = *(_QWORD *)(v0 + 1152);
    if (v37 == *(_QWORD *)(v0 + 1136))
      goto LABEL_12;
  }
  v95 = *(_QWORD *)(v0 + 976);
  v96 = *(_QWORD *)(v0 + 968);
  sub_100124B74(*(_QWORD *)(v0 + 1056), *(_QWORD *)(v0 + 1048), type metadata accessor for SESPeerIdentityData);
  sub_100063C8C(v96, v95);
  v97 = sub_100063C8C(v96, v95);
  v98 = Logger.logObject.getter(v97);
  v102 = static os_log_type_t.info.getter(v98, v99, v100, v101);
  if (os_log_type_enabled(v98, v102))
  {
    v103 = *(_QWORD *)(v0 + 976);
    v104 = *(_QWORD *)(v0 + 968);
    v105 = (_DWORD *)swift_slowAlloc(22, -1);
    *(_QWORD *)(v0 + 832) = swift_slowAlloc(64, -1);
    *v105 = 136315394;
    sub_100063C8C(v104, v103);
    sub_1001BD150(4, v104, v103);
    __asm { BR              X9 }
  }
  v106 = *(_QWORD *)(v0 + 1048);
  v107 = *(_QWORD *)(v0 + 976);
  v108 = *(_QWORD *)(v0 + 968);

  sub_100063CD0(v108, v107);
  sub_100063CD0(v108, v107);
  sub_1001247E8(v106, type metadata accessor for SESPeerIdentityData);
  v109 = (_QWORD *)swift_task_alloc(dword_100346B64);
  *(_QWORD *)(v0 + 1176) = v109;
  *v109 = v0;
  v109[1] = sub_100115DEC;
  v110 = *(_QWORD *)(v0 + 1016);
  v109[20] = v110;
  return swift_task_switch(sub_1001095A0, v110, 0);
}

uint64_t sub_1001182DC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 1232) = v2;
  if (v2)
  {
    v3 = *(_QWORD *)(v1 + 1016);
    v4 = sub_10011857C;
  }
  else
  {
    v5 = *(_QWORD *)(v1 + 1016);
    swift_bridgeObjectRelease(*(_QWORD *)(v1 + 920));
    v4 = sub_100118390;
    v3 = v5;
  }
  return swift_task_switch(v4, v3, 0);
}

uint64_t sub_100118390()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(void **)(v0 + 1216);
  v2 = *(void **)(v0 + 1208);
  v3 = *(void **)(v0 + 1200);

  v4 = *(_QWORD *)(v0 + 1048);
  v5 = *(_QWORD *)(v0 + 1024);
  swift_task_dealloc(*(_QWORD *)(v0 + 1056));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100118430()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 1048);
  v2 = *(_QWORD *)(v0 + 1024);
  swift_task_dealloc(*(_QWORD *)(v0 + 1056));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001184B0()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 1168);
  v2 = *(_QWORD *)(v0 + 1160);
  v3 = *(_QWORD *)(v0 + 1120);
  v4 = *(_QWORD *)(v0 + 1112);
  v5 = *(_QWORD *)(v0 + 1056);

  sub_100063CD0(v2, v1);
  sub_100063CD0(v4, v3);
  sub_1001247E8(v5, type metadata accessor for SESPeerIdentityData);
  v6 = *(_QWORD *)(v0 + 1048);
  v7 = *(_QWORD *)(v0 + 1024);
  swift_task_dealloc(*(_QWORD *)(v0 + 1056));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10011857C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  os_log_type_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;

  v2 = (uint64_t *)(v1 + 920);
  v3 = *(_QWORD *)(v1 + 1232);
  v4 = *(void **)(v1 + 1224);
  v5 = *(void **)(v1 + 1216);
  v6 = *(void **)(v1 + 1208);
  v7 = *(void **)(v1 + 1200);
  swift_willThrow(a1);

  swift_errorRetain(v3);
  v8 = swift_errorRetain(v3);
  v9 = Logger.logObject.getter(v8);
  v11 = static os_log_type_t.error.getter(v9, v10);
  if (os_log_type_enabled(v9, v11))
  {
    v12 = *(_QWORD *)(v1 + 1232);
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    v27 = v14;
    *(_DWORD *)v13 = 136315138;
    swift_getErrorValue(v12, v1 + 736, v1 + 576);
    v15 = Error.localizedDescription.getter(*(_QWORD *)(v1 + 584), *(_QWORD *)(v1 + 592));
    v17 = v16;
    *(_QWORD *)(v1 + 744) = sub_1001C56EC(v15, v16, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 744, v1 + 752, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease(v17);
    swift_errorRelease(v12);
    swift_errorRelease(v12);
    _os_log_impl((void *)&_mh_execute_header, v9, v11, "Failed to modifyTLKShares %s", v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

  }
  else
  {
    v18 = *(_QWORD *)(v1 + 1232);

    swift_errorRelease(v18);
    swift_errorRelease(v18);
  }
  v19 = *v2;
  if ((unint64_t)*v2 >> 62)
  {
    if (v19 < 0)
      v26 = *v2;
    else
      v26 = v19 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v2);
    v20 = _CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease(v19);
  }
  else
  {
    v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v21 = *(_QWORD *)(v1 + 1232);
  swift_bridgeObjectRelease(v19);
  if (v20)
    v22 = 23;
  else
    v22 = 24;
  sub_10011A034(v22, 0);
  swift_errorRelease(v21);
  v23 = *(_QWORD *)(v1 + 1048);
  v24 = *(_QWORD *)(v1 + 1024);
  swift_task_dealloc(*(_QWORD *)(v1 + 1056));
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10011881C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v8[16] = a7;
  v8[17] = v7;
  v8[14] = a5;
  v8[15] = a6;
  v8[12] = a3;
  v8[13] = a4;
  v8[10] = a1;
  v8[11] = a2;
  v9 = type metadata accessor for SEKeySyncRecovery.RecoveryRecord(0);
  v8[18] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100118880, v7, 0);
}

uint64_t sub_100118880()
{
  uint64_t v0;

  sub_1001567F0(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 144));
  sub_1001247E8(*(_QWORD *)(v0 + 144), type metadata accessor for SEKeySyncRecovery.RecoveryRecord);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100118A94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 152);
  v3[20] = a1;
  v3[21] = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_100118D38;
  else
    v5 = sub_100118B00;
  return swift_task_switch(v5, v3[17], 0);
}

uint64_t sub_100118B00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 168);
  sub_100158FC4(*(void **)(v0 + 160), *(__CFString **)(v0 + 80), *(__CFString **)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 128));

  if (v1)
  {
    v2 = v0 + 40;
    v3 = v0 + 186;
    swift_errorRetain(v1);
    v4 = swift_errorRetain(v1);
    v5 = Logger.logObject.getter(v4);
    v7 = static os_log_type_t.error.getter(v5, v6);
    if (os_log_type_enabled(v5, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      v9 = swift_slowAlloc(32, -1);
      v17 = v9;
      *(_DWORD *)v8 = 136315138;
      swift_getErrorValue(v1, v0 + 64, v0 + 16);
      v10 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
      v12 = v11;
      *(_QWORD *)(v0 + 72) = sub_1001C56EC(v10, v11, &v17);
      v3 = v0 + 186;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v8 + 4, v8 + 12);
      swift_bridgeObjectRelease(v12);
      swift_errorRelease(v1);
      swift_errorRelease(v1);
      _os_log_impl((void *)&_mh_execute_header, v5, v7, "Unable to store recovery record : %s", v8, 0xCu);
      swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1, -1);
      v13 = v8;
      v2 = v0 + 40;
      swift_slowDealloc(v13, -1, -1);

    }
    else
    {

      swift_errorRelease(v1);
      swift_errorRelease(v1);
    }
    v14 = *(_QWORD *)(v0 + 176);
    *(_QWORD *)(v0 + 40) = v1;
    swift_errorRetain(v1);
    if (swift_dynamicCast(v3, v2, v14, &type metadata for KeySyncEvent, 6))
      v15 = *(_BYTE *)(v0 + 186);
    else
      v15 = 28;
    sub_10011A034(v15, 0);
    swift_errorRelease(v1);
  }
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100118D38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 168);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v5 = static os_log_type_t.error.getter(v3, v4);
  if (os_log_type_enabled(v3, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v14 = v7;
    *(_DWORD *)v6 = 136315138;
    swift_getErrorValue(v1, v0 + 64, v0 + 16);
    v8 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
    v10 = v9;
    *(_QWORD *)(v0 + 72) = sub_1001C56EC(v8, v9, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v10);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v5, "Unable to store recovery record : %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }
  v11 = *(_QWORD *)(v0 + 176);
  *(_QWORD *)(v0 + 40) = v1;
  swift_errorRetain(v1);
  if (swift_dynamicCast(v0 + 186, v0 + 40, v11, &type metadata for KeySyncEvent, 6))
    v12 = *(_BYTE *)(v0 + 186);
  else
    v12 = 28;
  sub_10011A034(v12, 0);
  swift_errorRelease(v1);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_100118F40(void *a1)
{
  uint64_t v1;
  id result;
  unint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  _QWORD v22[3];
  _BYTE v23[8];
  uint64_t v24;

  result = sub_1001315A4(a1);
  if (v1)
  {
    swift_errorRetain(v1);
    v5 = swift_errorRetain(v1);
    v6 = Logger.logObject.getter(v5);
    v8 = static os_log_type_t.error.getter(v6, v7);
    if (os_log_type_enabled(v6, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      v10 = swift_slowAlloc(32, -1);
      v24 = v10;
      *(_DWORD *)v9 = 136315138;
      swift_getErrorValue(v1, v23, v22);
      v11 = Error.localizedDescription.getter(v22[1], v22[2]);
      v13 = v12;
      v21 = sub_1001C56EC(v11, v12, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, v22, v9 + 4, v9 + 12);
      swift_bridgeObjectRelease(v13);
      swift_errorRelease(v1);
      swift_errorRelease(v1);
      _os_log_impl((void *)&_mh_execute_header, v6, v8, "Failed to query device identity hash %s", v9, 0xCu);
      swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);

    }
    else
    {

      swift_errorRelease(v1);
      swift_errorRelease(v1);
    }
    v14 = sub_10012443C();
    v15 = swift_allocError(&type metadata for KeySyncEvent, v14, 0, 0);
    *v16 = 31;
    swift_willThrow(v15);
    return (id)swift_errorRelease(v1);
  }
  else if (v4 >> 60 == 15)
  {
    sub_1001317F8(a1);
    result = sub_1001315A4(a1);
    if (v17 >> 60 == 15)
    {
      v18 = sub_10012443C();
      v19 = swift_allocError(&type metadata for KeySyncEvent, v18, 0, 0);
      *v20 = 27;
      return (id)swift_willThrow(v19);
    }
  }
  return result;
}

uint64_t sub_100119480@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  Class v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  const char *v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  result = (uint64_t)sub_1001315A4(a1);
  if (!v2)
  {
    v7 = v6;
    if (v6 >> 60 == 15)
    {
      v8 = sub_10012443C();
      v9 = swift_allocError(&type metadata for KeySyncEvent, v8, 0, 0);
      *v10 = 27;
      return swift_willThrow(v9);
    }
    else
    {
      v11 = result;
      v12 = sub_100131F48(a1);
      v14 = v13;
      v16 = v15;
      v18 = v17;
      v31 = (uint64_t)v12;
      sub_100063C8C((uint64_t)v12, v13);
      sub_100063C8C(v16, v18);
      v20 = sub_10005066C(a1, v19);
      v21 = objc_msgSend(v20, "casdCertificate");

      v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v21);
      v29 = v23;
      v30 = v22;

      v24 = type metadata accessor for SESPeerIdentityData(0);
      v25 = (char *)a2 + *(int *)(v24 + 32);
      static Date.now.getter();
      v26 = type metadata accessor for Date(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v25, 0, 1, v26);
      v27 = (uint64_t *)((char *)a2 + *(int *)(v24 + 36));
      sub_10014BDF4(v27);
      v28 = type metadata accessor for CreationMetadata(0);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v27, 0, 1, v28);
      sub_100063CD0(v16, v18);
      result = sub_100063CD0(v31, v14);
      *a2 = v11;
      a2[1] = v7;
      a2[2] = v31;
      a2[3] = v14;
      a2[4] = v16;
      a2[5] = v18;
      a2[6] = v30;
      a2[7] = v29;
    }
  }
  return result;
}

uint64_t sub_1001197D8(_QWORD *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char v54;
  char v55;
  os_log_type_t type;
  NSObject *log;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __n128 v64;
  __n128 v65;
  uint64_t v66;
  _OWORD v67[6];
  uint64_t v68;
  __n128 v69;
  __n128 v70;
  uint64_t v71;
  _OWORD v72[5];
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _BYTE v80[24];
  _OWORD v81[6];
  _BYTE v82[24];
  __int128 v83;
  uint64_t v84;
  __n128 v85;
  uint64_t v86;
  __n128 v87[2];

  v11 = a1[2];
  v10 = a1[3];
  sub_1001AC0C0((uint64_t)&v64);
  *(_QWORD *)&v72[0] = v11;
  *((_QWORD *)&v72[0] + 1) = v10;
  sub_100063C8C(v11, v10);
  sub_100063C8C(v11, v10);
  v12 = sub_100136C5C((uint64_t *)v72, &v64);
  v60 = a5;
  sub_100063CD0(*(uint64_t *)&v72[0], *((unint64_t *)&v72[0] + 1));
  sub_100124140(&v65, v87);
  sub_10012417C((uint64_t)v87);
  v86 = v66;
  sub_1001241D0(&v86);
  sub_1001ACEB0(v12, (uint64_t)v67);
  sub_100063CD0(v11, v10);
  v14 = a1[4];
  v13 = a1[5];
  sub_1001AC0C0((uint64_t)&v69);
  *(_QWORD *)&v72[0] = v14;
  *((_QWORD *)&v72[0] + 1) = v13;
  sub_100063C8C(v14, v13);
  sub_100063C8C(v14, v13);
  v15 = sub_100136C5C((uint64_t *)v72, &v69);
  sub_100063CD0(*(uint64_t *)&v72[0], *((unint64_t *)&v72[0] + 1));
  sub_100124140(&v70, &v85);
  sub_10012417C((uint64_t)&v85);
  v84 = v71;
  sub_1001241D0(&v84);
  sub_1001ACEB0(v15, (uint64_t)v72);
  sub_100063CD0(v14, v13);
  v81[5] = v67[4];
  *(_OWORD *)v82 = v67[5];
  *(_QWORD *)&v82[16] = v68;
  v81[3] = v67[2];
  v81[4] = v67[3];
  v81[2] = v67[1];
  v83 = *(_OWORD *)&v82[8];
  v62 = *(_OWORD *)&v82[8];
  v75 = v72[0];
  v76 = v72[1];
  v79 = v72[4];
  *(_OWORD *)v80 = v73;
  *(_QWORD *)&v80[16] = v74;
  v77 = v72[2];
  v78 = v72[3];
  v81[0] = *(_OWORD *)&v80[8];
  v81[1] = v67[0];
  v18 = v74;
  v17 = *((_QWORD *)&v73 + 1);
  sub_1001249BC((uint64_t)&v83);
  sub_1001249BC((uint64_t)&v83);
  sub_1001249BC((uint64_t)v81);
  sub_1000FB17C(v17, v18);
  sub_1001249E8((uint64_t)v81);
  sub_1001249E8((uint64_t)&v83);
  v63 = v62;
  sub_100063C8C(v62, *((unint64_t *)&v62 + 1));
  v19 = a3;
  v20 = a2;
  sub_100063C8C(a2, v19);
  sub_1000FB17C(a2, v19);
  sub_100063CD0(a2, v19);
  sub_100063CD0(v62, *((unint64_t *)&v62 + 1));
  sub_1001EDD38(v62, *((uint64_t *)&v62 + 1));
  v22 = v21;
  v24 = v23;
  sub_100063CD0(v62, *((unint64_t *)&v62 + 1));
  sub_100063C8C(a2, v19);
  v25 = a4;
  sub_100063C8C(a4, v60);
  sub_100063C8C(v22, v24);
  sub_100063C8C(a2, v19);
  sub_100063C8C(a4, v60);
  v26 = sub_100063C8C(v22, v24);
  v27 = Logger.logObject.getter(v26);
  v31 = static os_log_type_t.info.getter(v27, v28, v29, v30);
  if (os_log_type_enabled(v27, v31))
  {
    v32 = swift_slowAlloc(32, -1);
    v58 = swift_slowAlloc(96, -1);
    *(_QWORD *)&v63 = v58;
    *(_DWORD *)v32 = 136315650;
    sub_1001BD2CC(a2, v19);
    v34 = v33;
    log = v27;
    v61 = v25;
    v35 = sub_100063D3C((uint64_t *)&unk_100346060);
    v36 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
    type = v31;
    v37 = v19;
    v38 = v35;
    v39 = v35;
    v40 = v36;
    v41 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v38, v36);
    v59 = v22;
    v43 = v42;
    swift_bridgeObjectRelease(v34);
    *(_QWORD *)&v62 = sub_1001C56EC(v41, v43, (uint64_t *)&v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, (char *)&v62 + 8, v32 + 4, v32 + 12);
    swift_bridgeObjectRelease(v43);
    sub_100063CD0(v20, v37);
    sub_100063CD0(v20, v37);
    *(_WORD *)(v32 + 12) = 2080;
    sub_1001BD2CC(v61, v60);
    v45 = v44;
    *(_QWORD *)&v62 = v44;
    v46 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v39, v40);
    v48 = v47;
    swift_bridgeObjectRelease(v45);
    *(_QWORD *)&v62 = sub_1001C56EC(v46, v48, (uint64_t *)&v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, (char *)&v62 + 8, v32 + 14, v32 + 22);
    swift_bridgeObjectRelease(v48);
    sub_100063CD0(v61, v60);
    sub_100063CD0(v61, v60);
    *(_WORD *)(v32 + 22) = 2080;
    v22 = v59;
    sub_1001BD2CC(v59, v24);
    v50 = v49;
    *(_QWORD *)&v62 = v49;
    v51 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v39, v40);
    v53 = v52;
    swift_bridgeObjectRelease(v50);
    *(_QWORD *)&v62 = sub_1001C56EC(v51, v53, (uint64_t *)&v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, (char *)&v62 + 8, v32 + 24, v32 + 32);
    swift_bridgeObjectRelease(v53);
    sub_100063CD0(v59, v24);
    sub_100063CD0(v59, v24);
    _os_log_impl((void *)&_mh_execute_header, log, type, "For DSID %s expected %s got %s", (uint8_t *)v32, 0x20u);
    swift_arrayDestroy(v58, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v58, -1, -1);
    swift_slowDealloc(v32, -1, -1);

  }
  else
  {

    sub_100063CD0(a2, v19);
    sub_100063CD0(a2, v19);
    sub_100063CD0(v25, v60);
    sub_100063CD0(v25, v60);
    sub_100063CD0(v22, v24);
    sub_100063CD0(v22, v24);
  }
  sub_10007C23C(v22, v24);
  v55 = v54;
  sub_100063CD0(v22, v24);
  sub_100124A14(v72);
  sub_100124A14(v67);
  return v55 & 1;
}

void sub_10011A034(unsigned __int8 a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t inited;
  uint64_t v9;
  unint64_t v10;
  Class isa;
  void *v12;
  NSString v13;
  unsigned __int8 v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  os_log_type_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSString v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  _BYTE v41[24];
  _BYTE v42[24];
  _BYTE v43[104];
  __int128 v44;
  _OWORD v45[2];
  __int128 v46;
  _OWORD v47[2];
  __int128 v48;
  _OWORD v49[2];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;

  v3 = v2;
  v6 = objc_opt_self(SESDAnalyticsLogger);
  v7 = sub_100063D3C(&qword_1003460E0);
  inited = swift_initStackObject(v7, v43);
  *(_OWORD *)(inited + 16) = xmmword_1002888E0;
  *(_QWORD *)&v48 = sub_1001BBA58(a1);
  *((_QWORD *)&v48 + 1) = v9;
  AnyHashable.init<A>(_:)(&v48, &type metadata for String, &protocol witness table for String);
  *(_QWORD *)(inited + 96) = &type metadata for Int;
  *(_QWORD *)(inited + 72) = 1;
  v10 = sub_10017C368(inited);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v10);
  sub_10004A310(v6, isa);

  if ((a2 & 1) == 0)
  {
    v12 = (void *)objc_opt_self(SESAlarm);
    v13 = String._bridgeToObjectiveC()();
    v14 = objc_msgSend(v12, "isAlarmSet:", v13);

    if ((v14 & 1) == 0 && (*(_BYTE *)(v3 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_stopped) & 1) == 0)
    {
      v15 = (__int128 *)(v3 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__errorCount);
      swift_beginAccess(v3 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__errorCount, v42, 0, 0);
      v16 = *(__int128 *)((char *)v15 + 25);
      v17 = v15[1];
      v48 = *v15;
      v49[0] = v17;
      *(_OWORD *)((char *)v49 + 9) = v16;
      v50 = v48;
      v51 = v49[0];
      sub_10006F87C((uint64_t)&v50);
      v18 = sub_10006F87C((uint64_t)&v51);
      sub_100153718(v18);
      v20 = v19;
      sub_10006F8A4((uint64_t)&v50);
      sub_10006F8A4((uint64_t)&v51);
      v21 = 6;
      if (v20 < 6)
        v21 = v20;
      v22 = *((double *)&off_1003057E0 + (v21 & ~(v21 >> 63)) + 4);
      v23 = swift_retain(v3);
      v24 = Logger.logObject.getter(v23);
      v28 = static os_log_type_t.info.getter(v24, v25, v26, v27);
      if (os_log_type_enabled(v24, v28))
      {
        v29 = swift_slowAlloc(22, -1);
        *(_DWORD *)v29 = 134218240;
        v30 = *(__int128 *)((char *)v15 + 25);
        v31 = v15[1];
        v46 = *v15;
        v47[0] = v31;
        *(_OWORD *)((char *)v47 + 9) = v30;
        v52 = v46;
        v53 = v47[0];
        sub_10006F87C((uint64_t)&v52);
        v32 = sub_10006F87C((uint64_t)&v53);
        sub_100153718(v32);
        v34 = v33;
        sub_10006F8A4((uint64_t)&v52);
        sub_10006F8A4((uint64_t)&v53);
        *(_QWORD *)&v44 = v34;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, (char *)&v44 + 8, v29 + 4, v29 + 12);
        swift_release(v3);
        *(_WORD *)(v29 + 12) = 2048;
        *(double *)&v44 = v22;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, (char *)&v44 + 8, v29 + 14, v29 + 22);
        _os_log_impl((void *)&_mh_execute_header, v24, v28, "KeySyncManager: Retrying count %ld in %f seconds", (uint8_t *)v29, 0x16u);
        swift_slowDealloc(v29, -1, -1);
      }
      else
      {
        swift_release(v3);
      }

      v35 = String._bridgeToObjectiveC()();
      objc_msgSend(v12, "setAlarm:secondsFromNow:", v35, v22);

      v36 = swift_beginAccess(v15, v41, 33, 0);
      v37 = v15[1];
      v44 = *v15;
      v45[0] = v37;
      *(_OWORD *)((char *)v45 + 9) = *(__int128 *)((char *)v15 + 25);
      sub_100153718(v36);
      v39 = __OFADD__(v38, 1);
      v40 = v38 + 1;
      if (v39)
      {
        __break(1u);
      }
      else
      {
        sub_100120358(v40);
        swift_endAccess(v41);
      }
    }
  }
}

uint64_t sub_10011A3E8(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;
  id v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;

  v4 = *(_QWORD *)(a1 + 32);
  if (a4)
  {
    v6 = sub_100063D3C(&qword_100345378);
    v7 = swift_allocError(v6, &protocol self-conformance witness table for Error, 0, 0);
    *v8 = a4;
    v9 = a4;
    return swift_continuation_throwingResumeWithError(v4, v7);
  }
  else
  {
    if (a2)
    {
      v13 = a2;
      v14 = a3;
      v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a2);
      v17 = v16;

    }
    else
    {
      v18 = a3;
      v15 = 0;
      v17 = 0xF000000000000000;
    }
    v19 = sub_10006C25C(0, &qword_100346C60, SESPeerIdentity_ptr);
    v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a3, v19);

    v21 = *(uint64_t **)(*(_QWORD *)(v4 + 64) + 40);
    *v21 = v15;
    v21[1] = v17;
    v21[2] = v20;
    return swift_continuation_throwingResume(v4);
  }
}

uint64_t sub_10011A4E0(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  id v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (!a2)
    return swift_continuation_throwingResume(*(_QWORD *)(a1 + 32));
  v4 = sub_100063D3C(&qword_100345378);
  v5 = swift_allocError(v4, &protocol self-conformance witness table for Error, 0, 0);
  *v6 = a2;
  v7 = a2;
  return swift_continuation_throwingResumeWithError(v2, v5);
}

uint64_t sub_10011A554(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  v3[14] = a2;
  v3[15] = v2;
  v3[13] = a1;
  v4 = type metadata accessor for SESTLKRecordData(0);
  v3[16] = v4;
  v3[17] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (_QWORD *)swift_task_alloc(dword_100346B64);
  v3[18] = v5;
  *v5 = v3;
  v5[1] = sub_10011A5DC;
  v5[20] = v2;
  return swift_task_switch(sub_1001095A0, v2, 0);
}

uint64_t sub_10011A5DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*v2 + 144);
  v4 = *v2;
  *(_QWORD *)(v4 + 152) = a1;
  *(_QWORD *)(v4 + 160) = v1;
  swift_task_dealloc(v3);
  if (!v1)
    return swift_task_switch(sub_10011A658, *(_QWORD *)(v4 + 120), 0);
  swift_task_dealloc(*(_QWORD *)(v4 + 136));
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_10011A658()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  __CFString **v22;
  uint64_t v23;
  __CFString *v24;
  __CFString *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  void *v33;
  unint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  void *v37;
  Class v38;
  id v39;
  id v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  void *v44;
  unint64_t v45;
  id v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  __CFString *v53;
  unint64_t v54;
  uint64_t *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  Class v71;
  Class isa;
  NSString v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77[2];
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;

  v2 = v0 + 104;
  v1 = *(_QWORD *)(v0 + 104);
  v3 = v0 + 72;
  v4 = *(_QWORD *)(v2 + 56);
  sub_100132818(*(void **)(v2 + 48), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32), (uint64_t)v77);
  v5 = v4;
  if (v4)
  {
    swift_errorRetain(v4);
    v6 = swift_errorRetain(v4);
    v7 = Logger.logObject.getter(v6);
    v9 = static os_log_type_t.error.getter(v7, v8);
    if (os_log_type_enabled(v7, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = swift_slowAlloc(32, -1);
      v77[0] = v11;
      *(_DWORD *)v10 = 136315138;
      swift_getErrorValue(v5, v2 - 24, v2 - 64);
      v12 = Error.localizedDescription.getter(*(_QWORD *)(v76 + 48), *(_QWORD *)(v76 + 56));
      v14 = v13;
      *(_QWORD *)(v76 + 64) = sub_1001C56EC(v12, v13, v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 40, v3, v10 + 4, v10 + 12);
      swift_bridgeObjectRelease(v14);
      swift_errorRelease(v5);
      swift_errorRelease(v5);
      _os_log_impl((void *)&_mh_execute_header, v7, v9, "Failed to createTLK on SE %s", v10, 0xCu);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);

    }
    else
    {

      swift_errorRelease(v5);
      swift_errorRelease(v5);
    }
    v33 = *(void **)(v76 + 152);
    v34 = sub_10012443C();
    v35 = swift_allocError(&type metadata for KeySyncEvent, v34, 0, 0);
    *v36 = 10;
    swift_willThrow(v35);

    swift_errorRelease(v5);
    swift_task_dealloc(*(_QWORD *)(v76 + 136));
    return (*(uint64_t (**)(void))(v76 + 8))();
  }
  else
  {
    v15 = v78;
    v59 = v77[0];
    v60 = v77[1];
    v16 = v79;
    v61 = v80;
    v62 = v81;
    v63 = v82;
    v64 = v83;
    v65 = v84;
    v66 = v85;
    v67 = v86;
    v68 = v87;
    v17 = v90;
    v69 = v88;
    v70 = v89;
    v18 = v91;
    v19 = *(_QWORD *)(v76 + 128);
    v20 = *(uint64_t **)(v76 + 136);
    v21 = (uint64_t *)((char *)v20 + *(int *)(v19 + 20));
    v22 = *(__CFString ***)(v76 + 104);
    sub_100063C8C(v78, v79);
    sub_100063C8C(v15, v16);
    sub_100063C8C(v17, v18);
    sub_10014BDF4(v21);
    v23 = type metadata accessor for CreationMetadata(0);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v21, 0, 1, v23);
    v58 = v17;
    *v20 = v17;
    v20[1] = v18;
    v24 = *v22;
    v25 = v22[1];
    v73 = String._bridgeToObjectiveC()();
    isa = Data._bridgeToObjectiveC()().super.isa;
    v74 = v15;
    v26 = v16;
    v71 = Data._bridgeToObjectiveC()().super.isa;
    v27 = type metadata accessor for PropertyListEncoder(0);
    swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
    v28 = PropertyListEncoder.init()();
    v29 = sub_1000639EC(&qword_100346C50, type metadata accessor for SESTLKRecordData, (uint64_t)&unk_10028ADC4);
    v30 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v20, v19, v29);
    v32 = v31;
    swift_release(v28);
    v53 = v25;
    v54 = v18;
    v56 = *(void **)(v76 + 152);
    v57 = *(_QWORD *)(v76 + 112);
    v55 = *(uint64_t **)(v76 + 104);
    v37 = (void *)objc_opt_self(SESTLKRecord);
    v38 = Data._bridgeToObjectiveC()().super.isa;
    sub_100063CD0(v30, v32);
    v39 = objc_msgSend(v37, "withView:tlkUUID:parentTLKUUID:recordData:", v73, isa, v71, v38);

    sub_100063CD0(v74, v26);
    sub_100063CD0(v74, v26);
    v40 = objc_msgSend(v39, "tlkUUID");
    v41 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v40);
    v43 = v42;

    v75 = sub_10011B144(v56, v55, v41, v43, v57, v57);
    v44 = *(void **)(v76 + 152);
    v45 = *(_QWORD *)(v76 + 112);
    sub_100063CD0(v41, v43);
    v46 = objc_msgSend(v39, "tlkUUID");
    v47 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v46);
    v49 = v48;

    sub_100158FC4(v44, v24, v53, v47, v49, v45);
    v50 = *(void **)(v76 + 152);
    v51 = *(_QWORD *)(v76 + 136);
    sub_1001247E8(v51, type metadata accessor for SESTLKRecordData);
    sub_100063CD0(v58, v54);
    sub_100063CD0(v59, v60);
    sub_100063CD0(v74, v26);
    sub_100063CD0(v61, v62);
    sub_100063CD0(v63, v64);
    sub_10006B9B4(v65, v66);
    sub_10006B9B4(v67, v68);
    sub_10006B9B4(v69, v70);
    sub_100063CD0(v47, v49);

    swift_task_dealloc(v51);
    return (*(uint64_t (**)(id, uint64_t *))(v76 + 8))(v39, v75);
  }
}

uint64_t *sub_10011B144(void *a1, uint64_t *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  id v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  os_log_type_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  unint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  _BYTE v56[4];
  int v57;
  uint64_t *v58;
  _BYTE *v59;
  uint64_t v60;
  _QWORD v61[3];
  char v62[8];
  uint64_t v63;
  char v64[8];
  uint64_t *v65;

  v58 = a2;
  v12 = type metadata accessor for SESPeerIdentityData(0);
  __chkstk_darwin(v12, v13);
  v59 = &v56[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = (int *)type metadata accessor for SESTLKShareData(0);
  __chkstk_darwin(v15, v16);
  v18 = &v56[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = sub_100133738(a1, a3, a4, a6);
  v60 = v6;
  if (v6)
  {
    sub_100124B74(a6, (uint64_t)v59, type metadata accessor for SESPeerIdentityData);
    sub_100063C8C(a3, a4);
    v21 = v60;
    swift_errorRetain(v60);
    sub_100063C8C(a3, a4);
    v22 = swift_errorRetain(v21);
    v23 = Logger.logObject.getter(v22);
    v25 = static os_log_type_t.error.getter(v23, v24);
    v26 = (uint64_t *)v25;
    if (os_log_type_enabled(v23, v25))
    {
      v27 = swift_slowAlloc(32, -1);
      v58 = (uint64_t *)swift_slowAlloc(96, -1);
      v65 = v58;
      *(_DWORD *)v27 = 136315650;
      v57 = (int)v26;
      sub_1001BD2CC(a3, a4);
      v29 = v28;
      v63 = v28;
      v30 = sub_100063D3C((uint64_t *)&unk_100346060);
      v31 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
      v32 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v30, v31);
      v34 = v33;
      v35 = v29;
      v21 = v60;
      swift_bridgeObjectRelease(v35);
      v63 = sub_1001C56EC(v32, v34, (uint64_t *)&v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, v64, v27 + 4, v27 + 12);
      swift_bridgeObjectRelease(v34);
      sub_100063CD0(a3, a4);
      sub_100063CD0(a3, a4);
      *(_WORD *)(v27 + 12) = 2080;
      v36 = v59;
      v37 = sub_1001BE4B4();
      v39 = v38;
      v63 = sub_1001C56EC(v37, v38, (uint64_t *)&v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, v64, v27 + 14, v27 + 22);
      swift_bridgeObjectRelease(v39);
      sub_1001247E8((uint64_t)v36, type metadata accessor for SESPeerIdentityData);
      *(_WORD *)(v27 + 22) = 2080;
      swift_getErrorValue(v21, v62, v61);
      v40 = Error.localizedDescription.getter(v61[1], v61[2]);
      v42 = v41;
      v63 = sub_1001C56EC(v40, v41, (uint64_t *)&v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, v64, v27 + 24, v27 + 32);
      swift_bridgeObjectRelease(v42);
      swift_errorRelease(v21);
      swift_errorRelease(v21);
      _os_log_impl((void *)&_mh_execute_header, v23, (os_log_type_t)v57, "Failed to export TLK %s to peer %s : %s", (uint8_t *)v27, 0x20u);
      v26 = v58;
      swift_arrayDestroy(v58, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v27, -1, -1);

    }
    else
    {

      sub_100063CD0(a3, a4);
      sub_100063CD0(a3, a4);
      sub_1001247E8((uint64_t)v59, type metadata accessor for SESPeerIdentityData);
      swift_errorRelease(v21);
      swift_errorRelease(v21);
    }
    v52 = sub_10012443C();
    v53 = swift_allocError(&type metadata for KeySyncEvent, v52, 0, 0);
    *v54 = 14;
    swift_willThrow(v53);
    swift_errorRelease(v21);
  }
  else
  {
    v43 = (uint64_t)v19;
    v44 = v20;
    sub_100124B74(a5, (uint64_t)v18, type metadata accessor for SESPeerIdentityData);
    sub_100124B74(a6, (uint64_t)&v18[v15[5]], type metadata accessor for SESPeerIdentityData);
    v26 = (uint64_t *)&v18[v15[7]];
    sub_100063C8C(v43, v44);
    sub_10014BDF4(v26);
    v45 = type metadata accessor for CreationMetadata(0);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v26, 0, 1, v45);
    v46 = (uint64_t *)&v18[v15[6]];
    *v46 = v43;
    v46[1] = v44;
    v47 = v60;
    v48 = sub_10014DF64(*v58, v58[1], a3, a4, (uint64_t)v18);
    if (v47)
    {
      v49 = sub_10012443C();
      v50 = swift_allocError(&type metadata for KeySyncEvent, v49, 0, 0);
      *v51 = 5;
      swift_willThrow(v50);
      sub_100063CD0(v43, v44);
      swift_errorRelease(v47);
      sub_1001247E8((uint64_t)v18, type metadata accessor for SESTLKShareData);
    }
    else
    {
      v26 = (uint64_t *)v48;
      sub_1001247E8((uint64_t)v18, type metadata accessor for SESTLKShareData);
      sub_100063CD0(v43, v44);
    }
  }
  return v26;
}

uint64_t sub_10011B658(void **a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;
  char v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v25;

  v6 = type metadata accessor for SESPeerIdentityData(0);
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a1;
  v11 = objc_msgSend(v10, "view");
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v14 = v13;

  v15 = a2[1];
  if (v12 == *a2 && v14 == v15)
  {
    swift_bridgeObjectRelease(v14);
    sub_100124B74(a3, (uint64_t)v9, type metadata accessor for SESPeerIdentityData);
  }
  else
  {
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, *a2, v15, 0);
    swift_bridgeObjectRelease(v14);
    sub_100124B74(a3, (uint64_t)v9, type metadata accessor for SESPeerIdentityData);
    v18 = 0;
    if ((v17 & 1) == 0)
      goto LABEL_9;
  }
  v19 = objc_msgSend(v10, "targetPeerIdentifier");
  v20 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v22 = v21;

  sub_10007C23C(v20, v22);
  v18 = v23;
  sub_100063CD0(v20, v22);
LABEL_9:
  sub_1001247E8((uint64_t)v9, type metadata accessor for SESPeerIdentityData);
  return v18 & 1;
}

uint64_t sub_10011B7CC(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  char v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  uint64_t v33;

  v6 = type metadata accessor for SESPeerIdentityData(0);
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a1;
  v11 = objc_msgSend(v10, "tlkUUID");
  v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v14 = v13;

  sub_10007C23C(v12, v14);
  v16 = v15;
  sub_100063CD0(v12, v14);
  if ((v16 & 1) == 0)
  {
    sub_100124B74(a4, (uint64_t)v9, type metadata accessor for SESPeerIdentityData);
    goto LABEL_5;
  }
  v17 = objc_msgSend(v10, "sourcePeerIdentifier");
  v18 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v20 = v19;

  v21 = objc_msgSend(v10, "targetPeerIdentifier");
  v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v21);
  v24 = v23;

  sub_10007C23C(v18, v20);
  LOBYTE(v21) = v25;
  sub_100063CD0(v22, v24);
  sub_100063CD0(v18, v20);
  sub_100124B74(a4, (uint64_t)v9, type metadata accessor for SESPeerIdentityData);
  if ((v21 & 1) != 0)
  {
LABEL_5:
    v31 = 0;
    goto LABEL_6;
  }
  v26 = objc_msgSend(v10, "targetPeerIdentifier");
  v27 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v26);
  v29 = v28;

  sub_10007C23C(v27, v29);
  v31 = v30;
  sub_100063CD0(v27, v29);
LABEL_6:
  sub_1001247E8((uint64_t)v9, type metadata accessor for SESPeerIdentityData);
  return v31 & 1;
}

uint64_t sub_10011B9C8(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  char v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  uint64_t v33;

  v6 = type metadata accessor for SESPeerIdentityData(0);
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a1;
  v11 = objc_msgSend(v10, "tlkUUID");
  v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v14 = v13;

  sub_10007C23C(v12, v14);
  v16 = v15;
  sub_100063CD0(v12, v14);
  if ((v16 & 1) == 0)
  {
    sub_100124B74(a4, (uint64_t)v9, type metadata accessor for SESPeerIdentityData);
    goto LABEL_5;
  }
  v17 = objc_msgSend(v10, "sourcePeerIdentifier");
  v18 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v20 = v19;

  v21 = objc_msgSend(v10, "targetPeerIdentifier");
  v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v21);
  v24 = v23;

  sub_10007C23C(v18, v20);
  LOBYTE(v21) = v25;
  sub_100063CD0(v22, v24);
  sub_100063CD0(v18, v20);
  sub_100124B74(a4, (uint64_t)v9, type metadata accessor for SESPeerIdentityData);
  if ((v21 & 1) == 0)
  {
LABEL_5:
    v31 = 0;
    goto LABEL_6;
  }
  v26 = objc_msgSend(v10, "targetPeerIdentifier");
  v27 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v26);
  v29 = v28;

  sub_10007C23C(v27, v29);
  v31 = v30;
  sub_100063CD0(v27, v29);
LABEL_6:
  sub_1001247E8((uint64_t)v9, type metadata accessor for SESPeerIdentityData);
  return v31 & 1;
}

uint64_t sub_10011BBC4@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t inited;
  unint64_t v8;
  uint64_t result;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE v14[608];
  _OWORD v15[4];
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  _QWORD *v20;

  v5 = *(_QWORD *)(v1 + 48);
  v4 = *(_QWORD *)(v1 + 56);
  v6 = sub_100063D3C(&qword_100348A70);
  inited = swift_initStackObject(v6, v14);
  *(_OWORD *)(inited + 16) = xmmword_100288AD0;
  strcpy((char *)(inited + 32), "serialNumber");
  *(_BYTE *)(inited + 45) = 0;
  *(_WORD *)(inited + 46) = -5120;
  *(_QWORD *)(inited + 48) = 147;
  *(_WORD *)(inited + 56) = 0;
  *(_OWORD *)(inited + 64) = 0u;
  *(_BYTE *)(inited + 80) = -64;
  *(_QWORD *)(inited + 88) = _swiftEmptyArrayStorage;
  strcpy((char *)(inited + 96), "caIdentifier");
  *(_BYTE *)(inited + 109) = 0;
  *(_WORD *)(inited + 110) = -5120;
  *(_QWORD *)(inited + 112) = 66;
  *(_WORD *)(inited + 120) = 0;
  *(_OWORD *)(inited + 128) = 0u;
  *(_BYTE *)(inited + 144) = -64;
  *(_QWORD *)(inited + 152) = _swiftEmptyArrayStorage;
  *(_QWORD *)(inited + 160) = 0xD000000000000011;
  *(_QWORD *)(inited + 168) = 0x80000001002BCAC0;
  *(_QWORD *)(inited + 176) = 24352;
  *(_WORD *)(inited + 184) = 0;
  *(_OWORD *)(inited + 192) = 0u;
  *(_BYTE *)(inited + 208) = -64;
  *(_QWORD *)(inited + 216) = _swiftEmptyArrayStorage;
  *(_QWORD *)(inited + 224) = 0x656761735579656BLL;
  *(_QWORD *)(inited + 232) = 0xE800000000000000;
  *(_QWORD *)(inited + 240) = 149;
  *(_WORD *)(inited + 248) = 0;
  *(_OWORD *)(inited + 256) = 0u;
  *(_BYTE *)(inited + 272) = -64;
  *(_QWORD *)(inited + 280) = _swiftEmptyArrayStorage;
  strcpy((char *)(inited + 288), "effectiveDate");
  *(_WORD *)(inited + 302) = -4864;
  *(_QWORD *)(inited + 304) = 37;
  *(_WORD *)(inited + 312) = 256;
  *(_OWORD *)(inited + 320) = 0u;
  *(_BYTE *)(inited + 336) = -64;
  *(_QWORD *)(inited + 344) = _swiftEmptyArrayStorage;
  strcpy((char *)(inited + 352), "expirationDate");
  *(_BYTE *)(inited + 367) = -18;
  *(_QWORD *)(inited + 368) = 24356;
  *(_WORD *)(inited + 376) = 256;
  *(_OWORD *)(inited + 384) = 0u;
  *(_BYTE *)(inited + 400) = -64;
  *(_QWORD *)(inited + 408) = _swiftEmptyArrayStorage;
  *(_QWORD *)(inited + 416) = 0x4E4944536163;
  *(_QWORD *)(inited + 424) = 0xE600000000000000;
  *(_QWORD *)(inited + 432) = 69;
  *(_WORD *)(inited + 440) = 0;
  *(_OWORD *)(inited + 448) = 0u;
  *(_BYTE *)(inited + 464) = -64;
  *(_QWORD *)(inited + 472) = _swiftEmptyArrayStorage;
  *(_QWORD *)(inited + 480) = 0xD000000000000011;
  *(_QWORD *)(inited + 488) = 0x80000001002BCAE0;
  *(_QWORD *)(inited + 496) = 83;
  *(_WORD *)(inited + 504) = 0;
  *(_OWORD *)(inited + 512) = 0u;
  *(_BYTE *)(inited + 528) = -64;
  *(_QWORD *)(inited + 536) = _swiftEmptyArrayStorage;
  *(_QWORD *)(inited + 544) = 0x654B63696C627570;
  *(_QWORD *)(inited + 552) = 0xE900000000000079;
  *(_QWORD *)(inited + 560) = 32585;
  *(_WORD *)(inited + 568) = 0;
  *(_OWORD *)(inited + 576) = 0u;
  *(_BYTE *)(inited + 592) = -64;
  *(_QWORD *)(inited + 600) = _swiftEmptyArrayStorage;
  v16.n128_u64[0] = 32545;
  v16.n128_u16[4] = 0;
  v17 = inited;
  v18 = 0;
  v19 = 64;
  v20 = _swiftEmptyArrayStorage;
  v12 = v5;
  v13 = v4;
  sub_100063C8C(v5, v4);
  sub_100063C8C(v5, v4);
  v8 = sub_100136C5C(&v12, &v16);
  sub_100063CD0(v12, v13);
  if (v2)
  {
    sub_100063CD0(v5, v4);
    return swift_bridgeObjectRelease(inited);
  }
  else
  {
    swift_bridgeObjectRelease(inited);
    sub_1001C06EC(v8, v15);
    result = sub_100063CD0(v5, v4);
    v10 = v15[1];
    *a1 = v15[0];
    a1[1] = v10;
    v11 = v15[3];
    a1[2] = v15[2];
    a1[3] = v11;
  }
  return result;
}

BOOL sub_10011BEAC(uint64_t *a1, id a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _QWORD v14[6];

  v8 = *a1;
  v9 = objc_msgSend(a2, "tlkShares");
  v10 = sub_10006C25C(0, &qword_100346BB8, SESTLKShare_ptr);
  v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, v10);

  v14[2] = a3;
  v14[3] = a4;
  v14[4] = v8;
  v14[5] = a5;
  v12 = sub_1000FB04C(sub_10012441C, (uint64_t)v14, v11);
  swift_bridgeObjectRelease(v11);
  return (v12 & 1) == 0;
}

uint64_t sub_10011BF80(void **a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  char v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  id v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v47;
  uint64_t v48;

  v48 = a5;
  v7 = type metadata accessor for SESPeerIdentityData(0);
  v9 = __chkstk_darwin(v7, v8);
  v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  v14 = (char *)&v47 - v13;
  v15 = *a1;
  v16 = objc_msgSend(v15, "tlkUUID");
  v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v16);
  v19 = v18;

  sub_10007C23C(v17, v19);
  v21 = v20;
  sub_100063CD0(v17, v19);
  if ((v21 & 1) == 0)
  {
    sub_100124B74(v48, (uint64_t)v14, type metadata accessor for SESPeerIdentityData);
    goto LABEL_6;
  }
  v22 = objc_msgSend(v15, "targetPeerIdentifier");
  v23 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v22);
  v25 = v24;

  v26 = objc_msgSend(a4, "peerIdentifier");
  v27 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v26);
  v29 = v28;

  sub_10007C23C(v23, v25);
  LOBYTE(v26) = v30;
  sub_100063CD0(v27, v29);
  sub_100063CD0(v23, v25);
  sub_100124B74(v48, (uint64_t)v14, type metadata accessor for SESPeerIdentityData);
  if ((v26 & 1) == 0)
  {
LABEL_6:
    v40 = 0;
    v11 = v14;
    goto LABEL_9;
  }
  v31 = objc_msgSend(v15, "sourcePeerIdentifier");
  v32 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v31);
  v34 = v33;

  v35 = objc_msgSend(v15, "targetPeerIdentifier");
  v36 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v35);
  v38 = v37;

  sub_10007C23C(v32, v34);
  LOBYTE(v35) = v39;
  sub_100063CD0(v36, v38);
  sub_100063CD0(v32, v34);
  sub_100124B74((uint64_t)v14, (uint64_t)v11, type metadata accessor for SESPeerIdentityData);
  if ((v35 & 1) != 0)
  {
    v40 = 1;
  }
  else
  {
    v41 = objc_msgSend(v15, "sourcePeerIdentifier");
    v42 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v41);
    v44 = v43;

    sub_10007C23C(v42, v44);
    v40 = v45;
    sub_100063CD0(v42, v44);
  }
  sub_1001247E8((uint64_t)v14, type metadata accessor for SESPeerIdentityData);
LABEL_9:
  sub_1001247E8((uint64_t)v11, type metadata accessor for SESPeerIdentityData);
  return v40 & 1;
}

uint64_t sub_10011C25C(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  NSObject *v39;
  uint64_t v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  char v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v60;
  NSObject *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  os_log_type_t v65;
  uint8_t *v66;
  uint64_t v67;
  char *v68;
  double v69;
  uint64_t v70;
  NSObject *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  os_log_type_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  void (*v82)(char *, uint64_t);
  void *v83;
  NSString v84;
  unsigned __int8 v85;
  NSString v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98[2];
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _OWORD v103[2];
  __int16 v104;
  _OWORD v105[2];
  __int16 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  _OWORD v110[2];

  v6 = v5;
  v95 = a3;
  v96 = a5;
  v93 = a4;
  v9 = sub_100063D3C(&qword_100346C00);
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v87 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(v13 - 8);
  v16 = __chkstk_darwin(v13, v15);
  v18 = (char *)&v87 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v19);
  v21 = (char *)&v87 - v20;
  v22 = (uint64_t *)(v5 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_recoveryPending);
  swift_beginAccess(v22, &v102, 0, 0);
  v23 = *v22;
  swift_bridgeObjectRetain(v23);
  v94 = a1;
  LOBYTE(a1) = sub_10017EE14(a1, a2, v23);
  swift_bridgeObjectRelease(v23);
  if ((a1 & 1) == 0)
  {
    v89 = v12;
    v90 = v14;
    v32 = v95;
    v33 = v96;
    v88 = v18;
    v91 = v21;
    v92 = v13;
    v34 = v6 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__recoveryForce;
    swift_beginAccess(v6 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__recoveryForce, &v101, 0, 0);
    v35 = *(_OWORD *)(v34 + 16);
    v105[0] = *(_OWORD *)v34;
    v105[1] = v35;
    v106 = *(_WORD *)(v34 + 32);
    v107 = v105[0];
    v108 = v35;
    sub_10006F87C((uint64_t)&v107);
    v36 = sub_10006F87C((uint64_t)&v108);
    sub_10015348C(v36);
    LOBYTE(v34) = v37;
    sub_10006F8A4((uint64_t)&v107);
    sub_10006F8A4((uint64_t)&v108);
    if ((v34 & 1) != 0)
    {
      v38 = swift_bridgeObjectRetain_n(a2, 2);
      v39 = Logger.logObject.getter(v38);
      v41 = static os_log_type_t.error.getter(v39, v40);
      if (os_log_type_enabled(v39, v41))
      {
        v42 = (uint8_t *)swift_slowAlloc(12, -1);
        v43 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v103[0] = v43;
        *(_DWORD *)v42 = 136315138;
        swift_bridgeObjectRetain(a2);
        v99 = sub_1001C56EC(v94, a2, (uint64_t *)v103);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, &v100, v42 + 4, v42 + 12);
        swift_bridgeObjectRelease_n(a2, 3);
        _os_log_impl((void *)&_mh_execute_header, v39, v41, "Forcing recovery for view %s", v42, 0xCu);
        swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v43, -1, -1);
        swift_slowDealloc(v42, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n(a2, 2);
      }

      sub_1000FB490(0, &OBJC_IVAR____TtC10seserviced16SEKeySyncManager__recoveryForce);
    }
    else
    {
      v45 = v6 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__recoveryRequiredPref;
      swift_beginAccess(v6 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__recoveryRequiredPref, &v99, 0, 0);
      v46 = *(_OWORD *)(v45 + 16);
      v103[0] = *(_OWORD *)v45;
      v103[1] = v46;
      v104 = *(_WORD *)(v45 + 32);
      v109 = v103[0];
      v110[0] = v46;
      sub_10006F87C((uint64_t)&v109);
      v47 = sub_10006F87C((uint64_t)v110);
      sub_10015348C(v47);
      LOBYTE(v45) = v48;
      sub_10006F8A4((uint64_t)&v109);
      sub_10006F8A4((uint64_t)v110);
      if ((v45 & 1) == 0)
      {
        v49 = objc_msgSend(v32, "tlkShares");
        v50 = sub_10006C25C(0, &qword_100346BB8, SESTLKShare_ptr);
        v51 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v49, v50);

        v52 = v93;
        swift_bridgeObjectRetain(v93);
        LOBYTE(v49) = sub_10012231C(v51, v52);
        swift_bridgeObjectRelease(v51);
        swift_bridgeObjectRelease(v52);
        if ((v49 & 1) != 0)
        {
          v53 = type metadata accessor for SESPeerIdentityData(0);
          v54 = (uint64_t)v89;
          sub_1000E4E48(v33 + *(int *)(v53 + 32), (uint64_t)v89, &qword_100346C00);
          v55 = v90;
          v56 = v92;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v90 + 48))(v54, 1, v92) == 1)
          {
            v57 = v91;
            static Date.now.getter();
            v58 = sub_100096700(v54, &qword_100346C00);
          }
          else
          {
            v57 = v91;
            v58 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v55 + 32))(v91, v54, v56);
          }
          v68 = v88;
          v69 = fabs(Date.timeIntervalSinceNow.getter(v58));
          v70 = (*(uint64_t (**)(char *, char *, uint64_t))(v55 + 16))(v68, v57, v56);
          v71 = Logger.logObject.getter(v70);
          v75 = static os_log_type_t.info.getter(v71, v72, v73, v74);
          if (os_log_type_enabled(v71, v75))
          {
            v76 = swift_slowAlloc(22, -1);
            v77 = swift_slowAlloc(32, -1);
            v98[0] = v77;
            *(_DWORD *)v76 = 136315394;
            v78 = sub_1000639EC(&qword_100346C30, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
            v79 = dispatch thunk of CustomStringConvertible.description.getter(v56, v78);
            v81 = v80;
            v97 = sub_1001C56EC(v79, v80, v98);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, v98, v76 + 4, v76 + 12);
            swift_bridgeObjectRelease(v81);
            v82 = *(void (**)(char *, uint64_t))(v55 + 8);
            v82(v68, v92);
            *(_WORD *)(v76 + 12) = 2048;
            v97 = *(_QWORD *)&v69;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, v98, v76 + 14, v76 + 22);
            _os_log_impl((void *)&_mh_execute_header, v71, v75, "Identity has existed since %s with delta %f", (uint8_t *)v76, 0x16u);
            swift_arrayDestroy(v77, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v77, -1, -1);
            swift_slowDealloc(v76, -1, -1);

          }
          else
          {

            v82 = *(void (**)(char *, uint64_t))(v55 + 8);
            v82(v68, v56);
          }
          if (v69 <= 86400.0)
          {
            v83 = (void *)objc_opt_self(SESAlarm);
            v84 = String._bridgeToObjectiveC()();
            v85 = objc_msgSend(v83, "isAlarmSet:", v84);

            if ((v85 & 1) == 0)
            {
              v86 = String._bridgeToObjectiveC()();
              objc_msgSend(v83, "setAlarm:secondsFromNow:", v86, 86400.0 - v69 + 300.0);

            }
            v82(v91, v92);
            return 0;
          }
          v82(v91, v92);
        }
        else
        {
          v60 = swift_bridgeObjectRetain_n(a2, 2);
          v61 = Logger.logObject.getter(v60);
          v65 = static os_log_type_t.info.getter(v61, v62, v63, v64);
          if (os_log_type_enabled(v61, v65))
          {
            v66 = (uint8_t *)swift_slowAlloc(12, -1);
            v67 = swift_slowAlloc(32, -1);
            v98[0] = v67;
            *(_DWORD *)v66 = 136315138;
            swift_bridgeObjectRetain(a2);
            v97 = sub_1001C56EC(v94, a2, v98);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, v98, v66 + 4, v66 + 12);
            swift_bridgeObjectRelease_n(a2, 3);
            _os_log_impl((void *)&_mh_execute_header, v61, v65, "Recovery is required because view %s doesn't have any trusted peer with a self share", v66, 0xCu);
            v44 = 1;
            swift_arrayDestroy(v67, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v67, -1, -1);
            swift_slowDealloc(v66, -1, -1);

            return v44;
          }
          swift_bridgeObjectRelease_n(a2, 2);

        }
      }
    }
    return 1;
  }
  v24 = swift_bridgeObjectRetain_n(a2, 2);
  v25 = Logger.logObject.getter(v24);
  v29 = static os_log_type_t.info.getter(v25, v26, v27, v28);
  if (os_log_type_enabled(v25, v29))
  {
    v30 = (uint8_t *)swift_slowAlloc(12, -1);
    v31 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v105[0] = v31;
    *(_DWORD *)v30 = 136315138;
    swift_bridgeObjectRetain(a2);
    *(_QWORD *)&v103[0] = sub_1001C56EC(v94, a2, (uint64_t *)v105);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v103, (char *)v103 + 8, v30 + 4, v30 + 12);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v25, v29, "Recovery for view %s is already in flight ... ", v30, 0xCu);
    swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1, -1);
    swift_slowDealloc(v30, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(a2, 2);
  }

  return 0;
}

BOOL sub_10011CB8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  os_log_type_t v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  NSObject *v39;
  uint64_t v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  NSObject *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  os_log_type_t v55;
  uint64_t v56;
  double v57;
  _BOOL8 v58;
  char v60;
  _QWORD v61[2];
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  uint64_t v69;

  v3 = v2;
  v5 = sub_100063D3C(&qword_100346C00);
  __chkstk_darwin(v5, v6);
  v8 = (char *)v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SESTLKRecordData(0);
  v11 = __chkstk_darwin(v9, v10);
  v13 = (char *)v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  v16 = (char *)v61 - v15;
  sub_10014BBDC((uint64_t)v13);
  sub_100124884((uint64_t)v13, (uint64_t)v16, type metadata accessor for SESTLKRecordData);
  v17 = (uint64_t *)&v16[*(int *)(v9 + 20)];
  v18 = type metadata accessor for CreationMetadata(0);
  v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(v17, 1, v18);
  v65 = 0;
  v20 = 0;
  if (!v19)
  {
    v20 = v17[1];
    v65 = *v17;
    swift_bridgeObjectRetain(v20);
  }
  v21 = v3 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_logger;
  v22 = swift_bridgeObjectRetain_n(v20, 2);
  v23 = Logger.logObject.getter(v22);
  v27 = static os_log_type_t.info.getter(v23, v24, v25, v26);
  if (os_log_type_enabled(v23, v27))
  {
    v28 = swift_slowAlloc(12, -1);
    v64 = v3;
    v29 = (uint8_t *)v28;
    v61[0] = swift_slowAlloc(32, -1);
    v68 = *(double *)v61;
    v62 = v8;
    v63 = v16;
    *(_DWORD *)v29 = 136315138;
    if (v20)
      v30 = v65;
    else
      v30 = 0x3E6C696E3CLL;
    if (v20)
      v31 = v20;
    else
      v31 = 0xE500000000000000;
    v61[1] = v21;
    swift_bridgeObjectRetain(v20);
    v66 = sub_1001C56EC(v30, v31, (uint64_t *)&v68);
    v16 = v63;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67, v29 + 4, v29 + 12);
    swift_bridgeObjectRelease_n(v20, 2);
    v32 = v31;
    v8 = v62;
    swift_bridgeObjectRelease(v32);
    _os_log_impl((void *)&_mh_execute_header, v23, v27, "TLK was created on version %s", v29, 0xCu);
    v33 = v61[0];
    swift_arrayDestroy(v61[0], 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v29, -1, -1);

    if (!v20)
      goto LABEL_23;
  }
  else
  {
    swift_bridgeObjectRelease_n(v20, 2);

    if (!v20)
      goto LABEL_23;
  }
  v34 = sub_10011DC88(v65, v20);
  if (v36)
  {
    v37 = v36;
    if ((uint64_t)v34 >= 22)
    {
      swift_bridgeObjectRelease(v36);
LABEL_16:
      v38 = swift_bridgeObjectRetain(v20);
      v39 = Logger.logObject.getter(v38);
      v41 = static os_log_type_t.error.getter(v39, v40);
      if (os_log_type_enabled(v39, v41))
      {
        v42 = (uint8_t *)swift_slowAlloc(12, -1);
        v43 = swift_slowAlloc(32, -1);
        v68 = *(double *)&v43;
        *(_DWORD *)v42 = 136315138;
        swift_bridgeObjectRetain(v20);
        v66 = sub_1001C56EC(v65, v20, (uint64_t *)&v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67, v42 + 4, v42 + 12);
        swift_bridgeObjectRelease_n(v20, 3);
        _os_log_impl((void *)&_mh_execute_header, v39, v41, "Not forcing recovery of TLK created on newer version %s", v42, 0xCu);
        swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v43, -1, -1);
        swift_slowDealloc(v42, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n(v20, 2);
      }

      sub_10011A034(0x11u, 0);
      sub_1001247E8((uint64_t)v16, type metadata accessor for SESTLKRecordData);
      return 0;
    }
    if (v34 != (unsigned __int8 *)21 || v35 == 66 && v36 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease(v20);
      v20 = v37;
    }
    else
    {
      v60 = _stringCompareWithSmolCheck(_:_:expecting:)(66, 0xE100000000000000, v35, v36, 1);
      swift_bridgeObjectRelease(v37);
      if ((v60 & 1) != 0)
        goto LABEL_16;
    }
  }
  swift_bridgeObjectRelease(v20);
LABEL_23:
  if (qword_100344790 != -1)
    swift_once(&qword_100344790, sub_1001E2B68);
  v44 = sub_1001E4C38();
  v45 = type metadata accessor for SESPeerIdentityData(0);
  sub_1000E4E48(a2 + *(int *)(v45 + 32), (uint64_t)v8, &qword_100346C00);
  v46 = type metadata accessor for Date(0);
  v47 = *(_QWORD *)(v46 - 8);
  v48 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v47 + 48))(v8, 1, v46);
  if ((_DWORD)v48 == 1)
  {
    v49 = sub_100096700((uint64_t)v8, &qword_100346C00);
    v50 = 0.0;
  }
  else
  {
    v50 = Date.timeIntervalSinceNow.getter(v48);
    v49 = (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v8, v46);
  }
  v51 = Logger.logObject.getter(v49);
  v55 = static os_log_type_t.info.getter(v51, v52, v53, v54);
  if (os_log_type_enabled(v51, v55))
  {
    v56 = swift_slowAlloc(18, -1);
    *(_DWORD *)v56 = 67109376;
    LODWORD(v68) = v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, (char *)&v68 + 4, v56 + 4, v56 + 8);
    *(_WORD *)(v56 + 8) = 2048;
    v68 = v50;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v56 + 10, v56 + 18);
    _os_log_impl((void *)&_mh_execute_header, v51, v55, "Recovery blob haveFidoKeys %{BOOL}d identityAge %f", (uint8_t *)v56, 0x12u);
    swift_slowDealloc(v56, -1, -1);
  }

  v57 = 172800.0;
  if (v44)
    v57 = 1209600.0;
  v58 = v57 < fabs(v50);
  sub_1001247E8((uint64_t)v16, type metadata accessor for SESTLKRecordData);
  return v58;
}

uint64_t sub_10011D498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;

  *(_QWORD *)(v8 + 72) = v12;
  *(_OWORD *)(v8 + 56) = v11;
  *(_QWORD *)(v8 + 40) = a7;
  *(_QWORD *)(v8 + 48) = a8;
  *(_QWORD *)(v8 + 24) = a5;
  *(_QWORD *)(v8 + 32) = a6;
  *(_QWORD *)(v8 + 16) = a4;
  v9 = type metadata accessor for SEKeySyncRecovery.RecoveryRecord(0);
  *(_QWORD *)(v8 + 80) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10011D508, 0, 0);
}

id sub_10011D508()
{
  uint64_t v0;
  id result;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t (*v14)(uint64_t, uint64_t, char);

  result = objc_msgSend(*(id *)(v0 + 32), "currentTLK");
  if (result)
  {
    v2 = result;
    v3 = *(_QWORD *)(v0 + 80);
    v5 = *(_QWORD *)(v0 + 56);
    v4 = *(void **)(v0 + 64);
    v6 = *(_QWORD *)(v0 + 48);
    v8 = *(_QWORD *)(v0 + 16);
    v7 = *(_QWORD *)(v0 + 24);
    v9 = objc_msgSend(result, "tlkUUID");

    v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v12 = v11;

    *(_QWORD *)(v0 + 88) = v10;
    *(_QWORD *)(v0 + 96) = v12;
    LOBYTE(v9) = objc_msgSend(v4, "isProd");
    sub_1001567F0(v8, v7, v10, v12, v6, v5, v3);
    v14 = (uint64_t (*)(uint64_t, uint64_t, char))((char *)&dword_100347F00 + dword_100347F00);
    v13 = (_QWORD *)swift_task_alloc(unk_100347F04);
    *(_QWORD *)(v0 + 104) = v13;
    *v13 = v0;
    v13[1] = sub_10011D670;
    return (id)v14(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 40), (char)v9);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10011D670()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10011D72C;
  else
    v3 = sub_10011D6D4;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10011D6D4()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;

  v1 = v0[11];
  v2 = v0[12];
  sub_1001247E8(v0[10], type metadata accessor for SEKeySyncRecovery.RecoveryRecord);
  sub_100063CD0(v1, v2);
  v0[15] = 0;
  return swift_task_switch(sub_10011D780, v0[9], 0);
}

uint64_t sub_10011D72C()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1001247E8(v0[10], type metadata accessor for SEKeySyncRecovery.RecoveryRecord);
  v1 = v0[14];
  sub_100063CD0(v0[11], v0[12]);
  v0[15] = v1;
  return swift_task_switch(sub_10011D780, v0[9], 0);
}

uint64_t sub_10011D780()
{
  uint64_t *v0;

  sub_10011D800(v0[2], v0[3], v0[15]);
  return swift_task_switch(sub_10011D7C4, 0, 0);
}

uint64_t sub_10011D7C4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_errorRelease(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10011D800(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  _QWORD v29[3];
  _BYTE v30[8];
  uint64_t v31[3];

  v7 = sub_100063D3C(&qword_100346898);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v29[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(v3 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_recoveryPending, v31, 33, 0);
  sub_1000D3F9C(a1, a2);
  v12 = v11;
  swift_endAccess(v31);
  swift_bridgeObjectRelease(v12);
  if (a3)
  {
    swift_errorRetain(a3);
    swift_errorRetain(a3);
    v13 = swift_errorRetain(a3);
    v14 = Logger.logObject.getter(v13);
    v16 = static os_log_type_t.error.getter(v14, v15);
    if (os_log_type_enabled(v14, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v18 = swift_slowAlloc(32, -1);
      v31[0] = v18;
      *(_DWORD *)v17 = 136315138;
      swift_getErrorValue(a3, v30, v29);
      v19 = Error.localizedDescription.getter(v29[1], v29[2]);
      v21 = v20;
      v28 = sub_1001C56EC(v19, v20, v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, v29, v17 + 4, v17 + 12);
      swift_bridgeObjectRelease(v21);
      swift_errorRelease(a3);
      swift_errorRelease(a3);
      _os_log_impl((void *)&_mh_execute_header, v14, v16, "Failed to recover : %s", v17, 0xCu);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);

    }
    else
    {

      swift_errorRelease(a3);
      swift_errorRelease(a3);
    }
    v31[0] = a3;
    swift_errorRetain(a3);
    v26 = sub_100063D3C(&qword_100345378);
    if (swift_dynamicCast(&v28, v31, v26, &type metadata for KeySyncEvent, 6))
      v27 = v28;
    else
      v27 = 28;
    sub_10011A034(v27, 0);
    return swift_errorRelease(a3);
  }
  else
  {
    v22 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v10, 1, 1, v22);
    v23 = (_QWORD *)swift_allocObject(&unk_100309690, 48, 7);
    v23[2] = 0;
    v23[3] = 0;
    v23[4] = a1;
    v23[5] = a2;
    swift_bridgeObjectRetain(a2);
    v24 = sub_10011DAF0((uint64_t)v10, (uint64_t)&unk_100346BF8, (uint64_t)v23);
    swift_release(v24);
    return sub_100096700((uint64_t)v10, &qword_100346898);
  }
}

uint64_t sub_10011DAF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD v23[4];

  v6 = sub_100063D3C(&qword_100346898);
  __chkstk_darwin(v6, v7);
  v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000E4E48(a1, (uint64_t)v9, &qword_100346898);
  v10 = type metadata accessor for TaskPriority(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_100096700((uint64_t)v9, &qword_100346898);
    v12 = 4096;
    v13 = *(_QWORD *)(a3 + 16);
    if (v13)
    {
LABEL_3:
      v14 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v13);
      swift_unknownObjectRetain(v13);
      v16 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v14);
      v18 = v17;
      swift_unknownObjectRelease(v13);
      goto LABEL_6;
    }
  }
  else
  {
    v19 = TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
    v12 = v19 | 0x1000;
    v13 = *(_QWORD *)(a3 + 16);
    if (v13)
      goto LABEL_3;
  }
  v16 = 0;
  v18 = 0;
LABEL_6:
  v20 = swift_allocObject(&unk_100309668, 32, 7);
  *(_QWORD *)(v20 + 16) = a2;
  *(_QWORD *)(v20 + 24) = a3;
  if (v18 | v16)
  {
    v23[0] = 0;
    v23[1] = 0;
    v21 = v23;
    v23[2] = v16;
    v23[3] = v18;
  }
  else
  {
    v21 = 0;
  }
  return swift_task_create(v12, v21, &type metadata for () + 1, &unk_100346BE8, v20);
}

unsigned __int8 *sub_10011DC88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  __int16 v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD v35[3];
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;

  v4 = sub_100063D3C(&qword_100346C08);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100063D3C(&qword_100346C10);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100063D3C(&qword_100346C18);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100063D3C(&qword_100346C20);
  Regex.init(_regexString:version:)(0xD000000000000013, 0x80000001002BCB20, 1, v18);
  Regex.firstMatch(in:)(a1, a2, v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v12, v7, v8);
    Regex.Match.output.getter(v35, v8);
    swift_bridgeObjectRelease(v36);
    v22 = v37;
    v21 = v38;
    v23 = v40;
    v34 = v39;
    swift_bridgeObjectRelease(v41);
    if ((v21 ^ v22) >> 14)
    {
      v33 = v23;
      v24 = sub_100121204(v22, v21, v34, v23, 10);
      if ((v25 & 0x100) == 0)
      {
        v19 = (unsigned __int8 *)v24;
        v26 = v25;
        swift_bridgeObjectRelease(v33);
        if ((v26 & 1) != 0)
          goto LABEL_12;
LABEL_10:
        Regex.Match.output.getter(v35, v8);
        swift_bridgeObjectRelease(v36);
        swift_bridgeObjectRelease(v40);
        v31 = v41;
        Substring.uppercased()();
        swift_bridgeObjectRelease(v31);
        (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
        (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
        return v19;
      }
      v27 = v21;
      v28 = v33;
      v19 = sub_1001209DC(v22, v27, v34, v33, 10);
      v30 = v29;
      swift_bridgeObjectRelease(v28);
      if ((v30 & 1) == 0)
        goto LABEL_10;
    }
    else
    {
      swift_bridgeObjectRelease(v23);
    }
LABEL_12:
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
    return 0;
  }
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  sub_100096700((uint64_t)v7, &qword_100346C08);
  return 0;
}

uint64_t sub_10011DF8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch(sub_10011DFA4, 0, 0);
}

uint64_t sub_10011DFA4()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  _QWORD *v5;

  if (qword_1003445D8 != -1)
    swift_once(&qword_1003445D8, sub_1000FB394);
  v2 = v0[2];
  v1 = (void *)v0[3];
  v3 = qword_100354C08;
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease(0xE000000000000000);
  v4._countAndFlagsBits = v2;
  v4._object = v1;
  String.append(_:)(v4);
  v0[4] = 0x80000001002BCB00;
  v5 = (_QWORD *)swift_task_alloc(dword_100346B4C);
  v0[5] = v5;
  *v5 = v0;
  v5[1] = sub_10011E098;
  v5[11] = 0x80000001002BCB00;
  v5[12] = v3;
  v5[10] = 0xD000000000000016;
  return swift_task_switch(sub_1000FD238, v3, 0);
}

uint64_t sub_10011E098()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(*v0 + 32);
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 40));
  swift_bridgeObjectRelease(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_10011E0E8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 56) = v0;
  v2 = (_QWORD *)swift_task_alloc(dword_100346B64);
  *(_QWORD *)(v1 + 64) = v2;
  *v2 = v1;
  v2[1] = sub_10011E148;
  v2[20] = v0;
  return swift_task_switch(sub_1001095A0, v0, 0);
}

uint64_t sub_10011E148(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*v2 + 64);
  v4 = *v2;
  *(_QWORD *)(v4 + 72) = a1;
  *(_QWORD *)(v4 + 80) = v1;
  swift_task_dealloc(v3);
  if (v1)
    return (*(uint64_t (**)(void))(v4 + 8))();
  else
    return swift_task_switch(sub_10011E1BC, *(_QWORD *)(v4 + 56), 0);
}

uint64_t sub_10011E1BC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = sub_100131124(*(void **)(v0 + 72));
  if (v1)
  {
    v3 = v1;
    swift_errorRetain(v1);
    v4 = swift_errorRetain(v1);
    v5 = Logger.logObject.getter(v4);
    v7 = static os_log_type_t.error.getter(v5, v6);
    if (os_log_type_enabled(v5, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      v9 = swift_slowAlloc(32, -1);
      v19 = v9;
      *(_DWORD *)v8 = 136315138;
      swift_getErrorValue(v3, v0 + 40, v0 + 16);
      v10 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
      v12 = v11;
      *(_QWORD *)(v0 + 48) = sub_1001C56EC(v10, v11, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v8 + 4, v8 + 12);
      swift_bridgeObjectRelease(v12);
      swift_errorRelease(v3);
      swift_errorRelease(v3);
      _os_log_impl((void *)&_mh_execute_header, v5, v7, "Failed to list TLKS : %s", v8, 0xCu);
      swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);

    }
    else
    {

      swift_errorRelease(v3);
      swift_errorRelease(v3);
    }
    v15 = *(void **)(v0 + 72);
    v16 = sub_10012443C();
    v17 = swift_allocError(&type metadata for KeySyncEvent, v16, 0, 0);
    *v18 = 12;
    swift_willThrow(v17);
    swift_errorRelease(v3);

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v13 = v2;

    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v13);
  }
}

uint64_t sub_10011E3EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[32] = a2;
  v3[33] = v2;
  v3[31] = a1;
  return swift_task_switch(sub_10011E408, v2, 0);
}

uint64_t sub_10011E408()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;
  uint64_t result;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  NSString v11;
  Class isa;
  uint64_t v13;
  _QWORD *v14;

  v1 = sub_100063D3C(&qword_100346C88);
  inited = swift_initStackObject(v1, v0 + 80);
  *(_QWORD *)(v0 + 272) = inited;
  *(_OWORD *)(inited + 16) = xmmword_1002888E0;
  result = sub_1000E848C(0xD000000000000018, 0x80000001002BCBD0);
  if (v4 >> 60 != 15)
  {
    *(_QWORD *)(inited + 32) = 0x4354502D4553;
    *(_QWORD *)(inited + 40) = 0xE600000000000000;
    *(_QWORD *)(inited + 48) = result;
    *(_QWORD *)(inited + 56) = v4;
    *(_BYTE *)(inited + 64) = 1;
    result = objc_opt_self(SESKeychainWrapper);
    if (*(_QWORD *)(inited + 16))
    {
      v5 = (void *)result;
      v6 = v0 + 16;
      *(_QWORD *)(v0 + 280) = *(_QWORD *)(inited + 32);
      v7 = *(_QWORD *)(inited + 40);
      *(_QWORD *)(v0 + 288) = v7;
      v8 = *(_QWORD *)(inited + 48);
      *(_QWORD *)(v0 + 296) = v8;
      v9 = *(_QWORD *)(inited + 56);
      *(_QWORD *)(v0 + 304) = v9;
      *(_BYTE *)(v0 + 344) = *(_BYTE *)(inited + 64);
      swift_bridgeObjectRetain(v7);
      sub_100063C8C(v8, v9);
      v10 = objc_msgSend(v5, "sharedInstance");
      *(_QWORD *)(v0 + 312) = v10;
      v11 = String._bridgeToObjectiveC()();
      *(_QWORD *)(v0 + 320) = v11;
      isa = Data._bridgeToObjectiveC()().super.isa;
      *(_QWORD *)(v0 + 328) = isa;
      *(_QWORD *)(v0 + 56) = v0 + 232;
      *(_QWORD *)(v0 + 16) = v0;
      *(_QWORD *)(v0 + 24) = sub_10011E5E4;
      v13 = swift_continuation_init(v0 + 16, 1);
      *(_QWORD *)(v0 + 152) = _NSConcreteStackBlock;
      v14 = (_QWORD *)(v0 + 152);
      v14[1] = 0x40000000;
      v14[2] = sub_100118F3C;
      v14[3] = &unk_100309738;
      v14[4] = v13;
      objc_msgSend(v10, "fetchCachedContentForSEView:altDSID:completion:", v11, isa, v14);
      return swift_continuation_await(v6);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10011E5E4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 336) = v2;
  if (v2)
  {
    v3 = *(_QWORD *)(v1 + 264);
    v4 = *(_QWORD *)(v1 + 272);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease(v4);
    v5 = sub_10011E7A8;
    v6 = v3;
  }
  else
  {
    v6 = *(_QWORD *)(v1 + 264);
    v5 = sub_10011E660;
  }
  return swift_task_switch(v5, v6, 0);
}

uint64_t sub_10011E660()
{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v1 = *(void **)(v0 + 328);
  v2 = *(_QWORD *)(v0 + 304);
  v3 = *(_QWORD *)(v0 + 312);
  v5 = *(_QWORD *)(v0 + 288);
  v4 = *(_QWORD *)(v0 + 296);
  v6 = *(void **)(v0 + 232);

  swift_unknownObjectRelease(v3);
  swift_bridgeObjectRetain(v5);
  sub_100063C8C(v4, v2);
  v7 = v6;
  v8 = _swiftEmptyArrayStorage;
  if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
    v8 = sub_1001C508C(0, _swiftEmptyArrayStorage[2] + 1, 1, _swiftEmptyArrayStorage);
  v10 = v8[2];
  v9 = v8[3];
  if (v10 >= v9 >> 1)
    v8 = sub_1001C508C((_QWORD *)(v9 > 1), v10 + 1, 1, v8);
  v11 = *(_BYTE *)(v0 + 344);
  v13 = *(_QWORD *)(v0 + 296);
  v12 = *(_QWORD *)(v0 + 304);
  v15 = *(_QWORD *)(v0 + 280);
  v14 = *(_QWORD *)(v0 + 288);
  v16 = *(_QWORD *)(v0 + 272);
  v8[2] = v10 + 1;
  v17 = &v8[6 * v10];
  v17[4] = v15;
  v17[5] = v14;
  v17[6] = v13;
  v17[7] = v12;
  *((_BYTE *)v17 + 64) = v11;
  v17[9] = v7;
  swift_bridgeObjectRelease(v14);

  sub_100063CD0(v13, v12);
  swift_setDeallocating(v16);
  swift_arrayDestroy(v16 + 32, *(_QWORD *)(v16 + 16), &type metadata for SEKeySyncManager.ViewConfiguration);
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v8);
}

uint64_t sub_10011E7A8(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  os_log_type_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35[2];

  v2 = *(void **)(v1 + 328);
  v3 = *(_QWORD *)(v1 + 336);
  v4 = *(_QWORD *)(v1 + 312);
  v5 = *(void **)(v1 + 320);
  v7 = *(_QWORD *)(v1 + 296);
  v6 = *(_QWORD *)(v1 + 304);
  v8 = *(_QWORD *)(v1 + 288);
  swift_willThrow(a1);
  swift_unknownObjectRelease(v4);

  swift_bridgeObjectRetain(v8);
  sub_100063C8C(v7, v6);
  swift_errorRetain(v3);
  swift_bridgeObjectRetain(v8);
  sub_100063C8C(v7, v6);
  v9 = swift_errorRetain(v3);
  v10 = Logger.logObject.getter(v9);
  v12 = static os_log_type_t.error.getter(v10, v11);
  if (os_log_type_enabled(v10, v12))
  {
    v33 = *(_QWORD *)(v1 + 336);
    v14 = *(_QWORD *)(v1 + 296);
    v13 = *(_QWORD *)(v1 + 304);
    v15 = *(_QWORD *)(v1 + 280);
    v16 = *(_QWORD *)(v1 + 288);
    v17 = swift_slowAlloc(22, -1);
    v34 = swift_slowAlloc(64, -1);
    v35[0] = v34;
    *(_DWORD *)v17 = 136315394;
    swift_bridgeObjectRetain(v16);
    *(_QWORD *)(v1 + 216) = sub_1001C56EC(v15, v16, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 216, v1 + 224, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease_n(v16, 2);
    sub_100063CD0(v14, v13);
    swift_bridgeObjectRelease(v16);
    sub_100063CD0(v14, v13);
    *(_WORD *)(v17 + 12) = 2080;
    swift_getErrorValue(v33, v1 + 224, v1 + 192);
    v18 = Error.localizedDescription.getter(*(_QWORD *)(v1 + 200), *(_QWORD *)(v1 + 208));
    v20 = v19;
    *(_QWORD *)(v1 + 240) = sub_1001C56EC(v18, v19, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 240, v1 + 248, v17 + 14, v17 + 22);
    swift_bridgeObjectRelease(v20);
    swift_errorRelease(v33);
    swift_errorRelease(v33);
    _os_log_impl((void *)&_mh_execute_header, v10, v12, "Failed to fetch view %s : %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v34, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {
    v21 = *(_QWORD *)(v1 + 336);
    v23 = *(_QWORD *)(v1 + 296);
    v22 = *(_QWORD *)(v1 + 304);
    v24 = *(_QWORD *)(v1 + 288);

    swift_bridgeObjectRelease(v24);
    sub_100063CD0(v23, v22);
    swift_bridgeObjectRelease(v24);
    sub_100063CD0(v23, v22);
    swift_errorRelease(v21);
    swift_errorRelease(v21);
  }
  v25 = *(_QWORD *)(v1 + 336);
  v27 = *(_QWORD *)(v1 + 296);
  v26 = *(_QWORD *)(v1 + 304);
  v28 = *(_QWORD *)(v1 + 288);
  v29 = sub_10012443C();
  v30 = swift_allocError(&type metadata for KeySyncEvent, v29, 0, 0);
  *v31 = 20;
  swift_willThrow(v30);
  swift_errorRelease(v25);
  swift_bridgeObjectRelease(v28);
  sub_100063CD0(v27, v26);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10011EA9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v6 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRelease(v6);
  *(_QWORD *)(a1 + 16) = a2;
  v7 = *(_QWORD *)(a1 + 24);
  swift_bridgeObjectRetain(a3);
  result = swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 24) = a3;
  return result;
}

uint64_t sub_10011EB00(uint64_t result, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  id v9;

  v3 = *(_QWORD *)(result + 32);
  if (a3)
  {
    v5 = sub_100063D3C(&qword_100345378);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else if (a2)
  {
    **(_QWORD **)(*(_QWORD *)(v3 + 64) + 40) = a2;
    v9 = a2;
    return swift_continuation_throwingResume(v3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10011EB8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 224) = a2;
  *(_QWORD *)(v3 + 232) = a3;
  return swift_task_switch(sub_10011EBA4, 0, 0);
}

uint64_t sub_10011EBA4()
{
  uint64_t v0;
  uint64_t result;
  unint64_t v2;
  uint64_t v3;
  __int128 v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;

  *(_OWORD *)(v0 + 72) = xmmword_1002888E0;
  result = sub_1000E848C(0xD000000000000018, 0x80000001002BCBD0);
  if (v2 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 232);
    *(_QWORD *)(v0 + 88) = 0x4354502D4553;
    *(_QWORD *)(v0 + 96) = 0xE600000000000000;
    *(_QWORD *)(v0 + 104) = result;
    *(_QWORD *)(v0 + 112) = v2;
    *(_BYTE *)(v0 + 120) = 1;
    v4 = *(_OWORD *)(v0 + 104);
    *(_OWORD *)(v0 + 128) = *(_OWORD *)(v0 + 88);
    *(_OWORD *)(v0 + 144) = v4;
    *(_BYTE *)(v0 + 160) = *(_BYTE *)(v0 + 120);
    v5 = (*(_QWORD *)(*(_QWORD *)(sub_100063D3C(&qword_100346898) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
    v6 = swift_task_alloc(v5);
    v7 = type metadata accessor for TaskPriority(0);
    v8 = *(_QWORD *)(v7 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    v9 = swift_allocObject(&unk_100309808, 73, 7);
    *(_QWORD *)(v9 + 16) = 0;
    *(_QWORD *)(v9 + 24) = 0;
    *(_QWORD *)(v9 + 32) = v3;
    v10 = *(_OWORD *)(v0 + 104);
    *(_OWORD *)(v9 + 40) = *(_OWORD *)(v0 + 88);
    *(_OWORD *)(v9 + 56) = v10;
    *(_BYTE *)(v9 + 72) = *(_BYTE *)(v0 + 120);
    v11 = swift_task_alloc(v5);
    v27 = v6;
    sub_1000E4E48(v6, v11, &qword_100346898);
    LODWORD(v6) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v11, 1, v7);
    sub_100124480((_QWORD *)(v0 + 128));
    sub_100124480((_QWORD *)(v0 + 128));
    v12 = swift_retain(v3);
    if ((_DWORD)v6 == 1)
    {
      sub_100096700(v11, &qword_100346898);
      v13 = 12544;
    }
    else
    {
      v14 = TaskPriority.rawValue.getter(v12);
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v11, v7);
      v13 = v14 | 0x3100;
    }
    swift_task_dealloc(v11);
    v15 = *(_QWORD *)(v9 + 16);
    if (v15)
    {
      v16 = *(_QWORD *)(v9 + 24);
      ObjectType = swift_getObjectType(v15);
      swift_unknownObjectRetain(v15);
      v18 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v16);
      v20 = v19;
      swift_unknownObjectRelease(v15);
    }
    else
    {
      v18 = 0;
      v20 = 0;
    }
    v21 = **(_QWORD **)(v0 + 224);
    v22 = swift_allocObject(&unk_100309830, 32, 7);
    *(_QWORD *)(v22 + 16) = &unk_100346CF8;
    *(_QWORD *)(v22 + 24) = v9;
    v23 = v20 | v18;
    if (v20 | v18)
    {
      v23 = v0 + 168;
      *(_QWORD *)(v0 + 168) = 0;
      *(_QWORD *)(v0 + 176) = 0;
      *(_QWORD *)(v0 + 184) = v18;
      *(_QWORD *)(v0 + 192) = v20;
    }
    *(_QWORD *)(v0 + 200) = 1;
    *(_QWORD *)(v0 + 208) = v23;
    *(_QWORD *)(v0 + 216) = v21;
    v24 = swift_task_create(v13, v0 + 200, &type metadata for () + 1, &unk_100346D00, v22);
    swift_release(v24);
    sub_1001248C8((_QWORD *)(v0 + 128));
    sub_100096700(v27, &qword_100346898);
    swift_task_dealloc(v27);
    swift_arrayDestroy(v0 + 88, *(_QWORD *)(v0 + 72), &type metadata for SEKeySyncManager.ViewConfiguration);
    if (sub_100277058(2, 18, 0, 0))
    {
      v25 = (_QWORD *)swift_task_alloc(async function pointer to TaskGroup.awaitAllRemainingTasks(isolation:)[1]);
      *(_QWORD *)(v0 + 240) = v25;
      v26 = sub_100063D3C(&qword_100346D08);
      *v25 = v0;
      v25[1] = sub_10011EF08;
      return TaskGroup.awaitAllRemainingTasks(isolation:)(0, 0, v26);
    }
    else
    {
      return swift_task_switch(sub_10011EF50, 0, 0);
    }
  }
  return result;
}

uint64_t sub_10011EF08()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 240));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10011EF50()
{
  uint64_t v0;

  return swift_taskGroup_wait_next_throwing(v0 + 161, **(_QWORD **)(v0 + 224), sub_10011EF6C, v0 + 16);
}

uint64_t sub_10011EF6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  *(_QWORD *)(v1 + 248) = v0;
  if (v0)
  {
    v2 = sub_10011EFA8;
  }
  else
  {
    if ((*(_BYTE *)(v1 + 161) & 1) != 0)
      return (*(uint64_t (**)(void))(v1 + 8))();
    v2 = sub_10011EF50;
  }
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_10011EFA8()
{
  uint64_t v0;

  return swift_unexpectedError(*(_QWORD *)(v0 + 248), "_Concurrency/TaskGroup.swift", 28, 1, 648);
}

uint64_t sub_10011EFC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[30] = a4;
  v5[31] = a5;
  v5[32] = OBJC_IVAR____TtC10seserviced16SEKeySyncManager_keychainWrapper;
  return swift_task_switch(sub_10011EFE8, a4, 0);
}

uint64_t sub_10011EFE8()
{
  _QWORD *v0;

  v0[33] = *(_QWORD *)(v0[30] + v0[32]);
  return swift_task_switch(sub_10011F00C, 0, 0);
}

uint64_t sub_10011F00C()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0 + 2;
  v2 = (void *)v0[33];
  v0[7] = v0 + 23;
  v0[2] = v0;
  v0[3] = sub_10011F0A0;
  v3 = swift_continuation_init(v0 + 2, 1);
  v0[18] = _NSConcreteStackBlock;
  v4 = v0 + 18;
  v4[1] = 0x40000000;
  v4[2] = sub_1001098FC;
  v4[3] = &unk_100309848;
  v4[4] = v3;
  objc_msgSend(v2, "canSyncSEKeys:", v4);
  return swift_continuation_await(v1);
}

uint64_t sub_10011F0A0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 272) = v1;
  if (v1)
    v2 = sub_10011F2E8;
  else
    v2 = sub_10011F100;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_10011F100()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 200);
  *(_QWORD *)(v0 + 280) = v1;
  *(_QWORD *)(v0 + 288) = v2;
  if (v2 >> 60 == 15)
    return (*(uint64_t (**)(void))(v0 + 8))();
  sub_100063C8C(v1, v2);
  return swift_task_switch(sub_10011F160, 0, 0);
}

uint64_t sub_10011F160()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  NSString v3;
  Class isa;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0 + 10;
  v2 = (void *)v0[33];
  v3 = String._bridgeToObjectiveC()();
  v0[37] = v3;
  isa = Data._bridgeToObjectiveC()().super.isa;
  v0[38] = isa;
  v0[10] = v0;
  v0[11] = sub_10011F230;
  v5 = swift_continuation_init(v0 + 10, 1);
  v0[18] = _NSConcreteStackBlock;
  v6 = v0 + 18;
  v6[1] = 0x40000000;
  v6[2] = sub_10011A4E0;
  v6[3] = &unk_100309860;
  v6[4] = v5;
  objc_msgSend(v2, "syncContentsForSEView:altDSID:completion:", v3, isa, v6);
  return swift_continuation_await(v1);
}

uint64_t sub_10011F230()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 112);
  *(_QWORD *)(*(_QWORD *)v0 + 312) = v1;
  if (v1)
    v2 = sub_10011F524;
  else
    v2 = sub_10011F290;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_10011F290()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  unint64_t v4;

  v2 = *(void **)(v0 + 296);
  v1 = *(void **)(v0 + 304);
  v3 = *(_QWORD *)(v0 + 280);
  v4 = *(_QWORD *)(v0 + 288);
  sub_10006B9B4(v3, v4);
  sub_10006B9B4(v3, v4);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10011F2E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  os_log_type_t type;
  uint64_t v19[2];

  swift_willThrow(a1);
  v2 = *(_QWORD *)(v1 + 272);
  v3 = *(_QWORD **)(v1 + 248);
  sub_100124480(v3);
  swift_errorRetain(v2);
  sub_100124480(v3);
  v4 = swift_errorRetain(v2);
  v5 = Logger.logObject.getter(v4);
  v7 = static os_log_type_t.error.getter(v5, v6);
  if (os_log_type_enabled(v5, v7))
  {
    type = v7;
    v8 = *(uint64_t **)(v1 + 248);
    v9 = swift_slowAlloc(22, -1);
    v17 = swift_slowAlloc(64, -1);
    v19[0] = v17;
    *(_DWORD *)v9 = 136315394;
    v10 = *v8;
    v11 = v8[1];
    swift_bridgeObjectRetain(v11);
    *(_QWORD *)(v1 + 144) = sub_1001C56EC(v10, v11, v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 144, v1 + 152, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease(v11);
    sub_1001248C8(v8);
    sub_1001248C8(v8);
    *(_WORD *)(v9 + 12) = 2080;
    swift_getErrorValue(v2, v1 + 232, v1 + 208);
    v12 = Error.localizedDescription.getter(*(_QWORD *)(v1 + 216), *(_QWORD *)(v1 + 224));
    v14 = v13;
    *(_QWORD *)(v1 + 144) = sub_1001C56EC(v12, v13, v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 144, v1 + 152, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease(v14);
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v5, type, "Failed to sync view %s : %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v17, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v9, -1, -1);
    swift_errorRelease(v2);

  }
  else
  {
    v15 = *(_QWORD **)(v1 + 248);
    swift_errorRelease(v2);

    sub_1001248C8(v15);
    sub_1001248C8(v15);
    swift_errorRelease(v2);
    swift_errorRelease(v2);
  }
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10011F524(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  unint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  os_log_type_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v21;
  os_log_type_t type;
  uint64_t v23[2];

  v2 = *(void **)(v1 + 304);
  v3 = *(_QWORD *)(v1 + 288);
  v4 = *(void **)(v1 + 296);
  v5 = *(_QWORD *)(v1 + 280);
  swift_willThrow(a1);
  sub_10006B9B4(v5, v3);
  sub_10006B9B4(v5, v3);

  v6 = *(_QWORD *)(v1 + 312);
  v7 = *(_QWORD **)(v1 + 248);
  sub_100124480(v7);
  swift_errorRetain(v6);
  sub_100124480(v7);
  v8 = swift_errorRetain(v6);
  v9 = Logger.logObject.getter(v8);
  v11 = static os_log_type_t.error.getter(v9, v10);
  if (os_log_type_enabled(v9, v11))
  {
    type = v11;
    v12 = *(uint64_t **)(v1 + 248);
    v13 = swift_slowAlloc(22, -1);
    v21 = swift_slowAlloc(64, -1);
    v23[0] = v21;
    *(_DWORD *)v13 = 136315394;
    v14 = *v12;
    v15 = v12[1];
    swift_bridgeObjectRetain(v15);
    *(_QWORD *)(v1 + 144) = sub_1001C56EC(v14, v15, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 144, v1 + 152, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease(v15);
    sub_1001248C8(v12);
    sub_1001248C8(v12);
    *(_WORD *)(v13 + 12) = 2080;
    swift_getErrorValue(v6, v1 + 232, v1 + 208);
    v16 = Error.localizedDescription.getter(*(_QWORD *)(v1 + 216), *(_QWORD *)(v1 + 224));
    v18 = v17;
    *(_QWORD *)(v1 + 144) = sub_1001C56EC(v16, v17, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 144, v1 + 152, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease(v18);
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    _os_log_impl((void *)&_mh_execute_header, v9, type, "Failed to sync view %s : %s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v21, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v13, -1, -1);
    swift_errorRelease(v6);

  }
  else
  {
    v19 = *(_QWORD **)(v1 + 248);
    swift_errorRelease(v6);

    sub_1001248C8(v19);
    sub_1001248C8(v19);
    swift_errorRelease(v6);
    swift_errorRelease(v6);
  }
  return (*(uint64_t (**)(void))(v1 + 8))();
}

Swift::Int sub_10011F8CC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  Swift::UInt8 v5;
  _QWORD v7[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  v5 = *((_BYTE *)v0 + 32);
  Hasher.init(_seed:)(v7);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v7, v1, v2);
  swift_bridgeObjectRelease(v2);
  sub_100063C8C(v3, v4);
  Data.hash(into:)(v7, v3, v4);
  sub_100063CD0(v3, v4);
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

void sub_10011F970(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  Swift::UInt8 v7;

  v3 = *v1;
  v4 = v1[1];
  v5 = v1[2];
  v6 = v1[3];
  v7 = *((_BYTE *)v1 + 32);
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(a1, v3, v4);
  swift_bridgeObjectRelease(v4);
  sub_100063C8C(v5, v6);
  Data.hash(into:)(a1, v5, v6);
  sub_100063CD0(v5, v6);
  Hasher._combine(_:)(v7);
}

Swift::Int sub_10011F9FC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  Swift::UInt8 v5;
  _QWORD v7[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  v5 = *((_BYTE *)v0 + 32);
  Hasher.init(_seed:)(v7);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v7, v1, v2);
  swift_bridgeObjectRelease(v2);
  sub_100063C8C(v3, v4);
  Data.hash(into:)(v7, v3, v4);
  sub_100063CD0(v3, v4);
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

uint64_t sub_10011FA9C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  char v12;
  uint64_t result;
  char v14;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = *((unsigned __int8 *)a1 + 32);
  v9 = *(_QWORD *)(a2 + 8);
  v10 = *(unsigned __int8 *)(a2 + 32);
  v11 = v4 == *(_QWORD *)a2 && v5 == v9;
  if (v11
    || (v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *(_QWORD *)a2, v9, 0), result = 0, (v12 & 1) != 0))
  {
    sub_10007C23C(v6, v7);
    if ((v14 & 1) != 0)
      return v8 ^ v10 ^ 1u;
    else
      return 0;
  }
  return result;
}

uint64_t sub_10011FB2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = v0 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_ptcViewName + 8));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_keychainWrapper));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_recoveryPending));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_notificationTokens));
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__errorCount + 8);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__errorCount + 24));
  swift_bridgeObjectRelease(v3);
  v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__recoveryRequiredPref + 8);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__recoveryRequiredPref + 24));
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__cachedLocalIdentity + 8);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__cachedLocalIdentity + 24));
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__didRecoverTLK + 8);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__didRecoverTLK + 24));
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__recoveryForce + 8);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__recoveryForce + 24));
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__disableKeySync + 8);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__disableKeySync + 24));
  swift_bridgeObjectRelease(v8);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_state));

  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_10011FCAC()
{
  uint64_t v0;

  sub_10011FB2C();
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_10011FCC4()
{
  return type metadata accessor for SEKeySyncManager(0);
}

uint64_t type metadata accessor for SEKeySyncManager(uint64_t a1)
{
  uint64_t result;

  result = qword_100346A90;
  if (!qword_100346A90)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SEKeySyncManager);
  return result;
}

uint64_t sub_10011FD08(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[21];

  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_100289D30;
    v4[3] = &unk_100289D48;
    v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[7] = &unk_100289D60;
    v4[8] = &unk_100289D60;
    v4[9] = &unk_100289D78;
    v4[10] = &unk_100289D78;
    v4[11] = &unk_100289D90;
    v4[12] = &unk_100289DA8;
    v4[13] = &unk_100289DC0;
    v4[14] = &unk_100289DA8;
    v4[15] = &unk_100289DA8;
    v4[16] = &unk_100289DA8;
    v4[17] = &unk_100289D60;
    v4[18] = &unk_100289D78;
    v4[19] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[20] = &unk_100289DD8;
    return swift_updateClassMetadata2(a1, 256, 21, v4, a1 + 80);
  }
  return result;
}

uint64_t sub_10011FE04(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for Optional(319, *(_QWORD *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    result = swift_initClassMetadata2(a1, 0, 1, &v4, a1 + 88);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_10011FE74()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10011FE80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  return swift_task_switch(sub_10011FE9C, 0, 0);
}

uint64_t sub_10011FE9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  (*(void (**)(uint64_t *__return_ptr))(v0 + 24))(&v3);
  *(_QWORD *)(v1 + 16) = v3;
  OS_dispatch_semaphore.signal()();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10011FEEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 88);
  v2 = type metadata accessor for Optional(0, *(_QWORD *)(*(_QWORD *)v0 + 80));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for EvilSendableBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100099EA0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EvilSendableBox);
}

uint64_t destroy for SEKeySyncManager.KeySyncState(uint64_t *a1)
{
  unint64_t v2;

  v2 = a1[1];
  if (v2 >> 60 != 15)
    sub_100063CD0(*a1, v2);
  swift_bridgeObjectRelease(a1[2]);
  return swift_bridgeObjectRelease(a1[3]);
}

uint64_t initializeWithCopy for SEKeySyncManager.KeySyncState(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  if (v4 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v5 = *a2;
    sub_100063C8C(*a2, a2[1]);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v4;
  }
  v6 = a2[2];
  v7 = a2[3];
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t *assignWithCopy for SEKeySyncManager.KeySyncState(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a2[1];
  if ((unint64_t)a1[1] >> 60 != 15)
  {
    if (v4 >> 60 != 15)
    {
      v6 = *a2;
      sub_100063C8C(*a2, a2[1]);
      v7 = *a1;
      v8 = a1[1];
      *a1 = v6;
      a1[1] = v4;
      sub_100063CD0(v7, v8);
      goto LABEL_8;
    }
    sub_1001200C8((uint64_t)a1);
    goto LABEL_6;
  }
  if (v4 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  v5 = *a2;
  sub_100063C8C(*a2, a2[1]);
  *a1 = v5;
  a1[1] = v4;
LABEL_8:
  v9 = a1[2];
  v10 = a2[2];
  a1[2] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v9);
  v11 = a1[3];
  v12 = a2[3];
  a1[3] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t sub_1001200C8(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for Data - 1) + 8))();
  return a1;
}

uint64_t *assignWithTake for SEKeySyncManager.KeySyncState(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a1[1];
  if (v4 >> 60 != 15)
  {
    v5 = a2[1];
    if (v5 >> 60 != 15)
    {
      v6 = *a1;
      *a1 = *a2;
      a1[1] = v5;
      sub_100063CD0(v6, v4);
      goto LABEL_6;
    }
    sub_1001200C8((uint64_t)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_6:
  v7 = a1[2];
  a1[2] = a2[2];
  swift_bridgeObjectRelease(v7);
  v8 = a1[3];
  a1[3] = a2[3];
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for SEKeySyncManager.KeySyncState(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SEKeySyncManager.KeySyncState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SEKeySyncManager.KeySyncState()
{
  return &type metadata for SEKeySyncManager.KeySyncState;
}

uint64_t storeEnumTagSinglePayload for SEKeySyncManager.SyncProgressState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100120290 + 4 * byte_100289CF5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1001202C4 + 4 * byte_100289CF0[v4]))();
}

uint64_t sub_1001202C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001202CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001202D4);
  return result;
}

uint64_t sub_1001202E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001202E8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1001202EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001202F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SEKeySyncManager.SyncProgressState()
{
  return &type metadata for SEKeySyncManager.SyncProgressState;
}

unint64_t sub_100120314()
{
  unint64_t result;

  result = qword_100346B20;
  if (!qword_100346B20)
  {
    result = swift_getWitnessTable(&unk_100289ECC, &type metadata for SEKeySyncManager.SyncProgressState);
    atomic_store(result, &qword_100346B20);
  }
  return result;
}

void sub_100120358(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  id v4;
  NSString v5;
  id v6;
  uint64_t v7;
  NSString v8;
  uint64_t v9;

  if (*(_BYTE *)(v1 + 40) != 1 || SESInternalVariant(a1))
  {
    v3 = *(_QWORD *)(v1 + 8);
    v4 = objc_allocWithZone((Class)NSUserDefaults);
    swift_bridgeObjectRetain(v3);
    v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v3);
    v6 = objc_msgSend(v4, "initWithSuiteName:", v5);

    if (v6)
    {
      v9 = a1;
      v7 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v9, &type metadata for Int);
      v8 = String._bridgeToObjectiveC()();
      objc_msgSend(v6, "setValue:forKey:", v7, v8);

      swift_unknownObjectRelease(v7);
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_100120444(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  id v4;
  NSString v5;
  id v6;
  NSString v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];
  _OWORD v17[2];
  _BYTE v18[24];
  uint64_t v19;

  v4 = objc_allocWithZone((Class)NSUserDefaults);
  swift_bridgeObjectRetain(a1);
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a1);
  v6 = objc_msgSend(v4, "initWithSuiteName:", v5);

  if (v6)
  {
    v7 = String._bridgeToObjectiveC()();
    v8 = objc_msgSend(v6, "objectForKey:", v7);

    if (v8)
    {
      _bridgeAnyObjectToAny(_:)(v17);
      swift_unknownObjectRelease(v8);
    }
    else
    {
      memset(v17, 0, sizeof(v17));
    }
    sub_10006C218((uint64_t)v17, (uint64_t)v18, (uint64_t *)&unk_100346130);
    if (v19)
    {
      if ((swift_dynamicCast(v16, v18, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) != 0)
      {
        v9 = v16[0];
        v10 = v16[1];
        v11 = type metadata accessor for PropertyListDecoder(0);
        swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
        v12 = PropertyListDecoder.init()();
        v13 = type metadata accessor for SESPeerIdentityData(0);
        v14 = sub_1000639EC(&qword_100346BC0, type metadata accessor for SESPeerIdentityData, (uint64_t)&unk_10028AE3C);
        dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v13, v9, v10, v13, v14);
        sub_100063CD0(v9, v10);
        swift_release(v12);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a2, 0, 1, v13);
        return;
      }
    }
    else
    {
      sub_100096700((uint64_t)v18, (uint64_t *)&unk_100346130);
    }
    v15 = type metadata accessor for SESPeerIdentityData(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a2, 1, 1, v15);
  }
  else
  {
    __break(1u);
  }
}

void sub_100120680(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  id v4;
  NSString v5;
  Class v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  Class isa;
  NSString v16;

  v3 = *(_QWORD *)(v1 + 8);
  v4 = objc_allocWithZone((Class)NSUserDefaults);
  swift_bridgeObjectRetain(v3);
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  v6 = (Class)objc_msgSend(v4, "initWithSuiteName:", v5);

  if (v6)
  {
    v7 = type metadata accessor for SESPeerIdentityData(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(a1, 1, v7) == 1)
    {
      v16 = String._bridgeToObjectiveC()();
      -[objc_class removeObjectForKey:](v6, "removeObjectForKey:", v16);
    }
    else
    {
      v8 = type metadata accessor for PropertyListEncoder(0);
      swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
      v9 = PropertyListEncoder.init()();
      v10 = sub_100063D3C(&qword_100346BB0);
      v11 = sub_100124AF8();
      v12 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a1, v10, v11);
      v14 = v13;
      swift_release(v9);
      isa = Data._bridgeToObjectiveC()().super.isa;
      v16 = String._bridgeToObjectiveC()();
      -[objc_class setValue:forKey:](v6, "setValue:forKey:", isa, v16);
      sub_100063CD0(v12, v14);

      v6 = isa;
    }

    sub_100096700(a1, &qword_100346BB0);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100120834()
{
  return swift_task_switch(sub_100120848, 0, 0);
}

uint64_t sub_100120848()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  if (qword_1003445D8 != -1)
    swift_once(&qword_1003445D8, sub_1000FB394);
  v1 = qword_100354C08;
  v2 = (_QWORD *)swift_task_alloc(dword_100346B4C);
  *(_QWORD *)(v0 + 16) = v2;
  *v2 = v0;
  v2[1] = sub_1000FAD2C;
  v2[11] = 0xE600000000000000;
  v2[12] = v1;
  v2[10] = 0x636E79736572;
  return swift_task_switch(sub_1000FD238, v1, 0);
}

uint64_t sub_1001208E8(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_1001256A8;
  return v6(a1);
}

uint64_t sub_10012094C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = __DataStorage._bytes.getter();
  v5 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v5 += a1 - result;
  }
  v6 = __OFSUB__(a2, a1);
  v7 = a2 - a1;
  if (v6)
  {
    __break(1u);
    goto LABEL_13;
  }
  v8 = __DataStorage._length.getter();
  if (v8 >= v7)
    v9 = v7;
  else
    v9 = v8;
  v10 = v5 + v9;
  if (v5)
    v11 = v10;
  else
    v11 = 0;
  return Data._Representation.append(contentsOf:)(v5, v11);
}

unsigned __int8 *sub_1001209DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v18 = a1;
  v19 = a2;
  v20 = a3;
  v21 = a4;
  v7 = sub_100124824();
  swift_bridgeObjectRetain(a4);
  v8 = String.init<A>(_:)(&v18, &type metadata for Substring, &protocol witness table for Substring, v7);
  v10 = v8;
  v11 = v9;
  if ((v9 & 0x1000000000000000) == 0)
  {
    if ((v9 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v13 = HIBYTE(v11) & 0xF;
    v18 = v10;
    v19 = v11 & 0xFFFFFFFFFFFFFFLL;
    v12 = (unsigned __int8 *)&v18;
    goto LABEL_7;
  }
  v10 = sub_100120D48(v8, v9);
  v15 = v14;
  swift_bridgeObjectRelease(v11);
  v11 = v15;
  if ((v15 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v10 & 0x1000000000000000) != 0)
  {
    v12 = (unsigned __int8 *)((v11 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v13 = v10 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v12 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v10, v11);
  }
LABEL_7:
  v16 = sub_100120ACC(v12, v13, a5);
  swift_bridgeObjectRelease(v11);
  return v16;
}

unsigned __int8 *sub_100120ACC(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 *v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  v13 = 0;
                  if (v11 < 0x61 || v11 >= v8)
                    return (unsigned __int8 *)v13;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              v14 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
                return 0;
              v9 = v14 - (v11 + v12);
              if (__OFSUB__(v14, (v11 + v12)))
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_66;
    }
    if (a2)
    {
      v23 = a3 + 48;
      v24 = a3 + 55;
      v25 = a3 + 87;
      if (a3 > 10)
      {
        v23 = 58;
      }
      else
      {
        v25 = 97;
        v24 = 65;
      }
      if (result)
      {
        v26 = 0;
        do
        {
          v27 = *result;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v24)
            {
              v13 = 0;
              if (v27 < 0x61 || v27 >= v25)
                return (unsigned __int8 *)v13;
              v28 = -87;
            }
            else
            {
              v28 = -55;
            }
          }
          else
          {
            v28 = -48;
          }
          v29 = v26 * a3;
          if ((unsigned __int128)(v26 * (__int128)a3) >> 64 != (v26 * a3) >> 63)
            return 0;
          v26 = v29 + (v27 + v28);
          if (__OFADD__(v29, (v27 + v28)))
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v29 + (v27 + v28));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }
  v15 = a2 - 1;
  if (a2 == 1)
    return 0;
  v16 = a3 + 48;
  v17 = a3 + 55;
  v18 = a3 + 87;
  if (a3 > 10)
  {
    v16 = 58;
  }
  else
  {
    v18 = 97;
    v17 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v19 = result + 1;
  do
  {
    v20 = *v19;
    if (v20 < 0x30 || v20 >= v16)
    {
      if (v20 < 0x41 || v20 >= v17)
      {
        v13 = 0;
        if (v20 < 0x61 || v20 >= v18)
          return (unsigned __int8 *)v13;
        v21 = -87;
      }
      else
      {
        v21 = -55;
      }
    }
    else
    {
      v21 = -48;
    }
    v22 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
      return 0;
    v9 = v22 + (v20 + v21);
    if (__OFADD__(v22, (v20 + v21)))
      return 0;
    ++v19;
    --v15;
  }
  while (v15);
  return (unsigned __int8 *)v9;
}

uint64_t sub_100120D48(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1;
  v3 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v3 = 11;
  v4 = String.subscript.getter(15, v3 | (v2 << 16), a1, a2);
  v6 = v5;
  v9 = sub_100120DC4(v4, v7, v8, v5);
  swift_bridgeObjectRelease(v6);
  return v9;
}

uint64_t sub_100120DC4(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[5];

  v5 = a3;
  if ((a4 & 0x1000000000000000) != 0)
  {
    v12 = sub_100120F08(a1, a2, a3, a4);
    if (v12)
    {
      v9 = v12;
      v8 = (unint64_t)sub_1001C5B7C(v12, 0);
      v5 = sub_100120FF4((unint64_t)v15, v8 + 32, v9, a1, a2, v5, a4);
      v13 = v15[3];
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRelease(v13);
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }
    else
    {
      v8 = (unint64_t)_swiftEmptyArrayStorage;
    }
    v14 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(_QWORD *)(v8 + 16));
    swift_release(v8);
    return v14;
  }
  else
  {
    v8 = a1 >> 16;
    v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
      {
        v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
LABEL_11:
      v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10)
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      goto LABEL_5;
    }
    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v15 + v8, v9 - v8);
  }
}

unint64_t sub_100120F08(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_1001C5BE0(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_1001C5BE0(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)(v7, a2, a3, a4);
  }
  __break(1u);
  return result;
}

unint64_t sub_100120FF4(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = sub_1001C5BE0(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = _StringObject.sharedUTF8.getter(a6, a7);
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = sub_1001C5BE0(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = String.UTF8View._foreignIndex(after:)(v12, a6, a7);
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_100121204(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t result;
  char v13;
  _QWORD v14[2];
  char v15;

  if ((a4 & 0x1000000000000000) != 0)
  {
    result = 0;
    goto LABEL_8;
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    v11 = v14;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    v11 = (_QWORD *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v11 = (_QWORD *)_StringObject.sharedUTF8.getter(a3, a4);
  }
  result = sub_100123CD4((uint64_t)v11, a1, a2, a3, a4, a5);
  if (!v5)
  {
    v15 = v13 & 1;
LABEL_8:
    LOBYTE(v14[0]) = (a4 & 0x1000000000000000) != 0;
  }
  return result;
}

_QWORD *sub_1001212D4(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  BOOL v4;
  id v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_16;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v2)
  {
    while (1)
    {
      v23 = v1;
      v3 = 0;
      v24 = v1 & 0xFFFFFFFFFFFFFF8;
      v25 = v1 & 0xC000000000000001;
      while (v25)
      {
        v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3, v1);
LABEL_9:
        v6 = v5;
        v7 = v3 + 1;
        if (__OFADD__(v3, 1))
          goto LABEL_15;
        v8 = v2;
        v9 = objc_msgSend(v5, "sourcePeerIdentifier");
        v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v9);
        v12 = v11;

        v13 = objc_msgSend(v6, "targetPeerIdentifier");
        v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v13);
        v16 = v15;

        sub_10007C23C(v10, v12);
        LOBYTE(v13) = v17;
        sub_100063CD0(v14, v16);
        v18 = sub_100063CD0(v10, v12);
        if ((v13 & 1) != 0)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v18);
          v19 = _swiftEmptyArrayStorage[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v19);
          v20 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, v6);
          specialized ContiguousArray._endMutation()(v20);
        }
        else
        {

        }
        v2 = v8;
        ++v3;
        v4 = v7 == v8;
        v1 = v23;
        if (v4)
          return _swiftEmptyArrayStorage;
      }
      if (v3 < *(_QWORD *)(v24 + 16))
        break;
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      if (v1 < 0)
        v22 = v1;
      else
        v22 = v1 & 0xFFFFFFFFFFFFFF8;
      v2 = _CocoaArrayWrapper.endIndex.getter(v22);
      if (!v2)
        return _swiftEmptyArrayStorage;
    }
    v5 = *(id *)(v1 + 8 * v3 + 32);
    goto LABEL_9;
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1001214AC(uint64_t a1)
{
  uint64_t v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v7 = a1;
    else
      v7 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    if (_CocoaArrayWrapper.endIndex.getter(v7))
    {
LABEL_3:
      if ((a1 & 0xC000000000000001) != 0)
        v3 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
      else
        v3 = *(id *)(a1 + 32);
      v4 = objc_msgSend(v3, "tlkUUID");
      static Data._unconditionallyBridgeFromObjectiveC(_:)(v4);
      v6 = v5;

      __asm { BR              X10 }
    }
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v2)
      goto LABEL_3;
  }
  swift_bridgeObjectRelease(a1);
  return 0;
}

_QWORD *sub_100121A80(uint64_t a1, void *a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  id v5;
  uint64_t v7;
  _OWORD v9[4];
  char v10;
  __int128 v11;
  _BYTE v12[16];
  _BYTE v13[8];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v7 = a1 + 32;
    v3 = *(_OWORD *)(a1 + 80);
    v9[2] = *(_OWORD *)(a1 + 64);
    v9[3] = v3;
    v10 = *(_BYTE *)(a1 + 96);
    v4 = *(_OWORD *)(a1 + 48);
    v9[0] = *(_OWORD *)(a1 + 32);
    v9[1] = v4;
    v11 = v9[0];
    sub_100124944((uint64_t *)v9, (void (*)(uint64_t, uint64_t))sub_100063C8C);
    v5 = objc_msgSend(a2, "tlkUUID", v2 - 1, v7);
    static Data._unconditionallyBridgeFromObjectiveC(_:)(v5);

    sub_100124908((uint64_t)&v11, (uint64_t)v12);
    sub_100124908((uint64_t)v12, (uint64_t)v13);
    __asm { BR              X11 }
  }
  return _swiftEmptyArrayStorage;
}

void sub_100122140(uint64_t a1, uint64_t (*a2)(_QWORD *, id))
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t *i;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  char v13;
  id v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v26;
  unint64_t v27;
  _QWORD v28[4];
  char v29;
  _QWORD *v30;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = 0;
    v4 = a1 + 40;
    v20 = v2 - 1;
    v5 = _swiftEmptyArrayStorage;
    v24 = *(_QWORD *)(a1 + 16);
    v21 = a1 + 40;
    do
    {
      v22 = v5;
      if (v3 <= v2)
        v6 = v2;
      else
        v6 = v3;
      v26 = v6;
      for (i = (uint64_t *)(v4 + 48 * v3); ; i += 6)
      {
        if (v26 == v3)
        {
          __break(1u);
          return;
        }
        v8 = *i;
        v9 = i[1];
        v10 = i[2];
        v11 = (void *)i[4];
        v12 = v3 + 1;
        v13 = *((_BYTE *)i + 24);
        v23 = *(i - 1);
        v28[0] = v23;
        v28[1] = v8;
        v28[2] = v9;
        v28[3] = v10;
        v29 = v13;
        swift_bridgeObjectRetain(v8);
        sub_100063C8C(v9, v10);
        v14 = v11;
        if ((a2(v28, v14) & 1) != 0)
          break;
        swift_bridgeObjectRelease(v8);
        sub_100063CD0(v9, v10);

        ++v3;
        if (v24 == v12)
          return;
      }
      v27 = v3;
      v5 = v22;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v22);
      v30 = v22;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_100192B38(0, v22[2] + 1, 1);
        v5 = v30;
      }
      v16 = v23;
      v18 = v5[2];
      v17 = v5[3];
      if (v18 >= v17 >> 1)
      {
        sub_100192B38(v17 > 1, v18 + 1, 1);
        v16 = v23;
        v5 = v30;
      }
      v5[2] = v18 + 1;
      v19 = &v5[6 * v18];
      v19[4] = v16;
      v19[5] = v8;
      v19[6] = v9;
      v19[7] = v10;
      *((_BYTE *)v19 + 64) = v13;
      v19[9] = v14;
      v2 = v24;
      v4 = v21;
      ++v3;
    }
    while (v20 != v27);
  }
}

uint64_t sub_10012231C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  BOOL v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v29 = a1;
    else
      v29 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v4 = _CocoaArrayWrapper.endIndex.getter(v29);
    if (v4)
      goto LABEL_3;
  }
  else
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v4)
    {
LABEL_3:
      v5 = 0;
      v35 = a2;
      v6 = a2 & 0xFFFFFFFFFFFFFF8;
      v32 = a2 & 0xFFFFFFFFFFFFFF8;
      if (a2 < 0)
        v6 = a2;
      v31 = v6;
      v37 = a2 & 0xC000000000000001;
      v33 = (unint64_t)a2 >> 62;
      v34 = v4;
      do
      {
        if ((a1 & 0xC000000000000001) != 0)
          v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
        else
          v7 = *(id *)(a1 + 32 + 8 * v5);
        v8 = v7;
        v9 = __OFADD__(v5, 1);
        v10 = v5 + 1;
        if (v9)
        {
          __break(1u);
          JUMPOUT(0x1001229E8);
        }
        v36 = v10;
        v11 = objc_msgSend(v7, "sourcePeerIdentifier");
        v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v11);
        v14 = v13;

        v15 = objc_msgSend(v8, "targetPeerIdentifier");
        v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v15);
        v18 = v17;

        sub_10007C23C(v12, v14);
        LOBYTE(v15) = v19;
        sub_100063CD0(v16, v18);
        sub_100063CD0(v12, v14);
        if ((v15 & 1) != 0)
        {
          if (v33)
          {
            v28 = v8;
            swift_bridgeObjectRetain(v35);
            if (_CocoaArrayWrapper.endIndex.getter(v31))
            {
LABEL_15:
              if (v37)
                v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v35);
              else
                v22 = *(id *)(v35 + 32);
              v23 = v22;
              v24 = objc_msgSend(v8, "sourcePeerIdentifier");
              static Data._unconditionallyBridgeFromObjectiveC(_:)(v24);
              v26 = v25;

              v27 = objc_msgSend(v23, "peerIdentifier");
              static Data._unconditionallyBridgeFromObjectiveC(_:)(v27);

              __asm { BR              X10 }
            }
          }
          else
          {
            v20 = *(_QWORD *)(v32 + 16);
            v21 = v8;
            swift_bridgeObjectRetain(v35);
            if (v20)
              goto LABEL_15;
          }

          swift_bridgeObjectRelease(v35);
        }
        else
        {

        }
        v5 = v36;
      }
      while (v36 != v34);
    }
  }
  swift_bridgeObjectRelease(a1);
  return 0;
}

_QWORD *sub_100122AE4(uint64_t a1, void (*a2)(_QWORD *__return_ptr, _QWORD *, id))
{
  uint64_t v2;
  void **v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  _QWORD v24[6];
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[24];
  uint64_t v28;
  _QWORD v29[4];
  char v30;
  uint64_t v31;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return _swiftEmptyArrayStorage;
  v17 = swift_bridgeObjectRetain(a1);
  v3 = (void **)(v17 + 72);
  v4 = _swiftEmptyArrayStorage;
  do
  {
    v6 = *v3;
    v7 = *((_BYTE *)v3 - 8);
    v9 = (uint64_t)*(v3 - 3);
    v8 = (unint64_t)*(v3 - 2);
    v10 = (uint64_t)*(v3 - 4);
    v29[0] = *(v3 - 5);
    v29[1] = v10;
    v29[2] = v9;
    v29[3] = v8;
    v30 = v7;
    swift_bridgeObjectRetain(v10);
    sub_100063C8C(v9, v8);
    v11 = v6;
    a2(v24, v29, v11);
    v12 = v24[0];
    v13 = v24[1];
    v21 = v24[3];
    v22 = v24[2];
    v19 = v24[5];
    v20 = v24[4];
    v23 = v25;
    v31 = v26;
    swift_bridgeObjectRelease(v10);
    sub_100063CD0(v9, v8);

    sub_10006C218((uint64_t)v24, (uint64_t)v27, &qword_100346BD0);
    if (v28)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) == 0)
        v4 = sub_1001C51C4(0, v4[2] + 1, 1, v4);
      v15 = v4[2];
      v14 = v4[3];
      if (v15 >= v14 >> 1)
        v4 = sub_1001C51C4((_QWORD *)(v14 > 1), v15 + 1, 1, v4);
      v4[2] = v15 + 1;
      v5 = &v4[8 * v15];
      v5[4] = v12;
      v5[5] = v13;
      v5[6] = v22;
      v5[7] = v21;
      v5[8] = v20;
      v5[9] = v19;
      *((_BYTE *)v5 + 80) = v23 & 1;
      v5[11] = v31;
    }
    v3 += 6;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease(v17);
  return v4;
}

uint64_t sub_100122CB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;

  v4[40] = a3;
  v4[41] = v3;
  v4[38] = a1;
  v4[39] = a2;
  v5 = type metadata accessor for SESTLKShareData(0);
  v4[42] = v5;
  v6 = (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[43] = swift_task_alloc(v6);
  v4[44] = swift_task_alloc(v6);
  return swift_task_switch(sub_100122D24, v3, 0);
}

uint64_t sub_100122D24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  os_log_type_t v30;
  _BOOL4 v31;
  uint64_t *v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v1 = *(_QWORD *)(v0 + 320);
  v2 = *(_QWORD *)(v0 + 304);
  v3 = objc_msgSend(*(id *)(v0 + 312), "tlkShares");
  v4 = sub_10006C25C(0, &qword_100346BB8, SESTLKShare_ptr);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

  v6 = (_QWORD *)swift_task_alloc(32);
  v6[2] = v2;
  v6[3] = v1;
  v7 = (uint64_t)sub_1001F1CBC(sub_100124868, v6, v5);
  *(_QWORD *)(v0 + 360) = v7;
  swift_task_dealloc(v6);
  if ((unint64_t)v7 >> 62)
  {
    if (v7 < 0)
      v43 = v7;
    else
      v43 = v7 & 0xFFFFFFFFFFFFFF8;
    v8 = _CocoaArrayWrapper.endIndex.getter(v43);
  }
  else
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  *(_QWORD *)(v0 + 368) = v8;
  if (v8)
  {
    *(_QWORD *)(v0 + 376) = OBJC_IVAR____TtC10seserviced16SEKeySyncManager_logger;
    v9 = *(_QWORD *)(v0 + 360);
    if ((v9 & 0xC000000000000001) != 0)
      v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v9);
    else
      v10 = *(id *)(v9 + 32);
    v11 = v10;
    *(_QWORD *)(v0 + 384) = v10;
    *(_QWORD *)(v0 + 392) = 1;
    v12 = *(_QWORD *)(v0 + 336);
    v13 = type metadata accessor for PropertyListDecoder(0);
    v14 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
    v18 = PropertyListDecoder.init()(v14, v15, v16, v17);
    v19 = objc_msgSend(v11, "shareData");
    v20 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v22 = v21;

    v23 = sub_1000639EC(&qword_100346C38, type metadata accessor for SESTLKShareData, (uint64_t)&unk_10028AE14);
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v12, v20, v22, v12, v23);
    v38 = *(_QWORD *)(v0 + 344);
    v37 = *(_QWORD *)(v0 + 352);
    sub_100063CD0(v20, v22);
    swift_release(v18);
    sub_100124884(v38, v37, type metadata accessor for SESTLKShareData);
    v39 = (_QWORD *)swift_task_alloc(dword_100346B64);
    *(_QWORD *)(v0 + 400) = v39;
    *v39 = v0;
    v39[1] = sub_100123380;
    v40 = *(_QWORD *)(v0 + 328);
    v39[20] = v40;
    return swift_task_switch(sub_1001095A0, v40, 0);
  }
  else
  {
    v24 = *(_QWORD **)(v0 + 304);
    swift_bridgeObjectRelease(v7);
    sub_100124480(v24);
    v25 = sub_100124480(v24);
    v26 = Logger.logObject.getter(v25);
    v30 = static os_log_type_t.info.getter(v26, v27, v28, v29);
    v31 = os_log_type_enabled(v26, v30);
    v32 = *(uint64_t **)(v0 + 304);
    if (v31)
    {
      v33 = (uint8_t *)swift_slowAlloc(12, -1);
      v34 = swift_slowAlloc(32, -1);
      v44 = v34;
      *(_DWORD *)v33 = 136315138;
      v35 = *v32;
      v36 = v32[1];
      swift_bridgeObjectRetain(v36);
      *(_QWORD *)(v0 + 296) = sub_1001C56EC(v35, v36, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 296, v0 + 304, v33 + 4, v33 + 12);
      swift_bridgeObjectRelease(v36);
      sub_1001248C8(v32);
      sub_1001248C8(v32);
      _os_log_impl((void *)&_mh_execute_header, v26, v30, "No eligible shares for view %s", v33, 0xCu);
      swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v33, -1, -1);

    }
    else
    {

      sub_1001248C8(v32);
      sub_1001248C8(v32);
    }
    v42 = *(_QWORD *)(v0 + 344);
    swift_task_dealloc(*(_QWORD *)(v0 + 352));
    swift_task_dealloc(v42);
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
}

uint64_t sub_100123380(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 400);
  v3[51] = a1;
  v3[52] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[41];
    swift_bridgeObjectRelease(v3[45]);
    v6 = sub_100123C78;
    v7 = v5;
  }
  else
  {
    v7 = v3[41];
    v6 = sub_1001233FC;
  }
  return swift_task_switch(v6, v7, 0);
}

id sub_1001233FC()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  os_log_type_t v24;
  BOOL v25;
  void *v26;
  uint8_t *v27;
  _QWORD *v28;
  id v29;
  uint64_t v30;
  _QWORD *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id result;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t inited;
  unint64_t v57;
  Class isa;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;

  v1 = (void *)v0[51];
  v2 = v0[52];
  v3 = v0[44];
  v4 = (uint64_t *)(v3 + *(int *)(v0[42] + 24));
  v6 = *v4;
  v5 = v4[1];
  sub_100063C8C(*v4, v5);
  sub_1001345BC(v1, v6, v5, v3);
  v7 = v2;
  v64 = v0;
  if (!v2)
  {
    v17 = v0 + 15;
    v18 = v0 + 33;
    v19 = (void *)v0[48];
    swift_bridgeObjectRelease(v0[45]);
    sub_100063CD0(v6, v5);
    v20 = Logger.logObject.getter(v19);
    v24 = static os_log_type_t.info.getter(v20, v21, v22, v23);
    v25 = os_log_type_enabled(v20, v24);
    v26 = (void *)v0[48];
    if (v25)
    {
      v27 = (uint8_t *)swift_slowAlloc(12, -1);
      v28 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v27 = 138412290;
      v0[36] = v26;
      v29 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 36, v0 + 37, v27 + 4, v27 + 12);
      *v28 = v26;

      _os_log_impl((void *)&_mh_execute_header, v20, v24, "KeySyncManager: Successfully imported TLK from %@", v27, 0xCu);
      v30 = sub_100063D3C((uint64_t *)&unk_100346090);
      swift_arrayDestroy(v28, 1, v30);
      v31 = v28;
      v18 = v0 + 33;
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v27, -1, -1);
    }
    else
    {

    }
    v51 = (void *)v0[51];
    v52 = (void *)v0[48];
    v53 = v64[44];

    v54 = objc_opt_self(SESDAnalyticsLogger);
    v55 = sub_100063D3C(&qword_1003460E0);
    inited = swift_initStackObject(v55, v17);
    *(_OWORD *)(inited + 16) = xmmword_1002888E0;
    v64[33] = 0x726F706D496B6C74;
    v64[34] = 0xEB00000000646574;
    AnyHashable.init<A>(_:)(v18, &type metadata for String, &protocol witness table for String);
    *(_QWORD *)(inited + 96) = &type metadata for Int;
    *(_QWORD *)(inited + 72) = 1;
    v57 = sub_10017C368(inited);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v57);
    sub_10004A310(v54, isa);

    v0 = v64;
    sub_1001247E8(v53, type metadata accessor for SESTLKShareData);
    goto LABEL_16;
  }
  sub_100063CD0(v6, v5);
  swift_errorRetain(v2);
  v8 = swift_errorRetain(v2);
  v9 = Logger.logObject.getter(v8);
  v11 = static os_log_type_t.error.getter(v9, v10);
  if (os_log_type_enabled(v9, v11))
  {
    v12 = swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v65 = v13;
    *(_DWORD *)v12 = 136315138;
    swift_getErrorValue(v7, v0 + 35, v0 + 28);
    v14 = Error.localizedDescription.getter(v0[29], v0[30]);
    v16 = v15;
    *(_QWORD *)(v12 + 4) = sub_1001C56EC(v14, v15, &v65);
    swift_bridgeObjectRelease(v16);
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v9, v11, "Failed to import TLK - %s", (uint8_t *)v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);

  }
  else
  {

    swift_errorRelease(v7);
    swift_errorRelease(v7);
  }
  v32 = (void *)v0[51];
  v33 = (void *)v0[48];
  v34 = v0[44];
  sub_10011A034(0xFu, 0);

  swift_errorRelease(v7);
  sub_1001247E8(v34, type metadata accessor for SESTLKShareData);
  v35 = v0[49];
  if (v35 == v0[46])
  {
    swift_bridgeObjectRelease(v0[45]);
LABEL_16:
    v59 = v0[43];
    swift_task_dealloc(v0[44]);
    swift_task_dealloc(v59);
    return (id)((uint64_t (*)(BOOL))v0[1])(v7 == 0);
  }
  v36 = v0[45];
  if ((v36 & 0xC000000000000001) != 0)
    result = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v35, v36);
  else
    result = *(id *)(v36 + 8 * v35 + 32);
  v38 = result;
  v0[48] = result;
  v0[49] = v35 + 1;
  if (__OFADD__(v35, 1))
  {
    __break(1u);
  }
  else
  {
    v39 = v0[42];
    v40 = type metadata accessor for PropertyListDecoder(0);
    v41 = swift_allocObject(v40, *(unsigned int *)(v40 + 48), *(unsigned __int16 *)(v40 + 52));
    v45 = PropertyListDecoder.init()(v41, v42, v43, v44);
    v46 = objc_msgSend(v38, "shareData");
    v47 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v46);
    v49 = v48;

    v50 = sub_1000639EC(&qword_100346C38, type metadata accessor for SESTLKShareData, (uint64_t)&unk_10028AE14);
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v39, v47, v49, v39, v50);
    v61 = v0[43];
    v60 = v0[44];
    sub_100063CD0(v47, v49);
    swift_release(v45);
    sub_100124884(v61, v60, type metadata accessor for SESTLKShareData);
    v62 = (_QWORD *)swift_task_alloc(dword_100346B64);
    v0[50] = v62;
    *v62 = v0;
    v62[1] = sub_100123380;
    v63 = v0[41];
    v62[20] = v63;
    return (id)swift_task_switch(sub_1001095A0, v63, 0);
  }
  return result;
}

uint64_t sub_100123C78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 344);
  v2 = *(_QWORD *)(v0 + 352);

  sub_1001247E8(v2, type metadata accessor for SESTLKShareData);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_100123CD4(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unsigned __int8 *v19;
  int v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 *v34;
  uint64_t v35;
  unsigned int v36;
  char v37;
  uint64_t v38;
  unsigned __int8 v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  uint64_t v42;
  unsigned int v43;
  char v44;
  uint64_t v45;

  v10 = a2;
  v11 = result;
  v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0)
    LOBYTE(v12) = 1;
  v13 = 4 << v12;
  v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    result = sub_1001C5BE0(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      v15 = a2 >> 16;
      if (v14 != v13)
        goto LABEL_6;
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0)
    v16 = HIBYTE(a5) & 0xF;
  if (v16 < a2 >> 16)
    goto LABEL_95;
  result = String.UTF8View._foreignDistance(from:to:)(15, a2, a4, a5);
  v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    result = sub_1001C5BE0(v10, a4, a5);
    v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    result = sub_1001C5BE0(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0)
      goto LABEL_8;
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0)
    v17 = a4 & 0xFFFFFFFFFFFFLL;
  if (v17 < v10 >> 16)
    goto LABEL_91;
  if (v17 < a3 >> 16)
  {
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  result = String.UTF8View._foreignDistance(from:to:)(v10, a3, a4, a5);
LABEL_21:
  v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_90;
  }
  if (v18 < v15)
  {
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11)
    v19 = 0;
  v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        v31 = a6 + 48;
        v32 = a6 + 55;
        v33 = a6 + 87;
        if (a6 > 10)
        {
          v31 = 58;
        }
        else
        {
          v33 = 97;
          v32 = 65;
        }
        if (v19)
        {
          v24 = 0;
          v34 = v19 + 1;
          v35 = result - 1;
          do
          {
            v36 = *v34;
            if (v36 < 0x30 || v36 >= v31)
            {
              if (v36 < 0x41 || v36 >= v32)
              {
                v29 = 0;
                if (v36 < 0x61 || v36 >= v33)
                  return v29;
                v37 = -87;
              }
              else
              {
                v37 = -55;
              }
            }
            else
            {
              v37 = -48;
            }
            v38 = v24 * a6;
            if ((unsigned __int128)(v24 * (__int128)a6) >> 64 != (v24 * a6) >> 63)
              return 0;
            v24 = v38 + (v36 + v37);
            if (__OFADD__(v38, (v36 + v37)))
              return 0;
            ++v34;
            --v35;
          }
          while (v35);
          return v24;
        }
        return 0;
      }
      return 0;
    }
    goto LABEL_94;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      v39 = a6 + 48;
      v40 = a6 + 55;
      v41 = a6 + 87;
      if (a6 > 10)
      {
        v39 = 58;
      }
      else
      {
        v41 = 97;
        v40 = 65;
      }
      if (v19)
      {
        v42 = 0;
        do
        {
          v43 = *v19;
          if (v43 < 0x30 || v43 >= v39)
          {
            if (v43 < 0x41 || v43 >= v40)
            {
              v29 = 0;
              if (v43 < 0x61 || v43 >= v41)
                return v29;
              v44 = -87;
            }
            else
            {
              v44 = -55;
            }
          }
          else
          {
            v44 = -48;
          }
          v45 = v42 * a6;
          if ((unsigned __int128)(v42 * (__int128)a6) >> 64 != (v42 * a6) >> 63)
            return 0;
          v42 = v45 + (v43 + v44);
          if (__OFADD__(v45, (v43 + v44)))
            return 0;
          ++v19;
          --result;
        }
        while (result);
        return v45 + (v43 + v44);
      }
      return 0;
    }
    return 0;
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      v21 = a6 + 48;
      v22 = a6 + 55;
      v23 = a6 + 87;
      if (a6 > 10)
      {
        v21 = 58;
      }
      else
      {
        v23 = 97;
        v22 = 65;
      }
      if (v19)
      {
        v24 = 0;
        v25 = v19 + 1;
        v26 = result - 1;
        while (1)
        {
          v27 = *v25;
          if (v27 < 0x30 || v27 >= v21)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              v29 = 0;
              if (v27 < 0x61 || v27 >= v23)
                return v29;
              v28 = -87;
            }
            else
            {
              v28 = -55;
            }
          }
          else
          {
            v28 = -48;
          }
          v30 = v24 * a6;
          if ((unsigned __int128)(v24 * (__int128)a6) >> 64 != (v24 * a6) >> 63)
            return 0;
          v24 = v30 - (v27 + v28);
          if (__OFSUB__(v30, (v27 + v28)))
            return 0;
          ++v25;
          if (!--v26)
            return v24;
        }
      }
      return 0;
    }
    return 0;
  }
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
  return result;
}

unint64_t sub_1001240F8(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100305E50, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

__n128 *sub_100124140(__n128 *a1, __n128 *a2)
{
  initializeWithTake for SESDataTask.ErrorCode(a2, a1);
  return a2;
}

uint64_t sub_10012417C(uint64_t a1)
{
  sub_1001241AC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return a1;
}

uint64_t sub_1001241AC(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  unsigned int v3;

  v3 = a3 >> 6;
  if (v3 == 2)
    return swift_release(result);
  if (v3 <= 1)
    return swift_bridgeObjectRelease(result);
  return result;
}

_QWORD *sub_1001241D0(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return a1;
}

uint64_t *sub_1001241F8(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v12;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[6];
  v7 = a1[7];
  v8 = a1[8];
  v9 = a1[9];
  v10 = a1[10];
  v12 = a1[11];
  sub_100063CD0(*a1, a1[1]);
  sub_100063CD0(v2, v3);
  sub_100063CD0(v4, v5);
  sub_100063CD0(v6, v7);
  sub_100063CD0(v8, v9);
  sub_100063CD0(v10, v12);
  return a1;
}

uint64_t sub_1001242A0()
{
  return sub_1001251DC((void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_1001242AC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v2 = v0[4];
  v3 = v0[5];
  v4 = v0[6];
  v5 = (_QWORD *)swift_task_alloc(dword_100346B2C);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1000FAD2C;
  v6 = (_QWORD *)swift_task_alloc(dword_100346B4C);
  v5[2] = v6;
  *v6 = v5;
  v6[1] = sub_1000FAD2C;
  v6[11] = v4;
  v6[12] = v2;
  v6[10] = v3;
  return swift_task_switch(sub_1000FD238, v2, 0);
}

uint64_t sub_10012433C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_100346B3C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1000FAD2C;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_100346B38 + dword_100346B38))(a1, v4);
}

uint64_t sub_1001243AC(int a1, void *a2)
{
  uint64_t v2;

  return sub_10011054C(a1, a2, *(_QWORD **)(v2 + 16));
}

void sub_1001243B4(uint64_t *a1@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  sub_10011174C(a2, a1, *(_QWORD **)(v3 + 16), a3);
}

uint64_t sub_1001243BC(void **a1)
{
  uint64_t *v1;

  return sub_10011B7CC(a1, v1[2], v1[3], v1[4]) & 1;
}

uint64_t sub_1001243DC(void **a1)
{
  uint64_t *v1;

  return sub_10011B9C8(a1, v1[2], v1[3], v1[4]) & 1;
}

BOOL sub_1001243FC(uint64_t *a1)
{
  uint64_t v1;

  return sub_10011BEAC(a1, *(id *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_10012441C(void **a1)
{
  uint64_t v1;

  return sub_10011BF80(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), *(_QWORD *)(v1 + 40)) & 1;
}

unint64_t sub_10012443C()
{
  unint64_t result;

  result = qword_100346BC8;
  if (!qword_100346BC8)
  {
    result = swift_getWitnessTable(&unk_10028C8B8, &type metadata for KeySyncEvent);
    atomic_store(result, (unint64_t *)&qword_100346BC8);
  }
  return result;
}

_QWORD *sub_100124480(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;

  v2 = a1[2];
  v3 = a1[3];
  swift_bridgeObjectRetain(a1[1]);
  sub_100063C8C(v2, v3);
  return a1;
}

uint64_t sub_1001244C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v1 = type metadata accessor for SESPeerIdentityData(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 56) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));

  v6 = v0 + v4;
  sub_100063CD0(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  sub_100063CD0(*(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 24));
  sub_100063CD0(*(_QWORD *)(v6 + 32), *(_QWORD *)(v6 + 40));
  sub_100063CD0(*(_QWORD *)(v6 + 48), *(_QWORD *)(v6 + 56));
  v7 = v0 + v4 + *(int *)(v1 + 32);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  v10 = v6 + *(int *)(v1 + 36);
  v11 = (int *)type metadata accessor for CreationMetadata(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v11 - 1) + 48))(v10, 1, v11))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v10 + 8));
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10 + v11[5], v8);
    swift_bridgeObjectRelease(*(_QWORD *)(v10 + v11[6] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v10 + v11[7] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v10 + v11[8] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v10 + v11[9] + 8));
  }
  v12 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = (v12 + 23) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF8;
  sub_100063CD0(*(_QWORD *)(v0 + v12), *(_QWORD *)(v0 + v12 + 8));

  swift_release(*(_QWORD *)(v0 + v14));
  return swift_deallocObject(v0, v14 + 8, v3 | 7);
}

uint64_t sub_10012466C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;

  v3 = *(_QWORD *)(type metadata accessor for SESPeerIdentityData(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v1[3];
  v13 = v1[2];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (uint64_t)v1 + v4;
  v10 = *(_QWORD *)((char *)v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  v11 = (_QWORD *)swift_task_alloc(dword_100346BDC);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_1000FAD2C;
  return sub_10011D498(a1, v13, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_10012475C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100124788()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = (_QWORD *)swift_task_alloc(dword_100346BF4);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_1000FAD2C;
  v4[2] = v2;
  v4[3] = v3;
  return swift_task_switch(sub_10011DFA4, 0, 0);
}

uint64_t sub_1001247E8(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_100124824()
{
  unint64_t result;

  result = qword_100346C28;
  if (!qword_100346C28)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Substring, &type metadata for Substring);
    atomic_store(result, (unint64_t *)&qword_100346C28);
  }
  return result;
}

uint64_t sub_100124868(void **a1)
{
  uint64_t v1;

  return sub_10011B658(a1, *(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24)) & 1;
}

uint64_t sub_100124884(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

_QWORD *sub_1001248C8(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;

  v2 = a1[2];
  v3 = a1[3];
  swift_bridgeObjectRelease(a1[1]);
  sub_100063CD0(v2, v3);
  return a1;
}

uint64_t sub_100124908(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for Data._Representation - 1) + 32))(a2, a1);
  return a2;
}

uint64_t *sub_100124944(uint64_t *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = a1[5];
  v8 = a1[6];
  v9 = a1[7];
  a2(*a1, a1[1]);
  a2(v4, v5);
  a2(v6, v7);
  a2(v8, v9);
  return a1;
}

uint64_t sub_1001249BC(uint64_t a1)
{
  sub_100063C8C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_1001249E8(uint64_t a1)
{
  sub_100063CD0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return a1;
}

_QWORD *sub_100124A14(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v2 = a1[3];
  v3 = a1[4];
  v4 = a1[5];
  v5 = a1[6];
  v6 = a1[7];
  v7 = a1[8];
  v8 = a1[9];
  v9 = a1[10];
  v10 = a1[11];
  v12 = a1[12];
  v13 = a1[14];
  v14 = a1[13];
  v15 = a1[16];
  v18 = a1[17];
  v16 = a1[15];
  v17 = a1[18];
  sub_100063CD0(a1[1], a1[2]);
  sub_100063CD0(v2, v3);
  sub_100063CD0(v4, v5);
  sub_100063CD0(v6, v7);
  sub_100063CD0(v8, v9);
  sub_100063CD0(v10, v12);
  sub_100063CD0(v14, v13);
  sub_100063CD0(v16, v15);
  sub_100063CD0(v18, v17);
  return a1;
}

unint64_t sub_100124AF8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100346C68;
  if (!qword_100346C68)
  {
    v1 = sub_100063DC8(&qword_100346BB0);
    sub_1000639EC(&qword_100346C58, type metadata accessor for SESPeerIdentityData, (uint64_t)&unk_10028AD24);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100346C68);
  }
  return result;
}

uint64_t sub_100124B74(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100124BB8()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100124BDC()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100346C94);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1000FAD2C;
  return swift_task_switch(sub_100120848, 0, 0);
}

uint64_t sub_100124C34()
{
  return sub_1001251DC((void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_100124C44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_100346CBC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1000FAD2C;
  v4 = (_QWORD *)swift_task_alloc(dword_100346CD4);
  v3[2] = v4;
  *v4 = v3;
  v4[1] = sub_1000FAD2C;
  v4[2] = v2;
  return swift_task_switch(sub_1000FF3B8, 0, 0);
}

uint64_t sub_100124CC4(uint64_t a1)
{
  sub_100124EE0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64), (void (*)(void))sub_100063CD0);
  return a1;
}

uint64_t sub_100124D18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_100346CDC);
  *(_QWORD *)(v3 + 16) = v5;
  *v5 = v3;
  v5[1] = sub_1000FAD2C;
  v5[28] = a2;
  v5[29] = v2;
  return swift_task_switch(sub_10011EBA4, 0, 0);
}

uint64_t sub_100124D78()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  sub_100063CD0(v0[7], v0[8]);
  return swift_deallocObject(v0, 73, 7);
}

uint64_t sub_100124DB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_100346CEC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1000FAD2C;
  v3[30] = v2;
  v3[31] = v0 + 40;
  v3[32] = OBJC_IVAR____TtC10seserviced16SEKeySyncManager_keychainWrapper;
  return swift_task_switch(sub_10011EFE8, v2, 0);
}

uint64_t sub_100124E24(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_100346CF4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1000F9818;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_100346CF0 + dword_100346CF0))(a1, v4);
}

id sub_100124E94(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, void *a6)
{
  id result;

  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    sub_100063C8C(a3, a4);
    return a6;
  }
  return result;
}

uint64_t sub_100124EE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, void (*a10)(void))
{
  uint64_t result;

  if (a9 != 2)
  {
    a10();
    ((void (*)(uint64_t, uint64_t))a10)(a3, a4);
    ((void (*)(uint64_t, uint64_t))a10)(a5, a6);
    return ((uint64_t (*)(uint64_t, uint64_t))a10)(a7, a8);
  }
  return result;
}

void sub_100124F84(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, void *a6)
{
  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    sub_100063CD0(a3, a4);

  }
}

uint64_t sub_100124FD0()
{
  return sub_1001251DC((void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_100124FDC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v2 = v0[4];
  v3 = v0[5];
  v4 = v0[6];
  v5 = (_QWORD *)swift_task_alloc(dword_100346D14);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1000FAD2C;
  v6 = (_QWORD *)swift_task_alloc(dword_100346B4C);
  v5[2] = v6;
  *v6 = v5;
  v6[1] = sub_1000FAD2C;
  v6[11] = v4;
  v6[12] = v2;
  v6[10] = v3;
  return swift_task_switch(sub_1000FD238, v2, 0);
}

uint64_t sub_10012506C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100125090()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100346D24);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1000FAD2C;
  return swift_task_switch(sub_1000FBAAC, 0, 0);
}

uint64_t sub_1001250E8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10012510C(uint64_t a1)
{
  uint64_t v1;

  return sub_1000FC524(a1, v1);
}

uint64_t sub_100125114(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100125124(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10012512C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000FCFF0(a1, a2, v2);
}

uint64_t sub_100125138()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100125164(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_100346D3C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1000FAD2C;
  return sub_1000FD1A4(a1, v4, v5, v6);
}

uint64_t sub_1001251D0()
{
  return sub_1001251DC((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1001251DC(void (*a1)(_QWORD))
{
  _QWORD *v1;

  swift_unknownObjectRelease(v1[2]);
  swift_release(v1[4]);
  a1(v1[6]);
  return swift_deallocObject(v1, 56, 7);
}

uint64_t sub_10012521C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  uint64_t *v4;

  v2 = swift_task_alloc(dword_100346D54);
  v3 = *(_OWORD *)(v0 + 40);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_1000FAD2C;
  *(_OWORD *)(v2 + 16) = v3;
  v4 = (uint64_t *)swift_task_alloc(dword_10034962C);
  *(_QWORD *)(v2 + 32) = v4;
  *v4 = v2;
  v4[1] = (uint64_t)sub_1000FD11C;
  return sub_1001BB5A4();
}

uint64_t sub_100125298@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1000FC664();
  *a1 = result;
  return result;
}

uint64_t sub_1001252BC()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 48));

  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1001252F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v2 = swift_task_alloc(dword_100346D6C);
  v3 = *(_OWORD *)(v0 + 32);
  v4 = *(_OWORD *)(v0 + 48);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_1000F9818;
  *(_OWORD *)(v2 + 16) = v3;
  *(_OWORD *)(v2 + 32) = v4;
  return swift_task_switch(sub_10011FE9C, 0, 0);
}

unint64_t sub_100125358()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100346D80;
  if (!qword_100346D80)
  {
    v1 = sub_10006C25C(255, &qword_100346D78, NSDictionary_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100346D80);
  }
  return result;
}

uint64_t sub_1001253B0(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 40))(a2, a1);
  return a2;
}

uint64_t sub_1001253EC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t a9, char a10)
{
  uint64_t result;

  if (a10 != 2)
  {
    sub_100063CD0(a2, a3);
    sub_100063CD0(a4, a5);
    sub_100063CD0(a6, a7);
    return sub_100063CD0(a8, a9);
  }
  return result;
}

uint64_t destroy for SEKeySyncManager.ViewConfiguration(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  return sub_100063CD0(a1[2], a1[3]);
}

uint64_t initializeWithCopy for SEKeySyncManager.ViewConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain(v4);
  sub_100063C8C(v5, v6);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t assignWithCopy for SEKeySyncManager.ViewConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  sub_100063C8C(v6, v7);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  sub_100063CD0(v8, v9);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

__n128 initializeWithTake for SEKeySyncManager.ViewConfiguration(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for SEKeySyncManager.ViewConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_100063CD0(v6, v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for SEKeySyncManager.ViewConfiguration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 33))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SEKeySyncManager.ViewConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SEKeySyncManager.ViewConfiguration()
{
  return &type metadata for SEKeySyncManager.ViewConfiguration;
}

unint64_t sub_100125664()
{
  unint64_t result;

  result = qword_100346D88;
  if (!qword_100346D88)
  {
    result = swift_getWitnessTable(&unk_100289F34, &type metadata for SEKeySyncManager.ViewConfiguration);
    atomic_store(result, (unint64_t *)&qword_100346D88);
  }
  return result;
}

id sub_1001256C0()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SECNotificationListener()), "init");
  qword_100354C58 = (uint64_t)result;
  return result;
}

id sub_1001257BC()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  void *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  char *v37;
  void (**v38)(uint64_t *);
  char *v39;
  id v40;
  id v41;
  uint64_t v42;
  void *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  char *v53;
  char *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  objc_class *ObjectType;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD aBlock[5];
  uint64_t v68;
  objc_super v69;

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType(v0);
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v64 = *(_QWORD *)(v2 - 8);
  v65 = v2;
  __chkstk_darwin(v2, v3);
  v63 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = type metadata accessor for DispatchTimeInterval(0);
  v57 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59, v5);
  v55 = (uint64_t *)((char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v58 = type metadata accessor for Logger(0);
  v56 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58, v7);
  v54 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  v17 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DispatchQoS(0);
  v61 = *(_QWORD *)(v18 - 8);
  v62 = v18;
  __chkstk_darwin(v18, v19);
  v21 = (char *)&v52 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = &v1[OBJC_IVAR____TtC10seserviced23SECNotificationListener_delegate];
  *(_OWORD *)v22 = 0u;
  *((_OWORD *)v22 + 1) = 0u;
  *((_QWORD *)v22 + 4) = 0;
  v23 = OBJC_IVAR____TtC10seserviced23SECNotificationListener_queue;
  sub_100071AEC();
  v53 = v1;
  static DispatchQoS.default.getter();
  (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v17, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v13);
  aBlock[0] = _swiftEmptyArrayStorage;
  v24 = sub_1000639EC((unint64_t *)&qword_100346E08, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v25 = sub_100063D3C(&qword_100346E10);
  v26 = sub_100127660((unint64_t *)&qword_100346E18, &qword_100346E10);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v25, v26, v9, v24);
  *(_QWORD *)&v1[v23] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000002CLL, 0x80000001002BD0B0, v21, v12, v17, 0);
  if (qword_1003445E8 != -1)
    swift_once(&qword_1003445E8, sub_100126884);
  v27 = v58;
  v28 = sub_10009673C(v58, (uint64_t)qword_100346D90);
  v29 = v56;
  v30 = v54;
  (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v54, v28, v27);
  v31 = *(void **)&v1[v23];
  v32 = v55;
  *v55 = 1;
  v33 = v57;
  v34 = v59;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v57 + 104))(v32, enum case for DispatchTimeInterval.seconds(_:), v59);
  v35 = sub_100063D3C(&qword_100346E20);
  v36 = (_QWORD *)swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
  v37 = (char *)v36 + *(_QWORD *)(*v36 + 136);
  *(_QWORD *)v37 = 0;
  v37[8] = 1;
  v36[2] = 0xD000000000000017;
  v36[3] = 0x80000001002BCF20;
  v36[4] = v31;
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v33 + 32))((uint64_t)v36 + qword_10034A0C8, v32, v34);
  v38 = (void (**)(uint64_t *))((char *)v36 + qword_10034A0D0);
  *v38 = sub_100127078;
  v38[1] = 0;
  (*(void (**)(uint64_t, char *, uint64_t))(v29 + 32))((uint64_t)v36 + qword_10034A0D8, v30, v27);
  v39 = v53;
  *(_QWORD *)&v53[OBJC_IVAR____TtC10seserviced23SECNotificationListener_coealescer] = v36;
  v40 = v31;

  v69.receiver = v39;
  v69.super_class = ObjectType;
  v41 = objc_msgSendSuper2(&v69, "init");
  v42 = swift_allocObject(&unk_100309B58, 24, 7);
  *(_QWORD *)(v42 + 16) = v41;
  aBlock[4] = sub_1001276C4;
  v68 = v42;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100071C98;
  aBlock[3] = &unk_100309B70;
  v43 = _Block_copy(aBlock);
  v44 = v41;
  static DispatchQoS.unspecified.getter(v44);
  v66 = _swiftEmptyArrayStorage;
  v45 = sub_1000639EC((unint64_t *)&qword_100344A20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v46 = sub_100063D3C((uint64_t *)&unk_100346200);
  v47 = sub_100127660((unint64_t *)&qword_100344A30, (uint64_t *)&unk_100346200);
  v48 = v63;
  v49 = v46;
  v50 = v65;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v66, v49, v47, v65, v45);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v21, v48, v43);
  _Block_release(v43);

  (*(void (**)(char *, uint64_t))(v64 + 8))(v48, v50);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v21, v62);
  swift_release(v68);
  return v44;
}

void sub_100125D20(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  void *v10;
  NSString v11;
  unsigned __int8 v12;
  NSString v13;
  unsigned __int8 v14;
  NSString v15;
  NSString v16;
  NSString v17;
  NSString v18;
  uint64_t v19;
  os_log_type_t v20;
  uint8_t *v21;
  NSObject *oslog;

  if (qword_1003445E8 != -1)
    swift_once(&qword_1003445E8, sub_100126884);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10009673C(v2, (uint64_t)qword_100346D90);
  v4 = Logger.logObject.getter(v3);
  v8 = static os_log_type_t.info.getter(v4, v5, v6, v7);
  if (os_log_type_enabled(v4, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v8, "Starting SECNotificationListener", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  sub_1001270C0();
  v10 = (void *)objc_opt_self(SESDarwinNotificationMonitor);
  v11 = String._bridgeToObjectiveC()();
  v12 = objc_msgSend(v10, "registerDelegate:forEvent:", a1, v11);

  v13 = String._bridgeToObjectiveC()();
  v14 = objc_msgSend(v10, "registerDelegate:forEvent:", a1, v13);

  v15 = String._bridgeToObjectiveC()();
  objc_msgSend(v10, "registerDelegate:forEvent:", a1, v15);

  v16 = String._bridgeToObjectiveC()();
  objc_msgSend(v10, "registerDelegate:forEvent:", a1, v16);

  v17 = String._bridgeToObjectiveC()();
  objc_msgSend(v10, "registerDelegate:forEvent:", a1, v17);

  v18 = String._bridgeToObjectiveC()();
  objc_msgSend(v10, "registerDelegate:forEvent:", a1, v18);

  if ((v12 & 1) == 0 && (v14 & 1) == 0)
  {
    oslog = Logger.logObject.getter(v19);
    v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v20, "No pending notifications", v21, 2u);
      swift_slowDealloc(v21, -1, -1);
    }

  }
}

void sub_100126020(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  swift_bridgeObjectRetain(a2);
  v4 = sub_1001273AC(a1, a2);
  if ((v5 & 1) != 0)
  {
    if (qword_1003445E8 != -1)
      swift_once(&qword_1003445E8, sub_100126884);
    v6 = type metadata accessor for Logger(0);
    sub_10009673C(v6, (uint64_t)qword_100346D90);
    v7 = swift_bridgeObjectRetain_n(a2, 2);
    v8 = Logger.logObject.getter(v7);
    v10 = static os_log_type_t.error.getter(v8, v9);
    if (os_log_type_enabled(v8, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = swift_slowAlloc(32, -1);
      v14 = v12;
      *(_DWORD *)v11 = 136315138;
      swift_bridgeObjectRetain(a2);
      v13 = sub_1001C56EC(a1, a2, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v11 + 4, v11 + 12);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v8, v10, "Ignoring unexpected darwin event %s", v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
  }
  else
  {
    sub_1001261E8(v4);
  }
}

uint64_t sub_1001261E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  _QWORD *v21;
  _QWORD aBlock[5];
  uint64_t v23;

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_QWORD *)(v1 + 32);
  v13 = swift_allocObject(&unk_100309AE0, 32, 7);
  *(_QWORD *)(v13 + 16) = v1;
  *(_QWORD *)(v13 + 24) = a1;
  aBlock[4] = sub_100127620;
  v23 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100071C98;
  aBlock[3] = &unk_100309AF8;
  v14 = _Block_copy(aBlock);
  v15 = swift_retain(v1);
  static DispatchQoS.unspecified.getter(v15);
  v21 = _swiftEmptyArrayStorage;
  v16 = sub_1000639EC((unint64_t *)&qword_100344A20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v17 = sub_100063D3C((uint64_t *)&unk_100346200);
  v18 = sub_100127660((unint64_t *)&qword_100344A30, (uint64_t *)&unk_100346200);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v17, v18, v3, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v7, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  return swift_release(v23);
}

_QWORD *sub_100126518@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_100126524(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *sub_10012652C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *sub_100126540@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_QWORD *sub_100126554@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_100126568(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *sub_100126598@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_1001265C4@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *sub_1001265E8(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_1001265FC(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

_QWORD *sub_100126610(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *sub_100126624@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_100126638(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_10012664C(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_100126660(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_100126674()
{
  _QWORD *v0;

  return *v0 == 0;
}

uint64_t sub_100126684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

_QWORD *sub_10012669C(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

uint64_t sub_1001266B0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = sub_100197C8C();
  result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

uint64_t type metadata accessor for SECNotificationListener()
{
  return objc_opt_self(_TtC10seserviced23SECNotificationListener);
}

ValueMetadata *type metadata accessor for SECNotificationListener.SECNotificationEvent()
{
  return &type metadata for SECNotificationListener.SECNotificationEvent;
}

unint64_t sub_100126768()
{
  unint64_t result;

  result = qword_100346DE8;
  if (!qword_100346DE8)
  {
    result = swift_getWitnessTable(&unk_10028A038, &type metadata for SECNotificationListener.SECNotificationEvent);
    atomic_store(result, (unint64_t *)&qword_100346DE8);
  }
  return result;
}

unint64_t sub_1001267B0()
{
  unint64_t result;

  result = qword_100346DF0;
  if (!qword_100346DF0)
  {
    result = swift_getWitnessTable(&unk_10028A008, &type metadata for SECNotificationListener.SECNotificationEvent);
    atomic_store(result, (unint64_t *)&qword_100346DF0);
  }
  return result;
}

unint64_t sub_1001267F8()
{
  unint64_t result;

  result = qword_100346DF8;
  if (!qword_100346DF8)
  {
    result = swift_getWitnessTable(&unk_10028A128, &type metadata for SECNotificationListener.SECNotificationEvent);
    atomic_store(result, (unint64_t *)&qword_100346DF8);
  }
  return result;
}

unint64_t sub_100126840()
{
  unint64_t result;

  result = qword_100346E00;
  if (!qword_100346E00)
  {
    result = swift_getWitnessTable(&unk_10028A060, &type metadata for SECNotificationListener.SECNotificationEvent);
    atomic_store(result, (unint64_t *)&qword_100346E00);
  }
  return result;
}

uint64_t sub_100126884()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000980F8(v0, qword_100346D90);
  sub_10009673C(v0, (uint64_t)qword_100346D90);
  return Logger.init(subsystem:category:)(0xD000000000000014);
}

void sub_100126900(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  id v24;
  char v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  void (*v41)(char *, uint64_t);
  char *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t aBlock[5];
  _QWORD *v64;

  v2 = v1;
  v61 = a1;
  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v60 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v58 = *(_QWORD *)(v7 - 8);
  v59 = v7;
  __chkstk_darwin(v7, v8);
  v57 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchTime(0);
  v55 = *(_QWORD *)(v10 - 8);
  v56 = v10;
  v12 = __chkstk_darwin(v10, v11);
  v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v15);
  v17 = (char *)&v51 - v16;
  v18 = type metadata accessor for DispatchPredicate(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18, v20);
  v22 = (uint64_t *)((char *)&v51 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v23 = (void *)v2[4];
  *v22 = v23;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v19 + 104))(v22, enum case for DispatchPredicate.onQueue(_:), v18);
  v24 = v23;
  v25 = _dispatchPreconditionTest(_:)(v22);
  (*(void (**)(_QWORD *, uint64_t))(v19 + 8))(v22, v18);
  if ((v25 & 1) != 0)
  {
    v26 = swift_retain_n(v2, 3);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.debug.getter();
    v29 = os_log_type_enabled(v27, v28);
    v53 = v24;
    v54 = v4;
    if (v29)
    {
      v30 = swift_slowAlloc(22, -1);
      v52 = v3;
      v31 = v30;
      v32 = swift_slowAlloc(64, -1);
      aBlock[0] = v32;
      *(_DWORD *)v31 = 136315394;
      v33 = v2[2];
      v34 = v2[3];
      swift_bridgeObjectRetain(v34);
      v62 = (_QWORD *)sub_1001C56EC(v33, v34, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, aBlock, v31 + 4, v31 + 12);
      swift_release(v2);
      swift_bridgeObjectRelease(v34);
      *(_WORD *)(v31 + 12) = 2080;
      v35 = *((unsigned __int8 *)v2 + *(_QWORD *)(*v2 + 136) + 8);
      swift_release(v2);
      if (v35)
        v36 = 1819047278;
      else
        v36 = 0x676E6974696177;
      if (v35)
        v37 = 0xE400000000000000;
      else
        v37 = 0xE700000000000000;
      v62 = (_QWORD *)sub_1001C56EC(v36, v37, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, aBlock, v31 + 14, v31 + 22);
      swift_release(v2);
      swift_bridgeObjectRelease(v37);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Notify for client %s in state %s", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy(v32, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1, -1);
      v38 = v31;
      v3 = v52;
      swift_slowDealloc(v38, -1, -1);
    }
    else
    {
      swift_release_n(v2, 3);
    }

    v40 = (char *)v2 + *(_QWORD *)(*v2 + 136);
    if (v40[8] == 1)
    {
      *(_QWORD *)v40 = v61;
      v40[8] = 0;
      static DispatchTime.now()(v39);
      DispatchTime.advanced(by:)((char *)v2 + qword_10034A0C8);
      v41 = *(void (**)(char *, uint64_t))(v55 + 8);
      v42 = v14;
      v43 = v56;
      v41(v42, v56);
      aBlock[4] = (uint64_t)sub_10012765C;
      v64 = v2;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_100071C98;
      aBlock[3] = (uint64_t)&unk_100309B20;
      v44 = _Block_copy(aBlock);
      v45 = swift_retain(v2);
      v46 = v57;
      static DispatchQoS.unspecified.getter(v45);
      v62 = _swiftEmptyArrayStorage;
      v47 = sub_1000639EC((unint64_t *)&qword_100344A20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v48 = sub_100063D3C((uint64_t *)&unk_100346200);
      v49 = sub_100127660((unint64_t *)&qword_100344A30, (uint64_t *)&unk_100346200);
      v50 = v60;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v62, v48, v49, v3, v47);
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v17, v46, v50, v44);
      _Block_release(v44);
      (*(void (**)(char *, uint64_t))(v54 + 8))(v50, v3);
      (*(void (**)(char *, uint64_t))(v58 + 8))(v46, v59);
      v41(v17, v43);
      swift_release(v64);
    }
    else
    {
      *(_QWORD *)v40 |= v61;
      v40[8] = 0;
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100126DEC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (uint64_t *)((char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = (void *)v1[4];
  *v6 = v7;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) != 0)
  {
    v9 = swift_retain_n(v1, 2);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      v19 = v13;
      *(_DWORD *)v12 = 136315138;
      v14 = v1[2];
      v15 = v1[3];
      swift_bridgeObjectRetain(v15);
      v18 = sub_1001C56EC(v14, v15, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v12 + 4, v12 + 12);
      swift_release_n(v1, 2);
      swift_bridgeObjectRelease(v15);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Firing %s", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }
    else
    {
      swift_release_n(v1, 2);
    }

    v16 = (char *)v1 + *(_QWORD *)(*v1 + 136);
    if ((v16[8] & 1) == 0)
    {
      v19 = *(_QWORD *)v16;
      result = (*(uint64_t (**)(uint64_t *))((char *)v1 + qword_10034A0D0))(&v19);
      *(_QWORD *)v16 = 0;
      v16[8] = 1;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000001ALL, 0x80000001002BCF70, "seserviced/TriggerCoalesce.swift", 32, 2, 79, 0);
  __break(1u);
  return result;
}

void sub_100127078(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if (qword_1003445E0 != -1)
    swift_once(&qword_1003445E0, sub_1001256C0);
  sub_100127298(v1);
}

uint64_t sub_1001270C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  id v4;
  id v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v0 = type metadata accessor for SECDefaultAppReconciler(0);
  __chkstk_darwin(v0, v1);
  v3 = (uint64_t *)((char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for TCCContext(0)), "init");
  *v3 = v4;
  v5 = v4;
  Logger.init(subsystem:category:)(0xD000000000000014);
  sub_1001B0D78();
  v6 = type metadata accessor for SECSettingsPaneReconciler(0);
  v7 = (_QWORD *)swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  v8 = v5;
  Logger.init(subsystem:category:)(0xD000000000000014);
  v7[2] = v8;
  v7[3] = sub_1001ECE0C();
  sub_10013EF2C();

  swift_setDeallocating(v7);
  swift_release(v7[3]);
  v9 = (char *)v7 + OBJC_IVAR____TtC10seserviced25SECSettingsPaneReconciler_logger;
  v10 = type metadata accessor for Logger(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  swift_deallocClassInstance(v7, *(unsigned int *)(*v7 + 48), *(unsigned __int16 *)(*v7 + 52));

  return sub_10012725C((uint64_t)v3);
}

uint64_t sub_10012725C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SECDefaultAppReconciler(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_100127298(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;

  if (qword_1003445E8 != -1)
    swift_once(&qword_1003445E8, sub_100126884);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10009673C(v2, (uint64_t)qword_100346D90);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v6 = 134217984;
    v7 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v7, &v8, v6 + 4, v6 + 12);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Received notification %ld", v6, 0xCu);
    swift_slowDealloc(v6, -1, -1);
  }

  if ((a1 & 0x3F) != 0)
    sub_1001270C0();
}

uint64_t sub_1001273AC(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0xD00000000000002CLL && a2 == 0x80000001002BCF90)
  {
    v4 = 0x80000001002BCF90;
LABEL_6:
    swift_bridgeObjectRelease(v4);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000002CLL, 0x80000001002BCF90, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
    goto LABEL_6;
  }
  if (a1 == 0xD00000000000001CLL && a2 == 0x80000001002BCFC0)
  {
    v6 = 0x80000001002BCFC0;
LABEL_12:
    swift_bridgeObjectRelease(v6);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001CLL, 0x80000001002BCFC0, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_12;
  }
  if (a1 == 0xD00000000000002ELL && a2 == 0x80000001002BCFE0)
  {
    v7 = 0x80000001002BCFE0;
LABEL_18:
    swift_bridgeObjectRelease(v7);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000002ELL, 0x80000001002BCFE0, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_18;
  }
  if (a1 == 0xD00000000000002FLL)
  {
    v8 = 0x80000001002BD010;
    if (a2 == 0x80000001002BD010)
      goto LABEL_23;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000002FLL, 0x80000001002BD010, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_23:
    swift_bridgeObjectRelease(v8);
    return 8;
  }
  if (a1 == 0xD000000000000030 && a2 == 0x80000001002BD040)
  {
    v9 = 0x80000001002BD040;
LABEL_29:
    swift_bridgeObjectRelease(v9);
    return 16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000030, 0x80000001002BD040, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_29;
  }
  if (a1 == 0xD00000000000002FLL && a2 == 0x80000001002BD080)
  {
    swift_bridgeObjectRelease(0x80000001002BD080);
    return 32;
  }
  v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000002FLL, 0x80000001002BD080, a1, a2, 0);
  swift_bridgeObjectRelease(a2);
  if ((v10 & 1) != 0)
    return 32;
  return 0;
}

uint64_t sub_1001275FC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100127620()
{
  uint64_t v0;

  sub_100126900(*(_QWORD *)(v0 + 24));
}

uint64_t sub_100127644(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100127654(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100127660(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100063DC8(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001276A0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1001276C4()
{
  uint64_t v0;

  sub_100125D20(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1001276CC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100063D3C(&qword_100346E28);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_100127720(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t (*v40)(char *, uint64_t, uint64_t);
  int v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  uint64_t v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char v61;
  void (*v62)(char *, uint64_t);
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char v69[24];
  _BYTE v70[24];

  v3 = v2;
  v68 = a2;
  v5 = type metadata accessor for UUID(0);
  v67 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v6);
  v64 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100063D3C(&qword_100346F80);
  __chkstk_darwin(v8, v9);
  v66 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100063D3C((uint64_t *)&unk_1003465E0);
  v13 = __chkstk_darwin(v11, v12);
  v65 = (uint64_t)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13, v15);
  v18 = (char *)&v63 - v17;
  __chkstk_darwin(v16, v19);
  v21 = (char *)&v63 - v20;
  v22 = type metadata accessor for DispatchPredicate(0);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22, v24);
  v26 = (uint64_t *)((char *)&v63 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v27 = qword_100354EE8;
  *v26 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v23 + 104))(v26, enum case for DispatchPredicate.onQueue(_:), v22);
  v28 = (id)v27;
  LOBYTE(v27) = _dispatchPreconditionTest(_:)(v26);
  v29 = (*(uint64_t (**)(_QWORD *, uint64_t))(v23 + 8))(v26, v22);
  if ((v27 & 1) == 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  v31 = *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC10seserviced5DSKSE_isRunning);
  v32 = Logger.logObject.getter(v29);
  v36 = v32;
  if (v31 == 1)
  {
    v37 = static os_log_type_t.info.getter(v32, v33, v34, v35);
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Queuing SE request", v38, 2u);
      swift_slowDealloc(v38, -1, -1);
    }

    if ((a1 & 1) == 0
      || (v39 = v3 + OBJC_IVAR____TtC10seserviced5DSKSE_ownerIdentifier,
          swift_beginAccess(v3 + OBJC_IVAR____TtC10seserviced5DSKSE_ownerIdentifier, v69, 0, 0),
          sub_1000E4E48(v39, (uint64_t)v21, (uint64_t *)&unk_1003465E0),
          v40 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v67 + 48),
          v41 = v40(v21, 1, v5),
          sub_100096700((uint64_t)v21, (uint64_t *)&unk_1003465E0),
          v41 == 1))
    {
LABEL_9:
      v42 = (_QWORD *)(v3 + OBJC_IVAR____TtC10seserviced5DSKSE_pendingRequestQueue);
      swift_beginAccess(v3 + OBJC_IVAR____TtC10seserviced5DSKSE_pendingRequestQueue, v70, 33, 0);
      v5 = v68;
      v43 = swift_retain(v68);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v43);
      a1 = *(_QWORD *)((*v42 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v30 = *(_QWORD *)((*v42 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (a1 < v30 >> 1)
      {
LABEL_10:
        v44 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(a1, v5);
        specialized Array._endMutation()(v44);
        swift_endAccess(v70);
        sub_10012988C();
        return;
      }
LABEL_29:
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, a1 + 1, 1);
      goto LABEL_10;
    }
    v47 = *(_QWORD *)(v68 + OBJC_IVAR____TtC10seserviced9SERequest_peer);
    if (v47)
    {
      v48 = v67;
      (*(void (**)(char *, uint64_t, uint64_t))(v67 + 16))(v18, v47 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier, v5);
      v49 = 0;
      v50 = (uint64_t)v66;
    }
    else
    {
      v49 = 1;
      v50 = (uint64_t)v66;
      v48 = v67;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v48 + 56))(v18, v49, 1, v5);
    v51 = v50 + *(int *)(v8 + 48);
    sub_1000E4E48((uint64_t)v18, v50, (uint64_t *)&unk_1003465E0);
    sub_1000E4E48(v39, v51, (uint64_t *)&unk_1003465E0);
    if (v40((char *)v50, 1, v5) == 1)
    {
      sub_100096700((uint64_t)v18, (uint64_t *)&unk_1003465E0);
      if (v40((char *)v51, 1, v5) == 1)
      {
        sub_100096700(v50, (uint64_t *)&unk_1003465E0);
        goto LABEL_9;
      }
    }
    else
    {
      v52 = v65;
      sub_1000E4E48(v50, v65, (uint64_t *)&unk_1003465E0);
      if (v40((char *)v51, 1, v5) != 1)
      {
        v58 = v67;
        v59 = v64;
        (*(void (**)(char *, uint64_t, uint64_t))(v67 + 32))(v64, v51, v5);
        v60 = sub_1000639EC((unint64_t *)&qword_100346150, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v61 = dispatch thunk of static Equatable.== infix(_:_:)(v52, v59, v5, v60);
        v62 = *(void (**)(char *, uint64_t))(v58 + 8);
        v62(v59, v5);
        sub_100096700((uint64_t)v18, (uint64_t *)&unk_1003465E0);
        v62((char *)v52, v5);
        v53 = sub_100096700(v50, (uint64_t *)&unk_1003465E0);
        if ((v61 & 1) != 0)
          goto LABEL_9;
        goto LABEL_23;
      }
      sub_100096700((uint64_t)v18, (uint64_t *)&unk_1003465E0);
      (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v52, v5);
    }
    v53 = sub_100096700(v50, &qword_100346F80);
LABEL_23:
    v54 = Logger.logObject.getter(v53);
    v56 = static os_log_type_t.error.getter(v54, v55);
    if (os_log_type_enabled(v54, v56))
    {
      v57 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v57 = 0;
      _os_log_impl((void *)&_mh_execute_header, v54, v56, "SE is busy for another client", v57, 2u);
      swift_slowDealloc(v57, -1, -1);
    }

    (*(void (**)(uint64_t, uint64_t))(v68 + 32))(3, 1);
    return;
  }
  v45 = static os_log_type_t.error.getter(v32, v33);
  if (os_log_type_enabled(v36, v45))
  {
    v46 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v46 = 0;
    _os_log_impl((void *)&_mh_execute_header, v36, v45, "Not running", v46, 2u);
    swift_slowDealloc(v46, -1, -1);
  }

}

void sub_100127D5C(char *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  void *v29;
  void (*v30)(_QWORD);
  id v31;
  uint64_t v32;
  void (*v33)(_QWORD *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  os_log_type_t v39;
  uint8_t *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  id v48;
  uint64_t *v49;
  uint64_t v50;
  NSObject *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  os_log_type_t v55;
  uint64_t v56;
  id v57;
  void *v58;
  id v59;
  void *v60;
  void (*v61)(char *, uint64_t, uint64_t, void (*)(_QWORD, _QWORD));
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t (*v70)(uint64_t, uint64_t, void (*)(_QWORD, _QWORD));
  uint64_t v71;
  void (*v72)(_QWORD *, uint64_t);
  char *v73;
  char *v74;
  unsigned int v75;
  void (*v76)(_QWORD *, _QWORD, uint64_t);
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char v80[24];
  _BYTE v81[24];

  v2 = v1;
  v78 = a1;
  v77 = type metadata accessor for UUID(0);
  v79 = *(_QWORD *)(v77 - 8);
  __chkstk_darwin(v77, v3);
  v73 = (char *)&v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100063D3C(&qword_100346F80);
  __chkstk_darwin(v5, v6);
  v8 = (uint64_t)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100063D3C((uint64_t *)&unk_1003465E0);
  v11 = __chkstk_darwin(v9, v10);
  v74 = (char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11, v13);
  v16 = (char *)&v69 - v15;
  v18 = __chkstk_darwin(v14, v17);
  v20 = (char *)&v69 - v19;
  __chkstk_darwin(v18, v21);
  v23 = (uint64_t)&v69 - v22;
  v24 = type metadata accessor for DispatchPredicate(0);
  v25 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24, v26);
  v28 = (uint64_t *)((char *)&v69 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v29 = (void *)qword_100354EE8;
  *v28 = qword_100354EE8;
  v30 = *(void (**)(_QWORD))(v25 + 104);
  v75 = enum case for DispatchPredicate.onQueue(_:);
  v76 = (void (*)(_QWORD *, _QWORD, uint64_t))v30;
  v30(v28);
  v31 = v29;
  v32 = _dispatchPreconditionTest(_:)(v28);
  v33 = *(void (**)(_QWORD *, uint64_t))(v25 + 8);
  v34 = ((uint64_t (*)(_QWORD *, uint64_t))v33)(v28, v24);
  if ((v32 & 1) == 0)
  {
    __break(1u);
    goto LABEL_37;
  }
  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC10seserviced5DSKSE_isRunning) != 1)
  {
    v37 = Logger.logObject.getter(v34);
    v39 = static os_log_type_t.error.getter(v37, v38);
    if (!os_log_type_enabled(v37, v39))
    {
LABEL_14:

      return;
    }
    v40 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v40 = 0;
    v41 = "Not running";
LABEL_13:
    _os_log_impl((void *)&_mh_execute_header, v37, v39, v41, v40, 2u);
    swift_slowDealloc(v40, -1, -1);
    goto LABEL_14;
  }
  if (!*(_QWORD *)(v2 + OBJC_IVAR____TtC10seserviced5DSKSE_secureElementHandle))
    return;
  v71 = OBJC_IVAR____TtC10seserviced5DSKSE_secureElementHandle;
  v72 = v33;
  v32 = (uint64_t)&qword_100346000;
  v33 = (void (*)(_QWORD *, uint64_t))v77;
  if (!v78)
    goto LABEL_23;
  v32 = v2 + OBJC_IVAR____TtC10seserviced5DSKSE_ownerIdentifier;
  swift_beginAccess(v2 + OBJC_IVAR____TtC10seserviced5DSKSE_ownerIdentifier, v80, 0, 0);
  sub_1000E4E48(v32, v23, (uint64_t *)&unk_1003465E0);
  v70 = *(uint64_t (**)(uint64_t, uint64_t, void (*)(_QWORD, _QWORD)))(v79 + 48);
  v33 = (void (*)(_QWORD *, uint64_t))v70(v23, 1, (void (*)(_QWORD, _QWORD))v33);
  sub_100096700(v23, (uint64_t *)&unk_1003465E0);
  if ((_DWORD)v33 != 1)
  {
    v35 = v79;
    v33 = (void (*)(_QWORD *, uint64_t))v77;
    (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v20, &v78[OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier], v77);
    (*(void (**)(char *, _QWORD, uint64_t, void (*)(_QWORD *, uint64_t)))(v35 + 56))(v20, 0, 1, v33);
    v36 = v8 + *(int *)(v5 + 48);
    sub_1000E4E48((uint64_t)v20, v8, (uint64_t *)&unk_1003465E0);
    sub_1000E4E48(v32, v36, (uint64_t *)&unk_1003465E0);
    v23 = (uint64_t)v70;
    if (v70(v8, 1, (void (*)(_QWORD, _QWORD))v33) == 1)
    {
      sub_100096700((uint64_t)v20, (uint64_t *)&unk_1003465E0);
      if (((unsigned int (*)(uint64_t, uint64_t, void (*)(_QWORD *, uint64_t)))v23)(v36, 1, v33) == 1)
      {
        sub_100096700(v8, (uint64_t *)&unk_1003465E0);
        goto LABEL_19;
      }
      goto LABEL_17;
    }
    sub_1000E4E48(v8, (uint64_t)v16, (uint64_t *)&unk_1003465E0);
    if (((unsigned int (*)(uint64_t, uint64_t, void (*)(_QWORD *, uint64_t)))v23)(v36, 1, v33) == 1)
    {
      sub_100096700((uint64_t)v20, (uint64_t *)&unk_1003465E0);
      (*(void (**)(char *, uint64_t (*)(_QWORD *, uint64_t)))(v79 + 8))(v16, (uint64_t (*)(_QWORD *, uint64_t))v33);
LABEL_17:
      v42 = sub_100096700(v8, &qword_100346F80);
LABEL_34:
      v37 = Logger.logObject.getter(v42);
      v39 = static os_log_type_t.info.getter(v37, v65, v66, v67);
      if (!os_log_type_enabled(v37, v39))
        goto LABEL_14;
      v40 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v40 = 0;
      v41 = "Not releasing SE because the client is not the owner";
      goto LABEL_13;
    }
    v43 = v79;
    v44 = v73;
    (*(void (**)(char *, uint64_t, void (*)(_QWORD *, uint64_t)))(v79 + 32))(v73, v36, v33);
    v45 = sub_1000639EC((unint64_t *)&qword_100346150, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v46 = dispatch thunk of static Equatable.== infix(_:_:)(v16, v44, v33, v45);
    v32 = *(_QWORD *)(v43 + 8);
    ((void (*)(char *, _QWORD))v32)(v44, v33);
    v23 = (uint64_t)&unk_1003465E0;
    sub_100096700((uint64_t)v20, (uint64_t *)&unk_1003465E0);
    ((void (*)(char *, _QWORD))v32)(v16, v33);
    v42 = sub_100096700(v8, (uint64_t *)&unk_1003465E0);
    if ((v46 & 1) == 0)
      goto LABEL_34;
  }
LABEL_19:
  v47 = qword_100354EE8;
  *v28 = qword_100354EE8;
  v76(v28, v75, v24);
  v16 = v78;
  swift_retain_n(v78, 2);
  v48 = (id)v47;
  LOBYTE(v47) = _dispatchPreconditionTest(_:)(v28);
  v72(v28, v24);
  if ((v47 & 1) == 0)
    goto LABEL_38;
  v49 = (uint64_t *)(v2 + OBJC_IVAR____TtC10seserviced5DSKSE_pendingRequestQueue);
  swift_beginAccess(v2 + OBJC_IVAR____TtC10seserviced5DSKSE_pendingRequestQueue, v81, 33, 0);
  swift_retain(v16);
  v8 = sub_100130644(v49, (uint64_t)v16);
  swift_release(v16);
  v23 = *v49;
  v33 = (void (*)(_QWORD *, uint64_t))v77;
  v32 = (uint64_t)&qword_100346000;
  if ((unint64_t)*v49 >> 62)
    goto LABEL_39;
  v50 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v50 < v8)
  {
LABEL_43:
    __break(1u);
  }
  else
  {
    while (1)
    {
      sub_1001F66F8(v8, v50);
      swift_endAccess(v81);
      v34 = swift_release_n(v16, 2);
LABEL_23:
      v51 = Logger.logObject.getter(v34);
      v55 = static os_log_type_t.info.getter(v51, v52, v53, v54);
      v8 = v55;
      if (os_log_type_enabled(v51, v55))
      {
        v23 = swift_slowAlloc(2, -1);
        *(_WORD *)v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v51, (os_log_type_t)v8, "Releasing the SE", (uint8_t *)v23, 2u);
        swift_slowDealloc(v23, -1, -1);
      }

      v56 = qword_100354EE8;
      *v28 = qword_100354EE8;
      v76(v28, v75, v24);
      v57 = (id)v56;
      LOBYTE(v56) = _dispatchPreconditionTest(_:)(v28);
      v72(v28, v24);
      if ((v56 & 1) != 0)
        break;
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      if (v23 < 0)
        v68 = v23;
      else
        v68 = v23 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v23);
      v50 = _CocoaArrayWrapper.endIndex.getter(v68);
      swift_bridgeObjectRelease(v23);
      if (v50 < v8)
        goto LABEL_43;
    }
    v58 = *(void **)(v2 + OBJC_IVAR____TtC10seserviced5DSKSE_seTimer);
    if (v58)
    {
      v59 = v58;
      if (sub_10004C5C8((_BOOL8)v59))
        sub_10004C548((uint64_t)v59);

    }
    v60 = *(void **)(v2 + v71);
    *(_QWORD *)(v2 + v71) = 0;

    v61 = *(void (**)(char *, uint64_t, uint64_t, void (*)(_QWORD, _QWORD)))(v79 + 56);
    v62 = (uint64_t)v74;
    v61(v74, 1, 1, (void (*)(_QWORD, _QWORD))v33);
    v63 = v2 + *(_QWORD *)(v32 + 3664);
    swift_beginAccess(v63, v81, 33, 0);
    sub_10012E5B4(v62, v63);
    swift_endAccess(v81);
    v61((char *)v62, 1, 1, (void (*)(_QWORD, _QWORD))v33);
    v64 = v2 + OBJC_IVAR____TtC10seserviced5DSKSE_ownerConnectionIdentifier;
    swift_beginAccess(v2 + OBJC_IVAR____TtC10seserviced5DSKSE_ownerConnectionIdentifier, v81, 33, 0);
    sub_10012E5B4(v62, v64);
    swift_endAccess(v81);
    *(_BYTE *)(v2 + OBJC_IVAR____TtC10seserviced5DSKSE_state) = 0;
    if (*(_BYTE *)(v2 + OBJC_IVAR____TtC10seserviced5DSKSE_expressTransactionInProgress) == 1)
    {
      *(_BYTE *)(v2 + OBJC_IVAR____TtC10seserviced5DSKSE_expressTransactionInProgress) = 0;
      sub_1001F119C(0xD000000000000041, 0x80000001002BD1D0, 0, 0xF000000000000000, 0, 0xF000000000000000, 0);
    }
    sub_10012988C();
  }
}

void sub_100128598(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void (*v6)(void *, void *);
  id v7;
  id v8;

  v6 = *(void (**)(void *, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v8 = a2;
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

uint64_t sub_10012860C(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v4 = v3;
  if ((unint64_t)a3 >> 62)
    goto LABEL_14;
  v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  v8 = 0;
  if (v7)
  {
    while (1)
    {
      if ((a3 & 0xC000000000000001) != 0)
      {
        v9 = specialized _ArrayBuffer._getElementSlowPath(_:)(v8, a3);
      }
      else
      {
        v9 = *(_QWORD *)(a3 + 8 * v8 + 32);
        swift_retain(v9);
      }
      v14 = v9;
      v10 = a1(&v14);
      swift_release(v9);
      if (v4 || (v10 & 1) != 0)
        break;
      v11 = v8 + 1;
      if (__OFADD__(v8, 1))
      {
        __break(1u);
LABEL_14:
        if (a3 < 0)
          v12 = a3;
        else
          v12 = a3 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(a3);
        v7 = _CocoaArrayWrapper.endIndex.getter(v12);
        swift_bridgeObjectRelease(a3);
        v8 = 0;
        if (!v7)
          return v8;
      }
      else
      {
        ++v8;
        if (v11 == v7)
          return 0;
      }
    }
  }
  return v8;
}

uint64_t sub_100128728(unint64_t a1)
{
  return sub_100128734(a1, sub_1000D6A90);
}

uint64_t sub_100128734(unint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t *v2;
  uint64_t v5;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t result;
  char v15;

  v5 = *v2;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v2);
  *v2 = v5;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v5 < 0 || (v5 & 0x4000000000000000) != 0)
  {
    v5 = a2(v5);
    *v2 = v5;
  }
  v7 = v5 & 0xFFFFFFFFFFFFFF8;
  v8 = *(_QWORD *)(v7 + 16);
  if (v8 <= a1)
  {
    __break(1u);
  }
  else
  {
    v9 = v8 - 1;
    v10 = v8 - 1 - a1;
    if (v10 >= 0)
    {
      v11 = v7 + 8 * a1;
      v12 = *(_QWORD *)(v11 + 32);
      v13 = memmove((void *)(v11 + 32), (const void *)(v11 + 40), 8 * v10);
      *(_QWORD *)(v7 + 16) = v9;
      specialized Array._endMutation()(v13);
      return v12;
    }
  }
  v15 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v15, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_100128818()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for DSKSE(0);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  result = sub_100128854();
  qword_100354C60 = result;
  return result;
}

uint64_t sub_100128854()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);
  void *v11;
  void *v12;
  uint64_t v13;
  _QWORD aBlock[5];
  uint64_t v16;

  v1 = v0;
  v2 = type metadata accessor for DispatchQoS.QoSClass(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = String.init(cString:)(SESLoggingSubsystem);
  Logger.init(subsystem:category:)(v7);
  *(_BYTE *)(v0 + OBJC_IVAR____TtC10seserviced5DSKSE_expressTransactionInProgress) = 0;
  *(_BYTE *)(v0 + OBJC_IVAR____TtC10seserviced5DSKSE_isRunning) = 0;
  v8 = v0 + OBJC_IVAR____TtC10seserviced5DSKSE_ownerConnectionIdentifier;
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56);
  v10(v8, 1, 1, v9);
  v10(v1 + OBJC_IVAR____TtC10seserviced5DSKSE_ownerIdentifier, 1, 1, v9);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC10seserviced5DSKSE_pendingRequestQueue) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC10seserviced5DSKSE_secureElementHandle) = 0;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC10seserviced5DSKSE_seTimer) = 0;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC10seserviced5DSKSE_state) = 0;
  sub_10006C25C(0, (unint64_t *)&qword_1003461A0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchQoS.QoSClass.default(_:), v2);
  v11 = (void *)static OS_dispatch_queue.global(qos:)(v6);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  aBlock[4] = sub_100130DF8;
  v16 = v1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10017BF6C;
  aBlock[3] = &unk_100309E48;
  v12 = _Block_copy(aBlock);
  v13 = v16;
  swift_retain(v1);
  swift_release(v13);
  os_state_add_handler(v11, v12);
  _Block_release(v12);

  return v1;
}

_DWORD *sub_100128A64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char isUniquelyReferenced_nonNull_native;
  void *v9;
  char v10;
  char v11;
  uint64_t v12;
  unsigned int (*v13)(uint64_t, uint64_t, uint64_t);
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  BOOL v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  Class isa;
  _DWORD *v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49[3];
  uint64_t v50[3];
  void *v51;
  _OWORD v52[2];
  __int128 v53;
  void *v54;
  uint64_t v55;

  v1 = v0;
  v2 = 1819047278;
  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)&v49[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v6) = *(_BYTE *)(v0 + OBJC_IVAR____TtC10seserviced5DSKSE_expressTransactionInProgress);
  v54 = &type metadata for Bool;
  LOBYTE(v53) = v6;
  sub_10006C2B4(&v53, v52);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  v51 = &_swiftEmptyDictionarySingleton;
  sub_10018DEC0(v52, 0xD00000000000001CLL, 0x80000001002BD140, isUniquelyReferenced_nonNull_native);
  v9 = v51;
  swift_bridgeObjectRelease(0x8000000000000000);
  v10 = *(_BYTE *)(v1 + OBJC_IVAR____TtC10seserviced5DSKSE_isRunning);
  v54 = &type metadata for Bool;
  LOBYTE(v53) = v10;
  sub_10006C2B4(&v53, v52);
  v11 = swift_isUniquelyReferenced_nonNull_native(v9);
  v51 = v9;
  sub_10018DEC0(v52, 0x6E696E6E75527369, 0xE900000000000067, v11);
  v55 = (uint64_t)v51;
  swift_bridgeObjectRelease(0x8000000000000000);
  v12 = v1 + OBJC_IVAR____TtC10seserviced5DSKSE_ownerConnectionIdentifier;
  swift_beginAccess(v1 + OBJC_IVAR____TtC10seserviced5DSKSE_ownerConnectionIdentifier, &v51, 0, 0);
  v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v13(v12, 1, v3))
  {
    v54 = &type metadata for String;
LABEL_3:
    v14 = 0xE400000000000000;
    v15 = 1819047278;
    goto LABEL_5;
  }
  v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v12, v3);
  v15 = UUID.uuidString.getter(v16);
  v14 = v17;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  v54 = &type metadata for String;
  if (!v14)
    goto LABEL_3;
LABEL_5:
  *(_QWORD *)&v53 = v15;
  *((_QWORD *)&v53 + 1) = v14;
  sub_10006C2B4(&v53, v52);
  v18 = v55;
  v19 = swift_isUniquelyReferenced_nonNull_native(v55);
  v50[0] = v18;
  sub_10018DEC0(v52, 0xD000000000000019, 0x80000001002BD160, v19);
  v55 = v50[0];
  swift_bridgeObjectRelease(0x8000000000000000);
  v20 = v1 + OBJC_IVAR____TtC10seserviced5DSKSE_ownerIdentifier;
  swift_beginAccess(v1 + OBJC_IVAR____TtC10seserviced5DSKSE_ownerIdentifier, v50, 0, 0);
  if (v13(v20, 1, v3))
  {
    v54 = &type metadata for String;
LABEL_7:
    v21 = 0xE400000000000000;
    goto LABEL_10;
  }
  v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v20, v3);
  v23 = UUID.uuidString.getter(v22);
  v21 = v24;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  v54 = &type metadata for String;
  if (!v21)
    goto LABEL_7;
  v2 = v23;
LABEL_10:
  *(_QWORD *)&v53 = v2;
  *((_QWORD *)&v53 + 1) = v21;
  sub_10006C2B4(&v53, v52);
  v25 = v55;
  v26 = swift_isUniquelyReferenced_nonNull_native(v55);
  v49[0] = v25;
  sub_10018DEC0(v52, 0x65644972656E776FLL, 0xEF7265696669746ELL, v26);
  v27 = v49[0];
  swift_bridgeObjectRelease(0x8000000000000000);
  v28 = (uint64_t *)(v1 + OBJC_IVAR____TtC10seserviced5DSKSE_pendingRequestQueue);
  swift_beginAccess(v1 + OBJC_IVAR____TtC10seserviced5DSKSE_pendingRequestQueue, v49, 0, 0);
  v29 = *v28;
  if ((unint64_t)v29 >> 62)
  {
    if (v29 < 0)
      v47 = v29;
    else
      v47 = v29 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v29);
    v30 = _CocoaArrayWrapper.endIndex.getter(v47);
    swift_bridgeObjectRelease(v29);
  }
  else
  {
    v30 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v54 = &type metadata for Int;
  *(_QWORD *)&v53 = v30;
  sub_10006C2B4(&v53, v52);
  v31 = swift_isUniquelyReferenced_nonNull_native(v27);
  v48 = v27;
  sub_10018DEC0(v52, 0xD000000000000013, 0x80000001002BD190, v31);
  v32 = v48;
  swift_bridgeObjectRelease(0x8000000000000000);
  v33 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10seserviced5DSKSE_secureElementHandle) != 0;
  v54 = &type metadata for Bool;
  LOBYTE(v53) = v33;
  sub_10006C2B4(&v53, v52);
  v34 = swift_isUniquelyReferenced_nonNull_native(v32);
  v48 = v32;
  sub_10018DEC0(v52, 0xD000000000000013, 0x80000001002BD1B0, v34);
  v35 = v48;
  v55 = v48;
  swift_bridgeObjectRelease(0x8000000000000000);
  v36 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10seserviced5DSKSE_seTimer);
  if (v36)
  {
    v37 = sub_10004C5C8(v36);
    v54 = &type metadata for Bool;
    LOBYTE(v53) = v37;
    sub_10006C2B4(&v53, v52);
    v38 = swift_isUniquelyReferenced_nonNull_native(v35);
    v48 = v35;
    sub_10018DEC0(v52, 0x72656D69546573, 0xE700000000000000, v38);
    v39 = v48;
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  else
  {
    sub_10012E704(0x72656D69546573, 0xE700000000000000, &v53);
    sub_100096700((uint64_t)&v53, (uint64_t *)&unk_100346130);
    v39 = v55;
  }
  v54 = (void *)sub_100063D3C(&qword_100345388);
  *(_QWORD *)&v53 = v39;
  sub_10006C2B4(&v53, v52);
  swift_bridgeObjectRetain(v39);
  v41 = swift_isUniquelyReferenced_nonNull_native(v40);
  v48 = v39;
  sub_10018DEC0(v52, 0x6574617473, 0xE500000000000000, v41);
  v42 = v48;
  swift_bridgeObjectRelease(0x8000000000000000);
  v43 = sub_10017D088(v42);
  swift_bridgeObjectRelease(v42);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v43);
  v45 = sub_100015734((uint64_t)"dskse.state", (uint64_t)isa);

  return v45;
}

void sub_100129008()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  void *v41;
  NSObject **v42;
  void *v43;
  NSObject **v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  _QWORD aBlock[5];
  uint64_t v50;

  v1 = v0;
  v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v46 = *(_QWORD *)(v2 - 8);
  v47 = v2;
  __chkstk_darwin(v2, v3);
  v48 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v5, v6);
  v45 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS.QoSClass(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v13, v14);
  v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DispatchPredicate(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17, v19);
  v21 = (char **)((char *)&v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v22 = qword_100354EE8;
  *v21 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v18 + 104))(v21, enum case for DispatchPredicate.onQueue(_:), v17);
  v23 = (id)v22;
  LOBYTE(v22) = _dispatchPreconditionTest(_:)(v21);
  v24 = (*(uint64_t (**)(_QWORD *, uint64_t))(v18 + 8))(v21, v17);
  if ((v22 & 1) != 0)
  {
    v25 = OBJC_IVAR____TtC10seserviced5DSKSE_isRunning;
    v26 = *(_BYTE *)(v1 + OBJC_IVAR____TtC10seserviced5DSKSE_isRunning);
    v27 = Logger.logObject.getter(v24);
    v31 = v27;
    if ((v26 & 1) != 0)
    {
      v32 = static os_log_type_t.error.getter(v27, v28);
      if (os_log_type_enabled(v31, v32))
      {
        v33 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v33 = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "DSKSE is already running", v33, 2u);
        swift_slowDealloc(v33, -1, -1);
      }
    }
    else
    {
      v34 = static os_log_type_t.info.getter(v27, v28, v29, v30);
      if (os_log_type_enabled(v31, v34))
      {
        v35 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v35 = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, v34, "Starting DSKSE", v35, 2u);
        swift_slowDealloc(v35, -1, -1);
      }

      *(_BYTE *)(v1 + v25) = 1;
      sub_10006C25C(0, (unint64_t *)&qword_1003461A0, OS_dispatch_queue_ptr);
      (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v12, enum case for DispatchQoS.QoSClass.userInitiated(_:), v8);
      DispatchQoS.init(qosClass:relativePriority:)(v12, 0);
      aBlock[0] = _swiftEmptyArrayStorage;
      v36 = sub_1000639EC((unint64_t *)&qword_100346E08, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
      v37 = sub_100063D3C(&qword_100346E10);
      v38 = sub_100130DFC();
      v39 = v45;
      dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v37, v38, v5, v36);
      v40 = v48;
      (*(void (**)(char *, _QWORD, uint64_t))(v46 + 104))(v48, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v47);
      v41 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000020, 0x80000001002BD2A0, v16, v39, v40, 0);
      v42 = (NSObject **)objc_allocWithZone((Class)SESTimer);
      aBlock[4] = sub_100130E48;
      v50 = v1;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100071C98;
      aBlock[3] = &unk_100309E70;
      v43 = _Block_copy(aBlock);
      swift_retain(v1);
      v44 = sub_10004C264(v42, v41, v43);

      _Block_release(v43);
      swift_release(v50);
      v31 = *(NSObject **)(v1 + OBJC_IVAR____TtC10seserviced5DSKSE_seTimer);
      *(_QWORD *)(v1 + OBJC_IVAR____TtC10seserviced5DSKSE_seTimer) = v44;
    }

  }
  else
  {
    __break(1u);
  }
}

void sub_10012946C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  os_log_type_t v11;
  uint8_t *v12;
  void *v13;
  uint64_t v14;
  void (*v15)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[24];

  v2 = sub_100063D3C((uint64_t *)&unk_1003465E0);
  v4 = __chkstk_darwin(v2, v3);
  v6 = &v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = Logger.logObject.getter(v4);
  v11 = static os_log_type_t.info.getter(v7, v8, v9, v10);
  if (os_log_type_enabled(v7, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v11, "Releasing SE by timer", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }

  v13 = *(void **)(a1 + OBJC_IVAR____TtC10seserviced5DSKSE_secureElementHandle);
  *(_QWORD *)(a1 + OBJC_IVAR____TtC10seserviced5DSKSE_secureElementHandle) = 0;

  v14 = type metadata accessor for UUID(0);
  v15 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56);
  v15(v6, 1, 1, v14);
  v16 = a1 + OBJC_IVAR____TtC10seserviced5DSKSE_ownerIdentifier;
  swift_beginAccess(a1 + OBJC_IVAR____TtC10seserviced5DSKSE_ownerIdentifier, v19, 33, 0);
  sub_10012E5B4((uint64_t)v6, v16);
  swift_endAccess(v19);
  v15(v6, 1, 1, v14);
  v17 = a1 + OBJC_IVAR____TtC10seserviced5DSKSE_ownerConnectionIdentifier;
  swift_beginAccess(a1 + OBJC_IVAR____TtC10seserviced5DSKSE_ownerConnectionIdentifier, v19, 33, 0);
  sub_10012E5B4((uint64_t)v6, v17);
  swift_endAccess(v19);
  *(_BYTE *)(a1 + OBJC_IVAR____TtC10seserviced5DSKSE_state) = 0;
  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC10seserviced5DSKSE_expressTransactionInProgress) == 1)
  {
    *(_BYTE *)(a1 + OBJC_IVAR____TtC10seserviced5DSKSE_expressTransactionInProgress) = 0;
    sub_1001F119C(0xD000000000000041, 0x80000001002BD1D0, 0, 0xF000000000000000, 0, 0xF000000000000000, 0);
  }
}

void sub_10012965C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  os_log_type_t v22;
  uint8_t *v23;
  _BYTE v25[24];

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = &v25[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v7 = qword_100354EE8;
  *v6 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  v9 = (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) != 0)
  {
    v10 = OBJC_IVAR____TtC10seserviced5DSKSE_isRunning;
    v11 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC10seserviced5DSKSE_isRunning);
    v12 = Logger.logObject.getter(v9);
    v16 = v12;
    if (v11 == 1)
    {
      v17 = static os_log_type_t.info.getter(v12, v13, v14, v15);
      if (os_log_type_enabled(v16, v17))
      {
        v18 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v18 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Stopping DSKSE", v18, 2u);
        swift_slowDealloc(v18, -1, -1);
      }

      v19 = (uint64_t *)(v1 + OBJC_IVAR____TtC10seserviced5DSKSE_pendingRequestQueue);
      swift_beginAccess(v1 + OBJC_IVAR____TtC10seserviced5DSKSE_pendingRequestQueue, v25, 1, 0);
      v20 = *v19;
      *v19 = (uint64_t)_swiftEmptyArrayStorage;
      swift_bridgeObjectRelease(v20);
      sub_100127D5C(0);
      v21 = *(void **)(v1 + OBJC_IVAR____TtC10seserviced5DSKSE_seTimer);
      *(_QWORD *)(v1 + OBJC_IVAR____TtC10seserviced5DSKSE_seTimer) = 0;

      *(_BYTE *)(v1 + v10) = 0;
    }
    else
    {
      v22 = static os_log_type_t.error.getter(v12, v13);
      if (os_log_type_enabled(v16, v22))
      {
        v23 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, v22, "DSKSE is not running", v23, 2u);
        swift_slowDealloc(v23, -1, -1);
      }

    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10012988C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  os_log_type_t v27;
  _BOOL4 v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[16];
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  _BYTE *v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[32];

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v42 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v3);
  v38 = &v35[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v40 = sub_100063D3C(&qword_100346F80);
  __chkstk_darwin(v40, v5);
  v6 = sub_100063D3C((uint64_t *)&unk_1003465E0);
  v8 = __chkstk_darwin(v6, v7);
  v10 = &v35[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8, v11);
  v41 = &v35[-v12];
  v13 = (uint64_t *)type metadata accessor for DispatchPredicate(0);
  v14 = *(v13 - 1);
  __chkstk_darwin(v13, v15);
  v17 = (uint64_t)&v35[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v18 = qword_100354EE8;
  *(_QWORD *)v17 = qword_100354EE8;
  (*(void (**)(uint64_t, _QWORD, uint64_t *))(v14 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v13);
  v19 = (id)v18;
  LOBYTE(v18) = _dispatchPreconditionTest(_:)(v17);
  (*(void (**)(uint64_t, uint64_t *))(v14 + 8))(v17, v13);
  if ((v18 & 1) != 0)
  {
    v13 = (uint64_t *)(v1 + OBJC_IVAR____TtC10seserviced5DSKSE_pendingRequestQueue);
    result = swift_beginAccess(v1 + OBJC_IVAR____TtC10seserviced5DSKSE_pendingRequestQueue, v45, 0, 0);
    v17 = *v13;
    if (!((unint64_t)*v13 >> 62))
    {
      if (*(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_6;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  if (v17 < 0)
    v32 = v17;
  else
    v32 = v17 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v17);
  v33 = _CocoaArrayWrapper.endIndex.getter(v32);
  result = swift_bridgeObjectRelease(v17);
  if (v33)
  {
LABEL_6:
    v21 = v1 + OBJC_IVAR____TtC10seserviced5DSKSE_logger;
    v22 = swift_retain(v1);
    v37 = v21;
    v23 = Logger.logObject.getter(v22);
    v27 = static os_log_type_t.info.getter(v23, v24, v25, v26);
    v28 = os_log_type_enabled(v23, v27);
    v39 = v10;
    if (v28)
    {
      v36 = v1;
      v29 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v29 = 134217984;
      v30 = *v13;
      if ((unint64_t)*v13 >> 62)
      {
        if (v30 < 0)
          v34 = *v13;
        else
          v34 = v30 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(*v13);
        v31 = _CocoaArrayWrapper.endIndex.getter(v34);
        swift_bridgeObjectRelease(v30);
      }
      else
      {
        v31 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v43 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v29 + 4, v29 + 12);
      v1 = v36;
      swift_release(v36);
      _os_log_impl((void *)&_mh_execute_header, v23, v27, "Trying to process a queued request (pending %ld)", v29, 0xCu);
      swift_slowDealloc(v29, -1, -1);
    }
    else
    {
      swift_release(v1);
    }

    __asm { BR              X10 }
  }
  return result;
}

void sub_10012A43C()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void (*v40)(_QWORD);
  id v41;
  uint64_t v42;
  void (*v43)(uint64_t, _QWORD *);
  void *v44;
  char *v45;
  NSObject *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  os_log_type_t v50;
  uint8_t *v51;
  char *v52;
  uint64_t v53;
  unsigned int (*v54)(char *, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  os_log_type_t v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  NSObject *v72;
  NSObject *v73;
  uint64_t v74;
  os_log_type_t v75;
  _BOOL4 v76;
  NSString v77;
  uint8_t *v78;
  uint64_t v79;
  NSObject *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  os_log_type_t v84;
  uint8_t *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v91;
  void *v92;
  char v93;
  uint64_t v94;
  NSObject *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  os_log_type_t v99;
  uint8_t *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  id v105;
  id v106;
  uint64_t v107;
  unint64_t v108;
  void *v109;
  uint64_t (*v110)(uint64_t, uint64_t, uint64_t);
  uint64_t v111;
  void *v112;
  id v113;
  char v114;
  void *v115;
  id v116;
  void (*v117)(void *, _QWORD);
  uint64_t v118;
  id v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  NSObject *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  os_log_type_t v128;
  uint64_t v129;
  _DWORD *v130;
  _DWORD *v131;
  uint64_t v132;
  uint64_t v133;
  id v134;
  unint64_t v135;
  char *v136;
  uint8_t *v137;
  void (*v138)(uint64_t, char *, uint64_t);
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unsigned int (*v145)(uint64_t, uint64_t, uint64_t);
  unsigned int v146;
  uint64_t v147;
  void (*v148)(char *, uint64_t);
  uint64_t v149;
  NSObject *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  os_log_type_t v154;
  _BOOL4 v155;
  id v156;
  uint64_t (*v157)(uint64_t, uint64_t, uint64_t);
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  char *v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  char *v175;
  uint64_t v176;
  char v177;
  uint64_t v178;
  void (*v179)(char *, uint64_t);
  uint64_t v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  _QWORD *v184;
  void *v185;
  _QWORD *v186;
  id v187;
  void (*v188)(char *, char *, uint64_t);
  uint8_t *v189;
  NSObject *v190;
  unsigned int (*v191)(char *, uint64_t, uint64_t);
  char *v192;
  void *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  char *v198;
  uint64_t v199;
  char *v200;
  void (*v201)(uint64_t, _QWORD *);
  unsigned int v202;
  void (*v203)(uint64_t, _QWORD, _QWORD *);
  char *v204;
  id v205;
  uint64_t v206;
  char *v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  _BYTE v212[16];
  uint64_t v213;
  uint64_t v214[2];
  uint64_t aBlock[3];
  void *v216;
  uint64_t (*v217)(void *, uint64_t);
  _QWORD *v218;
  char v219[8];

  v196 = sub_100063D3C(&qword_100346F80);
  __chkstk_darwin(v196, v1);
  v198 = (char *)&v188 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for UUID(0);
  v208 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3, v4);
  v7 = (char *)&v188 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v8);
  v200 = (char *)&v188 - v9;
  v10 = sub_100063D3C((uint64_t *)&unk_1003465E0);
  v12 = __chkstk_darwin(v10, v11);
  v195 = (uint64_t)&v188 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12, v14);
  v194 = (uint64_t)&v188 - v16;
  v18 = __chkstk_darwin(v15, v17);
  v197 = (char *)&v188 - v19;
  v21 = __chkstk_darwin(v18, v20);
  v199 = (uint64_t)&v188 - v22;
  v24 = __chkstk_darwin(v21, v23);
  v26 = (char *)&v188 - v25;
  v28 = __chkstk_darwin(v24, v27);
  v30 = (uint64_t)&v188 - v29;
  __chkstk_darwin(v28, v31);
  v33 = (char *)&v188 - v32;
  v34 = (_QWORD *)type metadata accessor for DispatchPredicate(0);
  v35 = *(v34 - 1);
  __chkstk_darwin(v34, v36);
  v38 = (uint64_t)&v188 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v39 = (void *)qword_100354EE8;
  *(_QWORD *)v38 = qword_100354EE8;
  v40 = *(void (**)(_QWORD))(v35 + 104);
  v202 = enum case for DispatchPredicate.onQueue(_:);
  v203 = (void (*)(uint64_t, _QWORD, _QWORD *))v40;
  v40(v38);
  v41 = v39;
  v42 = _dispatchPreconditionTest(_:)(v38);
  v43 = *(void (**)(uint64_t, _QWORD *))(v35 + 8);
  v43(v38, v34);
  if ((v42 & 1) != 0)
  {
    v201 = v43;
    v42 = (uint64_t)v0;
    v44 = *(void **)&v0[OBJC_IVAR____TtC10seserviced5DSKSE_secureElementHandle];
    if (v44)
    {
      v192 = v7;
      v206 = v3;
      v207 = v0;
      v45 = &v0[OBJC_IVAR____TtC10seserviced5DSKSE_logger];
      v193 = v44;
      v205 = v44;
      v204 = v45;
      v46 = Logger.logObject.getter(v205);
      v50 = static os_log_type_t.info.getter(v46, v47, v48, v49);
      if (os_log_type_enabled(v46, v50))
      {
        v51 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v51 = 0;
        _os_log_impl((void *)&_mh_execute_header, v46, v50, "Already have an SE handle", v51, 2u);
        swift_slowDealloc(v51, -1, -1);
      }

      v52 = v207;
      v53 = (uint64_t)&v207[OBJC_IVAR____TtC10seserviced5DSKSE_ownerIdentifier];
      swift_beginAccess(&v207[OBJC_IVAR____TtC10seserviced5DSKSE_ownerIdentifier], aBlock, 0, 0);
      sub_1000E4E48(v53, (uint64_t)v33, (uint64_t *)&unk_1003465E0);
      v54 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v208 + 48);
      v55 = v206;
      LODWORD(v53) = v54(v33, 1, v206);
      v56 = sub_100096700((uint64_t)v33, (uint64_t *)&unk_1003465E0);
      if ((_DWORD)v53 != 1)
      {
        v57 = (uint64_t)&v52[OBJC_IVAR____TtC10seserviced5DSKSE_ownerConnectionIdentifier];
        swift_beginAccess(&v52[OBJC_IVAR____TtC10seserviced5DSKSE_ownerConnectionIdentifier], v219, 0, 0);
        sub_1000E4E48(v57, v30, (uint64_t *)&unk_1003465E0);
        LODWORD(v57) = v54((char *)v30, 1, v55);
        v56 = sub_100096700(v30, (uint64_t *)&unk_1003465E0);
        if ((_DWORD)v57 != 1 && v52[OBJC_IVAR____TtC10seserviced5DSKSE_state] == 3)
        {
          v191 = v54;
          v58 = sub_10012B900();
          if (!v58)
          {

            return;
          }
          v59 = v58;
          v60 = swift_retain_n(v58, 3);
          v61 = Logger.logObject.getter(v60);
          v65 = static os_log_type_t.info.getter(v61, v62, v63, v64);
          v190 = v61;
          if (os_log_type_enabled(v61, v65))
          {
            v66 = (uint8_t *)swift_slowAlloc(12, -1);
            v67 = swift_slowAlloc(32, -1);
            v211 = v67;
            *(_DWORD *)v66 = 136315138;
            v189 = v66 + 4;
            v68 = v59;
            v69 = *(_QWORD *)(v59 + OBJC_IVAR____TtC10seserviced9SERequest_reason);
            v70 = *(_QWORD *)(v59 + OBJC_IVAR____TtC10seserviced9SERequest_reason + 8);
            swift_bridgeObjectRetain(v70);
            v209 = sub_1001C56EC(v69, v70, &v211);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v209, &v210, v189, v66 + 12);
            swift_release_n(v68, 2);
            v71 = v70;
            v59 = v68;
            swift_bridgeObjectRelease(v71);
            v72 = v190;
            _os_log_impl((void *)&_mh_execute_header, v190, v65, "Got request for \"%s\"", v66, 0xCu);
            swift_arrayDestroy(v67, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v67, -1, -1);
            swift_slowDealloc(v66, -1, -1);

          }
          else
          {
            swift_release_n(v59, 2);

          }
          v110 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v191;
          if ((*(_BYTE *)(v59 + OBJC_IVAR____TtC10seserviced9SERequest_sessionChecks + 8) & 1) != 0)
            goto LABEL_43;
          v111 = *(_QWORD *)(v59 + OBJC_IVAR____TtC10seserviced9SERequest_sessionChecks);
          if ((v111 & 1) == 0)
          {
            if ((v111 & 2) != 0)
            {
              v121 = v59 + OBJC_IVAR____TtC10seserviced9SERequest_sequenceNumber;
              if ((*(_BYTE *)(v59 + OBJC_IVAR____TtC10seserviced9SERequest_sequenceNumber + 8) & 1) != 0
                || (v122 = *(_QWORD *)(v59 + OBJC_IVAR____TtC10seserviced9SERequest_peer)) == 0
                || *(_QWORD *)v121 != *(_QWORD *)(v122 + OBJC_IVAR____TtC10seserviced4Peer_sequenceNumber))
              {
                v123 = swift_retain_n(v59, 2);
                v124 = Logger.logObject.getter(v123);
                v128 = static os_log_type_t.info.getter(v124, v125, v126, v127);
                if (os_log_type_enabled(v124, v128))
                {
                  v129 = -1;
                  v130 = (_DWORD *)swift_slowAlloc(22, -1);
                  v131 = v130;
                  *v130 = 134218240;
                  v132 = *(_QWORD *)v121;
                  if (*(_BYTE *)(v121 + 8))
                    v132 = -1;
                  v211 = v132;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v211, v212, v130 + 1, v130 + 3);
                  *((_WORD *)v131 + 6) = 2048;
                  v133 = *(_QWORD *)(v59 + OBJC_IVAR____TtC10seserviced9SERequest_peer);
                  if (v133)
                    v129 = *(_QWORD *)(v133 + OBJC_IVAR____TtC10seserviced4Peer_sequenceNumber);
                  v134 = v205;
                  swift_release(v59);
                  v211 = v129;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v211, v212, (char *)v131 + 14, (char *)v131 + 22);
                  swift_release(v59);
                  _os_log_impl((void *)&_mh_execute_header, v124, v128, "Got different sequence numbers request %ld current %ld", (uint8_t *)v131, 0x16u);
                  swift_slowDealloc(v131, -1, -1);
                }
                else
                {
                  swift_release_n(v59, 2);
                  v134 = v205;
                }

                sub_10012988C();
                goto LABEL_86;
              }
            }
            goto LABEL_43;
          }
          v190 = (v59 + OBJC_IVAR____TtC10seserviced9SERequest_connectionIdentifier);
          sub_1000E4E48(v59 + OBJC_IVAR____TtC10seserviced9SERequest_connectionIdentifier, (uint64_t)v26, (uint64_t *)&unk_1003465E0);
          v30 = v206;
          if (v110((uint64_t)v26, 1, v206) == 1)
          {
            v120 = (uint64_t *)&unk_1003465E0;
LABEL_75:
            sub_100096700((uint64_t)v26, v120);
LABEL_76:
            v149 = swift_retain_n(v59, 4);
            v150 = Logger.logObject.getter(v149);
            v154 = static os_log_type_t.info.getter(v150, v151, v152, v153);
            v155 = os_log_type_enabled(v150, v154);
            v156 = v205;
            if (v155)
            {
              v157 = v110;
              v158 = v59;
              v159 = 1819047278;
              v160 = swift_slowAlloc(22, -1);
              v161 = swift_slowAlloc(64, -1);
              v214[0] = v161;
              *(_DWORD *)v160 = 136315394;
              v162 = v195;
              sub_1000E4E48((uint64_t)v190, v195, (uint64_t *)&unk_1003465E0);
              v163 = v206;
              v164 = v157(v162, 1, v206);
              if ((_DWORD)v164 == 1)
              {
                sub_100096700(v162, (uint64_t *)&unk_1003465E0);
                v165 = 0xE400000000000000;
                v166 = 1819047278;
              }
              else
              {
                v166 = UUID.uuidString.getter(v164);
                v165 = v167;
                (*(void (**)(uint64_t, uint64_t))(v208 + 8))(v162, v163);
              }
              v211 = sub_1001C56EC(v166, v165, v214);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v211, v212, v160 + 4, v160 + 12);
              swift_release_n(v158, 2);
              swift_bridgeObjectRelease(v165);
              *(_WORD *)(v160 + 12) = 2080;
              v168 = *(_QWORD *)(v158 + OBJC_IVAR____TtC10seserviced9SERequest_peer);
              if (v168)
              {
                v169 = v168 + OBJC_IVAR____TtC10seserviced4Peer_connectionIdentifier;
                swift_beginAccess(v168 + OBJC_IVAR____TtC10seserviced4Peer_connectionIdentifier, &v211, 0, 0);
                v170 = v208;
                v171 = v192;
                v172 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v208 + 16))(v192, v169, v163);
                v159 = UUID.uuidString.getter(v172);
                v174 = v173;
                (*(void (**)(char *, uint64_t))(v170 + 8))(v171, v163);
              }
              else
              {
                v174 = 0xE400000000000000;
              }
              v213 = sub_1001C56EC(v159, v174, v214);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v213, v214, v160 + 14, v160 + 22);
              v59 = v158;
              swift_release_n(v158, 2);
              swift_bridgeObjectRelease(v174);
              _os_log_impl((void *)&_mh_execute_header, v150, v154, "Got different connection identifiers request %s current %s", (uint8_t *)v160, 0x16u);
              swift_arrayDestroy(v161, 2, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v161, -1, -1);
              swift_slowDealloc(v160, -1, -1);

              v156 = v205;
            }
            else
            {
              swift_release_n(v59, 4);

            }
            sub_10012988C();

LABEL_86:
            swift_release_n(v59, 2);
            return;
          }
          v135 = v208;
          v136 = v200;
          v188 = *(void (**)(char *, char *, uint64_t))(v208 + 32);
          v188(v200, v26, v30);
          v137 = (uint8_t *)v59;
          v138 = *(void (**)(uint64_t, char *, uint64_t))(v135 + 16);
          v139 = v199;
          v138(v199, v136, v30);
          v90 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v135 + 56);
          v88 = 1;
          v90(v139, 0, 1, v30);
          v189 = v137;
          v140 = *(_QWORD *)&v137[OBJC_IVAR____TtC10seserviced9SERequest_peer];
          if (v140)
          {
            v141 = (char *)(v140 + OBJC_IVAR____TtC10seserviced4Peer_connectionIdentifier);
            swift_beginAccess(v140 + OBJC_IVAR____TtC10seserviced4Peer_connectionIdentifier, &v209, 0, 0);
            v142 = (uint64_t)v197;
            v138((uint64_t)v197, v141, v30);
            v88 = 0;
            v26 = v198;
          }
          else
          {
LABEL_68:
            v26 = v198;
            v142 = (uint64_t)v197;
          }
          v90(v142, v88, 1, v30);
          v143 = (uint64_t)&v26[*(int *)(v196 + 48)];
          v144 = v199;
          sub_1000E4E48(v199, (uint64_t)v26, (uint64_t *)&unk_1003465E0);
          sub_1000E4E48(v142, v143, (uint64_t *)&unk_1003465E0);
          v145 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v191;
          if (v191(v26, 1, v30) == 1)
          {
            sub_100096700(v142, (uint64_t *)&unk_1003465E0);
            sub_100096700(v144, (uint64_t *)&unk_1003465E0);
            (*(void (**)(char *, uint64_t))(v208 + 8))(v200, v30);
            v146 = v145(v143, 1, v30);
            v59 = (uint64_t)v189;
            v110 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v145;
            if (v146 == 1)
            {
              sub_100096700((uint64_t)v26, (uint64_t *)&unk_1003465E0);
              goto LABEL_43;
            }
          }
          else
          {
            v147 = v194;
            sub_1000E4E48((uint64_t)v26, v194, (uint64_t *)&unk_1003465E0);
            if (v145(v143, 1, v30) != 1)
            {
              v175 = v192;
              v188(v192, (char *)v143, v30);
              v176 = sub_1000639EC((unint64_t *)&qword_100346150, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
              v177 = dispatch thunk of static Equatable.== infix(_:_:)(v147, v175, v30, v176);
              v178 = v144;
              v179 = *(void (**)(char *, uint64_t))(v208 + 8);
              v179(v175, v30);
              sub_100096700(v142, (uint64_t *)&unk_1003465E0);
              sub_100096700(v178, (uint64_t *)&unk_1003465E0);
              v179(v200, v30);
              v179((char *)v147, v30);
              sub_100096700((uint64_t)v26, (uint64_t *)&unk_1003465E0);
              v59 = (uint64_t)v189;
              v110 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v191;
              if ((v177 & 1) == 0)
                goto LABEL_76;
LABEL_43:
              v112 = (void *)qword_100354EE8;
              *(_QWORD *)v38 = qword_100354EE8;
              v203(v38, v202, v34);
              v113 = v112;
              v114 = _dispatchPreconditionTest(_:)(v38);
              v201(v38, v34);
              if ((v114 & 1) != 0)
              {
                v115 = *(void **)&v207[OBJC_IVAR____TtC10seserviced5DSKSE_seTimer];
                if (v115)
                {
                  v116 = v115;
                  if (sub_10004C5C8((_BOOL8)v116))
                    sub_10004C548((uint64_t)v116);

                }
                v117 = *(void (**)(void *, _QWORD))(v59 + 32);
                v118 = *(_QWORD *)(v59 + 40);
                v119 = v205;
                swift_retain(v118);
                v117(v193, 0);
                swift_release(v118);

                if ((*(_BYTE *)(v59 + 24) & 1) != 0)
                  sub_100127D5C(0);
                else
                  sub_10012CBE8(*(double *)(v59 + 16));
                sub_10012988C();

                goto LABEL_86;
              }
              __break(1u);
LABEL_98:
              __break(1u);
              goto LABEL_99;
            }
            sub_100096700(v142, (uint64_t *)&unk_1003465E0);
            sub_100096700(v144, (uint64_t *)&unk_1003465E0);
            v148 = *(void (**)(char *, uint64_t))(v208 + 8);
            v148(v200, v30);
            v148((char *)v147, v30);
            v59 = (uint64_t)v189;
            v110 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v191;
          }
          v120 = &qword_100346F80;
          goto LABEL_75;
        }
      }
      v73 = Logger.logObject.getter(v56);
      v75 = static os_log_type_t.error.getter(v73, v74);
      v76 = os_log_type_enabled(v73, v75);
      v77 = v205;
      if (v76)
      {
        v78 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v78 = 0;
        _os_log_impl((void *)&_mh_execute_header, v73, v75, "Have SE handle with bad state", v78, 2u);
        swift_slowDealloc(v78, -1, -1);
      }

      sub_100127D5C(0);
      sub_10012988C();
LABEL_96:

      return;
    }
    v79 = arc4random();
    LODWORD(v38) = v79;
    v0 += OBJC_IVAR____TtC10seserviced5DSKSE_logger;
    v80 = Logger.logObject.getter(v79);
    v84 = static os_log_type_t.info.getter(v80, v81, v82, v83);
    if (os_log_type_enabled(v80, v84))
    {
      v85 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v85 = 67109120;
      LODWORD(aBlock[0]) = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(aBlock, (char *)aBlock + 4, v85 + 4, v85 + 8);
      _os_log_impl((void *)&_mh_execute_header, v80, v84, "Requesting SE identifier %u", v85, 8u);
      swift_slowDealloc(v85, -1, -1);
    }

    v86 = (uint64_t *)(v42 + OBJC_IVAR____TtC10seserviced5DSKSE_pendingRequestQueue);
    swift_beginAccess(v42 + OBJC_IVAR____TtC10seserviced5DSKSE_pendingRequestQueue, v219, 0, 0);
    v30 = *v86;
    if (!((unint64_t)*v86 >> 62))
    {
      v87 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n(*v86, 2);
      if (v87)
        goto LABEL_20;
LABEL_94:
      swift_bridgeObjectRelease_n(v30, 2);
LABEL_95:
      *(_BYTE *)(v42 + OBJC_IVAR____TtC10seserviced5DSKSE_state) = 1;
      v181 = (void *)qword_100354EE8;
      v182 = swift_allocObject(&unk_100309DE0, 28, 7);
      *(_QWORD *)(v182 + 16) = v42;
      *(_DWORD *)(v182 + 24) = v38;
      v183 = objc_opt_self(SecureElementManager);
      swift_retain(v42);
      v77 = String._bridgeToObjectiveC()();
      v184 = (_QWORD *)swift_allocObject(&unk_100309E08, 40, 7);
      v184[2] = v181;
      v184[3] = sub_100130D1C;
      v184[4] = v182;
      v217 = sub_100130D58;
      v218 = v184;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_100128598;
      v216 = &unk_100309E20;
      v185 = _Block_copy(aBlock);
      v186 = v218;
      v187 = v181;
      swift_retain(v182);
      swift_release(v186);
      sub_100051680(v183, v77, v185);
      _Block_release(v185);
      swift_release(v182);
      goto LABEL_96;
    }
  }
  else
  {
    __break(1u);
  }
  if (v30 < 0)
    v180 = v30;
  else
    v180 = v30 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain_n(v30, 2);
  v87 = _CocoaArrayWrapper.endIndex.getter(v180);
  if (!v87)
    goto LABEL_94;
LABEL_20:
  v205 = v0;
  LODWORD(v206) = v38;
  v207 = (char *)v42;
  v208 = v30 & 0xC000000000000001;
  v38 = 4;
  v34 = &unk_100347750;
  while (1)
  {
    v88 = v38 - 4;
    if (v208)
    {
      v89 = specialized _ArrayBuffer._getElementSlowPath(_:)(v38 - 4, v30);
      v90 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))(v38 - 3);
      if (__OFADD__(v88, 1))
        goto LABEL_67;
    }
    else
    {
      v89 = *(_QWORD *)(v30 + 8 * v38);
      swift_retain(v89);
      v90 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))(v38 - 3);
      if (__OFADD__(v88, 1))
      {
LABEL_67:
        __break(1u);
        goto LABEL_68;
      }
    }
    v91 = v89 + OBJC_IVAR____TtC10seserviced9SERequest_handoffToken;
    sub_1000E4E48(v89 + OBJC_IVAR____TtC10seserviced9SERequest_handoffToken, (uint64_t)aBlock, (uint64_t *)&unk_100347750);
    v92 = v216;
    sub_100096700((uint64_t)aBlock, (uint64_t *)&unk_100347750);
    if (v92)
    {
      sub_1000E4E48(v91, (uint64_t)aBlock, (uint64_t *)&unk_100347750);
      if (!v216)
        goto LABEL_98;
      sub_10006BA78(aBlock, (uint64_t)v216);
      type metadata accessor for AlishaSE.HandoffToken();
      v93 = sub_1001D7E28();
      sub_10006BA9C(aBlock);
      if ((v93 & 1) != 0)
        break;
    }
    swift_release(v89);
    ++v38;
    if (v90 == (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v87)
    {
      swift_bridgeObjectRelease_n(v30, 2);
LABEL_37:
      v42 = (uint64_t)v207;
      LODWORD(v38) = v206;
      goto LABEL_95;
    }
  }
  swift_bridgeObjectRelease_n(v30, 2);
  v94 = swift_retain_n(v89, 2);
  v95 = Logger.logObject.getter(v94);
  v99 = static os_log_type_t.info.getter(v95, v96, v97, v98);
  if (os_log_type_enabled(v95, v99))
  {
    v100 = (uint8_t *)swift_slowAlloc(12, -1);
    v101 = swift_slowAlloc(32, -1);
    aBlock[0] = v101;
    *(_DWORD *)v100 = 136315138;
    v102 = *(_QWORD *)(v89 + OBJC_IVAR____TtC10seserviced9SERequest_reason);
    v103 = *(_QWORD *)(v89 + OBJC_IVAR____TtC10seserviced9SERequest_reason + 8);
    swift_bridgeObjectRetain(v103);
    v211 = sub_1001C56EC(v102, v103, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v211, v212, v100 + 4, v100 + 12);
    swift_release_n(v89, 2);
    swift_bridgeObjectRelease(v103);
    _os_log_impl((void *)&_mh_execute_header, v95, v99, "Requesting handoff token for %s", v100, 0xCu);
    swift_arrayDestroy(v101, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v101, -1, -1);
    swift_slowDealloc(v100, -1, -1);
  }
  else
  {
    swift_release_n(v89, 2);
  }

  sub_1000E4E48(v91, (uint64_t)aBlock, (uint64_t *)&unk_100347750);
  if (v216)
  {
    v104 = *sub_10006BA78(aBlock, (uint64_t)v216);
    v105 = objc_msgSend((id)objc_opt_self(_SESSessionManager), "sessionManager");
    v106 = objc_msgSend(v105, "getActiveDCKSessions");

    v107 = sub_10006C25C(0, &qword_100346F88, off_100301C60);
    v108 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v106, v107);

    swift_retain(v104);
    v109 = sub_100130AF8(v108, v104);
    swift_bridgeObjectRelease(v108);
    swift_release(v104);
    objc_msgSend(v109, "useSecureElementToken");
    swift_release(v89);

    sub_10006BA9C(aBlock);
    goto LABEL_37;
  }
LABEL_99:
  __break(1u);
}

uint64_t sub_10012B900()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  void *v30;
  uint64_t v31;
  id v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  char v60;
  uint64_t v61;
  NSObject *v62;
  uint64_t v63;
  os_log_type_t v64;
  uint8_t *v65;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  _QWORD v87[3];
  uint64_t v88;
  char v89[24];
  char v90[24];

  v0 = sub_100063D3C((uint64_t *)&unk_1003465E0);
  __chkstk_darwin(v0, v1);
  v3 = (char *)&v74 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchPredicate(0);
  v10 = *(uint64_t **)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (uint64_t *)((char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v14 = qword_100354EE8;
  *v13 = qword_100354EE8;
  ((void (*)(_QWORD *, _QWORD, uint64_t))v10[13])(v13, enum case for DispatchPredicate.onQueue(_:), v9);
  v15 = (id)v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)(v13);
  ((void (*)(_QWORD *, uint64_t))v10[1])(v13, v9);
  if ((v14 & 1) == 0)
  {
    __break(1u);
LABEL_45:
    if (v9 < 0)
      v52 = v9;
    else
      v52 = v9 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v9);
    v53 = _CocoaArrayWrapper.endIndex.getter(v52);
    swift_bridgeObjectRelease(v9);
    if (!v53)
      return 0;
    goto LABEL_6;
  }
  v10 = (uint64_t *)(v82 + OBJC_IVAR____TtC10seserviced5DSKSE_pendingRequestQueue);
  swift_beginAccess(v82 + OBJC_IVAR____TtC10seserviced5DSKSE_pendingRequestQueue, v90, 0, 0);
  v9 = *v10;
  if ((unint64_t)*v10 >> 62)
    goto LABEL_45;
  if (!*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
    return 0;
LABEL_6:
  v16 = v82 + OBJC_IVAR____TtC10seserviced5DSKSE_ownerIdentifier;
  swift_beginAccess(v82 + OBJC_IVAR____TtC10seserviced5DSKSE_ownerIdentifier, v89, 0, 0);
  sub_1000E4E48(v16, (uint64_t)v3, (uint64_t *)&unk_1003465E0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_100096700((uint64_t)v3, (uint64_t *)&unk_1003465E0);
    v17 = *v10;
    if ((unint64_t)*v10 >> 62)
    {
      if (v17 < 0)
        v54 = *v10;
      else
        v54 = v17 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*v10);
      v18 = _CocoaArrayWrapper.endIndex.getter(v54);
      if (v18)
        goto LABEL_9;
    }
    else
    {
      v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(*v10);
      if (v18)
      {
LABEL_9:
        v19 = 0;
        v79 = v17 & 0xC000000000000001;
        v75 = v17 + 32;
        v77 = v10;
        v76 = v17;
        v78 = v18;
        while (1)
        {
          v81 = v19;
          if (v79)
          {
            v20 = specialized _ArrayBuffer._getElementSlowPath(_:)(v19, v17);
          }
          else
          {
            v20 = *(_QWORD *)(v75 + 8 * v19);
            swift_retain(v20);
          }
          v21 = v20 + OBJC_IVAR____TtC10seserviced9SERequest_handoffToken;
          sub_1000E4E48(v20 + OBJC_IVAR____TtC10seserviced9SERequest_handoffToken, (uint64_t)v87, (uint64_t *)&unk_100347750);
          v22 = v88;
          sub_100096700((uint64_t)v87, (uint64_t *)&unk_100347750);
          if (v22)
            break;
          swift_release(v20);
LABEL_32:
          v19 = v81 + 1;
          if (__OFADD__(v81, 1))
          {
            __break(1u);
            JUMPOUT(0x10012C8DCLL);
          }
          if (v19 == v78)
            goto LABEL_34;
        }
        v80 = v20;
        sub_1000E4E48(v21, (uint64_t)v87, (uint64_t *)&unk_100347750);
        if (!v88)
        {
          __break(1u);
          JUMPOUT(0x10012CB78);
        }
        v86 = *sub_10006BA78(v87, v88);
        v23 = objc_msgSend((id)objc_opt_self(_SESSessionManager), "sessionManager");
        v24 = objc_msgSend(v23, "getActiveDCKSessions");

        v25 = sub_10006C25C(0, &qword_100346F88, off_100301C60);
        v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v24, v25);

        if ((unint64_t)v26 >> 62)
        {
          if (v26 < 0)
            v39 = v26;
          else
            v39 = v26 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain_n(v26, 2);
          v27 = _CocoaArrayWrapper.endIndex.getter(v39);
          swift_bridgeObjectRelease(v26);
          if (v27)
          {
LABEL_17:
            v84 = v26;
            v85 = v26 & 0xC000000000000001;
            v28 = 4;
            v83 = v27;
            do
            {
              if (v85)
                v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v28 - 4, v26);
              else
                v29 = *(id *)(v26 + 8 * v28);
              v30 = v29;
              v31 = v28 - 3;
              if (__OFADD__(v28 - 4, 1))
              {
                __break(1u);
                JUMPOUT(0x10012C87CLL);
              }
              v32 = objc_msgSend(v29, "activeEndpoint");
              if (v32)
              {
                v33 = v32;
                v34 = objc_msgSend(v32, "publicKeyIdentifier");

                static Data._unconditionallyBridgeFromObjectiveC(_:)(v34);
                v36 = v35;

                __asm { BR              X8 }
              }
              v37 = *(_QWORD *)(v86 + 16);
              v38 = *(_QWORD *)(v86 + 24);
              sub_100063C8C(v37, v38);
              sub_10006B9B4(0, 0xF000000000000000);
              sub_10006B9B4(v37, v38);

              ++v28;
            }
            while (v31 != v27);
          }
        }
        else
        {
          v27 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain(v26);
          if (v27)
            goto LABEL_17;
        }
        swift_bridgeObjectRelease_n(v26, 2);
        sub_10006BA9C(v87);
        swift_release(v80);
        v10 = v77;
        v17 = v76;
        goto LABEL_32;
      }
    }
LABEL_34:
    swift_bridgeObjectRelease(v17);
    v40 = *v10;
    if ((unint64_t)*v10 >> 62)
    {
      if (v40 < 0)
        v55 = *v10;
      else
        v55 = v40 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n(*v10, 2);
      v41 = _CocoaArrayWrapper.endIndex.getter(v55);
      if (v41)
      {
LABEL_36:
        v42 = v40 & 0xC000000000000001;
        if ((v40 & 0xC000000000000001) != 0)
        {
          v43 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v40);
          v44 = v41 - 1;
          if (v41 == 1)
            goto LABEL_39;
        }
        else
        {
          if (!*(_QWORD *)((v40 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_84;
          }
          v43 = *(_QWORD *)(v40 + 32);
          swift_retain(v43);
          v44 = v41 - 1;
          if (v41 == 1)
          {
LABEL_39:
            swift_bridgeObjectRelease_n(v40, 2);
LABEL_61:
            v56 = *v10;
            swift_retain(v43);
            v57 = swift_bridgeObjectRetain(v56);
            v58 = sub_100130550(v57, v43);
            v60 = v59;
            swift_bridgeObjectRelease(v56);
            v61 = swift_release(v43);
            if ((v60 & 1) == 0)
            {
              swift_beginAccess(v10, v87, 33, 0);
              v51 = sub_100128734(v58, sub_1000D6A90);
              swift_endAccess(v87);
              swift_release(v43);
              return v51;
            }
            v62 = Logger.logObject.getter(v61);
            v64 = static os_log_type_t.error.getter(v62, v63);
            if (os_log_type_enabled(v62, v64))
            {
              v65 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v65 = 0;
              _os_log_impl((void *)&_mh_execute_header, v62, v64, "Should never get here", v65, 2u);
              swift_slowDealloc(v65, -1, -1);
            }

            swift_release(v43);
            return 0;
          }
        }
        if (v41 >= 2)
        {
          if (v42 || (v67 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFF8) + 0x10), v67 >= 2) && v44 < v67)
          {
            v68 = 0;
            do
            {
              if (v42)
                v69 = specialized _ArrayBuffer._getElementSlowPath(_:)(v68 + 1, v40);
              else
                v69 = swift_retain(*(_QWORD *)(v40 + 8 * v68 + 40));
              v70 = *(unsigned __int8 *)(v43 + OBJC_IVAR____TtC10seserviced9SERequest_priority);
              v71 = *(unsigned __int8 *)(v69 + OBJC_IVAR____TtC10seserviced9SERequest_priority);
              v72 = v70 >= v71;
              if (v70 >= v71)
                v73 = v69;
              else
                v73 = v43;
              if (!v72)
                v43 = v69;
              swift_release(v73);
              ++v68;
            }
            while (v44 != v68);
            goto LABEL_39;
          }
LABEL_85:
          __break(1u);
        }
LABEL_84:
        __break(1u);
        goto LABEL_85;
      }
    }
    else
    {
      v41 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n(*v10, 2);
      if (v41)
        goto LABEL_36;
    }
    swift_bridgeObjectRelease_n(v40, 2);
    v43 = 0;
    goto LABEL_61;
  }
  v45 = (*(uint64_t (**)(char *, char *, uint64_t))(v5 + 32))(v8, v3, v4);
  v46 = *v10;
  __chkstk_darwin(v45, v47);
  *(&v74 - 2) = (uint64_t)v8;
  swift_bridgeObjectRetain(v46);
  v48 = sub_10012860C(sub_100130D7C, (uint64_t)(&v74 - 4), v46);
  v50 = v49;
  swift_bridgeObjectRelease(v46);
  if ((v50 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    return 0;
  }
  swift_beginAccess(v10, v87, 33, 0);
  v51 = sub_100128734(v48, sub_1000D6A90);
  swift_endAccess(v87);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return v51;
}

void sub_10012CBE8(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(_QWORD *, uint64_t, uint64_t);
  id v11;
  void (*v12)(_QWORD *, uint64_t);
  void *v13;
  id v14;
  char v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;

  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (uint64_t *)((char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v8 = qword_100354EE8;
  *v7 = qword_100354EE8;
  v9 = enum case for DispatchPredicate.onQueue(_:);
  v10 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v4 + 104);
  v10(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  v11 = (id)v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  v12 = *(void (**)(_QWORD *, uint64_t))(v4 + 8);
  v12(v7, v3);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  v13 = (void *)qword_100354EE8;
  *v7 = qword_100354EE8;
  v10(v7, v9, v3);
  v14 = v13;
  v15 = _dispatchPreconditionTest(_:)(v7);
  v12(v7, v3);
  if ((v15 & 1) == 0)
  {
LABEL_12:
    __break(1u);
    return;
  }
  v16 = OBJC_IVAR____TtC10seserviced5DSKSE_seTimer;
  v17 = *(void **)(v1 + OBJC_IVAR____TtC10seserviced5DSKSE_seTimer);
  if (v17)
  {
    v18 = v17;
    if (sub_10004C5C8((_BOOL8)v18))
      sub_10004C548((uint64_t)v18);

    v19 = *(_QWORD *)(v1 + v16);
    if (v19)
      sub_10004C410(v19, a1);
  }
}

void sub_10012CD54(void *a1, char a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  void *v39;
  id v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  os_log_type_t v57;
  uint64_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint8_t *v67;
  uint64_t v68;
  NSObject *v69;
  uint64_t v70;
  os_log_type_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  void *v79;
  char v80;
  NSObject *v81;
  uint64_t v82;
  os_log_type_t v83;
  uint8_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int (*v88)(_QWORD, _QWORD, _QWORD);
  uint64_t v89;
  void (*v90)(void *, _QWORD);
  uint64_t v91;
  uint64_t v92;
  NSObject *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  os_log_type_t v97;
  uint8_t *v98;
  NSObject *v99;
  uint64_t v100;
  os_log_type_t v101;
  uint8_t *v102;
  void (*v103)(_QWORD, uint64_t);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  NSObject *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  os_log_type_t v113;
  uint64_t v114;
  _DWORD *v115;
  _DWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  double v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  id v128;
  _QWORD *v129;
  uint64_t v130;
  unsigned int (*v131)(uint64_t, uint64_t, uint64_t);
  unsigned int (*v132)(_QWORD, _QWORD, _QWORD);
  char *v133;
  void (*v134)(uint64_t, char *, uint64_t);
  uint64_t v135;
  void (*v136)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void (*v145)(char *, uint64_t);
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  void (*v150)(char *, uint64_t);
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  os_log_type_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  void *v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  void *v177;
  void (*v178)(char *, unsigned int (*)(_QWORD, _QWORD, _QWORD), uint64_t);
  uint64_t v179;
  id v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  char *v188;
  uint64_t v189;
  _QWORD *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  _BYTE v194[16];
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _BYTE v198[16];
  _QWORD v199[3];
  char v200[16];

  v185 = sub_100063D3C(&qword_100346F80);
  __chkstk_darwin(v185, v8);
  v186 = (uint64_t)&v176 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100063D3C((uint64_t *)&unk_1003465E0);
  v12 = __chkstk_darwin(v10, v11);
  v188 = (char *)&v176 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12, v14);
  v184 = (uint64_t)&v176 - v16;
  v18 = __chkstk_darwin(v15, v17);
  v182 = (uint64_t)&v176 - v19;
  v21 = __chkstk_darwin(v18, v20);
  v191 = (uint64_t)&v176 - v22;
  v24 = __chkstk_darwin(v21, v23);
  v192 = (uint64_t)&v176 - v25;
  __chkstk_darwin(v24, v26);
  v190 = (uint64_t *)((char *)&v176 - v27);
  v28 = type metadata accessor for UUID(0);
  v189 = *(_QWORD *)(v28 - 8);
  v30 = __chkstk_darwin(v28, v29);
  v183 = (char *)&v176 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30, v32);
  v187 = (char *)&v176 - v33;
  v34 = type metadata accessor for DispatchPredicate(0);
  v35 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34, v36);
  v38 = (uint64_t *)((char *)&v176 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v39 = (void *)qword_100354EE8;
  *v38 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v35 + 104))(v38, enum case for DispatchPredicate.onQueue(_:), v34);
  v40 = v39;
  v41 = _dispatchPreconditionTest(_:)(v38);
  (*(void (**)(_QWORD *, uint64_t))(v35 + 8))(v38, v34);
  if ((v41 & 1) == 0)
  {
    __break(1u);
LABEL_67:
    __break(1u);
    return;
  }
  v42 = OBJC_IVAR____TtC10seserviced5DSKSE_state;
  *(_BYTE *)(a3 + OBJC_IVAR____TtC10seserviced5DSKSE_state) = 2;
  v43 = a3 + OBJC_IVAR____TtC10seserviced5DSKSE_logger;
  if ((a2 & 1) != 0)
  {
    sub_100130D98(a1, 1);
    swift_errorRetain(a1);
    v68 = swift_errorRetain(a1);
    v69 = Logger.logObject.getter(v68);
    v71 = static os_log_type_t.error.getter(v69, v70);
    if (os_log_type_enabled(v69, v71))
    {
      v72 = swift_slowAlloc(18, -1);
      v73 = a3;
      v74 = swift_slowAlloc(32, -1);
      v197 = v74;
      *(_DWORD *)v72 = 67109378;
      LODWORD(v193) = a4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v193, (char *)&v193 + 4, v72 + 4, v72 + 8);
      *(_WORD *)(v72 + 8) = 2080;
      swift_getErrorValue(a1, v200, v199);
      v75 = Error.localizedDescription.getter(v199[1], v199[2]);
      v77 = v76;
      v193 = sub_1001C56EC(v75, v76, &v197);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v193, v194, v72 + 10, v72 + 18);
      swift_bridgeObjectRelease(v77);
      sub_100130DA4(a1, 1);
      sub_100130DA4(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v69, v71, "Failed to get SE %u error %s", (uint8_t *)v72, 0x12u);
      swift_arrayDestroy(v74, 1, (char *)&type metadata for Any + 8);
      v78 = v74;
      a3 = v73;
      swift_slowDealloc(v78, -1, -1);
      swift_slowDealloc(v72, -1, -1);

    }
    else
    {

      sub_100130DA4(a1, 1);
      sub_100130DA4(a1, 1);
    }
    *(_BYTE *)(a3 + v42) = 0;
    sub_10012988C();
    v79 = a1;
    v80 = 1;
    goto LABEL_65;
  }
  v181 = v28;
  v180 = a1;
  v44 = Logger.logObject.getter(v180);
  v48 = static os_log_type_t.info.getter(v44, v45, v46, v47);
  if (os_log_type_enabled(v44, v48))
  {
    v49 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v49 = 67109120;
    LODWORD(v197) = a4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v197, (char *)&v197 + 4, v49 + 4, v49 + 8);
    _os_log_impl((void *)&_mh_execute_header, v44, v48, "Got SE identifier %u", v49, 8u);
    swift_slowDealloc(v49, -1, -1);
  }

  v50 = sub_10012B900();
  if (v50)
  {
    v51 = v50;
    v52 = swift_retain_n(v50, 3);
    v53 = Logger.logObject.getter(v52);
    v57 = static os_log_type_t.info.getter(v53, v54, v55, v56);
    if (os_log_type_enabled(v53, v57))
    {
      v58 = swift_slowAlloc(12, -1);
      v179 = v43;
      v59 = (uint8_t *)v58;
      v60 = swift_slowAlloc(32, -1);
      v197 = v60;
      *(_DWORD *)v59 = 136315138;
      v178 = (void (*)(char *, unsigned int (*)(_QWORD, _QWORD, _QWORD), uint64_t))v42;
      v177 = a1;
      v61 = (uint64_t *)(v51 + OBJC_IVAR____TtC10seserviced9SERequest_reason);
      v62 = v51;
      v63 = a3;
      v65 = *v61;
      v64 = v61[1];
      swift_bridgeObjectRetain(v64);
      v66 = v65;
      a3 = v63;
      v51 = v62;
      v193 = sub_1001C56EC(v66, v64, &v197);
      a1 = v177;
      v42 = (uint64_t)v178;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v193, v194, v59 + 4, v59 + 12);
      swift_release_n(v51, 2);
      swift_bridgeObjectRelease(v64);
      _os_log_impl((void *)&_mh_execute_header, v53, v57, "Got request for \"%s\"", v59, 0xCu);
      swift_arrayDestroy(v60, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v60, -1, -1);
      v67 = v59;
      v43 = v179;
      swift_slowDealloc(v67, -1, -1);
    }
    else
    {
      swift_release_n(v51, 2);
    }

    v87 = v191;
    v86 = v192;
    v88 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v190;
    if (*(_BYTE *)(v51 + OBJC_IVAR____TtC10seserviced9SERequest_isBlockSelecting) != 1)
    {
      v99 = Logger.logObject.getter(v85);
      v101 = static os_log_type_t.error.getter(v99, v100);
      if (os_log_type_enabled(v99, v101))
      {
        v102 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v102 = 0;
        _os_log_impl((void *)&_mh_execute_header, v99, v101, "First APDU of session is not SELECT", v102, 2u);
        swift_slowDealloc(v102, -1, -1);
      }

      *(_BYTE *)(a3 + v42) = 0;
      v103 = *(void (**)(_QWORD, uint64_t))(v51 + 32);
      v104 = *(_QWORD *)(v51 + 40);
      swift_retain(v104);
      v103(0, 1);
      swift_release(v104);
      goto LABEL_64;
    }
    if ((*(_BYTE *)(v51 + OBJC_IVAR____TtC10seserviced9SERequest_sessionChecks + 8) & 1) != 0)
      goto LABEL_20;
    v105 = *(_QWORD *)(v51 + OBJC_IVAR____TtC10seserviced9SERequest_sessionChecks);
    if ((v105 & 1) == 0)
    {
      if ((v105 & 2) != 0)
      {
        v106 = v51 + OBJC_IVAR____TtC10seserviced9SERequest_sequenceNumber;
        if ((*(_BYTE *)(v51 + OBJC_IVAR____TtC10seserviced9SERequest_sequenceNumber + 8) & 1) != 0
          || (v107 = *(_QWORD *)(v51 + OBJC_IVAR____TtC10seserviced9SERequest_peer)) == 0
          || *(_QWORD *)v106 != *(_QWORD *)(v107 + OBJC_IVAR____TtC10seserviced4Peer_sequenceNumber))
        {
          v108 = swift_retain_n(v51, 2);
          v109 = Logger.logObject.getter(v108);
          v113 = static os_log_type_t.info.getter(v109, v110, v111, v112);
          if (os_log_type_enabled(v109, v113))
          {
            v114 = -1;
            v115 = (_DWORD *)swift_slowAlloc(22, -1);
            v116 = v115;
            *v115 = 134218240;
            v117 = *(_QWORD *)v106;
            if (*(_BYTE *)(v106 + 8))
              v117 = -1;
            v197 = v117;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v197, v198, v115 + 1, v115 + 3);
            *((_WORD *)v116 + 6) = 2048;
            v118 = *(_QWORD *)(v51 + OBJC_IVAR____TtC10seserviced9SERequest_peer);
            if (v118)
              v114 = *(_QWORD *)(v118 + OBJC_IVAR____TtC10seserviced4Peer_sequenceNumber);
            swift_release(v51);
            v197 = v114;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v197, v198, (char *)v116 + 14, (char *)v116 + 22);
            swift_release(v51);
            _os_log_impl((void *)&_mh_execute_header, v109, v113, "Got different sequence numbers request %ld current %ld", (uint8_t *)v116, 0x16u);
            swift_slowDealloc(v116, -1, -1);
            goto LABEL_57;
          }
          v146 = v51;
          v147 = 2;
LABEL_56:
          swift_release_n(v146, v147);
LABEL_57:

LABEL_63:
          *(_BYTE *)(a3 + v42) = 0;
          goto LABEL_64;
        }
      }
LABEL_20:
      v89 = OBJC_IVAR____TtC10seserviced5DSKSE_expressTransactionInProgress;
      *(_BYTE *)(a3 + OBJC_IVAR____TtC10seserviced5DSKSE_expressTransactionInProgress) = 1;
      sub_1001F119C(0xD000000000000042, 0x80000001002BD240, 0, 0xF000000000000000, 0, 0xF000000000000000, 0);
      v90 = *(void (**)(void *, _QWORD))(v51 + 32);
      v91 = *(_QWORD *)(v51 + 40);
      sub_100130D98(a1, 0);
      swift_retain(v91);
      v90(a1, 0);
      sub_100130DA4(a1, 0);
      v92 = swift_release(v91);
      if ((*(_BYTE *)(v51 + 24) & 1) != 0)
      {
        v93 = Logger.logObject.getter(v92);
        v97 = static os_log_type_t.info.getter(v93, v94, v95, v96);
        if (os_log_type_enabled(v93, v97))
        {
          v98 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v98 = 0;
          _os_log_impl((void *)&_mh_execute_header, v93, v97, "Releasing the SE", v98, 2u);
          swift_slowDealloc(v98, -1, -1);
        }

        *(_BYTE *)(a3 + v89) = 0;
        sub_1001F119C(0xD000000000000041, 0x80000001002BD1D0, 0, 0xF000000000000000, 0, 0xF000000000000000, 0);
        goto LABEL_63;
      }
      v119 = *(_QWORD *)(v51 + OBJC_IVAR____TtC10seserviced9SERequest_peer);
      if (v119)
      {
        v120 = *(double *)(v51 + 16);
        v122 = (uint64_t)v188;
        v121 = v189;
        v123 = v181;
        (*(void (**)(char *, uint64_t, uint64_t))(v189 + 16))(v188, v119 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier, v181);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v121 + 56))(v122, 0, 1, v123);
        v124 = a3 + OBJC_IVAR____TtC10seserviced5DSKSE_ownerIdentifier;
        swift_beginAccess(a3 + OBJC_IVAR____TtC10seserviced5DSKSE_ownerIdentifier, &v197, 33, 0);
        sub_10012E5B4(v122, v124);
        swift_endAccess(&v197);
        v125 = v51 + OBJC_IVAR____TtC10seserviced9SERequest_connectionIdentifier;
        v126 = a3 + OBJC_IVAR____TtC10seserviced5DSKSE_ownerConnectionIdentifier;
        swift_beginAccess(a3 + OBJC_IVAR____TtC10seserviced5DSKSE_ownerConnectionIdentifier, &v197, 33, 0);
        sub_100130DB0(v125, v126);
        swift_endAccess(&v197);
        v127 = *(void **)(a3 + OBJC_IVAR____TtC10seserviced5DSKSE_secureElementHandle);
        *(_QWORD *)(a3 + OBJC_IVAR____TtC10seserviced5DSKSE_secureElementHandle) = a1;
        v128 = v180;

        *(_BYTE *)(a3 + v42) = 3;
        sub_10012CBE8(v120);
LABEL_64:
        sub_10012988C();
        swift_release_n(v51, 2);
        v79 = a1;
        v80 = 0;
LABEL_65:
        sub_100130DA4(v79, v80);
        return;
      }
      goto LABEL_67;
    }
    v177 = (void *)(v51 + OBJC_IVAR____TtC10seserviced9SERequest_connectionIdentifier);
    sub_1000E4E48(v51 + OBJC_IVAR____TtC10seserviced9SERequest_connectionIdentifier, (uint64_t)v190, (uint64_t *)&unk_1003465E0);
    v129 = (_QWORD *)v189;
    v130 = v181;
    v190 = *(_QWORD **)(v189 + 48);
    if (((unsigned int (*)(_QWORD, uint64_t, uint64_t))v190)(v88, 1, v181) == 1)
    {
      sub_100096700((uint64_t)v88, (uint64_t *)&unk_1003465E0);
      v131 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v190;
      goto LABEL_52;
    }
    v179 = v43;
    v132 = v88;
    v133 = v187;
    v178 = (void (*)(char *, unsigned int (*)(_QWORD, _QWORD, _QWORD), uint64_t))v129[4];
    v178(v187, v132, v130);
    v134 = (void (*)(uint64_t, char *, uint64_t))v129[2];
    v134(v86, v133, v130);
    v135 = v86;
    v136 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v129[7];
    v137 = 1;
    v136(v135, 0, 1, v130);
    v138 = *(_QWORD *)(v51 + OBJC_IVAR____TtC10seserviced9SERequest_peer);
    if (v138)
    {
      v139 = (char *)(v138 + OBJC_IVAR____TtC10seserviced4Peer_connectionIdentifier);
      swift_beginAccess(v138 + OBJC_IVAR____TtC10seserviced4Peer_connectionIdentifier, &v193, 0, 0);
      v134(v87, v139, v130);
      v137 = 0;
    }
    v136(v87, v137, 1, v130);
    v140 = v186;
    v141 = v186 + *(int *)(v185 + 48);
    v142 = v192;
    sub_1000E4E48(v192, v186, (uint64_t *)&unk_1003465E0);
    v185 = v141;
    sub_1000E4E48(v87, v141, (uint64_t *)&unk_1003465E0);
    v131 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v190;
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v190)(v140, 1, v130) == 1)
    {
      sub_100096700(v87, (uint64_t *)&unk_1003465E0);
      sub_100096700(v142, (uint64_t *)&unk_1003465E0);
      (*(void (**)(char *, uint64_t))(v189 + 8))(v187, v130);
      if (v131(v185, 1, v130) == 1)
      {
        sub_100096700(v140, (uint64_t *)&unk_1003465E0);
        goto LABEL_20;
      }
    }
    else
    {
      v143 = v182;
      sub_1000E4E48(v140, v182, (uint64_t *)&unk_1003465E0);
      v144 = v185;
      if (v131(v185, 1, v130) != 1)
      {
        v148 = v183;
        v178(v183, (unsigned int (*)(_QWORD, _QWORD, _QWORD))v144, v130);
        v149 = sub_1000639EC((unint64_t *)&qword_100346150, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        LODWORD(v185) = dispatch thunk of static Equatable.== infix(_:_:)(v143, v148, v130, v149);
        v150 = *(void (**)(char *, uint64_t))(v189 + 8);
        v150(v148, v130);
        sub_100096700(v191, (uint64_t *)&unk_1003465E0);
        sub_100096700(v192, (uint64_t *)&unk_1003465E0);
        v150(v187, v130);
        v150((char *)v143, v130);
        sub_100096700(v186, (uint64_t *)&unk_1003465E0);
        if ((v185 & 1) != 0)
          goto LABEL_20;
LABEL_52:
        v151 = swift_retain_n(v51, 4);
        v109 = Logger.logObject.getter(v151);
        v155 = static os_log_type_t.info.getter(v109, v152, v153, v154);
        if (os_log_type_enabled(v109, v155))
        {
          v192 = v51;
          v178 = (void (*)(char *, unsigned int (*)(_QWORD, _QWORD, _QWORD), uint64_t))v42;
          v191 = a3;
          v156 = 1819047278;
          v157 = swift_slowAlloc(22, -1);
          v158 = swift_slowAlloc(64, -1);
          v196 = v158;
          *(_DWORD *)v157 = 136315394;
          v159 = v184;
          sub_1000E4E48((uint64_t)v177, v184, (uint64_t *)&unk_1003465E0);
          v160 = v181;
          v161 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v131)(v159, 1, v181);
          v162 = a1;
          if ((_DWORD)v161 == 1)
          {
            sub_100096700(v159, (uint64_t *)&unk_1003465E0);
            v163 = 0xE400000000000000;
            v164 = 1819047278;
          }
          else
          {
            v165 = v159;
            v164 = UUID.uuidString.getter(v161);
            v163 = v166;
            (*(void (**)(uint64_t, uint64_t))(v189 + 8))(v165, v160);
          }
          v197 = sub_1001C56EC(v164, v163, &v196);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v197, v198, v157 + 4, v157 + 12);
          v167 = v192;
          swift_release_n(v192, 2);
          swift_bridgeObjectRelease(v163);
          *(_WORD *)(v157 + 12) = 2080;
          v168 = *(_QWORD *)(v167 + OBJC_IVAR____TtC10seserviced9SERequest_peer);
          if (v168)
          {
            v169 = v168 + OBJC_IVAR____TtC10seserviced4Peer_connectionIdentifier;
            swift_beginAccess(v168 + OBJC_IVAR____TtC10seserviced4Peer_connectionIdentifier, &v197, 0, 0);
            v170 = v189;
            v171 = v183;
            v172 = v181;
            v173 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v189 + 16))(v183, v169, v181);
            v156 = UUID.uuidString.getter(v173);
            v175 = v174;
            (*(void (**)(char *, uint64_t))(v170 + 8))(v171, v172);
          }
          else
          {
            v175 = 0xE400000000000000;
          }
          a1 = v162;
          v195 = sub_1001C56EC(v156, v175, &v196);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v195, &v196, v157 + 14, v157 + 22);
          v51 = v192;
          swift_release_n(v192, 2);
          swift_bridgeObjectRelease(v175);
          _os_log_impl((void *)&_mh_execute_header, v109, v155, "Got different connection identifiers request %s current %s", (uint8_t *)v157, 0x16u);
          swift_arrayDestroy(v158, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v158, -1, -1);
          swift_slowDealloc(v157, -1, -1);

          a3 = v191;
          v42 = (uint64_t)v178;
          goto LABEL_63;
        }
        v146 = v51;
        v147 = 4;
        goto LABEL_56;
      }
      sub_100096700(v191, (uint64_t *)&unk_1003465E0);
      sub_100096700(v192, (uint64_t *)&unk_1003465E0);
      v145 = *(void (**)(char *, uint64_t))(v189 + 8);
      v145(v187, v130);
      v145((char *)v143, v130);
    }
    sub_100096700(v140, &qword_100346F80);
    goto LABEL_52;
  }
  v81 = Logger.logObject.getter(0);
  v83 = static os_log_type_t.error.getter(v81, v82);
  if (os_log_type_enabled(v81, v83))
  {
    v84 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v84 = 0;
    _os_log_impl((void *)&_mh_execute_header, v81, v83, "Got SE but no request", v84, 2u);
    swift_slowDealloc(v84, -1, -1);
  }
  sub_100130DA4(a1, 0);

  *(_BYTE *)(a3 + v42) = 0;
}

uint64_t sub_10012DEE4(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, uint64_t);
  int v28;
  uint64_t *v29;
  char v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  char *v35;
  uint64_t v36;

  v36 = a2;
  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v35 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100063D3C(&qword_100346F80);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100063D3C((uint64_t *)&unk_1003465E0);
  v13 = __chkstk_darwin(v11, v12);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v13, v16);
  v19 = (char *)&v35 - v18;
  __chkstk_darwin(v17, v20);
  v22 = (char *)&v35 - v21;
  v23 = *(_QWORD *)(*a1 + OBJC_IVAR____TtC10seserviced9SERequest_peer);
  if (v23)
  {
    v24 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    v24((char *)&v35 - v21, v23 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier, v3);
    v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v25(v22, 0, 1, v3);
  }
  else
  {
    v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v25((char *)&v35 - v21, 1, 1, v3);
    v24 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  }
  v24(v19, v36, v3);
  v25(v19, 0, 1, v3);
  v26 = (uint64_t)&v10[*(int *)(v7 + 48)];
  sub_1000E4E48((uint64_t)v22, (uint64_t)v10, (uint64_t *)&unk_1003465E0);
  sub_1000E4E48((uint64_t)v19, v26, (uint64_t *)&unk_1003465E0);
  v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v27((uint64_t)v10, 1, v3) == 1)
  {
    sub_100096700((uint64_t)v19, (uint64_t *)&unk_1003465E0);
    sub_100096700((uint64_t)v22, (uint64_t *)&unk_1003465E0);
    v28 = v27(v26, 1, v3);
    if (v28 == 1)
      v29 = (uint64_t *)&unk_1003465E0;
    else
      v29 = &qword_100346F80;
    if (v28 == 1)
      v30 = -1;
    else
      v30 = 0;
  }
  else
  {
    sub_1000E4E48((uint64_t)v10, (uint64_t)v15, (uint64_t *)&unk_1003465E0);
    if (v27(v26, 1, v3) == 1)
    {
      sub_100096700((uint64_t)v19, (uint64_t *)&unk_1003465E0);
      sub_100096700((uint64_t)v22, (uint64_t *)&unk_1003465E0);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v15, v3);
      v30 = 0;
      v29 = &qword_100346F80;
    }
    else
    {
      v31 = v35;
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(v35, v26, v3);
      v32 = sub_1000639EC((unint64_t *)&qword_100346150, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v30 = dispatch thunk of static Equatable.== infix(_:_:)(v15, v31, v3, v32);
      v33 = *(void (**)(char *, uint64_t))(v4 + 8);
      v33(v31, v3);
      v29 = (uint64_t *)&unk_1003465E0;
      sub_100096700((uint64_t)v19, (uint64_t *)&unk_1003465E0);
      sub_100096700((uint64_t)v22, (uint64_t *)&unk_1003465E0);
      v33(v15, v3);
    }
  }
  sub_100096700((uint64_t)v10, v29);
  return v30 & 1;
}

uint64_t sub_10012E240()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC10seserviced5DSKSE_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_100096700(v0 + OBJC_IVAR____TtC10seserviced5DSKSE_ownerConnectionIdentifier, (uint64_t *)&unk_1003465E0);
  sub_100096700(v0 + OBJC_IVAR____TtC10seserviced5DSKSE_ownerIdentifier, (uint64_t *)&unk_1003465E0);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced5DSKSE_pendingRequestQueue));

  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10012E2F0()
{
  return type metadata accessor for DSKSE(0);
}

uint64_t type metadata accessor for DSKSE(uint64_t a1)
{
  uint64_t result;

  result = qword_100346EA0;
  if (!qword_100346EA0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DSKSE);
  return result;
}

void sub_10012E334(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  void *v11;
  void *v12;

  v2 = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = &unk_10028A1B0;
    v6[2] = &unk_10028A1B0;
    sub_10012E3EC(319);
    if (v5 <= 0x3F)
    {
      v7 = *(_QWORD *)(v4 - 8) + 64;
      v8 = v7;
      v9 = (char *)&value witness table for Builtin.BridgeObject + 64;
      v10 = &unk_10028A1C8;
      v11 = &unk_10028A1C8;
      v12 = &unk_10028A1E0;
      swift_updateClassMetadata2(a1, 256, 9, v6, a1 + 80);
    }
  }
}

void sub_10012E3EC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100346EB0)
  {
    v2 = type metadata accessor for UUID(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100346EB0);
  }
}

ValueMetadata *type metadata accessor for SEError()
{
  return &type metadata for SEError;
}

uint64_t _s10seserviced7SEErrorOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10012E4A4 + 4 * byte_10028A19D[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10012E4D8 + 4 * byte_10028A198[v4]))();
}

uint64_t sub_10012E4D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10012E4E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10012E4E8);
  return result;
}

uint64_t sub_10012E4F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10012E4FCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10012E500(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10012E508(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DSKSE.State()
{
  return &type metadata for DSKSE.State;
}

unint64_t sub_10012E528()
{
  unint64_t result;

  result = qword_100346F70;
  if (!qword_100346F70)
  {
    result = swift_getWitnessTable(&unk_10028A248, &type metadata for DSKSE.State);
    atomic_store(result, (unint64_t *)&qword_100346F70);
  }
  return result;
}

unint64_t sub_10012E570()
{
  unint64_t result;

  result = qword_100346F78;
  if (!qword_100346F78)
  {
    result = swift_getWitnessTable(&unk_10028A2F0, &type metadata for SEError);
    atomic_store(result, (unint64_t *)&qword_100346F78);
  }
  return result;
}

uint64_t sub_10012E5B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100063D3C((uint64_t *)&unk_1003465E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10012E5FC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  char v6;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v2 = v1;
  v4 = *v1;
  swift_bridgeObjectRetain(v4);
  v5 = sub_100187E34(a1);
  LOBYTE(a1) = v6;
  swift_bridgeObjectRelease(v4);
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v8 = *v2;
  v14 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10018FDCC();
    v8 = v14;
  }
  v9 = *(_QWORD *)(v8 + 48);
  v10 = type metadata accessor for UUID(0);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * v5, v10);
  v11 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 24 * v5);
  sub_10012EE28(v5, v8);
  v12 = *v2;
  *v2 = v8;
  swift_bridgeObjectRelease(v12);
  return v11;
}

double sub_10012E704@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  unint64_t v9;
  char v10;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  double result;
  uint64_t v15;

  v4 = v3;
  v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  v9 = sub_100187ED0(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v12 = *v4;
    v15 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10019000C();
      v12 = v15;
    }
    swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v9 + 8));
    sub_10006C2B4((_OWORD *)(*(_QWORD *)(v12 + 56) + 32 * v9), a3);
    sub_10012F0D4(v9, v12);
    v13 = *v4;
    *v4 = v12;
    swift_bridgeObjectRelease(v13);
  }
  else
  {
    result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t sub_10012E7F4(uint64_t a1, uint64_t a2)
{
  return sub_10012EB88(a1, a2, (void (*)(void))sub_10019055C);
}

double sub_10012E800@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  unint64_t v9;
  char v10;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  double result;
  uint64_t v15;

  v4 = v3;
  v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  v9 = sub_100187F6C(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v12 = *v4;
    v15 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100190568();
      v12 = v15;
    }
    sub_100063CD0(*(_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v9), *(_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v9 + 8));
    sub_1000DB160((__int128 *)(*(_QWORD *)(v12 + 56) + 40 * v9), a3);
    sub_10012F62C(v9, v12);
    v13 = *v4;
    *v4 = v12;
    swift_bridgeObjectRelease(v13);
  }
  else
  {
    *(_QWORD *)(a3 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

uint64_t sub_10012E8F8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_100187F6C(a1, a2);
  LOBYTE(a2) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v10 = *v3;
  v14 = *v3;
  *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100190AE4();
    v10 = v14;
  }
  sub_100063CD0(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v7), *(_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v7 + 8));
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v7);
  sub_10012F81C(v7, v10);
  v12 = *v3;
  *v3 = v10;
  swift_bridgeObjectRelease(v12);
  return v11;
}

uint64_t sub_10012E9C4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_100187ED0(a1, a2);
  LOBYTE(a2) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v10 = *v3;
  v14 = *v3;
  *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100190C94();
    v10 = v14;
  }
  swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v7 + 8));
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v7);
  sub_10012FA00(v7, v10);
  v12 = *v3;
  *v3 = v10;
  swift_bridgeObjectRelease(v12);
  return v11;
}

double sub_10012EA90@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double result;
  uint64_t v15;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_100187E34(a1);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v10 = *v3;
    v15 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100190E48();
      v10 = v15;
    }
    v11 = *(_QWORD *)(v10 + 48);
    v12 = type metadata accessor for UUID(0);
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11 + *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72) * v7, v12);
    *a2 = *(_OWORD *)(*(_QWORD *)(v10 + 56) + 16 * v7);
    sub_10012FBD4(v7, v10);
    v13 = *v3;
    *v3 = v10;
    swift_bridgeObjectRelease(v13);
  }
  else
  {
    result = 0.0;
    *a2 = xmmword_1002888D0;
  }
  return result;
}

uint64_t sub_10012EB7C(uint64_t a1, uint64_t a2)
{
  return sub_10012EB88(a1, a2, (void (*)(void))sub_1001916A4);
}

uint64_t sub_10012EB88(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t *v3;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  char v10;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v5 = v3;
  v8 = *v5;
  swift_bridgeObjectRetain(*v5);
  v9 = sub_100187F6C(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v5);
  v12 = *v5;
  v16 = *v5;
  *v5 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    a3();
    v12 = v16;
  }
  sub_100063CD0(*(_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v9), *(_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v9 + 8));
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v9);
  sub_10012F81C(v9, v12);
  v14 = *v5;
  *v5 = v12;
  swift_bridgeObjectRelease(v14);
  return v13;
}

uint64_t sub_10012EC60(uint64_t a1, uint64_t a2)
{
  return sub_10012EB88(a1, a2, (void (*)(void))sub_1001916B0);
}

uint64_t sub_10012EC6C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  char v6;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v2 = v1;
  v4 = *v2;
  swift_bridgeObjectRetain(*v2);
  v5 = sub_100187E34(a1);
  LOBYTE(a1) = v6;
  swift_bridgeObjectRelease(v4);
  if ((a1 & 1) == 0)
    return 3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v8 = *v2;
  v14 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100191868();
    v8 = v14;
  }
  v9 = *(_QWORD *)(v8 + 48);
  v10 = type metadata accessor for UUID(0);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * v5, v10);
  v11 = *(unsigned __int8 *)(*(_QWORD *)(v8 + 56) + v5);
  sub_10012FE78(v5, v8);
  v12 = *v2;
  *v2 = v8;
  swift_bridgeObjectRelease(v12);
  return v11;
}

uint64_t sub_10012ED44(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  char v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v15;

  v2 = v1;
  v4 = *v1;
  swift_bridgeObjectRetain(v4);
  v5 = sub_100187E34(a1);
  v7 = v6;
  swift_bridgeObjectRelease(v4);
  if ((v7 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v9 = *v2;
    v15 = *v2;
    *v2 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100191A88();
      v9 = v15;
    }
    v10 = *(_QWORD *)(v9 + 48);
    v11 = type metadata accessor for UUID(0);
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * v5, v11);
    v12 = *(unsigned __int16 *)(*(_QWORD *)(v9 + 56) + 2 * v5);
    sub_100130118(v5, v9);
    v13 = *v2;
    *v2 = v9;
    swift_bridgeObjectRelease(v13);
  }
  else
  {
    v12 = 0;
  }
  return v12 & 0xFFFEFFFF | (((v7 & 1) == 0) << 16);
}

unint64_t sub_10012EE28(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  __int128 *v28;
  __int128 v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, unint64_t, uint64_t);
  unint64_t v38;
  uint64_t v39;

  v4 = type metadata accessor for UUID(0);
  v39 = *(_QWORD *)(v4 - 8);
  result = __chkstk_darwin();
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v38 = (result + 1) & v11;
      v12 = *(_QWORD *)(v39 + 72);
      v37 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v37(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        v18 = *(_QWORD *)(a2 + 40);
        v19 = sub_1000639EC((unint64_t *)&unk_100347730, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v4, v19);
        result = (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v7, v4);
        v13 = v17;
        v21 = v20 & v17;
        if (a1 >= (uint64_t)v38)
        {
          if (v21 >= v38 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            v24 = *(_QWORD *)(a2 + 48);
            result = v24 + v15 * a1;
            v25 = v24 + v16;
            v8 = v14;
            if (v15 * a1 < v16 || (v12 = v15, result >= v25 + v15))
            {
              result = swift_arrayInitWithTakeFrontToBack(result, v25, 1, v4);
LABEL_21:
              v13 = v17;
              v12 = v15;
            }
            else if (v15 * a1 != v16)
            {
              result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            v26 = *(_QWORD *)(a2 + 56);
            v27 = v26 + 24 * a1;
            v28 = (__int128 *)(v26 + 24 * v10);
            if (a1 != v10 || (a1 = v10, v27 >= (unint64_t)v28 + 24))
            {
              v29 = *v28;
              *(_QWORD *)(v27 + 16) = *((_QWORD *)v28 + 2);
              *(_OWORD *)v27 = v29;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v38 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        v8 = v14;
        v12 = v15;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v30 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v31 = *v30;
    v32 = (-1 << a1) - 1;
  }
  else
  {
    v30 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v32 = *v30;
    v31 = (-1 << a1) - 1;
  }
  *v30 = v32 & v31;
  v33 = *(_QWORD *)(a2 + 16);
  v34 = __OFSUB__(v33, 1);
  v35 = v33 - 1;
  if (v34)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v35;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10012F0D4(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD v27[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v10 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v11 = *v10;
        v12 = v10[1];
        Hasher.init(_seed:)(v27);
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v27, v11, v12);
        v13 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v12);
        v14 = v13 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v14 < v8)
            goto LABEL_5;
        }
        else if (v14 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v14)
        {
LABEL_11:
          v15 = *(_QWORD *)(a2 + 48);
          v16 = (_OWORD *)(v15 + 16 * v3);
          v17 = (_OWORD *)(v15 + 16 * v6);
          if (v3 != v6 || v16 >= v17 + 1)
            *v16 = *v17;
          v18 = *(_QWORD *)(a2 + 56);
          v19 = (_OWORD *)(v18 + 32 * v3);
          v20 = (_OWORD *)(v18 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v19 >= v20 + 2))
          {
            v9 = v20[1];
            *v19 = *v20;
            v19[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v22 = *v21;
    v23 = (-1 << v3) - 1;
  }
  else
  {
    v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    v23 = *v21;
    v22 = (-1 << result) - 1;
  }
  *v21 = v23 & v22;
  v24 = *(_QWORD *)(a2 + 16);
  v25 = __OFSUB__(v24, 1);
  v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10012F2A8(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  Swift::UInt v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  __int128 *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD v25[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v11 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)(v25);
        Hasher._combine(_:)(v11);
        result = Hasher._finalize()();
        v12 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8)
            goto LABEL_5;
        }
        else if (v12 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_11:
          v13 = *(_QWORD *)(a2 + 48);
          v14 = (_QWORD *)(v13 + 8 * v3);
          v15 = (_QWORD *)(v13 + 8 * v6);
          if (v3 != v6 || v14 >= v15 + 1)
            *v14 = *v15;
          v16 = *(_QWORD *)(a2 + 56);
          v17 = v16 + 40 * v3;
          v18 = (__int128 *)(v16 + 40 * v6);
          if (v3 != v6 || (v3 = v6, v17 >= (unint64_t)v18 + 40))
          {
            v9 = *v18;
            v10 = v18[1];
            *(_QWORD *)(v17 + 32) = *((_QWORD *)v18 + 4);
            *(_OWORD *)v17 = v9;
            *(_OWORD *)(v17 + 16) = v10;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v20 = *v19;
    v21 = (-1 << v3) - 1;
  }
  else
  {
    v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    v21 = *v19;
    v20 = (-1 << result) - 1;
  }
  *v19 = v21 & v20;
  v22 = *(_QWORD *)(a2 + 16);
  v23 = __OFSUB__(v22, 1);
  v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10012F474(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  _QWORD v23[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)(v23);
        Hasher._combine(_:)(v9);
        result = Hasher._finalize()();
        v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_QWORD *)(v11 + 8 * v3);
          v13 = (_QWORD *)(v11 + 8 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_QWORD *)(v14 + 8 * v3);
          v16 = (_QWORD *)(v14 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10012F62C(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  Swift::Int v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  unint64_t v20;
  __int128 *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD v28[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v11 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v12 = *v11;
        v13 = v11[1];
        Hasher.init(_seed:)(v28);
        sub_100063C8C(v12, v13);
        Data.hash(into:)(v28, v12, v13);
        v14 = Hasher._finalize()();
        result = sub_100063CD0(v12, v13);
        v15 = v14 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v15 < v8)
            goto LABEL_5;
        }
        else if (v15 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v15)
        {
LABEL_11:
          v16 = *(_QWORD *)(a2 + 48);
          v17 = (_OWORD *)(v16 + 16 * v3);
          v18 = (_OWORD *)(v16 + 16 * v6);
          if (v3 != v6 || v17 >= v18 + 1)
            *v17 = *v18;
          v19 = *(_QWORD *)(a2 + 56);
          v20 = v19 + 40 * v3;
          v21 = (__int128 *)(v19 + 40 * v6);
          if (v3 != v6 || (v3 = v6, v20 >= (unint64_t)v21 + 40))
          {
            v9 = *v21;
            v10 = v21[1];
            *(_QWORD *)(v20 + 32) = *((_QWORD *)v21 + 4);
            *(_OWORD *)v20 = v9;
            *(_OWORD *)(v20 + 16) = v10;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v23 = *v22;
    v24 = (-1 << v3) - 1;
  }
  else
  {
    v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    v24 = *v22;
    v23 = (-1 << result) - 1;
  }
  *v22 = v24 & v23;
  v25 = *(_QWORD *)(a2 + 16);
  v26 = __OFSUB__(v25, 1);
  v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10012F81C(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v10 = *v9;
        v11 = v9[1];
        Hasher.init(_seed:)(v26);
        sub_100063C8C(v10, v11);
        Data.hash(into:)(v26, v10, v11);
        v12 = Hasher._finalize()();
        result = sub_100063CD0(v10, v11);
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = (_QWORD *)(v17 + 8 * v3);
          v19 = (_QWORD *)(v17 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v18 >= v19 + 1))
          {
            *v18 = *v19;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10012FA00(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v10 = *v9;
        v11 = v9[1];
        Hasher.init(_seed:)(v26);
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        v12 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v11);
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = (_QWORD *)(v17 + 8 * v3);
          v19 = (_QWORD *)(v17 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v18 >= v19 + 1))
          {
            *v18 = *v19;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10012FBD4(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  _OWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, unint64_t, uint64_t);
  unint64_t v38;
  uint64_t v39;

  v4 = type metadata accessor for UUID(0);
  v39 = *(_QWORD *)(v4 - 8);
  result = __chkstk_darwin(v4, v5);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a2 + 64;
  v10 = -1 << *(_BYTE *)(a2 + 32);
  v11 = (a1 + 1) & ~v10;
  if (((1 << v11) & *(_QWORD *)(a2 + 64 + 8 * (v11 >> 6))) != 0)
  {
    v12 = ~v10;
    result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v10);
    if ((*(_QWORD *)(v9 + 8 * (v11 >> 6)) & (1 << v11)) != 0)
    {
      v38 = (result + 1) & v12;
      v13 = *(_QWORD *)(v39 + 72);
      v37 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 16);
      v14 = v12;
      do
      {
        v15 = v9;
        v16 = v13;
        v17 = v13 * v11;
        v18 = v14;
        v37(v8, *(_QWORD *)(a2 + 48) + v13 * v11, v4);
        v19 = *(_QWORD *)(a2 + 40);
        v20 = sub_1000639EC((unint64_t *)&unk_100347730, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v21 = dispatch thunk of Hashable._rawHashValue(seed:)(v19, v4, v20);
        result = (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v8, v4);
        v14 = v18;
        v22 = v21 & v18;
        if (a1 >= (uint64_t)v38)
        {
          if (v22 >= v38 && a1 >= (uint64_t)v22)
          {
LABEL_16:
            v25 = *(_QWORD *)(a2 + 48);
            result = v25 + v16 * a1;
            v26 = v25 + v17;
            v9 = v15;
            if (v16 * a1 < v17 || (v13 = v16, result >= v26 + v16))
            {
              result = swift_arrayInitWithTakeFrontToBack(result, v26, 1, v4);
LABEL_21:
              v14 = v18;
              v13 = v16;
            }
            else if (v16 * a1 != v17)
            {
              result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            v27 = *(_QWORD *)(a2 + 56);
            v28 = (_OWORD *)(v27 + 16 * a1);
            v29 = (_OWORD *)(v27 + 16 * v11);
            if (a1 != v11 || (a1 = v11, v28 >= v29 + 1))
            {
              *v28 = *v29;
              a1 = v11;
            }
            goto LABEL_5;
          }
        }
        else if (v22 >= v38 || a1 >= (uint64_t)v22)
        {
          goto LABEL_16;
        }
        v9 = v15;
        v13 = v16;
LABEL_5:
        v11 = (v11 + 1) & v14;
      }
      while (((*(_QWORD *)(v9 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
    }
    v30 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    v31 = *v30;
    v32 = (-1 << a1) - 1;
  }
  else
  {
    v30 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    v32 = *v30;
    v31 = (-1 << a1) - 1;
  }
  *v30 = v32 & v31;
  v33 = *(_QWORD *)(a2 + 16);
  v34 = __OFSUB__(v33, 1);
  v35 = v33 - 1;
  if (v34)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v35;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10012FE78(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, unint64_t, uint64_t);
  unint64_t v38;
  uint64_t v39;

  v4 = type metadata accessor for UUID(0);
  v39 = *(_QWORD *)(v4 - 8);
  result = __chkstk_darwin(v4, v5);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a2 + 64;
  v10 = -1 << *(_BYTE *)(a2 + 32);
  v11 = (a1 + 1) & ~v10;
  if (((1 << v11) & *(_QWORD *)(a2 + 64 + 8 * (v11 >> 6))) != 0)
  {
    v12 = ~v10;
    result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v10);
    if ((*(_QWORD *)(v9 + 8 * (v11 >> 6)) & (1 << v11)) != 0)
    {
      v38 = (result + 1) & v12;
      v13 = *(_QWORD *)(v39 + 72);
      v37 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 16);
      v14 = v12;
      do
      {
        v15 = v9;
        v16 = v13;
        v17 = v13 * v11;
        v18 = v14;
        v37(v8, *(_QWORD *)(a2 + 48) + v13 * v11, v4);
        v19 = *(_QWORD *)(a2 + 40);
        v20 = sub_1000639EC((unint64_t *)&unk_100347730, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v21 = dispatch thunk of Hashable._rawHashValue(seed:)(v19, v4, v20);
        result = (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v8, v4);
        v14 = v18;
        v22 = v21 & v18;
        if (a1 >= (uint64_t)v38)
        {
          if (v22 >= v38 && a1 >= (uint64_t)v22)
          {
LABEL_16:
            v25 = *(_QWORD *)(a2 + 48);
            result = v25 + v16 * a1;
            v26 = v25 + v17;
            v9 = v15;
            if (v16 * a1 < v17 || (v13 = v16, result >= v26 + v16))
            {
              result = swift_arrayInitWithTakeFrontToBack(result, v26, 1, v4);
LABEL_21:
              v14 = v18;
              v13 = v16;
            }
            else if (v16 * a1 != v17)
            {
              result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            v27 = *(_QWORD *)(a2 + 56);
            v28 = (_BYTE *)(v27 + a1);
            v29 = (_BYTE *)(v27 + v11);
            if (a1 != v11 || (a1 = v11, v28 >= v29 + 1))
            {
              *v28 = *v29;
              a1 = v11;
            }
            goto LABEL_5;
          }
        }
        else if (v22 >= v38 || a1 >= (uint64_t)v22)
        {
          goto LABEL_16;
        }
        v9 = v15;
        v13 = v16;
LABEL_5:
        v11 = (v11 + 1) & v14;
      }
      while (((*(_QWORD *)(v9 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
    }
    v30 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    v31 = *v30;
    v32 = (-1 << a1) - 1;
  }
  else
  {
    v30 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    v32 = *v30;
    v31 = (-1 << a1) - 1;
  }
  *v30 = v32 & v31;
  v33 = *(_QWORD *)(a2 + 16);
  v34 = __OFSUB__(v33, 1);
  v35 = v33 - 1;
  if (v34)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v35;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100130118(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _WORD *v28;
  _WORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, unint64_t, uint64_t);
  unint64_t v38;
  uint64_t v39;

  v4 = type metadata accessor for UUID(0);
  v39 = *(_QWORD *)(v4 - 8);
  result = __chkstk_darwin(v4, v5);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a2 + 64;
  v10 = -1 << *(_BYTE *)(a2 + 32);
  v11 = (a1 + 1) & ~v10;
  if (((1 << v11) & *(_QWORD *)(a2 + 64 + 8 * (v11 >> 6))) != 0)
  {
    v12 = ~v10;
    result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v10);
    if ((*(_QWORD *)(v9 + 8 * (v11 >> 6)) & (1 << v11)) != 0)
    {
      v38 = (result + 1) & v12;
      v13 = *(_QWORD *)(v39 + 72);
      v37 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 16);
      v14 = v12;
      do
      {
        v15 = v9;
        v16 = v13;
        v17 = v13 * v11;
        v18 = v14;
        v37(v8, *(_QWORD *)(a2 + 48) + v13 * v11, v4);
        v19 = *(_QWORD *)(a2 + 40);
        v20 = sub_1000639EC((unint64_t *)&unk_100347730, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v21 = dispatch thunk of Hashable._rawHashValue(seed:)(v19, v4, v20);
        result = (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v8, v4);
        v14 = v18;
        v22 = v21 & v18;
        if (a1 >= (uint64_t)v38)
        {
          if (v22 >= v38 && a1 >= (uint64_t)v22)
          {
LABEL_16:
            v25 = *(_QWORD *)(a2 + 48);
            result = v25 + v16 * a1;
            v26 = v25 + v17;
            v9 = v15;
            if (v16 * a1 < v17 || (v13 = v16, result >= v26 + v16))
            {
              result = swift_arrayInitWithTakeFrontToBack(result, v26, 1, v4);
LABEL_21:
              v14 = v18;
              v13 = v16;
            }
            else if (v16 * a1 != v17)
            {
              result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            v27 = *(_QWORD *)(a2 + 56);
            v28 = (_WORD *)(v27 + 2 * a1);
            v29 = (_WORD *)(v27 + 2 * v11);
            if (a1 != v11 || (a1 = v11, v28 >= v29 + 1))
            {
              *v28 = *v29;
              a1 = v11;
            }
            goto LABEL_5;
          }
        }
        else if (v22 >= v38 || a1 >= (uint64_t)v22)
        {
          goto LABEL_16;
        }
        v9 = v15;
        v13 = v16;
LABEL_5:
        v11 = (v11 + 1) & v14;
      }
      while (((*(_QWORD *)(v9 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
    }
    v30 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    v31 = *v30;
    v32 = (-1 << a1) - 1;
  }
  else
  {
    v30 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    v32 = *v30;
    v31 = (-1 << a1) - 1;
  }
  *v30 = v32 & v31;
  v33 = *(_QWORD *)(a2 + 16);
  v34 = __OFSUB__(v33, 1);
  v35 = v33 - 1;
  if (v34)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v35;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1001303B8(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _WORD *v10;
  unint64_t v11;
  _WORD *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(a2 + 48);
        v10 = (_WORD *)(v9 + 2 * v6);
        result = static Hasher._hash(seed:bytes:count:)(*(_QWORD *)(a2 + 40), (unsigned __int16)*v10, 2);
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            v14 = (_WORD *)(v9 + 2 * v3);
            if (v3 != v6 || v14 >= v10 + 1)
              *v14 = *v10;
            v15 = *(_QWORD *)(a2 + 56);
            v16 = (_OWORD *)(v15 + 16 * v3);
            v17 = (_OWORD *)(v15 + 16 * v6);
            if (v3 != v6 || (v3 = v6, v16 >= v17 + 1))
            {
              *v16 = *v17;
              v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_100130550(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  if ((unint64_t)a1 >> 62)
    goto LABEL_14;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  v5 = 0;
  if (v4)
  {
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
      }
      else
      {
        v6 = *(_QWORD *)(a1 + 8 * v5 + 32);
        swift_retain(v6);
      }
      swift_release(v6);
      if (a2 && v6 == a2)
        break;
      v8 = v5 + 1;
      if (__OFADD__(v5, 1))
      {
        __break(1u);
LABEL_14:
        if (a1 < 0)
          v9 = a1;
        else
          v9 = a1 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(a1);
        v4 = _CocoaArrayWrapper.endIndex.getter(v9);
        swift_bridgeObjectRelease(a1);
        v5 = 0;
        if (!v4)
          return v5;
      }
      else
      {
        ++v5;
        if (v8 == v4)
          return 0;
      }
    }
  }
  return v5;
}

uint64_t sub_100130644(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v3 = (uint64_t)a1;
  v4 = *a1;
  if ((unint64_t)*a1 >> 62)
    goto LABEL_69;
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(*a1);
  if (!v5)
  {
LABEL_15:
    swift_bridgeObjectRelease(v4);
    v3 = *(_QWORD *)v3;
    if ((unint64_t)v3 >> 62)
      goto LABEL_80;
    return *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
LABEL_3:
  v6 = 0;
  v45 = a2 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
  while (1)
  {
    if ((v4 & 0xC000000000000001) != 0)
    {
      v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v4);
    }
    else
    {
      v7 = *(_QWORD *)(v4 + 8 * v6 + 32);
      swift_retain(v7);
    }
    v8 = *(_QWORD *)(v7 + OBJC_IVAR____TtC10seserviced9SERequest_peer);
    if (!v8
      || (v9 = v8 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier,
          swift_retain(a2),
          swift_retain(v8),
          v10 = static UUID.== infix(_:_:)(v9, v45),
          swift_release(v8),
          swift_release(a2),
          (v10 & 1) == 0))
    {
      swift_release(v7);
      goto LABEL_13;
    }
    v11 = *(_QWORD *)(v7 + OBJC_IVAR____TtC10seserviced9SERequest_sessionChecks);
    v12 = *(_BYTE *)(v7 + OBJC_IVAR____TtC10seserviced9SERequest_sessionChecks + 8);
    swift_release(v7);
    if ((v12 & 1) == 0 && (v11 & 1) != 0)
      break;
LABEL_13:
    v13 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
LABEL_69:
      if (v4 < 0)
        v40 = v4;
      else
        v40 = v4 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v4);
      v5 = _CocoaArrayWrapper.endIndex.getter(v40);
      if (!v5)
        goto LABEL_15;
      goto LABEL_3;
    }
    ++v6;
    if (v13 == v5)
      goto LABEL_15;
  }
  swift_bridgeObjectRelease(v4);
  v15 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
  }
  else
  {
    v4 = *(_QWORD *)v3;
    if (!(*(_QWORD *)v3 >> 62))
    {
      if (v15 != *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_21;
      return v6;
    }
  }
  if (v4 < 0)
    v43 = v4;
  else
    v43 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v4);
  v44 = _CocoaArrayWrapper.endIndex.getter(v43);
  swift_bridgeObjectRelease(v4);
  if (v15 == v44)
    return v6;
LABEL_21:
  v16 = v6 + 5;
  while (2)
  {
    v4 = v16 - 4;
    v17 = *(_QWORD *)v3;
    if ((*(_QWORD *)v3 & 0xC000000000000001) != 0)
    {
      v18 = specialized _ArrayBuffer._getElementSlowPath(_:)(v16 - 4, v17);
    }
    else
    {
      if (v4 < 0)
        goto LABEL_65;
      if ((unint64_t)v4 >= *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_66;
      v18 = *(_QWORD *)(v17 + 8 * v16);
      swift_retain(v18);
    }
    v19 = *(_QWORD *)(v18 + OBJC_IVAR____TtC10seserviced9SERequest_peer);
    if (!v19
      || (v20 = v19 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier,
          swift_retain(a2),
          swift_retain(v19),
          v21 = static UUID.== infix(_:_:)(v20, v45),
          swift_release(v19),
          swift_release(a2),
          (v21 & 1) == 0))
    {
      swift_release(v18);
      if (v4 != v6)
        goto LABEL_33;
      goto LABEL_51;
    }
    v22 = *(_QWORD *)(v18 + OBJC_IVAR____TtC10seserviced9SERequest_sessionChecks);
    v23 = *(_BYTE *)(v18 + OBJC_IVAR____TtC10seserviced9SERequest_sessionChecks + 8);
    swift_release(v18);
    if ((v23 & 1) == 0 && (v22 & 1) != 0)
    {
LABEL_52:
      v36 = v16 - 3;
      if (__OFADD__(v4, 1))
        goto LABEL_67;
      v37 = *(_QWORD *)v3;
      if (*(_QWORD *)v3 >> 62)
      {
        if (v37 < 0)
          v39 = *(_QWORD *)v3;
        else
          v39 = v37 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(*(_QWORD *)v3);
        v38 = _CocoaArrayWrapper.endIndex.getter(v39);
        swift_bridgeObjectRelease(v37);
      }
      else
      {
        v38 = *(_QWORD *)((v37 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      ++v16;
      if (v36 == v38)
        return v6;
      continue;
    }
    break;
  }
  if (v4 == v6)
    goto LABEL_51;
LABEL_33:
  v24 = *(_QWORD *)v3;
  if ((*(_QWORD *)v3 & 0xC000000000000001) != 0)
  {
    v25 = specialized _ArrayBuffer._getElementSlowPath(_:)(v6, *(_QWORD *)v3);
    v24 = *(_QWORD *)v3;
    if ((*(_QWORD *)v3 & 0xC000000000000001) == 0)
      goto LABEL_37;
    goto LABEL_63;
  }
  if ((v6 & 0x8000000000000000) == 0)
  {
    if (v6 >= *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_75;
    v25 = *(_QWORD *)(v24 + 8 * v6 + 32);
    swift_retain(v25);
    if ((v24 & 0xC000000000000001) == 0)
    {
LABEL_37:
      if (v4 < 0)
        goto LABEL_76;
      if ((unint64_t)v4 >= *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_77;
      v26 = *(_QWORD *)(v24 + 8 * v16);
      swift_retain(v26);
LABEL_40:
      isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(v24);
      *(_QWORD *)v3 = v24;
      if (!isUniquelyReferenced_nonNull_bridgeObject || v24 < 0 || (v24 & 0x4000000000000000) != 0)
      {
        v24 = sub_1000D6A90(v24);
        *(_QWORD *)v3 = v24;
      }
      v28 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFFF8) + 8 * v6 + 0x20);
      *(_QWORD *)((v24 & 0xFFFFFFFFFFFFFF8) + 8 * v6 + 0x20) = v26;
      v29 = swift_release(v28);
      specialized Array._endMutation()(v29);
      v30 = *(_QWORD *)v3;
      v31 = swift_isUniquelyReferenced_nonNull_bridgeObject(*(_QWORD *)v3);
      *(_QWORD *)v3 = v30;
      if (!v31 || v30 < 0 || (v30 & 0x4000000000000000) != 0)
      {
        v30 = sub_1000D6A90(v30);
        *(_QWORD *)v3 = v30;
      }
      if (v4 < 0)
        goto LABEL_78;
      v32 = v30 & 0xFFFFFFFFFFFFFF8;
      if ((unint64_t)v4 >= *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_79;
      v33 = *(_QWORD *)(v32 + 8 * v16);
      *(_QWORD *)(v32 + 8 * v16) = v25;
      v34 = swift_release(v33);
      specialized Array._endMutation()(v34);
LABEL_51:
      if (__OFADD__(v6++, 1))
        goto LABEL_68;
      goto LABEL_52;
    }
LABEL_63:
    v26 = specialized _ArrayBuffer._getElementSlowPath(_:)(v16 - 4, v24);
    v24 = *(_QWORD *)v3;
    goto LABEL_40;
  }
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  if (v3 < 0)
    v41 = v3;
  else
    v41 = v3 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v3);
  v42 = _CocoaArrayWrapper.endIndex.getter(v41);
  swift_bridgeObjectRelease(v3);
  return v42;
}

void *sub_100130AF8(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  unint64_t v25;

  v2 = a1;
  if (a1 >> 62)
    goto LABEL_15;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v3; v3 = _CocoaArrayWrapper.endIndex.getter(v22))
  {
    v24 = v3;
    v25 = v2 & 0xC000000000000001;
    v4 = 4;
    while (1)
    {
      v7 = v25 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, v2) : *(id *)(v2 + 8 * v4);
      v8 = v7;
      v9 = v4 - 3;
      if (__OFADD__(v4 - 4, 1))
        break;
      v10 = objc_msgSend(v7, "activeEndpoint");
      if (v10)
      {
        v11 = v10;
        v12 = v2;
        v13 = objc_msgSend(v10, "publicKeyIdentifier");

        v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v13);
        v16 = v15;

        v17 = *(_QWORD *)(a2 + 16);
        v18 = *(_QWORD *)(a2 + 24);
        sub_100063C8C(v17, v18);
        sub_100063C8C(v14, v16);
        sub_10007C23C(v14, v16);
        v20 = v19;
        v21 = v17;
        v2 = v12;
        sub_100063CD0(v21, v18);
        sub_100063CD0(v14, v16);
        sub_100063CD0(v14, v16);
        if ((v20 & 1) != 0)
        {
          swift_bridgeObjectRelease(v12);
          return v8;
        }
      }
      else
      {
        v5 = *(_QWORD *)(a2 + 16);
        v6 = *(_QWORD *)(a2 + 24);
        sub_100063C8C(v5, v6);
        sub_10006B9B4(0, 0xF000000000000000);
        sub_10006B9B4(v5, v6);
      }

      ++v4;
      if (v9 == v24)
        goto LABEL_19;
    }
    __break(1u);
LABEL_15:
    if (v2 < 0)
      v22 = v2;
    else
      v22 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
  }
LABEL_19:
  swift_bridgeObjectRelease(v2);
  return 0;
}

uint64_t sub_100130CF8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 28, 7);
}

void sub_100130D1C(void *a1, char a2)
{
  uint64_t v2;

  sub_10012CD54(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(_DWORD *)(v2 + 24));
}

uint64_t sub_100130D2C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100130D58(void *a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_1000E9D68(a1, a2, v2[2], v2[3], v2[4]);
}

uint64_t sub_100130D64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100130D74(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100130D7C(_QWORD *a1)
{
  uint64_t v1;

  return sub_10012DEE4(a1, *(_QWORD *)(v1 + 16)) & 1;
}

id sub_100130D98(void *a1, char a2)
{
  if ((a2 & 1) != 0)
    return (id)swift_errorRetain();
  else
    return a1;
}

void sub_100130DA4(void *a1, char a2)
{
  if ((a2 & 1) != 0)
    swift_errorRelease(a1);
  else

}

uint64_t sub_100130DB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100063D3C((uint64_t *)&unk_1003465E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

unint64_t sub_100130DFC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100346E18;
  if (!qword_100346E18)
  {
    v1 = sub_100063DC8(&qword_100346E10);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100346E18);
  }
  return result;
}

void sub_100130E48()
{
  uint64_t v0;

  sub_10012946C(v0);
}

uint64_t sub_100130E60(uint64_t a1)
{
  if ((a1 & 0x8000000000000000) == 0)
    __asm { BR              X10 }
  return 0;
}

uint64_t sub_100130F58()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1000E848C(0xD000000000000014, 0x80000001002BD2F0);
  if (v1 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    qword_100354C68 = result;
    unk_100354C70 = v1;
  }
  return result;
}

uint64_t sub_100130FA0(void *a1)
{
  Class isa;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  Class v9;
  id *v10;
  id v11;
  id v12;
  id *v13;
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;

  if (qword_1003445F8 != -1)
    swift_once(&qword_1003445F8, sub_100130F58);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v3 = sub_10004FBA0(a1, isa);

  if (v3)
  {
    swift_willThrow(v4);

  }
  else
  {
    v6 = sub_10007C66C((uint64_t)&off_1003055C0);
    v8 = v7;
    v9 = Data._bridgeToObjectiveC()().super.isa;
    sub_100063CD0(v6, v8);
    v18 = 0;
    v10 = (id *)sub_10004F6A8(a1, v9, &v18);

    v11 = v18;
    if (v10)
    {
      v12 = v18;
      v13 = sub_10005582C(v10);

      v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v13);
      return v5;
    }
    v15 = v18;
    v16 = _convertNSErrorToError(_:)(v11);

    swift_willThrow(v17);
    swift_errorRelease(v16);
  }
  return 0;
}

_QWORD *sub_100131124(void *a1)
{
  uint64_t v1;
  Class isa;
  id v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  unint64_t v12;
  uint64_t v13;
  Class v14;
  id *v15;
  id v16;
  id v17;
  int v18;
  id *v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;
  Swift::String v33;
  void *object;
  id v35;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  __n128 v44;
  __n128 v45;
  uint64_t v46;
  _OWORD v47[4];
  char v48;
  __n128 v49;
  __n128 v50;

  if (qword_1003445F8 != -1)
    swift_once(&qword_1003445F8, sub_100130F58);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v4 = sub_10004FBA0(a1, isa);

  if (!v4)
  {
    v37 = sub_1001C4F68(0, 16, 0, _swiftEmptyArrayStorage);
    v6 = 0;
    v42 = sub_10007C66C((uint64_t)&off_100305768);
    v43 = v7;
    while (1)
    {
      Data._Representation.subscript.setter(v6, 2);
      v13 = v42;
      v12 = v43;
      sub_100063C8C(v42, v43);
      v14 = Data._bridgeToObjectiveC()().super.isa;
      sub_100063CD0(v13, v12);
      v40 = 0;
      v15 = (id *)sub_10004F5F4(a1, (uint64_t)v14, &v40);

      v16 = v40;
      if (!v15)
        break;
      v17 = v40;
      v18 = sub_100055868((uint64_t)v15);
      if (v18 == 36864)
      {
        v19 = sub_10005582C(v15);
        v20 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v19);
        v22 = v21;

        sub_1001AB6B0((uint64_t)&v44);
        v40 = v20;
        v41 = v22;
        sub_100063C8C((uint64_t)v20, v22);
        v23 = sub_100136C5C((uint64_t *)&v40, &v44);
        if (v1)
        {
          sub_100063CD0((uint64_t)v40, v41);
          sub_100063CD0((uint64_t)v20, v22);
          sub_100124140(&v45, &v50);
          sub_10012417C((uint64_t)&v50);
          v39 = v46;
          sub_1001241D0(&v39);

          sub_100063CD0(v13, v12);
          swift_bridgeObjectRelease(v37);
          return v37;
        }
        v24 = v23;
        sub_100063CD0((uint64_t)v40, v41);
        sub_100124140(&v45, &v49);
        sub_10012417C((uint64_t)&v49);
        v38 = v46;
        sub_1001241D0(&v38);
        sub_1001AB834(v24, (unint64_t)v47);
        sub_100063CD0((uint64_t)v20, v22);
        sub_100124944((uint64_t *)v47, (void (*)(uint64_t, uint64_t))sub_100063C8C);
        v25 = v37;
        v27 = v37[2];
        v26 = v37[3];
        if (v27 >= v26 >> 1)
          v25 = sub_1001C4F68((_QWORD *)(v26 > 1), v27 + 1, 1, v37);
        v25[2] = v27 + 1;
        v37 = v25;
        v8 = &v25[9 * v27];
        *((_OWORD *)v8 + 2) = v47[0];
        v9 = v47[1];
        v10 = v47[2];
        v11 = v47[3];
        *((_BYTE *)v8 + 96) = v48;
        *((_OWORD *)v8 + 4) = v10;
        *((_OWORD *)v8 + 5) = v11;
        *((_OWORD *)v8 + 3) = v9;

        sub_100124944((uint64_t *)v47, (void (*)(uint64_t, uint64_t))sub_100063CD0);
      }
      else
      {
        if (v18 != 27266)
        {
          swift_bridgeObjectRelease(v37);
          sub_100098CBC();
          v40 = 0;
          v41 = 0xE000000000000000;
          _StringGuts.grow(_:)(25);
          swift_bridgeObjectRelease(v41);
          v40 = (id)0xD000000000000017;
          v41 = 0x80000001002BD2D0;
          v30 = sub_100063D3C((uint64_t *)&unk_1003477E0);
          v31 = swift_allocObject(v30, 72, 7);
          *(_OWORD *)(v31 + 16) = xmmword_1002888E0;
          v32 = sub_100055868((uint64_t)v15);
          *(_QWORD *)(v31 + 56) = &type metadata for UInt16;
          *(_QWORD *)(v31 + 64) = &protocol witness table for UInt16;
          *(_WORD *)(v31 + 32) = v32;
          v33._countAndFlagsBits = String.init(format:_:)(0x583230257830, 0xE600000000000000, v31);
          object = v33._object;
          String.append(_:)(v33);
          swift_bridgeObjectRelease(object);
          v35 = sub_1001E2838(0, 1, (uint64_t)v40, v41, 0);
          swift_willThrow(v35);

          goto LABEL_18;
        }

      }
      if (++v6 == 16)
        goto LABEL_18;
    }
    v28 = v40;
    swift_bridgeObjectRelease(v37);
    _convertNSErrorToError(_:)(v16);

    swift_willThrow(v29);
LABEL_18:
    sub_100063CD0(v13, v12);
    return v37;
  }
  swift_willThrow(v5);
  return v37;
}

id sub_1001315A4(void *a1)
{
  id v1;
  Class isa;
  id v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  Class v9;
  id *v10;
  id v11;
  id *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  id v18;

  if (qword_1003445F8 != -1)
    swift_once(&qword_1003445F8, sub_100130F58);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v4 = sub_10004FBA0(a1, isa);

  if (v4)
  {
    swift_willThrow(v5);
  }
  else
  {
    v6 = sub_10007C66C((uint64_t)&off_100305790);
    v8 = v7;
    v9 = Data._bridgeToObjectiveC()().super.isa;
    v18 = 0;
    v10 = (id *)sub_10004F5F4(a1, (uint64_t)v9, &v18);

    v1 = v18;
    if (v10)
    {
      v11 = v18;
      v12 = sub_10005582C(v10);
      static Data._unconditionallyBridgeFromObjectiveC(_:)(v12);
      v14 = v13;

      __asm { BR              X10 }
    }
    v15 = v18;
    _convertNSErrorToError(_:)(v1);

    swift_willThrow(v16);
    sub_100063CD0(v6, v8);
  }
  return v1;
}

void sub_1001317F8(void *a1)
{
  Class isa;
  id v3;
  uint64_t v4;
  Class v5;
  id v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;

  if (qword_1003445F8 != -1)
    swift_once(&qword_1003445F8, sub_100130F58);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v3 = sub_10004FBA0(a1, isa);

  if (v3)
  {
    swift_willThrow(v4);
  }
  else
  {
    v5 = Data._bridgeToObjectiveC()().super.isa;
    v11 = 0;
    v6 = sub_10004F8D8(a1, 128, 1, 0, 0, v5, 0, &v11);

    v7 = v11;
    if (v6)
    {
      v8 = v11;

    }
    else
    {
      v9 = v11;
      _convertNSErrorToError(_:)(v7);

      swift_willThrow(v10);
    }
  }
}

uint64_t sub_100131950(void *a1, unsigned __int16 a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  id *v8;
  id v9;
  id *v10;
  id v11;
  id *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  unint64_t v19;

  if (!a2)
    return 0;
  if (a2 <= 0xEu)
  {
    v5 = 0;
  }
  else
  {
    v4 = type metadata accessor for __DataStorage(0);
    swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v5 = __DataStorage.init(capacity:)(a2) | 0x4000000000000000;
  }
  v18 = 0;
  v19 = v5;
  if (a2 >= 0x2E4u)
    v7 = 740;
  else
    v7 = a2;
  v17 = 0;
  v8 = (id *)sub_10004FA80(a1, 128, 6, 0, 0, 0, v7, &v17);
  v9 = v17;
  if (v8)
  {
    v10 = v8;
    v11 = v17;
    v12 = sub_10005582C(v10);
    static Data._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v14 = v13;

    __asm { BR              X9 }
  }
  v15 = v17;
  _convertNSErrorToError(_:)(v9);

  swift_willThrow(v16);
  return sub_100063CD0(v18, v19);
}

Class sub_100131F48(void *a1)
{
  uint64_t v2;
  const char *v3;
  id v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  NSData v9;
  const __CFData *v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  Class isa;
  id *v16;
  id v17;
  id v18;
  id *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  id v27;

  v2 = objc_opt_self(SESSEWrapper);
  v4 = sub_10005066C(a1, v3);
  v5 = objc_msgSend(v4, "seid");

  v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v8 = v7;

  v9.super.isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100063CD0(v6, v8);
  v27 = 0;
  v10 = sub_10002CC34(v2, v9.super.isa, &v27);

  v11 = v27;
  if (v10)
  {
    v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v14 = v13;

    isa = Data._bridgeToObjectiveC()().super.isa;
    v27 = 0;
    v16 = (id *)sub_10004F8D8(a1, 128, 3, 0, 0, isa, 0, &v27);

    v17 = v27;
    if (v16)
    {
      v18 = v27;
      v19 = sub_10005582C(v16);
      static Data._unconditionallyBridgeFromObjectiveC(_:)(v19);
      v21 = v20;

      __asm { BR              X10 }
    }
    v24 = v27;
    _convertNSErrorToError(_:)(v17);

    swift_willThrow(v25);
    sub_100063CD0(v12, v14);
  }
  else
  {
    v22 = v11;
    _convertNSErrorToError(_:)(v11);

    swift_willThrow(v23);
  }
  return v9.super.isa;
}

uint64_t sub_1001324F0(void *a1)
{
  uint64_t v1;
  uint64_t result;
  unint64_t v4;
  unint64_t v5;
  Class isa;
  id v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  Class v12;
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  id v18;

  result = (uint64_t)sub_1001315A4(a1);
  if (!v1)
  {
    v5 = v4;
    result = sub_10006B9B4(result, v4);
    if (v5 >> 60 != 15)
    {
      if (qword_1003445F8 != -1)
        swift_once(&qword_1003445F8, sub_100130F58);
      isa = Data._bridgeToObjectiveC()().super.isa;
      v7 = sub_10004FBA0(a1, isa);

      if (v7)
      {
        return swift_willThrow(v8);
      }
      else
      {
        v9 = sub_10007C66C((uint64_t)&off_1003057B8);
        v11 = v10;
        v12 = Data._bridgeToObjectiveC()().super.isa;
        v18 = 0;
        v13 = sub_10004F6A8(a1, v12, &v18);

        v14 = v18;
        if (v13)
        {
          v15 = v18;

        }
        else
        {
          v16 = v18;
          _convertNSErrorToError(_:)(v14);

          swift_willThrow(v17);
        }
        return sub_100063CD0(v9, v11);
      }
    }
  }
  return result;
}

uint64_t sub_100132660(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  Class isa;
  id v12;
  uint64_t v13;
  Class v15;
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  id v21;
  unint64_t v22;

  v6 = sub_10007C66C((uint64_t)&off_100305838);
  v8 = v7;
  v22 = v7;
  sub_100063C8C(v6, v7);
  sub_100063C8C(a2, a3);
  sub_1000FB17C(a2, a3);
  sub_100063CD0(a2, a3);
  sub_100063CD0(v6, v8);
  v10 = v6;
  v9 = v22;
  if (qword_1003445F8 != -1)
    swift_once(&qword_1003445F8, sub_100130F58);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v12 = sub_10004FBA0(a1, isa);

  if (v12)
  {
    swift_willThrow(v13);
    return sub_100063CD0(v10, v22);
  }
  else
  {
    v15 = Data._bridgeToObjectiveC()().super.isa;
    v21 = 0;
    v16 = sub_10004F6A8(a1, v15, &v21);

    v17 = v21;
    if (v16)
    {
      v18 = v21;

    }
    else
    {
      v19 = v21;
      _convertNSErrorToError(_:)(v17);

      swift_willThrow(v20);
    }
    return sub_100063CD0(v10, v9);
  }
}

uint64_t sub_100132818@<X0>(void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  Class isa;
  id v12;
  uint64_t v13;
  uint64_t result;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  Class v23;
  id v24;
  id v25;
  id v26;
  id *v27;
  id *v28;
  void *v29;
  unint64_t v30;
  unint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  Swift::String v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  unint64_t v47;
  id *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  unint64_t v67;
  __n128 v68;
  __n128 v69;
  uint64_t v70;
  _OWORD v71[3];
  uint64_t v72;
  uint64_t v73;
  char v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  __n128 v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char v84;

  if (qword_1003445F8 != -1)
    swift_once(&qword_1003445F8, sub_100130F58);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v12 = sub_10004FBA0(a1, isa);

  if (v12)
    return swift_willThrow(v13);
  v15 = objc_msgSend((id)objc_opt_self(NSData), "randomData:", 16);
  v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v15);
  v18 = v17;

  v80 = v16;
  v81 = v18;
  v82 = a2;
  v83 = a3;
  v84 = a4 & 1;
  sub_100063C8C(a2, a3);
  v19 = sub_1001AADC4();
  if (v5)
  {
    sub_100063CD0(v16, v18);
    return sub_100063CD0(a2, a3);
  }
  else
  {
    v63 = v18;
    v64 = v16;
    v21 = v19;
    v22 = v20;
    v23 = Data._bridgeToObjectiveC()().super.isa;
    v66 = 0;
    v24 = sub_10004F6A8(a1, v23, &v66);

    v25 = v66;
    if (v24)
    {
      v62 = v21;
      v26 = v66;
      v27 = (id *)v24;
      v28 = sub_10005582C(v27);
      v29 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v28);
      v31 = v30;

      sub_1001AD5EC((uint64_t)&v68);
      v66 = v29;
      v67 = v31;
      sub_100063C8C((uint64_t)v29, v31);
      v47 = sub_100136C5C((uint64_t *)&v66, &v68);
      sub_100063CD0((uint64_t)v66, v67);
      sub_100124140(&v69, &v79);
      sub_10012417C((uint64_t)&v79);
      v65 = v70;
      sub_1001241D0(&v65);
      sub_1001ADDA4(v47, (uint64_t)v71);
      v60 = v71[1];
      v61 = v71[0];
      v59 = v71[2];
      v57 = v73;
      v58 = v72;
      v56 = v74;
      v54 = v76;
      v55 = v75;
      v52 = v78;
      v53 = v77;
      sub_100063CD0((uint64_t)v29, v31);
      v48 = sub_10005582C(v27);

      v49 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v48);
      v51 = v50;

      sub_100063CD0(v62, v22);
      sub_100063CD0(v64, v63);
      result = sub_100063CD0(a2, a3);
      *(_OWORD *)a5 = v61;
      *(_OWORD *)(a5 + 16) = v60;
      *(_OWORD *)(a5 + 32) = v59;
      *(_QWORD *)(a5 + 48) = v58;
      *(_QWORD *)(a5 + 56) = v57;
      *(_BYTE *)(a5 + 64) = v56;
      *(_OWORD *)(a5 + 72) = v55;
      *(_OWORD *)(a5 + 88) = v54;
      *(_QWORD *)(a5 + 104) = v53;
      *(_QWORD *)(a5 + 112) = v52;
      *(_QWORD *)(a5 + 120) = v49;
      *(_QWORD *)(a5 + 128) = v51;
    }
    else
    {
      v32 = v66;
      v33 = _convertNSErrorToError(_:)(v25);

      swift_willThrow(v34);
      sub_100098CBC();
      v66 = 0;
      v67 = 0xE000000000000000;
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease(v67);
      v66 = (id)0xD000000000000020;
      v67 = 0x80000001002BD390;
      sub_1001BD2CC(v21, v22);
      v35 = v22;
      v37 = v36;
      v38 = sub_100063D3C((uint64_t *)&unk_100346060);
      v39 = sub_10006B86C();
      v40 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v38, v39);
      v42 = v41;
      swift_bridgeObjectRelease(v37);
      v43._countAndFlagsBits = v40;
      v43._object = v42;
      String.append(_:)(v43);
      swift_bridgeObjectRelease(v42);
      v44 = (uint64_t)v66;
      v45 = v67;
      swift_errorRetain(v33);
      v46 = sub_1001E2838(0, 1, v44, v45, v33);
      swift_willThrow(v46);
      sub_100063CD0(v21, v35);
      sub_100063CD0(v64, v63);
      sub_100063CD0(a2, a3);
      return swift_errorRelease(v33);
    }
  }
  return result;
}

void sub_100132E44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  __DataStorage.init(capacity:)(50);
  __asm { BR              X11 }
}

void sub_100132ECC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSString v20;
  Class isa;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  id v27;
  id v28;
  __int16 v29;
  id v30[5];
  uint64_t v31;
  unint64_t v32;

  v29 = bswap32(BYTE6(v1)) >> 16;
  v30[3] = &type metadata for UnsafeRawBufferPointer;
  v30[4] = &protocol witness table for UnsafeRawBufferPointer;
  v30[0] = &v29;
  v30[1] = v30;
  v3 = sub_10006BA78(v30, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)(*v3, v3[1]);
  sub_10006BA9C(v30);
  sub_1001EE0CC(v2, v1);
  v5 = v4;
  v7 = v6;
  Data.append(_:)(v4, v6);
  sub_100063CD0(v5, v7);
  v9 = v31;
  v8 = v32;
  sub_100063C8C(v31, v32);
  sub_10013CF40(192, v9, v8);
  v11 = v10;
  v13 = v12;
  sub_100063CD0(v9, v8);
  if (qword_1003445F8 != -1)
    swift_once(&qword_1003445F8, sub_100130F58);
  sub_1001BD2CC(qword_100354C68, unk_100354C70);
  v15 = v14;
  v30[0] = v14;
  v16 = sub_100063D3C((uint64_t *)&unk_100346060);
  v17 = sub_10006B86C();
  BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v16, v17);
  v19 = v18;
  swift_bridgeObjectRelease(v15);
  v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v19);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v30[0] = 0;
  v22 = sub_100054238(v0, v20, isa, 0, 2, v30);

  v23 = v30[0];
  if (v22)
  {
    v24 = v30[0];
    v25 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v22);
    sub_100063CD0(v25, v26);

    if (v23)
    {
LABEL_5:
      v27 = v23;
      swift_willThrow(v27);
      sub_100063CD0(v11, v13);

      sub_100063CD0(v9, v8);
      return;
    }
  }
  else
  {
    v28 = v30[0];
    if (v23)
      goto LABEL_5;
  }
  sub_100063CD0(v9, v8);
  sub_100063CD0(v11, v13);
}

uint64_t sub_1001331E0(void *a1, __int16 a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  Class isa;
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  id v16;

  v4 = sub_100063D3C(&qword_100346F90);
  v5 = swift_allocObject(v4, 36, 7);
  *(_OWORD *)(v5 + 16) = xmmword_100288AB0;
  *(_WORD *)(v5 + 32) = 1152;
  *(_BYTE *)(v5 + 34) = HIBYTE(a2);
  *(_BYTE *)(v5 + 35) = a2;
  v6 = sub_10007C66C(v5);
  v8 = v7;
  swift_bridgeObjectRelease(v5);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v16 = 0;
  v10 = sub_10004F6A8(a1, isa, &v16);

  v11 = v16;
  if (v10)
  {
    v12 = v16;

  }
  else
  {
    v13 = v16;
    _convertNSErrorToError(_:)(v11);

    swift_willThrow(v14);
  }
  return sub_100063CD0(v6, v8);
}

void sub_100133310(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X9 }
}

uint64_t sub_10013336C()
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t result;

  result = sub_1001331E0(v3, BYTE6(v2));
  if (!v1)
    __asm { BR              X9 }
  return result;
}

id sub_100133738(void *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  void *v4;
  id v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Class isa;
  void *v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  Class v35;
  id *v36;
  unint64_t v37;
  id v38;
  id *v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  _QWORD v44[2];
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  void *v48;
  void *v49;
  id v50[5];

  v5 = v4;
  v49 = a1;
  v9 = type metadata accessor for SESPeerIdentityData(0);
  __chkstk_darwin(v9, v10);
  v12 = (_QWORD *)((char *)v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10013453C(a4, (uint64_t)v12);
  v13 = v12[2];
  v14 = v12[3];
  v16 = v12[6];
  v15 = v12[7];
  sub_100063C8C(v13, v14);
  sub_100063C8C(v16, v15);
  sub_100134580((uint64_t)v12);
  v50[3] = &_s14ExportTLKInputVN;
  v50[4] = &off_10030C988;
  v17 = (_QWORD *)swift_allocObject(&unk_100309F08, 64, 7);
  v50[0] = v17;
  v17[2] = a2;
  v17[3] = a3;
  v17[4] = v13;
  v17[5] = v14;
  v17[6] = v16;
  v17[7] = v15;
  sub_100063C8C(a2, a3);
  sub_100063C8C(v13, v14);
  sub_100063C8C(v16, v15);
  sub_100063C8C(a2, a3);
  sub_100134508(v13, v14, v16, v15);
  v18 = sub_100136AB8(v50);
  if (v4)
  {
    sub_100063CD0(v13, v14);
    sub_100063CD0(v16, v15);
    sub_100063CD0(a2, a3);
    sub_1001344D4(v13, v14, v16, v15);
    sub_10006BA9C(v50);
  }
  else
  {
    v20 = (uint64_t)v18;
    v21 = v19;
    v47 = a3;
    v48 = (void *)v14;
    sub_10006BA9C(v50);
    sub_100132E44((uint64_t)v49, v20, v21);
    v45 = v20;
    v46 = v21;
    v22 = a2;
    if (qword_1003445F8 != -1)
      swift_once(&qword_1003445F8, sub_100130F58);
    isa = Data._bridgeToObjectiveC()().super.isa;
    v24 = v49;
    v25 = sub_10004FBA0(v49, isa);

    v27 = v15;
    if (v25)
    {
      swift_willThrow(v26);
      sub_100063CD0(v45, v46);
      sub_100063CD0(v22, v47);
      v5 = v48;
      sub_1001344D4(v13, (unint64_t)v48, v16, v15);
      sub_100063CD0(v13, (unint64_t)v5);
      v28 = v16;
      v29 = v15;
    }
    else
    {
      sub_100133310((uint64_t)v24, v45, v46);
      v31 = v16;
      v32 = sub_10007C66C((uint64_t)&off_100305D10);
      v34 = v33;
      v35 = Data._bridgeToObjectiveC()().super.isa;
      sub_100063CD0(v32, v34);
      v50[0] = 0;
      v36 = (id *)sub_10004F6A8(v24, v35, v50);

      v5 = v50[0];
      v37 = (unint64_t)v48;
      if (v36)
      {
        v38 = v50[0];
        v44[1] = v36;
        v39 = sub_10005582C(v36);
        static Data._unconditionallyBridgeFromObjectiveC(_:)(v39);
        v41 = v40;

        __asm { BR              X10 }
      }
      v42 = v50[0];
      _convertNSErrorToError(_:)(v5);

      swift_willThrow(v43);
      sub_100063CD0(v13, v37);
      sub_100063CD0(v31, v27);
      sub_100063CD0(v22, v47);
      sub_1001344D4(v13, v37, v31, v27);
      v28 = v45;
      v29 = v46;
    }
    sub_100063CD0(v28, v29);
  }
  return v5;
}

id sub_100133E68(id a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  Class isa;
  id v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  Class v17;
  id v18;
  uint64_t v19;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  id *v24;
  id v25;
  id v26;
  id *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Class v31;
  id v32[5];

  if (qword_1003445F8 != -1)
    swift_once(&qword_1003445F8, sub_100130F58);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v10 = sub_10004FBA0(a1, isa);

  if (v10)
  {
    swift_willThrow(v11);
  }
  else
  {
    v32[3] = &_s14ExportTLKInputVN;
    v32[4] = &off_10030C988;
    v12 = (_QWORD *)swift_allocObject(&unk_100309F08, 64, 7);
    v32[0] = v12;
    v12[2] = a2;
    v12[3] = a3;
    v12[4] = a4;
    v12[5] = 0;
    v12[6] = 0;
    v12[7] = 0x2000000000000000;
    swift_bridgeObjectRetain_n(a4, 2);
    sub_100063C8C(a2, a3);
    sub_100063C8C(a2, a3);
    sub_100134508(a4, 0, 0, 0x2000000000000000uLL);
    v13 = sub_100136AB8(v32);
    if (v4)
    {
      swift_bridgeObjectRelease(a4);
      sub_100063CD0(a2, a3);
      sub_1001344D4(a4, 0, 0, 0x2000000000000000uLL);
      sub_10006BA9C(v32);
    }
    else
    {
      v15 = (uint64_t)v13;
      v16 = v14;
      sub_10006BA9C(v32);
      sub_100132E44((uint64_t)a1, v15, v16);
      v17 = Data._bridgeToObjectiveC()().super.isa;
      v18 = sub_10004FBA0(a1, v17);

      if (v18)
      {
        swift_willThrow(v19);
        sub_100063CD0(v15, v16);
        sub_100063CD0(a2, a3);
        sub_1001344D4(a4, 0, 0, 0x2000000000000000uLL);
        swift_bridgeObjectRelease(a4);
      }
      else
      {
        sub_100133310((uint64_t)a1, v15, v16);
        v21 = sub_10007C66C((uint64_t)&off_100305D38);
        v23 = v22;
        v31 = Data._bridgeToObjectiveC()().super.isa;
        sub_100063CD0(v21, v23);
        v32[0] = 0;
        v24 = (id *)sub_10004F6A8(a1, v31, v32);

        v25 = v32[0];
        if (v24)
        {
          v26 = v32[0];
          v27 = sub_10005582C(v24);
          static Data._unconditionallyBridgeFromObjectiveC(_:)(v27);
          v29 = v28;

          __asm { BR              X10 }
        }
        a1 = v32[0];
        _convertNSErrorToError(_:)(v25);

        swift_willThrow(v30);
        swift_bridgeObjectRelease(a4);
        sub_100063CD0(a2, a3);
        sub_1001344D4(a4, 0, 0, 0x2000000000000000uLL);
        sub_100063CD0(v15, v16);
      }
    }
  }
  return a1;
}

uint64_t sub_1001344D4(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if ((a4 & 0x2000000000000000) != 0)
    return swift_bridgeObjectRelease(a1);
  sub_100063CD0(a1, a2);
  return sub_100063CD0(a3, a4);
}

uint64_t sub_100134508(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if ((a4 & 0x2000000000000000) != 0)
    return swift_bridgeObjectRetain(a1);
  sub_100063C8C(a1, a2);
  return sub_100063C8C(a3, a4);
}

uint64_t sub_10013453C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SESPeerIdentityData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100134580(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SESPeerIdentityData(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001345BC(void *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  Class isa;
  id v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  Class v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  Class v37;
  unint64_t v38;
  uint64_t v39;
  void *v40;
  id v41[5];

  v40 = a1;
  v8 = type metadata accessor for SESPeerIdentityData(0);
  __chkstk_darwin(v8, v9);
  v11 = (Class *)((char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10013453C(a4, (uint64_t)v11);
  v13 = v11[4];
  v12 = v11[5];
  v15 = v11[6];
  v14 = v11[7];
  sub_100063C8C(v13, v12);
  sub_100063C8C(v15, v14);
  sub_100134580((uint64_t)v11);
  v41[3] = &_s14ImportTLKInputVN;
  v41[4] = &off_10030C978;
  v16 = (_QWORD *)swift_allocObject(&unk_100309F30, 64, 7);
  v41[0] = v16;
  v16[2] = a2;
  v16[3] = a3;
  v16[4] = v13;
  v16[5] = v12;
  v16[6] = v15;
  v16[7] = v14;
  sub_100063C8C(a2, a3);
  sub_100063C8C(v13, v12);
  sub_100063C8C(v15, v14);
  sub_100063C8C(a2, a3);
  sub_100134508(v13, v12, v15, v14);
  v17 = sub_100136AB8(v41);
  if (v4)
  {
    sub_100063CD0(v13, v12);
    sub_100063CD0(v15, v14);
    sub_100063CD0(a2, a3);
    sub_1001344D4(v13, v12, v15, v14);
    return sub_10006BA9C(v41);
  }
  else
  {
    v20 = (uint64_t)v17;
    v21 = v18;
    sub_10006BA9C(v41);
    sub_100132E44((uint64_t)v40, v20, v21);
    v22 = v40;
    v38 = v21;
    v39 = v20;
    if (qword_1003445F8 != -1)
      swift_once(&qword_1003445F8, sub_100130F58);
    isa = Data._bridgeToObjectiveC()().super.isa;
    v24 = sub_10004FBA0(v22, isa);

    if (v24)
    {
      swift_willThrow(v25);
      sub_100063CD0(v39, v38);
      sub_100063CD0(a2, a3);
      sub_1001344D4(v13, v12, v15, v14);
      sub_100063CD0(v13, v12);
      v26 = v15;
      v27 = v14;
    }
    else
    {
      sub_100133310((uint64_t)v40, v39, v38);
      v28 = sub_10007C66C((uint64_t)&off_100305D88);
      v30 = v29;
      v37 = Data._bridgeToObjectiveC()().super.isa;
      sub_100063CD0(v28, v30);
      v41[0] = 0;
      v31 = v37;
      v32 = sub_10004F6A8(v40, v37, v41);

      v33 = v41[0];
      if (v32)
      {
        v34 = v41[0];

      }
      else
      {
        v35 = v41[0];
        _convertNSErrorToError(_:)(v33);

        swift_willThrow(v36);
      }
      sub_100063CD0(v13, v12);
      sub_100063CD0(v15, v14);
      sub_100063CD0(a2, a3);
      sub_1001344D4(v13, v12, v15, v14);
      v27 = v38;
      v26 = v39;
    }
    return sub_100063CD0(v26, v27);
  }
}

uint64_t sub_10013498C(void *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  Class isa;
  id v10;
  uint64_t v11;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  Class v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  id v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  Class v29;
  id v30[5];

  if (qword_1003445F8 != -1)
    swift_once(&qword_1003445F8, sub_100130F58);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v10 = sub_10004FBA0(a1, isa);

  if (v10)
    return swift_willThrow(v11);
  v30[3] = &_s14ImportTLKInputVN;
  v30[4] = &off_10030C978;
  v13 = (_QWORD *)swift_allocObject(&unk_100309F30, 64, 7);
  v30[0] = v13;
  v13[2] = a2;
  v13[3] = a3;
  v13[4] = a4;
  v13[5] = 0;
  v13[6] = 0;
  v13[7] = 0x2000000000000000;
  swift_bridgeObjectRetain_n(a4, 2);
  sub_100063C8C(a2, a3);
  sub_100063C8C(a2, a3);
  sub_100134508(a4, 0, 0, 0x2000000000000000uLL);
  v14 = sub_100136AB8(v30);
  if (v4)
  {
    swift_bridgeObjectRelease(a4);
    sub_100063CD0(a2, a3);
    sub_1001344D4(a4, 0, 0, 0x2000000000000000uLL);
    return sub_10006BA9C(v30);
  }
  else
  {
    v16 = (uint64_t)v14;
    v17 = v15;
    sub_10006BA9C(v30);
    sub_100132E44((uint64_t)a1, v16, v17);
    v18 = Data._bridgeToObjectiveC()().super.isa;
    v19 = sub_10004FBA0(a1, v18);

    if (v19)
    {
      swift_willThrow(v20);
      sub_100063CD0(v16, v17);
      sub_100063CD0(a2, a3);
      sub_1001344D4(a4, 0, 0, 0x2000000000000000uLL);
      return swift_bridgeObjectRelease(a4);
    }
    else
    {
      sub_100133310((uint64_t)a1, v16, v17);
      v21 = sub_10007C66C((uint64_t)&off_100305EB8);
      v23 = v22;
      v29 = Data._bridgeToObjectiveC()().super.isa;
      sub_100063CD0(v21, v23);
      v30[0] = 0;
      v24 = sub_10004F6A8(a1, v29, v30);

      v25 = v30[0];
      if (v24)
      {
        v26 = v30[0];
        swift_bridgeObjectRelease(a4);

      }
      else
      {
        v27 = v30[0];
        _convertNSErrorToError(_:)(v25);

        swift_willThrow(v28);
        swift_bridgeObjectRelease(a4);
      }
      sub_100063CD0(a2, a3);
      sub_1001344D4(a4, 0, 0, 0x2000000000000000uLL);
      return sub_100063CD0(v16, v17);
    }
  }
}

uint64_t sub_100134CEC()
{
  uint64_t v0;

  sub_100063CD0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  sub_1001344D4(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

ValueMetadata *type metadata accessor for Henosis()
{
  return &type metadata for Henosis;
}

uint64_t sub_100134D2C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  char v14;
  _QWORD v15[3];
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v18 = a1;
  v19 = a2;
  v4 = type metadata accessor for SHA256Digest(0);
  v5 = sub_1000639EC(&qword_100346FA0, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256Digest, (uint64_t)&protocol conformance descriptor for SHA256Digest);
  v6 = dispatch thunk of static Digest.byteCount.getter(v4, v5);
  if ((a3 & 0x8000000000000000) != 0 || (v6 & 0x8000000000000000) != 0)
    goto LABEL_7;
  if (!is_mul_ok(v6, 0xFFFFFFFFuLL))
  {
    __break(1u);
LABEL_7:
    v14 = 2;
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, v14, 3451, 0);
    __break(1u);
    goto LABEL_8;
  }
  if (0xFFFFFFFF * v6 > a3)
  {
    v16 = sub_10007C71C(a3);
    v17 = v7;
    __chkstk_darwin(v16, v7);
    SharedSecret.withUnsafeBytes<A>(_:)(sub_1001361C0);
    v8 = v16;
    v9 = v17;
    sub_100063C8C(v16, v17);
    v10 = Data.subdata(in:)(0, a3, v8, v9);
    v12 = v11;
    sub_100063CD0(v8, v9);
    v15[0] = v10;
    v15[1] = v12;
    SymmetricKey.init<A>(data:)(v15, &type metadata for Data, &protocol witness table for Data);
    return sub_100063CD0(v8, v9);
  }
LABEL_8:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000016, 0x80000001002BD420, "seserviced/SharedSecret+OneStepKDF.swift", 40, 2, 25, 0);
  __break(1u);
  return result;
}

uint64_t sub_100134F38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  size_t v35;
  size_t v36;
  size_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  __int16 v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t inited;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v61[3];
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  __int128 v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81[32];
  _BYTE __dst[14];
  char v83;
  _QWORD v84[5];

  v72 = a6;
  v73 = a7;
  v74 = a1;
  v75 = a2;
  v71 = type metadata accessor for SHA256Digest(0);
  v70 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71, v11);
  v69 = (char *)v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for SHA256(0);
  v68 = *(_QWORD *)(v13 - 8);
  result = __chkstk_darwin(v13, v14);
  v17 = (char *)v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3 >= 1)
  {
    v18 = sub_1000639EC((unint64_t *)&qword_100346FA8, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256, (uint64_t)&protocol conformance descriptor for SHA256);
    v77 = a4;
    v63 = (int)a4;
    v61[2] = a4 >> 32;
    v61[0] = (a4 >> 32) - (int)a4;
    v61[1] = (char *)v84 + BYTE6(a5);
    v67 = xmmword_100288AB0;
    v66 = a5 >> 62;
    v65 = &type metadata for () + 1;
    v78 = a5;
    v79 = v18;
    v76 = v17;
    v64 = a5 & 0x3FFFFFFFFFFFFFFFLL;
    v80 = v7;
    dispatch thunk of HashFunction.init()(v13, v18);
    v19 = sub_100063D3C(&qword_100346F90);
    v20 = swift_allocObject(v19, 36, 7);
    *(_OWORD *)(v20 + 16) = v67;
    *(_BYTE *)(v20 + 32) = 0;
    *(_BYTE *)(v20 + 33) = 0;
    v21 = v20;
    *(_WORD *)(v20 + 34) = bswap32(1u) >> 16;
    v22 = sub_100063D3C(&qword_100345220);
    v84[3] = v22;
    v84[4] = sub_1001361E0();
    v84[0] = v21;
    v23 = sub_10006BA78(v84, v22);
    v24 = *v23;
    v25 = *(_QWORD *)(*v23 + 16);
    if (v25)
    {
      v26 = v24 + 32;
      if (v25 >= 0xF)
      {
        v27 = type metadata accessor for __DataStorage(0);
        swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
        swift_bridgeObjectRetain(v21);
        v28 = __DataStorage.init(bytes:length:)(v26, v25);
        if (v25 <= 0x7FFFFFFE)
        {
          swift_bridgeObjectRelease(v21);
          sub_10006BA9C(v84);
          v29 = sub_100063C8C(v25 << 32, v28 | 0x4000000000000000);
          v30 = __DataStorage._bytes.getter(v29);
          v33 = v30;
          if (!v30)
          {
LABEL_8:
            v34 = __DataStorage._length.getter(v30, v31, v32);
            if (v34 >= (uint64_t)v25)
              v35 = v25;
            else
              v35 = v34;
            v36 = v33 + v35;
            if (v33)
              v37 = v36;
            else
              v37 = 0;
            v38 = v79;
            dispatch thunk of HashFunction.update(bufferPointer:)(v33, v37, v13, v79);
            v39 = v28;
            v18 = v38;
            swift_release_n(v39, 2);
            goto LABEL_18;
          }
          v30 = __DataStorage._offset.getter(v30, v31, v32);
          if (!__OFSUB__(0, v30))
          {
            v33 -= v30;
            goto LABEL_8;
          }
          __break(1u);
LABEL_33:
          __break(1u);
        }
        v44 = type metadata accessor for Data.RangeReference(0);
        inited = swift_initStackObject(v44, v81);
        *(_QWORD *)(inited + 16) = 0;
        *(_QWORD *)(inited + 24) = v25;
        swift_bridgeObjectRelease(v21);
        sub_10006BA9C(v84);
        v46 = *(_QWORD *)(inited + 16);
        v62 = *(_QWORD *)(inited + 24);
        v47 = swift_retain(v28);
        v48 = __DataStorage._bytes.getter(v47);
        v51 = v48;
        if (v48)
        {
          v48 = __DataStorage._offset.getter(v48, v49, v50);
          if (__OFSUB__(v46, v48))
            goto LABEL_33;
          v51 += v46 - v48;
        }
        v52 = __OFSUB__(v62, v46);
        v53 = v62 - v46;
        if (v52)
        {
          __break(1u);
          JUMPOUT(0x10013570CLL);
        }
        v54 = __DataStorage._length.getter(v48, v49, v50);
        if (v54 >= v53)
          v55 = v53;
        else
          v55 = v54;
        v56 = v51 + v55;
        if (v51)
          v57 = v56;
        else
          v57 = 0;
        v58 = v79;
        dispatch thunk of HashFunction.update(bufferPointer:)(v51, v57, v13, v79);
        swift_release(v28);
        v59 = swift_setDeallocating(inited);
        Data.RangeReference.__deallocating_deinit(v59);
        v60 = v28;
        v18 = v58;
        swift_release(v60);
LABEL_18:
        dispatch thunk of HashFunction.update(bufferPointer:)(v74, v75, v13, v18);
        __asm { BR              X8 }
      }
      memset(__dst, 0, sizeof(__dst));
      v83 = v25;
      memcpy(__dst, (const void *)(v24 + 32), v25);
      v41 = *(_WORD *)&__dst[12];
      v42 = *(_QWORD *)__dst;
      v43 = *(_DWORD *)&__dst[8];
      sub_10006BA9C(v84);
      v84[0] = v42;
      LODWORD(v84[1]) = v43;
      v40 = (char *)v84 + v25;
      WORD2(v84[1]) = v41;
    }
    else
    {
      sub_10006BA9C(v84);
      memset(v84, 0, 14);
      v40 = (char *)v84;
    }
    dispatch thunk of HashFunction.update(bufferPointer:)(v84, v40, v13, v18);
    goto LABEL_18;
  }
  return result;
}

void sub_10013577C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = type metadata accessor for String.Encoding(0);
  v2 = __chkstk_darwin(v0, v1);
  P256.KeyAgreement.PublicKey.x963Representation.getter(v2);
  v4 = v3;
  v5 = String.count.getter(0x35327365612D6469, 0xED00004D43472D36);
  if (__OFADD__(v5, 1))
  {
    __break(1u);
  }
  else if (!__OFADD__(v5 + 1, String.count.getter(0x656C707041, 0xE500000000000000)))
  {
    __asm { BR              X12 }
  }
  __break(1u);
  JUMPOUT(0x100135A1CLL);
}

char *sub_100135AD0(void (*a1)(char *, uint64_t), uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  void (*v39)(char *, uint64_t);
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t inited;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  Swift::String v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  void (*v66)(char *, uint64_t);
  Swift::String v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  Swift::String v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  void (*v90)(char *, uint64_t);
  uint64_t v91;
  char *object;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  __int128 v101;
  _QWORD v102[3];
  uint64_t v103;

  v90 = a1;
  v91 = a2;
  v6 = sub_100063D3C(&qword_100346F98);
  __chkstk_darwin(v6, v7);
  object = (char *)&v78 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AES.GCM.SealedBox(0);
  v87 = *(_QWORD *)(v9 - 8);
  v88 = v9;
  __chkstk_darwin(v9, v10);
  v89 = (char *)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = type metadata accessor for SymmetricKey(0);
  v93 = *(_QWORD *)(v96 - 8);
  __chkstk_darwin(v96, v12);
  v95 = (char *)&v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = type metadata accessor for SharedSecret(0);
  v94 = *(_QWORD *)(v97 - 8);
  __chkstk_darwin(v97, v14);
  v99 = (char *)&v78 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = type metadata accessor for P256.KeyAgreement.PrivateKey(0);
  v16 = *(_QWORD *)(v98 - 8);
  __chkstk_darwin(v98, v17);
  v19 = (char *)&v78 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for P256.KeyAgreement.PublicKey(0);
  v21 = *(_QWORD *)(v20 - 8);
  v23 = __chkstk_darwin(v20, v22);
  v25 = (char *)&v78 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23, v26);
  v28 = (char *)&v78 - v27;
  v102[0] = a3;
  v102[1] = a4;
  v86 = a3;
  sub_100063C8C(a3, a4);
  v29 = v103;
  v30 = P256.KeyAgreement.PublicKey.init<A>(x963Representation:)(v102, &type metadata for Data, &protocol witness table for Data);
  if (!v29)
  {
    v83 = a4;
    v84 = v25;
    v85 = v16;
    P256.KeyAgreement.PrivateKey.init()(v30);
    v31 = v99;
    v32 = P256.KeyAgreement.PrivateKey.sharedSecretFromKeyAgreement(with:)(v28);
    v81 = v28;
    v33 = v84;
    v103 = 0;
    v82 = v19;
    P256.KeyAgreement.PrivateKey.publicKey.getter(v32);
    sub_10013577C();
    v35 = v34;
    v37 = v36;
    v38 = v33;
    v39 = *(void (**)(char *, uint64_t))(v21 + 8);
    v39(v38, v20);
    v40 = v95;
    sub_100134D2C(v35, v37, 0x20uLL);
    v102[0] = v90;
    v102[1] = v91;
    v101 = xmmword_10028A330;
    v19 = (char *)sub_10007EF0C();
    v41 = (uint64_t)object;
    v42 = v103;
    AES.GCM.Nonce.init<A>(data:)(&v101, &type metadata for Data, v19);
    v103 = v42;
    if (v42)
    {
      sub_100063CD0(v35, v37);
      (*(void (**)(char *, uint64_t))(v93 + 8))(v40, v96);
      (*(void (**)(char *, uint64_t))(v94 + 8))(v31, v97);
      (*(void (**)(char *, uint64_t))(v85 + 8))(v82, v98);
      v39(v81, v20);
    }
    else
    {
      v79 = v35;
      v80 = v37;
      v90 = v39;
      v91 = v20;
      v43 = type metadata accessor for AES.GCM.Nonce(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v41, 0, 1, v43);
      v44 = v89;
      v45 = v103;
      static AES.GCM.seal<A>(_:using:nonce:)(v102, v40, v41, &type metadata for Data, v19);
      v19 = (char *)v97;
      v46 = v98;
      v47 = v96;
      v48 = v85;
      v103 = v45;
      if (v45)
      {
        sub_100063CD0(v79, v80);
        sub_100096700(v41, &qword_100346F98);
        (*(void (**)(char *, uint64_t))(v93 + 8))(v40, v47);
        (*(void (**)(char *, char *))(v94 + 8))(v99, v19);
        (*(void (**)(char *, uint64_t))(v48 + 8))(v82, v46);
        v90(v81, v91);
      }
      else
      {
        sub_100096700(v41, &qword_100346F98);
        v50 = sub_100063D3C(&qword_1003460E0);
        inited = swift_initStackObject(v50, &v100);
        *(_OWORD *)(inited + 16) = xmmword_100288AB0;
        strcpy((char *)v102, "version");
        v102[1] = 0xE700000000000000;
        AnyHashable.init<A>(_:)(v102, &type metadata for String, &protocol witness table for String);
        v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(SESPrivacyEncryptionSchemeAppleECV2);
        *(_QWORD *)(inited + 96) = &type metadata for String;
        *(_QWORD *)(inited + 72) = v52;
        *(_QWORD *)(inited + 80) = v53;
        strcpy((char *)v102, "publicKeyHash");
        HIWORD(v102[1]) = -4864;
        AnyHashable.init<A>(_:)(v102, &type metadata for String, &protocol witness table for String);
        sub_1001EDD38(v86, v83);
        v55 = v54;
        v57 = v56;
        v58 = Data.base64EncodedString(options:)(0);
        object = (char *)v58._object;
        sub_100063CD0(v55, v57);
        *(_QWORD *)(inited + 168) = &type metadata for String;
        v59 = object;
        *(_QWORD *)(inited + 144) = v58._countAndFlagsBits;
        *(_QWORD *)(inited + 152) = v59;
        v102[0] = 0xD000000000000012;
        v102[1] = 0x80000001002BB220;
        v60 = AnyHashable.init<A>(_:)(v102, &type metadata for String, &protocol witness table for String);
        v61 = v84;
        v62 = P256.KeyAgreement.PrivateKey.publicKey.getter(v60);
        v63 = P256.KeyAgreement.PublicKey.x963Representation.getter(v62);
        v65 = v64;
        v66 = v90;
        v90(v61, v91);
        v67 = Data.base64EncodedString(options:)(0);
        sub_100063CD0(v63, v65);
        *(_QWORD *)(inited + 240) = &type metadata for String;
        *(Swift::String *)(inited + 216) = v67;
        v102[0] = 1635017060;
        v102[1] = 0xE400000000000000;
        v68 = AnyHashable.init<A>(_:)(v102, &type metadata for String, &protocol witness table for String);
        v69 = AES.GCM.SealedBox.ciphertext.getter(v68);
        v71 = v70;
        v72 = AES.GCM.SealedBox.tag.getter();
        v74 = v73;
        v102[0] = v69;
        v102[1] = v71;
        sub_100063C8C(v69, v71);
        sub_1000FB17C(v72, v74);
        sub_100063CD0(v72, v74);
        sub_100063CD0(v69, v71);
        v75 = v102[0];
        v76 = v102[1];
        v77 = Data.base64EncodedString(options:)(0);
        sub_100063CD0(v75, v76);
        *(_QWORD *)(inited + 312) = &type metadata for String;
        *(Swift::String *)(inited + 288) = v77;
        v19 = (char *)sub_10017C368(inited);
        sub_100063CD0(v79, v80);
        (*(void (**)(char *, uint64_t))(v87 + 8))(v44, v88);
        (*(void (**)(char *, uint64_t))(v93 + 8))(v95, v96);
        (*(void (**)(char *, uint64_t))(v94 + 8))(v99, v97);
        (*(void (**)(char *, uint64_t))(v85 + 8))(v82, v98);
        v66(v81, v91);
      }
    }
  }
  return v19;
}

uint64_t sub_1001361C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100134F38(a1, a2, *(_QWORD *)(v2 + 16), **(_QWORD **)(v2 + 24), *(_QWORD *)(*(_QWORD *)(v2 + 24) + 8), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

unint64_t sub_1001361E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100345228;
  if (!qword_100345228)
  {
    v1 = sub_100063DC8(&qword_100345220);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100345228);
  }
  return result;
}

uint64_t sub_10013622C()
{
  return sub_10007BF40();
}

char *sub_100136244(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  const char *v20;
  id v21;
  unint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD v56[6];
  __int128 v57;
  __int128 v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;

  v52 = a2;
  v3 = type metadata accessor for AES.GCM.Nonce(0);
  __chkstk_darwin(v3, v4);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AES.GCM.SealedBox(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v49 = type metadata accessor for SymmetricKey(0);
  v47 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49, v10);
  v50 = type metadata accessor for SharedSecret(0);
  v48 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50, v11);
  v12 = type metadata accessor for P256.KeyAgreement.PublicKey(0);
  v51 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v13);
  v59 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = 0xD000000000000012;
  v55 = 0x80000001002BB220;
  AnyHashable.init<A>(_:)(&v54, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(a1 + 16) && (v15 = sub_100187F3C((uint64_t)v56), (v16 & 1) != 0))
  {
    sub_100096CB0(*(_QWORD *)(a1 + 56) + 32 * v15, (uint64_t)&v57);
  }
  else
  {
    v57 = 0u;
    v58 = 0u;
  }
  sub_100098C48((uint64_t)v56);
  if (!*((_QWORD *)&v58 + 1))
  {
    sub_100096700((uint64_t)&v57, (uint64_t *)&unk_100346130);
    goto LABEL_10;
  }
  v46 = v12;
  if ((swift_dynamicCast(&v54, &v57, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {
LABEL_10:
    sub_100098CBC();
    v20 = "Missing ephemeralPublicKey";
    goto LABEL_11;
  }
  v43 = v8;
  v17 = v55;
  v44 = Data.init(base64Encoded:options:)(v54, v55, 0);
  v19 = v18;
  swift_bridgeObjectRelease(v17);
  v45 = v19;
  if (v19 >> 60 != 15)
  {
    v54 = 1635017060;
    v55 = 0xE400000000000000;
    AnyHashable.init<A>(_:)(&v54, &type metadata for String, &protocol witness table for String);
    if (*(_QWORD *)(a1 + 16))
    {
      v23 = sub_100187F3C((uint64_t)v56);
      if ((v24 & 1) != 0)
      {
        sub_100096CB0(*(_QWORD *)(a1 + 56) + 32 * v23, (uint64_t)&v57);
      }
      else
      {
        v57 = 0u;
        v58 = 0u;
      }
    }
    else
    {
      v57 = 0u;
      v58 = 0u;
    }
    sub_100098C48((uint64_t)v56);
    if (*((_QWORD *)&v58 + 1))
    {
      v25 = swift_dynamicCast(&v54, &v57, (char *)&type metadata for Any + 8, &type metadata for String, 6);
      v26 = v44;
      if ((v25 & 1) != 0)
      {
        v27 = v55;
        v28 = Data.init(base64Encoded:options:)(v54, v55, 0);
        v30 = v29;
        swift_bridgeObjectRelease(v27);
        if (v30 >> 60 != 15)
        {
          v41 = v28;
          v42 = v30;
          v35 = v45;
          v56[0] = v26;
          v56[1] = v45;
          sub_100063C8C(v26, v45);
          v36 = v59;
          v37 = v53;
          P256.KeyAgreement.PublicKey.init<A>(x963Representation:)(v56, &type metadata for Data, &protocol witness table for Data);
          if (!v37)
          {
            P256.KeyAgreement.PrivateKey.sharedSecretFromKeyAgreement(with:)(v36);
            sub_10013577C();
            v53 = v38;
            sub_100134D2C(v38, v39, 0x20uLL);
            __asm { BR              X10 }
          }
          sub_10006B9B4(v26, v35);
          v33 = v41;
          v34 = &v60;
          goto LABEL_25;
        }
        sub_100098CBC();
        v31 = 0x2064696C61766E49;
LABEL_24:
        v32 = sub_1001E2838(0, 1, v31, 0xEC00000061746164, 0);
        swift_willThrow(v32);
        v33 = v26;
        v34 = &v61;
LABEL_25:
        sub_10006B9B4(v33, *(v34 - 32));
        return v6;
      }
    }
    else
    {
      sub_100096700((uint64_t)&v57, (uint64_t *)&unk_100346130);
      v26 = v44;
    }
    sub_100098CBC();
    v31 = 0x20676E697373694DLL;
    goto LABEL_24;
  }
  sub_100098CBC();
  v20 = "Invalid ephemeralPublicKey";
LABEL_11:
  v21 = sub_1001E2838(0, 1, 0xD00000000000001ALL, (unint64_t)(v20 - 32) | 0x8000000000000000, 0);
  swift_willThrow(v21);
  return v6;
}

uint64_t sub_100136784()
{
  uint64_t v0;
  unint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = BYTE6(*(_QWORD *)(v5 - 288));
  *(_QWORD *)(v5 - 208) = v6 - 16;
  if (__OFSUB__(v6, 16))
  {
    __break(1u);
    goto LABEL_7;
  }
  *(_OWORD *)(v5 - 176) = xmmword_10028A330;
  v7 = sub_10007EF0C();
  AES.GCM.Nonce.init<A>(data:)(v5 - 176, &type metadata for Data, v7);
  if (v0)
  {
    sub_100063CD0(*(_QWORD *)(v5 - 200), v1);
    sub_10006B9B4(*(_QWORD *)(v5 - 296), *(_QWORD *)(v5 - 288));
    sub_10006B9B4(*(_QWORD *)(v5 - 272), *(_QWORD *)(v5 - 264));
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 248) + 8))(v4, *(_QWORD *)(v5 - 232));
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 240) + 8))(v3, *(_QWORD *)(v5 - 224));
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v5 - 216) + 8))(*(_QWORD *)(v5 - 72), *(_QWORD *)(v5 - 256));
    JUMPOUT(0x1001364ECLL);
  }
  v8 = *(_QWORD *)(v5 - 208);
  if (v8 < 0)
  {
LABEL_7:
    __break(1u);
    JUMPOUT(0x100136A84);
  }
  *(_QWORD *)(v5 - 176) = Data.subdata(in:)(0, v8, *(_QWORD *)(v5 - 296), *(_QWORD *)(v5 - 288));
  *(_QWORD *)(v5 - 168) = v9;
  return ((uint64_t (*)(void))((char *)&loc_100136860 + *((int *)qword_100136AA8 + v2)))();
}

_QWORD *sub_100136AB8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD v14[2];
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  __n128 v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;

  v3 = a1[3];
  v4 = sub_10006BA78(a1, v3);
  swift_getDynamicType(v4, v3, 1);
  (*(void (**)(uint64_t *__return_ptr))(a1[4] + 8))(&v15);
  v5 = v17;
  v6 = v18;
  v7 = v19;
  sub_10013B504((uint64_t)a1, v15, v16, v17, v18, v19);
  v9 = v8;
  sub_1001241AC(v5, v6, v7);
  if (v1)
  {
    v27 = v20;
    return sub_1001241D0(&v27);
  }
  else
  {
    v26 = v20;
    sub_1001241D0(&v26);
    v14[0] = sub_10007C71C(v9);
    v14[1] = v10;
    v11 = a1[3];
    v12 = sub_10006BA78(a1, v11);
    swift_getDynamicType(v12, v11, 1);
    (*(void (**)(__n128 *__return_ptr))(a1[4] + 8))(&v21);
    sub_100138A24((uint64_t)a1, &v21, (uint64_t)v14);
    sub_100124140(&v22, &v25);
    sub_10012417C((uint64_t)&v25);
    v24 = v23;
    sub_1001241D0(&v24);
    return (_QWORD *)v14[0];
  }
}

void sub_100136C34(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = -64;
  *(_QWORD *)(a1 + 40) = _swiftEmptyArrayStorage;
}

unint64_t sub_100136C5C(uint64_t *a1, __n128 *a2)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  __n128 v50;
  uint64_t v51;
  char v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 v56;
  uint64_t v57;
  __n128 v58;
  __n128 v60;
  unsigned __int8 v61;
  __n128 v62;
  unsigned __int8 v63;

  sub_100124140(a2 + 1, &v50);
  sub_100124140(&v50, &v62);
  if (v63 > 0x3Fu)
  {
    sub_100124140(&v50, &v60);
    if (v61 == 192 && !v60.n128_u64[1] && v60.n128_u64[0] == 3)
    {
      v7 = sub_10013A858(a1);
      if (!v2)
      {
        v10 = v8;
        v11 = v9;
        if ((a2->n128_u8[8] & 1) == 0 && a2->n128_u64[0] != v7)
          __asm { BR              X11 }
        v43 = swift_allocObject(&unk_10030A048, 32, 7);
        *(_QWORD *)(v43 + 16) = v10;
        *(_QWORD *)(v43 + 24) = v11;
        return v43 | 0x2000000000000000;
      }
    }
    else
    {
      v12 = sub_10013A858(a1);
      if (!v2)
      {
        if ((a2->n128_u8[8] & 1) == 0 && a2->n128_u64[0] != v12)
          __asm { BR              X11 }
        v33 = a2[2].n128_u64[1];
        v34 = *(_QWORD *)(v33 + 16);
        if (v34)
        {
          v35 = (_BYTE *)(v33 + 72);
          v36 = v13 >> 62;
          do
          {
            if ((*(v35 - 32) & 1) == 0)
              __asm { BR              X5 }
            if ((*(v35 - 16) & 1) == 0)
              __asm { BR              X3 }
            if ((*v35 & 1) == 0)
              __asm { BR              X1 }
            v35 += 48;
            --v34;
          }
          while (v34);
        }
        sub_100124140(&v50, &v58);
        __asm { BR              X12 }
      }
    }
  }
  else
  {
    v5 = v62.n128_u64[0];
    sub_10013D03C((uint64_t)&v50);
    sub_100139EF8((uint64_t)a1);
    if (v2)
    {
      sub_10012417C((uint64_t)&v50);
    }
    else
    {
      v45 = a1;
      a1 = *(uint64_t **)(v5 + 16);
      if (a1)
      {
        v14 = v5 + 48;
        v46 = v6;
        while ((*(_BYTE *)(v14 + 8) & 1) == 0)
        {
          if (*(_QWORD *)v14 == v6)
          {
            v18 = *(_QWORD *)(v14 - 8);
            v47 = *(_QWORD *)(v14 - 16);
            v48 = *(_BYTE *)(v14 + 9);
            v19 = *(_QWORD *)(v14 + 16);
            v20 = *(_QWORD *)(v14 + 24);
            v21 = *(_BYTE *)(v14 + 32);
            v22 = *(_QWORD *)(v14 + 40);
            swift_bridgeObjectRetain(v18);
            sub_10013D018(v19, v20, v21);
            swift_bridgeObjectRetain(v22);
            if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
              sub_100192AB0(0, _swiftEmptyArrayStorage[2] + 1, 1);
            v16 = _swiftEmptyArrayStorage[2];
            v15 = _swiftEmptyArrayStorage[3];
            if (v16 >= v15 >> 1)
              sub_100192AB0(v15 > 1, v16 + 1, 1);
            _swiftEmptyArrayStorage[2] = v16 + 1;
            v17 = &_swiftEmptyArrayStorage[8 * v16];
            v6 = v46;
            v17[4] = v47;
            v17[5] = v18;
            v17[6] = v46;
            *((_BYTE *)v17 + 56) = 0;
            *((_BYTE *)v17 + 57) = v48;
            v17[8] = v19;
            v17[9] = v20;
            *((_BYTE *)v17 + 80) = v21;
            v17[11] = v22;
          }
          v14 += 64;
          a1 = (uint64_t *)((char *)a1 - 1);
          if (!a1)
            goto LABEL_25;
        }
        v37 = sub_100071B74();
        v38 = swift_allocError(&type metadata for ASN1Error, v37, 0, 0);
        *(_QWORD *)(v39 + 8) = 0;
        *(_QWORD *)(v39 + 16) = 0;
        *(_QWORD *)v39 = 5;
        *(_BYTE *)(v39 + 24) = 3;
        swift_willThrow(v38);
        sub_10012417C((uint64_t)&v50);
        swift_release(_swiftEmptyArrayStorage);
      }
      else
      {
LABEL_25:
        sub_10012417C((uint64_t)&v50);
        if (_swiftEmptyArrayStorage[2])
        {
          v23 = _swiftEmptyArrayStorage[5];
          v49 = _swiftEmptyArrayStorage[4];
          v24 = _swiftEmptyArrayStorage[6];
          v25 = _swiftEmptyArrayStorage[7];
          v26 = BYTE1(_swiftEmptyArrayStorage[7]);
          v27 = _swiftEmptyArrayStorage[8];
          v28 = _swiftEmptyArrayStorage[9];
          v29 = _swiftEmptyArrayStorage[11];
          v30 = _swiftEmptyArrayStorage[10];
          swift_bridgeObjectRetain(v23);
          sub_10013D018(v27, v28, v30);
          swift_bridgeObjectRetain(v29);
          swift_release(_swiftEmptyArrayStorage);
          v51 = v24;
          v52 = v25;
          v53 = v26;
          v54 = v27;
          v55 = v28;
          v56 = v30;
          v57 = v29;
          v31 = swift_allocObject(&unk_10030A070, 40, 7);
          swift_bridgeObjectRetain(v23);
          sub_10013D018(v27, v28, v30);
          swift_bridgeObjectRetain(v29);
          sub_1001241AC(v27, v28, v30);
          swift_bridgeObjectRelease(v29);
          *(_QWORD *)(v31 + 16) = v49;
          *(_QWORD *)(v31 + 24) = v23;
          v32 = sub_100136C5C(v45, &v51);
          swift_bridgeObjectRelease(v23);
          sub_1001241AC(v27, v28, v30);
          swift_bridgeObjectRelease(v29);
          *(_QWORD *)(v31 + 32) = v32;
          return v31 | 0xA000000000000000;
        }
        else
        {
          swift_release(_swiftEmptyArrayStorage);
          v40 = sub_100071B74();
          v41 = swift_allocError(&type metadata for ASN1Error, v40, 0, 0);
          *(_QWORD *)(v42 + 8) = 0;
          *(_QWORD *)(v42 + 16) = 0;
          *(_QWORD *)v42 = 2;
          *(_BYTE *)(v42 + 24) = 3;
          swift_willThrow(v41);
        }
      }
    }
  }
  return (unint64_t)a1;
}

void sub_100137744(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a1;
  v4 = sub_100071B74();
  v5 = swift_allocError(&type metadata for ASN1Error, v4, 0, 0);
  *(_QWORD *)v6 = v1;
  *(_QWORD *)(v6 + 8) = v2;
  *(_QWORD *)(v6 + 16) = v3;
  *(_BYTE *)(v6 + 24) = 0;
  swift_willThrow(v5);
  JUMPOUT(0x1001377ACLL);
}

void *sub_1001378AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain(a2);
  if (v4)
    __asm { BR              X11 }
  swift_bridgeObjectRelease(a2);
  return &_swiftEmptyDictionarySingleton;
}

uint64_t sub_100137F40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  unsigned __int8 v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;

  v2 = a2;
  v3 = *(_QWORD *)(a2 + 16);
  v44 = v3;
  if (!v3)
  {
    v25 = a1;
    goto LABEL_14;
  }
  v4 = a2 + 32;
  swift_bridgeObjectRetain(a2);
  v42 = 0;
  v5 = 0;
  v33 = v2 + 32;
  while (1)
  {
    v6 = v4 + (v5 << 6);
    v7 = *(_QWORD *)(v6 + 8);
    v43 = *(_QWORD *)(v6 + 16);
    v9 = *(_QWORD *)(v6 + 32);
    v8 = *(_QWORD *)(v6 + 40);
    v10 = *(_BYTE *)(v6 + 48);
    v11 = *(_QWORD *)(v6 + 56);
    v40 = *(_BYTE *)(v6 + 24);
    swift_bridgeObjectRetain(v7);
    sub_10013D018(v9, v8, v10);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v7);
    sub_10013D018(v9, v8, v10);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRelease(v7);
    sub_1001241AC(v9, v8, v10);
    v39 = v11;
    swift_bridgeObjectRelease(v11);
    if ((v40 & 1) != 0)
      break;
    v12 = v5 + 1;
    if (v12 == v3)
    {
      swift_bridgeObjectRelease(v7);
      sub_1001241AC(v9, v8, v10);
      swift_bridgeObjectRelease(v2);
      swift_bridgeObjectRelease(v11);
      v25 = a1;
      if (v3 > 0x40)
      {
        v30 = sub_100071B74();
        v31 = swift_allocError(&type metadata for ASN1Error, v30, 0, 0);
        *(_QWORD *)(v32 + 8) = 0;
        *(_QWORD *)(v32 + 16) = 0;
        *(_QWORD *)v32 = 2;
        *(_BYTE *)(v32 + 24) = 3;
        return swift_willThrow(v31);
      }
LABEL_14:
      __asm { BR              X11 }
    }
    v36 = v7;
    v37 = v9;
    v38 = v8;
    v41 = v10;
    swift_bridgeObjectRetain(v2);
    v13 = v42;
    v35 = v12;
    do
    {
      if (v12 >= v3)
      {
        __break(1u);
        JUMPOUT(0x10013892CLL);
      }
      v14 = v2 + v13;
      v16 = *(_QWORD *)(v2 + v13 + 104);
      v15 = *(_QWORD *)(v2 + v13 + 112);
      v18 = *(_QWORD *)(v14 + 128);
      v17 = *(_QWORD *)(v14 + 136);
      v19 = *(_BYTE *)(v14 + 144);
      v20 = *(_QWORD *)(v14 + 152);
      v21 = *(_BYTE *)(v14 + 120);
      swift_bridgeObjectRetain(v16);
      sub_10013D018(v18, v17, v19);
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRetain(v16);
      sub_10013D018(v18, v17, v19);
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRelease(v16);
      sub_1001241AC(v18, v17, v19);
      swift_bridgeObjectRelease(v20);
      if ((v21 & 1) != 0 || v43 == v15)
      {
        swift_bridgeObjectRelease(a2);
        v22 = sub_100071B74();
        v23 = swift_allocError(&type metadata for ASN1Error, v22, 0, 0);
        *(_QWORD *)(v24 + 8) = 0;
        *(_QWORD *)(v24 + 16) = 0;
        *(_QWORD *)v24 = 2;
        *(_BYTE *)(v24 + 24) = 3;
        swift_willThrow(v23);
        swift_bridgeObjectRelease(v16);
        sub_1001241AC(v18, v17, v19);
        swift_bridgeObjectRelease(v36);
        swift_bridgeObjectRelease(v20);
        sub_1001241AC(v37, v38, v41);
        swift_bridgeObjectRelease(a2);
        return swift_bridgeObjectRelease(v39);
      }
      ++v12;
      swift_bridgeObjectRelease(v16);
      sub_1001241AC(v18, v17, v19);
      swift_bridgeObjectRelease(v20);
      v13 += 64;
      v3 = v44;
      v2 = a2;
    }
    while (v44 != v12);
    swift_bridgeObjectRelease(v36);
    swift_bridgeObjectRelease(a2);
    sub_1001241AC(v37, v38, v41);
    swift_bridgeObjectRelease(v39);
    v42 += 64;
    v4 = v33;
    v5 = v35;
  }
  swift_bridgeObjectRelease(v2);
  v27 = sub_100071B74();
  v28 = swift_allocError(&type metadata for ASN1Error, v27, 0, 0);
  *(_QWORD *)(v29 + 8) = 0;
  *(_QWORD *)(v29 + 16) = 0;
  *(_QWORD *)v29 = 2;
  *(_BYTE *)(v29 + 24) = 3;
  swift_willThrow(v28);
  swift_bridgeObjectRelease(v7);
  sub_1001241AC(v9, v8, v10);
  return swift_bridgeObjectRelease(v39);
}

void sub_1001389FC(uint64_t a1, uint64_t a2)
{
  sub_10013B504(a1, *(_QWORD *)a2, *(unsigned __int8 *)(a2 + 8), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_BYTE *)(a2 + 32));
}

uint64_t sub_100138A24(uint64_t a1, __n128 *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __n128 v18;
  uint64_t v19[9];
  uint64_t v20;
  char v21;
  __n128 v22;
  unsigned __int8 v23;

  v5 = type metadata accessor for Mirror(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v17 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10013D000((uint64_t *)a2, (uint64_t)v19);
  sub_10013D000(v19, (uint64_t)&v20);
  if ((v21 & 1) == 0)
  {
    v15 = v5;
    v16 = a3;
    v14 = v6;
LABEL_5:
    __asm { BR              X10 }
  }
  sub_100124140(a2 + 1, &v18);
  sub_100124140(&v18, &v22);
  if (v23 < 0x40u)
  {
    v15 = v5;
    v16 = a3;
    v14 = v6;
    goto LABEL_5;
  }
  v9 = sub_100071B74();
  v10 = swift_allocError(&type metadata for ASN1Error, v9, 0, 0);
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)v11 = 2;
  *(_BYTE *)(v11 + 24) = 3;
  return swift_willThrow(v10);
}

void sub_100139690()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;

  v2 = sub_100071B74();
  swift_allocError(&type metadata for ASN1Error, v2, 0, 0);
  *v3 = v0;
  v3[1] = v1;
  v3[2] = 0;
  JUMPOUT(0x100139714);
}

void sub_1001396D0()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;

  if ((v0 & 1) != 0)
  {
    __break(1u);
    JUMPOUT(0x1001396DCLL);
  }
  v3 = sub_100071B74();
  swift_allocError(&type metadata for ASN1Error, v3, 0, 0);
  *v4 = v1;
  v4[1] = v2;
  v4[2] = 0;
  JUMPOUT(0x100139714);
}

uint64_t sub_1001397D0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[5];

  result = sub_100139AC0(a1, a3);
  if (!v4)
  {
    v10 = result;
    sub_10013C164(a2);
    sub_10013C2B4(v10);
    v11 = sub_10006BA78(a1, a1[3]);
    v12 = sub_1001FA9A4(*v11);
    v13 = v12;
    v14 = v12[2];
    if (v14)
    {
      v15 = (uint64_t)(v12 + 4);
      do
      {
        sub_1000E504C(v15, (uint64_t)v16);
        sub_100138A24(v16, a3, a4);
        sub_10006BA9C(v16);
        v15 += 40;
        --v14;
      }
      while (v14);
    }
    return swift_bridgeObjectRelease(v13);
  }
  return result;
}

uint64_t sub_1001398B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  unsigned __int128 *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t *v15;
  __int128 *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20[2];
  uint64_t v21;
  __int128 v22[2];
  unsigned __int128 v23;
  __int128 v24;
  uint64_t v25;
  unsigned __int128 v26;
  _OWORD v27[2];

  v4 = type metadata accessor for Mirror(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100096CB0(a2, (uint64_t)&v23);
  v9 = Mirror.init(reflecting:)(&v23);
  v10 = (_QWORD *)Mirror.children.getter(v9);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  v11 = &v23;
  sub_10009F8B4(v10, &v23);
  swift_release(v10);
  if (!v25)
  {
    v15 = (uint64_t *)&unk_100346FD0;
    v16 = (__int128 *)&v23;
LABEL_7:
    sub_100096700((uint64_t)v16, v15);
    v17 = sub_100071B74();
    v18 = swift_allocError(&type metadata for ASN1Error, v17, 0, 0);
    *(_QWORD *)(v19 + 8) = 0;
    *(_QWORD *)(v19 + 16) = 0;
    *(_QWORD *)v19 = 2;
    *(_BYTE *)(v19 + 24) = 3;
    swift_willThrow(v18);
    return (uint64_t)v11;
  }
  v12 = *((_QWORD *)&v23 + 1);
  v11 = (unsigned __int128 *)v23;
  v26 = v23;
  sub_10006C2B4(&v24, v27);
  v23 = __PAIR128__(v12, (unint64_t)v11);
  sub_100096CB0((uint64_t)v27, (uint64_t)&v24);
  swift_bridgeObjectRetain(v12);
  v13 = sub_100063D3C(&qword_100348A60);
  if ((swift_dynamicCast(v20, &v24, (char *)&type metadata for Any + 8, v13, 6) & 1) == 0)
  {
    v21 = 0;
    memset(v20, 0, sizeof(v20));
    swift_bridgeObjectRelease(v12);
    sub_100096700((uint64_t)&v26, &qword_100346FC8);
    v15 = (uint64_t *)&unk_100346FD8;
    v16 = v20;
    goto LABEL_7;
  }
  sub_1000DB160(v20, (uint64_t)v22);
  v23 = __PAIR128__(v12, (unint64_t)v11);
  result = sub_100096CB0((uint64_t)v27, (uint64_t)&v24);
  if (v12)
  {
    sub_100096700((uint64_t)&v26, &qword_100346FC8);
    sub_1000DB160(v22, a1);
    sub_10006BA9C(&v24);
    return (uint64_t)v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_100139AC0(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  _QWORD *v18;
  uint64_t result;
  _QWORD v20[5];
  _QWORD *v21;

  v4 = sub_10006BA78(a1, a1[3]);
  v5 = sub_1001FA9A4(*v4);
  v6 = v5;
  v7 = v5[2];
  if (v7)
  {
    v21 = _swiftEmptyArrayStorage;
    sub_100192AF8(0, v7, 0);
    v8 = (uint64_t)(v6 + 4);
    do
    {
      sub_1000E504C(v8, (uint64_t)v20);
      sub_1001389FC((uint64_t)v20, a2);
      v10 = v9;
      sub_10006BA9C(v20);
      if (v2)
      {
        v18 = v21;
        swift_bridgeObjectRelease(v6);
        swift_release(v18);
        return a2;
      }
      v11 = v21;
      if ((swift_isUniquelyReferenced_nonNull_native(v21) & 1) == 0)
      {
        sub_100192AF8(0, v11[2] + 1, 1);
        v11 = v21;
      }
      v13 = v11[2];
      v12 = v11[3];
      if (v13 >= v12 >> 1)
      {
        sub_100192AF8(v12 > 1, v13 + 1, 1);
        v11 = v21;
      }
      v11[2] = v13 + 1;
      v11[v13 + 4] = v10;
      v8 += 40;
      --v7;
    }
    while (v7);
    result = swift_bridgeObjectRelease(v6);
    v14 = v11[2];
    if (!v14)
      goto LABEL_17;
LABEL_11:
    v15 = 0;
    a2 = 0;
    while (1)
    {
      v16 = v11[v15 + 4];
      v17 = __OFADD__(a2, v16);
      a2 += v16;
      if (v17)
        break;
      if (v14 == ++v15)
      {
        swift_bridgeObjectRelease(v11);
        return a2;
      }
    }
    __break(1u);
    return result;
  }
  result = swift_bridgeObjectRelease(v5);
  v11 = _swiftEmptyArrayStorage;
  v14 = _swiftEmptyArrayStorage[2];
  if (v14)
    goto LABEL_11;
LABEL_17:
  swift_bridgeObjectRelease(v11);
  return 0;
}

size_t sub_100139C78(size_t result, unint64_t a2)
{
  const void *v3;
  int64_t v4;
  _QWORD *v5;
  uint64_t v6;

  if (!result)
    return (size_t)_swiftEmptyArrayStorage;
  v3 = (const void *)result;
  v4 = a2 - result;
  if (a2 == result)
    return (size_t)_swiftEmptyArrayStorage;
  if (v4 < 1)
  {
    v5 = _swiftEmptyArrayStorage;
    if (!a2)
      goto LABEL_13;
  }
  else
  {
    v6 = sub_100063D3C(&qword_100346F90);
    v5 = (_QWORD *)swift_allocObject(v6, v4 + 32, 7);
    result = j__malloc_size(v5);
    v5[2] = v4;
    v5[3] = 2 * result - 64;
    if (!a2)
      goto LABEL_13;
  }
  if ((unint64_t)v3 < a2)
  {
    if ((v4 & 0x8000000000000000) == 0)
    {
      memmove(v5 + 4, v3, v4);
      return (size_t)v5;
    }
    __break(1u);
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_100139D28(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  char v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;

  v3 = 0;
  v4 = *(_QWORD *)(result + 16);
  v5 = result + 88;
  v22 = result + 88;
  v23 = _swiftEmptyArrayStorage;
  v29 = v4;
LABEL_2:
  if (v3 <= v4)
    v6 = v4;
  else
    v6 = v3;
  v30 = v6 + 1;
  v7 = (_QWORD *)(v5 + (v3 << 6));
  while (1)
  {
    if (v4 == v3)
      return (uint64_t)v23;
    v8 = v3++;
    if (v30 == v3)
      break;
    v10 = *(v7 - 7);
    v9 = *(v7 - 6);
    v28 = *(v7 - 5);
    v26 = *((_BYTE *)v7 - 31);
    v27 = *((_BYTE *)v7 - 32);
    v11 = *(v7 - 3);
    v12 = *(v7 - 2);
    v13 = *((_BYTE *)v7 - 8);
    v14 = *v7;
    if (v10 == a2 && v9 == a3)
    {
      v10 = a2;
      v9 = a3;
LABEL_15:
      swift_bridgeObjectRetain(v9);
      sub_10013D018(v11, v12, v13);
      swift_bridgeObjectRetain(v14);
      v16 = v23;
      result = swift_isUniquelyReferenced_nonNull_native(v23);
      if ((result & 1) == 0)
      {
        result = sub_100192AB0(0, v23[2] + 1, 1);
        v16 = v23;
      }
      v18 = v16[2];
      v17 = v16[3];
      v19 = v18 + 1;
      v4 = v29;
      if (v18 >= v17 >> 1)
      {
        v21 = v18 + 1;
        v31 = v16[2];
        result = sub_100192AB0(v17 > 1, v18 + 1, 1);
        v19 = v21;
        v4 = v29;
        v18 = v31;
        v16 = v23;
      }
      v3 = v8 + 1;
      v16[2] = v19;
      v23 = v16;
      v20 = &v16[8 * v18];
      v20[4] = v10;
      v20[5] = v9;
      v20[6] = v28;
      *((_BYTE *)v20 + 56) = v27;
      *((_BYTE *)v20 + 57) = v26;
      v20[8] = v11;
      v20[9] = v12;
      *((_BYTE *)v20 + 80) = v13;
      v20[11] = v14;
      v5 = v22;
      goto LABEL_2;
    }
    v7 += 8;
    result = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v9, a2, a3, 0);
    v4 = v29;
    if ((result & 1) != 0)
      goto LABEL_15;
  }
  __break(1u);
  return result;
}

void sub_100139EF8(uint64_t a1)
{
  __asm { BR              X9 }
}

uint64_t sub_100139F54()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;

  if (!BYTE6(v2))
  {
LABEL_39:
    v21 = sub_100071B74();
    v22 = swift_allocError(&type metadata for ASN1Error, v21, 0, 0);
    *(_QWORD *)(v23 + 8) = 0;
    *(_QWORD *)(v23 + 16) = 0;
    *(_QWORD *)v23 = 0;
    *(_BYTE *)(v23 + 24) = 3;
    swift_willThrow(v22);
    return v3;
  }
  if (v4)
  {
    if (v4 == 1)
      v6 = (int)v1;
    else
      v6 = *(_QWORD *)(v1 + 16);
  }
  else
  {
    v6 = 0;
  }
  v7 = ((uint64_t (*)(uint64_t, uint64_t, unint64_t))Data.subscript.getter)(v6, v1, v2);
  v3 = v7;
  if ((~v7 & 0x1E) != 0)
  {
    if ((*(_DWORD *)(v5 - 108) & 1) != 0)
      return v3;
    if (v4)
    {
      if (v4 == 1)
      {
        v10 = (int)v1 + 1;
        v11 = v2 & 0x3FFFFFFFFFFFFFFFLL;
        v12 = v1 >> 32;
      }
      else
      {
        v26 = *(_QWORD *)(v1 + 16);
        v10 = v26 + 1;
        if (__OFADD__(v26, 1))
        {
LABEL_63:
          __break(1u);
          goto LABEL_64;
        }
        v12 = *(_QWORD *)(v1 + 24);
        swift_retain(v1);
        v11 = v2 & 0x3FFFFFFFFFFFFFFFLL;
      }
      swift_retain(v11);
    }
    else
    {
      v12 = BYTE6(v2);
      v10 = 1;
    }
    if (v12 < v10)
      goto LABEL_68;
    v25 = v10;
    v24 = v12;
    goto LABEL_53;
  }
  if (!v4)
  {
    v9 = BYTE6(v2);
    v8 = 1;
    goto LABEL_18;
  }
  if (v4 == 1)
  {
    v8 = (int)v1 + 1;
    v9 = v1 >> 32;
    goto LABEL_18;
  }
  v13 = *(_QWORD *)(v1 + 16);
  v8 = v13 + 1;
  if (__OFADD__(v13, 1))
  {
    __break(1u);
    goto LABEL_63;
  }
  v9 = *(_QWORD *)(v1 + 24);
LABEL_18:
  if (v9 < v8)
    goto LABEL_67;
  if (v8 == v9)
    goto LABEL_39;
  v31 = v1 >> 32;
  while (1)
  {
    if (v8 >= v9)
    {
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
      JUMPOUT(0x10013A2ECLL);
    }
    if (v4)
    {
      if (v4 == 1)
      {
        if (v8 < (int)v1 || v8 >= v31)
          goto LABEL_58;
        v14 = __DataStorage._bytes.getter();
        if (!v14)
        {
          __break(1u);
LABEL_66:
          __break(1u);
LABEL_67:
          __break(1u);
LABEL_68:
          __break(1u);
          JUMPOUT(0x10013A314);
        }
        v15 = v14;
        v16 = __DataStorage._offset.getter();
        v17 = v8 - v16;
        if (__OFSUB__(v8, v16))
          goto LABEL_60;
      }
      else
      {
        if (v8 < *(_QWORD *)(v1 + 16))
          goto LABEL_57;
        if (v8 >= *(_QWORD *)(v1 + 24))
          goto LABEL_59;
        v19 = __DataStorage._bytes.getter();
        if (!v19)
          goto LABEL_66;
        v15 = v19;
        v20 = __DataStorage._offset.getter();
        v17 = v8 - v20;
        if (__OFSUB__(v8, v20))
          goto LABEL_61;
      }
      v18 = *(unsigned __int8 *)(v15 + v17);
    }
    else
    {
      if (v8 >= BYTE6(v2))
        goto LABEL_56;
      *(_QWORD *)(v5 - 102) = v1;
      *(_WORD *)(v5 - 94) = v2;
      *(_BYTE *)(v5 - 92) = BYTE2(v2);
      *(_BYTE *)(v5 - 91) = BYTE3(v2);
      *(_BYTE *)(v5 - 90) = BYTE4(v2);
      *(_BYTE *)(v5 - 89) = BYTE5(v2);
      v18 = *(unsigned __int8 *)(v5 - 102 + v8);
    }
    v3 = v18 | (v3 << 8);
    if ((v18 & 0x80) == 0)
      break;
    if (v9 == ++v8)
      goto LABEL_39;
  }
  if ((*(_DWORD *)(v5 - 108) & 1) == 0)
  {
    v24 = BYTE6(v2);
    if (v4)
    {
      if (v4 != 1)
      {
        v31 = *(_QWORD *)(v1 + 24);
        swift_retain(v1);
      }
      swift_retain(v2 & 0x3FFFFFFFFFFFFFFFLL);
      v24 = v31;
    }
    if (v24 > v8)
    {
      v25 = v8 + 1;
LABEL_53:
      v27 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))Data._Representation.subscript.getter)(v25, v24, v1, v2);
      v29 = v28;
      sub_100063CD0(v1, v2);
      sub_100063CD0(v1, v2);
      *v0 = v27;
      v0[1] = v29;
      return v3;
    }
LABEL_64:
    __break(1u);
  }
  return v3;
}

void sub_10013A324(uint64_t a1)
{
  __asm { BR              X9 }
}

uint64_t sub_10013A37C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  __int16 v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  if (!BYTE6(v3))
    goto LABEL_23;
  sub_100063C8C(v2, v3);
  sub_10009F76C(v2, v3);
  v8 = v7;
  sub_100063CD0(v2, v3);
  if ((v8 & 0x100) != 0)
  {
    __break(1u);
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  v4 = v8;
  if (v8 <= 0x7Fu)
  {
    if (!v5)
    {
      v11 = BYTE6(v3);
      v9 = 1;
      goto LABEL_16;
    }
    if (v5 == 1)
    {
      v9 = (int)v2 + 1;
      v10 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      v11 = v2 >> 32;
LABEL_15:
      swift_retain(v10);
LABEL_16:
      if (v11 >= v9)
      {
        v14 = v9;
        v15 = v11;
LABEL_72:
        v37 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))Data._Representation.subscript.getter)(v14, v15, v2, v3);
        v39 = v38;
        sub_100063CD0(v2, v3);
        sub_100063CD0(v2, v3);
        *v1 = v37;
        v1[1] = v39;
        return v4;
      }
LABEL_92:
      __break(1u);
      JUMPOUT(0x10013A848);
    }
    v13 = *(_QWORD *)(v2 + 16);
    v9 = v13 + 1;
    if (!__OFADD__(v13, 1))
    {
      v11 = *(_QWORD *)(v2 + 24);
      swift_retain(v2);
      v10 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      goto LABEL_15;
    }
    goto LABEL_82;
  }
  if (v5)
  {
    if (v5 == 1)
    {
      LODWORD(v12) = HIDWORD(v2) - v2;
      if (__OFSUB__(HIDWORD(v2), (_DWORD)v2))
      {
LABEL_81:
        __break(1u);
LABEL_82:
        __break(1u);
        goto LABEL_83;
      }
      v12 = (int)v12;
    }
    else
    {
      v17 = *(_QWORD *)(v2 + 16);
      v16 = *(_QWORD *)(v2 + 24);
      v18 = __OFSUB__(v16, v17);
      v12 = v16 - v17;
      if (v18)
      {
LABEL_83:
        __break(1u);
        goto LABEL_84;
      }
    }
  }
  else
  {
    v12 = BYTE6(v3);
  }
  v4 = v8 & 0x7F;
  if (v12 <= v4)
  {
LABEL_23:
    v20 = sub_100071B74();
    v21 = swift_allocError(&type metadata for ASN1Error, v20, 0, 0);
    v22[2] = 0;
    v23 = v22 + 3;
    *v22 = 0;
    goto LABEL_24;
  }
  if (v5)
  {
    if (v5 == 1)
      v19 = (int)v2;
    else
      v19 = *(_QWORD *)(v2 + 16);
  }
  else
  {
    v19 = 0;
  }
  if (__OFADD__(v19, 1))
  {
    __break(1u);
    goto LABEL_81;
  }
  if (((uint64_t (*)(uint64_t, uint64_t, unint64_t))Data.subscript.getter)(v19 + 1, v2, v3))
  {
    if (v5)
    {
      if (v5 == 1)
      {
        v24 = (int)v2;
        v25 = (int)v2 + 1;
      }
      else
      {
        v24 = *(_QWORD *)(v2 + 16);
        v25 = v24 + 1;
        if (__OFADD__(v24, 1))
          goto LABEL_88;
      }
    }
    else
    {
      v25 = 1;
      v24 = 0;
    }
    v27 = v24 + 1;
    v28 = v27 + v4;
    if (!__OFADD__(v27, v4))
    {
      if (v28 >= v25)
      {
        if (v25 != v28)
        {
          v4 = 0;
          *(_QWORD *)(v6 - 120) = (int)v2;
          while (1)
          {
            if (v25 >= v28)
            {
              __break(1u);
LABEL_75:
              __break(1u);
LABEL_76:
              __break(1u);
LABEL_77:
              __break(1u);
LABEL_78:
              __break(1u);
LABEL_79:
              __break(1u);
              JUMPOUT(0x10013A808);
            }
            if (v5)
            {
              if (v5 == 1)
              {
                if (v25 < *(_QWORD *)(v6 - 120) || v25 >= v2 >> 32)
                  goto LABEL_77;
                v31 = __DataStorage._bytes.getter();
                if (!v31)
                  goto LABEL_90;
                v32 = v31;
                v33 = __DataStorage._offset.getter();
                v34 = v25 - v33;
                if (__OFSUB__(v25, v33))
                  goto LABEL_79;
              }
              else
              {
                if (v25 < *(_QWORD *)(v2 + 16))
                  goto LABEL_76;
                if (v25 >= *(_QWORD *)(v2 + 24))
                  goto LABEL_78;
                v35 = __DataStorage._bytes.getter();
                if (!v35)
                  goto LABEL_91;
                v32 = v35;
                v36 = __DataStorage._offset.getter();
                v34 = v25 - v36;
                if (__OFSUB__(v25, v36))
                {
                  __break(1u);
                  goto LABEL_62;
                }
              }
              v30 = *(unsigned __int8 *)(v32 + v34);
            }
            else
            {
              if (v25 >= BYTE6(v3))
                goto LABEL_75;
              *(_QWORD *)(v6 - 110) = v2;
              *(_WORD *)(v6 - 102) = v3;
              *(_BYTE *)(v6 - 100) = BYTE2(v3);
              *(_BYTE *)(v6 - 99) = BYTE3(v3);
              *(_BYTE *)(v6 - 98) = BYTE4(v3);
              *(_BYTE *)(v6 - 97) = BYTE5(v3);
              v30 = *(unsigned __int8 *)(v6 - 110 + v25);
            }
            ++v25;
            v4 = v30 | (v4 << 8);
            if (v28 == v25)
              goto LABEL_39;
          }
        }
        v4 = 0;
LABEL_39:
        v0 = (v8 & 0x7F) + 1;
        if (v5)
        {
          if (v5 == 1)
          {
            v29 = (int)v2;
          }
          else
          {
            v29 = *(_QWORD *)(v2 + 16);
            swift_retain(v2);
          }
          swift_retain(v3 & 0x3FFFFFFFFFFFFFFFLL);
        }
        else
        {
LABEL_62:
          v29 = v5;
        }
        v14 = v29 + v0;
        if (!__OFADD__(v29, v0))
        {
          if (v5)
          {
            if (v5 == 1)
              v15 = v2 >> 32;
            else
              v15 = *(_QWORD *)(v2 + 24);
          }
          else
          {
            v15 = BYTE6(v3);
          }
          if (v15 >= v14)
            goto LABEL_72;
          goto LABEL_87;
        }
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
LABEL_88:
        __break(1u);
      }
LABEL_85:
      __break(1u);
      goto LABEL_86;
    }
LABEL_84:
    __break(1u);
    goto LABEL_85;
  }
  v26 = sub_100071B74();
  v21 = swift_allocError(&type metadata for ASN1Error, v26, 0, 0);
  v22[2] = 0;
  v23 = v22 + 3;
  *v22 = 8;
LABEL_24:
  v22[1] = 0;
  *v23 = 3;
  swift_willThrow(v21);
  return v4;
}

uint64_t sub_10013A858(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v4 = *a1;
  v5 = a1[1];
  sub_100063C8C(*a1, v5);
  sub_100139EF8((uint64_t)a1);
  if (!v1)
  {
    sub_10013A324((uint64_t)a1);
    __asm { BR              X9 }
  }
  sub_100063CD0(v4, v5);
  return v2;
}

void sub_10013AA4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (BYTE6(v7) >= v6)
  {
    v8 = v6;
    v13 = Data._Representation.subscript.getter(v8, BYTE6(v7), a3, v7);
    v10 = v7;
    v12 = v11;
    sub_100063CD0(a3, v10);
    sub_100063CD0(v3, v4);
    *v5 = v13;
    v5[1] = v12;
    JUMPOUT(0x10013A9B0);
  }
  __break(1u);
  JUMPOUT(0x10013AAB0);
}

uint64_t sub_10013AAE8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  unint64_t v11;

  v10 = a1;
  v11 = a2;
  sub_100063C8C(a1, a2);
  v6 = sub_10013A858(&v10);
  v8 = v7;
  sub_100063CD0(v10, v11);
  if (!v3 && v6 != a3)
    __asm { BR              X10 }
  return v8;
}

void sub_10013ABE8(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Data.Iterator(0);
  __chkstk_darwin();
  __asm { BR              X9 }
}

unint64_t sub_10013AC60()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v14;
  __int16 v15;
  uint64_t v16;
  Swift::UInt8_optional v17;

  if (!BYTE6(v2))
    goto LABEL_9;
  if (v5)
  {
    if (v5 == 1)
    {
      LODWORD(v6) = HIDWORD(v3) - v3;
      if (!__OFSUB__(HIDWORD(v3), (_DWORD)v3))
      {
        v6 = (int)v6;
        goto LABEL_8;
      }
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v8 = *(_QWORD *)(v3 + 16);
    v7 = *(_QWORD *)(v3 + 24);
    v9 = __OFSUB__(v7, v8);
    v6 = v7 - v8;
    if (v9)
      goto LABEL_26;
  }
  else
  {
    v6 = BYTE6(v2);
  }
LABEL_8:
  if (v6 > 8)
  {
LABEL_9:
    v10 = sub_100071B74();
    v11 = swift_allocError(&type metadata for ASN1Error, v10, 0, 0);
    *(_QWORD *)(v12 + 8) = 0;
    *(_QWORD *)(v12 + 16) = 0;
    *(_QWORD *)v12 = 0;
    *(_BYTE *)(v12 + 24) = 3;
    swift_willThrow(v11);
    return v2;
  }
  sub_100063C8C(v3, v2);
  sub_10009F76C(v3, v2);
  v15 = v14;
  sub_100063CD0(v3, v2);
  if ((v15 & 0x100) != 0)
    goto LABEL_27;
  if ((v15 & 0x80) != 0)
  {
LABEL_28:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000011, 0x80000001002BD480, "seserviced/ASN1Decoder.swift", 28, 2, 726, 0);
    __break(1u);
    JUMPOUT(0x10013AE50);
  }
  if (v5)
  {
    if (v5 == 1)
      v16 = (int)v3;
    else
      v16 = *(_QWORD *)(v3 + 16);
    sub_100063C8C(v3, v2);
  }
  else
  {
    v16 = 0;
  }
  ((void (*)(uint64_t, unint64_t, uint64_t))Data.Iterator.init(_:at:))(v3, v2, v16);
  v17 = Data.Iterator.next()();
  if ((*(_WORD *)&v17 & 0x100) != 0)
    goto LABEL_24;
  v2 = 0;
  do
  {
    v2 = v17.value | (v2 << 8);
    v17 = Data.Iterator.next()();
  }
  while ((*(_WORD *)&v17 & 0x100) == 0);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0, v1);
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_24:
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0, v1);
    return 0;
  }
  return v2;
}

void sub_10013AE60(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_10013AE98()
{
  unint64_t v0;
  uint64_t v1;
  __int16 v2;
  __int16 v3;
  char v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (BYTE6(v0) != 1)
    goto LABEL_6;
  sub_100063C8C(v1, v0);
  sub_10009F76C(v1, v0);
  v3 = v2;
  sub_100063CD0(v1, v0);
  if ((v3 & 0x100) != 0)
    goto LABEL_6;
  v4 = v3;
  if ((_BYTE)v3)
  {
    if (v3 == 255)
    {
      v4 = 1;
      return v4 & 1;
    }
LABEL_6:
    v5 = sub_100071B74();
    v6 = swift_allocError(&type metadata for ASN1Error, v5, 0, 0);
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)v7 = 7;
    *(_BYTE *)(v7 + 24) = 3;
    swift_willThrow(v6);
  }
  return v4 & 1;
}

void sub_10013AF78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 <= 65534)
    __asm { BR              X12 }
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000017, 0x80000001002BD460, "seserviced/ASN1Decoder.swift", 28, 2, 781, 0);
  __break(1u);
  JUMPOUT(0x10013B0D4);
}

uint64_t sub_10013B0F4(unint64_t a1)
{
  unint64_t __src;

  if ((a1 & 0x8000000000000000) != 0)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000011, 0x80000001002BD480, "seserviced/ASN1Decoder.swift", 28, 2, 839, 0);
    __break(1u);
    JUMPOUT(0x10013B4D4);
  }
  if (a1)
  {
    __src = bswap64(a1);
    sub_100156630(&__src, 8);
    __asm { BR              X9 }
  }
  return 1;
}

void sub_10013B504(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v7;
  _QWORD v8[32];

  type metadata accessor for Mirror(0);
  __chkstk_darwin();
  v8[11] = (char *)v8 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __asm { BR              X10 }
}

uint64_t sub_10013B5A0()
{
  _QWORD *v0;
  uint64_t v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = v1;
  v7 = v0[3];
  v8 = (uint64_t)sub_10006BA78(v0, v7);
  *(_QWORD *)(v5 - 192) = v7;
  v9 = sub_1000960AC((_QWORD *)(v5 - 216));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v9, v8, v7);
  swift_bridgeObjectRetain(v4);
  v10 = sub_1001398B0(v5 - 264, v5 - 216);
  if (v3)
  {
    sub_1001241AC(v4, v6, v2);
    v12 = (_QWORD *)(v5 - 216);
  }
  else
  {
    v13 = v10;
    v14 = v11;
    sub_10006BA9C((_QWORD *)(v5 - 216));
    v8 = sub_100139D28(v4, v13, v14);
    swift_bridgeObjectRelease(v14);
    sub_1001241AC(v4, v6, v2);
    if (*(_QWORD *)(v8 + 16))
    {
      v15 = *(_QWORD *)(v8 + 40);
      v16 = *(_QWORD *)(v8 + 48);
      v17 = *(unsigned __int8 *)(v8 + 56);
      v18 = *(_QWORD *)(v8 + 64);
      v19 = *(_QWORD *)(v8 + 72);
      v20 = *(_QWORD *)(v8 + 88);
      v21 = *(_BYTE *)(v8 + 80);
      swift_bridgeObjectRetain(v15);
      sub_10013D018(v18, v19, v21);
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRelease(v8);
      sub_10013B504(v5 - 264, v16, v17, v18, v19, v21);
      v8 = v22;
      swift_bridgeObjectRelease(v15);
      sub_1001241AC(v18, v19, v21);
      swift_bridgeObjectRelease(v20);
      sub_10006BA9C((_QWORD *)(v5 - 264));
      return v8;
    }
    swift_bridgeObjectRelease(v8);
    v23 = sub_100071B74();
    v24 = swift_allocError(&type metadata for ASN1Error, v23, 0, 0);
    *(_QWORD *)(v25 + 8) = 0;
    *(_QWORD *)(v25 + 16) = 0;
    *(_QWORD *)v25 = 2;
    *(_BYTE *)(v25 + 24) = 3;
    swift_willThrow(v24);
    v12 = (_QWORD *)(v5 - 264);
  }
  sub_10006BA9C(v12);
  return v8;
}

void sub_10013C07C()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  v2 = *(_QWORD *)(v1 + 24);
  sub_100063CD0(v1, v0);
  if (__OFSUB__(v2, v3))
    __break(1u);
  JUMPOUT(0x10013C054);
}

void sub_10013C098()
{
  unint64_t v0;
  uint64_t v1;

  sub_100063CD0(v1, v0);
  JUMPOUT(0x10013C054);
}

void sub_10013C0AC()
{
  unint64_t v0;
  uint64_t v1;

  sub_100063CD0(v1, v0);
  if (!__OFSUB__(HIDWORD(v1), (_DWORD)v1))
    JUMPOUT(0x10013C054);
  __break(1u);
  JUMPOUT(0x10013C0E0);
}

uint64_t sub_10013C164(uint64_t a1)
{
  uint64_t result;
  size_t v2;
  size_t v3;
  uint64_t v4;
  char v5;
  char v6;
  __int16 v7;
  uint64_t v8;

  if (a1 <= 254)
  {
    if ((a1 & 0x8000000000000000) == 0)
    {
      v6 = a1;
      return Data._Representation.append(contentsOf:)(&v6, &v7);
    }
    v5 = 2;
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, v5, 3451, 0);
    __break(1u);
    goto LABEL_10;
  }
  if ((unint64_t)a1 > 0xFFFE)
  {
LABEL_10:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000017, 0x80000001002BD460, "seserviced/ASN1Decoder.swift", 28, 2, 793, 0);
    __break(1u);
    return result;
  }
  v7 = bswap32(a1) >> 16;
  v2 = sub_100139C78((size_t)&v7, (unint64_t)&v8);
  v3 = v2;
  v4 = *(_QWORD *)(v2 + 16);
  if (v4)
    Data._Representation.append(contentsOf:)(v2 + 32, v2 + 32 + v4);
  return swift_release(v3);
}

void sub_10013C2B4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  BOOL v4;
  unsigned int __src;

  if (a1 >= 128)
  {
    v2 = 0;
    v3 = a1;
    do
    {
      ++v2;
      v4 = v3 > 0xFF;
      v3 >>= 8;
    }
    while (v4);
    if ((v2 | 0x80uLL) < 0x100)
    {
      sub_1001CAD60();
      if (a1 < (uint64_t)&_mh_execute_header)
      {
        __src = bswap32(a1);
        sub_100156630(&__src, 4);
        __asm { BR              X9 }
      }
    }
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
LABEL_11:
    __break(1u);
    JUMPOUT(0x10013C698);
  }
  if (a1 < 0)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
    goto LABEL_11;
  }
  sub_1001CAD60();
}

void sub_10013C6B8(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t __src;

  sub_10013C164(a1);
  v3 = sub_10013B0F4(a2);
  sub_10013C2B4(v3);
  if (a2)
  {
    if ((a2 & 0x8000000000000000) == 0)
    {
      __src = bswap64(a2);
      sub_100156630(&__src, 8);
      __asm { BR              X9 }
    }
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000011, 0x80000001002BD480, "seserviced/ASN1Decoder.swift", 28, 2, 856, 0);
    __break(1u);
    JUMPOUT(0x10013CA80);
  }
  sub_1001CAD60();
}

uint64_t sub_10013CAA0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  __int128 v50;
  uint64_t v51;
  _QWORD v52[2];
  _QWORD v53[4];
  _OWORD v54[2];
  uint64_t v55;
  char v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;

  v6 = v5;
  v42 = a5;
  v9 = type metadata accessor for Mirror(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v15 = sub_10006BA78(a1, v14);
  v53[1] = v14;
  v16 = sub_1000960AC(v52);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v16, v15, v14);
  v45 = v13;
  Mirror.init(reflecting:)(v52);
  v17 = *(_QWORD *)(a2 + 16);
  if (!v17)
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v45, v9);
  v40 = v10;
  v41 = v9;
  v44 = v53;
  swift_bridgeObjectRetain(a2);
  v39 = a2;
  v18 = (uint64_t *)(a2 + 48);
  v43 = (char *)&type metadata for Any + 8;
  while (1)
  {
    v46 = v17;
    v21 = *(v18 - 2);
    v20 = *(v18 - 1);
    v22 = *((_BYTE *)v18 + 8);
    v23 = *((_BYTE *)v18 + 9);
    v25 = v18[2];
    v24 = v18[3];
    v26 = *((unsigned __int8 *)v18 + 32);
    v27 = v18[5];
    v55 = *v18;
    v56 = v22;
    v57 = v23;
    v58 = v25;
    v59 = v24;
    v60 = v26;
    v61 = v27;
    swift_bridgeObjectRetain(v20);
    v47 = v25;
    v48 = v24;
    v49 = v26;
    sub_10013D018(v25, v24, v26);
    v62 = v27;
    v28 = swift_bridgeObjectRetain(v27);
    v29 = Mirror.children.getter(v28);
    __chkstk_darwin(v29, v30);
    *(&v39 - 2) = v21;
    *(&v39 - 1) = v20;
    v31 = dispatch thunk of _AnySequenceBox._filter(_:)(sub_10013D094);
    swift_bridgeObjectRelease(v20);
    swift_release(v29);
    if (*(_QWORD *)(v31 + 16) != 1)
    {
      swift_bridgeObjectRelease(v31);
      swift_bridgeObjectRelease(v39);
      v33 = sub_100071B74();
      v34 = swift_allocError(&type metadata for ASN1Error, v33, 0, 0);
      *(_QWORD *)(v35 + 8) = 0;
      *(_QWORD *)(v35 + 16) = 0;
      *(_QWORD *)v35 = 2;
      *(_BYTE *)(v35 + 24) = 3;
      goto LABEL_15;
    }
    sub_10013D0AC(v31 + 32, (uint64_t)v52);
    swift_bridgeObjectRelease(v31);
    swift_bridgeObjectRelease(v52[1]);
    v32 = sub_100063D3C((uint64_t *)&unk_100346130);
    swift_dynamicCast(&v50, v44, v43, v32, 7);
    if (!v51)
      break;
    sub_10006C2B4(&v50, v54);
    sub_100096CB0((uint64_t)v54, (uint64_t)&v50);
    v19 = sub_100063D3C(&qword_100348A60);
    swift_dynamicCast(v52, &v50, (char *)&type metadata for Any + 8, v19, 7);
    sub_100138A24(v52, &v55, v42);
    if (v6)
    {
      sub_1001241AC(v47, v48, v49);
      swift_bridgeObjectRelease(v62);
      sub_10006BA9C(v54);
      swift_bridgeObjectRelease(v39);
      (*(void (**)(char *, uint64_t))(v40 + 8))(v45, v41);
      return sub_10006BA9C(v52);
    }
    sub_10006BA9C(v54);
    sub_1001241AC(v47, v48, v49);
    swift_bridgeObjectRelease(v62);
    sub_10006BA9C(v52);
LABEL_5:
    v18 += 8;
    v17 = v46 - 1;
    if (v46 == 1)
    {
      swift_bridgeObjectRelease(v39);
      v9 = v41;
      v10 = v40;
      return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v45, v9);
    }
  }
  sub_100096700((uint64_t)&v50, (uint64_t *)&unk_100346130);
  if ((v23 & 1) != 0)
  {
    sub_1001241AC(v47, v48, v49);
    swift_bridgeObjectRelease(v62);
    goto LABEL_5;
  }
  swift_bridgeObjectRelease(v39);
  v37 = sub_100071B74();
  v34 = swift_allocError(&type metadata for ASN1Error, v37, 0, 0);
  *(_QWORD *)(v38 + 8) = 0;
  *(_QWORD *)(v38 + 16) = 0;
  *(_QWORD *)v38 = 3;
  *(_BYTE *)(v38 + 24) = 3;
LABEL_15:
  swift_willThrow(v34);
  sub_1001241AC(v47, v48, v49);
  swift_bridgeObjectRelease(v62);
  return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v45, v41);
}

void sub_10013CF40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10013C164(a1);
  __asm { BR              X10 }
}

uint64_t sub_10013CF90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  sub_10013C2B4(BYTE6(v0));
  Data.append(_:)(v1, v0);
  return v3;
}

uint64_t sub_10013D000(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *a1;
  *(_BYTE *)(a2 + 8) = *((_BYTE *)a1 + 8);
  *(_QWORD *)a2 = v2;
  return a2;
}

uint64_t sub_10013D018(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  unsigned int v3;

  v3 = a3 >> 6;
  if (v3 == 2)
    return swift_retain(result);
  if (v3 <= 1)
    return swift_bridgeObjectRetain(result);
  return result;
}

uint64_t sub_10013D03C(uint64_t a1)
{
  sub_10013D018(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return a1;
}

_QWORD *sub_10013D06C(_QWORD *a1)
{
  swift_bridgeObjectRetain(*a1);
  return a1;
}

uint64_t sub_10013D094(uint64_t *a1)
{
  return sub_10013D0F4(a1) & 1;
}

uint64_t sub_10013D0AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100063D3C(&qword_100346FC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10013D0F4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[1];
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *a1;
  if (v5 == v3 && v2 == v4)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v5, v2, v3, v4, 0) & 1;
}

uint64_t sub_10013D14C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10013D170()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D180()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10013D190()
{
  uint64_t v0;

  sub_100063CD0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10013D1B4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32) & 0x1FFFFFFFFFFFFFFFLL);
  return swift_deallocObject(v0, 40, 7);
}

_QWORD *initializeBufferWithCopyOfBuffer for ASN1DecodedItem(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = *a2 & 0x1FFFFFFFFFFFFFFFLL;
  *a1 = *a2;
  swift_retain(v3);
  return a1;
}

uint64_t destroy for ASN1DecodedItem(_QWORD *a1)
{
  return swift_release(*a1 & 0x1FFFFFFFFFFFFFFFLL);
}

uint64_t *assignWithCopy for ASN1DecodedItem(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2 & 0x1FFFFFFFFFFFFFFFLL;
  v4 = *a1;
  *a1 = *a2;
  v5 = v4 & 0x1FFFFFFFFFFFFFFFLL;
  swift_retain(v3);
  swift_release(v5);
  return a1;
}

_QWORD *initializeWithTake for ASN1DecodedItem(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t *assignWithTake for ASN1DecodedItem(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  swift_release(v3 & 0x1FFFFFFFFFFFFFFFLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for ASN1DecodedItem(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7B && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 123);
  v3 = (((*(_QWORD *)a1 >> 57) >> 4) | (8 * ((*(_QWORD *)a1 >> 57) & 8 | *(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7A)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ASN1DecodedItem(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7A)
  {
    *(_QWORD *)result = a2 - 123;
    if (a3 >= 0x7B)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7B)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 3) & 0xF | (16 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_10013D34C(_QWORD *a1)
{
  return *a1 >> 61;
}

_QWORD *sub_10013D358(_QWORD *result)
{
  *result &= 0x1FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t *sub_10013D368(uint64_t *result, uint64_t a2)
{
  *result = *result & 0xFFFFFFFFFFFFFF8 | (a2 << 61);
  return result;
}

ValueMetadata *type metadata accessor for ASN1DecodedItem()
{
  return &type metadata for ASN1DecodedItem;
}

uint64_t initializeBufferWithCopyOfBuffer for SERequest.ActionPostRequest(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for ASN1SequenceSpec.DecodeMode(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ASN1SequenceSpec.DecodeMode(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_10013D42C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_10013D434(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ASN1SequenceSpec.DecodeMode()
{
  return &type metadata for ASN1SequenceSpec.DecodeMode;
}

uint64_t getEnumTagSinglePayload for SERequest.ActionPostRequest(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SERequest.ActionPostRequest(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t sub_10013D4A0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10013D4BC(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ASN1ItemSpec.TagSpec()
{
  return &type metadata for ASN1ItemSpec.TagSpec;
}

uint64_t destroy for ASN1ItemSpec(uint64_t a1)
{
  sub_1001241AC(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
}

uint64_t initializeWithCopy for ASN1ItemSpec(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_BYTE *)(a2 + 32);
  sub_10013D018(v4, v5, v6);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v6;
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v7;
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t assignWithCopy for ASN1ItemSpec(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 9) = *((_BYTE *)a2 + 9);
  v5 = a2[2];
  v6 = a2[3];
  v7 = *((_BYTE *)a2 + 32);
  sub_10013D018(v5, v6, v7);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v10 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  sub_1001241AC(v8, v9, v10);
  v11 = a2[5];
  v12 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  return a1;
}

__n128 initializeWithTake for ASN1ItemSpec(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ASN1ItemSpec(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  v4 = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v7 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v4;
  sub_1001241AC(v5, v6, v7);
  v8 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ASN1ItemSpec(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ASN1ItemSpec(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ASN1ItemSpec()
{
  return &type metadata for ASN1ItemSpec;
}

__n128 initializeWithCopy for ASN1Error(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ASN1Error(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ASN1Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = -(char)a2;
  }
  return result;
}

uint64_t sub_10013D7E4(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 24) <= 2u)
    return *(unsigned __int8 *)(a1 + 24);
  else
    return (*(_DWORD *)a1 + 3);
}

uint64_t sub_10013D7FC(uint64_t result, unsigned int a2)
{
  uint64_t v2;

  v2 = a2 - 3;
  if (a2 >= 3)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    LOBYTE(a2) = 3;
    *(_QWORD *)result = v2;
  }
  *(_BYTE *)(result + 24) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ASN1Error()
{
  return &type metadata for ASN1Error;
}

uint64_t destroy for ASN1ItemSpec.DecoderType(uint64_t a1)
{
  return sub_1001241AC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s10seserviced12ASN1ItemSpecV11DecoderTypeOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_10013D018(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ASN1ItemSpec.DecoderType(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_10013D018(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_1001241AC(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for ASN1ItemSpec.DecoderType(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_1001241AC(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ASN1ItemSpec.DecoderType(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7D && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 125);
  v3 = ((*(unsigned __int8 *)(a1 + 16) >> 6) & 0xFFFFFF83 | (4 * ((*(unsigned __int8 *)(a1 + 16) >> 1) & 0x1F))) ^ 0x7F;
  if (v3 >= 0x7C)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ASN1ItemSpec.DecoderType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7C)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 125;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7D)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0x7D)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_BYTE *)(result + 16) = 2 * (((-a2 >> 2) & 0x1F) - 32 * a2);
    }
  }
  return result;
}

uint64_t sub_10013D9C4(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 16) >> 6;
  if (v1 == 3)
    return (*(_DWORD *)a1 + 3);
  else
    return v1;
}

uint64_t sub_10013D9E0(uint64_t result)
{
  *(_BYTE *)(result + 16) &= 0x3Fu;
  return result;
}

uint64_t sub_10013D9F0(uint64_t result, unsigned int a2)
{
  if (a2 < 3)
  {
    *(_BYTE *)(result + 16) = *(_BYTE *)(result + 16) & 1 | ((_BYTE)a2 << 6);
  }
  else
  {
    *(_QWORD *)result = a2 - 3;
    *(_QWORD *)(result + 8) = 0;
    *(_BYTE *)(result + 16) = -64;
  }
  return result;
}

ValueMetadata *type metadata accessor for ASN1ItemSpec.DecoderType()
{
  return &type metadata for ASN1ItemSpec.DecoderType;
}

ValueMetadata *type metadata accessor for ASN1SequenceSpec.UnorderedDecodeOptions()
{
  return &type metadata for ASN1SequenceSpec.UnorderedDecodeOptions;
}

ValueMetadata *type metadata accessor for ASN1SequenceSpec.OrderedDecodeOptions()
{
  return &type metadata for ASN1SequenceSpec.OrderedDecodeOptions;
}

__n128 initializeWithCopy for ASN1ItemSpec.Constraint(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for ASN1ItemSpec.Constraint(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ASN1ItemSpec.Constraint(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 41) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ASN1ItemSpec.Constraint()
{
  return &type metadata for ASN1ItemSpec.Constraint;
}

uint64_t initializeBufferWithCopyOfBuffer for ASN1SequenceSpec(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for ASN1SequenceSpec(_QWORD *a1)
{
  return swift_bridgeObjectRelease(*a1);
}

uint64_t *assignWithCopy for ASN1SequenceSpec(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[1];
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  a1[1] = v6;
  return a1;
}

uint64_t *assignWithTake for ASN1SequenceSpec(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  a1[1] = a2[1];
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for ASN1SequenceSpec(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 17))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ASN1SequenceSpec(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ASN1SequenceSpec()
{
  return &type metadata for ASN1SequenceSpec;
}

unint64_t sub_10013DC38()
{
  unint64_t result;

  result = qword_100346FE0;
  if (!qword_100346FE0)
  {
    result = swift_getWitnessTable(&unk_10028A4D0, &type metadata for ASN1SequenceSpec.OrderedDecodeOptions);
    atomic_store(result, (unint64_t *)&qword_100346FE0);
  }
  return result;
}

unint64_t sub_10013DC80()
{
  unint64_t result;

  result = qword_100346FE8;
  if (!qword_100346FE8)
  {
    result = swift_getWitnessTable(&unk_10028A4A0, &type metadata for ASN1SequenceSpec.OrderedDecodeOptions);
    atomic_store(result, (unint64_t *)&qword_100346FE8);
  }
  return result;
}

unint64_t sub_10013DCC8()
{
  unint64_t result;

  result = qword_100346FF0;
  if (!qword_100346FF0)
  {
    result = swift_getWitnessTable(&unk_10028A4F8, &type metadata for ASN1SequenceSpec.OrderedDecodeOptions);
    atomic_store(result, (unint64_t *)&qword_100346FF0);
  }
  return result;
}

unint64_t sub_10013DD10()
{
  unint64_t result;

  result = qword_100346FF8;
  if (!qword_100346FF8)
  {
    result = swift_getWitnessTable(&unk_10028A530, &type metadata for ASN1SequenceSpec.OrderedDecodeOptions);
    atomic_store(result, (unint64_t *)&qword_100346FF8);
  }
  return result;
}

unint64_t sub_10013DD58()
{
  unint64_t result;

  result = qword_100347000;
  if (!qword_100347000)
  {
    result = swift_getWitnessTable(&unk_10028A660, &type metadata for ASN1SequenceSpec.UnorderedDecodeOptions);
    atomic_store(result, (unint64_t *)&qword_100347000);
  }
  return result;
}

unint64_t sub_10013DDA0()
{
  unint64_t result;

  result = qword_100347008;
  if (!qword_100347008)
  {
    result = swift_getWitnessTable(&unk_10028A630, &type metadata for ASN1SequenceSpec.UnorderedDecodeOptions);
    atomic_store(result, (unint64_t *)&qword_100347008);
  }
  return result;
}

unint64_t sub_10013DDE8()
{
  unint64_t result;

  result = qword_100347010;
  if (!qword_100347010)
  {
    result = swift_getWitnessTable(&unk_10028A688, &type metadata for ASN1SequenceSpec.UnorderedDecodeOptions);
    atomic_store(result, (unint64_t *)&qword_100347010);
  }
  return result;
}

unint64_t sub_10013DE30()
{
  unint64_t result;

  result = qword_100347018;
  if (!qword_100347018)
  {
    result = swift_getWitnessTable(&unk_10028A6C0, &type metadata for ASN1SequenceSpec.UnorderedDecodeOptions);
    atomic_store(result, (unint64_t *)&qword_100347018);
  }
  return result;
}

uint64_t sub_10013DEC0()
{
  uint64_t v0;

  qword_100354C90 = type metadata accessor for BlessedUserControllerDefault(0);
  unk_100354C98 = &off_10030A680;
  sub_1000960AC(qword_100354C78);
  v0 = String.init(cString:)(SESLoggingSubsystem);
  return Logger.init(subsystem:category:)(v0);
}

uint64_t type metadata accessor for BlessedUserControllerDefault(uint64_t a1)
{
  uint64_t result;

  result = qword_100347078;
  if (!qword_100347078)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BlessedUserControllerDefault);
  return result;
}

uint64_t sub_10013DF70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Logger(0);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_10013DFAC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Logger(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_10013DFE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_10013E024(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_10013E068(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_10013E0AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_10013E0F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013E0FC);
}

uint64_t sub_10013E0FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Logger(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_10013E138(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013E144);
}

uint64_t sub_10013E144(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Logger(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_10013E184(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *sub_10013E1EC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, unsigned __int8 a13, uint64_t a14, uint64_t a15)
{
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  os_log_type_t v32;
  uint8_t *v33;
  const char *v34;
  uint64_t v35;
  NSObject *v36;
  uint64_t v37;
  os_log_type_t v38;
  uint8_t *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v16 = v15;
  v57 = a15;
  v58 = a6;
  v54 = a7;
  v55 = a13;
  v52 = *v15;
  v53 = a4;
  v22 = sub_100063D3C((uint64_t *)&unk_1003465E0);
  __chkstk_darwin(v22, v23);
  v25 = (v24 + 15) & 0xFFFFFFFFFFFFFFF0;
  v26 = (char *)&v52 - v25;
  v56 = a8;
  if (!a8)
  {
    if ((a5 & 1) != 0)
    {
      if ((a10 & 1) != 0)
        goto LABEL_23;
      v28 = a11;
      v35 = swift_bridgeObjectRelease(a2);
      if (qword_1003447B0 != -1)
        v35 = swift_once(&qword_1003447B0, sub_1001EEF58);
      v36 = Logger.logObject.getter(v35);
      v38 = static os_log_type_t.error.getter(v36, v37);
      if (!os_log_type_enabled(v36, v38))
      {
LABEL_29:

        v43 = v57;
        goto LABEL_30;
      }
      v39 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v39 = 0;
      v40 = "Requesting session checks with no peer";
    }
    else
    {
      v28 = a11;
      v48 = swift_bridgeObjectRelease(a2);
      if (qword_1003447B0 != -1)
        v48 = swift_once(&qword_1003447B0, sub_1001EEF58);
      v36 = Logger.logObject.getter(v48);
      v38 = static os_log_type_t.error.getter(v36, v49);
      if (!os_log_type_enabled(v36, v38))
        goto LABEL_29;
      v39 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v39 = 0;
      v40 = "Requesting SE hold with no peer";
    }
    _os_log_impl((void *)&_mh_execute_header, v36, v38, v40, v39, 2u);
    swift_slowDealloc(v39, -1, -1);
    goto LABEL_29;
  }
  if ((a10 & 1) == 0)
  {
    sub_10013EA8C(a11, (uint64_t)&v52 - v25);
    if ((a9 & 1) != 0)
    {
      v27 = type metadata accessor for UUID(0);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 48))(v26, 1, v27) == 1)
      {
        v28 = a11;
        sub_100096700((uint64_t)v26, (uint64_t *)&unk_1003465E0);
        v29 = swift_bridgeObjectRelease(a2);
        if (qword_1003447B0 != -1)
          v29 = swift_once(&qword_1003447B0, sub_1001EEF58);
        v30 = Logger.logObject.getter(v29);
        v32 = static os_log_type_t.error.getter(v30, v31);
        if (!os_log_type_enabled(v30, v32))
          goto LABEL_22;
        v33 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v33 = 0;
        v34 = "Requesting connection identifier check with no connection identifier";
LABEL_21:
        _os_log_impl((void *)&_mh_execute_header, v30, v32, v34, v33, 2u);
        swift_slowDealloc(v33, -1, -1);
LABEL_22:

        swift_release(v57);
        v43 = v56;
LABEL_30:
        swift_release(v43);
        v50 = v52;
        sub_100096700(v28, (uint64_t *)&unk_1003465E0);
        sub_100096700(v58, (uint64_t *)&unk_100347750);
        swift_deallocPartialClassInstance(v16, v50, *(unsigned int *)(*v16 + 48), *(unsigned __int16 *)(*v16 + 52));
        return 0;
      }
    }
    sub_100096700((uint64_t)v26, (uint64_t *)&unk_1003465E0);
    if ((a9 & 2) != 0 && (v55 & 1) != 0)
    {
      v28 = a11;
      v41 = swift_bridgeObjectRelease(a2);
      if (qword_1003447B0 != -1)
        v41 = swift_once(&qword_1003447B0, sub_1001EEF58);
      v30 = Logger.logObject.getter(v41);
      v32 = static os_log_type_t.error.getter(v30, v42);
      if (!os_log_type_enabled(v30, v32))
        goto LABEL_22;
      v33 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v33 = 0;
      v34 = "Requesting sequence number check with no sequence number";
      goto LABEL_21;
    }
  }
LABEL_23:
  v44 = (uint64_t *)((char *)v15 + OBJC_IVAR____TtC10seserviced9SERequest_reason);
  *v44 = a1;
  v44[1] = a2;
  *((_BYTE *)v15 + OBJC_IVAR____TtC10seserviced9SERequest_isBlockSelecting) = a3 & 1;
  v15[2] = v53;
  *((_BYTE *)v15 + 24) = a5 & 1;
  sub_10006C218(v58, (uint64_t)v15 + OBJC_IVAR____TtC10seserviced9SERequest_handoffToken, (uint64_t *)&unk_100347750);
  *((_BYTE *)v15 + OBJC_IVAR____TtC10seserviced9SERequest_priority) = v54;
  *(uint64_t *)((char *)v15 + OBJC_IVAR____TtC10seserviced9SERequest_peer) = v56;
  v45 = (uint64_t)v15 + OBJC_IVAR____TtC10seserviced9SERequest_sessionChecks;
  *(_QWORD *)v45 = a9;
  *(_BYTE *)(v45 + 8) = a10 & 1;
  sub_10006C218(a11, (uint64_t)v15 + OBJC_IVAR____TtC10seserviced9SERequest_connectionIdentifier, (uint64_t *)&unk_1003465E0);
  v46 = (uint64_t)v15 + OBJC_IVAR____TtC10seserviced9SERequest_sequenceNumber;
  *(_QWORD *)v46 = a12;
  *(_BYTE *)(v46 + 8) = v55 & 1;
  v47 = v57;
  v15[4] = a14;
  v15[5] = v47;
  return v16;
}

unint64_t sub_10013E6DC@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10013EAD4(*a1);
  *a2 = result;
  return result;
}

void sub_10013E704(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

BOOL sub_10013E710(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

BOOL sub_10013E724(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 >= *a1;
}

BOOL sub_10013E738(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 >= *a2;
}

BOOL sub_10013E74C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 < *a1;
}

uint64_t sub_10013E760()
{
  _QWORD *v0;

  swift_release(v0[5]);
  sub_100096700((uint64_t)v0 + OBJC_IVAR____TtC10seserviced9SERequest_connectionIdentifier, (uint64_t *)&unk_1003465E0);
  sub_100096700((uint64_t)v0 + OBJC_IVAR____TtC10seserviced9SERequest_handoffToken, (uint64_t *)&unk_100347750);
  swift_release(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC10seserviced9SERequest_peer));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC10seserviced9SERequest_reason + 8));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_10013E7DC()
{
  return type metadata accessor for SERequest(0);
}

uint64_t type metadata accessor for SERequest(uint64_t a1)
{
  uint64_t result;

  result = qword_1003470D8;
  if (!qword_1003470D8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SERequest);
  return result;
}

void sub_10013E820(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[10];

  v4[0] = "\t";
  v4[1] = (char *)&value witness table for () + 64;
  sub_10012E3EC(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    v4[3] = &unk_10028A870;
    v4[4] = &unk_10028A888;
    v4[5] = &unk_10028A8A0;
    v4[6] = &unk_10028A8B8;
    v4[7] = &unk_10028A8D0;
    v4[8] = "\t";
    v4[9] = "\t";
    swift_updateClassMetadata2(a1, 256, 10, v4, a1 + 80);
  }
}

uint64_t getEnumTagSinglePayload for SERequest.Priority(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SERequest.Priority(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10013E9B4 + 4 * byte_10028A825[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10013E9E8 + 4 * byte_10028A820[v4]))();
}

uint64_t sub_10013E9E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10013E9F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10013E9F8);
  return result;
}

uint64_t sub_10013EA04(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10013EA0CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_10013EA10(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10013EA18(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SERequest.Priority()
{
  return &type metadata for SERequest.Priority;
}

ValueMetadata *type metadata accessor for SERequest.ActionPostRequest()
{
  return &type metadata for SERequest.ActionPostRequest;
}

unint64_t sub_10013EA48()
{
  unint64_t result;

  result = qword_1003471A8;
  if (!qword_1003471A8)
  {
    result = swift_getWitnessTable(&unk_10028A9D4, &type metadata for SERequest.Priority);
    atomic_store(result, (unint64_t *)&qword_1003471A8);
  }
  return result;
}

uint64_t sub_10013EA8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100063D3C((uint64_t *)&unk_1003465E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_10013EAD4(unint64_t result)
{
  if (result >= 5)
    return 5;
  return result;
}

uint64_t sub_10013EAE4()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  Swift::String v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  Swift::String v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  Swift::String v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  Swift::String v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  Swift::String v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  Swift::String v25;
  uint64_t v26;
  int64_t v27;
  _QWORD *v28;
  void **v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  void *object;
  __int128 v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v45;
  __int128 v46;
  void *v47;
  void *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;

  *(_QWORD *)&v46 = 0;
  *((_QWORD *)&v46 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(192);
  v51 = 0;
  v52 = 0xE000000000000000;
  v1._countAndFlagsBits = 0xD000000000000016;
  v1._object = (void *)0x80000001002BD6A0;
  String.append(_:)(v1);
  if (*(_BYTE *)(v0 + 16))
    v2 = 1702195828;
  else
    v2 = 0x65736C6166;
  if (*(_BYTE *)(v0 + 16))
    v3 = 0xE400000000000000;
  else
    v3 = 0xE500000000000000;
  v4 = v3;
  String.append(_:)(*(Swift::String *)&v2);
  swift_bridgeObjectRelease(v3);
  v5._countAndFlagsBits = 0xD000000000000017;
  v5._object = (void *)0x80000001002BD6C0;
  String.append(_:)(v5);
  if (*(_BYTE *)(v0 + 17))
    v6 = 1702195828;
  else
    v6 = 0x65736C6166;
  if (*(_BYTE *)(v0 + 17))
    v7 = 0xE400000000000000;
  else
    v7 = 0xE500000000000000;
  v8 = v7;
  String.append(_:)(*(Swift::String *)&v6);
  swift_bridgeObjectRelease(v7);
  v9._object = (void *)0x80000001002BD6E0;
  v9._countAndFlagsBits = 0xD000000000000029;
  String.append(_:)(v9);
  if (*(_BYTE *)(v0 + 18))
    v10 = 1702195828;
  else
    v10 = 0x65736C6166;
  if (*(_BYTE *)(v0 + 18))
    v11 = 0xE400000000000000;
  else
    v11 = 0xE500000000000000;
  v12 = v11;
  String.append(_:)(*(Swift::String *)&v10);
  swift_bridgeObjectRelease(v11);
  v13._object = (void *)0x80000001002BD710;
  v13._countAndFlagsBits = 0xD000000000000029;
  String.append(_:)(v13);
  if (*(_BYTE *)(v0 + 19))
    v14 = 1702195828;
  else
    v14 = 0x65736C6166;
  if (*(_BYTE *)(v0 + 19))
    v15 = 0xE400000000000000;
  else
    v15 = 0xE500000000000000;
  v16 = v15;
  String.append(_:)(*(Swift::String *)&v14);
  swift_bridgeObjectRelease(v15);
  v17._object = (void *)0x80000001002BD740;
  v17._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v17);
  if (*(_BYTE *)(v0 + 20))
    v18 = 1702195828;
  else
    v18 = 0x65736C6166;
  if (*(_BYTE *)(v0 + 20))
    v19 = 0xE400000000000000;
  else
    v19 = 0xE500000000000000;
  v20 = v19;
  String.append(_:)(*(Swift::String *)&v18);
  swift_bridgeObjectRelease(v19);
  v21._object = (void *)0x80000001002BD760;
  v21._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v21);
  if (*(_BYTE *)(v0 + 21))
    v22 = 1702195828;
  else
    v22 = 0x65736C6166;
  if (*(_BYTE *)(v0 + 21))
    v23 = 0xE400000000000000;
  else
    v23 = 0xE500000000000000;
  v24 = v23;
  String.append(_:)(*(Swift::String *)&v22);
  swift_bridgeObjectRelease(v23);
  v25._countAndFlagsBits = 0x6469646E6163200ALL;
  v25._object = (void *)0xED00002073657461;
  String.append(_:)(v25);
  v26 = *(_QWORD *)(v0 + 24);
  v27 = *(_QWORD *)(v26 + 16);
  v28 = _swiftEmptyArrayStorage;
  if (v27)
  {
    v50 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v26);
    sub_100192940(0, v27, 0);
    v28 = _swiftEmptyArrayStorage;
    v45 = v26;
    v29 = (void **)(v26 + 64);
    do
    {
      v31 = (uint64_t)*(v29 - 4);
      v30 = *(v29 - 3);
      v32 = (uint64_t)*(v29 - 2);
      v33 = (uint64_t)*(v29 - 1);
      v34 = *v29;
      *(_QWORD *)&v46 = 0;
      *((_QWORD *)&v46 + 1) = 0xE000000000000000;
      swift_bridgeObjectRetain(v30);
      swift_bridgeObjectRetain(v34);
      _StringGuts.grow(_:)(32);
      swift_bridgeObjectRelease(*((_QWORD *)&v46 + 1));
      *(_QWORD *)&v46 = 0x4920656C646E7542;
      *((_QWORD *)&v46 + 1) = 0xEA00000000002044;
      swift_bridgeObjectRetain(v30);
      v35._countAndFlagsBits = v31;
      v35._object = v30;
      String.append(_:)(v35);
      swift_bridgeObjectRelease(v30);
      v36._countAndFlagsBits = 0x20656D614E202CLL;
      v36._object = (void *)0xE700000000000000;
      String.append(_:)(v36);
      swift_bridgeObjectRetain(v34);
      v37._countAndFlagsBits = v33;
      v37._object = v34;
      String.append(_:)(v37);
      swift_bridgeObjectRelease(v34);
      v38._countAndFlagsBits = 0x6E69616D6F44202CLL;
      v38._object = (void *)0xE900000000000020;
      String.append(_:)(v38);
      v49 = v32;
      v39._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt, &protocol witness table for UInt);
      object = v39._object;
      String.append(_:)(v39);
      swift_bridgeObjectRelease(v34);
      swift_bridgeObjectRelease(v30);
      swift_bridgeObjectRelease(object);
      v41 = v46;
      v50 = v28;
      v43 = v28[2];
      v42 = v28[3];
      if (v43 >= v42 >> 1)
      {
        sub_100192940(v42 > 1, v43 + 1, 1);
        v28 = v50;
      }
      v29 += 5;
      v47 = &type metadata for String;
      v48 = &protocol witness table for String;
      v46 = v41;
      v28[2] = v43 + 1;
      sub_1000DB160(&v46, (uint64_t)&v28[5 * v43 + 4]);
      --v27;
    }
    while (v27);
    swift_bridgeObjectRelease(v45);
  }
  sub_1001BDAC8((uint64_t)v28);
  swift_bridgeObjectRelease(v28);
  return v51;
}

uint64_t sub_10013EF08()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t sub_10013EF2C()
{
  uint64_t v0;
  uint64_t v1;
  BOOL v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  os_log_type_t v36;
  uint8_t *v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __n128 v57;
  __n128 v58;
  uint64_t v59[2];
  __n128 v60;

  v1 = v0;
  v2 = sub_1001E24CC(1);
  v3 = sub_1001E24CC(0);
  v4 = 3;
  if (v3)
    v4 = 1;
  v5 = 2;
  if (v3)
    v5 = 0;
  if (v2)
    v6 = v5;
  else
    v6 = v4;
  v7 = *(_QWORD *)(v1 + 24);
  *(_BYTE *)(v7 + 20) = (v6 & 1) == 0;
  *(_BYTE *)(v7 + 21) = 0;
  if (qword_1003445B0 != -1)
    swift_once(&qword_1003445B0, sub_1000E87A8);
  v8 = sub_1000E8840();
  if ((v8 & 1) == 0)
  {
    sub_1001EBCCC(&v52);
    v17 = sub_10006C218((uint64_t)&v52, (uint64_t)&v54, &qword_1003463E8);
    v18 = v55;
    if (!v55)
    {
LABEL_25:
      v31 = v6 | 0xC;
      v32 = Logger.logObject.getter(v17);
      v36 = static os_log_type_t.info.getter(v32, v33, v34, v35);
      if (os_log_type_enabled(v32, v36))
      {
        v37 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v37 = 134217984;
        v51 = (void *)v31;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v37 + 4, v37 + 12);
        _os_log_impl((void *)&_mh_execute_header, v32, v36, "Reconciling with ineligibility %ld", v37, 0xCu);
        swift_slowDealloc(v37, -1, -1);
      }

      v38 = sub_10013F474(0, v31);
      v40 = v39;
      v41 = sub_10013F474(1, v31);
      v42 = *(_QWORD *)(v1 + 24);
      *(_BYTE *)(v42 + 16) = HIBYTE(v38) & 1;
      *(_BYTE *)(v42 + 17) = HIBYTE(v41) & 1;
      v43 = *(_QWORD *)(v1 + 24);
      *(_BYTE *)(v43 + 18) = v38 & 1;
      *(_BYTE *)(v43 + 19) = v41 & 1;
      v51 = &_swiftEmptySetSingleton;
      sub_1000BA298(v44);
      sub_1000BA298(v40);
      v45 = *(_QWORD *)(v1 + 24);
      v46 = (uint64_t)v51;
      swift_retain(v45);
      v47 = sub_1002042D0(v46);
      swift_bridgeObjectRelease(v46);
      v48 = *(_QWORD *)(v45 + 24);
      *(_QWORD *)(v45 + 24) = v47;
      swift_release(v45);
      swift_bridgeObjectRelease(v48);
      goto LABEL_30;
    }
    v19 = v54;
    v58 = v57;
    if (v56 == 2)
    {
      v20 = 0;
    }
    else
    {
      if (v56 != 1)
      {
        v59[0] = v54;
        v59[1] = v55;
        sub_10006F8A4((uint64_t)v59);
LABEL_24:
        v60 = v58;
        v17 = sub_10006F8A4((uint64_t)&v60);
        goto LABEL_25;
      }
      v20 = 1;
    }
    v21 = TCCContext.checkTCCAccess(to:for:)(v20, v54, v55, v57);
    v22 = TCCContext.TCCAccess.rawValue.getter(v21);
    if (v22 == TCCContext.TCCAccess.rawValue.getter(2))
    {
      v60 = v58;
      swift_bridgeObjectRetain(v18);
      v23 = sub_10006F87C((uint64_t)&v60);
      v24 = Logger.logObject.getter(v23);
      v28 = static os_log_type_t.info.getter(v24, v25, v26, v27);
      if (os_log_type_enabled(v24, v28))
      {
        v29 = (uint8_t *)swift_slowAlloc(12, -1);
        v30 = swift_slowAlloc(32, -1);
        v59[0] = v30;
        *(_DWORD *)v29 = 136315138;
        swift_bridgeObjectRetain(v18);
        v51 = (void *)sub_1001C56EC(v19, v18, v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v29 + 4, v29 + 12);
        swift_bridgeObjectRelease_n(v18, 2);
        sub_10006F8A4((uint64_t)&v60);
        swift_bridgeObjectRelease(v18);
        sub_10006F8A4((uint64_t)&v60);
        _os_log_impl((void *)&_mh_execute_header, v24, v28, "External default app %s found on restore", v29, 0xCu);
        swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v30, -1, -1);
        swift_slowDealloc(v29, -1, -1);

      }
      else
      {
        swift_bridgeObjectRelease(v18);

        sub_10006F8A4((uint64_t)&v60);
        swift_bridgeObjectRelease(v18);
        sub_10006F8A4((uint64_t)&v60);
      }
      sub_10013FD3C();
LABEL_30:
      v16 = *(_QWORD *)(v1 + 24);
      goto LABEL_31;
    }
    swift_bridgeObjectRelease(v18);
    goto LABEL_24;
  }
  v9 = Logger.logObject.getter(v8);
  v13 = static os_log_type_t.info.getter(v9, v10, v11, v12);
  if (os_log_type_enabled(v9, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = swift_slowAlloc(32, -1);
    v54 = v15;
    *(_DWORD *)v14 = 136315138;
    v52 = sub_1001C56EC(0x6C69636E6F636572, 0xEB00000000292865, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v14 + 4, v14 + 12);
    _os_log_impl((void *)&_mh_execute_header, v9, v13, "%s: Pending migration -- should not show default contactless pane", v14, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }

  v16 = *(_QWORD *)(v1 + 24);
  *(_WORD *)(v16 + 18) = 0;
LABEL_31:
  v49 = swift_retain(v16);
  sub_1001ED468(v49);
  return swift_release(v16);
}

uint64_t sub_10013F474(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  int v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  id v25;
  unsigned __int16 v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  id v38;
  char *v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t result;
  void *v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  os_log_type_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t inited;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned __int16 v76;
  uint64_t v77;
  uint64_t v78;
  char v79[120];
  void *v80;
  uint64_t v81[5];
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  char v87;
  __int128 v88;
  char v89;
  uint64_t v90[6];

  v5 = sub_10014067C(*(_QWORD *)(v2 + 16), a1);
  v6 = TCCContext.TCCService.rawValue.getter(a1);
  v7 = TCCContext.TCCService.rawValue.getter(0);
  v8 = 4;
  if (v6 == v7)
    v8 = 1;
  if ((v8 & a2) == 0)
  {
    v13 = v5 & 1;
    v14 = Logger.logObject.getter(v7);
    v18 = static os_log_type_t.info.getter(v14, v15, v16, v17);
    if (os_log_type_enabled(v14, v18))
    {
      v19 = swift_slowAlloc(22, -1);
      v76 = v5;
      v20 = swift_slowAlloc(64, -1);
      v90[0] = v20;
      *(_DWORD *)v19 = 136315394;
      v82 = sub_1001C56EC(0xD00000000000001DLL, 0x80000001002BD7C0, v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v19 + 4, v19 + 12);
      *(_WORD *)(v19 + 12) = 2080;
      v21 = TCCContext.TCCService.tccString.getter(a1);
      v23 = v22;
      v82 = sub_1001C56EC(v21, v22, v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v19 + 14, v19 + 22);
      swift_bridgeObjectRelease(v23);
      _os_log_impl((void *)&_mh_execute_header, v14, v18, "%s Set Default is eligible for service %s, doing regular reconciliation for this service", (uint8_t *)v19, 0x16u);
      swift_arrayDestroy(v20, 2, (char *)&type metadata for Any + 8);
      v24 = v20;
      v5 = v76;
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v19, -1, -1);
    }

    sub_100140E9C(a1);
    return v13 | ((v5 > 0xFFu) << 8);
  }
  v9 = TCCContext.TCCService.rawValue.getter(a1);
  v10 = TCCContext.TCCService.rawValue.getter(0);
  v11 = 8;
  if (v9 == v10)
    v11 = 2;
  v75 = v11 & a2;
  v80 = &_swiftEmptySetSingleton;
  v12 = objc_allocWithZone((Class)LSApplicationRecord);
  v25 = sub_1001415A4(0xD000000000000012, 0x80000001002BD780, 0);
  v26 = v5;
  v27 = objc_msgSend(v25, "localizedName");
  v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
  v30 = v29;

  v5 = v26;
  v90[0] = 0xD000000000000012;
  v90[1] = 0x80000001002BD780;
  v90[2] = 3;
  v90[3] = v28;
  v90[4] = v30;
  sub_1000C929C((uint64_t)&v82, (uint64_t)v90);
  swift_bridgeObjectRelease(v83);
  v31 = swift_bridgeObjectRelease(*((_QWORD *)&v85 + 1));
  if (v75)
    goto LABEL_29;
  sub_1001EBCCC(v81);
  v31 = sub_10006C218((uint64_t)v81, (uint64_t)&v82, &qword_1003463E8);
  v32 = v83;
  if (!v83)
    goto LABEL_29;
  v33 = v82;
  v34 = v84;
  v86 = v85;
  if (v82 == 0xD000000000000012 && v83 == 0x80000001002BD780)
  {
    if (v84 != 1)
    {
      if (v84 != 2)
      {
        if (v84 == 3)
          goto LABEL_26;
LABEL_27:
        v39 = &v87;
        goto LABEL_28;
      }
      goto LABEL_23;
    }
LABEL_22:
    v73 = a2;
    v74 = v34;
    v35 = 1;
    goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(v82, v83, 0xD000000000000012, 0x80000001002BD780, 0) & 1) != 0
    && v34 == 3)
  {
    goto LABEL_26;
  }
  if (v34 != 2)
  {
    if (v34 != 1)
      goto LABEL_27;
    goto LABEL_22;
  }
LABEL_23:
  v73 = a2;
  v74 = v34;
  v35 = 0;
LABEL_24:
  v36 = TCCContext.TCCService.rawValue.getter(v35);
  if (v36 != TCCContext.TCCService.rawValue.getter(a1))
  {
LABEL_26:
    v39 = &v89;
LABEL_28:
    swift_bridgeObjectRelease(v32);
    *(_OWORD *)v39 = v86;
    v31 = sub_10006F8A4((uint64_t)v39);
    v5 = v26;
LABEL_29:
    v40 = Logger.logObject.getter(v31);
    v44 = static os_log_type_t.info.getter(v40, v41, v42, v43);
    if (os_log_type_enabled(v40, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v45 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, v44, "One of the out of region eligibility conditions not satisfied, should not show default app pane", v45, 2u);
      swift_slowDealloc(v45, -1, -1);
    }

    v13 = 0;
    return v13 | ((v5 > 0xFFu) << 8);
  }
  v72 = v33;
  v37 = objc_allocWithZone((Class)LSApplicationRecord);
  v38 = sub_1001415A4(0xD000000000000012, 0x80000001002BD780, 0);
  v47 = v38;
  v48 = objc_msgSend(v38, "localizedName");
  v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
  v71 = v49;

  v50 = v35;
  v52 = TCCContext.checkTCCAccess(to:for:)(v35, v72, v32, v51);
  v88 = v86;
  swift_bridgeObjectRetain(v32);
  sub_10006F87C((uint64_t)&v88);
  swift_bridgeObjectRetain(v32);
  v53 = sub_10006F87C((uint64_t)&v88);
  v54 = Logger.logObject.getter(v53);
  v58 = static os_log_type_t.info.getter(v54, v55, v56, v57);
  if (os_log_type_enabled(v54, v58))
  {
    v59 = swift_slowAlloc(52, -1);
    v60 = swift_slowAlloc(128, -1);
    v78 = v60;
    *(_DWORD *)v59 = 136316162;
    v77 = sub_1001C56EC(0xD00000000000001DLL, 0x80000001002BD7C0, &v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78, v59 + 4, v59 + 12);
    *(_WORD *)(v59 + 12) = 2048;
    v77 = v73;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78, v59 + 14, v59 + 22);
    *(_WORD *)(v59 + 22) = 2080;
    swift_bridgeObjectRetain(v32);
    v77 = sub_1001C56EC(v72, v32, &v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78, v59 + 24, v59 + 32);
    swift_bridgeObjectRelease_n(v32, 2);
    sub_10006F8A4((uint64_t)&v88);
    swift_bridgeObjectRelease(v32);
    sub_10006F8A4((uint64_t)&v88);
    *(_WORD *)(v59 + 32) = 2080;
    v61 = TCCContext.TCCAccess.description.getter(v52);
    v63 = v62;
    v77 = sub_1001C56EC(v61, v62, &v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78, v59 + 34, v59 + 42);
    swift_bridgeObjectRelease(v63);
    *(_WORD *)(v59 + 42) = 2080;
    v64 = TCCContext.TCCService.tccString.getter(v50);
    v66 = v65;
    v77 = sub_1001C56EC(v64, v65, &v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78, v59 + 44, v59 + 52);
    swift_bridgeObjectRelease(v66);
    _os_log_impl((void *)&_mh_execute_header, v54, v58, "%s Ineligibility %ld Default app %s TCC access %s to service %s", (uint8_t *)v59, 0x34u);
    swift_arrayDestroy(v60, 4, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v60, -1, -1);
    swift_slowDealloc(v59, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease(v32);

    sub_10006F8A4((uint64_t)&v88);
    swift_bridgeObjectRelease(v32);
    sub_10006F8A4((uint64_t)&v88);
  }
  if ((unint64_t)(v52 - 1) < 2)
  {
    v67 = v80;
    swift_bridgeObjectRelease(v32);
    swift_bridgeObjectRelease(v71);
    swift_bridgeObjectRelease(v67);
    sub_10006F8A4((uint64_t)&v88);
    v13 = 0;
    v5 = v26;
    return v13 | ((v5 > 0xFFu) << 8);
  }
  if (!v52)
  {
    swift_bridgeObjectRelease(v80);
    v68 = sub_100063D3C((uint64_t *)&unk_100347440);
    inited = swift_initStackObject(v68, v79);
    *(_QWORD *)(inited + 32) = 0xD000000000000012;
    *(_OWORD *)(inited + 16) = xmmword_1002888F0;
    *(_QWORD *)(inited + 40) = 0x80000001002BD780;
    *(_QWORD *)(inited + 48) = 3;
    *(_QWORD *)(inited + 56) = v70;
    *(_QWORD *)(inited + 64) = v71;
    *(_QWORD *)(inited + 72) = v72;
    *(_QWORD *)(inited + 80) = v32;
    *(_QWORD *)(inited + 88) = v74;
    *(_OWORD *)(inited + 96) = v86;
    sub_100146380(inited);
    swift_setDeallocating(inited);
    swift_arrayDestroy(inited + 32, 2, &type metadata for DefaultAppInfo);
    v13 = 1;
    v5 = v26;
    return v13 | ((v5 > 0xFFu) << 8);
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "seserviced/SECSettingsPaneReconciliation.swift", 46, 2, 157, 0);
  __break(1u);
  return result;
}

uint64_t sub_10013FD3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  os_log_type_t v20;
  uint8_t *v21;
  _QWORD *v22;
  const char *v23;
  uint64_t v24;
  _QWORD *v25;
  __int128 v26;
  id v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  id v36;
  char v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  _QWORD *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  os_log_type_t v69;
  NSObject *v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74[4];
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77[5];
  __int128 v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  _OWORD v83[2];

  v1 = v0;
  sub_1001EBCCC(v77);
  v2 = sub_10006C218((uint64_t)v77, (uint64_t)&v78, &qword_1003463E8);
  if (*((_QWORD *)&v78 + 1))
  {
    v3 = v79;
    v81 = v80;
    v82 = v78;
    switch(v79)
    {
      case 3:
        v16 = Logger.logObject.getter(v2);
        v20 = static os_log_type_t.info.getter(v16, v17, v18, v19);
        if (os_log_type_enabled(v16, v20))
        {
          v21 = (uint8_t *)swift_slowAlloc(12, -1);
          v22 = (_QWORD *)swift_slowAlloc(32, -1);
          v76 = v22;
          *(_DWORD *)v21 = 136315138;
          v74[0] = sub_1001C56EC(0xD000000000000016, 0x80000001002BD7A0, (uint64_t *)&v76);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v74, &v74[1], v21 + 4, v21 + 12);
          v23 = "%s: Default app is passbook -- should show no panes";
LABEL_15:
          _os_log_impl((void *)&_mh_execute_header, v16, v20, v23, v21, 0xCu);
          swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v22, -1, -1);
          swift_slowDealloc(v21, -1, -1);
        }
        break;
      case 2:
        v5 = 0;
        v4 = 1;
LABEL_12:
        v24 = sub_100063D3C((uint64_t *)&unk_100347440);
        v25 = (_QWORD *)swift_allocObject(v24, 72, 7);
        v26 = v78;
        *((_OWORD *)v25 + 1) = xmmword_1002888E0;
        *((_OWORD *)v25 + 2) = v26;
        v25[6] = v3;
        *(_OWORD *)(v25 + 7) = v80;
        *(_QWORD *)&v83[0] = v25;
        v27 = objc_allocWithZone((Class)LSApplicationRecord);
        swift_bridgeObjectRetain(v25);
        v36 = sub_1001415A4(0xD000000000000012, 0x80000001002BD780, 0);
        v37 = v4;
        v38 = objc_msgSend(v36, "localizedName");
        v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
        v40 = v39;

        v41 = v25[2];
        if (v41)
        {
          v42 = v25 + 6;
          while (1)
          {
            if ((v43 = *(v42 - 2), v44 = *(v42 - 1), v45 = *v42, v43 == 0xD000000000000012)
              && v44 == 0x80000001002BD780
              || (_stringCompareWithSmolCheck(_:_:expecting:)(v43, v44, 0xD000000000000012, 0x80000001002BD780, 0) & 1) != 0)
            {
              if (v45 == 3)
                break;
            }
            v42 += 5;
            if (!--v41)
              goto LABEL_27;
          }
          swift_bridgeObjectRelease(v40);
          swift_bridgeObjectRelease(v25);
          v35 = v37;
        }
        else
        {
LABEL_27:
          swift_bridgeObjectRelease(v25);
          if ((swift_isUniquelyReferenced_nonNull_native(v25) & 1) == 0)
            v25 = sub_1001C4D3C(0, v25[2] + 1, 1, v25);
          v35 = v37;
          v47 = v25[2];
          v46 = v25[3];
          if (v47 >= v46 >> 1)
            v25 = sub_1001C4D3C((_QWORD *)(v46 > 1), v47 + 1, 1, v25);
          v25[2] = v47 + 1;
          v48 = &v25[5 * v47];
          v48[4] = 0xD000000000000012;
          v48[5] = 0x80000001002BD780;
          v48[6] = 3;
          v48[7] = v71;
          v48[8] = v40;
          *(_QWORD *)&v83[0] = v25;
        }
        v49 = swift_bridgeObjectRetain_n(v25, 2);
        v50 = Logger.logObject.getter(v49);
        v51 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v50, v51))
        {
          v72 = v1;
          v52 = swift_slowAlloc(22, -1);
          v53 = swift_slowAlloc(64, -1);
          v74[0] = v53;
          *(_DWORD *)v52 = 136315394;
          v76 = (_QWORD *)sub_1001C56EC(0xD000000000000016, 0x80000001002BD7A0, v74);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, v77, v52 + 4, v52 + 12);
          *(_WORD *)(v52 + 12) = 2080;
          v54 = v25[2];
          v55 = _swiftEmptyArrayStorage;
          if (v54)
          {
            v68 = v53;
            v69 = v51;
            v70 = v50;
            v73 = v5;
            v76 = _swiftEmptyArrayStorage;
            swift_bridgeObjectRetain(v25);
            sub_100192924(0, v54, 0);
            v55 = v76;
            v56 = v25 + 5;
            do
            {
              v57 = *(v56 - 1);
              v58 = *v56;
              v76 = v55;
              v60 = v55[2];
              v59 = v55[3];
              swift_bridgeObjectRetain(v58);
              if (v60 >= v59 >> 1)
              {
                sub_100192924(v59 > 1, v60 + 1, 1);
                v55 = v76;
              }
              v56 += 5;
              v55[2] = v60 + 1;
              v61 = &v55[2 * v60];
              v61[4] = v57;
              v61[5] = v58;
              --v54;
            }
            while (v54);
            swift_bridgeObjectRelease(v25);
            v5 = v73;
            v50 = v70;
            v51 = v69;
            v53 = v68;
          }
          v62 = Array.description.getter(v55, &type metadata for String);
          v64 = v63;
          swift_bridgeObjectRelease(v55);
          v76 = (_QWORD *)sub_1001C56EC(v62, v64, v74);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, v77, v52 + 14, v52 + 22);
          swift_bridgeObjectRelease_n(v25, 2);
          swift_bridgeObjectRelease(v64);
          _os_log_impl((void *)&_mh_execute_header, v50, v51, "%s: Overwriting %s to default app candidate list due to default app found upon restore", (uint8_t *)v52, 0x16u);
          swift_arrayDestroy(v53, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v53, -1, -1);
          swift_slowDealloc(v52, -1, -1);

          v1 = v72;
        }
        else
        {
          swift_bridgeObjectRelease_n(v25, 2);

        }
        v65 = *(_QWORD *)(v1 + 24);
        swift_beginAccess(v83, v74, 0, 0);
        v66 = *(_QWORD *)(v65 + 24);
        *(_QWORD *)(v65 + 24) = *(_QWORD *)&v83[0];
        result = swift_bridgeObjectRelease(v66);
        goto LABEL_43;
      case 1:
        v4 = 0;
        v5 = 1;
        goto LABEL_12;
      default:
        v16 = Logger.logObject.getter(v2);
        v20 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v16, v20))
        {
          v21 = (uint8_t *)swift_slowAlloc(12, -1);
          v22 = (_QWORD *)swift_slowAlloc(32, -1);
          v76 = v22;
          *(_DWORD *)v21 = 136315138;
          v74[0] = sub_1001C56EC(0xD000000000000016, 0x80000001002BD7A0, (uint64_t *)&v76);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v74, &v74[1], v21 + 4, v21 + 12);
          v23 = "%s: Missing domain when reconciling panes -- showing no panes";
          goto LABEL_15;
        }
        break;
    }
    v83[0] = v82;
    sub_10006F8A4((uint64_t)v83);
    *(_OWORD *)v74 = v81;
    sub_10006F8A4((uint64_t)v74);

    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(12, -1);
      v32 = (_QWORD *)swift_slowAlloc(32, -1);
      v76 = v32;
      *(_DWORD *)v31 = 136315138;
      v75 = sub_1001C56EC(0xD000000000000016, 0x80000001002BD7A0, (uint64_t *)&v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v31 + 4, v31 + 12);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "%s: Overwriting empty list to default app candidate list due to no default app found upon restore", v31, 0xCu);
      swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1, -1);
      swift_slowDealloc(v31, -1, -1);
    }

    v33 = *(_QWORD *)(v1 + 24);
    v34 = *(_QWORD *)(v33 + 24);
    *(_QWORD *)(v33 + 24) = _swiftEmptyArrayStorage;
    result = swift_bridgeObjectRelease(v34);
    v35 = 0;
    v5 = 0;
LABEL_43:
    v67 = *(_BYTE **)(v1 + 24);
    v67[18] = v35;
    v67[19] = v5;
    v67[16] = v35;
    v67[17] = v5;
    return result;
  }
  v6 = Logger.logObject.getter(v2);
  v10 = static os_log_type_t.info.getter(v6, v7, v8, v9);
  if (os_log_type_enabled(v6, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    v74[0] = v12;
    *(_DWORD *)v11 = 136315138;
    *(_QWORD *)&v83[0] = sub_1001C56EC(0xD000000000000016, 0x80000001002BD7A0, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v83, (char *)v83 + 8, v11 + 4, v11 + 12);
    _os_log_impl((void *)&_mh_execute_header, v6, v10, "%s: Unexpected no default app found on restore, nuke UD", v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }

  v13 = *(_QWORD *)(v1 + 24);
  *(_WORD *)(v13 + 20) = 0;
  *(_DWORD *)(v13 + 16) = 0;
  v14 = *(_QWORD *)(v13 + 24);
  *(_QWORD *)(v13 + 24) = _swiftEmptyArrayStorage;
  return swift_bridgeObjectRelease(v14);
}

uint64_t sub_10014067C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  id v18;
  NSString v19;
  id v20;
  id v21;
  id v22;
  unsigned __int8 v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  os_log_type_t v30;
  uint64_t v31;
  char v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  NSString v36;
  unint64_t v37;
  id v38;
  id v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  NSString v44;
  unint64_t v45;
  uint64_t ObjCClassFromMetadata;
  id v47;
  id v48;
  unsigned __int8 v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  NSString v53;
  id v54;
  id v55;
  int v56;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  char v62;
  id v64;
  _QWORD v65[3];
  char v66[16];
  __int128 v67;
  __int128 v68;
  id v69[3];
  uint64_t v70;

  v2 = TCCContext.getTCCKnownBundleIds(for:filter:)(a2, 0, 0);
  v3 = v2;
  v4 = *(_QWORD *)(v2 + 16);
  if (!v4)
  {
LABEL_61:
    swift_bridgeObjectRelease(v3);
    LOBYTE(v6) = 0;
    v56 = 0;
    return v56 | v6 & 1;
  }
  v5 = 0;
  v62 = 0;
  v6 = 0;
  v7 = (unint64_t *)(v2 + 40);
  v61 = v4 - 1;
  v59 = v2;
  while (1)
  {
    v15 = *(v7 - 1);
    v14 = *v7;
    v16 = swift_bridgeObjectRetain(*v7);
    v17 = TCCContext.checkTCCAccess(to:for:)(a2, v15, v14, v16);
    v18 = objc_allocWithZone((Class)LSApplicationRecord);
    swift_bridgeObjectRetain(v14);
    v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v14);
    v69[0] = 0;
    v20 = objc_msgSend(v18, "initWithBundleIdentifier:allowPlaceholder:error:", v19, 0, v69);

    v21 = v69[0];
    if (!v20)
    {
      v60 = v6;
      v24 = v69[0];
      v25 = _convertNSErrorToError(_:)(v21);

      swift_willThrow(v26);
      swift_errorRetain(v25);
      swift_bridgeObjectRetain(v14);
      v27 = swift_errorRetain(v25);
      v28 = Logger.logObject.getter(v27);
      v30 = static os_log_type_t.error.getter(v28, v29);
      if (os_log_type_enabled(v28, v30))
      {
        v8 = swift_slowAlloc(22, -1);
        v9 = (void *)swift_slowAlloc(64, -1);
        v69[0] = v9;
        *(_DWORD *)v8 = 136315394;
        swift_getErrorValue(v25, v66, v65);
        v10 = Error.localizedDescription.getter(v65[1], v65[2]);
        v12 = v11;
        *(_QWORD *)(v8 + 4) = sub_1001C56EC(v10, v11, (uint64_t *)v69);
        swift_bridgeObjectRelease(v12);
        swift_errorRelease(v25);
        swift_errorRelease(v25);
        *(_WORD *)(v8 + 12) = 2080;
        swift_bridgeObjectRetain(v14);
        *(_QWORD *)(v8 + 14) = sub_1001C56EC(v15, v14, (uint64_t *)v69);
        swift_bridgeObjectRelease_n(v14, 3);
        _os_log_impl((void *)&_mh_execute_header, v28, v30, "computeShouldShowPanes: Error %s when initializing LSApplicationRecord for %s", (uint8_t *)v8, 0x16u);
        swift_arrayDestroy(v9, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v9, -1, -1);
        v13 = v8;
        v3 = v59;
        swift_slowDealloc(v13, -1, -1);
        swift_errorRelease(v25);

      }
      else
      {
        swift_errorRelease(v25);

        swift_errorRelease(v25);
        swift_errorRelease(v25);
        swift_bridgeObjectRelease_n(v14, 2);
      }
      v6 = v60;
      if (v61 == v5)
      {
        swift_bridgeObjectRelease(v3);
        if ((v62 & 1) == 0)
        {
          v56 = 0;
          return v56 | v6 & 1;
        }
        goto LABEL_67;
      }
      goto LABEL_5;
    }
    v22 = v69[0];
    swift_bridgeObjectRelease(v14);
    if ((v62 & 1) == 0)
      break;
    if ((v6 & 1) != 0)
    {
      swift_bridgeObjectRelease(v3);

      goto LABEL_65;
    }
    v23 = 1;
LABEL_32:
    v40 = TCCContext.TCCAccess.rawValue.getter(v17);
    if (v40 != TCCContext.TCCAccess.rawValue.getter(0))
    {

      if ((v23 & 1) != 0)
        goto LABEL_55;
      goto LABEL_57;
    }
    v41 = objc_msgSend(v20, "entitlements");
    TCCContext.TCCService.defaultAppEntitlement.getter(a2);
    v43 = v42;
    v44 = String._bridgeToObjectiveC()();
    v45 = sub_10014167C();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v45);
    v47 = objc_msgSend(v41, "objectForKey:ofClass:", v44, ObjCClassFromMetadata);

    if (v47)
    {
      _bridgeAnyObjectToAny(_:)(&v67);
      swift_unknownObjectRelease(v47);
    }
    else
    {
      v67 = 0u;
      v68 = 0u;
    }
    sub_10006C218((uint64_t)&v67, (uint64_t)v69, (uint64_t *)&unk_100346130);
    if (!v70)
    {
      sub_100098C7C((uint64_t)v69);
LABEL_44:

      swift_bridgeObjectRelease(v43);
      v3 = v59;
      if ((v23 & 1) != 0)
        goto LABEL_55;
      goto LABEL_57;
    }
    if ((swift_dynamicCast(&v64, v69, (char *)&type metadata for Any + 8, v45, 6) & 1) == 0)
      goto LABEL_44;
    v48 = v64;
    v49 = objc_msgSend(v64, "BOOLValue");

    swift_bridgeObjectRelease(v43);
    if ((v49 & 1) == 0)
      goto LABEL_54;
    v50 = objc_msgSend(v20, "entitlements");
    TCCContext.TCCService.serviceEntitlement.getter(a2);
    v52 = v51;
    v53 = String._bridgeToObjectiveC()();
    v54 = objc_msgSend(v50, "objectForKey:ofClass:", v53, ObjCClassFromMetadata);

    if (v54)
    {
      _bridgeAnyObjectToAny(_:)(&v67);
      swift_unknownObjectRelease(v54);
    }
    else
    {
      v67 = 0u;
      v68 = 0u;
    }
    sub_10006C218((uint64_t)&v67, (uint64_t)v69, (uint64_t *)&unk_100346130);
    if (!v70)
    {
      sub_100098C7C((uint64_t)v69);
LABEL_53:

      swift_bridgeObjectRelease(v52);
LABEL_54:

      v3 = v59;
      if ((v23 & 1) != 0)
        goto LABEL_55;
LABEL_57:
      if (v61 == v5)
        goto LABEL_61;
      v6 = 0;
      v62 = 0;
      goto LABEL_5;
    }
    if ((swift_dynamicCast(&v64, v69, (char *)&type metadata for Any + 8, v45, 6) & 1) == 0)
      goto LABEL_53;
    v55 = v64;
    v6 = objc_msgSend(v64, "BOOLValue");

    swift_bridgeObjectRelease(v52);
    v3 = v59;
    if ((v23 & 1) != 0)
    {
      if ((v6 & 1) != 0)
        goto LABEL_74;
LABEL_55:
      if (v61 == v5)
      {
        swift_bridgeObjectRelease(v3);
        LOBYTE(v6) = 0;
        goto LABEL_67;
      }
      v6 = 0;
      v62 = 1;
      goto LABEL_5;
    }
    if (v61 == v5)
    {
      swift_bridgeObjectRelease(v59);
      v56 = 0;
      return v56 | v6 & 1;
    }
    v62 = 0;
LABEL_5:
    ++v5;
    v7 += 2;
    if (v5 >= *(_QWORD *)(v3 + 16))
    {
      __break(1u);
LABEL_74:
      swift_bridgeObjectRelease(v3);
      goto LABEL_65;
    }
  }
  v31 = TCCContext.TCCAccess.rawValue.getter(v17);
  if (v31 == TCCContext.TCCAccess.rawValue.getter(2))
  {
    if ((v6 & 1) != 0)
    {

      if (v61 == v5)
        goto LABEL_69;
LABEL_25:
      v62 = 0;
      v6 = 1;
      goto LABEL_5;
    }
    v23 = 0;
    goto LABEL_32;
  }
  v32 = v6;
  v33 = objc_msgSend(v20, "entitlements");
  TCCContext.TCCService.serviceEntitlement.getter(a2);
  v35 = v34;
  v36 = String._bridgeToObjectiveC()();
  v37 = sub_10014167C();
  v38 = objc_msgSend(v33, "objectForKey:ofClass:", v36, swift_getObjCClassFromMetadata(v37));

  if (v38)
  {
    _bridgeAnyObjectToAny(_:)(&v67);
    swift_unknownObjectRelease(v38);
  }
  else
  {
    v67 = 0u;
    v68 = 0u;
  }
  sub_10006C218((uint64_t)&v67, (uint64_t)v69, (uint64_t *)&unk_100346130);
  if (v70)
  {
    if ((swift_dynamicCast(&v64, v69, (char *)&type metadata for Any + 8, v37, 6) & 1) != 0)
    {
      v39 = v64;
      v23 = objc_msgSend(v64, "BOOLValue");

      swift_bridgeObjectRelease(v35);
      if ((v32 & 1) != 0)
      {

        if ((v23 & 1) == 0)
        {
          v3 = v59;
          if (v61 == v5)
          {
LABEL_69:
            v58 = v3;
            goto LABEL_71;
          }
          goto LABEL_25;
        }
        swift_bridgeObjectRelease(v59);
LABEL_65:
        LOBYTE(v6) = 1;
LABEL_67:
        v56 = 256;
        return v56 | v6 & 1;
      }
LABEL_31:
      v3 = v59;
      goto LABEL_32;
    }
  }
  else
  {
    sub_100098C7C((uint64_t)v69);
  }

  swift_bridgeObjectRelease(v35);
  if ((v32 & 1) == 0)
  {
    v23 = 0;
    goto LABEL_31;
  }

  if (v61 != v5)
  {
    v62 = 0;
    v6 = 1;
    v3 = v59;
    goto LABEL_5;
  }
  v58 = v59;
LABEL_71:
  swift_bridgeObjectRelease(v58);
  v56 = 0;
  LOBYTE(v6) = 1;
  return v56 | v6 & 1;
}

void *sub_100140E9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  id v7;
  NSString v8;
  id v9;
  id v10;
  id v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  NSString v18;
  unint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  os_log_type_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  id v34;
  unsigned __int8 v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  id v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  _QWORD v54[3];
  _BYTE v55[16];
  void *v56;
  _QWORD v57[5];
  _OWORD v58[2];
  uint64_t v59;
  id v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v1 = a1;
  v56 = &_swiftEmptySetSingleton;
  v2 = TCCContext.getTCCKnownBundleIds(for:filter:)(a1, sub_100141428, 0);
  v3 = *(_QWORD *)(v2 + 16);
  if (!v3)
  {
    swift_bridgeObjectRelease(v2);
    goto LABEL_25;
  }
  v50 = v2;
  v4 = (unint64_t *)(v2 + 40);
  v52 = v1;
  do
  {
    v5 = *(v4 - 1);
    v6 = *v4;
    v7 = objc_allocWithZone((Class)LSApplicationRecord);
    swift_bridgeObjectRetain_n(v6, 2);
    v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v6);
    v60 = 0;
    v9 = objc_msgSend(v7, "initWithBundleIdentifier:allowPlaceholder:error:", v8, 0, &v60);

    v10 = v60;
    if (v9)
    {
      v11 = v60;
      v13 = TCCContext.checkTCCAccess(to:for:)(v1, v5, v6, v12);
      v14 = TCCContext.TCCAccess.rawValue.getter(v13);
      if (v14 != TCCContext.TCCAccess.rawValue.getter(0))
        goto LABEL_3;
      v15 = objc_msgSend(v9, "entitlements", v50);
      TCCContext.TCCService.defaultAppEntitlement.getter(v1);
      v17 = v16;
      v18 = String._bridgeToObjectiveC()();
      v19 = sub_10014167C();
      v20 = objc_msgSend(v15, "objectForKey:ofClass:", v18, swift_getObjCClassFromMetadata(v19));

      if (v20)
      {
        _bridgeAnyObjectToAny(_:)(v58);
        swift_unknownObjectRelease(v20);
      }
      else
      {
        memset(v58, 0, sizeof(v58));
      }
      sub_10006C218((uint64_t)v58, (uint64_t)&v60, (uint64_t *)&unk_100346130);
      v1 = v52;
      if (v63)
      {
        if ((swift_dynamicCast(&v53, &v60, (char *)&type metadata for Any + 8, v19, 6) & 1) != 0)
        {
          v34 = v53;
          v35 = objc_msgSend(v53, "BOOLValue");

          swift_bridgeObjectRelease(v17);
          if ((v35 & 1) == 0)
          {
LABEL_3:
            swift_bridgeObjectRelease(v6);

            goto LABEL_4;
          }
          v36 = TCCContext.TCCService.rawValue.getter(v52);
          if (v36 == TCCContext.TCCService.rawValue.getter(0))
            v37 = 2;
          else
            v37 = 1;
          v38 = objc_msgSend(v9, "localizedName");
          v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
          v41 = v40;

          v57[0] = v5;
          v57[1] = v6;
          v57[2] = v37;
          v57[3] = v39;
          v1 = v52;
          v57[4] = v41;
          sub_1000C929C((uint64_t)&v60, (uint64_t)v57);

          swift_bridgeObjectRelease(v61);
          v42 = v64;
          goto LABEL_22;
        }
      }
      else
      {
        sub_100098C7C((uint64_t)&v60);
      }
      swift_bridgeObjectRelease(v6);

      v42 = v17;
LABEL_22:
      swift_bridgeObjectRelease(v42);
      goto LABEL_4;
    }
    v51 = v5;
    v21 = v60;
    v22 = _convertNSErrorToError(_:)(v10);

    swift_willThrow(v23);
    swift_errorRetain(v22);
    swift_bridgeObjectRetain(v6);
    v24 = swift_errorRetain(v22);
    v25 = Logger.logObject.getter(v24);
    v27 = static os_log_type_t.error.getter(v25, v26);
    if (os_log_type_enabled(v25, v27))
    {
      v28 = swift_slowAlloc(22, -1);
      v29 = (void *)swift_slowAlloc(64, -1);
      v60 = v29;
      *(_DWORD *)v28 = 136315394;
      swift_getErrorValue(v22, v55, v54);
      v30 = Error.localizedDescription.getter(v54[1], v54[2]);
      v32 = v31;
      *(_QWORD *)(v28 + 4) = sub_1001C56EC(v30, v31, (uint64_t *)&v60);
      swift_bridgeObjectRelease(v32);
      swift_errorRelease(v22);
      swift_errorRelease(v22);
      *(_WORD *)(v28 + 12) = 2080;
      swift_bridgeObjectRetain(v6);
      *(_QWORD *)(v28 + 14) = sub_1001C56EC(v51, v6, (uint64_t *)&v60);
      swift_bridgeObjectRelease_n(v6, 3);
      _os_log_impl((void *)&_mh_execute_header, v25, v27, "defaultAppCandidates: Error %s when initializing LSApplicationRecord for %s", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy(v29, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1, -1);
      v33 = v28;
      v1 = v52;
      swift_slowDealloc(v33, -1, -1);
      swift_errorRelease(v22);

    }
    else
    {
      swift_errorRelease(v22);

      swift_errorRelease(v22);
      swift_errorRelease(v22);
      swift_bridgeObjectRelease_n(v6, 2);
    }
LABEL_4:
    v4 += 2;
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease(v50);
LABEL_25:
  v43 = objc_allocWithZone((Class)LSApplicationRecord);
  v44 = sub_1001415A4(0xD000000000000012, 0x80000001002BD780, 0);
  v45 = objc_msgSend(v44, "localizedName");
  v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
  v48 = v47;

  v60 = (id)0xD000000000000012;
  v61 = 0x80000001002BD780;
  v62 = 3;
  v63 = v46;
  v64 = v48;
  sub_1000C929C((uint64_t)v58, (uint64_t)&v60);
  swift_bridgeObjectRelease(*((_QWORD *)&v58[0] + 1));
  swift_bridgeObjectRelease(v59);
  return v56;
}

BOOL sub_100141428()
{
  uint64_t v0;

  v0 = ((uint64_t (*)(void))TCCContext.TCCAccess.rawValue.getter)();
  return v0 == TCCContext.TCCAccess.rawValue.getter(0);
}

uint64_t sub_100141458()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 24));
  v1 = v0 + OBJC_IVAR____TtC10seserviced25SECSettingsPaneReconciler_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1001414B8()
{
  return type metadata accessor for SECSettingsPaneReconciler(0);
}

uint64_t type metadata accessor for SECSettingsPaneReconciler(uint64_t a1)
{
  uint64_t result;

  result = qword_1003471E0;
  if (!qword_1003471E0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SECSettingsPaneReconciler);
  return result;
}

uint64_t sub_1001414FC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for SECSettingsPaneReconciler.PaneConfig()
{
  return objc_opt_self(_TtCC10seserviced25SECSettingsPaneReconciler10PaneConfig);
}

id sub_1001415A4(uint64_t a1, uint64_t a2, char a3)
{
  void *v3;
  NSString v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v12;

  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v12 = 0;
  v7 = objc_msgSend(v3, "initWithBundleIdentifier:allowPlaceholder:error:", v6, a3 & 1, &v12);

  v8 = v12;
  if (v7)
  {
    v9 = v12;
  }
  else
  {
    v10 = v12;
    _convertNSErrorToError(_:)(v8);

    swift_willThrow();
  }
  return v7;
}

unint64_t sub_10014167C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100344CD8;
  if (!qword_100344CD8)
  {
    v1 = objc_opt_self(NSNumber);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100344CD8);
  }
  return result;
}

uint64_t sub_1001416B8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19[2];
  uint64_t v20;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = sub_100145B1C();
  result = Set.init(minimumCapacity:)(v2, &type metadata for Data, v3);
  v5 = 0;
  v20 = result;
  v6 = a1 + 64;
  v7 = 1 << *(_BYTE *)(a1 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a1 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v12 = v11 | (v5 << 6);
      goto LABEL_5;
    }
    v16 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v16 >= v10)
      goto LABEL_23;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v5;
    if (!v17)
    {
      v5 = v16 + 1;
      if (v16 + 1 >= v10)
        goto LABEL_23;
      v17 = *(_QWORD *)(v6 + 8 * v5);
      if (!v17)
      {
        v5 = v16 + 2;
        if (v16 + 2 >= v10)
          goto LABEL_23;
        v17 = *(_QWORD *)(v6 + 8 * v5);
        if (!v17)
        {
          v5 = v16 + 3;
          if (v16 + 3 >= v10)
            goto LABEL_23;
          v17 = *(_QWORD *)(v6 + 8 * v5);
          if (!v17)
            break;
        }
      }
    }
LABEL_22:
    v9 = (v17 - 1) & v17;
    v12 = __clz(__rbit64(v17)) + (v5 << 6);
LABEL_5:
    v13 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v12);
    v14 = *v13;
    v15 = v13[1];
    sub_100063C8C(*v13, v15);
    sub_1000C7A18(v19, v14, v15);
    result = sub_100063CD0(v19[0], v19[1]);
  }
  v18 = v16 + 4;
  if (v18 >= v10)
  {
LABEL_23:
    swift_release(a1);
    return v20;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v5 = v18;
    goto LABEL_22;
  }
  while (1)
  {
    v5 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v5 >= v10)
      goto LABEL_23;
    v17 = *(_QWORD *)(v6 + 8 * v5);
    ++v18;
    if (v17)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_100141854(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  id v13;
  uint64_t result;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _BYTE v26[24];

  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (_QWORD *)((char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v12 = qword_100354EE8;
  *v11 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v7);
  v13 = (id)v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v11);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v8 + 8))(v11, v7);
  if ((v12 & 1) != 0)
  {
    v15 = (uint64_t *)(v3 + OBJC_IVAR____TtC10seserviced10DSKExpress_delegates);
    swift_beginAccess(v3 + OBJC_IVAR____TtC10seserviced10DSKExpress_delegates, v26, 32, 0);
    v16 = *v15;
    if (*(_QWORD *)(*v15 + 16))
    {
      sub_100063C8C(a2, a3);
      v17 = sub_100187F6C(a2, a3);
      if ((v18 & 1) != 0)
      {
        sub_1000E504C(*(_QWORD *)(v16 + 56) + 40 * v17, (uint64_t)&v23);
      }
      else
      {
        v25 = 0;
        v23 = 0u;
        v24 = 0u;
      }
      sub_100063CD0(a2, a3);
    }
    else
    {
      v25 = 0;
      v23 = 0u;
      v24 = 0u;
    }
    swift_endAccess(v26);
    v19 = *((_QWORD *)&v24 + 1);
    sub_100096700((uint64_t)&v23, (uint64_t *)&unk_100347740);
    if (v19)
    {
      v20 = sub_10006B828();
      v21 = swift_allocError(&type metadata for DSKError, v20, 0, 0);
      *v22 = 0;
      return swift_willThrow(v21);
    }
    else
    {
      sub_1000E504C(a1, (uint64_t)&v23);
      swift_beginAccess(v15, v26, 33, 0);
      sub_100063C8C(a2, a3);
      sub_10017C140((uint64_t)&v23, a2, a3);
      return swift_endAccess(v26);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100141A78()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for DSKExpress(0);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  result = sub_100141AB4();
  qword_100354CE0 = result;
  return result;
}

uint64_t sub_100141AB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void *v11;
  NSString v12;
  NSString v13;
  void *v14;
  void *v15;
  uint64_t v16;
  _QWORD aBlock[5];
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  __int16 v25;

  v1 = v0;
  v2 = type metadata accessor for DispatchQoS.QoSClass(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&aBlock[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = String.init(cString:)(SESLoggingSubsystem);
  v8 = Logger.init(subsystem:category:)(v7);
  v9 = OBJC_IVAR____TtC10seserviced10DSKExpress_debugBypassExpress;
  v21 = 0xD000000000000014;
  v22 = 0x80000001002BA5B0;
  v23 = 0xD000000000000022;
  v24 = 0x80000001002BD960;
  v25 = 256;
  sub_10015348C(v8);
  *(_BYTE *)(v0 + v9) = v10 & 1;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced10DSKExpress_delegates) = &_swiftEmptyDictionarySingleton;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced10DSKExpress_expressKeys) = &_swiftEmptySetSingleton;
  *(_BYTE *)(v0 + OBJC_IVAR____TtC10seserviced10DSKExpress_expressState) = 0;
  *(_BYTE *)(v0 + OBJC_IVAR____TtC10seserviced10DSKExpress_isRunning) = 0;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced10DSKExpress_requestedConfigurationItems) = &_swiftEmptyDictionarySingleton;
  if ((v10 & 1) == 0)
  {
    v11 = (void *)objc_opt_self(SESXPCEventListener);
    v12 = String._bridgeToObjectiveC()();
    v13 = String._bridgeToObjectiveC()();

  }
  sub_10006C25C(0, (unint64_t *)&qword_1003461A0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchQoS.QoSClass.default(_:), v2);
  v14 = (void *)static OS_dispatch_queue.global(qos:)(v6);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  aBlock[4] = sub_1001456E0;
  v20 = v1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10017BF6C;
  aBlock[3] = &unk_10030A8D0;
  v15 = _Block_copy(aBlock);
  v16 = v20;
  swift_retain(v1);
  swift_release(v16);
  os_state_add_handler(v14, v15);
  _Block_release(v15);

  return v1;
}

_DWORD *sub_100141D48()
{
  uint64_t v0;
  char v1;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  Class isa;
  _DWORD *v12;
  _OWORD v14[2];
  __int128 v15;
  void *v16;

  v1 = *(_BYTE *)(v0 + OBJC_IVAR____TtC10seserviced10DSKExpress_debugBypassExpress);
  v16 = &type metadata for Bool;
  LOBYTE(v15) = v1;
  sub_10006C2B4(&v15, v14);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_10018DEC0(v14, 0xD000000000000012, 0x80000001002BD830, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease(0x8000000000000000);
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced10DSKExpress_expressKeys);
  v16 = (void *)sub_100063D3C(&qword_1003476F0);
  *(_QWORD *)&v15 = v3;
  sub_10006C2B4(&v15, v14);
  swift_bridgeObjectRetain(v3);
  v4 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_10018DEC0(v14, 0x4B73736572707865, 0xEB00000000737965, v4);
  swift_bridgeObjectRelease(0x8000000000000000);
  LOBYTE(v15) = *(_BYTE *)(v0 + OBJC_IVAR____TtC10seserviced10DSKExpress_expressState);
  v5 = String.init<A>(describing:)(&v15, &type metadata for DSKExpress.ExpressState);
  v16 = &type metadata for String;
  *(_QWORD *)&v15 = v5;
  *((_QWORD *)&v15 + 1) = v6;
  sub_10006C2B4(&v15, v14);
  v7 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_10018DEC0(v14, 0x5373736572707865, 0xEC00000065746174, v7);
  swift_bridgeObjectRelease(0x8000000000000000);
  v8 = *(_BYTE *)(v0 + OBJC_IVAR____TtC10seserviced10DSKExpress_isRunning);
  v16 = &type metadata for Bool;
  LOBYTE(v15) = v8;
  sub_10006C2B4(&v15, v14);
  v9 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_10018DEC0(v14, 0x6E696E6E75527369, 0xE900000000000067, v9);
  swift_bridgeObjectRelease(0x8000000000000000);
  v10 = sub_10017D088((uint64_t)&_swiftEmptyDictionarySingleton);
  swift_bridgeObjectRelease(&_swiftEmptyDictionarySingleton);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v10);
  v12 = sub_100015734((uint64_t)"dskexpress.state", (uint64_t)isa);

  return v12;
}

void sub_100141F9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (uint64_t *)((char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v7 = qword_100354EE8;
  *v6 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  v9 = (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) != 0)
  {
    v10 = OBJC_IVAR____TtC10seserviced10DSKExpress_isRunning;
    v11 = *(_BYTE *)(v1 + OBJC_IVAR____TtC10seserviced10DSKExpress_isRunning);
    v12 = Logger.logObject.getter(v9);
    v16 = v12;
    if ((v11 & 1) != 0)
    {
      v17 = static os_log_type_t.error.getter(v12, v13);
      if (os_log_type_enabled(v16, v17))
      {
        v18 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v18 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "DSKExpress is already running", v18, 2u);
        swift_slowDealloc(v18, -1, -1);
      }

    }
    else
    {
      v19 = static os_log_type_t.info.getter(v12, v13, v14, v15);
      if (os_log_type_enabled(v16, v19))
      {
        v20 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v20 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, v19, "Starting DSKExpress", v20, 2u);
        swift_slowDealloc(v20, -1, -1);
      }

      *(_BYTE *)(v1 + v10) = 1;
      sub_10014217C();
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_10014217C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  os_log_type_t v23;
  uint8_t *v24;
  _OWORD v25[2];
  uint64_t v26;

  v1 = sub_100063D3C((uint64_t *)&unk_1003465E0);
  __chkstk_darwin(v1, v2);
  v4 = (char *)v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (_QWORD *)((char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v10 = qword_100354EE8;
  *v9 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5);
  v11 = (id)v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  v12 = (*(uint64_t (**)(_QWORD *, uint64_t))(v6 + 8))(v9, v5);
  if ((v10 & 1) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC10seserviced10DSKExpress_isRunning) == 1)
  {
    if (qword_1003445F0 == -1)
    {
LABEL_6:
      v13 = type metadata accessor for UUID(0);
      memset(v25, 0, sizeof(v25));
      v26 = 0;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v4, 1, 1, v13);
      v14 = type metadata accessor for SERequest(0);
      v15 = swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
      v16 = (_QWORD *)(v15 + OBJC_IVAR____TtC10seserviced9SERequest_reason);
      *v16 = 0xD000000000000012;
      v16[1] = 0x80000001002BD9D0;
      *(_BYTE *)(v15 + OBJC_IVAR____TtC10seserviced9SERequest_isBlockSelecting) = 1;
      *(_QWORD *)(v15 + 16) = 0;
      *(_BYTE *)(v15 + 24) = 1;
      sub_10006C218((uint64_t)v25, v15 + OBJC_IVAR____TtC10seserviced9SERequest_handoffToken, (uint64_t *)&unk_100347750);
      *(_BYTE *)(v15 + OBJC_IVAR____TtC10seserviced9SERequest_priority) = 3;
      *(_QWORD *)(v15 + OBJC_IVAR____TtC10seserviced9SERequest_peer) = 0;
      v17 = v15 + OBJC_IVAR____TtC10seserviced9SERequest_sessionChecks;
      *(_QWORD *)v17 = 0;
      *(_BYTE *)(v17 + 8) = 1;
      sub_10006C218((uint64_t)v4, v15 + OBJC_IVAR____TtC10seserviced9SERequest_connectionIdentifier, (uint64_t *)&unk_1003465E0);
      v18 = v15 + OBJC_IVAR____TtC10seserviced9SERequest_sequenceNumber;
      *(_QWORD *)v18 = 0;
      *(_BYTE *)(v18 + 8) = 1;
      *(_QWORD *)(v15 + 32) = sub_1001461FC;
      *(_QWORD *)(v15 + 40) = v0;
      swift_retain(v0);
      sub_100127720(0, v15);
      swift_release(v15);
      return;
    }
LABEL_11:
    swift_once(&qword_1003445F0, sub_100128818);
    goto LABEL_6;
  }
  v19 = Logger.logObject.getter(v12);
  v23 = static os_log_type_t.info.getter(v19, v20, v21, v22);
  if (os_log_type_enabled(v19, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v23, "Not running", v24, 2u);
    swift_slowDealloc(v24, -1, -1);
  }

}

void sub_1001424A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  os_log_type_t v23;
  uint8_t *v24;
  _BYTE v25[24];
  _BYTE v26[24];

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = &v25[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v7 = qword_100354EE8;
  *v6 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  v9 = (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) != 0)
  {
    v10 = OBJC_IVAR____TtC10seserviced10DSKExpress_isRunning;
    v11 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC10seserviced10DSKExpress_isRunning);
    v12 = Logger.logObject.getter(v9);
    v16 = v12;
    if (v11 == 1)
    {
      v17 = static os_log_type_t.info.getter(v12, v13, v14, v15);
      if (os_log_type_enabled(v16, v17))
      {
        v18 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v18 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Stopping DSKExpress", v18, 2u);
        swift_slowDealloc(v18, -1, -1);
      }

      if (*(_BYTE *)(v1 + OBJC_IVAR____TtC10seserviced10DSKExpress_expressState))
      {
        *(_BYTE *)(v1 + OBJC_IVAR____TtC10seserviced10DSKExpress_expressState) = 0;
        sub_1001426FC();
      }
      v19 = (uint64_t *)(v1 + OBJC_IVAR____TtC10seserviced10DSKExpress_requestedConfigurationItems);
      swift_beginAccess(v1 + OBJC_IVAR____TtC10seserviced10DSKExpress_requestedConfigurationItems, v26, 1, 0);
      v20 = *v19;
      *v19 = (uint64_t)&_swiftEmptyDictionarySingleton;
      swift_bridgeObjectRelease(v20);
      v21 = (uint64_t *)(v1 + OBJC_IVAR____TtC10seserviced10DSKExpress_delegates);
      swift_beginAccess(v1 + OBJC_IVAR____TtC10seserviced10DSKExpress_delegates, v25, 1, 0);
      v22 = *v21;
      *v21 = (uint64_t)&_swiftEmptyDictionarySingleton;
      swift_bridgeObjectRelease(v22);
      *(_BYTE *)(v1 + v10) = 0;
    }
    else
    {
      v23 = static os_log_type_t.error.getter(v12, v13);
      if (os_log_type_enabled(v16, v23))
      {
        v24 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v24 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, v23, "DSKExpress is not running", v24, 2u);
        swift_slowDealloc(v24, -1, -1);
      }

    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1001426FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t i;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD aBlock[5];
  uint64_t v36;
  __int128 v37[2];
  _QWORD v38[5];
  __int128 v39[2];
  _BYTE v40[32];

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v32 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1, v2);
  v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for DispatchQoS(0);
  v30 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31, v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced10DSKExpress_expressKeys);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced10DSKExpress_expressKeys) = &_swiftEmptySetSingleton;
  swift_bridgeObjectRelease(v8);
  v9 = (uint64_t *)(v0 + OBJC_IVAR____TtC10seserviced10DSKExpress_delegates);
  swift_beginAccess(v9, v40, 0, 0);
  v10 = *v9;
  v11 = *(_QWORD *)(*v9 + 64);
  v28 = *v9 + 64;
  v12 = 1 << *(_BYTE *)(v10 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & v11;
  v29 = (unint64_t)(v12 + 63) >> 6;
  v33 = v10;
  result = swift_bridgeObjectRetain_n(v10, 2);
  v16 = 0;
  if (!v14)
    goto LABEL_5;
LABEL_4:
  v17 = __clz(__rbit64(v14));
  v14 &= v14 - 1;
  for (i = v17 | (v16 << 6); ; i = __clz(__rbit64(v20)) + (v16 << 6))
  {
    sub_1000E504C(*(_QWORD *)(v33 + 56) + 40 * i, (uint64_t)v39);
    sub_1000DB160(v39, (uint64_t)v38);
    if (qword_1003447B8 != -1)
      swift_once(&qword_1003447B8, sub_1001EEFA4);
    sub_1000E504C((uint64_t)v38, (uint64_t)v37);
    v22 = swift_allocObject(&unk_10030A958, 56, 7);
    sub_1000DB160(v37, v22 + 16);
    aBlock[4] = sub_1001461F4;
    v36 = v22;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100071C98;
    aBlock[3] = &unk_10030A970;
    v23 = _Block_copy(aBlock);
    static DispatchQoS.unspecified.getter(v23);
    v34 = _swiftEmptyArrayStorage;
    v24 = sub_1000639EC((unint64_t *)&qword_100344A20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v25 = sub_100063D3C((uint64_t *)&unk_100346200);
    v26 = sub_10007EF60((unint64_t *)&qword_100344A30, (uint64_t *)&unk_100346200, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v34, v25, v26, v1, v24);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v4, v23);
    _Block_release(v23);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v4, v1);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v7, v31);
    swift_release(v36);
    result = sub_10006BA9C(v38);
    if (v14)
      goto LABEL_4;
LABEL_5:
    v19 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v19 >= v29)
      goto LABEL_27;
    v20 = *(_QWORD *)(v28 + 8 * v19);
    ++v16;
    if (!v20)
    {
      v16 = v19 + 1;
      if (v19 + 1 >= v29)
        goto LABEL_27;
      v20 = *(_QWORD *)(v28 + 8 * v16);
      if (!v20)
      {
        v16 = v19 + 2;
        if (v19 + 2 >= v29)
          goto LABEL_27;
        v20 = *(_QWORD *)(v28 + 8 * v16);
        if (!v20)
        {
          v16 = v19 + 3;
          if (v19 + 3 >= v29)
            goto LABEL_27;
          v20 = *(_QWORD *)(v28 + 8 * v16);
          if (!v20)
          {
            v16 = v19 + 4;
            if (v19 + 4 >= v29)
              goto LABEL_27;
            v20 = *(_QWORD *)(v28 + 8 * v16);
            if (!v20)
              break;
          }
        }
      }
    }
LABEL_22:
    v14 = (v20 - 1) & v20;
  }
  v21 = v19 + 5;
  if (v21 >= v29)
  {
LABEL_27:
    v27 = v33;
    swift_release(v33);
    return swift_bridgeObjectRelease(v27);
  }
  v20 = *(_QWORD *)(v28 + 8 * v21);
  if (v20)
  {
    v16 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    v16 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v16 >= v29)
      goto LABEL_27;
    v20 = *(_QWORD *)(v28 + 8 * v16);
    ++v21;
    if (v20)
      goto LABEL_22;
  }
LABEL_29:
  __break(1u);
  return result;
}

void sub_100142B98(void *a1, char a2, uint64_t a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  char v9;
  NSObject *v10;
  uint64_t v11;
  os_log_type_t v12;
  uint8_t *v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  os_log_type_t v25;
  uint8_t *v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  os_log_type_t v37;
  uint8_t *v38;
  void *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  void *v43;
  id v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  NSObject *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  os_log_type_t v54;
  uint8_t *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  void *v61;
  NSObject *v62;
  uint64_t v63;
  os_log_type_t v64;
  uint8_t *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  void *v73;
  _QWORD v74[3];
  _BYTE v75[16];
  uint64_t v76;
  id v77[3];

  if ((*(_BYTE *)(a3 + OBJC_IVAR____TtC10seserviced10DSKExpress_debugBypassExpress) & 1) != 0)
    return;
  if ((a2 & 1) == 0)
  {
    if ((*(_BYTE *)(a3 + OBJC_IVAR____TtC10seserviced10DSKExpress_isRunning) & 1) == 0)
      return;
    v77[0] = 0;
    v5 = sub_100050388(a1, v77);
    v6 = v77[0];
    if (v5)
    {
      v7 = v5;
      v8 = v77[0];
      if (objc_msgSend(v7, "state") == (id)1)
        v9 = 1;
      else
        v9 = 2 * (objc_msgSend(v7, "state") == (id)3);
      v31 = OBJC_IVAR____TtC10seserviced10DSKExpress_expressState;
      *(_BYTE *)(a3 + OBJC_IVAR____TtC10seserviced10DSKExpress_expressState) = v9;
      v32 = swift_retain_n(a3, 2);
      v33 = Logger.logObject.getter(v32);
      v37 = static os_log_type_t.info.getter(v33, v34, v35, v36);
      if (os_log_type_enabled(v33, v37))
      {
        v38 = (uint8_t *)swift_slowAlloc(12, -1);
        v72 = v7;
        v39 = (void *)swift_slowAlloc(32, -1);
        *(_DWORD *)v38 = 136315138;
        v77[0] = v39;
        LOBYTE(v76) = *(_BYTE *)(a3 + v31);
        v40 = String.init<A>(describing:)(&v76, &type metadata for DSKExpress.ExpressState);
        v42 = v41;
        v76 = sub_1001C56EC(v40, v41, (uint64_t *)v77);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, v77, v38 + 4, v38 + 12);
        swift_release_n(a3, 2);
        swift_bridgeObjectRelease(v42);
        _os_log_impl((void *)&_mh_execute_header, v33, v37, "Express state %s", v38, 0xCu);
        swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
        v43 = v39;
        v7 = v72;
        swift_slowDealloc(v43, -1, -1);
        swift_slowDealloc(v38, -1, -1);
      }
      else
      {
        swift_release_n(a3, 2);
      }

      if (*(_BYTE *)(a3 + v31))
      {
        v44 = objc_msgSend(v7, "passConfigs");
        if (v44)
        {
          v45 = v44;
          v46 = sub_100063D3C((uint64_t *)&unk_100346180);
          v47 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v45, v46);

          v48 = sub_1000C5D00(v47);
          v44 = (id)swift_bridgeObjectRelease(v47);
          if (v48)
          {
            v49 = swift_bridgeObjectRetain_n(v48, 2);
            v50 = Logger.logObject.getter(v49);
            v54 = static os_log_type_t.info.getter(v50, v51, v52, v53);
            if (os_log_type_enabled(v50, v54))
            {
              v55 = (uint8_t *)swift_slowAlloc(12, -1);
              v73 = v7;
              v56 = (void *)swift_slowAlloc(32, -1);
              v77[0] = v56;
              *(_DWORD *)v55 = 136315138;
              swift_bridgeObjectRetain(v48);
              v57 = sub_100063D3C(&qword_100345388);
              v58 = Array.description.getter(v48, v57);
              v60 = v59;
              swift_bridgeObjectRelease(v48);
              v76 = sub_1001C56EC(v58, v60, (uint64_t *)v77);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, v77, v55 + 4, v55 + 12);
              swift_bridgeObjectRelease_n(v48, 2);
              swift_bridgeObjectRelease(v60);
              _os_log_impl((void *)&_mh_execute_header, v50, v54, "Express passes %s", v55, 0xCu);
              swift_arrayDestroy(v56, 1, (char *)&type metadata for Any + 8);
              v61 = v56;
              v7 = v73;
              swift_slowDealloc(v61, -1, -1);
              swift_slowDealloc(v55, -1, -1);
            }
            else
            {
              swift_bridgeObjectRelease_n(v48, 2);
            }

            swift_retain(a3);
            v66 = sub_1001471A8((uint64_t)v48, a3);
            swift_bridgeObjectRelease(v48);
            swift_release(a3);
            v67 = sub_100146428((uint64_t)v66);
            swift_bridgeObjectRelease(v66);
            v68 = *(_QWORD *)(a3 + OBJC_IVAR____TtC10seserviced10DSKExpress_expressKeys);
            *(_QWORD *)(a3 + OBJC_IVAR____TtC10seserviced10DSKExpress_expressKeys) = v67;
            swift_bridgeObjectRelease(v68);
            v69 = (uint64_t *)(a3 + OBJC_IVAR____TtC10seserviced10DSKExpress_delegates);
            swift_beginAccess(a3 + OBJC_IVAR____TtC10seserviced10DSKExpress_delegates, v77, 0, 0);
            v70 = *v69;
            swift_bridgeObjectRetain(v70);
            sub_100145B60(v71, (void (*)(uint64_t, unint64_t, _BYTE *))sub_1001472D8);

            sub_10006BA28(a1, 0);
            swift_bridgeObjectRelease(v70);
            return;
          }
        }
        v62 = Logger.logObject.getter(v44);
        v64 = static os_log_type_t.error.getter(v62, v63);
        if (os_log_type_enabled(v62, v64))
        {
          v65 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v65 = 0;
          _os_log_impl((void *)&_mh_execute_header, v62, v64, "Failed to retrieve pass configurations", v65, 2u);
          swift_slowDealloc(v65, -1, -1);
        }

        *(_BYTE *)(a3 + v31) = 0;
      }
      sub_1001426FC();

    }
    else
    {
      v19 = v77[0];
      v20 = _convertNSErrorToError(_:)(v6);

      swift_willThrow(v21);
      swift_errorRetain(v20);
      v22 = swift_errorRetain(v20);
      v23 = Logger.logObject.getter(v22);
      v25 = static os_log_type_t.error.getter(v23, v24);
      if (os_log_type_enabled(v23, v25))
      {
        v26 = (uint8_t *)swift_slowAlloc(12, -1);
        v27 = (void *)swift_slowAlloc(32, -1);
        v77[0] = v27;
        *(_DWORD *)v26 = 136315138;
        swift_getErrorValue(v20, v75, v74);
        v28 = Error.localizedDescription.getter(v74[1], v74[2]);
        v30 = v29;
        v76 = sub_1001C56EC(v28, v29, (uint64_t *)v77);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, v77, v26 + 4, v26 + 12);
        swift_bridgeObjectRelease(v30);
        swift_errorRelease(v20);
        swift_errorRelease(v20);
        _os_log_impl((void *)&_mh_execute_header, v23, v25, "Failed to retrieve the express configuration %s", v26, 0xCu);
        swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v27, -1, -1);
        swift_slowDealloc(v26, -1, -1);

      }
      else
      {

        swift_errorRelease(v20);
        swift_errorRelease(v20);
      }
      if (*(_BYTE *)(a3 + OBJC_IVAR____TtC10seserviced10DSKExpress_expressState))
      {
        *(_BYTE *)(a3 + OBJC_IVAR____TtC10seserviced10DSKExpress_expressState) = 0;
        sub_1001426FC();
        sub_10006BA28(a1, 0);
        swift_errorRelease(v20);
        return;
      }
      swift_errorRelease(v20);
    }
    sub_10006BA28(a1, 0);
    return;
  }
  v10 = Logger.logObject.getter(a1);
  v12 = static os_log_type_t.error.getter(v10, v11);
  if (os_log_type_enabled(v10, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v14 = (void *)swift_slowAlloc(32, -1);
    v77[0] = v14;
    *(_DWORD *)v13 = 136315138;
    v15 = sub_10006B9E4();
    v16 = Error.localizedDescription.getter(&type metadata for SEError, v15);
    v18 = v17;
    v76 = sub_1001C56EC(v16, v17, (uint64_t *)v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, v77, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease(v18);
    _os_log_impl((void *)&_mh_execute_header, v10, v12, "Failed to get the SE %s", v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }

  if (*(_BYTE *)(a3 + OBJC_IVAR____TtC10seserviced10DSKExpress_expressState))
  {
    *(_BYTE *)(a3 + OBJC_IVAR____TtC10seserviced10DSKExpress_expressState) = 0;
    sub_1001426FC();
  }
}

_QWORD *sub_1001433C0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _QWORD *result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v5 = *a1;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("keyIdentifier"));
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16) || (v9 = sub_100187ED0(v6, v7), (v10 & 1) == 0))
  {
    v54 = 0u;
    v55 = 0u;
    swift_bridgeObjectRelease(v8);
    goto LABEL_9;
  }
  sub_100096CB0(*(_QWORD *)(v5 + 56) + 32 * v9, (uint64_t)&v54);
  swift_bridgeObjectRelease(v8);
  if (!*((_QWORD *)&v55 + 1))
  {
LABEL_9:
    sub_100096700((uint64_t)&v54, (uint64_t *)&unk_100346130);
    goto LABEL_10;
  }
  if ((swift_dynamicCast(&v52, &v54, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
  {
    v12 = v52;
    v11 = v53;
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("UWBExpressEnabled"));
    v15 = v14;
    if (*(_QWORD *)(v5 + 16) && (v16 = sub_100187ED0(v13, v14), (v17 & 1) != 0))
    {
      sub_100096CB0(*(_QWORD *)(v5 + 56) + 32 * v16, (uint64_t)&v54);
    }
    else
    {
      v54 = 0u;
      v55 = 0u;
    }
    swift_bridgeObjectRelease(v15);
    if (*((_QWORD *)&v55 + 1))
    {
      if (swift_dynamicCast(&v52, &v54, (char *)&type metadata for Any + 8, &type metadata for Bool, 6)
        && (v52 & 1) != 0)
      {
        v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("appletIdentifier"));
        v21 = v20;
        if (*(_QWORD *)(v5 + 16) && (v22 = sub_100187ED0(v19, v20), (v23 & 1) != 0))
        {
          sub_100096CB0(*(_QWORD *)(v5 + 56) + 32 * v22, (uint64_t)&v54);
        }
        else
        {
          v54 = 0u;
          v55 = 0u;
        }
        swift_bridgeObjectRelease(v21);
        if (!*((_QWORD *)&v55 + 1))
        {
          swift_bridgeObjectRelease(v11);
          sub_100096700((uint64_t)&v54, (uint64_t *)&unk_100346130);
          goto LABEL_27;
        }
        if ((swift_dynamicCast(&v52, &v54, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0
          || (v24 = sub_1000E848C(v52, v53), v25 >> 60 == 15))
        {
          swift_bridgeObjectRelease(v11);
LABEL_27:
          v26 = swift_bridgeObjectRetain_n(v5, 2);
          v27 = Logger.logObject.getter(v26);
          v29 = static os_log_type_t.error.getter(v27, v28);
          if (os_log_type_enabled(v27, v29))
          {
            v30 = (uint8_t *)swift_slowAlloc(12, -1);
            v56 = swift_slowAlloc(32, -1);
            *(_QWORD *)&v54 = v56;
            *(_DWORD *)v30 = 136315138;
            swift_bridgeObjectRetain(v5);
            v32 = Dictionary.description.getter(v31, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
            v34 = v33;
            swift_bridgeObjectRelease(v5);
            v52 = sub_1001C56EC(v32, v34, (uint64_t *)&v54);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v30 + 4, v30 + 12);
            swift_bridgeObjectRelease_n(v5, 2);
            swift_bridgeObjectRelease(v34);
            v35 = v30;
            _os_log_impl((void *)&_mh_execute_header, v27, v29, "Malformed pass config %s", v30, 0xCu);
            v36 = v56;
            swift_arrayDestroy(v56, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v36, -1, -1);
            swift_slowDealloc(v35, -1, -1);
          }
          else
          {
            swift_bridgeObjectRelease_n(v5, 2);
          }

          goto LABEL_10;
        }
        v37 = v24;
        v38 = v25;
        v39 = sub_1000E848C(v12, v11);
        if (v40 >> 60 == 15)
        {
          sub_10006B9B4(v37, v38);
          goto LABEL_27;
        }
        v41 = v39;
        v42 = v40;
        v56 = v37;
        v43 = (uint64_t *)(a2 + OBJC_IVAR____TtC10seserviced10DSKExpress_requestedConfigurationItems);
        swift_beginAccess(a2 + OBJC_IVAR____TtC10seserviced10DSKExpress_requestedConfigurationItems, &v54, 32, 0);
        v44 = *v43;
        if (*(_QWORD *)(v44 + 16))
        {
          v45 = v56;
          sub_100063C8C(v56, v38);
          v46 = sub_100187F6C(v45, v38);
          if ((v47 & 1) != 0)
          {
            v48 = *(_QWORD **)(*(_QWORD *)(v44 + 56) + 8 * v46);
            swift_endAccess(&v54);
            swift_bridgeObjectRetain(v48);
            sub_10006B9B4(v45, v38);
            swift_bridgeObjectRetain(v48);
            swift_bridgeObjectRetain(v5);
            v50 = sub_100146FF4(v49, v48);
            swift_bridgeObjectRelease(v5);
            swift_bridgeObjectRelease_n(v48, 2);
LABEL_38:
            v51 = type metadata accessor for DSKExpress.ExpressKey();
            result = (_QWORD *)swift_allocObject(v51, 56, 7);
            result[2] = v41;
            result[3] = v42;
            result[4] = v56;
            result[5] = v38;
            result[6] = v50;
            goto LABEL_11;
          }
          sub_10006B9B4(v45, v38);
        }
        swift_endAccess(&v54);
        v50 = 0;
        goto LABEL_38;
      }
    }
    else
    {
      sub_100096700((uint64_t)&v54, (uint64_t *)&unk_100346130);
    }
    swift_bridgeObjectRelease(v11);
  }
LABEL_10:
  result = 0;
LABEL_11:
  *a3 = result;
  return result;
}

uint64_t sub_100143880(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD aBlock[5];
  uint64_t v32;
  __int128 v33[3];

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v29 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for DispatchQoS(0);
  v12 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28, v13);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_BYTE *)(a4 + OBJC_IVAR____TtC10seserviced10DSKExpress_expressState);
  v17 = *(_QWORD *)(a4 + OBJC_IVAR____TtC10seserviced10DSKExpress_expressKeys);
  sub_100063C8C(a1, a2);
  swift_bridgeObjectRetain(v17);
  v19 = sub_10014658C(v18);
  sub_100063CD0(a1, a2);
  swift_bridgeObjectRelease(v17);
  v20 = sub_100145A34((uint64_t)v19);
  swift_bridgeObjectRelease(v19);
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  sub_1000E504C(a3, (uint64_t)v33);
  v21 = swift_allocObject(&unk_10030A9A8, 72, 7);
  sub_1000DB160(v33, v21 + 16);
  *(_BYTE *)(v21 + 56) = v16;
  *(_QWORD *)(v21 + 64) = v20;
  aBlock[4] = sub_10014730C;
  v32 = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100071C98;
  aBlock[3] = &unk_10030A9C0;
  v22 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v22);
  v30 = _swiftEmptyArrayStorage;
  v23 = sub_1000639EC((unint64_t *)&qword_100344A20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v24 = sub_100063D3C((uint64_t *)&unk_100346200);
  v25 = sub_10007EF60((unint64_t *)&qword_100344A30, (uint64_t *)&unk_100346200, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v30, v24, v25, v8, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v11, v22);
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v28);
  return swift_release(v32);
}

uint64_t sub_100143B24(_QWORD *a1, char a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t inited;
  uint64_t v9;

  v5 = a1[4];
  sub_10006BA78(a1, a1[3]);
  v6 = type metadata accessor for DSKExpress.ExpressReport();
  inited = swift_initStackObject(v6, &v9);
  *(_BYTE *)(inited + 16) = a2;
  *(_QWORD *)(inited + 24) = a3;
  return (*(uint64_t (**)(void))(v5 + 8))();
}

void sub_100143B94(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  id v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _QWORD *v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[24];

  v4 = v3;
  v8 = type metadata accessor for DispatchPredicate(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = &v25[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v13 = qword_100354EE8;
  *v12 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8);
  v14 = (id)v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)(v12);
  (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v12, v8);
  if ((v13 & 1) == 0)
  {
    __break(1u);
    return;
  }
  v15 = (_QWORD *)(v4 + OBJC_IVAR____TtC10seserviced10DSKExpress_requestedConfigurationItems);
  swift_beginAccess(v4 + OBJC_IVAR____TtC10seserviced10DSKExpress_requestedConfigurationItems, v25, 32, 0);
  v16 = *v15;
  if (*(_QWORD *)(*v15 + 16))
  {
    sub_100063C8C(a2, a3);
    v17 = sub_100187F6C(a2, a3);
    if ((v18 & 1) != 0)
    {
      v19 = *(_QWORD **)(*(_QWORD *)(v16 + 56) + 8 * v17);
      swift_bridgeObjectRetain(v19);
    }
    else
    {
      v19 = 0;
    }
    sub_100063CD0(a2, a3);
  }
  else
  {
    v19 = 0;
  }
  swift_endAccess(v25);
  swift_beginAccess(v15, v25, 33, 0);
  if (!a1)
  {
    sub_100063C8C(a2, a3);
    v23 = sub_10012E7F4(a2, a3);
    sub_100063CD0(a2, a3);
    swift_bridgeObjectRelease(v23);
    swift_endAccess(v25);
    if (!v19)
      return;
    swift_bridgeObjectRelease(v19);
    goto LABEL_16;
  }
  sub_100063C8C(a2, a3);
  swift_bridgeObjectRetain(a1);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v15);
  v24 = *v15;
  *v15 = 0x8000000000000000;
  sub_10018E148((uint64_t)a1, a2, a3, isUniquelyReferenced_nonNull_native);
  v21 = *v15;
  *v15 = v24;
  swift_bridgeObjectRelease(v21);
  sub_100063CD0(a2, a3);
  swift_endAccess(v25);
  if (!v19 || (v22 = sub_100204198(v19, a1), swift_bridgeObjectRelease(v19), (v22 & 1) == 0))
LABEL_16:
    sub_10014217C();
}

uint64_t sub_100143DF4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  os_unfair_lock_s *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  void *v29;
  char v30;
  _QWORD *v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v54;
  void (*v55)(_QWORD *, _QWORD);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  _QWORD v61[4];
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 v64;
  _QWORD *v65;

  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (uint64_t *)((char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v10 = qword_100354EE8;
  *v9 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5);
  v11 = (id)v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v9, v5);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_41:
    swift_once(&qword_1003445B8, sub_1000EAA4C);
    goto LABEL_6;
  }
  if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC10seserviced10DSKExpress_debugBypassExpress) & 1) == 0)
  {
    v25 = OBJC_IVAR____TtC10seserviced10DSKExpress_expressState;
    if (*(_BYTE *)(v2 + OBJC_IVAR____TtC10seserviced10DSKExpress_expressState))
    {
      v26 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10seserviced10DSKExpress_expressKeys);
      sub_100063C8C(a1, a2);
      v27 = swift_bridgeObjectRetain(v26);
      v28 = sub_10014658C(v27);
      sub_100063CD0(a1, a2);
      swift_bridgeObjectRelease(v26);
      v29 = (void *)sub_100145A34((uint64_t)v28);
      swift_bridgeObjectRelease(v28);
      v30 = *(_BYTE *)(v2 + v25);
    }
    else
    {
      v30 = 0;
      v29 = &_swiftEmptySetSingleton;
    }
    goto LABEL_39;
  }
  v2 = swift_allocObject(&unk_10030A908, 32, 7);
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  sub_100063C8C(a1, a2);
  if (qword_1003445B8 != -1)
    goto LABEL_41;
LABEL_6:
  v12 = off_1003463F0;
  v13 = swift_allocObject(&unk_10030A930, 32, 7);
  *(_QWORD *)(v13 + 16) = sub_100145AF0;
  *(_QWORD *)(v13 + 24) = v2;
  v15 = __chkstk_darwin(v13, v14);
  *(&v58 - 4) = (uint64_t)sub_10006E33C;
  *(&v58 - 3) = v15;
  *(&v58 - 2) = (uint64_t)v12;
  v17 = v16 + 4;
  swift_retain(v2);
  os_unfair_lock_lock(v17);
  sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_10007EFBC, v61);
  os_unfair_lock_unlock(v17);
  v18 = v61[0];
  swift_release(v2);
  swift_release(v13);
  v60 = v18 & 0xC000000000000001;
  if ((v18 & 0xC000000000000001) != 0)
  {
    if (v18 < 0)
      v19 = v18;
    else
      v19 = v18 & 0xFFFFFFFFFFFFFF8;
    v20 = __CocoaSet.count.getter(v19);
    if (v20)
      goto LABEL_11;
LABEL_19:
    swift_bridgeObjectRelease(v18);
    v31 = _swiftEmptyArrayStorage;
LABEL_38:
    v29 = (void *)sub_100145A34((uint64_t)v31);
    swift_bridgeObjectRelease(v31);
    v30 = 1;
LABEL_39:
    v57 = type metadata accessor for DSKExpress.ExpressReport();
    result = swift_allocObject(v57, 32, 7);
    *(_BYTE *)(result + 16) = v30;
    *(_QWORD *)(result + 24) = v29;
    return result;
  }
  v20 = *(_QWORD *)(v18 + 16);
  if (!v20)
    goto LABEL_19;
LABEL_11:
  v65 = _swiftEmptyArrayStorage;
  sub_1001929A4(0, v20 & ~(v20 >> 63), 0);
  if (v60)
  {
    if (v18 < 0)
      v21 = v18;
    else
      v21 = v18 & 0xFFFFFFFFFFFFFF8;
    result = __CocoaSet.startIndex.getter(v21);
    v24 = 1;
  }
  else
  {
    result = sub_100196CE0(v18);
    v24 = v32 & 1;
  }
  v62 = result;
  v63 = v23;
  v64 = v24;
  if ((v20 & 0x8000000000000000) == 0)
  {
    v33 = v18 & 0xFFFFFFFFFFFFFF8;
    if (v18 < 0)
      v33 = v18;
    v59 = v33;
    do
    {
      while (1)
      {
        v40 = v62;
        v39 = v63;
        v41 = v64;
        sub_100196274(v62, v63, v64, v18);
        v43 = v42;
        v44 = objc_msgSend(v42, "publicKeyIdentifier");
        v45 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v44);
        v47 = v46;

        v48 = v65;
        result = swift_isUniquelyReferenced_nonNull_native(v65);
        if ((result & 1) == 0)
        {
          result = sub_1001929A4(0, v48[2] + 1, 1);
          v48 = v65;
        }
        v50 = v48[2];
        v49 = v48[3];
        if (v50 >= v49 >> 1)
        {
          result = sub_1001929A4(v49 > 1, v50 + 1, 1);
          v48 = v65;
        }
        v48[2] = v50 + 1;
        v51 = &v48[2 * v50];
        v51[4] = v45;
        v51[5] = v47;
        if (v60)
          break;
        v34 = sub_100195EE4(v40, v39, v41, v18);
        v36 = v35;
        v38 = v37;
        sub_1000960E8(v40, v39, v41);
        v62 = v34;
        v63 = v36;
        v64 = v38 & 1;
        if (!--v20)
          goto LABEL_37;
      }
      if ((v41 & 1) == 0)
        goto LABEL_43;
      v52 = __CocoaSet.Index.handleBitPattern.getter(v40, v39);
      if (v52)
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v52);
      else
        isUniquelyReferenced_nonNull_native = 1;
      v54 = sub_100063D3C(&qword_1003476F8);
      v55 = (void (*)(_QWORD *, _QWORD))Set.Index._asCocoa.modify(v61, v54);
      __CocoaSet.formIndex(after:isUnique:)(v56, isUniquelyReferenced_nonNull_native, v59);
      v55(v61, 0);
      --v20;
    }
    while (v20);
LABEL_37:
    sub_1000960E8(v62, v63, v64);
    swift_bridgeObjectRelease(v18);
    v31 = v65;
    goto LABEL_38;
  }
  __break(1u);
LABEL_43:
  __break(1u);
  return result;
}

uint64_t sub_1001442EC(void *a1)
{
  id v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  char v5;
  char v6;

  v1 = objc_msgSend(a1, "appletIdentifier");
  v2 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v4 = v3;

  sub_10007C23C(v2, v4);
  v6 = v5;
  sub_100063CD0(v2, v4);
  return v6 & 1;
}

uint64_t sub_10014436C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t inited;
  uint64_t v5;

  v1 = a1[4];
  sub_10006BA78(a1, a1[3]);
  v2 = type metadata accessor for DSKExpress.ExpressReport();
  inited = swift_initStackObject(v2, &v5);
  *(_BYTE *)(inited + 16) = 0;
  *(_QWORD *)(inited + 24) = &_swiftEmptySetSingleton;
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1001443D0()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  void *object;
  Swift::String v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  int v8;
  _QWORD v10[3];

  v10[0] = 0;
  v10[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(18);
  v1._countAndFlagsBits = 0x2073736572707845;
  v1._object = (void *)0xE800000000000000;
  String.append(_:)(v1);
  LOBYTE(v10[0]) = *(_BYTE *)(v0 + 16);
  v2._countAndFlagsBits = String.init<A>(describing:)(v10, &type metadata for DSKExpress.ExpressState);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._countAndFlagsBits = 0x207379656B20;
  v4._object = (void *)0xE600000000000000;
  String.append(_:)(v4);
  v5 = *(_QWORD *)(v0 + 24);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain(v5);
    sub_100192940(0, v6, 0);
    v7 = sub_1001F9BBC(v5);
    if (v7 < 0 || v7 >= 1 << *(_BYTE *)(v5 + 32))
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(v5 + 56 + (((unint64_t)v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
    {
      if (*(_DWORD *)(v5 + 36) == v8)
        __asm { BR              X8 }
LABEL_10:
      __break(1u);
      JUMPOUT(0x100144A04);
    }
    __break(1u);
    goto LABEL_10;
  }
  sub_1001BDAC8((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  return 0;
}

uint64_t sub_100144A30()
{
  return sub_1001443D0();
}

uint64_t sub_100144A50()
{
  _QWORD *v0;

  sub_100063CD0(v0[2], v0[3]);
  sub_100063CD0(v0[4], v0[5]);
  swift_bridgeObjectRelease(v0[6]);
  return swift_deallocClassInstance(v0, 56, 7);
}

Swift::Int sub_100144A84()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  sub_100063C8C(v2, v3);
  Data.hash(into:)(v5, v2, v3);
  sub_100063CD0(v2, v3);
  return Hasher._finalize()();
}

uint64_t sub_100144AE8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = *(_QWORD *)(v3 + 24);
  sub_100063C8C(v4, v5);
  Data.hash(into:)(a1, v4, v5);
  return sub_100063CD0(v4, v5);
}

Swift::Int sub_100144B38()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 24);
  sub_100063C8C(v1, v2);
  Data.hash(into:)(v4, v1, v2);
  sub_100063CD0(v1, v2);
  return Hasher._finalize()();
}

void sub_100144B98(uint64_t a1)
{
  sub_10007C23C(*(_QWORD *)(*(_QWORD *)a1 + 16), *(_QWORD *)(*(_QWORD *)a1 + 24));
}

uint64_t sub_100144BAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC10seserviced10DSKExpress_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced10DSKExpress_delegates));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced10DSKExpress_expressKeys));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced10DSKExpress_requestedConfigurationItems));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100144C2C()
{
  return type metadata accessor for DSKExpress(0);
}

uint64_t type metadata accessor for DSKExpress(uint64_t a1)
{
  uint64_t result;

  result = qword_1003474B0;
  if (!qword_1003474B0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DSKExpress);
  return result;
}

uint64_t sub_100144C70(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_10028AAB0;
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[4] = &unk_10028AAC8;
    v4[5] = &unk_10028AAB0;
    v4[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 7, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for DSKExpress.ExpressReport()
{
  return objc_opt_self(_TtCC10seserviced10DSKExpress13ExpressReport);
}

uint64_t type metadata accessor for DSKExpress.ExpressKey()
{
  return objc_opt_self(_TtCC10seserviced10DSKExpressP33_5E1BF5ABE2F270F795069B1450A84AB110ExpressKey);
}

uint64_t sub_100144D44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  _QWORD *v26;
  _QWORD aBlock[5];
  _QWORD *v28;

  v4 = v3;
  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v25 = qword_100354EE8;
  v18 = (_QWORD *)swift_allocObject(&unk_10030A9F8, 48, 7);
  v18[2] = v4;
  v18[3] = a1;
  v18[4] = a2;
  v18[5] = a3;
  aBlock[4] = sub_100147350;
  v28 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100071C98;
  aBlock[3] = &unk_10030AA10;
  v19 = _Block_copy(aBlock);
  swift_retain(v4);
  swift_bridgeObjectRetain(a2);
  v20 = swift_unknownObjectRetain(a3);
  static DispatchQoS.unspecified.getter(v20);
  v26 = _swiftEmptyArrayStorage;
  v21 = sub_1000639EC((unint64_t *)&qword_100344A20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v22 = sub_100063D3C((uint64_t *)&unk_100346200);
  v23 = sub_10007EF60((unint64_t *)&qword_100344A30, (uint64_t *)&unk_100346200, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v22, v23, v8, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v17, v12, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  return swift_release(v28);
}

void sub_100144F78(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  unint64_t v5;
  const char *v7;
  const char *string;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  os_log_type_t v25;
  uint8_t *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *oslog;
  uint64_t v46;
  uint64_t v47;

  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC10seserviced10DSKExpress_isRunning) != 1)
  {
    oslog = Logger.logObject.getter(a1);
    v25 = static os_log_type_t.error.getter(oslog, v24);
    if (os_log_type_enabled(oslog, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v26 = 0;
      v27 = "Not running";
LABEL_21:
      _os_log_impl((void *)&_mh_execute_header, oslog, v25, v27, v26, 2u);
      swift_slowDealloc(v26, -1, -1);
    }
LABEL_31:

    return;
  }
  v5 = a3;
  if ((a2 != 0xD00000000000001ELL || a3 != 0x80000001002BD990)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(a2, a3, 0xD00000000000001ELL, 0x80000001002BD990, 0) & 1) == 0)
  {
    v29 = swift_bridgeObjectRetain_n(v5, 2);
    oslog = Logger.logObject.getter(v29);
    v33 = static os_log_type_t.info.getter(oslog, v30, v31, v32);
    if (os_log_type_enabled(oslog, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(12, -1);
      v35 = swift_slowAlloc(32, -1);
      v47 = v35;
      *(_DWORD *)v34 = 136315138;
      swift_bridgeObjectRetain(v5);
      v46 = sub_1001C56EC(a2, v5, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v34 + 4, v34 + 12);
      swift_bridgeObjectRelease_n(v5, 3);
      v36 = "Ignoring stream %s";
LABEL_28:
      _os_log_impl((void *)&_mh_execute_header, oslog, v33, v36, v34, 0xCu);
      swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v34, -1, -1);

      return;
    }
LABEL_30:
    swift_bridgeObjectRelease_n(v5, 2);
    goto LABEL_31;
  }
  v7 = (const char *)XPC_EVENT_KEY_NAME.getter();
  string = xpc_dictionary_get_string(a4, v7);
  if (!string)
    goto LABEL_19;
  v9 = String.init(cString:)(string);
  v11 = v9;
  v5 = v10;
  if ((v9 != 0x64616F6C796150 || v10 != 0xE700000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(v9, v10, 0x64616F6C796150, 0xE700000000000000, 0) & 1) == 0)
  {
    swift_bridgeObjectRetain(v5);
    oslog = Logger.logObject.getter(v37);
    v33 = static os_log_type_t.info.getter(oslog, v38, v39, v40);
    if (os_log_type_enabled(oslog, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(12, -1);
      v35 = swift_slowAlloc(32, -1);
      v47 = v35;
      *(_DWORD *)v34 = 136315138;
      swift_bridgeObjectRetain(v5);
      v46 = sub_1001C56EC(v11, v5, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v34 + 4, v34 + 12);
      swift_bridgeObjectRelease_n(v5, 3);
      v36 = "Ignoring event string key %s";
      goto LABEL_28;
    }
    goto LABEL_30;
  }
  v12 = String.utf8CString.getter(v11, v5);
  swift_bridgeObjectRelease(v5);
  v13 = xpc_dictionary_get_string(a4, (const char *)(v12 + 32));
  string = (const char *)swift_release(v12);
  if (!v13)
  {
LABEL_19:
    oslog = Logger.logObject.getter(string);
    v25 = static os_log_type_t.error.getter(oslog, v28);
    if (os_log_type_enabled(oslog, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v26 = 0;
      v27 = "Bad XPC event dictionary";
      goto LABEL_21;
    }
    goto LABEL_31;
  }
  v15 = String.init(cString:)(v13);
  v5 = v14;
  if (v15 != 0xD00000000000002CLL || (v16 = 0x80000001002BDA10, v14 != 0x80000001002BDA10))
  {
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(v15, v14, 0xD00000000000002CLL, 0x80000001002BDA10, 0) & 1) != 0)
    {
      v16 = v5;
      goto LABEL_14;
    }
    swift_bridgeObjectRetain(v5);
    oslog = Logger.logObject.getter(v41);
    v33 = static os_log_type_t.info.getter(oslog, v42, v43, v44);
    if (os_log_type_enabled(oslog, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(12, -1);
      v35 = swift_slowAlloc(32, -1);
      v47 = v35;
      *(_DWORD *)v34 = 136315138;
      swift_bridgeObjectRetain(v5);
      v46 = sub_1001C56EC(v15, v5, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v34 + 4, v34 + 12);
      swift_bridgeObjectRelease_n(v5, 3);
      v36 = "Ignoring event string value %s";
      goto LABEL_28;
    }
    goto LABEL_30;
  }
LABEL_14:
  v17 = swift_bridgeObjectRelease(v16);
  v18 = Logger.logObject.getter(v17);
  v22 = static os_log_type_t.info.getter(v18, v19, v20, v21);
  if (os_log_type_enabled(v18, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v22, "Received UWB express config change event", v23, 2u);
    swift_slowDealloc(v23, -1, -1);
  }

  sub_10014217C();
}

uint64_t storeEnumTagSinglePayload for DSKExpress.ExpressState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1001455EC + 4 * byte_10028AA95[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100145620 + 4 * asc_10028AA90[v4]))();
}

uint64_t sub_100145620(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100145628(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100145630);
  return result;
}

uint64_t sub_10014563C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100145644);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100145648(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100145650(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DSKExpress.ExpressState()
{
  return &type metadata for DSKExpress.ExpressState;
}

unint64_t sub_100145670()
{
  unint64_t result;

  result = qword_1003476D8;
  if (!qword_1003476D8)
  {
    result = swift_getWitnessTable(&unk_10028AB90, &type metadata for DSKExpress.ExpressState);
    atomic_store(result, (unint64_t *)&qword_1003476D8);
  }
  return result;
}

uint64_t sub_1001456B4()
{
  return sub_1000639EC((unint64_t *)&unk_1003476E0, (uint64_t (*)(uint64_t))type metadata accessor for DSKExpress.ExpressKey, (uint64_t)&unk_10028ABB8);
}

uint64_t sub_1001456E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001456F4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1001456FC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;
  _QWORD v32[9];
  _OWORD v33[2];
  _OWORD v34[2];

  if (!a3)
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain(a4);
    return v4;
  }
  sub_100063D3C(&qword_1003461B0);
  result = static _DictionaryStorage.allocate(capacity:)(v5);
  v8 = result;
  v30 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 64;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
    }
    else
    {
      v14 = v10 + 1;
      if (__OFADD__(v10, 1))
        goto LABEL_40;
      if (v14 >= v30)
        return v8;
      v15 = a1[v14];
      ++v10;
      if (!v15)
      {
        v10 = v14 + 1;
        if (v14 + 1 >= v30)
          return v8;
        v15 = a1[v10];
        if (!v15)
        {
          v10 = v14 + 2;
          if (v14 + 2 >= v30)
            return v8;
          v15 = a1[v10];
          if (!v15)
          {
            v16 = v14 + 3;
            if (v16 >= v30)
              return v8;
            v15 = a1[v16];
            if (!v15)
            {
              while (1)
              {
                v10 = v16 + 1;
                if (__OFADD__(v16, 1))
                  goto LABEL_41;
                if (v10 >= v30)
                  return v8;
                v15 = a1[v10];
                ++v16;
                if (v15)
                  goto LABEL_24;
              }
            }
            v10 = v16;
          }
        }
      }
LABEL_24:
      v9 = (v15 - 1) & v15;
      v13 = __clz(__rbit64(v15)) + (v10 << 6);
    }
    v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
    v19 = *v17;
    v18 = v17[1];
    sub_100096CB0(*(_QWORD *)(v4 + 56) + 32 * v13, (uint64_t)v34);
    sub_10006C2B4(v34, v33);
    Hasher.init(_seed:)(v32);
    swift_bridgeObjectRetain(v18);
    String.hash(into:)(v32, v19, v18);
    result = Hasher._finalize()();
    v20 = -1 << *(_BYTE *)(v8 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(_QWORD *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v23);
    *v28 = v19;
    v28[1] = v18;
    result = (uint64_t)sub_10006C2B4(v33, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v23));
    ++*(_QWORD *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    if (!v5)
      return v8;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1001459BC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v13 = a4;
  v14 = a5;
  v9 = sub_1000960AC(&v12);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(v9, a2, a4);
  v10 = *a3;
  *(_QWORD *)(v10 + 16) = a1 + 1;
  return sub_1000DB160(&v12, v10 + 40 * a1 + 32);
}

uint64_t sub_100145A34(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  unint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8[2];
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = sub_100145B1C();
  result = Set.init(minimumCapacity:)(v2, &type metadata for Data, v3);
  v9 = result;
  if (v2)
  {
    v5 = (unint64_t *)(a1 + 40);
    do
    {
      v6 = *(v5 - 1);
      v7 = *v5;
      sub_100063C8C(v6, *v5);
      sub_1000C7A18(v8, v6, v7);
      sub_100063CD0(v8[0], v8[1]);
      v5 += 2;
      --v2;
    }
    while (v2);
    return v9;
  }
  return result;
}

uint64_t sub_100145ACC()
{
  uint64_t v0;

  sub_100063CD0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100145AF0(void *a1)
{
  return sub_1001442EC(a1);
}

uint64_t sub_100145AF8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_100145B1C()
{
  unint64_t result;

  result = qword_100347700;
  if (!qword_100347700)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_100347700);
  }
  return result;
}

void sub_100145B60(uint64_t a1, void (*a2)(uint64_t, unint64_t, _BYTE *))
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  _QWORD v17[2];
  _BYTE v18[40];
  uint64_t v19;

  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_5;
    }
    v14 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v7)
      goto LABEL_23;
    v15 = *(_QWORD *)(v19 + 8 * v14);
    ++v8;
    if (!v15)
    {
      v8 = v14 + 1;
      if (v14 + 1 >= v7)
        goto LABEL_23;
      v15 = *(_QWORD *)(v19 + 8 * v8);
      if (!v15)
      {
        v8 = v14 + 2;
        if (v14 + 2 >= v7)
          goto LABEL_23;
        v15 = *(_QWORD *)(v19 + 8 * v8);
        if (!v15)
        {
          v8 = v14 + 3;
          if (v14 + 3 >= v7)
            goto LABEL_23;
          v15 = *(_QWORD *)(v19 + 8 * v8);
          if (!v15)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v15 - 1) & v15;
    v10 = __clz(__rbit64(v15)) + (v8 << 6);
LABEL_5:
    v11 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v10);
    v12 = *v11;
    v13 = v11[1];
    sub_1000E504C(*(_QWORD *)(a1 + 56) + 40 * v10, (uint64_t)v18);
    v17[0] = v12;
    v17[1] = v13;
    sub_100063C8C(v12, v13);
    a2(v12, v13, v18);
    sub_100096700((uint64_t)v17, (uint64_t *)&unk_100347760);
  }
  v16 = v14 + 4;
  if (v16 >= v7)
  {
LABEL_23:
    swift_release(a1);
    return;
  }
  v15 = *(_QWORD *)(v19 + 8 * v16);
  if (v15)
  {
    v8 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    v8 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v8 >= v7)
      goto LABEL_23;
    v15 = *(_QWORD *)(v19 + 8 * v8);
    ++v16;
    if (v15)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
}

uint64_t sub_100145D2C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = __chkstk_darwin(v2, v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v8);
  v10 = (char *)&v21 - v9;
  v11 = sub_100063D3C((uint64_t *)&unk_1003465E0);
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(a1 + 16);
  v16 = sub_1000639EC((unint64_t *)&unk_100347730, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v22 = Set.init(minimumCapacity:)(v15, v2, v16);
  if (v15)
  {
    v17 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v21 = *(_QWORD *)(v3 + 72);
    v18 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    while (1)
    {
      v18(v14, v17, v2);
      v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
      v19(v14, 0, 1, v2);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v14, 1, v2) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v7, v14, v2);
      sub_1000C89FC((uint64_t)v10, v7);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v10, v2);
      v17 += v21;
      if (!--v15)
        goto LABEL_7;
    }
  }
  else
  {
    v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
LABEL_7:
    v19(v14, 1, 1, v2);
  }
  return v22;
}

uint64_t sub_100145EFC(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void **v11;
  void *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;

  v2 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v13 = a1;
    else
      v13 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v13);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = sub_10006C25C(0, (unint64_t *)&qword_100347710, SEEndPoint_ptr);
  v5 = sub_1000DCA84((unint64_t *)&qword_100346160, (unint64_t *)&qword_100347710, SEEndPoint_ptr);
  result = Set.init(minimumCapacity:)(v3, v4, v5);
  v15 = result;
  if (v2)
  {
    if (a1 < 0)
      v8 = a1;
    else
      v8 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v7 = _CocoaArrayWrapper.endIndex.getter(v8);
    result = swift_bridgeObjectRelease(a1);
    if (!v7)
      return v15;
  }
  else
  {
    v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return v15;
  }
  if (v7 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v7; ++i)
      {
        v10 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
        sub_1000C6E04((Swift::Int *)&v14, v10);

      }
    }
    else
    {
      v11 = (void **)(a1 + 32);
      do
      {
        v12 = *v11++;
        sub_1000C6E04((Swift::Int *)&v14, v12);

        --v7;
      }
      while (v7);
    }
    return v15;
  }
  __break(1u);
  return result;
}

uint64_t sub_100146074(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v12 = a1;
    else
      v12 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v12);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = type metadata accessor for Peer(0);
  v5 = sub_1000639EC((unint64_t *)&qword_100347720, type metadata accessor for Peer, (uint64_t)&unk_10028BFA8);
  result = Set.init(minimumCapacity:)(v3, v4, v5);
  v7 = result;
  v14 = result;
  if (v2)
  {
    if (a1 < 0)
      v9 = a1;
    else
      v9 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v8 = _CocoaArrayWrapper.endIndex.getter(v9);
    result = swift_bridgeObjectRelease(a1);
    if (!v8)
      return v7;
  }
  else
  {
    v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v8)
      return v7;
  }
  if (v8 >= 1)
  {
    for (i = 0; i != v8; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v11 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
      }
      else
      {
        v11 = *(_QWORD *)(a1 + 8 * i + 32);
        swift_retain(v11);
      }
      sub_1000C7708(&v13, v11);
      swift_release(v13);
    }
    return v14;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001461D0()
{
  uint64_t v0;

  sub_10006BA9C((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1001461F4()
{
  uint64_t v0;

  return sub_10014436C((_QWORD *)(v0 + 16));
}

void sub_1001461FC(void *a1, char a2)
{
  uint64_t v2;

  sub_100142B98(a1, a2 & 1, v2);
}

uint64_t sub_100146208(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void **v11;
  void *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;

  v2 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v13 = a1;
    else
      v13 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v13);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = sub_10006C25C(0, &qword_1003460F0, CBCharacteristic_ptr);
  v5 = sub_1000DCA84(&qword_100346218, &qword_1003460F0, CBCharacteristic_ptr);
  result = Set.init(minimumCapacity:)(v3, v4, v5);
  v15 = result;
  if (v2)
  {
    if (a1 < 0)
      v8 = a1;
    else
      v8 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v7 = _CocoaArrayWrapper.endIndex.getter(v8);
    result = swift_bridgeObjectRelease(a1);
    if (!v7)
      return v15;
  }
  else
  {
    v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return v15;
  }
  if (v7 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v7; ++i)
      {
        v10 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
        sub_1000C8FC8((Swift::Int *)&v14, v10);

      }
    }
    else
    {
      v11 = (void **)(a1 + 32);
      do
      {
        v12 = *v11++;
        sub_1000C8FC8((Swift::Int *)&v14, v12);

        --v7;
      }
      while (v7);
    }
    return v15;
  }
  __break(1u);
  return result;
}

uint64_t sub_100146380(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];
  __int128 v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = sub_100147384();
  result = Set.init(minimumCapacity:)(v2, &type metadata for DefaultAppInfo, v3);
  v11 = result;
  if (v2)
  {
    v5 = (_QWORD *)(a1 + 64);
    do
    {
      v6 = *(v5 - 3);
      v7 = *v5;
      v12[0] = *(v5 - 4);
      v12[1] = v6;
      v13 = *((_OWORD *)v5 - 1);
      v14 = v7;
      swift_bridgeObjectRetain(v6);
      swift_bridgeObjectRetain(v7);
      sub_1000C929C((uint64_t)v8, (uint64_t)v12);
      swift_bridgeObjectRelease(v9);
      swift_bridgeObjectRelease(v10);
      v5 += 5;
      --v2;
    }
    while (v2);
    return v11;
  }
  return result;
}

uint64_t sub_100146428(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v13 = a1;
    else
      v13 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v13);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = type metadata accessor for DSKExpress.ExpressKey();
  v5 = sub_1000639EC(&qword_100345218, (uint64_t (*)(uint64_t))type metadata accessor for DSKExpress.ExpressKey, (uint64_t)&unk_10028ABE0);
  result = Set.init(minimumCapacity:)(v3, v4, v5);
  v15 = result;
  if (v2)
  {
    if (a1 < 0)
      v8 = a1;
    else
      v8 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v7 = _CocoaArrayWrapper.endIndex.getter(v8);
    result = swift_bridgeObjectRelease(a1);
    if (!v7)
      return v15;
  }
  else
  {
    v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return v15;
  }
  if (v7 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v7; ++i)
      {
        v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
        sub_1000C9648(&v14, v10);
        swift_release(v14);
      }
    }
    else
    {
      v11 = (uint64_t *)(a1 + 32);
      do
      {
        v12 = *v11++;
        swift_retain(v12);
        sub_1000C9648(&v14, v12);
        swift_release(v14);
        --v7;
      }
      while (v7);
    }
    return v15;
  }
  __break(1u);
  return result;
}

_QWORD *sub_10014658C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[5];

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = type metadata accessor for DSKExpress.ExpressKey();
    v5 = sub_1000639EC(&qword_100345218, (uint64_t (*)(uint64_t))type metadata accessor for DSKExpress.ExpressKey, (uint64_t)&unk_10028ABE0);
    v6 = Set.Iterator.init(_cocoa:)(v28, v3, v4, v5);
    v1 = v28[0];
    v25 = v28[1];
    v8 = v28[2];
    v7 = v28[3];
    v9 = v28[4];
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v25 = a1 + 56;
    v8 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v9 = v12 & *(_QWORD *)(a1 + 56);
    v6 = (_QWORD *)swift_bridgeObjectRetain(a1);
    v7 = 0;
  }
  v24 = (unint64_t)(v8 + 64) >> 6;
  v13 = v7;
  if (v1 < 0)
  {
    v15 = __CocoaSet.Iterator.next()(v6);
    if (v15)
    {
      v16 = v15;
      v26 = v15;
      v17 = type metadata accessor for DSKExpress.ExpressKey();
      swift_unknownObjectRetain(v16);
      swift_dynamicCast(&v27, &v26, (char *)&type metadata for Swift.AnyObject + 8, v17, 7);
      v18 = v27;
      swift_unknownObjectRelease(v16);
      if (v18)
LABEL_28:
        __asm { BR              X10 }
    }
  }
  else
  {
    if (v9)
    {
      v14 = __clz(__rbit64(v9)) | (v7 << 6);
    }
    else
    {
      v19 = v7 + 1;
      if (__OFADD__(v13, 1))
      {
        __break(1u);
        JUMPOUT(0x100146C8CLL);
      }
      if (v19 >= v24)
        goto LABEL_35;
      v20 = *(_QWORD *)(v25 + 8 * v19);
      if (!v20)
      {
        v21 = v13 + 2;
        if (v13 + 2 >= v24)
          goto LABEL_35;
        v20 = *(_QWORD *)(v25 + 8 * v21);
        if (v20)
          goto LABEL_25;
        v21 = v13 + 3;
        if (v13 + 3 >= v24)
          goto LABEL_35;
        v20 = *(_QWORD *)(v25 + 8 * v21);
        if (v20)
          goto LABEL_25;
        v21 = v13 + 4;
        if (v13 + 4 >= v24)
          goto LABEL_35;
        v20 = *(_QWORD *)(v25 + 8 * v21);
        if (v20)
        {
LABEL_25:
          v19 = v21;
        }
        else
        {
          v19 = v13 + 5;
          if (v13 + 5 >= v24)
            goto LABEL_35;
          v20 = *(_QWORD *)(v25 + 8 * v19);
          if (!v20)
          {
            v22 = v13 + 6;
            do
            {
              if (v24 == v22)
                goto LABEL_35;
              v20 = *(_QWORD *)(v25 + 8 * v22++);
            }
            while (!v20);
            v19 = v22 - 1;
          }
        }
      }
      v14 = __clz(__rbit64(v20)) + (v19 << 6);
    }
    v18 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v14);
    swift_retain(v18);
    if (v18)
      goto LABEL_28;
  }
LABEL_35:
  sub_10007EF58(v1);
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100146D24(uint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  _QWORD v34[2];
  uint64_t v35;
  _QWORD v36[4];
  _QWORD *v37;

  v28 = (unint64_t *)result;
  v4 = 0;
  v30 = 0;
  v31 = a3 + 64;
  v5 = 1 << *(_BYTE *)(a3 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a3 + 64);
  v32 = (unint64_t)(v5 + 63) >> 6;
  v37 = a4;
  v29 = a4 + 7;
  while (1)
  {
    while (1)
    {
      if (v7)
      {
        v8 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v9 = v8 | (v4 << 6);
      }
      else
      {
        v10 = v4 + 1;
        if (__OFADD__(v4, 1))
          goto LABEL_42;
        if (v10 >= v32)
          return sub_1001456FC(v28, a2, v30, a3);
        v11 = *(_QWORD *)(v31 + 8 * v10);
        ++v4;
        if (!v11)
        {
          v4 = v10 + 1;
          if (v10 + 1 >= v32)
            return sub_1001456FC(v28, a2, v30, a3);
          v11 = *(_QWORD *)(v31 + 8 * v4);
          if (!v11)
          {
            v4 = v10 + 2;
            if (v10 + 2 >= v32)
              return sub_1001456FC(v28, a2, v30, a3);
            v11 = *(_QWORD *)(v31 + 8 * v4);
            if (!v11)
            {
              v12 = v10 + 3;
              if (v12 >= v32)
                return sub_1001456FC(v28, a2, v30, a3);
              v11 = *(_QWORD *)(v31 + 8 * v12);
              if (!v11)
              {
                while (1)
                {
                  v4 = v12 + 1;
                  if (__OFADD__(v12, 1))
                    goto LABEL_43;
                  if (v4 >= v32)
                    return sub_1001456FC(v28, a2, v30, a3);
                  v11 = *(_QWORD *)(v31 + 8 * v4);
                  ++v12;
                  if (v11)
                    goto LABEL_20;
                }
              }
              v4 = v12;
            }
          }
        }
LABEL_20:
        v7 = (v11 - 1) & v11;
        v9 = __clz(__rbit64(v11)) + (v4 << 6);
      }
      v13 = (uint64_t *)(*(_QWORD *)(a3 + 48) + 16 * v9);
      v14 = *v13;
      v15 = v13[1];
      sub_100096CB0(*(_QWORD *)(a3 + 56) + 32 * v9, (uint64_t)v36);
      v34[0] = v14;
      v34[1] = v15;
      sub_100096CB0((uint64_t)v36, (uint64_t)&v35);
      v16 = v37[2];
      if (v16)
        break;
LABEL_4:
      swift_bridgeObjectRetain_n(v15, 2);
      sub_100096700((uint64_t)v34, (uint64_t *)&unk_100347770);
      sub_10006BA9C(v36);
      result = swift_bridgeObjectRelease(v15);
    }
    v17 = v37[4];
    v18 = v37[5];
    if (v17 != v14 || v18 != v15)
    {
      result = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, v14, v15, 0);
      if ((result & 1) == 0)
        break;
    }
LABEL_37:
    swift_bridgeObjectRetain_n(v15, 2);
    sub_100096700((uint64_t)v34, (uint64_t *)&unk_100347770);
    sub_10006BA9C(v36);
    result = swift_bridgeObjectRelease(v15);
    *(unint64_t *)((char *)v28 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    if (__OFADD__(v30++, 1))
    {
      __break(1u);
      return sub_1001456FC(v28, a2, v30, a3);
    }
  }
  if (v16 == 1)
    goto LABEL_4;
  v20 = v29;
  v21 = 1;
  while (1)
  {
    v22 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    v23 = *(v20 - 1);
    v24 = *v20;
    if (v23 == v14 && v24 == v15)
      goto LABEL_37;
    result = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v24, v14, v15, 0);
    if ((result & 1) != 0)
      goto LABEL_37;
    v20 += 2;
    ++v21;
    if (v22 == v16)
      goto LABEL_4;
  }
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
  return result;
}

uint64_t sub_100146FF4(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  char v5;
  unsigned int v6;
  unint64_t v7;
  size_t v8;
  uint64_t isStackAllocationSafe;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v15;

  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v7 = (unint64_t)((1 << v5) + 63) >> 6;
  v8 = 8 * v7;
  isStackAllocationSafe = swift_bridgeObjectRetain_n(a2, 2);
  if (v6 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(v8, 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe, v10);
    bzero((char *)&v15 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    swift_bridgeObjectRetain(a2);
    v11 = sub_100146D24((uint64_t)&v15 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v7, a1, a2);
    v12 = swift_bridgeObjectRelease(a2);
    if (v2)
      swift_willThrow(v12);
    swift_bridgeObjectRelease_n(a2, 2);
  }
  else
  {
    v13 = (void *)swift_slowAlloc(v8, -1);
    bzero(v13, v8);
    swift_bridgeObjectRetain(a2);
    v11 = sub_100146D24((uint64_t)v13, v7, a1, a2);
    swift_bridgeObjectRelease(a2);
    swift_slowDealloc(v13, -1, -1);
    swift_bridgeObjectRelease_n(a2, 2);
  }
  return v11;
}

_QWORD *sub_1001471A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  result = _swiftEmptyArrayStorage;
  v16 = (unint64_t)_swiftEmptyArrayStorage;
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain(a1);
    for (i = 0; i != v5; ++i)
    {
      v9 = *(_QWORD *)(a1 + 8 * i + 32);
      v15 = v9;
      swift_bridgeObjectRetain(v9);
      sub_1001433C0(&v15, a2, &v14);
      if (v2)
      {
        swift_bridgeObjectRelease(a1);
        swift_bridgeObjectRelease(v9);
        return (_QWORD *)swift_bridgeObjectRelease(v16);
      }
      v10 = swift_bridgeObjectRelease(v9);
      v11 = v14;
      if (v14)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v10);
        v13 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v12 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v13 >= v12 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v11);
        specialized Array._endMutation()(v8);
      }
    }
    swift_bridgeObjectRelease(a1);
    return (_QWORD *)v16;
  }
  return result;
}

uint64_t sub_1001472D8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_100143880(a1, a2, a3, v3);
}

uint64_t sub_1001472E0()
{
  uint64_t v0;

  sub_10006BA9C((_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10014730C()
{
  uint64_t v0;

  return sub_100143B24((_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 56), *(_QWORD *)(v0 + 64));
}

uint64_t sub_10014731C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_unknownObjectRelease(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

void sub_100147350()
{
  uint64_t v0;

  sub_100144F78(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_10014735C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

unint64_t sub_100147384()
{
  unint64_t result;

  result = qword_1003477F8;
  if (!qword_1003477F8)
  {
    result = swift_getWitnessTable(&unk_100288F90, &type metadata for DefaultAppInfo);
    atomic_store(result, (unint64_t *)&qword_1003477F8);
  }
  return result;
}

uint64_t *sub_1001473E0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t, __n128);
  __n128 v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  void (*v39)(_QWORD *, _QWORD, uint64_t, int *, __n128);
  __n128 v40;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_100063C8C(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = *(int *)(a3 + 20);
    v10 = (uint64_t *)((char *)a1 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    v12 = (int *)type metadata accessor for CreationMetadata(0);
    v13 = *((_QWORD *)v12 - 1);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      v14 = sub_100063D3C(&qword_100347800);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v16 = v11[1];
      *v10 = *v11;
      v10[1] = v16;
      v17 = v12[5];
      v18 = (char *)v10 + v17;
      v19 = (char *)v11 + v17;
      v20 = type metadata accessor for Date(0);
      v21 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v20 - 8) + 16);
      v22 = swift_bridgeObjectRetain(v16);
      v21(v18, v19, v20, v22);
      v23 = v12[6];
      v24 = (_QWORD *)((char *)v10 + v23);
      v25 = (_QWORD *)((char *)v11 + v23);
      v26 = v25[1];
      *v24 = *v25;
      v24[1] = v26;
      v27 = v12[7];
      v28 = (_QWORD *)((char *)v10 + v27);
      v29 = (_QWORD *)((char *)v11 + v27);
      v30 = v29[1];
      *v28 = *v29;
      v28[1] = v30;
      v31 = v12[8];
      v32 = (_QWORD *)((char *)v10 + v31);
      v33 = (_QWORD *)((char *)v11 + v31);
      v34 = v33[1];
      *v32 = *v33;
      v32[1] = v34;
      v35 = v12[9];
      v36 = (_QWORD *)((char *)v10 + v35);
      v37 = (_QWORD *)((char *)v11 + v35);
      v38 = v37[1];
      *v36 = *v37;
      v36[1] = v38;
      v39 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *, __n128))(v13 + 56);
      swift_bridgeObjectRetain(v26);
      swift_bridgeObjectRetain(v30);
      swift_bridgeObjectRetain(v34);
      v40 = swift_bridgeObjectRetain(v38);
      v39(v10, 0, 1, v12, v40);
    }
  }
  return a1;
}

uint64_t type metadata accessor for CreationMetadata(uint64_t a1)
{
  return sub_10007BBF0(a1, qword_1003478F8, (uint64_t)&nominal type descriptor for CreationMetadata);
}

uint64_t sub_100147598(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  sub_100063CD0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = (int *)type metadata accessor for CreationMetadata(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v5 - 1) + 48))(v4, 1, v5);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v4 + 8));
    v7 = v4 + v5[5];
    v8 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
    swift_bridgeObjectRelease(*(_QWORD *)(v4 + v5[6] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v4 + v5[7] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v4 + v5[8] + 8));
    return swift_bridgeObjectRelease(*(_QWORD *)(v4 + v5[9] + 8));
  }
  return result;
}

uint64_t *sub_100147674(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t, __n128);
  __n128 v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  void (*v37)(_QWORD *, _QWORD, uint64_t, int *, __n128);
  __n128 v38;

  v6 = *a2;
  v7 = a2[1];
  sub_100063C8C(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = *(int *)(a3 + 20);
  v9 = (uint64_t *)((char *)a1 + v8);
  v10 = (uint64_t *)((char *)a2 + v8);
  v11 = (int *)type metadata accessor for CreationMetadata(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_100063D3C(&qword_100347800);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v14 = v10[1];
    *v9 = *v10;
    v9[1] = v14;
    v15 = v11[5];
    v16 = (char *)v9 + v15;
    v17 = (char *)v10 + v15;
    v18 = type metadata accessor for Date(0);
    v19 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v18 - 8) + 16);
    v20 = swift_bridgeObjectRetain(v14);
    v19(v16, v17, v18, v20);
    v21 = v11[6];
    v22 = (_QWORD *)((char *)v9 + v21);
    v23 = (_QWORD *)((char *)v10 + v21);
    v24 = v23[1];
    *v22 = *v23;
    v22[1] = v24;
    v25 = v11[7];
    v26 = (_QWORD *)((char *)v9 + v25);
    v27 = (_QWORD *)((char *)v10 + v25);
    v28 = v27[1];
    *v26 = *v27;
    v26[1] = v28;
    v29 = v11[8];
    v30 = (_QWORD *)((char *)v9 + v29);
    v31 = (_QWORD *)((char *)v10 + v29);
    v32 = v31[1];
    *v30 = *v31;
    v30[1] = v32;
    v33 = v11[9];
    v34 = (_QWORD *)((char *)v9 + v33);
    v35 = (_QWORD *)((char *)v10 + v33);
    v36 = v35[1];
    *v34 = *v35;
    v34[1] = v36;
    v37 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *, __n128))(v12 + 56);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v32);
    v38 = swift_bridgeObjectRetain(v36);
    v37(v9, 0, 1, v11, v38);
  }
  return a1;
}

uint64_t *sub_1001477EC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  int *v13;
  uint64_t v14;
  uint64_t (*v15)(_QWORD *, uint64_t, int *);
  int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t, __n128);
  __n128 v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  void (*v40)(_QWORD *, _QWORD, uint64_t, int *, __n128);
  __n128 v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;

  v6 = *a2;
  v7 = a2[1];
  sub_100063C8C(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_100063CD0(v8, v9);
  v10 = *(int *)(a3 + 20);
  v11 = (uint64_t *)((char *)a1 + v10);
  v12 = (uint64_t *)((char *)a2 + v10);
  v13 = (int *)type metadata accessor for CreationMetadata(0);
  v14 = *((_QWORD *)v13 - 1);
  v15 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v14 + 48);
  LODWORD(v7) = v15(v11, 1, v13);
  v16 = v15(v12, 1, v13);
  if (!(_DWORD)v7)
  {
    if (!v16)
    {
      *v11 = *v12;
      v44 = v12[1];
      v45 = v11[1];
      v11[1] = v44;
      swift_bridgeObjectRetain(v44);
      swift_bridgeObjectRelease(v45);
      v46 = v13[5];
      v47 = (char *)v11 + v46;
      v48 = (char *)v12 + v46;
      v49 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 24))(v47, v48, v49);
      v50 = v13[6];
      v51 = (_QWORD *)((char *)v11 + v50);
      v52 = (_QWORD *)((char *)v12 + v50);
      *v51 = *v52;
      v53 = v52[1];
      v54 = v51[1];
      v51[1] = v53;
      swift_bridgeObjectRetain(v53);
      swift_bridgeObjectRelease(v54);
      v55 = v13[7];
      v56 = (_QWORD *)((char *)v11 + v55);
      v57 = (_QWORD *)((char *)v12 + v55);
      *v56 = *v57;
      v58 = v57[1];
      v59 = v56[1];
      v56[1] = v58;
      swift_bridgeObjectRetain(v58);
      swift_bridgeObjectRelease(v59);
      v60 = v13[8];
      v61 = (_QWORD *)((char *)v11 + v60);
      v62 = (_QWORD *)((char *)v12 + v60);
      *v61 = *v62;
      v63 = v62[1];
      v64 = v61[1];
      v61[1] = v63;
      swift_bridgeObjectRetain(v63);
      swift_bridgeObjectRelease(v64);
      v65 = v13[9];
      v66 = (_QWORD *)((char *)v11 + v65);
      v67 = (_QWORD *)((char *)v12 + v65);
      *v66 = *v67;
      v68 = v67[1];
      v69 = v66[1];
      v66[1] = v68;
      swift_bridgeObjectRetain(v68);
      swift_bridgeObjectRelease(v69);
      return a1;
    }
    sub_1001247E8((uint64_t)v11, type metadata accessor for CreationMetadata);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v42 = sub_100063D3C(&qword_100347800);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    return a1;
  }
  *v11 = *v12;
  v17 = v12[1];
  v11[1] = v17;
  v18 = v13[5];
  v19 = (char *)v11 + v18;
  v20 = (char *)v12 + v18;
  v21 = type metadata accessor for Date(0);
  v22 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v21 - 8) + 16);
  v23 = swift_bridgeObjectRetain(v17);
  v22(v19, v20, v21, v23);
  v24 = v13[6];
  v25 = (_QWORD *)((char *)v11 + v24);
  v26 = (_QWORD *)((char *)v12 + v24);
  *v25 = *v26;
  v27 = v26[1];
  v25[1] = v27;
  v28 = v13[7];
  v29 = (_QWORD *)((char *)v11 + v28);
  v30 = (_QWORD *)((char *)v12 + v28);
  *v29 = *v30;
  v31 = v30[1];
  v29[1] = v31;
  v32 = v13[8];
  v33 = (_QWORD *)((char *)v11 + v32);
  v34 = (_QWORD *)((char *)v12 + v32);
  *v33 = *v34;
  v35 = v34[1];
  v33[1] = v35;
  v36 = v13[9];
  v37 = (_QWORD *)((char *)v11 + v36);
  v38 = (_QWORD *)((char *)v12 + v36);
  *v37 = *v38;
  v39 = v38[1];
  v37[1] = v39;
  v40 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *, __n128))(v14 + 56);
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRetain(v35);
  v41 = swift_bridgeObjectRetain(v39);
  v40(v11, 0, 1, v13, v41);
  return a1;
}

_OWORD *sub_100147AC0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (_OWORD *)((char *)a1 + v4);
  v6 = (_OWORD *)((char *)a2 + v4);
  v7 = (int *)type metadata accessor for CreationMetadata(0);
  v8 = *((_QWORD *)v7 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v8 + 48))(v6, 1, v7))
  {
    v9 = sub_100063D3C(&qword_100347800);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    *v5 = *v6;
    v10 = v7[5];
    v11 = (char *)v5 + v10;
    v12 = (char *)v6 + v10;
    v13 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
    *(_OWORD *)((char *)v5 + v7[6]) = *(_OWORD *)((char *)v6 + v7[6]);
    *(_OWORD *)((char *)v5 + v7[7]) = *(_OWORD *)((char *)v6 + v7[7]);
    *(_OWORD *)((char *)v5 + v7[8]) = *(_OWORD *)((char *)v6 + v7[8]);
    *(_OWORD *)((char *)v5 + v7[9]) = *(_OWORD *)((char *)v6 + v7[9]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

uint64_t *sub_100147BD4(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  int *v11;
  uint64_t v12;
  uint64_t (*v13)(_QWORD *, uint64_t, int *);
  int v14;
  int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_100063CD0(v6, v7);
  v8 = *(int *)(a3 + 20);
  v9 = (uint64_t *)((char *)a1 + v8);
  v10 = (_QWORD *)((char *)a2 + v8);
  v11 = (int *)type metadata accessor for CreationMetadata(0);
  v12 = *((_QWORD *)v11 - 1);
  v13 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      v22 = v10[1];
      v23 = v9[1];
      *v9 = *v10;
      v9[1] = v22;
      swift_bridgeObjectRelease(v23);
      v24 = v11[5];
      v25 = (char *)v9 + v24;
      v26 = (char *)v10 + v24;
      v27 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 40))(v25, v26, v27);
      v28 = v11[6];
      v29 = (_QWORD *)((char *)v9 + v28);
      v30 = (_QWORD *)((char *)v10 + v28);
      v32 = *v30;
      v31 = v30[1];
      v33 = v29[1];
      *v29 = v32;
      v29[1] = v31;
      swift_bridgeObjectRelease(v33);
      v34 = v11[7];
      v35 = (_QWORD *)((char *)v9 + v34);
      v36 = (_QWORD *)((char *)v10 + v34);
      v38 = *v36;
      v37 = v36[1];
      v39 = v35[1];
      *v35 = v38;
      v35[1] = v37;
      swift_bridgeObjectRelease(v39);
      v40 = v11[8];
      v41 = (_QWORD *)((char *)v9 + v40);
      v42 = (_QWORD *)((char *)v10 + v40);
      v44 = *v42;
      v43 = v42[1];
      v45 = v41[1];
      *v41 = v44;
      v41[1] = v43;
      swift_bridgeObjectRelease(v45);
      v46 = v11[9];
      v47 = (_QWORD *)((char *)v9 + v46);
      v48 = (_QWORD *)((char *)v10 + v46);
      v50 = *v48;
      v49 = v48[1];
      v51 = v47[1];
      *v47 = v50;
      v47[1] = v49;
      swift_bridgeObjectRelease(v51);
      return a1;
    }
    sub_1001247E8((uint64_t)v9, type metadata accessor for CreationMetadata);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v20 = sub_100063D3C(&qword_100347800);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  *(_OWORD *)v9 = *(_OWORD *)v10;
  v16 = v11[5];
  v17 = (char *)v9 + v16;
  v18 = (char *)v10 + v16;
  v19 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
  *(_OWORD *)((char *)v9 + v11[6]) = *(_OWORD *)((char *)v10 + v11[6]);
  *(_OWORD *)((char *)v9 + v11[7]) = *(_OWORD *)((char *)v10 + v11[7]);
  *(_OWORD *)((char *)v9 + v11[8]) = *(_OWORD *)((char *)v10 + v11[8]);
  *(_OWORD *)((char *)v9 + v11[9]) = *(_OWORD *)((char *)v10 + v11[9]);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  return a1;
}

uint64_t sub_100147DD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100147DE4);
}

uint64_t sub_100147DE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = sub_100063D3C(&qword_100347800);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_100147E70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100147E7C);
}

char *sub_100147E7C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v7 = sub_100063D3C(&qword_100347800);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for SESTLKRecordData(uint64_t a1)
{
  return sub_10007BBF0(a1, (uint64_t *)&unk_100347860, (uint64_t)&nominal type descriptor for SESTLKRecordData);
}

void sub_100147F10(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_10028AC98;
  sub_10014BB90(319, (unint64_t *)&qword_100347870, type metadata accessor for CreationMetadata);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

uint64_t *sub_100147F94(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v29 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v29 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v29);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Date(0);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = a3[7];
    v15 = (uint64_t *)((char *)v4 + v13);
    v16 = (uint64_t *)((char *)a2 + v13);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    v18 = (uint64_t *)((char *)v4 + v14);
    v19 = (uint64_t *)((char *)a2 + v14);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    v21 = a3[8];
    v22 = a3[9];
    v23 = (uint64_t *)((char *)v4 + v21);
    v24 = (uint64_t *)((char *)a2 + v21);
    v25 = v24[1];
    *v23 = *v24;
    v23[1] = v25;
    v26 = (uint64_t *)((char *)v4 + v22);
    v27 = (uint64_t *)((char *)a2 + v22);
    v28 = v27[1];
    *v26 = *v27;
    v26[1] = v28;
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v28);
  }
  return v4;
}

uint64_t sub_1001480A4(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + a2[5];
  v5 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[9] + 8));
}

_QWORD *sub_100148134(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  v12 = a3[6];
  v13 = a3[7];
  v14 = (_QWORD *)((char *)a1 + v12);
  v15 = (_QWORD *)((char *)a2 + v12);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = (_QWORD *)((char *)a1 + v13);
  v18 = (_QWORD *)((char *)a2 + v13);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  v20 = a3[8];
  v21 = a3[9];
  v22 = (_QWORD *)((char *)a1 + v20);
  v23 = (_QWORD *)((char *)a2 + v20);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  v25 = (_QWORD *)((char *)a1 + v21);
  v26 = (_QWORD *)((char *)a2 + v21);
  v27 = v26[1];
  *v25 = *v26;
  v25[1] = v27;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v27);
  return a1;
}

_QWORD *sub_100148218(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = a3[6];
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  *v13 = *v14;
  v15 = v14[1];
  v16 = v13[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  v17 = a3[7];
  v18 = (_QWORD *)((char *)a1 + v17);
  v19 = (_QWORD *)((char *)a2 + v17);
  *v18 = *v19;
  v20 = v19[1];
  v21 = v18[1];
  v18[1] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  v22 = a3[8];
  v23 = (_QWORD *)((char *)a1 + v22);
  v24 = (_QWORD *)((char *)a2 + v22);
  *v23 = *v24;
  v25 = v24[1];
  v26 = v23[1];
  v23[1] = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease(v26);
  v27 = a3[9];
  v28 = (_QWORD *)((char *)a1 + v27);
  v29 = (_QWORD *)((char *)a2 + v27);
  *v28 = *v29;
  v30 = v29[1];
  v31 = v28[1];
  v28[1] = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  return a1;
}

_OWORD *sub_10014834C(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  v11 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  *(_OWORD *)((char *)a1 + v11) = *(_OWORD *)((char *)a2 + v11);
  return a1;
}

_QWORD *sub_1001483E0(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = a3[6];
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v16 = *v14;
  v15 = v14[1];
  v17 = v13[1];
  *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease(v17);
  v18 = a3[7];
  v19 = (_QWORD *)((char *)a1 + v18);
  v20 = (_QWORD *)((char *)a2 + v18);
  v22 = *v20;
  v21 = v20[1];
  v23 = v19[1];
  *v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease(v23);
  v24 = a3[8];
  v25 = (_QWORD *)((char *)a1 + v24);
  v26 = (_QWORD *)((char *)a2 + v24);
  v28 = *v26;
  v27 = v26[1];
  v29 = v25[1];
  *v25 = v28;
  v25[1] = v27;
  swift_bridgeObjectRelease(v29);
  v30 = a3[9];
  v31 = (_QWORD *)((char *)a1 + v30);
  v32 = (_QWORD *)((char *)a2 + v30);
  v34 = *v32;
  v33 = v32[1];
  v35 = v31[1];
  *v31 = v34;
  v31[1] = v33;
  swift_bridgeObjectRelease(v35);
  return a1;
}

uint64_t sub_1001484C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001484D0);
}

uint64_t sub_1001484D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_10014854C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100148558);
}

uint64_t sub_100148558(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1001485CC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = &unk_10028ACC8;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_10028ACC8;
    v4[3] = &unk_10028ACC8;
    v4[4] = &unk_10028ACE0;
    v4[5] = &unk_10028ACE0;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *sub_100148650(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  void (*v33)(char *, char *, uint64_t, __n128);
  __n128 v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  void (*v51)(_QWORD *, _QWORD, uint64_t, int *, __n128);
  __n128 v52;
  uint64_t v53;
  uint64_t *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  char *v71;
  char *v72;
  unsigned int (*v73)(_QWORD *, uint64_t, int *);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  void (*v80)(char *, char *, uint64_t, __n128);
  __n128 v81;
  uint64_t v82;
  _QWORD *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  char *v96;
  uint64_t v97;
  void (*v98)(_QWORD *, _QWORD, uint64_t, int *, __n128);
  uint64_t v99;
  __n128 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  void (*v115)(char *, char *, uint64_t, __n128);
  __n128 v116;
  uint64_t v117;
  _QWORD *v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  uint64_t v132;
  void (*v133)(_QWORD *, _QWORD, uint64_t, int *, __n128);
  __n128 v134;
  uint64_t v136;
  uint64_t v137;
  unsigned int (*v138)(char *, uint64_t, uint64_t);
  uint64_t v139;
  unsigned int (*v140)(_QWORD *, uint64_t, int *);
  uint64_t v141;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v22);
  }
  else
  {
    v6 = a3;
    v7 = *a2;
    v8 = a2[1];
    sub_100063C8C(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = a2[2];
    v10 = a2[3];
    sub_100063C8C(v9, v10);
    a1[2] = v9;
    a1[3] = v10;
    v11 = a2[4];
    v12 = a2[5];
    sub_100063C8C(v11, v12);
    a1[4] = v11;
    a1[5] = v12;
    v13 = a2[6];
    v14 = a2[7];
    sub_100063C8C(v13, v14);
    a1[6] = v13;
    a1[7] = v14;
    v15 = type metadata accessor for SESPeerIdentityData(0);
    v16 = *(int *)(v15 + 32);
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = type metadata accessor for Date(0);
    v20 = *(_QWORD *)(v19 - 8);
    v138 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
    if (v138(v18, 1, v19))
    {
      v21 = sub_100063D3C(&qword_100346C00);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    v141 = v20;
    v139 = v15;
    v23 = *(int *)(v15 + 36);
    v24 = (uint64_t *)((char *)a1 + v23);
    v25 = (uint64_t *)((char *)a2 + v23);
    v26 = (int *)type metadata accessor for CreationMetadata(0);
    v27 = *((_QWORD *)v26 - 1);
    v140 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v27 + 48);
    if (v140(v25, 1, v26))
    {
      v28 = sub_100063D3C(&qword_100347800);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      v29 = v25[1];
      *v24 = *v25;
      v24[1] = v29;
      v30 = v26[5];
      v31 = (char *)v24 + v30;
      v32 = (char *)v25 + v30;
      v136 = v6;
      v33 = *(void (**)(char *, char *, uint64_t, __n128))(v141 + 16);
      v34 = swift_bridgeObjectRetain(v29);
      v33(v31, v32, v19, v34);
      v35 = v26[6];
      v36 = (_QWORD *)((char *)v24 + v35);
      v37 = (_QWORD *)((char *)v25 + v35);
      v38 = v37[1];
      *v36 = *v37;
      v36[1] = v38;
      v39 = v26[7];
      v40 = (_QWORD *)((char *)v24 + v39);
      v41 = (_QWORD *)((char *)v25 + v39);
      v42 = v41[1];
      *v40 = *v41;
      v40[1] = v42;
      v43 = v26[8];
      v44 = (_QWORD *)((char *)v24 + v43);
      v45 = (_QWORD *)((char *)v25 + v43);
      v46 = v45[1];
      *v44 = *v45;
      v44[1] = v46;
      v47 = v26[9];
      v48 = (_QWORD *)((char *)v24 + v47);
      v49 = (_QWORD *)((char *)v25 + v47);
      v50 = v49[1];
      *v48 = *v49;
      v48[1] = v50;
      v51 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *, __n128))(v27 + 56);
      swift_bridgeObjectRetain(v38);
      swift_bridgeObjectRetain(v42);
      swift_bridgeObjectRetain(v46);
      v52 = swift_bridgeObjectRetain(v50);
      v51(v24, 0, 1, v26, v52);
      v6 = v136;
    }
    v137 = v27;
    v53 = *(int *)(v6 + 20);
    v54 = (uint64_t *)((char *)a1 + v53);
    v55 = (char *)a2 + v53;
    v56 = *(uint64_t *)((char *)a2 + v53);
    v57 = *(uint64_t *)((char *)a2 + v53 + 8);
    sub_100063C8C(v56, v57);
    *v54 = v56;
    v54[1] = v57;
    v58 = *((_QWORD *)v55 + 2);
    v59 = *((_QWORD *)v55 + 3);
    sub_100063C8C(v58, v59);
    v54[2] = v58;
    v54[3] = v59;
    v60 = *((_QWORD *)v55 + 4);
    v61 = *((_QWORD *)v55 + 5);
    sub_100063C8C(v60, v61);
    v54[4] = v60;
    v54[5] = v61;
    v62 = *((_QWORD *)v55 + 6);
    v63 = *((_QWORD *)v55 + 7);
    sub_100063C8C(v62, v63);
    v54[6] = v62;
    v54[7] = v63;
    v64 = v139;
    v65 = *(int *)(v139 + 32);
    v66 = (char *)v54 + v65;
    v67 = &v55[v65];
    if (v138(&v55[v65], 1, v19))
    {
      v68 = sub_100063D3C(&qword_100346C00);
      memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v141 + 16))(v66, v67, v19);
      v64 = v139;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v141 + 56))(v66, 0, 1, v19);
    }
    v69 = *(int *)(v64 + 36);
    v70 = (uint64_t *)((char *)v54 + v69);
    v71 = &v55[v69];
    v72 = &v55[v69];
    v73 = v140;
    if (v140(v72, 1, v26))
    {
      v74 = sub_100063D3C(&qword_100347800);
      memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
    }
    else
    {
      v75 = *((_QWORD *)v71 + 1);
      *v70 = *(_QWORD *)v71;
      v70[1] = v75;
      v76 = v26[5];
      v77 = (char *)v70 + v76;
      v78 = &v71[v76];
      v79 = v6;
      v80 = *(void (**)(char *, char *, uint64_t, __n128))(v141 + 16);
      v81 = swift_bridgeObjectRetain(v75);
      v80(v77, v78, v19, v81);
      v82 = v26[6];
      v83 = (_QWORD *)((char *)v70 + v82);
      v84 = &v71[v82];
      v85 = *((_QWORD *)v84 + 1);
      *v83 = *(_QWORD *)v84;
      v83[1] = v85;
      v86 = v26[7];
      v87 = (_QWORD *)((char *)v70 + v86);
      v88 = &v71[v86];
      v89 = *((_QWORD *)v88 + 1);
      *v87 = *(_QWORD *)v88;
      v87[1] = v89;
      v90 = v26[8];
      v91 = (_QWORD *)((char *)v70 + v90);
      v92 = &v71[v90];
      v93 = *((_QWORD *)v92 + 1);
      *v91 = *(_QWORD *)v92;
      v91[1] = v93;
      v94 = v26[9];
      v95 = (_QWORD *)((char *)v70 + v94);
      v96 = &v71[v94];
      v97 = *((_QWORD *)v96 + 1);
      *v95 = *(_QWORD *)v96;
      v95[1] = v97;
      v98 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *, __n128))(v137 + 56);
      swift_bridgeObjectRetain(v85);
      swift_bridgeObjectRetain(v89);
      v99 = v93;
      v73 = v140;
      swift_bridgeObjectRetain(v99);
      v100 = swift_bridgeObjectRetain(v97);
      v98(v70, 0, 1, v26, v100);
      v6 = v79;
    }
    v101 = *(int *)(v6 + 24);
    v102 = v6;
    v103 = (uint64_t *)((char *)a1 + v101);
    v104 = (uint64_t *)((char *)a2 + v101);
    v105 = *v104;
    v106 = v104[1];
    sub_100063C8C(*v104, v106);
    *v103 = v105;
    v103[1] = v106;
    v107 = *(int *)(v102 + 28);
    v108 = (uint64_t *)((char *)a1 + v107);
    v109 = (uint64_t *)((char *)a2 + v107);
    if (v73(v109, 1, v26))
    {
      v110 = sub_100063D3C(&qword_100347800);
      memcpy(v108, v109, *(_QWORD *)(*(_QWORD *)(v110 - 8) + 64));
    }
    else
    {
      v111 = v109[1];
      *v108 = *v109;
      v108[1] = v111;
      v112 = v26[5];
      v113 = (char *)v108 + v112;
      v114 = (char *)v109 + v112;
      v115 = *(void (**)(char *, char *, uint64_t, __n128))(v141 + 16);
      v116 = swift_bridgeObjectRetain(v111);
      v115(v113, v114, v19, v116);
      v117 = v26[6];
      v118 = (_QWORD *)((char *)v108 + v117);
      v119 = (_QWORD *)((char *)v109 + v117);
      v120 = v119[1];
      *v118 = *v119;
      v118[1] = v120;
      v121 = v26[7];
      v122 = (_QWORD *)((char *)v108 + v121);
      v123 = (_QWORD *)((char *)v109 + v121);
      v124 = v123[1];
      *v122 = *v123;
      v122[1] = v124;
      v125 = v26[8];
      v126 = (_QWORD *)((char *)v108 + v125);
      v127 = (_QWORD *)((char *)v109 + v125);
      v128 = v127[1];
      *v126 = *v127;
      v126[1] = v128;
      v129 = v26[9];
      v130 = (_QWORD *)((char *)v108 + v129);
      v131 = (_QWORD *)((char *)v109 + v129);
      v132 = v131[1];
      *v130 = *v131;
      v130[1] = v132;
      v133 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *, __n128))(v137 + 56);
      swift_bridgeObjectRetain(v120);
      swift_bridgeObjectRetain(v124);
      swift_bridgeObjectRetain(v128);
      v134 = swift_bridgeObjectRetain(v132);
      v133(v108, 0, 1, v26, v134);
    }
  }
  return a1;
}

uint64_t type metadata accessor for SESPeerIdentityData(uint64_t a1)
{
  return sub_10007BBF0(a1, (uint64_t *)&unk_100347A30, (uint64_t)&nominal type descriptor for SESPeerIdentityData);
}

uint64_t sub_100148BF8(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  int *v10;
  unsigned int (*v11)(uint64_t, uint64_t, int *);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  sub_100063CD0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  sub_100063CD0(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  sub_100063CD0(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  sub_100063CD0(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  v4 = type metadata accessor for SESPeerIdentityData(0);
  v5 = a1 + *(int *)(v4 + 32);
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  v9 = a1 + *(int *)(v4 + 36);
  v10 = (int *)type metadata accessor for CreationMetadata(0);
  v11 = *(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v10 - 1) + 48);
  if (!v11(v9, 1, v10))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v9 + 8));
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9 + v10[5], v6);
    swift_bridgeObjectRelease(*(_QWORD *)(v9 + v10[6] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v9 + v10[7] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v9 + v10[8] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v9 + v10[9] + 8));
  }
  v12 = a1 + a2[5];
  sub_100063CD0(*(_QWORD *)v12, *(_QWORD *)(v12 + 8));
  sub_100063CD0(*(_QWORD *)(v12 + 16), *(_QWORD *)(v12 + 24));
  sub_100063CD0(*(_QWORD *)(v12 + 32), *(_QWORD *)(v12 + 40));
  sub_100063CD0(*(_QWORD *)(v12 + 48), *(_QWORD *)(v12 + 56));
  v13 = v12 + *(int *)(v4 + 32);
  if (!v8(v13, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v13, v6);
  v14 = v12 + *(int *)(v4 + 36);
  if (!v11(v14, 1, v10))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v14 + 8));
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v14 + v10[5], v6);
    swift_bridgeObjectRelease(*(_QWORD *)(v14 + v10[6] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v14 + v10[7] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v14 + v10[8] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v14 + v10[9] + 8));
  }
  sub_100063CD0(*(_QWORD *)(a1 + a2[6]), *(_QWORD *)(a1 + a2[6] + 8));
  v15 = a1 + a2[7];
  result = ((uint64_t (*)(uint64_t, uint64_t, int *))v11)(v15, 1, v10);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v15 + 8));
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v15 + v10[5], v6);
    swift_bridgeObjectRelease(*(_QWORD *)(v15 + v10[6] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v15 + v10[7] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v15 + v10[8] + 8));
    return swift_bridgeObjectRelease(*(_QWORD *)(v15 + v10[9] + 8));
  }
  return result;
}

uint64_t *sub_100148EA0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  void (*v31)(char *, char *, uint64_t, __n128);
  __n128 v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  void (*v49)(_QWORD *, _QWORD, uint64_t, int *, __n128);
  __n128 v50;
  uint64_t v51;
  uint64_t *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  char *v69;
  char *v70;
  unsigned int (*v71)(_QWORD *, uint64_t, int *);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  void (*v78)(char *, char *, uint64_t, __n128);
  __n128 v79;
  uint64_t v80;
  _QWORD *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  char *v94;
  uint64_t v95;
  void (*v96)(_QWORD *, _QWORD, uint64_t, int *, __n128);
  uint64_t v97;
  __n128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  void (*v113)(char *, char *, uint64_t, __n128);
  __n128 v114;
  uint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  uint64_t v130;
  void (*v131)(_QWORD *, _QWORD, uint64_t, int *, __n128);
  __n128 v132;
  uint64_t v134;
  uint64_t v135;
  unsigned int (*v136)(char *, uint64_t, uint64_t);
  uint64_t v137;
  unsigned int (*v138)(_QWORD *, uint64_t, int *);
  uint64_t v139;

  v6 = *a2;
  v7 = a2[1];
  sub_100063C8C(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = a2[2];
  v9 = a2[3];
  sub_100063C8C(v8, v9);
  a1[2] = v8;
  a1[3] = v9;
  v10 = a2[4];
  v11 = a2[5];
  sub_100063C8C(v10, v11);
  a1[4] = v10;
  a1[5] = v11;
  v12 = a2[6];
  v13 = a2[7];
  sub_100063C8C(v12, v13);
  a1[6] = v12;
  a1[7] = v13;
  v14 = type metadata accessor for SESPeerIdentityData(0);
  v15 = *(int *)(v14 + 32);
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = type metadata accessor for Date(0);
  v19 = *(_QWORD *)(v18 - 8);
  v136 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
  if (v136(v17, 1, v18))
  {
    v20 = sub_100063D3C(&qword_100346C00);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  v139 = v19;
  v137 = v14;
  v21 = *(int *)(v14 + 36);
  v22 = (uint64_t *)((char *)a1 + v21);
  v23 = (uint64_t *)((char *)a2 + v21);
  v24 = (int *)type metadata accessor for CreationMetadata(0);
  v25 = *((_QWORD *)v24 - 1);
  v138 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v25 + 48);
  if (v138(v23, 1, v24))
  {
    v26 = sub_100063D3C(&qword_100347800);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    v27 = v23[1];
    *v22 = *v23;
    v22[1] = v27;
    v28 = v24[5];
    v29 = (char *)v22 + v28;
    v30 = (char *)v23 + v28;
    v134 = a3;
    v31 = *(void (**)(char *, char *, uint64_t, __n128))(v139 + 16);
    v32 = swift_bridgeObjectRetain(v27);
    v31(v29, v30, v18, v32);
    v33 = v24[6];
    v34 = (_QWORD *)((char *)v22 + v33);
    v35 = (_QWORD *)((char *)v23 + v33);
    v36 = v35[1];
    *v34 = *v35;
    v34[1] = v36;
    v37 = v24[7];
    v38 = (_QWORD *)((char *)v22 + v37);
    v39 = (_QWORD *)((char *)v23 + v37);
    v40 = v39[1];
    *v38 = *v39;
    v38[1] = v40;
    v41 = v24[8];
    v42 = (_QWORD *)((char *)v22 + v41);
    v43 = (_QWORD *)((char *)v23 + v41);
    v44 = v43[1];
    *v42 = *v43;
    v42[1] = v44;
    v45 = v24[9];
    v46 = (_QWORD *)((char *)v22 + v45);
    v47 = (_QWORD *)((char *)v23 + v45);
    v48 = v47[1];
    *v46 = *v47;
    v46[1] = v48;
    v49 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *, __n128))(v25 + 56);
    swift_bridgeObjectRetain(v36);
    swift_bridgeObjectRetain(v40);
    swift_bridgeObjectRetain(v44);
    v50 = swift_bridgeObjectRetain(v48);
    v49(v22, 0, 1, v24, v50);
    a3 = v134;
  }
  v135 = v25;
  v51 = *(int *)(a3 + 20);
  v52 = (uint64_t *)((char *)a1 + v51);
  v53 = (char *)a2 + v51;
  v54 = *(uint64_t *)((char *)a2 + v51);
  v55 = *(uint64_t *)((char *)a2 + v51 + 8);
  sub_100063C8C(v54, v55);
  *v52 = v54;
  v52[1] = v55;
  v56 = *((_QWORD *)v53 + 2);
  v57 = *((_QWORD *)v53 + 3);
  sub_100063C8C(v56, v57);
  v52[2] = v56;
  v52[3] = v57;
  v58 = *((_QWORD *)v53 + 4);
  v59 = *((_QWORD *)v53 + 5);
  sub_100063C8C(v58, v59);
  v52[4] = v58;
  v52[5] = v59;
  v60 = *((_QWORD *)v53 + 6);
  v61 = *((_QWORD *)v53 + 7);
  sub_100063C8C(v60, v61);
  v52[6] = v60;
  v52[7] = v61;
  v62 = v137;
  v63 = *(int *)(v137 + 32);
  v64 = (char *)v52 + v63;
  v65 = &v53[v63];
  if (v136(&v53[v63], 1, v18))
  {
    v66 = sub_100063D3C(&qword_100346C00);
    memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v139 + 16))(v64, v65, v18);
    v62 = v137;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v139 + 56))(v64, 0, 1, v18);
  }
  v67 = *(int *)(v62 + 36);
  v68 = (uint64_t *)((char *)v52 + v67);
  v69 = &v53[v67];
  v70 = &v53[v67];
  v71 = v138;
  if (v138(v70, 1, v24))
  {
    v72 = sub_100063D3C(&qword_100347800);
    memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
  }
  else
  {
    v73 = *((_QWORD *)v69 + 1);
    *v68 = *(_QWORD *)v69;
    v68[1] = v73;
    v74 = v24[5];
    v75 = (char *)v68 + v74;
    v76 = &v69[v74];
    v77 = a3;
    v78 = *(void (**)(char *, char *, uint64_t, __n128))(v139 + 16);
    v79 = swift_bridgeObjectRetain(v73);
    v78(v75, v76, v18, v79);
    v80 = v24[6];
    v81 = (_QWORD *)((char *)v68 + v80);
    v82 = &v69[v80];
    v83 = *((_QWORD *)v82 + 1);
    *v81 = *(_QWORD *)v82;
    v81[1] = v83;
    v84 = v24[7];
    v85 = (_QWORD *)((char *)v68 + v84);
    v86 = &v69[v84];
    v87 = *((_QWORD *)v86 + 1);
    *v85 = *(_QWORD *)v86;
    v85[1] = v87;
    v88 = v24[8];
    v89 = (_QWORD *)((char *)v68 + v88);
    v90 = &v69[v88];
    v91 = *((_QWORD *)v90 + 1);
    *v89 = *(_QWORD *)v90;
    v89[1] = v91;
    v92 = v24[9];
    v93 = (_QWORD *)((char *)v68 + v92);
    v94 = &v69[v92];
    v95 = *((_QWORD *)v94 + 1);
    *v93 = *(_QWORD *)v94;
    v93[1] = v95;
    v96 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *, __n128))(v135 + 56);
    swift_bridgeObjectRetain(v83);
    swift_bridgeObjectRetain(v87);
    v97 = v91;
    v71 = v138;
    swift_bridgeObjectRetain(v97);
    v98 = swift_bridgeObjectRetain(v95);
    v96(v68, 0, 1, v24, v98);
    a3 = v77;
  }
  v99 = *(int *)(a3 + 24);
  v100 = a3;
  v101 = (uint64_t *)((char *)a1 + v99);
  v102 = (uint64_t *)((char *)a2 + v99);
  v103 = *v102;
  v104 = v102[1];
  sub_100063C8C(*v102, v104);
  *v101 = v103;
  v101[1] = v104;
  v105 = *(int *)(v100 + 28);
  v106 = (uint64_t *)((char *)a1 + v105);
  v107 = (uint64_t *)((char *)a2 + v105);
  if (v71(v107, 1, v24))
  {
    v108 = sub_100063D3C(&qword_100347800);
    memcpy(v106, v107, *(_QWORD *)(*(_QWORD *)(v108 - 8) + 64));
  }
  else
  {
    v109 = v107[1];
    *v106 = *v107;
    v106[1] = v109;
    v110 = v24[5];
    v111 = (char *)v106 + v110;
    v112 = (char *)v107 + v110;
    v113 = *(void (**)(char *, char *, uint64_t, __n128))(v139 + 16);
    v114 = swift_bridgeObjectRetain(v109);
    v113(v111, v112, v18, v114);
    v115 = v24[6];
    v116 = (_QWORD *)((char *)v106 + v115);
    v117 = (_QWORD *)((char *)v107 + v115);
    v118 = v117[1];
    *v116 = *v117;
    v116[1] = v118;
    v119 = v24[7];
    v120 = (_QWORD *)((char *)v106 + v119);
    v121 = (_QWORD *)((char *)v107 + v119);
    v122 = v121[1];
    *v120 = *v121;
    v120[1] = v122;
    v123 = v24[8];
    v124 = (_QWORD *)((char *)v106 + v123);
    v125 = (_QWORD *)((char *)v107 + v123);
    v126 = v125[1];
    *v124 = *v125;
    v124[1] = v126;
    v127 = v24[9];
    v128 = (_QWORD *)((char *)v106 + v127);
    v129 = (_QWORD *)((char *)v107 + v127);
    v130 = v129[1];
    *v128 = *v129;
    v128[1] = v130;
    v131 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *, __n128))(v135 + 56);
    swift_bridgeObjectRetain(v118);
    swift_bridgeObjectRetain(v122);
    swift_bridgeObjectRetain(v126);
    v132 = swift_bridgeObjectRetain(v130);
    v131(v106, 0, 1, v24, v132);
  }
  return a1;
}

