uint64_t *sub_100149408(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t, uint64_t);
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  int *v33;
  uint64_t (*v34)(char *, uint64_t, int *);
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  void (*v41)(char *, char *, uint64_t, __n128);
  __n128 v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  void (*v59)(char *, _QWORD, uint64_t, int *, __n128);
  uint64_t v60;
  __n128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  _QWORD *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t (*v88)(char *, uint64_t, int *);
  uint64_t v89;
  char *v90;
  char *v91;
  int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  void (*v99)(char *, char *, uint64_t, __n128);
  __n128 v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  void (*v117)(char *, _QWORD, uint64_t, int *, __n128);
  uint64_t v118;
  __n128 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t *v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  void (*v136)(char *, char *, uint64_t, __n128);
  __n128 v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  void (*v154)(char *, _QWORD, uint64_t, int *, __n128);
  __n128 v155;
  uint64_t v156;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t (*v225)(char *, uint64_t, int *);
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;

  v6 = *a2;
  v7 = a2[1];
  sub_100063C8C(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_100063CD0(v8, v9);
  v10 = a2[2];
  v11 = a2[3];
  sub_100063C8C(v10, v11);
  v12 = a1[2];
  v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  sub_100063CD0(v12, v13);
  v14 = a2[4];
  v15 = a2[5];
  sub_100063C8C(v14, v15);
  v16 = a1[4];
  v17 = a1[5];
  a1[4] = v14;
  a1[5] = v15;
  sub_100063CD0(v16, v17);
  v18 = a2[6];
  v19 = a2[7];
  sub_100063C8C(v18, v19);
  v20 = a1[6];
  v21 = a1[7];
  a1[6] = v18;
  a1[7] = v19;
  sub_100063CD0(v20, v21);
  v228 = type metadata accessor for SESPeerIdentityData(0);
  v22 = *(int *)(v228 + 32);
  v23 = (char *)a1 + v22;
  v24 = (char *)a2 + v22;
  v25 = type metadata accessor for Date(0);
  v227 = *(_QWORD *)(v25 - 8);
  v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v227 + 48);
  v27 = v26(v23, 1, v25);
  v28 = v26(v24, 1, v25);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v227 + 16))(v23, v24, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v227 + 56))(v23, 0, 1, v25);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v28)
  {
    (*(void (**)(char *, uint64_t))(v227 + 8))(v23, v25);
LABEL_6:
    v29 = sub_100063D3C(&qword_100346C00);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v227 + 24))(v23, v24, v25);
LABEL_7:
  v30 = *(int *)(v228 + 36);
  v31 = (char *)a1 + v30;
  v32 = (char *)a2 + v30;
  v33 = (int *)type metadata accessor for CreationMetadata(0);
  v224 = *((_QWORD *)v33 - 1);
  v34 = *(uint64_t (**)(char *, uint64_t, int *))(v224 + 48);
  v35 = v34(v31, 1, v33);
  v225 = v34;
  v36 = v34(v32, 1, v33);
  v226 = a3;
  if (v35)
  {
    if (!v36)
    {
      *(_QWORD *)v31 = *(_QWORD *)v32;
      v37 = *((_QWORD *)v32 + 1);
      *((_QWORD *)v31 + 1) = v37;
      v38 = v33[5];
      v39 = &v31[v38];
      v40 = &v32[v38];
      v41 = *(void (**)(char *, char *, uint64_t, __n128))(v227 + 16);
      v42 = swift_bridgeObjectRetain(v37);
      v41(v39, v40, v25, v42);
      v43 = v33[6];
      v44 = &v31[v43];
      v45 = &v32[v43];
      *(_QWORD *)v44 = *(_QWORD *)v45;
      v46 = *((_QWORD *)v45 + 1);
      *((_QWORD *)v44 + 1) = v46;
      v47 = v33[7];
      v48 = &v31[v47];
      v49 = &v32[v47];
      *(_QWORD *)v48 = *(_QWORD *)v49;
      v50 = *((_QWORD *)v49 + 1);
      *((_QWORD *)v48 + 1) = v50;
      v51 = v33[8];
      v52 = &v31[v51];
      v53 = &v32[v51];
      *(_QWORD *)v52 = *(_QWORD *)v53;
      v54 = *((_QWORD *)v53 + 1);
      *((_QWORD *)v52 + 1) = v54;
      v55 = v33[9];
      v56 = &v31[v55];
      v57 = &v32[v55];
      *(_QWORD *)v56 = *(_QWORD *)v57;
      v58 = *((_QWORD *)v57 + 1);
      *((_QWORD *)v56 + 1) = v58;
      v59 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *, __n128))(v224 + 56);
      swift_bridgeObjectRetain(v46);
      swift_bridgeObjectRetain(v50);
      v60 = v54;
      a3 = v226;
      swift_bridgeObjectRetain(v60);
      v61 = swift_bridgeObjectRetain(v58);
      v59(v31, 0, 1, v33, v61);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v36)
  {
    sub_1001247E8((uint64_t)v31, type metadata accessor for CreationMetadata);
LABEL_12:
    v62 = sub_100063D3C(&qword_100347800);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
    goto LABEL_13;
  }
  *(_QWORD *)v31 = *(_QWORD *)v32;
  v158 = *((_QWORD *)v32 + 1);
  v159 = *((_QWORD *)v31 + 1);
  *((_QWORD *)v31 + 1) = v158;
  swift_bridgeObjectRetain(v158);
  swift_bridgeObjectRelease(v159);
  (*(void (**)(char *, char *, uint64_t))(v227 + 24))(&v31[v33[5]], &v32[v33[5]], v25);
  v160 = v33[6];
  v161 = &v31[v160];
  v162 = &v32[v160];
  *(_QWORD *)v161 = *(_QWORD *)v162;
  v163 = *((_QWORD *)v162 + 1);
  v164 = *((_QWORD *)v161 + 1);
  *((_QWORD *)v161 + 1) = v163;
  swift_bridgeObjectRetain(v163);
  swift_bridgeObjectRelease(v164);
  v165 = v33[7];
  v166 = &v31[v165];
  v167 = &v32[v165];
  *(_QWORD *)v166 = *(_QWORD *)v167;
  v168 = *((_QWORD *)v167 + 1);
  v169 = *((_QWORD *)v166 + 1);
  *((_QWORD *)v166 + 1) = v168;
  swift_bridgeObjectRetain(v168);
  swift_bridgeObjectRelease(v169);
  v170 = v33[8];
  v171 = &v31[v170];
  v172 = &v32[v170];
  *(_QWORD *)v171 = *(_QWORD *)v172;
  v173 = *((_QWORD *)v172 + 1);
  v174 = *((_QWORD *)v171 + 1);
  *((_QWORD *)v171 + 1) = v173;
  swift_bridgeObjectRetain(v173);
  swift_bridgeObjectRelease(v174);
  v175 = v33[9];
  v176 = &v31[v175];
  v177 = &v32[v175];
  *(_QWORD *)v176 = *(_QWORD *)v177;
  v178 = *((_QWORD *)v177 + 1);
  v179 = *((_QWORD *)v176 + 1);
  *((_QWORD *)v176 + 1) = v178;
  swift_bridgeObjectRetain(v178);
  swift_bridgeObjectRelease(v179);
LABEL_13:
  v63 = *(int *)(a3 + 20);
  v64 = (uint64_t *)((char *)a1 + v63);
  v65 = (uint64_t *)((char *)a2 + v63);
  v66 = *(uint64_t *)((char *)a2 + v63);
  v67 = *(uint64_t *)((char *)a2 + v63 + 8);
  sub_100063C8C(v66, v67);
  v68 = *v64;
  v69 = v64[1];
  *v64 = v66;
  v64[1] = v67;
  sub_100063CD0(v68, v69);
  v70 = v65[2];
  v71 = v65[3];
  sub_100063C8C(v70, v71);
  v72 = v64[2];
  v73 = v64[3];
  v64[2] = v70;
  v64[3] = v71;
  sub_100063CD0(v72, v73);
  v74 = v65[4];
  v75 = v65[5];
  sub_100063C8C(v74, v75);
  v76 = v64[4];
  v77 = v64[5];
  v64[4] = v74;
  v64[5] = v75;
  sub_100063CD0(v76, v77);
  v78 = v65[6];
  v79 = v65[7];
  sub_100063C8C(v78, v79);
  v80 = v64[6];
  v81 = v64[7];
  v64[6] = v78;
  v64[7] = v79;
  sub_100063CD0(v80, v81);
  v82 = *(int *)(v228 + 32);
  v83 = (char *)v64 + v82;
  v84 = (char *)v65 + v82;
  v85 = v26((char *)v64 + v82, 1, v25);
  v86 = v26(v84, 1, v25);
  if (v85)
  {
    if (!v86)
    {
      (*(void (**)(char *, char *, uint64_t))(v227 + 16))(v83, v84, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v227 + 56))(v83, 0, 1, v25);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v86)
  {
    (*(void (**)(char *, uint64_t))(v227 + 8))(v83, v25);
LABEL_18:
    v87 = sub_100063D3C(&qword_100346C00);
    memcpy(v83, v84, *(_QWORD *)(*(_QWORD *)(v87 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v227 + 24))(v83, v84, v25);
LABEL_19:
  v88 = v225;
  v89 = *(int *)(v228 + 36);
  v90 = (char *)v64 + v89;
  v91 = (char *)v65 + v89;
  v92 = v225(v90, 1, v33);
  v93 = v225(v91, 1, v33);
  if (v92)
  {
    v94 = v226;
    if (!v93)
    {
      *(_QWORD *)v90 = *(_QWORD *)v91;
      v95 = *((_QWORD *)v91 + 1);
      *((_QWORD *)v90 + 1) = v95;
      v96 = v33[5];
      v97 = &v90[v96];
      v98 = &v91[v96];
      v99 = *(void (**)(char *, char *, uint64_t, __n128))(v227 + 16);
      v100 = swift_bridgeObjectRetain(v95);
      v99(v97, v98, v25, v100);
      v101 = v33[6];
      v102 = &v90[v101];
      v103 = &v91[v101];
      *(_QWORD *)v102 = *(_QWORD *)v103;
      v104 = *((_QWORD *)v103 + 1);
      *((_QWORD *)v102 + 1) = v104;
      v105 = v33[7];
      v106 = &v90[v105];
      v107 = &v91[v105];
      *(_QWORD *)v106 = *(_QWORD *)v107;
      v108 = *((_QWORD *)v107 + 1);
      *((_QWORD *)v106 + 1) = v108;
      v109 = v33[8];
      v110 = &v90[v109];
      v111 = &v91[v109];
      *(_QWORD *)v110 = *(_QWORD *)v111;
      v112 = *((_QWORD *)v111 + 1);
      *((_QWORD *)v110 + 1) = v112;
      v113 = v33[9];
      v114 = &v90[v113];
      v115 = &v91[v113];
      *(_QWORD *)v114 = *(_QWORD *)v115;
      v116 = *((_QWORD *)v115 + 1);
      *((_QWORD *)v114 + 1) = v116;
      v117 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *, __n128))(v224 + 56);
      swift_bridgeObjectRetain(v104);
      swift_bridgeObjectRetain(v108);
      v118 = v112;
      v88 = v225;
      swift_bridgeObjectRetain(v118);
      v119 = swift_bridgeObjectRetain(v116);
      v117(v90, 0, 1, v33, v119);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  v94 = v226;
  if (v93)
  {
    sub_1001247E8((uint64_t)v90, type metadata accessor for CreationMetadata);
LABEL_24:
    v120 = sub_100063D3C(&qword_100347800);
    memcpy(v90, v91, *(_QWORD *)(*(_QWORD *)(v120 - 8) + 64));
    goto LABEL_25;
  }
  *(_QWORD *)v90 = *(_QWORD *)v91;
  v180 = *((_QWORD *)v91 + 1);
  v181 = *((_QWORD *)v90 + 1);
  *((_QWORD *)v90 + 1) = v180;
  swift_bridgeObjectRetain(v180);
  swift_bridgeObjectRelease(v181);
  (*(void (**)(char *, char *, uint64_t))(v227 + 24))(&v90[v33[5]], &v91[v33[5]], v25);
  v182 = v33[6];
  v183 = &v90[v182];
  v184 = &v91[v182];
  *(_QWORD *)v183 = *(_QWORD *)v184;
  v185 = *((_QWORD *)v184 + 1);
  v186 = *((_QWORD *)v183 + 1);
  *((_QWORD *)v183 + 1) = v185;
  swift_bridgeObjectRetain(v185);
  swift_bridgeObjectRelease(v186);
  v187 = v33[7];
  v188 = &v90[v187];
  v189 = &v91[v187];
  *(_QWORD *)v188 = *(_QWORD *)v189;
  v190 = *((_QWORD *)v189 + 1);
  v191 = *((_QWORD *)v188 + 1);
  *((_QWORD *)v188 + 1) = v190;
  swift_bridgeObjectRetain(v190);
  swift_bridgeObjectRelease(v191);
  v192 = v33[8];
  v193 = &v90[v192];
  v194 = &v91[v192];
  *(_QWORD *)v193 = *(_QWORD *)v194;
  v195 = *((_QWORD *)v194 + 1);
  v196 = *((_QWORD *)v193 + 1);
  *((_QWORD *)v193 + 1) = v195;
  swift_bridgeObjectRetain(v195);
  swift_bridgeObjectRelease(v196);
  v197 = v33[9];
  v198 = &v90[v197];
  v199 = &v91[v197];
  *(_QWORD *)v198 = *(_QWORD *)v199;
  v200 = *((_QWORD *)v199 + 1);
  v201 = *((_QWORD *)v198 + 1);
  *((_QWORD *)v198 + 1) = v200;
  swift_bridgeObjectRetain(v200);
  swift_bridgeObjectRelease(v201);
LABEL_25:
  v121 = *(int *)(v94 + 24);
  v122 = (uint64_t *)((char *)a1 + v121);
  v123 = (uint64_t *)((char *)a2 + v121);
  v124 = *v123;
  v125 = v123[1];
  sub_100063C8C(*v123, v125);
  v126 = *v122;
  v127 = v122[1];
  *v122 = v124;
  v122[1] = v125;
  sub_100063CD0(v126, v127);
  v128 = *(int *)(v94 + 28);
  v129 = (char *)a1 + v128;
  v130 = (char *)a2 + v128;
  LODWORD(v124) = v88((char *)a1 + v128, 1, v33);
  v131 = v88(v130, 1, v33);
  if (!(_DWORD)v124)
  {
    if (!v131)
    {
      *(_QWORD *)v129 = *(_QWORD *)v130;
      v202 = *((_QWORD *)v130 + 1);
      v203 = *((_QWORD *)v129 + 1);
      *((_QWORD *)v129 + 1) = v202;
      swift_bridgeObjectRetain(v202);
      swift_bridgeObjectRelease(v203);
      (*(void (**)(char *, char *, uint64_t))(v227 + 24))(&v129[v33[5]], &v130[v33[5]], v25);
      v204 = v33[6];
      v205 = &v129[v204];
      v206 = &v130[v204];
      *(_QWORD *)v205 = *(_QWORD *)v206;
      v207 = *((_QWORD *)v206 + 1);
      v208 = *((_QWORD *)v205 + 1);
      *((_QWORD *)v205 + 1) = v207;
      swift_bridgeObjectRetain(v207);
      swift_bridgeObjectRelease(v208);
      v209 = v33[7];
      v210 = &v129[v209];
      v211 = &v130[v209];
      *(_QWORD *)v210 = *(_QWORD *)v211;
      v212 = *((_QWORD *)v211 + 1);
      v213 = *((_QWORD *)v210 + 1);
      *((_QWORD *)v210 + 1) = v212;
      swift_bridgeObjectRetain(v212);
      swift_bridgeObjectRelease(v213);
      v214 = v33[8];
      v215 = &v129[v214];
      v216 = &v130[v214];
      *(_QWORD *)v215 = *(_QWORD *)v216;
      v217 = *((_QWORD *)v216 + 1);
      v218 = *((_QWORD *)v215 + 1);
      *((_QWORD *)v215 + 1) = v217;
      swift_bridgeObjectRetain(v217);
      swift_bridgeObjectRelease(v218);
      v219 = v33[9];
      v220 = &v129[v219];
      v221 = &v130[v219];
      *(_QWORD *)v220 = *(_QWORD *)v221;
      v222 = *((_QWORD *)v221 + 1);
      v223 = *((_QWORD *)v220 + 1);
      *((_QWORD *)v220 + 1) = v222;
      swift_bridgeObjectRetain(v222);
      swift_bridgeObjectRelease(v223);
      return a1;
    }
    sub_1001247E8((uint64_t)v129, type metadata accessor for CreationMetadata);
    goto LABEL_30;
  }
  if (v131)
  {
LABEL_30:
    v156 = sub_100063D3C(&qword_100347800);
    memcpy(v129, v130, *(_QWORD *)(*(_QWORD *)(v156 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v129 = *(_QWORD *)v130;
  v132 = *((_QWORD *)v130 + 1);
  *((_QWORD *)v129 + 1) = v132;
  v133 = v33[5];
  v134 = &v129[v133];
  v135 = &v130[v133];
  v136 = *(void (**)(char *, char *, uint64_t, __n128))(v227 + 16);
  v137 = swift_bridgeObjectRetain(v132);
  v136(v134, v135, v25, v137);
  v138 = v33[6];
  v139 = &v129[v138];
  v140 = &v130[v138];
  *(_QWORD *)v139 = *(_QWORD *)v140;
  v141 = *((_QWORD *)v140 + 1);
  *((_QWORD *)v139 + 1) = v141;
  v142 = v33[7];
  v143 = &v129[v142];
  v144 = &v130[v142];
  *(_QWORD *)v143 = *(_QWORD *)v144;
  v145 = *((_QWORD *)v144 + 1);
  *((_QWORD *)v143 + 1) = v145;
  v146 = v33[8];
  v147 = &v129[v146];
  v148 = &v130[v146];
  *(_QWORD *)v147 = *(_QWORD *)v148;
  v149 = *((_QWORD *)v148 + 1);
  *((_QWORD *)v147 + 1) = v149;
  v150 = v33[9];
  v151 = &v129[v150];
  v152 = &v130[v150];
  *(_QWORD *)v151 = *(_QWORD *)v152;
  v153 = *((_QWORD *)v152 + 1);
  *((_QWORD *)v151 + 1) = v153;
  v154 = *(void (**)(char *, _QWORD, uint64_t, int *, __n128))(v224 + 56);
  swift_bridgeObjectRetain(v141);
  swift_bridgeObjectRetain(v145);
  swift_bridgeObjectRetain(v149);
  v155 = swift_bridgeObjectRetain(v153);
  v154(v129, 0, 1, v33, v155);
  return a1;
}

_OWORD *sub_100149E10(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  _OWORD *v40;
  uint64_t v41;
  unsigned int (*v43)(char *, uint64_t, int *);
  uint64_t v44;
  uint64_t v45;

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  v7 = type metadata accessor for SESPeerIdentityData(0);
  v8 = *(int *)(v7 + 32);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v13(v10, 1, v11))
  {
    v14 = sub_100063D3C(&qword_100346C00);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v15 = *(int *)(v7 + 36);
  v16 = (_OWORD *)((char *)a1 + v15);
  v17 = (_OWORD *)((char *)a2 + v15);
  v18 = (int *)type metadata accessor for CreationMetadata(0);
  v19 = *((_QWORD *)v18 - 1);
  v43 = *(unsigned int (**)(char *, uint64_t, int *))(v19 + 48);
  v44 = v19;
  v45 = v12;
  if (v43((char *)v17, 1, v18))
  {
    v20 = sub_100063D3C(&qword_100347800);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    *v16 = *v17;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))((char *)v16 + v18[5], (char *)v17 + v18[5], v11);
    *(_OWORD *)((char *)v16 + v18[6]) = *(_OWORD *)((char *)v17 + v18[6]);
    *(_OWORD *)((char *)v16 + v18[7]) = *(_OWORD *)((char *)v17 + v18[7]);
    *(_OWORD *)((char *)v16 + v18[8]) = *(_OWORD *)((char *)v17 + v18[8]);
    *(_OWORD *)((char *)v16 + v18[9]) = *(_OWORD *)((char *)v17 + v18[9]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v19 + 56))(v16, 0, 1, v18);
  }
  v21 = *(int *)(a3 + 20);
  v22 = (_OWORD *)((char *)a1 + v21);
  v23 = (char *)a2 + v21;
  v24 = *(_OWORD *)((char *)a2 + v21 + 16);
  *v22 = *(_OWORD *)((char *)a2 + v21);
  v22[1] = v24;
  v25 = *(_OWORD *)((char *)a2 + v21 + 48);
  v22[2] = *(_OWORD *)((char *)a2 + v21 + 32);
  v22[3] = v25;
  v26 = *(int *)(v7 + 32);
  v27 = (char *)v22 + v26;
  v28 = &v23[v26];
  if (v13(&v23[v26], 1, v11))
  {
    v29 = sub_100063D3C(&qword_100346C00);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v27, v28, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v27, 0, 1, v11);
  }
  v30 = *(int *)(v7 + 36);
  v31 = (_OWORD *)((char *)v22 + v30);
  v32 = &v23[v30];
  if (v43(&v23[v30], 1, v18))
  {
    v33 = sub_100063D3C(&qword_100347800);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    v35 = v45;
    v34 = a3;
    v36 = v44;
  }
  else
  {
    *v31 = *(_OWORD *)v32;
    v35 = v45;
    (*(void (**)(char *, char *, uint64_t))(v45 + 32))((char *)v31 + v18[5], &v32[v18[5]], v11);
    *(_OWORD *)((char *)v31 + v18[6]) = *(_OWORD *)&v32[v18[6]];
    *(_OWORD *)((char *)v31 + v18[7]) = *(_OWORD *)&v32[v18[7]];
    *(_OWORD *)((char *)v31 + v18[8]) = *(_OWORD *)&v32[v18[8]];
    *(_OWORD *)((char *)v31 + v18[9]) = *(_OWORD *)&v32[v18[9]];
    v36 = v44;
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v44 + 56))(v31, 0, 1, v18);
    v34 = a3;
  }
  v37 = *(int *)(v34 + 24);
  v38 = *(int *)(v34 + 28);
  *(_OWORD *)((char *)a1 + v37) = *(_OWORD *)((char *)a2 + v37);
  v39 = (_OWORD *)((char *)a1 + v38);
  v40 = (_OWORD *)((char *)a2 + v38);
  if (v43((char *)v40, 1, v18))
  {
    v41 = sub_100063D3C(&qword_100347800);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  }
  else
  {
    *v39 = *v40;
    (*(void (**)(char *, char *, uint64_t))(v35 + 32))((char *)v39 + v18[5], (char *)v40 + v18[5], v11);
    *(_OWORD *)((char *)v39 + v18[6]) = *(_OWORD *)((char *)v40 + v18[6]);
    *(_OWORD *)((char *)v39 + v18[7]) = *(_OWORD *)((char *)v40 + v18[7]);
    *(_OWORD *)((char *)v39 + v18[8]) = *(_OWORD *)((char *)v40 + v18[8]);
    *(_OWORD *)((char *)v39 + v18[9]) = *(_OWORD *)((char *)v40 + v18[9]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v36 + 56))(v39, 0, 1, v18);
  }
  return a1;
}

uint64_t *sub_10014A1D4(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t (*v18)(char *, uint64_t, uint64_t);
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  int *v25;
  uint64_t (*v26)(char *, uint64_t, int *);
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _OWORD *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  int v90;
  int v91;
  uint64_t v92;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_100063CD0(v6, v7);
  v8 = a1[2];
  v9 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_100063CD0(v8, v9);
  v10 = a1[4];
  v11 = a1[5];
  *((_OWORD *)a1 + 2) = a2[2];
  sub_100063CD0(v10, v11);
  v12 = a1[6];
  v13 = a1[7];
  *((_OWORD *)a1 + 3) = a2[3];
  sub_100063CD0(v12, v13);
  v150 = type metadata accessor for SESPeerIdentityData(0);
  v14 = *(int *)(v150 + 32);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for Date(0);
  v149 = *(_QWORD *)(v17 - 8);
  v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v149 + 48);
  v19 = v18(v15, 1, v17);
  v20 = v18(v16, 1, v17);
  v148 = v17;
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v149 + 32))(v15, v16, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v149 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v20)
  {
    (*(void (**)(char *, uint64_t))(v149 + 8))(v15, v17);
LABEL_6:
    v21 = sub_100063D3C(&qword_100346C00);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v149 + 40))(v15, v16, v17);
LABEL_7:
  v22 = *(int *)(v150 + 36);
  v23 = (char *)a1 + v22;
  v24 = (char *)a2 + v22;
  v25 = (int *)type metadata accessor for CreationMetadata(0);
  v146 = *((_QWORD *)v25 - 1);
  v26 = *(uint64_t (**)(char *, uint64_t, int *))(v146 + 48);
  v27 = v26(v23, 1, v25);
  v28 = v26(v24, 1, v25);
  if (v27)
  {
    if (!v28)
    {
      *(_OWORD *)v23 = *(_OWORD *)v24;
      v29 = v17;
      (*(void (**)(char *, char *, uint64_t))(v149 + 32))(&v23[v25[5]], &v24[v25[5]], v17);
      *(_OWORD *)&v23[v25[6]] = *(_OWORD *)&v24[v25[6]];
      *(_OWORD *)&v23[v25[7]] = *(_OWORD *)&v24[v25[7]];
      *(_OWORD *)&v23[v25[8]] = *(_OWORD *)&v24[v25[8]];
      *(_OWORD *)&v23[v25[9]] = *(_OWORD *)&v24[v25[9]];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v146 + 56))(v23, 0, 1, v25);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v28)
  {
    sub_1001247E8((uint64_t)v23, type metadata accessor for CreationMetadata);
LABEL_12:
    v30 = sub_100063D3C(&qword_100347800);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    v29 = v17;
    goto LABEL_13;
  }
  v52 = *((_QWORD *)v24 + 1);
  v53 = *((_QWORD *)v23 + 1);
  *(_QWORD *)v23 = *(_QWORD *)v24;
  *((_QWORD *)v23 + 1) = v52;
  swift_bridgeObjectRelease(v53);
  v29 = v17;
  (*(void (**)(char *, char *, uint64_t))(v149 + 40))(&v23[v25[5]], &v24[v25[5]], v17);
  v54 = v25[6];
  v55 = &v23[v54];
  v56 = &v24[v54];
  v58 = *(_QWORD *)v56;
  v57 = *((_QWORD *)v56 + 1);
  v59 = *((_QWORD *)v55 + 1);
  *(_QWORD *)v55 = v58;
  *((_QWORD *)v55 + 1) = v57;
  swift_bridgeObjectRelease(v59);
  v60 = v25[7];
  v61 = &v23[v60];
  v62 = &v24[v60];
  v64 = *(_QWORD *)v62;
  v63 = *((_QWORD *)v62 + 1);
  v65 = *((_QWORD *)v61 + 1);
  *(_QWORD *)v61 = v64;
  *((_QWORD *)v61 + 1) = v63;
  swift_bridgeObjectRelease(v65);
  v66 = v25[8];
  v67 = &v23[v66];
  v68 = &v24[v66];
  v70 = *(_QWORD *)v68;
  v69 = *((_QWORD *)v68 + 1);
  v71 = *((_QWORD *)v67 + 1);
  *(_QWORD *)v67 = v70;
  *((_QWORD *)v67 + 1) = v69;
  swift_bridgeObjectRelease(v71);
  v72 = v25[9];
  v73 = &v23[v72];
  v74 = &v24[v72];
  v76 = *(_QWORD *)v74;
  v75 = *((_QWORD *)v74 + 1);
  v77 = *((_QWORD *)v73 + 1);
  *(_QWORD *)v73 = v76;
  *((_QWORD *)v73 + 1) = v75;
  swift_bridgeObjectRelease(v77);
LABEL_13:
  v147 = a3;
  v31 = *(int *)(a3 + 20);
  v32 = (uint64_t *)((char *)a1 + v31);
  v33 = (_OWORD *)((char *)a2 + v31);
  v34 = *(uint64_t *)((char *)a1 + v31);
  v35 = *(uint64_t *)((char *)a1 + v31 + 8);
  *(_OWORD *)((char *)a1 + v31) = *(_OWORD *)((char *)a2 + v31);
  sub_100063CD0(v34, v35);
  v36 = v32[2];
  v37 = v32[3];
  *((_OWORD *)v32 + 1) = v33[1];
  sub_100063CD0(v36, v37);
  v38 = v32[4];
  v39 = v32[5];
  *((_OWORD *)v32 + 2) = v33[2];
  sub_100063CD0(v38, v39);
  v40 = v32[6];
  v41 = v32[7];
  *((_OWORD *)v32 + 3) = v33[3];
  sub_100063CD0(v40, v41);
  v42 = *(int *)(v150 + 32);
  v43 = (char *)v32 + v42;
  v44 = (char *)v33 + v42;
  v45 = v18((char *)v32 + v42, 1, v29);
  v46 = v29;
  v47 = v45;
  v48 = v18(v44, 1, v46);
  if (v47)
  {
    if (v48)
    {
      v49 = sub_100063D3C(&qword_100346C00);
      memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
      v50 = v148;
    }
    else
    {
      v50 = v148;
      (*(void (**)(char *, char *, uint64_t))(v149 + 32))(v43, v44, v148);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v149 + 56))(v43, 0, 1, v148);
    }
  }
  else
  {
    v50 = v148;
    if (v48)
    {
      (*(void (**)(char *, uint64_t))(v149 + 8))(v43, v148);
      v51 = sub_100063D3C(&qword_100346C00);
      memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v149 + 40))(v43, v44, v148);
    }
  }
  v78 = *(int *)(v150 + 36);
  v79 = (char *)v32 + v78;
  v80 = (char *)v33 + v78;
  v81 = v26(v79, 1, v25);
  v82 = v26(v80, 1, v25);
  if (v81)
  {
    if (!v82)
    {
      *(_OWORD *)v79 = *(_OWORD *)v80;
      (*(void (**)(char *, char *, uint64_t))(v149 + 32))(&v79[v25[5]], &v80[v25[5]], v50);
      *(_OWORD *)&v79[v25[6]] = *(_OWORD *)&v80[v25[6]];
      *(_OWORD *)&v79[v25[7]] = *(_OWORD *)&v80[v25[7]];
      *(_OWORD *)&v79[v25[8]] = *(_OWORD *)&v80[v25[8]];
      *(_OWORD *)&v79[v25[9]] = *(_OWORD *)&v80[v25[9]];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v146 + 56))(v79, 0, 1, v25);
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (v82)
  {
    sub_1001247E8((uint64_t)v79, type metadata accessor for CreationMetadata);
LABEL_27:
    v83 = sub_100063D3C(&qword_100347800);
    memcpy(v79, v80, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
    goto LABEL_28;
  }
  v94 = *((_QWORD *)v80 + 1);
  v95 = *((_QWORD *)v79 + 1);
  *(_QWORD *)v79 = *(_QWORD *)v80;
  *((_QWORD *)v79 + 1) = v94;
  swift_bridgeObjectRelease(v95);
  (*(void (**)(char *, char *, uint64_t))(v149 + 40))(&v79[v25[5]], &v80[v25[5]], v50);
  v96 = v25[6];
  v97 = &v79[v96];
  v98 = &v80[v96];
  v100 = *(_QWORD *)v98;
  v99 = *((_QWORD *)v98 + 1);
  v101 = *((_QWORD *)v97 + 1);
  *(_QWORD *)v97 = v100;
  *((_QWORD *)v97 + 1) = v99;
  swift_bridgeObjectRelease(v101);
  v102 = v25[7];
  v103 = &v79[v102];
  v104 = &v80[v102];
  v106 = *(_QWORD *)v104;
  v105 = *((_QWORD *)v104 + 1);
  v107 = *((_QWORD *)v103 + 1);
  *(_QWORD *)v103 = v106;
  *((_QWORD *)v103 + 1) = v105;
  swift_bridgeObjectRelease(v107);
  v108 = v25[8];
  v109 = &v79[v108];
  v110 = &v80[v108];
  v112 = *(_QWORD *)v110;
  v111 = *((_QWORD *)v110 + 1);
  v113 = *((_QWORD *)v109 + 1);
  *(_QWORD *)v109 = v112;
  *((_QWORD *)v109 + 1) = v111;
  swift_bridgeObjectRelease(v113);
  v114 = v25[9];
  v115 = &v79[v114];
  v116 = &v80[v114];
  v118 = *(_QWORD *)v116;
  v117 = *((_QWORD *)v116 + 1);
  v119 = *((_QWORD *)v115 + 1);
  *(_QWORD *)v115 = v118;
  *((_QWORD *)v115 + 1) = v117;
  swift_bridgeObjectRelease(v119);
LABEL_28:
  v84 = *(int *)(v147 + 24);
  v85 = *(uint64_t *)((char *)a1 + v84);
  v86 = *(uint64_t *)((char *)a1 + v84 + 8);
  *(_OWORD *)((char *)a1 + v84) = *(_OWORD *)((char *)a2 + v84);
  sub_100063CD0(v85, v86);
  v87 = *(int *)(v147 + 28);
  v88 = (char *)a1 + v87;
  v89 = (char *)a2 + v87;
  v90 = v26((char *)a1 + v87, 1, v25);
  v91 = v26(v89, 1, v25);
  if (!v90)
  {
    if (!v91)
    {
      v120 = *((_QWORD *)v89 + 1);
      v121 = *((_QWORD *)v88 + 1);
      *(_QWORD *)v88 = *(_QWORD *)v89;
      *((_QWORD *)v88 + 1) = v120;
      swift_bridgeObjectRelease(v121);
      (*(void (**)(char *, char *, uint64_t))(v149 + 40))(&v88[v25[5]], &v89[v25[5]], v50);
      v122 = v25[6];
      v123 = &v88[v122];
      v124 = &v89[v122];
      v126 = *(_QWORD *)v124;
      v125 = *((_QWORD *)v124 + 1);
      v127 = *((_QWORD *)v123 + 1);
      *(_QWORD *)v123 = v126;
      *((_QWORD *)v123 + 1) = v125;
      swift_bridgeObjectRelease(v127);
      v128 = v25[7];
      v129 = &v88[v128];
      v130 = &v89[v128];
      v132 = *(_QWORD *)v130;
      v131 = *((_QWORD *)v130 + 1);
      v133 = *((_QWORD *)v129 + 1);
      *(_QWORD *)v129 = v132;
      *((_QWORD *)v129 + 1) = v131;
      swift_bridgeObjectRelease(v133);
      v134 = v25[8];
      v135 = &v88[v134];
      v136 = &v89[v134];
      v138 = *(_QWORD *)v136;
      v137 = *((_QWORD *)v136 + 1);
      v139 = *((_QWORD *)v135 + 1);
      *(_QWORD *)v135 = v138;
      *((_QWORD *)v135 + 1) = v137;
      swift_bridgeObjectRelease(v139);
      v140 = v25[9];
      v141 = &v88[v140];
      v142 = &v89[v140];
      v144 = *(_QWORD *)v142;
      v143 = *((_QWORD *)v142 + 1);
      v145 = *((_QWORD *)v141 + 1);
      *(_QWORD *)v141 = v144;
      *((_QWORD *)v141 + 1) = v143;
      swift_bridgeObjectRelease(v145);
      return a1;
    }
    sub_1001247E8((uint64_t)v88, type metadata accessor for CreationMetadata);
    goto LABEL_33;
  }
  if (v91)
  {
LABEL_33:
    v92 = sub_100063D3C(&qword_100347800);
    memcpy(v88, v89, *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64));
    return a1;
  }
  *(_OWORD *)v88 = *(_OWORD *)v89;
  (*(void (**)(char *, char *, uint64_t))(v149 + 32))(&v88[v25[5]], &v89[v25[5]], v50);
  *(_OWORD *)&v88[v25[6]] = *(_OWORD *)&v89[v25[6]];
  *(_OWORD *)&v88[v25[7]] = *(_OWORD *)&v89[v25[7]];
  *(_OWORD *)&v88[v25[8]] = *(_OWORD *)&v89[v25[8]];
  *(_OWORD *)&v88[v25[9]] = *(_OWORD *)&v89[v25[9]];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v146 + 56))(v88, 0, 1, v25);
  return a1;
}

uint64_t sub_10014A94C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10014A958);
}

uint64_t sub_10014A958(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for SESPeerIdentityData(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 12)
  {
    v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8) >> 60;
    if (((4 * (_DWORD)v9) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v9) & 0xC | (v9 >> 2));
    else
      return 0;
  }
  else
  {
    v10 = sub_100063D3C(&qword_100347800);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v10);
  }
}

uint64_t sub_10014AA14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10014AA20);
}

uint64_t sub_10014AA20(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;

  result = type metadata accessor for SESPeerIdentityData(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 12)
    {
      v13 = (_QWORD *)(a1 + *(int *)(a4 + 24));
      *v13 = 0;
      v13[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
      return result;
    }
    v10 = sub_100063D3C(&qword_100347800);
    v12 = a1 + *(int *)(a4 + 28);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for SESTLKShareData(uint64_t a1)
{
  return sub_10007BBF0(a1, qword_100347998, (uint64_t)&nominal type descriptor for SESTLKShareData);
}

void sub_10014AAE8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  v2 = type metadata accessor for SESPeerIdentityData(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = v6[0];
    v6[2] = &unk_10028AC98;
    sub_10014BB90(319, (unint64_t *)&qword_100347870, type metadata accessor for CreationMetadata);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 4, v6, a1 + 16);
    }
  }
}

uint64_t *sub_10014AB88(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  void (*v32)(char *, char *, uint64_t, __n128);
  __n128 v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  void (*v50)(_QWORD *, _QWORD, uint64_t, int *, __n128);
  __n128 v51;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v21 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v21);
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_100063C8C(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = a2[2];
    v10 = a2[3];
    sub_100063C8C(v9, v10);
    a1[2] = v9;
    a1[3] = v10;
    v11 = a2[4];
    v12 = a2[5];
    sub_100063C8C(v11, v12);
    a1[4] = v11;
    a1[5] = v12;
    v13 = a2[6];
    v14 = a2[7];
    sub_100063C8C(v13, v14);
    a1[6] = v13;
    a1[7] = v14;
    v15 = *(int *)(a3 + 32);
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    v18 = type metadata accessor for Date(0);
    v19 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      v20 = sub_100063D3C(&qword_100346C00);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
    v22 = *(int *)(a3 + 36);
    v23 = (uint64_t *)((char *)a1 + v22);
    v24 = (uint64_t *)((char *)a2 + v22);
    v25 = (int *)type metadata accessor for CreationMetadata(0);
    v26 = *((_QWORD *)v25 - 1);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v26 + 48))(v24, 1, v25))
    {
      v27 = sub_100063D3C(&qword_100347800);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      v28 = v24[1];
      *v23 = *v24;
      v23[1] = v28;
      v29 = v25[5];
      v30 = (char *)v23 + v29;
      v31 = (char *)v24 + v29;
      v32 = *(void (**)(char *, char *, uint64_t, __n128))(v19 + 16);
      v33 = swift_bridgeObjectRetain(v28);
      v32(v30, v31, v18, v33);
      v34 = v25[6];
      v35 = (_QWORD *)((char *)v23 + v34);
      v36 = (_QWORD *)((char *)v24 + v34);
      v37 = v36[1];
      *v35 = *v36;
      v35[1] = v37;
      v38 = v25[7];
      v39 = (_QWORD *)((char *)v23 + v38);
      v40 = (_QWORD *)((char *)v24 + v38);
      v41 = v40[1];
      *v39 = *v40;
      v39[1] = v41;
      v42 = v25[8];
      v43 = (_QWORD *)((char *)v23 + v42);
      v44 = (_QWORD *)((char *)v24 + v42);
      v45 = v44[1];
      *v43 = *v44;
      v43[1] = v45;
      v46 = v25[9];
      v47 = (_QWORD *)((char *)v23 + v46);
      v48 = (_QWORD *)((char *)v24 + v46);
      v49 = v48[1];
      *v47 = *v48;
      v47[1] = v49;
      v50 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *, __n128))(v26 + 56);
      swift_bridgeObjectRetain(v37);
      swift_bridgeObjectRetain(v41);
      swift_bridgeObjectRetain(v45);
      v51 = swift_bridgeObjectRetain(v49);
      v50(v23, 0, 1, v25, v51);
    }
  }
  return a1;
}

uint64_t sub_10014ADD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t result;

  sub_100063CD0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  sub_100063CD0(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  sub_100063CD0(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  sub_100063CD0(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  v4 = a1 + *(int *)(a2 + 32);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v7 = a1 + *(int *)(a2 + 36);
  v8 = (int *)type metadata accessor for CreationMetadata(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v8 - 1) + 48))(v7, 1, v8);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v7 + 8));
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7 + v8[5], v5);
    swift_bridgeObjectRelease(*(_QWORD *)(v7 + v8[6] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v7 + v8[7] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v7 + v8[8] + 8));
    return swift_bridgeObjectRelease(*(_QWORD *)(v7 + v8[9] + 8));
  }
  return result;
}

uint64_t *sub_10014AF08(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  void (*v30)(char *, char *, uint64_t, __n128);
  __n128 v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  void (*v48)(_QWORD *, _QWORD, uint64_t, int *, __n128);
  __n128 v49;

  v6 = *a2;
  v7 = a2[1];
  sub_100063C8C(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = a2[2];
  v9 = a2[3];
  sub_100063C8C(v8, v9);
  a1[2] = v8;
  a1[3] = v9;
  v10 = a2[4];
  v11 = a2[5];
  sub_100063C8C(v10, v11);
  a1[4] = v10;
  a1[5] = v11;
  v12 = a2[6];
  v13 = a2[7];
  sub_100063C8C(v12, v13);
  a1[6] = v12;
  a1[7] = v13;
  v14 = *(int *)(a3 + 32);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for Date(0);
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    v19 = sub_100063D3C(&qword_100346C00);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  v20 = *(int *)(a3 + 36);
  v21 = (uint64_t *)((char *)a1 + v20);
  v22 = (uint64_t *)((char *)a2 + v20);
  v23 = (int *)type metadata accessor for CreationMetadata(0);
  v24 = *((_QWORD *)v23 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v24 + 48))(v22, 1, v23))
  {
    v25 = sub_100063D3C(&qword_100347800);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    v26 = v22[1];
    *v21 = *v22;
    v21[1] = v26;
    v27 = v23[5];
    v28 = (char *)v21 + v27;
    v29 = (char *)v22 + v27;
    v30 = *(void (**)(char *, char *, uint64_t, __n128))(v18 + 16);
    v31 = swift_bridgeObjectRetain(v26);
    v30(v28, v29, v17, v31);
    v32 = v23[6];
    v33 = (_QWORD *)((char *)v21 + v32);
    v34 = (_QWORD *)((char *)v22 + v32);
    v35 = v34[1];
    *v33 = *v34;
    v33[1] = v35;
    v36 = v23[7];
    v37 = (_QWORD *)((char *)v21 + v36);
    v38 = (_QWORD *)((char *)v22 + v36);
    v39 = v38[1];
    *v37 = *v38;
    v37[1] = v39;
    v40 = v23[8];
    v41 = (_QWORD *)((char *)v21 + v40);
    v42 = (_QWORD *)((char *)v22 + v40);
    v43 = v42[1];
    *v41 = *v42;
    v41[1] = v43;
    v44 = v23[9];
    v45 = (_QWORD *)((char *)v21 + v44);
    v46 = (_QWORD *)((char *)v22 + v44);
    v47 = v46[1];
    *v45 = *v46;
    v45[1] = v47;
    v48 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *, __n128))(v24 + 56);
    swift_bridgeObjectRetain(v35);
    swift_bridgeObjectRetain(v39);
    swift_bridgeObjectRetain(v43);
    v49 = swift_bridgeObjectRetain(v47);
    v48(v21, 0, 1, v23, v49);
  }
  return a1;
}

uint64_t *sub_10014B12C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(char *, uint64_t, uint64_t);
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  int *v34;
  uint64_t v35;
  uint64_t (*v36)(char *, uint64_t, int *);
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  void (*v43)(char *, char *, uint64_t, __n128);
  __n128 v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  void (*v61)(char *, _QWORD, uint64_t, int *, __n128);
  __n128 v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;

  v6 = *a2;
  v7 = a2[1];
  sub_100063C8C(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_100063CD0(v8, v9);
  v10 = a2[2];
  v11 = a2[3];
  sub_100063C8C(v10, v11);
  v12 = a1[2];
  v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  sub_100063CD0(v12, v13);
  v14 = a2[4];
  v15 = a2[5];
  sub_100063C8C(v14, v15);
  v16 = a1[4];
  v17 = a1[5];
  a1[4] = v14;
  a1[5] = v15;
  sub_100063CD0(v16, v17);
  v18 = a2[6];
  v19 = a2[7];
  sub_100063C8C(v18, v19);
  v20 = a1[6];
  v21 = a1[7];
  a1[6] = v18;
  a1[7] = v19;
  sub_100063CD0(v20, v21);
  v22 = *(int *)(a3 + 32);
  v23 = (char *)a1 + v22;
  v24 = (char *)a2 + v22;
  v25 = type metadata accessor for Date(0);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48);
  v28 = v27(v23, 1, v25);
  v29 = v27(v24, 1, v25);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v23, v24, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v23, v25);
LABEL_6:
    v30 = sub_100063D3C(&qword_100346C00);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v26 + 24))(v23, v24, v25);
LABEL_7:
  v31 = *(int *)(a3 + 36);
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = (int *)type metadata accessor for CreationMetadata(0);
  v35 = *((_QWORD *)v34 - 1);
  v36 = *(uint64_t (**)(char *, uint64_t, int *))(v35 + 48);
  v37 = v36(v32, 1, v34);
  v38 = v36(v33, 1, v34);
  if (!v37)
  {
    if (!v38)
    {
      *(_QWORD *)v32 = *(_QWORD *)v33;
      v65 = *((_QWORD *)v33 + 1);
      v66 = *((_QWORD *)v32 + 1);
      *((_QWORD *)v32 + 1) = v65;
      swift_bridgeObjectRetain(v65);
      swift_bridgeObjectRelease(v66);
      (*(void (**)(char *, char *, uint64_t))(v26 + 24))(&v32[v34[5]], &v33[v34[5]], v25);
      v67 = v34[6];
      v68 = &v32[v67];
      v69 = &v33[v67];
      *(_QWORD *)v68 = *(_QWORD *)v69;
      v70 = *((_QWORD *)v69 + 1);
      v71 = *((_QWORD *)v68 + 1);
      *((_QWORD *)v68 + 1) = v70;
      swift_bridgeObjectRetain(v70);
      swift_bridgeObjectRelease(v71);
      v72 = v34[7];
      v73 = &v32[v72];
      v74 = &v33[v72];
      *(_QWORD *)v73 = *(_QWORD *)v74;
      v75 = *((_QWORD *)v74 + 1);
      v76 = *((_QWORD *)v73 + 1);
      *((_QWORD *)v73 + 1) = v75;
      swift_bridgeObjectRetain(v75);
      swift_bridgeObjectRelease(v76);
      v77 = v34[8];
      v78 = &v32[v77];
      v79 = &v33[v77];
      *(_QWORD *)v78 = *(_QWORD *)v79;
      v80 = *((_QWORD *)v79 + 1);
      v81 = *((_QWORD *)v78 + 1);
      *((_QWORD *)v78 + 1) = v80;
      swift_bridgeObjectRetain(v80);
      swift_bridgeObjectRelease(v81);
      v82 = v34[9];
      v83 = &v32[v82];
      v84 = &v33[v82];
      *(_QWORD *)v83 = *(_QWORD *)v84;
      v85 = *((_QWORD *)v84 + 1);
      v86 = *((_QWORD *)v83 + 1);
      *((_QWORD *)v83 + 1) = v85;
      swift_bridgeObjectRetain(v85);
      swift_bridgeObjectRelease(v86);
      return a1;
    }
    sub_1001247E8((uint64_t)v32, type metadata accessor for CreationMetadata);
    goto LABEL_12;
  }
  if (v38)
  {
LABEL_12:
    v63 = sub_100063D3C(&qword_100347800);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v32 = *(_QWORD *)v33;
  v39 = *((_QWORD *)v33 + 1);
  *((_QWORD *)v32 + 1) = v39;
  v40 = v34[5];
  v41 = &v32[v40];
  v42 = &v33[v40];
  v43 = *(void (**)(char *, char *, uint64_t, __n128))(v26 + 16);
  v44 = swift_bridgeObjectRetain(v39);
  v43(v41, v42, v25, v44);
  v45 = v34[6];
  v46 = &v32[v45];
  v47 = &v33[v45];
  *(_QWORD *)v46 = *(_QWORD *)v47;
  v48 = *((_QWORD *)v47 + 1);
  *((_QWORD *)v46 + 1) = v48;
  v49 = v34[7];
  v50 = &v32[v49];
  v51 = &v33[v49];
  *(_QWORD *)v50 = *(_QWORD *)v51;
  v52 = *((_QWORD *)v51 + 1);
  *((_QWORD *)v50 + 1) = v52;
  v53 = v34[8];
  v54 = &v32[v53];
  v55 = &v33[v53];
  *(_QWORD *)v54 = *(_QWORD *)v55;
  v56 = *((_QWORD *)v55 + 1);
  *((_QWORD *)v54 + 1) = v56;
  v57 = v34[9];
  v58 = &v32[v57];
  v59 = &v33[v57];
  *(_QWORD *)v58 = *(_QWORD *)v59;
  v60 = *((_QWORD *)v59 + 1);
  *((_QWORD *)v58 + 1) = v60;
  v61 = *(void (**)(char *, _QWORD, uint64_t, int *, __n128))(v35 + 56);
  swift_bridgeObjectRetain(v48);
  swift_bridgeObjectRetain(v52);
  swift_bridgeObjectRetain(v56);
  v62 = swift_bridgeObjectRetain(v60);
  v61(v32, 0, 1, v34, v62);
  return a1;
}

_OWORD *sub_10014B4F4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = *(int *)(a3 + 32);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_100063D3C(&qword_100346C00);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v14 = *(int *)(a3 + 36);
  v15 = (_OWORD *)((char *)a1 + v14);
  v16 = (_OWORD *)((char *)a2 + v14);
  v17 = (int *)type metadata accessor for CreationMetadata(0);
  v18 = *((_QWORD *)v17 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v18 + 48))(v16, 1, v17))
  {
    v19 = sub_100063D3C(&qword_100347800);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    *v15 = *v16;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))((char *)v15 + v17[5], (char *)v16 + v17[5], v11);
    *(_OWORD *)((char *)v15 + v17[6]) = *(_OWORD *)((char *)v16 + v17[6]);
    *(_OWORD *)((char *)v15 + v17[7]) = *(_OWORD *)((char *)v16 + v17[7]);
    *(_OWORD *)((char *)v15 + v17[8]) = *(_OWORD *)((char *)v16 + v17[8]);
    *(_OWORD *)((char *)v15 + v17[9]) = *(_OWORD *)((char *)v16 + v17[9]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v18 + 56))(v15, 0, 1, v17);
  }
  return a1;
}

uint64_t *sub_10014B688(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int *v26;
  uint64_t v27;
  uint64_t (*v28)(char *, uint64_t, int *);
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_100063CD0(v6, v7);
  v8 = a1[2];
  v9 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_100063CD0(v8, v9);
  v10 = a1[4];
  v11 = a1[5];
  *((_OWORD *)a1 + 2) = a2[2];
  sub_100063CD0(v10, v11);
  v12 = a1[6];
  v13 = a1[7];
  *((_OWORD *)a1 + 3) = a2[3];
  sub_100063CD0(v12, v13);
  v14 = *(int *)(a3 + 32);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for Date(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
LABEL_6:
    v22 = sub_100063D3C(&qword_100346C00);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v15, v16, v17);
LABEL_7:
  v23 = *(int *)(a3 + 36);
  v24 = (char *)a1 + v23;
  v25 = (char *)a2 + v23;
  v26 = (int *)type metadata accessor for CreationMetadata(0);
  v27 = *((_QWORD *)v26 - 1);
  v28 = *(uint64_t (**)(char *, uint64_t, int *))(v27 + 48);
  v29 = v28(v24, 1, v26);
  v30 = v28(v25, 1, v26);
  if (!v29)
  {
    if (!v30)
    {
      v33 = *((_QWORD *)v25 + 1);
      v34 = *((_QWORD *)v24 + 1);
      *(_QWORD *)v24 = *(_QWORD *)v25;
      *((_QWORD *)v24 + 1) = v33;
      swift_bridgeObjectRelease(v34);
      (*(void (**)(char *, char *, uint64_t))(v18 + 40))(&v24[v26[5]], &v25[v26[5]], v17);
      v35 = v26[6];
      v36 = &v24[v35];
      v37 = &v25[v35];
      v39 = *(_QWORD *)v37;
      v38 = *((_QWORD *)v37 + 1);
      v40 = *((_QWORD *)v36 + 1);
      *(_QWORD *)v36 = v39;
      *((_QWORD *)v36 + 1) = v38;
      swift_bridgeObjectRelease(v40);
      v41 = v26[7];
      v42 = &v24[v41];
      v43 = &v25[v41];
      v45 = *(_QWORD *)v43;
      v44 = *((_QWORD *)v43 + 1);
      v46 = *((_QWORD *)v42 + 1);
      *(_QWORD *)v42 = v45;
      *((_QWORD *)v42 + 1) = v44;
      swift_bridgeObjectRelease(v46);
      v47 = v26[8];
      v48 = &v24[v47];
      v49 = &v25[v47];
      v51 = *(_QWORD *)v49;
      v50 = *((_QWORD *)v49 + 1);
      v52 = *((_QWORD *)v48 + 1);
      *(_QWORD *)v48 = v51;
      *((_QWORD *)v48 + 1) = v50;
      swift_bridgeObjectRelease(v52);
      v53 = v26[9];
      v54 = &v24[v53];
      v55 = &v25[v53];
      v57 = *(_QWORD *)v55;
      v56 = *((_QWORD *)v55 + 1);
      v58 = *((_QWORD *)v54 + 1);
      *(_QWORD *)v54 = v57;
      *((_QWORD *)v54 + 1) = v56;
      swift_bridgeObjectRelease(v58);
      return a1;
    }
    sub_1001247E8((uint64_t)v24, type metadata accessor for CreationMetadata);
    goto LABEL_12;
  }
  if (v30)
  {
LABEL_12:
    v31 = sub_100063D3C(&qword_100347800);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    return a1;
  }
  *(_OWORD *)v24 = *(_OWORD *)v25;
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(&v24[v26[5]], &v25[v26[5]], v17);
  *(_OWORD *)&v24[v26[6]] = *(_OWORD *)&v25[v26[6]];
  *(_OWORD *)&v24[v26[7]] = *(_OWORD *)&v25[v26[7]];
  *(_OWORD *)&v24[v26[8]] = *(_OWORD *)&v25[v26[8]];
  *(_OWORD *)&v24[v26[9]] = *(_OWORD *)&v25[v26[9]];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v27 + 56))(v24, 0, 1, v26);
  return a1;
}

uint64_t sub_10014B964(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10014B970);
}

uint64_t sub_10014B970(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = sub_100063D3C(&qword_100346C00);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 32);
    }
    else
    {
      v10 = sub_100063D3C(&qword_100347800);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 36);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_10014BA24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10014BA30);
}

char *sub_10014BA30(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v8 = sub_100063D3C(&qword_100346C00);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 32);
    }
    else
    {
      v10 = sub_100063D3C(&qword_100347800);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 36);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void sub_10014BADC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[6];

  v6[0] = &unk_10028AC98;
  v6[1] = &unk_10028AC98;
  v6[2] = &unk_10028AC98;
  v6[3] = &unk_10028AC98;
  sub_10014BB90(319, (unint64_t *)&unk_100347A40, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
  if (v3 <= 0x3F)
  {
    v6[4] = *(_QWORD *)(v2 - 8) + 64;
    sub_10014BB90(319, (unint64_t *)&qword_100347870, type metadata accessor for CreationMetadata);
    if (v5 <= 0x3F)
    {
      v6[5] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 6, v6, a1 + 16);
    }
  }
}

void sub_10014BB90(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Optional(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t sub_10014BBDC@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  char *v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t *v29;

  v3 = v1;
  v29 = (uint64_t *)a1;
  v4 = sub_100063D3C(&qword_100347B20);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PropertyListDecoder(0);
  v9 = swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  v13 = PropertyListDecoder.init()(v9, v10, v11, v12);
  v14 = type metadata accessor for SESTLKRecordData(0);
  v15 = objc_msgSend(v3, "recordData");
  v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v15);
  v18 = v17;

  v19 = sub_1000639EC(&qword_100347B28, type metadata accessor for SESTLKRecordData, (uint64_t)&unk_10028ADEC);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v14, v16, v18, v14, v19);
  if (v2)
  {
    swift_errorRelease(v2);
    sub_100063CD0(v16, v18);
    swift_release(v13);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v7, 1, 1, v14);
    sub_100096700((uint64_t)v7, &qword_100347B20);
    v20 = objc_msgSend(v3, "recordData");
    v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    v24 = v29;
    v25 = (char *)v29 + *(int *)(v14 + 20);
    v26 = type metadata accessor for CreationMetadata(0);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v25, 1, 1, v26);
    *v24 = v21;
    v24[1] = v23;
  }
  else
  {
    sub_100063CD0(v16, v18);
    swift_release(v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v7, 0, 1, v14);
    return sub_100124884((uint64_t)v7, (uint64_t)v29, type metadata accessor for SESTLKRecordData);
  }
  return result;
}

void sub_10014BDF4(uint64_t *a1@<X8>)
{
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t *v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;

  *a1 = sub_10014D5A8(0x726556646C697542, 0xEC0000006E6F6973, 3227953, 0xE300000000000000);
  a1[1] = v2;
  v3 = (int *)type metadata accessor for CreationMetadata(0);
  static Date.now.getter();
  v4 = sub_10014D5A8(0x536C65646F4D5748, 0xEA00000000007274, 0x6E776F6E6B6E553CLL, 0xE90000000000003ELL);
  v5 = (uint64_t *)((char *)a1 + v3[6]);
  *v5 = v4;
  v5[1] = v6;
  v7 = sub_10014D5A8(0x754E6C6169726553, 0xEC0000007265626DLL, 0x6E776F6E6B6E553CLL, 0xE90000000000003ELL);
  v8 = (uint64_t *)((char *)a1 + v3[7]);
  *v8 = v7;
  v8[1] = v9;
  if (!os_variant_has_internal_diagnostics("com.apple.seserviced"))
    goto LABEL_7;
  v10 = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
  if (!v10)
    goto LABEL_7;
  v11 = v10;
  v12 = objc_msgSend(v10, "aa_primaryAppleAccount");
  if (!v12)
  {

LABEL_7:
    v19 = (uint64_t *)((char *)a1 + v3[8]);
    *v19 = 0;
    v19[1] = 0;
    v20 = (uint64_t *)((char *)a1 + v3[9]);
    *v20 = 0;
    v20[1] = 0;
    return;
  }
  v13 = v12;
  v14 = objc_msgSend(v12, "username");
  if (v14)
  {
    v15 = v14;
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v18 = v17;

  }
  else
  {
    v16 = 0;
    v18 = 0;
  }
  v21 = (uint64_t *)((char *)a1 + v3[8]);
  *v21 = v16;
  v21[1] = v18;
  v22 = objc_msgSend(v13, "aa_altDSID");
  if (v22)
  {
    v23 = v22;
    v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    v26 = v25;

  }
  else
  {

    v24 = 0;
    v26 = 0;
  }
  v27 = (uint64_t *)((char *)a1 + v3[9]);
  *v27 = v24;
  v27[1] = v26;
}

uint64_t sub_10014C004()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000010;
  else
    return 0x5464657070617277;
}

uint64_t sub_10014C048@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10014E6D8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10014C06C()
{
  return 0;
}

void sub_10014C078(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_10014C084(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10014DE98();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10014C0AC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10014DE98();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10014C0D4(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  __int128 v20;

  v3 = v1;
  v5 = sub_100063D3C(&qword_100347AD0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10006BA78(a1, v10);
  v12 = sub_10014DE98();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SESTLKRecordData.CodingKeys, &type metadata for SESTLKRecordData.CodingKeys, v12, v10, v11);
  v20 = *v3;
  v19 = 0;
  v13 = sub_10014DEDC();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v19, v5, &type metadata for Data, v13);
  if (!v2)
  {
    v14 = (char *)v3 + *(int *)(type metadata accessor for SESTLKRecordData(0) + 20);
    LOBYTE(v20) = 1;
    v15 = type metadata accessor for CreationMetadata(0);
    v16 = sub_1000639EC(&qword_100347AE0, type metadata accessor for CreationMetadata, (uint64_t)&unk_10028AD74);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v14, &v20, v5, v15, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_10014C240@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  void (*v18)(uint64_t *, _QWORD, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t *v30;
  __int128 v31;
  char v32;

  v27 = a2;
  v4 = sub_100063D3C(&qword_100347800);
  __chkstk_darwin(v4, v5);
  v28 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_100063D3C(&qword_100347AC0);
  v7 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29, v8);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for SESTLKRecordData(0);
  v13 = __chkstk_darwin(v11, v12);
  v15 = (_OWORD *)((char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = (uint64_t *)((char *)v15 + *(int *)(v13 + 20));
  sub_10014BDF4(v16);
  v17 = type metadata accessor for CreationMetadata(0);
  v18 = *(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
  v30 = v16;
  v18(v16, 0, 1, v17);
  v19 = a1[3];
  v20 = a1[4];
  sub_10006BA78(a1, v19);
  v21 = sub_10014DE98();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SESTLKRecordData.CodingKeys, &type metadata for SESTLKRecordData.CodingKeys, v21, v19, v20);
  if (v2)
  {
    sub_10006BA9C(a1);
    return sub_100096700((uint64_t)v30, &qword_100347800);
  }
  else
  {
    v22 = (uint64_t)v28;
    v32 = 0;
    v23 = sub_10014DDCC();
    v24 = v29;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v31, &type metadata for Data, &v32, v29, &type metadata for Data, v23);
    *v15 = v31;
    LOBYTE(v31) = 1;
    v25 = sub_1000639EC(&qword_100347AA0, type metadata accessor for CreationMetadata, (uint64_t)&unk_10028AD9C);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v17, &v31, v24, v17, v25);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v24);
    sub_10014DE10(v22, (uint64_t)v30, &qword_100347800);
    sub_100124B74((uint64_t)v15, v27, type metadata accessor for SESTLKRecordData);
    sub_10006BA9C(a1);
    return sub_1001247E8((uint64_t)v15, type metadata accessor for SESTLKRecordData);
  }
}

uint64_t sub_10014C4E4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10014C240(a1, a2);
}

uint64_t sub_10014C4F8(_QWORD *a1)
{
  return sub_10014C0D4(a1);
}

uint64_t sub_10014C50C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10014C54C + 4 * byte_10028AC50[a1]))(0x6E65644972656570, 0xEE00726569666974);
}

unint64_t sub_10014C54C()
{
  return 0xD000000000000014;
}

uint64_t sub_10014C574()
{
  return 0x7472654364736163;
}

uint64_t sub_10014C598()
{
  return 0x6E6F697461657263;
}

unint64_t sub_10014C5B8()
{
  return 0xD000000000000010;
}

uint64_t sub_10014C5D8(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  char v23;
  __int128 v24;

  v3 = v1;
  v5 = sub_100063D3C(&qword_100347B10);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10006BA78(a1, v10);
  v12 = sub_10014DD88();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SESPeerIdentityData.CodingKeys, &type metadata for SESPeerIdentityData.CodingKeys, v12, v10, v11);
  v24 = *v3;
  v23 = 0;
  v13 = sub_10014DEDC();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v24, &v23, v5, &type metadata for Data, v13);
  if (!v2)
  {
    v24 = v3[1];
    v23 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v24, &v23, v5, &type metadata for Data, v13);
    v24 = v3[2];
    v23 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v24, &v23, v5, &type metadata for Data, v13);
    v24 = v3[3];
    v23 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v24, &v23, v5, &type metadata for Data, v13);
    v14 = type metadata accessor for SESPeerIdentityData(0);
    v15 = (char *)v3 + *(int *)(v14 + 32);
    LOBYTE(v24) = 4;
    v16 = type metadata accessor for Date(0);
    v17 = sub_1000639EC(&qword_100347B00, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v15, &v24, v5, v16, v17);
    v18 = (char *)v3 + *(int *)(v14 + 36);
    LOBYTE(v24) = 5;
    v19 = type metadata accessor for CreationMetadata(0);
    v20 = sub_1000639EC(&qword_100347AE0, type metadata accessor for CreationMetadata, (uint64_t)&unk_10028AD74);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v18, &v24, v5, v19, v20);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_10014C860@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t *v21;
  uint64_t v22;
  void (*v23)(uint64_t *, _QWORD, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  char v49;

  v39 = a2;
  v3 = sub_100063D3C(&qword_100347800);
  __chkstk_darwin(v3, v4);
  v40 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100063D3C(&qword_100346C00);
  __chkstk_darwin(v6, v7);
  v41 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_100063D3C(&qword_100347A80);
  v9 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42, v10);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for SESPeerIdentityData(0);
  v15 = __chkstk_darwin(v13, v14);
  v17 = (_OWORD *)((char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = (char *)v17 + *(int *)(v15 + 32);
  static Date.now.getter();
  v19 = type metadata accessor for Date(0);
  v20 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56);
  v46 = (uint64_t)v18;
  v20(v18, 0, 1, v19);
  v21 = (uint64_t *)((char *)v17 + *(int *)(v13 + 36));
  sub_10014BDF4(v21);
  v22 = type metadata accessor for CreationMetadata(0);
  v23 = *(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56);
  v45 = v21;
  v23(v21, 0, 1, v22);
  v24 = a1[3];
  v25 = a1[4];
  v44 = a1;
  sub_10006BA78(a1, v24);
  v26 = sub_10014DD88();
  v43 = v12;
  v27 = v47;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SESPeerIdentityData.CodingKeys, &type metadata for SESPeerIdentityData.CodingKeys, v26, v24, v25);
  if (v27)
  {
    v32 = (uint64_t)v45;
    v31 = v46;
    sub_10006BA9C(v44);
    sub_100096700(v31, &qword_100346C00);
    return sub_100096700(v32, &qword_100347800);
  }
  else
  {
    v47 = v22;
    v28 = (uint64_t)v41;
    v49 = 0;
    v29 = sub_10014DDCC();
    v30 = v42;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v48, &type metadata for Data, &v49, v42, &type metadata for Data, v29);
    *v17 = v48;
    v49 = 1;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v48, &type metadata for Data, &v49, v30, &type metadata for Data, v29);
    v17[1] = v48;
    v49 = 2;
    v38 = v29;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v48, &type metadata for Data, &v49, v30, &type metadata for Data, v29);
    v33 = v46;
    v17[2] = v48;
    v49 = 3;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v48, &type metadata for Data, &v49, v30, &type metadata for Data, v38);
    v38 = 0;
    v17[3] = v48;
    LOBYTE(v48) = 4;
    v34 = sub_1000639EC(&qword_100347A98, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v19, &v48, v30, v19, v34);
    sub_10014DE10(v28, v33, &qword_100346C00);
    LOBYTE(v48) = 5;
    v35 = sub_1000639EC(&qword_100347AA0, type metadata accessor for CreationMetadata, (uint64_t)&unk_10028AD9C);
    v36 = (uint64_t)v40;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v47, &v48, v30, v47, v35);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v43, v30);
    sub_10014DE10(v36, (uint64_t)v45, &qword_100347800);
    sub_100124B74((uint64_t)v17, v39, type metadata accessor for SESPeerIdentityData);
    sub_10006BA9C(v44);
    return sub_1001247E8((uint64_t)v17, type metadata accessor for SESPeerIdentityData);
  }
}

uint64_t sub_10014CD70()
{
  unsigned __int8 *v0;

  return sub_10014C50C(*v0);
}

uint64_t sub_10014CD78@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10014E7D0(a1, a2);
  *a3 = result;
  return result;
}

void sub_10014CD9C(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_10014CDA8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10014DD88();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10014CDD0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10014DD88();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10014CDF8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10014C860(a1, a2);
}

uint64_t sub_10014CE0C(_QWORD *a1)
{
  return sub_10014C5D8(a1);
}

uint64_t sub_10014CE20(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10014CE58 + 4 * byte_10028AC56[a1]))(0xD000000000000013, 0x80000001002BDAA0);
}

uint64_t sub_10014CEA0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v22;
  char v23;

  v3 = v1;
  v5 = sub_100063D3C(&qword_100347B08);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10006BA78(a1, v10);
  v12 = sub_10014DE54();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SESTLKShareData.CodingKeys, &type metadata for SESTLKShareData.CodingKeys, v12, v10, v11);
  LOBYTE(v22) = 0;
  v13 = type metadata accessor for SESPeerIdentityData(0);
  v14 = sub_1000639EC(&qword_100346C58, type metadata accessor for SESPeerIdentityData, (uint64_t)&unk_10028AD24);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v22, v5, v13, v14);
  if (!v2)
  {
    v15 = (int *)type metadata accessor for SESTLKShareData(0);
    v16 = v3 + v15[5];
    LOBYTE(v22) = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v16, &v22, v5, v13, v14);
    v22 = *(_OWORD *)(v3 + v15[6]);
    v23 = 2;
    v17 = sub_10014DEDC();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v23, v5, &type metadata for Data, v17);
    v18 = v3 + v15[7];
    LOBYTE(v22) = 3;
    v19 = type metadata accessor for CreationMetadata(0);
    v20 = sub_1000639EC(&qword_100347AE0, type metadata accessor for CreationMetadata, (uint64_t)&unk_10028AD74);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v18, &v22, v5, v19, v20);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_10014D0AC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  void (*v22)(uint64_t *, _QWORD, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  char *v44;
  uint64_t *v45;
  _QWORD *v46;
  __int128 v47;
  char v48;

  v38 = a2;
  v3 = sub_100063D3C(&qword_100347800);
  __chkstk_darwin(v3, v4);
  v39 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for SESPeerIdentityData(0);
  v7 = __chkstk_darwin(v41, v6);
  v40 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v9);
  v43 = (uint64_t *)((char *)&v37 - v10);
  v42 = sub_100063D3C(&qword_100347AB0);
  v11 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42, v12);
  v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for SESTLKShareData(0);
  v17 = __chkstk_darwin(v15, v16);
  v19 = (char *)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (uint64_t *)&v19[*(int *)(v17 + 28)];
  sub_10014BDF4(v20);
  v21 = type metadata accessor for CreationMetadata(0);
  v22 = *(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56);
  v45 = v20;
  v22(v20, 0, 1, v21);
  v24 = a1[3];
  v23 = a1[4];
  sub_10006BA78(a1, v24);
  v25 = sub_10014DE54();
  v44 = v14;
  v26 = v46;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SESTLKShareData.CodingKeys, &type metadata for SESTLKShareData.CodingKeys, v25, v24, v23);
  if (v26)
  {
    sub_10006BA9C(a1);
    return sub_100096700((uint64_t)v45, &qword_100347800);
  }
  else
  {
    v37 = v21;
    v27 = v40;
    v28 = v11;
    v46 = a1;
    LOBYTE(v47) = 0;
    v29 = sub_1000639EC(&qword_100346BC0, type metadata accessor for SESPeerIdentityData, (uint64_t)&unk_10028AE3C);
    v30 = v42;
    v31 = v41;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v43, v41, &v47, v42, v41, v29);
    sub_100124884((uint64_t)v43, (uint64_t)v19, type metadata accessor for SESPeerIdentityData);
    LOBYTE(v47) = 1;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v27, v31, &v47, v30, v31, v29);
    sub_100124884((uint64_t)v27, (uint64_t)&v19[*(int *)(v15 + 20)], type metadata accessor for SESPeerIdentityData);
    v48 = 2;
    v32 = sub_10014DDCC();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v47, &type metadata for Data, &v48, v30, &type metadata for Data, v32);
    *(_OWORD *)&v19[*(int *)(v15 + 24)] = v47;
    LOBYTE(v47) = 3;
    v33 = sub_1000639EC(&qword_100347AA0, type metadata accessor for CreationMetadata, (uint64_t)&unk_10028AD9C);
    v34 = v30;
    v35 = (uint64_t)v39;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v37, &v47, v34, v37, v33);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v44, v42);
    sub_10014DE10(v35, (uint64_t)v45, &qword_100347800);
    sub_100124B74((uint64_t)v19, v38, type metadata accessor for SESTLKShareData);
    sub_10006BA9C(v46);
    return sub_1001247E8((uint64_t)v19, type metadata accessor for SESTLKShareData);
  }
}

uint64_t sub_10014D4F8()
{
  unsigned __int8 *v0;

  return sub_10014CE20(*v0);
}

uint64_t sub_10014D500@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10014EA94(a1, a2);
  *a3 = result;
  return result;
}

void sub_10014D524(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_10014D530(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10014DE54();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10014D558(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10014DE54();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10014D580@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10014D0AC(a1, a2);
}

uint64_t sub_10014D594(_QWORD *a1)
{
  return sub_10014CEA0(a1);
}

uint64_t sub_10014D5A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSString v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];
  uint64_t v11;

  v6 = String._bridgeToObjectiveC()();
  v7 = MGCopyAnswer(v6, 0);

  v11 = v7;
  v8 = sub_100063D3C(&qword_100347AA8);
  if (swift_dynamicCast(v10, &v11, v8, &type metadata for String, 6) && v10[1])
    return v10[0];
  swift_bridgeObjectRetain(a4);
  return a3;
}

uint64_t sub_10014D644(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;

  v3 = v1;
  v5 = sub_100063D3C(&qword_100347AF8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10006BA78(a1, v10);
  v12 = sub_10014DF20();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CreationMetadata.CodingKeys, &type metadata for CreationMetadata.CodingKeys, v12, v10, v11);
  v13 = *v3;
  v14 = v3[1];
  v38 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v13, v14, &v38, v5);
  if (!v2)
  {
    v15 = (int *)type metadata accessor for CreationMetadata(0);
    v16 = (char *)v3 + v15[5];
    v37 = 1;
    v17 = type metadata accessor for Date(0);
    v18 = sub_1000639EC(&qword_100347B00, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v16, &v37, v5, v17, v18);
    v19 = (uint64_t *)((char *)v3 + v15[6]);
    v20 = *v19;
    v21 = v19[1];
    v36 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v20, v21, &v36, v5);
    v22 = (uint64_t *)((char *)v3 + v15[7]);
    v23 = *v22;
    v24 = v22[1];
    v35 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v23, v24, &v35, v5);
    v25 = (uint64_t *)((char *)v3 + v15[8]);
    v26 = *v25;
    v27 = v25[1];
    v34 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v26, v27, &v34, v5);
    v28 = (uint64_t *)((char *)v3 + v15[9]);
    v29 = *v28;
    v30 = v28[1];
    v33 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v29, v30, &v33, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_10014D85C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;

  v38 = a2;
  v3 = type metadata accessor for Date(0);
  v39 = *(_QWORD *)(v3 - 8);
  v40 = v3;
  __chkstk_darwin(v3, v4);
  v6 = (uint64_t *)((char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v41 = sub_100063D3C(&qword_100347AE8);
  v7 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41, v8);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (int *)type metadata accessor for CreationMetadata(0);
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1[3];
  v16 = a1[4];
  v42 = a1;
  sub_10006BA78(a1, v15);
  v17 = sub_10014DF20();
  v18 = v43;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CreationMetadata.CodingKeys, &type metadata for CreationMetadata.CodingKeys, v17, v15, v16);
  if (v18)
    return sub_10006BA9C(v42);
  v19 = v7;
  v49 = 0;
  v20 = v41;
  *(_QWORD *)v14 = KeyedDecodingContainer.decode(_:forKey:)(&v49, v41);
  *((_QWORD *)v14 + 1) = v21;
  v48 = 1;
  v22 = sub_1000639EC(&qword_100347A98, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v23 = v40;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v6, v40, &v48, v20, v40, v22);
  (*(void (**)(char *, _QWORD *, uint64_t))(v39 + 32))(&v14[v11[5]], v6, v23);
  v47 = 2;
  v24 = KeyedDecodingContainer.decode(_:forKey:)(&v47, v20);
  v25 = (uint64_t *)&v14[v11[6]];
  *v25 = v24;
  v25[1] = v26;
  v46 = 3;
  v27 = KeyedDecodingContainer.decode(_:forKey:)(&v46, v20);
  v28 = (uint64_t *)&v14[v11[7]];
  *v28 = v27;
  v28[1] = v29;
  v45 = 4;
  v30 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v45, v20);
  v43 = 0;
  v31 = (uint64_t *)&v14[v11[8]];
  *v31 = v30;
  v31[1] = v32;
  v44 = 5;
  v33 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v44, v20);
  v35 = v34;
  (*(void (**)(char *, uint64_t))(v19 + 8))(v10, v41);
  v36 = (uint64_t *)&v14[v11[9]];
  *v36 = v33;
  v36[1] = v35;
  sub_100124B74((uint64_t)v14, v38, type metadata accessor for CreationMetadata);
  sub_10006BA9C(v42);
  return sub_1001247E8((uint64_t)v14, type metadata accessor for CreationMetadata);
}

uint64_t sub_10014DC58()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10014DC8C + 4 * byte_10028AC5A[*v0]))(0x6F69737265567773, 0xE90000000000006ELL);
}

uint64_t sub_10014DC8C()
{
  return 1702125924;
}

uint64_t sub_10014DC9C()
{
  return 0x6C65646F6DLL;
}

uint64_t sub_10014DCB0()
{
  return 0x656369766564;
}

uint64_t sub_10014DCC4()
{
  return 1684632420;
}

uint64_t sub_10014DCD4()
{
  return 0x44495344746C61;
}

uint64_t sub_10014DCEC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10014EC58(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10014DD10(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10014DF20();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10014DD38(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10014DF20();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10014DD60@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10014D85C(a1, a2);
}

uint64_t sub_10014DD74(_QWORD *a1)
{
  return sub_10014D644(a1);
}

unint64_t sub_10014DD88()
{
  unint64_t result;

  result = qword_100347A88;
  if (!qword_100347A88)
  {
    result = swift_getWitnessTable(&unk_10028B240, &type metadata for SESPeerIdentityData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100347A88);
  }
  return result;
}

unint64_t sub_10014DDCC()
{
  unint64_t result;

  result = qword_100347A90;
  if (!qword_100347A90)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_100347A90);
  }
  return result;
}

uint64_t sub_10014DE10(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100063D3C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

unint64_t sub_10014DE54()
{
  unint64_t result;

  result = qword_100347AB8;
  if (!qword_100347AB8)
  {
    result = swift_getWitnessTable(&unk_10028B1F0, &type metadata for SESTLKShareData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100347AB8);
  }
  return result;
}

unint64_t sub_10014DE98()
{
  unint64_t result;

  result = qword_100347AC8;
  if (!qword_100347AC8)
  {
    result = swift_getWitnessTable(&unk_10028B1A0, &type metadata for SESTLKRecordData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100347AC8);
  }
  return result;
}

unint64_t sub_10014DEDC()
{
  unint64_t result;

  result = qword_100347AD8;
  if (!qword_100347AD8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_100347AD8);
  }
  return result;
}

unint64_t sub_10014DF20()
{
  unint64_t result;

  result = qword_100347AF0;
  if (!qword_100347AF0)
  {
    result = swift_getWitnessTable(&unk_10028B150, &type metadata for CreationMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100347AF0);
  }
  return result;
}

uint64_t sub_10014DF64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  NSString v7;
  NSData v8;
  uint64_t v9;
  NSData v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  Class isa;
  id v21;
  NSData v22;

  v7 = String._bridgeToObjectiveC()();
  v22.super.isa = Data._bridgeToObjectiveC()().super.isa;
  v8.super.isa = Data._bridgeToObjectiveC()().super.isa;
  v9 = type metadata accessor for SESTLKShareData(0);
  v10.super.isa = Data._bridgeToObjectiveC()().super.isa;
  v11 = type metadata accessor for PropertyListEncoder(0);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  v12 = PropertyListEncoder.init()();
  v13 = sub_1000639EC(&qword_100347B18, type metadata accessor for SESTLKShareData, (uint64_t)&unk_10028AD4C);
  v14 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a5, v9, v13);
  if (v5)
  {

    return swift_release(v12);
  }
  else
  {
    v17 = v14;
    v18 = v15;
    swift_release(v12);
    v19 = (void *)objc_opt_self(SESTLKShare);
    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100063CD0(v17, v18);
    v21 = objc_msgSend(v19, "withView:tlkUUID:sourcePeerIdentifier:targetPeerIdentifier:shareData:", v7, v22.super.isa, v8.super.isa, v10.super.isa, isa);

    return (uint64_t)v21;
  }
}

ValueMetadata *type metadata accessor for CreationMetadata.CodingKeys()
{
  return &type metadata for CreationMetadata.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for SESTLKRecordData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10014E160 + 4 * byte_10028AC65[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10014E194 + 4 * byte_10028AC60[v4]))();
}

uint64_t sub_10014E194(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10014E19C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10014E1A4);
  return result;
}

uint64_t sub_10014E1B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10014E1B8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10014E1BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10014E1C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SESTLKRecordData.CodingKeys()
{
  return &type metadata for SESTLKRecordData.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for SESTLKShareData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10014E22C + 4 * byte_10028AC6F[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10014E260 + 4 * byte_10028AC6A[v4]))();
}

uint64_t sub_10014E260(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10014E268(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10014E270);
  return result;
}

uint64_t sub_10014E27C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10014E284);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10014E288(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10014E290(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SESTLKShareData.CodingKeys()
{
  return &type metadata for SESTLKShareData.CodingKeys;
}

uint64_t _s10seserviced16CreationMetadataV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_10014E2F8 + 4 * byte_10028AC79[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10014E32C + 4 * byte_10028AC74[v4]))();
}

uint64_t sub_10014E32C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10014E334(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10014E33CLL);
  return result;
}

uint64_t sub_10014E348(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10014E350);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_10014E354(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10014E35C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SESPeerIdentityData.CodingKeys()
{
  return &type metadata for SESPeerIdentityData.CodingKeys;
}

unint64_t sub_10014E37C()
{
  unint64_t result;

  result = qword_100347B30;
  if (!qword_100347B30)
  {
    result = swift_getWitnessTable(&unk_10028AF00, &type metadata for SESPeerIdentityData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100347B30);
  }
  return result;
}

unint64_t sub_10014E3C4()
{
  unint64_t result;

  result = qword_100347B38;
  if (!qword_100347B38)
  {
    result = swift_getWitnessTable(&unk_10028AFB8, &type metadata for SESTLKShareData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100347B38);
  }
  return result;
}

unint64_t sub_10014E40C()
{
  unint64_t result;

  result = qword_100347B40;
  if (!qword_100347B40)
  {
    result = swift_getWitnessTable(&unk_10028B070, &type metadata for SESTLKRecordData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100347B40);
  }
  return result;
}

unint64_t sub_10014E454()
{
  unint64_t result;

  result = qword_100347B48;
  if (!qword_100347B48)
  {
    result = swift_getWitnessTable(&unk_10028B128, &type metadata for CreationMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100347B48);
  }
  return result;
}

unint64_t sub_10014E49C()
{
  unint64_t result;

  result = qword_100347B50;
  if (!qword_100347B50)
  {
    result = swift_getWitnessTable(&unk_10028B098, &type metadata for CreationMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100347B50);
  }
  return result;
}

unint64_t sub_10014E4E4()
{
  unint64_t result;

  result = qword_100347B58;
  if (!qword_100347B58)
  {
    result = swift_getWitnessTable(&unk_10028B0C0, &type metadata for CreationMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100347B58);
  }
  return result;
}

unint64_t sub_10014E52C()
{
  unint64_t result;

  result = qword_100347B60;
  if (!qword_100347B60)
  {
    result = swift_getWitnessTable(&unk_10028AFE0, &type metadata for SESTLKRecordData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100347B60);
  }
  return result;
}

unint64_t sub_10014E574()
{
  unint64_t result;

  result = qword_100347B68;
  if (!qword_100347B68)
  {
    result = swift_getWitnessTable(&unk_10028B008, &type metadata for SESTLKRecordData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100347B68);
  }
  return result;
}

unint64_t sub_10014E5BC()
{
  unint64_t result;

  result = qword_100347B70;
  if (!qword_100347B70)
  {
    result = swift_getWitnessTable(&unk_10028AF28, &type metadata for SESTLKShareData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100347B70);
  }
  return result;
}

unint64_t sub_10014E604()
{
  unint64_t result;

  result = qword_100347B78;
  if (!qword_100347B78)
  {
    result = swift_getWitnessTable(&unk_10028AF50, &type metadata for SESTLKShareData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100347B78);
  }
  return result;
}

unint64_t sub_10014E64C()
{
  unint64_t result;

  result = qword_100347B80;
  if (!qword_100347B80)
  {
    result = swift_getWitnessTable(&unk_10028AE70, &type metadata for SESPeerIdentityData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100347B80);
  }
  return result;
}

unint64_t sub_10014E694()
{
  unint64_t result;

  result = qword_100347B88;
  if (!qword_100347B88)
  {
    result = swift_getWitnessTable(&unk_10028AE98, &type metadata for SESPeerIdentityData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100347B88);
  }
  return result;
}

uint64_t sub_10014E6D8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x5464657070617277 && a2 == 0xEA00000000004B4CLL)
  {
    v5 = 0xEA00000000004B4CLL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x5464657070617277, 0xEA00000000004B4CLL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x80000001002BDA80)
  {
    swift_bridgeObjectRelease(0x80000001002BDA80);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001002BDA80, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_10014E7D0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 0x6E65644972656570 && a2 == 0xEE00726569666974)
  {
    v5 = 0xEE00726569666974;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E65644972656570, 0xEE00726569666974, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000014)
  {
    v7 = 0x80000001002BDA40;
    if (a2 == 0x80000001002BDA40)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x80000001002BDA40, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0xD000000000000014)
  {
    v8 = 0x80000001002BDA60;
    if (a2 == 0x80000001002BDA60)
      goto LABEL_18;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x80000001002BDA60, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_18:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0x7472654364736163 && a2 == 0xEF65746163696669)
  {
    v9 = 0xEF65746163696669;
LABEL_24:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7472654364736163, 0xEF65746163696669, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_24;
  }
  if (a1 == 0x6E6F697461657263 && a2 == 0xEC000000656D6954)
  {
    v10 = 0xEC000000656D6954;
LABEL_30:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461657263, 0xEC000000656D6954, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_30;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x80000001002BDA80)
  {
    swift_bridgeObjectRelease(0x80000001002BDA80);
    return 5;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001002BDA80, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_10014EA94(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  char v8;

  if (a1 == 0xD000000000000013)
  {
    v4 = 0x80000001002BDAA0;
    if (a2 == 0x80000001002BDAA0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x80000001002BDAA0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0xD000000000000013)
  {
    v6 = 0x80000001002BDAC0;
    if (a2 == 0x80000001002BDAC0)
      goto LABEL_10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x80000001002BDAC0, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
LABEL_10:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if (a1 == 0x6574707972636E65 && a2 == 0xED0000626F6C4264)
  {
    v7 = 0xED0000626F6C4264;
LABEL_16:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6574707972636E65, 0xED0000626F6C4264, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_16;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x80000001002BDA80)
  {
    swift_bridgeObjectRelease(0x80000001002BDA80);
    return 3;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001002BDA80, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_10014EC58(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 0x6F69737265567773 && a2 == 0xE90000000000006ELL)
  {
    v5 = 0xE90000000000006ELL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F69737265567773, 0xE90000000000006ELL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 1702125924 && a2 == 0xE400000000000000)
  {
    v7 = 0xE400000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1702125924, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6C65646F6DLL && a2 == 0xE500000000000000)
  {
    v8 = 0xE500000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C65646F6DLL, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x656369766564 && a2 == 0xE600000000000000)
  {
    v9 = 0xE600000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656369766564, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 1684632420 && a2 == 0xE400000000000000)
  {
    v10 = 0xE400000000000000;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1684632420, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x44495344746C61 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease(0xE700000000000000);
    return 5;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0x44495344746C61, 0xE700000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

_QWORD *sub_10014EEB4(void *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  void *v29;
  id v30;
  id *v31;
  id *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  uint64_t v46;
  os_log_type_t v47;
  uint8_t *v48;
  void *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  id *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD v74[3];
  char v75[8];
  id v76;

  v71 = a4;
  v7 = type metadata accessor for JPKIInternalTypes.CertificateType(0);
  v8 = *(_QWORD **)(v7 - 8);
  v10 = __chkstk_darwin(v7, v9);
  v12 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  v15 = (char *)&v64 - v14;
  v16 = type metadata accessor for JPKIInternalTypes.InternalError(0);
  v69 = *(_QWORD *)(v16 - 8);
  v70 = v16;
  v18 = __chkstk_darwin(v16, v17);
  v20 = (char *)&v64 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v21);
  v23 = (char *)&v64 - v22;
  v68 = a1;
  v24 = v72;
  sub_10014F4A0(a1, a2, a3, (uint64_t)&v64 - v22);
  if (v24)
  {
    v26 = v69;
    v25 = v70;
LABEL_3:
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(v71, v23, v25);
    return v8;
  }
  v65 = v12;
  v66 = v20;
  v64 = v15;
  v72 = v8;
  v67 = v7;
  v8 = objc_msgSend(objc_allocWithZone((Class)RAPDU), "init");
  v76 = 0;
  v27 = sub_10004F8D8(v68, 0, 176, 136, 0, 0, 0, &v76);
  v28 = v76;
  if (!v27)
  {
    v40 = v76;
    v41 = _convertNSErrorToError(_:)(v28);

    swift_willThrow(v42);
    if (qword_100344610 != -1)
      swift_once(&qword_100344610, sub_100152E58);
    v43 = type metadata accessor for Logger(0);
    sub_10009673C(v43, (uint64_t)qword_100347B90);
    swift_errorRetain(v41);
    v44 = swift_errorRetain(v41);
    v45 = Logger.logObject.getter(v44);
    v47 = static os_log_type_t.error.getter(v45, v46);
    if (os_log_type_enabled(v45, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc(12, -1);
      v49 = (void *)swift_slowAlloc(32, -1);
      v76 = v49;
      *(_DWORD *)v48 = 136315138;
      swift_getErrorValue(v41, v75, v74);
      v50 = Error.localizedDescription.getter(v74[1], v74[2]);
      v52 = v51;
      v73 = sub_1001C56EC(v50, v51, (uint64_t *)&v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74, v48 + 4, v48 + 12);
      swift_bridgeObjectRelease(v52);
      swift_errorRelease(v41);
      swift_errorRelease(v41);
      _os_log_impl((void *)&_mh_execute_header, v45, v47, "Error while reading availability info %s", v48, 0xCu);
      swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1, -1);
      swift_slowDealloc(v48, -1, -1);
    }
    else
    {
      swift_errorRelease(v41);
      swift_errorRelease(v41);
    }

    v26 = v69;
    v25 = v70;
    v23 = v66;
    *(_QWORD *)v66 = 0xD00000000000003CLL;
    *((_QWORD *)v23 + 1) = 0x80000001002BDAF0;
    (*(void (**)(char *, _QWORD, uint64_t))(v26 + 104))(v23, enum case for JPKIInternalTypes.InternalError.internalError(_:), v25);
    v63 = sub_100152ECC();
    swift_willThrowTypedImpl(v23, v25, v63);

    swift_errorRelease(v41);
    goto LABEL_3;
  }
  v29 = v27;
  v30 = v76;

  v31 = v29;
  v32 = sub_10005582C(v31);
  v33 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v32);
  v35 = v34;

  LODWORD(v32) = Data.subscript.getter(0, v33, v35);
  sub_100063CD0(v33, v35);
  if ((~(_DWORD)v32 & 0xC) != 0)
  {
    v8 = _swiftEmptyArrayStorage;
  }
  else
  {
    v36 = v64;
    v37 = v67;
    ((void (*)(char *, _QWORD, uint64_t))v72[13])(v64, enum case for JPKIInternalTypes.CertificateType.signing(_:), v67);
    v8 = (_QWORD *)sub_1001C52D0(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
    v39 = v8[2];
    v38 = v8[3];
    if (v39 >= v38 >> 1)
      v8 = (_QWORD *)sub_1001C52D0(v38 > 1, v39 + 1, 1, (unint64_t)v8);
    v8[2] = v39 + 1;
    ((void (*)(unint64_t, char *, uint64_t))v72[4])((unint64_t)v8+ ((*((unsigned __int8 *)v72 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v72 + 80))+ v72[9] * v39, v36, v37);
  }
  v53 = sub_10005582C(v31);

  v54 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v53);
  v56 = v55;

  LODWORD(v53) = Data.subscript.getter(1, v54, v56);
  sub_100063CD0(v54, v56);
  if ((~(_DWORD)v53 & 0xC) == 0)
  {
    v57 = v72;
    v58 = v65;
    v59 = v67;
    ((void (*)(char *, _QWORD, uint64_t))v72[13])(v65, enum case for JPKIInternalTypes.CertificateType.user(_:), v67);
    if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
      v8 = (_QWORD *)sub_1001C52D0(0, v8[2] + 1, 1, (unint64_t)v8);
    v61 = v8[2];
    v60 = v8[3];
    if (v61 >= v60 >> 1)
      v8 = (_QWORD *)sub_1001C52D0(v60 > 1, v61 + 1, 1, (unint64_t)v8);
    v8[2] = v61 + 1;
    ((void (*)(unint64_t, char *, uint64_t))v57[4])((unint64_t)v8+ ((*((unsigned __int8 *)v57 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v57 + 80))+ v57[9] * v61, v58, v59);
  }

  return v8;
}

void sub_10014F4A0(void *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  Class isa;
  id v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  uint64_t v18;
  os_log_type_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint8_t *v26;
  unint64_t v27;
  uint64_t v28;
  Swift::String v29;
  void *object;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD v41[3];
  _BYTE v42[8];
  _QWORD v43[3];
  uint64_t v44;
  unint64_t v45;
  _BYTE v46[8];

  v8 = type metadata accessor for JPKIInternalTypes.InternalError(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (uint64_t *)((char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  isa = Data._bridgeToObjectiveC()().super.isa;
  v14 = sub_10004FBA0(a1, isa);

  if (v14)
  {
    v38 = a2;
    v39 = a3;
    if (qword_100344610 != -1)
      swift_once(&qword_100344610, sub_100152E58);
    v15 = type metadata accessor for Logger(0);
    sub_10009673C(v15, (uint64_t)qword_100347B90);
    v16 = v14;
    v17 = Logger.logObject.getter(v16);
    v19 = static os_log_type_t.error.getter(v17, v18);
    if (os_log_type_enabled(v17, v19))
    {
      v20 = swift_slowAlloc(12, -1);
      v37 = a4;
      v21 = (uint8_t *)v20;
      v22 = swift_slowAlloc(32, -1);
      v44 = v22;
      v36 = v9;
      *(_DWORD *)v21 = 136315138;
      v35 = v21 + 4;
      swift_getErrorValue(v16, v42, v41);
      v23 = Error.localizedDescription.getter(v41[1], v41[2]);
      v25 = v24;
      v40 = sub_1001C56EC(v23, v24, &v44);
      v9 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, v41, v35, v21 + 12);

      swift_bridgeObjectRelease(v25);
      _os_log_impl((void *)&_mh_execute_header, v17, v19, "Failed to select Alphonso : %s", v21, 0xCu);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      v26 = v21;
      a4 = v37;
      swift_slowDealloc(v26, -1, -1);

    }
    else
    {

    }
    v44 = 0;
    v45 = 0xE000000000000000;
    v28 = v38;
    v27 = v39;
    sub_100063C8C(v38, v39);
    _StringGuts.grow(_:)(28);
    swift_bridgeObjectRelease(v45);
    v44 = 0xD00000000000001ALL;
    v45 = 0x80000001002BDB50;
    swift_getErrorValue(v16, v46, v43);
    v29._countAndFlagsBits = Error.localizedDescription.getter(v43[1], v43[2]);
    object = v29._object;
    String.append(_:)(v29);
    swift_bridgeObjectRelease(object);
    v31 = v44;
    v32 = v45;
    *v12 = v28;
    v12[1] = v27;
    v12[2] = v31;
    v12[3] = v32;
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(v9 + 104))(v12, enum case for JPKIInternalTypes.InternalError.selectFailed(_:), v8);
    v33 = sub_100152ECC();
    swift_willThrowTypedImpl(v12, v8, v33);

    (*(void (**)(uint64_t, uint64_t *, uint64_t))(v9 + 32))(a4, v12, v8);
  }
}

uint64_t sub_10014F7B4(void *a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  id v39;
  id v40;
  id *v41;
  id v42;
  id *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  id *v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  unint64_t v59;
  _QWORD v60[2];
  uint64_t *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  _QWORD v72[3];
  char v73[8];
  id v74;
  __int128 v75;

  v68 = a6;
  v65 = a5;
  v66 = a4;
  v63 = type metadata accessor for JPKIInternalTypes.CertificateType(0);
  v64 = *(_QWORD *)(v63 - 8);
  __chkstk_darwin(v63, v9);
  v62 = (char *)v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for JPKIInternalTypes.InternalError(0);
  v12 = *(_QWORD *)(v11 - 8);
  v14 = __chkstk_darwin(v11, v13);
  v16 = (_QWORD *)((char *)v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = __chkstk_darwin(v14, v17);
  v20 = (char *)v60 - v19;
  __chkstk_darwin(v18, v21);
  v23 = (char *)v60 - v22;
  v70 = a1;
  v24 = a1;
  v25 = a3;
  v26 = v71;
  sub_10014F4A0(v24, (uint64_t)a2, a3, (uint64_t)v60 - v22);
  if (v26)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 32))(v68, v23, v11);
  v28 = v64;
  v61 = v16;
  v69 = v12;
  v67 = v11;
  v29 = v70;
  v30 = v66;
  sub_100150190(v70, a2, v25, v66, v65, (uint64_t)v20);
  v31 = v62;
  v32 = v30;
  v33 = v63;
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v62, v32, v63);
  v34 = (*(uint64_t (**)(char *, uint64_t))(v28 + 88))(v31, v33);
  v35 = v67;
  v36 = v68;
  v37 = v69;
  v60[1] = 0;
  if (v34 == enum case for JPKIInternalTypes.CertificateType.user(_:))
  {
    v38 = 10;
  }
  else
  {
    if (v34 != enum case for JPKIInternalTypes.CertificateType.signing(_:))
    {
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000017, 0x80000001002BDBA0, "seserviced/JPKICommandDriver.swift", 34, 2, 59, 0);
      __break(1u);
      JUMPOUT(0x100150150);
    }
    v38 = 1;
  }
  v75 = xmmword_1002889A0;
  LODWORD(v65) = v38;
  v74 = 0;
  v39 = sub_10004F8D8(v29, 0, 176, v38 | 0x80u, 0, 0, 255, &v74);
  v40 = v74;
  if (v39)
  {
    v41 = (id *)v39;
    v42 = v40;
    v43 = sub_10005582C(v41);
    v44 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v43);
    v46 = v45;

    sub_100063C8C(v44, v46);
    sub_1000FB17C(v44, v46);
    sub_100063CD0(v44, v46);
    sub_100063CD0(v44, v46);
    v47 = sub_10005582C(v41);

    static Data._unconditionallyBridgeFromObjectiveC(_:)(v47);
    v49 = v48;

    __asm { BR              X10 }
  }
  v50 = v74;
  v51 = _convertNSErrorToError(_:)(v40);

  swift_willThrow(v52);
  swift_getErrorValue(v51, v73, v72);
  v53 = Error.localizedDescription.getter(v72[1], v72[2]);
  v55 = v54;
  LOBYTE(v74) = v65;
  v56 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt8, &protocol witness table for UInt8);
  v57 = v61;
  *v61 = v53;
  v57[1] = v55;
  v57[2] = v56;
  v57[3] = v58;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v37 + 104))(v57, enum case for JPKIInternalTypes.InternalError.certificateReadFailed(_:), v35);
  v59 = sub_100152ECC();
  swift_willThrowTypedImpl(v57, v35, v59);
  swift_errorRelease(v51);
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(v37 + 32))(v36, v57, v35);
  return sub_100063CD0(0, 0xC000000000000000);
}

uint64_t sub_100150190(void *a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t result;
  void *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v32 = a6;
  v28 = a2;
  v29 = a3;
  v10 = type metadata accessor for JPKIInternalTypes.InternalError(0);
  v30 = *(_QWORD *)(v10 - 8);
  v31 = v10;
  v12 = __chkstk_darwin(v10, v11);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v15);
  v17 = (char *)&v28 - v16;
  v18 = type metadata accessor for JPKIInternalTypes.UserAuthenticationInternal(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18, v20);
  v22 = (uint64_t *)((char *)&v28 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v19 + 16))(v22, a5, v18);
  v23 = (*(uint64_t (**)(uint64_t *, uint64_t))(v19 + 88))(v22, v18);
  if (v23 == enum case for JPKIInternalTypes.UserAuthenticationInternal.standard(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v19 + 96))(v22, v18);
    v24 = v22[1];
    sub_100150B80(a1, a4, *v22, v24, (uint64_t)v17);
    if (v6)
    {
      swift_bridgeObjectRelease(v24);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v30 + 32))(v32, v17, v31);
    }
    return swift_bridgeObjectRelease(v24);
  }
  else if (v23 == enum case for JPKIInternalTypes.UserAuthenticationInternal.biometry(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v19 + 96))(v22, v18);
    v26 = *v22;
    v25 = v22[1];
    sub_100151548(a1, v28, v29, a4, v26, v25, v14);
    if (v6)
    {
      sub_100063CD0(v26, v25);
      v17 = v14;
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v30 + 32))(v32, v17, v31);
    }
    return sub_100063CD0(v26, v25);
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000001BLL, 0x80000001002BDBC0, "seserviced/JPKICommandDriver.swift", 34, 2, 181, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_1001503D8(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t (*v33)(uint64_t *, uint64_t);
  int v34;
  int v35;
  void (*v36)(uint64_t *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t result;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  Class isa;
  char v59;
  id v60;
  id v61;
  id v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  uint64_t v69;
  os_log_type_t v70;
  uint8_t *v71;
  void *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  char *v84;
  _QWORD *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD v102[3];
  char v103[8];
  _QWORD v104[3];
  char v105[8];
  id v106;

  v95 = a3;
  v97 = a1;
  v98 = a5;
  v93 = a4;
  v94 = a2;
  v91 = type metadata accessor for String.Encoding(0);
  v90 = *(_QWORD *)(v91 - 8);
  __chkstk_darwin(v91, v9);
  v89 = (char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = type metadata accessor for JPKIInternalTypes.CertificateType(0);
  v87 = *(_QWORD *)(v88 - 8);
  __chkstk_darwin(v88, v11);
  v86 = (char *)&v83 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for JPKIInternalTypes.InternalError(0);
  v99 = *(_QWORD *)(v13 - 8);
  v100 = v13;
  v15 = __chkstk_darwin(v13, v14);
  v84 = (char *)&v83 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15, v17);
  v92 = (uint64_t)&v83 - v19;
  __chkstk_darwin(v18, v20);
  v22 = (char *)&v83 - v21;
  v23 = type metadata accessor for JPKIInternalTypes.UserAuthentication(0);
  v24 = *(_QWORD *)(v23 - 8);
  v26 = __chkstk_darwin(v23, v25);
  v28 = (uint64_t *)((char *)&v83 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v26, v29);
  v31 = (uint64_t *)((char *)&v83 - v30);
  v32 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
  v32((char *)&v83 - v30, a6, v23);
  v33 = *(uint64_t (**)(uint64_t *, uint64_t))(v24 + 88);
  v34 = v33(v31, v23);
  if (v34 != enum case for JPKIInternalTypes.UserAuthentication.standard(_:))
  {
    v28 = v31;
LABEL_7:
    (*(void (**)(uint64_t *, uint64_t))(v24 + 8))(v28, v23);
    *a7 = 0xD000000000000014;
    a7[1] = 0x80000001002BDD00;
    a7[2] = 0xD000000000000029;
    a7[3] = 0x80000001002BDD20;
    v45 = v100;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v99 + 104))(a7, enum case for JPKIInternalTypes.InternalError.invalidPINorPasscode(_:), v100);
    v46 = sub_100152ECC();
    return swift_willThrowTypedImpl(a7, v45, v46);
  }
  v35 = v34;
  v85 = a7;
  v36 = *(void (**)(uint64_t *, uint64_t))(v24 + 96);
  v36(v31, v23);
  v37 = *v31;
  v38 = v31[1];
  v83 = v37;
  v32((char *)v28, v98, v23);
  if (v33(v28, v23) != v35)
  {
    swift_bridgeObjectRelease(v38);
    a7 = v85;
    goto LABEL_7;
  }
  v39 = v38;
  v36(v28, v23);
  v40 = *v28;
  v41 = v28[1];
  v42 = v96;
  v43 = v97;
  sub_10014F4A0(v97, v94, v95, (uint64_t)v22);
  if (v42)
  {
    swift_bridgeObjectRelease(v41);
    swift_bridgeObjectRelease(v39);
    return (*(uint64_t (**)(_QWORD *, char *, uint64_t))(v99 + 32))(v85, v22, v100);
  }
  else
  {
    v47 = v93;
    sub_100150B80(v43, v93, v40, v41, v92);
    swift_bridgeObjectRelease(v41);
    v48 = v87;
    v49 = v86;
    v50 = v88;
    (*(void (**)(char *, uint64_t, uint64_t))(v87 + 16))(v86, v47, v88);
    v51 = (*(uint64_t (**)(char *, uint64_t))(v48 + 88))(v49, v50);
    v52 = v51;
    v53 = enum case for JPKIInternalTypes.CertificateType.user(_:);
    if ((_DWORD)v51 == enum case for JPKIInternalTypes.CertificateType.user(_:)
      || (_DWORD)v51 == enum case for JPKIInternalTypes.CertificateType.signing(_:))
    {
      v54 = v89;
      static String.Encoding.ascii.getter(v51);
      v55 = String.data(using:allowLossyConversion:)(v54, 0, v83, v39);
      v57 = v56;
      swift_bridgeObjectRelease(v39);
      (*(void (**)(char *, uint64_t))(v90 + 8))(v54, v91);
      if (v57 >> 60 == 15)
      {
        isa = 0;
      }
      else
      {
        sub_100063C8C(v55, v57);
        isa = Data._bridgeToObjectiveC()().super.isa;
        sub_10006B9B4(v55, v57);
      }
      v106 = 0;
      if (v52 == v53)
        v59 = -104;
      else
        v59 = -101;
      v60 = sub_10004F8D8(v43, 0, 36, 1, v59, isa, 0, &v106);

      v61 = v106;
      if (v60)
      {
        v62 = v106;

        return sub_10006B9B4(v55, v57);
      }
      else
      {
        v63 = v106;
        v64 = _convertNSErrorToError(_:)(v61);

        swift_willThrow(v65);
        sub_10006B9B4(v55, v57);
        if (qword_100344610 != -1)
          swift_once(&qword_100344610, sub_100152E58);
        v66 = type metadata accessor for Logger(0);
        sub_10009673C(v66, (uint64_t)qword_100347B90);
        swift_errorRetain(v64);
        v67 = swift_errorRetain(v64);
        v68 = Logger.logObject.getter(v67);
        v70 = static os_log_type_t.error.getter(v68, v69);
        if (os_log_type_enabled(v68, v70))
        {
          v71 = (uint8_t *)swift_slowAlloc(12, -1);
          v72 = (void *)swift_slowAlloc(32, -1);
          v106 = v72;
          *(_DWORD *)v71 = 136315138;
          swift_getErrorValue(v64, v103, v102);
          v73 = Error.localizedDescription.getter(v102[1], v102[2]);
          v75 = v74;
          v101 = sub_1001C56EC(v73, v74, (uint64_t *)&v106);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, v102, v71 + 4, v71 + 12);
          swift_bridgeObjectRelease(v75);
          swift_errorRelease(v64);
          swift_errorRelease(v64);
          _os_log_impl((void *)&_mh_execute_header, v68, v70, "Currenty authentication invalid and failed with error %s", v71, 0xCu);
          swift_arrayDestroy(v72, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v72, -1, -1);
          swift_slowDealloc(v71, -1, -1);
        }
        else
        {
          swift_errorRelease(v64);
          swift_errorRelease(v64);
        }

        v76 = v85;
        v77 = v84;
        swift_getErrorValue(v64, v105, v104);
        v78 = Error.localizedDescription.getter(v104[1], v104[2]);
        *v77 = 0xD000000000000027;
        v77[1] = 0x80000001002BDC00;
        v77[2] = v78;
        v77[3] = v79;
        v81 = v99;
        v80 = v100;
        (*(void (**)(_QWORD *, _QWORD, uint64_t))(v99 + 104))(v77, enum case for JPKIInternalTypes.InternalError.invalidPINorPasscode(_:), v100);
        v82 = sub_100152ECC();
        swift_willThrowTypedImpl(v77, v80, v82);
        swift_errorRelease(v64);
        return (*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(v81 + 32))(v76, v77, v80);
      }
    }
    else
    {
      result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000018, 0x80000001002BDBE0, "seserviced/JPKICommandDriver.swift", 34, 2, 161, 0);
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_100150B80(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  Class isa;
  char v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  os_log_type_t v42;
  uint8_t *v43;
  void *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t result;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint8_t *v62;
  uint64_t v63;
  _QWORD v64[3];
  char v65[8];
  _QWORD v66[3];
  char v67[8];
  id v68;

  v60 = a5;
  v61 = a1;
  v8 = type metadata accessor for JPKIInternalTypes.InternalError(0);
  v58 = *(_QWORD *)(v8 - 8);
  v59 = v8;
  __chkstk_darwin(v8, v9);
  v57 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for String.Encoding(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for JPKIInternalTypes.CertificateType(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16, v18);
  v20 = (char *)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, a2, v16);
  v21 = (*(uint64_t (**)(char *, uint64_t))(v17 + 88))(v20, v16);
  v22 = enum case for JPKIInternalTypes.CertificateType.user(_:);
  if ((_DWORD)v21 == enum case for JPKIInternalTypes.CertificateType.user(_:)
    || (_DWORD)v21 == enum case for JPKIInternalTypes.CertificateType.signing(_:))
  {
    v24 = v21;
    static String.Encoding.ascii.getter(v21);
    v25 = String.data(using:allowLossyConversion:)(v15, 0, a3, a4);
    v27 = v26;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    if (v27 >> 60 == 15)
    {
      isa = 0;
    }
    else
    {
      sub_100063C8C(v25, v27);
      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10006B9B4(v25, v27);
    }
    v68 = 0;
    if (v24 == v22)
      v29 = -104;
    else
      v29 = -101;
    v30 = sub_10004F8D8(v61, 0, 32, 0, v29, isa, 0, &v68);

    v31 = v68;
    if (v30)
    {
      v32 = v68;

      return sub_10006B9B4(v25, v27);
    }
    else
    {
      v33 = v68;
      v34 = _convertNSErrorToError(_:)(v31);

      swift_willThrow(v35);
      if (qword_100344610 != -1)
        swift_once(&qword_100344610, sub_100152E58);
      v36 = type metadata accessor for Logger(0);
      sub_10009673C(v36, (uint64_t)qword_100347B90);
      swift_errorRetain(v34);
      v37 = swift_errorRetain(v34);
      v38 = Logger.logObject.getter(v37);
      v42 = static os_log_type_t.info.getter(v38, v39, v40, v41);
      if (os_log_type_enabled(v38, v42))
      {
        v43 = (uint8_t *)swift_slowAlloc(12, -1);
        v44 = (void *)swift_slowAlloc(32, -1);
        v68 = v44;
        *(_DWORD *)v43 = 136315138;
        v62 = v43 + 4;
        swift_getErrorValue(v34, v65, v64);
        v45 = Error.localizedDescription.getter(v64[1], v64[2]);
        v47 = v46;
        v63 = sub_1001C56EC(v45, v46, (uint64_t *)&v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, v64, v62, v43 + 12);
        swift_bridgeObjectRelease(v47);
        swift_errorRelease(v34);
        swift_errorRelease(v34);
        _os_log_impl((void *)&_mh_execute_header, v38, v42, "Currently authentication invalid and failed with error %s", v43, 0xCu);
        swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v44, -1, -1);
        swift_slowDealloc(v43, -1, -1);
      }
      else
      {
        swift_errorRelease(v34);
        swift_errorRelease(v34);
      }

      v49 = v59;
      v48 = v60;
      v51 = v57;
      v50 = v58;
      swift_getErrorValue(v34, v67, v66);
      v52 = Error.localizedDescription.getter(v66[1], v66[2]);
      *v51 = 0xD000000000000027;
      v51[1] = 0x80000001002BDC00;
      v51[2] = v52;
      v51[3] = v53;
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(v50 + 104))(v51, enum case for JPKIInternalTypes.InternalError.invalidPINorPasscode(_:), v49);
      v54 = sub_100152ECC();
      swift_willThrowTypedImpl(v51, v49, v54);
      sub_10006B9B4(v25, v27);
      swift_errorRelease(v34);
      return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(v50 + 32))(v48, v51, v49);
    }
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000018, 0x80000001002BDBE0, "seserviced/JPKICommandDriver.swift", 34, 2, 161, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_10015106C(void *a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char v33;
  Class isa;
  id *v35;
  id v36;
  id v37;
  id *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  uint64_t v49;
  os_log_type_t v50;
  uint64_t v51;
  uint8_t *v52;
  void *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint8_t *v57;
  uint64_t v58;
  unint64_t v59;
  _QWORD v60[3];
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD v68[3];
  char v69[8];
  _QWORD v70[3];
  char v71[8];
  id v72;

  v64 = a8;
  v65 = a7;
  v60[1] = a4;
  v60[2] = a5;
  v12 = type metadata accessor for JPKIInternalTypes.CertificateType(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v16 = (char *)v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for JPKIInternalTypes.InternalError(0);
  v62 = *(_QWORD *)(v17 - 8);
  v63 = v17;
  v19 = __chkstk_darwin(v17, v18);
  v21 = (char *)v60 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19, v22);
  v24 = (char *)v60 - v23;
  v61 = a1;
  v25 = v66;
  v26 = sub_10014F7B4(a1, a2, a3, a6, v65, (uint64_t)v60 - v23);
  if (v25)
  {
    v27 = v24;
    v29 = v63;
    v28 = v64;
    v30 = v62;
    goto LABEL_3;
  }
  v31 = v26;
  v66 = v21;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, a6, v12);
  v32 = (*(uint64_t (**)(char *, uint64_t))(v13 + 88))(v16, v12);
  if (v32 == enum case for JPKIInternalTypes.CertificateType.user(_:))
  {
    v33 = -105;
LABEL_8:
    isa = Data._bridgeToObjectiveC()().super.isa;
    v72 = 0;
    v35 = (id *)sub_10004F8D8(v61, 128, 42, 0, v33, isa, 0, &v72);

    v36 = v72;
    if (v35)
    {
      type metadata accessor for JPKIInternalTypes.DigitalSignature(0);
      v37 = v36;
      v38 = sub_10005582C(v35);
      v39 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v38);
      v41 = v40;

      v13 = JPKIInternalTypes.DigitalSignature.__allocating_init(certificate:signature:)(v31, v39, v41);
      return v13;
    }
    v43 = v72;
    v44 = _convertNSErrorToError(_:)(v36);

    swift_willThrow(v45);
    if (qword_100344610 != -1)
      swift_once(&qword_100344610, sub_100152E58);
    v46 = type metadata accessor for Logger(0);
    sub_10009673C(v46, (uint64_t)qword_100347B90);
    swift_errorRetain(v44);
    v47 = swift_errorRetain(v44);
    v48 = Logger.logObject.getter(v47);
    v50 = static os_log_type_t.error.getter(v48, v49);
    if (os_log_type_enabled(v48, v50))
    {
      v51 = v31;
      v52 = (uint8_t *)swift_slowAlloc(12, -1);
      v53 = (void *)swift_slowAlloc(32, -1);
      v72 = v53;
      *(_DWORD *)v52 = 136315138;
      swift_getErrorValue(v44, v69, v68);
      v54 = Error.localizedDescription.getter(v68[1], v68[2]);
      v56 = v55;
      v67 = sub_1001C56EC(v54, v55, (uint64_t *)&v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, v68, v52 + 4, v52 + 12);
      swift_bridgeObjectRelease(v56);
      swift_errorRelease(v44);
      swift_errorRelease(v44);
      _os_log_impl((void *)&_mh_execute_header, v48, v50, "Unable to perform compute digital signature operation with error %s", v52, 0xCu);
      swift_arrayDestroy(v53, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v53, -1, -1);
      v57 = v52;
      v31 = v51;
      swift_slowDealloc(v57, -1, -1);
    }
    else
    {
      swift_errorRelease(v44);
      swift_errorRelease(v44);
    }

    v29 = v63;
    v28 = v64;
    v30 = v62;
    v27 = v66;
    swift_getErrorValue(v44, v71, v70);
    v13 = v70[0];
    *v27 = Error.localizedDescription.getter(v70[1], v70[2]);
    v27[1] = v58;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v30 + 104))(v27, enum case for JPKIInternalTypes.InternalError.signingFailed(_:), v29);
    v59 = sub_100152ECC();
    swift_willThrowTypedImpl(v27, v29, v59);
    swift_release(v31);
    swift_errorRelease(v44);
LABEL_3:
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v30 + 32))(v28, v27, v29);
    return v13;
  }
  if (v32 == enum case for JPKIInternalTypes.CertificateType.signing(_:))
  {
    v33 = -102;
    goto LABEL_8;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000018, 0x80000001002BDBE0, "seserviced/JPKICommandDriver.swift", 34, 2, 140, 0);
  __break(1u);
  return result;
}

void sub_100151548(void *a1, void *a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, _QWORD *a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  uint8_t *v34;
  void *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  void *v46;
  Class isa;
  NSString v48;
  Class v49;
  void *v50;
  const char *v51;
  id v52;
  id v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  Class v57;
  unint64_t v58;
  void *v59;
  id v60;
  id v61;
  uint64_t v62;
  id v63;
  NSObject *v64;
  uint64_t v65;
  os_log_type_t v66;
  uint8_t *v67;
  void *v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  id v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  void *v78;
  unint64_t v79;
  unint64_t v80;
  void *v81;
  unint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  unint64_t v85;
  void *v86;
  id v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  unint64_t v93;
  Class v94;
  id *v95;
  id v96;
  id v97;
  id *v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  Class v102;
  const char *v103;
  id v104;
  id v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  Class v109;
  Class v110;
  NSString v111;
  uint64_t v112;
  Class v113;
  id v114;
  id v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  Class v119;
  id v120;
  id v121;
  id v122;
  id v123;
  id v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  NSObject *v128;
  uint64_t v129;
  os_log_type_t v130;
  uint8_t *v131;
  void *v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  void *v136;
  uint8_t *v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  NSObject *v142;
  uint64_t v143;
  os_log_type_t v144;
  uint8_t *v145;
  void *v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  _QWORD *v150;
  Swift::String v151;
  void *object;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  id v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  NSObject *v160;
  uint64_t v161;
  os_log_type_t v162;
  uint8_t *v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  void *v167;
  _QWORD *v168;
  uint64_t v169;
  unint64_t v170;
  _QWORD *v171;
  Swift::String v172;
  void *v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  Swift::String v179;
  void *v180;
  unint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  unint64_t v184;
  id v185;
  uint8_t *v186;
  _QWORD *v187;
  unint64_t v188;
  id v189;
  unint64_t v190;
  uint8_t *v191;
  uint64_t v192;
  uint64_t v193;
  void *v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  _QWORD v201[3];
  uint64_t v202;
  _QWORD v203[3];
  uint64_t v204;
  _QWORD v205[3];
  uint64_t v206;
  _QWORD v207[3];
  char v208[8];
  _QWORD v209[3];
  char v210[8];
  uint64_t v211;
  _QWORD v212[3];
  char v213[8];
  _QWORD v214[3];
  char v215[8];
  id v216;
  unint64_t v217;

  v200 = a7;
  v197 = a5;
  v198 = a6;
  v10 = type metadata accessor for JPKIInternalTypes.InternalError(0);
  v11 = *(_QWORD *)(v10 - 8);
  v13 = __chkstk_darwin(v10, v12);
  v15 = (char *)&v185 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v13, v16);
  v19 = (char *)&v185 - v18;
  __chkstk_darwin(v17, v20);
  v22 = (char *)&v185 - v21;
  v23 = v199;
  v24 = sub_1001525F8((uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v185 - v21);
  if (v23)
  {
    (*(void (**)(_QWORD *, char *, uint64_t))(v11 + 32))(v200, v22, v10);
    return;
  }
  v199 = v24;
  v195 = 0;
  v196 = v25;
  v188 = (unint64_t)v19;
  v189 = a2;
  v190 = a3;
  v194 = a1;
  v187 = v15;
  if (qword_100344610 != -1)
    swift_once(&qword_100344610, sub_100152E58);
  v193 = v11;
  v26 = type metadata accessor for Logger(0);
  v27 = sub_10009673C(v26, (uint64_t)qword_100347B90);
  v28 = v199;
  v29 = v196;
  sub_100063C8C(v199, v196);
  v30 = sub_100063C8C(v28, v29);
  v191 = (uint8_t *)v27;
  v31 = Logger.logObject.getter(v30);
  v32 = static os_log_type_t.debug.getter();
  v33 = os_log_type_enabled(v31, v32);
  v192 = v10;
  if (v33)
  {
    v34 = (uint8_t *)swift_slowAlloc(12, -1);
    v35 = (void *)swift_slowAlloc(32, -1);
    v216 = v35;
    *(_DWORD *)v34 = 136315138;
    v186 = v34 + 4;
    v36 = v195;
    sub_1001BD2CC(v199, v29);
    v38 = v37;
    v195 = v36;
    v211 = v37;
    v39 = sub_100063D3C((uint64_t *)&unk_100346060);
    v40 = sub_10006B86C();
    v41 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v39, v40);
    v43 = v42;
    swift_bridgeObjectRelease(v38);
    v211 = sub_1001C56EC(v41, v43, (uint64_t *)&v216);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v211, v212, v186, v34 + 12);
    v44 = v43;
    v45 = v196;
    swift_bridgeObjectRelease(v44);
    sub_100063CD0(v199, v45);
    sub_100063CD0(v199, v45);
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "Performing biometric with ACL %s", v34, 0xCu);
    swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v34, -1, -1);
  }
  else
  {
    sub_100063CD0(v28, v29);
    sub_100063CD0(v28, v29);
  }

  v46 = (void *)objc_opt_self(SESKeyACLChainVerifier);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v48 = String._bridgeToObjectiveC()();
  v49 = Data._bridgeToObjectiveC()().super.isa;
  v50 = v194;
  v52 = sub_10005066C(v194, v51);
  v53 = objc_msgSend(v52, "seid");

  v54 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v53);
  v56 = v55;

  v57 = Data._bridgeToObjectiveC()().super.isa;
  v58 = v56;
  v59 = v50;
  sub_100063CD0(v54, v58);
  v216 = 0;
  v60 = objc_msgSend(v46, "performChainAuthIfNeededForACL:operation:auth:seHandle:seid:error:", isa, v48, v49, v50, v57, &v216);

  if (v216)
  {
    v61 = v216;

    swift_willThrow(v62);
    v63 = v61;
    v64 = Logger.logObject.getter(v63);
    v66 = static os_log_type_t.error.getter(v64, v65);
    if (os_log_type_enabled(v64, v66))
    {
      v67 = (uint8_t *)swift_slowAlloc(12, -1);
      v68 = (void *)swift_slowAlloc(32, -1);
      v216 = v68;
      *(_DWORD *)v67 = 136315138;
      swift_getErrorValue(v63, &v202, v201);
      v69 = Error.localizedDescription.getter(v201[1], v201[2]);
      v71 = v70;
      v211 = sub_1001C56EC(v69, v70, (uint64_t *)&v216);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v211, v212, v67 + 4, v67 + 12);

      swift_bridgeObjectRelease(v71);
      _os_log_impl((void *)&_mh_execute_header, v64, v66, "Failed to perform chain verification : %s", v67, 0xCu);
      swift_arrayDestroy(v68, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v68, -1, -1);
      swift_slowDealloc(v67, -1, -1);

    }
    else
    {

    }
    v83 = v200;
    v84 = v193;
    v85 = v196;
    v86 = (void *)_convertErrorToNSError(_:)(v63);
    v87 = objc_msgSend(v86, "code");

    *v83 = v87;
    v88 = v192;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v84 + 104))(v83, enum case for JPKIInternalTypes.InternalError.biometryFailed(_:), v192);
    v89 = sub_100152ECC();
    swift_willThrowTypedImpl(v83, v88, v89);
    sub_100063CD0(v199, v85);

    return;
  }
  sub_1000500A8(v50);
  v72 = v200;
  v73 = v193;
  if (!v60)
  {
    *v200 = 0xD00000000000001ALL;
    v72[1] = 0x80000001002BDC90;
    v90 = v192;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v73 + 104))(v72, enum case for JPKIInternalTypes.InternalError.operationApprovalFailed(_:), v192);
    v91 = sub_100152ECC();
    swift_willThrowTypedImpl(v72, v90, v91);
    sub_100063CD0(v199, v196);
    return;
  }
  v74 = objc_msgSend(v60, "resolvedAuthorization");
  v75 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v74);
  v77 = v76;

  v78 = v50;
  v79 = v195;
  v80 = v188;
  sub_10014F4A0(v78, (uint64_t)v189, v190, v188);
  v81 = v59;
  v82 = v196;
  if (v79)
  {
    sub_100063CD0(v199, v196);
    sub_100063CD0(v75, v77);
    (*(void (**)(_QWORD *, unint64_t, uint64_t))(v73 + 32))(v72, v80, v192);
LABEL_14:

    return;
  }
  v198 = v75;
  v92 = v81;
  v190 = sub_10007C66C((uint64_t)&off_100305F08);
  v195 = v93;
  v94 = Data._bridgeToObjectiveC()().super.isa;
  v216 = 0;
  v95 = (id *)sub_10004F6A8(v92, v94, &v216);

  v96 = v216;
  v197 = v77;
  if (!v95)
  {
    v124 = v216;
    v125 = _convertNSErrorToError(_:)(v96);

    swift_willThrow(v126);
    swift_errorRetain(v125);
    v127 = swift_errorRetain(v125);
    v128 = Logger.logObject.getter(v127);
    v130 = static os_log_type_t.error.getter(v128, v129);
    if (os_log_type_enabled(v128, v130))
    {
      v131 = (uint8_t *)swift_slowAlloc(12, -1);
      v132 = (void *)swift_slowAlloc(32, -1);
      v216 = v132;
      v189 = v60;
      *(_DWORD *)v131 = 136315138;
      swift_getErrorValue(v125, v213, v212);
      v133 = Error.localizedDescription.getter(v212[1], v212[2]);
      v135 = v134;
      v211 = sub_1001C56EC(v133, v134, (uint64_t *)&v216);
      v82 = v196;
      v60 = v189;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v211, v212, v131 + 4, v131 + 12);
      swift_bridgeObjectRelease(v135);
      swift_errorRelease(v125);
      swift_errorRelease(v125);
      _os_log_impl((void *)&_mh_execute_header, v128, v130, "Failed to get nonce %s", v131, 0xCu);
      swift_arrayDestroy(v132, 1, (char *)&type metadata for Any + 8);
      v136 = v132;
      v73 = v193;
      swift_slowDealloc(v136, -1, -1);
      v137 = v131;
      v72 = v200;
      swift_slowDealloc(v137, -1, -1);
    }
    else
    {
      swift_errorRelease(v125);
      swift_errorRelease(v125);
    }

    v150 = v187;
    v216 = 0;
    v217 = 0xE000000000000000;
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease(v217);
    v216 = (id)0xD000000000000015;
    v217 = 0x80000001002BDC30;
    swift_getErrorValue(v125, v215, v214);
    v151._countAndFlagsBits = Error.localizedDescription.getter(v214[1], v214[2]);
    object = v151._object;
    String.append(_:)(v151);
    swift_bridgeObjectRelease(object);
    v153 = v217;
    *v150 = v216;
    v150[1] = v153;
    v154 = v192;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v73 + 104))(v150, enum case for JPKIInternalTypes.InternalError.operationApprovalFailed(_:), v192);
    v155 = sub_100152ECC();
    swift_willThrowTypedImpl(v150, v154, v155);
    sub_100063CD0(v199, v82);
    sub_100063CD0(v190, v195);
    sub_100063CD0(v198, v197);
    swift_errorRelease(v125);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v73 + 32))(v72, v150, v154);
    goto LABEL_14;
  }
  v189 = v60;
  v97 = v216;
  v98 = sub_10005582C(v95);

  v99 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v98);
  v101 = v100;

  v185 = (id)objc_opt_self(SSEHelper);
  sub_100063C8C(v99, v101);
  v102 = Data._bridgeToObjectiveC()().super.isa;
  v104 = sub_10005066C(v194, v103);
  v105 = objc_msgSend(v104, "seid");

  v106 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v105);
  v108 = v107;

  v109 = Data._bridgeToObjectiveC()().super.isa;
  sub_100063CD0(v106, v108);
  v110 = Data._bridgeToObjectiveC()().super.isa;
  v111 = String._bridgeToObjectiveC()();
  v112 = v99;
  v113 = Data._bridgeToObjectiveC()().super.isa;
  v186 = (uint8_t *)v112;
  v188 = v101;
  sub_100063CD0(v112, v101);
  v216 = 0;
  v114 = objc_msgSend(v185, "performOperationApprovalV3:seid:acl:operation:nonce:error:", v102, v109, v110, v111, v113, &v216);

  v115 = v216;
  if (v114)
  {
    v116 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v114);
    v118 = v117;

    sub_100063C8C(v116, v118);
    v119 = Data._bridgeToObjectiveC()().super.isa;
    sub_100063CD0(v116, v118);
    v216 = 0;
    v120 = sub_10004F8D8(v194, 128, 251, 1, 0, v119, 0, &v216);

    v121 = v216;
    v122 = v189;
    if (v120)
    {
      v123 = v216;
      sub_100063CD0(v199, v196);

      sub_100063CD0(v116, v118);
      sub_100063CD0((uint64_t)v186, v188);
      sub_100063CD0(v190, v195);
      sub_100063CD0(v198, v197);

      return;
    }
    v156 = v216;
    v157 = _convertNSErrorToError(_:)(v121);

    swift_willThrow(v158);
    swift_errorRetain(v157);
    v159 = swift_errorRetain(v157);
    v160 = Logger.logObject.getter(v159);
    v162 = static os_log_type_t.error.getter(v160, v161);
    if (os_log_type_enabled(v160, v162))
    {
      v163 = (uint8_t *)swift_slowAlloc(12, -1);
      v194 = (void *)swift_slowAlloc(32, -1);
      v216 = v194;
      *(_DWORD *)v163 = 136315138;
      v191 = v163 + 4;
      swift_getErrorValue(v157, &v204, v203);
      v164 = Error.localizedDescription.getter(v203[1], v203[2]);
      v166 = v165;
      v211 = sub_1001C56EC(v164, v165, (uint64_t *)&v216);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v211, v212, v191, v163 + 12);
      swift_bridgeObjectRelease(v166);
      swift_errorRelease(v157);
      swift_errorRelease(v157);
      _os_log_impl((void *)&_mh_execute_header, v160, v162, "Applet rejected OP : %s", v163, 0xCu);
      v167 = v194;
      swift_arrayDestroy(v194, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v167, -1, -1);
      swift_slowDealloc(v163, -1, -1);
    }
    else
    {
      swift_errorRelease(v157);
      swift_errorRelease(v157);
    }

    v177 = v193;
    v178 = v196;
    v216 = 0;
    v217 = 0xE000000000000000;
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease(v217);
    v216 = (id)0xD000000000000014;
    v217 = 0x80000001002BDC70;
    swift_getErrorValue(v157, &v206, v205);
    v179._countAndFlagsBits = Error.localizedDescription.getter(v205[1], v205[2]);
    v180 = v179._object;
    String.append(_:)(v179);
    swift_bridgeObjectRelease(v180);
    v181 = v217;
    v182 = v187;
    *v187 = v216;
    v182[1] = v181;
    v183 = v192;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v177 + 104))(v182, enum case for JPKIInternalTypes.InternalError.operationApprovalFailed(_:), v192);
    v184 = sub_100152ECC();
    swift_willThrowTypedImpl(v182, v183, v184);
    sub_100063CD0(v199, v178);
    sub_100063CD0(v116, v118);
    sub_100063CD0((uint64_t)v186, v188);
    sub_100063CD0(v190, v195);
    sub_100063CD0(v198, v197);
    swift_errorRelease(v157);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v177 + 32))(v200, v182, v183);
  }
  else
  {
    v138 = v115;
    v139 = _convertNSErrorToError(_:)(v115);

    swift_willThrow(v140);
    swift_errorRetain(v139);
    v141 = swift_errorRetain(v139);
    v142 = Logger.logObject.getter(v141);
    v144 = static os_log_type_t.error.getter(v142, v143);
    if (os_log_type_enabled(v142, v144))
    {
      v145 = (uint8_t *)swift_slowAlloc(12, -1);
      v146 = (void *)swift_slowAlloc(32, -1);
      v216 = v146;
      *(_DWORD *)v145 = 136315138;
      swift_getErrorValue(v139, v208, v207);
      v147 = Error.localizedDescription.getter(v207[1], v207[2]);
      v149 = v148;
      v211 = sub_1001C56EC(v147, v148, (uint64_t *)&v216);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v211, v212, v145 + 4, v145 + 12);
      swift_bridgeObjectRelease(v149);
      swift_errorRelease(v139);
      swift_errorRelease(v139);
      _os_log_impl((void *)&_mh_execute_header, v142, v144, "Failed to authorize : %s", v145, 0xCu);
      swift_arrayDestroy(v146, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v146, -1, -1);
      swift_slowDealloc(v145, -1, -1);
    }
    else
    {
      swift_errorRelease(v139);
      swift_errorRelease(v139);
    }

    v168 = v200;
    v169 = v193;
    v170 = v196;
    v171 = v187;
    v216 = 0;
    v217 = 0xE000000000000000;
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease(v217);
    v216 = (id)0xD000000000000017;
    v217 = 0x80000001002BDC50;
    swift_getErrorValue(v139, v210, v209);
    v172._countAndFlagsBits = Error.localizedDescription.getter(v209[1], v209[2]);
    v173 = v172._object;
    String.append(_:)(v172);
    swift_bridgeObjectRelease(v173);
    v174 = v217;
    *v171 = v216;
    v171[1] = v174;
    v175 = v192;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v169 + 104))(v171, enum case for JPKIInternalTypes.InternalError.operationApprovalFailed(_:), v192);
    v176 = sub_100152ECC();
    swift_willThrowTypedImpl(v171, v175, v176);
    sub_100063CD0(v199, v170);
    sub_100063CD0((uint64_t)v186, v188);
    sub_100063CD0(v190, v195);
    sub_100063CD0(v198, v197);
    swift_errorRelease(v139);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v169 + 32))(v168, v171, v175);
  }

}

uint64_t sub_1001525F8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  void *object;
  uint64_t v36;
  unint64_t v37;
  _QWORD v39[3];
  _BYTE v40[8];
  uint64_t v41;
  __int128 v42;

  v6 = v4;
  v10 = type metadata accessor for JPKIInternalTypes.InternalError(0);
  v11 = *(_QWORD *)(v10 - 8);
  v13 = __chkstk_darwin(v10, v12);
  v15 = (_QWORD *)((char *)&v39[-1] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v13, v16);
  v18 = (char *)&v39[-1] - v17;
  v42 = xmmword_1002888D0;
  sub_10006F978(a2, a3, (uint64_t)&off_100305EE0, a1, (uint64_t)&v42);
  if (!v4)
  {
    if (*((_QWORD *)&v42 + 1) >> 60 != 15)
      return v42;
    v19 = sub_100152ECC();
    v6 = swift_allocError(v10, v19, 0, 0);
    *v20 = 0xD000000000000013;
    v20[1] = 0x80000001002BDCE0;
    v21 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v20, enum case for JPKIInternalTypes.InternalError.internalError(_:), v10);
    swift_willThrow(v21);
  }
  sub_10006B9B4(v42, *((unint64_t *)&v42 + 1));
  *(_QWORD *)&v42 = v6;
  swift_errorRetain(v6);
  v22 = sub_100063D3C(&qword_100345378);
  if (swift_dynamicCast(v18, &v42, v22, v10, 0))
  {
    swift_errorRelease(v6);
    (*(void (**)(_QWORD *, char *, uint64_t))(v11 + 32))(v15, v18, v10);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v11 + 16))(a4, v15, v10);
    v23 = sub_100152ECC();
    swift_willThrowTypedImpl(a4, v10, v23);
    (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v15, v10);
    return swift_errorRelease(v42);
  }
  else
  {
    swift_errorRelease(v42);
    *(_QWORD *)&v42 = 0;
    *((_QWORD *)&v42 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease(*((_QWORD *)&v42 + 1));
    *(_QWORD *)&v42 = 0xD000000000000021;
    *((_QWORD *)&v42 + 1) = 0x80000001002BDCB0;
    sub_1001BD2CC(a2, a3);
    v26 = v25;
    v41 = v25;
    v27 = sub_100063D3C((uint64_t *)&unk_100346060);
    v28 = sub_10006B86C();
    v29 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v27, v28);
    v31 = v30;
    swift_bridgeObjectRelease(v26);
    v32._countAndFlagsBits = v29;
    v32._object = v31;
    String.append(_:)(v32);
    swift_bridgeObjectRelease(v31);
    v33._countAndFlagsBits = 2112032;
    v33._object = (void *)0xE300000000000000;
    String.append(_:)(v33);
    swift_getErrorValue(v6, v40, v39);
    v34._countAndFlagsBits = Error.localizedDescription.getter(v39[1], v39[2]);
    object = v34._object;
    String.append(_:)(v34);
    swift_bridgeObjectRelease(object);
    v36 = *((_QWORD *)&v42 + 1);
    *v15 = v42;
    v15[1] = v36;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v15, enum case for JPKIInternalTypes.InternalError.internalError(_:), v10);
    v37 = sub_100152ECC();
    swift_willThrowTypedImpl(v15, v10, v37);
    swift_errorRelease(v6);
    return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(v11 + 32))(a4, v15, v10);
  }
}

uint64_t sub_100152934(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  void *v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  Class isa;
  id v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  os_log_type_t v33;
  _BOOL4 v34;
  uint8_t *v35;
  _DWORD *v36;
  uint8_t *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  void *v41;
  unint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[3];
  _BYTE v51[8];
  id v52;

  v2 = type metadata accessor for JPKIInternalTypes.InternalError(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (id)SESKeyGetDesignatedKeys(0);
  if (!v7)
    goto LABEL_12;
  v8 = v7;
  v9 = sub_1000E7B88();
  v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v8, v9);

  v47 = v2;
  v48 = a1;
  v46 = v3;
  if (!((unint64_t)v10 >> 62))
  {
    v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v10);
    if (v11)
      goto LABEL_4;
    goto LABEL_11;
  }
LABEL_24:
  if (v10 < 0)
    v43 = v10;
  else
    v43 = v10 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v10);
  v11 = _CocoaArrayWrapper.endIndex.getter(v43);
  if (!v11)
  {
LABEL_11:
    swift_bridgeObjectRelease_n(v10, 2);
    v2 = v47;
    a1 = v48;
    v3 = v46;
LABEL_12:
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for JPKIInternalTypes.InternalError.designatedKeyNotFound(_:), v2);
    v16 = sub_100152ECC();
    swift_willThrowTypedImpl(v6, v2, v16);
    goto LABEL_13;
  }
LABEL_4:
  v12 = 4;
  while (1)
  {
    if ((v10 & 0xC000000000000001) != 0)
      v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12 - 4, v10);
    else
      v13 = *(id *)(v10 + 8 * v12);
    v14 = v13;
    v15 = v12 - 3;
    if (__OFADD__(v12 - 4, 1))
    {
      __break(1u);
      goto LABEL_24;
    }
    if (objc_msgSend(v13, "designation") == (id)2)
      break;

    ++v12;
    if (v15 == v11)
      goto LABEL_11;
  }
  swift_bridgeObjectRelease_n(v10, 2);
  v18 = (void *)objc_opt_self(PTClassicMicro);
  v19 = objc_msgSend(v14, "assetACL");
  v20 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v22 = v21;

  isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100063CD0(v20, v22);
  v52 = 0;
  v24 = objc_msgSend(v18, "getACLfromAssetACL:error:", isa, &v52);

  v25 = v52;
  if (v24)
  {
    a1 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v24);

    return a1;
  }
  v26 = v25;
  v27 = _convertNSErrorToError(_:)(v25);

  swift_willThrow(v28);
  if (qword_100344610 != -1)
    swift_once(&qword_100344610, sub_100152E58);
  v29 = type metadata accessor for Logger(0);
  sub_10009673C(v29, (uint64_t)qword_100347B90);
  swift_errorRetain(v27);
  v30 = swift_errorRetain(v27);
  v31 = Logger.logObject.getter(v30);
  v33 = static os_log_type_t.error.getter(v31, v32);
  v34 = os_log_type_enabled(v31, v33);
  v2 = v47;
  if (v34)
  {
    v35 = (uint8_t *)swift_slowAlloc(12, -1);
    v45 = (void *)swift_slowAlloc(32, -1);
    v52 = v45;
    *(_DWORD *)v35 = 136315138;
    v36 = v35 + 12;
    v44 = v35 + 4;
    v37 = v35;
    swift_getErrorValue(v27, v51, v50);
    v38 = Error.localizedDescription.getter(v50[1], v50[2]);
    v40 = v39;
    v49 = sub_1001C56EC(v38, v39, (uint64_t *)&v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, v50, v44, v36);
    swift_bridgeObjectRelease(v40);
    swift_errorRelease(v27);
    swift_errorRelease(v27);
    _os_log_impl((void *)&_mh_execute_header, v31, v33, "Failed to decode assetACL? %s", v37, 0xCu);
    v41 = v45;
    swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1, -1);
    swift_slowDealloc(v37, -1, -1);
  }
  else
  {
    swift_errorRelease(v27);
    swift_errorRelease(v27);
  }

  a1 = v48;
  v3 = v46;
  (*(void (**)(char *, _QWORD, uint64_t))(v46 + 104))(v6, enum case for JPKIInternalTypes.InternalError.designatedKeyCorrupt(_:), v2);
  v42 = sub_100152ECC();
  swift_willThrowTypedImpl(v6, v2, v42);

  swift_errorRelease(v27);
LABEL_13:
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(a1, v6, v2);
  return a1;
}

uint64_t sub_100152DCC(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  result = sub_10013AAE8(a1, a2, 227);
  if (!v3)
  {
    v7 = result;
    v8 = v6;
    v9 = sub_10013AAE8(result, v6, 218);
    v11 = v10;
    sub_100063CD0(v7, v8);
    v12 = *a3;
    v13 = a3[1];
    *a3 = v9;
    a3[1] = v11;
    return sub_10006B9B4(v12, v13);
  }
  return result;
}

uint64_t sub_100152E58()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Logger(0);
  sub_1000980F8(v0, qword_100347B90);
  sub_10009673C(v0, (uint64_t)qword_100347B90);
  v1 = String.init(cString:)(SESLoggingSubsystem);
  return Logger.init(subsystem:category:)(v1);
}

unint64_t sub_100152ECC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100347C08;
  if (!qword_100347C08)
  {
    v1 = type metadata accessor for JPKIInternalTypes.InternalError(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for JPKIInternalTypes.InternalError, v1);
    atomic_store(result, (unint64_t *)&qword_100347C08);
  }
  return result;
}

void sub_100152F14()
{
  id v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;

  v0 = objc_allocWithZone((Class)type metadata accessor for PassSelectionObserver());
  v1 = sub_1001C22FC(0, 1.0, 60.0);
  if (qword_100344620 != -1)
    swift_once(&qword_100344620, sub_100153184);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10009673C(v2, (uint64_t)qword_100347C10);
  v4 = Logger.logObject.getter(v3);
  v8 = static os_log_type_t.info.getter(v4, v5, v6, v7);
  if (os_log_type_enabled(v4, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v8, "Started", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  qword_100354CE8 = (uint64_t)v1;
}

void sub_10015300C(char a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  int v10;
  uint64_t v11;

  if (qword_100344620 != -1)
    swift_once(&qword_100344620, sub_100153184);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10009673C(v2, (uint64_t)qword_100347C10);
  v4 = Logger.logObject.getter(v3);
  v8 = static os_log_type_t.info.getter(v4, v5, v6, v7);
  if (os_log_type_enabled(v4, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v9 = 67109120;
    v10 = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11, v9 + 4, v9 + 8);
    _os_log_impl((void *)&_mh_execute_header, v4, v8, "Received %{BOOL}d status", v9, 8u);
    swift_slowDealloc(v9, -1, -1);
  }

  if ((a1 & 1) != 0)
    sub_1001C2530();
  else
    sub_1001C284C();
}

id sub_100153130()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PassSelectionObserver();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for PassSelectionObserver()
{
  return objc_opt_self(_TtC10seserviced21PassSelectionObserver);
}

uint64_t sub_100153184()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Logger(0);
  sub_1000980F8(v0, qword_100347C10);
  sub_10009673C(v0, (uint64_t)qword_100347C10);
  v1 = String.init(cString:)(SESLoggingSubsystem);
  return Logger.init(subsystem:category:)(v1);
}

void sub_1001531F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  NSString v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  _OWORD v9[2];
  _OWORD v10[2];

  if ((*(_BYTE *)(v1 + 48) & 1) != 0 && (SESInternalVariant(a1) & 1) == 0)
  {
LABEL_9:
    swift_bridgeObjectRetain(*(_QWORD *)(v1 + 40));
    return;
  }
  v2 = *(_QWORD *)(v1 + 8);
  v3 = objc_allocWithZone((Class)NSUserDefaults);
  swift_bridgeObjectRetain(v2);
  v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v2);
  v5 = objc_msgSend(v3, "initWithSuiteName:", v4);

  if (v5)
  {
    v6 = String._bridgeToObjectiveC()();
    v7 = objc_msgSend(v5, "valueForKey:", v6);

    if (v7)
    {
      _bridgeAnyObjectToAny(_:)(v9);
      swift_unknownObjectRelease(v7);
      sub_10006C2B4(v9, v10);
    }
    else
    {
      memset(v10, 0, sizeof(v10));
    }
    v8 = sub_100063D3C((uint64_t *)&unk_100346130);
    if (!swift_dynamicCast(v9, v10, v8, &type metadata for String, 6) || !*((_QWORD *)&v9[0] + 1))
      goto LABEL_9;
  }
  else
  {
    __break(1u);
  }
}

void sub_100153344(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  NSString v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  _OWORD v9[2];
  _OWORD v10[2];

  v2 = *(_QWORD *)(v1 + 8);
  if ((*(_BYTE *)(v1 + 40) & 1) == 0 || SESInternalVariant(a1))
  {
    v3 = objc_allocWithZone((Class)NSUserDefaults);
    swift_bridgeObjectRetain(v2);
    v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v2);
    v5 = objc_msgSend(v3, "initWithSuiteName:", v4);

    if (v5)
    {
      v6 = String._bridgeToObjectiveC()();
      v7 = objc_msgSend(v5, "valueForKey:", v6);

      if (v7)
      {
        _bridgeAnyObjectToAny(_:)(v9);
        swift_unknownObjectRelease(v7);
        sub_10006C2B4(v9, v10);
      }
      else
      {
        memset(v10, 0, sizeof(v10));
      }
      v8 = sub_100063D3C((uint64_t *)&unk_100346130);
      swift_dynamicCast(v9, v10, v8, &type metadata for Double, 6);
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_10015348C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  NSString v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  _OWORD v9[2];
  _OWORD v10[2];

  v2 = *(_QWORD *)(v1 + 8);
  if ((*(_BYTE *)(v1 + 33) & 1) == 0 || SESInternalVariant(a1))
  {
    v3 = objc_allocWithZone((Class)NSUserDefaults);
    swift_bridgeObjectRetain(v2);
    v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v2);
    v5 = objc_msgSend(v3, "initWithSuiteName:", v4);

    if (v5)
    {
      v6 = String._bridgeToObjectiveC()();
      v7 = objc_msgSend(v5, "valueForKey:", v6);

      if (v7)
      {
        _bridgeAnyObjectToAny(_:)(v9);
        swift_unknownObjectRelease(v7);
        sub_10006C2B4(v9, v10);
      }
      else
      {
        memset(v10, 0, sizeof(v10));
      }
      v8 = sub_100063D3C((uint64_t *)&unk_100346130);
      swift_dynamicCast(v9, v10, v8, &type metadata for Bool, 6);
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_1001535D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  NSString v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  _OWORD v9[2];
  _OWORD v10[2];

  v2 = *(_QWORD *)(v1 + 8);
  if ((*(_BYTE *)(v1 + 33) & 1) == 0 || SESInternalVariant(a1))
  {
    v3 = objc_allocWithZone((Class)NSUserDefaults);
    swift_bridgeObjectRetain(v2);
    v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v2);
    v5 = objc_msgSend(v3, "initWithSuiteName:", v4);

    if (v5)
    {
      v6 = String._bridgeToObjectiveC()();
      v7 = objc_msgSend(v5, "valueForKey:", v6);

      if (v7)
      {
        _bridgeAnyObjectToAny(_:)(v9);
        swift_unknownObjectRelease(v7);
        sub_10006C2B4(v9, v10);
      }
      else
      {
        memset(v10, 0, sizeof(v10));
      }
      v8 = sub_100063D3C((uint64_t *)&unk_100346130);
      swift_dynamicCast(v9, v10, v8, &type metadata for UInt8, 6);
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_100153718(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  NSString v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  _OWORD v9[2];
  _OWORD v10[2];

  v2 = *(_QWORD *)(v1 + 8);
  if ((*(_BYTE *)(v1 + 40) & 1) == 0 || SESInternalVariant(a1))
  {
    v3 = objc_allocWithZone((Class)NSUserDefaults);
    swift_bridgeObjectRetain(v2);
    v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v2);
    v5 = objc_msgSend(v3, "initWithSuiteName:", v4);

    if (v5)
    {
      v6 = String._bridgeToObjectiveC()();
      v7 = objc_msgSend(v5, "valueForKey:", v6);

      if (v7)
      {
        _bridgeAnyObjectToAny(_:)(v9);
        swift_unknownObjectRelease(v7);
        sub_10006C2B4(v9, v10);
      }
      else
      {
        memset(v10, 0, sizeof(v10));
      }
      v8 = sub_100063D3C((uint64_t *)&unk_100346130);
      swift_dynamicCast(v9, v10, v8, &type metadata for Int, 6);
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_100153858(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  NSString v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD v10[2];
  _OWORD v11[2];

  if ((*(_BYTE *)(v1 + 48) & 1) != 0 && (SESInternalVariant(a1) & 1) == 0)
  {
LABEL_9:
    swift_bridgeObjectRetain(*(_QWORD *)(v1 + 40));
    return;
  }
  v2 = *(_QWORD *)(v1 + 8);
  v3 = objc_allocWithZone((Class)NSUserDefaults);
  swift_bridgeObjectRetain(v2);
  v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v2);
  v5 = objc_msgSend(v3, "initWithSuiteName:", v4);

  if (v5)
  {
    v6 = String._bridgeToObjectiveC()();
    v7 = objc_msgSend(v5, "valueForKey:", v6);

    if (v7)
    {
      _bridgeAnyObjectToAny(_:)(v10);
      swift_unknownObjectRelease(v7);
      sub_10006C2B4(v10, v11);
    }
    else
    {
      memset(v11, 0, sizeof(v11));
    }
    v8 = sub_100063D3C((uint64_t *)&unk_100346130);
    v9 = sub_100063D3C((uint64_t *)&unk_100347DD0);
    if (!swift_dynamicCast(v10, v11, v8, v9, 6) || *((_QWORD *)&v10[0] + 1) == 1)
      goto LABEL_9;
  }
  else
  {
    __break(1u);
  }
}

void sub_1001539B4()
{
  char *v0;
  uint64_t v1;
  id v2;
  char *v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;

  v0 = (char *)objc_allocWithZone((Class)type metadata accessor for LyonGeofenceException());
  v1 = OBJC_IVAR____TtC10seserviced21LyonGeofenceException_homeManager;
  v2 = objc_allocWithZone((Class)HMHomeManagerConfiguration);
  v3 = v0;
  v4 = objc_msgSend(v2, "initWithOptions:cachePolicy:", 1, 0);
  v5 = objc_msgSend(objc_allocWithZone((Class)HMHomeManager), "initWithConfiguration:", v4);

  *(_QWORD *)&v0[v1] = v5;
  v3[OBJC_IVAR____TtC10seserviced21LyonGeofenceException_hasLoadedHomes] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC10seserviced21LyonGeofenceException_homeDelegates] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v3[OBJC_IVAR____TtC10seserviced21LyonGeofenceException_assertion] = 0;
  v6 = OBJC_IVAR____TtC10seserviced21LyonGeofenceException_forceNotOutOfHome;
  sub_10015348C(v7);
  v3[v6] = v8 & 1;

  v9 = sub_1001C22FC(0, 1.0, 300.0);
  v10 = qword_100344630;
  v11 = v9;
  if (v10 != -1)
    swift_once(&qword_100344630, sub_100155AB4);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_10009673C(v12, (uint64_t)qword_100347C50);
  v14 = Logger.logObject.getter(v13);
  v18 = static os_log_type_t.info.getter(v14, v15, v16, v17);
  if (os_log_type_enabled(v14, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v18, "Started geofence exception", v19, 2u);
    swift_slowDealloc(v19, -1, -1);
  }

  qword_100354CF0 = (uint64_t)v11;
}

void sub_100153BB0()
{
  uint64_t v0;
  void *v1;
  id v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC10seserviced21LyonGeofenceException_homeManager);
  v2 = objc_msgSend(v1, "homes");
  v3 = sub_100156244();
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  if ((unint64_t)v4 >> 62)
  {
    if (v4 < 0)
      v9 = v4;
    else
      v9 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v5 = _CocoaArrayWrapper.endIndex.getter(v9);
    swift_bridgeObjectRelease(v4);
    if (!v5)
      goto LABEL_13;
  }
  else
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v5)
      goto LABEL_13;
  }
  if (v5 < 1)
  {
    __break(1u);
    return;
  }
  for (i = 0; i != v5; ++i)
  {
    if ((v4 & 0xC000000000000001) != 0)
      v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v4);
    else
      v7 = *(id *)(v4 + 8 * i + 32);
    v8 = v7;
    objc_msgSend(v7, "setDelegate:", 0);

  }
LABEL_13:
  swift_bridgeObjectRelease(v4);
  v10 = OBJC_IVAR____TtC10seserviced21LyonGeofenceException_assertion;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced21LyonGeofenceException_assertion))
  {
    objc_msgSend(v1, "_endActiveAssertion:");
    v11 = *(_QWORD *)(v0 + v10);
  }
  else
  {
    v11 = 0;
  }
  *(_QWORD *)(v0 + v10) = 0;
  swift_unknownObjectRelease(v11);
  objc_msgSend(v1, "setDelegate:", 0);
  *(_BYTE *)(v0 + OBJC_IVAR____TtC10seserviced21LyonGeofenceException_hasLoadedHomes) = 0;
}

void sub_100153D1C(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  NSString v7;
  id v8;
  uint64_t v9;
  id v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  os_log_type_t v34;
  _DWORD *v35;
  id v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint8_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  __n128 v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  _DWORD *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char v62[24];

  v2 = type metadata accessor for UUID(0);
  v56 = *(_QWORD *)(v2 - 8);
  v57 = v2;
  __chkstk_darwin(v2, v3);
  v55 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_BYTE *)(a1 + OBJC_IVAR____TtC10seserviced21LyonGeofenceException_hasLoadedHomes) = 1;
  v5 = OBJC_IVAR____TtC10seserviced21LyonGeofenceException_assertion;
  if (*(_QWORD *)(a1 + OBJC_IVAR____TtC10seserviced21LyonGeofenceException_assertion))
    objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC10seserviced21LyonGeofenceException_homeManager), "_endActiveAssertion:");
  v6 = *(void **)(a1 + OBJC_IVAR____TtC10seserviced21LyonGeofenceException_homeManager);
  v7 = String._bridgeToObjectiveC()();
  v8 = objc_msgSend(v6, "_beginActiveAssertionWithReason:", v7);

  v9 = *(_QWORD *)(a1 + v5);
  *(_QWORD *)(a1 + v5) = v8;
  swift_unknownObjectRelease(v9);
  v10 = objc_msgSend(v6, "homes");
  v11 = sub_100156244();
  v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v10, v11);

  if ((unint64_t)v12 >> 62)
  {
LABEL_32:
    if (v12 < 0)
      v50 = v12;
    else
      v50 = v12 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v12);
    v13 = _CocoaArrayWrapper.endIndex.getter(v50);
    swift_bridgeObjectRelease(v12);
    if (v13)
      goto LABEL_5;
LABEL_36:
    swift_bridgeObjectRelease(v12);
    sub_100154234();
    return;
  }
  v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v13)
    goto LABEL_36;
LABEL_5:
  if (v13 >= 1)
  {
    v51 = a1;
    v14 = (_QWORD *)(a1 + OBJC_IVAR____TtC10seserviced21LyonGeofenceException_homeDelegates);
    a1 = v12 & 0xC000000000000001;
    v15 = swift_beginAccess(v14, v62, 0, 0);
    v16 = 0;
    v17 = 0;
    v15.n128_u64[0] = 136315138;
    v53 = v15;
    v52 = (char *)&type metadata for Any + 8;
    v54 = v13;
    v60 = v12 & 0xC000000000000001;
    while (1)
    {
      if (a1)
        v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v16, v12);
      else
        v18 = *(id *)(v12 + 8 * v16 + 32);
      v19 = *v14;
      v20 = v18;
      swift_bridgeObjectRetain(v19);
      v22 = (uint64_t)sub_100155D78(v21, v20);
      swift_bridgeObjectRelease(v19);

      if ((unint64_t)v22 >> 62)
      {
        if (v22 < 0)
          v27 = v22;
        else
          v27 = v22 & 0xFFFFFFFFFFFFFF8;
        if (!_CocoaArrayWrapper.endIndex.getter(v27))
        {
LABEL_25:
          swift_bridgeObjectRelease(v22);
          if (qword_100344630 != -1)
            swift_once(&qword_100344630, sub_100155AB4);
          v28 = type metadata accessor for Logger(0);
          sub_10009673C(v28, (uint64_t)qword_100347C50);
          v29 = v20;
          v30 = Logger.logObject.getter(v29);
          v34 = static os_log_type_t.info.getter(v30, v31, v32, v33);
          if (os_log_type_enabled(v30, v34))
          {
            v35 = (_DWORD *)swift_slowAlloc(12, -1);
            v58 = v35;
            v59 = swift_slowAlloc(32, -1);
            v61 = v59;
            *v35 = v53.n128_u32[0];
            v36 = objc_msgSend(v29, "uniqueIdentifier");
            v37 = v55;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)(v36);

            v39 = v17;
            v40 = v14;
            v41 = v12;
            v42 = UUID.uuidString.getter(v38);
            v44 = v43;
            (*(void (**)(char *, uint64_t))(v56 + 8))(v37, v57);
            v45 = v42;
            v12 = v41;
            v14 = v40;
            v17 = v39;
            v46 = sub_1001C56EC(v45, v44, &v61);
            v47 = (uint8_t *)v58;
            *(_QWORD *)(v58 + 1) = v46;

            v48 = v44;
            v13 = v54;
            swift_bridgeObjectRelease(v48);
            _os_log_impl((void *)&_mh_execute_header, v30, v34, "No homeDelegate registered for UUID %s", v47, 0xCu);
            v49 = v59;
            swift_arrayDestroy(v59, 1, v52);
            swift_slowDealloc(v49, -1, -1);
            swift_slowDealloc(v47, -1, -1);

          }
          else
          {

          }
          a1 = v60;
          goto LABEL_9;
        }
      }
      else if (!*(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_25;
      }
      if ((v22 & 0xC000000000000001) != 0)
      {
        v23 = (_BYTE *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v22);
      }
      else
      {
        if (!*(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          goto LABEL_32;
        }
        v23 = *(id *)(v22 + 32);
      }
      v24 = v23;
      swift_bridgeObjectRelease(v22);
      objc_msgSend(v20, "setDelegate:", v24);
      v25 = (unint64_t)objc_msgSend(v20, "homeLocationStatus");
      v26 = 0x1020003u >> (8 * v25);
      if (v25 >= 4)
        LOBYTE(v26) = 3;
      v24[OBJC_IVAR____TtC10seserviced16LyonHomeDelegate_location] = v26;
      sub_1001553DC();

LABEL_9:
      if (v13 == ++v16)
        goto LABEL_36;
    }
  }
  __break(1u);
}

void sub_100154234()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  os_log_type_t v22;
  uint8_t *v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unsigned int v29;
  char v31;
  uint64_t v32;
  char v34[24];

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (uint64_t *)&v34[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (qword_1003447B8 != -1)
    goto LABEL_18;
LABEL_2:
  v7 = qword_100354EE8;
  *v6 = qword_100354EE8;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(uint64_t *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) == 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC10seserviced21LyonGeofenceException_hasLoadedHomes) != 1)
    return;
  v6 = (uint64_t *)(v1 + OBJC_IVAR____TtC10seserviced21LyonGeofenceException_homeDelegates);
  swift_beginAccess(v1 + OBJC_IVAR____TtC10seserviced21LyonGeofenceException_homeDelegates, v34, 0, 0);
  v2 = *v6;
  if ((unint64_t)*v6 >> 62)
  {
LABEL_20:
    if (v2 < 0)
      v15 = v2;
    else
      v15 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v2, 2);
    v9 = _CocoaArrayWrapper.endIndex.getter(v15);
    if (!v9)
    {
LABEL_24:
      swift_bridgeObjectRelease_n(v2, 2);
      if (qword_100344630 != -1)
        goto LABEL_49;
      goto LABEL_25;
    }
    goto LABEL_6;
  }
  v9 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n(*v6, 2);
  if (!v9)
    goto LABEL_24;
LABEL_6:
  v10 = 4;
  while (1)
  {
    v11 = v10 - 4;
    if ((v2 & 0xC000000000000001) != 0)
    {
      v12 = (_BYTE *)specialized _ArrayBuffer._getElementSlowPath(_:)(v10 - 4, v2);
      v13 = __OFADD__(v11, 1);
      v3 = v10 - 3;
      if (v13)
        goto LABEL_17;
    }
    else
    {
      v12 = *(id *)(v2 + 8 * v10);
      v13 = __OFADD__(v11, 1);
      v3 = v10 - 3;
      if (v13)
      {
LABEL_17:
        __break(1u);
LABEL_18:
        swift_once(&qword_1003447B8, sub_1001EEFA4);
        goto LABEL_2;
      }
    }
    if (v12[OBJC_IVAR____TtC10seserviced16LyonHomeDelegate_isExpress] == 1)
      break;

LABEL_8:
    ++v10;
    if (v3 == v9)
      goto LABEL_24;
  }
  v14 = v12[OBJC_IVAR____TtC10seserviced16LyonHomeDelegate_location];

  if (v14)
    goto LABEL_8;
  swift_bridgeObjectRelease_n(v2, 2);
  sub_1001C2530();
  while (1)
  {
    if (*(_BYTE *)(v1 + OBJC_IVAR____TtC10seserviced21LyonGeofenceException_forceNotOutOfHome) == 1)
    {
      if (qword_100344708 != -1)
        swift_once(&qword_100344708, sub_1001C2AE4);
      v24 = 0;
      goto LABEL_58;
    }
    v1 = *v6;
    if (!((unint64_t)*v6 >> 62))
    {
      v25 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n(*v6, 2);
      if (!v25)
        break;
      goto LABEL_34;
    }
    v32 = v1 < 0 ? *v6 : v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(*v6, 2);
    v25 = _CocoaArrayWrapper.endIndex.getter(v32);
    if (!v25)
      break;
LABEL_34:
    v26 = 4;
    while (1)
    {
      v27 = v26 - 4;
      if ((v1 & 0xC000000000000001) == 0)
        break;
      v28 = (unsigned __int8 *)specialized _ArrayBuffer._getElementSlowPath(_:)(v26 - 4, v1);
      v13 = __OFADD__(v27, 1);
      v6 = (uint64_t *)(v26 - 3);
      if (v13)
        goto LABEL_48;
LABEL_42:
      if (v28[OBJC_IVAR____TtC10seserviced16LyonHomeDelegate_isExpress] == 1)
      {
        v29 = v28[OBJC_IVAR____TtC10seserviced16LyonHomeDelegate_location];

        if (v29 <= 3 && v29 != 2)
        {
          v31 = 0;
          goto LABEL_55;
        }
      }
      else
      {

      }
      ++v26;
      if (v6 == (uint64_t *)v25)
        goto LABEL_54;
    }
    v28 = (unsigned __int8 *)*(id *)(v1 + 8 * v26);
    v13 = __OFADD__(v27, 1);
    v6 = (uint64_t *)(v26 - 3);
    if (!v13)
      goto LABEL_42;
LABEL_48:
    __break(1u);
LABEL_49:
    swift_once(&qword_100344630, sub_100155AB4);
LABEL_25:
    v16 = type metadata accessor for Logger(0);
    v17 = sub_10009673C(v16, (uint64_t)qword_100347C50);
    v18 = Logger.logObject.getter(v17);
    v22 = static os_log_type_t.info.getter(v18, v19, v20, v21);
    if (os_log_type_enabled(v18, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v22, "No home within geofence", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }

    sub_1001C284C();
  }
LABEL_54:
  v31 = 1;
LABEL_55:
  swift_bridgeObjectRelease_n(v1, 2);
  if (qword_100344708 != -1)
    swift_once(&qword_100344708, sub_1001C2AE4);
  v24 = v31;
LABEL_58:
  sub_1001C1B10(2u, 2u, 2u, 0, v24);
}

void sub_100154680(uint64_t a1, unint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  objc_class *v6;
  _BYTE *v7;
  uint64_t *v8;
  uint64_t *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  _BYTE *v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44[3];
  objc_super v45;

  v3 = v2;
  v6 = (objc_class *)type metadata accessor for LyonHomeDelegate();
  v7 = objc_allocWithZone(v6);
  v8 = (uint64_t *)&v7[OBJC_IVAR____TtC10seserviced16LyonHomeDelegate_homeUUID];
  v42 = a1;
  *v8 = a1;
  v8[1] = a2;
  v9 = &qword_100347000;
  v7[OBJC_IVAR____TtC10seserviced16LyonHomeDelegate_location] = 3;
  v7[OBJC_IVAR____TtC10seserviced16LyonHomeDelegate_isExpress] = 0;
  v45.receiver = v7;
  v45.super_class = v6;
  swift_bridgeObjectRetain(a2);
  v10 = objc_msgSendSuper2(&v45, "init");
  if (qword_100344630 != -1)
    swift_once(&qword_100344630, sub_100155AB4);
  v11 = type metadata accessor for Logger(0);
  sub_10009673C(v11, (uint64_t)qword_100347C50);
  v12 = swift_bridgeObjectRetain_n(a2, 2);
  v13 = Logger.logObject.getter(v12);
  v17 = static os_log_type_t.info.getter(v13, v14, v15, v16);
  if (os_log_type_enabled(v13, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(12, -1);
    v19 = swift_slowAlloc(32, -1);
    v44[0] = v19;
    *(_DWORD *)v18 = 136315138;
    swift_bridgeObjectRetain(a2);
    v43 = sub_1001C56EC(v42, a2, v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44, v18 + 4, v18 + 12);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v13, v17, "Home with %s added to list", v18, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    v20 = v19;
    v9 = &qword_100347000;
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v18, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  v21 = &v3[OBJC_IVAR____TtC10seserviced21LyonGeofenceException_homeDelegates];
  swift_beginAccess(&v3[OBJC_IVAR____TtC10seserviced21LyonGeofenceException_homeDelegates], v44, 33, 0);
  v22 = v10;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v22);
  v24 = *(_QWORD *)((*v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v23 = *(_QWORD *)((*v21 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v24 >= v23 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
  v25 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v24, v22);
  specialized Array._endMutation()(v25);
  swift_endAccess(v44);
  v26 = OBJC_IVAR____TtC10seserviced21LyonGeofenceException_hasLoadedHomes;
  if (v3[OBJC_IVAR____TtC10seserviced21LyonGeofenceException_hasLoadedHomes] != 1)
    goto LABEL_22;
  v27 = objc_msgSend(*(id *)&v3[OBJC_IVAR____TtC10seserviced21LyonGeofenceException_homeManager], "homes");
  v28 = sub_100156244();
  v29 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v27, v28);

  swift_bridgeObjectRetain(a2);
  v30 = (uint64_t)sub_100155B74(v29, v42, a2);
  swift_bridgeObjectRelease(v29);
  swift_bridgeObjectRelease(a2);
  if (!((unint64_t)v30 >> 62))
  {
    if (*(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_11;
    goto LABEL_21;
  }
  if (v30 < 0)
    v35 = v30;
  else
    v35 = v30 & 0xFFFFFFFFFFFFFF8;
  if (!_CocoaArrayWrapper.endIndex.getter(v35))
  {
LABEL_21:
    swift_bridgeObjectRelease(v30);
LABEL_22:
    swift_bridgeObjectRetain_n(a2, 2);
    v36 = v3;
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v37, v38))
    {
      v39 = swift_slowAlloc(18, -1);
      v40 = swift_slowAlloc(32, -1);
      v44[0] = v40;
      v41 = v3[v26];
      *(_DWORD *)v39 = 67109378;
      LODWORD(v43) = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, (char *)&v43 + 4, v39 + 4, v39 + 8);

      *(_WORD *)(v39 + 8) = 2080;
      swift_bridgeObjectRetain(a2);
      v43 = sub_1001C56EC(v42, a2, v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44, v39 + 10, v39 + 18);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "hasLoadedHomes: %{BOOL}d Could not find home for UUID %s, treating endpoing as having unknown location", (uint8_t *)v39, 0x12u);
      swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v39, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
    sub_100154234();
    goto LABEL_26;
  }
LABEL_11:
  if ((v30 & 0xC000000000000001) != 0)
  {
    v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v30);
    goto LABEL_14;
  }
  if (*(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v31 = *(id *)(v30 + 32);
LABEL_14:
    v32 = v31;
    swift_bridgeObjectRelease(v30);
    objc_msgSend(v32, "setDelegate:", v22);
    v33 = (unint64_t)objc_msgSend(v32, "homeLocationStatus");
    v34 = 0x1020003u >> (8 * v33);
    if (v33 >= 4)
      LOBYTE(v34) = 3;
    v22[v9[422]] = v34;
    sub_1001553DC();
    sub_100154234();

    v22 = v32;
LABEL_26:

    return;
  }
  __break(1u);
}

void sub_100154BAC(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  char v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20[3];

  v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC10seserviced21LyonGeofenceException_homeDelegates);
  swift_beginAccess(v5, v20, 33, 0);
  v6 = *v5;
  swift_bridgeObjectRetain(a2);
  v7 = swift_bridgeObjectRetain(v6);
  v8 = sub_100156108(v7, a1, a2);
  v10 = v9;
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(a2);
  if ((v10 & 1) != 0)
  {
    swift_endAccess(v20);
    if (qword_100344630 != -1)
      swift_once(&qword_100344630, sub_100155AB4);
    v12 = type metadata accessor for Logger(0);
    sub_10009673C(v12, (uint64_t)qword_100347C50);
    v13 = swift_bridgeObjectRetain_n(a2, 2);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = swift_slowAlloc(32, -1);
      v20[0] = v17;
      *(_DWORD *)v16 = 136315138;
      swift_bridgeObjectRetain(a2);
      v18 = sub_1001C56EC(a1, a2, v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v16 + 4, v16 + 12);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%s did not exist, nothing to remove", v16, 0xCu);
      swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
  }
  else
  {
    v11 = (void *)sub_100128728(v8);
    swift_endAccess(v20);

    sub_100154234();
  }
}

uint64_t sub_100154DD8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _BYTE *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  os_log_type_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40[2];
  char v41[24];

  v5 = (_QWORD *)type metadata accessor for DispatchPredicate(0);
  v6 = *(v5 - 1);
  __chkstk_darwin(v5, v7);
  v9 = (uint64_t *)((char *)&v40[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v10 = qword_100354EE8;
  *v9 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, _QWORD *))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5);
  v11 = (id)v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(_QWORD *, _QWORD *))(v6 + 8))(v9, v5);
  if ((v10 & 1) != 0)
  {
    if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC10seserviced21LyonGeofenceException_forceNotOutOfHome) & 1) != 0)
      return 3;
    v13 = (uint64_t *)(v2 + OBJC_IVAR____TtC10seserviced21LyonGeofenceException_homeDelegates);
    swift_beginAccess(v13, v41, 0, 0);
    v14 = *v13;
    swift_bridgeObjectRetain(a2);
    v15 = swift_bridgeObjectRetain(v14);
    v5 = 0;
    v2 = (uint64_t)sub_100155F88(v15, a1, a2);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(a2);
    if (!((unint64_t)v2 >> 62))
    {
      if (*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_8;
LABEL_21:
      swift_bridgeObjectRelease(v2);
      if (qword_100344630 != -1)
        swift_once(&qword_100344630, sub_100155AB4);
      v32 = type metadata accessor for Logger(0);
      sub_10009673C(v32, (uint64_t)qword_100347C50);
      v33 = swift_bridgeObjectRetain_n(a2, 2);
      v34 = Logger.logObject.getter(v33);
      v35 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v34, v35))
      {
        v36 = (uint8_t *)swift_slowAlloc(12, -1);
        v37 = swift_slowAlloc(32, -1);
        v40[0] = v37;
        *(_DWORD *)v36 = 136315138;
        swift_bridgeObjectRetain(a2);
        v39 = sub_1001C56EC(a1, a2, v40);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v36 + 4, v36 + 12);
        v12 = 3;
        swift_bridgeObjectRelease_n(a2, 3);
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "Could not find homeDelegate for UUID %s, defaulting to unknown location", v36, 0xCu);
        swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v37, -1, -1);
        swift_slowDealloc(v36, -1, -1);

        return v12;
      }

      swift_bridgeObjectRelease_n(a2, 2);
      return 3;
    }
  }
  else
  {
    __break(1u);
  }
  if (v2 < 0)
    v31 = v2;
  else
    v31 = v2 & 0xFFFFFFFFFFFFFF8;
  if (!_CocoaArrayWrapper.endIndex.getter(v31))
    goto LABEL_21;
LABEL_8:
  if ((v2 & 0xC000000000000001) != 0)
  {
    v16 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v2);
  }
  else
  {
    if (!*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_29;
    }
    v16 = *(id *)(v2 + 32);
  }
  v5 = v16;
  swift_bridgeObjectRelease(v2);
  if (qword_100344630 != -1)
LABEL_29:
    swift_once(&qword_100344630, sub_100155AB4);
  v17 = type metadata accessor for Logger(0);
  sub_10009673C(v17, (uint64_t)qword_100347C50);
  swift_bridgeObjectRetain_n(a2, 2);
  v18 = v5;
  v19 = Logger.logObject.getter(v18);
  v23 = static os_log_type_t.info.getter(v19, v20, v21, v22);
  v24 = &qword_100347000;
  if (os_log_type_enabled(v19, v23))
  {
    v25 = swift_slowAlloc(22, -1);
    v26 = swift_slowAlloc(64, -1);
    v40[0] = v26;
    *(_DWORD *)v25 = 136315394;
    LOBYTE(v39) = v18[OBJC_IVAR____TtC10seserviced16LyonHomeDelegate_location];
    v27 = String.init<A>(describing:)(&v39, &type metadata for GeofenceState);
    v29 = v28;
    v39 = sub_1001C56EC(v27, v28, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v25 + 4, v25 + 12);

    v30 = v29;
    v24 = &qword_100347000;
    swift_bridgeObjectRelease(v30);
    *(_WORD *)(v25 + 12) = 2080;
    swift_bridgeObjectRetain(a2);
    v39 = sub_1001C56EC(a1, a2, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v25 + 14, v25 + 22);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v19, v23, "Found location %s for home %s", (uint8_t *)v25, 0x16u);
    swift_arrayDestroy(v26, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v25, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  v12 = v18[v24[422]];

  return v12;
}

uint64_t sub_1001552F0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced21LyonGeofenceException_homeDelegates));
  return swift_unknownObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced21LyonGeofenceException_assertion));
}

id sub_10015532C()
{
  return sub_10015593C(type metadata accessor for LyonGeofenceException);
}

uint64_t type metadata accessor for LyonGeofenceException()
{
  return objc_opt_self(_TtC10seserviced21LyonGeofenceException);
}

id sub_1001553A0()
{
  _QWORD *v0;

  return objc_msgSend(*(id *)(*v0 + OBJC_IVAR____TtC10seserviced21LyonGeofenceException_homeManager), "setDelegate:");
}

void sub_1001553BC()
{
  sub_100153BB0();
}

void sub_1001553DC()
{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;

  if (qword_100344630 != -1)
    swift_once(&qword_100344630, sub_100155AB4);
  v1 = type metadata accessor for Logger(0);
  sub_10009673C(v1, (uint64_t)qword_100347C50);
  v14 = v0;
  v2 = Logger.logObject.getter(v14);
  v6 = static os_log_type_t.info.getter(v2, v3, v4, v5);
  if (os_log_type_enabled(v2, v6))
  {
    v7 = swift_slowAlloc(22, -1);
    v8 = swift_slowAlloc(64, -1);
    v16 = v8;
    *(_DWORD *)v7 = 136315394;
    LOBYTE(v15) = v14[OBJC_IVAR____TtC10seserviced16LyonHomeDelegate_location];
    v9 = String.init<A>(describing:)(&v15, &type metadata for GeofenceState);
    v11 = v10;
    v15 = sub_1001C56EC(v9, v10, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v7 + 4, v7 + 12);

    swift_bridgeObjectRelease(v11);
    *(_WORD *)(v7 + 12) = 2080;
    v12 = *(_QWORD *)&v14[OBJC_IVAR____TtC10seserviced16LyonHomeDelegate_homeUUID];
    v13 = *(_QWORD *)&v14[OBJC_IVAR____TtC10seserviced16LyonHomeDelegate_homeUUID + 8];
    swift_bridgeObjectRetain(v13);
    v15 = sub_1001C56EC(v12, v13, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v7 + 14, v7 + 22);

    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v2, v6, "Set location to %s for %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy(v8, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {

  }
}

uint64_t sub_10015562C(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  id v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  _QWORD *v21;
  _QWORD aBlock[5];
  uint64_t v23;

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v13 = swift_allocObject(&unk_10030AE58, 32, 7);
  *(_QWORD *)(v13 + 16) = v1;
  *(_QWORD *)(v13 + 24) = a1;
  aBlock[4] = sub_100155B54;
  v23 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100071C98;
  aBlock[3] = &unk_10030AE70;
  v14 = _Block_copy(aBlock);
  v15 = v1;
  static DispatchQoS.unspecified.getter(a1);
  v21 = _swiftEmptyArrayStorage;
  v16 = sub_100099850();
  v17 = sub_100063D3C((uint64_t *)&unk_100346200);
  v18 = sub_100063D7C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v17, v18, v3, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v7, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  return swift_release(v23);
}

void sub_10015580C(uint64_t a1, id a2)
{
  unint64_t v3;
  unsigned int v4;

  v3 = (unint64_t)objc_msgSend(a2, "homeLocationStatus");
  v4 = 0x1020003u >> (8 * v3);
  if (v3 >= 4)
    LOBYTE(v4) = 3;
  *(_BYTE *)(a1 + OBJC_IVAR____TtC10seserviced16LyonHomeDelegate_location) = v4;
  sub_1001553DC();
  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC10seserviced16LyonHomeDelegate_isExpress) == 1)
  {
    if (qword_100344628 != -1)
      swift_once(&qword_100344628, sub_1001539B4);
    sub_100154234();
  }
}

id sub_100155930()
{
  return sub_10015593C(type metadata accessor for LyonHomeDelegate);
}

id sub_10015593C(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t type metadata accessor for LyonHomeDelegate()
{
  return objc_opt_self(_TtC10seserviced16LyonHomeDelegate);
}

uint64_t storeEnumTagSinglePayload for GeofenceState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1001559EC + 4 * byte_10028B2C5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100155A20 + 4 * byte_10028B2C0[v4]))();
}

uint64_t sub_100155A20(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100155A28(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100155A30);
  return result;
}

uint64_t sub_100155A3C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100155A44);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100155A48(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100155A50(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GeofenceState()
{
  return &type metadata for GeofenceState;
}

unint64_t sub_100155A70()
{
  unint64_t result;

  result = qword_100347DC0;
  if (!qword_100347DC0)
  {
    result = swift_getWitnessTable(&unk_10028B350, &type metadata for GeofenceState);
    atomic_store(result, (unint64_t *)&qword_100347DC0);
  }
  return result;
}

uint64_t sub_100155AB4()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Logger(0);
  sub_1000980F8(v0, qword_100347C50);
  sub_10009673C(v0, (uint64_t)qword_100347C50);
  v1 = String.init(cString:)(SESLoggingSubsystem);
  return Logger.init(subsystem:category:)(v1);
}

uint64_t sub_100155B28()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_100155B54()
{
  uint64_t v0;

  sub_10015580C(*(_QWORD *)(v0 + 16), *(id *)(v0 + 24));
}

uint64_t sub_100155B5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100155B6C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

_QWORD *sub_100155B74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  unint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v4 = v3;
  v29 = a2;
  v7 = type metadata accessor for UUID(0);
  v27 = *(_QWORD *)(v7 - 8);
  v28 = v7;
  __chkstk_darwin();
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = _swiftEmptyArrayStorage;
  if ((unint64_t)a1 >> 62)
    goto LABEL_19;
  v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v10)
  {
    while (1)
    {
      v11 = 0;
      v26 = a1 & 0xC000000000000001;
      v24 = v4;
      v25 = a1 & 0xFFFFFFFFFFFFFF8;
      while (v26)
      {
        v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v11, a1);
LABEL_9:
        v4 = v12;
        v13 = v11 + 1;
        if (__OFADD__(v11, 1))
          goto LABEL_18;
        v14 = objc_msgSend(v12, "uniqueIdentifier");
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        v15 = UUID.uuidString.getter();
        v17 = v16;
        (*(void (**)(char *, uint64_t))(v27 + 8))(v9, v28);
        if (v15 == v29 && v17 == a3)
        {
          v18 = swift_bridgeObjectRelease(a3);
LABEL_14:
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v18);
          v20 = v30[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v20);
          v21 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, v4);
          specialized ContiguousArray._endMutation()(v21);
          goto LABEL_5;
        }
        v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v17, v29, a3, 0);
        v18 = swift_bridgeObjectRelease(v17);
        if ((v19 & 1) != 0)
          goto LABEL_14;

LABEL_5:
        ++v11;
        if (v13 == v10)
          return v30;
      }
      if (v11 < *(_QWORD *)(v25 + 16))
        break;
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      if (a1 < 0)
        v23 = a1;
      else
        v23 = a1 & 0xFFFFFFFFFFFFFF8;
      v10 = _CocoaArrayWrapper.endIndex.getter(v23);
      if (!v10)
        return _swiftEmptyArrayStorage;
    }
    v12 = *(id *)(a1 + 8 * v11 + 32);
    goto LABEL_9;
  }
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_100155D78(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  _QWORD *v32;

  v3 = v2;
  v31 = a2;
  v5 = type metadata accessor for UUID(0);
  v29 = *(_QWORD *)(v5 - 8);
  v30 = v5;
  __chkstk_darwin();
  v28 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = _swiftEmptyArrayStorage;
  if ((unint64_t)a1 >> 62)
    goto LABEL_22;
  v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v7)
  {
    while (1)
    {
      v24 = v3;
      v25 = a1;
      v8 = 0;
      v26 = a1 & 0xFFFFFFFFFFFFFF8;
      v27 = a1 & 0xC000000000000001;
      while (v27)
      {
        v9 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, a1);
LABEL_9:
        v10 = v9;
        v11 = v8 + 1;
        if (__OFADD__(v8, 1))
          goto LABEL_21;
        v13 = *(_QWORD *)&v9[OBJC_IVAR____TtC10seserviced16LyonHomeDelegate_homeUUID];
        v12 = *(_QWORD *)&v9[OBJC_IVAR____TtC10seserviced16LyonHomeDelegate_homeUUID + 8];
        v14 = objc_msgSend(v31, "uniqueIdentifier");
        v15 = v28;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        v16 = UUID.uuidString.getter();
        v18 = v17;
        (*(void (**)(char *, uint64_t))(v29 + 8))(v15, v30);
        if (v13 == v16 && v12 == v18)
        {
          v20 = swift_bridgeObjectRelease(v12);
LABEL_17:
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v20);
          v3 = v32[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v3);
          v21 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v3, v10);
          specialized ContiguousArray._endMutation()(v21);
          goto LABEL_5;
        }
        v3 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v12, v16, v18, 0);
        v20 = swift_bridgeObjectRelease(v18);
        if ((v3 & 1) != 0)
          goto LABEL_17;

LABEL_5:
        a1 = v25;
        ++v8;
        if (v11 == v7)
          return v32;
      }
      if (v8 < *(_QWORD *)(v26 + 16))
        break;
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      if (a1 < 0)
        v23 = a1;
      else
        v23 = a1 & 0xFFFFFFFFFFFFFF8;
      v7 = _CocoaArrayWrapper.endIndex.getter(v23);
      if (!v7)
        return _swiftEmptyArrayStorage;
    }
    v9 = (char *)*(id *)(a1 + 8 * v8 + 32);
    goto LABEL_9;
  }
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_100155F88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v17;

  if ((unint64_t)a1 >> 62)
    goto LABEL_20;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v6)
  {
    while (1)
    {
      v7 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        v10 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, a1);
LABEL_9:
        v11 = v10;
        v12 = v7 + 1;
        if (__OFADD__(v7, 1))
          goto LABEL_19;
        v13 = *(_QWORD *)&v10[OBJC_IVAR____TtC10seserviced16LyonHomeDelegate_homeUUID];
        v14 = *(_QWORD *)&v11[OBJC_IVAR____TtC10seserviced16LyonHomeDelegate_homeUUID + 8];
        v15 = v13 == a2 && v14 == a3;
        if (v15 || (v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v14, a2, a3, 0), (v13 & 1) != 0))
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
          v8 = _swiftEmptyArrayStorage[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v8);
          v9 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8, v11);
          specialized ContiguousArray._endMutation()(v9);
        }
        else
        {

        }
        ++v7;
        if (v12 == v6)
          return _swiftEmptyArrayStorage;
      }
      if (v7 < *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        break;
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      if (a1 < 0)
        v17 = a1;
      else
        v17 = a1 & 0xFFFFFFFFFFFFFF8;
      v6 = _CocoaArrayWrapper.endIndex.getter(v17);
      if (!v6)
        return _swiftEmptyArrayStorage;
    }
    v10 = (char *)*(id *)(a1 + 8 * v7 + 32);
    goto LABEL_9;
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100156108(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t i;
  char *v8;
  void *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v14;
  uint64_t v15;
  uint64_t v16;

  if ((unint64_t)a1 >> 62)
    goto LABEL_18;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v6)
  {
    for (i = 0; ; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v8 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
      else
        v8 = (char *)*(id *)(a1 + 8 * i + 32);
      v9 = v8;
      v10 = &v8[OBJC_IVAR____TtC10seserviced16LyonHomeDelegate_homeUUID];
      v11 = *(_QWORD *)&v8[OBJC_IVAR____TtC10seserviced16LyonHomeDelegate_homeUUID];
      v12 = *((_QWORD *)v10 + 1);
      if (*(_QWORD *)v10 == a2 && v12 == a3)
      {

        return i;
      }
      v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v12, a2, a3, 0);

      if ((v14 & 1) != 0)
        return i;
      v15 = i + 1;
      if (__OFADD__(i, 1))
        break;
      if (v15 == v6)
        return 0;
    }
    __break(1u);
LABEL_18:
    if (a1 < 0)
      v16 = a1;
    else
      v16 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v6 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a1);
  }
  return 0;
}

unint64_t sub_100156244()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100347DE0;
  if (!qword_100347DE0)
  {
    v1 = objc_opt_self(HMHome);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100347DE0);
  }
  return result;
}

uint64_t sub_100156280()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  _QWORD aBlock[5];
  uint64_t v20;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v11 = swift_allocObject(&unk_10030AEA8, 24, 7);
  *(_QWORD *)(v11 + 16) = v0;
  aBlock[4] = sub_10015647C;
  v20 = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100071C98;
  aBlock[3] = &unk_10030AEC0;
  v12 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v0);
  v18 = _swiftEmptyArrayStorage;
  v13 = sub_100099850();
  v14 = sub_100063D3C((uint64_t *)&unk_100346200);
  v15 = sub_100063D7C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v18, v14, v15, v1, v13);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v5, v12);
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  return swift_release(v20);
}

uint64_t sub_100156458()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_10015647C()
{
  uint64_t v0;

  sub_100153D1C(*(_QWORD *)(v0 + 16));
}

uint64_t UUID.data()()
{
  char v0;
  char v1;
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  uint64_t __src;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;

  __src = UUID.uuid.getter();
  v10 = v0;
  v11 = v1;
  v12 = v2;
  v13 = v3;
  v14 = v4;
  v15 = v5;
  v16 = v6;
  v17 = v7;
  UUID.uuid.getter();
  return sub_100156630(&__src, 16);
}

uint64_t UUID.utf8Data(stringCase:)(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v2 = type metadata accessor for String.Encoding(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin();
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.uuidString.getter(v4);
  v8 = v7;
  if ((a1 & 1) != 0)
  {
    v12 = String.uppercased()();
    object = v12._object;
    countAndFlagsBits = v12._countAndFlagsBits;
  }
  else
  {
    v11 = String.lowercased()();
    object = v11._object;
    countAndFlagsBits = v11._countAndFlagsBits;
  }
  v13 = countAndFlagsBits;
  v14 = object;
  v15 = swift_bridgeObjectRelease(v8);
  static String.Encoding.utf8.getter(v15);
  v16 = String.data(using:allowLossyConversion:)(v6, 0, v13, v14);
  swift_bridgeObjectRelease(v14);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return v16;
}

uint64_t sub_100156630(_BYTE *__src, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  if (!a2)
    return 0;
  if (a2 <= 14)
    return sub_10007C4B4(__src, &__src[a2]);
  v4 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  __DataStorage.init(bytes:length:)(__src, a2);
  if ((unint64_t)a2 < 0x7FFFFFFF)
    return a2 << 32;
  v6 = type metadata accessor for Data.RangeReference(0);
  result = swift_allocObject(v6, 32, 7);
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

unint64_t sub_1001566E0()
{
  unint64_t result;

  result = qword_100347E50;
  if (!qword_100347E50)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UUID.UTF8DataStringCase, &type metadata for UUID.UTF8DataStringCase);
    atomic_store(result, (unint64_t *)&qword_100347E50);
  }
  return result;
}

uint64_t _s18UTF8DataStringCaseOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100156770 + 4 * byte_10028B395[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001567A4 + 4 * byte_10028B390[v4]))();
}

uint64_t sub_1001567A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001567AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001567B4);
  return result;
}

uint64_t sub_1001567C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001567C8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1001567CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001567D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UUID.UTF8DataStringCase()
{
  return &type metadata for UUID.UTF8DataStringCase;
}

uint64_t *sub_1001567F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t inited;
  uint64_t v20;
  const __CFString *v21;
  const __CFString *v22;
  const __CFString *v23;
  const __CFString *v24;
  const __CFString *v25;
  const __CFString *v26;
  unint64_t v27;
  uint64_t v28;
  id v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  uint64_t v46;
  os_log_type_t v47;
  uint8_t *v48;
  unint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  unint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  NSObject *v80;
  uint64_t v81;
  os_log_type_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint8_t *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  NSObject *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  NSObject *v115;
  uint64_t v116;
  os_log_type_t v117;
  uint8_t *v118;
  uint64_t v119;
  Swift::String v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  NSObject *v124;
  uint64_t v125;
  os_log_type_t v126;
  uint8_t *v127;
  uint64_t v128;
  Swift::String v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  unint64_t v134;
  uint64_t v135;
  char *v136;
  char v137;
  void *v138;
  NSString v139;
  NSString v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  NSObject *v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  __int128 v159;
  uint64_t v160;
  _QWORD v161[3];
  uint64_t v162;
  uint64_t v163;
  __n128 v164;
  __n128 v165;
  uint64_t v166;
  _OWORD v167[8];
  __n128 v168;
  __n128 v169;
  uint64_t v170;
  uint64_t v171[4];
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  __n128 v175;
  __int128 v176;
  uint64_t v177;
  __n128 v178;
  uint8_t *v179;

  v153 = a5;
  v154 = a6;
  v179 = (uint8_t *)a3;
  v155 = a7;
  v10 = sub_100063D3C(&qword_100347800);
  __chkstk_darwin(v10, v11);
  v152 = (uint64_t)&v142 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v157 = type metadata accessor for SEKeySyncRecovery.RecoveryRecord(0);
  v14 = __chkstk_darwin(v157, v13);
  v151 = (uint64_t)&v142 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v16);
  v156 = (char *)&v142 - v17;
  v18 = sub_100063D3C(&qword_100347EF0);
  inited = swift_initStackObject(v18, &v163);
  *(_OWORD *)(inited + 16) = xmmword_1002892A0;
  *(_QWORD *)(inited + 32) = kSecClass;
  type metadata accessor for CFString(0);
  *(_QWORD *)(inited + 40) = kSecClassGenericPassword;
  *(_QWORD *)(inited + 64) = v20;
  *(_QWORD *)(inited + 72) = kSecAttrAccount;
  *(_QWORD *)(inited + 80) = a1;
  *(_QWORD *)(inited + 88) = a2;
  *(_QWORD *)(inited + 104) = &type metadata for String;
  *(_QWORD *)(inited + 112) = kSecAttrService;
  v21 = (id)kSecClass;
  v22 = (id)kSecClassGenericPassword;
  v23 = (id)kSecAttrAccount;
  swift_bridgeObjectRetain(a2);
  v24 = (id)kSecAttrService;
  *(Swift::String *)(inited + 120) = Data.base64EncodedString(options:)(0);
  *(_QWORD *)(inited + 144) = &type metadata for String;
  *(_QWORD *)(inited + 152) = kSecAttrAccessGroup;
  *(_QWORD *)(inited + 160) = 0xD000000000000033;
  *(_QWORD *)(inited + 168) = 0x80000001002BDF40;
  *(_QWORD *)(inited + 184) = &type metadata for String;
  *(_QWORD *)(inited + 192) = kSecAttrSynchronizable;
  *(_QWORD *)(inited + 224) = &type metadata for Bool;
  *(_BYTE *)(inited + 200) = 1;
  v25 = (id)kSecAttrAccessGroup;
  v26 = (id)kSecAttrSynchronizable;
  v27 = sub_10017C8EC(inited);
  if (qword_100344648 != -1)
    swift_once(&qword_100344648, sub_100157AC4);
  swift_getObjectType(qword_100354D38);
  v28 = v158;
  v29 = sub_1001E2A30(v27, 1);
  if (v28)
  {
    swift_bridgeObjectRelease(v27);
    if (qword_100344638 != -1)
      swift_once(&qword_100344638, sub_100157A08);
    v31 = type metadata accessor for Logger(0);
    sub_10009673C(v31, (uint64_t)qword_100354CF8);
    swift_errorRetain(v28);
    v32 = swift_errorRetain(v28);
    v33 = Logger.logObject.getter(v32);
    v35 = static os_log_type_t.error.getter(v33, v34);
    if (os_log_type_enabled(v33, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc(12, -1);
      v37 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v159 = v37;
      *(_DWORD *)v36 = 136315138;
      swift_getErrorValue(v28, &v162, v161);
      v38 = Error.localizedDescription.getter(v161[1], v161[2]);
      v40 = v39;
      v160 = sub_1001C56EC(v38, v39, (uint64_t *)&v159);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v160, v161, v36 + 4, v36 + 12);
      swift_bridgeObjectRelease(v40);
      swift_errorRelease(v28);
      swift_errorRelease(v28);
      _os_log_impl((void *)&_mh_execute_header, v33, v35, "Error querying regular keychain item : %s", v36, 0xCu);
      swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v36, -1, -1);
    }
    else
    {
      swift_errorRelease(v28);
      swift_errorRelease(v28);
    }

    v53 = sub_10012443C();
    v54 = swift_allocError(&type metadata for KeySyncEvent, v53, 0, 0);
    *v55 = 26;
    swift_willThrow(v54);
    return (uint64_t *)swift_errorRelease(v28);
  }
  else
  {
    v41 = (uint64_t)v29;
    v42 = v30;
    swift_bridgeObjectRelease(v27);
    if (v42 >> 60 == 15)
    {
      if (qword_100344638 != -1)
        swift_once(&qword_100344638, sub_100157A08);
      v43 = type metadata accessor for Logger(0);
      v44 = sub_10009673C(v43, (uint64_t)qword_100354CF8);
      v45 = Logger.logObject.getter(v44);
      v47 = static os_log_type_t.error.getter(v45, v46);
      if (os_log_type_enabled(v45, v47))
      {
        v48 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v48 = 0;
        _os_log_impl((void *)&_mh_execute_header, v45, v47, "Recovery item not found (yet)", v48, 2u);
        swift_slowDealloc(v48, -1, -1);
      }

      v49 = sub_10012443C();
      v50 = swift_allocError(&type metadata for KeySyncEvent, v49, 0, 0);
      *v51 = 17;
      return (uint64_t *)swift_willThrow(v50);
    }
    else
    {
      v56 = type metadata accessor for PropertyListDecoder(0);
      swift_allocObject(v56, *(unsigned int *)(v56 + 48), *(unsigned __int16 *)(v56 + 52));
      v57 = sub_100063C8C(v41, v42);
      v61 = PropertyListDecoder.init()(v57, v58, v59, v60);
      v62 = sub_1000639EC(&qword_100347EF8, type metadata accessor for SEKeySyncRecovery.RecoveryRecord, (uint64_t)&unk_10028B4B4);
      v63 = (uint64_t)v156;
      dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v157, v41, v42, v157, v62);
      swift_release(v61);
      v150 = a4;
      v64 = v155;
      sub_100124884(v63, v155, type metadata accessor for SEKeySyncRecovery.RecoveryRecord);
      v66 = *(_QWORD *)(v64 + 48);
      v65 = *(_QWORD *)(v64 + 56);
      sub_1001AD980((uint64_t)&v164);
      *(_QWORD *)&v159 = v66;
      *((_QWORD *)&v159 + 1) = v65;
      sub_100063C8C(v66, v65);
      sub_100063C8C(v66, v65);
      v67 = sub_100136C5C((uint64_t *)&v159, &v164);
      sub_100063CD0(v159, *((unint64_t *)&v159 + 1));
      sub_100124140(&v165, &v178);
      sub_10012417C((uint64_t)&v178);
      v177 = v166;
      sub_1001241D0(&v177);
      sub_1001AE728(v67, v167);
      v158 = v41;
      sub_100063CD0(v66, v65);
      v176 = v167[4];
      sub_1001AD818((uint64_t)&v168);
      v159 = v176;
      sub_1001249BC((uint64_t)&v176);
      sub_1001249BC((uint64_t)&v176);
      v68 = sub_100136C5C((uint64_t *)&v159, &v168);
      sub_100063CD0(v159, *((unint64_t *)&v159 + 1));
      sub_100124140(&v169, &v175);
      sub_10012417C((uint64_t)&v175);
      v174 = v170;
      sub_1001241D0(&v174);
      sub_1001AF0F4(v68, v171);
      v69 = v158;
      sub_1001249E8((uint64_t)&v176);
      sub_100159C40((uint64_t *)v167);
      v70 = v172;
      v71 = v173;
      sub_100063C8C(v172, v173);
      sub_100159D10(v171, (void (*)(uint64_t, uint64_t))sub_100063C8C);
      v73 = v153;
      v72 = v154;
      sub_10007C23C(v70, v71);
      LOBYTE(v68) = v74;
      v149 = v70;
      sub_100063CD0(v70, v71);
      if ((v68 & 1) != 0)
      {
        sub_100159D10(v171, (void (*)(uint64_t, uint64_t))sub_100063CD0);
        sub_10006B9B4(v69, v42);
        sub_10006B9B4(v69, v42);
        return sub_100159D10(v171, (void (*)(uint64_t, uint64_t))sub_100063CD0);
      }
      else
      {
        v146 = v71;
        if (qword_100344638 != -1)
          swift_once(&qword_100344638, sub_100157A08);
        v75 = type metadata accessor for Logger(0);
        v76 = sub_10009673C(v75, (uint64_t)qword_100354CF8);
        v77 = (uint64_t)v179;
        v78 = v150;
        sub_100063C8C((uint64_t)v179, v150);
        sub_100063C8C(v73, v72);
        sub_100159D10(v171, (void (*)(uint64_t, uint64_t))sub_100063C8C);
        sub_100063C8C(v77, v78);
        v79 = sub_100063C8C(v73, v72);
        v156 = (char *)v76;
        v80 = Logger.logObject.getter(v79);
        v82 = static os_log_type_t.error.getter(v80, v81);
        v148 = v80;
        v147 = v82;
        if (os_log_type_enabled(v80, v82))
        {
          v83 = swift_slowAlloc(32, -1);
          v145 = swift_slowAlloc(96, -1);
          *(_QWORD *)&v159 = v145;
          *(_DWORD *)v83 = 136315650;
          v142 = v83 + 4;
          sub_1001BD2CC((uint64_t)v179, v78);
          v85 = v84;
          v144 = 0;
          v160 = v84;
          v86 = sub_100063D3C((uint64_t *)&unk_100346060);
          v87 = sub_10006B86C();
          v143 = v86;
          v88 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v86, v87);
          v90 = v89;
          swift_bridgeObjectRelease(v85);
          v160 = sub_1001C56EC(v88, v90, (uint64_t *)&v159);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v160, v161, v142, v83 + 12);
          swift_bridgeObjectRelease(v90);
          v91 = (uint64_t)v179;
          sub_100063CD0((uint64_t)v179, v78);
          sub_100063CD0(v91, v78);
          *(_WORD *)(v83 + 12) = 2080;
          v92 = v144;
          sub_1001BD2CC(v149, v146);
          v94 = v93;
          v179 = (uint8_t *)v92;
          v160 = v93;
          v95 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v86, v87);
          v96 = v42;
          v98 = v97;
          swift_bridgeObjectRelease(v94);
          v160 = sub_1001C56EC(v95, v98, (uint64_t *)&v159);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v160, v161, v83 + 14, v83 + 22);
          v99 = v98;
          v42 = v96;
          swift_bridgeObjectRelease(v99);
          sub_100159D10(v171, (void (*)(uint64_t, uint64_t))sub_100063CD0);
          sub_100159D10(v171, (void (*)(uint64_t, uint64_t))sub_100063CD0);
          v100 = (uint8_t *)v83;
          *(_WORD *)(v83 + 22) = 2080;
          v101 = v153;
          v102 = v154;
          sub_1001BD2CC(v153, v154);
          v104 = v103;
          v160 = v103;
          v105 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v143, v87);
          v107 = v106;
          swift_bridgeObjectRelease(v104);
          v108 = sub_1001C56EC(v105, v107, (uint64_t *)&v159);
          v109 = v83 + 32;
          v160 = v108;
          v110 = v83 + 24;
          v69 = v158;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v160, v161, v110, v109);
          swift_bridgeObjectRelease(v107);
          sub_100063CD0(v101, v102);
          sub_100063CD0(v101, v102);
          v111 = v148;
          _os_log_impl((void *)&_mh_execute_header, v148, (os_log_type_t)v147, "Recovery blob for %s has DSID %s accounts has %s", v100, 0x20u);
          v112 = v145;
          swift_arrayDestroy(v145, 3, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v112, -1, -1);
          swift_slowDealloc(v100, -1, -1);

        }
        else
        {
          v113 = (uint64_t)v179;
          sub_100063CD0((uint64_t)v179, v78);
          sub_100063CD0(v113, v78);
          sub_100159D10(v171, (void (*)(uint64_t, uint64_t))sub_100063CD0);
          sub_100159D10(v171, (void (*)(uint64_t, uint64_t))sub_100063CD0);
          sub_100063CD0(v73, v72);
          sub_100063CD0(v73, v72);

        }
        sub_100063C8C(v69, v42);
        v114 = sub_100063C8C(v69, v42);
        v115 = Logger.logObject.getter(v114);
        v117 = static os_log_type_t.error.getter(v115, v116);
        if (os_log_type_enabled(v115, v117))
        {
          v118 = (uint8_t *)swift_slowAlloc(12, -1);
          v119 = swift_slowAlloc(32, -1);
          *(_QWORD *)&v159 = v119;
          *(_DWORD *)v118 = 136315138;
          v179 = v118 + 4;
          v120 = Data.base64EncodedString(options:)(0);
          v160 = sub_1001C56EC(v120._countAndFlagsBits, (unint64_t)v120._object, (uint64_t *)&v159);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v160, v161, v179, v118 + 12);
          swift_bridgeObjectRelease(v120._object);
          sub_10006B9B4(v69, v42);
          sub_10006B9B4(v69, v42);
          _os_log_impl((void *)&_mh_execute_header, v115, v117, "Recovery blob: %s", v118, 0xCu);
          swift_arrayDestroy(v119, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v119, -1, -1);
          swift_slowDealloc(v118, -1, -1);
        }
        else
        {
          sub_10006B9B4(v69, v42);
          sub_10006B9B4(v69, v42);
        }

        v121 = v155;
        v122 = v151;
        v123 = sub_100124B74(v155, v151, type metadata accessor for SEKeySyncRecovery.RecoveryRecord);
        v124 = Logger.logObject.getter(v123);
        v126 = static os_log_type_t.error.getter(v124, v125);
        if (os_log_type_enabled(v124, v126))
        {
          v127 = (uint8_t *)swift_slowAlloc(12, -1);
          v128 = swift_slowAlloc(32, -1);
          *(_QWORD *)&v159 = v128;
          *(_DWORD *)v127 = 136315138;
          v179 = v127 + 4;
          v129 = Data.base64EncodedString(options:)(0);
          v160 = sub_1001C56EC(v129._countAndFlagsBits, (unint64_t)v129._object, (uint64_t *)&v159);
          v121 = v155;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v160, v161, v179, v127 + 12);
          swift_bridgeObjectRelease(v129._object);
          sub_1001247E8(v122, type metadata accessor for SEKeySyncRecovery.RecoveryRecord);
          _os_log_impl((void *)&_mh_execute_header, v124, v126, "Encrypted blob: %s", v127, 0xCu);
          swift_arrayDestroy(v128, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v128, -1, -1);
          swift_slowDealloc(v127, -1, -1);
        }
        else
        {
          sub_1001247E8(v122, type metadata accessor for SEKeySyncRecovery.RecoveryRecord);
        }

        v130 = v158;
        v131 = v152;
        sub_100159DA0(v121 + *(int *)(v157 + 36), v152);
        v132 = type metadata accessor for CreationMetadata(0);
        v133 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v132 - 8) + 48))(v131, 1, v132);
        sub_100159DE8(v131);
        if (v133 == 1)
        {
          v134 = sub_10012443C();
          v135 = swift_allocError(&type metadata for KeySyncEvent, v134, 0, 0);
          v137 = 29;
        }
        else
        {
          v138 = (void *)objc_opt_self(SESTapToRadar);
          v139 = String._bridgeToObjectiveC()();
          v140 = String._bridgeToObjectiveC()();
          objc_msgSend(v138, "requestTapToRadar:client:", v139, v140);

          v141 = sub_10012443C();
          v135 = swift_allocError(&type metadata for KeySyncEvent, v141, 0, 0);
          v137 = 33;
        }
        *v136 = v137;
        swift_willThrow(v135);
        sub_10006B9B4(v130, v42);
        sub_10006B9B4(v130, v42);
        sub_100159D10(v171, (void (*)(uint64_t, uint64_t))sub_100063CD0);
        return (uint64_t *)sub_1001247E8(v121, type metadata accessor for SEKeySyncRecovery.RecoveryRecord);
      }
    }
  }
}

uint64_t sub_100157A08()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Logger(0);
  sub_1000980F8(v0, qword_100354CF8);
  sub_10009673C(v0, (uint64_t)qword_100354CF8);
  v1 = String.init(cString:)(SESLoggingSubsystem);
  return Logger.init(subsystem:category:)(v1);
}

uint64_t sub_100157A7C()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for SESDataTask();
  result = swift_allocObject(v0, 16, 7);
  qword_100354D28 = v0;
  unk_100354D30 = &off_100308E38;
  qword_100354D10 = result;
  return result;
}

id sub_100157AC4()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(SESKeychainWrapper), "sharedInstance");
  qword_100354D38 = (uint64_t)result;
  return result;
}

uint64_t sub_100157AFC(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  char v27;
  __int128 v28;

  v3 = v1;
  v5 = sub_100063D3C(&qword_100347FD0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10006BA78(a1, v10);
  v12 = sub_10015DAAC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SEKeySyncRecovery.RecoveryRecord.CodingKeys, &type metadata for SEKeySyncRecovery.RecoveryRecord.CodingKeys, v12, v10, v11);
  v13 = *v3;
  v14 = v3[1];
  LOBYTE(v28) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v13, v14, &v28, v5);
  if (!v2)
  {
    v15 = v3[2];
    v16 = v3[3];
    LOBYTE(v28) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v15, v16, &v28, v5);
    v28 = *((_OWORD *)v3 + 2);
    v27 = 2;
    v17 = sub_10014DEDC();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v28, &v27, v5, &type metadata for Data, v17);
    v28 = *((_OWORD *)v3 + 3);
    v27 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v28, &v27, v5, &type metadata for Data, v17);
    v18 = type metadata accessor for SEKeySyncRecovery.RecoveryRecord(0);
    v19 = (uint64_t)v3 + *(int *)(v18 + 32);
    LOBYTE(v28) = 4;
    v20 = type metadata accessor for SESPeerIdentityData(0);
    v21 = sub_1000639EC(&qword_100346C58, type metadata accessor for SESPeerIdentityData, (uint64_t)&unk_10028AD24);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v19, &v28, v5, v20, v21);
    v22 = (uint64_t)v3 + *(int *)(v18 + 36);
    LOBYTE(v28) = 5;
    v23 = type metadata accessor for CreationMetadata(0);
    v24 = sub_1000639EC(&qword_100347AE0, type metadata accessor for CreationMetadata, (uint64_t)&unk_10028AD74);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v22, &v28, v5, v23, v24);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_100157D5C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  void (*v19)(uint64_t *, _QWORD, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  __int128 v43;
  char v44;

  v35 = a2;
  v3 = sub_100063D3C(&qword_100347800);
  __chkstk_darwin(v3, v4);
  v38 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = type metadata accessor for SESPeerIdentityData(0);
  __chkstk_darwin(v36, v6);
  v37 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = sub_100063D3C(&qword_100347FE0);
  v8 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39, v9);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for SEKeySyncRecovery.RecoveryRecord(0);
  v14 = __chkstk_darwin(v12, v13);
  v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (uint64_t *)&v16[*(int *)(v14 + 36)];
  sub_10014BDF4(v17);
  v18 = type metadata accessor for CreationMetadata(0);
  v19 = *(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56);
  v41 = v17;
  v19(v17, 0, 1, v18);
  v21 = a1[3];
  v20 = a1[4];
  v40 = a1;
  sub_10006BA78(a1, v21);
  v22 = sub_10015DAAC();
  v23 = v42;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SEKeySyncRecovery.RecoveryRecord.CodingKeys, &type metadata for SEKeySyncRecovery.RecoveryRecord.CodingKeys, v22, v21, v20);
  if (v23)
  {
    v26 = (uint64_t)v41;
    sub_10006BA9C(v40);
    return sub_100159DE8(v26);
  }
  else
  {
    v34 = v18;
    v25 = v37;
    v24 = (uint64_t)v38;
    v42 = v12;
    LOBYTE(v43) = 0;
    *(_QWORD *)v16 = KeyedDecodingContainer.decode(_:forKey:)(&v43, v39);
    *((_QWORD *)v16 + 1) = v27;
    LOBYTE(v43) = 1;
    *((_QWORD *)v16 + 2) = KeyedDecodingContainer.decode(_:forKey:)(&v43, v39);
    *((_QWORD *)v16 + 3) = v28;
    v44 = 2;
    v29 = sub_10014DDCC();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v43, &type metadata for Data, &v44, v39, &type metadata for Data, v29);
    *((_OWORD *)v16 + 2) = v43;
    v44 = 3;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v43, &type metadata for Data, &v44, v39, &type metadata for Data, v29);
    *((_OWORD *)v16 + 3) = v43;
    LOBYTE(v43) = 4;
    v30 = sub_1000639EC(&qword_100346BC0, type metadata accessor for SESPeerIdentityData, (uint64_t)&unk_10028AE3C);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v25, v36, &v43, v39, v36, v30);
    v36 = 0;
    sub_100124884((uint64_t)v25, *(int *)(v42 + 32), type metadata accessor for SESPeerIdentityData);
    LOBYTE(v43) = 5;
    v31 = sub_1000639EC(&qword_100347AA0, type metadata accessor for CreationMetadata, (uint64_t)&unk_10028AD9C);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v34, &v43, v39, v34, v31);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v39);
    sub_10015DAF0(v24, (uint64_t)v41);
    sub_100124B74(0, v35, type metadata accessor for SEKeySyncRecovery.RecoveryRecord);
    sub_10006BA9C(v40);
    return sub_1001247E8(0, type metadata accessor for SEKeySyncRecovery.RecoveryRecord);
  }
}

uint64_t sub_100158228()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100158254 + 4 * byte_10028B440[*v0]))(0x6E6F69676572, 0xE600000000000000);
}

uint64_t sub_100158254()
{
  return 0x656D614E77656976;
}

uint64_t sub_10015826C()
{
  return 0x444955556B6C74;
}

uint64_t sub_100158284()
{
  return 0x6574707972636E65;
}

uint64_t sub_1001582A8()
{
  return 0x746E656449637273;
}

unint64_t sub_1001582C8()
{
  return 0xD000000000000010;
}

uint64_t sub_1001582E4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10015DCEC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100158308(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10015DAAC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100158330(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10015DAAC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100158358@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100157D5C(a1, a2);
}

uint64_t sub_10015836C(_QWORD *a1)
{
  return sub_100157AFC(a1);
}

void sub_100158380()
{
  xmmword_100347EA0 = 0uLL;
  *(_QWORD *)&xmmword_100347E80 = 0xD000000000000014;
  *((_QWORD *)&xmmword_100347E80 + 1) = 0x80000001002BA5B0;
  qword_100347E90 = 0xD000000000000014;
  unk_100347E98 = 0x80000001002BE250;
  byte_100347EB0 = 1;
}

uint64_t sub_1001583C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1003466C0 + dword_1003466C0);
  v5 = (_QWORD *)swift_task_alloc(unk_1003466C4);
  *(_QWORD *)(v2 + 80) = v5;
  *v5 = v2;
  v5[1] = sub_100158434;
  return v7(a1, a2);
}

uint64_t sub_100158434(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(*v3 + 80);
  v7 = *v3;
  *(_QWORD *)(v7 + 88) = v2;
  swift_task_dealloc(v6);
  if (v2)
    return swift_task_switch(sub_1001584D8, 0, 0);
  else
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v7 + 8))(a1, a2, (*(_QWORD *)(v7 + 88) != 0) << 8);
}

uint64_t sub_1001584D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  Swift::String v7;
  void *object;

  v1 = *(_QWORD *)(v0 + 88);
  *(_QWORD *)(v0 + 64) = v1;
  swift_errorRetain(v1);
  v2 = sub_100063D3C(&qword_100345378);
  if ((swift_dynamicCast(v0 + 40, v0 + 64, v2, &type metadata for SESDataTask.ErrorCode, 0) & 1) != 0)
  {
    swift_errorRelease(*(_QWORD *)(v0 + 88));
    v4 = *(_QWORD *)(v0 + 40);
    v3 = *(_QWORD *)(v0 + 48);
    v5 = *(unsigned __int8 *)(v0 + 56);
    swift_errorRelease(*(_QWORD *)(v0 + 64));
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 88);
    swift_errorRelease(*(_QWORD *)(v0 + 64));
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease(0xE000000000000000);
    swift_getErrorValue(v6, v0 + 72, v0 + 16);
    v7._countAndFlagsBits = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
    object = v7._object;
    String.append(_:)(v7);
    swift_bridgeObjectRelease(object);
    swift_errorRelease(v6);
    v4 = 0xD000000000000015;
    v3 = 0x80000001002BE120;
    v5 = 3;
  }
  return (*(uint64_t (**)(unint64_t, unint64_t, _QWORD))(v0 + 8))(v4, v3, v5 | ((*(_QWORD *)(v0 + 88) != 0) << 8));
}

void sub_100158610(char a1)
{
  uint64_t v2;
  char *v3;
  id v4;
  NSString v5;
  id v6;
  uint64_t v7;
  NSString v8;
  char v9;
  _BYTE v10[24];

  v2 = swift_beginAccess(&qword_100347E58, v10, 33, 0);
  if (byte_100347E79 == 1 && !SESInternalVariant(v2))
    goto LABEL_5;
  v3 = off_100347E60;
  v4 = objc_allocWithZone((Class)NSUserDefaults);
  swift_bridgeObjectRetain(v3);
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  v6 = objc_msgSend(v4, "initWithSuiteName:", v5);

  if (v6)
  {
    v9 = a1 & 1;
    v7 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v9, &type metadata for Bool);
    v8 = String._bridgeToObjectiveC()();
    objc_msgSend(v6, "setValue:forKey:", v7, v8);

    swift_unknownObjectRelease(v7);
LABEL_5:
    swift_endAccess(v10);
    return;
  }
  __break(1u);
}

void sub_100158724(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t inited;
  uint64_t v9;
  const __CFString *v10;
  const __CFString *v11;
  const __CFString *v12;
  const __CFString *v13;
  const __CFString *v14;
  const __CFString *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  Class isa;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  os_log_type_t v29;
  uint8_t *v30;
  void *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD v36[3];
  _BYTE v37[16];
  __int128 v38;
  __int128 v39;
  __int16 v40;
  __int128 v41;
  __int128 v42;
  id v43;
  _BYTE v44[232];
  _BYTE v45[24];

  swift_beginAccess(&qword_100347E58, v45, 0, 0);
  v38 = *(_OWORD *)&qword_100347E58;
  v39 = *(_OWORD *)&qword_100347E68;
  v40 = unk_100347E78;
  v41 = *(_OWORD *)&qword_100347E58;
  v42 = *(_OWORD *)&qword_100347E68;
  sub_10006F87C((uint64_t)&v41);
  v4 = sub_10006F87C((uint64_t)&v42);
  sub_10015348C(v4);
  v6 = v5;
  sub_10006F8A4((uint64_t)&v41);
  sub_10006F8A4((uint64_t)&v42);
  if ((v6 & 1) == 0)
  {
    v7 = sub_100063D3C(&qword_100347EF0);
    inited = swift_initStackObject(v7, v44);
    *(_OWORD *)(inited + 16) = xmmword_1002892A0;
    *(_QWORD *)(inited + 32) = kSecClass;
    type metadata accessor for CFString(0);
    *(_QWORD *)(inited + 40) = kSecClassGenericPassword;
    *(_QWORD *)(inited + 64) = v9;
    *(_QWORD *)(inited + 72) = kSecAttrAccount;
    *(_QWORD *)(inited + 80) = a1;
    *(_QWORD *)(inited + 88) = a2;
    *(_QWORD *)(inited + 104) = &type metadata for String;
    *(_QWORD *)(inited + 112) = kSecAttrService;
    v10 = (id)kSecClass;
    v11 = (id)kSecClassGenericPassword;
    v12 = (id)kSecAttrAccount;
    swift_bridgeObjectRetain(a2);
    v13 = (id)kSecAttrService;
    *(Swift::String *)(inited + 120) = Data.base64EncodedString(options:)(0);
    *(_QWORD *)(inited + 144) = &type metadata for String;
    *(_QWORD *)(inited + 152) = kSecAttrAccessGroup;
    *(_QWORD *)(inited + 160) = 0xD000000000000033;
    *(_QWORD *)(inited + 168) = 0x80000001002BDF40;
    *(_QWORD *)(inited + 184) = &type metadata for String;
    *(_QWORD *)(inited + 192) = kSecAttrSynchronizable;
    *(_QWORD *)(inited + 224) = &type metadata for Bool;
    *(_BYTE *)(inited + 200) = 1;
    v14 = (id)kSecAttrAccessGroup;
    v15 = (id)kSecAttrSynchronizable;
    v16 = sub_10017C8EC(inited);
    if (qword_100344648 != -1)
      swift_once(&qword_100344648, sub_100157AC4);
    v17 = (void *)qword_100354D38;
    v18 = sub_10017DBD8(v16);
    swift_bridgeObjectRelease(v16);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v18);
    v43 = 0;
    LODWORD(v17) = objc_msgSend(v17, "updateToApplePayView:error:", isa, &v43);

    v20 = v43;
    if ((_DWORD)v17)
    {
      v21 = v43;
    }
    else
    {
      v22 = v43;
      v23 = _convertNSErrorToError(_:)(v20);

      swift_willThrow(v24);
      if (qword_100344638 != -1)
        swift_once(&qword_100344638, sub_100157A08);
      v25 = type metadata accessor for Logger(0);
      sub_10009673C(v25, (uint64_t)qword_100354CF8);
      swift_errorRetain(v23);
      v26 = swift_errorRetain(v23);
      v27 = Logger.logObject.getter(v26);
      v29 = static os_log_type_t.error.getter(v27, v28);
      if (os_log_type_enabled(v27, v29))
      {
        v30 = (uint8_t *)swift_slowAlloc(12, -1);
        v31 = (void *)swift_slowAlloc(32, -1);
        v43 = v31;
        *(_DWORD *)v30 = 136315138;
        swift_getErrorValue(v23, v37, v36);
        v32 = Error.localizedDescription.getter(v36[1], v36[2]);
        v34 = v33;
        v35 = sub_1001C56EC(v32, v33, (uint64_t *)&v43);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36, v30 + 4, v30 + 12);
        swift_bridgeObjectRelease(v34);
        swift_errorRelease(v23);
        swift_errorRelease(v23);
        _os_log_impl((void *)&_mh_execute_header, v27, v29, "Failed to update recovery blob %s", v30, 0xCu);
        swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v31, -1, -1);
        swift_slowDealloc(v30, -1, -1);

        swift_errorRelease(v23);
      }
      else
      {
        swift_errorRelease(v23);
        swift_errorRelease(v23);
        swift_errorRelease(v23);

      }
    }
    sub_100158610(1);
  }
}

uint64_t sub_100158B60(char a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _OWORD v34[2];
  __int16 v35;
  __int128 v36;
  __int128 v37;

  if (qword_100344638 != -1)
    swift_once(&qword_100344638, sub_100157A08);
  v6 = type metadata accessor for Logger(0);
  sub_10009673C(v6, (uint64_t)qword_100354CF8);
  v7 = swift_bridgeObjectRetain_n(a3, 2);
  v8 = Logger.logObject.getter(v7);
  v12 = static os_log_type_t.info.getter(v8, v9, v10, v11);
  if (os_log_type_enabled(v8, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v34[0] = v14;
    *(_DWORD *)v13 = 136315138;
    swift_bridgeObjectRetain(a3);
    *(_QWORD *)&v37 = sub_1001C56EC(a2, a3, (uint64_t *)v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, (char *)&v37 + 8, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease_n(a3, 3);
    _os_log_impl((void *)&_mh_execute_header, v8, v12, "Encrypting towards region %s", v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    if ((a1 & 1) == 0)
      goto LABEL_5;
  }
  else
  {

    swift_bridgeObjectRelease_n(a3, 2);
    if ((a1 & 1) == 0)
    {
LABEL_5:
      v34[0] = unk_100347EB8;
      v34[1] = unk_100347EC8;
      v35 = word_100347ED8;
      v36 = unk_100347EB8;
      v37 = unk_100347EC8;
      sub_10006F87C((uint64_t)&v36);
      v15 = sub_10006F87C((uint64_t)&v37);
      sub_10015348C(v15);
      v17 = v16;
      sub_10006F8A4((uint64_t)&v36);
      sub_10006F8A4((uint64_t)&v37);
      v18 = sub_100063D3C(&qword_100348980);
      v19 = swift_allocObject(v18, 64, 7);
      *(_OWORD *)(v19 + 16) = xmmword_1002888F0;
      if ((v17 & 1) != 0)
      {
        if (qword_100344750 != -1)
          swift_once(&qword_100344750, sub_1001E1308);
        v20 = qword_100354E58;
        v21 = qword_100354E60;
        *(_QWORD *)(v19 + 32) = qword_100354E58;
        *(_QWORD *)(v19 + 40) = v21;
        sub_100063C8C(v20, v21);
        if (qword_100344758 != -1)
          swift_once(&qword_100344758, sub_1001E1330);
        v22 = &qword_100354E68;
      }
      else
      {
        if (qword_100344750 != -1)
          swift_once(&qword_100344750, sub_1001E1308);
        v26 = qword_100354E58;
        v27 = qword_100354E60;
        *(_QWORD *)(v19 + 32) = qword_100354E58;
        *(_QWORD *)(v19 + 40) = v27;
        sub_100063C8C(v26, v27);
        if (qword_100344760 != -1)
          swift_once(&qword_100344760, sub_1001E1358);
        v22 = &qword_100354E78;
      }
      goto LABEL_30;
    }
  }
  if (a2 == 20035 && a3 == 0xE200000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(20035, 0xE200000000000000, a2, a3, 0) & 1) != 0)
  {
    v23 = sub_100063D3C(&qword_100348980);
    v19 = swift_allocObject(v23, 64, 7);
    *(_OWORD *)(v19 + 16) = xmmword_1002888F0;
    if (qword_100344768 != -1)
      swift_once(&qword_100344768, sub_1001E1380);
    v24 = qword_100354E88;
    v25 = qword_100354E90;
    *(_QWORD *)(v19 + 32) = qword_100354E88;
    *(_QWORD *)(v19 + 40) = v25;
    sub_100063C8C(v24, v25);
    if (qword_100344778 != -1)
      swift_once(&qword_100344778, sub_1001E13D0);
    v22 = &qword_100354EA8;
  }
  else
  {
    v28 = sub_100063D3C(&qword_100348980);
    v19 = swift_allocObject(v28, 64, 7);
    *(_OWORD *)(v19 + 16) = xmmword_1002888F0;
    if (qword_100344768 != -1)
      swift_once(&qword_100344768, sub_1001E1380);
    v29 = qword_100354E88;
    v30 = qword_100354E90;
    *(_QWORD *)(v19 + 32) = qword_100354E88;
    *(_QWORD *)(v19 + 40) = v30;
    sub_100063C8C(v29, v30);
    if (qword_100344770 != -1)
      swift_once(&qword_100344770, sub_1001E13A8);
    v22 = &qword_100354E98;
  }
LABEL_30:
  v31 = *v22;
  v32 = v22[1];
  *(_QWORD *)(v19 + 48) = *v22;
  *(_QWORD *)(v19 + 56) = v32;
  sub_100063C8C(v31, v32);
  return v19;
}

id sub_100158FC4(void *a1, __CFString *a2, __CFString *a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id result;
  void *v15;
  id v16;
  const char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  id v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  id v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  __CFString *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t inited;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const __CFString *v54;
  const __CFString *v55;
  __CFString *v56;
  __CFString *v57;
  Swift::String v58;
  __CFString *v59;
  uint64_t v60;
  unint64_t v61;
  Class isa;
  __CFString *v63;
  id v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  void *v68;
  Class v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  uint64_t v74;
  os_log_type_t v75;
  uint64_t v76;
  Swift::String v77;
  __CFString *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  NSObject *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  os_log_type_t v86;
  int v87;
  _BOOL4 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  __CFString *v111;
  __CFString *v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  _BYTE *v116;
  unint64_t v117;
  __CFString *v118;
  __CFString *v119;
  __CFString *v120;
  __CFString *v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  __CFString *v127;
  __CFString *v128;
  uint64_t *v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  _BYTE v133[616];
  CFStringRef v134;

  v126 = a6;
  v131 = a5;
  v11 = type metadata accessor for SEKeySyncRecovery.RecoveryRecord(0);
  __chkstk_darwin(v11, v12);
  v129 = (uint64_t *)((char *)&v117 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  result = objc_msgSend((id)objc_opt_self(NSLocale), "currentLocale");
  if (!result)
  {
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v15 = result;
  v127 = a2;
  v128 = a3;
  v16 = objc_msgSend(result, "countryCode");

  if (v16)
  {
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v20 = v19;

  }
  else
  {
    v20 = 0xE200000000000000;
    v18 = 21333;
  }
  v21 = sub_10005066C(a1, v17);
  v22 = objc_msgSend(v21, "isProd");

  v23 = sub_100158B60(v22, v18, v20);
  v24 = a4;
  v130 = a4;
  v25 = v20;
  v26 = v131;
  v27 = sub_100133E68(a1, v24, v131, v23);
  if (v6)
  {
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease(v25);
    v29 = sub_10012443C();
    v30 = swift_allocError(&type metadata for KeySyncEvent, v29, 0, 0);
    *v31 = 16;
    swift_willThrow(v30);
    return (id)swift_errorRelease(v6);
  }
  v32 = (uint64_t)v27;
  v33 = v28;
  swift_bridgeObjectRelease(v23);
  v34 = *(int *)(v11 + 32);
  v124 = v11;
  v35 = v129;
  sub_100124B74(v126, (uint64_t)v129 + v34, type metadata accessor for SESPeerIdentityData);
  v36 = (uint64_t *)((char *)v35 + *(int *)(v11 + 36));
  sub_100063C8C(v32, v33);
  swift_bridgeObjectRetain(v25);
  v125 = v32;
  v37 = v18;
  v38 = v128;
  swift_bridgeObjectRetain(v128);
  v126 = v33;
  v39 = v130;
  sub_100063C8C(v130, v26);
  sub_10014BDF4(v36);
  v40 = type metadata accessor for CreationMetadata(0);
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v36, 0, 1, v40);
  v123 = v37;
  *v35 = v37;
  v35[1] = v25;
  v35[2] = (uint64_t)v127;
  v35[3] = (uint64_t)v38;
  v35[4] = v39;
  v35[5] = v26;
  v41 = v126;
  v35[6] = v125;
  v35[7] = v41;
  v42 = type metadata accessor for PropertyListEncoder(0);
  swift_allocObject(v42, *(unsigned int *)(v42 + 48), *(unsigned __int16 *)(v42 + 52));
  v43 = PropertyListEncoder.init()();
  v44 = sub_1000639EC(&qword_100347EE0, type metadata accessor for SEKeySyncRecovery.RecoveryRecord, (uint64_t)&unk_10028B4DC);
  v45 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v35, v124, v44);
  v117 = v25;
  v46 = v45;
  v122 = v45;
  v48 = v47;
  swift_release(v43);
  v49 = sub_100063D3C(&qword_1003460E0);
  inited = swift_initStackObject(v49, v133);
  *(_OWORD *)(inited + 16) = xmmword_10028B430;
  v134 = kSecClass;
  v121 = (id)(id)kSecClass;
  sub_100063C8C(v46, v48);
  type metadata accessor for CFString(0);
  v124 = v48;
  v52 = v51;
  v53 = sub_1000639EC(&qword_100344AD8, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_1002887EC);
  AnyHashable.init<A>(_:)(&v134, v52, v53);
  *(_QWORD *)(inited + 96) = v52;
  *(_QWORD *)(inited + 72) = kSecClassGenericPassword;
  v134 = kSecAttrAccessible;
  v120 = (id)(id)kSecAttrAccessible;
  v54 = (id)kSecClassGenericPassword;
  AnyHashable.init<A>(_:)(&v134, v52, v53);
  *(_QWORD *)(inited + 168) = v52;
  *(_QWORD *)(inited + 144) = kSecAttrAccessibleAfterFirstUnlock;
  v134 = kSecAttrAccount;
  v119 = (id)(id)kSecAttrAccount;
  v55 = (id)kSecAttrAccessibleAfterFirstUnlock;
  AnyHashable.init<A>(_:)(&v134, v52, v53);
  *(_QWORD *)(inited + 240) = &type metadata for String;
  v56 = v128;
  *(_QWORD *)(inited + 216) = v127;
  *(_QWORD *)(inited + 224) = v56;
  v134 = kSecAttrService;
  v57 = (id)kSecAttrService;
  swift_bridgeObjectRetain(v56);
  v128 = v57;
  AnyHashable.init<A>(_:)(&v134, v52, v53);
  v58 = Data.base64EncodedString(options:)(0);
  *(_QWORD *)(inited + 312) = &type metadata for String;
  *(Swift::String *)(inited + 288) = v58;
  v134 = kSecAttrAccessGroup;
  v59 = (id)(id)kSecAttrAccessGroup;
  AnyHashable.init<A>(_:)(&v134, v52, v53);
  *(_QWORD *)(inited + 384) = &type metadata for String;
  *(_QWORD *)(inited + 360) = 0xD000000000000033;
  *(_QWORD *)(inited + 368) = 0x80000001002BDF40;
  v134 = kSecAttrSynchronizable;
  v127 = (id)(id)kSecAttrSynchronizable;
  AnyHashable.init<A>(_:)(&v134, v52, v53);
  *(_QWORD *)(inited + 456) = &type metadata for Bool;
  *(_BYTE *)(inited + 432) = 1;
  v134 = kSecValueData;
  v118 = (id)(id)kSecValueData;
  AnyHashable.init<A>(_:)(&v134, v52, v53);
  v60 = v122;
  v61 = v124;
  isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100063CD0(v60, v61);
  result = (id)sub_100159C04();
  *(_QWORD *)(inited + 528) = result;
  *(_QWORD *)(inited + 504) = isa;
  if (!kSecAttrSyncViewHint)
    goto LABEL_25;
  v134 = kSecAttrSyncViewHint;
  v63 = (id)(id)kSecAttrSyncViewHint;
  result = (id)AnyHashable.init<A>(_:)(&v134, v52, v53);
  if (!kSecAttrViewHintApplePay)
  {
LABEL_26:
    __break(1u);
    return result;
  }
  v64 = kSecAttrViewHintApplePay;

  *(_QWORD *)(inited + 600) = v52;
  *(_QWORD *)(inited + 576) = v64;
  v65 = sub_10017C368(inited);
  v67 = v130;
  v66 = v131;
  if (qword_100344648 != -1)
    swift_once(&qword_100344648, sub_100157AC4);
  v68 = (void *)qword_100354D38;
  v69 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v65);
  v70 = objc_msgSend(v68, "addItem:", v69);

  if (v70)
  {
    swift_bridgeObjectRelease(v117);
    if (qword_100344638 != -1)
      swift_once(&qword_100344638, sub_100157A08);
    v71 = type metadata accessor for Logger(0);
    sub_10009673C(v71, (uint64_t)qword_100354CF8);
    sub_100063C8C(v67, v66);
    v72 = sub_100063C8C(v67, v66);
    v73 = Logger.logObject.getter(v72);
    v75 = static os_log_type_t.error.getter(v73, v74);
    if (os_log_type_enabled(v73, v75))
    {
      v76 = swift_slowAlloc(18, -1);
      v128 = (__CFString *)swift_slowAlloc(32, -1);
      v134 = v128;
      *(_DWORD *)v76 = 136315394;
      v77 = Data.base64EncodedString(options:)(0);
      v132 = sub_1001C56EC(v77._countAndFlagsBits, (unint64_t)v77._object, (uint64_t *)&v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, v133, v76 + 4, v76 + 12);
      swift_bridgeObjectRelease(v77._object);
      sub_100063CD0(v67, v66);
      sub_100063CD0(v67, v66);
      *(_WORD *)(v76 + 12) = 1024;
      LODWORD(v132) = v70;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, (char *)&v132 + 4, v76 + 14, v76 + 18);
      _os_log_impl((void *)&_mh_execute_header, v73, v75, "Failed to add recovery record for %s status %d", (uint8_t *)v76, 0x12u);
      v78 = v128;
      swift_arrayDestroy(v128, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v78, -1, -1);
      swift_slowDealloc(v76, -1, -1);
    }
    else
    {
      sub_100063CD0(v67, v66);
      sub_100063CD0(v67, v66);
    }

    v113 = v126;
    v114 = sub_10012443C();
    v115 = swift_allocError(&type metadata for KeySyncEvent, v114, 0, 0);
    *v116 = 25;
    swift_willThrow(v115);
    sub_100063CD0(v125, v113);
    sub_100063CD0(v122, v124);
  }
  else
  {
    if (qword_100344638 != -1)
      swift_once(&qword_100344638, sub_100157A08);
    v79 = type metadata accessor for Logger(0);
    sub_10009673C(v79, (uint64_t)qword_100354CF8);
    sub_100063C8C(v67, v66);
    v80 = v117;
    swift_bridgeObjectRetain(v117);
    v81 = sub_100063C8C(v67, v66);
    v82 = Logger.logObject.getter(v81);
    v86 = static os_log_type_t.info.getter(v82, v83, v84, v85);
    v87 = v86;
    v88 = os_log_type_enabled(v82, v86);
    v89 = v123;
    if (v88)
    {
      v90 = swift_slowAlloc(22, -1);
      LODWORD(v128) = v87;
      v91 = v90;
      v127 = (__CFString *)swift_slowAlloc(64, -1);
      v134 = v127;
      *(_DWORD *)v91 = 136315394;
      v121 = (__CFString *)v82;
      swift_bridgeObjectRetain(v80);
      v132 = sub_1001C56EC(v89, v80, (uint64_t *)&v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, v133, v91 + 4, v91 + 12);
      swift_bridgeObjectRelease_n(v80, 3);
      *(_WORD *)(v91 + 12) = 2080;
      v123 = v91 + 14;
      sub_1001BD2CC(v67, v66);
      v93 = v92;
      v132 = v92;
      v94 = sub_100063D3C((uint64_t *)&unk_100346060);
      v95 = sub_10006B86C();
      v96 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v94, v95);
      v98 = v97;
      swift_bridgeObjectRelease(v93);
      v99 = sub_1001C0620(8, v96, v98);
      v101 = v100;
      v102 = v66;
      v104 = v103;
      v106 = v105;
      swift_bridgeObjectRelease(v98);
      v107 = static String._fromSubstring(_:)(v99, v101, v104, v106);
      v109 = v108;
      swift_bridgeObjectRelease(v106);
      v132 = sub_1001C56EC(v107, v109, (uint64_t *)&v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, v133, v123, v91 + 22);
      swift_bridgeObjectRelease(v109);
      v110 = v130;
      sub_100063CD0(v130, v102);
      sub_100063CD0(v110, v102);
      v111 = v121;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v121, (os_log_type_t)v128, "Stored recovery record region %s TLK %s", (uint8_t *)v91, 0x16u);
      v112 = v127;
      swift_arrayDestroy(v127, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v112, -1, -1);
      swift_slowDealloc(v91, -1, -1);
      sub_100063CD0(v122, v124);
      sub_100063CD0(v125, v126);

    }
    else
    {
      sub_100063CD0(v122, v124);
      sub_100063CD0(v125, v126);

      sub_100063CD0(v67, v66);
      sub_100063CD0(v67, v66);
      swift_bridgeObjectRelease_n(v80, 2);
    }
  }
  return (id)sub_1001247E8((uint64_t)v129, type metadata accessor for SEKeySyncRecovery.RecoveryRecord);
}

uint64_t type metadata accessor for SEKeySyncRecovery.RecoveryRecord(uint64_t a1)
{
  uint64_t result;

  result = qword_100347F88;
  if (!qword_100347F88)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SEKeySyncRecovery.RecoveryRecord);
  return result;
}

unint64_t sub_100159C04()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100347EE8;
  if (!qword_100347EE8)
  {
    v1 = objc_opt_self(NSData);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100347EE8);
  }
  return result;
}

uint64_t *sub_100159C40(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[6];
  v7 = a1[7];
  v8 = a1[8];
  v9 = a1[9];
  v10 = a1[10];
  v12 = a1[11];
  v13 = a1[13];
  v16 = a1[14];
  v14 = a1[12];
  v15 = a1[15];
  sub_100063CD0(*a1, a1[1]);
  sub_100063CD0(v2, v3);
  sub_100063CD0(v4, v5);
  sub_100063CD0(v6, v7);
  sub_100063CD0(v8, v9);
  sub_100063CD0(v10, v12);
  sub_100063CD0(v14, v13);
  sub_100063CD0(v16, v15);
  return a1;
}

uint64_t *sub_100159D10(uint64_t *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = a1[5];
  v8 = a1[6];
  v9 = a1[7];
  v10 = a1[8];
  v11 = a1[9];
  a2(*a1, a1[1]);
  a2(v4, v5);
  a2(v6, v7);
  a2(v8, v9);
  a2(v10, v11);
  return a1;
}

uint64_t sub_100159DA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100063D3C(&qword_100347800);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100159DE8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100063D3C(&qword_100347800);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100159E28(char a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  BOOL v21;
  uint64_t v23;
  uint64_t v24;
  _OWORD v25[3];
  char v26;

  if (qword_100344650 != -1)
    swift_once(&qword_100344650, sub_100158380);
  v25[0] = xmmword_100347E80;
  v25[1] = *(_OWORD *)&qword_100347E90;
  v25[2] = xmmword_100347EA0;
  v26 = byte_100347EB0;
  v6 = sub_10015C054(v25);
  sub_100153858((uint64_t)v6);
  v8 = v7;
  v10 = v9;
  sub_10015C09C(v25);
  if (v10)
  {
    if (qword_100344638 != -1)
      swift_once(&qword_100344638, sub_100157A08);
    v11 = type metadata accessor for Logger(0);
    sub_10009673C(v11, (uint64_t)qword_100354CF8);
    v12 = swift_bridgeObjectRetain_n(v10, 2);
    v13 = Logger.logObject.getter(v12);
    v17 = static os_log_type_t.info.getter(v13, v14, v15, v16);
    if (os_log_type_enabled(v13, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      v19 = swift_slowAlloc(32, -1);
      v24 = v19;
      *(_DWORD *)v18 = 136315138;
      swift_bridgeObjectRetain(v10);
      v23 = sub_1001C56EC(v8, v10, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v18 + 4, v18 + 12);
      swift_bridgeObjectRelease_n(v10, 3);
      _os_log_impl((void *)&_mh_execute_header, v13, v17, "Overriding URL via defaults - %s", v18, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v10, 2);
    }
  }
  else
  {
    v21 = a2 == 20035 && a3 == 0xE200000000000000;
    if ((a1 & 1) != 0)
    {
      if (v21)
      {
        return 0xD000000000000038;
      }
      else if ((_stringCompareWithSmolCheck(_:_:expecting:)(20035, 0xE200000000000000, a2, a3, 0) & 1) != 0)
      {
        return 0xD000000000000038;
      }
      else
      {
        return 0xD000000000000035;
      }
    }
    else
    {
      v8 = 0xD000000000000041;
      if (!v21 && (_stringCompareWithSmolCheck(_:_:expecting:)(20035, 0xE200000000000000, a2, a3, 0) & 1) == 0)
        return 0xD000000000000039;
    }
  }
  return v8;
}

void sub_10015A100(uint64_t a1, void *a2, char a3)
{
  void *v5;
  Swift::String v6;
  NSString v7;
  void *v8;
  Swift::String v9;
  void *object;
  NSString v11;
  NSString v12;
  id v13;

  if (a3)
  {
    if (a3 == 1)
    {
      v5 = (void *)objc_opt_self(SESTapToRadar);
      _StringGuts.grow(_:)(31);
      swift_bridgeObjectRelease(0xE000000000000000);
      v6._countAndFlagsBits = a1;
      v6._object = a2;
      String.append(_:)(v6);
      v7 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(0x80000001002BE0C0);
      v13 = String._bridgeToObjectiveC()();
      objc_msgSend(v5, "requestTapToRadar:client:", v7, v13);

    }
  }
  else
  {
    v8 = (void *)objc_opt_self(SESTapToRadar);
    _StringGuts.grow(_:)(31);
    swift_bridgeObjectRelease(0xE000000000000000);
    v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v9._object;
    String.append(_:)(v9);
    swift_bridgeObjectRelease(object);
    v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(0x80000001002BE0C0);
    v12 = String._bridgeToObjectiveC()();
    objc_msgSend(v8, "requestTapToRadar:client:", v11, v12);

  }
}

uint64_t sub_10015A2E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 304) = a1;
  *(_QWORD *)(v2 + 312) = a2;
  return swift_task_switch(sub_10015A348, 0, 0);
}

uint64_t sub_10015A348()
{
  uint64_t v0;
  void *v1;
  Class isa;
  id v3;
  void *v4;
  uint64_t *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  uint64_t v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  NSObject *v50;
  uint64_t v51;
  os_log_type_t v52;
  _BOOL4 v53;
  unint64_t v54;
  uint64_t v55;
  uint8_t *v56;
  uint64_t v57;
  Swift::String v58;
  unint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  unint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  os_log_type_t v77;
  uint8_t *v78;
  _QWORD *v79;
  uint64_t v80;

  v1 = (void *)objc_opt_self(NSJSONSerialization);
  isa = Data._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)(v0 + 288) = 0;
  v3 = objc_msgSend(v1, "JSONObjectWithData:options:error:", isa, 0, v0 + 288);

  v4 = *(void **)(v0 + 288);
  if (!v3)
  {
    v32 = v4;
    v33 = _convertNSErrorToError(_:)(v4);

LABEL_19:
    swift_willThrow(v34);
    if (qword_100344638 != -1)
      swift_once(&qword_100344638, sub_100157A08);
    v37 = type metadata accessor for Logger(0);
    sub_10009673C(v37, (uint64_t)qword_100354CF8);
    swift_errorRetain(v33);
    v38 = swift_errorRetain(v33);
    v39 = Logger.logObject.getter(v38);
    v41 = static os_log_type_t.error.getter(v39, v40);
    if (os_log_type_enabled(v39, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc(12, -1);
      v43 = swift_slowAlloc(32, -1);
      v80 = v43;
      *(_DWORD *)v42 = 136315138;
      swift_getErrorValue(v33, v0 + 264, v0 + 168);
      v44 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184));
      v46 = v45;
      *(_QWORD *)(v0 + 256) = sub_1001C56EC(v44, v45, &v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 256, v0 + 264, v42 + 4, v42 + 12);
      swift_bridgeObjectRelease(v46);
      swift_errorRelease(v33);
      swift_errorRelease(v33);
      _os_log_impl((void *)&_mh_execute_header, v39, v41, "Failed to decode JSON object %s", v42, 0xCu);
      swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v42, -1, -1);
    }
    else
    {
      swift_errorRelease(v33);
      swift_errorRelease(v33);
    }

    v47 = *(_QWORD *)(v0 + 304);
    v48 = *(_QWORD *)(v0 + 312);
    sub_100063C8C(v47, v48);
    v49 = sub_100063C8C(v47, v48);
    v50 = Logger.logObject.getter(v49);
    v52 = static os_log_type_t.error.getter(v50, v51);
    v53 = os_log_type_enabled(v50, v52);
    v55 = *(_QWORD *)(v0 + 304);
    v54 = *(_QWORD *)(v0 + 312);
    if (v53)
    {
      v56 = (uint8_t *)swift_slowAlloc(12, -1);
      v57 = swift_slowAlloc(32, -1);
      v80 = v57;
      *(_DWORD *)v56 = 136315138;
      v58 = Data.base64EncodedString(options:)(0);
      *(_QWORD *)(v0 + 272) = sub_1001C56EC(v58._countAndFlagsBits, (unint64_t)v58._object, &v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v56 + 4, v56 + 12);
      swift_bridgeObjectRelease(v58._object);
      sub_100063CD0(v55, v54);
      sub_100063CD0(v55, v54);
      _os_log_impl((void *)&_mh_execute_header, v50, v52, "%s", v56, 0xCu);
      swift_arrayDestroy(v57, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v57, -1, -1);
      swift_slowDealloc(v56, -1, -1);
    }
    else
    {
      sub_100063CD0(*(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 312));
      sub_100063CD0(v55, v54);
    }

    v59 = sub_10012443C();
    v60 = swift_allocError(&type metadata for KeySyncEvent, v59, 0, 0);
    *v61 = 6;
    swift_willThrow(v60);
    swift_errorRelease(v33);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v5 = (uint64_t *)(v0 + 248);
  v6 = v4;
  _bridgeAnyObjectToAny(_:)((_QWORD *)(v0 + 112));
  swift_unknownObjectRelease(v3);
  v7 = sub_100063D3C(&qword_100345388);
  if (!swift_dynamicCast(v0 + 248, v0 + 112, (char *)&type metadata for Any + 8, v7, 6))
  {
    v35 = sub_10012443C();
    v34 = swift_allocError(&type metadata for KeySyncEvent, v35, 0, 0);
    v33 = v34;
    *v36 = 6;
    goto LABEL_19;
  }
  v8 = *v5;
  if (!*(_QWORD *)(*v5 + 16))
    goto LABEL_13;
  v9 = sub_100187ED0(0x6570706172776552, 0xED0000626F6C4264);
  if ((v10 & 1) == 0)
    goto LABEL_13;
  sub_100096CB0(*(_QWORD *)(v8 + 56) + 32 * v9, v0 + 16);
  if ((swift_dynamicCast(v0 + 224, v0 + 16, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
    goto LABEL_13;
  v11 = sub_1000E848C(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 232));
  *(_QWORD *)(v0 + 320) = v11;
  *(_QWORD *)(v0 + 328) = v12;
  if (v12 >> 60 == 15)
    goto LABEL_13;
  v13 = v11;
  v14 = v12;
  if (!*(_QWORD *)(v8 + 16)
    || (v15 = sub_100187ED0(0xD000000000000012, 0x80000001002BE0E0), (v16 & 1) == 0)
    || (sub_100096CB0(*(_QWORD *)(v8 + 56) + 32 * v15, v0 + 80),
        (swift_dynamicCast(v0 + 192, v0 + 80, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
    || (v17 = sub_1000E848C(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 200)),
        *(_QWORD *)(v0 + 336) = v17,
        *(_QWORD *)(v0 + 344) = v18,
        v18 >> 60 == 15))
  {
    v19 = v13;
    v20 = v14;
LABEL_12:
    sub_10006B9B4(v19, v20);
LABEL_13:
    if (qword_100344638 != -1)
      swift_once(&qword_100344638, sub_100157A08);
    v21 = type metadata accessor for Logger(0);
    sub_10009673C(v21, (uint64_t)qword_100354CF8);
    swift_bridgeObjectRetain(v8);
    v23 = Logger.logObject.getter(v22);
    v25 = static os_log_type_t.error.getter(v23, v24);
    if (os_log_type_enabled(v23, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(12, -1);
      v27 = swift_slowAlloc(32, -1);
      v80 = v27;
      *(_DWORD *)v26 = 136315138;
      swift_bridgeObjectRetain(v8);
      v29 = Dictionary.Keys.description.getter(v28, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
      v31 = v30;
      swift_bridgeObjectRelease(v8);
      *(_QWORD *)(v0 + 240) = sub_1001C56EC(v29, v31, &v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248, v26 + 4, v26 + 12);
      swift_bridgeObjectRelease(v31);
      swift_bridgeObjectRelease_n(v8, 2);
      _os_log_impl((void *)&_mh_execute_header, v23, v25, "Missing or malformed response %s", v26, 0xCu);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v8, 2);
    }

    v62 = sub_10012443C();
    v63 = swift_allocError(&type metadata for KeySyncEvent, v62, 0, 0);
    *v64 = 18;
    swift_willThrow(v63);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v66 = v17;
  v67 = v18;
  if (!*(_QWORD *)(v8 + 16) || (v68 = sub_100187ED0(0xD00000000000001ALL, 0x80000001002BE100), (v69 & 1) == 0))
  {
    sub_10006B9B4(v13, v14);
    v19 = v66;
    v20 = v67;
    goto LABEL_12;
  }
  sub_100096CB0(*(_QWORD *)(v8 + 56) + 32 * v68, v0 + 48);
  if ((swift_dynamicCast(v0 + 208, v0 + 48, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0
    || (*(_QWORD *)(v0 + 352) = sub_1000E848C(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 216)),
        *(_QWORD *)(v0 + 360) = v70,
        v70 >> 60 == 15))
  {
    sub_10006B9B4(v13, v14);
    sub_10006B9B4(v66, v67);
    goto LABEL_13;
  }
  swift_bridgeObjectRelease(v8);
  if (qword_100344638 != -1)
    swift_once(&qword_100344638, sub_100157A08);
  v71 = type metadata accessor for Logger(0);
  v72 = sub_10009673C(v71, (uint64_t)qword_100354CF8);
  *(_QWORD *)(v0 + 368) = v72;
  v73 = Logger.logObject.getter(v72);
  v77 = static os_log_type_t.info.getter(v73, v74, v75, v76);
  if (os_log_type_enabled(v73, v77))
  {
    v78 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v78 = 0;
    _os_log_impl((void *)&_mh_execute_header, v73, v77, "Got response data for rewrap, asking for SE", v78, 2u);
    swift_slowDealloc(v78, -1, -1);
  }

  if (qword_1003445D8 != -1)
    swift_once(&qword_1003445D8, sub_1000FB394);
  v79 = (_QWORD *)swift_task_alloc(dword_100346B64);
  *(_QWORD *)(v0 + 376) = v79;
  *v79 = v0;
  v79[1] = sub_10015ACC4;
  return sub_100109588();
}

uint64_t sub_10015ACC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 376);
  *(_QWORD *)(v3 + 384) = a1;
  *(_QWORD *)(v3 + 392) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_10015B120;
  else
    v5 = sub_10015AD74;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10015AD74()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  os_log_type_t v26;
  BOOL v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint8_t *v35;
  void *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t (*v45)(void);
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;

  v1 = (void *)v0[48];
  v2 = v0[49];
  v4 = v0[44];
  v3 = v0[45];
  v6 = v0[42];
  v5 = v0[43];
  v8 = v0[40];
  v7 = v0[41];
  v9 = sub_100063D3C(&qword_100348980);
  v10 = swift_allocObject(v9, 64, 7);
  *(_OWORD *)(v10 + 16) = xmmword_1002888F0;
  *(_QWORD *)(v10 + 32) = v4;
  *(_QWORD *)(v10 + 40) = v3;
  *(_QWORD *)(v10 + 48) = v6;
  *(_QWORD *)(v10 + 56) = v5;
  sub_10006BA34(v4, v3);
  sub_10006BA34(v6, v5);
  sub_10013498C(v1, v8, v7, v10);
  v11 = v2;
  v12 = swift_bridgeObjectRelease(v10);
  if (v2)
  {
    swift_errorRetain(v2);
    v13 = swift_errorRetain(v2);
    v14 = Logger.logObject.getter(v13);
    v16 = static os_log_type_t.error.getter(v14, v15);
    if (os_log_type_enabled(v14, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v18 = swift_slowAlloc(32, -1);
      v49 = v18;
      *(_DWORD *)v17 = 136315138;
      swift_getErrorValue(v11, v0 + 35, v0 + 18);
      v19 = Error.localizedDescription.getter(v0[19], v0[20]);
      v21 = v20;
      v0[37] = sub_1001C56EC(v19, v20, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 37, v0 + 38, v17 + 4, v17 + 12);
      swift_bridgeObjectRelease(v21);
      swift_errorRelease(v11);
      swift_errorRelease(v11);
      _os_log_impl((void *)&_mh_execute_header, v14, v16, "Failed to import rewrapped server TLK : %s", v17, 0xCu);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);
    }
    else
    {
      swift_errorRelease(v11);
      swift_errorRelease(v11);
    }

    v36 = (void *)v0[48];
    v38 = v0[44];
    v37 = v0[45];
    v40 = v0[42];
    v39 = v0[43];
    v41 = v0[40];
    v48 = v0[41];
    v42 = sub_10012443C();
    v43 = swift_allocError(&type metadata for KeySyncEvent, v42, 0, 0);
    *v44 = 19;
    swift_willThrow(v43);
    swift_errorRelease(v11);

    sub_10006B9B4(v38, v37);
    sub_10006B9B4(v40, v39);
    sub_10006B9B4(v41, v48);
    v45 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    v22 = Logger.logObject.getter(v12);
    v26 = static os_log_type_t.info.getter(v22, v23, v24, v25);
    v27 = os_log_type_enabled(v22, v26);
    v28 = (void *)v0[48];
    v29 = v0[44];
    v30 = v0[45];
    v32 = v0[42];
    v31 = v0[43];
    v34 = v0[40];
    v33 = v0[41];
    if (v27)
    {
      v47 = v0[45];
      v35 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v26, "Successfully imported rewrapped server TLK", v35, 2u);
      swift_slowDealloc(v35, -1, -1);
      sub_10006B9B4(v34, v33);

      sub_10006B9B4(v32, v31);
      sub_10006B9B4(v29, v47);
    }
    else
    {
      sub_10006B9B4(v0[40], v0[41]);
      sub_10006B9B4(v32, v31);
      sub_10006B9B4(v29, v30);

    }
    v45 = (uint64_t (*)(void))v0[1];
  }
  return v45();
}

uint64_t sub_10015B120()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 336);
  v2 = *(_QWORD *)(v0 + 344);
  v4 = *(_QWORD *)(v0 + 320);
  v3 = *(_QWORD *)(v0 + 328);
  sub_10006B9B4(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 360));
  sub_10006B9B4(v1, v2);
  sub_10006B9B4(v4, v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10015B1B0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)(v3 + 426) = a3;
  *(_QWORD *)(v3 + 312) = a1;
  *(_QWORD *)(v3 + 320) = a2;
  v4 = sub_100063D3C(&qword_1003466C8);
  *(_QWORD *)(v3 + 328) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URLRequest(0);
  *(_QWORD *)(v3 + 336) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v3 + 344) = v6;
  *(_QWORD *)(v3 + 352) = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10015B238, 0, 0);
}

uint64_t sub_10015B238()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t inited;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  uint64_t v49;
  void *v50;
  void *v51;
  Swift::String v52;
  Swift::String v53;
  Swift::String v54;
  Swift::String v55;
  Swift::String v56;
  Swift::String v57;
  Swift::String v58;
  Swift::String v59;
  Swift::String v60;
  Swift::String v61;
  Swift::String v62;
  Swift::String v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t result;
  Swift::String v69;
  Swift::String v70;
  Swift::String v71;
  Swift::String v72;
  uint64_t v73;
  uint64_t v74;
  NSObject *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  os_log_type_t v79;
  uint64_t *v80;
  uint8_t *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  _QWORD *v92;
  uint64_t v93[3];

  v1 = v0[39];
  v86 = (uint64_t *)v0[40];
  v89 = v1;
  v2 = sub_100063D3C(&qword_100347F08);
  inited = swift_initStackObject(v2, v0 + 2);
  *(_OWORD *)(inited + 16) = xmmword_1002892A0;
  *(_QWORD *)(inited + 32) = 0xD000000000000017;
  *(_QWORD *)(inited + 40) = 0x80000001002BDFD0;
  v4 = (uint64_t *)(v1 + *(int *)(type metadata accessor for SEKeySyncRecovery.RecoveryRecord(0) + 32));
  sub_1001BD2CC(v4[6], v4[7]);
  v6 = v5;
  v0[27] = v5;
  v7 = sub_100063D3C((uint64_t *)&unk_100346060);
  v8 = sub_10006B86C();
  v9 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v7, v8);
  v11 = v10;
  swift_bridgeObjectRelease(v6);
  *(_QWORD *)(inited + 48) = v9;
  *(_QWORD *)(inited + 56) = v11;
  *(_QWORD *)(inited + 64) = 0xD000000000000013;
  *(_QWORD *)(inited + 72) = 0x80000001002BDFF0;
  sub_1001BD2CC(v4[4], v4[5]);
  v13 = v12;
  v0[29] = v12;
  v14 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v7, v8);
  v16 = v15;
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(inited + 80) = v14;
  *(_QWORD *)(inited + 88) = v16;
  *(_QWORD *)(inited + 96) = 0xD000000000000015;
  *(_QWORD *)(inited + 104) = 0x80000001002BE010;
  sub_1001BD2CC(v86[6], v86[7]);
  v18 = v17;
  v92 = v0;
  v0[31] = v17;
  v19 = v0 + 31;
  v88 = v0 + 36;
  v20 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v7, v8);
  v22 = v21;
  swift_bridgeObjectRelease(v18);
  *(_QWORD *)(inited + 112) = v20;
  *(_QWORD *)(inited + 120) = v22;
  *(_QWORD *)(inited + 128) = 0xD000000000000011;
  *(_QWORD *)(inited + 136) = 0x80000001002BE030;
  v23 = v19;
  sub_1001BD2CC(v86[2], v86[3]);
  v25 = v24;
  v19[2] = v24;
  v26 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v7, v8);
  v28 = v27;
  swift_bridgeObjectRelease(v25);
  *(_QWORD *)(inited + 144) = v26;
  *(_QWORD *)(inited + 152) = v28;
  strcpy((char *)(inited + 160), "EncryptedBlob");
  *(_WORD *)(inited + 174) = -4864;
  sub_1001BD2CC(*(_QWORD *)(v89 + 48), *(_QWORD *)(v89 + 56));
  v30 = v29;
  v23[4] = v29;
  v31 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v7, v8);
  v33 = v32;
  swift_bridgeObjectRelease(v30);
  *(_QWORD *)(inited + 176) = v31;
  *(_QWORD *)(inited + 184) = v33;
  v34 = sub_10017CA18(inited);
  v35 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
  v36 = JSONEncoder.init()();
  v23[5] = v34;
  v37 = sub_100063D3C(&qword_100347F10);
  v38 = sub_10015BFEC();
  v39 = dispatch thunk of JSONEncoder.encode<A>(_:)(v88, v37, v38);
  v41 = v40;
  v23[14] = v39;
  v23[15] = v40;
  swift_release(v36);
  swift_bridgeObjectRelease(v34);
  v90 = v92[41];
  LOBYTE(v88) = *((_BYTE *)v92 + 426);
  v87 = (uint64_t *)v92[39];
  sub_100063C8C(v39, v41);
  v42 = sub_10014D5A8(0x54746375646F7250, 0xEB00000000657079, 0x2C31656E6F685069, 0xE900000000000031);
  v44 = v43;
  v84 = sub_10014D5A8(0x4E746375646F7250, 0xEB00000000656D61, 0x4F20656E6F685069, 0xE900000000000053);
  v46 = v45;
  v85 = sub_10014D5A8(0x56746375646F7250, 0xEE006E6F69737265, 3157553, 0xE300000000000000);
  v48 = v47;
  v49 = sub_10014D5A8(0x726556646C697542, 0xEC0000006E6F6973, 3227953, 0xE300000000000000);
  v51 = v50;
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease(0xE000000000000000);
  v93[0] = 60;
  v93[1] = 0xE100000000000000;
  v52._countAndFlagsBits = v42;
  v52._object = v44;
  String.append(_:)(v52);
  swift_bridgeObjectRelease(v44);
  v53._countAndFlagsBits = 3940414;
  v53._object = (void *)0xE300000000000000;
  String.append(_:)(v53);
  v54._countAndFlagsBits = v84;
  v54._object = v46;
  String.append(_:)(v54);
  swift_bridgeObjectRelease(v46);
  v55._countAndFlagsBits = 59;
  v55._object = (void *)0xE100000000000000;
  String.append(_:)(v55);
  v56._countAndFlagsBits = v85;
  v56._object = v48;
  String.append(_:)(v56);
  swift_bridgeObjectRelease(v48);
  v57._countAndFlagsBits = 59;
  v57._object = (void *)0xE100000000000000;
  String.append(_:)(v57);
  v58._countAndFlagsBits = v49;
  v58._object = v51;
  String.append(_:)(v58);
  swift_bridgeObjectRelease(v51);
  v59._countAndFlagsBits = 3940414;
  v59._object = (void *)0xE300000000000000;
  String.append(_:)(v59);
  v60._countAndFlagsBits = 0xD000000000000022;
  v60._object = (void *)0x80000001002BE050;
  String.append(_:)(v60);
  v61._countAndFlagsBits = 10272;
  v61._object = (void *)0xE200000000000000;
  String.append(_:)(v61);
  v62._countAndFlagsBits = 0xD000000000000022;
  v62._object = (void *)0x80000001002BE050;
  String.append(_:)(v62);
  v63._countAndFlagsBits = 15913;
  v63._object = (void *)0xE200000000000000;
  String.append(_:)(v63);
  v64 = sub_100159E28((char)v88, *v87, v87[1]);
  v66 = v65;
  URL.init(string:)();
  v67 = type metadata accessor for URL(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 48))(v90, 1, v67);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    URLRequest.init(url:cachePolicy:timeoutInterval:)(v92[41], 0, 60.0);
    URLRequest.httpMethod.setter(1414745936, 0xE400000000000000);
    URLRequest.httpBody.setter(v39, v41);
    v69._object = (void *)0x80000001002BE080;
    v70._countAndFlagsBits = 60;
    v70._object = (void *)0xE100000000000000;
    v69._countAndFlagsBits = 0xD000000000000013;
    URLRequest.addValue(_:forHTTPHeaderField:)(v70, v69);
    swift_bridgeObjectRelease(0xE100000000000000);
    v71._countAndFlagsBits = 0xD00000000000001FLL;
    v71._object = (void *)0x80000001002BE0A0;
    v72._countAndFlagsBits = 0x2D746E65746E6F43;
    v72._object = (void *)0xEC00000065707954;
    URLRequest.addValue(_:forHTTPHeaderField:)(v71, v72);
    if (qword_100344638 != -1)
      swift_once(&qword_100344638, sub_100157A08);
    v73 = type metadata accessor for Logger(0);
    v92[47] = sub_10009673C(v73, (uint64_t)qword_100354CF8);
    swift_bridgeObjectRetain(v66);
    v75 = Logger.logObject.getter(v74);
    v79 = static os_log_type_t.info.getter(v75, v76, v77, v78);
    if (os_log_type_enabled(v75, v79))
    {
      v80 = v23 + 7;
      v81 = (uint8_t *)swift_slowAlloc(12, -1);
      v82 = swift_slowAlloc(32, -1);
      v93[0] = v82;
      *(_DWORD *)v81 = 136315138;
      swift_bridgeObjectRetain(v66);
      *v80 = sub_1001C56EC(v64, v66, v93);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v80, v92 + 39, v81 + 4, v81 + 12);
      swift_bridgeObjectRelease_n(v66, 3);
      _os_log_impl((void *)&_mh_execute_header, v75, v79, "Making recovery request to URL %s", v81, 0xCu);
      swift_arrayDestroy(v82, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v82, -1, -1);
      swift_slowDealloc(v81, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v66, 2);
    }

    if (qword_100344640 != -1)
      swift_once(&qword_100344640, sub_100157A7C);
    v91 = (char *)&dword_100347F20 + dword_100347F20;
    v83 = (_QWORD *)swift_task_alloc(unk_100347F24);
    v92[48] = v83;
    *v83 = v92;
    v83[1] = sub_10015BAE0;
    return ((uint64_t (*)(_QWORD, uint64_t))v91)(v92[44], 1);
  }
  return result;
}

uint64_t sub_10015BAE0(uint64_t a1, uint64_t a2, __int16 a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *v3;
  v5 = *(_QWORD *)(*v3 + 384);
  *(_QWORD *)(v4 + 392) = a1;
  *(_QWORD *)(v4 + 400) = a2;
  *(_WORD *)(v4 + 424) = a3;
  swift_task_dealloc(v5);
  return swift_task_switch(sub_10015BB40, 0, 0);
}

uint64_t sub_10015BB40()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  os_log_type_t v9;
  _BOOL4 v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = *(_WORD *)(v0 + 424);
  v2 = *(_QWORD *)(v0 + 392);
  v3 = *(_QWORD *)(v0 + 400);
  if ((v1 & 0x100) != 0)
  {
    sub_1000F71F4(*(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 400), *(_WORD *)(v0 + 424));
    sub_1000F71F4(v2, v3, v1);
    v6 = sub_1000F71F4(v2, v3, v1);
    v7 = Logger.logObject.getter(v6);
    v9 = static os_log_type_t.error.getter(v7, v8);
    v10 = os_log_type_enabled(v7, v9);
    v11 = *(_WORD *)(v0 + 424);
    v13 = *(_QWORD *)(v0 + 392);
    v12 = *(_QWORD *)(v0 + 400);
    if (v10)
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v29 = swift_slowAlloc(32, -1);
      v31 = v29;
      *(_DWORD *)v14 = 136315138;
      sub_1000F1F24(v13, v12, v11);
      v16 = v15;
      *(_QWORD *)(v0 + 296) = sub_1001C56EC(v17, v15, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 296, v0 + 304, v14 + 4, v14 + 12);
      swift_bridgeObjectRelease(v16);
      sub_10015C048(v13, v12, v11, 1);
      sub_10015C048(v13, v12, v11, 1);
      _os_log_impl((void *)&_mh_execute_header, v7, v9, "Recovery task failed : %s", v14, 0xCu);
      swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v14, -1, -1);
    }
    else
    {
      sub_10015C048(*(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 400), *(_WORD *)(v0 + 424), 1);
      sub_10015C048(v13, v12, v11, 1);
    }

    v18 = *(_QWORD *)(v0 + 392);
    v19 = *(void **)(v0 + 400);
    v21 = *(_QWORD *)(v0 + 360);
    v20 = *(_QWORD *)(v0 + 368);
    v22 = *(_QWORD *)(v0 + 344);
    v30 = *(_QWORD *)(v0 + 352);
    v23 = *(_QWORD *)(v0 + 336);
    v24 = *(_BYTE *)(v0 + 424);
    sub_10015A100(v18, v19, v24);
    v25 = sub_10012443C();
    v26 = swift_allocError(&type metadata for KeySyncEvent, v25, 0, 0);
    *v27 = 18;
    swift_willThrow(v26);
    sub_100063CD0(v21, v20);
    sub_10015C048(v18, (uint64_t)v19, v24, 1);
    sub_10015C048(v18, (uint64_t)v19, v24, 1);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v30, v23);
    v28 = *(_QWORD *)(v0 + 328);
    swift_task_dealloc(*(_QWORD *)(v0 + 352));
    swift_task_dealloc(v28);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    sub_100063C8C(*(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 400));
    v4 = swift_task_alloc(dword_100347F2C);
    *(_QWORD *)(v0 + 408) = v4;
    *(_QWORD *)v4 = v0;
    *(_QWORD *)(v4 + 8) = sub_10015BE44;
    *(_OWORD *)(v4 + 304) = *(_OWORD *)(v0 + 392);
    return swift_task_switch(sub_10015A348, 0, 0);
  }
}

uint64_t sub_10015BE44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 408);
  *(_QWORD *)(*(_QWORD *)v1 + 416) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10015BF4C;
  else
    v3 = sub_10015BEA8;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10015BEA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v1 = *(_QWORD *)(v0 + 392);
  v2 = *(_QWORD *)(v0 + 400);
  v4 = *(_QWORD *)(v0 + 344);
  v3 = *(_QWORD *)(v0 + 352);
  v6 = *(_QWORD *)(v0 + 328);
  v5 = *(_QWORD *)(v0 + 336);
  v7 = *(_BYTE *)(v0 + 424);
  sub_100063CD0(*(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 368));
  sub_10015C048(v1, v2, v7, 0);
  sub_10015C048(v1, v2, v7, 0);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_task_dealloc(v3);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10015BF4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 392);
  v2 = *(_QWORD *)(v0 + 400);
  v4 = *(_QWORD *)(v0 + 344);
  v3 = *(_QWORD *)(v0 + 352);
  v5 = *(_QWORD *)(v0 + 336);
  v6 = *(_BYTE *)(v0 + 424);
  sub_100063CD0(*(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 368));
  sub_10015C048(v1, v2, v6, 0);
  sub_10015C048(v1, v2, v6, 0);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  v7 = *(_QWORD *)(v0 + 328);
  swift_task_dealloc(*(_QWORD *)(v0 + 352));
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_10015BFEC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100347F18;
  if (!qword_100347F18)
  {
    v1 = sub_100063DC8(&qword_100347F10);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_100347F18);
  }
  return result;
}

uint64_t sub_10015C048(uint64_t result, uint64_t a2, char a3, char a4)
{
  if ((a4 & 1) != 0)
    return sub_1000F23E8(result, a2, a3);
  else
    return sub_100063CD0(result, a2);
}

_QWORD *sub_10015C054(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v3 = a1[3];
  swift_bridgeObjectRetain(a1[5]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  return a1;
}

_QWORD *sub_10015C09C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v3 = a1[5];
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t *sub_10015C0E4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  int *v35;
  uint64_t v36;
  unsigned int (*v37)(_QWORD *, uint64_t, int *);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  void (*v43)(char *, char *, uint64_t, __n128);
  __n128 v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  void (*v61)(_QWORD *, _QWORD, uint64_t, int *, __n128);
  __n128 v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  void (*v72)(char *, char *, uint64_t, __n128);
  __n128 v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  void (*v90)(_QWORD *, _QWORD, uint64_t, int *, __n128);
  __n128 v91;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v31 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v31 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v31);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a2[4];
    v10 = a2[5];
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    sub_100063C8C(v9, v10);
    a1[4] = v9;
    a1[5] = v10;
    v11 = a2[6];
    v12 = a2[7];
    sub_100063C8C(v11, v12);
    a1[6] = v11;
    a1[7] = v12;
    v13 = *(int *)(a3 + 32);
    v14 = (uint64_t *)((char *)a1 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    v16 = *(uint64_t *)((char *)a2 + v13);
    v17 = *(uint64_t *)((char *)a2 + v13 + 8);
    sub_100063C8C(v16, v17);
    *v14 = v16;
    v14[1] = v17;
    v18 = v15[2];
    v19 = v15[3];
    sub_100063C8C(v18, v19);
    v14[2] = v18;
    v14[3] = v19;
    v20 = v15[4];
    v21 = v15[5];
    sub_100063C8C(v20, v21);
    v14[4] = v20;
    v14[5] = v21;
    v22 = v15[6];
    v23 = v15[7];
    sub_100063C8C(v22, v23);
    v14[6] = v22;
    v14[7] = v23;
    v24 = type metadata accessor for SESPeerIdentityData(0);
    v25 = *(int *)(v24 + 32);
    v26 = (char *)v14 + v25;
    v27 = (char *)v15 + v25;
    v28 = type metadata accessor for Date(0);
    v29 = *(_QWORD *)(v28 - 8);
    v94 = v29;
    v95 = v28;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    {
      v30 = sub_100063D3C(&qword_100346C00);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v26, v27, v28);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    }
    v32 = *(int *)(v24 + 36);
    v33 = (uint64_t *)((char *)v14 + v32);
    v34 = (_QWORD *)((char *)v15 + v32);
    v35 = (int *)type metadata accessor for CreationMetadata(0);
    v36 = *((_QWORD *)v35 - 1);
    v37 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v36 + 48);
    if (v37(v34, 1, v35))
    {
      v38 = sub_100063D3C(&qword_100347800);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    }
    else
    {
      v39 = v34[1];
      *v33 = *v34;
      v33[1] = v39;
      v40 = v35[5];
      v41 = (char *)v33 + v40;
      v42 = (char *)v34 + v40;
      v93 = v36;
      v43 = *(void (**)(char *, char *, uint64_t, __n128))(v94 + 16);
      v44 = swift_bridgeObjectRetain(v39);
      v43(v41, v42, v95, v44);
      v45 = v35[6];
      v46 = (_QWORD *)((char *)v33 + v45);
      v47 = (_QWORD *)((char *)v34 + v45);
      v48 = v47[1];
      *v46 = *v47;
      v46[1] = v48;
      v49 = v35[7];
      v50 = (_QWORD *)((char *)v33 + v49);
      v51 = (_QWORD *)((char *)v34 + v49);
      v52 = v51[1];
      *v50 = *v51;
      v50[1] = v52;
      v53 = v35[8];
      v54 = (_QWORD *)((char *)v33 + v53);
      v55 = (_QWORD *)((char *)v34 + v53);
      v56 = v55[1];
      *v54 = *v55;
      v54[1] = v56;
      v57 = v35[9];
      v58 = (_QWORD *)((char *)v33 + v57);
      v59 = (_QWORD *)((char *)v34 + v57);
      v60 = v59[1];
      *v58 = *v59;
      v58[1] = v60;
      v61 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *, __n128))(v93 + 56);
      swift_bridgeObjectRetain(v48);
      swift_bridgeObjectRetain(v52);
      swift_bridgeObjectRetain(v56);
      v62 = swift_bridgeObjectRetain(v60);
      v61(v33, 0, 1, v35, v62);
      v36 = v93;
    }
    v63 = *(int *)(a3 + 36);
    v64 = (uint64_t *)((char *)a1 + v63);
    v65 = (uint64_t *)((char *)a2 + v63);
    if (v37(v65, 1, v35))
    {
      v66 = sub_100063D3C(&qword_100347800);
      memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
    }
    else
    {
      v67 = v65[1];
      *v64 = *v65;
      v64[1] = v67;
      v68 = v35[5];
      v69 = (char *)v64 + v68;
      v70 = (char *)v65 + v68;
      v71 = v36;
      v72 = *(void (**)(char *, char *, uint64_t, __n128))(v94 + 16);
      v73 = swift_bridgeObjectRetain(v67);
      v72(v69, v70, v95, v73);
      v74 = v35[6];
      v75 = (_QWORD *)((char *)v64 + v74);
      v76 = (_QWORD *)((char *)v65 + v74);
      v77 = v76[1];
      *v75 = *v76;
      v75[1] = v77;
      v78 = v35[7];
      v79 = (_QWORD *)((char *)v64 + v78);
      v80 = (_QWORD *)((char *)v65 + v78);
      v81 = v80[1];
      *v79 = *v80;
      v79[1] = v81;
      v82 = v35[8];
      v83 = (_QWORD *)((char *)v64 + v82);
      v84 = (_QWORD *)((char *)v65 + v82);
      v85 = v84[1];
      *v83 = *v84;
      v83[1] = v85;
      v86 = v35[9];
      v87 = (_QWORD *)((char *)v64 + v86);
      v88 = (_QWORD *)((char *)v65 + v86);
      v89 = v88[1];
      *v87 = *v88;
      v87[1] = v89;
      v90 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *, __n128))(v71 + 56);
      swift_bridgeObjectRetain(v77);
      swift_bridgeObjectRetain(v81);
      swift_bridgeObjectRetain(v85);
      v91 = swift_bridgeObjectRetain(v89);
      v90(v64, 0, 1, v35, v91);
    }
  }
  return a1;
}

uint64_t sub_10015C4A8(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  unsigned int (*v11)(char *, uint64_t, int *);
  char *v12;
  uint64_t result;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  sub_100063CD0(a1[4], a1[5]);
  sub_100063CD0(a1[6], a1[7]);
  v4 = (char *)a1 + *(int *)(a2 + 32);
  sub_100063CD0(*(_QWORD *)v4, *((_QWORD *)v4 + 1));
  sub_100063CD0(*((_QWORD *)v4 + 2), *((_QWORD *)v4 + 3));
  sub_100063CD0(*((_QWORD *)v4 + 4), *((_QWORD *)v4 + 5));
  sub_100063CD0(*((_QWORD *)v4 + 6), *((_QWORD *)v4 + 7));
  v5 = type metadata accessor for SESPeerIdentityData(0);
  v6 = &v4[*(int *)(v5 + 32)];
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  v9 = &v4[*(int *)(v5 + 36)];
  v10 = (int *)type metadata accessor for CreationMetadata(0);
  v11 = *(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v10 - 1) + 48);
  if (!v11(v9, 1, v10))
  {
    swift_bridgeObjectRelease(*((_QWORD *)v9 + 1));
    (*(void (**)(char *, uint64_t))(v8 + 8))(&v9[v10[5]], v7);
    swift_bridgeObjectRelease(*(_QWORD *)&v9[v10[6] + 8]);
    swift_bridgeObjectRelease(*(_QWORD *)&v9[v10[7] + 8]);
    swift_bridgeObjectRelease(*(_QWORD *)&v9[v10[8] + 8]);
    swift_bridgeObjectRelease(*(_QWORD *)&v9[v10[9] + 8]);
  }
  v12 = (char *)a1 + *(int *)(a2 + 36);
  result = ((uint64_t (*)(char *, uint64_t, int *))v11)(v12, 1, v10);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease(*((_QWORD *)v12 + 1));
    (*(void (**)(char *, uint64_t))(v8 + 8))(&v12[v10[5]], v7);
    swift_bridgeObjectRelease(*(_QWORD *)&v12[v10[6] + 8]);
    swift_bridgeObjectRelease(*(_QWORD *)&v12[v10[7] + 8]);
    swift_bridgeObjectRelease(*(_QWORD *)&v12[v10[8] + 8]);
    return swift_bridgeObjectRelease(*(_QWORD *)&v12[v10[9] + 8]);
  }
  return result;
}

_QWORD *sub_10015C68C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  int *v33;
  uint64_t v34;
  unsigned int (*v35)(_QWORD *, uint64_t, int *);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  void (*v41)(char *, char *, uint64_t, __n128);
  __n128 v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  void (*v59)(_QWORD *, _QWORD, uint64_t, int *, __n128);
  uint64_t v60;
  __n128 v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  void (*v71)(char *, char *, uint64_t, __n128);
  __n128 v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  void (*v89)(_QWORD *, _QWORD, uint64_t, int *, __n128);
  __n128 v90;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a2[4];
  v9 = a2[5];
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  sub_100063C8C(v8, v9);
  a1[4] = v8;
  a1[5] = v9;
  v10 = a2[6];
  v11 = a2[7];
  sub_100063C8C(v10, v11);
  a1[6] = v10;
  a1[7] = v11;
  v12 = *(int *)(a3 + 32);
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = *(_QWORD *)((char *)a2 + v12);
  v16 = *(_QWORD *)((char *)a2 + v12 + 8);
  sub_100063C8C(v15, v16);
  *v13 = v15;
  v13[1] = v16;
  v17 = v14[2];
  v18 = v14[3];
  sub_100063C8C(v17, v18);
  v13[2] = v17;
  v13[3] = v18;
  v19 = v14[4];
  v20 = v14[5];
  sub_100063C8C(v19, v20);
  v13[4] = v19;
  v13[5] = v20;
  v21 = v14[6];
  v22 = v14[7];
  sub_100063C8C(v21, v22);
  v13[6] = v21;
  v13[7] = v22;
  v23 = type metadata accessor for SESPeerIdentityData(0);
  v24 = *(int *)(v23 + 32);
  v25 = (char *)v13 + v24;
  v26 = (char *)v14 + v24;
  v27 = type metadata accessor for Date(0);
  v28 = *(_QWORD *)(v27 - 8);
  v94 = v28;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    v29 = sub_100063D3C(&qword_100346C00);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v25, v26, v27);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  v30 = *(int *)(v23 + 36);
  v31 = (uint64_t *)((char *)v13 + v30);
  v32 = (_QWORD *)((char *)v14 + v30);
  v33 = (int *)type metadata accessor for CreationMetadata(0);
  v34 = *((_QWORD *)v33 - 1);
  v35 = *(unsigned int (**)(_QWORD *, uint64_t, int *))(v34 + 48);
  if (v35(v32, 1, v33))
  {
    v36 = sub_100063D3C(&qword_100347800);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  else
  {
    v37 = v32[1];
    *v31 = *v32;
    v31[1] = v37;
    v38 = v33[5];
    v92 = a3;
    v93 = v34;
    v39 = (char *)v31 + v38;
    v40 = (char *)v32 + v38;
    v41 = *(void (**)(char *, char *, uint64_t, __n128))(v94 + 16);
    v42 = swift_bridgeObjectRetain(v37);
    v41(v39, v40, v27, v42);
    v43 = v33[6];
    v44 = (_QWORD *)((char *)v31 + v43);
    v45 = (_QWORD *)((char *)v32 + v43);
    v46 = v45[1];
    *v44 = *v45;
    v44[1] = v46;
    v47 = v33[7];
    v48 = (_QWORD *)((char *)v31 + v47);
    v49 = (_QWORD *)((char *)v32 + v47);
    v50 = v49[1];
    *v48 = *v49;
    v48[1] = v50;
    v51 = v33[8];
    v52 = (_QWORD *)((char *)v31 + v51);
    v53 = (_QWORD *)((char *)v32 + v51);
    v54 = v53[1];
    *v52 = *v53;
    v52[1] = v54;
    v55 = v33[9];
    v56 = (_QWORD *)((char *)v31 + v55);
    v57 = (_QWORD *)((char *)v32 + v55);
    v58 = v57[1];
    *v56 = *v57;
    v56[1] = v58;
    v59 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *, __n128))(v93 + 56);
    swift_bridgeObjectRetain(v46);
    v60 = v50;
    v34 = v93;
    swift_bridgeObjectRetain(v60);
    swift_bridgeObjectRetain(v54);
    v61 = swift_bridgeObjectRetain(v58);
    v59(v31, 0, 1, v33, v61);
    a3 = v92;
  }
  v62 = *(int *)(a3 + 36);
  v63 = (_QWORD *)((char *)a1 + v62);
  v64 = (_QWORD *)((char *)a2 + v62);
  if (v35(v64, 1, v33))
  {
    v65 = sub_100063D3C(&qword_100347800);
    memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
  }
  else
  {
    v66 = v64[1];
    *v63 = *v64;
    v63[1] = v66;
    v67 = v33[5];
    v68 = (char *)v63 + v67;
    v69 = (char *)v64 + v67;
    v70 = v34;
    v71 = *(void (**)(char *, char *, uint64_t, __n128))(v94 + 16);
    v72 = swift_bridgeObjectRetain(v66);
    v71(v68, v69, v27, v72);
    v73 = v33[6];
    v74 = (_QWORD *)((char *)v63 + v73);
    v75 = (_QWORD *)((char *)v64 + v73);
    v76 = v75[1];
    *v74 = *v75;
    v74[1] = v76;
    v77 = v33[7];
    v78 = (_QWORD *)((char *)v63 + v77);
    v79 = (_QWORD *)((char *)v64 + v77);
    v80 = v79[1];
    *v78 = *v79;
    v78[1] = v80;
    v81 = v33[8];
    v82 = (_QWORD *)((char *)v63 + v81);
    v83 = (_QWORD *)((char *)v64 + v81);
    v84 = v83[1];
    *v82 = *v83;
    v82[1] = v84;
    v85 = v33[9];
    v86 = (_QWORD *)((char *)v63 + v85);
    v87 = (_QWORD *)((char *)v64 + v85);
    v88 = v87[1];
    *v86 = *v87;
    v86[1] = v88;
    v89 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *, __n128))(v70 + 56);
    swift_bridgeObjectRetain(v76);
    swift_bridgeObjectRetain(v80);
    swift_bridgeObjectRetain(v84);
    v90 = swift_bridgeObjectRetain(v88);
    v89(v63, 0, 1, v33, v90);
  }
  return a1;
}

char *sub_10015CA28(char *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t (*v42)(char *, uint64_t, uint64_t);
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  int *v49;
  uint64_t (*v50)(char *, uint64_t, int *);
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  void (*v57)(char *, char *, uint64_t, __n128);
  __n128 v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  void (*v75)(char *, _QWORD, uint64_t, int *, __n128);
  __n128 v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  void (*v87)(char *, char *, uint64_t, __n128);
  __n128 v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  void (*v105)(char *, _QWORD, uint64_t, int *, __n128);
  __n128 v106;
  uint64_t v107;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;

  *(_QWORD *)a1 = *a2;
  v6 = a2[1];
  v7 = *((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *((_QWORD *)a1 + 2) = a2[2];
  v8 = a2[3];
  v9 = *((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 3) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a2[4];
  v11 = a2[5];
  sub_100063C8C(v10, v11);
  v12 = *((_QWORD *)a1 + 4);
  v13 = *((_QWORD *)a1 + 5);
  *((_QWORD *)a1 + 4) = v10;
  *((_QWORD *)a1 + 5) = v11;
  sub_100063CD0(v12, v13);
  v14 = a2[6];
  v15 = a2[7];
  sub_100063C8C(v14, v15);
  v16 = *((_QWORD *)a1 + 6);
  v17 = *((_QWORD *)a1 + 7);
  *((_QWORD *)a1 + 6) = v14;
  *((_QWORD *)a1 + 7) = v15;
  sub_100063CD0(v16, v17);
  v154 = a3;
  v18 = *(int *)(a3 + 32);
  v19 = (uint64_t *)&a1[v18];
  v20 = (_QWORD *)((char *)a2 + v18);
  v21 = *(_QWORD *)((char *)a2 + v18);
  v22 = *(_QWORD *)((char *)a2 + v18 + 8);
  sub_100063C8C(v21, v22);
  v23 = *v19;
  v24 = v19[1];
  *v19 = v21;
  v19[1] = v22;
  sub_100063CD0(v23, v24);
  v25 = v20[2];
  v26 = v20[3];
  sub_100063C8C(v25, v26);
  v27 = v19[2];
  v28 = v19[3];
  v19[2] = v25;
  v19[3] = v26;
  sub_100063CD0(v27, v28);
  v29 = v20[4];
  v30 = v20[5];
  sub_100063C8C(v29, v30);
  v31 = v19[4];
  v32 = v19[5];
  v19[4] = v29;
  v19[5] = v30;
  sub_100063CD0(v31, v32);
  v33 = v20[6];
  v34 = v20[7];
  sub_100063C8C(v33, v34);
  v35 = v19[6];
  v36 = v19[7];
  v19[6] = v33;
  v19[7] = v34;
  sub_100063CD0(v35, v36);
  v37 = type metadata accessor for SESPeerIdentityData(0);
  v38 = *(int *)(v37 + 32);
  v39 = (char *)v19 + v38;
  v40 = (char *)v20 + v38;
  v41 = type metadata accessor for Date(0);
  v155 = *(_QWORD *)(v41 - 8);
  v42 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v155 + 48);
  v43 = v42(v39, 1, v41);
  v44 = v42(v40, 1, v41);
  if (v43)
  {
    if (!v44)
    {
      (*(void (**)(char *, char *, uint64_t))(v155 + 16))(v39, v40, v41);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v155 + 56))(v39, 0, 1, v41);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v44)
  {
    (*(void (**)(char *, uint64_t))(v155 + 8))(v39, v41);
LABEL_6:
    v45 = sub_100063D3C(&qword_100346C00);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v155 + 24))(v39, v40, v41);
LABEL_7:
  v46 = *(int *)(v37 + 36);
  v47 = (char *)v19 + v46;
  v48 = (char *)v20 + v46;
  v49 = (int *)type metadata accessor for CreationMetadata(0);
  v153 = *((_QWORD *)v49 - 1);
  v50 = *(uint64_t (**)(char *, uint64_t, int *))(v153 + 48);
  v51 = v50(v47, 1, v49);
  v52 = v50(v48, 1, v49);
  if (v51)
  {
    if (!v52)
    {
      *(_QWORD *)v47 = *(_QWORD *)v48;
      v53 = *((_QWORD *)v48 + 1);
      *((_QWORD *)v47 + 1) = v53;
      v54 = v49[5];
      v55 = &v47[v54];
      v56 = &v48[v54];
      v57 = *(void (**)(char *, char *, uint64_t, __n128))(v155 + 16);
      v58 = swift_bridgeObjectRetain(v53);
      v57(v55, v56, v41, v58);
      v59 = v49[6];
      v60 = &v47[v59];
      v61 = &v48[v59];
      *(_QWORD *)v60 = *(_QWORD *)v61;
      v62 = *((_QWORD *)v61 + 1);
      *((_QWORD *)v60 + 1) = v62;
      v63 = v49[7];
      v64 = &v47[v63];
      v65 = &v48[v63];
      *(_QWORD *)v64 = *(_QWORD *)v65;
      v66 = *((_QWORD *)v65 + 1);
      *((_QWORD *)v64 + 1) = v66;
      v67 = v49[8];
      v68 = &v47[v67];
      v69 = &v48[v67];
      *(_QWORD *)v68 = *(_QWORD *)v69;
      v70 = *((_QWORD *)v69 + 1);
      *((_QWORD *)v68 + 1) = v70;
      v71 = v49[9];
      v72 = &v47[v71];
      v73 = &v48[v71];
      *(_QWORD *)v72 = *(_QWORD *)v73;
      v74 = *((_QWORD *)v73 + 1);
      *((_QWORD *)v72 + 1) = v74;
      v75 = *(void (**)(char *, _QWORD, uint64_t, int *, __n128))(v153 + 56);
      swift_bridgeObjectRetain(v62);
      swift_bridgeObjectRetain(v66);
      swift_bridgeObjectRetain(v70);
      v76 = swift_bridgeObjectRetain(v74);
      v75(v47, 0, 1, v49, v76);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v52)
  {
    sub_1001247E8((uint64_t)v47, type metadata accessor for CreationMetadata);
LABEL_12:
    v77 = sub_100063D3C(&qword_100347800);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
    goto LABEL_13;
  }
  *(_QWORD *)v47 = *(_QWORD *)v48;
  v109 = *((_QWORD *)v48 + 1);
  v110 = *((_QWORD *)v47 + 1);
  *((_QWORD *)v47 + 1) = v109;
  swift_bridgeObjectRetain(v109);
  swift_bridgeObjectRelease(v110);
  (*(void (**)(char *, char *, uint64_t))(v155 + 24))(&v47[v49[5]], &v48[v49[5]], v41);
  v111 = v49[6];
  v112 = &v47[v111];
  v113 = &v48[v111];
  *(_QWORD *)v112 = *(_QWORD *)v113;
  v114 = *((_QWORD *)v113 + 1);
  v115 = *((_QWORD *)v112 + 1);
  *((_QWORD *)v112 + 1) = v114;
  swift_bridgeObjectRetain(v114);
  swift_bridgeObjectRelease(v115);
  v116 = v49[7];
  v117 = &v47[v116];
  v118 = &v48[v116];
  *(_QWORD *)v117 = *(_QWORD *)v118;
  v119 = *((_QWORD *)v118 + 1);
  v120 = *((_QWORD *)v117 + 1);
  *((_QWORD *)v117 + 1) = v119;
  swift_bridgeObjectRetain(v119);
  swift_bridgeObjectRelease(v120);
  v121 = v49[8];
  v122 = &v47[v121];
  v123 = &v48[v121];
  *(_QWORD *)v122 = *(_QWORD *)v123;
  v124 = *((_QWORD *)v123 + 1);
  v125 = *((_QWORD *)v122 + 1);
  *((_QWORD *)v122 + 1) = v124;
  swift_bridgeObjectRetain(v124);
  swift_bridgeObjectRelease(v125);
  v126 = v49[9];
  v127 = &v47[v126];
  v128 = &v48[v126];
  *(_QWORD *)v127 = *(_QWORD *)v128;
  v129 = *((_QWORD *)v128 + 1);
  v130 = *((_QWORD *)v127 + 1);
  *((_QWORD *)v127 + 1) = v129;
  swift_bridgeObjectRetain(v129);
  swift_bridgeObjectRelease(v130);
LABEL_13:
  v78 = *(int *)(v154 + 36);
  v79 = &a1[v78];
  v80 = (char *)a2 + v78;
  v81 = v50(&a1[v78], 1, v49);
  v82 = v50(v80, 1, v49);
  if (!v81)
  {
    if (!v82)
    {
      *(_QWORD *)v79 = *(_QWORD *)v80;
      v131 = *((_QWORD *)v80 + 1);
      v132 = *((_QWORD *)v79 + 1);
      *((_QWORD *)v79 + 1) = v131;
      swift_bridgeObjectRetain(v131);
      swift_bridgeObjectRelease(v132);
      (*(void (**)(char *, char *, uint64_t))(v155 + 24))(&v79[v49[5]], &v80[v49[5]], v41);
      v133 = v49[6];
      v134 = &v79[v133];
      v135 = &v80[v133];
      *(_QWORD *)v134 = *(_QWORD *)v135;
      v136 = *((_QWORD *)v135 + 1);
      v137 = *((_QWORD *)v134 + 1);
      *((_QWORD *)v134 + 1) = v136;
      swift_bridgeObjectRetain(v136);
      swift_bridgeObjectRelease(v137);
      v138 = v49[7];
      v139 = &v79[v138];
      v140 = &v80[v138];
      *(_QWORD *)v139 = *(_QWORD *)v140;
      v141 = *((_QWORD *)v140 + 1);
      v142 = *((_QWORD *)v139 + 1);
      *((_QWORD *)v139 + 1) = v141;
      swift_bridgeObjectRetain(v141);
      swift_bridgeObjectRelease(v142);
      v143 = v49[8];
      v144 = &v79[v143];
      v145 = &v80[v143];
      *(_QWORD *)v144 = *(_QWORD *)v145;
      v146 = *((_QWORD *)v145 + 1);
      v147 = *((_QWORD *)v144 + 1);
      *((_QWORD *)v144 + 1) = v146;
      swift_bridgeObjectRetain(v146);
      swift_bridgeObjectRelease(v147);
      v148 = v49[9];
      v149 = &v79[v148];
      v150 = &v80[v148];
      *(_QWORD *)v149 = *(_QWORD *)v150;
      v151 = *((_QWORD *)v150 + 1);
      v152 = *((_QWORD *)v149 + 1);
      *((_QWORD *)v149 + 1) = v151;
      swift_bridgeObjectRetain(v151);
      swift_bridgeObjectRelease(v152);
      return a1;
    }
    sub_1001247E8((uint64_t)v79, type metadata accessor for CreationMetadata);
    goto LABEL_18;
  }
  if (v82)
  {
LABEL_18:
    v107 = sub_100063D3C(&qword_100347800);
    memcpy(v79, v80, *(_QWORD *)(*(_QWORD *)(v107 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v79 = *(_QWORD *)v80;
  v83 = *((_QWORD *)v80 + 1);
  *((_QWORD *)v79 + 1) = v83;
  v84 = v49[5];
  v85 = &v79[v84];
  v86 = &v80[v84];
  v87 = *(void (**)(char *, char *, uint64_t, __n128))(v155 + 16);
  v88 = swift_bridgeObjectRetain(v83);
  v87(v85, v86, v41, v88);
  v89 = v49[6];
  v90 = &v79[v89];
  v91 = &v80[v89];
  *(_QWORD *)v90 = *(_QWORD *)v91;
  v92 = *((_QWORD *)v91 + 1);
  *((_QWORD *)v90 + 1) = v92;
  v93 = v49[7];
  v94 = &v79[v93];
  v95 = &v80[v93];
  *(_QWORD *)v94 = *(_QWORD *)v95;
  v96 = *((_QWORD *)v95 + 1);
  *((_QWORD *)v94 + 1) = v96;
  v97 = v49[8];
  v98 = &v79[v97];
  v99 = &v80[v97];
  *(_QWORD *)v98 = *(_QWORD *)v99;
  v100 = *((_QWORD *)v99 + 1);
  *((_QWORD *)v98 + 1) = v100;
  v101 = v49[9];
  v102 = &v79[v101];
  v103 = &v80[v101];
  *(_QWORD *)v102 = *(_QWORD *)v103;
  v104 = *((_QWORD *)v103 + 1);
  *((_QWORD *)v102 + 1) = v104;
  v105 = *(void (**)(char *, _QWORD, uint64_t, int *, __n128))(v153 + 56);
  swift_bridgeObjectRetain(v92);
  swift_bridgeObjectRetain(v96);
  swift_bridgeObjectRetain(v100);
  v106 = swift_bridgeObjectRetain(v104);
  v105(v79, 0, 1, v49, v106);
  return a1;
}

_OWORD *sub_10015D0F0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _OWORD *v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  int *v23;
  uint64_t v24;
  unsigned int (*v25)(char *, uint64_t, int *);
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  _OWORD *v29;
  uint64_t v30;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = *(int *)(a3 + 32);
  v9 = (_OWORD *)((char *)a1 + v8);
  v10 = (char *)a2 + v8;
  v11 = *(_OWORD *)((char *)a2 + v8 + 16);
  *v9 = *(_OWORD *)((char *)a2 + v8);
  v9[1] = v11;
  v12 = *(_OWORD *)((char *)a2 + v8 + 48);
  v9[2] = *(_OWORD *)((char *)a2 + v8 + 32);
  v9[3] = v12;
  v13 = type metadata accessor for SESPeerIdentityData(0);
  v14 = *(int *)(v13 + 32);
  v15 = (char *)v9 + v14;
  v16 = &v10[v14];
  v17 = type metadata accessor for Date(0);
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    v19 = sub_100063D3C(&qword_100346C00);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  v20 = *(int *)(v13 + 36);
  v21 = (_OWORD *)((char *)v9 + v20);
  v22 = &v10[v20];
  v23 = (int *)type metadata accessor for CreationMetadata(0);
  v24 = *((_QWORD *)v23 - 1);
  v25 = *(unsigned int (**)(char *, uint64_t, int *))(v24 + 48);
  if (v25(v22, 1, v23))
  {
    v26 = sub_100063D3C(&qword_100347800);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    *v21 = *(_OWORD *)v22;
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))((char *)v21 + v23[5], &v22[v23[5]], v17);
    *(_OWORD *)((char *)v21 + v23[6]) = *(_OWORD *)&v22[v23[6]];
    *(_OWORD *)((char *)v21 + v23[7]) = *(_OWORD *)&v22[v23[7]];
    *(_OWORD *)((char *)v21 + v23[8]) = *(_OWORD *)&v22[v23[8]];
    *(_OWORD *)((char *)v21 + v23[9]) = *(_OWORD *)&v22[v23[9]];
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v24 + 56))(v21, 0, 1, v23);
  }
  v27 = *(int *)(a3 + 36);
  v28 = (_OWORD *)((char *)a1 + v27);
  v29 = (_OWORD *)((char *)a2 + v27);
  if (v25((char *)v29, 1, v23))
  {
    v30 = sub_100063D3C(&qword_100347800);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    *v28 = *v29;
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))((char *)v28 + v23[5], (char *)v29 + v23[5], v17);
    *(_OWORD *)((char *)v28 + v23[6]) = *(_OWORD *)((char *)v29 + v23[6]);
    *(_OWORD *)((char *)v28 + v23[7]) = *(_OWORD *)((char *)v29 + v23[7]);
    *(_OWORD *)((char *)v28 + v23[8]) = *(_OWORD *)((char *)v29 + v23[8]);
    *(_OWORD *)((char *)v28 + v23[9]) = *(_OWORD *)((char *)v29 + v23[9]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v24 + 56))(v28, 0, 1, v23);
  }
  return a1;
}

_QWORD *sub_10015D360(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(char *, uint64_t, uint64_t);
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  int *v40;
  uint64_t v41;
  uint64_t (*v42)(char *, uint64_t, int *);
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = a1[1];
  *a1 = *(_QWORD *)a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = a1[3];
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = a1[4];
  v11 = a1[5];
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  sub_100063CD0(v10, v11);
  v12 = a1[6];
  v13 = a1[7];
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
  sub_100063CD0(v12, v13);
  v107 = a2;
  v108 = a3;
  v14 = *(int *)(a3 + 32);
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (_OWORD *)(a2 + v14);
  v17 = *(_QWORD *)((char *)a1 + v14);
  v18 = *(_QWORD *)((char *)a1 + v14 + 8);
  *(_OWORD *)((char *)a1 + v14) = *(_OWORD *)(a2 + v14);
  sub_100063CD0(v17, v18);
  v19 = v15[2];
  v20 = v15[3];
  *((_OWORD *)v15 + 1) = v16[1];
  sub_100063CD0(v19, v20);
  v21 = v15[4];
  v22 = v15[5];
  *((_OWORD *)v15 + 2) = v16[2];
  sub_100063CD0(v21, v22);
  v23 = v15[6];
  v24 = v15[7];
  *((_OWORD *)v15 + 3) = v16[3];
  sub_100063CD0(v23, v24);
  v106 = type metadata accessor for SESPeerIdentityData(0);
  v25 = *(int *)(v106 + 32);
  v26 = (char *)v15 + v25;
  v27 = (char *)v16 + v25;
  v28 = type metadata accessor for Date(0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48);
  v31 = v30(v26, 1, v28);
  v32 = v28;
  v33 = v30(v27, 1, v28);
  if (v31)
  {
    if (v33)
    {
      v34 = sub_100063D3C(&qword_100346C00);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
      v35 = v29;
    }
    else
    {
      v35 = v29;
      (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v26, v27, v28);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    }
  }
  else
  {
    v35 = v29;
    if (v33)
    {
      (*(void (**)(char *, uint64_t))(v29 + 8))(v26, v28);
      v36 = sub_100063D3C(&qword_100346C00);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 40))(v26, v27, v28);
    }
  }
  v37 = *(int *)(v106 + 36);
  v38 = (char *)v15 + v37;
  v39 = (char *)v16 + v37;
  v40 = (int *)type metadata accessor for CreationMetadata(0);
  v41 = *((_QWORD *)v40 - 1);
  v42 = *(uint64_t (**)(char *, uint64_t, int *))(v41 + 48);
  v43 = v42(v38, 1, v40);
  v44 = v42(v39, 1, v40);
  if (v43)
  {
    if (v44)
    {
      v45 = v41;
LABEL_13:
      v46 = sub_100063D3C(&qword_100347800);
      memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
      goto LABEL_16;
    }
    *(_OWORD *)v38 = *(_OWORD *)v39;
    (*(void (**)(char *, char *, uint64_t))(v35 + 32))(&v38[v40[5]], &v39[v40[5]], v32);
    *(_OWORD *)&v38[v40[6]] = *(_OWORD *)&v39[v40[6]];
    *(_OWORD *)&v38[v40[7]] = *(_OWORD *)&v39[v40[7]];
    *(_OWORD *)&v38[v40[8]] = *(_OWORD *)&v39[v40[8]];
    *(_OWORD *)&v38[v40[9]] = *(_OWORD *)&v39[v40[9]];
    v45 = v41;
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v41 + 56))(v38, 0, 1, v40);
  }
  else
  {
    v45 = v41;
    if (v44)
    {
      sub_1001247E8((uint64_t)v38, type metadata accessor for CreationMetadata);
      goto LABEL_13;
    }
    v47 = *((_QWORD *)v39 + 1);
    v48 = *((_QWORD *)v38 + 1);
    *(_QWORD *)v38 = *(_QWORD *)v39;
    *((_QWORD *)v38 + 1) = v47;
    swift_bridgeObjectRelease(v48);
    (*(void (**)(char *, char *, uint64_t))(v35 + 40))(&v38[v40[5]], &v39[v40[5]], v32);
    v49 = v40[6];
    v50 = &v38[v49];
    v51 = (uint64_t *)&v39[v49];
    v53 = *v51;
    v52 = v51[1];
    v54 = *((_QWORD *)v50 + 1);
    *(_QWORD *)v50 = v53;
    *((_QWORD *)v50 + 1) = v52;
    swift_bridgeObjectRelease(v54);
    v55 = v40[7];
    v56 = &v38[v55];
    v57 = (uint64_t *)&v39[v55];
    v59 = *v57;
    v58 = v57[1];
    v60 = *((_QWORD *)v56 + 1);
    *(_QWORD *)v56 = v59;
    *((_QWORD *)v56 + 1) = v58;
    swift_bridgeObjectRelease(v60);
    v61 = v40[8];
    v62 = &v38[v61];
    v63 = (uint64_t *)&v39[v61];
    v65 = *v63;
    v64 = v63[1];
    v66 = *((_QWORD *)v62 + 1);
    *(_QWORD *)v62 = v65;
    *((_QWORD *)v62 + 1) = v64;
    swift_bridgeObjectRelease(v66);
    v67 = v40[9];
    v68 = &v38[v67];
    v69 = (uint64_t *)&v39[v67];
    v71 = *v69;
    v70 = v69[1];
    v72 = *((_QWORD *)v68 + 1);
    *(_QWORD *)v68 = v71;
    *((_QWORD *)v68 + 1) = v70;
    swift_bridgeObjectRelease(v72);
  }
LABEL_16:
  v73 = *(int *)(v108 + 36);
  v74 = (char *)a1 + v73;
  v75 = (char *)(v107 + v73);
  v76 = v42((char *)a1 + v73, 1, v40);
  v77 = v42(v75, 1, v40);
  if (!v76)
  {
    if (!v77)
    {
      v80 = *((_QWORD *)v75 + 1);
      v81 = *((_QWORD *)v74 + 1);
      *(_QWORD *)v74 = *(_QWORD *)v75;
      *((_QWORD *)v74 + 1) = v80;
      swift_bridgeObjectRelease(v81);
      (*(void (**)(char *, char *, uint64_t))(v35 + 40))(&v74[v40[5]], &v75[v40[5]], v32);
      v82 = v40[6];
      v83 = &v74[v82];
      v84 = &v75[v82];
      v86 = *(_QWORD *)v84;
      v85 = *((_QWORD *)v84 + 1);
      v87 = *((_QWORD *)v83 + 1);
      *(_QWORD *)v83 = v86;
      *((_QWORD *)v83 + 1) = v85;
      swift_bridgeObjectRelease(v87);
      v88 = v40[7];
      v89 = &v74[v88];
      v90 = &v75[v88];
      v92 = *(_QWORD *)v90;
      v91 = *((_QWORD *)v90 + 1);
      v93 = *((_QWORD *)v89 + 1);
      *(_QWORD *)v89 = v92;
      *((_QWORD *)v89 + 1) = v91;
      swift_bridgeObjectRelease(v93);
      v94 = v40[8];
      v95 = &v74[v94];
      v96 = &v75[v94];
      v98 = *(_QWORD *)v96;
      v97 = *((_QWORD *)v96 + 1);
      v99 = *((_QWORD *)v95 + 1);
      *(_QWORD *)v95 = v98;
      *((_QWORD *)v95 + 1) = v97;
      swift_bridgeObjectRelease(v99);
      v100 = v40[9];
      v101 = &v74[v100];
      v102 = &v75[v100];
      v104 = *(_QWORD *)v102;
      v103 = *((_QWORD *)v102 + 1);
      v105 = *((_QWORD *)v101 + 1);
      *(_QWORD *)v101 = v104;
      *((_QWORD *)v101 + 1) = v103;
      swift_bridgeObjectRelease(v105);
      return a1;
    }
    sub_1001247E8((uint64_t)v74, type metadata accessor for CreationMetadata);
    goto LABEL_21;
  }
  if (v77)
  {
LABEL_21:
    v78 = sub_100063D3C(&qword_100347800);
    memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
    return a1;
  }
  *(_OWORD *)v74 = *(_OWORD *)v75;
  (*(void (**)(char *, char *, uint64_t))(v35 + 32))(&v74[v40[5]], &v75[v40[5]], v32);
  *(_OWORD *)&v74[v40[6]] = *(_OWORD *)&v75[v40[6]];
  *(_OWORD *)&v74[v40[7]] = *(_OWORD *)&v75[v40[7]];
  *(_OWORD *)&v74[v40[8]] = *(_OWORD *)&v75[v40[8]];
  *(_OWORD *)&v74[v40[9]] = *(_OWORD *)&v75[v40[9]];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v45 + 56))(v74, 0, 1, v40);
  return a1;
}

uint64_t sub_10015D860(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10015D86C);
}

uint64_t sub_10015D86C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for SESPeerIdentityData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 32);
    }
    else
    {
      v10 = sub_100063D3C(&qword_100347800);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 36);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_10015D910(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10015D91C);
}

uint64_t sub_10015D91C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for SESPeerIdentityData(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 32);
    }
    else
    {
      v10 = sub_100063D3C(&qword_100347800);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 36);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_10015D9BC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[6];

  v6[0] = &unk_10028B468;
  v6[1] = &unk_10028B468;
  v6[2] = &unk_10028B480;
  v6[3] = &unk_10028B480;
  v2 = type metadata accessor for SESPeerIdentityData(319);
  if (v3 <= 0x3F)
  {
    v6[4] = *(_QWORD *)(v2 - 8) + 64;
    sub_10015DA58(319);
    if (v5 <= 0x3F)
    {
      v6[5] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 6, v6, a1 + 16);
    }
  }
}

void sub_10015DA58(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100347870)
  {
    v2 = type metadata accessor for CreationMetadata(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100347870);
  }
}

unint64_t sub_10015DAAC()
{
  unint64_t result;

  result = qword_100347FD8;
  if (!qword_100347FD8)
  {
    result = swift_getWitnessTable(&unk_10028B5C8, &type metadata for SEKeySyncRecovery.RecoveryRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100347FD8);
  }
  return result;
}

uint64_t sub_10015DAF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100063D3C(&qword_100347800);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for SEKeySyncRecovery()
{
  return &type metadata for SEKeySyncRecovery;
}

uint64_t storeEnumTagSinglePayload for SEKeySyncRecovery.RecoveryRecord.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_10015DB94 + 4 * byte_10028B453[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10015DBC8 + 4 * byte_10028B44E[v4]))();
}

uint64_t sub_10015DBC8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10015DBD0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10015DBD8);
  return result;
}

uint64_t sub_10015DBE4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10015DBECLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_10015DBF0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10015DBF8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SEKeySyncRecovery.RecoveryRecord.CodingKeys()
{
  return &type metadata for SEKeySyncRecovery.RecoveryRecord.CodingKeys;
}

unint64_t sub_10015DC18()
{
  unint64_t result;

  result = qword_100347FE8;
  if (!qword_100347FE8)
  {
    result = swift_getWitnessTable(&unk_10028B5A0, &type metadata for SEKeySyncRecovery.RecoveryRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100347FE8);
  }
  return result;
}

unint64_t sub_10015DC60()
{
  unint64_t result;

  result = qword_100347FF0;
  if (!qword_100347FF0)
  {
    result = swift_getWitnessTable(&unk_10028B510, &type metadata for SEKeySyncRecovery.RecoveryRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100347FF0);
  }
  return result;
}

unint64_t sub_10015DCA8()
{
  unint64_t result;

  result = qword_100347FF8;
  if (!qword_100347FF8)
  {
    result = swift_getWitnessTable(&unk_10028B538, &type metadata for SEKeySyncRecovery.RecoveryRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100347FF8);
  }
  return result;
}

uint64_t sub_10015DCEC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 0x6E6F69676572 && a2 == 0xE600000000000000)
  {
    v5 = 0xE600000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F69676572, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x656D614E77656976 && a2 == 0xE800000000000000)
  {
    v7 = 0xE800000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656D614E77656976, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x444955556B6C74 && a2 == 0xE700000000000000)
  {
    v8 = 0xE700000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x444955556B6C74, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x6574707972636E65 && a2 == 0xED00006174614464)
  {
    v9 = 0xED00006174614464;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6574707972636E65, 0xED00006174614464, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x746E656449637273 && a2 == 0xEB00000000797469)
  {
    v10 = 0xEB00000000797469;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746E656449637273, 0xEB00000000797469, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x80000001002BDA80)
  {
    swift_bridgeObjectRelease(0x80000001002BDA80);
    return 5;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001002BDA80, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

void sub_10015DF9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id i;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[5];
  void *v28;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = sub_10006C25C(0, &qword_100348088, PKPaymentApplication_ptr);
    v5 = sub_10016242C();
    v6 = Set.Iterator.init(_cocoa:)(v27, v3, v4, v5);
    v1 = v27[0];
    v25 = v27[1];
    v7 = v27[2];
    v8 = v27[3];
    v9 = v27[4];
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v25 = a1 + 56;
    v7 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v9 = v12 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v8 = 0;
  }
  v24 = v7;
  v13 = (unint64_t)(v7 + 64) >> 6;
  if (v1 < 0)
    goto LABEL_13;
LABEL_11:
  if (v9)
  {
    v14 = (v9 - 1) & v9;
    v15 = __clz(__rbit64(v9)) | (v8 << 6);
    v16 = v8;
    goto LABEL_32;
  }
  v21 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v21 < v13)
    {
      v22 = *(_QWORD *)(v25 + 8 * v21);
      v16 = v8 + 1;
      if (v22)
        goto LABEL_31;
      v16 = v8 + 2;
      if (v8 + 2 >= v13)
        goto LABEL_36;
      v22 = *(_QWORD *)(v25 + 8 * v16);
      if (v22)
        goto LABEL_31;
      v16 = v8 + 3;
      if (v8 + 3 >= v13)
        goto LABEL_36;
      v22 = *(_QWORD *)(v25 + 8 * v16);
      if (v22)
        goto LABEL_31;
      v16 = v8 + 4;
      if (v8 + 4 >= v13)
        goto LABEL_36;
      v22 = *(_QWORD *)(v25 + 8 * v16);
      if (v22)
      {
LABEL_31:
        v14 = (v22 - 1) & v22;
        v15 = __clz(__rbit64(v22)) + (v16 << 6);
LABEL_32:
        for (i = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v15); i; v14 = v9)
        {
          if (objc_msgSend(i, "paymentNetworkIdentifier", v24) == (id)138)
            break;

          v8 = v16;
          v9 = v14;
          if ((v1 & 0x8000000000000000) == 0)
            goto LABEL_11;
LABEL_13:
          v17 = __CocoaSet.Iterator.next()(v6);
          if (!v17)
            break;
          v18 = v17;
          v26 = v17;
          v19 = sub_10006C25C(0, &qword_100348088, PKPaymentApplication_ptr);
          swift_unknownObjectRetain(v18);
          swift_dynamicCast(&v28, &v26, (char *)&type metadata for Swift.AnyObject + 8, v19, 7);
          i = v28;
          swift_unknownObjectRelease(v18);
          v16 = v8;
        }
        goto LABEL_36;
      }
      v16 = v8 + 5;
      if (v8 + 5 < v13)
      {
        v22 = *(_QWORD *)(v25 + 8 * v16);
        if (!v22)
        {
          v23 = v8 + 6;
          while (v13 != v23)
          {
            v22 = *(_QWORD *)(v25 + 8 * v23++);
            if (v22)
            {
              v16 = v23 - 1;
              goto LABEL_31;
            }
          }
          goto LABEL_36;
        }
        goto LABEL_31;
      }
    }
LABEL_36:
    sub_10007EF58(v1);
    return;
  }
  __break(1u);
}

id sub_10015E25C()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for JPKIXPCServer()), "init");
  qword_100354D40 = (uint64_t)result;
  return result;
}

id sub_10015E288()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v24;
  uint64_t v25;
  objc_class *ObjectType;
  objc_super v27;
  _QWORD *v28;

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType(v0);
  v2 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC10seserviced13JPKIXPCServer_listener] = 0;
  v25 = OBJC_IVAR____TtC10seserviced13JPKIXPCServer_queue;
  sub_10006C25C(0, (unint64_t *)&qword_1003461A0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v14, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v10);
  v15 = v1;
  static DispatchQoS.unspecified.getter(v15);
  v28 = _swiftEmptyArrayStorage;
  v16 = sub_1000639EC((unint64_t *)&qword_100346E08, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v17 = sub_100063D3C(&qword_100346E10);
  v18 = sub_100127660((unint64_t *)&qword_100346E18, &qword_100346E10);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v28, v17, v18, v2, v16);
  v19 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000022, 0x80000001002BE300, v9, v5, v14, 0);
  *(_QWORD *)&v1[v25] = v19;
  v20 = &v15[OBJC_IVAR____TtC10seserviced13JPKIXPCServer__debugSkipPassLookup];
  *(_QWORD *)v20 = 0xD000000000000014;
  *((_QWORD *)v20 + 1) = 0x80000001002BA5B0;
  *((_QWORD *)v20 + 2) = 0xD00000000000001FLL;
  *((_QWORD *)v20 + 3) = 0x80000001002BE330;
  *((_WORD *)v20 + 16) = 256;
  v21 = &v15[OBJC_IVAR____TtC10seserviced13JPKIXPCServer__debugSkipAssociatedApplicationCheck];
  *(_QWORD *)v21 = 0xD000000000000014;
  *((_QWORD *)v21 + 1) = 0x80000001002BA5B0;
  *((_QWORD *)v21 + 2) = 0xD000000000000034;
  *((_QWORD *)v21 + 3) = 0x80000001002BE350;
  *((_WORD *)v21 + 16) = 256;
  v22 = &v15[OBJC_IVAR____TtC10seserviced13JPKIXPCServer_serviceName];
  *(_QWORD *)v22 = 0xD000000000000027;
  *((_QWORD *)v22 + 1) = 0x80000001002BE390;

  v27.receiver = v15;
  v27.super_class = ObjectType;
  return objc_msgSendSuper2(&v27, "init");
}

uint64_t sub_10015E55C(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;

  v3 = swift_allocObject(&unk_10030B198, 24, 7);
  *(_QWORD *)(v3 + 16) = a2;
  v4 = a2;
  dispatch thunk of XPCListener.IncomingSessionRequest.accept(incomingMessageHandler:cancellationHandler:)(sub_1001621FC, v3, 0, 0);
  return swift_release(v3);
}

double sub_10015E5C8@<D0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t (*v39)(uint64_t);
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void (*v43)(_QWORD, _QWORD);
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  _BOOL4 v47;
  char *v48;
  uint64_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  os_log_t v55;
  unint64_t v56;
  uint8_t *v57;
  uint64_t v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t, uint64_t);
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  void (*v71)(char *, char *, uint64_t);
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(uint64_t, char *, uint64_t);
  unint64_t v79;
  void *v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  NSString v88;
  _QWORD *v89;
  void *v90;
  _QWORD *v91;
  id v92;
  char *v93;
  void (*v94)(char *, uint64_t);
  _OWORD *v95;
  double result;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint8_t *v101;
  unint64_t v102;
  os_log_t v103;
  void (*v104)(char *, char *, uint64_t);
  void (*v105)(char *, char *, uint64_t);
  uint64_t v106;
  uint64_t v107;
  char *v108;
  void (*v109)(_QWORD, _QWORD);
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  char *v114;
  char *v115;
  char *v116;
  char *v117;
  uint64_t v118;
  void *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t aBlock[5];
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;

  v119 = a2;
  v125 = a3;
  v113 = sub_100063D3C(&qword_100348068);
  __chkstk_darwin(v113, v4);
  v114 = (char *)&v97 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for JPKIInternalTypes.InternalError(0);
  v123 = *(_QWORD *)(v6 - 8);
  v124 = v6;
  v8 = __chkstk_darwin(v6, v7);
  v112 = (char *)&v97 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8, v10);
  v118 = (uint64_t)&v97 - v12;
  __chkstk_darwin(v11, v13);
  v111 = (char *)&v97 - v14;
  v15 = type metadata accessor for XPCReceivedMessage(0);
  v121 = *(_QWORD *)(v15 - 8);
  v122 = v15;
  v16 = *(_QWORD *)(v121 + 64);
  v18 = __chkstk_darwin(v15, v17);
  v120 = (char *)&v97 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v19);
  v117 = (char *)&v97 - v20;
  v21 = type metadata accessor for JPKIXPCRequest(0);
  v116 = *(char **)(v21 - 8);
  v22 = *((_QWORD *)v116 + 8);
  v23 = __chkstk_darwin(v21, &type metadata accessor for JPKIXPCRequest);
  v25 = __chkstk_darwin(v23, v24);
  v27 = (char *)&v97 - v26;
  v29 = __chkstk_darwin(v25, v28);
  v31 = (char *)&v97 - v30;
  v33 = __chkstk_darwin(v29, v32);
  v35 = (char *)&v97 - v34;
  __chkstk_darwin(v33, v36);
  v38 = (char *)&v97 - v37;
  v40 = sub_1000639EC(&qword_100348070, v39, (uint64_t)&protocol conformance descriptor for JPKIXPCRequest);
  XPCReceivedMessage.decode<A>(as:)(v21, v21, v40);
  v109 = (void (*)(_QWORD, _QWORD))v31;
  v107 = v22;
  v108 = v27;
  v106 = v16;
  v110 = a1;
  v115 = (char *)&v97 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = v116;
  v105 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v116 + 4);
  v105(v38, v35, v21);
  if (qword_100344660 != -1)
    swift_once(&qword_100344660, sub_100162014);
  v42 = type metadata accessor for Logger(0);
  sub_10009673C(v42, (uint64_t)qword_100348000);
  v43 = v109;
  v104 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v41 + 2);
  v44 = ((uint64_t (*)(void (*)(_QWORD, _QWORD), char *, uint64_t))v104)(v109, v38, v21);
  v45 = Logger.logObject.getter(v44);
  v46 = static os_log_type_t.default.getter();
  v47 = os_log_type_enabled(v45, v46);
  v48 = v115;
  v49 = v110;
  if (v47)
  {
    v103 = v45;
    v50 = (uint8_t *)swift_slowAlloc(12, -1);
    v102 = swift_slowAlloc(32, -1);
    aBlock[0] = v102;
    *(_DWORD *)v50 = 136315138;
    v101 = v50 + 4;
    v51 = sub_1000639EC(&qword_100348080, (uint64_t (*)(uint64_t))&type metadata accessor for JPKIXPCRequest, (uint64_t)&protocol conformance descriptor for JPKIXPCRequest);
    v52 = dispatch thunk of CustomStringConvertible.description.getter(v21, v51);
    v54 = v53;
    v128 = sub_1001C56EC(v52, v53, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, &v129, v101, v50 + 12);
    swift_bridgeObjectRelease(v54);
    v109 = (void (*)(_QWORD, _QWORD))*((_QWORD *)v41 + 1);
    v109(v43, v21);
    v55 = v103;
    _os_log_impl((void *)&_mh_execute_header, v103, v46, "Decoded request %s", v50, 0xCu);
    v56 = v102;
    swift_arrayDestroy(v102, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v56, -1, -1);
    v57 = v50;
    v48 = v115;
    swift_slowDealloc(v57, -1, -1);

  }
  else
  {
    v109 = (void (*)(_QWORD, _QWORD))*((_QWORD *)v41 + 1);
    v109(v43, v21);

  }
  v58 = v21;
  v59 = v41;
  XPCReceivedMessage.detachHandoff()();
  v103 = (os_log_t)JPKIXPCRequest.passIdentifier.getter();
  v98 = v60;
  v102 = XPCReceivedMessage.auditToken.getter();
  v101 = (uint8_t *)v61;
  v100 = v62;
  v99 = v63;
  v64 = v121;
  v65 = *(void (**)(char *, uint64_t, uint64_t))(v121 + 16);
  v66 = v117;
  v67 = v49;
  v68 = v122;
  v65(v117, v67, v122);
  v69 = v108;
  v116 = v38;
  v70 = v38;
  v71 = v104;
  v104(v108, v70, v58);
  v65(v120, (uint64_t)v66, v68);
  v71(v48, v69, v58);
  v72 = *(unsigned __int8 *)(v64 + 80);
  v73 = (v72 + 16) & ~v72;
  v74 = (v106 + v73 + 7) & 0xFFFFFFFFFFFFFFF8;
  v75 = v59[80];
  v76 = (v75 + v74 + 8) & ~v75;
  v77 = swift_allocObject(&unk_10030B1C0, v76 + v107, v72 | v75 | 7);
  v78 = *(void (**)(uint64_t, char *, uint64_t))(v64 + 32);
  v79 = v98;
  v78(v77 + v73, v66, v68);
  v80 = v119;
  *(_QWORD *)(v77 + v74) = v119;
  v105((char *)(v77 + v76), v69, v58);
  v81 = v80;
  sub_10015FD78((uint64_t)v103, v79, v102, (unint64_t)v101, v100, v99, v118);
  v82 = v58;
  v84 = v83;
  v86 = v85;
  v87 = objc_opt_self(SecureElementManager);
  sub_100063C8C(v84, v86);
  v88 = String._bridgeToObjectiveC()();
  v89 = (_QWORD *)swift_allocObject(&unk_10030B1E8, 56, 7);
  v89[2] = v81;
  v89[3] = sub_1001622CC;
  v89[4] = v77;
  v89[5] = v84;
  v89[6] = v86;
  aBlock[4] = (uint64_t)sub_1001623B8;
  v127 = v89;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100128598;
  aBlock[3] = (uint64_t)&unk_10030B200;
  v90 = _Block_copy(aBlock);
  v91 = v127;
  v92 = v81;
  swift_retain(v77);
  swift_release(v91);
  sub_100051680(v87, v88, v90);
  sub_100063CD0(v84, v86);
  _Block_release(v90);
  swift_release(v77);

  v93 = v115;
  (*(void (**)(char *, uint64_t))(v121 + 8))(v120, v122);

  v94 = (void (*)(char *, uint64_t))v109;
  v109(v93, v82);
  swift_bridgeObjectRelease(v79);
  v94(v116, v82);
  v95 = (_OWORD *)v125;
  *(_QWORD *)(v125 + 32) = 0;
  result = 0.0;
  *v95 = 0u;
  v95[1] = 0u;
  return result;
}

uint64_t sub_10015EFFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  void *v24;
  void *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v31 = a3;
  v33 = a2;
  v4 = type metadata accessor for JPKIXPCRequest.JPKIOperation(0);
  v29 = *(_QWORD *)(v4 - 8);
  v30 = v4;
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for JPKIXPCResponse(0);
  v32 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v9);
  v11 = (uint64_t *)((char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = type metadata accessor for JPKIInternalTypes.InternalError(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100063D3C(&qword_100348068);
  __chkstk_darwin(v17, v18);
  v20 = (void **)((char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100162484(a1, (uint64_t)v20);
  if (swift_getEnumCaseMultiPayload(v20, v17) == 1)
  {
    (*(void (**)(char *, void **, uint64_t))(v13 + 32))(v16, v20, v12);
    (*(void (**)(uint64_t *, char *, uint64_t))(v13 + 16))(v11, v16, v12);
    v21 = v32;
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(v32 + 104))(v11, enum case for JPKIXPCResponse.error(_:), v8);
    v22 = sub_1000639EC(&qword_100348078, (uint64_t (*)(uint64_t))&type metadata accessor for JPKIXPCResponse, (uint64_t)&protocol conformance descriptor for JPKIXPCResponse);
    XPCReceivedMessage.reply<A>(_:)(v11, v8, v22);
    (*(void (**)(uint64_t *, uint64_t))(v21 + 8))(v11, v8);
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  }
  else
  {
    v24 = *v20;
    v25 = v20[1];
    v26 = (unint64_t)v20[2];
    JPKIXPCRequest.operation.getter();
    sub_10015F27C(v24, v25, v26, (uint64_t)v7, v11);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v7, v30);
    v27 = sub_1000639EC(&qword_100348078, (uint64_t (*)(uint64_t))&type metadata accessor for JPKIXPCResponse, (uint64_t)&protocol conformance descriptor for JPKIXPCResponse);
    XPCReceivedMessage.reply<A>(_:)(v11, v8, v27);
    sub_100063CD0((uint64_t)v25, v26);

    return (*(uint64_t (**)(uint64_t *, uint64_t))(v32 + 8))(v11, v8);
  }
}

uint64_t sub_10015F27C@<X0>(void *a1@<X0>, void *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  void (*v56)(uint64_t *, uint64_t, uint64_t);
  int v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, char *, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  void (*v80)(char *, char *, char *);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t DynamicType;
  Swift::String v90;
  void *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  unsigned int *v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  void (*v101)(uint64_t, uint64_t);
  uint64_t v102;
  uint64_t v103;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t *v110;
  unint64_t *v111;
  uint64_t v112;
  Swift::String v113;
  void *object;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t *v136;
  char *v137;
  char *v138;
  void *v139;
  void *v140;
  _QWORD v141[3];
  char v142[16];
  unint64_t v143;
  unint64_t v144;

  v135 = a3;
  v136 = a5;
  v139 = a1;
  v140 = a2;
  v127 = type metadata accessor for JPKIInternalTypes.UserAuthentication(0);
  v126 = *(_QWORD *)(v127 - 8);
  v7 = __chkstk_darwin(v127, v6);
  v129 = (char *)&v119 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v9);
  v125 = (char *)&v119 - v10;
  v134 = type metadata accessor for JPKIInternalTypes.UserAuthenticationInternal(0);
  v11 = *(_QWORD *)(v134 - 8);
  v13 = __chkstk_darwin(v134, v12);
  v124 = (char *)&v119 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v15);
  v138 = (char *)&v119 - v16;
  v17 = type metadata accessor for JPKIInternalTypes.CertificateType(0);
  v18 = *(_QWORD *)(v17 - 8);
  v20 = __chkstk_darwin(v17, v19);
  v123 = (char *)&v119 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v20, v22);
  v128 = (char *)&v119 - v24;
  __chkstk_darwin(v23, v25);
  v137 = (char *)&v119 - v26;
  v27 = type metadata accessor for JPKIInternalTypes.InternalError(0);
  v132 = *(_QWORD *)(v27 - 8);
  v133 = v27;
  v29 = __chkstk_darwin(v27, v28);
  v130 = (char *)&v119 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __chkstk_darwin(v29, v31);
  v131 = (char *)&v119 - v33;
  v35 = __chkstk_darwin(v32, v34);
  v120 = (uint64_t)&v119 - v36;
  v38 = __chkstk_darwin(v35, v37);
  v122 = (uint64_t)&v119 - v39;
  v41 = __chkstk_darwin(v38, v40);
  v43 = (uint64_t *)((char *)&v119 - v42);
  v45 = __chkstk_darwin(v41, v44);
  v47 = (char *)&v119 - v46;
  __chkstk_darwin(v45, v48);
  v50 = (char *)&v119 - v49;
  v51 = type metadata accessor for JPKIXPCRequest.JPKIOperation(0);
  v52 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51, v53);
  v55 = (uint64_t *)((char *)&v119 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0));
  v56 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v52 + 16);
  v121 = a4;
  v56(v55, a4, v51);
  v57 = (*(uint64_t (**)(uint64_t *, uint64_t))(v52 + 88))(v55, v51);
  if (v57 == enum case for JPKIXPCRequest.JPKIOperation.readCertificate(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v52 + 96))(v55, v51);
    v58 = (char *)v55 + *(int *)(sub_100063D3C(&qword_1003480B8) + 48);
    v59 = (uint64_t)v137;
    (*(void (**)(char *, uint64_t *, uint64_t))(v18 + 32))(v137, v55, v17);
    v60 = (uint64_t)v138;
    v61 = v134;
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v138, v58, v134);
    v95 = sub_10014F7B4(v139, v140, v135, v59, v60, (uint64_t)v47);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v138, v61);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v137, v17);
    v96 = v136;
    *v136 = v95;
    v97 = (unsigned int *)&enum case for JPKIXPCResponse.readCertificate(_:);
LABEL_10:
    v98 = *v97;
    v99 = type metadata accessor for JPKIXPCResponse(0);
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v99 - 8) + 104))(v96, v98, v99);
  }
  v62 = v11;
  v63 = (char *)v17;
  if (v57 == enum case for JPKIXPCRequest.JPKIOperation.changeAuthorization(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v52 + 96))(v55, v51);
    v64 = sub_100063D3C(&qword_1003480B0);
    v65 = (char *)v55 + *(int *)(v64 + 48);
    v66 = (char *)v55 + *(int *)(v64 + 64);
    v67 = v18;
    v68 = (uint64_t)v128;
    (*(void (**)(char *, uint64_t *, char *))(v18 + 32))(v128, v55, v63);
    v69 = v126;
    v70 = *(void (**)(char *, char *, uint64_t))(v126 + 32);
    v71 = (uint64_t)v125;
    v72 = v127;
    v70(v125, v65, v127);
    v73 = (uint64_t)v129;
    v70(v129, v66, v72);
    sub_1001503D8(v139, (uint64_t)v140, v135, v68, v71, v73, v43);
    v101 = *(void (**)(uint64_t, uint64_t))(v69 + 8);
    v101(v73, v72);
    v101(v71, v72);
    (*(void (**)(uint64_t, char *))(v67 + 8))(v68, v63);
    v102 = enum case for JPKIXPCResponse.changeAuthorization(_:);
    v103 = type metadata accessor for JPKIXPCResponse(0);
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v103 - 8) + 104))(v136, v102, v103);
  }
  if (v57 == enum case for JPKIXPCRequest.JPKIOperation.sign(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v52 + 96))(v55, v51);
    v74 = *v55;
    v75 = v55[1];
    v76 = sub_100063D3C(&qword_1003480A8);
    v77 = (char *)v55 + *(int *)(v76 + 48);
    v78 = (char *)v55 + *(int *)(v76 + 64);
    v79 = v18;
    v80 = *(void (**)(char *, char *, char *))(v18 + 32);
    v81 = (uint64_t)v123;
    v138 = v63;
    v80(v123, v77, v63);
    v82 = (uint64_t)v124;
    v83 = v134;
    (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v124, v78, v134);
    v106 = sub_10015106C(v139, v140, v135, v74, v75, v81, v82, v122);
    sub_100063CD0(v74, v75);
    (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v82, v83);
    (*(void (**)(uint64_t, char *))(v79 + 8))(v81, v138);
    v96 = v136;
    *v136 = v106;
    v97 = (unsigned int *)&enum case for JPKIXPCResponse.sign(_:);
    goto LABEL_10;
  }
  if (v57 == enum case for JPKIXPCRequest.JPKIOperation.getInstalledCertificateTypes(_:))
  {
    v100 = sub_10014EEB4(v139, (uint64_t)v140, v135, (uint64_t)v50);
    v96 = v136;
    *v136 = (uint64_t)v100;
    v97 = (unsigned int *)&enum case for JPKIXPCResponse.getInstalledCertificateTypes(_:);
    goto LABEL_10;
  }
  if (v57 == enum case for JPKIXPCRequest.JPKIOperation.getACL(_:))
  {
    v105 = sub_100152934(v120);
    v96 = v136;
    *v136 = v105;
    v96[1] = v118;
    v97 = (unsigned int *)&enum case for JPKIXPCResponse.getACL(_:);
    goto LABEL_10;
  }
  v107 = sub_1000639EC((unint64_t *)&qword_100347C08, (uint64_t (*)(uint64_t))&type metadata accessor for JPKIInternalTypes.InternalError, (uint64_t)&protocol conformance descriptor for JPKIInternalTypes.InternalError);
  v108 = v133;
  v109 = swift_allocError(v133, v107, 0, 0);
  v111 = v110;
  v143 = 0;
  v144 = 0xE000000000000000;
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease(v144);
  v143 = 0xD000000000000010;
  v144 = 0x80000001002BE4F0;
  v112 = sub_1000639EC(&qword_1003480A0, (uint64_t (*)(uint64_t))&type metadata accessor for JPKIXPCRequest.JPKIOperation, (uint64_t)&protocol conformance descriptor for JPKIXPCRequest.JPKIOperation);
  v113._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v51, v112);
  object = v113._object;
  String.append(_:)(v113);
  swift_bridgeObjectRelease(object);
  v115 = v144;
  *v111 = v143;
  v111[1] = v115;
  v116 = v132;
  v117 = (*(uint64_t (**)(unint64_t *, _QWORD, uint64_t))(v132 + 104))(v111, enum case for JPKIInternalTypes.InternalError.typeMismatch(_:), v108);
  swift_willThrow(v117);
  (*(void (**)(uint64_t *, uint64_t))(v52 + 8))(v55, v51);
  v84 = (unint64_t *)v136;
  v85 = v131;
  v143 = v109;
  swift_errorRetain(v109);
  v86 = sub_100063D3C(&qword_100345378);
  if (swift_dynamicCast(v85, &v143, v86, v108, 0))
  {
    swift_errorRelease(v109);
    (*(void (**)(unint64_t *, char *, uint64_t))(v116 + 32))(v84, v85, v108);
    v87 = enum case for JPKIXPCResponse.error(_:);
    v88 = type metadata accessor for JPKIXPCResponse(0);
    (*(void (**)(unint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v88 - 8) + 104))(v84, v87, v88);
    return swift_errorRelease(v143);
  }
  else
  {
    swift_errorRelease(v143);
    v143 = 0;
    v144 = 0xE000000000000000;
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease(v144);
    v143 = 0xD000000000000013;
    v144 = 0x80000001002BE510;
    swift_getErrorValue(v109, v142, v141);
    DynamicType = swift_getDynamicType(v141[0], v141[1], 1);
    v90._countAndFlagsBits = _typeName(_:qualified:)(DynamicType, 0);
    v91 = v90._object;
    String.append(_:)(v90);
    swift_bridgeObjectRelease(v91);
    swift_errorRelease(v109);
    v92 = v144;
    *v84 = v143;
    v84[1] = v92;
    (*(void (**)(unint64_t *, _QWORD, uint64_t))(v116 + 104))(v84, enum case for JPKIInternalTypes.InternalError.typeMismatch(_:), v108);
    v93 = enum case for JPKIXPCResponse.error(_:);
    v94 = type metadata accessor for JPKIXPCResponse(0);
    return (*(uint64_t (**)(unint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v94 - 8) + 104))(v84, v93, v94);
  }
}

void sub_10015FD78(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  SecTaskRef v19;
  __SecTask *v20;
  __int128 v21;
  uint64_t v22;
  char v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  uint64_t v37;
  os_log_type_t v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t *v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void *v47;
  unint64_t v48;
  id v49;
  NSString v50;
  id v51;
  __int128 v52;
  uint64_t v53;
  char v54;
  char v55;
  NSString v56;
  void *v57;
  id v58;
  uint64_t v59;
  id v60;
  void *v61;
  id v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  void *v66;
  void *v67;
  id v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  os_log_type_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  NSObject *v87;
  uint64_t v88;
  os_log_type_t v89;
  _BOOL4 v90;
  uint8_t *v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  NSObject *v96;
  uint64_t v97;
  os_log_type_t v98;
  _BOOL4 v99;
  uint8_t *v100;
  Swift::String v101;
  Swift::String v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  NSObject *v107;
  uint64_t v108;
  os_log_type_t v109;
  uint8_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  NSObject *v120;
  uint64_t v121;
  os_log_type_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  NSObject *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  NSObject *v140;
  uint64_t v141;
  id v142;
  void *v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  audit_token_t token;
  __int128 v150;
  __int128 v151;
  __int16 v152;
  __int128 v153;
  __int128 v154;
  __int16 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  uint64_t v160;

  v147 = a7;
  v8 = v7;
  v9 = a6;
  v10 = a5;
  v11 = a4;
  v12 = a3;
  v143 = (void *)a2;
  v160 = a1;
  v13 = HIDWORD(a3);
  v14 = HIDWORD(a4);
  v15 = HIDWORD(a5);
  v16 = HIDWORD(a6);
  v146 = type metadata accessor for JPKIInternalTypes.InternalError(0);
  v145 = *(_QWORD *)(v146 - 8);
  __chkstk_darwin(v146, v17);
  v144 = (uint64_t *)((char *)&v137 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  token.val[0] = v12;
  token.val[1] = v13;
  token.val[2] = v11;
  token.val[3] = v14;
  token.val[4] = v10;
  token.val[5] = v15;
  token.val[6] = v9;
  token.val[7] = v16;
  v19 = SecTaskCreateWithAuditToken(kCFAllocatorDefault, &token);
  if (!v19)
  {
    if (qword_100344660 != -1)
      swift_once(&qword_100344660, sub_100162014);
    v34 = type metadata accessor for Logger(0);
    v35 = sub_10009673C(v34, (uint64_t)qword_100348000);
    v36 = Logger.logObject.getter(v35);
    v38 = static os_log_type_t.error.getter(v36, v37);
    v39 = os_log_type_enabled(v36, v38);
    v40 = v145;
    v41 = v144;
    if (v39)
    {
      v42 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v38, "Failed to SecTaskCreateWithAuditToken", v42, 2u);
      swift_slowDealloc(v42, -1, -1);
    }

    *v41 = 0xD000000000000025;
    v41[1] = 0x80000001002BE3E0;
    v43 = v146;
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(v40 + 104))(v41, enum case for JPKIInternalTypes.InternalError.internalError(_:), v146);
    v44 = sub_1000639EC((unint64_t *)&qword_100347C08, (uint64_t (*)(uint64_t))&type metadata accessor for JPKIInternalTypes.InternalError, (uint64_t)&protocol conformance descriptor for JPKIInternalTypes.InternalError);
    swift_willThrowTypedImpl(v41, v43, v44);
    goto LABEL_47;
  }
  v20 = v19;
  v21 = *(_OWORD *)(v8 + OBJC_IVAR____TtC10seserviced13JPKIXPCServer__debugSkipPassLookup + 16);
  v153 = *(_OWORD *)(v8 + OBJC_IVAR____TtC10seserviced13JPKIXPCServer__debugSkipPassLookup);
  v154 = v21;
  v155 = *(_WORD *)(v8 + OBJC_IVAR____TtC10seserviced13JPKIXPCServer__debugSkipPassLookup + 32);
  v156 = v153;
  v157 = v21;
  sub_10006F87C((uint64_t)&v156);
  v22 = sub_10006F87C((uint64_t)&v157);
  sub_10015348C(v22);
  v24 = v23;
  sub_10006F8A4((uint64_t)&v156);
  sub_10006F8A4((uint64_t)&v157);
  if ((v24 & 1) != 0)
  {
    v25 = (unint64_t)v143;
    if (qword_100344660 != -1)
      swift_once(&qword_100344660, sub_100162014);
    v26 = type metadata accessor for Logger(0);
    sub_10009673C(v26, (uint64_t)qword_100348000);
    v27 = swift_bridgeObjectRetain_n(v25, 2);
    v28 = Logger.logObject.getter(v27);
    v30 = static os_log_type_t.error.getter(v28, v29);
    if (os_log_type_enabled(v28, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(12, -1);
      v32 = swift_slowAlloc(32, -1);
      *(_QWORD *)token.val = v32;
      *(_DWORD *)v31 = 136315138;
      swift_bridgeObjectRetain(v25);
      v33 = v160;
      v148 = sub_1001C56EC(v160, v25, (uint64_t *)&token);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, &token, v31 + 4, v31 + 12);
      swift_bridgeObjectRelease_n(v25, 3);
      _os_log_impl((void *)&_mh_execute_header, v28, v30, "INTERNAL -- using passIdentifier as AID %s", v31, 0xCu);
      swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1, -1);
      swift_slowDealloc(v31, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v25, 2);
      v33 = v160;
    }
    swift_bridgeObjectRetain(v25);
    sub_1000E848C(v33, v25);
    if (v84 >> 60 != 15)
      goto LABEL_29;
    __break(1u);
    goto LABEL_60;
  }
  v45 = sub_100161540(v20, 0xD000000000000016, 0x80000001002BE410);
  v47 = v143;
  if (!v46)
  {
    if (qword_100344660 != -1)
      swift_once(&qword_100344660, sub_100162014);
    v85 = type metadata accessor for Logger(0);
    v86 = sub_10009673C(v85, (uint64_t)qword_100348000);
    v87 = Logger.logObject.getter(v86);
    v89 = static os_log_type_t.error.getter(v87, v88);
    v90 = os_log_type_enabled(v87, v89);
    v40 = v145;
    v41 = v144;
    if (v90)
    {
      v91 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v91 = 0;
      _os_log_impl((void *)&_mh_execute_header, v87, v89, "Couldn't lookup kSecEntitlementApplicationIdentifier", v91, 2u);
      swift_slowDealloc(v91, -1, -1);
    }

    *v41 = 0xD000000000000034;
    v41[1] = 0x80000001002BE430;
    v43 = v146;
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(v40 + 104))(v41, enum case for JPKIInternalTypes.InternalError.internalError(_:), v146);
    v92 = sub_1000639EC((unint64_t *)&qword_100347C08, (uint64_t (*)(uint64_t))&type metadata accessor for JPKIInternalTypes.InternalError, (uint64_t)&protocol conformance descriptor for JPKIInternalTypes.InternalError);
    swift_willThrowTypedImpl(v41, v43, v92);
    goto LABEL_46;
  }
  v48 = v46;
  v141 = v45;
  v49 = objc_msgSend(objc_allocWithZone((Class)PKPassLibrary), "init");
  v50 = String._bridgeToObjectiveC()();
  v51 = objc_msgSend(v49, "passWithUniqueID:", v50);

  if (!v51)
  {
    v142 = v49;
    swift_bridgeObjectRelease(v48);
    if (qword_100344660 != -1)
      swift_once(&qword_100344660, sub_100162014);
    v105 = type metadata accessor for Logger(0);
    sub_10009673C(v105, (uint64_t)qword_100348000);
    v106 = swift_bridgeObjectRetain_n(v47, 2);
    v107 = Logger.logObject.getter(v106);
    v109 = static os_log_type_t.error.getter(v107, v108);
    if (os_log_type_enabled(v107, v109))
    {
      v110 = (uint8_t *)swift_slowAlloc(12, -1);
      v111 = swift_slowAlloc(32, -1);
      *(_QWORD *)token.val = v111;
      *(_DWORD *)v110 = 136315138;
      swift_bridgeObjectRetain(v47);
      v112 = v160;
      v148 = sub_1001C56EC(v160, (unint64_t)v47, (uint64_t *)&token);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, &token, v110 + 4, v110 + 12);
      swift_bridgeObjectRelease_n(v47, 3);
      _os_log_impl((void *)&_mh_execute_header, v107, v109, "Failed pass lookup for pass(withUniqueID:) %s", v110, 0xCu);
      swift_arrayDestroy(v111, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v111, -1, -1);
      swift_slowDealloc(v110, -1, -1);

      v43 = v146;
      v40 = v145;
      v41 = v144;
    }
    else
    {

      swift_bridgeObjectRelease_n(v47, 2);
      v43 = v146;
      v40 = v145;
      v41 = v144;
      v112 = v160;
    }
    *v41 = v112;
    v41[1] = (uint64_t)v47;
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(v40 + 104))(v41, enum case for JPKIInternalTypes.InternalError.passLookupFailed(_:), v43);
    v113 = sub_1000639EC((unint64_t *)&qword_100347C08, (uint64_t (*)(uint64_t))&type metadata accessor for JPKIInternalTypes.InternalError, (uint64_t)&protocol conformance descriptor for JPKIInternalTypes.InternalError);
    swift_bridgeObjectRetain(v47);
    swift_willThrowTypedImpl(v41, v43, v113);

    goto LABEL_46;
  }
  if ((sub_100161A50(v20, 0xD00000000000002FLL, 0x80000001002BE470) & 1) == 0)
  {
    v52 = *(_OWORD *)(v8 + OBJC_IVAR____TtC10seserviced13JPKIXPCServer__debugSkipAssociatedApplicationCheck + 16);
    v150 = *(_OWORD *)(v8 + OBJC_IVAR____TtC10seserviced13JPKIXPCServer__debugSkipAssociatedApplicationCheck);
    v151 = v52;
    v152 = *(_WORD *)(v8 + OBJC_IVAR____TtC10seserviced13JPKIXPCServer__debugSkipAssociatedApplicationCheck + 32);
    v158 = v150;
    v159 = v52;
    sub_10006F87C((uint64_t)&v158);
    v53 = sub_10006F87C((uint64_t)&v159);
    sub_10015348C(v53);
    v55 = v54;
    sub_10006F8A4((uint64_t)&v158);
    sub_10006F8A4((uint64_t)&v159);
    if ((v55 & 1) == 0)
    {
      v56 = String._bridgeToObjectiveC()();
      v57 = v49;
      v58 = objc_msgSend(v49, "passUniqueIDsForAssociatedApplicationIdentifier:", v56);

      if (!v58)
      {
        swift_bridgeObjectRelease(v48);
        v41 = v144;
        *v144 = v160;
        v41[1] = (uint64_t)v47;
        v116 = v51;
        v40 = v145;
        v43 = v146;
        (*(void (**)(uint64_t *, _QWORD, uint64_t))(v145 + 104))(v41, enum case for JPKIInternalTypes.InternalError.passLookupFailed(_:), v146);
        v117 = sub_1000639EC((unint64_t *)&qword_100347C08, (uint64_t (*)(uint64_t))&type metadata accessor for JPKIInternalTypes.InternalError, (uint64_t)&protocol conformance descriptor for JPKIInternalTypes.InternalError);
        swift_bridgeObjectRetain(v47);
        swift_willThrowTypedImpl(v41, v43, v117);

LABEL_46:
LABEL_47:
        v114 = v147;
LABEL_48:
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(v40 + 32))(v114, v41, v43);
        return;
      }
      v59 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v58, &type metadata for String, &protocol witness table for String);

      if ((sub_10017EE14(v160, (uint64_t)v47, v59) & 1) == 0)
      {
        if (qword_100344660 != -1)
          swift_once(&qword_100344660, sub_100162014);
        v142 = v51;
        v118 = type metadata accessor for Logger(0);
        sub_10009673C(v118, (uint64_t)qword_100348000);
        swift_bridgeObjectRetain_n(v47, 2);
        swift_bridgeObjectRetain_n(v48, 2);
        v119 = swift_bridgeObjectRetain_n(v59, 2);
        v120 = Logger.logObject.getter(v119);
        v122 = static os_log_type_t.error.getter(v120, v121);
        v123 = v122;
        v140 = v120;
        if (os_log_type_enabled(v120, v122))
        {
          v124 = swift_slowAlloc(32, -1);
          v139 = v123;
          v125 = v59;
          v126 = v124;
          v138 = swift_slowAlloc(96, -1);
          *(_QWORD *)token.val = v138;
          *(_DWORD *)v126 = 136315650;
          swift_bridgeObjectRetain(v48);
          v148 = sub_1001C56EC(v141, v48, (uint64_t *)&token);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, &token, v126 + 4, v126 + 12);
          swift_bridgeObjectRelease_n(v48, 3);
          *(_WORD *)(v126 + 12) = 2080;
          swift_bridgeObjectRetain(v143);
          v148 = sub_1001C56EC(v160, (unint64_t)v143, (uint64_t *)&token);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, &token, v126 + 14, v126 + 22);
          swift_bridgeObjectRelease_n(v143, 3);
          *(_WORD *)(v126 + 22) = 2080;
          v137 = v126 + 24;
          swift_bridgeObjectRetain(v125);
          v128 = Set.description.getter(v127, &type metadata for String, &protocol witness table for String);
          v130 = v129;
          swift_bridgeObjectRelease(v125);
          v148 = sub_1001C56EC(v128, v130, (uint64_t *)&token);
          v47 = v143;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, &token, v137, v126 + 32);
          swift_bridgeObjectRelease_n(v125, 2);
          v131 = v130;
          v57 = v49;
          swift_bridgeObjectRelease(v131);
          v132 = v140;
          _os_log_impl((void *)&_mh_execute_header, v140, (os_log_type_t)v139, "Application %s not permitted for pass %s -- allowed %s", (uint8_t *)v126, 0x20u);
          v133 = v138;
          swift_arrayDestroy(v138, 3, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v133, -1, -1);
          swift_slowDealloc(v126, -1, -1);

          v134 = v160;
          v135 = v141;
          v114 = v147;
          v43 = v146;
        }
        else
        {

          swift_bridgeObjectRelease_n(v59, 2);
          swift_bridgeObjectRelease_n(v47, 2);
          swift_bridgeObjectRelease_n(v48, 2);
          v114 = v147;
          v125 = v59;
          v43 = v146;
          v134 = v160;
          v135 = v141;
        }
        v41 = v144;
        *v144 = v135;
        v41[1] = v48;
        v41[2] = v134;
        v41[3] = (uint64_t)v47;
        v41[4] = v125;
        v40 = v145;
        (*(void (**)(uint64_t *, _QWORD, uint64_t))(v145 + 104))(v41, enum case for JPKIInternalTypes.InternalError.passAccessForbidden(_:), v43);
        v136 = sub_1000639EC((unint64_t *)&qword_100347C08, (uint64_t (*)(uint64_t))&type metadata accessor for JPKIInternalTypes.InternalError, (uint64_t)&protocol conformance descriptor for JPKIInternalTypes.InternalError);
        swift_bridgeObjectRetain(v47);
        swift_willThrowTypedImpl(v41, v43, v136);

        goto LABEL_48;
      }
      swift_bridgeObjectRelease(v59);
    }
  }
  swift_bridgeObjectRelease(v48);
  v60 = objc_msgSend(v51, "secureElementPass");
  if (!v60)
  {
LABEL_35:
    v93 = v51;
    if (qword_100344660 != -1)
      swift_once(&qword_100344660, sub_100162014);
    v94 = type metadata accessor for Logger(0);
    v95 = sub_10009673C(v94, (uint64_t)qword_100348000);
    v96 = Logger.logObject.getter(v95);
    v98 = static os_log_type_t.error.getter(v96, v97);
    v99 = os_log_type_enabled(v96, v98);
    v40 = v145;
    v41 = v144;
    if (v99)
    {
      v100 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v100 = 0;
      _os_log_impl((void *)&_mh_execute_header, v96, v98, "Couldn't find .typeJPKI payment application", v100, 2u);
      swift_slowDealloc(v100, -1, -1);
    }

    *(_QWORD *)token.val = 0;
    *(_QWORD *)&token.val[2] = 0xE000000000000000;
    _StringGuts.grow(_:)(81);
    v101._countAndFlagsBits = 0xD00000000000004FLL;
    v101._object = (void *)0x80000001002BE4A0;
    String.append(_:)(v101);
    v102._countAndFlagsBits = v160;
    v102._object = v47;
    String.append(_:)(v102);
    v103 = *(_QWORD *)&token.val[2];
    *v41 = *(_QWORD *)token.val;
    v41[1] = v103;
    v43 = v146;
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(v40 + 104))(v41, enum case for JPKIInternalTypes.InternalError.passInvalid(_:), v146);
    v104 = sub_1000639EC((unint64_t *)&qword_100347C08, (uint64_t (*)(uint64_t))&type metadata accessor for JPKIInternalTypes.InternalError, (uint64_t)&protocol conformance descriptor for JPKIInternalTypes.InternalError);
    swift_willThrowTypedImpl(v41, v43, v104);

    goto LABEL_46;
  }
  v61 = v60;
  v62 = objc_msgSend(v60, "paymentApplications");

  if (v62)
  {
    v63 = sub_10006C25C(0, &qword_100348088, PKPaymentApplication_ptr);
    v64 = sub_10016242C();
    v65 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v62, v63, v64);

    sub_10015DF9C(v65);
    v67 = v66;
    swift_bridgeObjectRelease(v65);
    if (v67)
    {
      v68 = objc_msgSend(v67, "applicationIdentifier");

      if (v68)
      {
        v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
        v71 = v70;

        if (qword_100344660 != -1)
          swift_once(&qword_100344660, sub_100162014);
        v72 = type metadata accessor for Logger(0);
        sub_10009673C(v72, (uint64_t)qword_100348000);
        swift_bridgeObjectRetain_n(v47, 2);
        v73 = swift_bridgeObjectRetain_n(v71, 2);
        v74 = Logger.logObject.getter(v73);
        v78 = static os_log_type_t.info.getter(v74, v75, v76, v77);
        v79 = v78;
        if (os_log_type_enabled(v74, v78))
        {
          v80 = swift_slowAlloc(22, -1);
          v147 = v69;
          v81 = v80;
          v146 = swift_slowAlloc(64, -1);
          *(_QWORD *)token.val = v146;
          *(_DWORD *)v81 = 136315394;
          LODWORD(v145) = v79;
          swift_bridgeObjectRetain(v47);
          v148 = sub_1001C56EC(v160, (unint64_t)v47, (uint64_t *)&token);
          v142 = v51;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, &token, v81 + 4, v81 + 12);
          swift_bridgeObjectRelease_n(v47, 3);
          *(_WORD *)(v81 + 12) = 2080;
          swift_bridgeObjectRetain(v71);
          v148 = sub_1001C56EC(v147, v71, (uint64_t *)&token);
          v51 = v142;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, &token, v81 + 14, v81 + 22);
          swift_bridgeObjectRelease_n(v71, 3);
          _os_log_impl((void *)&_mh_execute_header, v74, (os_log_type_t)v145, "Resolved passID %s -> %s", (uint8_t *)v81, 0x16u);
          v82 = v146;
          swift_arrayDestroy(v146, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v82, -1, -1);
          v83 = v81;
          v69 = v147;
          swift_slowDealloc(v83, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v71, 2);
          swift_bridgeObjectRelease_n(v47, 2);
        }
        sub_1000E848C(v69, v71);
        if (v115 >> 60 != 15)
        {

          v20 = (__SecTask *)v51;
LABEL_29:

          return;
        }
        goto LABEL_61;
      }
    }
    goto LABEL_35;
  }
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
}

uint64_t sub_100160F88(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD aBlock[5];
  _QWORD *v36;

  v14 = type metadata accessor for DispatchWorkItemFlags(0);
  v33 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14, v15);
  v17 = (char *)v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DispatchQoS(0);
  v31 = *(_QWORD *)(v18 - 8);
  v32 = v18;
  __chkstk_darwin(v18, v19);
  v21 = (char *)v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30[1] = *(_QWORD *)(a3 + OBJC_IVAR____TtC10seserviced13JPKIXPCServer_queue);
  v22 = (_QWORD *)swift_allocObject(&unk_10030B238, 64, 7);
  v22[2] = a1;
  v22[3] = a2;
  v22[4] = a4;
  v22[5] = a5;
  v22[6] = a6;
  v22[7] = a7;
  aBlock[4] = sub_10016241C;
  v36 = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100071C98;
  aBlock[3] = &unk_10030B250;
  v23 = _Block_copy(aBlock);
  sub_100063C8C(a6, a7);
  v24 = a1;
  swift_errorRetain(a2);
  v25 = swift_retain(a5);
  static DispatchQoS.unspecified.getter(v25);
  v34 = _swiftEmptyArrayStorage;
  v26 = sub_1000639EC((unint64_t *)&qword_100344A20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v27 = sub_100063D3C((uint64_t *)&unk_100346200);
  v28 = sub_100127660((unint64_t *)&qword_100344A30, (uint64_t *)&unk_100346200);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v34, v27, v28, v14, v26);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v21, v17, v23);
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v17, v14);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v21, v32);
  return swift_release(v36);
}

uint64_t sub_1001611B0(void *a1, uint64_t a2, void (*a3)(_QWORD *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::String v33;
  void *object;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  void (*v40)(_QWORD *);
  _QWORD v41[3];
  _BYTE v42[8];
  _QWORD v43[3];
  _BYTE v44[8];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;

  v11 = sub_100063D3C(&qword_100348068);
  v13 = __chkstk_darwin(v11, v12);
  v15 = (uint64_t *)((char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v13, v16);
  v18 = (uint64_t *)((char *)&v39 - v17);
  if (a1)
  {
    *v18 = a1;
    v18[1] = a5;
    v18[2] = a6;
    swift_storeEnumTagMultiPayload((char *)&v39 - v17, v11, 0);
    v19 = a1;
    sub_100063C8C(a5, a6);
    a3(v18);

    v15 = v18;
  }
  else
  {
    if (qword_100344660 != -1)
      swift_once(&qword_100344660, sub_100162014);
    v20 = type metadata accessor for Logger(0);
    sub_10009673C(v20, (uint64_t)qword_100348000);
    swift_errorRetain(a2);
    v21 = swift_errorRetain(a2);
    v22 = Logger.logObject.getter(v21);
    v24 = static os_log_type_t.error.getter(v22, v23);
    if (os_log_type_enabled(v22, v24))
    {
      v40 = a3;
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = swift_slowAlloc(32, -1);
      v47 = v26;
      *(_DWORD *)v25 = 136315138;
      if (a2)
      {
        swift_getErrorValue(a2, v42, v41);
        v27 = Error.localizedDescription.getter(v41[1], v41[2]);
        v29 = v28;
      }
      else
      {
        v29 = 0xEB000000003E726FLL;
        v27 = 0x727265206C696E3CLL;
      }
      v45 = sub_1001C56EC(v27, v29, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v25 + 4, v25 + 12);
      swift_bridgeObjectRelease(v29);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v22, v24, "Failed to get secureElement %s", v25, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);

      a3 = v40;
    }
    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);

    }
    v47 = 0;
    v48 = 0xE000000000000000;
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease(v48);
    v47 = 0xD000000000000013;
    v48 = 0x80000001002BE3C0;
    if (a2)
    {
      swift_getErrorValue(a2, v44, v43);
      v30 = Error.localizedDescription.getter(v43[1], v43[2]);
    }
    else
    {
      v30 = 0;
      v31 = 0;
    }
    v45 = v30;
    v46 = v31;
    v32 = sub_100063D3C((uint64_t *)&unk_100347DD0);
    v33._countAndFlagsBits = String.init<A>(describing:)(&v45, v32);
    object = v33._object;
    String.append(_:)(v33);
    swift_bridgeObjectRelease(object);
    v35 = v48;
    *v15 = v47;
    v15[1] = v35;
    v36 = enum case for JPKIInternalTypes.InternalError.internalError(_:);
    v37 = type metadata accessor for JPKIInternalTypes.InternalError(0);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 104))(v15, v36, v37);
    swift_storeEnumTagMultiPayload(v15, v11, 1);
    a3(v15);
  }
  return sub_100162344((uint64_t)v15);
}

uint64_t sub_100161540(__SecTask *a1, uint64_t a2, unint64_t a3)
{
  __CFString *v6;
  CFTypeRef v7;
  CFErrorRef v9;
  uint64_t v10;
  __CFError *v11;
  __CFError *v12;
  NSObject *v13;
  uint64_t v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t ObjectType;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  CFErrorRef error;

  error = 0;
  v6 = (__CFString *)String._bridgeToObjectiveC()();
  v7 = SecTaskCopyValueForEntitlement(a1, v6, &error);

  if (v7)
  {
    v35 = (uint64_t)v7;
    swift_unknownObjectRetain(v7);
    if ((swift_dynamicCast(&v36, &v35, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for String, 6) & 1) != 0)
    {
      swift_unknownObjectRelease(v7);
      return v36;
    }
    if (qword_100344660 != -1)
      swift_once(&qword_100344660, sub_100162014);
    v24 = type metadata accessor for Logger(0);
    sub_10009673C(v24, (uint64_t)qword_100348000);
    swift_unknownObjectRetain_n(v7, 2);
    v25 = swift_bridgeObjectRetain_n(a3, 2);
    v26 = Logger.logObject.getter(v25);
    v28 = static os_log_type_t.error.getter(v26, v27);
    if (os_log_type_enabled(v26, v28))
    {
      v29 = swift_slowAlloc(32, -1);
      v30 = swift_slowAlloc(96, -1);
      v36 = v30;
      *(_DWORD *)v29 = 136315650;
      swift_bridgeObjectRetain(a3);
      v35 = sub_1001C56EC(a2, a3, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v29 + 4, v29 + 12);
      swift_bridgeObjectRelease_n(a3, 3);
      *(_WORD *)(v29 + 12) = 2080;
      ObjectType = swift_getObjectType(v7);
      v32 = _typeName(_:qualified:)(ObjectType, 0);
      v34 = v33;
      v35 = sub_1001C56EC(v32, v33, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v29 + 14, v29 + 22);
      swift_unknownObjectRelease_n(v7, 2);
      swift_bridgeObjectRelease(v34);
      *(_WORD *)(v29 + 22) = 2080;
      v35 = sub_1001C56EC(0x676E69727453, 0xE600000000000000, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v29 + 24, v29 + 32);
      _os_log_impl((void *)&_mh_execute_header, v26, v28, "Failed to cast result of entitlement %s from %s to %s", (uint8_t *)v29, 0x20u);
      swift_arrayDestroy(v30, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v29, -1, -1);
      swift_unknownObjectRelease(v7);

    }
    else
    {

      swift_bridgeObjectRelease_n(a3, 2);
      swift_unknownObjectRelease_n(v7, 3);
    }
  }
  else
  {
    v9 = error;
    if (qword_100344660 != -1)
      swift_once(&qword_100344660, sub_100162014);
    v10 = type metadata accessor for Logger(0);
    sub_10009673C(v10, (uint64_t)qword_100348000);
    v11 = v9;
    swift_bridgeObjectRetain_n(a3, 2);
    v12 = v11;
    v13 = Logger.logObject.getter(v12);
    v15 = static os_log_type_t.error.getter(v13, v14);
    if (os_log_type_enabled(v13, v15))
    {
      v16 = swift_slowAlloc(22, -1);
      v17 = swift_slowAlloc(64, -1);
      v36 = v17;
      *(_DWORD *)v16 = 136315394;
      swift_bridgeObjectRetain(a3);
      v35 = sub_1001C56EC(a2, a3, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v16 + 4, v16 + 12);
      swift_bridgeObjectRelease_n(a3, 3);
      *(_WORD *)(v16 + 12) = 2080;
      if (v9)
      {
        v35 = (uint64_t)v12;
        type metadata accessor for CFError(0);
        v19 = v18;
        v20 = sub_1000639EC(&qword_100348098, (uint64_t (*)(uint64_t))type metadata accessor for CFError, (uint64_t)&protocol conformance descriptor for CFErrorRef);
        v21 = Error.localizedDescription.getter(v19, v20);
        v23 = v22;
      }
      else
      {
        v23 = 0xE500000000000000;
        v21 = 0x3E6C696E3CLL;
      }
      v35 = sub_1001C56EC(v21, v23, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v16 + 14, v16 + 22);

      swift_bridgeObjectRelease(v23);
      _os_log_impl((void *)&_mh_execute_header, v13, v15, "Failed to SecTaskCopyValueForEntitlement %s : %s", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy(v17, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a3, 2);
    }
  }
  return 0;
}

uint64_t sub_100161A50(__SecTask *a1, uint64_t a2, unint64_t a3)
{
  __CFString *v6;
  CFTypeRef v7;
  uint64_t v8;
  CFErrorRef v9;
  uint64_t v10;
  __CFError *v11;
  __CFError *v12;
  NSObject *v13;
  uint64_t v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t ObjectType;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v36;
  uint64_t v37;
  CFErrorRef error;

  error = 0;
  v6 = (__CFString *)String._bridgeToObjectiveC()();
  v7 = SecTaskCopyValueForEntitlement(a1, v6, &error);

  if (v7)
  {
    v37 = (uint64_t)v7;
    swift_unknownObjectRetain(v7);
    if ((swift_dynamicCast(&v36, &v37, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for Bool, 6) & 1) != 0)
    {
      swift_unknownObjectRelease(v7);
      return v36;
    }
    else
    {
      if (qword_100344660 != -1)
        swift_once(&qword_100344660, sub_100162014);
      v24 = type metadata accessor for Logger(0);
      sub_10009673C(v24, (uint64_t)qword_100348000);
      swift_unknownObjectRetain_n(v7, 2);
      v25 = swift_bridgeObjectRetain_n(a3, 2);
      v26 = Logger.logObject.getter(v25);
      v28 = static os_log_type_t.error.getter(v26, v27);
      if (os_log_type_enabled(v26, v28))
      {
        v29 = swift_slowAlloc(32, -1);
        v30 = swift_slowAlloc(96, -1);
        v37 = v30;
        *(_DWORD *)v29 = 136315650;
        swift_bridgeObjectRetain(a3);
        v36 = sub_1001C56EC(a2, a3, &v37);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v29 + 4, v29 + 12);
        swift_bridgeObjectRelease_n(a3, 3);
        *(_WORD *)(v29 + 12) = 2080;
        ObjectType = swift_getObjectType(v7);
        v32 = _typeName(_:qualified:)(ObjectType, 0);
        v34 = v33;
        v36 = sub_1001C56EC(v32, v33, &v37);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v29 + 14, v29 + 22);
        v8 = 2;
        swift_unknownObjectRelease_n(v7, 2);
        swift_bridgeObjectRelease(v34);
        *(_WORD *)(v29 + 22) = 2080;
        v36 = sub_1001C56EC(1819242306, 0xE400000000000000, &v37);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v29 + 24, v29 + 32);
        _os_log_impl((void *)&_mh_execute_header, v26, v28, "Failed to cast result of entitlement %s from %s to %s", (uint8_t *)v29, 0x20u);
        swift_arrayDestroy(v30, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v30, -1, -1);
        swift_slowDealloc(v29, -1, -1);
        swift_unknownObjectRelease(v7);

      }
      else
      {

        v8 = 2;
        swift_bridgeObjectRelease_n(a3, 2);
        swift_unknownObjectRelease_n(v7, 3);
      }
    }
  }
  else
  {
    v9 = error;
    if (qword_100344660 != -1)
      swift_once(&qword_100344660, sub_100162014);
    v10 = type metadata accessor for Logger(0);
    sub_10009673C(v10, (uint64_t)qword_100348000);
    v11 = v9;
    swift_bridgeObjectRetain_n(a3, 2);
    v12 = v11;
    v13 = Logger.logObject.getter(v12);
    v15 = static os_log_type_t.error.getter(v13, v14);
    if (os_log_type_enabled(v13, v15))
    {
      v16 = swift_slowAlloc(22, -1);
      v17 = swift_slowAlloc(64, -1);
      v37 = v17;
      *(_DWORD *)v16 = 136315394;
      swift_bridgeObjectRetain(a3);
      v36 = sub_1001C56EC(a2, a3, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v16 + 4, v16 + 12);
      swift_bridgeObjectRelease_n(a3, 3);
      *(_WORD *)(v16 + 12) = 2080;
      if (v9)
      {
        v36 = (uint64_t)v12;
        type metadata accessor for CFError(0);
        v19 = v18;
        v20 = sub_1000639EC(&qword_100348098, (uint64_t (*)(uint64_t))type metadata accessor for CFError, (uint64_t)&protocol conformance descriptor for CFErrorRef);
        v21 = Error.localizedDescription.getter(v19, v20);
        v23 = v22;
      }
      else
      {
        v23 = 0xE500000000000000;
        v21 = 0x3E6C696E3CLL;
      }
      v36 = sub_1001C56EC(v21, v23, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v16 + 14, v16 + 22);

      swift_bridgeObjectRelease(v23);
      _os_log_impl((void *)&_mh_execute_header, v13, v15, "Failed to SecTaskCopyValueForEntitlement %s : %s", (uint8_t *)v16, 0x16u);
      v8 = 2;
      swift_arrayDestroy(v17, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);

    }
    else
    {

      v8 = 2;
      swift_bridgeObjectRelease_n(a3, 2);

    }
  }
  return v8;
}

uint64_t type metadata accessor for JPKIXPCServer()
{
  return objc_opt_self(_TtC10seserviced13JPKIXPCServer);
}

uint64_t sub_100162014()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Logger(0);
  sub_1000980F8(v0, qword_100348000);
  sub_10009673C(v0, (uint64_t)qword_100348000);
  v1 = String.init(cString:)(SESLoggingSubsystem);
  return Logger.init(subsystem:category:)(v1);
}

uint64_t sub_1001621D0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001621F4(uint64_t a1)
{
  uint64_t v1;

  return sub_10015E55C(a1, *(void **)(v1 + 16));
}

double sub_1001621FC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10015E5C8(a1, *(void **)(v2 + 16), a2);
}

uint64_t sub_100162204()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for XPCReceivedMessage(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = type metadata accessor for JPKIXPCRequest(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v5 + v8 + 8) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v3 | v8 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v10, v11);
}

uint64_t sub_1001622CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for XPCReceivedMessage(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  type metadata accessor for JPKIXPCRequest(0);
  return sub_10015EFFC(a1, v1 + v4, *(_QWORD *)(v1 + v5));
}

uint64_t sub_100162344(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100063D3C(&qword_100348068);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100162384()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  sub_100063CD0(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1001623B8(void *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100160F88(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48));
}

uint64_t sub_1001623C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001623D8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1001623E0()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  sub_100063CD0(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10016241C()
{
  uint64_t v0;

  return sub_1001611B0(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(void (**)(_QWORD *))(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
}

unint64_t sub_10016242C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100348090;
  if (!qword_100348090)
  {
    v1 = sub_10006C25C(255, &qword_100348088, PKPaymentApplication_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100348090);
  }
  return result;
}

uint64_t sub_100162484(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100063D3C(&qword_100348068);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1001624D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (uint64_t *)((char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v7 = qword_100354EE8;
  *v6 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  v9 = (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) != 0)
  {
    v10 = *(_BYTE *)(v1 + 16);
    v11 = Logger.logObject.getter(v9);
    v15 = v11;
    if ((v10 & 1) != 0)
    {
      v16 = static os_log_type_t.error.getter(v11, v12);
      if (os_log_type_enabled(v15, v16))
      {
        v17 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v17 = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "LyonBLE is already running", v17, 2u);
        swift_slowDealloc(v17, -1, -1);
      }

    }
    else
    {
      v18 = static os_log_type_t.info.getter(v11, v12, v13, v14);
      if (os_log_type_enabled(v15, v18))
      {
        v19 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v19 = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, v18, "Starting LyonBLE", v19, 2u);
        swift_slowDealloc(v19, -1, -1);
      }

      *(_BYTE *)(v1 + 16) = 1;
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1001626A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  os_unfair_lock_s *v21;
  os_unfair_lock_s *v22;
  uint64_t v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (uint64_t *)((char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v7 = qword_100354EE8;
  *v6 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  v9 = (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_17:
    v18 = swift_once(&qword_1003447A0, sub_1001EDCA4);
LABEL_8:
    __chkstk_darwin(v18, v19);
    *(&v26 - 4) = (uint64_t)sub_10007BEAC;
    *(&v26 - 3) = 0;
    *(&v26 - 2) = v20;
    v22 = v21 + 4;
    os_unfair_lock_lock(v21 + 4);
    sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_10006F860, &v27);
    os_unfair_lock_unlock(v22);
    v23 = v27;
    sub_100162984(v27);
    swift_bridgeObjectRelease(v23);
    if (*(_BYTE *)(v1 + 17) == 1)
    {
      if (qword_1003445A0 != -1)
        swift_once(&qword_1003445A0, sub_1000B26B0);
      sub_1000AEF70(*(_QWORD *)(v1 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonServiceUUID), *(_QWORD *)(v1 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonServiceUUID + 8));
      *(_BYTE *)(v1 + 17) = 0;
    }
    *(_BYTE *)(v1 + 16) = 0;
    return;
  }
  v10 = *(unsigned __int8 *)(v1 + 16);
  v11 = Logger.logObject.getter(v9);
  v15 = v11;
  if (v10 == 1)
  {
    v16 = static os_log_type_t.info.getter(v11, v12, v13, v14);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Stopping LyonBLE", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }

    if (qword_1003447A0 == -1)
      goto LABEL_8;
    goto LABEL_17;
  }
  v24 = static os_log_type_t.error.getter(v11, v12);
  if (os_log_type_enabled(v15, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v24, "LyonBLE is not running", v25, 2u);
    swift_slowDealloc(v25, -1, -1);
  }

}

void sub_100162984(uint64_t a1)
{
  os_unfair_lock_s *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __objc2_class **v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  void *v24;
  int64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[5];
  __objc2_class **v30;

  v3 = v2;
  v4 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v5 = a1;
    else
      v5 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v1 = (os_unfair_lock_s *)__CocoaSet.makeIterator()(v5);
    v6 = type metadata accessor for Peer(0);
    v7 = sub_1000639EC((unint64_t *)&qword_100347720, type metadata accessor for Peer, (uint64_t)&unk_10028BFA8);
    v8 = Set.Iterator.init(_cocoa:)(v29, v1, v6, v7);
    v4 = v29[0];
    v27 = v29[1];
    v9 = v29[2];
    v10 = v29[3];
    v11 = v29[4];
  }
  else
  {
    v12 = -1 << *(_BYTE *)(a1 + 32);
    v27 = a1 + 56;
    v9 = ~v12;
    v13 = -v12;
    if (v13 < 64)
      v14 = ~(-1 << v13);
    else
      v14 = -1;
    v11 = v14 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v10 = 0;
  }
  v26 = (unint64_t)(v9 + 64) >> 6;
  if ((v4 & 0x8000000000000000) == 0)
    goto LABEL_14;
LABEL_11:
  v15 = __CocoaSet.Iterator.next()(v8);
  if (!v15)
    goto LABEL_43;
  v16 = v15;
  v28 = v15;
  v17 = type metadata accessor for Peer(0);
  swift_unknownObjectRetain(v16);
  swift_dynamicCast(&v30, &v28, (char *)&type metadata for Swift.AnyObject + 8, v17, 7);
  v18 = v30;
  swift_unknownObjectRelease(v16);
  v19 = v10;
  v20 = v11;
  if (!v18)
    goto LABEL_43;
  while (1)
  {
    if (*v18 == _TtC10seserviced8LyonPeer)
      *((_BYTE *)v18 + OBJC_IVAR____TtC10seserviced8LyonPeer_hasError) = 1;
    if (qword_1003445A0 != -1)
      swift_once(&qword_1003445A0, sub_1000B26B0);
    sub_1000AD358((uint64_t)v18);
    if (qword_1003447A0 != -1)
      swift_once(&qword_1003447A0, sub_1001EDCA4);
    v24 = off_10034A560;
    v1 = (os_unfair_lock_s *)(*((_QWORD *)off_10034A560 + 5) + 16);
    os_unfair_lock_lock(v1);
    sub_100163608((uint64_t)v24, (uint64_t)v18);
    if (v3)
      goto LABEL_45;
    v3 = 0;
    os_unfair_lock_unlock(v1);
    v8 = (_QWORD *)swift_release(v18);
    v10 = v19;
    v11 = v20;
    if (v4 < 0)
      goto LABEL_11;
LABEL_14:
    if (!v11)
      break;
    v20 = (v11 - 1) & v11;
    v21 = __clz(__rbit64(v11)) | (v10 << 6);
    v19 = v10;
LABEL_27:
    v18 = *(__objc2_class ***)(*(_QWORD *)(v4 + 48) + 8 * v21);
    swift_retain(v18);
    if (!v18)
      goto LABEL_43;
  }
  v19 = v10 + 1;
  if (__OFADD__(v10, 1))
  {
    __break(1u);
LABEL_45:
    os_unfair_lock_unlock(v1);
    __break(1u);
    return;
  }
  if (v19 >= v26)
    goto LABEL_43;
  v22 = *(_QWORD *)(v27 + 8 * v19);
  if (v22)
  {
LABEL_26:
    v20 = (v22 - 1) & v22;
    v21 = __clz(__rbit64(v22)) + (v19 << 6);
    goto LABEL_27;
  }
  v23 = v10 + 2;
  if (v10 + 2 >= v26)
    goto LABEL_43;
  v22 = *(_QWORD *)(v27 + 8 * v23);
  if (v22)
    goto LABEL_25;
  v23 = v10 + 3;
  if (v10 + 3 >= v26)
    goto LABEL_43;
  v22 = *(_QWORD *)(v27 + 8 * v23);
  if (v22)
    goto LABEL_25;
  v23 = v10 + 4;
  if (v10 + 4 >= v26)
    goto LABEL_43;
  v22 = *(_QWORD *)(v27 + 8 * v23);
  if (v22)
  {
LABEL_25:
    v19 = v23;
    goto LABEL_26;
  }
  v19 = v10 + 5;
  if (v10 + 5 >= v26)
    goto LABEL_43;
  v22 = *(_QWORD *)(v27 + 8 * v19);
  if (v22)
    goto LABEL_26;
  v25 = v10 + 6;
  while (v26 != v25)
  {
    v22 = *(_QWORD *)(v27 + 8 * v25++);
    if (v22)
    {
      v19 = v25 - 1;
      goto LABEL_26;
    }
  }
LABEL_43:
  sub_10007EF58(v4);
}

_QWORD *sub_100162D18(void (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  int64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[5];
  uint64_t v34;

  v4 = v3;
  v5 = a3;
  if ((a3 & 0xC000000000000001) != 0)
  {
    if (a3 < 0)
      v7 = a3;
    else
      v7 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v8 = __CocoaSet.makeIterator()(v7);
    v9 = sub_100063D3C(&qword_100346170);
    v10 = sub_10007EF60(&qword_1003482B0, &qword_100346170, (uint64_t)&unk_1002891B0);
    result = Set.Iterator.init(_cocoa:)(v33, v8, v9, v10);
    v5 = v33[0];
    v31 = v33[1];
    v12 = v33[2];
    v13 = v33[3];
    v14 = v33[4];
  }
  else
  {
    v15 = -1 << *(_BYTE *)(a3 + 32);
    v31 = a3 + 56;
    v16 = ~v15;
    v17 = -v15;
    if (v17 < 64)
      v18 = ~(-1 << v17);
    else
      v18 = -1;
    v14 = v18 & *(_QWORD *)(a3 + 56);
    result = (_QWORD *)swift_bridgeObjectRetain(a3);
    v12 = v16;
    v13 = 0;
  }
  v30 = (unint64_t)(v12 + 64) >> 6;
  if ((v5 & 0x8000000000000000) == 0)
    goto LABEL_14;
LABEL_11:
  v19 = __CocoaSet.Iterator.next()(result);
  if (v19)
  {
    v20 = v19;
    v32 = v19;
    swift_unknownObjectRetain(v19);
    v21 = sub_100063D3C(&qword_100346170);
    swift_dynamicCast(&v34, &v32, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
    v22 = v34;
    swift_unknownObjectRelease(v20);
    v23 = v13;
    v24 = v14;
    while (v22)
    {
      v34 = v22;
      a1(&v34);
      result = (_QWORD *)swift_release(v22);
      if (v4)
      {
        v29 = v5;
        return (_QWORD *)sub_10007EF58(v29);
      }
      v13 = v23;
      v14 = v24;
      if (v5 < 0)
        goto LABEL_11;
LABEL_14:
      if (v14)
      {
        v24 = (v14 - 1) & v14;
        v25 = __clz(__rbit64(v14)) | (v13 << 6);
        v23 = v13;
      }
      else
      {
        v23 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
          __break(1u);
          return result;
        }
        if (v23 >= v30)
          break;
        v26 = *(_QWORD *)(v31 + 8 * v23);
        if (!v26)
        {
          v27 = v13 + 2;
          if (v13 + 2 >= v30)
            break;
          v26 = *(_QWORD *)(v31 + 8 * v27);
          if (v26)
            goto LABEL_25;
          v27 = v13 + 3;
          if (v13 + 3 >= v30)
            break;
          v26 = *(_QWORD *)(v31 + 8 * v27);
          if (v26)
            goto LABEL_25;
          v27 = v13 + 4;
          if (v13 + 4 >= v30)
            break;
          v26 = *(_QWORD *)(v31 + 8 * v27);
          if (v26)
          {
LABEL_25:
            v23 = v27;
          }
          else
          {
            v23 = v13 + 5;
            if (v13 + 5 >= v30)
              break;
            v26 = *(_QWORD *)(v31 + 8 * v23);
            if (!v26)
            {
              v28 = v13 + 6;
              while (v30 != v28)
              {
                v26 = *(_QWORD *)(v31 + 8 * v28++);
                if (v26)
                {
                  v23 = v28 - 1;
                  goto LABEL_26;
                }
              }
              break;
            }
          }
        }
LABEL_26:
        v24 = (v26 - 1) & v26;
        v25 = __clz(__rbit64(v26)) + (v23 << 6);
      }
      v22 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v25);
      swift_retain(v22);
    }
  }
  v29 = v5;
  return (_QWORD *)sub_10007EF58(v29);
}

uint64_t sub_100163010(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t *);
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18[3];
  uint64_t v19;
  id v20;
  uint64_t v21;
  _QWORD v22[4];
  uint64_t v23;
  uint64_t v24;

  v24 = a2;
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    swift_beginAccess(a1 + 32, v22, 33, 0);
    swift_retain(a2);
    v4 = sub_1000C7708(v18, a2);
    swift_endAccess(v22);
    result = swift_release(v18[0]);
    if ((v4 & 1) == 0)
      return result;
    v6 = swift_beginAccess(a1 + 16, v22, 0, 0);
    v7 = *(_QWORD *)(a1 + 16);
    __chkstk_darwin(v6, v8);
    v17 = &v24;
    swift_bridgeObjectRetain(v7);
    v9 = (void (*)(uint64_t *))sub_10016C208;
  }
  else
  {
    v21 = a2;
    v10 = type metadata accessor for Peer(0);
    swift_retain(a2);
    v11 = sub_100063D3C(&qword_1003482A8);
    swift_dynamicCast(&v20, &v21, v10, v11, 7);
    v12 = v20;
    v13 = objc_msgSend(v20, "copyWithZone:", 0);
    swift_unknownObjectRelease(v12);
    _bridgeAnyObjectToAny(_:)(v22);
    swift_unknownObjectRelease(v13);
    swift_dynamicCast(&v19, v22, (char *)&type metadata for Any + 8, v10, 7);
    swift_beginAccess(a1 + 32, v18, 33, 0);
    LOBYTE(v12) = sub_1000C7708(&v23, v19);
    swift_endAccess(v18);
    result = swift_release(v23);
    if ((v12 & 1) == 0)
      return result;
    v14 = swift_beginAccess(a1 + 16, v22, 0, 0);
    v7 = *(_QWORD *)(a1 + 16);
    __chkstk_darwin(v14, v15);
    v17 = &v24;
    swift_bridgeObjectRetain(v7);
    v9 = (void (*)(uint64_t *))sub_10016C240;
  }
  sub_100162D18(v9, (uint64_t)&v16, v7);
  return swift_bridgeObjectRelease(v7);
}

void sub_100163238(uint64_t a1, id a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t *);
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id *v14;
  id v15[3];
  void *v16;
  _QWORD v17[4];
  id v18;
  id v19;

  v19 = a2;
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    swift_beginAccess(a1 + 32, v17, 33, 0);
    v4 = sub_1000C6E04((Swift::Int *)v15, a2);
    swift_endAccess(v17);

    if ((v4 & 1) == 0)
      return;
    v5 = swift_beginAccess(a1 + 16, v17, 0, 0);
    v6 = *(_QWORD *)(a1 + 16);
    __chkstk_darwin(v5, v7);
    v14 = &v19;
    swift_bridgeObjectRetain(v6);
    v8 = (void (*)(uint64_t *))sub_10016CE88;
  }
  else
  {
    v9 = objc_msgSend(a2, "copyWithZone:", 0);
    _bridgeAnyObjectToAny(_:)(v17);
    swift_unknownObjectRelease(v9);
    v10 = sub_10006C25C(0, (unint64_t *)&qword_100347710, SEEndPoint_ptr);
    swift_dynamicCast(&v16, v17, (char *)&type metadata for Any + 8, v10, 7);
    swift_beginAccess(a1 + 32, v15, 33, 0);
    LOBYTE(v9) = sub_1000C6E04((Swift::Int *)&v18, v16);
    swift_endAccess(v15);

    if ((v9 & 1) == 0)
      return;
    v11 = swift_beginAccess(a1 + 16, v17, 0, 0);
    v6 = *(_QWORD *)(a1 + 16);
    __chkstk_darwin(v11, v12);
    v14 = &v19;
    swift_bridgeObjectRetain(v6);
    v8 = (void (*)(uint64_t *))sub_10016CEC0;
  }
  sub_100162D18(v8, (uint64_t)&v13, v6);
  swift_bridgeObjectRelease(v6);
}

uint64_t sub_100163420(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  _QWORD v13[4];

  ObjectType = swift_getObjectType(*(_QWORD *)(a1 + 16));
  result = swift_conformsToProtocol2(ObjectType, &protocol descriptor for StoreDelegate);
  if (result)
  {
    v5 = result;
    v12 = a2;
    v6 = type metadata accessor for Peer(0);
    swift_retain(a2);
    v7 = sub_100063D3C(&qword_1003482A8);
    swift_dynamicCast(&v11, &v12, v6, v7, 7);
    v8 = v11;
    v9 = objc_msgSend(v11, "copyWithZone:", 0);
    swift_unknownObjectRelease(v8);
    _bridgeAnyObjectToAny(_:)(v13);
    swift_unknownObjectRelease(v9);
    swift_dynamicCast(&v10, v13, (char *)&type metadata for Any + 8, v6, 7);
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v5 + 8))(&v10, v6, ObjectType, v5);
    return swift_release(v10);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100163530(uint64_t a1, void *a2)
{
  uint64_t ObjectType;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;
  _QWORD v9[4];

  ObjectType = swift_getObjectType(*(_QWORD *)(a1 + 16));
  v4 = swift_conformsToProtocol2(ObjectType, &protocol descriptor for StoreDelegate);
  if (v4)
  {
    v5 = v4;
    v6 = objc_msgSend(a2, "copyWithZone:", 0);
    _bridgeAnyObjectToAny(_:)(v9);
    swift_unknownObjectRelease(v6);
    v7 = sub_10006C25C(0, (unint64_t *)&qword_100347710, SEEndPoint_ptr);
    swift_dynamicCast(&v8, v9, (char *)&type metadata for Any + 8, v7, 7);
    (*(void (**)(id *, uint64_t, uint64_t, uint64_t))(v5 + 8))(&v8, v7, ObjectType, v5);

  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100163608(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t *);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  _BYTE v16[24];
  uint64_t v17;

  swift_beginAccess(a1 + 32, v16, 33, 0);
  v4 = sub_1000D3670(a2);
  result = swift_endAccess(v16);
  if (v4)
  {
    v17 = v4;
    v6 = (uint64_t *)(a1 + 16);
    v7 = a1 + 16;
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    {
      v8 = swift_beginAccess(v7, v16, 0, 0);
      v9 = *v6;
      __chkstk_darwin(v8, v10);
      v15 = &v17;
      swift_bridgeObjectRetain(v9);
      v11 = (void (*)(uint64_t *))sub_10016C17C;
    }
    else
    {
      v12 = swift_beginAccess(v7, v16, 0, 0);
      v9 = *v6;
      __chkstk_darwin(v12, v13);
      v15 = &v17;
      swift_bridgeObjectRetain(v9);
      v11 = (void (*)(uint64_t *))sub_10016C1B4;
    }
    sub_100162D18(v11, (uint64_t)&v14, v9);
    swift_bridgeObjectRelease(v9);
    return swift_release(v17);
  }
  return result;
}

void sub_100163740(uint64_t a1, void *a2)
{
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id *v14;
  _BYTE v15[24];
  id v16;

  swift_beginAccess(a1 + 32, v15, 33, 0);
  v4 = (void *)sub_1000D3F80(a2);
  swift_endAccess(v15);
  if (v4)
  {
    v16 = v4;
    v5 = (uint64_t *)(a1 + 16);
    v6 = a1 + 16;
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    {
      v7 = swift_beginAccess(v6, v15, 0, 0);
      v8 = *v5;
      __chkstk_darwin(v7, v9);
      v14 = &v16;
      swift_bridgeObjectRetain(v8);
      v10 = (void (*)(uint64_t *))sub_10016CDFC;
    }
    else
    {
      v11 = swift_beginAccess(v6, v15, 0, 0);
      v8 = *v5;
      __chkstk_darwin(v11, v12);
      v14 = &v16;
      swift_bridgeObjectRetain(v8);
      v10 = (void (*)(uint64_t *))sub_10016CE34;
    }
    sub_100162D18(v10, (uint64_t)&v13, v8);
    swift_bridgeObjectRelease(v8);

  }
}

uint64_t sub_100163878(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];
  uint64_t v21;
  _QWORD aBlock[5];
  uint64_t v23;
  _QWORD *v24;

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v21 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v5);
  v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[1] = *(_QWORD *)(a1 + 24);
  v13 = swift_allocObject(&unk_10030B288, 32, 7);
  *(_QWORD *)(v13 + 16) = a1;
  *(_QWORD *)(v13 + 24) = a2;
  aBlock[4] = sub_10016C1D8;
  v23 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100071C98;
  aBlock[3] = &unk_10030B2A0;
  v14 = _Block_copy(aBlock);
  swift_retain(a2);
  v15 = swift_retain(a1);
  static DispatchQoS.unspecified.getter(v15);
  v24 = _swiftEmptyArrayStorage;
  v16 = sub_1000639EC((unint64_t *)&qword_100344A20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v17 = sub_100063D3C((uint64_t *)&unk_100346200);
  v18 = sub_10007EF60((unint64_t *)&qword_100344A30, (uint64_t *)&unk_100346200, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v17, v18, v4, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v7, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  return swift_release(v23);
}

uint64_t sub_100163A80(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  _QWORD v13[4];

  ObjectType = swift_getObjectType(*(_QWORD *)(a1 + 16));
  result = swift_conformsToProtocol2(ObjectType, &protocol descriptor for StoreDelegate);
  if (result)
  {
    v5 = result;
    v12 = a2;
    v6 = type metadata accessor for Peer(0);
    swift_retain(a2);
    v7 = sub_100063D3C(&qword_1003482A8);
    swift_dynamicCast(&v11, &v12, v6, v7, 7);
    v8 = v11;
    v9 = objc_msgSend(v11, "copyWithZone:", 0);
    swift_unknownObjectRelease(v8);
    _bridgeAnyObjectToAny(_:)(v13);
    swift_unknownObjectRelease(v9);
    swift_dynamicCast(&v10, v13, (char *)&type metadata for Any + 8, v6, 7);
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v5 + 24))(&v10, v6, ObjectType, v5);
    return swift_release(v10);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100163B90(uint64_t a1, void *a2)
{
  uint64_t ObjectType;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;
  _QWORD v9[4];

  ObjectType = swift_getObjectType(*(_QWORD *)(a1 + 16));
  v4 = swift_conformsToProtocol2(ObjectType, &protocol descriptor for StoreDelegate);
  if (v4)
  {
    v5 = v4;
    v6 = objc_msgSend(a2, "copyWithZone:", 0);
    _bridgeAnyObjectToAny(_:)(v9);
    swift_unknownObjectRelease(v6);
    v7 = sub_10006C25C(0, (unint64_t *)&qword_100347710, SEEndPoint_ptr);
    swift_dynamicCast(&v8, v9, (char *)&type metadata for Any + 8, v7, 7);
    (*(void (**)(id *, uint64_t, uint64_t, uint64_t))(v5 + 24))(&v8, v7, ObjectType, v5);

  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100163C68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD aBlock[5];
  uint64_t v29;
  _QWORD *v30;

  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v27 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for DispatchQoS(0);
  v14 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26, v15);
  v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = *(_QWORD *)(a1 + 24);
  v18 = swift_allocObject(a3, 32, 7);
  *(_QWORD *)(v18 + 16) = a1;
  *(_QWORD *)(v18 + 24) = a2;
  aBlock[4] = a4;
  v29 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100071C98;
  aBlock[3] = a5;
  v19 = _Block_copy(aBlock);
  swift_retain(a1);
  v20 = swift_retain(a2);
  static DispatchQoS.unspecified.getter(v20);
  v30 = _swiftEmptyArrayStorage;
  v21 = sub_1000639EC((unint64_t *)&qword_100344A20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v22 = sub_100063D3C((uint64_t *)&unk_100346200);
  v23 = sub_10007EF60((unint64_t *)&qword_100344A30, (uint64_t *)&unk_100346200, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v30, v22, v23, v10, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v17, v13, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v10);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v26);
  return swift_release(v29);
}

uint64_t sub_100163E64(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD aBlock[5];
  uint64_t v30;
  _QWORD *v31;

  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v28 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for DispatchQoS(0);
  v14 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27, v15);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = *(_QWORD *)(a1 + 24);
  v18 = swift_allocObject(a3, 32, 7);
  *(_QWORD *)(v18 + 16) = a1;
  *(_QWORD *)(v18 + 24) = a2;
  aBlock[4] = a4;
  v30 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100071C98;
  aBlock[3] = a5;
  v19 = _Block_copy(aBlock);
  v20 = a2;
  v21 = swift_retain(a1);
  static DispatchQoS.unspecified.getter(v21);
  v31 = _swiftEmptyArrayStorage;
  v22 = sub_1000639EC((unint64_t *)&qword_100344A20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v23 = sub_100063D3C((uint64_t *)&unk_100346200);
  v24 = sub_10007EF60((unint64_t *)&qword_100344A30, (uint64_t *)&unk_100346200, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v23, v24, v10, v22);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v17, v13, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v13, v10);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v27);
  return swift_release(v30);
}

uint64_t sub_10016405C(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  Swift::Int *v4;
  Swift::Int v7;
  uint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t *v18;
  __objc2_prop_list *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  unsigned __int8 v30;
  void *v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v42;
  void (*v43)(_QWORD *, _QWORD);
  uint64_t v44;
  _QWORD *v45;
  Swift::Int v46;
  uint64_t v47;
  _QWORD v48[4];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 v52;
  _BYTE v53[24];
  _QWORD *v54;

  v4 = (Swift::Int *)(a3 + 32);
  if (a1)
  {
    swift_beginAccess(a3 + 32, v53, 0, 0);
    v7 = *v4;
    sub_1000DCA74((uint64_t)a1, a2);
    v8 = swift_bridgeObjectRetain(v7);
    v9 = sub_10016C4D0(v8, a1, a2);
    sub_10008F210((uint64_t)a1, a2);
    if ((*(_BYTE *)(a3 + 24) & 1) != 0)
      return v9;
  }
  else
  {
    swift_beginAccess(a3 + 32, v53, 0, 0);
    v9 = *v4;
    swift_bridgeObjectRetain(v9);
    if ((*(_BYTE *)(a3 + 24) & 1) != 0)
      return v9;
  }
  v10 = v9 & 0xC000000000000001;
  if ((v9 & 0xC000000000000001) != 0)
  {
    if (v9 < 0)
      v11 = v9;
    else
      v11 = v9 & 0xFFFFFFFFFFFFFF8;
    v12 = __CocoaSet.count.getter(v11);
    if (!v12)
    {
LABEL_25:
      swift_bridgeObjectRelease(v9);
      v45 = _swiftEmptyArrayStorage;
LABEL_26:
      v9 = sub_100145EFC((uint64_t)v45);
      swift_bridgeObjectRelease(v45);
      return v9;
    }
    v13 = v12;
    v54 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v12);
    v50 = __CocoaSet.startIndex.getter(v11);
    v51 = v14;
    v52 = 1;
    if ((v13 & 0x8000000000000000) == 0)
      goto LABEL_14;
    __break(1u);
  }
  v13 = *(_QWORD *)(v9 + 16);
  if (!v13)
    goto LABEL_25;
  v54 = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(v13);
  v50 = sub_100196CE0(v9);
  v51 = v15;
  v52 = v16 & 1;
LABEL_14:
  v17 = v9 & 0xFFFFFFFFFFFFFF8;
  if (v9 < 0)
    v17 = v9;
  v47 = v17;
  v18 = (unint64_t *)&qword_100347710;
  v19 = &KmlKeyManagementSession__properties;
  v46 = v9;
  while (1)
  {
    while (1)
    {
      sub_100196274(v50, v51, v52, v9);
      v32 = v31;
      v33 = objc_msgSend(v31, *(SEL *)&v19[474], 0);
      _bridgeAnyObjectToAny(_:)(v48);
      swift_unknownObjectRelease(v33);
      v34 = sub_10006C25C(0, v18, SEEndPoint_ptr);
      swift_dynamicCast(&v49, v48, (char *)&type metadata for Any + 8, v34, 7);
      v35 = v49;

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v36);
      v37 = v54[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v37);
      v38 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v37, v35);
      result = specialized ContiguousArray._endMutation()(v38);
      if (v10)
        break;
      v20 = v50;
      v21 = v51;
      v22 = v52;
      v23 = sub_100195EE4(v50, v51, v52, v9);
      v24 = v18;
      v25 = v23;
      v27 = v26;
      v29 = v28;
      sub_1000960E8(v20, v21, v22);
      v50 = v25;
      v51 = v27;
      v18 = v24;
      v9 = v46;
      v30 = v29 & 1;
      v10 = 0;
      v19 = &KmlKeyManagementSession__properties;
      v52 = v30;
      if (!--v13)
        goto LABEL_24;
    }
    if ((v52 & 1) == 0)
      break;
    v40 = __CocoaSet.Index.handleBitPattern.getter(v50, v51);
    if (v40)
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v40);
    else
      isUniquelyReferenced_nonNull_native = 1;
    v42 = sub_100063D3C(&qword_1003476F8);
    v43 = (void (*)(_QWORD *, _QWORD))Set.Index._asCocoa.modify(v48, v42);
    __CocoaSet.formIndex(after:isUnique:)(v44, isUniquelyReferenced_nonNull_native, v47);
    v43(v48, 0);
    if (!--v13)
    {
LABEL_24:
      sub_1000960E8(v50, v51, v52);
      v45 = v54;
      swift_bridgeObjectRelease(v9);
      goto LABEL_26;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1001643BC(uint64_t (*a1)(_QWORD *), uint64_t a2, uint64_t a3)
{
  Swift::Int *v4;
  Swift::Int v7;
  uint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t *v18;
  __objc2_prop_list *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  char v27;
  char v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v42;
  void (*v43)(_QWORD *, _QWORD);
  uint64_t v44;
  _QWORD *v45;
  Swift::Int v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  _QWORD v50[4];
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 v54;
  _BYTE v55[24];
  _QWORD *v56;

  v4 = (Swift::Int *)(a3 + 32);
  if (a1)
  {
    swift_beginAccess(a3 + 32, v55, 0, 0);
    v7 = *v4;
    sub_1000DCA74((uint64_t)a1, a2);
    v8 = swift_bridgeObjectRetain(v7);
    v9 = sub_10016CB54(v8, a1, a2);
    sub_10008F210((uint64_t)a1, a2);
    if ((*(_BYTE *)(a3 + 24) & 1) != 0)
      return v9;
  }
  else
  {
    swift_beginAccess(a3 + 32, v55, 0, 0);
    v9 = *v4;
    swift_bridgeObjectRetain(v9);
    if ((*(_BYTE *)(a3 + 24) & 1) != 0)
      return v9;
  }
  v10 = v9 & 0xC000000000000001;
  if ((v9 & 0xC000000000000001) != 0)
  {
    if (v9 < 0)
      v11 = v9;
    else
      v11 = v9 & 0xFFFFFFFFFFFFFF8;
    v12 = __CocoaSet.count.getter(v11);
    if (!v12)
    {
LABEL_25:
      swift_bridgeObjectRelease(v9);
      v45 = _swiftEmptyArrayStorage;
LABEL_26:
      v9 = sub_100146074((uint64_t)v45);
      swift_bridgeObjectRelease(v45);
      return v9;
    }
    v13 = v12;
    v56 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v12);
    v52 = __CocoaSet.startIndex.getter(v11);
    v53 = v14;
    v54 = 1;
    if ((v13 & 0x8000000000000000) == 0)
      goto LABEL_14;
    __break(1u);
  }
  v13 = *(_QWORD *)(v9 + 16);
  if (!v13)
    goto LABEL_25;
  v56 = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(v13);
  v52 = sub_100196CE0(v9);
  v53 = v15;
  v54 = v16 & 1;
LABEL_14:
  v17 = v9 & 0xFFFFFFFFFFFFFF8;
  if (v9 < 0)
    v17 = v9;
  v47 = v17;
  v18 = &qword_1003482A8;
  v19 = &KmlKeyManagementSession__properties;
  v46 = v9;
  while (1)
  {
    while (1)
    {
      v30 = sub_10019671C(v52, v53, v54, v9);
      v49 = v30;
      v31 = type metadata accessor for Peer(0);
      swift_retain(v30);
      v32 = sub_100063D3C(v18);
      swift_dynamicCast(&v48, &v49, v31, v32, 7);
      v33 = v48;
      v34 = objc_msgSend(v48, *(SEL *)&v19[474], 0);
      swift_unknownObjectRelease(v33);
      _bridgeAnyObjectToAny(_:)(v50);
      swift_unknownObjectRelease(v34);
      swift_dynamicCast(&v51, v50, (char *)&type metadata for Any + 8, v31, 7);
      v35 = v51;
      v36 = swift_release(v30);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v36);
      v37 = v56[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v37);
      v38 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v37, v35);
      result = specialized ContiguousArray._endMutation()(v38);
      if (v10)
        break;
      v20 = v52;
      v21 = v53;
      v22 = v54;
      v23 = sub_100195EE4(v52, v53, v54, v9);
      v25 = v24;
      v26 = v18;
      v28 = v27;
      sub_1000960E8(v20, v21, v22);
      v52 = v23;
      v53 = v25;
      v10 = 0;
      v19 = &KmlKeyManagementSession__properties;
      v29 = v28 & 1;
      v18 = v26;
      v9 = v46;
      v54 = v29;
      if (!--v13)
        goto LABEL_24;
    }
    if ((v54 & 1) == 0)
      break;
    v40 = __CocoaSet.Index.handleBitPattern.getter(v52, v53);
    if (v40)
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v40);
    else
      isUniquelyReferenced_nonNull_native = 1;
    v42 = sub_100063D3C(&qword_100345380);
    v43 = (void (*)(_QWORD *, _QWORD))Set.Index._asCocoa.modify(v50, v42);
    __CocoaSet.formIndex(after:isUnique:)(v44, isUniquelyReferenced_nonNull_native, v47);
    v43(v50, 0);
    if (!--v13)
    {
LABEL_24:
      sub_1000960E8(v52, v53, v54);
      v45 = v56;
      swift_bridgeObjectRelease(v9);
      goto LABEL_26;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10016474C(id *a1)
{
  id v1;
  id v2;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v1 = *a1;
  if (objc_msgSend(*a1, "endPointType") != (id)4)
    return 0;
  v2 = objc_msgSend(v1, "revocationAttestation");
  if (v2)
  {
    v3 = v2;
    v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v2);
    v6 = v5;

    sub_100063CD0(v4, v6);
    return 0;
  }
  return 1;
}

uint64_t sub_1001647D0()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for LyonBLE(0);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  result = sub_1001648AC();
  qword_100354D48 = result;
  return result;
}

void sub_10016480C(uint64_t a1)
{
  sub_10016484C(a1, 0x80000001002BE790, -80, &qword_1003480C0);
}

void sub_10016482C(uint64_t a1)
{
  sub_10016484C(a1, 0x80000001002BE800, -120, &qword_1003480C8);
}

void sub_10016484C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;

  sub_100153718(a1);
  *a4 = v5;
}

uint64_t sub_1001648AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(char *, uint64_t, uint64_t);
  uint64_t result;
  void (*v27)(uint64_t, char *, uint64_t);
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD aBlock[5];
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  __int16 v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  __int16 v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  __int16 v59;

  v1 = v0;
  v42 = type metadata accessor for DispatchQoS.QoSClass(0);
  v2 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42, v3);
  v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100063D3C((uint64_t *)&unk_1003465E0);
  v8 = __chkstk_darwin(v6, v7);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v11);
  v13 = (char *)&v41 - v12;
  *(_WORD *)(v0 + 16) = 0;
  v14 = String.init(cString:)(SESLoggingSubsystem);
  v15 = Logger.init(subsystem:category:)(v14);
  v16 = OBJC_IVAR____TtC10seserviced7LyonBLE_disableAOPZoneDetection;
  v55 = 0xD000000000000014;
  v56 = 0x80000001002BA5B0;
  v57 = 0xD000000000000025;
  v58 = 0x80000001002BE820;
  v59 = 256;
  sub_10015348C(v15);
  *(_BYTE *)(v0 + v16) = v17 & 1;
  v18 = OBJC_IVAR____TtC10seserviced7LyonBLE_disablePeripheralTags;
  v50 = 0xD000000000000014;
  v51 = 0x80000001002BA5B0;
  v52 = 0xD000000000000022;
  v53 = 0x80000001002BE850;
  v54 = 256;
  sub_10015348C(v17);
  *(_BYTE *)(v0 + v18) = v19 & 1;
  v20 = OBJC_IVAR____TtC10seserviced7LyonBLE_disableScanFiltering;
  v45 = 0xD000000000000014;
  v46 = 0x80000001002BA5B0;
  v47 = 0xD00000000000001CLL;
  v48 = 0x80000001002BE880;
  v49 = 256;
  sub_10015348C(v19);
  *(_BYTE *)(v0 + v20) = v21 & 1;
  v22 = (_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonServiceUUID);
  *v22 = 843466310;
  v22[1] = 0xE400000000000000;
  UUID.init(uuidString:)(0xD000000000000024, 0x80000001002BE8A0);
  v23 = type metadata accessor for UUID(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48);
  result = v25(v13, 1, v23);
  if ((_DWORD)result == 1)
  {
    __break(1u);
    goto LABEL_7;
  }
  v27 = *(void (**)(uint64_t, char *, uint64_t))(v24 + 32);
  v27(v1 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonPSMCharacteristicSupportedUwbProtocol, v13, v23);
  UUID.init(uuidString:)(0xD000000000000024, 0x80000001002BE8D0);
  result = v25(v10, 1, v23);
  if ((_DWORD)result == 1)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  v27(v1 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonSelectedProtocolVersion, v10, v23);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC10seserviced7LyonBLE_readerGroupIdentifierOffset) = 2;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC10seserviced7LyonBLE_serviceDataLength) = 24;
  v28 = (_QWORD *)(v1 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonAdvDeviceAddress);
  *v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBAdvertisementDataDeviceAddress);
  v28[1] = v29;
  v30 = (_QWORD *)(v1 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonAdvIsConnectable);
  *v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBAdvertisementDataIsConnectable);
  v30[1] = v31;
  v32 = (_QWORD *)(v1 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonAdvServiceData);
  *v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBAdvertisementDataServiceDataKey);
  v32[1] = v33;
  v34 = (_QWORD *)(v1 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonServiceDataUUIDIdentifier);
  *v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBAdvertisementDataServiceUUIDsKey);
  v34[1] = v35;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC10seserviced7LyonBLE_rssiThresholdCloserPlaceholder) = -80;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC10seserviced7LyonBLE_rssiThresholdFurtherPlaceholder) = -85;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC10seserviced7LyonBLE_scanDutyCycle) = 6;
  v36 = OBJC_IVAR____TtC10seserviced7LyonBLE_minRSSI;
  if (qword_100344678 != -1)
    swift_once(&qword_100344678, sub_10016482C);
  *(_QWORD *)(v1 + v36) = qword_1003480C8;
  *(_OWORD *)(v1 + OBJC_IVAR____TtC10seserviced7LyonBLE_readerGroupIdentifierMask) = xmmword_1002888D0;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC10seserviced7LyonBLE_scanningExpressReaderGroupIdentifiers) = 0;
  sub_10006C25C(0, (unint64_t *)&qword_1003461A0, OS_dispatch_queue_ptr);
  v37 = v42;
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v5, enum case for DispatchQoS.QoSClass.default(_:), v42);
  v38 = (void *)static OS_dispatch_queue.global(qos:)(v5);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v37);
  aBlock[4] = sub_10016C734;
  v44 = v1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10017BF6C;
  aBlock[3] = &unk_10030B3B8;
  v39 = _Block_copy(aBlock);
  v40 = v44;
  swift_retain(v1);
  swift_release(v40);
  os_state_add_handler(v38, v39);
  _Block_release(v39);

  return v1;
}

_DWORD *sub_100164D54()
{
  uint64_t v0;
  char v1;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v3;
  Class isa;
  _DWORD *v5;
  _OWORD v7[2];
  __int128 v8;
  void *v9;

  v1 = *(_BYTE *)(v0 + 16);
  v9 = &type metadata for Bool;
  LOBYTE(v8) = v1;
  sub_10006C2B4(&v8, v7);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_10018DEC0(v7, 0x6E696E6E75527369, 0xE900000000000067, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease(0x8000000000000000);
  v3 = sub_10017D088((uint64_t)&_swiftEmptyDictionarySingleton);
  swift_bridgeObjectRelease(&_swiftEmptyDictionarySingleton);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v3);
  v5 = sub_100015734((uint64_t)"lyonble.state", (uint64_t)isa);

  return v5;
}

void sub_100164E3C(uint64_t a1, char a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = v3;
  if (a1 && *(_QWORD *)(a1 + 16))
  {
    if ((a3 & 1) != 0)
      v6 = 0;
    else
      v6 = 6;
    if ((a2 & 1) != 0)
    {
      if (qword_100344670 != -1)
        swift_once(&qword_100344670, sub_10016480C);
      v7 = &qword_1003480C0;
    }
    else
    {
      if (qword_100344678 != -1)
        swift_once(&qword_100344678, sub_10016482C);
      v7 = &qword_1003480C8;
    }
    v9 = *v7;
    v10 = OBJC_IVAR____TtC10seserviced7LyonBLE_minRSSI;
    v11 = &unk_100348000;
    if (*v7 != *(_QWORD *)(v3 + OBJC_IVAR____TtC10seserviced7LyonBLE_minRSSI)
      || v6 != *(_QWORD *)(v3 + OBJC_IVAR____TtC10seserviced7LyonBLE_scanDutyCycle)
      || (v12 = *(_QWORD *)(v3 + OBJC_IVAR____TtC10seserviced7LyonBLE_scanningExpressReaderGroupIdentifiers)) == 0
      || (swift_bridgeObjectRetain(a1),
          swift_bridgeObjectRetain(v12),
          v13 = sub_10016A5DC(a1, v12),
          swift_bridgeObjectRelease(a1),
          swift_bridgeObjectRelease(v12),
          (v13 & 1) == 0))
    {
      v14 = swift_retain(v4);
      v15 = Logger.logObject.getter(v14);
      v16 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v15, v16))
      {
        v17 = swift_slowAlloc(22, -1);
        *(_DWORD *)v17 = 134218240;
        v24 = *(_QWORD *)(v4 + OBJC_IVAR____TtC10seserviced7LyonBLE_scanDutyCycle);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v17 + 4, v17 + 12);
        swift_release(v4);
        *(_WORD *)(v17 + 12) = 2048;
        v24 = v6;
        v11 = (_QWORD *)&unk_100348000;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v17 + 14, v17 + 22);
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "LyonBLE scan duty cycle changing from %ld to %ld", (uint8_t *)v17, 0x16u);
        swift_slowDealloc(v17, -1, -1);
      }
      else
      {
        swift_release(v4);
      }

      v18 = swift_retain(v4);
      v19 = Logger.logObject.getter(v18);
      v20 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v19, v20))
      {
        v21 = swift_slowAlloc(22, -1);
        *(_DWORD *)v21 = 134218240;
        v24 = *(_QWORD *)(v4 + v10);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v21 + 4, v21 + 12);
        swift_release(v4);
        *(_WORD *)(v21 + 12) = 2048;
        v24 = v9;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v21 + 14, v21 + 22);
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "LyonBLE minRSSI changing from %ld to %ld", (uint8_t *)v21, 0x16u);
        swift_slowDealloc(v21, -1, -1);
      }
      else
      {
        swift_release(v4);
      }

      *(_QWORD *)(v4 + OBJC_IVAR____TtC10seserviced7LyonBLE_scanDutyCycle) = v6;
      *(_QWORD *)(v4 + v10) = v9;
      v22 = v11[42];
      v23 = *(_QWORD *)(v4 + v22);
      *(_QWORD *)(v4 + v22) = a1;
      swift_bridgeObjectRetain(a1);
      swift_bridgeObjectRelease(v23);
      if (*(_BYTE *)(v4 + 17) == 1)
      {
        if (qword_1003445A0 != -1)
          swift_once(&qword_1003445A0, sub_1000B26B0);
        sub_1000AEF70(*(_QWORD *)(v4 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonServiceUUID), *(_QWORD *)(v4 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonServiceUUID + 8));
        *(_BYTE *)(v4 + 17) = 0;
      }
      sub_100165258(a1);
    }
  }
  else
  {
    v8 = *(_QWORD *)(v3 + OBJC_IVAR____TtC10seserviced7LyonBLE_scanningExpressReaderGroupIdentifiers);
    *(_QWORD *)(v3 + OBJC_IVAR____TtC10seserviced7LyonBLE_scanningExpressReaderGroupIdentifiers) = 0;
    swift_bridgeObjectRelease(v8);
    if (*(_BYTE *)(v3 + 17) == 1)
    {
      if (qword_1003445A0 != -1)
        swift_once(&qword_1003445A0, sub_1000B26B0);
      sub_1000AEF70(*(_QWORD *)(v3 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonServiceUUID), *(_QWORD *)(v3 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonServiceUUID + 8));
      *(_BYTE *)(v3 + 17) = 0;
    }
  }
}

void sub_100165258(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  const char *v6;
  uint64_t v8;
  uint64_t inited;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, uint64_t);
  char v43;
  _UNKNOWN **v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  unint64_t v55;
  NSObject *oslog;
  uint64_t v57;
  uint64_t v58;
  _BYTE v59[184];

  v2 = v1;
  if ((*(_BYTE *)(v1 + 17) & 1) != 0)
  {
    oslog = Logger.logObject.getter(a1);
    v4 = static os_log_type_t.error.getter(oslog, v3);
    if (os_log_type_enabled(oslog, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v5 = 0;
      v6 = "Scanning already active";
LABEL_11:
      _os_log_impl((void *)&_mh_execute_header, oslog, v4, v6, v5, 2u);
      swift_slowDealloc(v5, -1, -1);
      goto LABEL_12;
    }
    goto LABEL_12;
  }
  if (!*(_QWORD *)(a1 + 16))
  {
    oslog = Logger.logObject.getter(a1);
    v4 = static os_log_type_t.error.getter(oslog, v16);
    if (os_log_type_enabled(oslog, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v5 = 0;
      v6 = "Request to start scanning with no reader group identifiers";
      goto LABEL_11;
    }
LABEL_12:

    return;
  }
  v8 = sub_100063D3C((uint64_t *)&unk_100346040);
  inited = swift_initStackObject(v8, v59);
  *(_OWORD *)(inited + 16) = xmmword_100288AC0;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CBConnectPeripheralOptionEnableControllerBTClockUpdates);
  *(_QWORD *)(inited + 40) = v10;
  *(_QWORD *)(inited + 72) = &type metadata for Bool;
  *(_BYTE *)(inited + 48) = 1;
  *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(CBConnectPeripheralOptionSetConnectScanDutyCycle);
  *(_QWORD *)(inited + 88) = v11;
  v12 = OBJC_IVAR____TtC10seserviced7LyonBLE_scanDutyCycle;
  v13 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10seserviced7LyonBLE_scanDutyCycle);
  *(_QWORD *)(inited + 120) = &type metadata for Int;
  *(_QWORD *)(inited + 96) = v13;
  *(_QWORD *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)(CBConnectPeripheralOptionConnectionUseCase);
  *(_QWORD *)(inited + 136) = v14;
  *(_QWORD *)(inited + 168) = &type metadata for UInt32;
  *(_DWORD *)(inited + 144) = 655360;
  v55 = sub_10017C218(inited);
  if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC10seserviced7LyonBLE_disableScanFiltering) & 1) != 0)
    goto LABEL_8;
  v15 = *(_QWORD *)(a1 + 16);
  if (qword_1003445A0 != -1)
  {
    swift_once(&qword_1003445A0, sub_1000B26B0);
    if (v15 > 7)
      goto LABEL_8;
LABEL_14:
    swift_retain(v2);
    v54 = sub_10016BEA0(a1);
    swift_release(v2);
    goto LABEL_15;
  }
  if (v15 <= 7)
    goto LABEL_14;
LABEL_8:
  v54 = 0;
LABEL_15:
  v17 = sub_100063D3C((uint64_t *)&unk_100348920);
  v18 = swift_allocObject(v17, 80, 7);
  *(_OWORD *)(v18 + 16) = xmmword_100288AC0;
  v19 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonAdvDeviceAddress + 8);
  *(_QWORD *)(v18 + 32) = *(_QWORD *)(v2 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonAdvDeviceAddress);
  *(_QWORD *)(v18 + 40) = v19;
  v20 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonAdvIsConnectable + 8);
  *(_QWORD *)(v18 + 48) = *(_QWORD *)(v2 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonAdvIsConnectable);
  *(_QWORD *)(v18 + 56) = v20;
  v21 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonAdvServiceData + 8);
  *(_QWORD *)(v18 + 64) = *(_QWORD *)(v2 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonAdvServiceData);
  *(_QWORD *)(v18 + 72) = v21;
  swift_retain_n(v2, 4);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v20);
  v22 = swift_bridgeObjectRetain(v21);
  v23 = Logger.logObject.getter(v22);
  v27 = static os_log_type_t.info.getter(v23, v24, v25, v26);
  if (os_log_type_enabled(v23, v27))
  {
    v28 = swift_slowAlloc(22, -1);
    *(_DWORD *)v28 = 134218240;
    v29 = *(_QWORD *)(v2 + v12);
    swift_release(v2);
    v57 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v28 + 4, v28 + 12);
    swift_release(v2);
    *(_WORD *)(v28 + 12) = 2048;
    v30 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10seserviced7LyonBLE_minRSSI);
    swift_release(v2);
    v57 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v28 + 14, v28 + 22);
    swift_release(v2);
    _os_log_impl((void *)&_mh_execute_header, v23, v27, "LyonBLE starting scanning with %ld, minRSSI %ld", (uint8_t *)v28, 0x16u);
    swift_slowDealloc(v28, -1, -1);

  }
  else
  {

    swift_release_n(v2, 4);
  }
  if (qword_1003445A0 != -1)
    swift_once(&qword_1003445A0, sub_1000B26B0);
  v31 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonServiceUUID);
  v32 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonServiceUUID + 8);
  v33 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10seserviced7LyonBLE_minRSSI);
  v34 = sub_100063D3C(&qword_100345398);
  v35 = type metadata accessor for UUID(0);
  v36 = *(_QWORD *)(v35 - 8);
  v37 = *(_QWORD *)(v36 + 72);
  v38 = *(unsigned __int8 *)(v36 + 80);
  v39 = (v38 + 32) & ~v38;
  v40 = swift_allocObject(v34, v39 + 2 * v37, v38 | 7);
  *(_OWORD *)(v40 + 16) = xmmword_1002888F0;
  v41 = v40 + v39;
  v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16);
  v42(v41, v2 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonPSMCharacteristicSupportedUwbProtocol, v35);
  v42(v41 + v37, v2 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonSelectedProtocolVersion, v35);
  v43 = *(_BYTE *)(v2 + OBJC_IVAR____TtC10seserviced7LyonBLE_disableAOPZoneDetection);
  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC10seserviced7LyonBLE_disablePeripheralTags))
    v44 = 0;
  else
    v44 = &off_100305280;
  v45 = type metadata accessor for DSKBLE.BLEScanRequest();
  swift_allocObject(v45, 224, 7);
  swift_retain_n(v2, 7);
  swift_bridgeObjectRetain(v32);
  *((_QWORD *)&v53 + 1) = sub_10016C174;
  *((_QWORD *)&v52 + 1) = sub_10016C16C;
  *(_QWORD *)&v53 = v2;
  *((_QWORD *)&v51 + 1) = sub_10016C164;
  *(_QWORD *)&v52 = v2;
  *((_QWORD *)&v50 + 1) = sub_10016C15C;
  *(_QWORD *)&v51 = v2;
  *((_QWORD *)&v49 + 1) = sub_10016C158;
  *(_QWORD *)&v50 = v2;
  *((_QWORD *)&v48 + 1) = sub_10016C144;
  *(_QWORD *)&v49 = v2;
  *((_QWORD *)&v47 + 1) = sub_10016C130;
  *(_QWORD *)&v48 = v2;
  *(_QWORD *)&v47 = v44;
  v46 = sub_1000BB544(v31, v32, v33, v18, v40, 0, v54, v55, 0, 0, 1, (v43 & 1) == 0, v47, v48, v49, v50, v51, v52, v53,
          v2);
  sub_1000AE2DC(v46);
  swift_release(v46);
  *(_BYTE *)(v2 + 17) = 1;
}

void sub_100165844(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

unint64_t sub_1001658A4()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (BYTE6(v0) == 8)
  {
    v3 = type metadata accessor for __DataStorage(0);
    swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
    v28 = 0x1000000000;
    v29 = __DataStorage.init(length:)(16);
    sub_10016B11C((int *)&v28, 0);
    v30 = v28;
    v31 = v29 | 0x4000000000000000;
    sub_100063C8C(v1, v0);
    sub_10016B268(2, 2, v1, v0);
    sub_100063CD0(v1, v0);
    v4 = (uint64_t *)(v2 + OBJC_IVAR____TtC10seserviced7LyonBLE_readerGroupIdentifierMask);
    swift_beginAccess(v2 + OBJC_IVAR____TtC10seserviced7LyonBLE_readerGroupIdentifierMask, &v28, 1, 0);
    v5 = v4[1];
    if (v5 >> 60 == 15)
    {
      swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
      v26 = 0x1000000000;
      v27 = __DataStorage.init(length:)(16);
      sub_10016B11C((int *)&v26, 0);
      v6 = v27 | 0x4000000000000000;
      v7 = *v4;
      v8 = v4[1];
      *v4 = v26;
      v4[1] = v6;
      sub_10006B9B4(v7, v8);
      swift_beginAccess(v4, &v26, 33, 0);
      if ((unint64_t)v4[1] >> 60 == 15)
      {
        __break(1u);
      }
      else
      {
        sub_10016B268(2, 2, -1, 0x8000000000000);
        swift_endAccess(&v26);
        v5 = v4[1];
        if (v5 >> 60 != 15)
          goto LABEL_5;
      }
      __break(1u);
      JUMPOUT(0x100165C98);
    }
LABEL_5:
    v0 = *v4;
    sub_100063C8C(v0, v5);
    return v0;
  }
  sub_100063C8C(v1, v0);
  v9 = sub_100063C8C(v1, v0);
  v10 = Logger.logObject.getter(v9);
  v12 = static os_log_type_t.error.getter(v10, v11);
  if (os_log_type_enabled(v10, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v25 = swift_slowAlloc(32, -1);
    v28 = v25;
    *(_DWORD *)v13 = 136315138;
    sub_1001BD2CC(v1, v0);
    v15 = v14;
    v16 = sub_100063D3C((uint64_t *)&unk_100346060);
    v17 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
    v18 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v16, v17);
    v20 = v19;
    swift_bridgeObjectRelease(v15);
    v26 = sub_1001C56EC(v18, v20, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease(v20);
    sub_100063CD0(v1, v0);
    sub_100063CD0(v1, v0);
    _os_log_impl((void *)&_mh_execute_header, v10, v12, "Invalid reader group identifier %s", v13, 0xCu);
    v0 = v25;
    swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v13, -1, -1);

  }
  else
  {

    sub_100063CD0(v1, v0);
    sub_100063CD0(v1, v0);
  }
  v21 = sub_1000AAC04();
  v22 = swift_allocError(&type metadata for DSKBLE.BLEError, v21, 0, 0);
  *v23 = 2;
  swift_willThrow(v22);
  return v0;
}

uint64_t sub_100165CA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  os_unfair_lock_s *v36;
  os_unfair_lock_s *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  NSObject *v51;
  uint64_t v52;
  os_log_type_t v53;
  uint8_t *v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  char v58;
  uint64_t v60;
  NSObject *v61;
  uint64_t v62;
  os_log_type_t v63;
  uint8_t *v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _QWORD v69[17];
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD v78[2];
  __int128 v79;
  __int128 v80;

  v6 = v5;
  v7 = v4;
  v73 = a4;
  v9 = type metadata accessor for UUID(0);
  v71 = *(_QWORD *)(v9 - 8);
  v72 = v9;
  __chkstk_darwin(v9, v10);
  v74 = (char *)v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Date(0);
  v76 = *(_QWORD *)(v12 - 8);
  v77 = v12;
  __chkstk_darwin(v12, v13);
  v75 = (char *)v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchPredicate(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15, v17);
  v19 = (_QWORD *)((char *)v69 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v20 = qword_100354EE8;
  *v19 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v16 + 104))(v19, enum case for DispatchPredicate.onQueue(_:), v15);
  v21 = (id)v20;
  LOBYTE(v20) = _dispatchPreconditionTest(_:)(v19);
  v22 = (*(uint64_t (**)(_QWORD *, uint64_t))(v16 + 8))(v19, v15);
  if ((v20 & 1) == 0)
  {
    __break(1u);
    JUMPOUT(0x1001666F8);
  }
  v23 = Logger.logObject.getter(v22);
  v27 = static os_log_type_t.info.getter(v23, v24, v25, v26);
  if (os_log_type_enabled(v23, v27))
  {
    v28 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, v27, "Lyon received onDiscovery", v28, 2u);
    swift_slowDealloc(v28, -1, -1);
  }

  if (!*(_QWORD *)(a3 + 16))
  {
    v79 = 0u;
    v80 = 0u;
LABEL_29:
    v33 = sub_100098C7C((uint64_t)&v79);
    goto LABEL_30;
  }
  v29 = *(_QWORD *)(v7 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonAdvIsConnectable);
  v30 = *(_QWORD *)(v7 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonAdvIsConnectable + 8);
  swift_bridgeObjectRetain(v30);
  v31 = sub_100187ED0(v29, v30);
  if ((v32 & 1) != 0)
  {
    sub_100096CB0(*(_QWORD *)(a3 + 56) + 32 * v31, (uint64_t)&v79);
  }
  else
  {
    v79 = 0u;
    v80 = 0u;
  }
  swift_bridgeObjectRelease(v30);
  if (!*((_QWORD *)&v80 + 1))
    goto LABEL_29;
  v33 = swift_dynamicCast(v78, &v79, (char *)&type metadata for Any + 8, &type metadata for Bool, 6);
  if ((v33 & 1) != 0 && LOBYTE(v78[0]) == 1)
  {
    if (qword_1003445B8 != -1)
      v33 = swift_once(&qword_1003445B8, sub_1000EAA4C);
    __chkstk_darwin(v33, v34);
    v69[-4] = sub_10016474C;
    v69[-3] = 0;
    v69[-2] = v35;
    v37 = v36 + 4;
    os_unfair_lock_lock(v36 + 4);
    sub_10016C2C0((uint64_t *)&v79);
    if (v6)
    {
      os_unfair_lock_unlock(v37);
      __break(1u);
      JUMPOUT(0x100168018);
    }
    v69[16] = 0;
    v70 = v79;
    os_unfair_lock_unlock(v37);
    if (qword_100344608 != -1)
      swift_once(&qword_100344608, sub_100141A78);
    v69[15] = "fastTxAttemptedCount";
    v38 = sub_1000E848C(0xD000000000000012, 0x80000001002BA410);
    if (v39 >> 60 == 15)
    {
      __break(1u);
      JUMPOUT(0x100167F98);
    }
    v40 = v38;
    v41 = v39;
    v42 = sub_100143DF4(v38, v39);
    sub_10006B9B4(v40, v41);
    v43 = *(_QWORD *)(v42 + 24);
    swift_bridgeObjectRetain(v43);
    swift_release(v42);
    v44 = v70;
    if ((v70 & 0xC000000000000001) != 0)
    {
      if (v70 < 0)
        v45 = v70;
      else
        v45 = v70 & 0xFFFFFFFFFFFFFF8;
      if (__CocoaSet.count.getter(v45))
      {
LABEL_25:
        v46 = *(_QWORD *)(v43 + 16);
        swift_bridgeObjectRelease(v43);
        if (v46)
        {
          if (*(_QWORD *)(a3 + 16))
          {
            v47 = *(_QWORD *)(v7 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonAdvDeviceAddress);
            v48 = *(_QWORD *)(v7 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonAdvDeviceAddress + 8);
            swift_bridgeObjectRetain(v48);
            v49 = sub_100187ED0(v47, v48);
            if ((v50 & 1) != 0)
            {
              sub_100096CB0(*(_QWORD *)(a3 + 56) + 32 * v49, (uint64_t)&v79);
            }
            else
            {
              v79 = 0u;
              v80 = 0u;
            }
            swift_bridgeObjectRelease(v48);
            if (*((_QWORD *)&v80 + 1))
            {
              if ((swift_dynamicCast(v78, &v79, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) != 0)
                __asm { BR              X10 }
              v66 = swift_bridgeObjectRelease(v44);
LABEL_45:
              v61 = Logger.logObject.getter(v66);
              v63 = static os_log_type_t.error.getter(v61, v67);
              if (os_log_type_enabled(v61, v63))
              {
                v64 = (uint8_t *)swift_slowAlloc(2, -1);
                *(_WORD *)v64 = 0;
                v65 = "Failed to retrieve valid AdvA";
                goto LABEL_47;
              }
              goto LABEL_48;
            }
          }
          else
          {
            v79 = 0u;
            v80 = 0u;
          }
          swift_bridgeObjectRelease(v44);
          v66 = sub_100098C7C((uint64_t)&v79);
          goto LABEL_45;
        }
LABEL_36:
        v60 = swift_bridgeObjectRelease(v44);
        v61 = Logger.logObject.getter(v60);
        v63 = static os_log_type_t.error.getter(v61, v62);
        if (os_log_type_enabled(v61, v63))
        {
          v64 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v64 = 0;
          v65 = "No valid endpoints found";
LABEL_47:
          _os_log_impl((void *)&_mh_execute_header, v61, v63, v65, v64, 2u);
          swift_slowDealloc(v64, -1, -1);
        }
LABEL_48:

        v68 = sub_1000AAC04();
        v56 = swift_allocError(&type metadata for DSKBLE.BLEError, v68, 0, 0);
        v58 = 2;
        goto LABEL_33;
      }
    }
    else if (*(_QWORD *)(v70 + 16))
    {
      goto LABEL_25;
    }
    swift_bridgeObjectRelease(v43);
    goto LABEL_36;
  }
LABEL_30:
  v51 = Logger.logObject.getter(v33);
  v53 = static os_log_type_t.error.getter(v51, v52);
  if (os_log_type_enabled(v51, v53))
  {
    v54 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v54 = 0;
    _os_log_impl((void *)&_mh_execute_header, v51, v53, "Lyon received connection not connectable", v54, 2u);
    swift_slowDealloc(v54, -1, -1);
  }

  v55 = sub_1000AAC04();
  v56 = swift_allocError(&type metadata for DSKBLE.BLEError, v55, 0, 0);
  v58 = 3;
LABEL_33:
  *v57 = v58;
  return swift_willThrow(v56);
}

uint64_t sub_100168038(uint64_t a1, __objc2_class **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  __objc2_class **v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t v54;
  uint8_t *v55;
  uint64_t v56;
  _BYTE v57[128];
  uint64_t v58;

  v3 = v2;
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (uint64_t *)((char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v11 = qword_100354EE8;
  *v10 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  v12 = (id)v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v10);
  v13 = (*(uint64_t (**)(_QWORD *, uint64_t))(v7 + 8))(v10, v6);
  if ((v11 & 1) == 0)
  {
    __break(1u);
    JUMPOUT(0x100168C94);
  }
  v14 = Logger.logObject.getter(v13);
  v18 = static os_log_type_t.info.getter(v14, v15, v16, v17);
  if (os_log_type_enabled(v14, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v18, "Lyon onCharacteristics", v19, 2u);
    swift_slowDealloc(v19, -1, -1);
  }

  if (*a2 == _TtC10seserviced8LyonPeer && a2)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      v20 = v3 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonPSMCharacteristicSupportedUwbProtocol;
      swift_retain(a2);
      v21 = sub_100187E34(v20);
      if ((v22 & 1) != 0)
        __asm { BR              X9 }
    }
    else
    {
      swift_retain(a2);
    }
    v36 = swift_bridgeObjectRetain_n(a1, 2);
    v37 = Logger.logObject.getter(v36);
    v39 = static os_log_type_t.error.getter(v37, v38);
    if (os_log_type_enabled(v37, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc(12, -1);
      v41 = swift_slowAlloc(32, -1);
      v58 = v41;
      *(_DWORD *)v40 = 136315138;
      v55 = v40 + 4;
      v42 = a2;
      v43 = type metadata accessor for UUID(0);
      v44 = sub_1000639EC((unint64_t *)&unk_100347730, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v45 = swift_bridgeObjectRetain(a1);
      v46 = Dictionary.description.getter(v45, v43, &type metadata for Data, v44);
      v48 = v47;
      swift_bridgeObjectRelease(a1);
      v49 = v46;
      a2 = v42;
      v56 = sub_1001C56EC(v49, v48, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57, v55, v40 + 12);
      swift_bridgeObjectRelease_n(a1, 2);
      swift_bridgeObjectRelease(v48);
      _os_log_impl((void *)&_mh_execute_header, v37, v39, "PSMCharacteristicSupportedUwbProtocol not found %s", v40, 0xCu);
      swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v40, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(a1, 2);
    }

    v50 = sub_1000AAC04();
    v51 = swift_allocError(&type metadata for DSKBLE.BLEError, v50, 0, 0);
    *v52 = 2;
    swift_willThrow(v51);
    swift_release(a2);
  }
  else
  {
    v23 = swift_retain_n(a2, 2);
    v24 = Logger.logObject.getter(v23);
    v26 = static os_log_type_t.error.getter(v24, v25);
    if (os_log_type_enabled(v24, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(12, -1);
      v28 = swift_slowAlloc(32, -1);
      *(_DWORD *)v27 = 136315138;
      v58 = v28;
      v29 = swift_retain(a2);
      v30 = UUID.uuidString.getter(v29);
      v32 = v31;
      swift_release(a2);
      v56 = sub_1001C56EC(v30, v32, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57, v27 + 4, v27 + 12);
      swift_release_n(a2, 2);
      swift_bridgeObjectRelease(v32);
      _os_log_impl((void *)&_mh_execute_header, v24, v26, "Missing Lyon peer %s", v27, 0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);
    }
    else
    {
      swift_release_n(a2, 2);
    }

    v33 = sub_1000AAC04();
    v34 = swift_allocError(&type metadata for DSKBLE.BLEError, v33, 0, 0);
    *v35 = 2;
    swift_willThrow(v34);
  }
  return v55;
}

void sub_100168D30(uint64_t a1, NSObject *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  os_unfair_lock_s *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33[2];

  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (uint64_t *)((char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v9 = qword_100354EE8;
  *v8 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  v11 = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_17:
    swift_once(&qword_1003447A0, sub_1001EDCA4);
    goto LABEL_11;
  }
  v12 = Logger.logObject.getter(v11);
  v16 = static os_log_type_t.info.getter(v12, v13, v14, v15);
  if (os_log_type_enabled(v12, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v16, "Lyon onChannelOpen", v17, 2u);
    swift_slowDealloc(v17, -1, -1);
  }

  if (a1)
  {
    v18 = swift_retain_n(a2, 2);
    v19 = Logger.logObject.getter(v18);
    v21 = static os_log_type_t.error.getter(v19, v20);
    if (os_log_type_enabled(v19, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      v23 = swift_slowAlloc(32, -1);
      *(_DWORD *)v22 = 136315138;
      v33[0] = v23;
      v24 = swift_retain(a2);
      v25 = UUID.uuidString.getter(v24);
      v27 = v26;
      swift_release(a2);
      v32 = sub_1001C56EC(v25, v27, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, v33, v22 + 4, v22 + 12);
      swift_bridgeObjectRelease(v27);
      swift_release_n(a2, 2);
      _os_log_impl((void *)&_mh_execute_header, v19, v21, "Error during channel open attempt to  %s", v22, 0xCu);
      swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v22, -1, -1);

    }
    else
    {

      swift_release_n(a2, 2);
    }
    return;
  }
  if ((__objc2_class *)a2->isa != _TtC10seserviced8LyonPeer)
    return;
  v28 = qword_1003447A0;
  swift_retain(a2);
  if (v28 != -1)
    goto LABEL_17;
LABEL_11:
  v29 = off_10034A560;
  v30 = (os_unfair_lock_s *)(*((_QWORD *)off_10034A560 + 5) + 16);
  os_unfair_lock_lock(v30);
  sub_100163010((uint64_t)v29, (uint64_t)a2);
  os_unfair_lock_unlock(v30);
  if (qword_100344568 != -1)
    swift_once(&qword_100344568, sub_100073158);
  sub_10007AE98(a2);
  swift_release(a2);
}

uint64_t sub_1001690AC(uint64_t a1, unint64_t a2, __objc2_class **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  id v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (uint64_t *)((char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v11 = qword_100354EE8;
  *v10 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  v12 = (id)v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v10);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v7 + 8))(v10, v6);
  if ((v11 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    swift_once(&qword_100344568, sub_100073158);
    goto LABEL_6;
  }
  if (*a3 != _TtC10seserviced8LyonPeer)
    return result;
  v14 = qword_100344568;
  swift_retain(a3);
  if (v14 != -1)
    goto LABEL_9;
LABEL_6:
  sub_100073F84(a1, a2, (uint64_t)a3);
  return swift_release(a3);
}

uint64_t sub_100169200(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  uint64_t result;
  uint64_t v10;
  void *v11;
  os_unfair_lock_s *v12;
  uint64_t v13;

  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (uint64_t *)((char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v7 = qword_100354EE8;
  *v6 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    swift_once(&qword_100344568, sub_100073158);
    goto LABEL_6;
  }
  if (*(__objc2_class **)a1 != _TtC10seserviced8LyonPeer)
    return result;
  v10 = qword_100344568;
  swift_retain(a1);
  if (v10 != -1)
    goto LABEL_11;
LABEL_6:
  sub_10007B528(a1);
  if (qword_1003447A0 != -1)
    swift_once(&qword_1003447A0, sub_1001EDCA4);
  v11 = off_10034A560;
  v12 = (os_unfair_lock_s *)(*((_QWORD *)off_10034A560 + 5) + 16);
  os_unfair_lock_lock(v12);
  sub_100163608((uint64_t)v11, (uint64_t)a1);
  os_unfair_lock_unlock(v12);
  return swift_release(a1);
}

uint64_t sub_1001693A0(uint64_t a1, uint64_t a2, uint64_t a3, __objc2_class **a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  id v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;

  v8 = type metadata accessor for DispatchPredicate(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (uint64_t *)((char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v13 = qword_100354EE8;
  *v12 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8);
  v14 = (id)v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)(v12);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v9 + 8))(v12, v8);
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    swift_once(&qword_100344598, sub_10009F9BC);
    goto LABEL_6;
  }
  if (*a4 != _TtC10seserviced8LyonPeer)
    return result;
  v16 = qword_100344598;
  swift_retain(a4);
  if (v16 != -1)
    goto LABEL_9;
LABEL_6:
  sub_1000A135C(a1, a2, a3, (uint64_t)a4);
  return swift_release(a4);
}

uint64_t sub_1001694FC(char a1, __objc2_class **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  id v10;
  uint64_t result;
  int v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26[2];

  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (uint64_t *)((char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v9 = qword_100354EE8;
  *v8 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_16:
    swift_once(&qword_100344598, sub_10009F9BC);
    goto LABEL_9;
  }
  if (*a2 != _TtC10seserviced8LyonPeer)
    return result;
  v12 = a1 & 1;
  v13 = swift_retain(a2);
  v14 = Logger.logObject.getter(v13);
  v18 = static os_log_type_t.info.getter(v14, v15, v16, v17);
  if (os_log_type_enabled(v14, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(12, -1);
    v20 = swift_slowAlloc(32, -1);
    v26[0] = v20;
    *(_DWORD *)v19 = 136315138;
    LOBYTE(v25) = v12;
    v21 = String.init<A>(describing:)(&v25, &type metadata for DSKBLE.RSSIZone);
    v23 = v22;
    v25 = sub_1001C56EC(v21, v22, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, v26, v19 + 4, v19 + 12);
    swift_bridgeObjectRelease(v23);
    _os_log_impl((void *)&_mh_execute_header, v14, v18, "Lyon received RSSI update: %s", v19, 0xCu);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v19, -1, -1);
  }

  if (v12)
  {
    if (qword_100344598 != -1)
      swift_once(&qword_100344598, sub_10009F9BC);
    sub_1000A4258((uint64_t)a2);
    return swift_release(a2);
  }
  if (qword_100344598 != -1)
    goto LABEL_16;
LABEL_9:
  sub_10009E0A0((uint64_t)a2);
  return swift_release(a2);
}

void sub_10016992C(uint64_t a1, uint64_t a2)
{
  Data._bridgeToObjectiveC()();
  Data._bridgeToObjectiveC()();
  __asm { BR              X10 }
}

uint64_t sub_10016999C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *dataOut, size_t dataOutAvailable, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_log_t log, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, os_log_type_t type,uint64_t a21,uint8_t *buf,id a23,id a24,char a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  void *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  NSObject *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  id v81;
  uint64_t v82;
  NSObject *v83;
  uint64_t v84;
  os_log_type_t v85;
  uint8_t *v86;
  char v87;
  void *v88;
  id v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  NSObject *v97;
  os_log_type_t v98;
  uint8_t *v99;
  _DWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  char v108;
  uint64_t v110;
  NSObject *v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  os_log_type_t v116;
  _DWORD *v117;
  uint64_t v118;
  uint8_t *v119;
  void *v120;
  uint64_t v121;
  id v123;

  v55 = objc_msgSend(objc_allocWithZone((Class)NSMutableData), "initWithLength:", BYTE6(v52));
  if (!v55)
  {
    __break(1u);
    JUMPOUT(0x10016A114);
  }
  v120 = v55;
  sub_100063C8C(v47, v48);
  sub_100063C8C(v50, v49);
  sub_100063C8C(v53, v52);
  sub_100063C8C(v47, v48);
  sub_100063C8C(v50, v49);
  v56 = sub_100063C8C(v53, v52);
  v57 = Logger.logObject.getter(v56);
  v116 = static os_log_type_t.debug.getter();
  v114 = v49;
  v118 = v50;
  if (os_log_type_enabled(v57, v116))
  {
    v113 = v51;
    v58 = swift_slowAlloc(32, -1);
    v112 = swift_slowAlloc(96, -1);
    *(_QWORD *)(v54 - 96) = v112;
    *(_DWORD *)v58 = 136643331;
    sub_1001BD2CC(v47, v48);
    v60 = v59;
    *(_QWORD *)(v54 - 120) = v59;
    v110 = sub_100063D3C((uint64_t *)&unk_100346060);
    v115 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
    v61 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v110, v115);
    v111 = v57;
    v63 = v62;
    swift_bridgeObjectRelease(v60);
    *(_QWORD *)(v54 - 120) = sub_1001C56EC(v61, v63, (uint64_t *)(v54 - 96));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v54 - 120, v54 - 112, v58 + 4, v58 + 12);
    swift_bridgeObjectRelease(v63);
    sub_100063CD0(v47, v48);
    sub_100063CD0(v47, v48);
    *(_WORD *)(v58 + 12) = 2081;
    sub_1001BD2CC(v118, v49);
    v65 = v64;
    *(_QWORD *)(v54 - 120) = v64;
    v66 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v110, v115);
    v68 = v67;
    swift_bridgeObjectRelease(v65);
    *(_QWORD *)(v54 - 120) = sub_1001C56EC(v66, v68, (uint64_t *)(v54 - 96));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v54 - 120, v54 - 112, v58 + 14, v58 + 22);
    swift_bridgeObjectRelease(v68);
    sub_100063CD0(v118, v49);
    sub_100063CD0(v118, v49);
    *(_WORD *)(v58 + 22) = 2081;
    sub_1001BD2CC(v53, v52);
    v70 = v69;
    *(_QWORD *)(v54 - 120) = v69;
    v71 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v110, v115);
    v73 = v72;
    swift_bridgeObjectRelease(v70);
    *(_QWORD *)(v54 - 120) = sub_1001C56EC(v71, v73, (uint64_t *)(v54 - 96));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v54 - 120, v54 - 112, v58 + 24, v58 + 32);
    swift_bridgeObjectRelease(v73);
    sub_100063CD0(v53, v52);
    sub_100063CD0(v53, v52);
    _os_log_impl((void *)&_mh_execute_header, v111, v116, "Validating GRK with grk:%{sensitive}s, given Dynamic Tag:%{private}s, plaintextData:%{private}s", (uint8_t *)v58, 0x20u);
    swift_arrayDestroy(v112, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v112, -1, -1);
    v74 = v58;
    v51 = v113;
    swift_slowDealloc(v74, -1, -1);

  }
  else
  {

    sub_100063CD0(v47, v48);
    sub_100063CD0(v47, v48);
    sub_100063CD0(v50, v49);
    sub_100063CD0(v50, v49);
    sub_100063CD0(v53, v52);
    sub_100063CD0(v53, v52);
  }
  v75 = objc_retainAutorelease(a1);
  v76 = objc_msgSend(v75, "bytes");
  v123 = v75;
  v77 = objc_msgSend(v75, "length");
  v78 = objc_retainAutorelease(v51);
  v79 = objc_msgSend(v78, "bytes");
  v80 = objc_msgSend(v78, "length");
  v81 = objc_retainAutorelease(v120);
  v82 = CCCrypt(0, 0, 0, v76, (size_t)v77, 0, v79, (size_t)v80, objc_msgSend(v81, "mutableBytes"), (size_t)objc_msgSend(v81, "length"), 0);
  if ((_DWORD)v82)
  {
    v83 = Logger.logObject.getter(v82);
    v85 = static os_log_type_t.error.getter(v83, v84);
    if (os_log_type_enabled(v83, v85))
    {
      v86 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v86 = 0;
      _os_log_impl((void *)&_mh_execute_header, v83, v85, "GRK encryption failed", v86, 2u);
      swift_slowDealloc(v86, -1, -1);
    }

    v87 = 0;
    v88 = v123;
  }
  else
  {
    v89 = v81;
    v90 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v120);
    v92 = v91;

    v93 = Data.subdata(in:)(0, 7, v90, v92);
    v95 = v94;
    sub_100063CD0(v90, v92);
    sub_100063C8C(v93, v95);
    v96 = sub_100063C8C(v93, v95);
    v97 = Logger.logObject.getter(v96);
    v98 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v97, v98))
    {
      v99 = (uint8_t *)swift_slowAlloc(12, -1);
      v121 = swift_slowAlloc(32, -1);
      *(_QWORD *)(v54 - 96) = v121;
      v119 = v99;
      *(_DWORD *)v99 = 136315138;
      v100 = v99 + 12;
      v117 = v99 + 4;
      sub_1001BD2CC(v93, v95);
      v102 = v101;
      *(_QWORD *)(v54 - 120) = v101;
      v103 = sub_100063D3C((uint64_t *)&unk_100346060);
      v104 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
      v105 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v103, v104);
      v107 = v106;
      swift_bridgeObjectRelease(v102);
      *(_QWORD *)(v54 - 120) = sub_1001C56EC(v105, v107, (uint64_t *)(v54 - 96));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v54 - 120, v54 - 112, v117, v100);
      swift_bridgeObjectRelease(v107);
      sub_100063CD0(v93, v95);
      sub_100063CD0(v93, v95);
      _os_log_impl((void *)&_mh_execute_header, v97, v98, "Derived dynamic tag: %s", v119, 0xCu);
      swift_arrayDestroy(v121, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v121, -1, -1);
      swift_slowDealloc(v119, -1, -1);

    }
    else
    {

      sub_100063CD0(v93, v95);
      sub_100063CD0(v93, v95);
    }
    sub_10007C23C(v118, v114);
    v87 = v108;
    sub_100063CD0(v93, v95);
    v81 = v78;
    v78 = v123;
    v88 = v89;
  }

  return v87 & 1;
}

uint64_t sub_10016A124()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  v1 = v0 + OBJC_IVAR____TtC10seserviced7LyonBLE_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonServiceUUID + 8));
  v3 = v0 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonPSMCharacteristicSupportedUwbProtocol;
  v4 = type metadata accessor for UUID(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(v3, v4);
  v5(v0 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonSelectedProtocolVersion, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonAdvDeviceAddress + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonAdvIsConnectable + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonAdvServiceData + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonServiceDataUUIDIdentifier + 8));
  sub_10006B9B4(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced7LyonBLE_readerGroupIdentifierMask), *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced7LyonBLE_readerGroupIdentifierMask + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced7LyonBLE_scanningExpressReaderGroupIdentifiers));
  return v0;
}

uint64_t sub_10016A238()
{
  uint64_t v0;

  sub_10016A124();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10016A25C()
{
  return type metadata accessor for LyonBLE(0);
}

uint64_t type metadata accessor for LyonBLE(uint64_t a1)
{
  uint64_t result;

  result = qword_100348180;
  if (!qword_100348180)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LyonBLE);
  return result;
}

uint64_t sub_10016A2A0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[7];
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  void *v18;
  void *v19;

  v5[0] = &unk_10028B660;
  v5[1] = &unk_10028B660;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v5[2] = *(_QWORD *)(result - 8) + 64;
    v5[3] = &unk_10028B660;
    v5[4] = &unk_10028B660;
    v5[5] = &unk_10028B660;
    v5[6] = &unk_10028B678;
    result = type metadata accessor for UUID(319);
    if (v4 <= 0x3F)
    {
      v6 = *(_QWORD *)(result - 8) + 64;
      v7 = v6;
      v8 = (char *)&value witness table for Builtin.Int64 + 64;
      v9 = (char *)&value witness table for Builtin.Int64 + 64;
      v10 = &unk_10028B678;
      v11 = &unk_10028B678;
      v12 = &unk_10028B678;
      v13 = &unk_10028B678;
      v14 = (char *)&value witness table for Builtin.Int64 + 64;
      v15 = (char *)&value witness table for Builtin.Int64 + 64;
      v16 = (char *)&value witness table for Builtin.Int64 + 64;
      v17 = (char *)&value witness table for Builtin.Int64 + 64;
      v18 = &unk_10028B690;
      v19 = &unk_10028B6A8;
      return swift_updateClassMetadata2(a1, 256, 21, v5, a1 + 80);
    }
  }
  return result;
}

void sub_10016A374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_10016A3D4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  BOOL *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v42 = v39;
  v43 = v40;
  v44 = BYTE2(v40);
  v45 = BYTE3(v40);
  v46 = BYTE4(v40);
  v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x10016A5B8);
  }
  result = memcmp(v38, &v42, BYTE6(v40));
  *v37 = (_DWORD)result == 0;
  return result;
}

uint64_t sub_10016A5DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v15;
  _QWORD __s1[9];

  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16))
  {
    v3 = 1 << *(_BYTE *)(a1 + 32);
    if (v3 < 64)
      v4 = ~(-1 << v3);
    else
      v4 = -1;
    v5 = v4 & *(_QWORD *)(a1 + 56);
    v15 = (unint64_t)(v3 + 63) >> 6;
    if (v5)
    {
      v6 = __clz(__rbit64(v5));
LABEL_23:
      v10 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v6);
      v12 = *v10;
      v11 = v10[1];
      Hasher.init(_seed:)(__s1);
      sub_100063C8C(v12, v11);
      Data.hash(into:)(__s1, v12, v11);
      v13 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(a2 + 32));
      if (((*(_QWORD *)(a2 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
        __asm { BR              X8 }
      sub_100063CD0(v12, v11);
      return 0;
    }
    if ((unint64_t)(v3 + 63) >> 6 > 1)
    {
      v7 = *(_QWORD *)(a1 + 64);
      v8 = 1;
      if (v7)
        goto LABEL_22;
      v8 = 2;
      if (v15 <= 2)
        return 1;
      v7 = *(_QWORD *)(a1 + 72);
      if (v7)
        goto LABEL_22;
      v8 = 3;
      if (v15 <= 3)
        return 1;
      v7 = *(_QWORD *)(a1 + 80);
      if (v7)
        goto LABEL_22;
      v8 = 4;
      if (v15 <= 4)
        return 1;
      v7 = *(_QWORD *)(a1 + 88);
      if (v7)
      {
LABEL_22:
        v6 = __clz(__rbit64(v7)) + (v8 << 6);
        goto LABEL_23;
      }
      v9 = 5;
      if (v15 > 5)
      {
        v7 = *(_QWORD *)(a1 + 96);
        if (v7)
        {
          v8 = 5;
          goto LABEL_22;
        }
        while (1)
        {
          v8 = v9 + 1;
          if (__OFADD__(v9, 1))
            __break(1u);
          if (v8 >= v15)
            break;
          v7 = *(_QWORD *)(a1 + 56 + 8 * v8);
          ++v9;
          if (v7)
            goto LABEL_22;
        }
      }
    }
    return 1;
  }
  return 0;
}

uint64_t sub_10016B0FC(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void sub_10016B11C(int *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  size_t v12;

  Data.InlineSlice.ensureUniqueReference()();
  v4 = *a1;
  v5 = a1[1];
  if ((int)v5 < (int)v4)
  {
    __break(1u);
    goto LABEL_9;
  }
  v6 = __DataStorage._bytes.getter();
  if (!v6)
  {
LABEL_10:
    __break(1u);
    return;
  }
  v7 = v6;
  v8 = __DataStorage._offset.getter();
  v9 = v4 - v8;
  if (__OFSUB__(v4, v8))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v10 = v5 - v4;
  v11 = __DataStorage._length.getter();
  if (v11 >= v10)
    v12 = v10;
  else
    v12 = v11;
  memset((void *)(v7 + v9), a2, v12);
}

uint64_t sub_10016B19C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  result = __DataStorage._bytes.getter();
  v11 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_13;
  }
  v14 = __DataStorage._length.getter();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  if (v11)
    v16 = v15;
  else
    v16 = 0;
  return Data._Representation.replaceSubrange(_:with:count:)(a5, a6, v11, v16);
}

uint64_t sub_10016B240@<X0>(uint64_t (*a1)(uint64_t *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t result;

  result = sub_10016405C(a1, a2, a3);
  if (!v4)
    *a4 = result;
  return result;
}

void sub_10016B268(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  _QWORD v5[5];

  v5[3] = &type metadata for Data;
  v5[4] = &protocol witness table for Data;
  v5[0] = a3;
  v5[1] = a4;
  v4 = (char *)&loc_10016B2D8
     + *((int *)qword_10016B498 + (sub_10006BA78(v5, (uint64_t)&type metadata for Data)[1] >> 62));
  __asm { BR              X10 }
}

uint64_t sub_10016B2E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  __int16 v8;
  char v9;
  char v10;
  char v11;
  char v12;
  uint64_t v13;

  v7 = v2;
  v8 = v5;
  v9 = BYTE2(v5);
  v10 = BYTE3(v5);
  v11 = BYTE4(v5);
  v12 = BYTE5(v5);
  sub_100063C8C(v4, v3);
  Data._Representation.replaceSubrange(_:with:count:)(v1, v0, &v7, BYTE6(v5));
  return sub_10006BA9C(&v13);
}

uint64_t sub_10016B4A8(uint64_t a1, uint64_t *a2)
{
  return sub_100163010(a1, *a2);
}

uint64_t sub_10016B4C0(uint64_t a1, uint64_t *a2)
{
  uint64_t ObjectType;
  uint64_t result;
  uint64_t v4;
  uint64_t (*v5)(uint64_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;

  v7 = *a2;
  ObjectType = swift_getObjectType(*(_QWORD *)(a1 + 16));
  result = swift_conformsToProtocol2(ObjectType, &protocol descriptor for StoreDelegate);
  if (result)
  {
    v4 = result;
    v5 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(result + 8);
    v6 = type metadata accessor for Peer(0);
    return v5(&v7, v6, ObjectType, v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10016B538(uint64_t a1, uint64_t *a2)
{
  return sub_100163608(a1, *a2);
}

uint64_t sub_10016B550(uint64_t a1, uint64_t *a2)
{
  uint64_t ObjectType;
  uint64_t result;
  uint64_t v4;
  uint64_t (*v5)(uint64_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;

  v7 = *a2;
  ObjectType = swift_getObjectType(*(_QWORD *)(a1 + 16));
  result = swift_conformsToProtocol2(ObjectType, &protocol descriptor for StoreDelegate);
  if (result)
  {
    v4 = result;
    v5 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(result + 24);
    v6 = type metadata accessor for Peer(0);
    return v5(&v7, v6, ObjectType, v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10016B5C8(uint64_t a1, uint64_t *a2)
{
  uint64_t ObjectType;
  uint64_t result;
  uint64_t v4;
  uint64_t (*v5)(uint64_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;

  v7 = *a2;
  ObjectType = swift_getObjectType(*(_QWORD *)(a1 + 16));
  result = swift_conformsToProtocol2(ObjectType, &protocol descriptor for StoreDelegate);
  if (result)
  {
    v4 = result;
    v5 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(result + 8);
    v6 = sub_10006C25C(0, (unint64_t *)&qword_100347710, SEEndPoint_ptr);
    return v5(&v7, v6, ObjectType, v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10016B650(uint64_t a1, uint64_t *a2)
{
  uint64_t ObjectType;
  uint64_t result;
  uint64_t v4;
  uint64_t (*v5)(uint64_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;

  v7 = *a2;
  ObjectType = swift_getObjectType(*(_QWORD *)(a1 + 16));
  result = swift_conformsToProtocol2(ObjectType, &protocol descriptor for StoreDelegate);
  if (result)
  {
    v4 = result;
    v5 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(result + 24);
    v6 = sub_10006C25C(0, (unint64_t *)&qword_100347710, SEEndPoint_ptr);
    return v5(&v7, v6, ObjectType, v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_10016B6D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  _QWORD v33[5];

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = sub_10006C25C(0, (unint64_t *)&qword_100347710, SEEndPoint_ptr);
    v5 = sub_10007EFD8();
    v6 = Set.Iterator.init(_cocoa:)(v33, v3, v4, v5);
    v1 = v33[0];
    v30 = v33[1];
    v7 = v33[2];
    v8 = v33[3];
    v9 = v33[4];
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v30 = a1 + 56;
    v7 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v9 = v12 & *(_QWORD *)(a1 + 56);
    v6 = (_QWORD *)swift_bridgeObjectRetain(a1);
    v8 = 0;
  }
  v28 = v7;
  v29 = (unint64_t)(v7 + 64) >> 6;
  v13 = v8;
  if (v1 < 0)
  {
    v15 = v1;
    v16 = __CocoaSet.Iterator.next()(v6);
    if (v16)
    {
      v17 = v16;
      v31 = v16;
      v18 = sub_10006C25C(0, (unint64_t *)&qword_100347710, SEEndPoint_ptr);
      swift_unknownObjectRetain(v17);
      swift_dynamicCast(&v32, &v31, (char *)&type metadata for Swift.AnyObject + 8, v18, 7);
      v19 = v32;
      swift_unknownObjectRelease(v17);
      v1 = v15;
      if (v19)
        goto LABEL_28;
    }
    else
    {
      v19 = 0;
    }
    goto LABEL_37;
  }
  if (v9)
  {
    v14 = __clz(__rbit64(v9)) | (v8 << 6);
    goto LABEL_27;
  }
  v20 = v8 + 1;
  if (__OFADD__(v13, 1))
  {
    __break(1u);
    JUMPOUT(0x10016BE00);
  }
  if (v20 >= v29)
    goto LABEL_35;
  v21 = *(_QWORD *)(v30 + 8 * v20);
  if (!v21)
  {
    v22 = v13 + 2;
    if (v13 + 2 < v29)
    {
      v21 = *(_QWORD *)(v30 + 8 * v22);
      if (v21)
        goto LABEL_25;
      v22 = v13 + 3;
      if (v13 + 3 >= v29)
        goto LABEL_35;
      v21 = *(_QWORD *)(v30 + 8 * v22);
      if (v21)
      {
LABEL_25:
        v20 = v22;
        goto LABEL_26;
      }
      v22 = v13 + 4;
      if (v13 + 4 < v29)
      {
        v21 = *(_QWORD *)(v30 + 8 * v22);
        if (v21)
          goto LABEL_25;
        v20 = v13 + 5;
        if (v13 + 5 < v29)
        {
          v21 = *(_QWORD *)(v30 + 8 * v20);
          if (!v21)
          {
            v26 = v13 + 6;
            do
            {
              if (v29 == v26)
                goto LABEL_35;
              v21 = *(_QWORD *)(v30 + 8 * v26++);
            }
            while (!v21);
            v20 = v26 - 1;
          }
          goto LABEL_26;
        }
      }
    }
LABEL_35:
    v19 = 0;
    goto LABEL_37;
  }
LABEL_26:
  v14 = __clz(__rbit64(v21)) + (v20 << 6);
LABEL_27:
  v19 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v14);
  if (v19)
  {
LABEL_28:
    v23 = objc_msgSend(v19, "publicKeyIdentifier", v28);
    static Data._unconditionallyBridgeFromObjectiveC(_:)(v23);
    v25 = v24;

    __asm { BR              X10 }
  }
LABEL_37:
  sub_10007EF58(v1);
  return v19;
}

uint64_t sub_10016BEA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  int64_t v7;
  unint64_t v8;
  unint64_t i;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  int64_t v30;
  int64_t v32;

  v2 = v1;
  v29 = a1 + 56;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 56);
  v30 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v7 = 0;
  v28 = _swiftEmptyArrayStorage;
  if (!v5)
    goto LABEL_7;
LABEL_4:
  v8 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  v32 = v7;
  for (i = v8 | (v7 << 6); ; i = __clz(__rbit64(v19)) + (v18 << 6))
  {
    v10 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v12 = *v10;
    v11 = v10[1];
    sub_100063C8C(*v10, v11);
    sub_100165844(v12, v11);
    if (v2)
    {
      swift_errorRelease(v2);
      result = sub_100063CD0(v12, v11);
      v2 = 0;
      v7 = v32;
      if (v5)
        goto LABEL_4;
    }
    else
    {
      v21 = v13;
      v22 = v14;
      v23 = v15;
      v24 = v16;
      sub_100063CD0(v12, v11);
      result = swift_isUniquelyReferenced_nonNull_native(v28);
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_1001C469C(0, v28[2] + 1, 1, v28);
        v28 = (_QWORD *)result;
      }
      v26 = v28[2];
      v25 = v28[3];
      if (v26 >= v25 >> 1)
      {
        result = (uint64_t)sub_1001C469C((_QWORD *)(v25 > 1), v26 + 1, 1, v28);
        v28 = (_QWORD *)result;
      }
      v28[2] = v26 + 1;
      v27 = &v28[4 * v26];
      v27[4] = v21;
      v27[5] = v22;
      v27[6] = v23;
      v27[7] = v24;
      v7 = v32;
      if (v5)
        goto LABEL_4;
    }
LABEL_7:
    v17 = __OFADD__(v7, 1);
    v18 = v7 + 1;
    if (v17)
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v18 >= v30)
      goto LABEL_30;
    v19 = *(_QWORD *)(v29 + 8 * v18);
    if (!v19)
      break;
LABEL_19:
    v5 = (v19 - 1) & v19;
    v32 = v18;
  }
  v20 = v18 + 1;
  if (v18 + 1 >= v30)
    goto LABEL_30;
  v19 = *(_QWORD *)(v29 + 8 * v20);
  if (v19)
    goto LABEL_18;
  v20 = v18 + 2;
  if (v18 + 2 >= v30)
    goto LABEL_30;
  v19 = *(_QWORD *)(v29 + 8 * v20);
  if (v19)
    goto LABEL_18;
  v20 = v18 + 3;
  if (v18 + 3 >= v30)
    goto LABEL_30;
  v19 = *(_QWORD *)(v29 + 8 * v20);
  if (v19)
    goto LABEL_18;
  v20 = v18 + 4;
  if (v18 + 4 >= v30)
  {
LABEL_30:
    swift_release(a1);
    return (uint64_t)v28;
  }
  v19 = *(_QWORD *)(v29 + 8 * v20);
  if (v19)
  {
LABEL_18:
    v18 = v20;
    goto LABEL_19;
  }
  while (1)
  {
    v18 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v18 >= v30)
      goto LABEL_30;
    v19 = *(_QWORD *)(v29 + 8 * v18);
    ++v20;
    if (v19)
      goto LABEL_19;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_10016C130(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100165CA8(a1, a2, a3, a4);
}

uint64_t sub_10016C144(uint64_t a1, __objc2_class **a2)
{
  return sub_100168038(a1, a2);
}

uint64_t sub_10016C15C(uint64_t a1, unint64_t a2, __objc2_class **a3)
{
  return sub_1001690AC(a1, a2, a3);
}

uint64_t sub_10016C164(char *a1)
{
  return sub_100169200(a1);
}

uint64_t sub_10016C16C(uint64_t a1, uint64_t a2, uint64_t a3, __objc2_class **a4)
{
  return sub_1001693A0(a1, a2, a3, a4);
}

uint64_t sub_10016C174(char a1, __objc2_class **a2)
{
  return sub_1001694FC(a1 & 1, a2);
}

uint64_t sub_10016C17C(uint64_t *a1)
{
  uint64_t v1;

  return sub_100163C68(*a1, **(_QWORD **)(v1 + 16), (uint64_t)&unk_10030B2D8, (uint64_t)sub_10016C1FC, (uint64_t)&unk_10030B2F0);
}

uint64_t sub_10016C1B4(uint64_t *a1)
{
  uint64_t v1;

  return sub_100163878(*a1, **(_QWORD **)(v1 + 16));
}

uint64_t sub_10016C1D8()
{
  uint64_t v0;

  return sub_100163A80(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10016C1E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10016C1F0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10016C1FC()
{
  uint64_t v0;

  return sub_10016B550(*(_QWORD *)(v0 + 16), (uint64_t *)(v0 + 24));
}

uint64_t sub_10016C208(uint64_t *a1)
{
  uint64_t v1;

  return sub_100163C68(*a1, **(_QWORD **)(v1 + 16), (uint64_t)&unk_10030B378, (uint64_t)sub_10016C2B4, (uint64_t)&unk_10030B390);
}

uint64_t sub_10016C240(uint64_t *a1)
{
  uint64_t v1;

  return sub_100163C68(*a1, **(_QWORD **)(v1 + 16), (uint64_t)&unk_10030B328, (uint64_t)sub_10016C27C, (uint64_t)&unk_10030B340);
}

uint64_t sub_10016C27C()
{
  uint64_t v0;

  return sub_100163420(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10016C288()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10016C2B4()
{
  uint64_t v0;

  return sub_10016B4C0(*(_QWORD *)(v0 + 16), (uint64_t *)(v0 + 24));
}

uint64_t sub_10016C2C0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = sub_10016405C(*(uint64_t (**)(uint64_t *))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
  if (!v2)
    *a1 = result;
  return result;
}

void sub_10016C2F0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void **))
{
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  int64_t v15;
  void *v16;
  id v17;
  char v18;
  uint64_t v21;
  int64_t v22;
  void *v23;

  v21 = 0;
  v6 = 0;
  v7 = a3 + 56;
  v8 = 1 << *(_BYTE *)(a3 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a3 + 56);
  v22 = (unint64_t)(v8 + 63) >> 6;
  while (v10)
  {
    v11 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    v12 = v11 | (v6 << 6);
LABEL_17:
    v16 = *(void **)(*(_QWORD *)(a3 + 48) + 8 * v12);
    v23 = v16;
    if (!a4)
      goto LABEL_30;
    v17 = v16;
    v18 = a4(&v23);

    if ((v18 & 1) != 0)
    {
      *(unint64_t *)((char *)a1 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = __OFADD__(v21++, 1);
      if (v13)
        goto LABEL_29;
    }
  }
  v13 = __OFADD__(v6++, 1);
  if (v13)
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v6 >= v22)
    goto LABEL_26;
  v14 = *(_QWORD *)(v7 + 8 * v6);
  if (v14)
  {
LABEL_16:
    v10 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v6 << 6);
    goto LABEL_17;
  }
  v15 = v6 + 1;
  if (v6 + 1 >= v22)
    goto LABEL_26;
  v14 = *(_QWORD *)(v7 + 8 * v15);
  if (v14)
    goto LABEL_15;
  v15 = v6 + 2;
  if (v6 + 2 >= v22)
    goto LABEL_26;
  v14 = *(_QWORD *)(v7 + 8 * v15);
  if (v14)
    goto LABEL_15;
  v15 = v6 + 3;
  if (v6 + 3 >= v22)
  {
LABEL_26:
    swift_retain(a3);
    sub_100194E48(a1, a2, v21, a3);
    return;
  }
  v14 = *(_QWORD *)(v7 + 8 * v15);
  if (v14)
  {
LABEL_15:
    v6 = v15;
    goto LABEL_16;
  }
  while (1)
  {
    v6 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v6 >= v22)
      goto LABEL_26;
    v14 = *(_QWORD *)(v7 + 8 * v6);
    ++v15;
    if (v14)
      goto LABEL_16;
  }
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
}

Swift::Int sub_10016C4D0(uint64_t a1, uint64_t (*a2)(uint64_t *), uint64_t a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int result;
  char v12;
  id v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  _QWORD *v27;

  if ((a1 & 0xC000000000000001) == 0)
    return sub_10016C91C(a1, (uint64_t)a2, a3, (void (*)(uint64_t, uint64_t))sub_10016CF14, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t, uint64_t))sub_10016C2F0, (void (*)(uint64_t, uint64_t))sub_10016CF18);
  v5 = &_swiftEmptySetSingleton;
  v27 = &_swiftEmptySetSingleton;
  if (a1 < 0)
    v6 = a1;
  else
    v6 = a1 & 0xFFFFFFFFFFFFFF8;
  sub_1000DCA74((uint64_t)a2, a3);
  v7 = __CocoaSet.makeIterator()(v6);
  v8 = __CocoaSet.Iterator.next()();
  if (!v8)
  {
LABEL_26:
    swift_release(v7);
    sub_10008F210((uint64_t)a2, a3);
    return (Swift::Int)v5;
  }
  v9 = v8;
  v10 = sub_10006C25C(0, (unint64_t *)&qword_100347710, SEEndPoint_ptr);
  while (1)
  {
    v25 = v9;
    result = swift_dynamicCast(&v26, &v25, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
    v25 = (uint64_t)v26;
    if (!a2)
      break;
    v12 = a2(&v25);
    v13 = v26;
    if ((v12 & 1) != 0)
    {
      v14 = v27;
      v15 = v27[2];
      if (v27[3] <= v15)
      {
        sub_1000CB640(v15 + 1);
        v14 = v27;
      }
      result = NSObject._rawHashValue(seed:)(v14[5]);
      v16 = v14 + 7;
      v17 = -1 << *((_BYTE *)v14 + 32);
      v18 = result & ~v17;
      v19 = v18 >> 6;
      if (((-1 << v18) & ~v14[(v18 >> 6) + 7]) != 0)
      {
        v20 = __clz(__rbit64((-1 << v18) & ~v14[(v18 >> 6) + 7])) | v18 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v21 = 0;
        v22 = (unint64_t)(63 - v17) >> 6;
        do
        {
          if (++v19 == v22 && (v21 & 1) != 0)
          {
            __break(1u);
            goto LABEL_28;
          }
          v23 = v19 == v22;
          if (v19 == v22)
            v19 = 0;
          v21 |= v23;
          v24 = v16[v19];
        }
        while (v24 == -1);
        v20 = __clz(__rbit64(~v24)) + (v19 << 6);
      }
      *(_QWORD *)((char *)v16 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      *(_QWORD *)(v14[6] + 8 * v20) = v13;
      ++v14[2];
    }
    else
    {

    }
    v9 = __CocoaSet.Iterator.next()();
    if (!v9)
    {
      v5 = v27;
      goto LABEL_26;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

Swift::Int sub_10016C738(Swift::Int result, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t *))
{
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  char v17;
  unint64_t *v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;

  v19 = (unint64_t *)result;
  v20 = 0;
  v6 = 0;
  v7 = a3 + 56;
  v8 = 1 << *(_BYTE *)(a3 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a3 + 56);
  v21 = (unint64_t)(v8 + 63) >> 6;
  while (v10)
  {
    v11 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    v12 = v11 | (v6 << 6);
LABEL_17:
    v16 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v12);
    v22 = v16;
    if (!a4)
      goto LABEL_30;
    swift_retain(v16);
    v17 = a4(&v22);
    result = swift_release(v16);
    if ((v17 & 1) != 0)
    {
      *(unint64_t *)((char *)v19 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = __OFADD__(v20++, 1);
      if (v13)
        goto LABEL_29;
    }
  }
  v13 = __OFADD__(v6++, 1);
  if (v13)
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v6 >= v21)
    goto LABEL_26;
  v14 = *(_QWORD *)(v7 + 8 * v6);
  if (v14)
  {
LABEL_16:
    v10 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v6 << 6);
    goto LABEL_17;
  }
  v15 = v6 + 1;
  if (v6 + 1 >= v21)
    goto LABEL_26;
  v14 = *(_QWORD *)(v7 + 8 * v15);
  if (v14)
    goto LABEL_15;
  v15 = v6 + 2;
  if (v6 + 2 >= v21)
    goto LABEL_26;
  v14 = *(_QWORD *)(v7 + 8 * v15);
  if (v14)
    goto LABEL_15;
  v15 = v6 + 3;
  if (v6 + 3 >= v21)
  {
LABEL_26:
    swift_retain(a3);
    return sub_10019531C(v19, a2, v20, a3);
  }
  v14 = *(_QWORD *)(v7 + 8 * v15);
  if (v14)
  {
LABEL_15:
    v6 = v15;
    goto LABEL_16;
  }
  while (1)
  {
    v6 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v6 >= v21)
      goto LABEL_26;
    v14 = *(_QWORD *)(v7 + 8 * v6);
    ++v15;
    if (v14)
      goto LABEL_16;
  }
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_10016C91C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t), uint64_t (*a5)(char *, unint64_t, uint64_t, uint64_t, uint64_t), void (*a6)(uint64_t, uint64_t))
{
  uint64_t v6;
  char v12;
  unsigned int v13;
  unint64_t v14;
  size_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  void *v19;
  _QWORD v21[2];
  void (*v22)(uint64_t, uint64_t);

  v22 = a6;
  v12 = *(_BYTE *)(a1 + 32);
  v13 = v12 & 0x3F;
  v14 = (unint64_t)((1 << v12) + 63) >> 6;
  v15 = 8 * v14;
  a4(a2, a3);
  a4(a2, a3);
  if (v13 <= 0xD || (swift_stdlib_isStackAllocationSafe(v15, 8) & 1) != 0)
  {
    v21[1] = v21;
    __chkstk_darwin();
    bzero((char *)v21 - ((v15 + 15) & 0x3FFFFFFFFFFFFFF0), v15);
    a4(a2, a3);
    v16 = a5((char *)v21 - ((v15 + 15) & 0x3FFFFFFFFFFFFFF0), v14, a1, a2, a3);
    v17 = v22;
    v22(a2, a3);
    v18 = swift_release(a1);
    if (v6)
      swift_willThrow(v18);
    v17(a2, a3);
    v17(a2, a3);
  }
  else
  {
    v19 = (void *)swift_slowAlloc(v15, -1);
    bzero(v19, v15);
    a4(a2, a3);
    v16 = a5((char *)v19, v14, a1, a2, a3);
    v22(a2, a3);
    swift_release(a1);
    swift_slowDealloc(v19, -1, -1);
    v22(a2, a3);
    v22(a2, a3);
  }
  return v16;
}

Swift::Int sub_10016CB54(uint64_t a1, uint64_t (*a2)(_QWORD *), uint64_t a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int result;
  char v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD v27[9];
  uint64_t v28;
  _QWORD *v29;

  if ((a1 & 0xC000000000000001) == 0)
    return sub_10016C91C(a1, (uint64_t)a2, a3, (void (*)(uint64_t, uint64_t))sub_1000DCA74, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t, uint64_t))sub_10016C738, (void (*)(uint64_t, uint64_t))sub_10008F210);
  v5 = &_swiftEmptySetSingleton;
  v29 = &_swiftEmptySetSingleton;
  if (a1 < 0)
    v6 = a1;
  else
    v6 = a1 & 0xFFFFFFFFFFFFFF8;
  sub_1000DCA74((uint64_t)a2, a3);
  v7 = __CocoaSet.makeIterator()(v6);
  v8 = __CocoaSet.Iterator.next()(v7);
  if (!v8)
  {
LABEL_26:
    swift_release(v7);
    sub_10008F210((uint64_t)a2, a3);
    return (Swift::Int)v5;
  }
  v9 = v8;
  v10 = type metadata accessor for Peer(0);
  while (1)
  {
    v27[0] = v9;
    result = swift_dynamicCast(&v28, v27, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
    v27[0] = v28;
    if (!a2)
      break;
    v12 = a2(v27);
    v13 = v28;
    if ((v12 & 1) != 0)
    {
      v14 = v29;
      v15 = v29[2];
      if (v29[3] <= v15)
      {
        sub_1000CB8F4(v15 + 1);
        v14 = v29;
      }
      Hasher.init(_seed:)(v27);
      v16 = type metadata accessor for UUID(0);
      v17 = sub_1000639EC((unint64_t *)&unk_100347730, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      dispatch thunk of Hashable.hash(into:)(v27, v16, v17);
      result = Hasher._finalize()();
      v18 = v14 + 7;
      v19 = -1 << *((_BYTE *)v14 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~v14[(v20 >> 6) + 7]) != 0)
      {
        v22 = __clz(__rbit64((-1 << v20) & ~v14[(v20 >> 6) + 7])) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_28;
          }
          v25 = v21 == v24;
          if (v21 == v24)
            v21 = 0;
          v23 |= v25;
          v26 = v18[v21];
        }
        while (v26 == -1);
        v22 = __clz(__rbit64(~v26)) + (v21 << 6);
      }
      *(_QWORD *)((char *)v18 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
      *(_QWORD *)(v14[6] + 8 * v22) = v13;
      ++v14[2];
    }
    else
    {
      result = swift_release(v28);
    }
    v9 = __CocoaSet.Iterator.next()(result);
    if (!v9)
    {
      v5 = v29;
      goto LABEL_26;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_10016CDFC(uint64_t *a1)
{
  uint64_t v1;

  return sub_100163E64(*a1, **(void ***)(v1 + 16), (uint64_t)&unk_10030B440, (uint64_t)sub_10016CE7C, (uint64_t)&unk_10030B458);
}

uint64_t sub_10016CE34(uint64_t *a1)
{
  uint64_t v1;

  return sub_100163E64(*a1, **(void ***)(v1 + 16), (uint64_t)&unk_10030B3F0, (uint64_t)sub_10016CE70, (uint64_t)&unk_10030B408);
}

void sub_10016CE70()
{
  uint64_t v0;

  sub_100163B90(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_10016CE7C()
{
  uint64_t v0;

  return sub_10016B650(*(_QWORD *)(v0 + 16), (uint64_t *)(v0 + 24));
}

uint64_t sub_10016CE88(uint64_t *a1)
{
  uint64_t v1;

  return sub_100163E64(*a1, **(void ***)(v1 + 16), (uint64_t)&unk_10030B4E0, (uint64_t)sub_10016CF08, (uint64_t)&unk_10030B4F8);
}

uint64_t sub_10016CEC0(uint64_t *a1)
{
  uint64_t v1;

  return sub_100163E64(*a1, **(void ***)(v1 + 16), (uint64_t)&unk_10030B490, (uint64_t)sub_10016CEFC, (uint64_t)&unk_10030B4A8);
}

void sub_10016CEFC()
{
  uint64_t v0;

  sub_100163530(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_10016CF08()
{
  uint64_t v0;

  return sub_10016B5C8(*(_QWORD *)(v0 + 16), (uint64_t *)(v0 + 24));
}

void sub_10016CF5C(uint64_t a1)
{
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  os_unfair_lock_s *v28;
  uint64_t v29;
  int64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[5];
  uint64_t v35;

  v3 = v1;
  v4 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v5 = a1;
    else
      v5 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v6 = __CocoaSet.makeIterator()(v5);
    v7 = type metadata accessor for Peer(0);
    v8 = sub_1000639EC((unint64_t *)&qword_100347720, type metadata accessor for Peer, (uint64_t)&unk_10028BFA8);
    v9 = Set.Iterator.init(_cocoa:)(v34, v6, v7, v8);
    v4 = v34[0];
    v32 = v34[1];
    v10 = v34[2];
    v11 = v34[3];
    v12 = v34[4];
  }
  else
  {
    v13 = -1 << *(_BYTE *)(a1 + 32);
    v32 = a1 + 56;
    v14 = ~v13;
    v15 = -v13;
    if (v15 < 64)
      v16 = ~(-1 << v15);
    else
      v16 = -1;
    v12 = v16 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v10 = v14;
    v11 = 0;
  }
  v31 = (unint64_t)(v10 + 64) >> 6;
  if ((v4 & 0x8000000000000000) == 0)
    goto LABEL_14;
LABEL_11:
  v17 = __CocoaSet.Iterator.next()(v9);
  if (!v17)
    goto LABEL_39;
  v18 = v17;
  v33 = v17;
  v19 = type metadata accessor for Peer(0);
  swift_unknownObjectRetain(v18);
  swift_dynamicCast(&v35, &v33, (char *)&type metadata for Swift.AnyObject + 8, v19, 7);
  v20 = v35;
  v21 = swift_unknownObjectRelease(v18);
  v23 = v11;
  v24 = v12;
  if (!v20)
    goto LABEL_39;
  while (1)
  {
    if (qword_1003447A0 != -1)
      v21 = swift_once(&qword_1003447A0, sub_1001EDCA4);
    v35 = v20;
    __chkstk_darwin(v21, v22);
    v2 = v28 + 4;
    os_unfair_lock_lock(v28 + 4);
    sub_10016B0FC(v29, sub_10017BF30);
    if (v3)
      goto LABEL_41;
    v3 = 0;
    os_unfair_lock_unlock(v2);
    v9 = (_QWORD *)swift_release(v20);
    v11 = v23;
    v12 = v24;
    if (v4 < 0)
      goto LABEL_11;
LABEL_14:
    if (!v12)
      break;
    v24 = (v12 - 1) & v12;
    v25 = __clz(__rbit64(v12)) | (v11 << 6);
    v23 = v11;
LABEL_27:
    v20 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v25);
    v21 = swift_retain(v20);
    if (!v20)
      goto LABEL_39;
  }
  v23 = v11 + 1;
  if (__OFADD__(v11, 1))
  {
    __break(1u);
LABEL_41:
    os_unfair_lock_unlock(v2);
    __break(1u);
    return;
  }
  if (v23 >= v31)
    goto LABEL_39;
  v26 = *(_QWORD *)(v32 + 8 * v23);
  if (v26)
  {
LABEL_26:
    v24 = (v26 - 1) & v26;
    v25 = __clz(__rbit64(v26)) + (v23 << 6);
    goto LABEL_27;
  }
  v27 = v11 + 2;
  if (v11 + 2 >= v31)
    goto LABEL_39;
  v26 = *(_QWORD *)(v32 + 8 * v27);
  if (v26)
    goto LABEL_25;
  v27 = v11 + 3;
  if (v11 + 3 >= v31)
    goto LABEL_39;
  v26 = *(_QWORD *)(v32 + 8 * v27);
  if (v26)
    goto LABEL_25;
  v27 = v11 + 4;
  if (v11 + 4 >= v31)
    goto LABEL_39;
  v26 = *(_QWORD *)(v32 + 8 * v27);
  if (v26)
  {
LABEL_25:
    v23 = v27;
    goto LABEL_26;
  }
  v23 = v11 + 5;
  if (v11 + 5 >= v31)
    goto LABEL_39;
  v26 = *(_QWORD *)(v32 + 8 * v23);
  if (v26)
    goto LABEL_26;
  v30 = v11 + 6;
  while (v31 != v30)
  {
    v26 = *(_QWORD *)(v32 + 8 * v30++);
    if (v26)
    {
      v23 = v30 - 1;
      goto LABEL_26;
    }
  }
LABEL_39:
  sub_10007EF58(v4);
}

void sub_10016D2C0(uint64_t a1, uint64_t *a2, uint64_t *a3, _BYTE *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  int64_t v25;
  unint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t *v29;
  uint64_t v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[5];
  void *v43;

  v5 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v6 = a1;
    else
      v6 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v7 = __CocoaSet.makeIterator()(v6);
    v8 = sub_10006C25C(0, (unint64_t *)&qword_100347710, SEEndPoint_ptr);
    v9 = sub_10007EFD8();
    v10 = Set.Iterator.init(_cocoa:)(v42, v7, v8, v9);
    v5 = v42[0];
    v40 = v42[1];
    v11 = v42[2];
    v12 = v42[3];
    v13 = v42[4];
  }
  else
  {
    v14 = -1 << *(_BYTE *)(a1 + 32);
    v40 = a1 + 56;
    v15 = ~v14;
    v16 = -v14;
    if (v16 < 64)
      v17 = ~(-1 << v16);
    else
      v17 = -1;
    v13 = v17 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v11 = v15;
    v12 = 0;
  }
  v39 = (unint64_t)(v11 + 64) >> 6;
  while (1)
  {
    if (v5 < 0)
    {
      v21 = __CocoaSet.Iterator.next()(v10);
      if (!v21)
        goto LABEL_49;
      v22 = v21;
      v41 = v21;
      v23 = sub_10006C25C(0, (unint64_t *)&qword_100347710, SEEndPoint_ptr);
      swift_unknownObjectRetain(v22);
      swift_dynamicCast(&v43, &v41, (char *)&type metadata for Swift.AnyObject + 8, v23, 7);
      v24 = v43;
      swift_unknownObjectRelease(v22);
      v20 = v12;
      v18 = v13;
      if (!v24)
        goto LABEL_49;
    }
    else
    {
      if (v13)
      {
        v18 = (v13 - 1) & v13;
        v19 = __clz(__rbit64(v13)) | (v12 << 6);
        v20 = v12;
      }
      else
      {
        v25 = v12 + 1;
        if (__OFADD__(v12, 1))
          goto LABEL_51;
        if (v25 >= v39)
          goto LABEL_49;
        v26 = *(_QWORD *)(v40 + 8 * v25);
        v20 = v12 + 1;
        if (!v26)
        {
          v20 = v12 + 2;
          if (v12 + 2 >= v39)
            goto LABEL_49;
          v26 = *(_QWORD *)(v40 + 8 * v20);
          if (!v26)
          {
            v20 = v12 + 3;
            if (v12 + 3 >= v39)
              goto LABEL_49;
            v26 = *(_QWORD *)(v40 + 8 * v20);
            if (!v26)
            {
              v20 = v12 + 4;
              if (v12 + 4 >= v39)
                goto LABEL_49;
              v26 = *(_QWORD *)(v40 + 8 * v20);
              if (!v26)
              {
                v20 = v12 + 5;
                if (v12 + 5 >= v39)
                  goto LABEL_49;
                v26 = *(_QWORD *)(v40 + 8 * v20);
                if (!v26)
                {
                  v27 = v12 + 6;
                  while (v39 != v27)
                  {
                    v26 = *(_QWORD *)(v40 + 8 * v27++);
                    if (v26)
                    {
                      v20 = v27 - 1;
                      goto LABEL_35;
                    }
                  }
LABEL_49:
                  sub_10007EF58(v5);
                  return;
                }
              }
            }
          }
        }
LABEL_35:
        v18 = (v26 - 1) & v26;
        v19 = __clz(__rbit64(v26)) + (v20 << 6);
      }
      v24 = *(id *)(*(_QWORD *)(v5 + 48) + 8 * v19);
      if (!v24)
        goto LABEL_49;
    }
    v28 = objc_msgSend(v24, "getEndpointUser");
    if (v28 == (id)1)
    {
      v29 = a3;
      v30 = *a3 + 1;
      if (*a3 == -1)
        goto LABEL_50;
      goto LABEL_42;
    }
    if (v28)
      goto LABEL_12;
    v29 = a2;
    v30 = *a2 + 1;
    if (*a2 == -1)
      break;
LABEL_42:
    *v29 = v30;
    if (*a4 != 1)
      goto LABEL_12;
    v31 = objc_msgSend(v24, "environment");
    if (!v31)
      goto LABEL_11;
    v32 = v31;
    v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
    v35 = v34;

    if (v33 != 80 || v35 != 0xE100000000000000)
    {
      v36 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v35, 80, 0xE100000000000000, 0);
      swift_bridgeObjectRelease(v35);
      if ((v36 & 1) == 0)
LABEL_11:
        *a4 = 0;
LABEL_12:

      goto LABEL_13;
    }

    v10 = (_QWORD *)swift_bridgeObjectRelease(0xE100000000000000);
LABEL_13:
    v12 = v20;
    v13 = v18;
  }
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
}

uint64_t sub_10016D660(uint64_t a1, void *aBlock)
{
  uint64_t v2;
  void (*v3)(uint64_t (*)(), uint64_t);
  void *v4;
  uint64_t v5;

  v3 = *(void (**)(uint64_t (*)(), uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v4 = _Block_copy(aBlock);
  v5 = swift_allocObject(&unk_10030B618, 24, 7);
  *(_QWORD *)(v5 + 16) = v4;
  swift_retain(v2);
  v3(sub_10017B854, v5);
  swift_release(v2);
  return swift_release(v5);
}

uint64_t sub_10016D6D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  os_unfair_lock_s *v30;
  os_unfair_lock_s *v31;
  uint64_t v32;
  void *v33;
  uint64_t result;
  id v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  os_unfair_lock_s *v40;
  os_unfair_lock_s *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  os_unfair_lock_s *v46;
  os_unfair_lock_s *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 *v55;
  _QWORD v56[4];
  uint64_t v57;
  _BYTE v58[16];
  uint64_t v59;

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (_QWORD *)((char *)v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v9 = qword_100354EE8;
  *v8 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_27:
    swift_once(&qword_1003445B8, sub_1000EAA4C);
    goto LABEL_8;
  }
  v11 = v2 + OBJC_IVAR____TtC10seserviced6Alisha_logger;
  v12 = swift_retain_n(a1, 2);
  v13 = Logger.logObject.getter(v12);
  v17 = static os_log_type_t.info.getter(v13, v14, v15, v16);
  if (os_log_type_enabled(v13, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(12, -1);
    v19 = swift_slowAlloc(32, -1);
    v56[3] = v11;
    v20 = v19;
    *(_DWORD *)v18 = 136315138;
    v59 = v19;
    v21 = swift_retain(a1);
    v22 = UUID.uuidString.getter(v21);
    v24 = v23;
    swift_release(a1);
    v57 = sub_1001C56EC(v22, v24, &v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, v58, v18 + 4, v18 + 12);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease(v24);
    _os_log_impl((void *)&_mh_execute_header, v13, v17, "Peer paired %s", v18, 0xCu);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v18, -1, -1);
  }
  else
  {
    swift_release_n(a1, 2);
  }

  v25 = qword_1003445B8;
  swift_retain(a1);
  if (v25 != -1)
    goto LABEL_27;
LABEL_8:
  v26 = off_1003463F0;
  v27 = swift_allocObject(&unk_10030B690, 32, 7);
  *(_QWORD *)(v27 + 16) = sub_10017B880;
  *(_QWORD *)(v27 + 24) = a1;
  v29 = __chkstk_darwin(v27, v28);
  v56[-4] = sub_100095FDC;
  v56[-3] = v29;
  v56[-2] = v26;
  v31 = v30 + 4;
  swift_retain(a1);
  os_unfair_lock_lock(v31);
  sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_100096F14, &v59);
  os_unfair_lock_unlock(v31);
  v32 = v59;
  swift_release(a1);
  swift_release(v27);
  v33 = (void *)sub_10009F618(v32);
  result = swift_bridgeObjectRelease(v32);
  if (v33)
  {
    v35 = objc_msgSend(objc_allocWithZone((Class)SESConfigDCK), "init");
    v36 = sub_10016F4E0(v33, v35);
    v37 = objc_msgSend(v33, "getEndpointUser");
    if (!v37)
      *(_BYTE *)(v36 + OBJC_IVAR____TtC10seserviced4Peer_expressState) = 1;
    if (qword_1003447A0 != -1)
      v37 = (id)swift_once(&qword_1003447A0, sub_1001EDCA4);
    v59 = v36;
    __chkstk_darwin(v37, v38);
    v56[-2] = v39;
    v56[-1] = &v59;
    v41 = v40 + 4;
    os_unfair_lock_lock(v40 + 4);
    sub_10016B0FC(v42, sub_10017B888);
    os_unfair_lock_unlock(v41);
    if (qword_1003446C0 != -1)
      swift_once(&qword_1003446C0, sub_10019CC14);
    sub_10019C510(v36, 0, 1);
    if (qword_1003446C8 != -1)
      swift_once(&qword_1003446C8, sub_1001A0A18);
    sub_1001A0310(v36);
    __chkstk_darwin(v43, v44);
    v56[-4] = sub_1001768B4;
    v56[-3] = 0;
    v56[-2] = v45;
    v47 = v46 + 4;
    os_unfair_lock_lock(v46 + 4);
    sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_10017BF58, &v59);
    os_unfair_lock_unlock(v47);
    v48 = v59;
    sub_10019CA04(v59);
    swift_bridgeObjectRelease(v48);
    v49 = objc_opt_self(SESDAnalyticsLogger);
    sub_100049C94(v49, CFSTR("connectionCount"));
    if (qword_100344608 != -1)
      swift_once(&qword_100344608, sub_100141A78);
    result = sub_1000E848C(0xD00000000000001ALL, 0x80000001002BB350);
    if (v50 >> 60 == 15)
    {
      __break(1u);
    }
    else
    {
      v51 = result;
      v52 = v50;
      v53 = sub_100143DF4(result, v50);
      sub_10006B9B4(v51, v52);
      if (*(_BYTE *)(v53 + 16) == 1)
      {
        if (qword_100344560 != -1)
          swift_once(&qword_100344560, sub_10006C2DC);
        v54 = *(_QWORD *)(v53 + 24);
        v55 = (__int128 *)swift_bridgeObjectRetain(v54);
        sub_10006C3F8(v55);

        swift_release(v36);
        swift_release(v53);
        return swift_bridgeObjectRelease(v54);
      }
      else
      {

        swift_release(v36);
        return swift_release(v53);
      }
    }
  }
  return result;
}

uint64_t sub_10016DEFC(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10016DF1C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_10016DF3C(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_10016DF50(a1, a2, a3);
}

uint64_t sub_10016DF50(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  id v8;
  _BYTE v10[24];
  uint64_t v11;

  v6 = sub_100063D3C(&qword_100346170);
  v7 = swift_allocObject(v6, 32, 7);
  *(_QWORD *)(v7 + 16) = a2;
  *(_QWORD *)(v7 + 24) = a3;
  swift_beginAccess(a1 + 16, v10, 33, 0);
  v8 = a3;
  swift_retain(a2);
  sub_1000C74B0(&v11, v7);
  swift_endAccess(v10);
  return swift_release(v11);
}

void sub_10016DFF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[5];
  unint64_t v34;

  v1 = a1;
  v34 = (unint64_t)_swiftEmptyArrayStorage;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = type metadata accessor for Peer(0);
    v5 = sub_1000639EC((unint64_t *)&qword_100347720, type metadata accessor for Peer, (uint64_t)&unk_10028BFA8);
    v6 = Set.Iterator.init(_cocoa:)(v33, v3, v4, v5);
    v1 = v33[0];
    v30 = v33[1];
    v7 = v33[2];
    v8 = v33[3];
    v9 = v33[4];
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v30 = a1 + 56;
    v7 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v9 = v12 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v8 = 0;
  }
  v13 = (unint64_t)(v7 + 64) >> 6;
  while (v1 < 0)
  {
    v17 = __CocoaSet.Iterator.next()(v6);
    if (!v17)
      goto LABEL_40;
    v18 = v17;
    v31 = v17;
    v19 = type metadata accessor for Peer(0);
    swift_unknownObjectRetain(v18);
    swift_dynamicCast(&v32, &v31, (char *)&type metadata for Swift.AnyObject + 8, v19, 7);
    v20 = v32;
    swift_unknownObjectRelease(v18);
    v16 = v8;
    v14 = v9;
    if (!v20)
      goto LABEL_40;
LABEL_36:
    v24 = type metadata accessor for AlishaPeer(0);
    v25 = swift_dynamicCastClass(v20, v24);
    if (v25)
    {
      v26 = v25;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v25);
      v28 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v27 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v28 >= v27 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1);
      v29 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v28, v26);
      v6 = (_QWORD *)specialized Array._endMutation()(v29);
    }
    else
    {
      v6 = (_QWORD *)swift_release(v20);
    }
    v8 = v16;
    v9 = v14;
  }
  if (v9)
  {
    v14 = (v9 - 1) & v9;
    v15 = __clz(__rbit64(v9)) | (v8 << 6);
    v16 = v8;
LABEL_35:
    v20 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v15);
    swift_retain(v20);
    if (!v20)
      goto LABEL_40;
    goto LABEL_36;
  }
  v21 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v21 >= v13)
      goto LABEL_40;
    v22 = *(_QWORD *)(v30 + 8 * v21);
    v16 = v8 + 1;
    if (!v22)
    {
      v16 = v8 + 2;
      if (v8 + 2 >= v13)
        goto LABEL_40;
      v22 = *(_QWORD *)(v30 + 8 * v16);
      if (!v22)
      {
        v16 = v8 + 3;
        if (v8 + 3 >= v13)
          goto LABEL_40;
        v22 = *(_QWORD *)(v30 + 8 * v16);
        if (!v22)
        {
          v16 = v8 + 4;
          if (v8 + 4 >= v13)
            goto LABEL_40;
          v22 = *(_QWORD *)(v30 + 8 * v16);
          if (!v22)
          {
            v16 = v8 + 5;
            if (v8 + 5 >= v13)
              goto LABEL_40;
            v22 = *(_QWORD *)(v30 + 8 * v16);
            if (!v22)
            {
              v23 = v8 + 6;
              while (v13 != v23)
              {
                v22 = *(_QWORD *)(v30 + 8 * v23++);
                if (v22)
                {
                  v16 = v23 - 1;
                  goto LABEL_34;
                }
              }
LABEL_40:
              sub_10007EF58(v1);
              return;
            }
          }
        }
      }
    }
LABEL_34:
    v14 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v16 << 6);
    goto LABEL_35;
  }
  __break(1u);
}

uint64_t sub_10016E308(void **a1)
{
  return sub_100175E34(*a1);
}

uint64_t sub_10016E310(unsigned int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  void *v30;
  id v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t);
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  NSObject *v44;
  uint64_t v45;
  os_log_type_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  NSObject *v50;
  uint64_t v51;
  os_log_type_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  NSObject *v60;
  void (*v61)(char *, uint64_t);
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  unint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE v86[24];
  uint64_t v87;
  uint64_t v88;

  v81 = a4;
  v77 = a8;
  v84 = a5;
  v80 = a3;
  v78 = a1;
  LODWORD(v79) = a2;
  v11 = sub_100063D3C((uint64_t *)&unk_1003465E0);
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v83 - 8);
  v17 = __chkstk_darwin(v83, v16);
  v75 = (char *)&v74 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v17, v19);
  v22 = (char *)&v74 - v21;
  __chkstk_darwin(v20, v23);
  v76 = (char *)&v74 - v24;
  v25 = type metadata accessor for DispatchPredicate(0);
  v26 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25, v27);
  v29 = (uint64_t *)((char *)&v74 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v30 = (void *)qword_100354EE8;
  *v29 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v26 + 104))(v29, enum case for DispatchPredicate.onQueue(_:), v25);
  v31 = v30;
  v32 = _dispatchPreconditionTest(_:)(v29);
  (*(void (**)(_QWORD *, uint64_t))(v26 + 8))(v29, v25);
  if ((v32 & 1) == 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  if ((a6 & 1) == 0)
  {
LABEL_7:
    a7 = v84;
    if ((a6 & 2) == 0)
      goto LABEL_10;
    goto LABEL_8;
  }
  sub_10013EA8C(a7, (uint64_t)v14);
  v33 = v83;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, v83) == 1)
  {
    sub_100096700((uint64_t)v14, (uint64_t *)&unk_1003465E0);
    goto LABEL_7;
  }
  v38 = v76;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v76, v14, v33);
  v39 = v84;
  v40 = v84 + OBJC_IVAR____TtC10seserviced4Peer_connectionIdentifier;
  swift_beginAccess(v84 + OBJC_IVAR____TtC10seserviced4Peer_connectionIdentifier, v86, 0, 0);
  v41 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v74 = v40;
  v41(v22, v40, v33);
  LOBYTE(v40) = static UUID.== infix(_:_:)(v38, v22);
  v42 = *(void (**)(char *, uint64_t))(v15 + 8);
  v42(v22, v33);
  if ((v40 & 1) == 0)
  {
    v82 = v42;
    v48 = v75;
    v41(v75, (uint64_t)v38, v33);
    v49 = swift_retain_n(v39, 2);
    v50 = Logger.logObject.getter(v49);
    v52 = static os_log_type_t.error.getter(v50, v51);
    v53 = v52;
    if (os_log_type_enabled(v50, v52))
    {
      v54 = swift_slowAlloc(22, -1);
      v81 = swift_slowAlloc(64, -1);
      v87 = v81;
      *(_DWORD *)v54 = 136315394;
      v55 = sub_1000639EC((unint64_t *)&qword_100344CC8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      LODWORD(v80) = v53;
      v56 = v55;
      v57 = dispatch thunk of CustomStringConvertible.description.getter(v83, v55);
      v59 = v58;
      v85 = sub_1001C56EC(v57, v58, &v87);
      v60 = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, v86, v54 + 4, v54 + 12);
      swift_bridgeObjectRelease(v59);
      v61 = v82;
      v82(v48, v83);
      *(_WORD *)(v54 + 12) = 2080;
      v79 = v54 + 14;
      v41(v22, v74, v83);
      v62 = dispatch thunk of CustomStringConvertible.description.getter(v83, v56);
      v64 = v63;
      v61(v22, v83);
      v85 = sub_1001C56EC(v62, v64, &v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, v86, v79, v54 + 22);
      swift_release_n(v84, 2);
      v65 = v76;
      swift_bridgeObjectRelease(v64);
      _os_log_impl((void *)&_mh_execute_header, v50, (os_log_type_t)v80, "Connection identifier has changed %s %s", (uint8_t *)v54, 0x16u);
      v66 = v81;
      swift_arrayDestroy(v81, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v66, -1, -1);
      v67 = v54;
      v33 = v83;
      swift_slowDealloc(v67, -1, -1);

    }
    else
    {
      v65 = v38;

      v61 = v82;
      v82(v48, v33);
      swift_release_n(v39, 2);
    }
    v71 = sub_10006B828();
    v72 = swift_allocError(&type metadata for DSKError, v71, 0, 0);
    *v73 = 2;
    swift_willThrow(v72);
    return ((uint64_t (*)(char *, uint64_t))v61)(v65, v33);
  }
  v42(v38, v33);
  a7 = v84;
  if ((a6 & 2) == 0)
    goto LABEL_10;
LABEL_8:
  if ((a9 & 1) != 0
    || (v34 = OBJC_IVAR____TtC10seserviced4Peer_sequenceNumber,
        *(_QWORD *)(a7 + OBJC_IVAR____TtC10seserviced4Peer_sequenceNumber) == v77))
  {
LABEL_10:
    sub_100176C18(v78, v79, v80, v81);
    v26 = v35;
    v32 = v36;
    if (qword_1003445A0 == -1)
    {
LABEL_11:
      sub_1000ADCAC(v26, v32, a7);
      return sub_100063CD0(v26, v32);
    }
LABEL_24:
    swift_once(&qword_1003445A0, sub_1000B26B0);
    goto LABEL_11;
  }
  v43 = swift_retain(a7);
  v44 = Logger.logObject.getter(v43);
  v46 = static os_log_type_t.error.getter(v44, v45);
  if (os_log_type_enabled(v44, v46))
  {
    v47 = swift_slowAlloc(22, -1);
    *(_DWORD *)v47 = 134218240;
    v87 = v77;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, &v88, v47 + 4, v47 + 12);
    *(_WORD *)(v47 + 12) = 2048;
    v87 = *(_QWORD *)(a7 + v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, &v88, v47 + 14, v47 + 22);
    swift_release(a7);
    _os_log_impl((void *)&_mh_execute_header, v44, v46, "Sequence number has changed %ld %ld", (uint8_t *)v47, 0x16u);
    swift_slowDealloc(v47, -1, -1);
  }
  else
  {
    swift_release(a7);
  }

  v68 = sub_10006B828();
  v69 = swift_allocError(&type metadata for DSKError, v68, 0, 0);
  *v70 = 2;
  return swift_willThrow(v69);
}

uint64_t sub_10016E9A8()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for Alisha(0);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  result = sub_10016EA50();
  qword_100354D60 = result;
  return result;
}

void sub_10016E9E4()
{
  id v0;
  NSString v1;
  id v2;

  v0 = objc_allocWithZone((Class)NSBackgroundActivityScheduler);
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "initWithIdentifier:", v1);

  qword_1003482B8 = (uint64_t)v2;
}

uint64_t sub_10016EA50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  _QWORD aBlock[5];
  uint64_t v12;

  v1 = v0;
  v2 = type metadata accessor for DispatchQoS.QoSClass(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_BYTE *)(v0 + 16) = 0;
  v6 = String.init(cString:)(SESLoggingSubsystem);
  Logger.init(subsystem:category:)(v6);
  *(_BYTE *)(v0 + OBJC_IVAR____TtC10seserviced6Alisha_isLowPowerModeEnabled) = 0;
  *(_BYTE *)(v0 + OBJC_IVAR____TtC10seserviced6Alisha_isPairingInProgress) = 0;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced6Alisha_maxMessageLength) = 1024;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced6Alisha_powerLogTimer) = 0;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced6Alisha_powerLogTimerInterval) = 0x40DC200000000000;
  sub_10006C25C(0, (unint64_t *)&qword_1003461A0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DispatchQoS.QoSClass.default(_:), v2);
  v7 = (void *)static OS_dispatch_queue.global(qos:)(v5);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  aBlock[4] = sub_100176EC4;
  v12 = v1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10017BF6C;
  aBlock[3] = &unk_10030B540;
  v8 = _Block_copy(aBlock);
  v9 = v12;
  swift_retain(v1);
  swift_release(v9);
  os_state_add_handler(v7, v8);
  _Block_release(v8);

  return v1;
}

_DWORD *sub_10016EC04()
{
  uint64_t v0;
  char v1;
  char isUniquelyReferenced_nonNull_native;
  char v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  Class isa;
  _DWORD *v9;
  _OWORD v11[2];
  __int128 v12;
  void *v13;

  v1 = *(_BYTE *)(v0 + 16);
  v13 = &type metadata for Bool;
  LOBYTE(v12) = v1;
  sub_10006C2B4(&v12, v11);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_10018DEC0(v11, 0x6E696E6E75527369, 0xE900000000000067, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease(0x8000000000000000);
  v3 = *(_BYTE *)(v0 + OBJC_IVAR____TtC10seserviced6Alisha_isLowPowerModeEnabled);
  v13 = &type metadata for Bool;
  LOBYTE(v12) = v3;
  sub_10006C2B4(&v12, v11);
  v4 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_10018DEC0(v11, 0xD000000000000015, 0x80000001002BE930, v4);
  swift_bridgeObjectRelease(0x8000000000000000);
  v5 = *(_BYTE *)(v0 + OBJC_IVAR____TtC10seserviced6Alisha_isPairingInProgress);
  v13 = &type metadata for Bool;
  LOBYTE(v12) = v5;
  sub_10006C2B4(&v12, v11);
  v6 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_10018DEC0(v11, 0xD000000000000013, 0x80000001002BE950, v6);
  swift_bridgeObjectRelease(0x8000000000000000);
  v7 = sub_10017D088((uint64_t)&_swiftEmptyDictionarySingleton);
  swift_bridgeObjectRelease(&_swiftEmptyDictionarySingleton);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v7);
  v9 = sub_100015734((uint64_t)"alisha.state", (uint64_t)isa);

  return v9;
}

void sub_10016EDBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  os_unfair_lock_s *v23;
  os_unfair_lock_s *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  os_unfair_lock_s *v29;
  os_unfair_lock_s *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  _QWORD v34[2];

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (_QWORD *)((char *)v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v7 = qword_100354EE8;
  *v6 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  v9 = (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_29:
    v20 = swift_once(&qword_1003445B8, sub_1000EAA4C);
    goto LABEL_11;
  }
  v10 = *(_BYTE *)(v1 + 16);
  v11 = Logger.logObject.getter(v9);
  v15 = v11;
  if ((v10 & 1) != 0)
  {
    v16 = static os_log_type_t.error.getter(v11, v12);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Alisha is already running", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }

    return;
  }
  v18 = static os_log_type_t.info.getter(v11, v12, v13, v14);
  if (os_log_type_enabled(v15, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v18, "Starting Alisha", v19, 2u);
    swift_slowDealloc(v19, -1, -1);
  }

  *(_BYTE *)(v1 + 16) = 1;
  v6 = (_QWORD *)qword_100354EE8;
  if (qword_1003445B8 != -1)
    goto LABEL_29;
LABEL_11:
  __chkstk_darwin(v20, v21);
  v34[-4] = v22;
  v34[-3] = v1;
  v24 = v23 + 4;
  v34[-2] = v6;
  os_unfair_lock_lock(v23 + 4);
  sub_10016B0FC(v25, sub_10017B810);
  os_unfair_lock_unlock(v24);
  v26 = sub_100176930(v1);
  __chkstk_darwin(v26, v27);
  v34[-4] = sub_10008ECD0;
  v34[-3] = 0;
  v34[-2] = v28;
  v30 = v29 + 4;
  os_unfair_lock_lock(v29 + 4);
  sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_100096F14, v34);
  os_unfair_lock_unlock(v30);
  v31 = v34[0];
  if ((v34[0] & 0xC000000000000001) != 0)
  {
    if (v34[0] < 0)
      v32 = v34[0];
    else
      v32 = v34[0] & 0xFFFFFFFFFFFFFF8;
    if (__CocoaSet.count.getter(v32))
      goto LABEL_16;
LABEL_18:
    swift_bridgeObjectRelease(v31);
    goto LABEL_19;
  }
  if (!*(_QWORD *)(v34[0] + 16))
    goto LABEL_18;
LABEL_16:
  v33 = objc_msgSend(objc_allocWithZone((Class)SESConfigDCK), "init");
  swift_retain(v1);
  sub_100176EE0(v31, v1, v33);
  swift_bridgeObjectRelease(v31);

  swift_release(v1);
LABEL_19:
  if (qword_1003446C0 != -1)
    swift_once(&qword_1003446C0, sub_10019CC14);
  sub_10019BF20();
  if (qword_100344738 != -1)
    swift_once(&qword_100344738, sub_1001D63E8);
  sub_1001D5A38();
  if (qword_1003446C8 != -1)
    swift_once(&qword_1003446C8, sub_1001A0A18);
  sub_10019F4E8();
  if (qword_100344590 != -1)
    swift_once(&qword_100344590, sub_100099ECC);
  sub_10009A15C();
  sub_10017B4DC();
  sub_10016FB88();
}

void sub_10016F1E0(void **a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  uint64_t v9;
  os_log_type_t v10;
  uint8_t *v11;
  _DWORD *v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  os_unfair_lock_s *v25;
  os_unfair_lock_s *v26;
  uint64_t v27;
  _DWORD *v28;
  uint8_t *v29;
  uint64_t v30;
  os_log_type_t v31;
  uint64_t v32;
  _BYTE v33[8];
  uint64_t v34;

  v4 = *a1;
  v5 = sub_10016F4E0(*a1, a3);
  if (v3)
  {
    swift_errorRelease(v3);
    v7 = v4;
    v8 = Logger.logObject.getter(v7);
    v10 = static os_log_type_t.error.getter(v8, v9);
    if (os_log_type_enabled(v8, v10))
    {
      v31 = v10;
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v30 = swift_slowAlloc(32, -1);
      v34 = v30;
      *(_DWORD *)v11 = 136315138;
      v12 = v11 + 12;
      v28 = v11 + 4;
      v29 = v11;
      v13 = objc_msgSend(v7, "publicKeyIdentifier");
      v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v16 = v15;

      sub_1001BD2CC(v14, v16);
      v18 = v17;
      v19 = sub_100063D3C((uint64_t *)&unk_100346060);
      v20 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
      v21 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v19, v20);
      v23 = v22;
      swift_bridgeObjectRelease(v18);
      sub_100063CD0(v14, v16);
      v32 = sub_1001C56EC(v21, v23, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, v33, v28, v12);

      swift_bridgeObjectRelease(v23);
      _os_log_impl((void *)&_mh_execute_header, v8, v31, "Failed to initialize peer for %s", v29, 0xCu);
      swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v29, -1, -1);

    }
    else
    {

    }
  }
  else
  {
    v24 = v5;
    if (qword_1003447A0 != -1)
      v5 = swift_once(&qword_1003447A0, sub_1001EDCA4);
    v34 = v24;
    __chkstk_darwin(v5, v6);
    v26 = v25 + 4;
    os_unfair_lock_lock(v25 + 4);
    sub_10016B0FC(v27, sub_10017BF44);
    os_unfair_lock_unlock(v26);
    swift_release(v24);
  }
}

uint64_t sub_10016F4E0(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  void *v31;
  NSObject *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t result;
  uint64_t v40;
  id v41;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  id v60;
  uint64_t v61;
  unint64_t v62;
  id v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  id v71;
  unint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  void *v78;
  id v79;
  void *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  void (*v95)(char *, char *, uint64_t);
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  id v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  char *v104;
  uint64_t v105;

  v99 = a2;
  v5 = type metadata accessor for DispatchPredicate(0);
  v101 = *(_QWORD *)(v5 - 8);
  v102 = v5;
  __chkstk_darwin(v5, v6);
  v100 = (uint64_t *)((char *)&v93 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = sub_100063D3C((uint64_t *)&unk_1003465E0);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v93 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v15 = __chkstk_darwin(v12, v14);
  v17 = (char *)&v93 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v15, v18);
  v21 = (char *)&v93 - v20;
  __chkstk_darwin(v19, v22);
  v104 = (char *)&v93 - v23;
  v24 = objc_msgSend(a1, "bleUUID");
  if (!v24)
    goto LABEL_6;
  v25 = v24;
  v103 = a1;
  v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
  v105 = v12;
  v28 = v27;

  UUID.init(uuidString:)(v26, v28);
  v29 = v105;
  swift_bridgeObjectRelease(v28);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v29) == 1)
  {
    sub_100096700((uint64_t)v11, (uint64_t *)&unk_1003465E0);
LABEL_6:
    v36 = sub_10006B828();
    v37 = swift_allocError(&type metadata for DSKError, v36, 0, 0);
    *v38 = 0;
    swift_willThrow(v37);
    return v2;
  }
  v30 = v104;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v104, v11, v29);
  v31 = v103;
  v32 = sub_100174304(v103);
  if (v3)
  {
    swift_errorRelease(v3);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v30, v29);
    goto LABEL_6;
  }
  v40 = (uint64_t)v32;
  v96 = v35;
  v97 = v34;
  v98 = v33;
  v95 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  v95(v21, v30, v29);
  v41 = objc_msgSend(v31, "readerConfigID");
  if (v41)
  {
    v42 = v41;
    v43 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v41);
    v94 = v44;

  }
  else
  {
    v43 = 0;
    v94 = 0xF000000000000000;
  }
  v45 = type metadata accessor for AlishaPeer(0);
  v46 = swift_allocObject(v45, *(unsigned int *)(v45 + 48), *(unsigned __int16 *)(v45 + 52));
  v93 = v46;
  v47 = type metadata accessor for AlishaPeer.Configuration();
  swift_allocObject(v47, 113, 7);
  v48 = v99;
  swift_retain(v46);
  v49 = v94;
  sub_10006BA34(v43, v94);
  v50 = sub_1001BD08C(v40, v98, v97, v96, v43, v49, v48);

  sub_10006B9B4(v43, v49);
  v51 = v93;
  *(_QWORD *)(v93 + OBJC_IVAR____TtC10seserviced10AlishaPeer_configuration) = v50;
  swift_release(v51);
  v52 = v105;
  v95(v17, v21, v105);
  v2 = sub_1001A3188((uint64_t)v17);
  sub_10006B9B4(v43, v49);
  v99 = *(id *)(v13 + 8);
  ((void (*)(char *, uint64_t))v99)(v21, v52);
  swift_retain(v2);
  v53 = sub_1000E848C(0xD00000000000001ALL, 0x80000001002BB350);
  v54 = (uint64_t *)(v2 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier);
  v55 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier);
  v56 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier + 8);
  *v54 = v53;
  v54[1] = v57;
  sub_10006B9B4(v55, v56);
  swift_release(v2);
  v58 = qword_100344608;
  swift_retain(v2);
  if (v58 != -1)
    swift_once(&qword_100344608, sub_100141A78);
  v97 = qword_100354CE0;
  v59 = v103;
  v60 = objc_msgSend(v103, "publicKeyIdentifier");
  v61 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v60);
  v98 = v62;

  v63 = objc_msgSend(v59, "appletIdentifier");
  v64 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v63);
  v66 = v65;

  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v67 = qword_100354EE8;
  v69 = v100;
  v68 = v101;
  *v100 = qword_100354EE8;
  v70 = v102;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v68 + 104))(v69, enum case for DispatchPredicate.onQueue(_:), v102);
  v71 = (id)v67;
  LOBYTE(v67) = _dispatchPreconditionTest(_:)(v69);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v68 + 8))(v69, v70);
  if ((v67 & 1) != 0)
  {
    v73 = v97;
    v72 = v98;
    if ((*(_BYTE *)(v97 + OBJC_IVAR____TtC10seserviced10DSKExpress_debugBypassExpress) & 1) != 0)
    {
      v74 = 1;
    }
    else
    {
      v75 = *(_QWORD *)(v97 + OBJC_IVAR____TtC10seserviced10DSKExpress_expressKeys);
      sub_100063C8C(v61, v98);
      sub_100063C8C(v64, v66);
      v76 = swift_bridgeObjectRetain(v75);
      v77 = sub_10007D82C(v76);
      sub_100063CD0(v64, v66);
      sub_100063CD0(v61, v72);
      swift_bridgeObjectRelease(v75);
      if ((v77 & 1) != 0)
        v74 = *(_BYTE *)(v73 + OBJC_IVAR____TtC10seserviced10DSKExpress_expressState);
      else
        v74 = 0;
    }
    sub_100063CD0(v64, v66);
    sub_100063CD0(v61, v72);
    *(_BYTE *)(v2 + OBJC_IVAR____TtC10seserviced4Peer_expressState) = v74;
    swift_release(v2);
    swift_retain(v2);
    v78 = v103;
    v79 = objc_msgSend(v103, "trackingReceipt");
    if (v79)
    {
      v80 = v79;
      v81 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v79);
      v83 = v82;

      v84 = v81;
      v78 = v103;
      sub_100063CD0(v84, v83);
      v85 = 2;
    }
    else
    {
      v85 = 1;
    }
    *(_BYTE *)(v2 + OBJC_IVAR____TtC10seserviced4Peer_pairingState) = v85;
    swift_release(v2);
    swift_retain(v2);
    v86 = objc_msgSend(v78, "publicKeyIdentifier");
    v87 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v86);
    v89 = v88;

    ((void (*)(char *, uint64_t))v99)(v104, v105);
    v90 = (uint64_t *)(v2 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
    v91 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
    v92 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
    *v90 = v87;
    v90[1] = v89;
    sub_10006B9B4(v91, v92);
    swift_release(v2);
    *(_BYTE *)(v2 + OBJC_IVAR____TtC10seserviced4Peer_type) = 0;
    return v2;
  }
  __break(1u);
  return result;
}

void sub_10016FB88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  id v7;
  void *v8;
  NSObject **v9;
  void *v10;
  NSObject **v11;
  void *v12;
  _QWORD aBlock[5];
  uint64_t v14;

  v1 = type metadata accessor for DispatchPredicate(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  v5 = (_QWORD *)((char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v6 = qword_100354EE8;
  *v5 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v1);
  v7 = (id)v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v5);
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v5, v1);
  if ((v6 & 1) != 0)
  {
    v8 = (void *)qword_100354EE8;
    v9 = (NSObject **)objc_allocWithZone((Class)SESTimer);
    aBlock[4] = sub_10017B82C;
    v14 = v0;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100071C98;
    aBlock[3] = &unk_10030B5B8;
    v10 = _Block_copy(aBlock);
    swift_retain(v0);
    v11 = sub_10004C264(v9, v8, v10);
    _Block_release(v10);
    swift_release(v14);
    v12 = *(void **)(v0 + OBJC_IVAR____TtC10seserviced6Alisha_powerLogTimer);
    *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced6Alisha_powerLogTimer) = v11;

    sub_100175ED4();
  }
  else
  {
    __break(1u);
  }
}

void sub_10016FD04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t, uint64_t);
  id v10;
  uint64_t (*v11)(char *, uint64_t);
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  os_unfair_lock_s *v24;
  os_unfair_lock_s *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  os_unfair_lock_s *v39;
  os_unfair_lock_s *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  char v48[24];
  char v49[32];

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = &v48[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v7 = qword_100354EE8;
  *(_QWORD *)v6 = qword_100354EE8;
  v8 = enum case for DispatchPredicate.onQueue(_:);
  v9 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 104);
  v9(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v10 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  v11 = *(uint64_t (**)(char *, uint64_t))(v3 + 8);
  v12 = v11(v6, v2);
  if ((v7 & 1) == 0)
  {
    __break(1u);
    goto LABEL_32;
  }
  v13 = *(unsigned __int8 *)(v1 + 16);
  v14 = Logger.logObject.getter(v12);
  v18 = v14;
  if (v13 == 1)
  {
    v19 = static os_log_type_t.info.getter(v14, v15, v16, v17);
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Stopping Alisha", v20, 2u);
      swift_slowDealloc(v20, -1, -1);
    }

    if (qword_1003445B8 == -1)
    {
LABEL_8:
      __chkstk_darwin(v21, v22);
      *(&v47 - 2) = v23;
      *(&v47 - 1) = v1;
      v25 = v24 + 4;
      os_unfair_lock_lock(v24 + 4);
      sub_10016B0FC(v26, sub_10017B4C4);
      os_unfair_lock_unlock(v25);
      if (qword_100344578 != -1)
        swift_once(&qword_100344578, sub_10008091C);
      sub_1000847F8();
      if (qword_1003446C0 != -1)
        swift_once(&qword_1003446C0, sub_10019CC14);
      sub_10019C250();
      if (qword_100344738 != -1)
        swift_once(&qword_100344738, sub_1001D63E8);
      sub_1001D5C10();
      if (qword_1003446C8 != -1)
        swift_once(&qword_1003446C8, sub_1001A0A18);
      sub_10019F86C();
      if (qword_100344590 != -1)
        swift_once(&qword_100344590, sub_100099ECC);
      sub_10009A3FC();
      if (qword_100344720 != -1)
        swift_once(&qword_100344720, sub_1001C7400);
      v27 = qword_100354E28;
      v28 = qword_100354EE8;
      *(_QWORD *)v6 = qword_100354EE8;
      v9(v6, v8, v2);
      v29 = (id)v28;
      LOBYTE(v28) = _dispatchPreconditionTest(_:)(v6);
      v11(v6, v2);
      if ((v28 & 1) != 0)
      {
        v30 = sub_10017CB68((uint64_t)_swiftEmptyArrayStorage);
        v31 = (unint64_t *)(v27 + OBJC_IVAR____TtC10seserviced13AlishaVehicle_status);
        swift_beginAccess(v27 + OBJC_IVAR____TtC10seserviced13AlishaVehicle_status, v49, 1, 0);
        v32 = *v31;
        *v31 = v30;
        swift_bridgeObjectRelease(v32);
        v33 = sub_10017CB74((uint64_t)_swiftEmptyArrayStorage);
        v34 = (unint64_t *)(v27 + OBJC_IVAR____TtC10seserviced13AlishaVehicle_proprietaryData);
        swift_beginAccess(v27 + OBJC_IVAR____TtC10seserviced13AlishaVehicle_proprietaryData, v48, 1, 0);
        v35 = *v34;
        *v34 = v33;
        v36 = swift_bridgeObjectRelease(v35);
        if (qword_1003447A0 == -1)
        {
LABEL_22:
          __chkstk_darwin(v36, v37);
          *(&v47 - 4) = (uint64_t)sub_10009B494;
          *(&v47 - 3) = 0;
          *(&v47 - 2) = v38;
          v40 = v39 + 4;
          os_unfair_lock_lock(v39 + 4);
          sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_10017BF58, &v47);
          os_unfair_lock_unlock(v40);
          v41 = v47;
          sub_10016CF5C(v47);
          swift_bridgeObjectRelease(v41);
          if (qword_100344688 != -1)
            swift_once(&qword_100344688, sub_10016E9E4);
          objc_msgSend((id)qword_1003482B8, "invalidate");
          v42 = OBJC_IVAR____TtC10seserviced6Alisha_powerLogTimer;
          v43 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10seserviced6Alisha_powerLogTimer);
          if (v43)
          {
            sub_10004C548(v43);
            v44 = *(void **)(v1 + v42);
          }
          else
          {
            v44 = 0;
          }
          *(_QWORD *)(v1 + v42) = 0;

          *(_BYTE *)(v1 + OBJC_IVAR____TtC10seserviced6Alisha_isLowPowerModeEnabled) = 0;
          *(_BYTE *)(v1 + OBJC_IVAR____TtC10seserviced6Alisha_isPairingInProgress) = 0;
          *(_BYTE *)(v1 + 16) = 0;
          return;
        }
      }
      else
      {
        __break(1u);
      }
      v36 = swift_once(&qword_1003447A0, sub_1001EDCA4);
      goto LABEL_22;
    }
LABEL_32:
    v21 = swift_once(&qword_1003445B8, sub_1000EAA4C);
    goto LABEL_8;
  }
  v45 = static os_log_type_t.error.getter(v14, v15);
  if (os_log_type_enabled(v18, v45))
  {
    v46 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v46 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v45, "Alisha is not running", v46, 2u);
    swift_slowDealloc(v46, -1, -1);
  }

}

void sub_10017027C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;

  v4 = v3;
  v8 = type metadata accessor for DispatchPredicate(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (uint64_t *)((char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v13 = qword_100354EE8;
  *v12 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8);
  v14 = (id)v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)(v12);
  (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v12, v8);
  if ((v13 & 1) != 0)
  {
    if (qword_1003447C8 == -1)
      goto LABEL_5;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1003447C8, sub_1001F416C);
LABEL_5:
  sub_1001F2CA0(a3 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier, a1, a2);
  if ((*(_BYTE *)(a3 + OBJC_IVAR____TtC10seserviced4Peer_isConnected) & 1) == 0)
  {
    if (qword_1003446C0 != -1)
      swift_once(&qword_1003446C0, sub_10019CC14);
    sub_10019C510(a3, *(_BYTE *)(v4 + OBJC_IVAR____TtC10seserviced6Alisha_isLowPowerModeEnabled), 0);
    if (qword_1003445A0 != -1)
      swift_once(&qword_1003445A0, sub_1000B26B0);
    sub_1000B8D70(a3);
  }
}

void sub_100170450(char a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  char **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  os_log_type_t v31;
  uint64_t v32;
  int v33;
  int v34;
  unsigned int v35;
  _BOOL4 v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _UNKNOWN **v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  id v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  void *v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  os_log_type_t v78;
  uint8_t *v80;
  NSObject *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  os_log_type_t v85;
  uint8_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  NSObject *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  os_log_type_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  const char *v104;
  NSObject *v105;
  os_log_type_t v106;
  uint8_t *v107;
  uint32_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t inited;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  Swift::String v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  void *v135;
  Swift::String v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  os_log_type_t v147;
  uint64_t *v148;
  unint64_t v149;
  uint64_t v150;
  NSObject *v151;
  uint64_t v152;
  os_log_type_t v153;
  uint8_t *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v171;
  os_log_type_t v172;
  uint8_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  NSObject *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  os_log_type_t v190;
  uint8_t *v191;
  uint64_t v192;
  uint64_t v193;
  NSObject *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  os_log_type_t v198;
  uint8_t *v199;
  id v200;
  Class isa;
  Class v202;
  uint64_t v203;
  id v204;
  _BOOL4 v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char v215[80];
  uint64_t v216;
  _BYTE v217[24];

  v8 = v7;
  v208 = a6;
  v209 = a5;
  v211 = a4;
  LODWORD(v210) = a2;
  LOBYTE(v11) = a1;
  v12 = sub_100063D3C((uint64_t *)&unk_1003465E0);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v204 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchPredicate(0);
  v17 = *(char ***)(v16 - 8);
  __chkstk_darwin(v16, v18);
  v20 = (uint64_t)&v204 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1003447B8 != -1)
LABEL_98:
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v21 = (void *)qword_100354EE8;
  *(_QWORD *)v20 = qword_100354EE8;
  ((void (*)(uint64_t, _QWORD, unint64_t))v17[13])(v20, enum case for DispatchPredicate.onQueue(_:), v16);
  v22 = v21;
  v23 = _dispatchPreconditionTest(_:)(v20);
  v24 = ((uint64_t (*)(uint64_t, unint64_t))v17[1])(v20, v16);
  if ((v23 & 1) == 0)
  {
    __break(1u);
    goto LABEL_100;
  }
  v212 = a3;
  v25 = OBJC_IVAR____TtC10seserviced6Alisha_isPairingInProgress;
  if ((*(_BYTE *)(v8 + OBJC_IVAR____TtC10seserviced6Alisha_isPairingInProgress) & 1) != 0)
    goto LABEL_4;
  if (*(_BYTE *)(a7 + OBJC_IVAR____TtC10seserviced4Peer_pairingState) != 2)
  {
    v37 = 0;
    if (v11 != 3 && v11 != 6)
    {
LABEL_4:
      swift_retain(a7);
      v26 = swift_retain(v8);
      v27 = Logger.logObject.getter(v26);
      v31 = static os_log_type_t.info.getter(v27, v28, v29, v30);
      if (os_log_type_enabled(v27, v31))
      {
        v32 = swift_slowAlloc(14, -1);
        v33 = *(unsigned __int8 *)(v8 + v25);
        *(_DWORD *)v32 = 67109376;
        LODWORD(v213) = v33;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v213, (char *)&v213 + 4, v32 + 4, v32 + 8);
        swift_release(v8);
        v34 = *(unsigned __int8 *)(a7 + OBJC_IVAR____TtC10seserviced4Peer_pairingState);
        *(_WORD *)(v32 + 8) = 1024;
        LODWORD(v213) = v34 != 2;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v213, (char *)&v213 + 4, v32 + 10, v32 + 14);
        swift_release(a7);
        _os_log_impl((void *)&_mh_execute_header, v27, v31, "Sending DEVICE_BUSY because pairing is in progress %{BOOL}d or peer is not fully paired %{BOOL}d", (uint8_t *)v32, 0xEu);
        swift_slowDealloc(v32, -1, -1);
      }
      else
      {
        swift_release(a7);
        swift_release(v8);
      }

      v52 = &off_100305598;
      goto LABEL_18;
    }
    goto LABEL_24;
  }
  v35 = v11 - 1;
  if (*(_BYTE *)(v8 + OBJC_IVAR____TtC10seserviced6Alisha_isLowPowerModeEnabled) == 1 && v35 < 2)
  {
    v74 = Logger.logObject.getter(v24);
    v78 = static os_log_type_t.info.getter(v74, v75, v76, v77);
    if (os_log_type_enabled(v74, v78))
    {
      v80 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v80 = 0;
      _os_log_impl((void *)&_mh_execute_header, v74, v78, "Command blocked because of low power mode", v80, 2u);
      swift_slowDealloc(v80, -1, -1);
    }

    v52 = &off_100305570;
    goto LABEL_18;
  }
  v37 = v11 == 1;
  if (v35 > 1
    || (v38 = OBJC_IVAR____TtC10seserviced4Peer_expressState,
        *(_BYTE *)(a7 + OBJC_IVAR____TtC10seserviced4Peer_expressState) == 1))
  {
LABEL_24:
    v206 = v11;
    v60 = (void *)objc_opt_self(_SESSessionManager);
    v61 = objc_msgSend(v60, "sessionManager");
    v62 = objc_msgSend(v61, "getActiveDCKSessions");

    v63 = sub_10006C25C(0, &qword_100346F88, off_100301C60);
    v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v62, v63);

    v207 = a7;
    v204 = v60;
    v205 = v37;
    if ((unint64_t)v20 >> 62)
    {
      if (v20 < 0)
        v203 = v20;
      else
        v203 = v20 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v20);
      v16 = _CocoaArrayWrapper.endIndex.getter(v203);
      if (v16)
      {
LABEL_26:
        a7 = v20 & 0xC000000000000001;
        v64 = 4;
        v17 = &selRef_defaultCenter;
        while (1)
        {
          a3 = v64 - 4;
          if (a7)
            v65 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v64 - 4, v20);
          else
            v65 = *(id *)(v20 + 8 * v64);
          v66 = v65;
          v11 = v64 - 3;
          if (__OFADD__(a3, 1))
          {
            __break(1u);
            goto LABEL_98;
          }
          v67 = objc_msgSend(v65, "isPreArmed");

          if (v67)
            break;
          ++v64;
          if (v11 == v16)
            goto LABEL_33;
        }
        v68 = swift_bridgeObjectRelease_n(v20, 2);
        a7 = v207;
        if (v205)
        {
          v81 = Logger.logObject.getter(v68);
          v85 = static os_log_type_t.info.getter(v81, v82, v83, v84);
          if (os_log_type_enabled(v81, v85))
          {
            v86 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v86 = 0;
            _os_log_impl((void *)&_mh_execute_header, v81, v85, "Device SE busy because a pass is pre-armed", v86, 2u);
            swift_slowDealloc(v86, -1, -1);
          }

          v52 = &off_100305520;
LABEL_18:
          v53 = sub_10007C66C((uint64_t)v52);
          v55 = v54;
          sub_100176C18(3, 17, v53, v54);
          a3 = v56;
          v16 = v57;
          sub_100063CD0(v53, v55);
          if (qword_1003445A0 == -1)
          {
LABEL_19:
            sub_1000ADCAC(a3, v16, a7);
LABEL_20:
            v58 = a3;
            v59 = v16;
LABEL_21:
            sub_100063CD0(v58, v59);
            return;
          }
LABEL_100:
          swift_once(&qword_1003445A0, sub_1000B26B0);
          goto LABEL_19;
        }
        v71 = v206;
        v69 = v211;
        v70 = v212;
        switch((int)v206)
        {
          case 0:
            goto LABEL_50;
          case 2:
            v186 = Logger.logObject.getter(v68);
            v190 = static os_log_type_t.info.getter(v186, v187, v188, v189);
            if (os_log_type_enabled(v186, v190))
            {
              v191 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v191 = 0;
              _os_log_impl((void *)&_mh_execute_header, v186, v190, "Device busy because a pass is pre-armed", v191, 2u);
              swift_slowDealloc(v191, -1, -1);
            }

            v52 = &off_100305548;
            goto LABEL_18;
          case 3:
LABEL_64:
            if (v210 == 17)
            {
              sub_100171B38(v70, v69, a7);
              return;
            }
            sub_100063C8C(v70, v69);
            v162 = sub_100063C8C(v70, v69);
            v90 = Logger.logObject.getter(v162);
            v94 = static os_log_type_t.error.getter(v90, v163);
            if (!os_log_type_enabled(v90, v94))
              goto LABEL_87;
            v95 = swift_slowAlloc(15, -1);
            v96 = swift_slowAlloc(32, -1);
            v213 = v96;
            *(_DWORD *)v95 = 16777730;
            LOBYTE(v216) = v210;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v216, (char *)&v216 + 1, v95 + 4, v95 + 5);
            *(_WORD *)(v95 + 5) = 2080;
            sub_1001BD2CC(v70, v69);
            v165 = v164;
            v216 = v164;
            v166 = sub_100063D3C((uint64_t *)&unk_100346060);
            v167 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
            v168 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v166, v167);
            v170 = v169;
            swift_bridgeObjectRelease(v165);
            v216 = sub_1001C56EC(v168, v170, &v213);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v216, v217, v95 + 7, v95 + 15);
            swift_bridgeObjectRelease(v170);
            sub_100063CD0(v70, v69);
            sub_100063CD0(v70, v69);
            v104 = "Invalid event identifier %hhu payload %s";
            goto LABEL_52;
          case 4:
LABEL_66:
            if (v210 != 16)
            {
              v90 = Logger.logObject.getter(v68);
              v172 = static os_log_type_t.error.getter(v90, v171);
              if (os_log_type_enabled(v90, v172))
              {
                v173 = (uint8_t *)swift_slowAlloc(5, -1);
                *(_DWORD *)v173 = 16777472;
                LOBYTE(v213) = v210;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v213, (char *)&v213 + 1, v173 + 4, v173 + 5);
                _os_log_impl((void *)&_mh_execute_header, v90, v172, "Incorrect passthrough message identifier %hhu", v173, 5u);
                v174 = (uint64_t)v173;
                goto LABEL_86;
              }

              return;
            }
            v148 = (uint64_t *)(a7 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
            v149 = *(_QWORD *)(a7 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
            if (v149 >> 60 == 15)
            {
              v150 = swift_retain_n(a7, 2);
              v151 = Logger.logObject.getter(v150);
              v153 = static os_log_type_t.error.getter(v151, v152);
              if (os_log_type_enabled(v151, v153))
              {
                v154 = (uint8_t *)swift_slowAlloc(12, -1);
                v155 = swift_slowAlloc(32, -1);
                *(_DWORD *)v154 = 136315138;
                v213 = v155;
                v156 = swift_retain(a7);
                v157 = UUID.uuidString.getter(v156);
                v159 = v158;
                swift_release(a7);
                v216 = sub_1001C56EC(v157, v159, &v213);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v216, v217, v154 + 4, v154 + 12);
                swift_release_n(a7, 2);
                swift_bridgeObjectRelease(v159);
                _os_log_impl((void *)&_mh_execute_header, v151, v153, "Peer missing key identifier %s", v154, 0xCu);
                swift_arrayDestroy(v155, 1, (char *)&type metadata for Any + 8);
                swift_slowDealloc(v155, -1, -1);
                swift_slowDealloc(v154, -1, -1);
              }
              else
              {
                swift_release_n(a7, 2);
              }

              return;
            }
            v192 = *v148;
            v193 = sub_100063C8C(*v148, *(_QWORD *)(a7 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8));
            v194 = Logger.logObject.getter(v193);
            v198 = static os_log_type_t.info.getter(v194, v195, v196, v197);
            if (os_log_type_enabled(v194, v198))
            {
              v199 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v199 = 0;
              _os_log_impl((void *)&_mh_execute_header, v194, v198, "Passthrough message received", v199, 2u);
              swift_slowDealloc(v199, -1, -1);
            }

            v200 = objc_msgSend(v204, "sessionManager");
            isa = Data._bridgeToObjectiveC()().super.isa;
            v202 = Data._bridgeToObjectiveC()().super.isa;
            objc_msgSend(v200, "didReceivePassthroughMessage:keyIdentifier:", isa, v202);

            v141 = v192;
            v142 = v149;
            goto LABEL_94;
          case 5:
LABEL_71:
            if (v210 == 20)
            {
              if (qword_1003447D8 != -1)
                swift_once(&qword_1003447D8, sub_1001FC514);
              sub_1001F9C68(v70, v69, a7);
              return;
            }
            sub_100063C8C(v70, v69);
            v175 = sub_100063C8C(v70, v69);
            v90 = Logger.logObject.getter(v175);
            v147 = static os_log_type_t.info.getter(v90, v176, v177, v178);
            if (!os_log_type_enabled(v90, v147))
              goto LABEL_87;
LABEL_84:
            v95 = swift_slowAlloc(18, -1);
            v96 = swift_slowAlloc(32, -1);
            v213 = v96;
            *(_DWORD *)v95 = 16777986;
            LOBYTE(v216) = v71;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v216, (char *)&v216 + 1, v95 + 4, v95 + 5);
            *(_WORD *)(v95 + 5) = 256;
            LOBYTE(v216) = v210;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v216, (char *)&v216 + 1, v95 + 7, v95 + 8);
            *(_WORD *)(v95 + 8) = 2080;
            sub_1001BD2CC(v70, v69);
            v180 = v179;
            v216 = v179;
            v181 = sub_100063D3C((uint64_t *)&unk_100346060);
            v182 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
            v183 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v181, v182);
            v185 = v184;
            swift_bridgeObjectRelease(v180);
            v216 = sub_1001C56EC(v183, v185, &v213);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v216, v217, v95 + 10, v95 + 18);
            swift_bridgeObjectRelease(v185);
            sub_100063CD0(v70, v69);
            sub_100063CD0(v70, v69);
            v104 = "Ignoring unknown message type %hhu identifier %hhu payload %s";
            v105 = v90;
            v106 = v147;
            v107 = (uint8_t *)v95;
            v108 = 18;
            break;
          case 6:
LABEL_75:
            if (qword_1003445C0 != -1)
              swift_once(&qword_1003445C0, sub_1000EB484);
            v160 = type metadata accessor for UUID(0);
            v161 = *(_QWORD *)(v160 - 8);
            (*(void (**)(char *, uint64_t, uint64_t))(v161 + 16))(v15, v209, v160);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v161 + 56))(v15, 0, 1, v160);
            sub_1000EDB50(v210, v70, v69, a7, 1, (uint64_t)v15, 0, 1);
            goto LABEL_78;
          default:
LABEL_62:
            sub_100063C8C(v70, v69);
            v143 = sub_100063C8C(v70, v69);
            v90 = Logger.logObject.getter(v143);
            v147 = static os_log_type_t.info.getter(v90, v144, v145, v146);
            if (!os_log_type_enabled(v90, v147))
              goto LABEL_87;
            goto LABEL_84;
        }
LABEL_85:
        _os_log_impl((void *)&_mh_execute_header, v105, v106, v104, v107, v108);
        swift_arrayDestroy(v96, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v96, -1, -1);
        v174 = v95;
LABEL_86:
        swift_slowDealloc(v174, -1, -1);

        return;
      }
    }
    else
    {
      v16 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v20);
      if (v16)
        goto LABEL_26;
    }
LABEL_33:
    v68 = swift_bridgeObjectRelease_n(v20, 2);
    a7 = v207;
    v69 = v211;
    v70 = v212;
    v71 = v206;
    if ((_DWORD)v206)
    {
      if (!v205)
      {
        switch((int)v206)
        {
          case 2:
            if (qword_1003446C8 != -1)
              swift_once(&qword_1003446C8, sub_1001A0A18);
            v87 = type metadata accessor for UUID(0);
            v88 = *(_QWORD *)(v87 - 8);
            (*(void (**)(char *, uint64_t, uint64_t))(v88 + 16))(v15, v209, v87);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v88 + 56))(v15, 0, 1, v87);
            sub_10019FAFC(v210, v70, v69, a7, 3, (uint64_t)v15, v208, 0);
            goto LABEL_78;
          case 3:
            goto LABEL_64;
          case 4:
            goto LABEL_66;
          case 5:
            goto LABEL_71;
          case 6:
            goto LABEL_75;
          default:
            goto LABEL_62;
        }
      }
      if (qword_100344738 != -1)
        swift_once(&qword_100344738, sub_1001D63E8);
      v72 = type metadata accessor for UUID(0);
      v73 = *(_QWORD *)(v72 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v73 + 16))(v15, v209, v72);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v73 + 56))(v15, 0, 1, v72);
      sub_1001D50A4(v210, v70, v69, a7, 3, (uint64_t)v15, v208, 0);
LABEL_78:
      sub_100096700((uint64_t)v15, (uint64_t *)&unk_1003465E0);
      return;
    }
LABEL_50:
    sub_100063C8C(v70, v69);
    v89 = sub_100063C8C(v70, v69);
    v90 = Logger.logObject.getter(v89);
    v94 = static os_log_type_t.info.getter(v90, v91, v92, v93);
    if (!os_log_type_enabled(v90, v94))
    {
LABEL_87:

      sub_100063CD0(v70, v69);
      v58 = v70;
      v59 = v69;
      goto LABEL_21;
    }
    v95 = swift_slowAlloc(15, -1);
    v96 = swift_slowAlloc(32, -1);
    v213 = v96;
    *(_DWORD *)v95 = 16777730;
    LOBYTE(v216) = v210;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v216, (char *)&v216 + 1, v95 + 4, v95 + 5);
    *(_WORD *)(v95 + 5) = 2080;
    sub_1001BD2CC(v70, v69);
    v98 = v97;
    v216 = v97;
    v99 = sub_100063D3C((uint64_t *)&unk_100346060);
    v100 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
    v101 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v99, v100);
    v103 = v102;
    swift_bridgeObjectRelease(v98);
    v216 = sub_1001C56EC(v101, v103, &v213);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v216, v217, v95 + 7, v95 + 15);
    swift_bridgeObjectRelease(v103);
    sub_100063CD0(v70, v69);
    sub_100063CD0(v70, v69);
    v104 = "Ignoring pairing message while not pairing %hhu payload %s";
LABEL_52:
    v105 = v90;
    v106 = v94;
    v107 = (uint8_t *)v95;
    v108 = 15;
    goto LABEL_85;
  }
  v39 = swift_retain_n(a7, 2);
  v40 = Logger.logObject.getter(v39);
  v44 = static os_log_type_t.info.getter(v40, v41, v42, v43);
  if (os_log_type_enabled(v40, v44))
  {
    v45 = (uint8_t *)swift_slowAlloc(12, -1);
    v46 = swift_slowAlloc(32, -1);
    *(_DWORD *)v45 = 136315138;
    v213 = v46;
    LOBYTE(v216) = *(_BYTE *)(a7 + v38);
    v47 = String.init<A>(describing:)(&v216, &type metadata for DSKExpress.ExpressState);
    v48 = a7;
    v50 = v49;
    v216 = sub_1001C56EC(v47, v49, &v213);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v216, v217, v45 + 4, v45 + 12);
    swift_release_n(v48, 2);
    v51 = v50;
    a7 = v48;
    swift_bridgeObjectRelease(v51);
    _os_log_impl((void *)&_mh_execute_header, v40, v44, "Command blocked because of non express mode %s", v45, 0xCu);
    swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v46, -1, -1);
    swift_slowDealloc(v45, -1, -1);
  }
  else
  {
    swift_release_n(a7, 2);
  }

  v109 = sub_10007C66C((uint64_t)&off_1003054F8);
  v111 = v110;
  sub_100176C18(3, 17, v109, v110);
  a3 = v112;
  v16 = v113;
  sub_100063CD0(v109, v111);
  if (qword_1003445A0 != -1)
    swift_once(&qword_1003445A0, sub_1000B26B0);
  sub_1000ADCAC(a3, v16, a7);
  if (*(_BYTE *)(a7 + v38) != 2)
    goto LABEL_20;
  v114 = sub_1000B2084(a7);
  if (v114 == 2)
    goto LABEL_20;
  if ((v114 & 1) != 0)
    goto LABEL_20;
  v115 = objc_opt_self(SESDAnalyticsLogger);
  sub_100049C94(v115, CFSTR("unlockNeededForCarActionCount"));
  v116 = *(_QWORD *)(a7 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier + 8);
  if (v116 >> 60 == 15)
    goto LABEL_20;
  v117 = *(_QWORD *)(a7 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
  if (v117 >> 60 == 15)
    goto LABEL_20;
  v212 = *(_QWORD *)(a7 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier);
  v118 = v212;
  v211 = *(_QWORD *)(a7 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
  v119 = v211;
  v120 = sub_100063D3C((uint64_t *)&unk_100346040);
  inited = swift_initStackObject(v120, v215);
  *(_OWORD *)(inited + 16) = xmmword_1002888E0;
  *(_QWORD *)(inited + 32) = 0xD000000000000014;
  *(_QWORD *)(inited + 40) = 0x80000001002BEA90;
  sub_10006BA34(v118, v116);
  sub_10006BA34(v119, v117);
  sub_10006BA34(v118, v116);
  sub_10006BA34(v119, v117);
  sub_1001BD2CC(v118, v116);
  v123 = v122;
  v213 = v122;
  v124 = sub_100063D3C((uint64_t *)&unk_100346060);
  v210 = v124;
  v125 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
  v126 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v124, v125);
  v128 = v127;
  swift_bridgeObjectRelease(v123);
  v213 = v126;
  v214 = v128;
  v129._countAndFlagsBits = 58;
  v129._object = (void *)0xE100000000000000;
  String.append(_:)(v129);
  v130 = v211;
  sub_1001BD2CC(v211, v117);
  v132 = v131;
  v216 = v131;
  v133 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v210, v125);
  v135 = v134;
  swift_bridgeObjectRelease(v132);
  v136._countAndFlagsBits = v133;
  v136._object = v135;
  String.append(_:)(v136);
  swift_bridgeObjectRelease(v135);
  v137 = v213;
  v138 = v214;
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 48) = v137;
  *(_QWORD *)(inited + 56) = v138;
  v139 = sub_10017C218(inited);
  v140 = v212;
  sub_1001F119C(0xD000000000000025, 0x80000001002BEA60, v212, v116, v130, v117, v139);
  sub_100063CD0(a3, v16);
  swift_bridgeObjectRelease(v139);
  sub_10006B9B4(v130, v117);
  sub_10006B9B4(v140, v116);
  sub_10006B9B4(v130, v117);
  v141 = v140;
  v142 = v116;
LABEL_94:
  sub_10006B9B4(v141, v142);
}

void sub_100171B38(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  id v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint8_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char v39[16];

  v6 = sub_100063D3C((uint64_t *)&unk_1003465E0);
  __chkstk_darwin(v6, v7);
  v8 = type metadata accessor for DispatchPredicate(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (uint8_t **)((char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v13 = qword_100354EE8;
  *v12 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8);
  v14 = (id)v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)(v12);
  (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v12, v8);
  if ((v13 & 1) != 0)
  {
    sub_100063C8C(a1, a2);
    sub_1000723E8(a1, a2, 0);
    v15 = a2 >> 62;
    switch(v16)
    {
      case 1:
        __asm { BR              X10 }
        return;
      case 2:
        __asm { BR              X10 }
        return;
      case 4:
        if (qword_1003447D8 == -1)
          goto LABEL_7;
        goto LABEL_17;
      case 6:
        if (qword_1003445C0 != -1)
          swift_once(&qword_1003445C0, sub_1000EB484);
        sub_100063C8C(a1, a2);
        sub_100075CC4(1, a1, a2);
        v19 = v36;
        a2 = v37;
        sub_1000EE8E4(v36, v37, a3);
        v18 = v19;
        break;
      default:
        sub_100063C8C(a1, a2);
        v20 = sub_100063C8C(a1, a2);
        v21 = Logger.logObject.getter(v20);
        v25 = static os_log_type_t.info.getter(v21, v22, v23, v24);
        if (os_log_type_enabled(v21, v25))
        {
          v26 = (uint8_t *)swift_slowAlloc(12, -1);
          v27 = swift_slowAlloc(32, -1);
          v36 = v27;
          *(_DWORD *)v26 = 136315138;
          v35 = v26 + 4;
          sub_1001BD2CC(a1, a2);
          v29 = v28;
          v38 = v28;
          v30 = sub_100063D3C((uint64_t *)&unk_100346060);
          v31 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
          v32 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v30, v31);
          v34 = v33;
          swift_bridgeObjectRelease(v29);
          v38 = sub_1001C56EC(v32, v34, &v36);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39, v35, v26 + 12);
          swift_bridgeObjectRelease(v34);
          sub_100063CD0(a1, a2);
          sub_100063CD0(a1, a2);
          _os_log_impl((void *)&_mh_execute_header, v21, v25, "Ignoring unknown event %s", v26, 0xCu);
          swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v27, -1, -1);
          swift_slowDealloc(v26, -1, -1);

          return;
        }

        sub_100063CD0(a1, a2);
        v18 = a1;
        break;
    }
  }
  else
  {
    __break(1u);
LABEL_17:
    swift_once(&qword_1003447D8, sub_1001FC514);
LABEL_7:
    sub_100063C8C(a1, a2);
    sub_100075CC4(1, a1, a2);
    v17 = v36;
    a2 = v37;
    sub_1001FA4BC(v36, v37, a3);
    v18 = v17;
  }
  sub_100063CD0(v18, a2);
}

void sub_10017296C(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Class isa;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  os_log_type_t v15;
  uint8_t *v16;
  const char *v17;
  uint64_t v18;
  os_log_type_t v19;
  uint8_t *v20;
  NSObject *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  NSObject *v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Class v31;
  id v32;
  os_log_t v33;
  NSObject *v34;
  uint64_t v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  NSObject *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  uint64_t v54;
  os_log_type_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  NSObject *oslog;
  NSObject *osloga;
  os_log_t oslogb;
  os_log_t oslogc;
  _QWORD v71[3];
  char v72[8];
  uint64_t v73;
  os_log_t v74;

  if ((a2 & 1) != 0)
  {
    osloga = Logger.logObject.getter(a1);
    v19 = static os_log_type_t.error.getter(osloga, v18);
    if (!os_log_type_enabled(osloga, v19))
    {
      v26 = osloga;
LABEL_15:

      return;
    }
    v20 = (uint8_t *)swift_slowAlloc(12, -1);
    v21 = swift_slowAlloc(32, -1);
    v74 = v21;
    *(_DWORD *)v20 = 136315138;
    v22 = sub_10006B9E4();
    v23 = Error.localizedDescription.getter(&type metadata for SEError, v22);
    v25 = v24;
    v73 = sub_1001C56EC(v23, v24, (uint64_t *)&v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74, v20 + 4, v20 + 12);
    swift_bridgeObjectRelease(v25);
    _os_log_impl((void *)&_mh_execute_header, osloga, v19, "Failed to get SE to clear URSKs %s", v20, 0xCu);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v20, -1, -1);

  }
  else
  {
    sub_10017B8F4(a1, 0);
    v6 = sub_1000E848C(0xD000000000000014, 0x80000001002BEAD0);
    if (v7 >> 60 == 15)
    {
      __break(1u);
    }
    else
    {
      v8 = v6;
      v9 = v7;
      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10006B9B4(v8, v9);
      v11 = sub_10004FBA0(a1, isa);

      if (v11)
      {

        oslog = Logger.logObject.getter(v13);
        v15 = static os_log_type_t.error.getter(oslog, v14);
        if (os_log_type_enabled(oslog, v15))
        {
          v16 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v16 = 0;
          v17 = "Failed to select Sunsprite";
LABEL_13:
          _os_log_impl((void *)&_mh_execute_header, oslog, v15, v17, v16, 2u);
          swift_slowDealloc(v16, -1, -1);
          goto LABEL_14;
        }
        goto LABEL_14;
      }
      v27 = (uint64_t *)(a4 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
      v28 = *(_QWORD *)(a4 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
      if (v28 >> 60 == 15)
      {
        oslog = Logger.logObject.getter(v12);
        v15 = static os_log_type_t.error.getter(oslog, v29);
        if (os_log_type_enabled(oslog, v15))
        {
          v16 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v16 = 0;
          v17 = "Found peer with no key identifier";
          goto LABEL_13;
        }
LABEL_14:
        sub_10006BA28(a1, 0);
        v26 = oslog;
        goto LABEL_15;
      }
      v30 = *v27;
      sub_100063C8C(*v27, *(_QWORD *)(a4 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8));
      v31 = Data._bridgeToObjectiveC()().super.isa;
      v74 = 0;
      v32 = sub_10004F8D8(a1, 128, 48, 8, 0, v31, 0, &v74);

      v33 = v74;
      if (v32)
      {
        v34 = v74;

        sub_100063C8C(v30, v28);
        v35 = sub_100063C8C(v30, v28);
        v36 = Logger.logObject.getter(v35);
        v40 = static os_log_type_t.info.getter(v36, v37, v38, v39);
        if (os_log_type_enabled(v36, v40))
        {
          v41 = (uint8_t *)swift_slowAlloc(12, -1);
          oslogb = (os_log_t)swift_slowAlloc(32, -1);
          v74 = oslogb;
          *(_DWORD *)v41 = 136315138;
          sub_1001BD2CC(v30, v28);
          v43 = v42;
          v44 = sub_100063D3C((uint64_t *)&unk_100346060);
          v45 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
          v46 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v44, v45);
          v48 = v47;
          swift_bridgeObjectRelease(v43);
          v73 = sub_1001C56EC(v46, v48, (uint64_t *)&v74);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74, v41 + 4, v41 + 12);
          swift_bridgeObjectRelease(v48);
          sub_10006B9B4(v30, v28);
          sub_10006B9B4(v30, v28);
          _os_log_impl((void *)&_mh_execute_header, v36, v40, "All keys for %s have been deleted from Sunsprite", v41, 0xCu);
          swift_arrayDestroy(oslogb, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(oslogb, -1, -1);
          swift_slowDealloc(v41, -1, -1);
          sub_10006B9B4(v30, v28);
          sub_10006BA28(a1, 0);

        }
        else
        {
          sub_10006B9B4(v30, v28);
          sub_10006BA28(a1, 0);

          sub_10006B9B4(v30, v28);
          sub_10006B9B4(v30, v28);
        }
      }
      else
      {
        v49 = v74;
        v50 = _convertNSErrorToError(_:)(v33);

        swift_willThrow(v51);
        sub_10006BA34(v30, v28);
        swift_errorRetain(v50);
        sub_10006BA34(v30, v28);
        v52 = swift_errorRetain(v50);
        v53 = Logger.logObject.getter(v52);
        v55 = static os_log_type_t.error.getter(v53, v54);
        if (os_log_type_enabled(v53, v55))
        {
          v56 = swift_slowAlloc(22, -1);
          oslogc = (os_log_t)swift_slowAlloc(64, -1);
          v74 = oslogc;
          *(_DWORD *)v56 = 136315394;
          sub_1001BD2CC(v30, v28);
          v58 = v57;
          v59 = sub_100063D3C((uint64_t *)&unk_100346060);
          v60 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
          v61 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v59, v60);
          v63 = v62;
          swift_bridgeObjectRelease(v58);
          v73 = sub_1001C56EC(v61, v63, (uint64_t *)&v74);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74, v56 + 4, v56 + 12);
          swift_bridgeObjectRelease(v63);
          sub_10006B9B4(v30, v28);
          sub_10006B9B4(v30, v28);
          *(_WORD *)(v56 + 12) = 2080;
          swift_getErrorValue(v50, v72, v71);
          v64 = Error.localizedDescription.getter(v71[1], v71[2]);
          v66 = v65;
          v73 = sub_1001C56EC(v64, v65, (uint64_t *)&v74);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74, v56 + 14, v56 + 22);
          swift_bridgeObjectRelease(v66);
          swift_errorRelease(v50);
          swift_errorRelease(v50);
          _os_log_impl((void *)&_mh_execute_header, v53, v55, "Failed to clear the keys for %s %s", (uint8_t *)v56, 0x16u);
          swift_arrayDestroy(oslogc, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(oslogc, -1, -1);
          swift_slowDealloc(v56, -1, -1);
          sub_10006B9B4(v30, v28);
          sub_10006BA28(a1, 0);
          swift_errorRelease(v50);

        }
        else
        {
          sub_10006B9B4(v30, v28);
          sub_10006BA28(a1, 0);
          swift_errorRelease(v50);

          sub_10006B9B4(v30, v28);
          sub_10006B9B4(v30, v28);
          swift_errorRelease(v50);
          swift_errorRelease(v50);
        }
      }
    }
  }
}

void sub_1001731D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSString v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  Class isa;
  NSString v27;
  uint64_t v28;
  uint64_t inited;
  uint64_t v30;
  unint64_t v31;
  Class v32;
  _BYTE v34[72];

  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = &v34[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v7 = qword_100354EE8;
  *v6 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  v9 = (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    swift_once(&qword_1003446C0, sub_10019CC14);
    goto LABEL_7;
  }
  v10 = Logger.logObject.getter(v9);
  v14 = static os_log_type_t.info.getter(v10, v11, v12, v13);
  if (os_log_type_enabled(v10, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v14, "Peer connected", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }

  v16 = objc_opt_self(SESDAnalyticsLogger);
  UUID.uuidString.getter(v16);
  v18 = v17;
  v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v18);
  sub_100048AF8(v16, v19);

  sub_100049C94(v16, CFSTR("connectionCount"));
  if (qword_1003446C0 != -1)
    goto LABEL_11;
LABEL_7:
  sub_10019B2F8(a1);
  if (qword_1003446C8 != -1)
    swift_once(&qword_1003446C8, sub_1001A0A18);
  sub_10019F204(1, a1);
  v20 = *(_QWORD *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier);
  v21 = *(_QWORD *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier + 8);
  v22 = a1 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier;
  v23 = *(_QWORD *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
  v24 = *(_QWORD *)(v22 + 8);
  sub_10006BA34(v20, v21);
  sub_10006BA34(v23, v24);
  sub_1001F119C(0xD00000000000003CLL, 0x80000001002BEAF0, v20, v21, v23, v24, 0);
  sub_10006B9B4(v23, v24);
  sub_10006B9B4(v20, v21);
  v25 = (void *)objc_opt_self(CertificationLogging);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v25, "bleLogVehicleConnected:", isa);

  v27 = String._bridgeToObjectiveC()();
  v28 = sub_100063D3C(&qword_100347F08);
  inited = swift_initStackObject(v28, v34);
  *(_OWORD *)(inited + 16) = xmmword_1002888E0;
  *(_QWORD *)(inited + 32) = 0x4449555572656550;
  *(_QWORD *)(inited + 40) = 0xE800000000000000;
  *(_QWORD *)(inited + 48) = UUID.uuidString.getter(inited);
  *(_QWORD *)(inited + 56) = v30;
  v31 = sub_10017CA18(inited);
  v32 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v31);
  PLLogRegisteredEvent(117, v27, v32, 0);

}

void sub_100173580(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSString v25;
  void *v26;
  Class isa;
  NSString v28;
  uint64_t v29;
  uint64_t inited;
  uint64_t v31;
  unint64_t v32;
  Class v33;
  _BYTE v34[64];

  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = &v34[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v7 = qword_100354EE8;
  *v6 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  v9 = (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_17:
    swift_once(&qword_100344738, sub_1001D63E8);
    goto LABEL_7;
  }
  v10 = Logger.logObject.getter(v9);
  v14 = static os_log_type_t.info.getter(v10, v11, v12, v13);
  if (os_log_type_enabled(v10, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v14, "Peer disconnected", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }

  v16 = *(_QWORD *)&a1[OBJC_IVAR____TtC10seserviced4Peer_buffer];
  v17 = *(_QWORD *)&a1[OBJC_IVAR____TtC10seserviced4Peer_buffer + 8];
  *(_OWORD *)&a1[OBJC_IVAR____TtC10seserviced4Peer_buffer] = xmmword_1002888D0;
  sub_10006B9B4(v16, v17);
  *(_QWORD *)&a1[OBJC_IVAR____TtC10seserviced4Peer_sequenceNumber] = 0;
  if (qword_100344738 != -1)
    goto LABEL_17;
LABEL_7:
  sub_1001D6108(a1);
  if (qword_1003446C8 != -1)
    swift_once(&qword_1003446C8, sub_1001A0A18);
  sub_1001A0114((uint64_t)a1);
  if (qword_100344720 != -1)
    swift_once(&qword_100344720, sub_1001C7400);
  sub_1001C7110((uint64_t)a1);
  if (qword_1003447D8 != -1)
    swift_once(&qword_1003447D8, sub_1001FC514);
  sub_1001FA6D8((uint64_t)a1);
  if (qword_1003445C0 != -1)
    swift_once(&qword_1003445C0, sub_1000EB484);
  sub_1000ED854((unint64_t)a1);
  v18 = *(_QWORD *)&a1[OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier];
  v19 = *(_QWORD *)&a1[OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier + 8];
  v20 = *(_QWORD *)&a1[OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier];
  v21 = *(_QWORD *)&a1[OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8];
  sub_10006BA34(v18, v19);
  sub_10006BA34(v20, v21);
  sub_1001F119C(0xD00000000000003FLL, 0x80000001002BEA00, v18, v19, v20, v21, 0);
  sub_10006B9B4(v20, v21);
  sub_10006B9B4(v18, v19);
  v22 = objc_opt_self(SESDAnalyticsLogger);
  UUID.uuidString.getter(v22);
  v24 = v23;
  v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v24);
  sub_100048BC0(v22, v25);

  sub_100049C94(v22, CFSTR("disconnectionCount"));
  v26 = (void *)objc_opt_self(CertificationLogging);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v26, "bleLogVehicleDisconnected:", isa);

  v28 = String._bridgeToObjectiveC()();
  v29 = sub_100063D3C(&qword_100347F08);
  inited = swift_initStackObject(v29, v34);
  *(_OWORD *)(inited + 16) = xmmword_1002888E0;
  *(_QWORD *)(inited + 32) = 0x4449555572656550;
  *(_QWORD *)(inited + 40) = 0xE800000000000000;
  *(_QWORD *)(inited + 48) = UUID.uuidString.getter(inited);
  *(_QWORD *)(inited + 56) = v31;
  v32 = sub_10017CA18(inited);
  v33 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v32);
  PLLogRegisteredEvent(117, v28, v33, 0);

}

void sub_1001739F0(char a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (uint64_t *)((char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v9 = qword_100354EE8;
  *v8 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  v11 = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  v12 = Logger.logObject.getter(v11);
  v16 = static os_log_type_t.info.getter(v12, v13, v14, v15);
  if (os_log_type_enabled(v12, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = swift_slowAlloc(32, -1);
    *(_DWORD *)v17 = 136315138;
    v22 = v18;
    if ((a1 & 1) != 0)
      v19 = 0x7964616572;
    else
      v19 = 0x6461657220746F6ELL;
    if ((a1 & 1) != 0)
      v20 = 0xE500000000000000;
    else
      v20 = 0xE900000000000079;
    v21 = sub_1001C56EC(v19, v20, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease(v20);
    _os_log_impl((void *)&_mh_execute_header, v12, v16, "Driving readiness changed %s", v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);
  }

  if ((a1 & 1) != 0)
  {
    if (qword_1003447C8 == -1)
    {
LABEL_14:
      sub_1001F3670(a2 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier);
      if (qword_1003445A0 != -1)
        swift_once(&qword_1003445A0, sub_1000B26B0);
      sub_1000B8D70(a2);
      if (qword_1003446C8 != -1)
        swift_once(&qword_1003446C8, sub_1001A0A18);
      sub_10019F204(6, a2);
      return;
    }
LABEL_23:
    swift_once(&qword_1003447C8, sub_1001F416C);
    goto LABEL_14;
  }
  if (qword_1003447C8 != -1)
    swift_once(&qword_1003447C8, sub_1001F416C);
  sub_1001F3C50(a2 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier);
}

void sub_100173D0C(char a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  os_unfair_lock_s *v26;
  os_unfair_lock_s *v27;
  uint64_t v28;
  void *v29;
  id v30;
  void *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  NSString v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  os_unfair_lock_s *v43;
  os_unfair_lock_s *v44;
  uint64_t v45;
  void *v46;
  id v47;
  void *v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  NSString v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (uint64_t *)((char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v9 = qword_100354EE8;
  *v8 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  v11 = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_34:
    swift_once(&qword_1003446C8, sub_1001A0A18);
    goto LABEL_32;
  }
  v12 = Logger.logObject.getter(v11);
  v16 = static os_log_type_t.info.getter(v12, v13, v14, v15);
  if (os_log_type_enabled(v12, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = swift_slowAlloc(32, -1);
    *(_DWORD *)v17 = 136315138;
    v57 = v18;
    if ((a1 & 1) != 0)
      v19 = 0x64656B636F6CLL;
    else
      v19 = 0x64656B636F6C6E75;
    if ((a1 & 1) != 0)
      v20 = 0xE600000000000000;
    else
      v20 = 0xE800000000000000;
    v55 = sub_1001C56EC(v19, v20, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease(v20);
    _os_log_impl((void *)&_mh_execute_header, v12, v16, "Lock state changed %s", v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);
  }

  if ((a1 & 1) != 0)
  {
    if (qword_1003447C8 != -1)
      swift_once(&qword_1003447C8, sub_1001F416C);
    sub_1001F3670(a2 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier);
    v21 = qword_1003445B8;
    swift_retain(a2);
    if (v21 != -1)
      swift_once(&qword_1003445B8, sub_1000EAA4C);
    v22 = off_1003463F0;
    v23 = swift_allocObject(&unk_10030B758, 32, 7);
    *(_QWORD *)(v23 + 16) = sub_10017B8A0;
    *(_QWORD *)(v23 + 24) = a2;
    v25 = __chkstk_darwin(v23, v24);
    *(&v54 - 4) = (uint64_t)sub_100096F30;
    *(&v54 - 3) = v25;
    *(&v54 - 2) = (uint64_t)v22;
    v27 = v26 + 4;
    swift_retain(a2);
    os_unfair_lock_lock(v27);
    sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_100096F14, &v57);
    os_unfair_lock_unlock(v27);
    v28 = v57;
    swift_release(a2);
    swift_release(v23);
    v29 = (void *)sub_10009F618(v28);
    swift_bridgeObjectRelease(v28);
    if (v29)
    {
      v30 = objc_msgSend(v29, "readerInfo");
      if (v30)
      {
        v31 = v30;
        v32 = objc_opt_self(SESDAnalyticsLogger);
        v33 = objc_msgSend(v29, "getEndpointUser");
        UUID.uuidString.getter(v33);
        v35 = v34;
        v36 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v35);
        sub_100049758(v32, 0x8000, 0, v31, (unint64_t)v33, v36);

        v29 = v36;
      }

    }
    v37 = qword_1003446C8;
    a1 = 4;
  }
  else
  {
    if (qword_1003447C8 != -1)
      swift_once(&qword_1003447C8, sub_1001F416C);
    sub_1001F3C50(a2 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier);
    v38 = qword_1003445B8;
    swift_retain(a2);
    if (v38 != -1)
      swift_once(&qword_1003445B8, sub_1000EAA4C);
    v39 = off_1003463F0;
    v40 = swift_allocObject(&unk_10030B730, 32, 7);
    *(_QWORD *)(v40 + 16) = sub_10017B8A0;
    *(_QWORD *)(v40 + 24) = a2;
    v42 = __chkstk_darwin(v40, v41);
    *(&v54 - 4) = (uint64_t)sub_100096F30;
    *(&v54 - 3) = v42;
    *(&v54 - 2) = (uint64_t)v39;
    v44 = v43 + 4;
    swift_retain(a2);
    os_unfair_lock_lock(v44);
    sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_100096F14, &v57);
    os_unfair_lock_unlock(v44);
    v45 = v57;
    swift_release(a2);
    swift_release(v40);
    v46 = (void *)sub_10009F618(v45);
    swift_bridgeObjectRelease(v45);
    if (v46)
    {
      v47 = objc_msgSend(v46, "readerInfo");
      if (v47)
      {
        v48 = v47;
        v49 = objc_opt_self(SESDAnalyticsLogger);
        v50 = objc_msgSend(v46, "getEndpointUser");
        UUID.uuidString.getter(v50);
        v52 = v51;
        v53 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v52);
        sub_100049758(v49, 0x8000, 1, v48, (unint64_t)v50, v53);

        v46 = v53;
      }

    }
    v37 = qword_1003446C8;
    a1 = 5;
  }
  if (v37 != -1)
    goto LABEL_34;
LABEL_32:
  sub_10019F204(a1, a2);
}

NSObject *sub_100174304(void *a1)
{
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  id v9;
  NSObject *v10;
  uint64_t v11;
  os_log_type_t v12;
  uint8_t *v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  os_log_type_t v27;
  uint8_t *v28;
  _DWORD *v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  _DWORD *v46;
  uint8_t *buf;
  uint8_t *bufa;
  os_log_type_t type;
  uint64_t typea;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53[2];

  v2 = objc_msgSend(a1, "readerInfo");
  if (!v2)
  {
    v9 = a1;
    v10 = Logger.logObject.getter(v9);
    v27 = static os_log_type_t.error.getter(v10, v26);
    if (os_log_type_enabled(v10, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(12, -1);
      typea = swift_slowAlloc(32, -1);
      v53[0] = typea;
      *(_DWORD *)v28 = 136315138;
      v29 = v28 + 12;
      v46 = v28 + 4;
      bufa = v28;
      v30 = objc_msgSend(v9, "publicKeyIdentifier");
      v31 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v30);
      v33 = v32;

      sub_1001BD2CC(v31, v33);
      v35 = v34;
      v36 = sub_100063D3C((uint64_t *)&unk_100346060);
      v37 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
      v38 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v36, v37);
      v40 = v39;
      swift_bridgeObjectRelease(v35);
      sub_100063CD0(v31, v33);
      v51 = sub_1001C56EC(v38, v40, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v46, v29);

      swift_bridgeObjectRelease(v40);
      _os_log_impl((void *)&_mh_execute_header, v10, v27, "Missing reader info from %s", bufa, 0xCu);
      swift_arrayDestroy(typea, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(typea, -1, -1);
      v25 = bufa;
      goto LABEL_7;
    }
LABEL_8:

    goto LABEL_9;
  }
  v3 = v2;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v6 = v5;

  v53[0] = v4;
  v53[1] = v6;
  v51 = 46;
  v52 = 0xE100000000000000;
  v7 = sub_1000F716C();
  v8 = (_QWORD *)StringProtocol.components<A>(separatedBy:)(&v51, &type metadata for String, &type metadata for String, v7, v7);
  swift_bridgeObjectRelease(v6);
  if (v8[2] >= 4uLL)
  {
    v10 = v8[6];
    v44 = v8[11];
    swift_bridgeObjectRetain(v8[7]);
    swift_bridgeObjectRetain(v44);
    swift_bridgeObjectRelease(v8);
    return v10;
  }
  swift_bridgeObjectRelease(v8);
  v9 = a1;
  v10 = Logger.logObject.getter(v9);
  v12 = static os_log_type_t.error.getter(v10, v11);
  if (!os_log_type_enabled(v10, v12))
    goto LABEL_8;
  type = v12;
  v13 = (uint8_t *)swift_slowAlloc(12, -1);
  buf = (uint8_t *)swift_slowAlloc(32, -1);
  v53[0] = (uint64_t)buf;
  *(_DWORD *)v13 = 136315138;
  v14 = objc_msgSend(v9, "publicKeyIdentifier");
  v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v14);
  v17 = v16;

  sub_1001BD2CC(v15, v17);
  v19 = v18;
  v51 = v18;
  v20 = sub_100063D3C((uint64_t *)&unk_100346060);
  v21 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
  v22 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v20, v21);
  v24 = v23;
  swift_bridgeObjectRelease(v19);
  sub_100063CD0(v15, v17);
  v51 = sub_1001C56EC(v22, v24, v53);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v13 + 4, v13 + 12);

  swift_bridgeObjectRelease(v24);
  _os_log_impl((void *)&_mh_execute_header, v10, type, "Invalid reader info from %s", v13, 0xCu);
  swift_arrayDestroy(buf, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(buf, -1, -1);
  v25 = v13;
LABEL_7:
  swift_slowDealloc(v25, -1, -1);
LABEL_9:

  v41 = sub_10006B828();
  v42 = swift_allocError(&type metadata for DSKError, v41, 0, 0);
  *v43 = 0;
  swift_willThrow(v42);
  return v10;
}

uint64_t sub_1001747BC(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t result;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int (*v31)(uint64_t, uint64_t, uint64_t);
  char *v32;
  uint64_t v33;
  char v34;
  void (*v35)(char *, uint64_t);
  id v36;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  id v43;
  uint64_t v44;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100063D3C(&qword_100346F80);
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100063D3C((uint64_t *)&unk_1003465E0);
  v15 = __chkstk_darwin(v13, v14);
  v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v15, v18);
  v21 = (char *)&v41 - v20;
  __chkstk_darwin(v19, v22);
  v24 = (char *)&v41 - v23;
  if (objc_msgSend(a1, "endPointType") != (id)1)
    return 0;
  v44 = a2;
  result = (uint64_t)objc_msgSend(a1, "bleUUID");
  if (!result)
    return result;
  v42 = v8;

  v43 = a1;
  result = (uint64_t)objc_msgSend(a1, "bleUUID");
  if (!result)
  {
    __break(1u);
    return result;
  }
  v26 = (void *)result;
  v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
  v29 = v28;

  UUID.init(uuidString:)(v27, v29);
  swift_bridgeObjectRelease(v29);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v21, v44 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier, v4);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v21, 0, 1, v4);
  v30 = (uint64_t)&v12[*(int *)(v9 + 48)];
  sub_10013EA8C((uint64_t)v24, (uint64_t)v12);
  sub_10013EA8C((uint64_t)v21, v30);
  v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v31((uint64_t)v12, 1, v4) == 1)
  {
    sub_100096700((uint64_t)v21, (uint64_t *)&unk_1003465E0);
    sub_100096700((uint64_t)v24, (uint64_t *)&unk_1003465E0);
    if (v31(v30, 1, v4) == 1)
    {
      sub_100096700((uint64_t)v12, (uint64_t *)&unk_1003465E0);
LABEL_11:
      v36 = objc_msgSend(v43, "revocationAttestation");
      if (!v36)
        return 1;
      v37 = v36;
      v38 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v36);
      v40 = v39;

      sub_100063CD0(v38, v40);
      return 0;
    }
    goto LABEL_9;
  }
  sub_10013EA8C((uint64_t)v12, (uint64_t)v17);
  if (v31(v30, 1, v4) == 1)
  {
    sub_100096700((uint64_t)v21, (uint64_t *)&unk_1003465E0);
    sub_100096700((uint64_t)v24, (uint64_t *)&unk_1003465E0);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v17, v4);
LABEL_9:
    sub_100096700((uint64_t)v12, &qword_100346F80);
    return 0;
  }
  v32 = v42;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v42, v30, v4);
  v33 = sub_1000639EC((unint64_t *)&qword_100346150, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v34 = dispatch thunk of static Equatable.== infix(_:_:)(v17, v32, v4, v33);
  v35 = *(void (**)(char *, uint64_t))(v5 + 8);
  v35(v32, v4);
  sub_100096700((uint64_t)v21, (uint64_t *)&unk_1003465E0);
  sub_100096700((uint64_t)v24, (uint64_t *)&unk_1003465E0);
  v35(v17, v4);
  sub_100096700((uint64_t)v12, (uint64_t *)&unk_1003465E0);
  if ((v34 & 1) != 0)
    goto LABEL_11;
  return 0;
}

void sub_100174B80(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  os_unfair_lock_s *v32;
  os_unfair_lock_s *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  os_unfair_lock_s *v45;
  os_unfair_lock_s *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  id v53;
  void *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  NSObject *v58;
  uint64_t v59;
  os_log_type_t v60;
  uint8_t *v61;
  uint64_t v62;
  NSObject *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  os_log_type_t v67;
  uint8_t *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  NSObject *v77;
  uint64_t v78;
  os_log_type_t v79;
  uint8_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  NSString v84;
  uint64_t v85;
  uint8_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90[16];
  uint64_t v91;

  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (uint64_t *)((char *)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v10 = qword_100354EE8;
  *v9 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5);
  v11 = (id)v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v9, v5);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_36:
    swift_once(&qword_1003447A0, sub_1001EDCA4);
    goto LABEL_8;
  }
  v12 = v2 + OBJC_IVAR____TtC10seserviced6Alisha_logger;
  sub_100063C8C(a1, a2);
  v13 = sub_100063C8C(a1, a2);
  v88 = v12;
  v14 = Logger.logObject.getter(v13);
  v18 = static os_log_type_t.info.getter(v14, v15, v16, v17);
  if (os_log_type_enabled(v14, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(12, -1);
    v87 = swift_slowAlloc(32, -1);
    v91 = v87;
    *(_DWORD *)v19 = 136315138;
    v86 = v19 + 4;
    v9 = 0;
    sub_1001BD2CC(a1, a2);
    v21 = v20;
    v89 = v20;
    v22 = sub_100063D3C((uint64_t *)&unk_100346060);
    v23 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
    v24 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v22, v23);
    v26 = v25;
    swift_bridgeObjectRelease(v21);
    v89 = sub_1001C56EC(v24, v26, &v91);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, v90, v86, v19 + 12);
    swift_bridgeObjectRelease(v26);
    sub_100063CD0(a1, a2);
    sub_100063CD0(a1, a2);
    _os_log_impl((void *)&_mh_execute_header, v14, v18, "Key tracking completed %s", v19, 0xCu);
    v27 = v87;
    swift_arrayDestroy(v87, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v19, -1, -1);

  }
  else
  {

    sub_100063CD0(a1, a2);
    sub_100063CD0(a1, a2);
    v9 = 0;
  }
  v2 = swift_allocObject(&unk_10030B820, 32, 7);
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  sub_100063C8C(a1, a2);
  if (qword_1003447A0 != -1)
    goto LABEL_36;
LABEL_8:
  v28 = off_10034A560;
  v29 = swift_allocObject(&unk_10030B848, 32, 7);
  *(_QWORD *)(v29 + 16) = sub_10017B91C;
  *(_QWORD *)(v29 + 24) = v2;
  v31 = __chkstk_darwin(v29, v30);
  *(&v85 - 4) = (uint64_t)sub_100096F30;
  *(&v85 - 3) = v31;
  *(&v85 - 2) = (uint64_t)v28;
  v33 = v32 + 4;
  swift_retain(v2);
  os_unfair_lock_lock(v33);
  sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_10017BF58, &v91);
  os_unfair_lock_unlock(v33);
  v34 = v91;
  swift_release(v2);
  swift_release(v29);
  v35 = sub_10009F640(v34);
  swift_bridgeObjectRelease(v34);
  if (v35)
  {
    v36 = type metadata accessor for AlishaPeer(0);
    v37 = swift_dynamicCastClass(v35, v36);
    if (v37
      && (v38 = v37,
          v39 = OBJC_IVAR____TtC10seserviced4Peer_pairingState,
          *(_BYTE *)(v37 + OBJC_IVAR____TtC10seserviced4Peer_pairingState) == 1))
    {
      v40 = swift_allocObject(&unk_10030B870, 32, 7);
      *(_QWORD *)(v40 + 16) = a1;
      *(_QWORD *)(v40 + 24) = a2;
      sub_100063C8C(a1, a2);
      if (qword_1003445B8 != -1)
        swift_once(&qword_1003445B8, sub_1000EAA4C);
      v41 = off_1003463F0;
      v42 = swift_allocObject(&unk_10030B898, 32, 7);
      *(_QWORD *)(v42 + 16) = sub_100096688;
      *(_QWORD *)(v42 + 24) = v40;
      v44 = __chkstk_darwin(v42, v43);
      *(&v85 - 4) = (uint64_t)sub_100096F30;
      *(&v85 - 3) = v44;
      *(&v85 - 2) = (uint64_t)v41;
      v46 = v45 + 4;
      swift_retain(v40);
      os_unfair_lock_lock(v46);
      sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_100096F14, &v91);
      os_unfair_lock_unlock(v46);
      v47 = v91;
      swift_release(v40);
      swift_release(v42);
      v48 = (void *)sub_10009F618(v47);
      v49 = swift_bridgeObjectRelease(v47);
      if (v48)
      {
        v50 = v39;
        v51 = objc_msgSend(objc_allocWithZone((Class)SESConfigDCK), "init");
        v52 = *(_QWORD *)(v38 + OBJC_IVAR____TtC10seserviced10AlishaPeer_configuration);
        swift_retain(v52);
        v53 = objc_msgSend(v48, "readerConfigID");
        if (v53)
        {
          v54 = v53;
          v55 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v53);
          v57 = v56;

        }
        else
        {
          v55 = 0;
          v57 = 0xF000000000000000;
        }
        sub_1001BC1FC(v51, v55, v57);
        sub_10006B9B4(v55, v57);
        v62 = swift_release(v52);
        *(_BYTE *)(v38 + v50) = 2;
        if (*(_BYTE *)(v38 + OBJC_IVAR____TtC10seserviced4Peer_isConnected) == 1)
        {
          v63 = Logger.logObject.getter(v62);
          v67 = static os_log_type_t.info.getter(v63, v64, v65, v66);
          if (os_log_type_enabled(v63, v67))
          {
            v68 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v68 = 0;
            _os_log_impl((void *)&_mh_execute_header, v63, v67, "Sending REQUEST_STANDARD_TRANSACTION", v68, 2u);
            swift_slowDealloc(v68, -1, -1);
          }

          if (qword_100344680 != -1)
            swift_once(&qword_100344680, sub_10016E9A8);
          v69 = sub_10007C66C((uint64_t)&off_100305F80);
          v71 = v70;
          sub_100176C18(3, 17, v69, v70);
          v73 = v72;
          v75 = v74;
          sub_100063CD0(v69, v71);
          if (qword_1003445A0 != -1)
            swift_once(&qword_1003445A0, sub_1000B26B0);
          sub_1000ADCAC(v73, v75, v38);
          if (v9)
          {
            v77 = Logger.logObject.getter(v76);
            v79 = static os_log_type_t.error.getter(v77, v78);
            if (os_log_type_enabled(v77, v79))
            {
              v80 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v80 = 0;
              _os_log_impl((void *)&_mh_execute_header, v77, v79, "Failed to send REQUEST_STANDARD_TRANSACTION event", v80, 2u);
              swift_slowDealloc(v80, -1, -1);
            }
            sub_100063CD0(v73, v75);
            swift_errorRelease(v9);

          }
          else
          {
            sub_100063CD0(v73, v75);
          }
        }
        v81 = objc_opt_self(SESDAnalyticsLogger);
        UUID.uuidString.getter(v81);
        v83 = v82;
        v84 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v83);
        sub_100049154(v81, 4, v84);
        swift_release(v35);

      }
      else
      {
        v58 = Logger.logObject.getter(v49);
        v60 = static os_log_type_t.error.getter(v58, v59);
        if (os_log_type_enabled(v58, v60))
        {
          v61 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v61 = 0;
          _os_log_impl((void *)&_mh_execute_header, v58, v60, "Failed to retrieve endpoint", v61, 2u);
          swift_slowDealloc(v61, -1, -1);
        }
        swift_release(v35);

      }
    }
    else
    {
      swift_release(v35);
    }
  }
}

uint64_t sub_1001753E0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  char v8;
  char v9;

  v5 = *(_QWORD *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
  v6 = *(_QWORD *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
  if (v6 >> 60 == 15)
  {
    sub_100063C8C(a2, a3);
    sub_10006B9B4(v5, v6);
    sub_10006B9B4(a2, a3);
    return 0;
  }
  else
  {
    sub_10006BA34(*(_QWORD *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier), v6);
    sub_100063C8C(a2, a3);
    sub_10007C23C(v5, v6);
    v9 = v8;
    sub_100063CD0(a2, a3);
    sub_10006B9B4(v5, v6);
    return v9 & 1;
  }
}

void sub_1001754A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  os_unfair_lock_s *v15;
  uint64_t v16;
  NSObject *v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSString v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSString v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (uint64_t *)((char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v7 = qword_100354EE8;
  *v6 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) != 0)
  {
    v9 = qword_1003445B8;
    swift_retain(a1);
    if (v9 == -1)
      goto LABEL_5;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1003445B8, sub_1000EAA4C);
LABEL_5:
  v10 = off_1003463F0;
  v11 = swift_allocObject(&unk_10030B780, 32, 7);
  *(_QWORD *)(v11 + 16) = sub_10017B8A0;
  *(_QWORD *)(v11 + 24) = a1;
  v13 = __chkstk_darwin(v11, v12);
  *(&v41 - 4) = (uint64_t)sub_100096F30;
  *(&v41 - 3) = v13;
  *(&v41 - 2) = (uint64_t)v10;
  v15 = v14 + 4;
  swift_retain(a1);
  os_unfair_lock_lock(v15);
  sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_100096F14, &v44);
  os_unfair_lock_unlock(v15);
  v16 = v44;
  swift_release(a1);
  swift_release(v11);
  v17 = sub_10009F618(v16);
  swift_bridgeObjectRelease(v16);
  if (!v17)
    goto LABEL_13;
  v18 = -[NSObject readerInfo](v17, "readerInfo");
  if (!v18)
  {

LABEL_13:
    v32 = swift_retain_n(a1, 2);
    v17 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.error.getter(v17, v33);
    if (os_log_type_enabled(v17, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(12, -1);
      v36 = swift_slowAlloc(32, -1);
      *(_DWORD *)v35 = 136315138;
      v44 = v36;
      v37 = swift_retain(a1);
      v38 = UUID.uuidString.getter(v37);
      v40 = v39;
      swift_release(a1);
      v42 = sub_1001C56EC(v38, v40, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v35 + 4, v35 + 12);
      swift_release_n(a1, 2);
      swift_bridgeObjectRelease(v40);
      _os_log_impl((void *)&_mh_execute_header, v17, v34, "Missing endpoint reader information %s", v35, 0xCu);
      swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1, -1);
      swift_slowDealloc(v35, -1, -1);
    }
    else
    {
      swift_release_n(a1, 2);
    }
    goto LABEL_16;
  }
  v19 = v18;
  v20 = objc_opt_self(SESDAnalyticsLogger);
  UUID.uuidString.getter(v20);
  v22 = v21;
  v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v22);
  sub_100048C5C(v20, 1u, v23);

  UUID.uuidString.getter(v24);
  v26 = v25;
  v27 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v26);
  sub_100049758(v20, 0x8000, 0xFFFF, v19, 0, v27);

  v28 = type metadata accessor for AlishaPeer(0);
  v29 = swift_dynamicCastClass(a1, v28);
  if (v29)
  {
    v30 = v29;
    if ((*(_BYTE *)(*(_QWORD *)(v29 + OBJC_IVAR____TtC10seserviced10AlishaPeer_configuration) + 112) & 1) == 0)
    {
      v31 = qword_1003445A0;
      swift_retain(a1);
      if (v31 != -1)
        swift_once(&qword_1003445A0, sub_1000B26B0);
      sub_1000AD358(v30);
      swift_release(a1);
    }
  }
LABEL_16:

}

uint64_t sub_10017590C(void *a1)
{
  id v2;
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  if (objc_msgSend(a1, "endPointType") != (id)1)
    return 0;
  v2 = objc_msgSend(a1, "bleUUID");
  if (v2)
  {

    return 0;
  }
  v4 = objc_msgSend(a1, "blePairingRequest");

  if (!v4)
    return 0;
  v5 = objc_msgSend(a1, "revocationAttestation");
  if (v5)
  {
    v6 = v5;
    v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v9 = v8;

    sub_100063CD0(v7, v9);
    return 0;
  }
  return 1;
}

uint64_t sub_1001759D4(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  _QWORD *v22;
  _QWORD aBlock[5];
  uint64_t v24;

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100344698 != -1)
    swift_once(&qword_100344698, sub_100182C20);
  if (byte_100354D78 == 1)
  {
    if (qword_1003447B8 != -1)
      swift_once(&qword_1003447B8, sub_1001EEFA4);
    v21 = qword_100354EE8;
    v14 = swift_allocObject(&unk_10030B640, 32, 7);
    *(_QWORD *)(v14 + 16) = a1;
    *(_QWORD *)(v14 + 24) = a2;
    aBlock[4] = sub_10017B864;
    v24 = v14;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100071C98;
    aBlock[3] = &unk_10030B658;
    v15 = _Block_copy(aBlock);
    v16 = swift_retain(a2);
    static DispatchQoS.unspecified.getter(v16);
    v22 = _swiftEmptyArrayStorage;
    v17 = sub_1000639EC((unint64_t *)&qword_100344A20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v18 = sub_100063D3C((uint64_t *)&unk_100346200);
    v19 = sub_10007EF60((unint64_t *)&qword_100344A30, (uint64_t *)&unk_100346200, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v18, v19, v4, v17);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v8, v15);
    _Block_release(v15);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    return swift_release(v24);
  }
  else
  {
    if (qword_100344688 != -1)
      swift_once(&qword_100344688, sub_10016E9E4);
    objc_msgSend((id)qword_1003482B8, "invalidate");
    return a1(1);
  }
}

uint64_t sub_100175C6C(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  os_unfair_lock_s *v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;

  v1 = (uint64_t (*)(uint64_t))a1;
  if (qword_1003447B0 != -1)
    a1 = swift_once(&qword_1003447B0, sub_1001EEF58);
  v2 = Logger.logObject.getter(a1);
  v6 = static os_log_type_t.info.getter(v2, v3, v4, v5);
  if (os_log_type_enabled(v2, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v6, "Posting CA General Transaction Statistics", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  v17 = 0;
  v18 = 0;
  v16 = 1;
  if (qword_1003445B8 != -1)
    v8 = swift_once(&qword_1003445B8, sub_1000EAA4C);
  __chkstk_darwin(v8, v9);
  v11 = v10 + 4;
  os_unfair_lock_lock(v10 + 4);
  sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_100096F14, &v15);
  os_unfair_lock_unlock(v11);
  v12 = v15;
  sub_10016D2C0(v15, &v18, &v17, &v16);
  swift_bridgeObjectRelease(v12);
  v13 = objc_opt_self(SESDAnalyticsLogger);
  sub_10004AE38(v13, v18, v17, v16);
  return v1(1);
}

uint64_t sub_100175E34(void *a1)
{
  id v2;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  if (objc_msgSend(a1, "endPointType") != (id)1)
    return 0;
  v2 = objc_msgSend(a1, "revocationAttestation");
  if (v2)
  {
    v3 = v2;
    v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v2);
    v6 = v5;

    sub_100063CD0(v4, v6);
    return 0;
  }
  result = (uint64_t)objc_msgSend(a1, "bleUUID");
  if (result)
  {

    return 1;
  }
  return result;
}

void sub_100175ED4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t inited;
  uint64_t v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  Class isa;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  os_log_type_t v23;
  uint8_t *v24;
  _BYTE v25[16];
  uint64_t v26;
  _BYTE v27[56];

  v1 = (_QWORD *)type metadata accessor for DispatchPredicate(0);
  v2 = *(v1 - 1);
  __chkstk_darwin(v1, v3);
  v5 = &v25[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v6 = (void *)qword_100354EE8;
  *v5 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, _QWORD *))(v2 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v1);
  v7 = v6;
  v8 = _dispatchPreconditionTest(_:)(v5);
  (*(void (**)(_QWORD *, _QWORD *))(v2 + 8))(v5, v1);
  if ((v8 & 1) != 0)
  {
    v1 = String._bridgeToObjectiveC()();
    v9 = sub_100063D3C(&qword_1003483D0);
    inited = swift_initStackObject(v9, v27);
    v8 = inited;
    *(_OWORD *)(inited + 16) = xmmword_1002888E0;
    *(_QWORD *)(inited + 32) = 0xD000000000000012;
    *(_QWORD *)(inited + 40) = 0x80000001002BE9E0;
    if (qword_1003445B8 == -1)
      goto LABEL_5;
  }
  else
  {
    __break(1u);
  }
  inited = swift_once(&qword_1003445B8, sub_1000EAA4C);
LABEL_5:
  __chkstk_darwin(inited, v11);
  *(_QWORD *)&v25[-32] = sub_10008ECD0;
  *(_QWORD *)&v25[-24] = 0;
  *(_QWORD *)&v25[-16] = v12;
  v14 = v13 + 4;
  os_unfair_lock_lock(v13 + 4);
  sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_100096F14, &v26);
  os_unfair_lock_unlock(v14);
  v15 = v26;
  if ((v26 & 0xC000000000000001) != 0)
  {
    if (v26 < 0)
      v16 = v26;
    else
      v16 = v26 & 0xFFFFFFFFFFFFFF8;
    v17 = __CocoaSet.count.getter(v16);
  }
  else
  {
    v17 = *(_QWORD *)(v26 + 16);
  }
  swift_bridgeObjectRelease(v15);
  *(_QWORD *)(v8 + 48) = v17;
  v18 = sub_10017CB5C(v8);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v18);
  PLLogRegisteredEvent(117, v1, isa, 0);

  v20 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced6Alisha_powerLogTimer);
  if (v20)
  {
    sub_10004C410(v20, 28800.0);
  }
  else
  {
    v21 = Logger.logObject.getter(0);
    v23 = static os_log_type_t.error.getter(v21, v22);
    if (os_log_type_enabled(v21, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v23, "Power log timer not initialized", v24, 2u);
      swift_slowDealloc(v24, -1, -1);
    }

  }
}

uint64_t sub_1001761D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC10seserviced6Alisha_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100176230()
{
  return type metadata accessor for Alisha(0);
}

uint64_t type metadata accessor for Alisha(uint64_t a1)
{
  return sub_10007BBF0(a1, qword_100348310, (uint64_t)&nominal type descriptor for Alisha);
}

uint64_t sub_10017624C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = &unk_10028B6E8;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_10028B6E8;
    v4[3] = &unk_10028B6E8;
    v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[5] = &unk_10028B700;
    v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
    result = swift_updateClassMetadata2(a1, 256, 7, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1001762E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  _QWORD *v17;
  _QWORD aBlock[5];
  uint64_t v19;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v16 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1, v2);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  aBlock[4] = sub_10017B980;
  v19 = v0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100071C98;
  aBlock[3] = &unk_10030B928;
  v10 = _Block_copy(aBlock);
  v11 = swift_retain(v0);
  static DispatchQoS.unspecified.getter(v11);
  v17 = _swiftEmptyArrayStorage;
  v12 = sub_1000639EC((unint64_t *)&qword_100344A20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v13 = sub_100063D3C((uint64_t *)&unk_100346200);
  v14 = sub_10007EF60((unint64_t *)&qword_100344A30, (uint64_t *)&unk_100346200, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v17, v13, v14, v1, v12);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v4, v10);
  _Block_release(v10);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  return swift_release(v19);
}

id sub_1001764DC(id result, uint64_t a2)
{
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  os_log_type_t v13;
  uint8_t *v14;
  void *v15;
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (*((_BYTE *)result + 16) == 1)
  {
    if (qword_1003447A0 != -1)
      result = (id)swift_once(&qword_1003447A0, sub_1001EDCA4);
    __chkstk_darwin(result, a2);
    v3 = v2 + 4;
    os_unfair_lock_lock(v2 + 4);
    sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_10017BF58, &v22);
    os_unfair_lock_unlock(v3);
    v4 = v22;
    sub_10016DFF8(v22);
    v6 = v5;
    v7 = swift_bridgeObjectRelease(v4);
    if ((unint64_t)v6 >> 62)
    {
      if (v6 < 0)
        v21 = v6;
      else
        v21 = v6 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v6);
      v8 = _CocoaArrayWrapper.endIndex.getter(v21);
      v7 = swift_bridgeObjectRelease(v6);
      if (v8)
        goto LABEL_6;
    }
    else
    {
      v8 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v8)
      {
LABEL_6:
        v9 = Logger.logObject.getter(v7);
        v13 = static os_log_type_t.info.getter(v9, v10, v11, v12);
        if (os_log_type_enabled(v9, v13))
        {
          v14 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v14 = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, v13, "Applying updated asset", v14, 2u);
          swift_slowDealloc(v14, -1, -1);
        }

        result = objc_msgSend(objc_allocWithZone((Class)SESConfigDCK), "init");
        if (v8 < 1)
        {
          __break(1u);
          return result;
        }
        v15 = result;
        swift_bridgeObjectRetain(v6);
        for (i = 0; i != v8; ++i)
        {
          if ((v6 & 0xC000000000000001) != 0)
          {
            v17 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v6);
          }
          else
          {
            v17 = *(_QWORD *)(v6 + 8 * i + 32);
            swift_retain(v17);
          }
          v18 = *(_QWORD *)(v17 + OBJC_IVAR____TtC10seserviced10AlishaPeer_configuration);
          sub_1001BC1FC(v15, 0, 0xF000000000000000);
          v20 = *(_QWORD *)(v18 + 96);
          v19 = *(_QWORD *)(v18 + 104);
          if (qword_1003445A0 != -1)
            swift_once(&qword_1003445A0, sub_1000B26B0);
          sub_1000B6FEC(v20, v19, v17);
          swift_release(v17);
        }

        swift_bridgeObjectRelease(v6);
      }
    }
    return (id)swift_bridgeObjectRelease(v6);
  }
  return result;
}

uint64_t sub_1001767AC(uint64_t a1, void *a2)
{
  uint64_t v3;
  unint64_t v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v10;
  char v11;

  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_type))
    return 0;
  v3 = *(_QWORD *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
  v4 = *(_QWORD *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
  sub_10006BA34(v3, v4);
  v5 = objc_msgSend(a2, "publicKeyIdentifier");
  v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v8 = v7;

  if (v4 >> 60 == 15)
  {
    sub_10006B9B4(v3, v4);
    sub_10006B9B4(v6, v8);
    return 0;
  }
  sub_10006BA34(v3, v4);
  sub_10007C23C(v3, v4);
  v11 = v10;
  sub_100063CD0(v6, v8);
  sub_10006B9B4(v3, v4);
  sub_10006B9B4(v3, v4);
  return v11 & 1;
}

BOOL sub_1001768B8(_QWORD *a1)
{
  return !*(_BYTE *)(*a1 + OBJC_IVAR____TtC10seserviced4Peer_type)
      && *(_BYTE *)(*a1 + OBJC_IVAR____TtC10seserviced4Peer_pairingState) != 0;
}

BOOL sub_1001768F4(_QWORD *a1)
{
  return !*(_BYTE *)(*a1 + OBJC_IVAR____TtC10seserviced4Peer_type)
      && *(_BYTE *)(*a1 + OBJC_IVAR____TtC10seserviced4Peer_pairingState) == 2;
}

uint64_t sub_100176930(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD v11[5];
  uint64_t v12;

  v2 = type metadata accessor for SESAssetManager(0);
  if (qword_100344730 != -1)
    swift_once(&qword_100344730, sub_1001CDAF0);
  v3 = *(void **)(qword_100349DE8 + OBJC_IVAR____TtC10seserviced15SESAssetManager_queue);
  v4 = swift_allocObject(&unk_10030B7A8, 32, 7);
  *(_QWORD *)(v4 + 16) = v2;
  *(_QWORD *)(v4 + 24) = a1;
  v5 = swift_allocObject(&unk_10030B7D0, 32, 7);
  *(_QWORD *)(v5 + 16) = sub_10017B900;
  *(_QWORD *)(v5 + 24) = v4;
  v11[4] = sub_1000966E0;
  v12 = v5;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  v11[2] = sub_10016DF1C;
  v11[3] = &unk_10030B7E8;
  v6 = _Block_copy(v11);
  v7 = v12;
  v8 = v3;
  swift_retain(a1);
  swift_retain(v5);
  swift_release(v7);
  dispatch_sync(v8, v6);

  _Block_release(v6);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v5, "", 109, 63, 30, 1);
  swift_release(v4);
  result = swift_release(v5);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_100176AA8(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD v12[5];
  uint64_t v13;

  if (qword_100344730 != -1)
    swift_once(&qword_100344730, sub_1001CDAF0);
  v4 = *(void **)(qword_100349DE8 + OBJC_IVAR____TtC10seserviced15SESAssetManager_queue);
  v5 = swift_allocObject(&unk_10030B8C0, 32, 7);
  *(_QWORD *)(v5 + 16) = a2;
  *(_QWORD *)(v5 + 24) = a1;
  v6 = swift_allocObject(&unk_10030B8E8, 32, 7);
  *(_QWORD *)(v6 + 16) = sub_10017BED0;
  *(_QWORD *)(v6 + 24) = v5;
  v12[4] = sub_10017BED4;
  v13 = v6;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  v12[2] = sub_10016DF1C;
  v12[3] = &unk_10030B900;
  v7 = _Block_copy(v12);
  v8 = v13;
  v9 = v4;
  swift_retain(a1);
  swift_retain(v6);
  swift_release(v8);
  dispatch_sync(v9, v7);

  _Block_release(v7);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v6, "", 109, 63, 30, 1);
  swift_release(v5);
  result = swift_release(v6);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

void sub_100176C18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

void sub_100176C78()
{
  uint64_t v0;
  char v1;
  char v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  char v7;
  char v8;
  char *v9;
  char *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;

  if (!__OFADD__(BYTE6(v0), 4))
  {
    v13 = sub_10007C71C(BYTE6(v0) + 4);
    v14 = v4;
    v7 = v1;
    v11 = &type metadata for UnsafeRawBufferPointer;
    v12 = &protocol witness table for UnsafeRawBufferPointer;
    v9 = &v7;
    v10 = &v8;
    v5 = sub_10006BA78(&v9, (uint64_t)&type metadata for UnsafeRawBufferPointer);
    Data._Representation.append(contentsOf:)(*v5, v5[1]);
    sub_10006BA9C(&v9);
    v7 = v2;
    v11 = &type metadata for UnsafeRawBufferPointer;
    v12 = &protocol witness table for UnsafeRawBufferPointer;
    v9 = &v7;
    v10 = &v8;
    v6 = sub_10006BA78(&v9, (uint64_t)&type metadata for UnsafeRawBufferPointer);
    Data._Representation.append(contentsOf:)(*v6, v6[1]);
    sub_10006BA9C(&v9);
    __asm { BR              X11 }
  }
  __break(1u);
  JUMPOUT(0x100176E0CLL);
}

uint64_t sub_100176EC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100176ED8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_100176EE0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  int64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v33;
  _QWORD v34[5];
  void *v35;

  v4 = v3;
  v6 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v7 = a1;
    else
      v7 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v8 = __CocoaSet.makeIterator()(v7);
    v9 = sub_10006C25C(0, (unint64_t *)&qword_100347710, SEEndPoint_ptr);
    v10 = sub_10007EFD8();
    v11 = Set.Iterator.init(_cocoa:)(v34, v8, v9, v10);
    v6 = v34[0];
    v31 = v34[1];
    v12 = v34[2];
    v13 = v34[3];
    v14 = v34[4];
  }
  else
  {
    v15 = -1 << *(_BYTE *)(a1 + 32);
    v31 = a1 + 56;
    v16 = ~v15;
    v17 = -v15;
    if (v17 < 64)
      v18 = ~(-1 << v17);
    else
      v18 = -1;
    v14 = v18 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v12 = v16;
    v13 = 0;
  }
  v30 = (unint64_t)(v12 + 64) >> 6;
  if ((v6 & 0x8000000000000000) == 0)
    goto LABEL_14;
LABEL_11:
  v19 = __CocoaSet.Iterator.next()(v11);
  if (v19)
  {
    v20 = v19;
    v33 = v19;
    v21 = sub_10006C25C(0, (unint64_t *)&qword_100347710, SEEndPoint_ptr);
    swift_unknownObjectRetain(v20);
    swift_dynamicCast(&v35, &v33, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
    v22 = v35;
    swift_unknownObjectRelease(v20);
    v23 = v13;
    v24 = v14;
    while (v22)
    {
      v35 = v22;
      sub_10016F1E0(&v35, a2, a3);

      if (v4)
      {
        v29 = v6;
        goto LABEL_39;
      }
      v13 = v23;
      v14 = v24;
      if (v6 < 0)
        goto LABEL_11;
LABEL_14:
      if (v14)
      {
        v24 = (v14 - 1) & v14;
        v25 = __clz(__rbit64(v14)) | (v13 << 6);
        v23 = v13;
      }
      else
      {
        v23 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
          __break(1u);
          return;
        }
        if (v23 >= v30)
          break;
        v26 = *(_QWORD *)(v31 + 8 * v23);
        if (!v26)
        {
          v27 = v13 + 2;
          if (v13 + 2 >= v30)
            break;
          v26 = *(_QWORD *)(v31 + 8 * v27);
          if (v26)
            goto LABEL_25;
          v27 = v13 + 3;
          if (v13 + 3 >= v30)
            break;
          v26 = *(_QWORD *)(v31 + 8 * v27);
          if (v26)
            goto LABEL_25;
          v27 = v13 + 4;
          if (v13 + 4 >= v30)
            break;
          v26 = *(_QWORD *)(v31 + 8 * v27);
          if (v26)
          {
LABEL_25:
            v23 = v27;
          }
          else
          {
            v23 = v13 + 5;
            if (v13 + 5 >= v30)
              break;
            v26 = *(_QWORD *)(v31 + 8 * v23);
            if (!v26)
            {
              v28 = v13 + 6;
              while (v30 != v28)
              {
                v26 = *(_QWORD *)(v31 + 8 * v28++);
                if (v26)
                {
                  v23 = v28 - 1;
                  goto LABEL_26;
                }
              }
              break;
            }
          }
        }
LABEL_26:
        v24 = (v26 - 1) & v26;
        v25 = __clz(__rbit64(v26)) + (v23 << 6);
      }
      v22 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v25);
    }
  }
  v29 = v6;
LABEL_39:
  sub_10007EF58(v29);
}

void sub_1001771DC(uint64_t a1, unint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  os_log_type_t v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  os_log_type_t v32;
  uint64_t v33;
  _QWORD v34[5];
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  _QWORD v39[3];
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;

  v36 = a6;
  v34[2] = a5;
  v37 = a3;
  v35 = type metadata accessor for Alisha.DKMessage(0);
  __chkstk_darwin(v35, v9);
  v10 = type metadata accessor for DispatchPredicate(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (_QWORD *)((char *)v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v15 = qword_100354EE8;
  *v14 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v10);
  v16 = (id)v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)(v14);
  (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v14, v10);
  if ((v15 & 1) != 0)
  {
    v34[0] = a2;
    v34[1] = a1;
    if ((v37 & 1) != 0)
    {
      v18 = *(_QWORD *)(a4 + OBJC_IVAR____TtC10seserviced4Peer_buffer + 8);
      v40 = *(_QWORD *)(a4 + OBJC_IVAR____TtC10seserviced4Peer_buffer);
      v17 = v40;
      v41 = v18;
      *(_OWORD *)(a4 + OBJC_IVAR____TtC10seserviced4Peer_buffer) = xmmword_1002888D0;
      sub_10006BA34(v17, v18);
      sub_10006B9B4(v17, v18);
      if (v18 >> 60 == 15 || (Data.append(_:)(a1, a2), v17 = v40, v18 = v41, v19 = v40, v20 = v41, v41 >> 60 == 15))
      {
        sub_100063C8C(a1, a2);
        v19 = a1;
        v20 = a2;
      }
      v42 = v19;
      v43 = v20;
      sub_100063C8C(a1, a2);
      sub_100063C8C(a1, a2);
      v21 = sub_10006BA34(v17, v18);
      v22 = Logger.logObject.getter(v21);
      v26 = static os_log_type_t.info.getter(v22, v23, v24, v25);
      if (os_log_type_enabled(v22, v26))
      {
        *(_DWORD *)swift_slowAlloc(22, -1) = 134218240;
        __asm { BR              X9 }
      }
      sub_100063CD0(a1, a2);

      sub_100063CD0(a1, a2);
      sub_10006B9B4(v17, v18);
    }
    else
    {
      v42 = a1;
      v43 = a2;
      sub_100063C8C(a1, a2);
      v27 = sub_100063C8C(a1, a2);
      v28 = Logger.logObject.getter(v27);
      v32 = static os_log_type_t.info.getter(v28, v29, v30, v31);
      if (os_log_type_enabled(v28, v32))
      {
        *(_DWORD *)swift_slowAlloc(12, -1) = 134217984;
        __asm { BR              X10 }
      }

      sub_100063CD0(a1, a2);
    }
    v38 = OBJC_IVAR____TtC10seserviced4Peer_sequenceNumber;
    v33 = a4 + OBJC_IVAR____TtC10seserviced4Peer_connectionIdentifier;
    swift_beginAccess(&v42, &v40, 1, 0);
    v34[3] = v33;
    swift_beginAccess(v33, v39, 0, 0);
    v34[4] = a4;
    __asm { BR              X8 }
  }
  __break(1u);
  JUMPOUT(0x100177F48);
}

void sub_100177FD4(uint64_t a1, unint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  os_log_type_t v33;
  uint64_t v34;
  _QWORD v35[3];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[3];
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;

  v40 = a7;
  v39 = a6;
  v35[2] = a5;
  v42 = a4;
  v41 = a3;
  v36 = a1;
  v38 = type metadata accessor for Alisha.DKMessage(0);
  __chkstk_darwin(v38, v8);
  v9 = type metadata accessor for DispatchPredicate(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (_QWORD *)((char *)v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v14 = qword_100354EE8;
  *v13 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v10 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v9);
  v15 = (id)v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)(v13);
  (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v13, v9);
  if ((v14 & 1) != 0)
  {
    v35[1] = a2;
    if ((v41 & 1) != 0)
    {
      v17 = *(_QWORD *)(v42 + OBJC_IVAR____TtC10seserviced4Peer_buffer + 8);
      v45 = *(_QWORD *)(v42 + OBJC_IVAR____TtC10seserviced4Peer_buffer);
      v16 = v45;
      v46 = v17;
      *(_OWORD *)(v42 + OBJC_IVAR____TtC10seserviced4Peer_buffer) = xmmword_1002888D0;
      sub_10006BA34(v16, v17);
      sub_10006B9B4(v16, v17);
      v18 = v36;
      if (v17 >> 60 == 15 || (Data.append(_:)(v36, a2), v16 = v45, v17 = v46, v19 = v45, v20 = v46, v46 >> 60 == 15))
      {
        sub_100063C8C(v18, a2);
        v19 = v18;
        v20 = a2;
      }
      v47 = v19;
      v48 = v20;
      sub_100063C8C(v18, a2);
      sub_100063C8C(v18, a2);
      v21 = sub_10006BA34(v16, v17);
      v22 = Logger.logObject.getter(v21);
      v26 = static os_log_type_t.info.getter(v22, v23, v24, v25);
      if (os_log_type_enabled(v22, v26))
      {
        *(_DWORD *)swift_slowAlloc(22, -1) = 134218240;
        __asm { BR              X9 }
      }
      sub_100063CD0(v18, a2);

      sub_100063CD0(v18, a2);
      sub_10006B9B4(v16, v17);
    }
    else
    {
      v27 = v36;
      v47 = v36;
      v48 = a2;
      sub_100063C8C(v36, a2);
      v28 = sub_100063C8C(v27, a2);
      v29 = Logger.logObject.getter(v28);
      v33 = static os_log_type_t.info.getter(v29, v30, v31, v32);
      if (os_log_type_enabled(v29, v33))
      {
        *(_DWORD *)swift_slowAlloc(12, -1) = 134217984;
        __asm { BR              X10 }
      }

      sub_100063CD0(v27, a2);
    }
    v43 = OBJC_IVAR____TtC10seserviced4Peer_sequenceNumber;
    v34 = v42 + OBJC_IVAR____TtC10seserviced4Peer_connectionIdentifier;
    swift_beginAccess(&v47, &v45, 1, 0);
    v37 = v34;
    swift_beginAccess(v34, v44, 0, 0);
    __asm { BR              X8 }
  }
  __break(1u);
  JUMPOUT(0x100178D78);
}

void sub_100178E04(uint64_t a1, unint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  os_log_type_t v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  os_log_type_t v33;
  uint64_t v34;
  _QWORD v35[6];
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  _QWORD v40[3];
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;

  v37 = a6;
  v35[2] = a5;
  v38 = a3;
  v36 = type metadata accessor for Alisha.DKMessage(0);
  __chkstk_darwin(v36, v9);
  v35[5] = (char *)v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchPredicate(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v15 = (_QWORD *)((char *)v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v16 = qword_100354EE8;
  *v15 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v12 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v11);
  v17 = (id)v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)(v15);
  (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(v15, v11);
  if ((v16 & 1) != 0)
  {
    v35[0] = a2;
    v35[1] = a1;
    if ((v38 & 1) != 0)
    {
      v19 = *(_QWORD *)(a4 + OBJC_IVAR____TtC10seserviced4Peer_buffer + 8);
      v41 = *(_QWORD *)(a4 + OBJC_IVAR____TtC10seserviced4Peer_buffer);
      v18 = v41;
      v42 = v19;
      *(_OWORD *)(a4 + OBJC_IVAR____TtC10seserviced4Peer_buffer) = xmmword_1002888D0;
      sub_10006BA34(v18, v19);
      sub_10006B9B4(v18, v19);
      if (v19 >> 60 == 15 || (Data.append(_:)(a1, a2), v18 = v41, v19 = v42, v20 = v41, v21 = v42, v42 >> 60 == 15))
      {
        sub_100063C8C(a1, a2);
        v20 = a1;
        v21 = a2;
      }
      v43 = v20;
      v44 = v21;
      sub_100063C8C(a1, a2);
      sub_100063C8C(a1, a2);
      v22 = sub_10006BA34(v18, v19);
      v23 = Logger.logObject.getter(v22);
      v27 = static os_log_type_t.info.getter(v23, v24, v25, v26);
      if (os_log_type_enabled(v23, v27))
      {
        *(_DWORD *)swift_slowAlloc(22, -1) = 134218240;
        __asm { BR              X9 }
      }
      sub_100063CD0(a1, a2);

      sub_100063CD0(a1, a2);
      sub_10006B9B4(v18, v19);
    }
    else
    {
      v43 = a1;
      v44 = a2;
      sub_100063C8C(a1, a2);
      v28 = sub_100063C8C(a1, a2);
      v29 = Logger.logObject.getter(v28);
      v33 = static os_log_type_t.info.getter(v29, v30, v31, v32);
      if (os_log_type_enabled(v29, v33))
      {
        *(_DWORD *)swift_slowAlloc(12, -1) = 134217984;
        __asm { BR              X10 }
      }

      sub_100063CD0(a1, a2);
    }
    v39 = OBJC_IVAR____TtC10seserviced4Peer_sequenceNumber;
    v34 = a4 + OBJC_IVAR____TtC10seserviced4Peer_connectionIdentifier;
    swift_beginAccess(&v43, &v41, 1, 0);
    v35[3] = v34;
    swift_beginAccess(v34, v40, 0, 0);
    v35[4] = a4;
    __asm { BR              X8 }
  }
  __break(1u);
  JUMPOUT(0x100179B90);
}

void sub_100179C1C(uint64_t a1, unint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  os_log_type_t v32;
  uint64_t v33;
  _QWORD v34[2];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[3];
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;

  v38 = a6;
  v34[1] = a5;
  v40 = a4;
  v39 = a3;
  v35 = a1;
  v37 = type metadata accessor for Alisha.DKMessage(0);
  __chkstk_darwin(v37, v7);
  v8 = type metadata accessor for DispatchPredicate(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (_QWORD *)((char *)v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v13 = qword_100354EE8;
  *v12 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8);
  v14 = (id)v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)(v12);
  (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v12, v8);
  if ((v13 & 1) != 0)
  {
    v34[0] = a2;
    if ((v39 & 1) != 0)
    {
      v16 = *(_QWORD *)(v40 + OBJC_IVAR____TtC10seserviced4Peer_buffer + 8);
      v43 = *(_QWORD *)(v40 + OBJC_IVAR____TtC10seserviced4Peer_buffer);
      v15 = v43;
      v44 = v16;
      *(_OWORD *)(v40 + OBJC_IVAR____TtC10seserviced4Peer_buffer) = xmmword_1002888D0;
      sub_10006BA34(v15, v16);
      sub_10006B9B4(v15, v16);
      v17 = v35;
      if (v16 >> 60 == 15 || (Data.append(_:)(v35, a2), v15 = v43, v16 = v44, v18 = v43, v19 = v44, v44 >> 60 == 15))
      {
        sub_100063C8C(v17, a2);
        v18 = v17;
        v19 = a2;
      }
      v45 = v18;
      v46 = v19;
      sub_100063C8C(v17, a2);
      sub_100063C8C(v17, a2);
      v20 = sub_10006BA34(v15, v16);
      v21 = Logger.logObject.getter(v20);
      v25 = static os_log_type_t.info.getter(v21, v22, v23, v24);
      if (os_log_type_enabled(v21, v25))
      {
        *(_DWORD *)swift_slowAlloc(22, -1) = 134218240;
        __asm { BR              X9 }
      }
      sub_100063CD0(v17, a2);

      sub_100063CD0(v17, a2);
      sub_10006B9B4(v15, v16);
    }
    else
    {
      v26 = v35;
      v45 = v35;
      v46 = a2;
      sub_100063C8C(v35, a2);
      v27 = sub_100063C8C(v26, a2);
      v28 = Logger.logObject.getter(v27);
      v32 = static os_log_type_t.info.getter(v28, v29, v30, v31);
      if (os_log_type_enabled(v28, v32))
      {
        *(_DWORD *)swift_slowAlloc(12, -1) = 134217984;
        __asm { BR              X10 }
      }

      sub_100063CD0(v26, a2);
    }
    v41 = OBJC_IVAR____TtC10seserviced4Peer_sequenceNumber;
    v33 = v40 + OBJC_IVAR____TtC10seserviced4Peer_connectionIdentifier;
    swift_beginAccess(&v45, &v43, 1, 0);
    v36 = v33;
    swift_beginAccess(v33, v42, 0, 0);
    __asm { BR              X8 }
  }
  __break(1u);
  JUMPOUT(0x10017A9B0);
}

void sub_10017AA3C(id a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  os_unfair_lock_s *v34;
  os_unfair_lock_s *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  os_unfair_lock_s *v45;
  os_unfair_lock_s *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  id v50;
  id v51;
  id v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  os_unfair_lock_s *v62;
  os_unfair_lock_s *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  os_unfair_lock_s *v75;
  os_unfair_lock_s *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  os_unfair_lock_s *v81;
  os_unfair_lock_s *v82;
  uint64_t v83;
  id v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  void *v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(_QWORD *, uint64_t, uint64_t);
  char *v95;
  uint64_t v96;
  uint64_t v97;

  v4 = type metadata accessor for UUID(0);
  v96 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4, v5);
  v95 = (char *)&v93 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(v6, v9);
  v11 = (char *)&v93 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchPredicate(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v16 = (uint64_t *)((char *)&v93 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v17 = qword_100354EE8;
  *v16 = qword_100354EE8;
  v18 = enum case for DispatchPredicate.onQueue(_:);
  v94 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v13 + 104);
  v94(v16, enum case for DispatchPredicate.onQueue(_:), v12);
  v19 = (id)v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)(v16);
  v20 = *(uint64_t **)(v13 + 8);
  ((void (*)(_QWORD *, uint64_t))v20)(v16, v12);
  if ((v17 & 1) == 0)
  {
    __break(1u);
LABEL_60:
    v31 = swift_once(&qword_1003445B8, sub_1000EAA4C);
LABEL_9:
    __chkstk_darwin(v31, v32);
    *(&v93 - 4) = (uint64_t)sub_10008ECD0;
    *(&v93 - 3) = 0;
    *(&v93 - 2) = v33;
    v35 = v34 + 4;
    os_unfair_lock_lock(v34 + 4);
    sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_10007EFBC, &v97);
    os_unfair_lock_unlock(v35);
    v36 = v97;
    if ((v97 & 0xC000000000000001) != 0)
    {
      if (v97 < 0)
        v37 = v97;
      else
        v37 = v97 & 0xFFFFFFFFFFFFFF8;
      v38 = __CocoaSet.count.getter(v37);
    }
    else
    {
      v38 = *(_QWORD *)(v97 + 16);
    }
    swift_bridgeObjectRelease(v36);
    if (!v38)
    {
      if (qword_100344560 != -1)
        goto LABEL_67;
      goto LABEL_18;
    }
    v39 = v93;
    while (1)
    {
      v50 = objc_msgSend(a1, "blePairingRequest");

      if (v50)
      {
        v51 = objc_msgSend(a1, "bleUUID");
        if (v51)
        {

        }
        else
        {
          if (qword_100344578 != -1)
            swift_once(&qword_100344578, sub_10008091C);
          v52 = objc_msgSend(a1, "publicKeyIdentifier");
          v53 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v52);
          v55 = v54;

          sub_10008AF58(v53, v55);
          sub_100063CD0(v53, v55);
        }
      }
      v56 = swift_allocObject(&unk_10030B578, 24, 7);
      *(_QWORD *)(v56 + 16) = a1;
      v57 = qword_1003447A0;
      a1 = a1;
      if (v57 != -1)
        swift_once(&qword_1003447A0, sub_1001EDCA4);
      v58 = off_10034A560;
      v59 = swift_allocObject(&unk_10030B5A0, 32, 7);
      *(_QWORD *)(v59 + 16) = sub_10017B4A4;
      *(_QWORD *)(v59 + 24) = v56;
      v61 = __chkstk_darwin(v59, v60);
      *(&v93 - 4) = (uint64_t)sub_100095FDC;
      *(&v93 - 3) = v61;
      *(&v93 - 2) = (uint64_t)v58;
      v63 = v62 + 4;
      swift_retain(v56);
      os_unfair_lock_lock(v63);
      sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_10006F860, &v97);
      os_unfair_lock_unlock(v63);
      v64 = v97;
      swift_release(v56);
      swift_release(v59);
      v16 = (_QWORD *)sub_10009F640(v64);
      swift_bridgeObjectRelease(v64);
      if (!v16)
        goto LABEL_57;
      if (qword_1003445A0 != -1)
        swift_once(&qword_1003445A0, sub_1000B26B0);
      sub_1000AD358((uint64_t)v16);
      if (qword_1003445A8 != -1)
        swift_once(&qword_1003445A8, sub_1000C35EC);
      v66 = v95;
      v65 = v96;
      (*(void (**)(char *, uint64_t, uint64_t))(v96 + 16))(v95, (uint64_t)v16 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier, v39);
      v67 = type metadata accessor for DSKBLEPairing.BLEUnpairingRequest(0);
      v18 = swift_allocObject(v67, *(unsigned int *)(v67 + 48), *(unsigned __int16 *)(v67 + 52));
      (*(void (**)(uint64_t, char *, uint64_t))(v65 + 32))(v18 + OBJC_IVAR____TtCC10seserviced13DSKBLEPairing19BLEUnpairingRequest_peerIdentifier, v66, v39);
      v68 = (_QWORD *)(v18 + OBJC_IVAR____TtCC10seserviced13DSKBLEPairing19BLEUnpairingRequest_tag);
      *v68 = 0xD000000000000011;
      v68[1] = 0x80000001002B9CC0;
      sub_1000AEAA4(v18);
      swift_release(v18);
      if (qword_100344690 != -1)
        swift_once(&qword_100344690, sub_100182BE4);
      v69 = qword_100354D70;
      swift_retain(v16);
      v70 = sub_100196F9C(v69, (uint64_t)v16);
      swift_release(v16);
      v71 = (void *)sub_10009F62C(v70);
      v72 = swift_bridgeObjectRelease(v70);
      if (v71)
      {
        sub_100184FC8();

      }
      v97 = (uint64_t)v16;
      __chkstk_darwin(v72, v73);
      *(&v93 - 2) = v74;
      *(&v93 - 1) = (uint64_t)&v97;
      v76 = v75 + 4;
      os_unfair_lock_lock(v75 + 4);
      sub_10016B0FC(v77, sub_10017B4AC);
      os_unfair_lock_unlock(v76);
      v20 = &v93;
      __chkstk_darwin(v78, v79);
      *(&v93 - 4) = (uint64_t)sub_1001768B4;
      *(&v93 - 3) = 0;
      *(&v93 - 2) = v80;
      v82 = v81 + 4;
      os_unfair_lock_lock(v81 + 4);
      sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_10017BF58, &v97);
      os_unfair_lock_unlock(v82);
      v83 = v97;
      if (qword_1003446C0 != -1)
        swift_once(&qword_1003446C0, sub_10019CC14);
      sub_10019CA04(v83);
      swift_bridgeObjectRelease(v83);
      v84 = objc_msgSend((id)objc_opt_self(_SESSessionManager), "sessionManager");
      v85 = objc_msgSend(v84, "getActiveRKESessions");

      v86 = sub_10006C25C(0, &qword_1003483C8, &off_100301C68);
      v87 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v85, v86);

      if ((unint64_t)v87 >> 62)
      {
        if (v87 < 0)
          v92 = v87;
        else
          v92 = v87 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v87);
        v12 = _CocoaArrayWrapper.endIndex.getter(v92);
        if (!v12)
          goto LABEL_65;
      }
      else
      {
        v12 = *(_QWORD *)((v87 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(v87);
        if (!v12)
          goto LABEL_65;
      }
      if (v12 >= 1)
      {
        v88 = 0;
        do
        {
          if ((v87 & 0xC000000000000001) != 0)
            v89 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v88, v87);
          else
            v89 = *(id *)(v87 + 8 * v88 + 32);
          v90 = v89;
          ++v88;
          v91 = objc_msgSend(v89, "updateAllowlistedVehicles");

        }
        while (v12 != v88);
LABEL_65:

        swift_bridgeObjectRelease_n(v87, 2);
        swift_release(v16);
        return;
      }
      __break(1u);
LABEL_67:
      swift_once(&qword_100344560, sub_10006C2DC);
LABEL_18:
      v40 = qword_100354EE8;
      *v16 = qword_100354EE8;
      v94(v16, v18, v12);
      v41 = (id)v40;
      LOBYTE(v40) = _dispatchPreconditionTest(_:)(v16);
      ((void (*)(_QWORD *, uint64_t))v20)(v16, v12);
      if ((v40 & 1) == 0)
        break;
      if (qword_1003447D0 != -1)
        goto LABEL_69;
LABEL_20:
      sub_1001F8820(0);
      __chkstk_darwin(v42, v43);
      *(&v93 - 4) = (uint64_t)sub_10008ED74;
      *(&v93 - 3) = 0;
      *(&v93 - 2) = v44;
      v46 = v45 + 4;
      os_unfair_lock_lock(v45 + 4);
      sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_100096F14, &v97);
      os_unfair_lock_unlock(v46);
      v47 = v97;
      if ((v97 & 0xC000000000000001) != 0)
      {
        if (v97 < 0)
          v48 = v97;
        else
          v48 = v97 & 0xFFFFFFFFFFFFFF8;
        v49 = __CocoaSet.count.getter(v48);
      }
      else
      {
        v49 = *(_QWORD *)(v97 + 16);
      }
      v39 = v93;
      swift_bridgeObjectRelease(v47);
      if (!v49)
      {
        if (qword_100344690 != -1)
          swift_once(&qword_100344690, sub_100182BE4);
        sub_100180268(0);
      }
    }
    __break(1u);
LABEL_69:
    swift_once(&qword_1003447D0, sub_1001F8C40);
    goto LABEL_20;
  }
  (*(void (**)(char *, id, uint64_t))(v8 + 16))(v11, a1, a2);
  v21 = sub_10006C25C(0, (unint64_t *)&qword_100347710, SEEndPoint_ptr);
  if ((swift_dynamicCast(&v97, v11, a2, v21, 6) & 1) == 0)
    return;
  v93 = v4;
  a1 = (id)v97;
  v22 = objc_msgSend((id)v97, "appletIdentifier");
  v23 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v22);
  v25 = v24;

  v26 = sub_1000E848C(0xD00000000000001ALL, 0x80000001002BB350);
  v28 = v27;
  if (v27 >> 60 != 15)
  {
    sub_100063C8C(v23, v25);
    sub_10007C23C(v23, v25);
    v30 = v29;
    sub_10006B9B4(v26, v28);
    sub_100063CD0(v23, v25);
    v31 = sub_100063CD0(v23, v25);
    if ((v30 & 1) == 0)
      goto LABEL_57;
    if (qword_1003445B8 == -1)
      goto LABEL_9;
    goto LABEL_60;
  }
  sub_10006B9B4(v23, v25);
  sub_10006B9B4(v26, v28);
LABEL_57:

}

uint64_t sub_10017B480()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10017B4A4(uint64_t a1)
{
  uint64_t v1;

  return sub_1001767AC(a1, *(void **)(v1 + 16));
}

uint64_t sub_10017B4AC()
{
  uint64_t v0;

  return sub_10016B538(*(_QWORD *)(v0 + 16), *(uint64_t **)(v0 + 24));
}

uint64_t sub_10017B4C4()
{
  uint64_t v0;

  return sub_10008EC34(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_10017B4DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  id v6;
  void *v7;
  void *v8;
  _QWORD aBlock[6];

  v0 = type metadata accessor for DispatchPredicate(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  v4 = (_QWORD *)((char *)aBlock - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v5 = qword_100354EE8;
  *v4 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v1 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v0);
  v6 = (id)v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)(v4);
  (*(void (**)(_QWORD *, uint64_t))(v1 + 8))(v4, v0);
  if ((v5 & 1) == 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (qword_100344688 != -1)
LABEL_7:
    swift_once(&qword_100344688, sub_10016E9E4);
  v7 = (void *)qword_1003482B8;
  objc_msgSend((id)qword_1003482B8, "setPreregistered:", 1);
  aBlock[4] = sub_1001759D4;
  aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10016D660;
  aBlock[3] = &unk_10030B5E0;
  v8 = _Block_copy(aBlock);
  objc_msgSend(v7, "scheduleWithBlock:", v8);
  _Block_release(v8);
}

uint64_t sub_10017B658()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v16;

  v0 = type metadata accessor for DispatchPredicate(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  v4 = (uint64_t *)((char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v5 = qword_100354EE8;
  *v4 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v1 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v0);
  v6 = (id)v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)(v4);
  v7 = (*(uint64_t (**)(_QWORD *, uint64_t))(v1 + 8))(v4, v0);
  if ((v5 & 1) != 0)
  {
    if (qword_100344698 == -1)
      goto LABEL_5;
  }
  else
  {
    __break(1u);
  }
  v7 = swift_once(&qword_100344698, sub_100182C20);
LABEL_5:
  v8 = byte_100354D78;
  if ((byte_100354D78 & 1) == 0)
  {
    if (qword_1003447B0 != -1)
      v7 = swift_once(&qword_1003447B0, sub_1001EEF58);
    v9 = Logger.logObject.getter(v7);
    v13 = static os_log_type_t.info.getter(v9, v10, v11, v12);
    if (os_log_type_enabled(v9, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v13, "Alisha can't start because UWB is not supported on this device", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }

  }
  return v8;
}

uint64_t sub_10017B810()
{
  uint64_t v0;

  return sub_10016DF50(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_10017B830()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10017B854()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_10017B864()
{
  uint64_t v0;

  return sub_100175C6C(*(_QWORD *)(v0 + 16));
}

uint64_t type metadata accessor for Alisha.DKMessage(uint64_t a1)
{
  return sub_10007BBF0(a1, qword_100348430, (uint64_t)&nominal type descriptor for Alisha.DKMessage);
}

uint64_t sub_10017B880(void *a1)
{
  uint64_t v1;

  return sub_1001747BC(a1, v1);
}

uint64_t sub_10017B888()
{
  uint64_t v0;

  return sub_10016B4A8(*(_QWORD *)(v0 + 16), *(uint64_t **)(v0 + 24));
}

uint64_t sub_10017B8A0(void *a1)
{
  uint64_t v1;

  return sub_100084A08(a1, v1) & 1;
}

uint64_t sub_10017B8BC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_10017B8E8(void *a1, char a2)
{
  uint64_t v2;

  sub_10017296C(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

id sub_10017B8F4(id result, char a2)
{
  if ((a2 & 1) == 0)
    return result;
  return result;
}

uint64_t sub_10017B900()
{
  uint64_t v0;

  return sub_1001CE534(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10017B908()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10017B91C(uint64_t a1)
{
  uint64_t v1;

  return sub_1001753E0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10017B928()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10017B94C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10017B970()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_10017B980(uint64_t a1, uint64_t a2)
{
  void *v2;

  return sub_1001764DC(v2, a2);
}

uint64_t *sub_10017B988(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    v7 = a2[1];
    v8 = a2[2];
    sub_100063C8C(v7, v8);
    v4[1] = v7;
    v4[2] = v8;
    v9 = a3[7];
    v10 = (char *)v4 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    v13 = a3[9];
    *(uint64_t *)((char *)v4 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    v14 = *(uint64_t *)((char *)a2 + v13);
    *(uint64_t *)((char *)v4 + v13) = v14;
  }
  swift_retain(v14);
  return v4;
}

uint64_t sub_10017BA48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_100063CD0(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 36)));
}

uint64_t sub_10017BAA8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_WORD *)a1 = *(_WORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  sub_100063C8C(v6, v7);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  v8 = a3[7];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  v12 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  v13 = *(_QWORD *)(a2 + v12);
  *(_QWORD *)(a1 + v12) = v13;
  swift_retain(v13);
  return a1;
}

uint64_t sub_10017BB40(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  sub_100063C8C(v6, v7);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  sub_100063CD0(v8, v9);
  v10 = a3[7];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  v14 = a3[9];
  v15 = *(_QWORD *)(a2 + v14);
  v16 = *(_QWORD *)(a1 + v14);
  *(_QWORD *)(a1 + v14) = v15;
  swift_retain(v15);
  swift_release(v16);
  return a1;
}

uint64_t sub_10017BBF8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v6 = a3[7];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  *(_QWORD *)(a1 + v10) = *(_QWORD *)(a2 + v10);
  return a1;
}

uint64_t sub_10017BC80(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_WORD *)a1 = *(_WORD *)a2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_100063CD0(v6, v7);
  v8 = a3[7];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  v13 = *(_QWORD *)(a1 + v12);
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);
  swift_release(v13);
  return a1;
}

uint64_t sub_10017BD1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10017BD28);
}

uint64_t sub_10017BD28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 28), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 36));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10017BDA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10017BDB4);
}

uint64_t sub_10017BDB4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 28), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 36)) = (a2 - 1);
  return result;
}

uint64_t sub_10017BE30(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = (char *)&value witness table for Builtin.Int8 + 64;
  v4[1] = (char *)&value witness table for Builtin.Int8 + 64;
  v4[2] = &unk_10028B740;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[5] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10017BF30()
{
  return sub_10017B4AC();
}

uint64_t sub_10017BF44()
{
  return sub_10017B888();
}

uint64_t sub_10017BF58@<X0>(uint64_t *a1@<X8>)
{
  return sub_10006F860(a1);
}

uint64_t sub_10017BF6C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;

  v4 = *(uint64_t (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = v4(a2);
  swift_release(v3);
  return v5;
}

uint64_t sub_10017BFB4(uint64_t a1, Swift::UInt a2)
{
  uint64_t *v2;
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  char v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v3 = v2;
  if (*(_QWORD *)(a1 + 24))
  {
    sub_1000DB160((__int128 *)a1, (uint64_t)&v20);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v19 = *v2;
    *v2 = 0x8000000000000000;
    v6 = sub_10014735C((uint64_t)&v20, *((uint64_t *)&v21 + 1));
    __chkstk_darwin(v6, v6);
    v8 = (uint64_t *)((char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v9 + 16))(v8);
    sub_100196E08(*v8, a2, isUniquelyReferenced_nonNull_native, &v19);
    sub_10006BA9C(&v20);
    v10 = *v2;
    *v2 = v19;
    return swift_bridgeObjectRelease(v10);
  }
  else
  {
    sub_100096700(a1, &qword_100345390);
    v12 = sub_100187EE4(a2);
    if ((v13 & 1) != 0)
    {
      v14 = v12;
      v15 = swift_isUniquelyReferenced_nonNull_native(*v3);
      v16 = *v3;
      v19 = *v3;
      *v3 = 0x8000000000000000;
      if ((v15 & 1) == 0)
      {
        sub_1001901F0();
        v16 = v19;
      }
      sub_1000DB160((__int128 *)(*(_QWORD *)(v16 + 56) + 40 * v14), (uint64_t)&v20);
      sub_10012F2A8(v14, v16);
      v17 = *v3;
      *v3 = v16;
      swift_bridgeObjectRelease(v17);
    }
    else
    {
      v22 = 0;
      v20 = 0u;
      v21 = 0u;
    }
    return sub_100096700((uint64_t)&v20, &qword_100345390);
  }
}

uint64_t sub_10017C140(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v9;
  __int128 v10[2];

  if (*(_QWORD *)(a1 + 24))
  {
    sub_1000DB160((__int128 *)a1, (uint64_t)v10);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v9 = *v3;
    *v3 = 0x8000000000000000;
    sub_10018E154(v10, a2, a3, isUniquelyReferenced_nonNull_native);
    v7 = *v3;
    *v3 = v9;
    swift_bridgeObjectRelease(v7);
    return sub_100063CD0(a2, a3);
  }
  else
  {
    sub_100096700(a1, (uint64_t *)&unk_100347740);
    sub_10012E800(a2, a3, (uint64_t)v10);
    sub_100063CD0(a2, a3);
    return sub_100096700((uint64_t)v10, (uint64_t *)&unk_100347740);
  }
}

unint64_t sub_10017C218(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v16 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v16);
    return (unint64_t)v4;
  }
  sub_100063D3C(&qword_1003461B0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    goto LABEL_9;
  v6 = v3 + 64;
  v17 = a1;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_1000E4E48(v7, (uint64_t)&v18, &qword_1003461B8);
    v8 = v18;
    v9 = v19;
    result = sub_100187F80(v18, v19, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1001882A0);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_10006C2B4(&v20, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_12;
    v4[2] = v15;
    v7 += 48;
    if (!--v5)
    {
      swift_release(v4);
      v16 = v17;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10017C368(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100063D3C(&qword_100348908);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_1000E4E48(v7, (uint64_t)v16, (uint64_t *)&unk_100348940);
    result = sub_100187F3C((uint64_t)v16);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v10 = v4[6] + 40 * result;
    v11 = v16[0];
    v12 = v16[1];
    *(_QWORD *)(v10 + 32) = v17;
    *(_OWORD *)v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
    result = (unint64_t)sub_10006C2B4(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 72;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10017C4A8(uint64_t a1)
{
  return sub_10017CCCC(a1, &qword_100348938);
}

unint64_t sub_10017C4B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t result;
  char v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100063D3C(&qword_100348960);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(v1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(v1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v19 = v1;
  v6 = (uint64_t *)(v1 + 64);
  while (1)
  {
    v7 = *(v6 - 4);
    v8 = *(v6 - 3);
    v9 = *(v6 - 2);
    v10 = *(v6 - 1);
    v11 = *v6;
    sub_100063C8C(v7, v8);
    sub_100063C8C(v9, v10);
    result = sub_100187F80(v7, v8, (void (*)(_QWORD *, uint64_t, uint64_t))&Data.hash(into:), sub_1001884E0);
    if ((v13 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v14 = (uint64_t *)(v4[6] + 16 * result);
    *v14 = v7;
    v14[1] = v8;
    v15 = (uint64_t *)(v4[7] + 24 * result);
    *v15 = v9;
    v15[1] = v10;
    v15[2] = v11;
    v16 = v4[2];
    v17 = __OFADD__(v16, 1);
    v18 = v16 + 1;
    if (v17)
      goto LABEL_11;
    v6 += 5;
    v4[2] = v18;
    if (!--v5)
    {
      swift_release(v4);
      v1 = v19;
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10017C608(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t result;
  char v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = sub_100063D3C(&qword_1003461A8);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (uint64_t *)((char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(_QWORD *)(a1 + 16);
  if (!v7)
  {
    v9 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v27 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v27);
    return (unint64_t)v9;
  }
  sub_100063D3C(&qword_1003461C0);
  v8 = static _DictionaryStorage.allocate(capacity:)(v7);
  v9 = (_QWORD *)v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
    goto LABEL_9;
  v11 = (char *)v6 + *(int *)(v2 + 48);
  v12 = v8 + 64;
  v13 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v29 = a1;
  v14 = a1 + v13;
  v15 = *(_QWORD *)(v3 + 72);
  swift_retain(v8);
  while (1)
  {
    sub_1000E4E48(v14, (uint64_t)v6, &qword_1003461A8);
    v17 = *v6;
    v16 = v6[1];
    result = sub_100187F80(*v6, v16, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1001882A0);
    if ((v19 & 1) != 0)
      break;
    v20 = result;
    *(_QWORD *)(v12 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v21 = (uint64_t *)(v9[6] + 16 * result);
    *v21 = v17;
    v21[1] = v16;
    v22 = v9[7];
    v23 = type metadata accessor for UUID(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v22 + *(_QWORD *)(*(_QWORD *)(v23 - 8) + 72) * v20, v11, v23);
    v24 = v9[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
      goto LABEL_12;
    v9[2] = v26;
    v14 += v15;
    if (!--v10)
    {
      swift_release(v9);
      v27 = v29;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10017C7B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100063D3C(&qword_100348B60);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(v1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(v1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v16 = v1;
  v6 = (_BYTE *)(v1 + 48);
  while (1)
  {
    v7 = *((_QWORD *)v6 - 2);
    v8 = *((_QWORD *)v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    result = sub_100187F80(v7, v8, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1001882A0);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_BYTE *)(v4[7] + result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v6 += 24;
    v4[2] = v15;
    if (!--v5)
    {
      swift_release(v4);
      v1 = v16;
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10017C8EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100063D3C(&qword_100348A40);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_1000E4E48(v7, (uint64_t)&v14, &qword_100348A48);
    v8 = v14;
    result = sub_100188148(v14);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v4[6] + 8 * result) = v8;
    result = (unint64_t)sub_10006C2B4(&v15, (_OWORD *)(v4[7] + 32 * result));
    v11 = v4[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4[2] = v13;
    v7 += 40;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10017CA18(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100063D3C(&qword_100348988);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v7 = *(v6 - 3);
    v8 = *(v6 - 2);
    v9 = *(v6 - 1);
    v10 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v10);
    result = sub_100187F80(v7, v8, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1001882A0);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    v14 = (_QWORD *)(v4[7] + 16 * result);
    *v14 = v9;
    v14[1] = v10;
    v15 = v4[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v6 += 4;
    v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10017CB5C(uint64_t a1)
{
  return sub_10017CE14(a1, &qword_1003489F8);
}

unint64_t sub_10017CB68(uint64_t a1)
{
  return sub_10017CB80(a1, (uint64_t *)&unk_1003489E0);
}

unint64_t sub_10017CB74(uint64_t a1)
{
  return sub_10017CB80(a1, &qword_1003489D8);
}

unint64_t sub_10017CB80(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    v5 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100063D3C(a2);
  v4 = static _DictionaryStorage.allocate(capacity:)(v3);
  v5 = (_QWORD *)v4;
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v5;
  }
  swift_retain(v4);
  v7 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v8 = *(v7 - 2);
    v9 = *(v7 - 1);
    v10 = *v7;
    sub_100063C8C(v8, v9);
    swift_bridgeObjectRetain(v10);
    result = sub_100187F80(v8, v9, (void (*)(_QWORD *, uint64_t, uint64_t))&Data.hash(into:), sub_1001884E0);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v5[6] + 16 * result);
    *v13 = v8;
    v13[1] = v9;
    *(_QWORD *)(v5[7] + 8 * result) = v10;
    v14 = v5[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v5[2] = v16;
    v7 += 3;
    if (!--v6)
    {
      swift_release(v5);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10017CCC0(uint64_t a1)
{
  return sub_10017CCCC(a1, &qword_100348AC0);
}

unint64_t sub_10017CCCC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  unint64_t result;
  char v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    v5 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100063D3C(a2);
  v4 = static _DictionaryStorage.allocate(capacity:)(v3);
  v5 = (_QWORD *)v4;
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v5;
  }
  swift_retain(v4);
  v7 = (void **)(a1 + 48);
  while (1)
  {
    v8 = (uint64_t)*(v7 - 2);
    v9 = (uint64_t)*(v7 - 1);
    v10 = *v7;
    swift_bridgeObjectRetain(v9);
    v11 = v10;
    result = sub_100187F80(v8, v9, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1001882A0);
    if ((v13 & 1) != 0)
      break;
    *(_QWORD *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v14 = (uint64_t *)(v5[6] + 16 * result);
    *v14 = v8;
    v14[1] = v9;
    *(_QWORD *)(v5[7] + 8 * result) = v11;
    v15 = v5[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v5[2] = v17;
    v7 += 3;
    if (!--v6)
    {
      swift_release(v5);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10017CE08(uint64_t a1)
{
  return sub_10017CE14(a1, &qword_100348AE0);
}

unint64_t sub_10017CE14(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;

  v2 = a1;
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    v5 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100063D3C(a2);
  v4 = static _DictionaryStorage.allocate(capacity:)(v3);
  v5 = (_QWORD *)v4;
  v6 = *(_QWORD *)(v2 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease(v2);
    return (unint64_t)v5;
  }
  swift_retain(v4);
  v17 = v2;
  v7 = (uint64_t *)(v2 + 48);
  while (1)
  {
    v8 = *(v7 - 2);
    v9 = *(v7 - 1);
    v10 = *v7;
    swift_bridgeObjectRetain(v9);
    result = sub_100187F80(v8, v9, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1001882A0);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v5[6] + 16 * result);
    *v13 = v8;
    v13[1] = v9;
    *(_QWORD *)(v5[7] + 8 * result) = v10;
    v14 = v5[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v7 += 3;
    v5[2] = v16;
    if (!--v6)
    {
      swift_release(v5);
      v2 = v17;
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10017CF48(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100063D3C(&qword_100348AB0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v7 = *(v6 - 2);
    v8 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    result = sub_100187F80(v7, v8, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1001882A0);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10017D088(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _OWORD v33[2];
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _OWORD v37[2];
  _OWORD v38[3];
  _OWORD v39[2];
  __int128 v40;
  _OWORD v41[2];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_100063D3C(&qword_100348908);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v29 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v28 = (unint64_t)(63 - v4) >> 6;
  v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  result = swift_retain(v3);
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }
    v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v14 >= v28)
      goto LABEL_37;
    v15 = *(_QWORD *)(v29 + 8 * v14);
    v16 = v9 + 1;
    if (!v15)
    {
      v16 = v9 + 2;
      if (v9 + 2 >= v28)
        goto LABEL_37;
      v15 = *(_QWORD *)(v29 + 8 * v16);
      if (!v15)
      {
        v16 = v9 + 3;
        if (v9 + 3 >= v28)
          goto LABEL_37;
        v15 = *(_QWORD *)(v29 + 8 * v16);
        if (!v15)
        {
          v16 = v9 + 4;
          if (v9 + 4 >= v28)
            goto LABEL_37;
          v15 = *(_QWORD *)(v29 + 8 * v16);
          if (!v15)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v16 << 6);
    v9 = v16;
LABEL_28:
    v18 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v13);
    v20 = *v18;
    v19 = v18[1];
    sub_100096CB0(*(_QWORD *)(a1 + 56) + 32 * v13, (uint64_t)v41);
    *(_QWORD *)&v40 = v20;
    *((_QWORD *)&v40 + 1) = v19;
    v38[2] = v40;
    v39[0] = v41[0];
    v39[1] = v41[1];
    *(_QWORD *)&v38[0] = v20;
    *((_QWORD *)&v38[0] + 1) = v19;
    swift_bridgeObjectRetain(v19);
    swift_dynamicCast(&v30, v38, &type metadata for String, &type metadata for AnyHashable, 7);
    sub_10006C2B4(v39, v33);
    v34 = v30;
    v35 = v31;
    v36 = v32;
    sub_10006C2B4(v33, v37);
    v30 = v34;
    v31 = v35;
    v32 = v36;
    sub_10006C2B4(v37, v38);
    sub_10006C2B4(v38, &v34);
    result = AnyHashable._rawHashValue(seed:)(v3[5]);
    v21 = -1 << *((_BYTE *)v3 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)&v7[8 * (v22 >> 6)]) != 0)
    {
      v10 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)&v7[8 * (v22 >> 6)])) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)&v7[8 * v23];
      }
      while (v27 == -1);
      v10 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)&v7[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v10;
    v11 = v3[6] + 40 * v10;
    *(_OWORD *)v11 = v30;
    *(_OWORD *)(v11 + 16) = v31;
    *(_QWORD *)(v11 + 32) = v32;
    result = (uint64_t)sub_10006C2B4(&v34, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }
  v17 = v9 + 5;
  if (v9 + 5 >= v28)
  {
LABEL_37:
    swift_release(v3);
    sub_10007EF58(a1);
    return (uint64_t)v3;
  }
  v15 = *(_QWORD *)(v29 + 8 * v17);
  if (v15)
  {
    v16 = v9 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v16 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v16 >= v28)
      goto LABEL_37;
    v15 = *(_QWORD *)(v29 + 8 * v16);
    ++v17;
    if (v15)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_10017D44C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _OWORD v34[2];
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  _OWORD v38[2];
  _OWORD v39[3];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_100063D3C(&qword_100348908);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v29 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v28 = (unint64_t)(63 - v4) >> 6;
  v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  result = swift_retain(v3);
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }
    v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v14 >= v28)
      goto LABEL_37;
    v15 = *(_QWORD *)(v29 + 8 * v14);
    v16 = v9 + 1;
    if (!v15)
    {
      v16 = v9 + 2;
      if (v9 + 2 >= v28)
        goto LABEL_37;
      v15 = *(_QWORD *)(v29 + 8 * v16);
      if (!v15)
      {
        v16 = v9 + 3;
        if (v9 + 3 >= v28)
          goto LABEL_37;
        v15 = *(_QWORD *)(v29 + 8 * v16);
        if (!v15)
        {
          v16 = v9 + 4;
          if (v9 + 4 >= v28)
            goto LABEL_37;
          v15 = *(_QWORD *)(v29 + 8 * v16);
          if (!v15)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v16 << 6);
    v9 = v16;
LABEL_28:
    v18 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v13);
    v19 = v18[1];
    v20 = *(_BYTE *)(*(_QWORD *)(a1 + 56) + v13);
    *(_QWORD *)&v39[0] = *v18;
    *((_QWORD *)&v39[0] + 1) = v19;
    swift_bridgeObjectRetain(v19);
    swift_dynamicCast(&v31, v39, &type metadata for String, &type metadata for AnyHashable, 7);
    v30 = v20;
    swift_dynamicCast(v34, &v30, &type metadata for Bool, (char *)&type metadata for Any + 8, 7);
    v35 = v31;
    v36 = v32;
    v37 = v33;
    sub_10006C2B4(v34, v38);
    v31 = v35;
    v32 = v36;
    v33 = v37;
    sub_10006C2B4(v38, v39);
    sub_10006C2B4(v39, &v35);
    result = AnyHashable._rawHashValue(seed:)(v3[5]);
    v21 = -1 << *((_BYTE *)v3 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)&v7[8 * (v22 >> 6)]) != 0)
    {
      v10 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)&v7[8 * (v22 >> 6)])) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)&v7[8 * v23];
      }
      while (v27 == -1);
      v10 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)&v7[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v10;
    v11 = v3[6] + 40 * v10;
    *(_OWORD *)v11 = v31;
    *(_OWORD *)(v11 + 16) = v32;
    *(_QWORD *)(v11 + 32) = v33;
    result = (uint64_t)sub_10006C2B4(&v35, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }
  v17 = v9 + 5;
  if (v9 + 5 >= v28)
  {
LABEL_37:
    swift_release(v3);
    sub_10007EF58(a1);
    return (uint64_t)v3;
  }
  v15 = *(_QWORD *)(v29 + 8 * v17);
  if (v15)
  {
    v16 = v9 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v16 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v16 >= v28)
      goto LABEL_37;
    v15 = *(_QWORD *)(v29 + 8 * v16);
    ++v17;
    if (v15)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_10017D7F4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  _OWORD v30[2];
  uint64_t v31;
  _QWORD v32[2];
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _OWORD v36[2];
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  _OWORD v40[2];
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD v46[2];
  uint64_t v47;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_100063D3C(&qword_100348908);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v29 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v28 = (unint64_t)(63 - v4) >> 6;
  v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  result = swift_retain(v3);
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }
    v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v14 >= v28)
      goto LABEL_37;
    v15 = *(_QWORD *)(v29 + 8 * v14);
    v16 = v9 + 1;
    if (!v15)
    {
      v16 = v9 + 2;
      if (v9 + 2 >= v28)
        goto LABEL_37;
      v15 = *(_QWORD *)(v29 + 8 * v16);
      if (!v15)
      {
        v16 = v9 + 3;
        if (v9 + 3 >= v28)
          goto LABEL_37;
        v15 = *(_QWORD *)(v29 + 8 * v16);
        if (!v15)
        {
          v16 = v9 + 4;
          if (v9 + 4 >= v28)
            goto LABEL_37;
          v15 = *(_QWORD *)(v29 + 8 * v16);
          if (!v15)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v16 << 6);
    v9 = v16;
LABEL_28:
    v18 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v13);
    v20 = *v18;
    v19 = v18[1];
    sub_1001988C4(*(_QWORD *)(a1 + 56) + 40 * v13, (uint64_t)v46);
    v44 = v20;
    v45 = v19;
    v41 = v46[0];
    v42 = v46[1];
    v43 = v47;
    v32[0] = v20;
    v32[1] = v19;
    swift_bridgeObjectRetain(v19);
    swift_dynamicCast(&v33, v32, &type metadata for String, &type metadata for AnyHashable, 7);
    v30[0] = v41;
    v30[1] = v42;
    v31 = v43;
    swift_dynamicCast(v36, v30, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, 7);
    v37 = v33;
    v38 = v34;
    v39 = v35;
    sub_10006C2B4(v36, v40);
    v33 = v37;
    v34 = v38;
    v35 = v39;
    sub_10006C2B4(v40, v30);
    sub_10006C2B4(v30, &v37);
    result = AnyHashable._rawHashValue(seed:)(v3[5]);
    v21 = -1 << *((_BYTE *)v3 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)&v7[8 * (v22 >> 6)]) != 0)
    {
      v10 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)&v7[8 * (v22 >> 6)])) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)&v7[8 * v23];
      }
      while (v27 == -1);
      v10 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)&v7[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v10;
    v11 = v3[6] + 40 * v10;
    *(_OWORD *)v11 = v33;
    *(_OWORD *)(v11 + 16) = v34;
    *(_QWORD *)(v11 + 32) = v35;
    result = (uint64_t)sub_10006C2B4(&v37, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }
  v17 = v9 + 5;
  if (v9 + 5 >= v28)
  {
LABEL_37:
    swift_release(v3);
    sub_10007EF58(a1);
    return (uint64_t)v3;
  }
  v15 = *(_QWORD *)(v29 + 8 * v17);
  if (v15)
  {
    v16 = v9 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v16 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v16 >= v28)
      goto LABEL_37;
    v15 = *(_QWORD *)(v29 + 8 * v16);
    ++v17;
    if (v15)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_10017DBD8(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _OWORD v34[2];
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  _OWORD v38[2];
  _OWORD v39[2];
  _OWORD v40[2];
  uint64_t v41;
  _OWORD v42[2];
  uint64_t v43;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_100063D3C(&qword_100348908);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v30 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v29 = (unint64_t)(63 - v4) >> 6;
  v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  result = swift_retain(v3);
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }
    v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v14 >= v29)
      goto LABEL_37;
    v15 = *(_QWORD *)(v30 + 8 * v14);
    v16 = v9 + 1;
    if (!v15)
    {
      v16 = v9 + 2;
      if (v9 + 2 >= v29)
        goto LABEL_37;
      v15 = *(_QWORD *)(v30 + 8 * v16);
      if (!v15)
      {
        v16 = v9 + 3;
        if (v9 + 3 >= v29)
          goto LABEL_37;
        v15 = *(_QWORD *)(v30 + 8 * v16);
        if (!v15)
        {
          v16 = v9 + 4;
          if (v9 + 4 >= v29)
            goto LABEL_37;
          v15 = *(_QWORD *)(v30 + 8 * v16);
          if (!v15)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v16 << 6);
    v9 = v16;
LABEL_28:
    v18 = *(void **)(*(_QWORD *)(a1 + 48) + 8 * v13);
    sub_100096CB0(*(_QWORD *)(a1 + 56) + 32 * v13, (uint64_t)v42 + 8);
    *(_QWORD *)&v42[0] = v18;
    v40[0] = v42[0];
    v40[1] = v42[1];
    v41 = v43;
    *(_QWORD *)&v39[0] = v18;
    type metadata accessor for CFString(0);
    v20 = v19;
    v21 = v18;
    swift_dynamicCast(&v31, v39, v20, &type metadata for AnyHashable, 7);
    sub_10006C2B4((_OWORD *)((char *)v40 + 8), v34);
    v35 = v31;
    v36 = v32;
    v37 = v33;
    sub_10006C2B4(v34, v38);
    v31 = v35;
    v32 = v36;
    v33 = v37;
    sub_10006C2B4(v38, v39);
    sub_10006C2B4(v39, &v35);
    result = AnyHashable._rawHashValue(seed:)(v3[5]);
    v22 = -1 << *((_BYTE *)v3 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)&v7[8 * (v23 >> 6)]) != 0)
    {
      v10 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)&v7[8 * (v23 >> 6)])) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)&v7[8 * v24];
      }
      while (v28 == -1);
      v10 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)&v7[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v10;
    v11 = v3[6] + 40 * v10;
    *(_OWORD *)v11 = v31;
    *(_OWORD *)(v11 + 16) = v32;
    *(_QWORD *)(v11 + 32) = v33;
    result = (uint64_t)sub_10006C2B4(&v35, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }
  v17 = v9 + 5;
  if (v9 + 5 >= v29)
  {
LABEL_37:
    swift_release(v3);
    sub_10007EF58(a1);
    return (uint64_t)v3;
  }
  v15 = *(_QWORD *)(v30 + 8 * v17);
  if (v15)
  {
    v16 = v9 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v16 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v16 >= v29)
      goto LABEL_37;
    v15 = *(_QWORD *)(v30 + 8 * v16);
    ++v17;
    if (v15)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_10017DF9C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  _QWORD v33[2];
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _OWORD v37[2];
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  _OWORD v41[2];
  _OWORD v42[2];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_100063D3C(&qword_100348908);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v32 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v31 = (unint64_t)(63 - v4) >> 6;
  v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  result = swift_retain(v3);
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }
    v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v14 >= v31)
      goto LABEL_37;
    v15 = *(_QWORD *)(v32 + 8 * v14);
    v16 = v9 + 1;
    if (!v15)
    {
      v16 = v9 + 2;
      if (v9 + 2 >= v31)
        goto LABEL_37;
      v15 = *(_QWORD *)(v32 + 8 * v16);
      if (!v15)
      {
        v16 = v9 + 3;
        if (v9 + 3 >= v31)
          goto LABEL_37;
        v15 = *(_QWORD *)(v32 + 8 * v16);
        if (!v15)
        {
          v16 = v9 + 4;
          if (v9 + 4 >= v31)
            goto LABEL_37;
          v15 = *(_QWORD *)(v32 + 8 * v16);
          if (!v15)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v16 << 6);
    v9 = v16;
LABEL_28:
    v18 = 16 * v13;
    v19 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v13);
    v20 = v19[1];
    v21 = (uint64_t *)(*(_QWORD *)(a1 + 56) + v18);
    v23 = *v21;
    v22 = v21[1];
    *(_QWORD *)&v42[0] = *v19;
    *((_QWORD *)&v42[0] + 1) = v20;
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v22);
    swift_dynamicCast(&v34, v42, &type metadata for String, &type metadata for AnyHashable, 7);
    v33[0] = v23;
    v33[1] = v22;
    swift_dynamicCast(v37, v33, &type metadata for String, (char *)&type metadata for Any + 8, 7);
    v38 = v34;
    v39 = v35;
    v40 = v36;
    sub_10006C2B4(v37, v41);
    v34 = v38;
    v35 = v39;
    v36 = v40;
    sub_10006C2B4(v41, v42);
    sub_10006C2B4(v42, &v38);
    result = AnyHashable._rawHashValue(seed:)(v3[5]);
    v24 = -1 << *((_BYTE *)v3 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)&v7[8 * (v25 >> 6)]) != 0)
    {
      v10 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)&v7[8 * (v25 >> 6)])) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)&v7[8 * v26];
      }
      while (v30 == -1);
      v10 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)&v7[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v10;
    v11 = v3[6] + 40 * v10;
    *(_OWORD *)v11 = v34;
    *(_OWORD *)(v11 + 16) = v35;
    *(_QWORD *)(v11 + 32) = v36;
    result = (uint64_t)sub_10006C2B4(&v38, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }
  v17 = v9 + 5;
  if (v9 + 5 >= v31)
  {
LABEL_37:
    swift_release(v3);
    sub_10007EF58(a1);
    return (uint64_t)v3;
  }
  v15 = *(_QWORD *)(v32 + 8 * v17);
  if (v15)
  {
    v16 = v9 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v16 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v16 >= v31)
      goto LABEL_37;
    v15 = *(_QWORD *)(v32 + 8 * v16);
    ++v17;
    if (v15)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_10017E358(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _QWORD __s1[9];

  if (*(_QWORD *)(a3 + 16))
  {
    Hasher.init(_seed:)(__s1);
    Data.hash(into:)(__s1, a1, a2);
    v6 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(a3 + 32));
    if (((*(_QWORD *)(a3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
      __asm { BR              X8 }
  }
  return 0;
}

BOOL sub_10017ED28(Swift::UInt a1, uint64_t a2)
{
  Swift::Int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD v13[9];

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  Hasher.init(_seed:)(v13);
  Hasher._combine(_:)(a1);
  v4 = Hasher._finalize()();
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = v4 & ~v5;
  v7 = a2 + 56;
  if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(v8 + 8 * v6) == a1)
    return 1;
  v10 = ~v5;
  v11 = (v6 + 1) & v10;
  if (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
    return 0;
  do
  {
    v12 = *(_QWORD *)(v8 + 8 * v11);
    result = v12 == a1;
    if (v12 == a1)
      break;
    v11 = (v11 + 1) & v10;
  }
  while (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

uint64_t sub_10017EE14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t result;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  _QWORD v20[9];

  if (*(_QWORD *)(a3 + 16))
  {
    Hasher.init(_seed:)(v20);
    String.hash(into:)(v20, a1, a2);
    v6 = Hasher._finalize()();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = v11[1];
      v13 = *v11 == a1 && v12 == a2;
      if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v11, v12, a1, a2, 0) & 1) != 0)
        return 1;
      v15 = ~v7;
      v16 = (v8 + 1) & v15;
      if (((*(_QWORD *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
      {
        while (1)
        {
          v17 = (_QWORD *)(v10 + 16 * v16);
          v18 = v17[1];
          v19 = *v17 == a1 && v18 == a2;
          if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
            break;
          result = 0;
          v16 = (v16 + 1) & v15;
          if (((*(_QWORD *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_10017EF48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, unint64_t, uint64_t);
  uint64_t v16;
  char v17;
  uint64_t v19;
  uint64_t v20;

  v4 = type metadata accessor for UUID(0);
  v20 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a2 + 16)
    && (v8 = *(_QWORD *)(a2 + 40),
        v9 = sub_1000C69C4((unint64_t *)&unk_100347730, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID), v10 = dispatch thunk of Hashable._rawHashValue(seed:)(v8, v4, v9), v11 = -1 << *(_BYTE *)(a2 + 32), v12 = v10 & ~v11, ((*(_QWORD *)(a2 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0))
  {
    v13 = ~v11;
    v14 = *(_QWORD *)(v20 + 72);
    v15 = *(void (**)(char *, unint64_t, uint64_t))(v20 + 16);
    do
    {
      v15(v7, *(_QWORD *)(a2 + 48) + v14 * v12, v4);
      v16 = sub_1000C69C4((unint64_t *)&qword_100346150, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v17 = dispatch thunk of static Equatable.== infix(_:_:)(v7, a1, v4, v16);
      (*(void (**)(char *, uint64_t))(v20 + 8))(v7, v4);
      if ((v17 & 1) != 0)
        break;
      v12 = (v12 + 1) & v13;
    }
    while (((*(_QWORD *)(a2 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0);
  }
  else
  {
    v17 = 0;
  }
  return v17 & 1;
}

void sub_10017F0D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[5];
  void *v36;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = sub_10006C25C(0, (unint64_t *)&qword_100347710, SEEndPoint_ptr);
    v5 = sub_10007EFD8();
    v6 = Set.Iterator.init(_cocoa:)(v35, v3, v4, v5);
    v1 = v35[0];
    v33 = v35[1];
    v7 = v35[2];
    v8 = v35[3];
    v9 = v35[4];
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v33 = a1 + 56;
    v11 = ~v10;
    v12 = -v10;
    if (v12 < 64)
      v13 = ~(-1 << v12);
    else
      v13 = -1;
    v9 = v13 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v7 = v11;
    v8 = 0;
  }
  v32 = (unint64_t)(v7 + 64) >> 6;
  if (v1 < 0)
    goto LABEL_13;
  while (1)
  {
    if (v9)
    {
      v14 = (v9 - 1) & v9;
      v15 = __clz(__rbit64(v9)) | (v8 << 6);
      v16 = v8;
      goto LABEL_32;
    }
    v21 = v8 + 1;
    if (__OFADD__(v8, 1))
      break;
    if (v21 >= v32)
      goto LABEL_35;
    v22 = *(_QWORD *)(v33 + 8 * v21);
    v16 = v8 + 1;
    if (!v22)
    {
      v16 = v8 + 2;
      if (v8 + 2 >= v32)
        goto LABEL_35;
      v22 = *(_QWORD *)(v33 + 8 * v16);
      if (!v22)
      {
        v16 = v8 + 3;
        if (v8 + 3 >= v32)
          goto LABEL_35;
        v22 = *(_QWORD *)(v33 + 8 * v16);
        if (!v22)
        {
          v16 = v8 + 4;
          if (v8 + 4 >= v32)
            goto LABEL_35;
          v22 = *(_QWORD *)(v33 + 8 * v16);
          if (!v22)
          {
            v16 = v8 + 5;
            if (v8 + 5 >= v32)
              goto LABEL_35;
            v22 = *(_QWORD *)(v33 + 8 * v16);
            if (!v22)
            {
              v23 = v8 + 6;
              while (v32 != v23)
              {
                v22 = *(_QWORD *)(v33 + 8 * v23++);
                if (v22)
                {
                  v16 = v23 - 1;
                  goto LABEL_31;
                }
              }
LABEL_35:
              sub_10007EF58(v1);
              return;
            }
          }
        }
      }
    }
LABEL_31:
    v14 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v16 << 6);
LABEL_32:
    v20 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v15);
    if (!v20)
      goto LABEL_35;
    while (1)
    {
      v24 = objc_msgSend(v20, "appletIdentifier");
      v25 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v24);
      v27 = v26;

      v28 = objc_msgSend(v20, "publicKeyIdentifier");
      v29 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v28);
      v31 = v30;

      sub_1001F119C(0xD00000000000003BLL, 0x80000001002BF040, v25, v27, v29, v31, 0);
      sub_100063CD0(v29, v31);
      sub_100063CD0(v25, v27);

      v8 = v16;
      v9 = v14;
      if ((v1 & 0x8000000000000000) == 0)
        break;
LABEL_13:
      v17 = __CocoaSet.Iterator.next()(v6);
      if (v17)
      {
        v18 = v17;
        v34 = v17;
        v19 = sub_10006C25C(0, (unint64_t *)&qword_100347710, SEEndPoint_ptr);
        swift_unknownObjectRetain(v18);
        swift_dynamicCast(&v36, &v34, (char *)&type metadata for Swift.AnyObject + 8, v19, 7);
        v20 = v36;
        swift_unknownObjectRelease(v18);
        v16 = v8;
        v14 = v9;
        if (v20)
          continue;
      }
      goto LABEL_35;
    }
  }
  __break(1u);
}

void sub_10017F440(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t inited;
  unint64_t v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  char v42[80];
  _QWORD v43[6];
  void *v44;

  v2 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v3 = a1;
    else
      v3 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v4 = __CocoaSet.makeIterator()(v3);
    v5 = sub_10006C25C(0, (unint64_t *)&qword_100347710, SEEndPoint_ptr);
    v6 = sub_10007EFD8();
    v7 = Set.Iterator.init(_cocoa:)(v43, v4, v5, v6);
    v2 = v43[0];
    v38 = v43[1];
    v8 = v43[2];
    v9 = v43[3];
    v10 = v43[4];
  }
  else
  {
    v11 = -1 << *(_BYTE *)(a1 + 32);
    v38 = a1 + 56;
    v12 = ~v11;
    v13 = -v11;
    if (v13 < 64)
      v14 = ~(-1 << v13);
    else
      v14 = -1;
    v10 = v14 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v8 = v12;
    v9 = 0;
  }
  v37 = (unint64_t)(v8 + 64) >> 6;
  v39 = v2;
  if (v2 < 0)
    goto LABEL_13;
  while (1)
  {
    if (v10)
    {
      v15 = (v10 - 1) & v10;
      v16 = __clz(__rbit64(v10)) | (v9 << 6);
      v17 = v9;
      goto LABEL_32;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
      break;
    if (v22 >= v37)
      goto LABEL_35;
    v23 = *(_QWORD *)(v38 + 8 * v22);
    v17 = v9 + 1;
    if (!v23)
    {
      v17 = v9 + 2;
      if (v9 + 2 >= v37)
        goto LABEL_35;
      v23 = *(_QWORD *)(v38 + 8 * v17);
      if (!v23)
      {
        v17 = v9 + 3;
        if (v9 + 3 >= v37)
          goto LABEL_35;
        v23 = *(_QWORD *)(v38 + 8 * v17);
        if (!v23)
        {
          v17 = v9 + 4;
          if (v9 + 4 >= v37)
            goto LABEL_35;
          v23 = *(_QWORD *)(v38 + 8 * v17);
          if (!v23)
          {
            v17 = v9 + 5;
            if (v9 + 5 >= v37)
              goto LABEL_35;
            v23 = *(_QWORD *)(v38 + 8 * v17);
            if (!v23)
            {
              v24 = v9 + 6;
              while (v37 != v24)
              {
                v23 = *(_QWORD *)(v38 + 8 * v24++);
                if (v23)
                {
                  v17 = v24 - 1;
                  goto LABEL_31;
                }
              }
LABEL_35:
              sub_10007EF58(v2);
              return;
            }
          }
        }
      }
    }
LABEL_31:
    v15 = (v23 - 1) & v23;
    v16 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_32:
    v21 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * v16);
    if (!v21)
      goto LABEL_35;
    while (1)
    {
      v25 = objc_msgSend(v21, "appletIdentifier");
      v26 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v25);
      v28 = v27;

      v29 = objc_msgSend(v21, "publicKeyIdentifier");
      v30 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v29);
      v32 = v31;

      v33 = sub_100063D3C((uint64_t *)&unk_100346040);
      inited = swift_initStackObject(v33, v42);
      *(_OWORD *)(inited + 16) = xmmword_1002888E0;
      v9 = v17;
      *(_QWORD *)(inited + 32) = 0xD000000000000018;
      *(_QWORD *)(inited + 40) = 0x80000001002BEF40;
      *(_QWORD *)(inited + 72) = &type metadata for UInt;
      *(_QWORD *)(inited + 48) = a2;
      v35 = sub_10017C218(inited);
      sub_1001F119C(0xD00000000000003CLL, 0x80000001002BF080, v26, v28, v30, v32, v35);
      swift_bridgeObjectRelease(v35);
      v36 = v32;
      v2 = v39;
      sub_100063CD0(v30, v36);
      sub_100063CD0(v26, v28);

      v10 = v15;
      if ((v39 & 0x8000000000000000) == 0)
        break;
LABEL_13:
      v18 = __CocoaSet.Iterator.next()(v7);
      if (v18)
      {
        v19 = v18;
        v41 = v18;
        v20 = sub_10006C25C(0, (unint64_t *)&qword_100347710, SEEndPoint_ptr);
        swift_unknownObjectRetain(v19);
        swift_dynamicCast(&v44, &v41, (char *)&type metadata for Swift.AnyObject + 8, v20, 7);
        v21 = v44;
        swift_unknownObjectRelease(v19);
        v17 = v9;
        v15 = v10;
        if (v21)
          continue;
      }
      goto LABEL_35;
    }
  }
  __break(1u);
}

void sub_10017F820(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[5];
  void *v28;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = type metadata accessor for UWBSession();
    v6 = sub_1000C69C4((unint64_t *)&qword_100345828, v5, (uint64_t (*)(uint64_t))type metadata accessor for UWBSession, (uint64_t)&protocol conformance descriptor for NSObject);
    v7 = Set.Iterator.init(_cocoa:)(v27, v3, v4, v6);
    v1 = v27[0];
    v25 = v27[1];
    v8 = v27[2];
    v9 = v27[3];
    v10 = v27[4];
  }
  else
  {
    v11 = -1 << *(_BYTE *)(a1 + 32);
    v25 = a1 + 56;
    v8 = ~v11;
    v12 = -v11;
    if (v12 < 64)
      v13 = ~(-1 << v12);
    else
      v13 = -1;
    v10 = v13 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v9 = 0;
  }
  v14 = (unint64_t)(v8 + 64) >> 6;
  if (v1 < 0)
    goto LABEL_13;
  while (1)
  {
    if (v10)
    {
      v15 = (v10 - 1) & v10;
      v16 = __clz(__rbit64(v10)) | (v9 << 6);
      v17 = v9;
      goto LABEL_32;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
      break;
    if (v22 >= v14)
      goto LABEL_35;
    v23 = *(_QWORD *)(v25 + 8 * v22);
    v17 = v9 + 1;
    if (!v23)
    {
      v17 = v9 + 2;
      if (v9 + 2 >= v14)
        goto LABEL_35;
      v23 = *(_QWORD *)(v25 + 8 * v17);
      if (!v23)
      {
        v17 = v9 + 3;
        if (v9 + 3 >= v14)
          goto LABEL_35;
        v23 = *(_QWORD *)(v25 + 8 * v17);
        if (!v23)
        {
          v17 = v9 + 4;
          if (v9 + 4 >= v14)
            goto LABEL_35;
          v23 = *(_QWORD *)(v25 + 8 * v17);
          if (!v23)
          {
            v17 = v9 + 5;
            if (v9 + 5 >= v14)
              goto LABEL_35;
            v23 = *(_QWORD *)(v25 + 8 * v17);
            if (!v23)
            {
              v24 = v9 + 6;
              while (v14 != v24)
              {
                v23 = *(_QWORD *)(v25 + 8 * v24++);
                if (v23)
                {
                  v17 = v24 - 1;
                  goto LABEL_31;
                }
              }
LABEL_35:
              sub_10007EF58(v1);
              return;
            }
          }
        }
      }
    }
LABEL_31:
    v15 = (v23 - 1) & v23;
    v16 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_32:
    v21 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v16);
    if (!v21)
      goto LABEL_35;
    while (1)
    {
      sub_100184FC8();

      v9 = v17;
      v10 = v15;
      if ((v1 & 0x8000000000000000) == 0)
        break;
LABEL_13:
      v18 = __CocoaSet.Iterator.next()(v7);
      if (v18)
      {
        v19 = v18;
        v26 = v18;
        v20 = type metadata accessor for UWBSession();
        swift_unknownObjectRetain(v19);
        swift_dynamicCast(&v28, &v26, (char *)&type metadata for Swift.AnyObject + 8, v20, 7);
        v21 = v28;
        swift_unknownObjectRelease(v19);
        v17 = v9;
        v15 = v10;
        if (v21)
          continue;
      }
      goto LABEL_35;
    }
  }
  __break(1u);
}

void sub_10017FAB4(Swift::UInt a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  os_log_type_t v34;
  uint8_t *v35;
  id v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40[5];

  v3 = v2;
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (uint64_t *)((char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v11 = qword_100354EE8;
  *v10 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  v12 = (id)v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v10);
  v13 = (*(uint64_t (**)(_QWORD *, uint64_t))(v7 + 8))(v10, v6);
  if ((v11 & 1) == 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (*(_BYTE *)(v3 + OBJC_IVAR____TtC10seserviced6DSKUWB_isRunning) != 1)
  {
    v25 = Logger.logObject.getter(v13);
    v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Not running", v27, 2u);
      swift_slowDealloc(v27, -1, -1);
    }
    goto LABEL_18;
  }
  swift_beginAccess(v3 + OBJC_IVAR____TtC10seserviced6DSKUWB_activeUseCases, v40, 33, 0);
  v14 = sub_1000C7394((Swift::UInt *)&v38, a1);
  v15 = swift_endAccess(v40);
  if ((v14 & 1) == 0)
    return;
  v16 = Logger.logObject.getter(v15);
  v20 = static os_log_type_t.info.getter(v16, v17, v18, v19);
  if (os_log_type_enabled(v16, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(12, -1);
    v22 = swift_slowAlloc(32, -1);
    v40[0] = v22;
    *(_DWORD *)v21 = 136315138;
    if (!a1)
    {
      v23 = 0xE600000000000000;
      v24 = 0x616873696C41;
LABEL_13:
      v38 = sub_1001C56EC(v24, v23, v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v21 + 4, v21 + 12);
      swift_bridgeObjectRelease(v23);
      _os_log_impl((void *)&_mh_execute_header, v16, v20, "UWB power assertion added for %s", v21, 0xCu);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);
      goto LABEL_14;
    }
    if (a1 == 1)
    {
      v23 = 0xE400000000000000;
      v24 = 1852799308;
      goto LABEL_13;
    }
LABEL_21:
    v38 = a1;
    _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for DSK.Module, &v38, &type metadata for DSK.Module, &type metadata for Int);
    __break(1u);
    return;
  }
LABEL_14:

  sub_1000E4E48(a2, (uint64_t)v40, &qword_100345390);
  swift_beginAccess(v3 + OBJC_IVAR____TtC10seserviced6DSKUWB_delegates, &v38, 33, 0);
  sub_10017BFB4((uint64_t)v40, a1);
  v28 = swift_endAccess(&v38);
  v29 = OBJC_IVAR____TtC10seserviced6DSKUWB_uwbPowerAssertion;
  if (*(_QWORD *)(v3 + OBJC_IVAR____TtC10seserviced6DSKUWB_uwbPowerAssertion))
    return;
  v30 = Logger.logObject.getter(v28);
  v34 = static os_log_type_t.info.getter(v30, v31, v32, v33);
  if (os_log_type_enabled(v30, v34))
  {
    v35 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v35 = 0;
    _os_log_impl((void *)&_mh_execute_header, v30, v34, "Powering on UWB", v35, 2u);
    swift_slowDealloc(v35, -1, -1);
  }

  v36 = objc_allocWithZone((Class)type metadata accessor for UWBPrewarmSession());
  swift_retain_n(v3, 4);
  v37 = sub_100187338((uint64_t)sub_10019A190, v3, (uint64_t)sub_10019A174, v3, (uint64_t)sub_10019A17C, v3, (uint64_t)sub_10019A178, v3);
  v25 = *(NSObject **)(v3 + v29);
  *(_QWORD *)(v3 + v29) = v37;
LABEL_18:

}

void *sub_10017FEE0(uint64_t a1)
{
  return sub_10017FEF8(a1, sub_1001942D8);
}

void *sub_10017FEEC(uint64_t a1)
{
  return sub_10017FEF8(a1, sub_1001944F4);
}

void *sub_10017FEF8(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  id v10;
  void *result;
  _QWORD *v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  os_log_type_t v16;
  uint8_t *v17;
  _BYTE v19[24];

  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = &v19[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v9 = qword_100354EE8;
  *v8 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  result = (void *)(*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) != 0)
  {
    if (*(_BYTE *)(a1 + OBJC_IVAR____TtC10seserviced6DSKUWB_isRunning) == 1)
    {
      v12 = (_QWORD *)(a1 + OBJC_IVAR____TtC10seserviced6DSKUWB_activeSessions);
      swift_beginAccess(v12, v19, 0, 0);
      v13 = swift_bridgeObjectRetain(*v12);
      return (void *)a2(v13);
    }
    else
    {
      v14 = Logger.logObject.getter(result);
      v16 = static os_log_type_t.error.getter(v14, v15);
      if (os_log_type_enabled(v14, v16))
      {
        v17 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v17 = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, v16, "Not running", v17, 2u);
        swift_slowDealloc(v17, -1, -1);
      }

      return &_swiftEmptySetSingleton;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *sub_1001800A8(uint64_t (*a1)(id))
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;
  void *result;
  _QWORD *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  os_log_type_t v15;
  uint8_t *v16;
  _BYTE v18[24];

  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = &v18[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v8 = qword_100354EE8;
  *v7 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  v9 = (id)v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  result = (void *)(*(uint64_t (**)(_QWORD *, uint64_t))(v4 + 8))(v7, v3);
  if ((v8 & 1) != 0)
  {
    if (*(_BYTE *)(v1 + OBJC_IVAR____TtC10seserviced6DSKUWB_isRunning) == 1)
    {
      v11 = (_QWORD *)(v1 + OBJC_IVAR____TtC10seserviced6DSKUWB_activeSessions);
      swift_beginAccess(v11, v18, 0, 0);
      swift_bridgeObjectRetain(*v11);
      return (void *)sub_1001986C0(v12, a1);
    }
    else
    {
      v13 = Logger.logObject.getter(result);
      v15 = static os_log_type_t.error.getter(v13, v14);
      if (os_log_type_enabled(v13, v15))
      {
        v16 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v16 = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, v15, "Not running", v16, 2u);
        swift_slowDealloc(v16, -1, -1);
      }

      return &_swiftEmptySetSingleton;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100180268(Swift::UInt a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  void (*v11)(_QWORD *, uint64_t, uint64_t);
  id v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  unint64_t v19;
  char v20;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  os_log_type_t v32;
  uint8_t *v33;
  void *v34;
  void *v35;
  char *v36;
  id v37;
  char v38;
  void *v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint8_t *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  Swift::UInt v51;
  uint64_t v52;
  uint64_t v53;
  _OWORD v54[2];
  uint64_t v55;

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD **)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (uint64_t *)((char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v9 = (void *)qword_100354EE8;
  *v8 = qword_100354EE8;
  v10 = enum case for DispatchPredicate.onQueue(_:);
  v11 = (void (*)(_QWORD *, uint64_t, uint64_t))v5[13];
  v11(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  v12 = v9;
  v13 = _dispatchPreconditionTest(_:)(v8);
  v14 = (uint64_t *)v5[1];
  v15 = ((uint64_t (*)(_QWORD *, uint64_t))v14)(v8, v4);
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_30:
    sub_1001903B4();
    v22 = v52;
    goto LABEL_9;
  }
  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC10seserviced6DSKUWB_isRunning) != 1)
  {
    v40 = Logger.logObject.getter(v15);
    v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Not running", v42, 2u);
      v43 = v42;
LABEL_24:
      swift_slowDealloc(v43, -1, -1);
    }
LABEL_25:

    return;
  }
  v16 = OBJC_IVAR____TtC10seserviced6DSKUWB_uwbPowerAssertion;
  if (!*(_QWORD *)(v2 + OBJC_IVAR____TtC10seserviced6DSKUWB_uwbPowerAssertion)
    || (v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC10seserviced6DSKUWB_activeUseCases),
        swift_beginAccess(v2 + OBJC_IVAR____TtC10seserviced6DSKUWB_activeUseCases, v54, 33, 0),
        sub_1000D354C(a1),
        v18 = v17,
        v15 = swift_endAccess(v54),
        (v18 & 1) != 0))
  {
    v40 = Logger.logObject.getter(v15);
    v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc(12, -1);
      v46 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v54[0] = v46;
      *(_DWORD *)v45 = 136315138;
      if (a1)
      {
        if (a1 != 1)
        {
LABEL_32:
          v52 = a1;
          _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for DSK.Module, &v52, &type metadata for DSK.Module, &type metadata for Int);
          __break(1u);
          return;
        }
        v47 = 0xE400000000000000;
        v48 = 1852799308;
      }
      else
      {
        v47 = 0xE600000000000000;
        v48 = 0x616873696C41;
      }
      v52 = sub_1001C56EC(v48, v47, (uint64_t *)v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v45 + 4, v45 + 12);
      swift_bridgeObjectRelease(v47);
      _os_log_impl((void *)&_mh_execute_header, v40, v44, "UWB is not powered on for %s", v45, 0xCu);
      swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      v43 = v45;
      goto LABEL_24;
    }
    goto LABEL_25;
  }
  v50 = v14;
  v14 = (uint64_t *)(v2 + OBJC_IVAR____TtC10seserviced6DSKUWB_activeExceptions);
  swift_beginAccess(v2 + OBJC_IVAR____TtC10seserviced6DSKUWB_activeExceptions, v54, 33, 0);
  v51 = a1;
  v19 = sub_100187EE4(a1);
  if ((v20 & 1) == 0)
    goto LABEL_10;
  v13 = v19;
  v49 = v16;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v14);
  v22 = *v14;
  v52 = *v14;
  *v14 = 0x8000000000000000;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_30;
LABEL_9:
  sub_10012F474(v13, v22);
  v23 = *v14;
  *v14 = v22;
  swift_bridgeObjectRelease(v23);
  v16 = v49;
LABEL_10:
  swift_endAccess(v54);
  v55 = 0;
  memset(v54, 0, sizeof(v54));
  swift_beginAccess(v2 + OBJC_IVAR____TtC10seserviced6DSKUWB_delegates, &v52, 33, 0);
  sub_10017BFB4((uint64_t)v54, v51);
  swift_endAccess(&v52);
  v24 = v50;
  if (!*(_QWORD *)(*v5 + 16))
  {
    v25 = (uint64_t *)(v2 + OBJC_IVAR____TtC10seserviced6DSKUWB_rangingLimitExceeded);
    swift_beginAccess(v2 + OBJC_IVAR____TtC10seserviced6DSKUWB_rangingLimitExceeded, v54, 1, 0);
    v26 = *v25;
    *v25 = (uint64_t)&_swiftEmptySetSingleton;
    v27 = swift_bridgeObjectRelease(v26);
    v28 = Logger.logObject.getter(v27);
    v32 = static os_log_type_t.info.getter(v28, v29, v30, v31);
    a1 = v32;
    if (os_log_type_enabled(v28, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, (os_log_type_t)a1, "Powering off UWB", v33, 2u);
      swift_slowDealloc(v33, -1, -1);
    }

    v34 = *(void **)(v2 + v16);
    if (!v34)
    {
      v39 = 0;
      goto LABEL_28;
    }
    v35 = (void *)qword_100354EE8;
    *v8 = qword_100354EE8;
    v11(v8, v10, v4);
    v36 = v34;
    v37 = v35;
    v38 = _dispatchPreconditionTest(_:)(v8);
    ((void (*)(_QWORD *, uint64_t))v24)(v8, v4);
    if ((v38 & 1) != 0)
    {
      objc_msgSend(*(id *)&v36[OBJC_IVAR____TtC10seservicedP33_4D3BC54BA96E8438A66520691EE354E617UWBPrewarmSession_session], "invalidate");

      v39 = *(void **)(v2 + v16);
LABEL_28:
      *(_QWORD *)(v2 + v16) = 0;

      return;
    }
    __break(1u);
    goto LABEL_32;
  }
}

void sub_100180788(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  id v15;
  NSData v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  os_log_type_t v21;
  uint8_t *v22;
  _QWORD aBlock[5];
  uint64_t v24;

  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (_QWORD *)((char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v12 = qword_100354EE8;
  *v11 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v7);
  v13 = (id)v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v11);
  v14 = (*(uint64_t (**)(_QWORD *, uint64_t))(v8 + 8))(v11, v7);
  if ((v12 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    v14 = swift_once(&qword_100344690, sub_100182BE4);
    goto LABEL_7;
  }
  if (*(_BYTE *)(v4 + OBJC_IVAR____TtC10seserviced10UWBSession_state) == 4)
  {
    v15 = *(id *)(v4 + OBJC_IVAR____TtC10seserviced10UWBSession_session);
    v16.super.isa = Data._bridgeToObjectiveC()().super.isa;
    v17 = swift_allocObject(&unk_10030BB00, 32, 7);
    *(_QWORD *)(v17 + 16) = a3;
    *(_QWORD *)(v17 + 24) = a4;
    aBlock[4] = sub_100199224;
    v24 = v17;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100185E90;
    aBlock[3] = &unk_10030BB18;
    v18 = _Block_copy(aBlock);
    v19 = v24;
    swift_retain(a4);
    swift_release(v19);
    objc_msgSend(v15, "processDCKMessage:responseCallback:", v16.super.isa, v18);
    _Block_release(v18);

    goto LABEL_9;
  }
  if (qword_100344690 != -1)
    goto LABEL_11;
LABEL_7:
  v16.super.isa = (Class)Logger.logObject.getter(v14);
  v21 = static os_log_type_t.error.getter(v16.super.isa, v20);
  if (os_log_type_enabled((os_log_t)v16.super.isa, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v16.super.isa, v21, "Session is not running", v22, 2u);
    swift_slowDealloc(v22, -1, -1);
  }
LABEL_9:

}

uint64_t sub_100180A00(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  id v23;
  uint64_t result;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  os_log_type_t v34;
  _BOOL4 v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  os_log_type_t v43;
  uint8_t *v44;
  unint64_t v45;
  ValueMetadata *v46;
  uint64_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint8_t *v55;
  uint64_t v56;
  _BYTE *v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint8_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81[3];
  char v82[32];
  id v83;
  uint64_t v84;

  v79 = a5;
  v80 = a6;
  v77 = a3;
  v78 = a4;
  v76 = a2;
  v17 = type metadata accessor for DispatchPredicate(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17, v19);
  v21 = (uint64_t *)((char *)&v66 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v22 = qword_100354EE8;
  *v21 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v18 + 104))(v21, enum case for DispatchPredicate.onQueue(_:), v17);
  v23 = (id)v22;
  LOBYTE(v22) = _dispatchPreconditionTest(_:)(v21);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v18 + 8))(v21, v17);
  if ((v22 & 1) != 0)
  {
    if (*(_BYTE *)(v13 + OBJC_IVAR____TtC10seserviced6DSKUWB_isRunning) == 1)
    {
      v75 = a7;
      v25 = (uint64_t *)(v13 + OBJC_IVAR____TtC10seserviced6DSKUWB_activeSessions);
      swift_beginAccess(v13 + OBJC_IVAR____TtC10seserviced6DSKUWB_activeSessions, v82, 0, 0);
      v26 = *v25;
      swift_retain(a1);
      v27 = swift_bridgeObjectRetain(v26);
      v28 = sub_100197CC8(v27, (uint64_t)a1);
      swift_bridgeObjectRelease(v26);
      swift_release(a1);
      v29 = swift_retain_n(a1, 2);
      v30 = Logger.logObject.getter(v29);
      v34 = static os_log_type_t.info.getter(v30, v31, v32, v33);
      v35 = os_log_type_enabled(v30, v34);
      if ((v28 & 1) == 0)
      {
        v73 = a12;
        v74 = a13;
        v71 = a10;
        v72 = a11;
        v70 = a9;
        if (v35)
        {
          v47 = swift_slowAlloc(12, -1);
          v69 = a8;
          v48 = (uint8_t *)v47;
          v49 = swift_slowAlloc(32, -1);
          v68 = v49;
          *(_DWORD *)v48 = 136315138;
          v81[0] = v49;
          v67 = v48 + 4;
          v50 = swift_retain(a1);
          v51 = UUID.uuidString.getter(v50);
          v53 = v52;
          swift_release(a1);
          v83 = (id)sub_1001C56EC(v51, v53, v81);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v67, v48 + 12);
          swift_release_n(a1, 2);
          swift_bridgeObjectRelease(v53);
          _os_log_impl((void *)&_mh_execute_header, v30, v34, "Starting new UWB Alisha session for %s", v48, 0xCu);
          v54 = v68;
          swift_arrayDestroy(v68, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v54, -1, -1);
          v55 = v48;
          a8 = v69;
          swift_slowDealloc(v55, -1, -1);
        }
        else
        {
          swift_release_n(a1, 2);
        }

        v58 = objc_allocWithZone((Class)type metadata accessor for UWBAlishaSession());
        swift_retain(a1);
        v59 = v77;
        swift_retain(v77);
        v60 = v79;
        swift_retain(v79);
        v61 = v75;
        swift_retain(v75);
        v62 = v70;
        swift_retain(v70);
        v63 = v72;
        swift_retain(v72);
        v64 = swift_retain(v74);
        v65 = (void *)sub_100185424((uint64_t)a1, v76, v59, v78, v60, v80, v61, a8, v62, v71, v63, v73, v64);
        swift_beginAccess(v25, v81, 33, 0);
        a1 = v65;
        sub_1000C8778((Swift::Int *)&v83, a1);
        swift_endAccess(v81);

        return (uint64_t)a1;
      }
      if (v35)
      {
        v36 = (uint8_t *)swift_slowAlloc(12, -1);
        v37 = swift_slowAlloc(32, -1);
        *(_DWORD *)v36 = 136315138;
        v81[0] = v37;
        v38 = swift_retain(a1);
        v39 = UUID.uuidString.getter(v38);
        v41 = v40;
        swift_release(a1);
        v83 = (id)sub_1001C56EC(v39, v41, v81);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v36 + 4, v36 + 12);
        swift_release_n(a1, 2);
        swift_bridgeObjectRelease(v41);
        _os_log_impl((void *)&_mh_execute_header, v30, v34, "UWB Alisha session for %s already exists", v36, 0xCu);
        swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v37, -1, -1);
        swift_slowDealloc(v36, -1, -1);
      }
      else
      {
        swift_release_n(a1, 2);
      }

      v45 = sub_100198900();
      v46 = &type metadata for DSKUWB.UWBError;
    }
    else
    {
      a1 = Logger.logObject.getter(result);
      v43 = static os_log_type_t.error.getter(a1, v42);
      if (os_log_type_enabled(a1, v43))
      {
        v44 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v44 = 0;
        _os_log_impl((void *)&_mh_execute_header, a1, v43, "Not running", v44, 2u);
        swift_slowDealloc(v44, -1, -1);
      }

      v45 = sub_10006B828();
      v46 = &type metadata for DSKError;
    }
    v56 = swift_allocError(v46, v45, 0, 0);
    *v57 = 1;
    swift_willThrow(v56);
    return (uint64_t)a1;
  }
  __break(1u);
  return result;
}

void sub_100180FBC(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  id v13;
  _BYTE *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = v2;
  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (uint64_t *)((char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v12 = qword_100354EE8;
  *v11 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v7);
  v13 = (id)v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v11);
  (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(v11, v7);
  if ((v12 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    swift_once(&qword_100344690, sub_100182BE4);
    goto LABEL_7;
  }
  v3 = OBJC_IVAR____TtC10seserviced10UWBSession_state;
  if (v4[OBJC_IVAR____TtC10seserviced10UWBSession_state] == 4)
  {
    objc_msgSend(*(id *)&v4[OBJC_IVAR____TtC10seserviced10UWBSession_session], "suspendAcwgRanging:withSuspendTriggerReason:", a1, a2);
    return;
  }
  if (qword_100344690 != -1)
    goto LABEL_11;
LABEL_7:
  v14 = v4;
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = swift_slowAlloc(32, -1);
    *(_DWORD *)v17 = 136315138;
    v23 = v18;
    LOBYTE(v22) = v4[v3];
    v19 = String.init<A>(describing:)(&v22, &type metadata for UWBSession.State);
    v21 = v20;
    v22 = sub_1001C56EC(v19, v20, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v17 + 4, v17 + 12);

    swift_bridgeObjectRelease(v21);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "UWB session is in %s, not suspending ranging", v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {

  }
}

void sub_100181254()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;

  v1 = type metadata accessor for DispatchPredicate(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  v5 = (uint64_t *)((char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v6 = qword_100354EE8;
  *v5 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v1);
  v7 = (id)v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v5);
  v8 = (*(uint64_t (**)(_QWORD *, uint64_t))(v2 + 8))(v5, v1);
  if ((v6 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    v8 = swift_once(&qword_100344690, sub_100182BE4);
    goto LABEL_6;
  }
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC10seserviced10UWBSession_state) != 1)
  {
    v9 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                                           + OBJC_IVAR____TtC10seserviced10UWBSession_session), "deleteURSKs"));
    goto LABEL_9;
  }
  if (qword_100344690 != -1)
    goto LABEL_11;
LABEL_6:
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Session is invalidated, not deleting URSK", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }
LABEL_9:

}

id sub_100181414(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  NSObject *v14;
  uint64_t v15;
  os_log_type_t v16;
  uint8_t *v17;
  unint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;

  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (uint64_t *)((char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v10 = qword_100354EE8;
  *v9 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5);
  v11 = (id)v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  v12 = (*(uint64_t (**)(_QWORD *, uint64_t))(v6 + 8))(v9, v5);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    v12 = swift_once(&qword_100344690, sub_100182BE4);
    goto LABEL_7;
  }
  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC10seserviced10UWBSession_state) == 4)
    return objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC10seserviced10UWBSession_session), "processAcwgM1Msg:withSessionTriggerReason:", a1, a2);
  if (qword_100344690 != -1)
    goto LABEL_11;
LABEL_7:
  v14 = Logger.logObject.getter(v12);
  v16 = static os_log_type_t.error.getter(v14, v15);
  if (os_log_type_enabled(v14, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v16, "Session is not running", v17, 2u);
    swift_slowDealloc(v17, -1, -1);
  }

  v18 = sub_10006B828();
  v19 = swift_allocError(&type metadata for DSKError, v18, 0, 0);
  *v20 = 0;
  return (id)swift_willThrow(v19);
}

id sub_100181614(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  NSObject *v12;
  uint64_t v13;
  os_log_type_t v14;
  uint8_t *v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;

  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (uint64_t *)((char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v8 = qword_100354EE8;
  *v7 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  v9 = (id)v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  v10 = (*(uint64_t (**)(_QWORD *, uint64_t))(v4 + 8))(v7, v3);
  if ((v8 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    v10 = swift_once(&qword_100344690, sub_100182BE4);
    goto LABEL_7;
  }
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC10seserviced10UWBSession_state) == 4)
    return objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC10seserviced10UWBSession_session), "processAcwgM3Msg:", a1);
  if (qword_100344690 != -1)
    goto LABEL_11;
LABEL_7:
  v12 = Logger.logObject.getter(v10);
  v14 = static os_log_type_t.error.getter(v12, v13);
  if (os_log_type_enabled(v12, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v14, "Session is not running", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }

  v16 = sub_10006B828();
  v17 = swift_allocError(&type metadata for DSKError, v16, 0, 0);
  *v18 = 0;
  return (id)swift_willThrow(v17);
}

id sub_10018180C(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  id v13;
  _BYTE *v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = v2;
  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (uint64_t *)((char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v12 = qword_100354EE8;
  *v11 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v7);
  v13 = (id)v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v11);
  (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(v11, v7);
  if ((v12 & 1) == 0)
  {
    __break(1u);
LABEL_12:
    swift_once(&qword_100344690, sub_100182BE4);
    goto LABEL_7;
  }
  v3 = OBJC_IVAR____TtC10seserviced10UWBSession_state;
  if (v4[OBJC_IVAR____TtC10seserviced10UWBSession_state] == 4)
    return objc_msgSend(*(id *)&v4[OBJC_IVAR____TtC10seserviced10UWBSession_session], "processAcwgRangingSessionResumeRequestMsg:withResumeTriggerReason:", a1, a2);
  if (qword_100344690 != -1)
    goto LABEL_12;
LABEL_7:
  v15 = v4;
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(12, -1);
    v19 = swift_slowAlloc(32, -1);
    *(_DWORD *)v18 = 136315138;
    v29 = v19;
    LOBYTE(v27) = v4[v3];
    v20 = String.init<A>(describing:)(&v27, &type metadata for UWBSession.State);
    v22 = v21;
    v27 = sub_1001C56EC(v20, v21, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v18 + 4, v18 + 12);

    swift_bridgeObjectRelease(v22);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "UWB session is in %s, not requesting resume ranging", v18, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);

  }
  else
  {

  }
  v23 = sub_10006B828();
  v24 = swift_allocError(&type metadata for DSKError, v23, 0, 0);
  *v25 = 0;
  return (id)swift_willThrow(v24);
}

uint64_t sub_100181AD8(NSObject *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v28;
  uint64_t v29;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  id v39;
  uint64_t result;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  os_log_type_t v50;
  _BOOL4 v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  os_log_type_t v59;
  uint8_t *v60;
  unint64_t v61;
  ValueMetadata *v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110[3];
  char v111[8];
  id v112;
  uint64_t v113;

  v108 = a4;
  v109 = a6;
  v106 = a3;
  v107 = a5;
  v105 = a2;
  v33 = type metadata accessor for DispatchPredicate(0);
  v34 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33, v35);
  v37 = (uint64_t *)((char *)&v81 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v38 = qword_100354EE8;
  *v37 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v34 + 104))(v37, enum case for DispatchPredicate.onQueue(_:), v33);
  v39 = (id)v38;
  LOBYTE(v38) = _dispatchPreconditionTest(_:)(v37);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v34 + 8))(v37, v33);
  if ((v38 & 1) != 0)
  {
    if (*(_BYTE *)(v28 + OBJC_IVAR____TtC10seserviced6DSKUWB_isRunning) == 1)
    {
      v103 = a7;
      v104 = a8;
      v41 = (_QWORD *)(v28 + OBJC_IVAR____TtC10seserviced6DSKUWB_activeSessions);
      swift_beginAccess(v28 + OBJC_IVAR____TtC10seserviced6DSKUWB_activeSessions, v111, 0, 0);
      v42 = *v41;
      swift_retain(a1);
      swift_bridgeObjectRetain(v42);
      v44 = sub_100197CC8(v43, (uint64_t)a1);
      swift_bridgeObjectRelease(v42);
      swift_release(a1);
      v45 = swift_retain_n(a1, 2);
      v46 = Logger.logObject.getter(v45);
      v50 = static os_log_type_t.info.getter(v46, v47, v48, v49);
      v51 = os_log_type_enabled(v46, v50);
      if ((v44 & 1) == 0)
      {
        v84 = v29;
        v94 = v41;
        v101 = a27;
        v102 = a28;
        v99 = a25;
        v100 = a26;
        v97 = a23;
        v98 = a24;
        v95 = a21;
        v96 = a22;
        v92 = a20;
        v93 = a19;
        v90 = a18;
        v91 = a17;
        v88 = a16;
        v89 = a15;
        v86 = a14;
        v87 = a13;
        v81 = a12;
        v85 = a11;
        v83 = a9;
        if (v51)
        {
          v63 = (uint8_t *)swift_slowAlloc(12, -1);
          v64 = swift_slowAlloc(32, -1);
          *(_DWORD *)v63 = 136315138;
          v110[0] = v64;
          v82 = v63 + 4;
          v65 = swift_retain(a1);
          v66 = UUID.uuidString.getter(v65);
          v68 = v67;
          swift_release(a1);
          v112 = (id)sub_1001C56EC(v66, v68, v110);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113, v82, v63 + 12);
          swift_release_n(a1, 2);
          swift_bridgeObjectRelease(v68);
          _os_log_impl((void *)&_mh_execute_header, v46, v50, "Starting new UWB Lyon session for %s", v63, 0xCu);
          swift_arrayDestroy(v64, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v64, -1, -1);
          swift_slowDealloc(v63, -1, -1);
        }
        else
        {
          swift_release_n(a1, 2);
        }

        v82 = objc_allocWithZone((Class)type metadata accessor for UWBLyonSession());
        swift_retain(a1);
        swift_retain(v108);
        swift_retain(v109);
        swift_retain(v104);
        swift_retain(a10);
        v71 = v81;
        swift_retain(v81);
        v72 = v86;
        swift_retain(v86);
        v73 = v88;
        swift_retain(v88);
        v74 = v90;
        swift_retain(v90);
        v75 = v92;
        swift_retain(v92);
        v76 = v96;
        swift_retain(v96);
        v77 = v98;
        swift_retain(v98);
        v78 = v100;
        swift_retain(v100);
        v79 = swift_retain(v102);
        v80 = (void *)sub_1001862F4((uint64_t)a1, v105, v106, v108, v107, v109, v103, v104, v83, a10, v85, v71, v87, v72, v89, v73, v91, v74, v93,
                        v75,
                        v95,
                        v76,
                        v97,
                        v77,
                        v99,
                        v78,
                        v101,
                        v79);
        swift_beginAccess(v94, v110, 33, 0);
        a1 = v80;
        sub_1000C8778((Swift::Int *)&v112, a1);
        swift_endAccess(v110);

        return (uint64_t)a1;
      }
      if (v51)
      {
        v52 = (uint8_t *)swift_slowAlloc(12, -1);
        v53 = swift_slowAlloc(32, -1);
        *(_DWORD *)v52 = 136315138;
        v110[0] = v53;
        v54 = swift_retain(a1);
        v55 = UUID.uuidString.getter(v54);
        v57 = v56;
        swift_release(a1);
        v112 = (id)sub_1001C56EC(v55, v57, v110);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113, v52 + 4, v52 + 12);
        swift_release_n(a1, 2);
        swift_bridgeObjectRelease(v57);
        _os_log_impl((void *)&_mh_execute_header, v46, v50, "UWB Lyon session for %s already exists", v52, 0xCu);
        swift_arrayDestroy(v53, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v53, -1, -1);
        swift_slowDealloc(v52, -1, -1);
      }
      else
      {
        swift_release_n(a1, 2);
      }

      v61 = sub_100198900();
      v62 = &type metadata for DSKUWB.UWBError;
    }
    else
    {
      a1 = Logger.logObject.getter(result);
      v59 = static os_log_type_t.error.getter(a1, v58);
      if (os_log_type_enabled(a1, v59))
      {
        v60 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v60 = 0;
        _os_log_impl((void *)&_mh_execute_header, a1, v59, "Not running", v60, 2u);
        swift_slowDealloc(v60, -1, -1);
      }

      v61 = sub_10006B828();
      v62 = &type metadata for DSKError;
    }
    v69 = swift_allocError(v62, v61, 0, 0);
    *v70 = 1;
    swift_willThrow(v69);
    return (uint64_t)a1;
  }
  __break(1u);
  return result;
}

id sub_1001821F0(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  id v11;
  _BYTE *v13;
  NSObject *v14;
  uint64_t v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = v1;
  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (uint64_t *)((char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v10 = qword_100354EE8;
  *v9 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5);
  v11 = (id)v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v9, v5);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_12:
    swift_once(&qword_100344690, sub_100182BE4);
    goto LABEL_7;
  }
  v2 = OBJC_IVAR____TtC10seserviced10UWBSession_state;
  if (v3[OBJC_IVAR____TtC10seserviced10UWBSession_state] == 4)
    return objc_msgSend(*(id *)&v3[OBJC_IVAR____TtC10seserviced10UWBSession_session], "prefetchAcwgUrsk:", a1);
  if (qword_100344690 != -1)
    goto LABEL_12;
LABEL_7:
  v13 = v3;
  v14 = Logger.logObject.getter(v13);
  v16 = static os_log_type_t.error.getter(v14, v15);
  if (os_log_type_enabled(v14, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = swift_slowAlloc(32, -1);
    *(_DWORD *)v17 = 136315138;
    v28 = v18;
    LOBYTE(v26) = v3[v2];
    v19 = String.init<A>(describing:)(&v26, &type metadata for UWBSession.State);
    v21 = v20;
    v26 = sub_1001C56EC(v19, v20, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v17 + 4, v17 + 12);

    swift_bridgeObjectRelease(v21);
    _os_log_impl((void *)&_mh_execute_header, v14, v16, "UWB session is in %s, cannot prefetch URSK, disconnecting peer", v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {

  }
  v22 = sub_10006B828();
  v23 = swift_allocError(&type metadata for DSKError, v22, 0, 0);
  *v24 = 0;
  return (id)swift_willThrow(v23);
}

void sub_1001824B4(unsigned __int8 a1, __int16 a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;

  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (uint64_t *)((char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v10 = qword_100354EE8;
  *v9 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5);
  v11 = (id)v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  v12 = (*(uint64_t (**)(_QWORD *, uint64_t))(v6 + 8))(v9, v5);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    v12 = swift_once(&qword_100344690, sub_100182BE4);
    goto LABEL_6;
  }
  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC10seserviced10UWBSession_state) != 1)
  {
    v13 = objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC10seserviced10UWBSession_session), "acwgEventNotifier");
    -[NSObject notifyLockStatusChanged:](v13, "notifyLockStatusChanged:", (unsigned __int16)(a1 | (unsigned __int16)(a2 << 8)));
    goto LABEL_9;
  }
  if (qword_100344690 != -1)
    goto LABEL_11;
LABEL_6:
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Session is invalidated, not notifying lock status change", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }
LABEL_9:

}

void sub_100182698(uint64_t a1, Swift::UInt a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(_QWORD *, uint64_t, uint64_t);
  id v13;
  uint64_t (*v14)(_QWORD *, uint64_t);
  uint64_t v15;
  void *v16;
  uint64_t *v17;
  char *v18;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int64_t v28;
  void (*v29)(_QWORD *, uint64_t, uint64_t);
  unint64_t v30;
  unint64_t v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  NSObject *v35;
  uint64_t v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  id v51;
  void (*v52)(_QWORD *, uint64_t, uint64_t);
  uint64_t v53[3];
  char v54[24];
  uint64_t v55;
  uint64_t v56;

  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(uint64_t **)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (uint64_t *)((char *)&v53[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
LABEL_53:
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v10 = qword_100354EE8;
  *v9 = qword_100354EE8;
  v11 = enum case for DispatchPredicate.onQueue(_:);
  v12 = (void (*)(_QWORD *, uint64_t, uint64_t))v6[13];
  v12(v9, enum case for DispatchPredicate.onQueue(_:), v5);
  v13 = (id)v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  v14 = (uint64_t (*)(_QWORD *, uint64_t))v6[1];
  v15 = v14(v9, v5);
  if ((v10 & 1) != 0)
  {
    if (*((_BYTE *)v2 + OBJC_IVAR____TtC10seserviced6DSKUWB_isRunning) != 1)
    {
      v35 = Logger.logObject.getter(v15);
      v37 = static os_log_type_t.error.getter(v35, v36);
      if (!os_log_type_enabled(v35, v37))
      {
LABEL_44:

        return;
      }
      v38 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v37, "Not running", v38, 2u);
      v39 = v38;
LABEL_43:
      swift_slowDealloc(v39, -1, -1);
      goto LABEL_44;
    }
    v52 = v12;
    v16 = *(void **)((char *)v2 + OBJC_IVAR____TtC10seserviced6DSKUWB_uwbPowerAssertion);
    if (v16)
    {
      v17 = (uint64_t *)((char *)v2 + OBJC_IVAR____TtC10seserviced6DSKUWB_activeUseCases);
      swift_beginAccess((char *)v2 + OBJC_IVAR____TtC10seserviced6DSKUWB_activeUseCases, v54, 0, 0);
      v15 = sub_10017ED28(a2, *v17);
      if ((v15 & 1) != 0)
      {
        v6 = (uint64_t *)((char *)v2 + OBJC_IVAR____TtC10seserviced6DSKUWB_activeExceptions);
        swift_beginAccess((char *)v2 + OBJC_IVAR____TtC10seserviced6DSKUWB_activeExceptions, v53, 33, 0);
        v18 = v16;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v6);
        v55 = *v6;
        *v6 = 0x8000000000000000;
        v2 = &v55;
        sub_10018E010(a1, a2, isUniquelyReferenced_nonNull_native);
        v20 = *v6;
        *v6 = v55;
        swift_bridgeObjectRelease(v20);
        swift_endAccess(v53);
        v21 = 0;
        a2 = 0;
        v22 = *v6;
        v23 = 1 << *(_BYTE *)(*v6 + 32);
        v24 = -1;
        if (v23 < 64)
          v24 = ~(-1 << v23);
        v26 = *(_QWORD *)(v22 + 64);
        v25 = v22 + 64;
        v27 = v24 & v26;
        v28 = (unint64_t)(v23 + 63) >> 6;
        v29 = v52;
        while (1)
        {
          if (v27)
          {
            v30 = __clz(__rbit64(v27));
            v27 &= v27 - 1;
            v31 = v30 | (v21 << 6);
          }
          else
          {
            v32 = v21 + 1;
            if (__OFADD__(v21, 1))
            {
              __break(1u);
              goto LABEL_53;
            }
            if (v32 >= v28)
              goto LABEL_35;
            v33 = *(_QWORD *)(v25 + 8 * v32);
            ++v21;
            if (!v33)
            {
              v21 = v32 + 1;
              if (v32 + 1 >= v28)
                goto LABEL_35;
              v33 = *(_QWORD *)(v25 + 8 * v21);
              if (!v33)
              {
                v21 = v32 + 2;
                if (v32 + 2 >= v28)
                  goto LABEL_35;
                v33 = *(_QWORD *)(v25 + 8 * v21);
                if (!v33)
                {
                  v21 = v32 + 3;
                  if (v32 + 3 >= v28)
                    goto LABEL_35;
                  v33 = *(_QWORD *)(v25 + 8 * v21);
                  if (!v33)
                  {
                    v21 = v32 + 4;
                    if (v32 + 4 >= v28)
                      goto LABEL_35;
                    v33 = *(_QWORD *)(v25 + 8 * v21);
                    if (!v33)
                    {
                      v34 = v32 + 5;
                      if (v34 >= v28)
                      {
LABEL_35:
                        v48 = qword_100354EE8;
                        *v9 = qword_100354EE8;
                        v29(v9, v11, v5);
                        v49 = (id)v48;
                        LOBYTE(v48) = _dispatchPreconditionTest(_:)(v9);
                        v14(v9, v5);
                        if ((v48 & 1) == 0)
                          goto LABEL_55;
                        if ((a2 & 1) != 0)
                        {
                          if ((a2 & 2) != 0)
                            v50 = 6;
                          else
                            v50 = 2;
                        }
                        else
                        {
                          if ((a2 & 2) == 0)
                          {
                            v50 = 0;
                            if ((a2 & 4) == 0)
                              goto LABEL_51;
LABEL_50:
                            v50 |= 1uLL;
LABEL_51:
                            v51 = objc_msgSend(*(id *)&v18[OBJC_IVAR____TtC10seservicedP33_4D3BC54BA96E8438A66520691EE354E617UWBPrewarmSession_session], "systemEventNotifier", v52);
                            objc_msgSend(v51, "notifyPassiveAccessIntent:", v50);

                            return;
                          }
                          v50 = 4;
                        }
                        if ((a2 & 4) != 0)
                          goto LABEL_50;
                        goto LABEL_51;
                      }
                      v33 = *(_QWORD *)(v25 + 8 * v34);
                      if (!v33)
                      {
                        while (1)
                        {
                          v21 = v34 + 1;
                          if (__OFADD__(v34, 1))
                            goto LABEL_56;
                          if (v21 >= v28)
                            goto LABEL_35;
                          v33 = *(_QWORD *)(v25 + 8 * v21);
                          ++v34;
                          if (v33)
                            goto LABEL_29;
                        }
                      }
                      v21 = v34;
                    }
                  }
                }
              }
            }
LABEL_29:
            v27 = (v33 - 1) & v33;
            v31 = __clz(__rbit64(v33)) + (v21 << 6);
          }
          a2 |= *(_QWORD *)(*(_QWORD *)(*v6 + 56) + 8 * v31);
        }
      }
    }
    v35 = Logger.logObject.getter(v15);
    v43 = static os_log_type_t.info.getter(v35, v40, v41, v42);
    if (!os_log_type_enabled(v35, v43))
      goto LABEL_44;
    v44 = (uint8_t *)swift_slowAlloc(12, -1);
    v45 = swift_slowAlloc(32, -1);
    v53[0] = v45;
    *(_DWORD *)v44 = 136315138;
    if (!a2)
    {
      v46 = 0xE600000000000000;
      v47 = 0x616873696C41;
LABEL_42:
      v55 = sub_1001C56EC(v47, v46, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v44 + 4, v44 + 12);
      swift_bridgeObjectRelease(v46);
      _os_log_impl((void *)&_mh_execute_header, v35, v43, "UWB is not powered on for %s", v44, 0xCu);
      swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1, -1);
      v39 = v44;
      goto LABEL_43;
    }
    if (a2 == 1)
    {
      v46 = 0xE400000000000000;
      v47 = 1852799308;
      goto LABEL_42;
    }
  }
  else
  {
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
  }
  v55 = a2;
  _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for DSK.Module, &v55, &type metadata for DSK.Module, &type metadata for Int);
  __break(1u);
}

uint64_t sub_100182BE4()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for DSKUWB(0);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  result = sub_100182CAC();
  qword_100354D70 = result;
  return result;
}

uint64_t sub_100182C20(uint64_t a1)
{
  return sub_100182C48(a1, (SEL *)&selRef_supportsPreciseDistanceMeasurement, &byte_100354D78);
}

uint64_t sub_100182C34(uint64_t a1)
{
  return sub_100182C48(a1, (SEL *)&selRef_supportsExtendedDistanceMeasurement, &byte_100354D79);
}

uint64_t sub_100182C48(uint64_t a1, SEL *a2, _BYTE *a3)
{
  id v5;
  uint64_t result;

  v5 = objc_msgSend((id)objc_opt_self(NISession), "deviceCapabilities");
  LOBYTE(a2) = objc_msgSend(v5, *a2);
  result = swift_unknownObjectRelease(v5);
  *a3 = (_BYTE)a2;
  return result;
}

uint64_t sub_100182CAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  _QWORD aBlock[5];
  uint64_t v12;

  v1 = v0;
  v2 = type metadata accessor for DispatchQoS.QoSClass(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = String.init(cString:)(SESLoggingSubsystem);
  Logger.init(subsystem:category:)(v6);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced6DSKUWB_activeExceptions) = &_swiftEmptyDictionarySingleton;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced6DSKUWB_activeSessions) = &_swiftEmptySetSingleton;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced6DSKUWB_activeUseCases) = &_swiftEmptySetSingleton;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced6DSKUWB_delegates) = &_swiftEmptyDictionarySingleton;
  *(_BYTE *)(v0 + OBJC_IVAR____TtC10seserviced6DSKUWB_isAvailable) = 0;
  *(_BYTE *)(v0 + OBJC_IVAR____TtC10seserviced6DSKUWB_isRunning) = 0;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced6DSKUWB_rangingLimitExceeded) = &_swiftEmptySetSingleton;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced6DSKUWB_uwbPowerAssertion) = 0;
  sub_10006C25C(0, (unint64_t *)&qword_1003461A0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DispatchQoS.QoSClass.default(_:), v2);
  v7 = (void *)static OS_dispatch_queue.global(qos:)(v5);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  aBlock[4] = sub_100190540;
  v12 = v1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10017BF6C;
  aBlock[3] = &unk_10030BAC8;
  v8 = _Block_copy(aBlock);
  v9 = v12;
  swift_retain(v1);
  swift_release(v9);
  os_state_add_handler(v7, v8);
  _Block_release(v8);

  return v1;
}

uint64_t sub_100182E84()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char v12;
  _QWORD *v13;
  char v14;
  uint64_t v15;
  __int128 v16;
  char v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  _BYTE *v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t inited;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  char v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(__int128 *, _QWORD);
  uint64_t v39;
  char v40;
  uint64_t *v41;
  uint64_t v42;
  char v43;
  char v44;
  char v45;
  uint64_t v46;
  Class isa;
  _DWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  char v51[128];
  void *v52;
  __int128 v53;
  char v54;
  __int128 v55;
  void *v56;

  v1 = v0;
  v2 = *(_BYTE *)(v0 + OBJC_IVAR____TtC10seserviced6DSKUWB_isRunning);
  v56 = &type metadata for Bool;
  LOBYTE(v55) = v2;
  sub_10006C2B4(&v55, &v53);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  v52 = &_swiftEmptyDictionarySingleton;
  sub_10018DEC0(&v53, 0x6E696E6E75527369, 0xE900000000000067, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease(0x8000000000000000);
  v4 = (uint64_t *)(v0 + OBJC_IVAR____TtC10seserviced6DSKUWB_activeSessions);
  swift_beginAccess(v4, &v52, 0, 0);
  v5 = *v4;
  v6 = *v4 & 0xC000000000000001;
  if (v6)
  {
    if (v5 < 0)
      v7 = *v4;
    else
      v7 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v8 = __CocoaSet.count.getter(v7);
  }
  else
  {
    v8 = *(_QWORD *)(v5 + 16);
    swift_bridgeObjectRetain(v5);
  }
  if (!v8)
  {
    swift_bridgeObjectRelease(v5);
    v13 = _swiftEmptyArrayStorage;
LABEL_31:
    v56 = (void *)sub_100063D3C(&qword_100346050);
    *(_QWORD *)&v55 = v13;
    sub_10006C2B4(&v55, &v53);
    v40 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    v50 = &_swiftEmptyDictionarySingleton;
    sub_10018DEC0(&v53, 0x6553657669746361, 0xEE00736E6F697373, v40);
    swift_bridgeObjectRelease(0x8000000000000000);
    v41 = (uint64_t *)(v1 + OBJC_IVAR____TtC10seserviced6DSKUWB_activeUseCases);
    swift_beginAccess(v1 + OBJC_IVAR____TtC10seserviced6DSKUWB_activeUseCases, &v50, 0, 0);
    v42 = *v41;
    v56 = (void *)sub_100063D3C(&qword_100348900);
    *(_QWORD *)&v55 = v42;
    sub_10006C2B4(&v55, &v53);
    swift_bridgeObjectRetain(v42);
    v43 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    sub_10018DEC0(&v53, 0x7355657669746361, 0xEE00736573614365, v43);
    swift_bridgeObjectRelease(0x8000000000000000);
    if (qword_100344698 != -1)
      swift_once(&qword_100344698, sub_100182C20);
    v56 = &type metadata for Bool;
    LOBYTE(v55) = byte_100354D78;
    sub_10006C2B4(&v55, &v53);
    v44 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    sub_10018DEC0(&v53, 0xD000000000000015, 0x80000001002BEE80, v44);
    swift_bridgeObjectRelease(0x8000000000000000);
    if (qword_1003446A0 != -1)
      swift_once(&qword_1003446A0, sub_100182C34);
    v56 = &type metadata for Bool;
    LOBYTE(v55) = byte_100354D79;
    sub_10006C2B4(&v55, &v53);
    v45 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    sub_10018DEC0(&v53, 0xD000000000000011, 0x80000001002BEEA0, v45);
    swift_bridgeObjectRelease(0x8000000000000000);
    v46 = sub_10017D088((uint64_t)&_swiftEmptyDictionarySingleton);
    swift_bridgeObjectRelease(&_swiftEmptyDictionarySingleton);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v46);
    v48 = sub_100015734((uint64_t)"dskuwb.state", (uint64_t)isa);

    return (uint64_t)v48;
  }
  v50 = _swiftEmptyArrayStorage;
  sub_1001929E4(0, v8 & ~(v8 >> 63), 0);
  if (v6)
  {
    if (v5 < 0)
      v9 = v5;
    else
      v9 = v5 & 0xFFFFFFFFFFFFFF8;
    result = __CocoaSet.startIndex.getter(v9);
    v12 = 1;
  }
  else
  {
    result = sub_100196CE4(v5);
    v12 = v14 & 1;
  }
  *(_QWORD *)&v53 = result;
  *((_QWORD *)&v53 + 1) = v11;
  v54 = v12;
  if ((v8 & 0x8000000000000000) == 0)
  {
    v15 = v5 & 0xFFFFFFFFFFFFFF8;
    if (v5 < 0)
      v15 = v5;
    v49 = v15;
    do
    {
      while (1)
      {
        sub_1001964DC(v53, *((uint64_t *)&v53 + 1), v54, v5);
        v24 = v23;
        v25 = sub_100063D3C((uint64_t *)&unk_100346040);
        inited = swift_initStackObject(v25, v51);
        *(_OWORD *)(inited + 16) = xmmword_1002888F0;
        *(_QWORD *)(inited + 32) = 0xD000000000000011;
        *(_QWORD *)(inited + 40) = 0x80000001002BBD00;
        v27 = *(_QWORD *)&v24[OBJC_IVAR____TtC10seserviced10UWBSession_peer]
            + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
        v28 = type metadata accessor for UUID(0);
        *(_QWORD *)(inited + 72) = v28;
        v29 = sub_1000960AC((_QWORD *)(inited + 48));
        (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v29, v27, v28);
        *(_QWORD *)(inited + 80) = 0x6574617473;
        *(_QWORD *)(inited + 88) = 0xE500000000000000;
        v30 = v24[OBJC_IVAR____TtC10seserviced10UWBSession_state];
        *(_QWORD *)(inited + 120) = &type metadata for UWBSession.State;
        *(_BYTE *)(inited + 96) = v30;
        v31 = sub_10017C218(inited);

        v32 = v50;
        result = swift_isUniquelyReferenced_nonNull_native(v50);
        if ((result & 1) == 0)
        {
          result = sub_1001929E4(0, v50[2] + 1, 1);
          v32 = v50;
        }
        v34 = v32[2];
        v33 = v32[3];
        if (v34 >= v33 >> 1)
        {
          result = sub_1001929E4(v33 > 1, v34 + 1, 1);
          v32 = v50;
        }
        v32[2] = v34 + 1;
        v32[v34 + 4] = v31;
        if (v6)
          break;
        v16 = v53;
        v17 = v54;
        v18 = sub_100195EE8(v53, SDWORD2(v53), v54, v5);
        v20 = v19;
        v22 = v21;
        sub_1000960E8(v16, *((uint64_t *)&v16 + 1), v17);
        *(_QWORD *)&v53 = v18;
        *((_QWORD *)&v53 + 1) = v20;
        v54 = v22 & 1;
        if (!--v8)
          goto LABEL_30;
      }
      if ((v54 & 1) == 0)
        goto LABEL_37;
      v35 = __CocoaSet.Index.handleBitPattern.getter(v53, *((_QWORD *)&v53 + 1));
      if (v35)
        v36 = swift_isUniquelyReferenced_nonNull_native(v35);
      else
        v36 = 1;
      v37 = sub_100063D3C((uint64_t *)&unk_1003488F0);
      v38 = (void (*)(__int128 *, _QWORD))Set.Index._asCocoa.modify(&v55, v37);
      __CocoaSet.formIndex(after:isUnique:)(v39, v36, v49);
      v38(&v55, 0);
      --v8;
    }
    while (v8);
LABEL_30:
    sub_1000960E8(v53, *((uint64_t *)&v53 + 1), v54);
    swift_bridgeObjectRelease(v5);
    v13 = v50;
    goto LABEL_31;
  }
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

void sub_1001834CC()
{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;

  v3 = v0;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (uint64_t *)((char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v9 = qword_100354EE8;
  *v8 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  v11 = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_23:
    v22 = swift_once(&qword_100344698, sub_100182C20);
    goto LABEL_15;
  }
  v1 = OBJC_IVAR____TtC10seserviced6DSKUWB_isRunning;
  v12 = *(_BYTE *)(v3 + OBJC_IVAR____TtC10seserviced6DSKUWB_isRunning);
  v13 = Logger.logObject.getter(v11);
  v17 = v13;
  if ((v12 & 1) != 0)
  {
    v18 = static os_log_type_t.error.getter(v13, v14);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "DSKUWB is already running", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }

    return;
  }
  v20 = static os_log_type_t.info.getter(v13, v14, v15, v16);
  v2 = (unsigned __int8 *)&unk_100354000;
  if (os_log_type_enabled(v17, v20))
  {
    v21 = swift_slowAlloc(14, -1);
    *(_DWORD *)v21 = 67109376;
    if (qword_100344698 != -1)
      swift_once(&qword_100344698, sub_100182C20);
    v35 = byte_100354D78;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v21 + 4, v21 + 8);
    *(_WORD *)(v21 + 8) = 1024;
    if (qword_1003446A0 != -1)
      swift_once(&qword_1003446A0, sub_100182C34);
    v34 = byte_100354D79;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v21 + 10, v21 + 14);
    _os_log_impl((void *)&_mh_execute_header, v17, v20, "Supports secure ranging %{BOOL}d deep sleep %{BOOL}d", (uint8_t *)v21, 0xEu);
    swift_slowDealloc(v21, -1, -1);
  }

  if (qword_100344698 != -1)
    goto LABEL_23;
LABEL_15:
  v23 = v2[3448];
  v24 = Logger.logObject.getter(v22);
  v28 = v24;
  if (v23 == 1)
  {
    v29 = static os_log_type_t.info.getter(v24, v25, v26, v27);
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Starting DSKUWB", v30, 2u);
      swift_slowDealloc(v30, -1, -1);
    }

    *(_BYTE *)(v3 + v1) = 1;
  }
  else
  {
    v31 = static os_log_type_t.error.getter(v24, v25);
    if (os_log_type_enabled(v28, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v31, "UWB does not support secure ranging", v32, 2u);
      swift_slowDealloc(v32, -1, -1);
    }

  }
}

void sub_10018385C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  os_log_type_t v27;
  uint8_t *v28;
  _BYTE v29[24];
  _BYTE v30[32];
  _BYTE v31[24];

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = &v29[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v7 = qword_100354EE8;
  *v6 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  v9 = (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) != 0)
  {
    v10 = OBJC_IVAR____TtC10seserviced6DSKUWB_isRunning;
    v11 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC10seserviced6DSKUWB_isRunning);
    v12 = Logger.logObject.getter(v9);
    v16 = v12;
    if (v11 == 1)
    {
      v17 = static os_log_type_t.info.getter(v12, v13, v14, v15);
      if (os_log_type_enabled(v16, v17))
      {
        v18 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v18 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Stopping DSKUWB", v18, 2u);
        swift_slowDealloc(v18, -1, -1);
      }

      v19 = (uint64_t *)(v1 + OBJC_IVAR____TtC10seserviced6DSKUWB_activeSessions);
      swift_beginAccess(v1 + OBJC_IVAR____TtC10seserviced6DSKUWB_activeSessions, v31, 0, 0);
      v20 = *v19;
      swift_bridgeObjectRetain(v20);
      sub_10017F820(v21);
      swift_bridgeObjectRelease(v20);
      v22 = (uint64_t *)(v1 + OBJC_IVAR____TtC10seserviced6DSKUWB_activeUseCases);
      swift_beginAccess(v1 + OBJC_IVAR____TtC10seserviced6DSKUWB_activeUseCases, v30, 0, 0);
      v23 = *v22;
      swift_retain(v1);
      swift_bridgeObjectRetain(v23);
      sub_100197660(v24);
      swift_bridgeObjectRelease(v23);
      swift_release(v1);
      v25 = (uint64_t *)(v1 + OBJC_IVAR____TtC10seserviced6DSKUWB_activeExceptions);
      swift_beginAccess(v1 + OBJC_IVAR____TtC10seserviced6DSKUWB_activeExceptions, v29, 1, 0);
      v26 = *v25;
      *v25 = (uint64_t)&_swiftEmptyDictionarySingleton;
      swift_bridgeObjectRelease(v26);
      *(_BYTE *)(v1 + v10) = 0;
    }
    else
    {
      v27 = static os_log_type_t.error.getter(v12, v13);
      if (os_log_type_enabled(v16, v27))
      {
        v28 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v28 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, v27, "DSKUWB is not running", v28, 2u);
        swift_slowDealloc(v28, -1, -1);
      }

    }
  }
  else
  {
    __break(1u);
  }
}

void sub_100183AF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(_QWORD *, uint64_t, uint64_t, __n128);
  id v10;
  uint64_t (*v11)(_QWORD *, uint64_t);
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  __n128 v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  void *v32;
  uint64_t v33;
  char *v34;
  id v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  os_unfair_lock_s *v41;
  os_unfair_lock_s *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  os_unfair_lock_s *v46;
  os_unfair_lock_s *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50[2];
  uint64_t v51;
  _BYTE v52[24];

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (uint64_t *)((char *)v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
LABEL_46:
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v7 = qword_100354EE8;
  *v6 = qword_100354EE8;
  v8 = enum case for DispatchPredicate.onQueue(_:);
  v9 = *(void (**)(_QWORD *, uint64_t, uint64_t, __n128))(v3 + 104);
  ((void (*)(_QWORD *, _QWORD, uint64_t))v9)(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v10 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  v11 = *(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8);
  v12 = v11(v6, v2);
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_48:
    v38 = swift_once(&qword_1003445B8, sub_1000EAA4C);
    goto LABEL_44;
  }
  v13 = Logger.logObject.getter(v12);
  v17 = static os_log_type_t.info.getter(v13, v14, v15, v16);
  if (os_log_type_enabled(v13, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v17, "UWB is powered on", v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }

  *(_BYTE *)(v1 + OBJC_IVAR____TtC10seserviced6DSKUWB_isAvailable) = 1;
  v19 = v1 + OBJC_IVAR____TtC10seserviced6DSKUWB_activeExceptions;
  v20 = swift_beginAccess(v1 + OBJC_IVAR____TtC10seserviced6DSKUWB_activeExceptions, v52, 0, 0);
  v21 = 0;
  v3 = 0;
  v22 = *(_QWORD *)v19 + 64;
  v23 = 1 << *(_BYTE *)(*(_QWORD *)v19 + 32);
  v24 = -1;
  if (v23 < 64)
    v24 = ~(-1 << v23);
  v25 = v24 & *(_QWORD *)(*(_QWORD *)v19 + 64);
  v26 = (unint64_t)(v23 + 63) >> 6;
  while (1)
  {
    if (v25)
    {
      v27 = __clz(__rbit64(v25));
      v25 &= v25 - 1;
      v28 = v27 | (v21 << 6);
      goto LABEL_9;
    }
    v29 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
      __break(1u);
      goto LABEL_46;
    }
    if (v29 >= v26)
      break;
    v30 = *(_QWORD *)(v22 + 8 * v29);
    ++v21;
    if (!v30)
    {
      v21 = v29 + 1;
      if (v29 + 1 >= v26)
        break;
      v30 = *(_QWORD *)(v22 + 8 * v21);
      if (!v30)
      {
        v21 = v29 + 2;
        if (v29 + 2 >= v26)
          break;
        v30 = *(_QWORD *)(v22 + 8 * v21);
        if (!v30)
        {
          v21 = v29 + 3;
          if (v29 + 3 >= v26)
            break;
          v30 = *(_QWORD *)(v22 + 8 * v21);
          if (!v30)
          {
            v21 = v29 + 4;
            if (v29 + 4 >= v26)
              break;
            v30 = *(_QWORD *)(v22 + 8 * v21);
            if (!v30)
            {
              v31 = v29 + 5;
              if (v31 >= v26)
                break;
              v30 = *(_QWORD *)(v22 + 8 * v31);
              if (!v30)
              {
                while (1)
                {
                  v21 = v31 + 1;
                  if (__OFADD__(v31, 1))
                    break;
                  if (v21 >= v26)
                    goto LABEL_29;
                  v30 = *(_QWORD *)(v22 + 8 * v21);
                  ++v31;
                  if (v30)
                    goto LABEL_28;
                }
                __break(1u);
                goto LABEL_50;
              }
              v21 = v31;
            }
          }
        }
      }
    }
LABEL_28:
    v25 = (v30 - 1) & v30;
    v28 = __clz(__rbit64(v30)) + (v21 << 6);
LABEL_9:
    v3 |= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v19 + 56) + 8 * v28);
  }
LABEL_29:
  v32 = *(void **)(v1 + OBJC_IVAR____TtC10seserviced6DSKUWB_uwbPowerAssertion);
  if (v32)
  {
    v33 = qword_100354EE8;
    *v6 = qword_100354EE8;
    v9(v6, v8, v2, v20);
    v34 = v32;
    v35 = (id)v33;
    LOBYTE(v33) = _dispatchPreconditionTest(_:)(v6);
    v11(v6, v2);
    if ((v33 & 1) == 0)
    {
LABEL_50:
      __break(1u);
      return;
    }
    if ((v3 & 1) != 0)
    {
      if ((v3 & 2) != 0)
      {
        v36 = 6;
        if ((v3 & 4) == 0)
          goto LABEL_42;
        goto LABEL_41;
      }
      v36 = 2;
      if ((v3 & 4) != 0)
LABEL_41:
        v36 |= 1uLL;
    }
    else
    {
      if ((v3 & 2) == 0)
      {
        v36 = 0;
        if ((v3 & 4) == 0)
          goto LABEL_42;
        goto LABEL_41;
      }
      v36 = 4;
      if ((v3 & 4) != 0)
        goto LABEL_41;
    }
LABEL_42:
    v37 = objc_msgSend(*(id *)&v34[OBJC_IVAR____TtC10seservicedP33_4D3BC54BA96E8438A66520691EE354E617UWBPrewarmSession_session], "systemEventNotifier");
    objc_msgSend(v37, "notifyPassiveAccessIntent:", v36);

  }
  sub_1001F119C(0xD000000000000037, 0x80000001002BEF60, 0, 0xF000000000000000, 0, 0xF000000000000000, 0);
  if (qword_1003445B8 != -1)
    goto LABEL_48;
LABEL_44:
  __chkstk_darwin(v38, v39);
  v50[-4] = (uint64_t)sub_10008ECD0;
  v50[-3] = 0;
  v50[-2] = v40;
  v42 = v41 + 4;
  os_unfair_lock_lock(v41 + 4);
  sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_100096F14, &v51);
  os_unfair_lock_unlock(v42);
  __chkstk_darwin(v43, v44);
  v50[-4] = (uint64_t)sub_10019A18C;
  v50[-3] = 0;
  v50[-2] = v45;
  v47 = v46 + 4;
  os_unfair_lock_lock(v46 + 4);
  sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_100096F14, v50);
  os_unfair_lock_unlock(v47);
  sub_1000BA438(v50[0]);
  v48 = v51;
  swift_bridgeObjectRetain(v51);
  sub_10017F0D4(v49);
  swift_bridgeObjectRelease_n(v48, 2);
}

void sub_100183FDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  int64_t v28;
  int64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t inited;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  os_unfair_lock_s *v37;
  os_unfair_lock_s *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  os_unfair_lock_s *v42;
  os_unfair_lock_s *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46[2];
  uint64_t v47;
  _BYTE v48[80];
  uint64_t v49[3];

  v2 = v1;
  v4 = (_QWORD *)type metadata accessor for DispatchPredicate(0);
  v5 = *(v4 - 1);
  __chkstk_darwin(v4, v6);
  v8 = (unint64_t)v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1003447B8 != -1)
    goto LABEL_44;
  while (1)
  {
    v9 = qword_100354EE8;
    *(_QWORD *)v8 = qword_100354EE8;
    (*(void (**)(unint64_t, _QWORD, _QWORD *))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
    v10 = (id)v9;
    LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
    v11 = (*(uint64_t (**)(unint64_t, _QWORD *))(v5 + 8))(v8, v4);
    if ((v9 & 1) == 0)
      break;
    if (!*(_QWORD *)(v2 + OBJC_IVAR____TtC10seserviced6DSKUWB_uwbPowerAssertion))
      return;
    v12 = OBJC_IVAR____TtC10seserviced6DSKUWB_isAvailable;
    if (*(_BYTE *)(v2 + OBJC_IVAR____TtC10seserviced6DSKUWB_isAvailable) == 1 && a1 == 0)
      return;
    v14 = Logger.logObject.getter(v11);
    v18 = static os_log_type_t.info.getter(v14, v15, v16, v17);
    if (os_log_type_enabled(v14, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = swift_slowAlloc(32, -1);
      v49[0] = v20;
      *(_DWORD *)v19 = 136315138;
      v21 = sub_100186A94(a1);
      v23 = v22;
      v47 = sub_1001C56EC(v21, v22, v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48, v19 + 4, v19 + 12);
      swift_bridgeObjectRelease(v23);
      _os_log_impl((void *)&_mh_execute_header, v14, v18, "UWB state updated with suspension reasons [%s]", v19, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);
    }

    v8 = a1 != 0;
    *(_BYTE *)(v2 + v12) = a1 == 0;
    v4 = (_QWORD *)(v2 + OBJC_IVAR____TtC10seserviced6DSKUWB_delegates);
    swift_beginAccess(v2 + OBJC_IVAR____TtC10seserviced6DSKUWB_delegates, v49, 0, 0);
    v2 = *v4;
    v24 = *v4 + 64;
    v25 = 1 << *(_BYTE *)(*v4 + 32);
    v26 = -1;
    if (v25 < 64)
      v26 = ~(-1 << v25);
    v5 = v26 & *(_QWORD *)(*v4 + 64);
    v27 = (unint64_t)(v25 + 63) >> 6;
    swift_bridgeObjectRetain_n(*v4, 2);
    v28 = 0;
    if (v5)
      goto LABEL_30;
    while (1)
    {
      v29 = v28 + 1;
      if (__OFADD__(v28, 1))
        break;
      if (v29 >= v27)
        goto LABEL_34;
      v5 = *(_QWORD *)(v24 + 8 * v29);
      ++v28;
      if (!v5)
      {
        v28 = v29 + 1;
        if (v29 + 1 >= v27)
          goto LABEL_34;
        v5 = *(_QWORD *)(v24 + 8 * v28);
        if (!v5)
        {
          v28 = v29 + 2;
          if (v29 + 2 >= v27)
            goto LABEL_34;
          v5 = *(_QWORD *)(v24 + 8 * v28);
          if (!v5)
          {
            v28 = v29 + 3;
            if (v29 + 3 >= v27)
              goto LABEL_34;
            v5 = *(_QWORD *)(v24 + 8 * v28);
            if (!v5)
            {
              v28 = v29 + 4;
              if (v29 + 4 >= v27)
                goto LABEL_34;
              v5 = *(_QWORD *)(v24 + 8 * v28);
              if (!v5)
              {
                v30 = v29 + 5;
                if (v30 >= v27)
                {
LABEL_34:
                  swift_release(v2);
                  swift_bridgeObjectRelease(v2);
                  if (a1)
                  {
                    v31 = sub_100063D3C((uint64_t *)&unk_100346040);
                    inited = swift_initStackObject(v31, v48);
                    *(_OWORD *)(inited + 16) = xmmword_1002888E0;
                    *(_QWORD *)(inited + 32) = 0xD000000000000018;
                    *(_QWORD *)(inited + 40) = 0x80000001002BEF40;
                    *(_QWORD *)(inited + 72) = &type metadata for UInt;
                    *(_QWORD *)(inited + 48) = a1;
                    v33 = sub_10017C218(inited);
                    sub_1001F119C(0xD000000000000038, 0x80000001002BEF00, 0, 0xF000000000000000, 0, 0xF000000000000000, v33);
                    v34 = swift_bridgeObjectRelease(v33);
                  }
                  else
                  {
                    sub_1001F119C(0xD000000000000037, 0x80000001002BEF60, 0, 0xF000000000000000, 0, 0xF000000000000000, 0);
                  }
                  if (qword_1003445B8 != -1)
                    goto LABEL_46;
                  goto LABEL_38;
                }
                v5 = *(_QWORD *)(v24 + 8 * v30);
                if (!v5)
                {
                  while (1)
                  {
                    v28 = v30 + 1;
                    if (__OFADD__(v30, 1))
                      break;
                    if (v28 >= v27)
                      goto LABEL_34;
                    v5 = *(_QWORD *)(v24 + 8 * v28);
                    ++v30;
                    if (v5)
                      goto LABEL_30;
                  }
                  __break(1u);
                  return;
                }
                v28 = v30;
              }
            }
          }
        }
      }
      do
      {
LABEL_30:
        if (qword_100344708 != -1)
          swift_once(&qword_100344708, sub_1001C2AE4);
        v5 &= v5 - 1;
        v4 = (_QWORD *)qword_100354E20;
        sub_1001C1B10(2u, a1 != 0, 2u, 0, 2u);
      }
      while (v5);
    }
    __break(1u);
LABEL_44:
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  }
  __break(1u);
LABEL_46:
  v34 = swift_once(&qword_1003445B8, sub_1000EAA4C);
LABEL_38:
  __chkstk_darwin(v34, v35);
  v46[-4] = (uint64_t)sub_10008ECD0;
  v46[-3] = 0;
  v46[-2] = v36;
  v38 = v37 + 4;
  os_unfair_lock_lock(v37 + 4);
  sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_10007EFBC, &v47);
  os_unfair_lock_unlock(v38);
  __chkstk_darwin(v39, v40);
  v46[-4] = (uint64_t)sub_10007BE84;
  v46[-3] = 0;
  v46[-2] = v41;
  v43 = v42 + 4;
  os_unfair_lock_lock(v42 + 4);
  sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_100096F14, v46);
  os_unfair_lock_unlock(v43);
  sub_1000BA438(v46[0]);
  v44 = v47;
  swift_bridgeObjectRetain(v47);
  if (a1)
    sub_10017F440(v45, a1);
  else
    sub_10017F0D4(v45);
  swift_bridgeObjectRelease_n(v44, 2);
}

uint64_t sub_10018457C(unsigned __int8 a1, Swift::UInt a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)();
  uint64_t v11;
  id v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  int64_t v29;
  int64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33[3];

  v3 = v2;
  v6 = (_QWORD *)type metadata accessor for DispatchPredicate(0);
  v7 = *(v6 - 1);
  __chkstk_darwin(v6, v8);
  v10 = (uint64_t (*)())((char *)&v33[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    goto LABEL_44;
  while (1)
  {
    v11 = qword_100354EE8;
    *(_QWORD *)v10 = qword_100354EE8;
    (*(void (**)(uint64_t (*)(), _QWORD, _QWORD *))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
    v12 = (id)v11;
    LOBYTE(v11) = _dispatchPreconditionTest(_:)(v10);
    v13 = (*(uint64_t (**)(uint64_t (*)(), _QWORD *))(v7 + 8))(v10, v6);
    if ((v11 & 1) == 0)
      break;
    v14 = Logger.logObject.getter(v13);
    v18 = static os_log_type_t.info.getter(v14, v15, v16, v17);
    if (os_log_type_enabled(v14, v18))
    {
      v19 = swift_slowAlloc(22, -1);
      v20 = swift_slowAlloc(64, -1);
      v33[0] = v20;
      *(_DWORD *)v19 = 136315394;
      if ((a1 & 1) != 0)
        v21 = 0x6465646565637865;
      else
        v21 = 0x6563786520746F6ELL;
      if ((a1 & 1) != 0)
        v22 = 0xE800000000000000;
      else
        v22 = 0xEC00000064656465;
      v32 = sub_1001C56EC(v21, v22, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, v33, v19 + 4, v19 + 12);
      swift_bridgeObjectRelease(v22);
      *(_WORD *)(v19 + 12) = 2080;
      if (a2)
      {
        if (a2 != 1)
          goto LABEL_47;
        v23 = 0xE400000000000000;
        v24 = 1852799308;
      }
      else
      {
        v23 = 0xE600000000000000;
        v24 = 0x616873696C41;
      }
      v32 = sub_1001C56EC(v24, v23, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, v33, v19 + 14, v19 + 22);
      swift_bridgeObjectRelease(v23);
      _os_log_impl((void *)&_mh_execute_header, v14, v18, "Ranging limit %s for %s", (uint8_t *)v19, 0x16u);
      swift_arrayDestroy(v20, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);
    }

    swift_beginAccess(v3 + OBJC_IVAR____TtC10seserviced6DSKUWB_rangingLimitExceeded, v33, 33, 0);
    if ((a1 & 1) != 0)
      sub_1000C7394((Swift::UInt *)&v32, a2);
    else
      sub_1000D354C(a2);
    swift_endAccess(v33);
    v6 = (_QWORD *)(v3 + OBJC_IVAR____TtC10seserviced6DSKUWB_delegates);
    swift_beginAccess(v3 + OBJC_IVAR____TtC10seserviced6DSKUWB_delegates, v33, 0, 0);
    v3 = *v6;
    v25 = *v6 + 64;
    v26 = 1 << *(_BYTE *)(*v6 + 32);
    v27 = -1;
    if (v26 < 64)
      v27 = ~(-1 << v26);
    a2 = v27 & *(_QWORD *)(*v6 + 64);
    v7 = (unint64_t)(v26 + 63) >> 6;
    a1 &= 1u;
    swift_bridgeObjectRetain_n(*v6, 2);
    v28 = 0;
    v10 = sub_1001C2AE4;
    if (a2)
      goto LABEL_38;
    while (1)
    {
      v29 = v28 + 1;
      if (__OFADD__(v28, 1))
        break;
      if (v29 >= v7)
        goto LABEL_42;
      a2 = *(_QWORD *)(v25 + 8 * v29);
      ++v28;
      if (!a2)
      {
        v28 = v29 + 1;
        if (v29 + 1 >= v7)
          goto LABEL_42;
        a2 = *(_QWORD *)(v25 + 8 * v28);
        if (!a2)
        {
          v28 = v29 + 2;
          if (v29 + 2 >= v7)
            goto LABEL_42;
          a2 = *(_QWORD *)(v25 + 8 * v28);
          if (!a2)
          {
            v28 = v29 + 3;
            if (v29 + 3 >= v7)
              goto LABEL_42;
            a2 = *(_QWORD *)(v25 + 8 * v28);
            if (!a2)
            {
              v28 = v29 + 4;
              if (v29 + 4 >= v7)
                goto LABEL_42;
              a2 = *(_QWORD *)(v25 + 8 * v28);
              if (!a2)
              {
                v30 = v29 + 5;
                if (v30 >= v7)
                {
LABEL_42:
                  swift_release(v3);
                  return swift_bridgeObjectRelease(v3);
                }
                a2 = *(_QWORD *)(v25 + 8 * v30);
                if (!a2)
                {
                  while (1)
                  {
                    v28 = v30 + 1;
                    if (__OFADD__(v30, 1))
                      goto LABEL_46;
                    if (v28 >= v7)
                      goto LABEL_42;
                    a2 = *(_QWORD *)(v25 + 8 * v28);
                    ++v30;
                    if (a2)
                      goto LABEL_38;
                  }
                }
                v28 = v30;
              }
            }
          }
        }
      }
      do
      {
LABEL_38:
        if (qword_100344708 != -1)
          swift_once(&qword_100344708, sub_1001C2AE4);
        a2 &= a2 - 1;
        v6 = (_QWORD *)qword_100354E20;
        sub_1001C1B10(2u, 2u, a1, 0, 2u);
      }
      while (a2);
    }
    __break(1u);
LABEL_44:
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  }
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  v32 = a2;
  result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for DSK.Module, &v32, &type metadata for DSK.Module, &type metadata for Int);
  __break(1u);
  return result;
}

uint64_t sub_100184A14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC10seserviced6DSKUWB_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced6DSKUWB_activeExceptions));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced6DSKUWB_activeSessions));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced6DSKUWB_activeUseCases));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced6DSKUWB_delegates));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced6DSKUWB_rangingLimitExceeded));

  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100184AC4()
{
  return type metadata accessor for DSKUWB(0);
}

uint64_t type metadata accessor for DSKUWB(uint64_t a1)
{
  uint64_t result;

  result = qword_1003484E8;
  if (!qword_1003484E8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DSKUWB);
  return result;
}

uint64_t sub_100184B08(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[9];

  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[5] = &unk_10028B790;
    v4[6] = &unk_10028B790;
    v4[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[8] = &unk_10028B7A8;
    result = swift_updateClassMetadata2(a1, 256, 9, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

id sub_100184BA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  id v7;
  id result;
  int v9;
  uint64_t v11;

  v1 = type metadata accessor for DispatchPredicate(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  v5 = (uint64_t *)((char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v6 = qword_100354EE8;
  *v5 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v1);
  v7 = (id)v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v5);
  result = (id)(*(uint64_t (**)(_QWORD *, uint64_t))(v2 + 8))(v5, v1);
  if ((v6 & 1) != 0)
  {
    v9 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC10seserviced10UWBSession_state);
    if ((v9 - 2) < 2 || v9 == 0)
    {
      return objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC10seserviced10UWBSession_session), "runWithConfiguration:", *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced10UWBSession_configuration));
    }
    else if (v9 == 6)
    {
      *(_BYTE *)(v0 + OBJC_IVAR____TtC10seserviced10UWBSession_state) = 5;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_100184CD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  id v7;
  id result;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;

  v1 = type metadata accessor for DispatchPredicate(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  v5 = (uint64_t *)((char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v6 = qword_100354EE8;
  *v5 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v1);
  v7 = (id)v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v5);
  result = (id)(*(uint64_t (**)(_QWORD *, uint64_t))(v2 + 8))(v5, v1);
  if ((v6 & 1) == 0)
  {
    __break(1u);
    return result;
  }
  v9 = OBJC_IVAR____TtC10seserviced10UWBSession_state;
  v10 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC10seserviced10UWBSession_state);
  if ((v10 - 3) >= 2)
  {
    if (v10 != 5)
      return result;
    v11 = 6;
  }
  else
  {
    result = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC10seserviced10UWBSession_session), "pause");
    v11 = 2;
  }
  *(_BYTE *)(v0 + v9) = v11;
  return result;
}

void sub_100184DF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;

  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (uint64_t *)((char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v12 = qword_100354EE8;
  *v11 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v7);
  v13 = (id)v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v11);
  v14 = (*(uint64_t (**)(_QWORD *, uint64_t))(v8 + 8))(v11, v7);
  if ((v12 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    v14 = swift_once(&qword_100344690, sub_100182BE4);
    goto LABEL_7;
  }
  if (*(_BYTE *)(v3 + OBJC_IVAR____TtC10seserviced10UWBSession_state) == 4)
  {
    objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC10seserviced10UWBSession_session), "processBluetoothHostTimeSyncWithType:btcClockTicks:eventCounter:", a1, a2, a3);
    return;
  }
  if (qword_100344690 != -1)
    goto LABEL_11;
LABEL_7:
  v15 = Logger.logObject.getter(v14);
  v17 = static os_log_type_t.error.getter(v15, v16);
  if (os_log_type_enabled(v15, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v17, "Session is not running", v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }

}

void sub_100184FC8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(_QWORD *, _QWORD, uint64_t);
  id v9;
  void (*v10)(_QWORD *, uint64_t);
  _QWORD *v11;
  char *v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_log_type_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  void *v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  unsigned int v36;
  void (*v37)(_QWORD *, _QWORD, uint64_t);
  void (*v38)(_QWORD *, uint64_t);
  uint64_t v39;
  uint64_t v40[3];

  v1 = type metadata accessor for DispatchPredicate(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin();
  v4 = (uint64_t *)((char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v5 = &unk_100354000;
  v6 = qword_100354EE8;
  *v4 = qword_100354EE8;
  v7 = enum case for DispatchPredicate.onQueue(_:);
  v8 = *(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104);
  v8(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  v9 = (id)v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v4);
  v10 = *(void (**)(_QWORD *, uint64_t))(v2 + 8);
  v10(v4, v1);
  if ((v6 & 1) != 0)
  {
    if (qword_100344690 == -1)
      goto LABEL_5;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100344690, sub_100182BE4);
LABEL_5:
  v38 = v10;
  v11 = &unk_100354000;
  v12 = v0;
  v13 = Logger.logObject.getter(v12);
  v17 = static os_log_type_t.info.getter(v13, v14, v15, v16);
  if (os_log_type_enabled(v13, v17))
  {
    v18 = swift_slowAlloc(12, -1);
    v37 = v8;
    v19 = (uint8_t *)v18;
    v35 = swift_slowAlloc(32, -1);
    v40[0] = v35;
    v36 = v7;
    *(_DWORD *)v19 = 136315138;
    v34 = v19 + 4;
    v20 = *(_QWORD *)&v12[OBJC_IVAR____TtC10seserviced10UWBSession_peer];
    v21 = swift_retain(v20);
    v22 = UUID.uuidString.getter(v21);
    v24 = v23;
    v25 = v20;
    v11 = (_QWORD *)&unk_100354000;
    swift_release(v25);
    v39 = sub_1001C56EC(v22, v24, v40);
    v7 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v34, v19 + 12);

    v26 = v24;
    v5 = (_QWORD *)&unk_100354000;
    swift_bridgeObjectRelease(v26);
    _os_log_impl((void *)&_mh_execute_header, v13, v17, "Invalidating session for %s", v19, 0xCu);
    v27 = v35;
    swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    v28 = v19;
    v8 = v37;
    swift_slowDealloc(v28, -1, -1);

  }
  else
  {

  }
  objc_msgSend(*(id *)&v12[OBJC_IVAR____TtC10seserviced10UWBSession_session], "invalidate");
  v12[OBJC_IVAR____TtC10seserviced10UWBSession_state] = 1;
  v29 = v11[430];
  v30 = (void *)v5[477];
  *v4 = v30;
  v8(v4, v7, v1);
  v31 = v30;
  LOBYTE(v30) = _dispatchPreconditionTest(_:)(v4);
  v38(v4, v1);
  if ((v30 & 1) != 0)
  {
    swift_beginAccess(v29 + OBJC_IVAR____TtC10seserviced6DSKUWB_activeSessions, v40, 33, 0);
    v32 = (void *)sub_1000D3380(v12);
    swift_endAccess(v40);

  }
  else
  {
    __break(1u);
  }
}

id sub_10018533C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UWBSession();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for UWBSession()
{
  return objc_opt_self(_TtC10seserviced10UWBSession);
}

uint64_t sub_100185424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  void *v13;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  id v25;
  uint64_t result;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  NSString v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t inited;
  unint64_t v42;
  Class isa;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  void *v51;
  uint64_t v52;
  id v53;
  char *v54;
  id v55;
  id v56;
  uint64_t v57;
  id v58;
  objc_class *v59;
  char *v60;
  void *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  objc_super v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  __int16 v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  __int16 v87;

  v71 = a6;
  v72 = a7;
  v69 = a2;
  v70 = a4;
  v73 = a3;
  v17 = type metadata accessor for DispatchPredicate(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17, v19);
  v21 = (uint64_t *)((char *)&v63 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v22 = qword_1003447B8;
  v23 = v13;
  if (v22 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v24 = qword_100354EE8;
  *v21 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v18 + 104))(v21, enum case for DispatchPredicate.onQueue(_:), v17);
  v25 = (id)v24;
  LOBYTE(v24) = _dispatchPreconditionTest(_:)(v21);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v18 + 8))(v21, v17);
  if ((v24 & 1) != 0)
  {
    v65 = a8;
    v68 = a9;
    v27 = &v23[OBJC_IVAR____TtC10seserviced16UWBAlishaSession_onOutgoingMessage];
    *(_QWORD *)v27 = a10;
    *((_QWORD *)v27 + 1) = a11;
    v28 = &v23[OBJC_IVAR____TtC10seserviced16UWBAlishaSession_onSessionHealthUpdate];
    *(_QWORD *)v28 = a12;
    *((_QWORD *)v28 + 1) = a13;
    v66 = a11;
    swift_retain(a11);
    v67 = a13;
    swift_retain(a13);

    UUID.uuidString.getter(v29);
    v31 = v30;
    v32 = objc_allocWithZone((Class)NICarKeyConfiguration);
    v33 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v31);
    v34 = objc_msgSend(v32, "initWithVehicleIdentifier:", v33);

    v83 = 0xD000000000000014;
    v84 = 0x80000001002BA5B0;
    v85 = 0xD000000000000019;
    v86 = 0x80000001002BF0C0;
    v87 = 256;
    sub_10015348C(v35);
    v37 = v36;
    v78 = 0xD000000000000014;
    v79 = 0x80000001002BA5B0;
    v80 = 0xD000000000000027;
    v81 = 0x80000001002BF0E0;
    v82 = 256;
    sub_10015348C(v36);
    v39 = v38;
    if ((v37 & 1) != 0 || (v38 & 1) != 0)
    {
      v40 = sub_100063D3C(&qword_1003460E0);
      inited = swift_initStackObject(v40, &v76);
      *(_OWORD *)(inited + 16) = xmmword_1002888F0;
      v74 = 0xD000000000000017;
      v75 = 0x80000001002BF110;
      AnyHashable.init<A>(_:)(&v74, &type metadata for String, &protocol witness table for String);
      *(_QWORD *)(inited + 96) = &type metadata for Bool;
      *(_BYTE *)(inited + 72) = v37 & 1;
      v74 = 0xD000000000000010;
      v75 = 0x80000001002BF130;
      AnyHashable.init<A>(_:)(&v74, &type metadata for String, &protocol witness table for String);
      *(_QWORD *)(inited + 168) = &type metadata for Bool;
      *(_BYTE *)(inited + 144) = v39 & 1;
      v42 = sub_10017C368(inited);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v42);
      objc_msgSend(v34, "setDebugOptions:", isa);

    }
    v63 = a5;
    v64 = a1;
    *(_QWORD *)&v23[OBJC_IVAR____TtC10seserviced10UWBSession_suspensionReasons] = 0;
    *(_QWORD *)&v23[OBJC_IVAR____TtC10seserviced10UWBSession_configuration] = v34;
    *(_QWORD *)&v23[OBJC_IVAR____TtC10seserviced10UWBSession_peer] = a1;
    v44 = &v23[OBJC_IVAR____TtC10seserviced10UWBSession_onStart];
    v45 = a1;
    v47 = v72;
    v46 = v73;
    *(_QWORD *)v44 = v69;
    *((_QWORD *)v44 + 1) = v46;
    v48 = &v23[OBJC_IVAR____TtC10seserviced10UWBSession_onSuspension];
    *(_QWORD *)v48 = v70;
    *((_QWORD *)v48 + 1) = a5;
    v49 = &v23[OBJC_IVAR____TtC10seserviced10UWBSession_onResumption];
    *(_QWORD *)v49 = v71;
    *((_QWORD *)v49 + 1) = v47;
    v50 = &v23[OBJC_IVAR____TtC10seserviced10UWBSession_onInvalidation];
    v51 = v34;
    v52 = v68;
    *(_QWORD *)v50 = v65;
    *((_QWORD *)v50 + 1) = v52;
    v23[OBJC_IVAR____TtC10seserviced10UWBSession_state] = 0;
    v53 = objc_allocWithZone((Class)NISession);
    v54 = v23;
    v55 = v51;
    swift_retain(v45);
    swift_retain(v46);
    swift_retain(a5);
    swift_retain(v47);
    swift_retain(v52);
    v56 = objc_msgSend(v53, "init");
    *(_QWORD *)&v54[OBJC_IVAR____TtC10seserviced10UWBSession_session] = v56;
    v57 = qword_100354EE8;
    v58 = v56;
    objc_msgSend(v58, "setDelegateQueue:", v57);

    v59 = (objc_class *)type metadata accessor for UWBSession();
    v77.receiver = v54;
    v77.super_class = v59;
    v60 = (char *)objc_msgSendSuper2(&v77, "init");
    v61 = *(void **)&v60[OBJC_IVAR____TtC10seserviced10UWBSession_session];
    v62 = v60;
    objc_msgSend(v61, "setDelegate:", v62);
    sub_100184BA0();

    swift_release(v66);
    swift_release(v67);

    swift_release(v64);
    swift_release(v46);
    swift_release(v63);
    swift_release(v47);
    swift_release(v52);
    return (uint64_t)v62;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100185900(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  id v23;
  char v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  os_log_type_t v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  NSObject *v58;
  uint64_t v59;
  os_log_type_t v60;
  uint8_t *v61;
  unint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v71 = a6;
  v72 = a7;
  v69 = a4;
  v70 = a5;
  v67 = a2;
  v68 = a3;
  v17 = type metadata accessor for DispatchPredicate(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17, v19);
  v21 = (uint64_t *)((char *)&v65 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v22 = (void *)qword_100354EE8;
  *v21 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v18 + 104))(v21, enum case for DispatchPredicate.onQueue(_:), v17);
  v23 = v22;
  v24 = _dispatchPreconditionTest(_:)(v21);
  (*(void (**)(_QWORD *, uint64_t))(v18 + 8))(v21, v17);
  if ((v24 & 1) != 0)
  {
    v66 = a8;
    v73 = v13;
    if (qword_100344690 == -1)
      goto LABEL_5;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100344690, sub_100182BE4);
LABEL_5:
  v25 = swift_retain_n(a1, 2);
  v26 = Logger.logObject.getter(v25);
  v30 = static os_log_type_t.info.getter(v26, v27, v28, v29);
  if (os_log_type_enabled(v26, v30))
  {
    v31 = swift_slowAlloc(12, -1);
    v65 = v14;
    v32 = (uint8_t *)v31;
    v33 = swift_slowAlloc(32, -1);
    v76 = v33;
    *(_DWORD *)v32 = 136315138;
    v34 = swift_retain(a1);
    v35 = UUID.uuidString.getter(v34);
    v37 = v36;
    swift_release(a1);
    v74 = sub_1001C56EC(v35, v37, &v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v32 + 4, v32 + 12);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease(v37);
    _os_log_impl((void *)&_mh_execute_header, v26, v30, "Replacing existing peer with %s", v32, 0xCu);
    swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v32, -1, -1);

  }
  else
  {

    swift_release_n(a1, 2);
  }
  v38 = OBJC_IVAR____TtC10seserviced10UWBSession_peer;
  v39 = v73;
  v40 = static UUID.== infix(_:_:)(*(_QWORD *)(v73 + OBJC_IVAR____TtC10seserviced10UWBSession_peer)+ OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier, *(_QWORD *)(v73 + OBJC_IVAR____TtC10seserviced10UWBSession_peer)+ OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier);
  if ((v40 & 1) != 0)
  {
    v41 = *(_QWORD *)(v39 + v38);
    *(_QWORD *)(v39 + v38) = a1;
    swift_retain(a1);
    swift_release(v41);
    v42 = (_QWORD *)(v39 + OBJC_IVAR____TtC10seserviced10UWBSession_onStart);
    v43 = *(_QWORD *)(v39 + OBJC_IVAR____TtC10seserviced10UWBSession_onStart + 8);
    v44 = v68;
    *v42 = v67;
    v42[1] = v44;
    swift_retain(v44);
    swift_release(v43);
    v45 = (_QWORD *)(v39 + OBJC_IVAR____TtC10seserviced10UWBSession_onSuspension);
    v46 = *(_QWORD *)(v39 + OBJC_IVAR____TtC10seserviced10UWBSession_onSuspension + 8);
    v47 = v70;
    *v45 = v69;
    v45[1] = v47;
    swift_retain(v47);
    swift_release(v46);
    v48 = (_QWORD *)(v39 + OBJC_IVAR____TtC10seserviced10UWBSession_onResumption);
    v49 = *(_QWORD *)(v39 + OBJC_IVAR____TtC10seserviced10UWBSession_onResumption + 8);
    v50 = v72;
    *v48 = v71;
    v48[1] = v50;
    swift_retain(v50);
    swift_release(v49);
    v51 = (_QWORD *)(v39 + OBJC_IVAR____TtC10seserviced10UWBSession_onInvalidation);
    v52 = *(_QWORD *)(v39 + OBJC_IVAR____TtC10seserviced10UWBSession_onInvalidation + 8);
    *v51 = v66;
    v51[1] = a9;
    swift_retain(a9);
    swift_release(v52);
    v53 = (_QWORD *)(v39 + OBJC_IVAR____TtC10seserviced16UWBAlishaSession_onOutgoingMessage);
    v54 = *(_QWORD *)(v39 + OBJC_IVAR____TtC10seserviced16UWBAlishaSession_onOutgoingMessage + 8);
    *v53 = a10;
    v53[1] = a11;
    swift_retain(a11);
    swift_release(v54);
    v55 = (_QWORD *)(v39 + OBJC_IVAR____TtC10seserviced16UWBAlishaSession_onSessionHealthUpdate);
    v56 = *(_QWORD *)(v39 + OBJC_IVAR____TtC10seserviced16UWBAlishaSession_onSessionHealthUpdate + 8);
    *v55 = a12;
    v55[1] = a13;
    swift_retain(a13);
    return swift_release(v56);
  }
  else
  {
    v58 = Logger.logObject.getter(v40);
    v60 = static os_log_type_t.error.getter(v58, v59);
    if (os_log_type_enabled(v58, v60))
    {
      v61 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v61 = 0;
      _os_log_impl((void *)&_mh_execute_header, v58, v60, "Wrong peer", v61, 2u);
      swift_slowDealloc(v61, -1, -1);
    }

    v62 = sub_100198900();
    v63 = swift_allocError(&type metadata for DSKUWB.UWBError, v62, 0, 0);
    *v64 = 2;
    return swift_willThrow(v63);
  }
}

uint64_t sub_100185D80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  id v14;
  uint64_t result;
  uint64_t v16;

  v8 = type metadata accessor for DispatchPredicate(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (uint64_t *)((char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v13 = qword_100354EE8;
  *v12 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8);
  v14 = (id)v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)(v12);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v9 + 8))(v12, v8);
  if ((v13 & 1) != 0)
    return a4(a1, a2, a3);
  __break(1u);
  return result;
}

uint64_t sub_100185E90(uint64_t a1, void *a2, void *a3)
{
  void *v4;
  uint64_t v5;
  void (*v6)(void *, unint64_t, void *);
  id v7;
  unint64_t v8;
  unint64_t v9;
  id v10;

  v4 = a2;
  v6 = *(void (**)(void *, unint64_t, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    swift_retain(v5);
    v7 = v4;
    v4 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v9 = v8;

  }
  else
  {
    swift_retain(v5);
    v9 = 0xF000000000000000;
  }
  v10 = a3;
  v6(v4, v9, a3);

  sub_10006B9B4((uint64_t)v4, v9);
  return swift_release(v5);
}

void sub_100185F24(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;

  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (uint64_t *)((char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v8 = qword_100354EE8;
  *v7 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  v9 = (id)v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  v10 = (*(uint64_t (**)(_QWORD *, uint64_t))(v4 + 8))(v7, v3);
  if ((v8 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    v10 = swift_once(&qword_100344690, sub_100182BE4);
    goto LABEL_7;
  }
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC10seserviced10UWBSession_state) == 4)
    __asm { BR              X10 }
  if (qword_100344690 != -1)
    goto LABEL_11;
LABEL_7:
  v11 = Logger.logObject.getter(v10);
  v13 = static os_log_type_t.error.getter(v11, v12);
  if (os_log_type_enabled(v11, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v13, "Session is not running", v14, 2u);
    swift_slowDealloc(v14, -1, -1);
  }

}

uint64_t sub_100186260()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced16UWBAlishaSession_onOutgoingMessage + 8));
  return swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced16UWBAlishaSession_onSessionHealthUpdate + 8));
}

uint64_t type metadata accessor for UWBAlishaSession()
{
  return objc_opt_self(_TtC10seserviced16UWBAlishaSession);
}

uint64_t sub_1001862F4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  void *v28;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  id v41;
  uint64_t result;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  NSString v57;
  id v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  id v67;
  char *v68;
  id v69;
  id v70;
  uint64_t v71;
  id v72;
  objc_class *v73;
  char *v74;
  void *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  objc_super v94;

  v90 = a5;
  v91 = a8;
  v89 = a3;
  v88 = a2;
  v33 = type metadata accessor for DispatchPredicate(0);
  v34 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33, v35);
  v37 = (uint64_t *)((char *)&v77 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
  v38 = qword_1003447B8;
  v39 = v28;
  if (v38 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v40 = qword_100354EE8;
  *v37 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v34 + 104))(v37, enum case for DispatchPredicate.onQueue(_:), v33);
  v41 = (id)v40;
  LOBYTE(v40) = _dispatchPreconditionTest(_:)(v37);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v34 + 8))(v37, v33);
  if ((v40 & 1) != 0)
  {
    v92 = a4;
    v93 = a6;
    v79 = a10;
    v80 = a12;
    v78 = a9;
    v43 = &v39[OBJC_IVAR____TtC10seserviced14UWBLyonSession_onTimeSync];
    *(_QWORD *)v43 = a11;
    *((_QWORD *)v43 + 1) = a12;
    v44 = &v39[OBJC_IVAR____TtC10seserviced14UWBLyonSession_onM2Message];
    *(_QWORD *)v44 = a13;
    *((_QWORD *)v44 + 1) = a14;
    v86 = a16;
    v87 = a14;
    v45 = &v39[OBJC_IVAR____TtC10seserviced14UWBLyonSession_onM4Message];
    *(_QWORD *)v45 = a15;
    *((_QWORD *)v45 + 1) = a16;
    v46 = &v39[OBJC_IVAR____TtC10seserviced14UWBLyonSession_onResumeResponse];
    *(_QWORD *)v46 = a17;
    *((_QWORD *)v46 + 1) = a18;
    v84 = a20;
    v85 = a18;
    v47 = &v39[OBJC_IVAR____TtC10seserviced14UWBLyonSession_onPauseRequest];
    *(_QWORD *)v47 = a19;
    *((_QWORD *)v47 + 1) = a20;
    v48 = &v39[OBJC_IVAR____TtC10seserviced14UWBLyonSession_onResumeRequest];
    *(_QWORD *)v48 = a21;
    *((_QWORD *)v48 + 1) = a22;
    v82 = a24;
    v83 = a22;
    v49 = &v39[OBJC_IVAR____TtC10seserviced14UWBLyonSession_onRangingStart];
    *(_QWORD *)v49 = a23;
    *((_QWORD *)v49 + 1) = a24;
    v50 = &v39[OBJC_IVAR____TtC10seserviced14UWBLyonSession_onRangingPause];
    *(_QWORD *)v50 = a25;
    *((_QWORD *)v50 + 1) = a26;
    v77 = a7;
    v81 = a26;
    v51 = &v39[OBJC_IVAR____TtC10seserviced14UWBLyonSession_onURSKPrefetch];
    *(_QWORD *)v51 = a27;
    *((_QWORD *)v51 + 1) = a28;
    swift_retain(a12);
    swift_retain(a14);
    swift_retain(a16);
    swift_retain(a18);
    swift_retain(a20);
    swift_retain(a22);
    swift_retain(a24);
    swift_retain(a26);
    swift_retain(a28);

    UUID.uuidString.getter(v52);
    v54 = v53;
    v55 = a1;
    v56 = objc_allocWithZone((Class)NIAcwgConfiguration);
    v57 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v54);
    v58 = objc_msgSend(v56, "initWithLockIdentifier:", v57);

    objc_msgSend(v58, "setLockBtConnHandle:", (unsigned __int16)v88);
    *(_QWORD *)&v39[OBJC_IVAR____TtC10seserviced10UWBSession_suspensionReasons] = 0;
    *(_QWORD *)&v39[OBJC_IVAR____TtC10seserviced10UWBSession_configuration] = v58;
    *(_QWORD *)&v39[OBJC_IVAR____TtC10seserviced10UWBSession_peer] = v55;
    v59 = &v39[OBJC_IVAR____TtC10seserviced10UWBSession_onStart];
    v61 = v92;
    v60 = v93;
    *(_QWORD *)v59 = v89;
    *((_QWORD *)v59 + 1) = v61;
    v62 = &v39[OBJC_IVAR____TtC10seserviced10UWBSession_onSuspension];
    v63 = v91;
    *(_QWORD *)v62 = v90;
    *((_QWORD *)v62 + 1) = v60;
    v64 = &v39[OBJC_IVAR____TtC10seserviced10UWBSession_onResumption];
    *(_QWORD *)v64 = v77;
    *((_QWORD *)v64 + 1) = v63;
    v65 = &v39[OBJC_IVAR____TtC10seserviced10UWBSession_onInvalidation];
    v66 = v79;
    *(_QWORD *)v65 = v78;
    *((_QWORD *)v65 + 1) = v66;
    v39[OBJC_IVAR____TtC10seserviced10UWBSession_state] = 0;
    v67 = objc_allocWithZone((Class)NISession);
    v68 = v39;
    v69 = v58;
    swift_retain(v55);
    swift_retain(v61);
    swift_retain(v60);
    swift_retain(v63);
    swift_retain(v66);
    v70 = objc_msgSend(v67, "init");
    *(_QWORD *)&v68[OBJC_IVAR____TtC10seserviced10UWBSession_session] = v70;
    v71 = qword_100354EE8;
    v72 = v70;
    objc_msgSend(v72, "setDelegateQueue:", v71);

    v73 = (objc_class *)type metadata accessor for UWBSession();
    v94.receiver = v68;
    v94.super_class = v73;
    v74 = (char *)objc_msgSendSuper2(&v94, "init");
    v75 = *(void **)&v74[OBJC_IVAR____TtC10seserviced10UWBSession_session];
    v76 = v74;
    objc_msgSend(v75, "setDelegate:", v76);
    sub_100184BA0();

    swift_release(v80);
    swift_release(v87);
    swift_release(v86);
    swift_release(v85);
    swift_release(v84);
    swift_release(v83);
    swift_release(v82);
    swift_release(v81);
    swift_release(a28);

    swift_release(v55);
    swift_release(v92);
    swift_release(v93);
    swift_release(v63);
    swift_release(v66);
    return (uint64_t)v76;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100186788()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced14UWBLyonSession_onM2Message + 8));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced14UWBLyonSession_onM4Message + 8));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced14UWBLyonSession_onResumeResponse + 8));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced14UWBLyonSession_onTimeSync + 8));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced14UWBLyonSession_onPauseRequest + 8));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced14UWBLyonSession_onResumeRequest + 8));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced14UWBLyonSession_onRangingStart + 8));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced14UWBLyonSession_onRangingPause + 8));
  return swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced14UWBLyonSession_onURSKPrefetch + 8));
}

uint64_t type metadata accessor for UWBLyonSession()
{
  return objc_opt_self(_TtC10seserviced14UWBLyonSession);
}

uint64_t sub_100186A94(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;

  if ((a1 & 1) == 0)
  {
    v2 = _swiftEmptyArrayStorage;
    if ((a1 & 2) == 0)
      goto LABEL_12;
    goto LABEL_7;
  }
  v2 = sub_1001C4590(0, 1, 1, _swiftEmptyArrayStorage);
  v4 = v2[2];
  v3 = v2[3];
  if (v4 >= v3 >> 1)
    v2 = sub_1001C4590((_QWORD *)(v3 > 1), v4 + 1, 1, v2);
  v2[2] = v4 + 1;
  v5 = &v2[2 * v4];
  v5[4] = 0xD000000000000015;
  v5[5] = 0x80000001002BF020;
  if ((a1 & 2) != 0)
  {
LABEL_7:
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_1001C4590(0, v2[2] + 1, 1, v2);
    v7 = v2[2];
    v6 = v2[3];
    if (v7 >= v6 >> 1)
      v2 = sub_1001C4590((_QWORD *)(v6 > 1), v7 + 1, 1, v2);
    v2[2] = v7 + 1;
    v8 = &v2[2 * v7];
    v8[4] = 0xD000000000000012;
    v8[5] = 0x80000001002BF000;
  }
LABEL_12:
  if ((a1 & 4) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_1001C4590(0, v2[2] + 1, 1, v2);
    v10 = v2[2];
    v9 = v2[3];
    if (v10 >= v9 >> 1)
      v2 = sub_1001C4590((_QWORD *)(v9 > 1), v10 + 1, 1, v2);
    v2[2] = v10 + 1;
    v11 = &v2[2 * v10];
    v11[4] = 0xD00000000000001CLL;
    v11[5] = 0x80000001002BEFE0;
    if ((a1 & 8) == 0)
    {
LABEL_14:
      if ((a1 & 0x10) == 0)
        goto LABEL_15;
      goto LABEL_29;
    }
  }
  else if ((a1 & 8) == 0)
  {
    goto LABEL_14;
  }
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_1001C4590(0, v2[2] + 1, 1, v2);
  v13 = v2[2];
  v12 = v2[3];
  if (v13 >= v12 >> 1)
    v2 = sub_1001C4590((_QWORD *)(v12 > 1), v13 + 1, 1, v2);
  v2[2] = v13 + 1;
  v14 = &v2[2 * v13];
  v14[4] = 0xD000000000000014;
  v14[5] = 0x80000001002BEFC0;
  if ((a1 & 0x10) == 0)
  {
LABEL_15:
    if ((a1 & 0x20) == 0)
      goto LABEL_16;
    goto LABEL_34;
  }
LABEL_29:
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_1001C4590(0, v2[2] + 1, 1, v2);
  v16 = v2[2];
  v15 = v2[3];
  if (v16 >= v15 >> 1)
    v2 = sub_1001C4590((_QWORD *)(v15 > 1), v16 + 1, 1, v2);
  v2[2] = v16 + 1;
  v17 = (char *)&v2[2 * v16];
  strcpy(v17 + 32, "errorHandling");
  *((_WORD *)v17 + 23) = -4864;
  if ((a1 & 0x20) == 0)
  {
LABEL_16:
    if ((a1 & 0x40) == 0)
      goto LABEL_17;
    goto LABEL_39;
  }
LABEL_34:
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_1001C4590(0, v2[2] + 1, 1, v2);
  v19 = v2[2];
  v18 = v2[3];
  if (v19 >= v18 >> 1)
    v2 = sub_1001C4590((_QWORD *)(v18 > 1), v19 + 1, 1, v2);
  v2[2] = v19 + 1;
  v20 = (char *)&v2[2 * v19];
  strcpy(v20 + 32, "systemNotReady");
  v20[47] = -18;
  if ((a1 & 0x40) == 0)
  {
LABEL_17:
    if ((a1 & 0x8000000000000000) == 0)
      goto LABEL_49;
    goto LABEL_44;
  }
LABEL_39:
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_1001C4590(0, v2[2] + 1, 1, v2);
  v22 = v2[2];
  v21 = v2[3];
  if (v22 >= v21 >> 1)
    v2 = sub_1001C4590((_QWORD *)(v21 > 1), v22 + 1, 1, v2);
  v2[2] = v22 + 1;
  v23 = &v2[2 * v22];
  v23[4] = 0xD00000000000001CLL;
  v23[5] = 0x80000001002BEFA0;
  if (a1 < 0)
  {
LABEL_44:
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_1001C4590(0, v2[2] + 1, 1, v2);
    v25 = v2[2];
    v24 = v2[3];
    if (v25 >= v24 >> 1)
      v2 = sub_1001C4590((_QWORD *)(v24 > 1), v25 + 1, 1, v2);
    v2[2] = v25 + 1;
    v26 = &v2[2 * v25];
    v26[4] = 0x6E776F6E6B6E75;
    v26[5] = 0xE700000000000000;
  }
LABEL_49:
  v27 = sub_100063D3C((uint64_t *)&unk_100346060);
  v28 = sub_10006B86C();
  v29 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v27, v28);
  swift_bridgeObjectRelease(v2);
  return v29;
}

uint64_t sub_100186F40()
{
  uint64_t *v0;

  return sub_100186A94(*v0);
}

uint64_t sub_100186F48@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = sub_100197C90(a1);
  result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

void sub_10018707C(void *a1, uint64_t a2, void *a3, void *a4, void *a5, _QWORD *a6)
{
  id v10;
  id v11;
  id v12;
  id v13;

  v10 = a3;
  v11 = a4;
  v12 = a1;
  v13 = a5;
  sub_100199B64((uint64_t)a4, (uint64_t)a5, a6);

}

char *sub_100187338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v8;
  char *v9;
  objc_class *ObjectType;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  id v23;
  char *v24;
  id v25;
  uint64_t v26;
  id v27;
  char *v28;
  void *v29;
  char *v30;
  id v31;
  id v32;
  objc_super v34;

  v9 = v8;
  ObjectType = (objc_class *)swift_getObjectType(v9);
  v19 = &v9[OBJC_IVAR____TtC10seservicedP33_4D3BC54BA96E8438A66520691EE354E617UWBPrewarmSession_onStart];
  *(_QWORD *)v19 = a1;
  *((_QWORD *)v19 + 1) = a2;
  v20 = &v9[OBJC_IVAR____TtC10seservicedP33_4D3BC54BA96E8438A66520691EE354E617UWBPrewarmSession_onStateUpdate];
  *(_QWORD *)v20 = a3;
  *((_QWORD *)v20 + 1) = a4;
  v21 = &v9[OBJC_IVAR____TtC10seservicedP33_4D3BC54BA96E8438A66520691EE354E617UWBPrewarmSession_onRangingLimitUpdate];
  *(_QWORD *)v21 = a5;
  *((_QWORD *)v21 + 1) = a6;
  v22 = &v9[OBJC_IVAR____TtC10seservicedP33_4D3BC54BA96E8438A66520691EE354E617UWBPrewarmSession_onInvalidation];
  *(_QWORD *)v22 = a7;
  *((_QWORD *)v22 + 1) = a8;
  v23 = objc_allocWithZone((Class)NISession);
  v24 = v9;
  swift_retain(a2);
  swift_retain(a4);
  swift_retain(a6);
  swift_retain(a8);
  v25 = objc_msgSend(v23, "init");
  *(_QWORD *)&v24[OBJC_IVAR____TtC10seservicedP33_4D3BC54BA96E8438A66520691EE354E617UWBPrewarmSession_session] = v25;
  v26 = qword_1003447B8;
  v27 = v25;
  if (v26 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  objc_msgSend(v27, "setDelegateQueue:", qword_100354EE8);

  v34.receiver = v24;
  v34.super_class = ObjectType;
  v28 = (char *)objc_msgSendSuper2(&v34, "init");
  v29 = *(void **)&v28[OBJC_IVAR____TtC10seservicedP33_4D3BC54BA96E8438A66520691EE354E617UWBPrewarmSession_session];
  v30 = v28;
  objc_msgSend(v29, "setDelegate:", v30);
  v31 = objc_msgSend(objc_allocWithZone((Class)NISystemConfiguration), "init");
  objc_msgSend(v31, "setPrewarmUWB:", 1);
  objc_msgSend(v31, "setPrewarmSecureElementChannel:", 1);
  v32 = v29;
  objc_msgSend(v32, "runWithConfiguration:", v31);

  swift_release(a2);
  swift_release(a4);
  swift_release(a6);
  swift_release(a8);
  return v30;
}

uint64_t type metadata accessor for UWBPrewarmSession()
{
  return objc_opt_self(_TtC10seservicedP33_4D3BC54BA96E8438A66520691EE354E617UWBPrewarmSession);
}

uint64_t storeEnumTagSinglePayload for UWBAlishaSession.SessionHealth(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100187968 + 4 * byte_10028B765[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10018799C + 4 * byte_10028B760[v4]))();
}

uint64_t sub_10018799C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001879A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001879ACLL);
  return result;
}

uint64_t sub_1001879B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001879C0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1001879C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001879CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UWBAlishaSession.SessionHealth()
{
  return &type metadata for UWBAlishaSession.SessionHealth;
}

uint64_t getEnumTagSinglePayload for UWBSession.State(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for UWBSession.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_100187AC4 + 4 * byte_10028B76F[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_100187AF8 + 4 * byte_10028B76A[v4]))();
}

uint64_t sub_100187AF8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100187B00(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100187B08);
  return result;
}

uint64_t sub_100187B14(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100187B1CLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_100187B20(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100187B28(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UWBSession.State()
{
  return &type metadata for UWBSession.State;
}

ValueMetadata *type metadata accessor for UWBSession.SuspensionReasons()
{
  return &type metadata for UWBSession.SuspensionReasons;
}

ValueMetadata *type metadata accessor for DSKUWB.Exceptions()
{
  return &type metadata for DSKUWB.Exceptions;
}

unint64_t sub_100187B68()
{
  unint64_t result;

  result = qword_100348898;
  if (!qword_100348898)
  {
    result = swift_getWitnessTable(&unk_10028B880, &type metadata for DSKUWB.Exceptions);
    atomic_store(result, (unint64_t *)&qword_100348898);
  }
  return result;
}

unint64_t sub_100187BB0()
{
  unint64_t result;

  result = qword_1003488A0;
  if (!qword_1003488A0)
  {
    result = swift_getWitnessTable(&unk_10028B850, &type metadata for DSKUWB.Exceptions);
    atomic_store(result, (unint64_t *)&qword_1003488A0);
  }
  return result;
}

unint64_t sub_100187BF8()
{
  unint64_t result;

  result = qword_1003488A8;
  if (!qword_1003488A8)
  {
    result = swift_getWitnessTable(&unk_10028B8A8, &type metadata for DSKUWB.Exceptions);
    atomic_store(result, (unint64_t *)&qword_1003488A8);
  }
  return result;
}

unint64_t sub_100187C40()
{
  unint64_t result;

  result = qword_1003488B0;
  if (!qword_1003488B0)
  {
    result = swift_getWitnessTable(&unk_10028B8E0, &type metadata for DSKUWB.Exceptions);
    atomic_store(result, (unint64_t *)&qword_1003488B0);
  }
  return result;
}

unint64_t sub_100187C88()
{
  unint64_t result;

  result = qword_1003488B8;
  if (!qword_1003488B8)
  {
    result = swift_getWitnessTable(&unk_10028BA10, &type metadata for UWBSession.SuspensionReasons);
    atomic_store(result, (unint64_t *)&qword_1003488B8);
  }
  return result;
}

unint64_t sub_100187CD0()
{
  unint64_t result;

  result = qword_1003488C0;
  if (!qword_1003488C0)
  {
    result = swift_getWitnessTable(&unk_10028B9E0, &type metadata for UWBSession.SuspensionReasons);
    atomic_store(result, (unint64_t *)&qword_1003488C0);
  }
  return result;
}

unint64_t sub_100187D18()
{
  unint64_t result;

  result = qword_1003488C8;
  if (!qword_1003488C8)
  {
    result = swift_getWitnessTable(&unk_10028BA38, &type metadata for UWBSession.SuspensionReasons);
    atomic_store(result, (unint64_t *)&qword_1003488C8);
  }
  return result;
}

unint64_t sub_100187D60()
{
  unint64_t result;

  result = qword_1003488D0;
  if (!qword_1003488D0)
  {
    result = swift_getWitnessTable(&unk_10028BA70, &type metadata for UWBSession.SuspensionReasons);
    atomic_store(result, (unint64_t *)&qword_1003488D0);
  }
  return result;
}

unint64_t sub_100187DA8()
{
  unint64_t result;

  result = qword_1003488D8;
  if (!qword_1003488D8)
  {
    result = swift_getWitnessTable(&unk_10028BBD8, &type metadata for UWBSession.State);
    atomic_store(result, (unint64_t *)&qword_1003488D8);
  }
  return result;
}

unint64_t sub_100187DF0()
{
  unint64_t result;

  result = qword_1003488E0;
  if (!qword_1003488E0)
  {
    result = swift_getWitnessTable(&unk_10028BC40, &type metadata for UWBAlishaSession.SessionHealth);
    atomic_store(result, (unint64_t *)&qword_1003488E0);
  }
  return result;
}

unint64_t sub_100187E34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for UUID(0);
  v6 = sub_1000C69C4((unint64_t *)&unk_100347730, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_1001892E0(a1, v7, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (unint64_t *)&qword_100346150, (uint64_t)&protocol conformance descriptor for UUID);
}

uint64_t sub_100187ED0(uint64_t a1, uint64_t a2)
{
  return sub_100187F80(a1, a2, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1001882A0);
}

unint64_t sub_100187EE4(Swift::UInt a1)
{
  Swift::Int v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4);
  Hasher._combine(_:)(a1);
  v2 = Hasher._finalize()();
  return sub_100188380(a1, v2);
}

unint64_t sub_100187F3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_10018841C(a1, v4);
}

uint64_t sub_100187F6C(uint64_t a1, uint64_t a2)
{
  return sub_100187F80(a1, a2, (void (*)(_QWORD *, uint64_t, uint64_t))&Data.hash(into:), sub_1001884E0);
}

uint64_t sub_100187F80(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *, uint64_t, uint64_t), uint64_t (*a4)(uint64_t, uint64_t, Swift::Int))
{
  Swift::Int v7;
  _QWORD v10[9];

  Hasher.init(_seed:)(v10);
  a3(v10, a1, a2);
  v7 = Hasher._finalize()();
  return a4(a1, a2, v7);
}

unint64_t sub_100187FF8(unsigned __int16 a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = static Hasher._hash(seed:bytes:count:)(*(_QWORD *)(v1 + 40), a1, 2);
  return sub_100188E70(a1, v3);
}

unint64_t sub_10018802C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Int v5;
  _QWORD v7[9];

  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v4 = v3;
  Hasher.init(_seed:)(v7);
  String.hash(into:)(v7, v2, v4);
  v5 = Hasher._finalize()();
  swift_bridgeObjectRelease(v4);
  return sub_100188F10(a1, v5);
}

unint64_t sub_1001880AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for CredentialType(0);
  v6 = sub_1000C69C4(&qword_100348B10, 255, (uint64_t (*)(uint64_t))&type metadata accessor for CredentialType, (uint64_t)&protocol conformance descriptor for CredentialType);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_1001892E0(a1, v7, (uint64_t (*)(uint64_t))&type metadata accessor for CredentialType, &qword_100348B18, (uint64_t)&protocol conformance descriptor for CredentialType);
}

unint64_t sub_100188148(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7);
  type metadata accessor for CFString(0);
  v3 = v2;
  v4 = sub_1000C69C4(&qword_100348A50, 255, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_100288830);
  _CFObject.hash(into:)(v7, v3, v4);
  v5 = Hasher._finalize()();
  return sub_100189084(a1, v5);
}

unint64_t sub_1001881D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_1001891C8(a1, v4);
}

unint64_t sub_100188204(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for URL(0);
  v6 = sub_1000C69C4(&qword_100348AD0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_1001892E0(a1, v7, (uint64_t (*)(uint64_t))&type metadata accessor for URL, &qword_100348AD8, (uint64_t)&protocol conformance descriptor for URL);
}

unint64_t sub_1001882A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = v10[1];
    v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      do
      {
        v6 = (v6 + 1) & v13;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v14 = (_QWORD *)(v9 + 16 * v6);
        v15 = v14[1];
        v16 = *v14 == a1 && v15 == a2;
      }
      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_100188380(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_10018841C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_1001988C4(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_100098C48((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

uint64_t sub_1001884E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v4 = -1 << *(_BYTE *)(v3 + 32);
  v5 = a3 & ~v4;
  if (((*(_QWORD *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
    __asm { BR              X8 }
  return a3 & ~v4;
}

unint64_t sub_100188E70(unsigned __int16 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(unsigned __int16 *)(v7 + 2 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(unsigned __int16 *)(v7 + 2 * result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_100188F10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2);
      return v5;
    }
    v13 = v11;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      v15 = ~v4;
      v5 = (v5 + 1) & v15;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
          v9 = v17;
          v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v16 == v18 && v9 == v19)
            break;
          v21 = v19;
          v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            v5 = (v5 + 1) & v15;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_100189084(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  char v13;
  uint64_t v14;
  id v15;
  char v16;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v6 = v2;
    type metadata accessor for CFString(0);
    v9 = v8;
    v10 = *(void **)(*(_QWORD *)(v6 + 48) + 8 * i);
    v11 = sub_1000C69C4(&qword_100348A50, 255, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_100288830);
    v12 = v10;
    v13 = static _CFObject.== infix(_:_:)(v12, a1, v9, v11);

    if ((v13 & 1) == 0)
    {
      v14 = ~v4;
      for (i = (i + 1) & v14; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v14)
      {
        v15 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * i);
        v16 = static _CFObject.== infix(_:_:)(v15, a1, v9, v11);

        if ((v16 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t sub_1001891C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  id v6;
  char v7;
  uint64_t v8;
  id v9;
  char v10;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    sub_10006C25C(0, (unint64_t *)&unk_100348970, CBUUID_ptr);
    v6 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
    v7 = static NSObject.== infix(_:_:)(v6);

    if ((v7 & 1) == 0)
    {
      v8 = ~v4;
      for (i = (i + 1) & v8; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v8)
      {
        v9 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
        v10 = static NSObject.== infix(_:_:)(v9);

        if ((v10 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t sub_1001892E0(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, unint64_t, uint64_t);
  uint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  unint64_t *v22;
  uint64_t v23;

  v22 = a4;
  v23 = a5;
  v6 = v5;
  v20 = a1;
  v21 = a3;
  v8 = a3(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v11 = (char *)&v20 - v10;
  v12 = -1 << *(_BYTE *)(v6 + 32);
  v13 = a2 & ~v12;
  if (((*(_QWORD *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v14 = ~v12;
    v15 = *(_QWORD *)(v9 + 72);
    v16 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    do
    {
      v16(v11, *(_QWORD *)(v6 + 48) + v15 * v13, v8);
      v17 = sub_1000C69C4(v22, 255, v21, v23);
      v18 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v20, v8, v17);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      if ((v18 & 1) != 0)
        break;
      v13 = (v13 + 1) & v14;
    }
    while (((*(_QWORD *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
  }
  return v13;
}

uint64_t sub_100189414(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, unint64_t, uint64_t);
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  int64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;

  v55 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55, v6);
  v54 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = v2;
  v8 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100063D3C(&qword_100348930);
  v9 = static _DictionaryStorage.resize(original:capacity:move:)(v8, a1, a2);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
    result = swift_release(v8);
    v44 = v47;
LABEL_44:
    *v44 = v10;
    return result;
  }
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 64);
  v49 = (_QWORD *)(v8 + 64);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v48 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 64;
  result = swift_retain(v8);
  v17 = 0;
  HIDWORD(v46) = a2;
  v18 = 16;
  if ((a2 & 1) != 0)
    v18 = 32;
  v50 = v8;
  v51 = v18;
  while (1)
  {
    if (v14)
    {
      v22 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v23 = v22 | (v17 << 6);
      goto LABEL_26;
    }
    v24 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    if (v24 >= v48)
    {
      swift_release(v8);
      v44 = v47;
      v25 = v49;
      if ((v46 & 0x100000000) != 0)
      {
LABEL_39:
        v45 = 1 << *(_BYTE *)(v8 + 32);
        if (v45 >= 64)
          bzero(v25, ((unint64_t)(v45 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
        else
          *v25 = -1 << v45;
        *(_QWORD *)(v8 + 16) = 0;
      }
LABEL_43:
      result = swift_release(v8);
      goto LABEL_44;
    }
    v25 = v49;
    v26 = v49[v24];
    ++v17;
    if (!v26)
    {
      v17 = v24 + 1;
      if (v24 + 1 >= v48)
        goto LABEL_36;
      v26 = v49[v17];
      if (!v26)
        break;
    }
LABEL_25:
    v14 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v17 << 6);
LABEL_26:
    v28 = *(_QWORD *)(v5 + 72);
    v29 = v5;
    v30 = *(void (**)(char *, unint64_t, uint64_t))(v5 + v51);
    v31 = v55;
    v30(v54, *(_QWORD *)(v8 + 48) + v28 * v23, v55);
    v32 = (uint64_t *)(*(_QWORD *)(v8 + 56) + 24 * v23);
    v33 = v32[2];
    v34 = *v32;
    v52 = v32[1];
    v53 = v33;
    v35 = *(_QWORD *)(v10 + 40);
    v36 = sub_1000C69C4((unint64_t *)&unk_100347730, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v35, v31, v36);
    v37 = -1 << *(_BYTE *)(v10 + 32);
    v38 = result & ~v37;
    v39 = v38 >> 6;
    if (((-1 << v38) & ~*(_QWORD *)(v15 + 8 * (v38 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v38) & ~*(_QWORD *)(v15 + 8 * (v38 >> 6)))) | v38 & 0x7FFFFFFFFFFFFFC0;
      v5 = v29;
    }
    else
    {
      v40 = 0;
      v41 = (unint64_t)(63 - v37) >> 6;
      v5 = v29;
      do
      {
        if (++v39 == v41 && (v40 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v42 = v39 == v41;
        if (v39 == v41)
          v39 = 0;
        v40 |= v42;
        v43 = *(_QWORD *)(v15 + 8 * v39);
      }
      while (v43 == -1);
      v19 = __clz(__rbit64(~v43)) + (v39 << 6);
    }
    *(_QWORD *)(v15 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(_QWORD *)(v10 + 48) + v28 * v19, v54, v55);
    v20 = (_QWORD *)(*(_QWORD *)(v10 + 56) + 24 * v19);
    v21 = v52;
    *v20 = v34;
    v20[1] = v21;
    v20[2] = v53;
    ++*(_QWORD *)(v10 + 16);
    v8 = v50;
  }
  v27 = v24 + 2;
  if (v27 >= v48)
  {
LABEL_36:
    swift_release(v8);
    v44 = v47;
    if ((v46 & 0x100000000) != 0)
      goto LABEL_39;
    goto LABEL_43;
  }
  v26 = v49[v27];
  if (v26)
  {
    v17 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v17 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v17 >= v48)
      goto LABEL_36;
    v26 = v49[v17];
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_46:
  __break(1u);
  return result;
}

uint64_t sub_1001897D4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  _QWORD *v36;
  _QWORD v37[9];
  _OWORD v38[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100063D3C(&qword_1003461B0);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v34 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v36 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    result = swift_retain(v5);
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v18 = v17 | (v14 << 6);
      }
      else
      {
        v19 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }
        if (v19 >= v35)
          goto LABEL_37;
        v20 = v36[v19];
        ++v14;
        if (!v20)
        {
          v14 = v19 + 1;
          if (v19 + 1 >= v35)
            goto LABEL_37;
          v20 = v36[v14];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v35)
            {
LABEL_37:
              swift_release(v5);
              v3 = v34;
              if ((a2 & 1) != 0)
              {
                v33 = 1 << *(_BYTE *)(v5 + 32);
                if (v33 >= 64)
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v33;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v20 = v36[v21];
            if (!v20)
            {
              while (1)
              {
                v14 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_44;
                if (v14 >= v35)
                  goto LABEL_37;
                v20 = v36[v14];
                ++v21;
                if (v20)
                  goto LABEL_24;
              }
            }
            v14 = v21;
          }
        }
LABEL_24:
        v11 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v14 << 6);
      }
      v22 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v18);
      v24 = *v22;
      v23 = v22[1];
      v25 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v18);
      if ((a2 & 1) != 0)
      {
        sub_10006C2B4(v25, v38);
      }
      else
      {
        sub_100096CB0((uint64_t)v25, (uint64_t)v38);
        swift_bridgeObjectRetain(v23);
      }
      Hasher.init(_seed:)(v37);
      String.hash(into:)(v37, v24, v23);
      result = Hasher._finalize()();
      v26 = -1 << *(_BYTE *)(v8 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v12 + 8 * v28);
        }
        while (v32 == -1);
        v15 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v15);
      *v16 = v24;
      v16[1] = v23;
      result = (uint64_t)sub_10006C2B4(v38, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v15));
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_100189AD0(uint64_t a1, uint64_t a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  Swift::Int v5;
  uint64_t v6;
  Swift::Int result;
  Swift::Int v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt v20;
  __int128 *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  Swift::Int *v30;
  int64_t v31;
  _QWORD *v32;
  uint64_t v33[9];
  __int128 v34[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100063D3C((uint64_t *)&unk_1003489A0);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 0;
    v32 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v30 = v3;
    v31 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v15 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v16 = v15 | (v9 << 6);
      }
      else
      {
        v17 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v17 >= v31)
          goto LABEL_37;
        v18 = v32[v17];
        ++v9;
        if (!v18)
        {
          v9 = v17 + 1;
          if (v17 + 1 >= v31)
            goto LABEL_37;
          v18 = v32[v9];
          if (!v18)
          {
            v19 = v17 + 2;
            if (v19 >= v31)
            {
LABEL_37:
              if ((a2 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v30;
                goto LABEL_44;
              }
              v29 = 1 << *(_BYTE *)(v5 + 32);
              if (v29 >= 64)
                bzero(v32, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v32 = -1 << v29;
              v3 = v30;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v18 = v32[v19];
            if (!v18)
            {
              while (1)
              {
                v9 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_46;
                if (v9 >= v31)
                  goto LABEL_37;
                v18 = v32[v9];
                ++v19;
                if (v18)
                  goto LABEL_24;
              }
            }
            v9 = v19;
          }
        }
LABEL_24:
        v12 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v9 << 6);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v16);
      v21 = (__int128 *)(*(_QWORD *)(v5 + 56) + 40 * v16);
      if ((a2 & 1) != 0)
        sub_1000DB160(v21, (uint64_t)v34);
      else
        sub_1000E504C((uint64_t)v21, (uint64_t)v34);
      Hasher.init(_seed:)(v33);
      Hasher._combine(_:)(v20);
      result = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v8 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_45;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v14) = v20;
      result = sub_1000DB160(v34, *(_QWORD *)(v8 + 56) + 40 * v14);
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
LABEL_44:
  *v3 = v8;
  return result;
}

Swift::Int sub_100189DAC(uint64_t a1, uint64_t a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  Swift::Int v5;
  uint64_t v6;
  Swift::Int result;
  Swift::Int v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  Swift::Int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  Swift::UInt v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  Swift::Int *v33;
  char v34;
  _QWORD *v35;
  uint64_t v36[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100063D3C(&qword_1003488E8);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v34 = a2;
    v33 = v3;
    v9 = 0;
    v35 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v18 = v17 | (v9 << 6);
      }
      else
      {
        v19 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v19 >= v13)
          goto LABEL_34;
        v20 = v35[v19];
        ++v9;
        if (!v20)
        {
          v9 = v19 + 1;
          if (v19 + 1 >= v13)
            goto LABEL_34;
          v20 = v35[v9];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_34:
              if ((v34 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v33;
                goto LABEL_41;
              }
              v32 = 1 << *(_BYTE *)(v5 + 32);
              if (v32 >= 64)
                bzero(v35, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v35 = -1 << v32;
              v3 = v33;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v35[v21];
            if (!v20)
            {
              while (1)
              {
                v9 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_43;
                if (v9 >= v13)
                  goto LABEL_34;
                v20 = v35[v9];
                ++v21;
                if (v20)
                  goto LABEL_24;
              }
            }
            v9 = v21;
          }
        }
LABEL_24:
        v12 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v9 << 6);
      }
      v22 = 8 * v18;
      v23 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v22);
      v24 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v22);
      Hasher.init(_seed:)(v36);
      Hasher._combine(_:)(v23);
      result = Hasher._finalize()();
      v25 = -1 << *(_BYTE *)(v8 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = 8 * v15;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + v16) = v23;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + v16) = v24;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
LABEL_41:
  *v3 = v8;
  return result;
}

Swift::Int sub_10018A078(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  _QWORD *v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  __int128 *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  _QWORD v37[9];
  __int128 v38[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100063D3C(&qword_1003489F0);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain(v5);
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v18 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v19 = v18 | (v15 << 6);
      goto LABEL_25;
    }
    v20 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }
    if (v20 >= v12)
      break;
    v21 = (_QWORD *)(v5 + 64);
    v22 = *(_QWORD *)(v35 + 8 * v20);
    ++v15;
    if (!v22)
    {
      v15 = v20 + 1;
      if (v20 + 1 >= v12)
        goto LABEL_37;
      v22 = *(_QWORD *)(v35 + 8 * v15);
      if (!v22)
      {
        v23 = v20 + 2;
        if (v23 >= v12)
        {
LABEL_37:
          swift_release(v5);
          if ((a2 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v22 = *(_QWORD *)(v35 + 8 * v23);
        if (!v22)
        {
          while (1)
          {
            v15 = v23 + 1;
            if (__OFADD__(v23, 1))
              goto LABEL_46;
            if (v15 >= v12)
              goto LABEL_37;
            v22 = *(_QWORD *)(v35 + 8 * v15);
            ++v23;
            if (v22)
              goto LABEL_24;
          }
        }
        v15 = v23;
      }
    }
LABEL_24:
    v11 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v15 << 6);
LABEL_25:
    v24 = *(_QWORD *)(v5 + 48);
    v25 = (__int128 *)(*(_QWORD *)(v5 + 56) + 40 * v19);
    v26 = *(_QWORD *)(v24 + 16 * v19 + 8);
    v36 = *(_OWORD *)(v24 + 16 * v19);
    if ((a2 & 1) != 0)
    {
      sub_1000DB160(v25, (uint64_t)v38);
    }
    else
    {
      sub_1000E504C((uint64_t)v25, (uint64_t)v38);
      sub_100063C8C(v36, v26);
    }
    Hasher.init(_seed:)(v37);
    Data.hash(into:)(v37, v36, v26);
    result = Hasher._finalize()();
    v27 = -1 << *(_BYTE *)(v8 + 32);
    v28 = result & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v13 + 8 * (v28 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v13 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      v17 = v36;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v27) >> 6;
      v17 = v36;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v32 = v29 == v31;
        if (v29 == v31)
          v29 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v13 + 8 * v29);
      }
      while (v33 == -1);
      v16 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    *(_OWORD *)(*(_QWORD *)(v8 + 48) + 16 * v16) = v17;
    result = sub_1000DB160(v38, *(_QWORD *)(v8 + 56) + 40 * v16);
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v21 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v21, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v21 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_10018A390(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  _QWORD v41[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100063D3C(&qword_100348960);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v38 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v36 = v3;
  v37 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v14 << 6);
      goto LABEL_34;
    }
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v37)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v38 + 8 * v23);
    ++v14;
    if (!v25)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v37)
        goto LABEL_36;
      v25 = *(_QWORD *)(v38 + 8 * v14);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v37)
        {
LABEL_36:
          swift_release(v5);
          v3 = v36;
          if ((a2 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v38 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v14 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v14 >= v37)
              goto LABEL_36;
            v25 = *(_QWORD *)(v38 + 8 * v14);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v14 = v26;
      }
    }
LABEL_33:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_34:
    v31 = *(_OWORD *)(*(_QWORD *)(v5 + 48) + 16 * v22);
    v32 = *(_QWORD *)(v5 + 56) + 24 * v22;
    v33 = *(_QWORD *)v32;
    v39 = *(_OWORD *)(v32 + 8);
    v40 = v31;
    v34 = *((_QWORD *)&v31 + 1);
    if ((a2 & 1) == 0)
    {
      sub_100063C8C(v31, *((unint64_t *)&v31 + 1));
      sub_100063C8C(v33, v39);
    }
    Hasher.init(_seed:)(v41);
    Data.hash(into:)(v41, v40, v34);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      v19 = v40;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v15) >> 6;
      v19 = v40;
      do
      {
        if (++v17 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v17 == v28;
        if (v17 == v28)
          v17 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v30 == -1);
      v18 = __clz(__rbit64(~v30)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_OWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18) = v19;
    v20 = *(_QWORD *)(v8 + 56) + 24 * v18;
    *(_QWORD *)v20 = v33;
    *(_OWORD *)(v20 + 8) = v39;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v36;
  v24 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_10018A6C4(uint64_t a1, uint64_t a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  Swift::Int v5;
  uint64_t v6;
  Swift::Int result;
  Swift::Int v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  Swift::UInt v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  Swift::Int *v33;
  int64_t v34;
  _QWORD *v35;
  char v36;
  uint64_t v37[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100063D3C(&qword_1003489C8);
  v36 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v33 = v3;
    v9 = 0;
    v35 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v34 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v9 << 6);
      }
      else
      {
        v21 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v21 >= v34)
          goto LABEL_36;
        v22 = v35[v21];
        ++v9;
        if (!v22)
        {
          v9 = v21 + 1;
          if (v21 + 1 >= v34)
            goto LABEL_36;
          v22 = v35[v9];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v34)
            {
LABEL_36:
              if ((v36 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v33;
                goto LABEL_43;
              }
              v32 = 1 << *(_BYTE *)(v5 + 32);
              if (v32 >= 64)
                bzero(v35, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v35 = -1 << v32;
              v3 = v33;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v22 = v35[v23];
            if (!v22)
            {
              while (1)
              {
                v9 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_45;
                if (v9 >= v34)
                  goto LABEL_36;
                v22 = v35[v9];
                ++v23;
                if (v22)
                  goto LABEL_33;
              }
            }
            v9 = v23;
          }
        }
LABEL_33:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v9 << 6);
      }
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v20);
      v29 = *(_QWORD *)(v5 + 56) + 16 * v20;
      v30 = *(_QWORD *)v29;
      v31 = *(_BYTE *)(v29 + 8);
      if ((v36 & 1) == 0)
        swift_bridgeObjectRetain(v30);
      Hasher.init(_seed:)(v37);
      Hasher._combine(_:)(v28);
      result = Hasher._finalize()();
      v14 = -1 << *(_BYTE *)(v8 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v26 = v16 == v25;
          if (v16 == v25)
            v16 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v17) = v28;
      v18 = *(_QWORD *)(v8 + 56) + 16 * v17;
      *(_QWORD *)v18 = v30;
      *(_BYTE *)(v18 + 8) = v31;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
LABEL_43:
  *v3 = v8;
  return result;
}

Swift::Int sub_10018A9B0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  void *v31;
  unint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  __int128 v37;
  _QWORD v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100063D3C(&qword_100348AB8);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v3;
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain(v5);
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v12)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v36 + 8 * v23);
    ++v15;
    if (!v25)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v12)
        goto LABEL_36;
      v25 = *(_QWORD *)(v36 + 8 * v15);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release(v5);
          v3 = v35;
          if ((a2 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v36 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v15 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v15 >= v12)
              goto LABEL_36;
            v25 = *(_QWORD *)(v36 + 8 * v15);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v15 = v26;
      }
    }
LABEL_33:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    v31 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v22);
    v37 = *(_OWORD *)(*(_QWORD *)(v5 + 48) + 16 * v22);
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 16 * v22 + 8);
    if ((a2 & 1) == 0)
    {
      sub_100063C8C(v37, v32);
      v33 = v31;
    }
    Hasher.init(_seed:)(v38);
    Data.hash(into:)(v38, v37, v32);
    result = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      v20 = v37;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      v20 = v37;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    *(_OWORD *)(*(_QWORD *)(v8 + 48) + 16 * v19) = v20;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v19) = v31;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v35;
  v24 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v24, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_10018ACB4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  _QWORD v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100063D3C(&qword_100348B88);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_36;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v35)
              goto LABEL_36;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      swift_unknownObjectRetain(v33);
    }
    Hasher.init(_seed:)(v38);
    String.hash(into:)(v38, v32, v31);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_10018AFC8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  int64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t i;
  int v51;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100063D3C(&qword_100348968);
  v51 = a2;
  v12 = static _DictionaryStorage.resize(original:capacity:move:)(v11, a1, a2);
  v13 = v12;
  if (!*(_QWORD *)(v11 + 16))
    goto LABEL_41;
  v46 = v2;
  v14 = 1 << *(_BYTE *)(v11 + 32);
  v15 = *(_QWORD *)(v11 + 64);
  v48 = (_QWORD *)(v11 + 64);
  if (v14 < 64)
    v16 = ~(-1 << v14);
  else
    v16 = -1;
  v17 = v16 & v15;
  v47 = (unint64_t)(v14 + 63) >> 6;
  v18 = v12 + 64;
  result = swift_retain(v11);
  v20 = 0;
  v49 = v7;
  for (i = v11; ; v11 = i)
  {
    if (v17)
    {
      v24 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v25 = v24 | (v20 << 6);
      goto LABEL_24;
    }
    v26 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v26 >= v47)
      goto LABEL_36;
    v27 = v48[v26];
    ++v20;
    if (!v27)
    {
      v20 = v26 + 1;
      if (v26 + 1 >= v47)
        goto LABEL_36;
      v27 = v48[v20];
      if (!v27)
        break;
    }
LABEL_23:
    v17 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v20 << 6);
LABEL_24:
    v29 = v7;
    v30 = *(_QWORD *)(v7 + 72);
    v31 = *(_QWORD *)(v11 + 48) + v30 * v25;
    if ((v51 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v29 + 32))(v10, v31, v6);
      v32 = (uint64_t *)(*(_QWORD *)(v11 + 56) + 16 * v25);
      v33 = *v32;
      v34 = v32[1];
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v29 + 16))(v10, v31, v6);
      v35 = (uint64_t *)(*(_QWORD *)(v11 + 56) + 16 * v25);
      v33 = *v35;
      v34 = v35[1];
      sub_100063C8C(*v35, v34);
    }
    v36 = *(_QWORD *)(v13 + 40);
    v37 = sub_1000C69C4((unint64_t *)&unk_100347730, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v36, v6, v37);
    v38 = -1 << *(_BYTE *)(v13 + 32);
    v39 = result & ~v38;
    v40 = v39 >> 6;
    if (((-1 << v39) & ~*(_QWORD *)(v18 + 8 * (v39 >> 6))) != 0)
    {
      v21 = __clz(__rbit64((-1 << v39) & ~*(_QWORD *)(v18 + 8 * (v39 >> 6)))) | v39 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v41 = 0;
      v42 = (unint64_t)(63 - v38) >> 6;
      do
      {
        if (++v40 == v42 && (v41 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v43 = v40 == v42;
        if (v40 == v42)
          v40 = 0;
        v41 |= v43;
        v44 = *(_QWORD *)(v18 + 8 * v40);
      }
      while (v44 == -1);
      v21 = __clz(__rbit64(~v44)) + (v40 << 6);
    }
    *(_QWORD *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    v22 = *(_QWORD *)(v13 + 48) + v30 * v21;
    v7 = v49;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v49 + 32))(v22, v10, v6);
    v23 = (uint64_t *)(*(_QWORD *)(v13 + 56) + 16 * v21);
    *v23 = v33;
    v23[1] = v34;
    ++*(_QWORD *)(v13 + 16);
  }
  v28 = v26 + 2;
  if (v28 < v47)
  {
    v27 = v48[v28];
    if (!v27)
    {
      while (1)
      {
        v20 = v28 + 1;
        if (__OFADD__(v28, 1))
          goto LABEL_43;
        if (v20 >= v47)
          goto LABEL_36;
        v27 = v48[v20];
        ++v28;
        if (v27)
          goto LABEL_23;
      }
    }
    v20 = v28;
    goto LABEL_23;
  }
LABEL_36:
  swift_release(v11);
  v3 = v46;
  if ((v51 & 1) != 0)
  {
    v45 = 1 << *(_BYTE *)(v11 + 32);
    if (v45 >= 64)
      bzero(v48, ((unint64_t)(v45 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v48 = -1 << v45;
    *(_QWORD *)(v11 + 16) = 0;
  }
LABEL_41:
  result = swift_release(v11);
  *v3 = v13;
  return result;
}

uint64_t sub_10018B364(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int64_t v43;
  _QWORD *v44;
  uint64_t i;
  int v46;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100063D3C(&qword_100348AF0);
  v46 = a2;
  v12 = static _DictionaryStorage.resize(original:capacity:move:)(v11, a1, a2);
  v13 = v12;
  if (!*(_QWORD *)(v11 + 16))
    goto LABEL_43;
  v14 = 1 << *(_BYTE *)(v11 + 32);
  v15 = *(_QWORD *)(v11 + 64);
  v44 = (_QWORD *)(v11 + 64);
  if (v14 < 64)
    v16 = ~(-1 << v14);
  else
    v16 = -1;
  v17 = v16 & v15;
  v42 = v2;
  v43 = (unint64_t)(v14 + 63) >> 6;
  v18 = v12 + 64;
  result = swift_retain(v11);
  v20 = 0;
  for (i = v11; ; v11 = i)
  {
    if (v17)
    {
      v22 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v23 = v22 | (v20 << 6);
      goto LABEL_24;
    }
    v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v24 >= v43)
      break;
    v25 = v44;
    v26 = v44[v24];
    ++v20;
    if (!v26)
    {
      v20 = v24 + 1;
      if (v24 + 1 >= v43)
        goto LABEL_36;
      v26 = v44[v20];
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v43)
        {
LABEL_36:
          swift_release(v11);
          v3 = v42;
          if ((v46 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = v44[v27];
        if (!v26)
        {
          while (1)
          {
            v20 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v20 >= v43)
              goto LABEL_36;
            v26 = v44[v20];
            ++v27;
            if (v26)
              goto LABEL_23;
          }
        }
        v20 = v27;
      }
    }
LABEL_23:
    v17 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_24:
    v28 = *(_QWORD *)(v7 + 72);
    v29 = *(_QWORD *)(v11 + 48) + v28 * v23;
    if ((v46 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v10, v29, v6);
      v30 = *(id *)(*(_QWORD *)(v11 + 56) + 8 * v23);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v10, v29, v6);
      v30 = *(id *)(*(_QWORD *)(v11 + 56) + 8 * v23);
    }
    v31 = *(_QWORD *)(v13 + 40);
    v32 = sub_1000C69C4((unint64_t *)&unk_100347730, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v31, v6, v32);
    v33 = -1 << *(_BYTE *)(v13 + 32);
    v34 = result & ~v33;
    v35 = v34 >> 6;
    if (((-1 << v34) & ~*(_QWORD *)(v18 + 8 * (v34 >> 6))) != 0)
    {
      v21 = __clz(__rbit64((-1 << v34) & ~*(_QWORD *)(v18 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v36 = 0;
      v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v38 = v35 == v37;
        if (v35 == v37)
          v35 = 0;
        v36 |= v38;
        v39 = *(_QWORD *)(v18 + 8 * v35);
      }
      while (v39 == -1);
      v21 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(_QWORD *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(_QWORD *)(v13 + 48) + v28 * v21, v10, v6);
    *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v21) = v30;
    ++*(_QWORD *)(v13 + 16);
  }
  swift_release(v11);
  v3 = v42;
  v25 = v44;
  if ((v46 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v40 = 1 << *(_BYTE *)(v11 + 32);
  if (v40 >= 64)
    bzero(v25, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v40;
  *(_QWORD *)(v11 + 16) = 0;
LABEL_43:
  result = swift_release(v11);
  *v3 = v13;
  return result;
}

uint64_t sub_10018B6FC(uint64_t a1, uint64_t a2)
{
  return sub_10018D378(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for CredentialType, &qword_100348B08, &qword_100348B10, (uint64_t)&protocol conformance descriptor for CredentialType);
}

Swift::Int sub_10018B720(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  uint64_t v42;
  char v43;
  _QWORD v44[9];
  __int128 v45;
  __int128 v46;
  uint64_t v47;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100063D3C(&qword_100348B58);
  v43 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v42 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v40 = v3;
  v41 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_25;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }
    if (v22 >= v41)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v42 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v41)
        goto LABEL_37;
      v24 = *(_QWORD *)(v42 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v41)
        {
LABEL_37:
          swift_release(v5);
          v3 = v40;
          if ((v43 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v24 = *(_QWORD *)(v42 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_46;
            if (v14 >= v41)
              goto LABEL_37;
            v24 = *(_QWORD *)(v42 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_24;
          }
        }
        v14 = v25;
      }
    }
LABEL_24:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_25:
    v26 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v28 = *v26;
    v27 = v26[1];
    v29 = *(_QWORD *)(v5 + 56) + 40 * v21;
    if ((v43 & 1) != 0)
    {
      v30 = *(_OWORD *)v29;
      v31 = *(_OWORD *)(v29 + 16);
      v47 = *(_QWORD *)(v29 + 32);
      v45 = v30;
      v46 = v31;
    }
    else
    {
      sub_1001988C4(v29, (uint64_t)&v45);
      swift_bridgeObjectRetain(v27);
    }
    Hasher.init(_seed:)(v44);
    String.hash(into:)(v44, v28, v27);
    result = Hasher._finalize()();
    v32 = -1 << *(_BYTE *)(v8 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v12 + 8 * (v33 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v12 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v12 + 8 * v34);
      }
      while (v38 == -1);
      v15 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v15);
    *v16 = v28;
    v16[1] = v27;
    v17 = *(_QWORD *)(v8 + 56) + 40 * v15;
    v18 = v45;
    v19 = v46;
    *(_QWORD *)(v17 + 32) = v47;
    *(_OWORD *)v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v40;
  v23 = (_QWORD *)(v5 + 64);
  if ((v43 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v39 = 1 << *(_BYTE *)(v5 + 32);
  if (v39 >= 64)
    bzero(v23, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v39;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_10018BA54(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100063D3C(&qword_100348A98);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = v3;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v36)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v36)
        goto LABEL_36;
      v24 = *(_QWORD *)(v37 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v36)
        {
LABEL_36:
          swift_release(v5);
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v36)
              goto LABEL_36;
            v24 = *(_QWORD *)(v37 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v38 & 1) == 0)
    {
      swift_retain(v33 & 0x1FFFFFFFFFFFFFFFLL);
      swift_bridgeObjectRetain(v31);
    }
    Hasher.init(_seed:)(v39);
    String.hash(into:)(v39, v32, v31);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v35;
  v23 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_10018BD64(uint64_t a1, uint64_t a2)
{
  return sub_10018BD7C(a1, a2, &qword_1003489D8);
}

Swift::Int sub_10018BD70(uint64_t a1, uint64_t a2)
{
  return sub_10018BD7C(a1, a2, (uint64_t *)&unk_1003489E0);
}

Swift::Int sub_10018BD7C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  Swift::Int result;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  __int128 v37;
  _QWORD v38[9];

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_100063D3C(a3);
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = v8;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_43;
  v10 = 1 << *(_BYTE *)(v6 + 32);
  v35 = v4;
  v36 = v6 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v6 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 64;
  result = swift_retain(v6);
  v16 = 0;
  while (1)
  {
    if (v12)
    {
      v22 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v23 = v22 | (v16 << 6);
      goto LABEL_34;
    }
    v24 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v24 >= v13)
      break;
    v25 = (_QWORD *)(v6 + 64);
    v26 = *(_QWORD *)(v36 + 8 * v24);
    ++v16;
    if (!v26)
    {
      v16 = v24 + 1;
      if (v24 + 1 >= v13)
        goto LABEL_36;
      v26 = *(_QWORD *)(v36 + 8 * v16);
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v13)
        {
LABEL_36:
          swift_release(v6);
          v4 = v35;
          if ((a2 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = *(_QWORD *)(v36 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            v16 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v16 >= v13)
              goto LABEL_36;
            v26 = *(_QWORD *)(v36 + 8 * v16);
            ++v27;
            if (v26)
              goto LABEL_33;
          }
        }
        v16 = v27;
      }
    }
LABEL_33:
    v12 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v16 << 6);
LABEL_34:
    v32 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v23);
    v37 = *(_OWORD *)(*(_QWORD *)(v6 + 48) + 16 * v23);
    v33 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v23 + 8);
    if ((a2 & 1) == 0)
    {
      sub_100063C8C(v37, v33);
      swift_bridgeObjectRetain(v32);
    }
    Hasher.init(_seed:)(v38);
    Data.hash(into:)(v38, v37, v33);
    result = Hasher._finalize()();
    v17 = -1 << *(_BYTE *)(v9 + 32);
    v18 = result & ~v17;
    v19 = v18 >> 6;
    if (((-1 << v18) & ~*(_QWORD *)(v14 + 8 * (v18 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v14 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
      v21 = v37;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v17) >> 6;
      v21 = v37;
      do
      {
        if (++v19 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v30 = v19 == v29;
        if (v19 == v29)
          v19 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v14 + 8 * v19);
      }
      while (v31 == -1);
      v20 = __clz(__rbit64(~v31)) + (v19 << 6);
    }
    *(_QWORD *)(v14 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    *(_OWORD *)(*(_QWORD *)(v9 + 48) + 16 * v20) = v21;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v20) = v32;
    ++*(_QWORD *)(v9 + 16);
  }
  swift_release(v6);
  v4 = v35;
  v25 = (_QWORD *)(v6 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v6 + 32);
  if (v34 >= 64)
    bzero(v25, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v34;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_43:
  result = swift_release(v6);
  *v4 = v9;
  return result;
}

uint64_t sub_10018C080(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;

  v5 = type metadata accessor for UUID(0);
  v46 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v6);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = v2;
  v9 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100063D3C(&qword_100348A10);
  v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
  {
    result = swift_release(v9);
    v39 = v42;
LABEL_44:
    *v39 = v11;
    return result;
  }
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v44 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v43 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain(v9);
  v18 = 0;
  HIDWORD(v41) = a2;
  v19 = 16;
  if ((a2 & 1) != 0)
    v19 = 32;
  v45 = v19;
  while (1)
  {
    if (v15)
    {
      v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v22 = v21 | (v18 << 6);
      goto LABEL_26;
    }
    v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    if (v23 >= v43)
    {
      swift_release(v9);
      v39 = v42;
      v24 = v44;
      if ((v41 & 0x100000000) != 0)
      {
LABEL_39:
        v40 = 1 << *(_BYTE *)(v9 + 32);
        if (v40 >= 64)
          bzero(v24, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
        else
          *v24 = -1 << v40;
        *(_QWORD *)(v9 + 16) = 0;
      }
LABEL_43:
      result = swift_release(v9);
      goto LABEL_44;
    }
    v24 = v44;
    v25 = v44[v23];
    ++v18;
    if (!v25)
    {
      v18 = v23 + 1;
      if (v23 + 1 >= v43)
        goto LABEL_36;
      v25 = v44[v18];
      if (!v25)
        break;
    }
LABEL_25:
    v15 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_26:
    v27 = *(_QWORD *)(v46 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v46 + v45))(v8, *(_QWORD *)(v9 + 48) + v27 * v22, v5);
    v28 = v9;
    v29 = *(_BYTE *)(*(_QWORD *)(v9 + 56) + v22);
    v30 = *(_QWORD *)(v11 + 40);
    v31 = sub_1000C69C4((unint64_t *)&unk_100347730, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v5, v31);
    v32 = -1 << *(_BYTE *)(v11 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v16 + 8 * (v33 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v16 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v16 + 8 * v34);
      }
      while (v38 == -1);
      v20 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v16 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v46 + 32))(*(_QWORD *)(v11 + 48) + v27 * v20, v8, v5);
    *(_BYTE *)(*(_QWORD *)(v11 + 56) + v20) = v29;
    ++*(_QWORD *)(v11 + 16);
    v9 = v28;
  }
  v26 = v23 + 2;
  if (v26 >= v43)
  {
LABEL_36:
    swift_release(v9);
    v39 = v42;
    if ((v41 & 0x100000000) != 0)
      goto LABEL_39;
    goto LABEL_43;
  }
  v25 = v44[v26];
  if (v25)
  {
    v18 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v18 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v18 >= v43)
      goto LABEL_36;
    v25 = v44[v18];
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_46:
  __break(1u);
  return result;
}

uint64_t sub_10018C420(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;

  v5 = type metadata accessor for UUID(0);
  v46 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v6);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = v2;
  v9 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100063D3C(&qword_100348A18);
  v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
  {
    result = swift_release(v9);
    v39 = v42;
LABEL_44:
    *v39 = v11;
    return result;
  }
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v44 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v43 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain(v9);
  v18 = 0;
  HIDWORD(v41) = a2;
  v19 = 16;
  if ((a2 & 1) != 0)
    v19 = 32;
  v45 = v19;
  while (1)
  {
    if (v15)
    {
      v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v22 = v21 | (v18 << 6);
      goto LABEL_26;
    }
    v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    if (v23 >= v43)
    {
      swift_release(v9);
      v39 = v42;
      v24 = v44;
      if ((v41 & 0x100000000) != 0)
      {
LABEL_39:
        v40 = 1 << *(_BYTE *)(v9 + 32);
        if (v40 >= 64)
          bzero(v24, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
        else
          *v24 = -1 << v40;
        *(_QWORD *)(v9 + 16) = 0;
      }
LABEL_43:
      result = swift_release(v9);
      goto LABEL_44;
    }
    v24 = v44;
    v25 = v44[v23];
    ++v18;
    if (!v25)
    {
      v18 = v23 + 1;
      if (v23 + 1 >= v43)
        goto LABEL_36;
      v25 = v44[v18];
      if (!v25)
        break;
    }
LABEL_25:
    v15 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_26:
    v27 = *(_QWORD *)(v46 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v46 + v45))(v8, *(_QWORD *)(v9 + 48) + v27 * v22, v5);
    v28 = v9;
    v29 = *(_WORD *)(*(_QWORD *)(v9 + 56) + 2 * v22);
    v30 = *(_QWORD *)(v11 + 40);
    v31 = sub_1000C69C4((unint64_t *)&unk_100347730, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v5, v31);
    v32 = -1 << *(_BYTE *)(v11 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v16 + 8 * (v33 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v16 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v16 + 8 * v34);
      }
      while (v38 == -1);
      v20 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v16 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v46 + 32))(*(_QWORD *)(v11 + 48) + v27 * v20, v8, v5);
    *(_WORD *)(*(_QWORD *)(v11 + 56) + 2 * v20) = v29;
    ++*(_QWORD *)(v11 + 16);
    v9 = v28;
  }
  v26 = v23 + 2;
  if (v26 >= v43)
  {
LABEL_36:
    swift_release(v9);
    v39 = v42;
    if ((v41 & 0x100000000) != 0)
      goto LABEL_39;
    goto LABEL_43;
  }
  v25 = v44[v26];
  if (v25)
  {
    v18 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v18 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v18 >= v43)
      goto LABEL_36;
    v25 = v44[v18];
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_46:
  __break(1u);
  return result;
}

uint64_t sub_10018C7C0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD v38[2];
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100063D3C(&qword_100348908);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain(v5);
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v15 << 6);
      goto LABEL_25;
    }
    v22 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }
    if (v22 >= v12)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v37 + 8 * v22);
    ++v15;
    if (!v24)
    {
      v15 = v22 + 1;
      if (v22 + 1 >= v12)
        goto LABEL_37;
      v24 = *(_QWORD *)(v37 + 8 * v15);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v12)
        {
LABEL_37:
          swift_release(v5);
          if ((a2 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v24 = *(_QWORD *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v15 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_46;
            if (v15 >= v12)
              goto LABEL_37;
            v24 = *(_QWORD *)(v37 + 8 * v15);
            ++v25;
            if (v24)
              goto LABEL_24;
          }
        }
        v15 = v25;
      }
    }
LABEL_24:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v15 << 6);
LABEL_25:
    v26 = *(_QWORD *)(v5 + 48) + 40 * v21;
    if ((a2 & 1) != 0)
    {
      v27 = *(_OWORD *)v26;
      v28 = *(_OWORD *)(v26 + 16);
      v41 = *(_QWORD *)(v26 + 32);
      v39 = v27;
      v40 = v28;
      sub_10006C2B4((_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v21), v38);
    }
    else
    {
      sub_1001988C4(v26, (uint64_t)&v39);
      sub_100096CB0(*(_QWORD *)(v5 + 56) + 32 * v21, (uint64_t)v38);
    }
    result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v29 = -1 << *(_BYTE *)(v8 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v13 + 8 * (v30 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v13 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v13 + 8 * v31);
      }
      while (v35 == -1);
      v16 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    v17 = *(_QWORD *)(v8 + 48) + 40 * v16;
    v18 = v39;
    v19 = v40;
    *(_QWORD *)(v17 + 32) = v41;
    *(_OWORD *)v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
    result = (uint64_t)sub_10006C2B4(v38, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v16));
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v23 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_10018CAD4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  unsigned __int16 v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  char v33;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100063D3C(&qword_100348A30);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v33 = a2;
    v32 = v3;
    v9 = 0;
    v10 = (_QWORD *)(v5 + 64);
    v11 = 1 << *(_BYTE *)(v5 + 32);
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v5 + 64);
    v14 = (unint64_t)(v11 + 63) >> 6;
    v15 = result + 64;
    while (1)
    {
      if (v13)
      {
        v17 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v18 = v17 | (v9 << 6);
      }
      else
      {
        v19 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v19 >= v14)
          goto LABEL_34;
        v20 = v10[v19];
        ++v9;
        if (!v20)
        {
          v9 = v19 + 1;
          if (v19 + 1 >= v14)
            goto LABEL_34;
          v20 = v10[v9];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v14)
            {
LABEL_34:
              if ((v33 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v32;
                goto LABEL_41;
              }
              v31 = 1 << *(_BYTE *)(v5 + 32);
              if (v31 >= 64)
                bzero((void *)(v5 + 64), ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v10 = -1 << v31;
              v3 = v32;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v10[v21];
            if (!v20)
            {
              while (1)
              {
                v9 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_43;
                if (v9 >= v14)
                  goto LABEL_34;
                v20 = v10[v9];
                ++v21;
                if (v20)
                  goto LABEL_24;
              }
            }
            v9 = v21;
          }
        }
LABEL_24:
        v13 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v9 << 6);
      }
      v22 = *(_WORD *)(*(_QWORD *)(v5 + 48) + 2 * v18);
      v23 = *(_BYTE *)(*(_QWORD *)(v5 + 56) + v18);
      result = static Hasher._hash(seed:bytes:count:)(*(_QWORD *)(v8 + 40), v22, 2);
      v24 = -1 << *(_BYTE *)(v8 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v15 + 8 * (v25 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v15 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v15 + 8 * v26);
        }
        while (v30 == -1);
        v16 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v15 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_WORD *)(*(_QWORD *)(v8 + 48) + 2 * v16) = v22;
      *(_BYTE *)(*(_QWORD *)(v8 + 56) + v16) = v23;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
LABEL_41:
  *v3 = v8;
  return result;
}

uint64_t sub_10018CD84(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  __int128 v32;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100063D3C(&qword_100348A28);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v31 = v3;
    v9 = 0;
    v10 = (_QWORD *)(v5 + 64);
    v11 = 1 << *(_BYTE *)(v5 + 32);
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v5 + 64);
    v14 = (unint64_t)(v11 + 63) >> 6;
    v15 = result + 64;
    while (1)
    {
      if (v13)
      {
        v20 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v21 = v20 | (v9 << 6);
      }
      else
      {
        v22 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        if (v22 >= v14)
          goto LABEL_36;
        v23 = v10[v22];
        ++v9;
        if (!v23)
        {
          v9 = v22 + 1;
          if (v22 + 1 >= v14)
            goto LABEL_36;
          v23 = v10[v9];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v14)
            {
LABEL_36:
              if ((a2 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v31;
                goto LABEL_43;
              }
              v30 = 1 << *(_BYTE *)(v5 + 32);
              if (v30 >= 64)
                bzero((void *)(v5 + 64), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v10 = -1 << v30;
              v3 = v31;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v23 = v10[v24];
            if (!v23)
            {
              while (1)
              {
                v9 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_45;
                if (v9 >= v14)
                  goto LABEL_36;
                v23 = v10[v9];
                ++v24;
                if (v23)
                  goto LABEL_33;
              }
            }
            v9 = v24;
          }
        }
LABEL_33:
        v13 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v9 << 6);
      }
      v29 = *(unsigned __int16 *)(*(_QWORD *)(v5 + 48) + 2 * v21);
      v32 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v21);
      if ((a2 & 1) == 0)
        sub_100063C8C(v32, *((unint64_t *)&v32 + 1));
      result = static Hasher._hash(seed:bytes:count:)(*(_QWORD *)(v8 + 40), v29, 2);
      v16 = -1 << *(_BYTE *)(v8 + 32);
      v17 = result & ~v16;
      v18 = v17 >> 6;
      if (((-1 << v17) & ~*(_QWORD *)(v15 + 8 * (v17 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v15 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v27 = v18 == v26;
          if (v18 == v26)
            v18 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v15 + 8 * v18);
        }
        while (v28 == -1);
        v19 = __clz(__rbit64(~v28)) + (v18 << 6);
      }
      *(_QWORD *)(v15 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      *(_WORD *)(*(_QWORD *)(v8 + 48) + 2 * v19) = v29;
      *(_OWORD *)(*(_QWORD *)(v8 + 56) + 16 * v19) = v32;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
LABEL_43:
  *v3 = v8;
  return result;
}

Swift::Int sub_10018D04C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  uint64_t v39;
  char v40;
  _QWORD v41[9];

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_100063D3C(a3);
  v40 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = v8;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_43;
  v10 = 1 << *(_BYTE *)(v6 + 32);
  v39 = v6 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v6 + 64);
  v37 = v4;
  v38 = (unint64_t)(v10 + 63) >> 6;
  v13 = v8 + 64;
  result = swift_retain(v6);
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v21 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v38)
      break;
    v24 = (_QWORD *)(v6 + 64);
    v25 = *(_QWORD *)(v39 + 8 * v23);
    ++v15;
    if (!v25)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v38)
        goto LABEL_36;
      v25 = *(_QWORD *)(v39 + 8 * v15);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v38)
        {
LABEL_36:
          swift_release(v6);
          v4 = v37;
          if ((v40 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v39 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v15 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v15 >= v38)
              goto LABEL_36;
            v25 = *(_QWORD *)(v39 + 8 * v15);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v15 = v26;
      }
    }
LABEL_33:
    v12 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    v31 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v22);
    v33 = *v31;
    v32 = v31[1];
    v34 = *(void **)(*(_QWORD *)(v6 + 56) + 8 * v22);
    if ((v40 & 1) == 0)
    {
      swift_bridgeObjectRetain(v31[1]);
      v35 = v34;
    }
    Hasher.init(_seed:)(v41);
    String.hash(into:)(v41, v33, v32);
    result = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v9 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v19);
    *v20 = v33;
    v20[1] = v32;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v19) = v34;
    ++*(_QWORD *)(v9 + 16);
  }
  swift_release(v6);
  v4 = v37;
  v24 = (_QWORD *)(v6 + 64);
  if ((v40 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v36 = 1 << *(_BYTE *)(v6 + 32);
  if (v36 >= 64)
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v36;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_43:
  result = swift_release(v6);
  *v4 = v9;
  return result;
}

uint64_t sub_10018D354(uint64_t a1, uint64_t a2)
{
  return sub_10018D378(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for URL, &qword_100348AC8, &qword_100348AD0, (uint64_t)&protocol conformance descriptor for URL);
}

uint64_t sub_10018D378(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t *a4, unint64_t *a5, uint64_t a6)
{
  uint64_t *v6;
  uint64_t *v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t result;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int64_t v31;
  _QWORD *v32;
  unint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t *v52;
  int64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t (*v56)(uint64_t);
  unint64_t *v57;
  uint64_t v58;
  uint64_t v59;

  v57 = a5;
  v58 = a6;
  v8 = v6;
  v56 = a3;
  v11 = a3(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v15 = (char *)&v50 - v14;
  v16 = *v8;
  if (*(_QWORD *)(*v8 + 24) > a1)
    a1 = *(_QWORD *)(*v8 + 24);
  sub_100063D3C(a4);
  v17 = static _DictionaryStorage.resize(original:capacity:move:)(v16, a1, a2);
  v18 = v17;
  if (!*(_QWORD *)(v16 + 16))
  {
    v47 = v16;
LABEL_44:
    result = swift_release(v47);
    *v8 = v18;
    return result;
  }
  v19 = 1 << *(_BYTE *)(v16 + 32);
  v20 = *(_QWORD *)(v16 + 64);
  v54 = (_QWORD *)(v16 + 64);
  if (v19 < 64)
    v21 = ~(-1 << v19);
  else
    v21 = -1;
  v22 = v21 & v20;
  v52 = v8;
  v53 = (unint64_t)(v19 + 63) >> 6;
  v23 = a2;
  v24 = v17 + 64;
  v59 = v16;
  result = swift_retain(v16);
  v26 = 0;
  v51 = v23;
  v27 = 16;
  if ((v23 & 1) != 0)
    v27 = 32;
  v55 = v27;
  while (1)
  {
    if (v22)
    {
      v29 = __clz(__rbit64(v22));
      v22 &= v22 - 1;
      v30 = v29 | (v26 << 6);
      goto LABEL_26;
    }
    v31 = v26 + 1;
    if (__OFADD__(v26, 1))
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    if (v31 >= v53)
    {
      v48 = v59;
      swift_release(v59);
      v8 = v52;
      v32 = v54;
      if ((v51 & 1) != 0)
      {
LABEL_39:
        v49 = 1 << *(_BYTE *)(v48 + 32);
        if (v49 >= 64)
          bzero(v32, ((unint64_t)(v49 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
        else
          *v32 = -1 << v49;
        *(_QWORD *)(v48 + 16) = 0;
      }
LABEL_43:
      v47 = v48;
      goto LABEL_44;
    }
    v32 = v54;
    v33 = v54[v31];
    ++v26;
    if (!v33)
    {
      v26 = v31 + 1;
      if (v31 + 1 >= v53)
        goto LABEL_36;
      v33 = v54[v26];
      if (!v33)
        break;
    }
LABEL_25:
    v22 = (v33 - 1) & v33;
    v30 = __clz(__rbit64(v33)) + (v26 << 6);
LABEL_26:
    v35 = v59;
    v36 = *(_QWORD *)(v12 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v12 + v55))(v15, *(_QWORD *)(v59 + 48) + v36 * v30, v11);
    v37 = *(_QWORD *)(*(_QWORD *)(v35 + 56) + 8 * v30);
    v38 = *(_QWORD *)(v18 + 40);
    v39 = sub_1000C69C4(v57, 255, v56, v58);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v38, v11, v39);
    v40 = -1 << *(_BYTE *)(v18 + 32);
    v41 = result & ~v40;
    v42 = v41 >> 6;
    if (((-1 << v41) & ~*(_QWORD *)(v24 + 8 * (v41 >> 6))) != 0)
    {
      v28 = __clz(__rbit64((-1 << v41) & ~*(_QWORD *)(v24 + 8 * (v41 >> 6)))) | v41 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v43 = 0;
      v44 = (unint64_t)(63 - v40) >> 6;
      do
      {
        if (++v42 == v44 && (v43 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v45 = v42 == v44;
        if (v42 == v44)
          v42 = 0;
        v43 |= v45;
        v46 = *(_QWORD *)(v24 + 8 * v42);
      }
      while (v46 == -1);
      v28 = __clz(__rbit64(~v46)) + (v42 << 6);
    }
    *(_QWORD *)(v24 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v12 + 32))(*(_QWORD *)(v18 + 48) + v36 * v28, v15, v11);
    *(_QWORD *)(*(_QWORD *)(v18 + 56) + 8 * v28) = v37;
    ++*(_QWORD *)(v18 + 16);
  }
  v34 = v31 + 2;
  if (v34 >= v53)
  {
LABEL_36:
    v48 = v59;
    swift_release(v59);
    v8 = v52;
    if ((v51 & 1) != 0)
      goto LABEL_39;
    goto LABEL_43;
  }
  v33 = v54[v34];
  if (v33)
  {
    v26 = v34;
    goto LABEL_25;
  }
  while (1)
  {
    v26 = v34 + 1;
    if (__OFADD__(v34, 1))
      break;
    if (v26 >= v53)
      goto LABEL_36;
    v33 = v54[v26];
    ++v34;
    if (v33)
      goto LABEL_25;
  }
LABEL_46:
  __break(1u);
  return result;
}

Swift::Int sub_10018D708(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  uint64_t v42;
  char v43;
  _QWORD v44[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100063D3C(&qword_100348988);
  v43 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v42 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v40 = v3;
  v41 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v23 = v22 | (v14 << 6);
      goto LABEL_34;
    }
    v24 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v24 >= v41)
      break;
    v25 = (_QWORD *)(v5 + 64);
    v26 = *(_QWORD *)(v42 + 8 * v24);
    ++v14;
    if (!v26)
    {
      v14 = v24 + 1;
      if (v24 + 1 >= v41)
        goto LABEL_36;
      v26 = *(_QWORD *)(v42 + 8 * v14);
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_36:
          swift_release(v5);
          v3 = v40;
          if ((v43 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = *(_QWORD *)(v42 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            v14 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v14 >= v41)
              goto LABEL_36;
            v26 = *(_QWORD *)(v42 + 8 * v14);
            ++v27;
            if (v26)
              goto LABEL_33;
          }
        }
        v14 = v27;
      }
    }
LABEL_33:
    v11 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v14 << 6);
LABEL_34:
    v32 = 16 * v23;
    v33 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v32);
    v35 = *v33;
    v34 = v33[1];
    v36 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v32);
    v37 = *v36;
    v38 = v36[1];
    if ((v43 & 1) == 0)
    {
      swift_bridgeObjectRetain(v33[1]);
      swift_bridgeObjectRetain(v38);
    }
    Hasher.init(_seed:)(v44);
    String.hash(into:)(v44, v35, v34);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v30 = v17 == v29;
        if (v17 == v29)
          v17 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v31 == -1);
      v18 = __clz(__rbit64(~v31)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = 16 * v18;
    v20 = (_QWORD *)(*(_QWORD *)(v8 + 48) + v19);
    *v20 = v35;
    v20[1] = v34;
    v21 = (_QWORD *)(*(_QWORD *)(v8 + 56) + v19);
    *v21 = v37;
    v21[1] = v38;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v40;
  v25 = (_QWORD *)(v5 + 64);
  if ((v43 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v5 + 32);
  if (v39 >= 64)
    bzero(v25, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v39;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_10018DA2C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  _OWORD *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[9];
  _OWORD v39[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100063D3C(&qword_100348A40);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain(v5);
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v18 = v17 | (v15 << 6);
      goto LABEL_25;
    }
    v19 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }
    if (v19 >= v12)
      break;
    v20 = (_QWORD *)(v5 + 64);
    v21 = *(_QWORD *)(v37 + 8 * v19);
    ++v15;
    if (!v21)
    {
      v15 = v19 + 1;
      if (v19 + 1 >= v12)
        goto LABEL_37;
      v21 = *(_QWORD *)(v37 + 8 * v15);
      if (!v21)
      {
        v22 = v19 + 2;
        if (v22 >= v12)
        {
LABEL_37:
          swift_release(v5);
          if ((a2 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v21 = *(_QWORD *)(v37 + 8 * v22);
        if (!v21)
        {
          while (1)
          {
            v15 = v22 + 1;
            if (__OFADD__(v22, 1))
              goto LABEL_46;
            if (v15 >= v12)
              goto LABEL_37;
            v21 = *(_QWORD *)(v37 + 8 * v15);
            ++v22;
            if (v21)
              goto LABEL_24;
          }
        }
        v15 = v22;
      }
    }
LABEL_24:
    v11 = (v21 - 1) & v21;
    v18 = __clz(__rbit64(v21)) + (v15 << 6);
LABEL_25:
    v23 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v18);
    v24 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v18);
    if ((a2 & 1) != 0)
    {
      sub_10006C2B4(v24, v39);
    }
    else
    {
      sub_100096CB0((uint64_t)v24, (uint64_t)v39);
      v25 = v23;
    }
    Hasher.init(_seed:)(v38);
    type metadata accessor for CFString(0);
    v27 = v26;
    v28 = sub_1000C69C4(&qword_100348A50, 255, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_100288830);
    _CFObject.hash(into:)(v38, v27, v28);
    result = Hasher._finalize()();
    v29 = -1 << *(_BYTE *)(v8 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v13 + 8 * (v30 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v13 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v13 + 8 * v31);
      }
      while (v35 == -1);
      v16 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v16) = v23;
    result = (uint64_t)sub_10006C2B4(v39, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v16));
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v20 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v20, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v20 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_10018DD50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD **v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t result;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;

  v6 = (_QWORD **)v5;
  v27 = a2;
  v28 = a3;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (_QWORD *)*v5;
  v17 = sub_100187E34(a4);
  v18 = v15[2];
  v19 = (v16 & 1) == 0;
  result = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_14;
  }
  v21 = v16;
  v22 = v15[3];
  if (v22 >= result && (a5 & 1) != 0)
  {
LABEL_7:
    v23 = *v6;
    if ((v21 & 1) != 0)
    {
LABEL_8:
      v24 = (uint64_t *)(v23[7] + 24 * v17);
      v25 = v27;
      *v24 = a1;
      v24[1] = v25;
      v24[2] = v28;
      return result;
    }
    goto LABEL_11;
  }
  if (v22 >= result && (a5 & 1) == 0)
  {
    result = (uint64_t)sub_10018FDCC();
    goto LABEL_7;
  }
  sub_100189414(result, a5 & 1);
  result = sub_100187E34(a4);
  if ((v21 & 1) != (v26 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v10);
    __break(1u);
    return result;
  }
  v17 = result;
  v23 = *v6;
  if ((v21 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a4, v10);
  return sub_10018F94C(v17, (uint64_t)v14, a1, v27, v28, v23);
}

_OWORD *sub_10018DEC0(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _OWORD *result;
  uint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_100187F80(a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1001882A0);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_QWORD *)(v18[7] + 32 * v12);
        sub_10006BA9C(v19);
        return sub_10006C2B4(a1, v19);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_10019000C();
      goto LABEL_7;
    }
    sub_1001897D4(v15, a4 & 1);
    v21 = sub_100187F80(a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1001882A0);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10018FA00(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain(a3);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_10018E010(uint64_t a1, Swift::UInt a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v4 = v3;
  v8 = *v3;
  v10 = sub_100187EE4(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_1001903B4();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      *(_QWORD *)(v16[7] + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    v18 = 8 * v10;
    *(_QWORD *)(v16[6] + v18) = a2;
    *(_QWORD *)(v16[7] + v18) = a1;
    v19 = v16[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (!v20)
    {
      v16[2] = v21;
      return result;
    }
    goto LABEL_14;
  }
  sub_100189DAC(result, a3 & 1);
  result = sub_100187EE4(a2);
  if ((v14 & 1) == (v17 & 1))
  {
    v10 = result;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for DSK.Module);
  __break(1u);
  return result;
}

void sub_10018E13C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_10018F504(a1, a2, a3, a4, &qword_100348938);
}

uint64_t sub_10018E148(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  return sub_10018ED18(a1, a2, a3, a4, &qword_100348A38);
}

uint64_t sub_10018E154(__int128 *a1, uint64_t a2, unint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t result;
  uint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_100187F80(a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))&Data.hash(into:), sub_1001884E0);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_QWORD *)(v18[7] + 40 * v12);
        sub_10006BA9C(v19);
        return sub_1000DB160(a1, (uint64_t)v19);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_100190568();
      goto LABEL_7;
    }
    sub_10018A078(v15, a4 & 1);
    v21 = sub_100187F80(a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))&Data.hash(into:), sub_1001884E0);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10018FA68(v12, a2, a3, a1, v18);
      return sub_100063C8C(a2, a3);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Data);
  __break(1u);
  return result;
}

uint64_t sub_10018E2AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, char a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t result;
  uint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;

  v7 = v6;
  v14 = *v6;
  v16 = sub_100187F80(a4, a5, (void (*)(_QWORD *, uint64_t, uint64_t))&Data.hash(into:), sub_1001884E0);
  v17 = *(_QWORD *)(v14 + 16);
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v20 = v15;
  v21 = *(_QWORD *)(v14 + 24);
  if (v21 >= v19 && (a6 & 1) != 0)
    goto LABEL_7;
  if (v21 >= v19 && (a6 & 1) == 0)
  {
    sub_100190754();
LABEL_7:
    v22 = (_QWORD *)*v7;
    if ((v20 & 1) != 0)
    {
LABEL_8:
      v23 = (uint64_t *)(v22[7] + 24 * v16);
      result = sub_100063CD0(*v23, v23[1]);
      *v23 = a1;
      v23[1] = a2;
      v23[2] = a3;
      return result;
    }
LABEL_11:
    v22[(v16 >> 6) + 8] |= 1 << v16;
    v27 = (uint64_t *)(v22[6] + 16 * v16);
    *v27 = a4;
    v27[1] = a5;
    v28 = (uint64_t *)(v22[7] + 24 * v16);
    *v28 = a1;
    v28[1] = a2;
    v28[2] = a3;
    v29 = v22[2];
    v30 = __OFADD__(v29, 1);
    v31 = v29 + 1;
    if (!v30)
    {
      v22[2] = v31;
      return sub_100063C8C(a4, a5);
    }
    goto LABEL_14;
  }
  sub_10018A390(v19, a6 & 1);
  v25 = sub_100187F80(a4, a5, (void (*)(_QWORD *, uint64_t, uint64_t))&Data.hash(into:), sub_1001884E0);
  if ((v20 & 1) == (v26 & 1))
  {
    v16 = v25;
    v22 = (_QWORD *)*v7;
    if ((v20 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Data);
  __break(1u);
  return result;
}

uint64_t sub_10018E454(uint64_t a1, char a2, Swift::UInt a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v10 = *v4;
  v12 = sub_100187EE4(a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= result && (a4 & 1) == 0)
  {
    result = (uint64_t)sub_100190930();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7] + 16 * v12;
      result = swift_bridgeObjectRelease(*(_QWORD *)v19);
      *(_QWORD *)v19 = a1;
      *(_BYTE *)(v19 + 8) = a2;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    *(_QWORD *)(v18[6] + 8 * v12) = a3;
    v21 = v18[7] + 16 * v12;
    *(_QWORD *)v21 = a1;
    *(_BYTE *)(v21 + 8) = a2;
    v22 = v18[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (!v23)
    {
      v18[2] = v24;
      return result;
    }
    goto LABEL_14;
  }
  sub_10018A6C4(result, a4 & 1);
  result = sub_100187EE4(a3);
  if ((v16 & 1) == (v20 & 1))
  {
    v12 = result;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for DSK.Module);
  __break(1u);
  return result;
}

void sub_10018E598(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v5 = v4;
  v10 = *v4;
  v12 = sub_100187F80(a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))&Data.hash(into:), sub_1001884E0);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_100190AE4();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];

      *(_QWORD *)(v19 + 8 * v12) = a1;
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v22 = (uint64_t *)(v18[6] + 16 * v12);
    *v22 = a2;
    v22[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v23 = v18[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      sub_100063C8C(a2, a3);
      return;
    }
    goto LABEL_14;
  }
  sub_10018A9B0(v15, a4 & 1);
  v20 = sub_100187F80(a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))&Data.hash(into:), sub_1001884E0);
  if ((v16 & 1) == (v21 & 1))
  {
    v12 = v20;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Data);
  __break(1u);
}

uint64_t sub_10018E718(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v5 = v4;
  v10 = *v4;
  v12 = sub_100187F80(a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1001882A0);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_100190C94();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];
      result = swift_unknownObjectRelease(*(_QWORD *)(v19 + 8 * v12));
      *(_QWORD *)(v19 + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v23 = (uint64_t *)(v18[6] + 16 * v12);
    *v23 = a2;
    v23[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v24 = v18[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (!v25)
    {
      v18[2] = v26;
      return swift_bridgeObjectRetain(a3);
    }
    goto LABEL_14;
  }
  sub_10018ACB4(v15, a4 & 1);
  v21 = sub_100187F80(a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1001882A0);
  if ((v16 & 1) == (v22 & 1))
  {
    v12 = v21;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_10018E894(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;

  v5 = (_QWORD **)v4;
  v29 = a2;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)*v4;
  v16 = sub_100187E34(a3);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }
  v20 = v15;
  v21 = v14[3];
  if (v21 >= v19 && (a4 & 1) != 0)
  {
LABEL_7:
    v22 = *v5;
    if ((v20 & 1) != 0)
    {
LABEL_8:
      v23 = v22[7] + 16 * v16;
      result = sub_100063CD0(*(_QWORD *)v23, *(_QWORD *)(v23 + 8));
      v25 = v29;
      *(_QWORD *)v23 = a1;
      *(_QWORD *)(v23 + 8) = v25;
      return result;
    }
    goto LABEL_11;
  }
  if (v21 >= v19 && (a4 & 1) == 0)
  {
    sub_100190E48();
    goto LABEL_7;
  }
  sub_10018AFC8(v19, a4 & 1);
  v26 = sub_100187E34(a3);
  if ((v20 & 1) != (v27 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v9);
    __break(1u);
    return result;
  }
  v16 = v26;
  v22 = *v5;
  if ((v20 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a3, v9);
  return sub_10018FAD4(v16, (uint64_t)v13, a1, v29, v22);
}

uint64_t sub_10018EA00(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t result;
  uint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;

  v5 = v4;
  v10 = *v4;
  v12 = sub_100187F80(a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1001882A0);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1001912F8();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      return sub_1001253B0(a1, v18[7] + 40 * v12);
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v22 = (uint64_t *)(v18[6] + 16 * v12);
    *v22 = a2;
    v22[1] = a3;
    v23 = v18[7] + 40 * v12;
    v24 = *(_OWORD *)a1;
    v25 = *(_OWORD *)(a1 + 16);
    *(_QWORD *)(v23 + 32) = *(_QWORD *)(a1 + 32);
    *(_OWORD *)v23 = v24;
    *(_OWORD *)(v23 + 16) = v25;
    v26 = v18[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (!v27)
    {
      v18[2] = v28;
      return swift_bridgeObjectRetain(a3);
    }
    goto LABEL_14;
  }
  sub_10018B720(v15, a4 & 1);
  v20 = sub_100187F80(a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1001882A0);
  if ((v16 & 1) == (v21 & 1))
  {
    v12 = v20;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      return sub_1001253B0(a1, v18[7] + 40 * v12);
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_10018EB8C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v5 = v4;
  v10 = *v4;
  v12 = sub_100187F80(a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1001882A0);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1001914EC();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];
      result = swift_release(*(_QWORD *)(v19 + 8 * v12) & 0x1FFFFFFFFFFFFFFFLL);
      *(_QWORD *)(v19 + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v23 = (uint64_t *)(v18[6] + 16 * v12);
    *v23 = a2;
    v23[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v24 = v18[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (!v25)
    {
      v18[2] = v26;
      return swift_bridgeObjectRetain(a3);
    }
    goto LABEL_14;
  }
  sub_10018BA54(v15, a4 & 1);
  v21 = sub_100187F80(a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1001882A0);
  if ((v16 & 1) == (v22 & 1))
  {
    v12 = v21;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_10018ED0C(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  return sub_10018ED18(a1, a2, a3, a4, &qword_1003489D8);
}

uint64_t sub_10018ED18(uint64_t a1, uint64_t a2, unint64_t a3, char a4, uint64_t *a5)
{
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  char v24;
  uint64_t *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;

  v7 = v5;
  v12 = *v5;
  v14 = sub_100187F80(a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))&Data.hash(into:), sub_1001884E0);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v18 = v13;
  v19 = *(_QWORD *)(v12 + 24);
  if (v19 >= v17 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v19 >= v17 && (a4 & 1) == 0)
  {
    sub_1001916BC(a5);
LABEL_7:
    v20 = (_QWORD *)*v7;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7];
      result = swift_bridgeObjectRelease(*(_QWORD *)(v21 + 8 * v14));
      *(_QWORD *)(v21 + 8 * v14) = a1;
      return result;
    }
LABEL_11:
    v20[(v14 >> 6) + 8] |= 1 << v14;
    v25 = (uint64_t *)(v20[6] + 16 * v14);
    *v25 = a2;
    v25[1] = a3;
    *(_QWORD *)(v20[7] + 8 * v14) = a1;
    v26 = v20[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (!v27)
    {
      v20[2] = v28;
      return sub_100063C8C(a2, a3);
    }
    goto LABEL_14;
  }
  sub_10018BD7C(v17, a4 & 1, a5);
  v23 = sub_100187F80(a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))&Data.hash(into:), sub_1001884E0);
  if ((v18 & 1) == (v24 & 1))
  {
    v14 = v23;
    v20 = (_QWORD *)*v7;
    if ((v18 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Data);
  __break(1u);
  return result;
}

uint64_t sub_10018EEB0(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  return sub_10018ED18(a1, a2, a3, a4, (uint64_t *)&unk_1003489E0);
}

uint64_t sub_10018EEBC(char a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t result;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  char v22;
  uint64_t v23;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)*v3;
  v15 = sub_100187E34(a2);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  result = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  v19 = v14;
  v20 = v13[3];
  if (v20 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    v21 = *v4;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      *(_BYTE *)(v21[7] + v15) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_100191868();
    goto LABEL_7;
  }
  sub_10018C080(result, a3 & 1);
  result = sub_100187E34(a2);
  if ((v19 & 1) != (v22 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }
  v15 = result;
  v21 = *v4;
  if ((v19 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
  return sub_10018FBC0(v15, (uint64_t)v12, a1, v21);
}

uint64_t sub_10018F00C(__int16 a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t result;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  char v22;
  uint64_t v23;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)*v3;
  v15 = sub_100187E34(a2);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  result = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  v19 = v14;
  v20 = v13[3];
  if (v20 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    v21 = *v4;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      *(_WORD *)(v21[7] + 2 * v15) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_100191A88();
    goto LABEL_7;
  }
  sub_10018C420(result, a3 & 1);
  result = sub_100187E34(a2);
  if ((v19 & 1) != (v22 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }
  v15 = result;
  v21 = *v4;
  if ((v19 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
  return sub_10018FC58(v15, (uint64_t)v12, a1, v21);
}

_OWORD *sub_10018F15C(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _OWORD *result;
  unint64_t v19;
  char v20;
  _BYTE v21[40];

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_100187F3C(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = (_QWORD *)(v16[7] + 32 * v10);
        sub_10006BA9C(v17);
        return sub_10006C2B4(a1, v17);
      }
      goto LABEL_11;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_100191CAC();
      goto LABEL_7;
    }
    sub_10018C7C0(v13, a3 & 1);
    v19 = sub_100187F3C(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1001988C4(a2, (uint64_t)v21);
      return sub_10018FCF0(v10, (uint64_t)v21, a1, v16);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AnyHashable);
  __break(1u);
  return result;
}

uint64_t sub_10018F294(char a1, unsigned __int16 a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v4 = v3;
  v8 = *v3;
  v10 = sub_100187FF8(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_100191E90();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      *(_BYTE *)(v16[7] + v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(_WORD *)(v16[6] + 2 * v10) = a2;
    *(_BYTE *)(v16[7] + v10) = a1;
    v18 = v16[2];
    v19 = __OFADD__(v18, 1);
    v20 = v18 + 1;
    if (!v19)
    {
      v16[2] = v20;
      return result;
    }
    goto LABEL_14;
  }
  sub_10018CAD4(result, a3 & 1);
  result = sub_100187FF8(a2);
  if ((v14 & 1) == (v17 & 1))
  {
    v10 = result;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt16);
  __break(1u);
  return result;
}

uint64_t sub_10018F3BC(uint64_t a1, uint64_t a2, unsigned __int16 a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v10 = *v4;
  v12 = sub_100187FF8(a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= result && (a4 & 1) == 0)
  {
    result = (uint64_t)sub_10019201C();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7] + 16 * v12;
      result = sub_100063CD0(*(_QWORD *)v19, *(_QWORD *)(v19 + 8));
      *(_QWORD *)v19 = a1;
      *(_QWORD *)(v19 + 8) = a2;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    *(_WORD *)(v18[6] + 2 * v12) = a3;
    v21 = (_QWORD *)(v18[7] + 16 * v12);
    *v21 = a1;
    v21[1] = a2;
    v22 = v18[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (!v23)
    {
      v18[2] = v24;
      return result;
    }
    goto LABEL_14;
  }
  sub_10018CD84(result, a4 & 1);
  result = sub_100187FF8(a3);
  if ((v16 & 1) == (v20 & 1))
  {
    v12 = result;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt16);
  __break(1u);
  return result;
}

void sub_10018F4F8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_10018F504(a1, a2, a3, a4, &qword_100348AC0);
}

void sub_10018F504(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  v7 = v5;
  v12 = *v5;
  v14 = sub_100187F80(a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1001882A0);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v18 = v13;
  v19 = *(_QWORD *)(v12 + 24);
  if (v19 >= v17 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v19 >= v17 && (a4 & 1) == 0)
  {
    sub_1001921C8(a5);
LABEL_7:
    v20 = (_QWORD *)*v7;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7];

      *(_QWORD *)(v21 + 8 * v14) = a1;
      return;
    }
LABEL_11:
    v20[(v14 >> 6) + 8] |= 1 << v14;
    v24 = (uint64_t *)(v20[6] + 16 * v14);
    *v24 = a2;
    v24[1] = a3;
    *(_QWORD *)(v20[7] + 8 * v14) = a1;
    v25 = v20[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (!v26)
    {
      v20[2] = v27;
      swift_bridgeObjectRetain(a3);
      return;
    }
    goto LABEL_14;
  }
  sub_10018D04C(v17, a4 & 1, a5);
  v22 = sub_100187F80(a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1001882A0);
  if ((v18 & 1) == (v23 & 1))
  {
    v14 = v22;
    v20 = (_QWORD *)*v7;
    if ((v18 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_10018F698(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  char v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;

  v6 = v5;
  v12 = *v5;
  v14 = sub_100187F80(a3, a4, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1001882A0);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v18 = v13;
  v19 = *(_QWORD *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0)
    goto LABEL_7;
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_1001925A8();
LABEL_7:
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = (_QWORD *)(v20[7] + 16 * v14);
      swift_bridgeObjectRelease(v21[1]);
      *v21 = a1;
      v21[1] = a2;
      return;
    }
LABEL_11:
    v20[(v14 >> 6) + 8] |= 1 << v14;
    v24 = (uint64_t *)(v20[6] + 16 * v14);
    *v24 = a3;
    v24[1] = a4;
    v25 = (_QWORD *)(v20[7] + 16 * v14);
    *v25 = a1;
    v25[1] = a2;
    v26 = v20[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (!v27)
    {
      v20[2] = v28;
      swift_bridgeObjectRetain(a4);
      return;
    }
    goto LABEL_14;
  }
  sub_10018D708(v17, a5 & 1);
  v22 = sub_100187F80(a3, a4, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1001882A0);
  if ((v18 & 1) == (v23 & 1))
  {
    v14 = v22;
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

_OWORD *sub_10018F82C(_OWORD *a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _OWORD *result;
  unint64_t v18;
  char v19;
  uint64_t v20;

  v4 = (_QWORD **)v3;
  v7 = (_QWORD *)*v3;
  v9 = sub_100188148((uint64_t)a2);
  v10 = v7[2];
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    v13 = v8;
    v14 = v7[3];
    if (v14 >= v12 && (a3 & 1) != 0)
    {
LABEL_7:
      v15 = *v4;
      if ((v13 & 1) != 0)
      {
LABEL_8:
        v16 = (_QWORD *)(v15[7] + 32 * v9);
        sub_10006BA9C(v16);
        return sub_10006C2B4(a1, v16);
      }
      goto LABEL_11;
    }
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      sub_100192760();
      goto LABEL_7;
    }
    sub_10018DA2C(v12, a3 & 1);
    v18 = sub_100188148((uint64_t)a2);
    if ((v13 & 1) == (v19 & 1))
    {
      v9 = v18;
      v15 = *v4;
      if ((v13 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10018FD68(v9, (uint64_t)a2, a1, v15);
      return a2;
    }
  }
  type metadata accessor for CFString(0);
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v20);
  __break(1u);
  return result;
}

uint64_t sub_10018F94C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  a6[(a1 >> 6) + 8] |= 1 << a1;
  v12 = a6[6];
  v13 = type metadata accessor for UUID(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v12 + *(_QWORD *)(*(_QWORD *)(v13 - 8) + 72) * a1, a2, v13);
  v15 = (_QWORD *)(a6[7] + 24 * a1);
  *v15 = a3;
  v15[1] = a4;
  v15[2] = a5;
  v16 = a6[2];
  v17 = __OFADD__(v16, 1);
  v18 = v16 + 1;
  if (v17)
    __break(1u);
  else
    a6[2] = v18;
  return result;
}

_OWORD *sub_10018FA00(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_10006C2B4(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

uint64_t sub_10018FA68(unint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, _QWORD *a5)
{
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_1000DB160(a4, a5[7] + 40 * a1);
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

uint64_t sub_10018FAD4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v10 = a5[6];
  v11 = type metadata accessor for UUID(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a2, v11);
  v13 = (_QWORD *)(a5[7] + 16 * a1);
  *v13 = a3;
  v13[1] = a4;
  v14 = a5[2];
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    a5[2] = v16;
  return result;
}

unint64_t sub_10018FB74(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

uint64_t sub_10018FBC0(unint64_t a1, uint64_t a2, char a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UUID(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(_BYTE *)(a4[7] + a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

uint64_t sub_10018FC58(unint64_t a1, uint64_t a2, __int16 a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UUID(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(_WORD *)(a4[7] + 2 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

_OWORD *sub_10018FCF0(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t v5;
  __int128 v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v5 = a4[6] + 40 * a1;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  result = sub_10006C2B4(a3, (_OWORD *)(a4[7] + 32 * a1));
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

_OWORD *sub_10018FD68(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  _OWORD *result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = sub_10006C2B4(a3, (_OWORD *)(a4[7] + 32 * a1));
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

void *sub_10018FDCC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t (*v22)(unint64_t, char *, uint64_t);
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int64_t v30;
  __int128 v31;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin();
  v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100063D3C(&qword_100348930);
  v28 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v5);
    *v28 = v7;
    return result;
  }
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v29 = v5 + 64;
  v30 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v24 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v30)
      goto LABEL_26;
    v25 = *(_QWORD *)(v29 + 8 * v24);
    ++v11;
    if (!v25)
    {
      v11 = v24 + 1;
      if (v24 + 1 >= v30)
        goto LABEL_26;
      v25 = *(_QWORD *)(v29 + 8 * v11);
      if (!v25)
        break;
    }
LABEL_25:
    v14 = (v25 - 1) & v25;
    v16 = __clz(__rbit64(v25)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v17, v1);
    v18 = 24 * v16;
    v19 = *(_QWORD *)(v5 + 56) + v18;
    v20 = *(_QWORD *)(v19 + 16);
    v21 = *(_QWORD *)(v7 + 48) + v17;
    v22 = *(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32);
    v31 = *(_OWORD *)v19;
    result = (void *)v22(v21, v4, v1);
    v23 = *(_QWORD *)(v7 + 56) + v18;
    *(_OWORD *)v23 = v31;
    *(_QWORD *)(v23 + 16) = v20;
  }
  v26 = v24 + 2;
  if (v26 >= v30)
    goto LABEL_26;
  v25 = *(_QWORD *)(v29 + 8 * v26);
  if (v25)
  {
    v11 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v11 >= v30)
      goto LABEL_26;
    v25 = *(_QWORD *)(v29 + 8 * v11);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10019000C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  v1 = v0;
  sub_100063D3C(&qword_1003461B0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release(v2);
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    sub_100096CB0(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_10006C2B4(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    result = (void *)swift_bridgeObjectRetain(v18);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release(v2);
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1001901F0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  __int128 v22[2];

  v1 = v0;
  sub_100063D3C((uint64_t *)&unk_1003489A0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 40 * v15;
    sub_1000E504C(*(_QWORD *)(v2 + 56) + 40 * v15, (uint64_t)v22);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = (void *)sub_1000DB160(v22, *(_QWORD *)(v4 + 56) + v18);
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1001903B4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;

  v1 = v0;
  sub_100063D3C(&qword_1003488E8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v21 = __clz(__rbit64(v19));
    v12 = (v19 - 1) & v19;
    v15 = v21 + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_100190544(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100190554(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void *sub_10019055C()
{
  return sub_1001916BC(&qword_100348A38);
}

void *sub_100190568()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  __int128 v26[2];

  v1 = v0;
  sub_100063D3C(&qword_1003489F0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release(v2);
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = *v17;
    v19 = v17[1];
    v20 = 40 * v15;
    sub_1000E504C(*(_QWORD *)(v2 + 56) + 40 * v15, (uint64_t)v26);
    v21 = (uint64_t *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v18;
    v21[1] = v19;
    sub_1000DB160(v26, *(_QWORD *)(v4 + 56) + v20);
    result = (void *)sub_100063C8C(v18, v19);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release(v2);
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100190754()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  __int128 v25;

  v1 = v0;
  sub_100063D3C(&qword_100348960);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = 24 * v15;
    v18 = *(_QWORD *)(v2 + 56) + v17;
    v19 = *(_QWORD *)v18;
    v20 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v25 = *(_OWORD *)(v18 + 8);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v16) = v20;
    v21 = *(_QWORD *)(v4 + 56) + v17;
    *(_QWORD *)v21 = v19;
    *(_OWORD *)(v21 + 8) = v25;
    sub_100063C8C(v20, *((unint64_t *)&v20 + 1));
    result = (void *)sub_100063C8C(v19, v25);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100190930()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_100063D3C(&qword_1003489C8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 16 * v15;
    v19 = *(_QWORD *)(v2 + 56) + v18;
    v20 = *(_QWORD *)v19;
    LOBYTE(v19) = *(_BYTE *)(v19 + 8);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v21 = *(_QWORD *)(v4 + 56) + v18;
    *(_QWORD *)v21 = v20;
    *(_BYTE *)(v21 + 8) = v19;
    result = (void *)swift_bridgeObjectRetain(v20);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_100190AE4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_100063D3C(&qword_100348AB8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 56) + 8 * v15);
    v18 = 16 * v15;
    v19 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v18);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v18) = v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    sub_100063C8C(v19, *((unint64_t *)&v19 + 1));
    result = v17;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100190C94()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_100063D3C(&qword_100348B88);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    result = (void *)swift_unknownObjectRetain(v20);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100190E48()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v38 = type metadata accessor for UUID(0);
  v1 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38, v2);
  v37 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100063D3C(&qword_100348968);
  v34 = v0;
  v4 = *v0;
  v5 = static _DictionaryStorage.copy(original:)(*v0);
  v6 = *(_QWORD *)(v4 + 16);
  v40 = v5;
  if (!v6)
  {
    result = (void *)swift_release(v4);
    v32 = v40;
    v31 = v34;
LABEL_28:
    *v31 = v32;
    return result;
  }
  v7 = v5;
  result = (void *)(v5 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v4 || (unint64_t)result >= v4 + 64 + 8 * v9)
  {
    result = memmove(result, (const void *)(v4 + 64), 8 * v9);
    v7 = v40;
  }
  v35 = v4 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v4 + 16);
  v12 = 1 << *(_BYTE *)(v4 + 32);
  v39 = v4;
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v4 + 64);
  v36 = (unint64_t)(v12 + 63) >> 6;
  v16 = v37;
  v15 = v38;
  v17 = v40;
  while (1)
  {
    if (v14)
    {
      v18 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v19 = v18 | (v11 << 6);
      v20 = v39;
      goto LABEL_12;
    }
    v28 = v11 + 1;
    v20 = v39;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v28 >= v36)
      goto LABEL_26;
    v29 = *(_QWORD *)(v35 + 8 * v28);
    ++v11;
    if (!v29)
    {
      v11 = v28 + 1;
      if (v28 + 1 >= v36)
        goto LABEL_26;
      v29 = *(_QWORD *)(v35 + 8 * v11);
      if (!v29)
        break;
    }
LABEL_25:
    v14 = (v29 - 1) & v29;
    v19 = __clz(__rbit64(v29)) + (v11 << 6);
LABEL_12:
    v21 = *(_QWORD *)(v1 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v16, *(_QWORD *)(v20 + 48) + v21, v15);
    v22 = *(_QWORD *)(v20 + 56);
    v23 = 16 * v19;
    v24 = (uint64_t *)(v22 + 16 * v19);
    v25 = *v24;
    v26 = v24[1];
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(_QWORD *)(v17 + 48) + v21, v16, v15);
    v27 = (uint64_t *)(*(_QWORD *)(v17 + 56) + v23);
    *v27 = v25;
    v27[1] = v26;
    result = (void *)sub_100063C8C(v25, v26);
  }
  v30 = v28 + 2;
  if (v30 >= v36)
  {
LABEL_26:
    result = (void *)swift_release(v39);
    v31 = v34;
    v32 = v40;
    goto LABEL_28;
  }
  v29 = *(_QWORD *)(v35 + 8 * v30);
  if (v29)
  {
    v11 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v11 >= v36)
      goto LABEL_26;
    v29 = *(_QWORD *)(v35 + 8 * v11);
    ++v30;
    if (v29)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_1001910BC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int64_t v27;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100063D3C(&qword_100348AF0);
  v25 = v0;
  v6 = *v0;
  v7 = static _DictionaryStorage.copy(original:)(*v0);
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_26:
    result = (id)swift_release(v6);
    *v25 = v8;
    return result;
  }
  result = (id)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v26 = v6 + 64;
  v27 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v16 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v17 = v16 | (v12 << 6);
      goto LABEL_12;
    }
    v21 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v27)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v21);
    ++v12;
    if (!v22)
    {
      v12 = v21 + 1;
      if (v21 + 1 >= v27)
        goto LABEL_26;
      v22 = *(_QWORD *)(v26 + 8 * v12);
      if (!v22)
        break;
    }
LABEL_25:
    v15 = (v22 - 1) & v22;
    v17 = __clz(__rbit64(v22)) + (v12 << 6);
LABEL_12:
    v18 = *(_QWORD *)(v2 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v5, *(_QWORD *)(v6 + 48) + v18, v1);
    v19 = 8 * v17;
    v20 = *(void **)(*(_QWORD *)(v6 + 56) + v19);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v8 + 48) + v18, v5, v1);
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v19) = v20;
    result = v20;
  }
  v23 = v21 + 2;
  if (v23 >= v27)
    goto LABEL_26;
  v22 = *(_QWORD *)(v26 + 8 * v23);
  if (v22)
  {
    v12 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v12 >= v27)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v12);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1001912E4()
{
  return sub_100192384((uint64_t (*)(_QWORD))&type metadata accessor for CredentialType, &qword_100348B08);
}

void *sub_1001912F8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t *v28;
  _OWORD v29[2];
  uint64_t v30;

  v1 = v0;
  sub_100063D3C(&qword_100348B58);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release(v2);
LABEL_28:
    *v1 = v4;
    return result;
  }
  v28 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 40 * v15;
    sub_1001988C4(*(_QWORD *)(v2 + 56) + 40 * v15, (uint64_t)v29);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    v22 = *(_QWORD *)(v4 + 56) + v20;
    v23 = v30;
    v24 = v29[1];
    *(_OWORD *)v22 = v29[0];
    *(_OWORD *)(v22 + 16) = v24;
    *(_QWORD *)(v22 + 32) = v23;
    result = (void *)swift_bridgeObjectRetain(v18);
  }
  v27 = v25 + 2;
  if (v27 >= v13)
  {
LABEL_26:
    result = (void *)swift_release(v2);
    v1 = v28;
    goto LABEL_28;
  }
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1001914EC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  sub_100063D3C(&qword_100348A98);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = *v17;
    v19 = v17[1];
    v20 = 8 * v15;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v22 = v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    swift_retain(v21 & 0x1FFFFFFFFFFFFFFFLL);
    result = (void *)swift_bridgeObjectRetain(v19);
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1001916A4()
{
  return sub_1001916BC(&qword_1003489D8);
}

void *sub_1001916B0()
{
  return sub_1001916BC((uint64_t *)&unk_1003489E0);
}

void *sub_1001916BC(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;

  v2 = v1;
  sub_100063D3C(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v3);
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v21 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v14)
      goto LABEL_26;
    v22 = *(_QWORD *)(v7 + 8 * v21);
    ++v10;
    if (!v22)
    {
      v10 = v21 + 1;
      if (v21 + 1 >= v14)
        goto LABEL_26;
      v22 = *(_QWORD *)(v7 + 8 * v10);
      if (!v22)
        break;
    }
LABEL_25:
    v13 = (v22 - 1) & v22;
    v16 = __clz(__rbit64(v22)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v16);
    v19 = 16 * v16;
    v20 = *(_OWORD *)(*(_QWORD *)(v3 + 48) + v19);
    *(_OWORD *)(*(_QWORD *)(v5 + 48) + v19) = v20;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v17) = v18;
    sub_100063C8C(v20, *((unint64_t *)&v20 + 1));
    result = (void *)swift_bridgeObjectRetain(v18);
  }
  v23 = v21 + 2;
  if (v23 >= v14)
    goto LABEL_26;
  v22 = *(_QWORD *)(v7 + 8 * v23);
  if (v22)
  {
    v10 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v22 = *(_QWORD *)(v7 + 8 * v10);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100191868()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100063D3C(&qword_100348A10);
  v24 = v0;
  v6 = *v0;
  v7 = static _DictionaryStorage.copy(original:)(*v0);
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v6);
    *v24 = v8;
    return result;
  }
  result = (void *)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v25 = v6 + 64;
  v26 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v16 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v17 = v16 | (v12 << 6);
      goto LABEL_12;
    }
    v20 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v12;
    if (!v21)
    {
      v12 = v20 + 1;
      if (v20 + 1 >= v26)
        goto LABEL_26;
      v21 = *(_QWORD *)(v25 + 8 * v12);
      if (!v21)
        break;
    }
LABEL_25:
    v15 = (v21 - 1) & v21;
    v17 = __clz(__rbit64(v21)) + (v12 << 6);
LABEL_12:
    v18 = *(_QWORD *)(v2 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v5, *(_QWORD *)(v6 + 48) + v18, v1);
    v19 = *(_BYTE *)(*(_QWORD *)(v6 + 56) + v17);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v8 + 48) + v18, v5, v1);
    *(_BYTE *)(*(_QWORD *)(v8 + 56) + v17) = v19;
  }
  v22 = v20 + 2;
  if (v22 >= v26)
    goto LABEL_26;
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v12 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v12 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v12);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100191A88()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __int16 v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int64_t v27;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100063D3C(&qword_100348A18);
  v25 = v0;
  v6 = *v0;
  v7 = static _DictionaryStorage.copy(original:)(*v0);
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v6);
    *v25 = v8;
    return result;
  }
  result = (void *)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v26 = v6 + 64;
  v27 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v16 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v17 = v16 | (v12 << 6);
      goto LABEL_12;
    }
    v21 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v27)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v21);
    ++v12;
    if (!v22)
    {
      v12 = v21 + 1;
      if (v21 + 1 >= v27)
        goto LABEL_26;
      v22 = *(_QWORD *)(v26 + 8 * v12);
      if (!v22)
        break;
    }
LABEL_25:
    v15 = (v22 - 1) & v22;
    v17 = __clz(__rbit64(v22)) + (v12 << 6);
LABEL_12:
    v18 = *(_QWORD *)(v2 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v5, *(_QWORD *)(v6 + 48) + v18, v1);
    v19 = 2 * v17;
    v20 = *(_WORD *)(*(_QWORD *)(v6 + 56) + v19);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v8 + 48) + v18, v5, v1);
    *(_WORD *)(*(_QWORD *)(v8 + 56) + v19) = v20;
  }
  v23 = v21 + 2;
  if (v23 >= v27)
    goto LABEL_26;
  v22 = *(_QWORD *)(v26 + 8 * v23);
  if (v22)
  {
    v12 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v12 >= v27)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v12);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100191CAC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  _OWORD v24[2];
  _OWORD v25[2];
  uint64_t v26;

  v1 = v0;
  sub_100063D3C(&qword_100348908);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    sub_1001988C4(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    v17 = 32 * v15;
    sub_100096CB0(*(_QWORD *)(v2 + 56) + v17, (uint64_t)v24);
    v18 = *(_QWORD *)(v4 + 48) + v16;
    v19 = v25[0];
    v20 = v25[1];
    *(_QWORD *)(v18 + 32) = v26;
    *(_OWORD *)v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    result = sub_10006C2B4(v24, (_OWORD *)(*(_QWORD *)(v4 + 56) + v17));
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100191E90()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;

  v1 = v0;
  sub_100063D3C(&qword_100348A30);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v20 = __clz(__rbit64(v18));
    v12 = (v18 - 1) & v18;
    v15 = v20 + (v9 << 6);
LABEL_12:
    v16 = *(_BYTE *)(*(_QWORD *)(v2 + 56) + v15);
    *(_WORD *)(*(_QWORD *)(v4 + 48) + 2 * v15) = *(_WORD *)(*(_QWORD *)(v2 + 48) + 2 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 56) + v15) = v16;
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10019201C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_100063D3C(&qword_100348A28);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 2 * v15;
    v17 = *(_WORD *)(*(_QWORD *)(v2 + 48) + 2 * v15);
    v18 = 16 * v15;
    v19 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v18);
    *(_WORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
    result = (void *)sub_100063C8C(v19, *((unint64_t *)&v19 + 1));
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1001921C8(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v2 = v1;
  sub_100063D3C(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (id)swift_release(v3);
    *v2 = v5;
    return result;
  }
  result = (id)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v19 = v18[1];
    v20 = 8 * v16;
    v21 = *(void **)(*(_QWORD *)(v3 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = *v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain(v19);
    result = v21;
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100192370()
{
  return sub_100192384((uint64_t (*)(_QWORD))&type metadata accessor for URL, &qword_100348AC8);
}

void *sub_100192384(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *result;
  unint64_t v13;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int64_t v30;

  v4 = a1(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v27 - v7;
  sub_100063D3C(a2);
  v28 = v2;
  v9 = *v2;
  v10 = static _DictionaryStorage.copy(original:)(*v2);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v9);
    *v28 = v11;
    return result;
  }
  result = (void *)(v10 + 64);
  v13 = (unint64_t)((1 << *(_BYTE *)(v11 + 32)) + 63) >> 6;
  if (v11 != v9 || (unint64_t)result >= v9 + 64 + 8 * v13)
    result = memmove(result, (const void *)(v9 + 64), 8 * v13);
  v15 = 0;
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v9 + 16);
  v16 = 1 << *(_BYTE *)(v9 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & *(_QWORD *)(v9 + 64);
  v29 = v9 + 64;
  v30 = (unint64_t)(v16 + 63) >> 6;
  while (1)
  {
    if (v18)
    {
      v19 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v20 = v19 | (v15 << 6);
      goto LABEL_12;
    }
    v24 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v30)
      goto LABEL_26;
    v25 = *(_QWORD *)(v29 + 8 * v24);
    ++v15;
    if (!v25)
    {
      v15 = v24 + 1;
      if (v24 + 1 >= v30)
        goto LABEL_26;
      v25 = *(_QWORD *)(v29 + 8 * v15);
      if (!v25)
        break;
    }
LABEL_25:
    v18 = (v25 - 1) & v25;
    v20 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_12:
    v21 = *(_QWORD *)(v5 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v8, *(_QWORD *)(v9 + 48) + v21, v4);
    v22 = 8 * v20;
    v23 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + v22);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(_QWORD *)(v11 + 48) + v21, v8, v4);
    *(_QWORD *)(*(_QWORD *)(v11 + 56) + v22) = v23;
  }
  v26 = v24 + 2;
  if (v26 >= v30)
    goto LABEL_26;
  v25 = *(_QWORD *)(v29 + 8 * v26);
  if (v25)
  {
    v15 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v15 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v15 >= v30)
      goto LABEL_26;
    v25 = *(_QWORD *)(v29 + 8 * v15);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_1001925A8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  sub_100063D3C(&qword_100348988);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = *v20;
    v22 = v20[1];
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v23 = v19;
    v23[1] = v18;
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v16);
    *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v22);
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

id sub_100192760()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  _OWORD v22[2];

  v1 = v0;
  sub_100063D3C(&qword_100348A40);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 32 * v15;
    sub_100096CB0(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    sub_10006C2B4(v22, (_OWORD *)(*(_QWORD *)(v4 + 56) + v18));
    result = v17;
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_100192924(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100192BB8(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100192940(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10019386C(a1, a2, a3, (_QWORD *)*v3, &qword_100348B48, &qword_100348B50);
  *v3 = result;
  return result;
}

uint64_t sub_10019296C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100192D20(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_100192988(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1001930A8(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1001929A4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1001931F4(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1001929C0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100193A10(a1, a2, a3, *v3, &qword_100348AE8);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1001929E4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100193FF4(a1, a2, a3, (_QWORD *)*v3, (uint64_t *)&unk_100348910, &qword_100345388);
  *v3 = result;
  return result;
}

uint64_t sub_100192A10(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100193FF4(a1, a2, a3, (_QWORD *)*v3, &qword_100348B68, (uint64_t *)&unk_100348B70);
  *v3 = result;
  return result;
}

uint64_t sub_100192A3C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10019335C(a1, a2, a3, (_QWORD *)*v3, &qword_100348AF8, &qword_100348B00);
  *v3 = result;
  return result;
}

uint64_t sub_100192A68(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10019335C(a1, a2, a3, (_QWORD *)*v3, &qword_100348B20, &qword_100348B28);
  *v3 = result;
  return result;
}

uint64_t sub_100192A94(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10019353C(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_100192AB0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001936E4(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_100192ACC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10019386C(a1, a2, a3, (_QWORD *)*v3, &qword_100348A58, &qword_100348A60);
  *v3 = result;
  return result;
}

uint64_t sub_100192AF8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100193A10(a1, a2, a3, *v3, &qword_100348A68);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100192B1C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100193B68(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100192B38(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100193CE4(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_100192B54(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100193E88(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100192B70(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100193FF4(a1, a2, a3, (_QWORD *)*v3, (uint64_t *)&unk_100348990, &qword_100347F10);
  *v3 = result;
  return result;
}

uint64_t sub_100192B9C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100194180(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100192BB8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100063D3C((uint64_t *)&unk_100348920);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100192D20(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_100063D3C(&qword_100345398);
  v11 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  v16 = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v16 - v14 == 0x8000000000000000 && v12 == -1)
    goto LABEL_34;
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  v18 = type metadata accessor for UUID(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v15 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v15 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v21, v22, v8, v18);
    }
    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v8;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy(v21);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v15;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100192F00(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100063D3C((uint64_t *)&unk_1003489B0);
    v11 = (_QWORD *)swift_allocObject(v10, 56 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 56);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v13 = (unint64_t)(v11 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 56 * v8)
      memmove(v11 + 4, a4 + 4, 56 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v14 >= v13 + 56 * v8 || v13 >= v14 + 56 * v8)
  {
    sub_100063D3C(&qword_100344DD8);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001930A8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100063D3C(&qword_100348B90);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001931F4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100063D3C(&qword_100348980);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10019335C(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_100063D3C(a5);
  v14 = *(_QWORD *)(sub_100063D3C(a6) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
    goto LABEL_34;
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = sub_100063D3C(a6);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (char *)v18 + v23;
  v25 = (char *)a4 + v23;
  if ((a1 & 1) != 0)
  {
    if (v18 < a4 || v24 >= &v25[*(_QWORD *)(v22 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v24, v25, v11, v21);
    }
    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v26 = *(_QWORD *)(v22 + 72) * v11;
  v27 = &v24[v26];
  v28 = (unint64_t)&v25[v26];
  if (v25 >= v27 || (unint64_t)v24 >= v28)
  {
    swift_arrayInitWithCopy(v24);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v18;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10019353C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100063D3C(&qword_100348AA0);
    v11 = (_QWORD *)swift_allocObject(v10, 72 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 72);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v13 = (unint64_t)(v11 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 72 * v8)
      memmove(v11 + 4, a4 + 4, 72 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v14 >= v13 + 72 * v8 || v13 >= v14 + 72 * v8)
  {
    sub_100063D3C(&qword_100348AA8);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001936E4(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100063D3C(&qword_100348A70);
    v11 = (_QWORD *)swift_allocObject(v10, (v9 << 6) | 0x20, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 + 31;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 6);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = v11 + 4;
  v15 = a4 + 4;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v11 + 4, a4 + 4, v8 << 6);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    sub_100063D3C(&qword_100348A78);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10019386C(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    v13 = sub_100063D3C(a5);
    v14 = (_QWORD *)swift_allocObject(v13, 40 * v12 + 32, 7);
    v15 = j__malloc_size(v14);
    v14[2] = v11;
    v14[3] = 2 * ((uint64_t)(v15 - 32) / 40);
  }
  else
  {
    v14 = _swiftEmptyArrayStorage;
  }
  v16 = (unint64_t)(v14 + 4);
  v17 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v14 != a4 || v16 >= v17 + 40 * v11)
      memmove(v14 + 4, a4 + 4, 40 * v11);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v17 >= v16 + 40 * v11 || v16 >= v17 + 40 * v11)
  {
    sub_100063D3C(a6);
    swift_arrayInitWithCopy(v14 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v14;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100193A10(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    v11 = sub_100063D3C(a5);
    v12 = (char *)swift_allocObject(v11, 8 * v10 + 32, 7);
    v13 = j__malloc_size(v12);
    v14 = v13 - 32;
    if (v13 < 32)
      v14 = v13 - 25;
    *((_QWORD *)v12 + 2) = v9;
    *((_QWORD *)v12 + 3) = 2 * (v14 >> 3);
  }
  else
  {
    v12 = (char *)_swiftEmptyArrayStorage;
  }
  v15 = v12 + 32;
  v16 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v12 != a4 || v15 >= &v16[8 * v9])
      memmove(v15, v16, 8 * v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v16 >= &v15[8 * v9] || v15 >= &v16[8 * v9])
  {
    memcpy(v15, v16, 8 * v9);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v12;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100193B68(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100063D3C(&qword_100348A90);
    v11 = (char *)swift_allocObject(v10, 72 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 72);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  v15 = 72 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100193CE4(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100063D3C(&qword_100348A80);
    v11 = (_QWORD *)swift_allocObject(v10, 48 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 48);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v13 = (unint64_t)(v11 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 48 * v8)
      memmove(v11 + 4, a4 + 4, 48 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v14 >= v13 + 48 * v8 || v13 >= v14 + 48 * v8)
  {
    sub_100063D3C(&qword_100348A88);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100193E88(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100063D3C(&qword_100348B30);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[32 * v8] || v14 >= &v15[32 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100193FF4(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    v13 = sub_100063D3C(a5);
    v14 = (_QWORD *)swift_allocObject(v13, 8 * v12 + 32, 7);
    v15 = j__malloc_size(v14);
    v16 = v15 - 32;
    if (v15 < 32)
      v16 = v15 - 25;
    v14[2] = v11;
    v14[3] = 2 * (v16 >> 3);
  }
  else
  {
    v14 = _swiftEmptyArrayStorage;
  }
  v17 = (unint64_t)(v14 + 4);
  v18 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v14 != a4 || v17 >= v18 + 8 * v11)
      memmove(v14 + 4, a4 + 4, 8 * v11);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v18 >= v17 + 8 * v11 || v17 >= v18 + 8 * v11)
  {
    sub_100063D3C(a6);
    swift_arrayInitWithCopy(v14 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v14;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100194180(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  int64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100063D3C(&qword_100348A20);
    v11 = (char *)swift_allocObject(v10, 2 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 31;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = v13 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[2 * v8])
      memmove(v14, v15, 2 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[2 * v8] || v14 >= &v15[2 * v8])
  {
    memcpy(v14, v15, 2 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

Swift::Int sub_1001942D8(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  char *v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;

  if ((a1 & 0xC000000000000001) == 0)
    return sub_10019470C(a1, (uint64_t (*)(char *, unint64_t, uint64_t))sub_100194874);
  v1 = &_swiftEmptySetSingleton;
  v21 = &_swiftEmptySetSingleton;
  if (a1 >= 0)
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  v2 = __CocoaSet.makeIterator()(a1);
  v3 = __CocoaSet.Iterator.next()(v2);
  if (v3)
  {
    v4 = v3;
    v5 = type metadata accessor for UWBSession();
    do
    {
      v19 = v4;
      swift_dynamicCast(&v20, &v19, (char *)&type metadata for Swift.AnyObject + 8, v5, 7);
      v7 = v20;
      if (*(_BYTE *)(*(_QWORD *)&v20[OBJC_IVAR____TtC10seserviced10UWBSession_peer]
                    + OBJC_IVAR____TtC10seserviced4Peer_type) == 3)
      {
        v8 = v21;
        v9 = v21[2];
        if (v21[3] <= v9)
        {
          sub_1000CB34C(v9 + 1);
          v8 = v21;
        }
        result = NSObject._rawHashValue(seed:)(v8[5]);
        v10 = v8 + 7;
        v11 = -1 << *((_BYTE *)v8 + 32);
        v12 = result & ~v11;
        v13 = v12 >> 6;
        if (((-1 << v12) & ~v8[(v12 >> 6) + 7]) != 0)
        {
          v14 = __clz(__rbit64((-1 << v12) & ~v8[(v12 >> 6) + 7])) | v12 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v15 = 0;
          v16 = (unint64_t)(63 - v11) >> 6;
          do
          {
            if (++v13 == v16 && (v15 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v17 = v13 == v16;
            if (v13 == v16)
              v13 = 0;
            v15 |= v17;
            v18 = v10[v13];
          }
          while (v18 == -1);
          v14 = __clz(__rbit64(~v18)) + (v13 << 6);
        }
        *(_QWORD *)((char *)v10 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
        *(_QWORD *)(v8[6] + 8 * v14) = v7;
        ++v8[2];
      }
      else
      {

      }
      v4 = __CocoaSet.Iterator.next()(result);
    }
    while (v4);
    v1 = v21;
  }
  swift_release(v2);
  return (Swift::Int)v1;
}

Swift::Int sub_1001944F4(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  char *v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;

  if ((a1 & 0xC000000000000001) == 0)
    return sub_10019470C(a1, (uint64_t (*)(char *, unint64_t, uint64_t))sub_100194A10);
  v1 = &_swiftEmptySetSingleton;
  v21 = &_swiftEmptySetSingleton;
  if (a1 >= 0)
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  v2 = __CocoaSet.makeIterator()(a1);
  v3 = __CocoaSet.Iterator.next()(v2);
  if (v3)
  {
    v4 = v3;
    v5 = type metadata accessor for UWBSession();
    do
    {
      v19 = v4;
      swift_dynamicCast(&v20, &v19, (char *)&type metadata for Swift.AnyObject + 8, v5, 7);
      v7 = v20;
      if (*(_BYTE *)(*(_QWORD *)&v20[OBJC_IVAR____TtC10seserviced10UWBSession_peer]
                    + OBJC_IVAR____TtC10seserviced4Peer_type))
      {

      }
      else
      {
        v8 = v21;
        v9 = v21[2];
        if (v21[3] <= v9)
        {
          sub_1000CB34C(v9 + 1);
          v8 = v21;
        }
        result = NSObject._rawHashValue(seed:)(v8[5]);
        v10 = v8 + 7;
        v11 = -1 << *((_BYTE *)v8 + 32);
        v12 = result & ~v11;
        v13 = v12 >> 6;
        if (((-1 << v12) & ~v8[(v12 >> 6) + 7]) != 0)
        {
          v14 = __clz(__rbit64((-1 << v12) & ~v8[(v12 >> 6) + 7])) | v12 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v15 = 0;
          v16 = (unint64_t)(63 - v11) >> 6;
          do
          {
            if (++v13 == v16 && (v15 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v17 = v13 == v16;
            if (v13 == v16)
              v13 = 0;
            v15 |= v17;
            v18 = v10[v13];
          }
          while (v18 == -1);
          v14 = __clz(__rbit64(~v18)) + (v13 << 6);
        }
        *(_QWORD *)((char *)v10 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
        *(_QWORD *)(v8[6] + 8 * v14) = v7;
        ++v8[2];
      }
      v4 = __CocoaSet.Iterator.next()(result);
    }
    while (v4);
    v1 = v21;
  }
  swift_release(v2);
  return (Swift::Int)v1;
}

uint64_t sub_10019470C(uint64_t a1, uint64_t (*a2)(char *, unint64_t, uint64_t))
{
  uint64_t v2;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v14;

  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v7 = (1 << v5) + 63;
  v8 = v7 >> 6;
  v9 = 8 * (v7 >> 6);
  if (v6 <= 0xD || (swift_stdlib_isStackAllocationSafe(8 * (v7 >> 6), 8) & 1) != 0)
  {
    __chkstk_darwin();
    bzero((char *)&v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    v10 = a2((char *)&v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v8, a1);
    v11 = swift_release(a1);
    if (v2)
      swift_willThrow(v11);
  }
  else
  {
    v12 = (void *)swift_slowAlloc(v9, -1);
    bzero(v12, v9);
    v10 = a2((char *)v12, v8, a1);
    swift_release(a1);
    swift_slowDealloc(v12, -1, -1);
  }
  return v10;
}

Swift::Int sub_100194874(Swift::Int result, uint64_t a2, uint64_t a3)
{
  unint64_t *v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v5 = (unint64_t *)result;
  v6 = 0;
  v7 = 0;
  v8 = a3 + 56;
  v9 = 1 << *(_BYTE *)(a3 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a3 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v15 = v14 | (v7 << 6);
      goto LABEL_7;
    }
    v16 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v16 >= v12)
      goto LABEL_23;
    v17 = *(_QWORD *)(v8 + 8 * v16);
    ++v7;
    if (!v17)
    {
      v7 = v16 + 1;
      if (v16 + 1 >= v12)
        goto LABEL_23;
      v17 = *(_QWORD *)(v8 + 8 * v7);
      if (!v17)
      {
        v7 = v16 + 2;
        if (v16 + 2 >= v12)
          goto LABEL_23;
        v17 = *(_QWORD *)(v8 + 8 * v7);
        if (!v17)
          break;
      }
    }
LABEL_22:
    v11 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v7 << 6);
LABEL_7:
    result = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v15)
                                            + OBJC_IVAR____TtC10seserviced10UWBSession_peer)
                                + OBJC_IVAR____TtC10seserviced4Peer_type);
    if ((_DWORD)result == 3)
    {
      *(unint64_t *)((char *)v5 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      if (__OFADD__(v6++, 1))
        goto LABEL_26;
    }
  }
  v18 = v16 + 3;
  if (v18 >= v12)
  {
LABEL_23:
    swift_retain(a3);
    return sub_100194E54(v5, a2, v6, a3, (uint64_t *)&unk_1003460D0);
  }
  v17 = *(_QWORD *)(v8 + 8 * v18);
  if (v17)
  {
    v7 = v18;
    goto LABEL_22;
  }
  while (1)
  {
    v7 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v7 >= v12)
      goto LABEL_23;
    v17 = *(_QWORD *)(v8 + 8 * v7);
    ++v18;
    if (v17)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

Swift::Int sub_100194A10(Swift::Int result, uint64_t a2, uint64_t a3)
{
  unint64_t *v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v5 = (unint64_t *)result;
  v6 = 0;
  v7 = 0;
  v8 = a3 + 56;
  v9 = 1 << *(_BYTE *)(a3 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a3 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v15 = v14 | (v7 << 6);
      goto LABEL_7;
    }
    v16 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v16 >= v12)
      goto LABEL_23;
    v17 = *(_QWORD *)(v8 + 8 * v16);
    ++v7;
    if (!v17)
    {
      v7 = v16 + 1;
      if (v16 + 1 >= v12)
        goto LABEL_23;
      v17 = *(_QWORD *)(v8 + 8 * v7);
      if (!v17)
      {
        v7 = v16 + 2;
        if (v16 + 2 >= v12)
          goto LABEL_23;
        v17 = *(_QWORD *)(v8 + 8 * v7);
        if (!v17)
          break;
      }
    }
LABEL_22:
    v11 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v7 << 6);
LABEL_7:
    result = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v15)
                                            + OBJC_IVAR____TtC10seserviced10UWBSession_peer)
                                + OBJC_IVAR____TtC10seserviced4Peer_type);
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v15)
                               + OBJC_IVAR____TtC10seserviced10UWBSession_peer)
                   + OBJC_IVAR____TtC10seserviced4Peer_type))
    {
      *(unint64_t *)((char *)v5 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      if (__OFADD__(v6++, 1))
        goto LABEL_26;
    }
  }
  v18 = v16 + 3;
  if (v18 >= v12)
  {
LABEL_23:
    swift_retain(a3);
    return sub_100194E54(v5, a2, v6, a3, (uint64_t *)&unk_1003460D0);
  }
  v17 = *(_QWORD *)(v8 + 8 * v18);
  if (v17)
  {
    v7 = v18;
    goto LABEL_22;
  }
  while (1)
  {
    v7 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v7 >= v12)
      goto LABEL_23;
    v17 = *(_QWORD *)(v8 + 8 * v7);
    ++v18;
    if (v17)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

Swift::Int sub_100194BA8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  _BYTE *v8;
  unint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v29;
  _QWORD v31[9];

  v4 = a4;
  if (!a3)
  {
    v8 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v4);
    return (Swift::Int)v8;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  sub_100063D3C((uint64_t *)&unk_100346070);
  result = static _SetStorage.allocate(capacity:)(v5);
  v8 = (_BYTE *)result;
  v29 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_39;
    if (v14 >= v29)
      goto LABEL_36;
    v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v29)
        goto LABEL_36;
      v15 = a1[v10];
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v29)
          goto LABEL_36;
        v15 = a1[v10];
        if (!v15)
          break;
      }
    }
LABEL_23:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    v17 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v13);
    Hasher.init(_seed:)(v31);
    v18 = *(_QWORD *)(v17 + 16);
    v19 = *(_QWORD *)(v17 + 24);
    swift_retain(v17);
    swift_bridgeObjectRetain(v19);
    String.hash(into:)(v31, v18, v19);
    swift_bridgeObjectRelease(v19);
    result = Hasher._finalize()();
    v20 = -1 << v8[32];
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(_QWORD *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    *(_QWORD *)(*((_QWORD *)v8 + 6) + 8 * v23) = v17;
    ++*((_QWORD *)v8 + 2);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v16 = v14 + 3;
  if (v16 >= v29)
    goto LABEL_36;
  v15 = a1[v16];
  if (v15)
  {
    v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v29)
      goto LABEL_36;
    v15 = a1[v10];
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

Swift::Int sub_100194E48(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100194E54(a1, a2, a3, a4, (uint64_t *)&unk_100346100);
}

Swift::Int sub_100194E54(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  Swift::Int result;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  unint64_t *v30;

  v5 = a4;
  if (!a3)
  {
    v10 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v5);
    return (Swift::Int)v10;
  }
  v6 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v5;
  sub_100063D3C(a5);
  result = static _SetStorage.allocate(capacity:)(v6);
  v10 = (_QWORD *)result;
  v30 = a1;
  if (a2 < 1)
    v11 = 0;
  else
    v11 = *a1;
  v12 = 0;
  v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
      goto LABEL_39;
    if (v16 >= a2)
      goto LABEL_36;
    v17 = v30[v16];
    ++v12;
    if (!v17)
    {
      v12 = v16 + 1;
      if (v16 + 1 >= a2)
        goto LABEL_36;
      v17 = v30[v12];
      if (!v17)
      {
        v12 = v16 + 2;
        if (v16 + 2 >= a2)
          goto LABEL_36;
        v17 = v30[v12];
        if (!v17)
          break;
      }
    }
LABEL_23:
    v11 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    v19 = v10[5];
    v20 = *(id *)(*(_QWORD *)(v5 + 48) + 8 * v15);
    result = NSObject._rawHashValue(seed:)(v19);
    v21 = -1 << *((_BYTE *)v10 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      v24 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v27 = v23 == v26;
        if (v23 == v26)
          v23 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v13 + 8 * v23);
      }
      while (v28 == -1);
      v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }
    *(_QWORD *)(v13 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    *(_QWORD *)(v10[6] + 8 * v24) = v20;
    ++v10[2];
    if (__OFSUB__(v6--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v6)
      goto LABEL_36;
  }
  v18 = v16 + 3;
  if (v18 >= a2)
    goto LABEL_36;
  v17 = v30[v18];
  if (v17)
  {
    v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v12 >= a2)
      goto LABEL_36;
    v17 = v30[v12];
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

Swift::Int sub_1001950AC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  _BYTE *v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  unint64_t *v28;
  uint64_t v29[9];

  v4 = a4;
  if (!a3)
  {
    v9 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v4);
    return (Swift::Int)v9;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  sub_100063D3C(&qword_100346110);
  result = static _SetStorage.allocate(capacity:)(v5);
  v9 = (_BYTE *)result;
  v28 = a1;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_39;
    if (v15 >= a2)
      goto LABEL_36;
    v16 = v28[v15];
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= a2)
        goto LABEL_36;
      v16 = v28[v11];
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= a2)
          goto LABEL_36;
        v16 = v28[v11];
        if (!v16)
          break;
      }
    }
LABEL_23:
    v10 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    v18 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v14);
    Hasher.init(_seed:)(v29);
    Hasher._combine(_:)(*(_QWORD *)(v18 + 16));
    result = Hasher._finalize()();
    v19 = -1 << v9[32];
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v25 = v21 == v24;
        if (v21 == v24)
          v21 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v12 + 8 * v21);
      }
      while (v26 == -1);
      v22 = __clz(__rbit64(~v26)) + (v21 << 6);
    }
    *(_QWORD *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(_QWORD *)(*((_QWORD *)v9 + 6) + 8 * v22) = v18;
    ++*((_QWORD *)v9 + 2);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    result = swift_retain(v18);
    if (!v5)
      goto LABEL_36;
  }
  v17 = v15 + 3;
  if (v17 >= a2)
    goto LABEL_36;
  v16 = v28[v17];
  if (v16)
  {
    v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= a2)
      goto LABEL_36;
    v16 = v28[v11];
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

Swift::Int sub_10019531C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  _BYTE *v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  unint64_t *v30;
  uint64_t v31;
  _QWORD v32[9];

  v4 = a4;
  if (!a3)
  {
    v9 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v4);
    return (Swift::Int)v9;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  sub_100063D3C(&qword_1003489C0);
  result = static _SetStorage.allocate(capacity:)(v5);
  v9 = (_BYTE *)result;
  v30 = a1;
  v31 = a2;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_39;
    if (v15 >= v31)
      goto LABEL_36;
    v16 = v30[v15];
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= v31)
        goto LABEL_36;
      v16 = v30[v11];
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= v31)
          goto LABEL_36;
        v16 = v30[v11];
        if (!v16)
          break;
      }
    }
LABEL_23:
    v10 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    v18 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v14);
    Hasher.init(_seed:)(v32);
    v19 = type metadata accessor for UUID(0);
    v20 = sub_1000C69C4((unint64_t *)&unk_100347730, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    swift_retain(v18);
    dispatch thunk of Hashable.hash(into:)(v32, v19, v20);
    result = Hasher._finalize()();
    v21 = -1 << v9[32];
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v12 + 8 * (v22 >> 6))) != 0)
    {
      v24 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v12 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v27 = v23 == v26;
        if (v23 == v26)
          v23 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v12 + 8 * v23);
      }
      while (v28 == -1);
      v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }
    *(_QWORD *)(v12 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    *(_QWORD *)(*((_QWORD *)v9 + 6) + 8 * v24) = v18;
    ++*((_QWORD *)v9 + 2);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v17 = v15 + 3;
  if (v17 >= v31)
    goto LABEL_36;
  v16 = v30[v17];
  if (v16)
  {
    v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= v31)
      goto LABEL_36;
    v16 = v30[v11];
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_1001955D4(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  uint64_t v41;

  v8 = type metadata accessor for UUID(0);
  __chkstk_darwin(v8, v9);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release(a4);
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  if (*(_QWORD *)(a4 + 16) == a3)
    return a4;
  v41 = v10;
  sub_100063D3C((uint64_t *)&unk_100348A00);
  result = static _SetStorage.allocate(capacity:)(a3);
  v13 = result;
  v39 = a1;
  v40 = a2;
  if (a2 < 1)
    v15 = 0;
  else
    v15 = *a1;
  v16 = 0;
  v17 = result + 56;
  v18 = v41;
  while (1)
  {
    if (v15)
    {
      v19 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v20 = v19 | (v16 << 6);
    }
    else
    {
      v21 = v16 + 1;
      if (__OFADD__(v16, 1))
        goto LABEL_40;
      if (v21 >= v40)
      {
LABEL_37:
        swift_release(a4);
        return v13;
      }
      v22 = v39[v21];
      ++v16;
      if (!v22)
      {
        v16 = v21 + 1;
        if (v21 + 1 >= v40)
          goto LABEL_37;
        v22 = v39[v16];
        if (!v22)
        {
          v16 = v21 + 2;
          if (v21 + 2 >= v40)
            goto LABEL_37;
          v22 = v39[v16];
          if (!v22)
          {
            v23 = v21 + 3;
            if (v23 >= v40)
              goto LABEL_37;
            v22 = v39[v23];
            if (!v22)
            {
              while (1)
              {
                v16 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_41;
                if (v16 >= v40)
                  goto LABEL_37;
                v22 = v39[v16];
                ++v23;
                if (v22)
                  goto LABEL_24;
              }
            }
            v16 = v23;
          }
        }
      }
LABEL_24:
      v15 = (v22 - 1) & v22;
      v20 = __clz(__rbit64(v22)) + (v16 << 6);
    }
    v24 = a4;
    v25 = *(_QWORD *)(a4 + 48);
    v26 = *(_QWORD *)(v18 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v18 + 16))(v12, v25 + v26 * v20, v8);
    v27 = *(_QWORD *)(v13 + 40);
    v28 = sub_1000C69C4((unint64_t *)&unk_100347730, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v27, v8, v28);
    v29 = -1 << *(_BYTE *)(v13 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v17 + 8 * (v30 >> 6))) != 0)
    {
      v32 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v17 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      v18 = v41;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v29) >> 6;
      v18 = v41;
      do
      {
        if (++v31 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v35 = v31 == v34;
        if (v31 == v34)
          v31 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v17 + 8 * v31);
      }
      while (v36 == -1);
      v32 = __clz(__rbit64(~v36)) + (v31 << 6);
    }
    *(_QWORD *)(v17 + ((v32 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v32;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v18 + 32))(*(_QWORD *)(v13 + 48) + v32 * v26, v12, v8);
    ++*(_QWORD *)(v13 + 16);
    if (__OFSUB__(a3--, 1))
      break;
    a4 = v24;
    if (!a3)
      goto LABEL_37;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

Swift::Int sub_1001958D8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  Swift::Int v12;
  Swift::Int result;
  unint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  unint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[9];

  v8 = type metadata accessor for UUID(0);
  v37 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release(a4);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  if (*(_QWORD *)(a4 + 16) == a3)
    return a4;
  sub_100063D3C((uint64_t *)&unk_1003460A0);
  result = static _SetStorage.allocate(capacity:)(a3);
  v12 = result;
  v35 = a1;
  v36 = a2;
  if (a2 < 1)
    v14 = 0;
  else
    v14 = *a1;
  v15 = 0;
  v16 = result + 56;
  while (1)
  {
    if (v14)
    {
      v17 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v18 = v17 | (v15 << 6);
    }
    else
    {
      v19 = v15 + 1;
      if (__OFADD__(v15, 1))
        goto LABEL_40;
      if (v19 >= v36)
      {
LABEL_37:
        swift_release(a4);
        return v12;
      }
      v20 = v35[v19];
      ++v15;
      if (!v20)
      {
        v15 = v19 + 1;
        if (v19 + 1 >= v36)
          goto LABEL_37;
        v20 = v35[v15];
        if (!v20)
        {
          v15 = v19 + 2;
          if (v19 + 2 >= v36)
            goto LABEL_37;
          v20 = v35[v15];
          if (!v20)
          {
            v21 = v19 + 3;
            if (v21 >= v36)
              goto LABEL_37;
            v20 = v35[v21];
            if (!v20)
            {
              while (1)
              {
                v15 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_41;
                if (v15 >= v36)
                  goto LABEL_37;
                v20 = v35[v15];
                ++v21;
                if (v20)
                  goto LABEL_24;
              }
            }
            v15 = v21;
          }
        }
      }
LABEL_24:
      v14 = (v20 - 1) & v20;
      v18 = __clz(__rbit64(v20)) + (v15 << 6);
    }
    v22 = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v18);
    Hasher.init(_seed:)(v38);
    v23 = *(void **)(v22 + 24);
    swift_retain(v22);
    v24 = objc_msgSend(v23, "identifier");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v24);

    v25 = sub_1000C69C4((unint64_t *)&unk_100347730, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v38, v8, v25);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v11, v8);
    result = Hasher._finalize()();
    v26 = -1 << *(_BYTE *)(v12 + 32);
    v27 = result & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v16 + 8 * (v27 >> 6))) != 0)
    {
      v29 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v16 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v32 = v28 == v31;
        if (v28 == v31)
          v28 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v16 + 8 * v28);
      }
      while (v33 == -1);
      v29 = __clz(__rbit64(~v33)) + (v28 << 6);
    }
    *(_QWORD *)(v16 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
    *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * v29) = v22;
    ++*(_QWORD *)(v12 + 16);
    if (__OFSUB__(a3--, 1))
      break;
    if (!a3)
      goto LABEL_37;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

Swift::Int sub_100195BFC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  _BYTE *v8;
  unint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v32;
  _QWORD v33[9];

  v4 = a4;
  if (!a3)
  {
    v8 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v4);
    return (Swift::Int)v8;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  sub_100063D3C((uint64_t *)&unk_100346080);
  result = static _SetStorage.allocate(capacity:)(v5);
  v8 = (_BYTE *)result;
  v30 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 56;
  v32 = v4;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_39;
    if (v14 >= v30)
      goto LABEL_36;
    v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v30)
        goto LABEL_36;
      v15 = a1[v10];
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v30)
          goto LABEL_36;
        v15 = a1[v10];
        if (!v15)
          break;
      }
    }
LABEL_23:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    v17 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v13);
    Hasher.init(_seed:)(v33);
    v18 = *(_QWORD *)(v17 + 16);
    v19 = type metadata accessor for UUID(0);
    v20 = sub_1000C69C4((unint64_t *)&unk_100347730, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    swift_retain(v17);
    swift_retain(v18);
    dispatch thunk of Hashable.hash(into:)(v33, v19, v20);
    swift_release(v18);
    result = Hasher._finalize()();
    v21 = -1 << v8[32];
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v11 + 8 * (v22 >> 6))) != 0)
    {
      v24 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v11 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v27 = v23 == v26;
        if (v23 == v26)
          v23 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v23);
      }
      while (v28 == -1);
      v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }
    *(_QWORD *)(v11 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    *(_QWORD *)(*((_QWORD *)v8 + 6) + 8 * v24) = v17;
    ++*((_QWORD *)v8 + 2);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    v4 = v32;
    if (!v5)
      goto LABEL_36;
  }
  v16 = v14 + 3;
  if (v16 >= v30)
    goto LABEL_36;
  v15 = a1[v16];
  if (v15)
  {
    v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v30)
      goto LABEL_36;
    v15 = a1[v10];
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

int64_t sub_100195EE8(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_100195FCC(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  _QWORD v31[9];
  uint64_t v32;

  v5 = a2;
  v6 = a1;
  if ((a4 & 0xC000000000000001) != 0)
  {
    if ((a3 & 1) != 0)
    {
      if (a4 < 0)
        v7 = a4;
      else
        v7 = a4 & 0xFFFFFFFFFFFFFF8;
      v8 = __CocoaSet.element(at:)(a1, a2, v7);
      v32 = v8;
      v9 = type metadata accessor for DSKBLE.BLEScanRequest();
      swift_unknownObjectRetain(v8);
      swift_dynamicCast(v31, &v32, (char *)&type metadata for Swift.AnyObject + 8, v9, 7);
      v10 = v31[0];
      swift_unknownObjectRelease(v8);
      return v10;
    }
    goto LABEL_34;
  }
  if ((a3 & 1) == 0)
  {
    if (a1 < 0 || 1 << *(_BYTE *)(a4 + 32) <= a1)
    {
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    if (((*(_QWORD *)(a4 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> a1) & 1) == 0)
    {
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
    {
LABEL_21:
      v10 = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v6);
      swift_retain(v10);
      return v10;
    }
    __break(1u);
  }
  if (__CocoaSet.Index.age.getter(a1, a2) != *(_DWORD *)(a4 + 36))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v11 = __CocoaSet.Index.element.getter(v6, v5);
  v32 = v11;
  v12 = type metadata accessor for DSKBLE.BLEScanRequest();
  swift_unknownObjectRetain(v11);
  swift_dynamicCast(v31, &v32, (char *)&type metadata for Swift.AnyObject + 8, v12, 7);
  v5 = v31[0];
  swift_unknownObjectRelease(v11);
  Hasher.init(_seed:)(v31);
  v13 = *(_QWORD *)(v5 + 16);
  v14 = *(_QWORD *)(v5 + 24);
  swift_bridgeObjectRetain(v14);
  String.hash(into:)(v31, v13, v14);
  swift_bridgeObjectRelease(v14);
  v15 = Hasher._finalize()();
  v16 = -1 << *(_BYTE *)(a4 + 32);
  v6 = v15 & ~v16;
  v17 = a4 + 56;
  if (((*(_QWORD *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
  {
LABEL_35:
    swift_release(v5);
    __break(1u);
    goto LABEL_36;
  }
  v18 = *(_QWORD *)(a4 + 48);
  v19 = *(_QWORD *)(v18 + 8 * v6);
  v20 = *(_QWORD *)(v19 + 16);
  v21 = *(_QWORD *)(v19 + 24);
  v22 = *(_QWORD *)(v5 + 16);
  v23 = *(_QWORD *)(v5 + 24);
  v24 = v20 == v22 && v21 == v23;
  if (v24
    || (_stringCompareWithSmolCheck(_:_:expecting:)(v20, v21, *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24), 0) & 1) != 0)
  {
    goto LABEL_20;
  }
  v26 = ~v16;
  v6 = (v6 + 1) & v26;
  if (((*(_QWORD *)(v17 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    while (1)
    {
      v27 = *(_QWORD *)(v18 + 8 * v6);
      v28 = *(_QWORD *)(v27 + 16);
      v29 = *(_QWORD *)(v27 + 24);
      v30 = v28 == v22 && v29 == v23;
      if (v30 || (_stringCompareWithSmolCheck(_:_:expecting:)(v28, v29, v22, v23, 0) & 1) != 0)
        break;
      v6 = (v6 + 1) & v26;
      if (((*(_QWORD *)(v17 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
      {
        swift_release(v5);
        __break(1u);
        goto LABEL_31;
      }
    }
LABEL_20:
    swift_release(v5);
    goto LABEL_21;
  }
LABEL_36:
  result = swift_release(v5);
  __break(1u);
  return result;
}

void sub_100196274(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  void *v4;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  id v15;
  char v16;
  uint64_t v17;
  id v18;
  char v19;
  id v20;
  uint64_t v21;
  void *v22;

  v7 = a1;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if ((a3 & 1) != 0)
      goto LABEL_13;
    if (a1 < 0 || 1 << *(_BYTE *)(a4 + 32) <= a1)
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(a4 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> a1) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
        goto LABEL_20;
      __break(1u);
LABEL_13:
      if (__CocoaSet.Index.age.getter(a1, a2) == *(_DWORD *)(a4 + 36))
      {
        v11 = __CocoaSet.Index.element.getter(v7, a2);
        v21 = v11;
        v12 = sub_10006C25C(0, (unint64_t *)&qword_100347710, SEEndPoint_ptr);
        swift_unknownObjectRetain(v11);
        swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v12, 7);
        v4 = v22;
        swift_unknownObjectRelease(v11);
        v13 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a4 + 40));
        v14 = -1 << *(_BYTE *)(a4 + 32);
        v7 = v13 & ~v14;
        if (((*(_QWORD *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
        {
          v15 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
          v16 = static NSObject.== infix(_:_:)(v15);

          if ((v16 & 1) == 0)
          {
            v17 = ~v14;
            do
            {
              v7 = (v7 + 1) & v17;
              if (((*(_QWORD *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
                goto LABEL_24;
              v18 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
              v19 = static NSObject.== infix(_:_:)(v18);

            }
            while ((v19 & 1) == 0);
          }

LABEL_20:
          v20 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
          return;
        }
LABEL_24:

        __break(1u);
        goto LABEL_25;
      }
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    __break(1u);
    goto LABEL_23;
  }
  if ((a3 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    return;
  }
  if (a4 < 0)
    v8 = a4;
  else
    v8 = a4 & 0xFFFFFFFFFFFFFF8;
  v9 = __CocoaSet.element(at:)(a1, a2, v8);
  v21 = v9;
  v10 = sub_10006C25C(0, (unint64_t *)&qword_100347710, SEEndPoint_ptr);
  swift_unknownObjectRetain(v9);
  swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
  swift_unknownObjectRelease(v9);
}

void sub_1001964DC(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  void *v4;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  id v15;
  char v16;
  uint64_t v17;
  id v18;
  char v19;
  id v20;
  uint64_t v21;
  void *v22;

  v7 = a1;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if ((a3 & 1) != 0)
      goto LABEL_13;
    if (a1 < 0 || 1 << *(_BYTE *)(a4 + 32) <= a1)
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(a4 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> a1) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
        goto LABEL_20;
      __break(1u);
LABEL_13:
      if (__CocoaSet.Index.age.getter(a1, a2) == *(_DWORD *)(a4 + 36))
      {
        v11 = __CocoaSet.Index.element.getter(v7, a2);
        v21 = v11;
        v12 = type metadata accessor for UWBSession();
        swift_unknownObjectRetain(v11);
        swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v12, 7);
        v4 = v22;
        swift_unknownObjectRelease(v11);
        v13 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a4 + 40));
        v14 = -1 << *(_BYTE *)(a4 + 32);
        v7 = v13 & ~v14;
        if (((*(_QWORD *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
        {
          v15 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
          v16 = static NSObject.== infix(_:_:)(v15);

          if ((v16 & 1) == 0)
          {
            v17 = ~v14;
            do
            {
              v7 = (v7 + 1) & v17;
              if (((*(_QWORD *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
                goto LABEL_24;
              v18 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
              v19 = static NSObject.== infix(_:_:)(v18);

            }
            while ((v19 & 1) == 0);
          }

LABEL_20:
          v20 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
          return;
        }
LABEL_24:

        __break(1u);
        goto LABEL_25;
      }
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    __break(1u);
    goto LABEL_23;
  }
  if ((a3 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    return;
  }
  if (a4 < 0)
    v8 = a4;
  else
    v8 = a4 & 0xFFFFFFFFFFFFFF8;
  v9 = __CocoaSet.element(at:)(a1, a2, v8);
  v21 = v9;
  v10 = type metadata accessor for UWBSession();
  swift_unknownObjectRetain(v9);
  swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
  swift_unknownObjectRelease(v9);
}

uint64_t sub_10019671C(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[9];
  uint64_t v24;

  v5 = a2;
  v6 = result;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if ((a3 & 1) != 0)
      goto LABEL_13;
    if (result < 0 || 1 << *(_BYTE *)(a4 + 32) <= result)
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(a4 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> result) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
        goto LABEL_20;
      __break(1u);
LABEL_13:
      if (__CocoaSet.Index.age.getter(result, a2) == *(_DWORD *)(a4 + 36))
      {
        v11 = __CocoaSet.Index.element.getter(v6, v5);
        v24 = v11;
        v12 = type metadata accessor for Peer(0);
        swift_unknownObjectRetain(v11);
        swift_dynamicCast(v23, &v24, (char *)&type metadata for Swift.AnyObject + 8, v12, 7);
        v5 = v23[0];
        swift_unknownObjectRelease(v11);
        Hasher.init(_seed:)(v23);
        v13 = v5 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
        v14 = type metadata accessor for UUID(0);
        v15 = sub_1000C69C4((unint64_t *)&unk_100347730, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        dispatch thunk of Hashable.hash(into:)(v23, v14, v15);
        v16 = Hasher._finalize()();
        v17 = -1 << *(_BYTE *)(a4 + 32);
        v6 = v16 & ~v17;
        if (((*(_QWORD *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
        {
          v18 = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v6);
          v19 = v18 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
          swift_retain(v18);
          LOBYTE(v19) = static UUID.== infix(_:_:)(v19, v13);
          swift_release(v18);
          if ((v19 & 1) == 0)
          {
            v20 = ~v17;
            do
            {
              v6 = (v6 + 1) & v20;
              if (((*(_QWORD *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
                goto LABEL_25;
              v21 = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v6);
              v22 = v21 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
              swift_retain(v21);
              LOBYTE(v22) = static UUID.== infix(_:_:)(v22, v13);
              swift_release(v21);
            }
            while ((v22 & 1) == 0);
          }
          swift_release(v5);
LABEL_20:
          v10 = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v6);
          swift_retain(v10);
          return v10;
        }
LABEL_25:
        result = swift_release(v5);
        __break(1u);
        goto LABEL_26;
      }
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    __break(1u);
    goto LABEL_24;
  }
  if ((a3 & 1) != 0)
  {
    if (a4 < 0)
      v7 = a4;
    else
      v7 = a4 & 0xFFFFFFFFFFFFFF8;
    v8 = __CocoaSet.element(at:)(result, a2, v7);
    v24 = v8;
    v9 = type metadata accessor for Peer(0);
    swift_unknownObjectRetain(v8);
    swift_dynamicCast(v23, &v24, (char *)&type metadata for Swift.AnyObject + 8, v9, 7);
    v10 = v23[0];
    swift_unknownObjectRelease(v8);
    return v10;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1001969D4(unint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  char v31;
  _QWORD v32[9];
  uint64_t v33;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  result = __chkstk_darwin(v8, v10);
  v13 = (char *)v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a4 & 0xC000000000000001) == 0)
  {
    if ((a3 & 1) == 0)
    {
      if ((a1 & 0x8000000000000000) != 0 || 1 << *(_BYTE *)(a4 + 32) <= (uint64_t)a1)
      {
        __break(1u);
      }
      else if (((*(_QWORD *)(a4 + ((a1 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> a1) & 1) != 0)
      {
        if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
        {
LABEL_20:
          v17 = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * a1);
          swift_retain(v17);
          return v17;
        }
        __break(1u);
        goto LABEL_13;
      }
      __break(1u);
      goto LABEL_24;
    }
LABEL_13:
    result = __CocoaSet.Index.age.getter(a1, a2);
    if ((_DWORD)result == *(_DWORD *)(a4 + 36))
    {
      v18 = __CocoaSet.Index.element.getter(a1, a2);
      v33 = v18;
      v19 = type metadata accessor for DSKBLE.BLEPeripheral();
      swift_unknownObjectRetain(v18);
      swift_dynamicCast(v32, &v33, (char *)&type metadata for Swift.AnyObject + 8, v19, 7);
      v20 = v32[0];
      swift_unknownObjectRelease(v18);
      Hasher.init(_seed:)(v32);
      v21 = objc_msgSend(*(id *)(v20 + 24), "identifier");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      v22 = sub_1000C69C4((unint64_t *)&unk_100347730, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      dispatch thunk of Hashable.hash(into:)(v32, v8, v22);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
      v23 = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(a4 + 32);
      a1 = v23 & ~v24;
      if (((*(_QWORD *)(a4 + 56 + ((a1 >> 3) & 0xFFFFFFFFFFFFF8)) >> a1) & 1) != 0)
      {
        v25 = ~v24;
        sub_10006C25C(0, &qword_100348B80, NSObject_ptr);
        while (1)
        {
          v26 = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * a1);
          v27 = *(void **)(v26 + 24);
          v28 = *(void **)(v20 + 24);
          swift_retain(v26);
          v29 = v27;
          v30 = v28;
          v31 = static NSObject.== infix(_:_:)(v29);
          swift_release(v26);

          if ((v31 & 1) != 0)
            break;
          a1 = (a1 + 1) & v25;
          if (((*(_QWORD *)(a4 + 56 + ((a1 >> 3) & 0xFFFFFFFFFFFFF8)) >> a1) & 1) == 0)
            goto LABEL_18;
        }
      }
      else
      {
LABEL_18:
        swift_release(v20);
        __break(1u);
      }
      swift_release(v20);
      goto LABEL_20;
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if ((a3 & 1) != 0)
  {
    if (a4 < 0)
      v14 = a4;
    else
      v14 = a4 & 0xFFFFFFFFFFFFFF8;
    v15 = __CocoaSet.element(at:)(a1, a2, v14);
    v33 = v15;
    v16 = type metadata accessor for DSKBLE.BLEPeripheral();
    swift_unknownObjectRetain(v15);
    swift_dynamicCast(v32, &v33, (char *)&type metadata for Swift.AnyObject + 8, v16, 7);
    v17 = v32[0];
    swift_unknownObjectRelease(v15);
    return v17;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_100196CE4(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 72);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_100196D6C(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  _UNKNOWN **v14;

  v13 = type metadata accessor for LyonUWB(0);
  v14 = &off_100307E80;
  *(_QWORD *)&v12 = a3;
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = sub_1000DB160(&v12, a4[7] + 40 * a1);
  v9 = a4[2];
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
    __break(1u);
  else
    a4[2] = v11;
  return result;
}

uint64_t sub_100196E08(uint64_t a1, Swift::UInt a2, char a3, _QWORD *a4)
{
  uint64_t v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t result;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  _UNKNOWN **v29;

  v8 = type metadata accessor for LyonUWB(0);
  v28 = v8;
  v29 = &off_100307E80;
  *(_QWORD *)&v27 = a1;
  v9 = (_QWORD *)*a4;
  v11 = sub_100187EE4(a2);
  v12 = v9[2];
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
    goto LABEL_14;
  }
  v15 = v10;
  v16 = v9[3];
  if (v16 >= v14 && (a3 & 1) != 0)
  {
LABEL_7:
    v17 = (_QWORD *)*a4;
    if ((v15 & 1) != 0)
    {
LABEL_8:
      v18 = (_QWORD *)(v17[7] + 40 * v11);
      sub_10006BA9C(v18);
      return sub_1000DB160(&v27, (uint64_t)v18);
    }
    goto LABEL_11;
  }
  if (v16 >= v14 && (a3 & 1) == 0)
  {
    sub_1001901F0();
    goto LABEL_7;
  }
  sub_100189AD0(v14, a3 & 1);
  v20 = sub_100187EE4(a2);
  if ((v15 & 1) != (v21 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for DSK.Module);
    __break(1u);
    return result;
  }
  v11 = v20;
  v17 = (_QWORD *)*a4;
  if ((v15 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  v22 = sub_10014735C((uint64_t)&v27, v8);
  __chkstk_darwin(v22, v22);
  v24 = (uint64_t *)((char *)&v26 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v25 + 16))(v24);
  sub_100196D6C(v11, a2, *v24, v17);
  return sub_10006BA9C(&v27);
}

uint64_t sub_100196F9C(uint64_t a1, uint64_t a2)
{
  return sub_100198188(a1, a2, sub_1001971F8);
}

uint64_t sub_100196FA8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  Swift::Int v22;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;

  v6 = 1 << *(_BYTE *)(a3 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a3 + 56);
  v9 = a4 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
  v27 = (unint64_t)(v6 + 63) >> 6;
  result = swift_retain(a4);
  v25 = 0;
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v12 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v13 = v12 | (v11 << 6);
      goto LABEL_5;
    }
    v18 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v18 >= v27)
      goto LABEL_24;
    v19 = *(_QWORD *)(v26 + 8 * v18);
    ++v11;
    if (!v19)
    {
      v11 = v18 + 1;
      if (v18 + 1 >= v27)
        goto LABEL_24;
      v19 = *(_QWORD *)(v26 + 8 * v11);
      if (!v19)
      {
        v11 = v18 + 2;
        if (v18 + 2 >= v27)
          goto LABEL_24;
        v19 = *(_QWORD *)(v26 + 8 * v11);
        if (!v19)
          break;
      }
    }
LABEL_20:
    v8 = (v19 - 1) & v19;
    v13 = __clz(__rbit64(v19)) + (v11 << 6);
LABEL_5:
    v14 = *(char **)(*(_QWORD *)(a3 + 48) + 8 * v13);
    v15 = *(_QWORD *)&v14[OBJC_IVAR____TtC10seserviced10UWBSession_peer];
    v16 = v15 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
    swift_retain(a4);
    v17 = v14;
    swift_retain(v15);
    LOBYTE(v16) = static UUID.== infix(_:_:)(v16, v9);

    swift_release(a4);
    result = swift_release(v15);
    if ((v16 & 1) != 0)
    {
      *(unint64_t *)((char *)a1 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      if (__OFADD__(v25++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain(a3);
        v22 = sub_100194E54(a1, a2, v25, a3, (uint64_t *)&unk_1003460D0);
        swift_release(a4);
        return v22;
      }
    }
  }
  v20 = v18 + 3;
  if (v20 >= v27)
    goto LABEL_24;
  v19 = *(_QWORD *)(v26 + 8 * v20);
  if (v19)
  {
    v11 = v20;
    goto LABEL_20;
  }
  while (1)
  {
    v11 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v11 >= v27)
      goto LABEL_24;
    v19 = *(_QWORD *)(v26 + 8 * v11);
    ++v20;
    if (v19)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

Swift::Int sub_1001971F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int result;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char *v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;

  v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    v4 = &_swiftEmptySetSingleton;
    v29 = &_swiftEmptySetSingleton;
    if (a1 >= 0)
      v3 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_retain_n(a2, 2);
    v5 = __CocoaSet.makeIterator()(v3);
    v6 = OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
    v7 = __CocoaSet.Iterator.next()(v5);
    if (v7)
    {
      v8 = v7;
      v9 = type metadata accessor for UWBSession();
      do
      {
        v27 = v8;
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v9, 7);
        v11 = *(_QWORD *)&v28[OBJC_IVAR____TtC10seserviced10UWBSession_peer];
        v12 = v11 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
        swift_retain(a2);
        swift_retain(v11);
        v13 = static UUID.== infix(_:_:)(v12, a2 + v6);
        swift_release(a2);
        swift_release(v11);
        v14 = v28;
        if ((v13 & 1) != 0)
        {
          v15 = v29;
          v16 = v29[2];
          if (v29[3] <= v16)
          {
            sub_1000CB34C(v16 + 1);
            v15 = v29;
          }
          result = NSObject._rawHashValue(seed:)(v15[5]);
          v17 = v15 + 7;
          v18 = -1 << *((_BYTE *)v15 + 32);
          v19 = result & ~v18;
          v20 = v19 >> 6;
          if (((-1 << v19) & ~v15[(v19 >> 6) + 7]) != 0)
          {
            v21 = __clz(__rbit64((-1 << v19) & ~v15[(v19 >> 6) + 7])) | v19 & 0x7FFFFFFFFFFFFFC0;
          }
          else
          {
            v22 = 0;
            v23 = (unint64_t)(63 - v18) >> 6;
            do
            {
              if (++v20 == v23 && (v22 & 1) != 0)
              {
                __break(1u);
                return result;
              }
              v24 = v20 == v23;
              if (v20 == v23)
                v20 = 0;
              v22 |= v24;
              v25 = v17[v20];
            }
            while (v25 == -1);
            v21 = __clz(__rbit64(~v25)) + (v20 << 6);
          }
          *(_QWORD *)((char *)v17 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
          *(_QWORD *)(v15[6] + 8 * v21) = v14;
          ++v15[2];
        }
        else
        {

        }
        v8 = __CocoaSet.Iterator.next()(result);
      }
      while (v8);
      v4 = v29;
    }
    swift_release_n(a2, 2);
    v26 = v5;
  }
  else
  {
    swift_retain(a2);
    v4 = (void *)sub_100197FCC(v3, a2, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_100196FA8);
    v26 = a2;
  }
  swift_release(v26);
  return (Swift::Int)v4;
}

unint64_t sub_100197488(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _BYTE *i;
  unsigned __int16 v5;
  char v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100063D3C(&qword_100348A30);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
    for (i = (_BYTE *)(a1 + 34); ; i += 4)
    {
      v5 = *((_WORD *)i - 1);
      v6 = *i;
      result = sub_100187FF8(v5);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_WORD *)(v3[6] + 2 * result) = v5;
      *(_BYTE *)(v3[7] + result) = v6;
      v9 = v3[2];
      v10 = __OFADD__(v9, 1);
      v11 = v9 + 1;
      if (v10)
        goto LABEL_10;
      v3[2] = v11;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

unint64_t sub_10019755C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  unsigned __int16 v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t result;
  char v8;
  unint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  sub_100063D3C(&qword_100348A28);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
  v4 = *(_WORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  result = sub_100187FF8(v4);
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  v9 = (unint64_t *)(a1 + 72);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_WORD *)(v3[6] + 2 * result) = v4;
    v10 = (uint64_t *)(v3[7] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    v11 = v3[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      break;
    v3[2] = v13;
    sub_100063C8C(v5, v6);
    if (!--v1)
      return (unint64_t)v3;
    v4 = *((_WORD *)v9 - 8);
    v5 = *(v9 - 1);
    v6 = *v9;
    result = sub_100187FF8(v4);
    v9 += 3;
    if ((v14 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

void sub_100197660(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;

  v2 = a1 + 56;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 56);
  v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v7 = 0;
  while (1)
  {
    if (v5)
    {
      v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v9 = v8 | (v7 << 6);
      goto LABEL_5;
    }
    v10 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v10 >= v6)
      goto LABEL_23;
    v11 = *(_QWORD *)(v2 + 8 * v10);
    ++v7;
    if (!v11)
    {
      v7 = v10 + 1;
      if (v10 + 1 >= v6)
        goto LABEL_23;
      v11 = *(_QWORD *)(v2 + 8 * v7);
      if (!v11)
      {
        v7 = v10 + 2;
        if (v10 + 2 >= v6)
          goto LABEL_23;
        v11 = *(_QWORD *)(v2 + 8 * v7);
        if (!v11)
        {
          v7 = v10 + 3;
          if (v10 + 3 >= v6)
            goto LABEL_23;
          v11 = *(_QWORD *)(v2 + 8 * v7);
          if (!v11)
            break;
        }
      }
    }
LABEL_22:
    v5 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v7 << 6);
LABEL_5:
    sub_100180268(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v9));
  }
  v12 = v10 + 4;
  if (v12 >= v6)
  {
LABEL_23:
    swift_release(a1);
    return;
  }
  v11 = *(_QWORD *)(v2 + 8 * v12);
  if (v11)
  {
    v7 = v12;
    goto LABEL_22;
  }
  while (1)
  {
    v7 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v7 >= v6)
      goto LABEL_23;
    v11 = *(_QWORD *)(v2 + 8 * v7);
    ++v12;
    if (v11)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
}

uint64_t sub_1001977B8(uint64_t a1, uint64_t a2)
{
  return sub_100198188(a1, a2, sub_100197A08);
}

uint64_t sub_1001977C4(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  Swift::Int v22;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;

  v6 = 1 << *(_BYTE *)(a3 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a3 + 56);
  v27 = (unint64_t)(v6 + 63) >> 6;
  result = swift_retain(a4);
  v25 = 0;
  v10 = 0;
  while (1)
  {
    if (v8)
    {
      v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v12 = v11 | (v10 << 6);
      goto LABEL_5;
    }
    v18 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v18 >= v27)
      goto LABEL_24;
    v19 = *(_QWORD *)(v26 + 8 * v18);
    ++v10;
    if (!v19)
    {
      v10 = v18 + 1;
      if (v18 + 1 >= v27)
        goto LABEL_24;
      v19 = *(_QWORD *)(v26 + 8 * v10);
      if (!v19)
      {
        v10 = v18 + 2;
        if (v18 + 2 >= v27)
          goto LABEL_24;
        v19 = *(_QWORD *)(v26 + 8 * v10);
        if (!v19)
          break;
      }
    }
LABEL_20:
    v8 = (v19 - 1) & v19;
    v12 = __clz(__rbit64(v19)) + (v10 << 6);
LABEL_5:
    v13 = *(char **)(*(_QWORD *)(a3 + 48) + 8 * v12);
    v14 = *(_QWORD *)&v13[OBJC_IVAR____TtC10seserviced10UWBSession_peer];
    v15 = v14 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
    v16 = a4 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
    swift_retain(a4);
    v17 = v13;
    swift_retain(v14);
    LOBYTE(v15) = static UUID.== infix(_:_:)(v15, v16);

    swift_release(a4);
    result = swift_release(v14);
    if ((v15 & 1) != 0)
    {
      *(unint64_t *)((char *)a1 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v25++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain(a3);
        v22 = sub_100194E54(a1, a2, v25, a3, (uint64_t *)&unk_1003460D0);
        swift_release(a4);
        return v22;
      }
    }
  }
  v20 = v18 + 3;
  if (v20 >= v27)
    goto LABEL_24;
  v19 = *(_QWORD *)(v26 + 8 * v20);
  if (v19)
  {
    v10 = v20;
    goto LABEL_20;
  }
  while (1)
  {
    v10 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v10 >= v27)
      goto LABEL_24;
    v19 = *(_QWORD *)(v26 + 8 * v10);
    ++v20;
    if (v19)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

Swift::Int sub_100197A08(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char *v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;

  v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    v4 = &_swiftEmptySetSingleton;
    v29 = &_swiftEmptySetSingleton;
    if (a1 >= 0)
      v3 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_retain_n(a2, 2);
    v5 = __CocoaSet.makeIterator()(v3);
    v6 = __CocoaSet.Iterator.next()(v5);
    if (v6)
    {
      v7 = v6;
      v8 = type metadata accessor for UWBSession();
      do
      {
        v27 = v7;
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v8, 7);
        v10 = *(_QWORD *)&v28[OBJC_IVAR____TtC10seserviced10UWBSession_peer];
        v11 = v10 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
        v12 = a2 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
        swift_retain(a2);
        swift_retain(v10);
        v13 = static UUID.== infix(_:_:)(v11, v12);
        swift_release(a2);
        swift_release(v10);
        v14 = v28;
        if ((v13 & 1) != 0)
        {
          v15 = v29;
          v16 = v29[2];
          if (v29[3] <= v16)
          {
            sub_1000CB34C(v16 + 1);
            v15 = v29;
          }
          result = NSObject._rawHashValue(seed:)(v15[5]);
          v17 = v15 + 7;
          v18 = -1 << *((_BYTE *)v15 + 32);
          v19 = result & ~v18;
          v20 = v19 >> 6;
          if (((-1 << v19) & ~v15[(v19 >> 6) + 7]) != 0)
          {
            v21 = __clz(__rbit64((-1 << v19) & ~v15[(v19 >> 6) + 7])) | v19 & 0x7FFFFFFFFFFFFFC0;
          }
          else
          {
            v22 = 0;
            v23 = (unint64_t)(63 - v18) >> 6;
            do
            {
              if (++v20 == v23 && (v22 & 1) != 0)
              {
                __break(1u);
                return result;
              }
              v24 = v20 == v23;
              if (v20 == v23)
                v20 = 0;
              v22 |= v24;
              v25 = v17[v20];
            }
            while (v25 == -1);
            v21 = __clz(__rbit64(~v25)) + (v20 << 6);
          }
          *(_QWORD *)((char *)v17 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
          *(_QWORD *)(v15[6] + 8 * v21) = v14;
          ++v15[2];
        }
        else
        {

        }
        v7 = __CocoaSet.Iterator.next()(result);
      }
      while (v7);
      v4 = v29;
    }
    swift_release_n(a2, 2);
    v26 = v5;
  }
  else
  {
    swift_retain(a2);
    v4 = (void *)sub_100197FCC(v3, a2, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_1001977C4);
    v26 = a2;
  }
  swift_release(v26);
  return (Swift::Int)v4;
}

uint64_t sub_100197C90(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  result = 0;
  v4 = (uint64_t *)(a1 + 32);
  do
  {
    v6 = *v4++;
    v5 = v6;
    if ((v6 & ~result) == 0)
      v5 = 0;
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

_QWORD *sub_100197CC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v31;
  _QWORD v32[5];
  uint64_t v33;

  v2 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v3 = a1;
    else
      v3 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v4 = __CocoaSet.makeIterator()(v3);
    v5 = type metadata accessor for UWBSession();
    v7 = sub_1000C69C4((unint64_t *)&qword_100345828, v6, (uint64_t (*)(uint64_t))type metadata accessor for UWBSession, (uint64_t)&protocol conformance descriptor for NSObject);
    result = Set.Iterator.init(_cocoa:)(v32, v4, v5, v7);
    v2 = v32[0];
    v29 = v32[1];
    v9 = v32[2];
    v10 = v32[3];
    v11 = v32[4];
  }
  else
  {
    v12 = -1 << *(_BYTE *)(a1 + 32);
    v29 = a1 + 56;
    v9 = ~v12;
    v13 = -v12;
    if (v13 < 64)
      v14 = ~(-1 << v13);
    else
      v14 = -1;
    v11 = v14 & *(_QWORD *)(a1 + 56);
    result = (_QWORD *)swift_bridgeObjectRetain(a1);
    v10 = 0;
  }
  v28 = (unint64_t)(v9 + 64) >> 6;
  while (1)
  {
    v21 = v10;
    if (v2 < 0)
    {
      v25 = __CocoaSet.Iterator.next()(result);
      if (!v25)
        goto LABEL_36;
      v26 = v25;
      v31 = v25;
      v27 = type metadata accessor for UWBSession();
      swift_unknownObjectRetain(v26);
      swift_dynamicCast(&v33, &v31, (char *)&type metadata for Swift.AnyObject + 8, v27, 7);
      v17 = v33;
      swift_unknownObjectRelease(v26);
      if (!v17)
        goto LABEL_37;
      goto LABEL_13;
    }
    if (!v11)
      break;
    v15 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    v16 = v15 | (v10 << 6);
LABEL_12:
    v17 = (uint64_t)*(id *)(*(_QWORD *)(v2 + 48) + 8 * v16);
    if (!v17)
      goto LABEL_37;
LABEL_13:
    v18 = *(_QWORD *)(v17 + OBJC_IVAR____TtC10seserviced10UWBSession_peer);
    v19 = v18 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
    v20 = a2 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
    swift_retain(v18);
    LOBYTE(v20) = static UUID.== infix(_:_:)(v20, v19);

    result = (_QWORD *)swift_release(v18);
    if ((v20 & 1) != 0)
    {
      v17 = 1;
      goto LABEL_37;
    }
  }
  v22 = v10 + 1;
  if (!__OFADD__(v10, 1))
  {
    if (v22 >= v28)
      goto LABEL_36;
    v23 = *(_QWORD *)(v29 + 8 * v22);
    ++v10;
    if (!v23)
    {
      v10 = v21 + 2;
      if (v21 + 2 >= v28)
        goto LABEL_36;
      v23 = *(_QWORD *)(v29 + 8 * v10);
      if (!v23)
      {
        v10 = v21 + 3;
        if (v21 + 3 >= v28)
          goto LABEL_36;
        v23 = *(_QWORD *)(v29 + 8 * v10);
        if (!v23)
        {
          v10 = v21 + 4;
          if (v21 + 4 >= v28)
            goto LABEL_36;
          v23 = *(_QWORD *)(v29 + 8 * v10);
          if (!v23)
          {
            v10 = v21 + 5;
            if (v21 + 5 >= v28)
              goto LABEL_36;
            v23 = *(_QWORD *)(v29 + 8 * v10);
            if (!v23)
            {
              v24 = v21 + 6;
              while (v28 != v24)
              {
                v23 = *(_QWORD *)(v29 + 8 * v24++);
                if (v23)
                {
                  v10 = v24 - 1;
                  goto LABEL_31;
                }
              }
LABEL_36:
              v17 = 0;
LABEL_37:
              sub_10007EF58(v2);
              return (_QWORD *)v17;
            }
          }
        }
      }
    }
LABEL_31:
    v11 = (v23 - 1) & v23;
    v16 = __clz(__rbit64(v23)) + (v10 << 6);
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

uint64_t sub_100197FCC(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *, unint64_t, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v5;
  char v8;
  unsigned int v9;
  unint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v17;

  v5 = v3;
  v8 = *(_BYTE *)(a1 + 32);
  v9 = v8 & 0x3F;
  v10 = (unint64_t)((1 << v8) + 63) >> 6;
  v11 = 8 * v10;
  swift_retain_n(a2, 2);
  if (v9 <= 0xD || (swift_stdlib_isStackAllocationSafe(v11, 8) & 1) != 0)
  {
    __chkstk_darwin();
    bzero((char *)&v17 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0), v11);
    swift_retain(a2);
    v12 = v5;
    v13 = a3((char *)&v17 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0), v10, a1, a2);
    swift_release(a1);
    v14 = swift_release(a2);
    if (v12)
      swift_willThrow(v14);
  }
  else
  {
    v15 = (void *)swift_slowAlloc(v11, -1);
    bzero(v15, v11);
    swift_retain(a2);
    v13 = a3((char *)v15, v10, a1, a2);
    swift_release(a1);
    swift_release(a2);
    swift_slowDealloc(v15, -1, -1);
  }
  swift_release_n(a2, 2);
  return v13;
}

uint64_t sub_100198188(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t result;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  _BYTE v22[24];

  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin();
  v9 = &v22[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v10 = qword_1003447B8;
  swift_retain(a2);
  if (v10 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v11 = qword_100354EE8;
  *v9 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  v12 = (id)v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v9);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
  if ((v11 & 1) != 0)
  {
    if (*(_BYTE *)(a1 + OBJC_IVAR____TtC10seserviced6DSKUWB_isRunning) == 1)
    {
      v14 = (uint64_t *)(a1 + OBJC_IVAR____TtC10seserviced6DSKUWB_activeSessions);
      swift_beginAccess(v14, v22, 0, 0);
      v15 = *v14;
      swift_retain(a2);
      v16 = swift_bridgeObjectRetain(v15);
      v17 = (void *)a3(v16, a2);
      swift_release(a2);
    }
    else
    {
      v18 = Logger.logObject.getter(result);
      v19 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v18, v19))
      {
        v20 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v20 = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "Not running", v20, 2u);
        swift_slowDealloc(v20, -1, -1);
      }

      v17 = &_swiftEmptySetSingleton;
    }
    swift_release(a2);
    return (uint64_t)v17;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100198374(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(id))
{
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  char v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v21;
  uint64_t v22;

  v6 = 0;
  v22 = a3 + 56;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v12 = v11 | (v6 << 6);
      goto LABEL_5;
    }
    v15 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v15 >= v10)
      goto LABEL_24;
    v16 = *(_QWORD *)(v22 + 8 * v15);
    ++v6;
    if (!v16)
    {
      v6 = v15 + 1;
      if (v15 + 1 >= v10)
        goto LABEL_24;
      v16 = *(_QWORD *)(v22 + 8 * v6);
      if (!v16)
      {
        v6 = v15 + 2;
        if (v15 + 2 >= v10)
          goto LABEL_24;
        v16 = *(_QWORD *)(v22 + 8 * v6);
        if (!v16)
          break;
      }
    }
LABEL_20:
    v9 = (v16 - 1) & v16;
    v12 = __clz(__rbit64(v16)) + (v6 << 6);
LABEL_5:
    v13 = *(id *)(*(_QWORD *)(a3 + 48) + 8 * v12);
    v14 = a4(v13);

    if ((v14 & 1) != 0)
    {
      *(unint64_t *)((char *)a1 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v21++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain(a3);
        sub_100194E54(a1, a2, v21, a3, (uint64_t *)&unk_1003460D0);
        return;
      }
    }
  }
  v17 = v15 + 3;
  if (v17 >= v10)
    goto LABEL_24;
  v16 = *(_QWORD *)(v22 + 8 * v17);
  if (v16)
  {
    v6 = v17;
    goto LABEL_20;
  }
  while (1)
  {
    v6 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v6 >= v10)
      goto LABEL_24;
    v16 = *(_QWORD *)(v22 + 8 * v6);
    ++v17;
    if (v16)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
}

uint64_t sub_100198544(uint64_t isStackAllocationSafe, uint64_t (*a2)(id))
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v16;

  v4 = isStackAllocationSafe;
  v5 = *(_BYTE *)(isStackAllocationSafe + 32);
  v6 = v5 & 0x3F;
  v7 = (1 << v5) + 63;
  v8 = v7 >> 6;
  v9 = 8 * (v7 >> 6);
  if (v6 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v7 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe, a2);
    bzero((char *)&v16 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    sub_100198374((unint64_t *)((char *)&v16 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0)), v8, v4, a2);
    v11 = v10;
    v12 = swift_release(v4);
    if (v2)
      swift_willThrow(v12);
  }
  else
  {
    v13 = (void *)swift_slowAlloc(v9, -1);
    bzero(v13, v9);
    sub_100198374((unint64_t *)v13, v8, v4, a2);
    v11 = v14;
    swift_release(v4);
    swift_slowDealloc(v13, -1, -1);
  }
  return v11;
}

Swift::Int sub_1001986C0(uint64_t a1, uint64_t (*a2)(id))
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::Int result;
  char v9;
  id v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  _QWORD *v24;

  if ((a1 & 0xC000000000000001) == 0)
    return sub_100198544(a1, a2);
  v3 = &_swiftEmptySetSingleton;
  v24 = &_swiftEmptySetSingleton;
  if (a1 >= 0)
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  v4 = __CocoaSet.makeIterator()(a1);
  v5 = __CocoaSet.Iterator.next()(v4);
  if (v5)
  {
    v6 = v5;
    v7 = type metadata accessor for UWBSession();
    do
    {
      v22 = v6;
      swift_dynamicCast(&v23, &v22, (char *)&type metadata for Swift.AnyObject + 8, v7, 7);
      v9 = a2(v23);
      v10 = v23;
      if ((v9 & 1) != 0)
      {
        v11 = v24;
        v12 = v24[2];
        if (v24[3] <= v12)
        {
          sub_1000CB34C(v12 + 1);
          v11 = v24;
        }
        result = NSObject._rawHashValue(seed:)(v11[5]);
        v13 = v11 + 7;
        v14 = -1 << *((_BYTE *)v11 + 32);
        v15 = result & ~v14;
        v16 = v15 >> 6;
        if (((-1 << v15) & ~v11[(v15 >> 6) + 7]) != 0)
        {
          v17 = __clz(__rbit64((-1 << v15) & ~v11[(v15 >> 6) + 7])) | v15 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v18 = 0;
          v19 = (unint64_t)(63 - v14) >> 6;
          do
          {
            if (++v16 == v19 && (v18 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v20 = v16 == v19;
            if (v16 == v19)
              v16 = 0;
            v18 |= v20;
            v21 = v13[v16];
          }
          while (v21 == -1);
          v17 = __clz(__rbit64(~v21)) + (v16 << 6);
        }
        *(_QWORD *)((char *)v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
        *(_QWORD *)(v11[6] + 8 * v17) = v10;
        ++v11[2];
      }
      else
      {

      }
      v6 = __CocoaSet.Iterator.next()(result);
    }
    while (v6);
    v3 = v24;
  }
  swift_release(v4);
  return (Swift::Int)v3;
}

uint64_t sub_1001988C4(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 16))(a2, a1);
  return a2;
}

unint64_t sub_100198900()
{
  unint64_t result;

  result = qword_100348950;
  if (!qword_100348950)
  {
    result = swift_getWitnessTable(&unk_10028BCE4, &type metadata for DSKUWB.UWBError);
    atomic_store(result, (unint64_t *)&qword_100348950);
  }
  return result;
}

void sub_100198944(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[5];
  char *v34;

  v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v4 = a1;
    else
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_retain(a2);
    swift_bridgeObjectRetain(v3);
    v5 = __CocoaSet.makeIterator()(v4);
    v6 = type metadata accessor for UWBSession();
    v8 = sub_1000C69C4((unint64_t *)&qword_100345828, v7, (uint64_t (*)(uint64_t))type metadata accessor for UWBSession, (uint64_t)&protocol conformance descriptor for NSObject);
    v9 = Set.Iterator.init(_cocoa:)(v33, v5, v6, v8);
    v3 = v33[0];
    v30 = v33[1];
    v10 = v33[2];
    v11 = v33[3];
    v12 = v33[4];
  }
  else
  {
    v13 = -1 << *(_BYTE *)(a1 + 32);
    v30 = a1 + 56;
    v10 = ~v13;
    v14 = -v13;
    if (v14 < 64)
      v15 = ~(-1 << v14);
    else
      v15 = -1;
    v12 = v15 & *(_QWORD *)(a1 + 56);
    swift_retain(a2);
    swift_bridgeObjectRetain(v3);
    v11 = 0;
  }
  v29 = (unint64_t)(v10 + 64) >> 6;
  v31 = v3;
  while (1)
  {
    v22 = v11;
    if ((v3 & 0x8000000000000000) == 0)
      break;
    v26 = __CocoaSet.Iterator.next()(v9);
    if (!v26)
      goto LABEL_34;
    v27 = v26;
    v32 = v26;
    v28 = type metadata accessor for UWBSession();
    swift_unknownObjectRetain(v27);
    swift_dynamicCast(&v34, &v32, (char *)&type metadata for Swift.AnyObject + 8, v28, 7);
    v18 = v34;
    swift_unknownObjectRelease(v27);
    if (!v18)
      goto LABEL_34;
LABEL_13:
    v19 = *(_QWORD *)&v18[OBJC_IVAR____TtC10seserviced10UWBSession_peer];
    v20 = v19 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
    v21 = a2 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
    swift_retain(a2);
    swift_retain(v19);
    LOBYTE(v21) = static UUID.== infix(_:_:)(v20, v21);

    swift_release(a2);
    v9 = (_QWORD *)swift_release(v19);
    v3 = v31;
    if ((v21 & 1) != 0)
      goto LABEL_34;
  }
  if (v12)
  {
    v16 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    v17 = v16 | (v11 << 6);
LABEL_12:
    v18 = (char *)*(id *)(*(_QWORD *)(v3 + 48) + 8 * v17);
    if (!v18)
      goto LABEL_34;
    goto LABEL_13;
  }
  v23 = v11 + 1;
  if (!__OFADD__(v11, 1))
  {
    if (v23 >= v29)
      goto LABEL_34;
    v24 = *(_QWORD *)(v30 + 8 * v23);
    ++v11;
    if (!v24)
    {
      v11 = v22 + 2;
      if (v22 + 2 >= v29)
        goto LABEL_34;
      v24 = *(_QWORD *)(v30 + 8 * v11);
      if (!v24)
      {
        v11 = v22 + 3;
        if (v22 + 3 >= v29)
          goto LABEL_34;
        v24 = *(_QWORD *)(v30 + 8 * v11);
        if (!v24)
        {
          v11 = v22 + 4;
          if (v22 + 4 >= v29)
            goto LABEL_34;
          v24 = *(_QWORD *)(v30 + 8 * v11);
          if (!v24)
          {
            v11 = v22 + 5;
            if (v22 + 5 >= v29)
              goto LABEL_34;
            v24 = *(_QWORD *)(v30 + 8 * v11);
            if (!v24)
            {
              v25 = v22 + 6;
              while (v29 != v25)
              {
                v24 = *(_QWORD *)(v30 + 8 * v25++);
                if (v24)
                {
                  v11 = v25 - 1;
                  goto LABEL_31;
                }
              }
LABEL_34:
              sub_10007EF58(v31);
              swift_release(a2);
              return;
            }
          }
        }
      }
    }
LABEL_31:
    v12 = (v24 - 1) & v24;
    v17 = __clz(__rbit64(v24)) + (v11 << 6);
    goto LABEL_12;
  }
  __break(1u);
}

void sub_100198C70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  id v31;
  char *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[24];

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (uint64_t *)((char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v7 = qword_100354EE8;
  *v6 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  v9 = (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) != 0)
  {
    v10 = Logger.logObject.getter(v9);
    v14 = static os_log_type_t.info.getter(v10, v11, v12, v13);
    if (os_log_type_enabled(v10, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v14, "UWB is powered off", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
    }

    *(_BYTE *)(v1 + OBJC_IVAR____TtC10seserviced6DSKUWB_isAvailable) = 0;
    v16 = v1 + OBJC_IVAR____TtC10seserviced6DSKUWB_activeUseCases;
    swift_beginAccess(v1 + OBJC_IVAR____TtC10seserviced6DSKUWB_activeUseCases, v37, 0, 0);
    if (*(_QWORD *)(*(_QWORD *)v16 + 16))
    {
      v17 = swift_retain_n(v1, 2);
      v18 = Logger.logObject.getter(v17);
      v22 = static os_log_type_t.info.getter(v18, v19, v20, v21);
      if (os_log_type_enabled(v18, v22))
      {
        v23 = (uint8_t *)swift_slowAlloc(12, -1);
        v24 = swift_slowAlloc(32, -1);
        v36 = v24;
        *(_DWORD *)v23 = 136315138;
        v25 = *(_QWORD *)v16;
        v26 = sub_100198FD4();
        swift_bridgeObjectRetain(v25);
        v28 = Set.description.getter(v27, &type metadata for DSK.Module, v26);
        v30 = v29;
        swift_bridgeObjectRelease(v25);
        v35 = sub_1001C56EC(v28, v30, &v36);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v23 + 4, v23 + 12);
        swift_release_n(v1, 2);
        swift_bridgeObjectRelease(v30);
        _os_log_impl((void *)&_mh_execute_header, v18, v22, "Powering on UWB for %s", v23, 0xCu);
        swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v24, -1, -1);
        swift_slowDealloc(v23, -1, -1);
      }
      else
      {
        swift_release_n(v1, 2);
      }

      v31 = objc_allocWithZone((Class)type metadata accessor for UWBPrewarmSession());
      swift_retain_n(v1, 4);
      v32 = sub_100187338((uint64_t)sub_100198FC4, v1, (uint64_t)sub_100198FC8, v1, (uint64_t)sub_100198FCC, v1, (uint64_t)sub_100198FD0, v1);
      v33 = *(void **)(v1 + OBJC_IVAR____TtC10seserviced6DSKUWB_uwbPowerAssertion);
      *(_QWORD *)(v1 + OBJC_IVAR____TtC10seserviced6DSKUWB_uwbPowerAssertion) = v32;

    }
  }
  else
  {
    __break(1u);
  }
}

unint64_t sub_100198FD4()
{
  unint64_t result;

  result = qword_1003489D0;
  if (!qword_1003489D0)
  {
    result = swift_getWitnessTable(&unk_10028D9B8, &type metadata for DSK.Module);
    atomic_store(result, (unint64_t *)&qword_1003489D0);
  }
  return result;
}

uint64_t sub_100199018(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t result;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  NSObject *v18;
  uint64_t v19;
  os_log_type_t v20;
  uint8_t *v21;
  _BYTE v23[24];

  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = &v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = qword_1003447B8;
  swift_retain(a2);
  if (v9 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v10 = qword_100354EE8;
  *v8 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  v11 = (id)v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v8);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  if ((v10 & 1) != 0)
  {
    if (*(_BYTE *)(a1 + OBJC_IVAR____TtC10seserviced6DSKUWB_isRunning) == 1)
    {
      v13 = (uint64_t *)(a1 + OBJC_IVAR____TtC10seserviced6DSKUWB_activeSessions);
      swift_beginAccess(v13, v23, 0, 0);
      v14 = *v13;
      swift_retain(a2);
      swift_bridgeObjectRetain(v14);
      sub_100198944(v15, a2);
      v17 = v16;
      swift_bridgeObjectRelease(v14);
      swift_release_n(a2, 2);
    }
    else
    {
      v18 = Logger.logObject.getter(result);
      v20 = static os_log_type_t.error.getter(v18, v19);
      if (os_log_type_enabled(v18, v20))
      {
        v21 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v21 = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, v20, "Not running", v21, 2u);
        swift_slowDealloc(v21, -1, -1);
      }
      swift_release(a2);

      v17 = 0;
    }
    return v17 & 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100199200()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100199224(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_100185D80(a1, a2, a3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
}

uint64_t sub_10019922C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  id v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = type metadata accessor for DispatchPredicate(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  v5 = (uint64_t *)((char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v6 = qword_100354EE8;
  *v5 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v1);
  v7 = (id)v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v5);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v2 + 8))(v5, v1);
  if ((v6 & 1) == 0)
  {
    __break(1u);
    return result;
  }
  v9 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC10seserviced10UWBSession_state);
  *(_BYTE *)(v0 + OBJC_IVAR____TtC10seserviced10UWBSession_state) = 4;
  if (v9 == 3)
  {
    v10 = OBJC_IVAR____TtC10seserviced10UWBSession_onResumption;
  }
  else
  {
    if (v9)
      return result;
    v10 = OBJC_IVAR____TtC10seserviced10UWBSession_onStart;
  }
  v11 = v0 + v10;
  v13 = *(void (**)(uint64_t))v11;
  v12 = *(_QWORD *)(v11 + 8);
  v14 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced10UWBSession_peer);
  swift_retain(v12);
  v15 = swift_retain(v14);
  v13(v15);
  swift_release(v12);
  return swift_release(v14);
}

uint64_t sub_100199378(uint64_t a1)
{
  _BYTE *v1;
  _BYTE *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(_QWORD *, uint64_t, uint64_t);
  id v12;
  void (*v13)(_QWORD *, uint64_t);
  uint64_t v14;
  void *v15;
  id v16;
  char v17;
  uint64_t result;
  void *v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  _BYTE v24[24];

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = &v24[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v9 = qword_100354EE8;
  *v8 = qword_100354EE8;
  v10 = enum case for DispatchPredicate.onQueue(_:);
  v11 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v5 + 104);
  v11(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  v12 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  v13 = *(void (**)(_QWORD *, uint64_t))(v5 + 8);
  v13(v8, v4);
  if ((v9 & 1) != 0)
  {
    v2[OBJC_IVAR____TtC10seserviced10UWBSession_state] = 1;
    if (qword_100344690 == -1)
      goto LABEL_5;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100344690, sub_100182BE4);
LABEL_5:
  v14 = qword_100354D70;
  v15 = (void *)qword_100354EE8;
  *v8 = qword_100354EE8;
  v11(v8, v10, v4);
  v16 = v15;
  v17 = _dispatchPreconditionTest(_:)(v8);
  result = ((uint64_t (*)(_QWORD *, uint64_t))v13)(v8, v4);
  if ((v17 & 1) != 0)
  {
    swift_beginAccess(v14 + OBJC_IVAR____TtC10seserviced6DSKUWB_activeSessions, v24, 33, 0);
    v19 = (void *)sub_1000D3380(v2);
    swift_endAccess(v24);

    v21 = *(void (**)(uint64_t, uint64_t))&v2[OBJC_IVAR____TtC10seserviced10UWBSession_onInvalidation];
    v20 = *(_QWORD *)&v2[OBJC_IVAR____TtC10seserviced10UWBSession_onInvalidation + 8];
    v22 = *(_QWORD *)&v2[OBJC_IVAR____TtC10seserviced10UWBSession_peer];
    swift_retain(v20);
    swift_retain(v22);
    v21(a1, v22);
    swift_release(v20);
    return swift_release(v22);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100199570(unint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;
  uint64_t result;
  char v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;

  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (uint64_t *)((char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v8 = qword_100354EE8;
  *v7 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  v9 = (id)v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v4 + 8))(v7, v3);
  if ((v8 & 1) != 0)
  {
    if (*(_BYTE *)(v1 + OBJC_IVAR____TtC10seserviced10UWBSession_state) == 2)
      v11 = 6;
    else
      v11 = 5;
    *(_BYTE *)(v1 + OBJC_IVAR____TtC10seserviced10UWBSession_state) = v11;
    if (a1 > 6)
      v12 = 0x8000000000000000;
    else
      v12 = qword_10028BD28[a1];
    v13 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10seserviced10UWBSession_suspensionReasons);
    if ((v13 & v12) == 0)
    {
      v13 |= v12;
      *(_QWORD *)(v1 + OBJC_IVAR____TtC10seserviced10UWBSession_suspensionReasons) = v13;
    }
    v15 = *(void (**)(uint64_t, uint64_t))(v1 + OBJC_IVAR____TtC10seserviced10UWBSession_onSuspension);
    v14 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10seserviced10UWBSession_onSuspension + 8);
    v16 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10seserviced10UWBSession_peer);
    swift_retain(v14);
    swift_retain(v16);
    v15(v13, v16);
    swift_release(v14);
    return swift_release(v16);
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1001996F0(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  id v12;
  id result;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;

  v3 = v2;
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (uint64_t *)((char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v11 = qword_100354EE8;
  *v10 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  v12 = (id)v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v10);
  result = (id)(*(uint64_t (**)(_QWORD *, uint64_t))(v7 + 8))(v10, v6);
  if ((v11 & 1) == 0)
  {
    __break(1u);
LABEL_16:
    swift_once(&qword_100344690, sub_100182BE4);
LABEL_10:
    sub_100183FDC(0);
    *(_BYTE *)(v3 + a2) = 3;
    return sub_100184BA0();
  }
  if ((a2 & 1) != 0)
  {
    *(_QWORD *)(v3 + OBJC_IVAR____TtC10seserviced10UWBSession_suspensionReasons) = 0;
    a2 = OBJC_IVAR____TtC10seserviced10UWBSession_state;
    if (*(_BYTE *)(v3 + OBJC_IVAR____TtC10seserviced10UWBSession_state) == 6)
    {
      *(_BYTE *)(v3 + OBJC_IVAR____TtC10seserviced10UWBSession_state) = 2;
      return result;
    }
    if (qword_100344690 == -1)
      goto LABEL_10;
    goto LABEL_16;
  }
  if (a1 > 6)
    v14 = 0x8000000000000000;
  else
    v14 = qword_10028BD28[a1];
  v15 = *(_QWORD *)(v3 + OBJC_IVAR____TtC10seserviced10UWBSession_suspensionReasons);
  if ((v15 & v14) != 0)
  {
    v15 &= ~v14;
    *(_QWORD *)(v3 + OBJC_IVAR____TtC10seserviced10UWBSession_suspensionReasons) = v15;
  }
  v17 = *(void (**)(uint64_t, uint64_t))(v3 + OBJC_IVAR____TtC10seserviced10UWBSession_onSuspension);
  v16 = *(_QWORD *)(v3 + OBJC_IVAR____TtC10seserviced10UWBSession_onSuspension + 8);
  v18 = *(_QWORD *)(v3 + OBJC_IVAR____TtC10seserviced10UWBSession_peer);
  swift_retain(v16);
  swift_retain(v18);
  v17(v15, v18);
  swift_release(v16);
  return (id)swift_release(v18);
}

uint64_t sub_1001998E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  id v11;
  uint64_t result;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;

  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (uint64_t *)((char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v10 = qword_100354EE8;
  *v9 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5);
  v11 = (id)v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v6 + 8))(v9, v5);
  if ((v10 & 1) != 0)
  {
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2
                                                           + OBJC_IVAR____TtC10seserviced16UWBAlishaSession_onOutgoingMessage);
    v13 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10seserviced16UWBAlishaSession_onOutgoingMessage + 8);
    v15 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10seserviced10UWBSession_peer);
    swift_retain(v13);
    swift_retain(v15);
    v14(a1, a2, v15);
    swift_release(v13);
    return swift_release(v15);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100199A1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;
  uint64_t result;
  uint64_t v11;
  void (*v12)(_QWORD, uint64_t);
  uint64_t v13;
  uint64_t v14;

  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (uint64_t *)((char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v8 = qword_100354EE8;
  *v7 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  v9 = (id)v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v4 + 8))(v7, v3);
  if ((v8 & 1) != 0)
  {
    if ((unint64_t)(a1 - 1) <= 3)
    {
      v12 = *(void (**)(_QWORD, uint64_t))(v1
                                                   + OBJC_IVAR____TtC10seserviced16UWBAlishaSession_onSessionHealthUpdate);
      v11 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10seserviced16UWBAlishaSession_onSessionHealthUpdate + 8);
      v13 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10seserviced10UWBSession_peer);
      swift_retain(v11);
      swift_retain(v13);
      v12(0x3020001u >> (8 * (a1 - 1)), v13);
      swift_release(v11);
      return swift_release(v13);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100199B64(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  id v13;
  uint64_t result;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;

  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (uint64_t *)((char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v12 = qword_100354EE8;
  *v11 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v7);
  v13 = (id)v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v11);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v8 + 8))(v11, v7);
  if ((v12 & 1) != 0)
  {
    v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + *a3);
    v16 = *(_QWORD *)(v3 + OBJC_IVAR____TtC10seserviced10UWBSession_peer);
    swift_retain(v16);
    v15(a1, a2, v16);
    return swift_release(v16);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100199C90(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  id v11;
  uint64_t result;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;

  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (uint64_t *)((char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v10 = qword_100354EE8;
  *v9 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5);
  v11 = (id)v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v6 + 8))(v9, v5);
  if ((v10 & 1) != 0)
  {
    v13 = *(void (**)(uint64_t, uint64_t))(v2 + *a2);
    v14 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10seserviced10UWBSession_peer);
    swift_retain(v14);
    v13(a1, v14);
    return swift_release(v14);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100199DB4(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;
  uint64_t result;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;

  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (uint64_t *)((char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v8 = qword_100354EE8;
  *v7 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  v9 = (id)v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v4 + 8))(v7, v3);
  if ((v8 & 1) != 0)
  {
    v11 = objc_msgSend(a1, "uwbPreciseDistanceAvailability");
    if ((v11 & 8) != 0)
    {
      if ((v11 & 1) != 0)
      {
        v12 = 34;
        if ((v11 & 2) == 0)
        {
LABEL_16:
          if ((v11 & 4) == 0 || (v12 & 0x10) != 0)
            return (*(uint64_t (**)(uint64_t))(v1
                                                      + OBJC_IVAR____TtC10seservicedP33_4D3BC54BA96E8438A66520691EE354E617UWBPrewarmSession_onStateUpdate))(v12);
LABEL_18:
          v12 |= 0x10uLL;
          return (*(uint64_t (**)(uint64_t))(v1
                                                    + OBJC_IVAR____TtC10seservicedP33_4D3BC54BA96E8438A66520691EE354E617UWBPrewarmSession_onStateUpdate))(v12);
        }
      }
      else
      {
        v12 = 32;
        if ((v11 & 2) == 0)
          goto LABEL_10;
      }
    }
    else if ((v11 & 1) != 0)
    {
      v12 = 2;
      if ((v11 & 2) == 0)
        goto LABEL_16;
    }
    else
    {
      v12 = 0;
      if ((v11 & 2) == 0)
      {
LABEL_10:
        if ((v11 & 4) == 0)
          return (*(uint64_t (**)(uint64_t))(v1
                                                    + OBJC_IVAR____TtC10seservicedP33_4D3BC54BA96E8438A66520691EE354E617UWBPrewarmSession_onStateUpdate))(v12);
        goto LABEL_18;
      }
    }
    v12 |= 4uLL;
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t sub_100199F08(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  id v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (uint64_t *)((char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v10 = qword_100354EE8;
  *v9 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5);
  v11 = (id)v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v6 + 8))(v9, v5);
  if ((v10 & 1) == 0)
  {
    __break(1u);
    return result;
  }
  v13 = sub_10006C25C(0, &qword_100348B38, NICarKeyConfiguration_ptr);
  v14 = swift_dynamicCastMetatype(a2, v13);
  v15 = 0;
  if (!v14)
  {
    v16 = sub_10006C25C(0, &qword_100348B40, NIAcwgConfiguration_ptr);
    result = swift_dynamicCastMetatype(a2, v16);
    if (!result)
      return result;
    v15 = 1;
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(v2
                                                    + OBJC_IVAR____TtC10seservicedP33_4D3BC54BA96E8438A66520691EE354E617UWBPrewarmSession_onRangingLimitUpdate))(a1 & 1, v15);
}

uint64_t storeEnumTagSinglePayload for DSKUWB.UWBError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10019A0AC + 4 * byte_10028B779[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10019A0E0 + 4 * byte_10028B774[v4]))();
}

uint64_t sub_10019A0E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10019A0E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10019A0F0);
  return result;
}

uint64_t sub_10019A0FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10019A104);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10019A108(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10019A110(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DSKUWB.UWBError()
{
  return &type metadata for DSKUWB.UWBError;
}

unint64_t sub_10019A130()
{
  unint64_t result;

  result = qword_100348B98;
  if (!qword_100348B98)
  {
    result = swift_getWitnessTable(&unk_10028BCBC, &type metadata for DSKUWB.UWBError);
    atomic_store(result, (unint64_t *)&qword_100348B98);
  }
  return result;
}

void sub_10019A194()
{
  qword_100354D88 = (uint64_t)&off_100305FA8;
}

void sub_10019A1A8()
{
  qword_100354D90 = (uint64_t)&off_100305F58;
}

void sub_10019A1BC()
{
  qword_100354D98 = (uint64_t)&off_100305258;
}

unint64_t sub_10019A1D0(unsigned __int8 a1)
{
  int v1;
  unint64_t result;
  Swift::String v3;
  void *object;

  v1 = a1;
  result = 17747;
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = 4347733;
      break;
    case 2:
      result = 0x6163696669746F4ELL;
      break;
    case 3:
      result = 0xD000000000000014;
      break;
    case 4:
      result = 0x7261506472696854;
      break;
    case 5:
      result = 0x6465767265736552;
      break;
    default:
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease(0xE000000000000000);
      v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt8, &protocol witness table for UInt8);
      object = v3._object;
      String.append(_:)(v3);
      swift_bridgeObjectRelease(object);
      result = 0x2064696C61766E69;
      break;
  }
  return result;
}

uint64_t sub_10019A318(unsigned __int8 a1)
{
  int v1;
  uint64_t result;
  Swift::String v3;
  void *object;

  v1 = a1;
  result = 0x314D7075746573;
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = 0x324D7075746573;
      break;
    case 2:
      result = 0x334D7075746573;
      break;
    case 3:
      result = 0x344D7075746573;
      break;
    case 4:
    case 5:
      result = 0x52646E6570737573;
      break;
    case 6:
    case 7:
      result = 0x6552656D75736572;
      break;
    default:
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease(0xE000000000000000);
      v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt8, &protocol witness table for UInt8);
      object = v3._object;
      String.append(_:)(v3);
      swift_bridgeObjectRelease(object);
      result = 0x2064696C61766E69;
      break;
  }
  return result;
}

unint64_t sub_10019A498(unsigned __int8 a1)
{
  int v1;
  unint64_t result;
  Swift::String v3;
  void *object;

  v1 = a1;
  result = 0x746E657665;
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = 0x45676E69676E6172;
      break;
    case 2:
      result = 0xD000000000000013;
      break;
    case 3:
      result = 0xD000000000000023;
      break;
    case 4:
      result = 0x6575716552656B72;
      break;
    case 5:
      result = 0xD000000000000016;
      break;
    case 6:
      result = 0xD000000000000019;
      break;
    default:
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease(0xE000000000000000);
      v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt8, &protocol witness table for UInt8);
      object = v3._object;
      String.append(_:)(v3);
      swift_bridgeObjectRelease(object);
      result = 0x2064696C61766E69;
      break;
  }
  return result;
}

unint64_t sub_10019A610(int a1)
{
  unint64_t result;
  Swift::String v3;
  void *object;

  result = 0xD000000000000016;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = 0xD00000000000001CLL;
      break;
    case 2:
      result = 0xD000000000000020;
      break;
    case 3:
      result = 0xD000000000000021;
      break;
    case 4:
      result = 0xD00000000000001FLL;
      break;
    case 5:
      result = 0xD000000000000017;
      break;
    default:
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease(0xE000000000000000);
      v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt32, &protocol witness table for UInt32);
      object = v3._object;
      String.append(_:)(v3);
      swift_bridgeObjectRelease(object);
      result = 0x2064696C61766E69;
      break;
  }
  return result;
}

uint64_t sub_10019A73C(unsigned __int8 a1)
{
  int v1;
  uint64_t result;
  Swift::String v3;
  void *object;

  v1 = a1;
  result = 0x64657275636573;
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = 0x6572756365736E75;
      break;
    case 2:
      result = 0x746375727473626FLL;
      break;
    case 3:
      result = 0x6E776F6E6B6E75;
      break;
    default:
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease(0xE000000000000000);
      v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt8, &protocol witness table for UInt8);
      object = v3._object;
      String.append(_:)(v3);
      swift_bridgeObjectRelease(object);
      result = 0x2064696C61766E69;
      break;
  }
  return result;
}

unint64_t sub_10019A85C(unsigned __int8 a1)
{
  int v1;
  unint64_t result;
  Swift::String v3;
  void *object;

  v1 = a1;
  result = 0x6669636570736E75;
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = 0x6C61756E616DLL;
      break;
    case 2:
      result = 1869903201;
      break;
    case 3:
      result = 0x656C756465686373;
      break;
    case 4:
    case 7:
      result = 0xD000000000000014;
      break;
    case 5:
      result = 0xD000000000000011;
      break;
    case 6:
      result = 0xD000000000000015;
      break;
    default:
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease(0xE000000000000000);
      v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt8, &protocol witness table for UInt8);
      object = v3._object;
      String.append(_:)(v3);
      swift_bridgeObjectRelease(object);
      result = 0x2064696C61766E69;
      break;
  }
  return result;
}

void sub_10019A9D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[5];
  uint64_t v27;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = type metadata accessor for Peer(0);
    v5 = sub_1000639EC((unint64_t *)&qword_100347720, type metadata accessor for Peer, (uint64_t)&unk_10028BFA8);
    v6 = Set.Iterator.init(_cocoa:)(v26, v3, v4, v5);
    v1 = v26[0];
    v24 = v26[1];
    v7 = v26[2];
    v8 = v26[3];
    v9 = v26[4];
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v24 = a1 + 56;
    v7 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v9 = v12 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v8 = 0;
  }
  v23 = (unint64_t)(v7 + 64) >> 6;
  if (v1 < 0)
    goto LABEL_13;
  while (1)
  {
    if (v9)
    {
      v13 = (v9 - 1) & v9;
      v14 = __clz(__rbit64(v9)) | (v8 << 6);
      v15 = v8;
      goto LABEL_32;
    }
    v20 = v8 + 1;
    if (__OFADD__(v8, 1))
      break;
    if (v20 >= v23)
      goto LABEL_37;
    v21 = *(_QWORD *)(v24 + 8 * v20);
    v15 = v8 + 1;
    if (!v21)
    {
      v15 = v8 + 2;
      if (v8 + 2 >= v23)
        goto LABEL_37;
      v21 = *(_QWORD *)(v24 + 8 * v15);
      if (!v21)
      {
        v15 = v8 + 3;
        if (v8 + 3 >= v23)
          goto LABEL_37;
        v21 = *(_QWORD *)(v24 + 8 * v15);
        if (!v21)
        {
          v15 = v8 + 4;
          if (v8 + 4 >= v23)
            goto LABEL_37;
          v21 = *(_QWORD *)(v24 + 8 * v15);
          if (!v21)
          {
            v15 = v8 + 5;
            if (v8 + 5 >= v23)
              goto LABEL_37;
            v21 = *(_QWORD *)(v24 + 8 * v15);
            if (!v21)
            {
              v22 = v8 + 6;
              while (v23 != v22)
              {
                v21 = *(_QWORD *)(v24 + 8 * v22++);
                if (v21)
                {
                  v15 = v22 - 1;
                  goto LABEL_31;
                }
              }
LABEL_37:
              sub_10007EF58(v1);
              return;
            }
          }
        }
      }
    }
LABEL_31:
    v13 = (v21 - 1) & v21;
    v14 = __clz(__rbit64(v21)) + (v15 << 6);
LABEL_32:
    v19 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v14);
    swift_retain(v19);
    if (!v19)
      goto LABEL_37;
    while (1)
    {
      if (qword_1003446C0 != -1)
        swift_once(&qword_1003446C0, sub_10019CC14);
      sub_10019C510(v19, 0, 0);
      v6 = (_QWORD *)swift_release(v19);
      v8 = v15;
      v9 = v13;
      if ((v1 & 0x8000000000000000) == 0)
        break;
LABEL_13:
      v16 = __CocoaSet.Iterator.next()(v6);
      if (v16)
      {
        v17 = v16;
        v25 = v16;
        v18 = type metadata accessor for Peer(0);
        swift_unknownObjectRetain(v17);
        swift_dynamicCast(&v27, &v25, (char *)&type metadata for Swift.AnyObject + 8, v18, 7);
        v19 = v27;
        swift_unknownObjectRelease(v17);
        v15 = v8;
        v13 = v9;
        if (v19)
          continue;
      }
      goto LABEL_37;
    }
  }
  __break(1u);
}

void sub_10019ACD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[5];
  uint64_t v27;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = type metadata accessor for Peer(0);
    v5 = sub_1000639EC((unint64_t *)&qword_100347720, type metadata accessor for Peer, (uint64_t)&unk_10028BFA8);
    v6 = Set.Iterator.init(_cocoa:)(v26, v3, v4, v5);
    v1 = v26[0];
    v24 = v26[1];
    v7 = v26[2];
    v8 = v26[3];
    v9 = v26[4];
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v24 = a1 + 56;
    v7 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v9 = v12 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v8 = 0;
  }
  v23 = (unint64_t)(v7 + 64) >> 6;
  if (v1 < 0)
    goto LABEL_13;
  while (1)
  {
    if (v9)
    {
      v13 = (v9 - 1) & v9;
      v14 = __clz(__rbit64(v9)) | (v8 << 6);
      v15 = v8;
      goto LABEL_32;
    }
    v20 = v8 + 1;
    if (__OFADD__(v8, 1))
      break;
    if (v20 >= v23)
      goto LABEL_37;
    v21 = *(_QWORD *)(v24 + 8 * v20);
    v15 = v8 + 1;
    if (!v21)
    {
      v15 = v8 + 2;
      if (v8 + 2 >= v23)
        goto LABEL_37;
      v21 = *(_QWORD *)(v24 + 8 * v15);
      if (!v21)
      {
        v15 = v8 + 3;
        if (v8 + 3 >= v23)
          goto LABEL_37;
        v21 = *(_QWORD *)(v24 + 8 * v15);
        if (!v21)
        {
          v15 = v8 + 4;
          if (v8 + 4 >= v23)
            goto LABEL_37;
          v21 = *(_QWORD *)(v24 + 8 * v15);
          if (!v21)
          {
            v15 = v8 + 5;
            if (v8 + 5 >= v23)
              goto LABEL_37;
            v21 = *(_QWORD *)(v24 + 8 * v15);
            if (!v21)
            {
              v22 = v8 + 6;
              while (v23 != v22)
              {
                v21 = *(_QWORD *)(v24 + 8 * v22++);
                if (v21)
                {
                  v15 = v22 - 1;
                  goto LABEL_31;
                }
              }
LABEL_37:
              sub_10007EF58(v1);
              return;
            }
          }
        }
      }
    }
LABEL_31:
    v13 = (v21 - 1) & v21;
    v14 = __clz(__rbit64(v21)) + (v15 << 6);
LABEL_32:
    v19 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v14);
    swift_retain(v19);
    if (!v19)
      goto LABEL_37;
    while (1)
    {
      if (qword_1003445A0 != -1)
        swift_once(&qword_1003445A0, sub_1000B26B0);
      sub_1000AD358(v19);
      v6 = (_QWORD *)swift_release(v19);
      v8 = v15;
      v9 = v13;
      if ((v1 & 0x8000000000000000) == 0)
        break;
LABEL_13:
      v16 = __CocoaSet.Iterator.next()(v6);
      if (v16)
      {
        v17 = v16;
        v25 = v16;
        v18 = type metadata accessor for Peer(0);
        swift_unknownObjectRetain(v17);
        swift_dynamicCast(&v27, &v25, (char *)&type metadata for Swift.AnyObject + 8, v18, 7);
        v19 = v27;
        swift_unknownObjectRelease(v17);
        v15 = v8;
        v13 = v9;
        if (v19)
          continue;
      }
      goto LABEL_37;
    }
  }
  __break(1u);
}

void sub_10019AFC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[5];
  void *v32;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = sub_10006C25C(0, (unint64_t *)&qword_100347710, SEEndPoint_ptr);
    v5 = sub_10007EFD8();
    v6 = Set.Iterator.init(_cocoa:)(v31, v3, v4, v5);
    v1 = v31[0];
    v29 = v31[1];
    v7 = v31[2];
    v8 = v31[3];
    v9 = v31[4];
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v29 = a1 + 56;
    v7 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v9 = v12 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v8 = 0;
  }
  v27 = v7;
  v28 = (unint64_t)(v7 + 64) >> 6;
  if (v1 < 0)
    goto LABEL_13;
  while (1)
  {
    if (v9)
    {
      v13 = (v9 - 1) & v9;
      v14 = __clz(__rbit64(v9)) | (v8 << 6);
      v15 = v8;
      goto LABEL_32;
    }
    v20 = v8 + 1;
    if (__OFADD__(v8, 1))
      break;
    if (v20 >= v28)
      goto LABEL_37;
    v21 = *(_QWORD *)(v29 + 8 * v20);
    v15 = v8 + 1;
    if (!v21)
    {
      v15 = v8 + 2;
      if (v8 + 2 >= v28)
        goto LABEL_37;
      v21 = *(_QWORD *)(v29 + 8 * v15);
      if (!v21)
      {
        v15 = v8 + 3;
        if (v8 + 3 >= v28)
          goto LABEL_37;
        v21 = *(_QWORD *)(v29 + 8 * v15);
        if (!v21)
        {
          v15 = v8 + 4;
          if (v8 + 4 >= v28)
            goto LABEL_37;
          v21 = *(_QWORD *)(v29 + 8 * v15);
          if (!v21)
          {
            v15 = v8 + 5;
            if (v8 + 5 >= v28)
              goto LABEL_37;
            v21 = *(_QWORD *)(v29 + 8 * v15);
            if (!v21)
            {
              v22 = v8 + 6;
              while (v28 != v22)
              {
                v21 = *(_QWORD *)(v29 + 8 * v22++);
                if (v21)
                {
                  v15 = v22 - 1;
                  goto LABEL_31;
                }
              }
LABEL_37:
              sub_10007EF58(v1);
              return;
            }
          }
        }
      }
    }
LABEL_31:
    v13 = (v21 - 1) & v21;
    v14 = __clz(__rbit64(v21)) + (v15 << 6);
LABEL_32:
    v19 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v14);
    if (!v19)
      goto LABEL_37;
    while (1)
    {
      if (qword_100344578 != -1)
        swift_once(&qword_100344578, sub_10008091C);
      v23 = objc_msgSend(v19, "publicKeyIdentifier", v27);
      v24 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v23);
      v26 = v25;

      sub_1000892C8(v24, v26);
      sub_100063CD0(v24, v26);

      v8 = v15;
      v9 = v13;
      if ((v1 & 0x8000000000000000) == 0)
        break;
LABEL_13:
      v16 = __CocoaSet.Iterator.next()(v6);
      if (v16)
      {
        v17 = v16;
        v30 = v16;
        v18 = sub_10006C25C(0, (unint64_t *)&qword_100347710, SEEndPoint_ptr);
        swift_unknownObjectRetain(v17);
        swift_dynamicCast(&v32, &v30, (char *)&type metadata for Swift.AnyObject + 8, v18, 7);
        v19 = v32;
        swift_unknownObjectRelease(v17);
        v15 = v8;
        v13 = v9;
        if (v19)
          continue;
      }
      goto LABEL_37;
    }
  }
  __break(1u);
}

uint64_t sub_10019B2F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(_QWORD *, uint64_t, uint64_t);
  id v11;
  uint64_t (*v12)(_QWORD *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char v19;
  NSObject *v20;
  uint64_t v21;
  os_log_type_t v22;
  uint8_t *v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  void *v27;
  id v28;
  char v29;
  uint64_t *v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BOOL4 v35;
  uint64_t v36;
  uint64_t v37;
  NSString v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t inited;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  Swift::String v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  Swift::String v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  os_log_type_t v72;
  uint8_t *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  os_log_type_t v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  int v94;
  NSObject *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  os_log_type_t v99;
  uint8_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint8_t *v114;
  unint64_t v115;
  uint64_t v116;
  _BYTE *v117;
  char v118;
  Class isa;
  uint64_t v120;
  uint64_t v121;
  NSString v122;
  uint64_t v123;
  NSString v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  Class v129;
  _QWORD v130[2];
  __int128 v131;
  uint64_t v132;
  uint8_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char v139[32];
  uint64_t v140;
  uint64_t v141;

  v134 = a1;
  v2 = v1;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (_QWORD *)((char *)v130 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v8 = qword_100354EE8;
  *v7 = qword_100354EE8;
  v9 = enum case for DispatchPredicate.onQueue(_:);
  v10 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v4 + 104);
  v10(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  v11 = (id)v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  v12 = *(uint64_t (**)(_QWORD *, uint64_t))(v4 + 8);
  v13 = v12(v7, v3);
  if ((v8 & 1) == 0)
  {
    __break(1u);
LABEL_52:
    swift_once(&qword_1003445A0, sub_1000B26B0);
    v14 = v134;
    goto LABEL_7;
  }
  if (*(_BYTE *)(v2 + 24) != 1)
  {
    v20 = Logger.logObject.getter(v13);
    v22 = static os_log_type_t.error.getter(v20, v21);
    if (os_log_type_enabled(v20, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v22, "Not running", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }

    v24 = sub_10006B828();
    v17 = swift_allocError(&type metadata for DSKError, v24, 0, 0);
    v19 = 1;
    goto LABEL_37;
  }
  v14 = v134;
  if (*(_BYTE *)(v134 + OBJC_IVAR____TtC10seserviced4Peer_isConnected) != 1)
  {
    v25 = sub_1000AAC04();
    v17 = swift_allocError(&type metadata for DSKBLE.BLEError, v25, 0, 0);
    v19 = 4;
    goto LABEL_37;
  }
  if (qword_1003445A0 != -1)
    goto LABEL_52;
LABEL_7:
  v15 = sub_1000B2084(v14);
  if (v15 == 2)
  {
LABEL_8:
    v16 = sub_1000AAC04();
    v17 = swift_allocError(&type metadata for DSKBLE.BLEError, v16, 0, 0);
    v19 = 3;
LABEL_37:
    *v18 = v19;
    return swift_willThrow(v17);
  }
  v26 = v15;
  if (qword_100344690 != -1)
    swift_once(&qword_100344690, sub_100182BE4);
  v132 = qword_100354D70;
  v27 = (void *)qword_100354EE8;
  *v7 = qword_100354EE8;
  v10(v7, v9, v3);
  v28 = v27;
  v29 = _dispatchPreconditionTest(_:)(v7);
  v12(v7, v3);
  if ((v29 & 1) == 0)
  {
    __break(1u);
LABEL_54:
    swift_once(&qword_100344680, sub_10016E9A8);
    goto LABEL_47;
  }
  LODWORD(v131) = v26 & 1;
  v30 = (uint64_t *)(v132 + OBJC_IVAR____TtC10seserviced6DSKUWB_rangingLimitExceeded);
  swift_beginAccess(v132 + OBJC_IVAR____TtC10seserviced6DSKUWB_rangingLimitExceeded, v139, 0, 0);
  v31 = sub_10017ED28(0, *v30);
  v32 = objc_opt_self(SESDAnalyticsLogger);
  v33 = OBJC_IVAR____TtC10seserviced4Peer_expressState;
  v34 = v134;
  v35 = *(unsigned __int8 *)(v134 + OBJC_IVAR____TtC10seserviced4Peer_expressState) == 2;
  v130[1] = v134 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
  UUID.uuidString.getter(v32);
  v37 = v36;
  v38 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v37);
  v132 = v32;
  sub_100048D78(v32, v35, v31, v38);

  v40 = *(unsigned __int8 *)(v34 + v33);
  if (v40 != 1)
  {
    if (v40 == 2 && !(_DWORD)v131)
    {
      sub_100049C94(v132, CFSTR("unlockNeededForCarActionCount"));
      v41 = *(_QWORD *)(v134 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier + 8);
      if (v41 >> 60 != 15)
      {
        v42 = *(_QWORD *)(v134 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
        if (v42 >> 60 != 15)
        {
          v132 = *(_QWORD *)(v134 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier);
          v43 = v132;
          v134 = *(_QWORD *)(v134 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
          v44 = v134;
          v45 = sub_100063D3C((uint64_t *)&unk_100346040);
          inited = swift_initStackObject(v45, &v137);
          *(_OWORD *)(inited + 16) = xmmword_1002888E0;
          *(_QWORD *)(inited + 32) = 0xD000000000000014;
          *(_QWORD *)(inited + 40) = 0x80000001002BEA90;
          sub_10006BA34(v43, v41);
          sub_10006BA34(v44, v42);
          sub_10006BA34(v43, v41);
          sub_10006BA34(v44, v42);
          v47 = v133;
          sub_1001BD2CC(v43, v41);
          v49 = v48;
          v133 = v47;
          v135 = v48;
          v50 = sub_100063D3C((uint64_t *)&unk_100346060);
          v51 = sub_10006B86C();
          v52 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v50, v51);
          v54 = v53;
          swift_bridgeObjectRelease(v49);
          v135 = v52;
          v136 = v54;
          v55._countAndFlagsBits = 58;
          v55._object = (void *)0xE100000000000000;
          String.append(_:)(v55);
          sub_1001BD2CC(v134, v42);
          v57 = v56;
          v140 = v56;
          v58 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v50, v51);
          v60 = v59;
          swift_bridgeObjectRelease(v57);
          v61._countAndFlagsBits = v58;
          v61._object = v60;
          String.append(_:)(v61);
          swift_bridgeObjectRelease(v60);
          v62 = v135;
          v63 = v136;
          *(_QWORD *)(inited + 72) = &type metadata for String;
          *(_QWORD *)(inited + 48) = v62;
          *(_QWORD *)(inited + 56) = v63;
          v64 = sub_10017C218(inited);
          v65 = v132;
          v66 = v134;
          sub_1001F119C(0xD000000000000025, 0x80000001002BEA60, v132, v41, v134, v42, v64);
          swift_bridgeObjectRelease(v64);
          sub_10006B9B4(v66, v42);
          sub_10006B9B4(v65, v41);
          sub_10006B9B4(v66, v42);
          sub_10006B9B4(v65, v41);
        }
      }
      goto LABEL_8;
    }
    v67 = swift_retain_n(v34, 2);
    v68 = Logger.logObject.getter(v67);
    v72 = static os_log_type_t.info.getter(v68, v69, v70, v71);
    if (os_log_type_enabled(v68, v72))
    {
      v73 = (uint8_t *)swift_slowAlloc(12, -1);
      v74 = swift_slowAlloc(32, -1);
      *(_DWORD *)v73 = 136315138;
      v135 = v74;
      v133 = v73 + 4;
      LOBYTE(v140) = *(_BYTE *)(v34 + v33);
      v75 = String.init<A>(describing:)(&v140, &type metadata for DSKExpress.ExpressState);
      v77 = v76;
      v140 = sub_1001C56EC(v75, v76, &v135);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, &v141, v133, v73 + 12);
      swift_release_n(v34, 2);
      swift_bridgeObjectRelease(v77);
      _os_log_impl((void *)&_mh_execute_header, v68, v72, "Not sending device intent because of express state %s", v73, 0xCu);
      swift_arrayDestroy(v74, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v74, -1, -1);
LABEL_35:
      swift_slowDealloc(v73, -1, -1);
      goto LABEL_36;
    }
    swift_release_n(v34, 2);
LABEL_36:

    v92 = sub_1000AAC04();
    v17 = swift_allocError(&type metadata for DSKBLE.BLEError, v92, 0, 0);
    v19 = 2;
    goto LABEL_37;
  }
  v78 = qword_100354D70;
  if (*(_BYTE *)(qword_100354D70 + OBJC_IVAR____TtC10seserviced6DSKUWB_isAvailable) != 1)
  {
    v68 = Logger.logObject.getter(v39);
    v84 = static os_log_type_t.info.getter(v68, v86, v87, v88);
    if (!os_log_type_enabled(v68, v84))
      goto LABEL_36;
    v73 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v73 = 0;
    v85 = "Not sending device intent because ranging is not available";
    goto LABEL_34;
  }
  swift_retain(v34);
  v79 = sub_10019765C(v78, v34);
  v80 = swift_release(v34);
  if ((v79 & 1) == 0)
  {
    v68 = Logger.logObject.getter(v80);
    v84 = static os_log_type_t.info.getter(v68, v89, v90, v91);
    if (!os_log_type_enabled(v68, v84))
      goto LABEL_36;
    v73 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v73 = 0;
    v85 = "Not sending device intent because of no UWB session";
    goto LABEL_34;
  }
  if (v31)
  {
    v68 = Logger.logObject.getter(v80);
    v84 = static os_log_type_t.info.getter(v68, v81, v82, v83);
    if (!os_log_type_enabled(v68, v84))
      goto LABEL_36;
    v73 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v73 = 0;
    v85 = "Not sending device intent because of ranging limit reached";
LABEL_34:
    _os_log_impl((void *)&_mh_execute_header, v68, v84, v85, v73, 2u);
    goto LABEL_35;
  }
  v94 = v131;
  LOBYTE(v27) = v131 ^ 1;
  v95 = Logger.logObject.getter(v80);
  v99 = static os_log_type_t.info.getter(v95, v96, v97, v98);
  if (os_log_type_enabled(v95, v99))
  {
    v100 = (uint8_t *)swift_slowAlloc(12, -1);
    v101 = swift_slowAlloc(32, -1);
    *(_DWORD *)v100 = 136315138;
    v135 = v101;
    v102 = v101;
    if (v94)
      v103 = 7827308;
    else
      v103 = 0x6D756964656DLL;
    if (v94)
      v104 = 0xE300000000000000;
    else
      v104 = 0xE600000000000000;
    v140 = sub_1001C56EC(v103, v104, &v135);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, &v141, v100 + 4, v100 + 12);
    swift_bridgeObjectRelease(v104);
    _os_log_impl((void *)&_mh_execute_header, v95, v99, "Sending device intent with %s confidence", v100, 0xCu);
    swift_arrayDestroy(v102, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v102, -1, -1);
    swift_slowDealloc(v100, -1, -1);
  }

  if (qword_100344680 != -1)
    goto LABEL_54;
LABEL_47:
  v105 = sub_100063D3C(&qword_100346F90);
  v106 = swift_allocObject(v105, 34, 7);
  v131 = xmmword_1002888F0;
  *(_OWORD *)(v106 + 16) = xmmword_1002888F0;
  *(_BYTE *)(v106 + 32) = 3;
  *(_BYTE *)(v106 + 33) = (_BYTE)v27;
  v107 = sub_10007C66C(v106);
  v109 = v108;
  swift_bridgeObjectRelease(v106);
  sub_100176C18(3, 17, v107, v109);
  v111 = v110;
  v113 = v112;
  sub_100063CD0(v107, v109);
  v114 = v133;
  sub_1000ADCAC(v111, v113, v134);
  if (v114)
  {
    v115 = sub_1000AAC04();
    v116 = swift_allocError(&type metadata for DSKBLE.BLEError, v115, 0, 0);
    *v117 = 2;
    swift_willThrow(v116);
    swift_errorRelease(v114);
  }
  else
  {
    v118 = (char)v27;
    isa = UInt8._bridgeToObjectiveC()().super.super.isa;
    UUID.uuidString.getter(isa);
    v121 = v120;
    v122 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v121);
    v123 = v132;
    sub_100048F08(v132, isa, v122);

    sub_100049C94(v123, CFSTR("deviceIntentCount"));
    v124 = String._bridgeToObjectiveC()();
    v125 = sub_100063D3C((uint64_t *)&unk_100346040);
    v126 = swift_initStackObject(v125, &v138);
    *(_OWORD *)(v126 + 16) = v131;
    *(_QWORD *)(v126 + 32) = 0x4449555572656550;
    *(_QWORD *)(v126 + 40) = 0xE800000000000000;
    *(_QWORD *)(v126 + 48) = UUID.uuidString.getter(v126);
    *(_QWORD *)(v126 + 56) = v127;
    *(_QWORD *)(v126 + 72) = &type metadata for String;
    *(_QWORD *)(v126 + 80) = 0x6E656469666E6F43;
    *(_QWORD *)(v126 + 88) = 0xEF6C6576654C6563;
    *(_QWORD *)(v126 + 120) = &type metadata for UInt8;
    *(_BYTE *)(v126 + 96) = v118;
    v128 = sub_10017C218(v126);
    v129 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v128);
    PLLogRegisteredEvent(117, v124, v129, 0);

  }
  return sub_100063CD0(v111, v113);
}

void sub_10019BF20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  os_unfair_lock_s *v23;
  os_unfair_lock_s *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  os_unfair_lock_s *v29;
  os_unfair_lock_s *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (uint64_t *)((char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v7 = qword_100354EE8;
  *v6 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  v9 = (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_15:
    v20 = swift_once(&qword_1003447A0, sub_1001EDCA4);
    goto LABEL_11;
  }
  v10 = *(_BYTE *)(v1 + 24);
  v11 = Logger.logObject.getter(v9);
  v15 = v11;
  if ((v10 & 1) != 0)
  {
    v16 = static os_log_type_t.error.getter(v11, v12);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "AlishaBLE is already running", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }

    return;
  }
  v18 = static os_log_type_t.info.getter(v11, v12, v13, v14);
  if (os_log_type_enabled(v15, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v18, "Starting AlishaBLE", v19, 2u);
    swift_slowDealloc(v19, -1, -1);
  }

  *(_BYTE *)(v1 + 24) = 1;
  if (qword_1003447A0 != -1)
    goto LABEL_15;
LABEL_11:
  __chkstk_darwin(v20, v21);
  *(&v32 - 4) = (uint64_t)sub_1001768B8;
  *(&v32 - 3) = 0;
  *(&v32 - 2) = v22;
  v24 = v23 + 4;
  os_unfair_lock_lock(v23 + 4);
  sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_10017BF58, &v33);
  os_unfair_lock_unlock(v24);
  v25 = v33;
  sub_10019A9D4(v33);
  sub_10019CA04(v25);
  v26 = swift_bridgeObjectRelease(v25);
  if (qword_1003445B8 != -1)
    v26 = swift_once(&qword_1003445B8, sub_1000EAA4C);
  __chkstk_darwin(v26, v27);
  *(&v32 - 4) = (uint64_t)sub_10008ED74;
  *(&v32 - 3) = 0;
  *(&v32 - 2) = v28;
  v30 = v29 + 4;
  os_unfair_lock_lock(v29 + 4);
  sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_10007EFBC, &v33);
  os_unfair_lock_unlock(v30);
  v31 = v33;
  sub_10019AFC4(v33);
  swift_bridgeObjectRelease(v31);
  sub_100095A0C();
}

void sub_10019C250()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  os_unfair_lock_s *v21;
  os_unfair_lock_s *v22;
  uint64_t v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (uint64_t *)((char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v7 = qword_100354EE8;
  *v6 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  v9 = (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_15:
    v18 = swift_once(&qword_1003447A0, sub_1001EDCA4);
LABEL_8:
    __chkstk_darwin(v18, v19);
    *(&v26 - 4) = (uint64_t)sub_10009B494;
    *(&v26 - 3) = 0;
    *(&v26 - 2) = v20;
    v22 = v21 + 4;
    os_unfair_lock_lock(v21 + 4);
    sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_10006F860, &v27);
    os_unfair_lock_unlock(v22);
    v23 = v27;
    sub_10019ACD0(v27);
    swift_bridgeObjectRelease(v23);
    if (qword_1003445A0 != -1)
      swift_once(&qword_1003445A0, sub_1000B26B0);
    sub_1000B9494(0, (uint64_t)&_swiftEmptySetSingleton, 128);
    *(_BYTE *)(v1 + 24) = 0;
    return;
  }
  v10 = *(unsigned __int8 *)(v1 + 24);
  v11 = Logger.logObject.getter(v9);
  v15 = v11;
  if (v10 == 1)
  {
    v16 = static os_log_type_t.info.getter(v11, v12, v13, v14);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Stopping AlishaBLE", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }

    if (qword_1003447A0 == -1)
      goto LABEL_8;
    goto LABEL_15;
  }
  v24 = static os_log_type_t.error.getter(v11, v12);
  if (os_log_type_enabled(v15, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v24, "AlishaBLE is not running", v25, 2u);
    swift_slowDealloc(v25, -1, -1);
  }

}

void sub_10019C510(uint64_t a1, char a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  NSObject *v34;
  uint64_t v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  NSObject *v39;
  uint64_t v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v4 = v3;
  v8 = type metadata accessor for DispatchPredicate(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (uint64_t *)((char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v13 = qword_100354EE8;
  *v12 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8);
  v14 = (id)v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)(v12);
  v15 = (*(uint64_t (**)(_QWORD *, uint64_t))(v9 + 8))(v12, v8);
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_26:
    swift_once(&qword_1003445A0, sub_1000B26B0);
LABEL_7:
    v53 = qword_100354BC8;
    v20 = sub_100063D3C(&qword_100345398);
    v21 = type metadata accessor for UUID(0);
    v22 = *(_QWORD *)(v21 - 8);
    v23 = *(unsigned __int8 *)(v22 + 80);
    v24 = (v23 + 32) & ~v23;
    v25 = swift_allocObject(v20, v24 + *(_QWORD *)(v22 + 72), v23 | 7);
    *(_OWORD *)(v25 + 16) = xmmword_1002888E0;
    v26 = v25 + v24;
    if (qword_100344780 != -1)
      swift_once(&qword_100344780, sub_1001E2370);
    v27 = sub_10009673C(v21, (uint64_t)qword_100354EB8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v26, v27, v21);
    v28 = *(_QWORD *)(v4 + 16);
    v29 = a2 & 1;
    if (v29)
      v30 = 0;
    else
      v30 = v8;
    if (v29)
      v31 = 0;
    else
      v31 = (uint64_t)v12;
    v32 = type metadata accessor for DSKBLE.BLEConnectionRequest();
    swift_allocObject(v32, 184, 7);
    *(_QWORD *)&v52 = sub_10019E90C;
    *((_QWORD *)&v52 + 1) = v4;
    *(_QWORD *)&v51 = sub_10019E908;
    *((_QWORD *)&v51 + 1) = v4;
    *(_QWORD *)&v50 = sub_10019E900;
    *((_QWORD *)&v50 + 1) = v4;
    *(_QWORD *)&v49 = sub_10019E8FC;
    *((_QWORD *)&v49 + 1) = v4;
    *(_QWORD *)&v48 = sub_10019E8E8;
    *((_QWORD *)&v48 + 1) = v4;
    v33 = (uint64_t *)sub_1000BB9A4(a1, 893797958, 0xE400000000000000, v25, v28, v30, v31, v29, 0, v48, v49, v50, v51, v52, (uint64_t)sub_10019E910, v4);
    swift_retain_n(v4, 6);
    swift_retain(a1);
    swift_bridgeObjectRetain(v28);
    sub_1000B0F98(v33, a3 & 1);
    swift_release(v33);
    if ((a3 & 1) != 0)
      sub_1000B725C(v8, (uint64_t)v12, 0, 256, a1);
    swift_release(a1);
    return;
  }
  if (*(_BYTE *)(v4 + 24) == 1)
  {
    v16 = type metadata accessor for AlishaPeer(0);
    v17 = swift_dynamicCastClass(a1, v16);
    if (!v17)
    {
      v38 = swift_retain_n(a1, 2);
      v39 = Logger.logObject.getter(v38);
      v41 = static os_log_type_t.error.getter(v39, v40);
      if (os_log_type_enabled(v39, v41))
      {
        v42 = (uint8_t *)swift_slowAlloc(12, -1);
        v43 = swift_slowAlloc(32, -1);
        *(_DWORD *)v42 = 136315138;
        v55 = v43;
        v44 = swift_retain(a1);
        v45 = UUID.uuidString.getter(v44);
        v47 = v46;
        swift_release(a1);
        v54 = sub_1001C56EC(v45, v47, &v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v42 + 4, v42 + 12);
        swift_release_n(a1, 2);
        swift_bridgeObjectRelease(v47);
        _os_log_impl((void *)&_mh_execute_header, v39, v41, "Failed to cast Peer to AlishaPeer %s", v42, 0xCu);
        swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v43, -1, -1);
        swift_slowDealloc(v42, -1, -1);
      }
      else
      {
        swift_release_n(a1, 2);
      }

      return;
    }
    v18 = *(_QWORD *)(v17 + OBJC_IVAR____TtC10seserviced10AlishaPeer_configuration);
    v8 = *(_QWORD *)(v18 + 96);
    v12 = *(_QWORD **)(v18 + 104);
    v19 = qword_1003445A0;
    swift_retain(a1);
    if (v19 == -1)
      goto LABEL_7;
    goto LABEL_26;
  }
  v34 = Logger.logObject.getter(v15);
  v36 = static os_log_type_t.error.getter(v34, v35);
  if (os_log_type_enabled(v34, v36))
  {
    v37 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v37 = 0;
    _os_log_impl((void *)&_mh_execute_header, v34, v36, "Not running", v37, 2u);
    swift_slowDealloc(v37, -1, -1);
  }

}

void sub_10019CA04(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  os_log_type_t v12;
  uint8_t *v13;
  int64x2_t v14;
  int64x2_t *v15;
  unint64_t v16;
  int64x2_t v17;
  int8x16_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *oslog;

  v2 = v1;
  v3 = a1;
  if ((a1 & 0xC000000000000001) == 0)
  {
    if (!*(_QWORD *)(a1 + 16))
      return;
LABEL_7:
    swift_retain(v1);
    sub_10019E3F4(v3, v1);
    v5 = v4;
    swift_release(v2);
    v6 = *(_QWORD *)(v5 + 16);
    if (!v6)
    {
      v10 = swift_bridgeObjectRelease(v5);
      oslog = Logger.logObject.getter(v10);
      v12 = static os_log_type_t.error.getter(oslog, v11);
      if (os_log_type_enabled(oslog, v12))
      {
        v13 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, oslog, v12, "Failed to get RSSI hint", v13, 2u);
        swift_slowDealloc(v13, -1, -1);
      }

      return;
    }
    v7 = *(_QWORD *)(v5 + 32);
    v8 = v6 - 1;
    if (v6 != 1)
    {
      if (v6 >= 5)
      {
        v9 = v8 & 0xFFFFFFFFFFFFFFFCLL | 1;
        v14 = vdupq_n_s64(v7);
        v15 = (int64x2_t *)(v5 + 56);
        v16 = v8 & 0xFFFFFFFFFFFFFFFCLL;
        v17 = v14;
        do
        {
          v14 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v14, v15[-1]), (int8x16_t)v15[-1], (int8x16_t)v14);
          v17 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v17, *v15), *(int8x16_t *)v15, (int8x16_t)v17);
          v15 += 2;
          v16 -= 4;
        }
        while (v16);
        v18 = vbslq_s8((int8x16_t)vcgtq_s64(v17, v14), (int8x16_t)v14, (int8x16_t)v17);
        v19 = vextq_s8(v18, v18, 8uLL).u64[0];
        v7 = (uint64_t)vbsl_s8((int8x8_t)vcgtd_s64(v19, v18.i64[0]), *(int8x8_t *)v18.i8, (int8x8_t)v19);
        if (v8 == (v8 & 0xFFFFFFFFFFFFFFFCLL))
          goto LABEL_21;
      }
      else
      {
        v9 = 1;
      }
      v20 = v6 - v9;
      v21 = (uint64_t *)(v5 + 8 * v9 + 32);
      do
      {
        v23 = *v21++;
        v22 = v23;
        if (v23 < v7)
          v7 = v22;
        --v20;
      }
      while (v20);
    }
LABEL_21:
    swift_bridgeObjectRelease(v5);
    if (qword_1003445A0 == -1)
    {
      if (v7 >= -128)
        goto LABEL_23;
    }
    else
    {
      swift_once(&qword_1003445A0, sub_1000B26B0);
      if (v7 >= -128)
      {
LABEL_23:
        if (v7 <= 127)
        {
          sub_1000B9494(0, v3, v7);
          return;
        }
LABEL_28:
        __break(1u);
        return;
      }
    }
    __break(1u);
    goto LABEL_28;
  }
  if (a1 >= 0)
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  if (__CocoaSet.count.getter(a1))
    goto LABEL_7;
}

uint64_t sub_10019CC14()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for AlishaBLE(0);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  result = sub_10019CC50();
  qword_100354DA0 = result;
  return result;
}

uint64_t sub_10019CC50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t inited;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  _QWORD aBlock[5];
  uint64_t v18;
  _BYTE v19[176];

  v1 = v0;
  v2 = type metadata accessor for DispatchQoS.QoSClass(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100063D3C((uint64_t *)&unk_100346040);
  inited = swift_initStackObject(v7, v19);
  *(_OWORD *)(inited + 16) = xmmword_100288AC0;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CBConnectPeripheralOptionEnableControllerBTClockUpdates);
  *(_QWORD *)(inited + 40) = v9;
  *(_QWORD *)(inited + 72) = &type metadata for Bool;
  *(_BYTE *)(inited + 48) = 1;
  *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(CBConnectPeripheralOptionSetConnectScanDutyCycle);
  *(_QWORD *)(inited + 88) = v10;
  *(_QWORD *)(inited + 120) = &type metadata for Int;
  *(_QWORD *)(inited + 96) = 6;
  *(_QWORD *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)(CBConnectPeripheralOptionConnectionUseCase);
  *(_QWORD *)(inited + 136) = v11;
  *(_QWORD *)(inited + 168) = &type metadata for Int;
  *(_QWORD *)(inited + 144) = 21;
  *(_QWORD *)(v1 + 16) = sub_10017C218(inited);
  *(_BYTE *)(v1 + 24) = 0;
  v12 = String.init(cString:)(SESLoggingSubsystem);
  Logger.init(subsystem:category:)(v12);
  sub_10006C25C(0, (unint64_t *)&qword_1003461A0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchQoS.QoSClass.default(_:), v2);
  v13 = (void *)static OS_dispatch_queue.global(qos:)(v6);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  aBlock[4] = sub_10019E3D8;
  v18 = v1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10017BF6C;
  aBlock[3] = &unk_10030BD48;
  v14 = _Block_copy(aBlock);
  v15 = v18;
  swift_retain(v1);
  swift_release(v15);
  os_state_add_handler(v13, v14);
  _Block_release(v14);

  return v1;
}

_DWORD *sub_10019CE80()
{
  uint64_t v0;
  char v1;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v3;
  Class isa;
  _DWORD *v5;
  _OWORD v7[2];
  __int128 v8;
  void *v9;

  v1 = *(_BYTE *)(v0 + 24);
  v9 = &type metadata for Bool;
  LOBYTE(v8) = v1;
  sub_10006C2B4(&v8, v7);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_10018DEC0(v7, 0x6E696E6E75527369, 0xE900000000000067, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease(0x8000000000000000);
  v3 = sub_10017D088((uint64_t)&_swiftEmptyDictionarySingleton);
  swift_bridgeObjectRelease(&_swiftEmptyDictionarySingleton);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v3);
  v5 = sub_100015734((uint64_t)"alishable.state", (uint64_t)isa);

  return v5;
}

uint64_t sub_10019CF68(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _QWORD v42[3];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v42[2] = a2;
  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchPredicate(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (_QWORD *)((char *)v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v13 = qword_100354EE8;
  *v12 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8);
  v14 = (id)v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)(v12);
  v15 = (*(uint64_t (**)(_QWORD *, uint64_t))(v9 + 8))(v12, v8);
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_15:
    swift_once(&qword_100344780, sub_1001E2370);
    goto LABEL_7;
  }
  v16 = Logger.logObject.getter(v15);
  v20 = static os_log_type_t.info.getter(v16, v17, v18, v19);
  if (os_log_type_enabled(v16, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v20, "Read characteristics", v21, 2u);
    swift_slowDealloc(v21, -1, -1);
  }

  if (qword_100344780 != -1)
    goto LABEL_15;
LABEL_7:
  v22 = sub_10009673C(v3, (uint64_t)qword_100354EB8);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v22, v3);
  if (*(_QWORD *)(a1 + 16))
  {
    v23 = sub_100187E34((uint64_t)v7);
    if ((v24 & 1) != 0)
    {
      v25 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 16 * v23);
      v26 = v25[1];
      sub_100063C8C(*v25, v26);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
      __asm { BR              X9 }
    }
  }
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  v27 = swift_bridgeObjectRetain_n(a1, 2);
  v28 = Logger.logObject.getter(v27);
  v30 = static os_log_type_t.error.getter(v28, v29);
  if (os_log_type_enabled(v28, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc(12, -1);
    v32 = swift_slowAlloc(32, -1);
    v45 = v32;
    *(_DWORD *)v31 = 136315138;
    v33 = sub_1000639EC((unint64_t *)&unk_100347730, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v34 = swift_bridgeObjectRetain(a1);
    v35 = Dictionary.description.getter(v34, v3, &type metadata for Data, v33);
    v37 = v36;
    swift_bridgeObjectRelease(a1);
    v43 = sub_1001C56EC(v35, v37, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v31 + 4, v31 + 12);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease(v37);
    _os_log_impl((void *)&_mh_execute_header, v28, v30, "PSM characteristic not found %s", v31, 0xCu);
    swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v31, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(a1, 2);
  }

  v38 = sub_10006B828();
  v39 = swift_allocError(&type metadata for DSKError, v38, 0, 0);
  *v40 = 0;
  return swift_willThrow(v39);
}

void sub_10019D5EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD v31[3];
  _BYTE v32[8];
  uint64_t v33;
  uint64_t v34;

  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (_QWORD *)((char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v9 = qword_100354EE8;
  *v8 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  v11 = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  v12 = Logger.logObject.getter(v11);
  v16 = static os_log_type_t.info.getter(v12, v13, v14, v15);
  if (os_log_type_enabled(v12, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v16, "Channel established", v17, 2u);
    swift_slowDealloc(v17, -1, -1);
  }

  if (!a1)
  {
    if (qword_100344680 == -1)
    {
LABEL_10:
      sub_1001731D0(a2);
      return;
    }
LABEL_13:
    swift_once(&qword_100344680, sub_10016E9A8);
    goto LABEL_10;
  }
  swift_errorRetain(a1);
  swift_errorRetain(a1);
  swift_retain(a2);
  swift_errorRetain(a1);
  v18 = swift_retain(a2);
  v19 = Logger.logObject.getter(v18);
  v21 = static os_log_type_t.error.getter(v19, v20);
  if (os_log_type_enabled(v19, v21))
  {
    v22 = swift_slowAlloc(22, -1);
    v23 = swift_slowAlloc(64, -1);
    v34 = v23;
    *(_DWORD *)v22 = 136315394;
    v24 = swift_retain(a2);
    v25 = UUID.uuidString.getter(v24);
    v27 = v26;
    swift_release(a2);
    v33 = sub_1001C56EC(v25, v27, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v22 + 4, v22 + 12);
    swift_release_n(a2, 2);
    swift_bridgeObjectRelease(v27);
    *(_WORD *)(v22 + 12) = 2080;
    swift_getErrorValue(a1, v32, v31);
    v28 = Error.localizedDescription.getter(v31[1], v31[2]);
    v30 = v29;
    v33 = sub_1001C56EC(v28, v29, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v22 + 14, v22 + 22);
    swift_bridgeObjectRelease(v30);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v19, v21, "Error during connection attempt to %s %s", (uint8_t *)v22, 0x16u);
    swift_arrayDestroy(v23, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v22, -1, -1);
    swift_errorRelease(a1);

  }
  else
  {
    swift_errorRelease(a1);
    swift_release_n(a2, 2);

    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }
}

void sub_10019D980(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_QWORD *, uint64_t, uint64_t);
  id v14;
  void (*v15)(_QWORD *, uint64_t);
  uint64_t v16;
  void *v17;
  id v18;
  char v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;

  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (uint64_t *)((char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v11 = qword_100354EE8;
  *v10 = qword_100354EE8;
  v12 = enum case for DispatchPredicate.onQueue(_:);
  v13 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v7 + 104);
  v13(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  v14 = (id)v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v10);
  v15 = *(void (**)(_QWORD *, uint64_t))(v7 + 8);
  v15(v10, v6);
  if ((v11 & 1) != 0)
  {
    if (qword_100344680 == -1)
      goto LABEL_5;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100344680, sub_10016E9A8);
LABEL_5:
  v16 = qword_100354D60;
  v17 = (void *)qword_100354EE8;
  *v10 = qword_100354EE8;
  v13(v10, v12, v6);
  v18 = v17;
  v19 = _dispatchPreconditionTest(_:)(v10);
  v20 = ((uint64_t (*)(_QWORD *, uint64_t))v15)(v10, v6);
  if ((v19 & 1) != 0)
  {
    if (*(_BYTE *)(v16 + 16) == 1)
    {
      swift_retain(v16);
      sub_100178E04(a1, a2, 1, a3, v16, v16);
      swift_release(v16);
    }
    else
    {
      v21 = Logger.logObject.getter(v20);
      v23 = static os_log_type_t.error.getter(v21, v22);
      if (os_log_type_enabled(v21, v23))
      {
        v24 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v24 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v23, "Not running", v24, 2u);
        swift_slowDealloc(v24, -1, -1);
      }

    }
  }
  else
  {
    __break(1u);
  }
}

void sub_10019DBA0(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;

  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (uint64_t *)((char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v7 = qword_100354EE8;
  *v6 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  v9 = (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    swift_once(&qword_100344680, sub_10016E9A8);
    goto LABEL_7;
  }
  v10 = Logger.logObject.getter(v9);
  v14 = static os_log_type_t.info.getter(v10, v11, v12, v13);
  if (os_log_type_enabled(v10, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v14, "Disconnected", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }

  if (qword_100344680 != -1)
    goto LABEL_9;
LABEL_7:
  sub_100173580(a1);
}

void sub_10019DD30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  id v12;
  char v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v26 = a2;
  v27 = a3;
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (uint64_t *)((char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v11 = (void *)qword_100354EE8;
  *v10 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  v12 = v11;
  v13 = _dispatchPreconditionTest(_:)(v10);
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v10, v6);
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_10:
    swift_once(&qword_1003446C8, sub_1001A0A18);
    goto LABEL_8;
  }
  v14 = swift_retain_n(a4, 2);
  v15 = Logger.logObject.getter(v14);
  v19 = static os_log_type_t.info.getter(v15, v16, v17, v18);
  if (os_log_type_enabled(v15, v19))
  {
    v20 = swift_slowAlloc(42, -1);
    v21 = swift_slowAlloc(32, -1);
    v28 = a1;
    v29 = v21;
    *(_DWORD *)v20 = 134218754;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v20 + 4, v20 + 12);
    *(_WORD *)(v20 + 12) = 2048;
    v28 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v20 + 14, v20 + 22);
    *(_WORD *)(v20 + 22) = 2048;
    v28 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v20 + 24, v20 + 32);
    *(_WORD *)(v20 + 32) = 2080;
    v22 = swift_retain(a4);
    v23 = UUID.uuidString.getter(v22);
    v25 = v24;
    swift_release(a4);
    v28 = sub_1001C56EC(v23, v25, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v20 + 34, v20 + 42);
    swift_release_n(a4, 2);
    swift_bridgeObjectRelease(v25);
    _os_log_impl((void *)&_mh_execute_header, v15, v19, "Time sync event type %ld ticks %llu counter %llu peer %s", (uint8_t *)v20, 0x2Au);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v20, -1, -1);
  }
  else
  {
    swift_release_n(a4, 2);
  }

  if (qword_1003446C8 != -1)
    goto LABEL_10;
LABEL_8:
  sub_10019EB9C(a1, v26, v27, a4);
}

void sub_10019E018(char a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;

  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (uint64_t *)((char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v9 = qword_100354EE8;
  *v8 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  v11 = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_18:
    swift_once(&qword_100344680, sub_10016E9A8);
    goto LABEL_10;
  }
  if (*(_BYTE *)(a2 + OBJC_IVAR____TtC10seserviced4Peer_pairingState) != 2)
    return;
  if ((a1 & 1) == 0)
  {
    sub_10019B2F8(a2);
    if (qword_1003446C8 != -1)
      swift_once(&qword_1003446C8, sub_1001A0A18);
    sub_10019F204(0, a2);
    return;
  }
  v12 = Logger.logObject.getter(v11);
  v16 = static os_log_type_t.info.getter(v12, v13, v14, v15);
  if (os_log_type_enabled(v12, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v16, "Sending RANGING_SESSION_NOT_REQUIRED", v17, 2u);
    swift_slowDealloc(v17, -1, -1);
  }

  if (qword_100344680 != -1)
    goto LABEL_18;
LABEL_10:
  v18 = sub_10007C66C((uint64_t)&off_100305FD0);
  v20 = v19;
  sub_100176C18(3, 17, v18, v19);
  v22 = v21;
  v24 = v23;
  sub_100063CD0(v18, v20);
  if (qword_1003445A0 != -1)
    swift_once(&qword_1003445A0, sub_1000B26B0);
  sub_1000ADCAC(v22, v24, a2);
  sub_100063CD0(v22, v24);
}

uint64_t sub_10019E2B8()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_bridgeObjectRelease(v0[2]);
  v1 = (char *)v0 + OBJC_IVAR____TtC10seserviced9AlishaBLE_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_10019E310()
{
  return type metadata accessor for AlishaBLE(0);
}

uint64_t type metadata accessor for AlishaBLE(uint64_t a1)
{
  uint64_t result;

  result = qword_100348C30;
  if (!qword_100348C30)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AlishaBLE);
  return result;
}

uint64_t sub_10019E354(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = &unk_10028BDA8;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_10019E3DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10019E3EC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_10019E3F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD v52[5];
  uint64_t v53;

  v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v4 = a1;
    else
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v5 = __CocoaSet.makeIterator()(v4);
    v6 = type metadata accessor for Peer(0);
    v7 = sub_1000639EC((unint64_t *)&qword_100347720, type metadata accessor for Peer, (uint64_t)&unk_10028BFA8);
    isUniquelyReferenced_nonNull_native = (uint64_t)Set.Iterator.init(_cocoa:)(v52, v5, v6, v7);
    v3 = v52[0];
    v48 = v52[1];
    v9 = v52[2];
    v10 = v52[3];
    v11 = v52[4];
  }
  else
  {
    v12 = -1 << *(_BYTE *)(a1 + 32);
    v48 = a1 + 56;
    v9 = ~v12;
    v13 = -v12;
    if (v13 < 64)
      v14 = ~(-1 << v13);
    else
      v14 = -1;
    v11 = v14 & *(_QWORD *)(a1 + 56);
    isUniquelyReferenced_nonNull_native = swift_bridgeObjectRetain(a1);
    v10 = 0;
  }
  v46 = _swiftEmptyArrayStorage;
  v47 = (unint64_t)(v9 + 64) >> 6;
  while (v3 < 0)
  {
    v18 = __CocoaSet.Iterator.next()(isUniquelyReferenced_nonNull_native);
    if (!v18)
      goto LABEL_43;
    v19 = v18;
    v51 = v18;
    v20 = type metadata accessor for Peer(0);
    swift_unknownObjectRetain(v19);
    swift_dynamicCast(&v53, &v51, (char *)&type metadata for Swift.AnyObject + 8, v20, 7);
    v21 = v53;
    swift_unknownObjectRelease(v19);
    v17 = v10;
    v15 = v11;
    if (!v21)
      goto LABEL_43;
LABEL_35:
    v25 = type metadata accessor for AlishaPeer(0);
    v26 = swift_dynamicCastClass(v21, v25);
    if (v26)
    {
      v10 = v17;
      v41 = v3;
      v42 = *(_QWORD *)(*(_QWORD *)(v26 + OBJC_IVAR____TtC10seserviced10AlishaPeer_configuration) + 104);
      swift_release(v21);
      v43 = v46;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v46);
      v11 = v15;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        isUniquelyReferenced_nonNull_native = (uint64_t)sub_1001C4360(0, v46[2] + 1, 1, v46);
        v43 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      }
      v45 = v43[2];
      v44 = v43[3];
      if (v45 >= v44 >> 1)
      {
        isUniquelyReferenced_nonNull_native = (uint64_t)sub_1001C4360((_QWORD *)(v44 > 1), v45 + 1, 1, v43);
        v43 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      }
      v43[2] = v45 + 1;
      v46 = v43;
      v43[v45 + 4] = v42;
      v3 = v41;
    }
    else
    {
      v27 = swift_retain_n(v21, 2);
      v28 = Logger.logObject.getter(v27);
      v30 = static os_log_type_t.error.getter(v28, v29);
      if (os_log_type_enabled(v28, v30))
      {
        v31 = swift_slowAlloc(12, -1);
        v50 = v15;
        v32 = swift_slowAlloc(32, -1);
        v53 = v32;
        *(_DWORD *)v31 = 136315138;
        v49 = v17;
        v33 = a2;
        v34 = v3;
        v35 = type metadata accessor for UUID(0);
        v36 = sub_1000639EC((unint64_t *)&qword_100344CC8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v37 = dispatch thunk of CustomStringConvertible.description.getter(v35, v36);
        v39 = v38;
        *(_QWORD *)(v31 + 4) = sub_1001C56EC(v37, v38, &v53);
        swift_release_n(v21, 2);
        v40 = v39;
        v3 = v34;
        a2 = v33;
        swift_bridgeObjectRelease(v40);
        _os_log_impl((void *)&_mh_execute_header, v28, v30, "Failed to cast Peer to AlishaPeer %s", (uint8_t *)v31, 0xCu);
        swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v32, -1, -1);
        swift_slowDealloc(v31, -1, -1);
        swift_release(v21);

        v10 = v49;
        v11 = v50;
      }
      else
      {
        swift_release_n(v21, 3);

        v10 = v17;
        v11 = v15;
      }
    }
  }
  if (v11)
  {
    v15 = (v11 - 1) & v11;
    v16 = __clz(__rbit64(v11)) | (v10 << 6);
    v17 = v10;
LABEL_34:
    v21 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
    swift_retain(v21);
    if (!v21)
      goto LABEL_43;
    goto LABEL_35;
  }
  v22 = v10 + 1;
  if (!__OFADD__(v10, 1))
  {
    if (v22 >= v47)
      goto LABEL_43;
    v23 = *(_QWORD *)(v48 + 8 * v22);
    v17 = v10 + 1;
    if (!v23)
    {
      v17 = v10 + 2;
      if (v10 + 2 >= v47)
        goto LABEL_43;
      v23 = *(_QWORD *)(v48 + 8 * v17);
      if (!v23)
      {
        v17 = v10 + 3;
        if (v10 + 3 >= v47)
          goto LABEL_43;
        v23 = *(_QWORD *)(v48 + 8 * v17);
        if (!v23)
        {
          v17 = v10 + 4;
          if (v10 + 4 >= v47)
            goto LABEL_43;
          v23 = *(_QWORD *)(v48 + 8 * v17);
          if (!v23)
          {
            v17 = v10 + 5;
            if (v10 + 5 >= v47)
              goto LABEL_43;
            v23 = *(_QWORD *)(v48 + 8 * v17);
            if (!v23)
            {
              v24 = v10 + 6;
              while (v47 != v24)
              {
                v23 = *(_QWORD *)(v48 + 8 * v24++);
                if (v23)
                {
                  v17 = v24 - 1;
                  goto LABEL_33;
                }
              }
LABEL_43:
              sub_10007EF58(v3);
              return;
            }
          }
        }
      }
    }
LABEL_33:
    v15 = (v23 - 1) & v23;
    v16 = __clz(__rbit64(v23)) + (v17 << 6);
    goto LABEL_34;
  }
  __break(1u);
}

uint64_t sub_10019E8E8(uint64_t a1, uint64_t a2)
{
  return sub_10019CF68(a1, a2);
}

void sub_10019E900(uint64_t a1, unint64_t a2, uint64_t a3)
{
  sub_10019D980(a1, a2, a3);
}

void sub_10019E910(char a1, uint64_t a2)
{
  sub_10019E018(a1 & 1, a2);
}

void sub_10019E918(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[5];
  void *v27;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = type metadata accessor for UWBSession();
    v5 = sub_1001A2CE4();
    v6 = Set.Iterator.init(_cocoa:)(v26, v3, v4, v5);
    v1 = v26[0];
    v24 = v26[1];
    v7 = v26[2];
    v8 = v26[3];
    v9 = v26[4];
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v24 = a1 + 56;
    v7 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v9 = v12 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v8 = 0;
  }
  v13 = (unint64_t)(v7 + 64) >> 6;
  if (v1 < 0)
    goto LABEL_13;
  while (1)
  {
    if (v9)
    {
      v14 = (v9 - 1) & v9;
      v15 = __clz(__rbit64(v9)) | (v8 << 6);
      v16 = v8;
      goto LABEL_32;
    }
    v21 = v8 + 1;
    if (__OFADD__(v8, 1))
      break;
    if (v21 >= v13)
      goto LABEL_35;
    v22 = *(_QWORD *)(v24 + 8 * v21);
    v16 = v8 + 1;
    if (!v22)
    {
      v16 = v8 + 2;
      if (v8 + 2 >= v13)
        goto LABEL_35;
      v22 = *(_QWORD *)(v24 + 8 * v16);
      if (!v22)
      {
        v16 = v8 + 3;
        if (v8 + 3 >= v13)
          goto LABEL_35;
        v22 = *(_QWORD *)(v24 + 8 * v16);
        if (!v22)
        {
          v16 = v8 + 4;
          if (v8 + 4 >= v13)
            goto LABEL_35;
          v22 = *(_QWORD *)(v24 + 8 * v16);
          if (!v22)
          {
            v16 = v8 + 5;
            if (v8 + 5 >= v13)
              goto LABEL_35;
            v22 = *(_QWORD *)(v24 + 8 * v16);
            if (!v22)
            {
              v23 = v8 + 6;
              while (v13 != v23)
              {
                v22 = *(_QWORD *)(v24 + 8 * v23++);
                if (v22)
                {
                  v16 = v23 - 1;
                  goto LABEL_31;
                }
              }
LABEL_35:
              sub_10007EF58(v1);
              return;
            }
          }
        }
      }
    }
LABEL_31:
    v14 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v16 << 6);
LABEL_32:
    v20 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v15);
    if (!v20)
      goto LABEL_35;
    while (1)
    {
      sub_100184FC8();

      v8 = v16;
      v9 = v14;
      if ((v1 & 0x8000000000000000) == 0)
        break;
LABEL_13:
      v17 = __CocoaSet.Iterator.next()(v6);
      if (v17)
      {
        v18 = v17;
        v25 = v17;
        v19 = type metadata accessor for UWBSession();
        swift_unknownObjectRetain(v18);
        swift_dynamicCast(&v27, &v25, (char *)&type metadata for Swift.AnyObject + 8, v19, 7);
        v20 = v27;
        swift_unknownObjectRelease(v18);
        v16 = v8;
        v14 = v9;
        if (v20)
          continue;
      }
      goto LABEL_35;
    }
  }
  __break(1u);
}

void sub_10019EB9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  _QWORD *v18;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[24];

  v5 = v4;
  v10 = type metadata accessor for DispatchPredicate(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = &v22[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v15 = qword_100354EE8;
  *v14 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v10);
  v16 = (id)v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)(v14);
  (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v14, v10);
  if ((v15 & 1) != 0)
  {
    v17 = a4 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
    v18 = (_QWORD *)(v5 + OBJC_IVAR____TtC10seserviced9AlishaUWB_pendingTimeSyncEvents);
    swift_beginAccess(v5 + OBJC_IVAR____TtC10seserviced9AlishaUWB_pendingTimeSyncEvents, v22, 33, 0);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v18);
    v21 = *v18;
    *v18 = 0x8000000000000000;
    sub_10018DD50(a1, a2, a3, v17, isUniquelyReferenced_nonNull_native);
    v20 = *v18;
    *v18 = v21;
    swift_bridgeObjectRelease(v20);
    swift_endAccess(v22);
    sub_10019ED28(a4);
  }
  else
  {
    __break(1u);
  }
}

void sub_10019ED28(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  os_log_type_t v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  NSObject *v38;
  uint64_t v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54[3];

  v5 = v1;
  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (uint64_t *)((char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v12 = (void *)qword_100354EE8;
  *v11 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v7);
  v13 = v12;
  v14 = _dispatchPreconditionTest(_:)(v11);
  (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(v11, v7);
  if ((v14 & 1) == 0)
  {
    __break(1u);
LABEL_20:
    swift_once(&qword_100344690, sub_100182BE4);
    goto LABEL_7;
  }
  v14 = v5 + OBJC_IVAR____TtC10seserviced9AlishaUWB_pendingTimeSyncEvents;
  swift_beginAccess(v5 + OBJC_IVAR____TtC10seserviced9AlishaUWB_pendingTimeSyncEvents, v54, 32, 0);
  v15 = *(_QWORD *)v14;
  if (!*(_QWORD *)(*(_QWORD *)v14 + 16)
    || (v11 = (_QWORD *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier),
        v16 = sub_100187E34(a1 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier),
        (v17 & 1) == 0))
  {
    swift_endAccess(v54);
    return;
  }
  v18 = (uint64_t *)(*(_QWORD *)(v15 + 56) + 24 * v16);
  v2 = *v18;
  v3 = v18[1];
  v4 = v18[2];
  swift_endAccess(v54);
  if (qword_100344690 != -1)
    goto LABEL_20;
LABEL_7:
  v19 = qword_100354D70;
  swift_retain(a1);
  v20 = sub_100196F9C(v19, a1);
  swift_release(a1);
  v21 = (void *)sub_10009F62C(v20);
  swift_bridgeObjectRelease(v20);
  if (v21)
  {
    if (*((_BYTE *)v21 + OBJC_IVAR____TtC10seserviced10UWBSession_state) == 4)
    {
      v22 = swift_retain_n(a1, 2);
      v23 = Logger.logObject.getter(v22);
      v27 = static os_log_type_t.info.getter(v23, v24, v25, v26);
      if (os_log_type_enabled(v23, v27))
      {
        v28 = swift_slowAlloc(12, -1);
        v51 = v3;
        v29 = (uint8_t *)v28;
        v49 = swift_slowAlloc(32, -1);
        v54[0] = v49;
        v50 = v4;
        *(_DWORD *)v29 = 136315138;
        v48 = v29 + 4;
        v30 = swift_retain(a1);
        v31 = UUID.uuidString.getter(v30);
        v52 = v2;
        v33 = v32;
        swift_release(a1);
        v53 = sub_1001C56EC(v31, v33, v54);
        v4 = v50;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54, v48, v29 + 12);
        swift_release_n(a1, 2);
        v34 = v33;
        v2 = v52;
        swift_bridgeObjectRelease(v34);
        _os_log_impl((void *)&_mh_execute_header, v23, v27, "Processing time sync event for %s", v29, 0xCu);
        v35 = v49;
        swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v35, -1, -1);
        v36 = v29;
        v3 = v51;
        swift_slowDealloc(v36, -1, -1);
      }
      else
      {
        swift_release_n(a1, 2);
      }

      sub_100184DF4(v2, v3, v4);
      swift_beginAccess(v14, v54, 33, 0);
      sub_10012E5FC((uint64_t)v11);
      swift_endAccess(v54);

      return;
    }

  }
  v37 = swift_retain_n(a1, 2);
  v38 = Logger.logObject.getter(v37);
  v40 = static os_log_type_t.error.getter(v38, v39);
  if (os_log_type_enabled(v38, v40))
  {
    v41 = (uint8_t *)swift_slowAlloc(12, -1);
    v42 = swift_slowAlloc(32, -1);
    v54[0] = v42;
    *(_DWORD *)v41 = 136315138;
    v43 = swift_retain(a1);
    v44 = UUID.uuidString.getter(v43);
    v46 = v45;
    swift_release(a1);
    v53 = sub_1001C56EC(v44, v46, v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54, v41 + 4, v41 + 12);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease(v46);
    _os_log_impl((void *)&_mh_execute_header, v38, v40, "No active UWB Alisha session for %s", v41, 0xCu);
    swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    swift_slowDealloc(v41, -1, -1);
  }
  else
  {
    swift_release_n(a1, 2);
  }

}

void sub_10019F204(char a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (uint64_t *)((char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v9 = qword_100354EE8;
  *v8 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) != 0)
  {
    if (qword_100344690 == -1)
      goto LABEL_5;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100344690, sub_100182BE4);
LABEL_5:
  v11 = qword_100354D70;
  swift_retain(a2);
  v12 = sub_100196F9C(v11, a2);
  swift_release(a2);
  v13 = (void *)sub_10009F62C(v12);
  swift_bridgeObjectRelease(v12);
  if (v13)
  {
    v14 = type metadata accessor for UWBAlishaSession();
    if (swift_dynamicCastClass(v13, v14))
    {
      sub_100185F24(a1);

      return;
    }

  }
  v15 = swift_retain_n(a2, 2);
  v16 = Logger.logObject.getter(v15);
  v18 = static os_log_type_t.error.getter(v16, v17);
  if (os_log_type_enabled(v16, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(12, -1);
    v20 = swift_slowAlloc(32, -1);
    *(_DWORD *)v19 = 136315138;
    v26 = v20;
    v21 = swift_retain(a2);
    v22 = UUID.uuidString.getter(v21);
    v24 = v23;
    swift_release(a2);
    v25 = sub_1001C56EC(v22, v24, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v19 + 4, v19 + 12);
    swift_release_n(a2, 2);
    swift_bridgeObjectRelease(v24);
    _os_log_impl((void *)&_mh_execute_header, v16, v18, "No active UWB Alisha session for %s", v19, 0xCu);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v19, -1, -1);
  }
  else
  {
    swift_release_n(a2, 2);
  }

}

void sub_10019F4E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  os_unfair_lock_s *v23;
  os_unfair_lock_s *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  os_unfair_lock_s *v31;
  os_unfair_lock_s *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD v36[2];
  uint64_t v37;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (_QWORD *)((char *)v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v7 = qword_100354EE8;
  *v6 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  v9 = (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_30:
    v20 = swift_once(&qword_1003445B8, sub_1000EAA4C);
    goto LABEL_11;
  }
  v10 = *(_BYTE *)(v1 + 16);
  v11 = Logger.logObject.getter(v9);
  v15 = v11;
  if ((v10 & 1) != 0)
  {
    v16 = static os_log_type_t.error.getter(v11, v12);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "AlishaUWB is already running", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }

    return;
  }
  v18 = static os_log_type_t.info.getter(v11, v12, v13, v14);
  if (os_log_type_enabled(v15, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v18, "Starting AlishaUWB", v19, 2u);
    swift_slowDealloc(v19, -1, -1);
  }

  *(_BYTE *)(v1 + 16) = 1;
  if (qword_1003445B8 != -1)
    goto LABEL_30;
LABEL_11:
  __chkstk_darwin(v20, v21);
  *(_QWORD *)&v36[-2] = sub_10008ECD0;
  *((_QWORD *)&v36[-2] + 1) = 0;
  *(_QWORD *)&v36[-1] = v22;
  v24 = v23 + 4;
  os_unfair_lock_lock(v23 + 4);
  sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_10007EFBC, v36);
  os_unfair_lock_unlock(v24);
  v25 = *(_QWORD *)&v36[0];
  if ((*(_QWORD *)&v36[0] & 0xC000000000000001) != 0)
  {
    if (*(uint64_t *)&v36[0] < 0)
      v26 = *(_QWORD *)&v36[0];
    else
      v26 = *(_QWORD *)&v36[0] & 0xFFFFFFFFFFFFFF8;
    v27 = __CocoaSet.count.getter(v26);
  }
  else
  {
    v27 = *(_QWORD *)(*(_QWORD *)&v36[0] + 16);
  }
  v28 = swift_bridgeObjectRelease(v25);
  if (v27)
    goto LABEL_25;
  __chkstk_darwin(v28, v29);
  *(_QWORD *)&v36[-2] = sub_10008ED74;
  *((_QWORD *)&v36[-2] + 1) = 0;
  *(_QWORD *)&v36[-1] = v30;
  v32 = v31 + 4;
  os_unfair_lock_lock(v31 + 4);
  sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_100096F14, v36);
  os_unfair_lock_unlock(v32);
  v33 = *(_QWORD *)&v36[0];
  if ((*(_QWORD *)&v36[0] & 0xC000000000000001) != 0)
  {
    v34 = *(uint64_t *)&v36[0] < 0 ? *(_QWORD *)&v36[0] : *(_QWORD *)&v36[0] & 0xFFFFFFFFFFFFFF8;
    v35 = __CocoaSet.count.getter(v34);
  }
  else
  {
    v35 = *(_QWORD *)(*(_QWORD *)&v36[0] + 16);
  }
  swift_bridgeObjectRelease(v33);
  if (v35)
  {
LABEL_25:
    if (qword_100344690 != -1)
      swift_once(&qword_100344690, sub_100182BE4);
    v37 = 0;
    memset(v36, 0, sizeof(v36));
    sub_10017FAB4(0, (uint64_t)v36);
    sub_1000AC14C((uint64_t)v36);
  }
}

void sub_10019F86C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  void *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  os_log_type_t v23;
  uint8_t *v24;
  _BYTE v26[24];
  _BYTE v27[32];

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = &v26[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v7 = qword_100354EE8;
  *v6 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  v9 = (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_13:
    swift_once(&qword_100344690, sub_100182BE4);
LABEL_8:
    v18 = sub_10017FEEC(qword_100354D70);
    sub_10019E918((uint64_t)v18);
    swift_bridgeObjectRelease(v18);
    v19 = (uint64_t *)(v1 + OBJC_IVAR____TtC10seserviced9AlishaUWB_rangingPeers);
    swift_beginAccess(v1 + OBJC_IVAR____TtC10seserviced9AlishaUWB_rangingPeers, v27, 1, 0);
    v20 = *v19;
    *v19 = (uint64_t)&_swiftEmptySetSingleton;
    swift_bridgeObjectRelease(v20);
    v21 = (uint64_t *)(v1 + OBJC_IVAR____TtC10seserviced9AlishaUWB_pendingTimeSyncEvents);
    swift_beginAccess(v1 + OBJC_IVAR____TtC10seserviced9AlishaUWB_pendingTimeSyncEvents, v26, 1, 0);
    v22 = *v21;
    *v21 = (uint64_t)&_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease(v22);
    sub_100180268(0);
    *(_BYTE *)(v1 + 16) = 0;
    return;
  }
  v10 = *(unsigned __int8 *)(v1 + 16);
  v11 = Logger.logObject.getter(v9);
  v15 = v11;
  if (v10 == 1)
  {
    v16 = static os_log_type_t.info.getter(v11, v12, v13, v14);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Stopping AlishaUWB", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }

    if (qword_100344690 == -1)
      goto LABEL_8;
    goto LABEL_13;
  }
  v23 = static os_log_type_t.error.getter(v11, v12);
  if (os_log_type_enabled(v15, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v23, "AlishaUWB is not running", v24, 2u);
    swift_slowDealloc(v24, -1, -1);
  }

}

void sub_10019FAFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  NSObject *v43;
  uint64_t v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSString v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;

  v9 = v8;
  v74 = a8;
  v72 = a5;
  v73 = a7;
  v70 = a3;
  v71 = a6;
  v69 = a2;
  v12 = sub_100063D3C((uint64_t *)&unk_1003465E0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12, v15);
  v16 = (char *)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DispatchPredicate(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17, v19);
  v21 = (uint64_t *)((char *)&v68 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v22 = qword_100354EE8;
  *v21 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v18 + 104))(v21, enum case for DispatchPredicate.onQueue(_:), v17);
  v23 = (id)v22;
  LOBYTE(v22) = _dispatchPreconditionTest(_:)(v21);
  (*(void (**)(_QWORD *, uint64_t))(v18 + 8))(v21, v17);
  if ((v22 & 1) != 0)
  {
    if (qword_100344690 == -1)
      goto LABEL_5;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100344690, sub_100182BE4);
LABEL_5:
  v24 = qword_100354D70;
  swift_retain(a4);
  v25 = sub_100196F9C(v24, a4);
  swift_release(a4);
  v26 = (void *)sub_10009F62C(v25);
  swift_bridgeObjectRelease(v25);
  if (!v26)
  {
LABEL_16:
    v42 = swift_retain_n(a4, 2);
    v43 = Logger.logObject.getter(v42);
    v45 = static os_log_type_t.error.getter(v43, v44);
    if (os_log_type_enabled(v43, v45))
    {
      v46 = (uint8_t *)swift_slowAlloc(12, -1);
      v47 = swift_slowAlloc(32, -1);
      *(_DWORD *)v46 = 136315138;
      v76 = v47;
      v48 = swift_retain(a4);
      v49 = UUID.uuidString.getter(v48);
      v51 = v50;
      swift_release(a4);
      v75 = sub_1001C56EC(v49, v51, &v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v46 + 4, v46 + 12);
      swift_release_n(a4, 2);
      swift_bridgeObjectRelease(v51);
      _os_log_impl((void *)&_mh_execute_header, v43, v45, "No active UWB Alisha session for %s", v46, 0xCu);
      swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v47, -1, -1);
      swift_slowDealloc(v46, -1, -1);
    }
    else
    {
      swift_release_n(a4, 2);
    }

    return;
  }
  v27 = type metadata accessor for UWBAlishaSession();
  v28 = swift_dynamicCastClass(v26, v27);
  if (!v28)
  {

    goto LABEL_16;
  }
  if (*(unsigned __int8 *)(v28 + OBJC_IVAR____TtC10seserviced10UWBSession_state) - 5 < 2)
  {
    v29 = Logger.logObject.getter(v28);
    v33 = static os_log_type_t.info.getter(v29, v30, v31, v32);
    if (os_log_type_enabled(v29, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v33, "Command temporarily blocked because the UWB session is suspended", v34, 2u);
      swift_slowDealloc(v34, -1, -1);
    }

    if (qword_100344680 != -1)
      swift_once(&qword_100344680, sub_10016E9A8);
    v35 = sub_10007C66C((uint64_t)&off_100305458);
    v37 = v36;
    sub_100176C18(3, 17, v35, v36);
    v39 = v38;
    v41 = v40;
    sub_100063CD0(v35, v37);
    if (qword_1003445A0 != -1)
      swift_once(&qword_1003445A0, sub_1000B26B0);
    sub_1000ADCAC(v39, v41, a4);

    sub_100063CD0(v39, v41);
    return;
  }
  if (a1 == 18 || a1 == 9)
  {
    v68 = objc_opt_self(SESDAnalyticsLogger);
    UUID.uuidString.getter(v68);
    v58 = v57;
    v54 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v58);
    v55 = v68;
    v56 = 3;
    goto LABEL_25;
  }
  if (a1 == 3)
  {
    v68 = objc_opt_self(SESDAnalyticsLogger);
    UUID.uuidString.getter(v68);
    v53 = v52;
    v54 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v53);
    v55 = v68;
    v56 = 2;
LABEL_25:
    sub_100048C5C(v55, v56, v54);

  }
  if (qword_100344680 != -1)
    swift_once(&qword_100344680, sub_10016E9A8);
  sub_100176C18(2, a1, v69, v70);
  v60 = v59;
  v62 = v61;
  sub_10013EA8C(v71, (uint64_t)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v63 = *(unsigned __int8 *)(v13 + 80);
  v64 = (v63 + 40) & ~v63;
  v65 = (v14 + v64 + 7) & 0xFFFFFFFFFFFFFFF8;
  v66 = (_QWORD *)swift_allocObject(&unk_10030BE20, v65 + 9, v63 | 7);
  v66[2] = v9;
  v66[3] = a4;
  v66[4] = v72;
  sub_1001A308C((uint64_t)v16, (uint64_t)v66 + v64);
  v67 = (char *)v66 + v65;
  *(_QWORD *)v67 = v73;
  v67[8] = v74 & 1;
  swift_retain(a4);
  swift_retain(v9);
  sub_100180788(v60, v62, (uint64_t)sub_1001A30D4, (uint64_t)v66);

  sub_100063CD0(v60, v62);
  swift_release(v66);
}

void sub_1001A0114(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(_QWORD *, uint64_t, uint64_t);
  id v11;
  uint64_t (*v12)(_QWORD *, uint64_t);
  uint64_t v13;
  void *v14;
  id v15;
  char v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  os_log_type_t v20;
  uint8_t *v21;
  _BYTE v23[24];

  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = &v23[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v8 = qword_100354EE8;
  *v7 = qword_100354EE8;
  v9 = enum case for DispatchPredicate.onQueue(_:);
  v10 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v4 + 104);
  v10(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  v11 = (id)v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  v12 = *(uint64_t (**)(_QWORD *, uint64_t))(v4 + 8);
  v13 = v12(v7, v3);
  if ((v8 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    return;
  }
  if (*(_BYTE *)(v1 + 16) == 1)
  {
    v14 = (void *)qword_100354EE8;
    *v7 = qword_100354EE8;
    v10(v7, v9, v3);
    v15 = v14;
    v16 = _dispatchPreconditionTest(_:)(v7);
    v12(v7, v3);
    if ((v16 & 1) != 0)
    {
      v17 = a1 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
      swift_beginAccess(v1 + OBJC_IVAR____TtC10seserviced9AlishaUWB_pendingTimeSyncEvents, v23, 33, 0);
      sub_10012E5FC(v17);
      swift_endAccess(v23);
      return;
    }
    goto LABEL_11;
  }
  v18 = Logger.logObject.getter(v13);
  v20 = static os_log_type_t.error.getter(v18, v19);
  if (os_log_type_enabled(v18, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v20, "Not running", v21, 2u);
    swift_slowDealloc(v21, -1, -1);
  }

}

void sub_1001A0310(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (uint64_t *)((char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v9 = qword_100354EE8;
  *v8 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) != 0)
  {
    if (qword_100344690 == -1)
      goto LABEL_5;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100344690, sub_100182BE4);
LABEL_5:
  v11 = qword_100354D70;
  swift_retain(a1);
  v12 = sub_100196F9C(v11, a1);
  swift_release(a1);
  v13 = (void *)sub_10009F62C(v12);
  swift_bridgeObjectRelease(v12);
  if (v13)
  {
    v14 = type metadata accessor for UWBAlishaSession();
    if (swift_dynamicCastClass(v13, v14))
    {
      swift_retain_n(v2, 6);
      sub_100185900(a1, (uint64_t)sub_1001A2D2C, v2, (uint64_t)sub_1001A2D30, v2, (uint64_t)sub_1001A2D34, v2, (uint64_t)sub_1001A2D38, v2, (uint64_t)sub_1001A2D40, v2, (uint64_t)sub_1001A2D44, v2);
      swift_release_n(v2, 6);
    }

  }
}

void sub_1001A0504(NSObject *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  NSObject *v25;
  uint64_t v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (uint64_t *)((char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v9 = qword_100354EE8;
  *v8 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  v11 = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_16:
    swift_once(&qword_100344690, sub_100182BE4);
    goto LABEL_6;
  }
  if (*(_BYTE *)(v2 + 16) != 1)
  {
    v25 = Logger.logObject.getter(v11);
    v27 = static os_log_type_t.error.getter(v25, v26);
    if (os_log_type_enabled(v25, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v27, "Not running", v28, 2u);
      swift_slowDealloc(v28, -1, -1);
    }
    goto LABEL_14;
  }
  if (qword_100344690 != -1)
    goto LABEL_16;
LABEL_6:
  v12 = qword_100354D70;
  swift_retain(a1);
  LOBYTE(v12) = sub_10019765C(v12, a1);
  swift_release(a1);
  if ((v12 & 1) == 0)
  {
    swift_retain_n(v2, 6);
    v25 = sub_100180A00(a1, (uint64_t)sub_1001A3160, v2, (uint64_t)sub_1001A3168, v2, (uint64_t)sub_1001A3164, v2, (uint64_t)sub_1001A316C, v2, (uint64_t)sub_1001A3184, v2, (uint64_t)sub_1001A3170, v2);
    swift_release_n(v2, 6);
LABEL_14:

    return;
  }
  v13 = swift_retain_n(a1, 2);
  v14 = Logger.logObject.getter(v13);
  v18 = static os_log_type_t.info.getter(v14, v15, v16, v17);
  if (os_log_type_enabled(v14, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(12, -1);
    v20 = swift_slowAlloc(32, -1);
    *(_DWORD *)v19 = 136315138;
    v32 = v20;
    v21 = swift_retain(a1);
    v22 = UUID.uuidString.getter(v21);
    v24 = v23;
    swift_release(a1);
    v30 = sub_1001C56EC(v22, v24, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v19 + 4, v19 + 12);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease(v24);
    _os_log_impl((void *)&_mh_execute_header, v14, v18, "UWB Alisha session already exists for %s", v19, 0xCu);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v19, -1, -1);
  }
  else
  {
    swift_release_n(a1, 2);
  }

}

uint64_t sub_1001A0A18()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for AlishaUWB(0);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  result = sub_1001A0A54();
  qword_100354DA8 = result;
  return result;
}

uint64_t sub_1001A0A54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  _QWORD aBlock[5];
  uint64_t v13;

  v1 = v0;
  v2 = type metadata accessor for DispatchQoS.QoSClass(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_BYTE *)(v0 + 16) = 0;
  v7 = String.init(cString:)(SESLoggingSubsystem);
  Logger.init(subsystem:category:)(v7);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced9AlishaUWB_pendingTimeSyncEvents) = &_swiftEmptyDictionarySingleton;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced9AlishaUWB_rangingPeers) = &_swiftEmptySetSingleton;
  sub_100071AEC();
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchQoS.QoSClass.default(_:), v2);
  v8 = (void *)static OS_dispatch_queue.global(qos:)(v6);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  aBlock[4] = sub_1001A2CC8;
  v13 = v1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10017BF6C;
  aBlock[3] = &unk_10030BD70;
  v9 = _Block_copy(aBlock);
  v10 = v13;
  swift_retain(v1);
  swift_release(v10);
  os_state_add_handler(v8, v9);
  _Block_release(v9);

  return v1;
}

_DWORD *sub_1001A0BE0()
{
  uint64_t v0;
  char v1;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v3;
  Class isa;
  _DWORD *v5;
  _OWORD v7[2];
  __int128 v8;
  void *v9;

  v1 = *(_BYTE *)(v0 + 16);
  v9 = &type metadata for Bool;
  LOBYTE(v8) = v1;
  sub_10006C2B4(&v8, v7);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_10018DEC0(v7, 0x6E696E6E75527369, 0xE900000000000067, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease(0x8000000000000000);
  v3 = sub_10017D088((uint64_t)&_swiftEmptyDictionarySingleton);
  swift_bridgeObjectRelease(&_swiftEmptyDictionarySingleton);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v3);
  v5 = sub_100015734((uint64_t)"alishauwb.state", (uint64_t)isa);

  return v5;
}

uint64_t sub_1001A0CC8(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, char a9)
{
  char v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[3];
  _BYTE v35[8];
  uint64_t v36;

  if (a3)
  {
    v14 = a9 & 1;
    swift_errorRetain(a3);
    swift_errorRetain(a3);
    v15 = swift_errorRetain(a3);
    v16 = Logger.logObject.getter(v15);
    v18 = static os_log_type_t.error.getter(v16, v17);
    if (os_log_type_enabled(v16, v18))
    {
      v32 = a8;
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = swift_slowAlloc(32, -1);
      v36 = v20;
      *(_DWORD *)v19 = 136315138;
      swift_getErrorValue(a3, v35, v34);
      v21 = Error.localizedDescription.getter(v34[1], v34[2]);
      v23 = v22;
      v33 = sub_1001C56EC(v21, v22, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, v34, v19 + 4, v19 + 12);
      swift_bridgeObjectRelease(v23);
      swift_errorRelease(a3);
      swift_errorRelease(a3);
      _os_log_impl((void *)&_mh_execute_header, v16, v18, "Failed to process DK UWB message %s", v19, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      v24 = v20;
      v14 = a9 & 1;
      swift_slowDealloc(v24, -1, -1);
      v25 = v19;
      a8 = v32;
      swift_slowDealloc(v25, -1, -1);

    }
    else
    {

      swift_errorRelease(a3);
      swift_errorRelease(a3);
    }
    if (qword_100344680 != -1)
      swift_once(&qword_100344680, sub_10016E9A8);
    v29 = sub_10007C66C((uint64_t)&off_100305FF8);
    v31 = v30;
    sub_10016E310(3u, 17, v29, v30, a5, a6, a7, a8, v14);
    swift_errorRelease(a3);
    return sub_100063CD0(v29, v31);
  }
  else if (a2 >> 60 != 15)
  {
    v27 = result;
    sub_100063C8C(result, a2);
    if (qword_1003445A0 != -1)
      swift_once(&qword_1003445A0, sub_1000B26B0);
    sub_1000ADCAC(v27, a2, a5);
    if (qword_100344680 != -1)
      swift_once(&qword_100344680, sub_10016E9A8);
    v28 = qword_100354D60;
    swift_retain(a5);
    sub_100179C1C(v27, a2, 0, a5, v28, a5);
    swift_release(a5);
    return sub_10006B9B4(v27, a2);
  }
  return result;
}

void sub_1001A1024(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  char v11;
  char v12;
  char v13;
  int v14;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  os_unfair_lock_s *v21;
  os_unfair_lock_s *v22;
  uint64_t v23;
  void *v24;
  id v25;
  void *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  NSString v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  os_unfair_lock_s *v39;
  os_unfair_lock_s *v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[2];

  v4 = type metadata accessor for Alisha.DKMessage(0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *((_QWORD *)a1 + 1);
  v9 = *((_QWORD *)a1 + 2);
  sub_100063C8C(v8, v9);
  sub_1000723E8(v8, v9, 0);
  v11 = v10;
  sub_100063C8C(v8, v9);
  sub_1000723E8(v8, v9, 1);
  v13 = v12;
  LODWORD(v9) = *a1;
  sub_10009691C((uint64_t)a1, (uint64_t)v7);
  if ((_DWORD)v9 != 3)
  {
    sub_100096960((uint64_t)v7);
    return;
  }
  v14 = v7[1];
  sub_100096960((uint64_t)v7);
  if (v14 == 17 && v11 == 2)
  {
    if (v13 == 6)
    {
      v34 = qword_1003445B8;
      swift_retain(a2);
      if (v34 != -1)
        swift_once(&qword_1003445B8, sub_1000EAA4C);
      v35 = off_1003463F0;
      v36 = swift_allocObject(&unk_10030BE48, 32, 7);
      *(_QWORD *)(v36 + 16) = sub_10017B8A0;
      *(_QWORD *)(v36 + 24) = a2;
      v38 = __chkstk_darwin(v36, v37);
      v46[-4] = sub_100096F30;
      v46[-3] = v38;
      v46[-2] = v35;
      v40 = v39 + 4;
      swift_retain(a2);
      os_unfair_lock_lock(v40);
      sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_100096F14, v46);
      os_unfair_lock_unlock(v40);
      v41 = v46[0];
      swift_release(a2);
      swift_release(v36);
      v24 = (void *)sub_10009F618(v41);
      swift_bridgeObjectRelease(v41);
      if (!v24)
        return;
      v42 = objc_msgSend(v24, "readerInfo");
      if (v42)
      {
        v26 = v42;
        v43 = objc_opt_self(SESDAnalyticsLogger);
        v28 = objc_msgSend(v24, "getEndpointUser");
        UUID.uuidString.getter(v28);
        v45 = v44;
        v31 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v45);
        v32 = v43;
        v33 = 6;
        goto LABEL_21;
      }
    }
    else
    {
      if (v13 != 1)
        return;
      v16 = qword_1003445B8;
      swift_retain(a2);
      if (v16 != -1)
        swift_once(&qword_1003445B8, sub_1000EAA4C);
      v17 = off_1003463F0;
      v18 = swift_allocObject(&unk_10030BE70, 32, 7);
      *(_QWORD *)(v18 + 16) = sub_10017B8A0;
      *(_QWORD *)(v18 + 24) = a2;
      v20 = __chkstk_darwin(v18, v19);
      v46[-4] = sub_100096F30;
      v46[-3] = v20;
      v46[-2] = v17;
      v22 = v21 + 4;
      swift_retain(a2);
      os_unfair_lock_lock(v22);
      sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_100096F14, v46);
      os_unfair_lock_unlock(v22);
      v23 = v46[0];
      swift_release(a2);
      swift_release(v18);
      v24 = (void *)sub_10009F618(v23);
      swift_bridgeObjectRelease(v23);
      if (!v24)
        return;
      v25 = objc_msgSend(v24, "readerInfo");
      if (v25)
      {
        v26 = v25;
        v27 = objc_opt_self(SESDAnalyticsLogger);
        v28 = objc_msgSend(v24, "getEndpointUser");
        UUID.uuidString.getter(v28);
        v30 = v29;
        v31 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v30);
        v32 = v27;
        v33 = 1;
LABEL_21:
        sub_100049758(v32, 2, v33, v26, (unint64_t)v28, v31);

      }
    }

  }
}

void sub_1001A145C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (uint64_t *)((char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v7 = qword_100354EE8;
  *v6 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) != 0)
  {
    v9 = swift_retain_n(a1, 2);
    v10 = Logger.logObject.getter(v9);
    v14 = static os_log_type_t.info.getter(v10, v11, v12, v13);
    if (os_log_type_enabled(v10, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v16 = swift_slowAlloc(32, -1);
      *(_DWORD *)v15 = 136315138;
      v22 = v16;
      v17 = swift_retain(a1);
      v18 = UUID.uuidString.getter(v17);
      v20 = v19;
      swift_release(a1);
      v21 = sub_1001C56EC(v18, v20, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v15 + 4, v15 + 12);
      swift_release_n(a1, 2);
      swift_bridgeObjectRelease(v20);
      _os_log_impl((void *)&_mh_execute_header, v10, v14, "UWB Alisha session started running for %s", v15, 0xCu);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);
    }
    else
    {
      swift_release_n(a1, 2);
    }

    sub_10019ED28(a1);
  }
  else
  {
    __break(1u);
  }
}

void sub_1001A16B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (uint64_t *)((char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v9 = qword_100354EE8;
  *v8 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) != 0)
  {
    v11 = swift_retain_n(a2, 2);
    v12 = Logger.logObject.getter(v11);
    v16 = static os_log_type_t.info.getter(v12, v13, v14, v15);
    if (os_log_type_enabled(v12, v16))
    {
      v17 = swift_slowAlloc(22, -1);
      v18 = swift_slowAlloc(64, -1);
      v27 = v18;
      *(_DWORD *)v17 = 136315394;
      v19 = swift_retain(a2);
      v20 = UUID.uuidString.getter(v19);
      v22 = v21;
      swift_release(a2);
      v26 = sub_1001C56EC(v20, v22, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v17 + 4, v17 + 12);
      swift_release_n(a2, 2);
      swift_bridgeObjectRelease(v22);
      *(_WORD *)(v17 + 12) = 2080;
      v23 = sub_100186A94(a1);
      v25 = v24;
      v26 = sub_1001C56EC(v23, v24, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v17 + 14, v17 + 22);
      swift_bridgeObjectRelease(v25);
      _os_log_impl((void *)&_mh_execute_header, v12, v16, "UWB Alisha session suspended for %s %s", (uint8_t *)v17, 0x16u);
      swift_arrayDestroy(v18, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);
    }
    else
    {
      swift_release_n(a2, 2);
    }

  }
  else
  {
    __break(1u);
  }
}

void sub_1001A1934(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24[2];

  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (uint64_t *)((char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v7 = qword_100354EE8;
  *v6 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_17:
    swift_once(&qword_1003445A0, sub_1000B26B0);
    goto LABEL_8;
  }
  v9 = swift_retain_n(a1, 2);
  v10 = Logger.logObject.getter(v9);
  v14 = static os_log_type_t.info.getter(v10, v11, v12, v13);
  if (os_log_type_enabled(v10, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v16 = swift_slowAlloc(32, -1);
    *(_DWORD *)v15 = 136315138;
    v24[0] = v16;
    v17 = swift_retain(a1);
    v18 = UUID.uuidString.getter(v17);
    v20 = v19;
    swift_release(a1);
    v23 = sub_1001C56EC(v18, v20, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, v24, v15 + 4, v15 + 12);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease(v20);
    _os_log_impl((void *)&_mh_execute_header, v10, v14, "UWB Alisha session resumed for %s", v15, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);
  }
  else
  {
    swift_release_n(a1, 2);
  }

  sub_10019ED28(a1);
  if (qword_1003445A0 != -1)
    goto LABEL_17;
LABEL_8:
  v21 = sub_1000B2084(a1);
  if (v21 != 2 && (v21 & 1) == 0)
  {
    if (qword_1003446C0 != -1)
      swift_once(&qword_1003446C0, sub_10019CC14);
    sub_10019B2F8(a1);
    if (qword_1003446C8 != -1)
      swift_once(&qword_1003446C8, sub_1001A0A18);
    sub_10019F204(0, a1);
  }
}

void sub_1001A1C58(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  uint64_t v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52[8];
  uint64_t v53[2];

  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (uint64_t *)((char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v12 = qword_100354EE8;
  *v11 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v7);
  v13 = (id)v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v11);
  (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(v11, v7);
  if ((v12 & 1) != 0)
  {
    v14 = v3 + OBJC_IVAR____TtC10seserviced9AlishaUWB_logger;
    swift_retain(a3);
    sub_100063C8C(a1, a2);
    swift_retain(a3);
    v15 = sub_100063C8C(a1, a2);
    v16 = Logger.logObject.getter(v15);
    v20 = static os_log_type_t.info.getter(v16, v17, v18, v19);
    if (os_log_type_enabled(v16, v20))
    {
      v21 = swift_slowAlloc(22, -1);
      v49 = swift_slowAlloc(64, -1);
      v53[0] = v49;
      *(_DWORD *)v21 = 136315394;
      v22 = swift_retain(a3);
      v23 = UUID.uuidString.getter(v22);
      v50 = v14;
      v25 = v24;
      swift_release(a3);
      v51 = sub_1001C56EC(v23, v25, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, v52, v21 + 4, v21 + 12);
      swift_release_n(a3, 2);
      swift_bridgeObjectRelease(v25);
      *(_WORD *)(v21 + 12) = 2080;
      v48 = v21 + 14;
      v7 = 0;
      sub_1001BD2CC(a1, a2);
      v27 = v26;
      v51 = v26;
      v28 = sub_100063D3C((uint64_t *)&unk_100346060);
      v29 = sub_10006B86C();
      v30 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v28, v29);
      v32 = v31;
      swift_bridgeObjectRelease(v27);
      v51 = sub_1001C56EC(v30, v32, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, v52, v48, v21 + 22);
      swift_bridgeObjectRelease(v32);
      sub_100063CD0(a1, a2);
      sub_100063CD0(a1, a2);
      _os_log_impl((void *)&_mh_execute_header, v16, v20, "UWB Alisha session message for %s %s", (uint8_t *)v21, 0x16u);
      v33 = v49;
      swift_arrayDestroy(v49, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v21, -1, -1);

    }
    else
    {
      swift_release_n(a3, 2);

      sub_100063CD0(a1, a2);
      sub_100063CD0(a1, a2);
      v7 = 0;
    }
    if (qword_1003445A0 == -1)
      goto LABEL_8;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1003445A0, sub_1000B26B0);
LABEL_8:
  sub_1000ADCAC(a1, a2, a3);
  if (v7)
  {
    v34 = v7;
    sub_100063C8C(a1, a2);
    v35 = sub_100063C8C(a1, a2);
    v36 = Logger.logObject.getter(v35);
    v38 = static os_log_type_t.error.getter(v36, v37);
    if (os_log_type_enabled(v36, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc(12, -1);
      v50 = swift_slowAlloc(32, -1);
      v53[0] = v50;
      *(_DWORD *)v39 = 136315138;
      v49 = (uint64_t)(v39 + 4);
      sub_1001BD2CC(a1, a2);
      v41 = v40;
      v51 = v40;
      v42 = sub_100063D3C((uint64_t *)&unk_100346060);
      v43 = sub_10006B86C();
      v44 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v42, v43);
      v46 = v45;
      swift_bridgeObjectRelease(v41);
      v51 = sub_1001C56EC(v44, v46, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, v52, v49, v39 + 12);
      swift_bridgeObjectRelease(v46);
      sub_100063CD0(a1, a2);
      sub_100063CD0(a1, a2);
      _os_log_impl((void *)&_mh_execute_header, v36, v38, "Failed to send %s", v39, 0xCu);
      v47 = v50;
      swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v47, -1, -1);
      swift_slowDealloc(v39, -1, -1);
      swift_errorRelease(v34);

    }
    else
    {
      swift_errorRelease(v7);

      sub_100063CD0(a1, a2);
      sub_100063CD0(a1, a2);
    }
  }
}

void sub_1001A2198(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  os_unfair_lock_s *v37;
  os_unfair_lock_s *v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  id v42;
  void *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  os_unfair_lock_s *v61;
  os_unfair_lock_s *v62;
  uint64_t v63;
  void *v64;
  id v65;
  void *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t inited;
  unint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  os_unfair_lock_s *v82;
  os_unfair_lock_s *v83;
  uint64_t v84;
  id v85;
  void *v86;
  uint64_t v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  NSObject *v91;
  uint64_t v92;
  os_log_type_t v93;
  uint8_t *v94;
  uint64_t v95;
  uint64_t v96;
  _BYTE v97[128];
  uint64_t v98;
  _BYTE v99[88];
  uint64_t v100[2];

  v3 = v2;
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (uint64_t *)((char *)&v95 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v11 = qword_100354EE8;
  *v10 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  v12 = (id)v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v10);
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v10, v6);
  if ((v11 & 1) == 0)
  {
    __break(1u);
    goto LABEL_32;
  }
  v13 = v3 + OBJC_IVAR____TtC10seserviced9AlishaUWB_logger;
  v14 = swift_retain_n(a2, 2);
  v15 = Logger.logObject.getter(v14);
  v19 = static os_log_type_t.info.getter(v15, v16, v17, v18);
  if (os_log_type_enabled(v15, v19))
  {
    v20 = swift_slowAlloc(22, -1);
    v96 = v13;
    v21 = v20;
    v22 = swift_slowAlloc(64, -1);
    v100[0] = v22;
    *(_DWORD *)v21 = 136315394;
    LOBYTE(v98) = a1;
    v23 = String.init<A>(describing:)(&v98, &type metadata for UWBAlishaSession.SessionHealth);
    v95 = v3;
    v24 = a1;
    v26 = v25;
    v98 = sub_1001C56EC(v23, v25, v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, v99, v21 + 4, v21 + 12);
    swift_bridgeObjectRelease(v26);
    *(_WORD *)(v21 + 12) = 2080;
    v27 = swift_retain(a2);
    v28 = UUID.uuidString.getter(v27);
    v30 = v29;
    swift_release(a2);
    v98 = sub_1001C56EC(v28, v30, v100);
    a1 = v24;
    v3 = v95;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, v99, v21 + 14, v21 + 22);
    swift_release_n(a2, 2);
    swift_bridgeObjectRelease(v30);
    _os_log_impl((void *)&_mh_execute_header, v15, v19, "UWB Alisha session health update %s for %s", (uint8_t *)v21, 0x16u);
    swift_arrayDestroy(v22, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v21, -1, -1);
  }
  else
  {
    swift_release_n(a2, 2);
  }

  if (a1 == 3)
  {
    swift_beginAccess(v3 + OBJC_IVAR____TtC10seserviced9AlishaUWB_rangingPeers, v100, 33, 0);
    v55 = sub_1000D3670(a2);
    swift_endAccess(v100);
    swift_release(v55);
    if (!v55)
    {
LABEL_20:
      v77 = qword_1003445B8;
      swift_retain(a2);
      if (v77 != -1)
        swift_once(&qword_1003445B8, sub_1000EAA4C);
      v78 = off_1003463F0;
      v79 = swift_allocObject(&unk_10030BDA8, 32, 7);
      *(_QWORD *)(v79 + 16) = sub_10017B8A0;
      *(_QWORD *)(v79 + 24) = a2;
      v81 = __chkstk_darwin(v79, v80);
      *(&v95 - 4) = (uint64_t)sub_100095FDC;
      *(&v95 - 3) = v81;
      *(&v95 - 2) = (uint64_t)v78;
      v83 = v82 + 4;
      swift_retain(a2);
      os_unfair_lock_lock(v83);
      sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_100096F14, v100);
      os_unfair_lock_unlock(v83);
      v84 = v100[0];
      swift_release(a2);
      swift_release(v79);
      v40 = sub_10009F618(v84);
      swift_bridgeObjectRelease(v84);
      if (v40)
      {
        v85 = -[NSObject readerInfo](v40, "readerInfo");
        if (v85)
        {
          v86 = v85;
          v87 = objc_opt_self(SESDAnalyticsLogger);
          v88 = -[NSObject getEndpointUser](v40, "getEndpointUser");
          UUID.uuidString.getter(v88);
          v90 = v89;
          v91 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v90);
          sub_100049758(v87, 0x8000, 0xFFFF, v86, (unint64_t)v88, v91);

          v40 = v91;
        }
        goto LABEL_29;
      }
      return;
    }
    v56 = qword_1003445B8;
    swift_retain(a2);
    if (v56 == -1)
    {
LABEL_17:
      v57 = off_1003463F0;
      v58 = swift_allocObject(&unk_10030BDD0, 32, 7);
      *(_QWORD *)(v58 + 16) = sub_10017B8A0;
      *(_QWORD *)(v58 + 24) = a2;
      v60 = __chkstk_darwin(v58, v59);
      *(&v95 - 4) = (uint64_t)sub_100096F30;
      *(&v95 - 3) = v60;
      *(&v95 - 2) = (uint64_t)v57;
      v62 = v61 + 4;
      swift_retain(a2);
      os_unfair_lock_lock(v62);
      sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_100096F14, v100);
      os_unfair_lock_unlock(v62);
      v63 = v100[0];
      swift_release(a2);
      swift_release(v58);
      v64 = (void *)sub_10009F618(v63);
      v41 = swift_bridgeObjectRelease(v63);
      if (!v64)
        goto LABEL_27;
      v65 = objc_msgSend(v64, "readerIdentifier");
      if (!v65)
      {

        goto LABEL_27;
      }
      v66 = v65;
      v67 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v65);
      v69 = v68;

      v70 = *(_QWORD *)(a2 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier);
      v71 = *(_QWORD *)(a2 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier + 8);
      v96 = 0;
      v72 = *(_QWORD *)(a2 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
      v73 = *(_QWORD *)(a2 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
      v74 = sub_100063D3C((uint64_t *)&unk_100346040);
      inited = swift_initStackObject(v74, v99);
      *(_OWORD *)(inited + 16) = xmmword_1002888E0;
      *(_QWORD *)(inited + 32) = 0xD000000000000010;
      *(_QWORD *)(inited + 40) = 0x80000001002B9D40;
      *(_QWORD *)(inited + 72) = &type metadata for Data;
      *(_QWORD *)(inited + 48) = v67;
      *(_QWORD *)(inited + 56) = v69;
      sub_10006BA34(v70, v71);
      sub_10006BA34(v72, v73);
      sub_100063C8C(v67, v69);
      v76 = sub_10017C218(inited);
      sub_1001F119C(0xD000000000000040, 0x80000001002BF460, v70, v71, v72, v73, v76);
      swift_bridgeObjectRelease(v76);
      sub_10006B9B4(v72, v73);
      sub_10006B9B4(v70, v71);
      sub_100063CD0(v67, v69);

      goto LABEL_20;
    }
LABEL_32:
    swift_once(&qword_1003445B8, sub_1000EAA4C);
    goto LABEL_17;
  }
  if (a1 == 1)
  {
    swift_beginAccess(v3 + OBJC_IVAR____TtC10seserviced9AlishaUWB_rangingPeers, v100, 33, 0);
    swift_retain(a2);
    v31 = sub_1000C7708(&v98, a2);
    swift_endAccess(v100);
    swift_release(v98);
    if ((v31 & 1) != 0)
    {
      v32 = qword_1003445B8;
      swift_retain(a2);
      if (v32 != -1)
        swift_once(&qword_1003445B8, sub_1000EAA4C);
      v33 = off_1003463F0;
      v34 = swift_allocObject(&unk_10030BDF8, 32, 7);
      *(_QWORD *)(v34 + 16) = sub_10017B8A0;
      *(_QWORD *)(v34 + 24) = a2;
      v36 = __chkstk_darwin(v34, v35);
      *(&v95 - 4) = (uint64_t)sub_100096F30;
      *(&v95 - 3) = v36;
      *(&v95 - 2) = (uint64_t)v33;
      v38 = v37 + 4;
      swift_retain(a2);
      os_unfair_lock_lock(v38);
      sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_100096F14, v100);
      os_unfair_lock_unlock(v38);
      v39 = v100[0];
      swift_release(a2);
      swift_release(v34);
      v40 = sub_10009F618(v39);
      v41 = swift_bridgeObjectRelease(v39);
      if (v40)
      {
        v42 = -[NSObject readerIdentifier](v40, "readerIdentifier");
        if (v42)
        {
          v43 = v42;
          v44 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v42);
          v46 = v45;

          v47 = *(_QWORD *)(a2 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier);
          v48 = *(_QWORD *)(a2 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier + 8);
          v49 = a2 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier;
          v50 = *(_QWORD *)(a2 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
          v51 = *(_QWORD *)(v49 + 8);
          v52 = sub_100063D3C((uint64_t *)&unk_100346040);
          v53 = swift_initStackObject(v52, v97);
          *(_OWORD *)(v53 + 16) = xmmword_1002888F0;
          *(_QWORD *)(v53 + 32) = 0xD000000000000010;
          *(_QWORD *)(v53 + 40) = 0x80000001002B9D40;
          *(_QWORD *)(v53 + 48) = v44;
          *(_QWORD *)(v53 + 56) = v46;
          *(_QWORD *)(v53 + 72) = &type metadata for Data;
          *(_QWORD *)(v53 + 80) = 0xD000000000000011;
          *(_QWORD *)(v53 + 120) = &type metadata for Int;
          *(_QWORD *)(v53 + 88) = 0x80000001002BF500;
          *(_QWORD *)(v53 + 96) = 180;
          sub_10006BA34(v47, v48);
          sub_10006BA34(v50, v51);
          sub_100063C8C(v44, v46);
          v54 = sub_10017C218(v53);
          sub_1001F119C(0xD000000000000042, 0x80000001002BF4B0, v47, v48, v50, v51, v54);
          swift_bridgeObjectRelease(v54);
          sub_10006B9B4(v50, v51);
          sub_10006B9B4(v47, v48);
          sub_100063CD0(v44, v46);
LABEL_29:

          return;
        }

      }
LABEL_27:
      v40 = Logger.logObject.getter(v41);
      v93 = static os_log_type_t.error.getter(v40, v92);
      if (os_log_type_enabled(v40, v93))
      {
        v94 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v94 = 0;
        _os_log_impl((void *)&_mh_execute_header, v40, v93, "Failed to retrieve endpoint", v94, 2u);
        swift_slowDealloc(v94, -1, -1);
      }
      goto LABEL_29;
    }
  }
}

uint64_t sub_1001A2B8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC10seserviced9AlishaUWB_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced9AlishaUWB_pendingTimeSyncEvents));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced9AlishaUWB_rangingPeers));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1001A2BFC()
{
  return type metadata accessor for AlishaUWB(0);
}

uint64_t type metadata accessor for AlishaUWB(uint64_t a1)
{
  uint64_t result;

  result = qword_100348D08;
  if (!qword_100348D08)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AlishaUWB);
  return result;
}

uint64_t sub_1001A2C40(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_10028BDD8;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1001A2CCC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001A2CDC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_1001A2CE4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100345828;
  if (!qword_100345828)
  {
    v1 = type metadata accessor for UWBSession();
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100345828);
  }
  return result;
}

void sub_1001A2D38(uint64_t a1, NSObject *a2)
{
  sub_1001A2D6C(a2);
}

uint64_t sub_1001A2D48()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1001A2D6C(NSObject *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (uint64_t *)((char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v7 = qword_100354EE8;
  *v6 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) != 0)
  {
    v9 = swift_retain_n(a1, 2);
    v10 = Logger.logObject.getter(v9);
    v14 = static os_log_type_t.info.getter(v10, v11, v12, v13);
    if (os_log_type_enabled(v10, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v16 = swift_slowAlloc(32, -1);
      *(_DWORD *)v15 = 136315138;
      v22 = v16;
      v17 = swift_retain(a1);
      v18 = UUID.uuidString.getter(v17);
      v20 = v19;
      swift_release(a1);
      v21 = sub_1001C56EC(v18, v20, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v15 + 4, v15 + 12);
      swift_release_n(a1, 2);
      swift_bridgeObjectRelease(v20);
      _os_log_impl((void *)&_mh_execute_header, v10, v14, "UWB Alisha session invalidated for %s", v15, 0xCu);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);
    }
    else
    {
      swift_release_n(a1, 2);
    }

    if (*((_BYTE *)&a1->isa + OBJC_IVAR____TtC10seserviced4Peer_isConnected) == 1)
      sub_1001A0504(a1);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1001A2FD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(sub_100063D3C((uint64_t *)&unk_1003465E0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 40) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  return swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 9, v2 | 7);
}

uint64_t sub_1001A308C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100063D3C((uint64_t *)&unk_1003465E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001A30D4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  unint64_t v8;
  char *v9;

  v7 = *(_QWORD *)(sub_100063D3C((uint64_t *)&unk_1003465E0) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = (char *)v3 + ((*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_1001A0CC8(a1, a2, a3, v3[2], v3[3], v3[4], (uint64_t)v3 + v8, *(_QWORD *)v9, v9[8]);
}

uint64_t sub_1001A3188(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  UUID.init()();
  *(_BYTE *)(v1 + OBJC_IVAR____TtC10seserviced4Peer_isConnected) = 0;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC10seserviced4Peer_expressState) = 0;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC10seserviced4Peer_pairingState) = 0;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC10seserviced4Peer_type) = 4;
  *(_OWORD *)(v1 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier) = xmmword_1002888D0;
  *(_OWORD *)(v1 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier) = xmmword_1002888D0;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC10seserviced4Peer_sequenceNumber) = 0;
  *(_OWORD *)(v1 + OBJC_IVAR____TtC10seserviced4Peer_buffer) = xmmword_1002888D0;
  v3 = v1 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(v3, a1, v4);
  return v1;
}

uint64_t sub_1001A3258()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);

  v1 = v0 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
  v2 = type metadata accessor for UUID(0);
  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v3(v1, v2);
  v3(v0 + OBJC_IVAR____TtC10seserviced4Peer_connectionIdentifier, v2);
  sub_10006B9B4(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier), *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier + 8));
  sub_10006B9B4(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier), *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8));
  sub_10006B9B4(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced4Peer_buffer), *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced4Peer_buffer + 8));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1001A3304()
{
  return type metadata accessor for Peer(0);
}

uint64_t type metadata accessor for Peer(uint64_t a1)
{
  uint64_t result;

  result = qword_100348DD0;
  if (!qword_100348DD0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for Peer);
  return result;
}

uint64_t sub_1001A3348(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[10];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = v4[0];
    v4[2] = &unk_10028BE10;
    v4[3] = &unk_10028BE28;
    v4[4] = &unk_10028BE28;
    v4[5] = &unk_10028BE40;
    v4[6] = &unk_10028BE58;
    v4[7] = &unk_10028BE58;
    v4[8] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[9] = &unk_10028BE58;
    result = swift_updateClassMetadata2(a1, 256, 10, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for Peer.PeerType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1001A343C + 4 * byte_10028BDF5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1001A3470 + 4 * byte_10028BDF0[v4]))();
}

uint64_t sub_1001A3470(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A3478(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001A3480);
  return result;
}

uint64_t sub_1001A348C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001A3494);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1001A3498(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A34A0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Peer.PeerType()
{
  return &type metadata for Peer.PeerType;
}

uint64_t storeEnumTagSinglePayload for Peer.PairingState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1001A3508 + 4 * byte_10028BDFF[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1001A353C + 4 * byte_10028BDFA[v4]))();
}

uint64_t sub_1001A353C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A3544(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001A354CLL);
  return result;
}

uint64_t sub_1001A3558(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001A3560);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1001A3564(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A356C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Peer.PairingState()
{
  return &type metadata for Peer.PairingState;
}

unint64_t sub_1001A358C()
{
  unint64_t result;

  result = qword_100348F90;
  if (!qword_100348F90)
  {
    result = swift_getWitnessTable(&unk_10028BEC8, &type metadata for Peer.PairingState);
    atomic_store(result, (unint64_t *)&qword_100348F90);
  }
  return result;
}

unint64_t sub_1001A35D4()
{
  unint64_t result;

  result = qword_100348F98;
  if (!qword_100348F98)
  {
    result = swift_getWitnessTable(&unk_10028BF30, &type metadata for Peer.PeerType);
    atomic_store(result, (unint64_t *)&qword_100348F98);
  }
  return result;
}

Swift::Int sub_1001A3618()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  v0 = type metadata accessor for UUID(0);
  v1 = sub_1000639EC((unint64_t *)&unk_100347730, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  return Hasher._finalize()();
}

uint64_t sub_1001A3694(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = type metadata accessor for UUID(0);
  v3 = sub_1000639EC((unint64_t *)&unk_100347730, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  return dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
}

Swift::Int sub_1001A3700()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  v0 = type metadata accessor for UUID(0);
  v1 = sub_1000639EC((unint64_t *)&unk_100347730, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  return Hasher._finalize()();
}

uint64_t sub_1001A3778(uint64_t a1)
{
  return UUID.uuidString.getter(a1);
}

uint64_t sub_1001A37A4(_QWORD *a1, _QWORD *a2)
{
  return static UUID.== infix(_:_:)(*a1 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier, *a2 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier);
}

uint64_t sub_1001A37C0()
{
  return sub_1000639EC(&qword_100348FA0, type metadata accessor for Peer, (uint64_t)aY_17);
}

void sub_1001A37EC(char a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v2 = *(unsigned __int8 *)(v1 + 24);
  if (v2 == 2)
  {
    if (qword_1003446E0 != -1)
      swift_once(&qword_1003446E0, sub_1001A45A8);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_10009673C(v3, (uint64_t)qword_100348FA8);
    v5 = Logger.logObject.getter(v4);
    v9 = static os_log_type_t.info.getter(v5, v6, v7, v8);
    if (os_log_type_enabled(v5, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v9, "Not waiting for message, nothing to register", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

  }
  else
  {
    v11 = a1 & 1;
    v12 = v2 & 1;
    if ((a1 & 1) == (v2 & 1))
    {
      v13 = v1;
      v14 = *(_QWORD *)(v1 + 16);
      if (v14)
        sub_10004C548(v14);
      if (qword_1003446E0 != -1)
        swift_once(&qword_1003446E0, sub_1001A45A8);
      v15 = type metadata accessor for Logger(0);
      v16 = sub_10009673C(v15, (uint64_t)qword_100348FA8);
      v17 = Logger.logObject.getter(v16);
      v21 = static os_log_type_t.info.getter(v17, v18, v19, v20);
      if (os_log_type_enabled(v17, v21))
      {
        v22 = (uint8_t *)swift_slowAlloc(12, -1);
        v23 = swift_slowAlloc(32, -1);
        v45 = v23;
        *(_DWORD *)v22 = 136315138;
        LOBYTE(v43) = v11;
        v24 = String.init<A>(describing:)(&v43, &type metadata for LyonTimeExtension.MessageDirection);
        v26 = v25;
        v43 = sub_1001C56EC(v24, v25, &v45);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v22 + 4, v22 + 12);
        swift_bridgeObjectRelease(v26);
        _os_log_impl((void *)&_mh_execute_header, v17, v21, "Ended timer for %s message", v22, 0xCu);
        swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v23, -1, -1);
        swift_slowDealloc(v22, -1, -1);
      }

      *(_BYTE *)(v13 + 24) = 2;
    }
    else
    {
      if (qword_1003446E0 != -1)
        swift_once(&qword_1003446E0, sub_1001A45A8);
      v27 = type metadata accessor for Logger(0);
      v28 = sub_10009673C(v27, (uint64_t)qword_100348FA8);
      v29 = Logger.logObject.getter(v28);
      v31 = static os_log_type_t.error.getter(v29, v30);
      if (os_log_type_enabled(v29, v31))
      {
        v32 = swift_slowAlloc(22, -1);
        v33 = swift_slowAlloc(64, -1);
        v45 = v33;
        *(_DWORD *)v32 = 136315394;
        LOBYTE(v43) = v12;
        v34 = String.init<A>(describing:)(&v43, &type metadata for LyonTimeExtension.MessageDirection);
        v36 = v35;
        v43 = sub_1001C56EC(v34, v35, &v45);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v32 + 4, v32 + 12);
        swift_bridgeObjectRelease(v36);
        *(_WORD *)(v32 + 12) = 2080;
        LOBYTE(v43) = v11;
        v37 = String.init<A>(describing:)(&v43, &type metadata for LyonTimeExtension.MessageDirection);
        v39 = v38;
        v43 = sub_1001C56EC(v37, v38, &v45);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v32 + 14, v32 + 22);
        swift_bridgeObjectRelease(v39);
        _os_log_impl((void *)&_mh_execute_header, v29, v31, "Waiting for message type %s, cannot stop timer for %s", (uint8_t *)v32, 0x16u);
        swift_arrayDestroy(v33, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v33, -1, -1);
        swift_slowDealloc(v32, -1, -1);
      }

      v40 = sub_1001A461C();
      v41 = swift_allocError(&type metadata for LyonTimeExtension.TimeExtensionError, v40, 0, 0);
      *v42 = 2;
      swift_willThrow(v41);
    }
  }
}

void sub_1001A3C14(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  id v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  os_log_type_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  id v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v4 = v3;
  v5 = a1 & 1;
  v6 = *(unsigned __int8 *)(v3 + 24);
  if (v6 == 2)
  {
    *(_BYTE *)(v4 + 24) = v5;
    v8 = *(_QWORD *)(v4 + 32);
    v9 = *(_QWORD *)(v4 + 40);
    *(_QWORD *)(v4 + 32) = a2;
    *(_QWORD *)(v4 + 40) = a3;
    sub_10008F210(v8, v9);
    v10 = qword_1003446E0;
    swift_retain(a3);
    if (v10 != -1)
      swift_once(&qword_1003446E0, sub_1001A45A8);
    v11 = type metadata accessor for Logger(0);
    v12 = sub_10009673C(v11, (uint64_t)qword_100348FA8);
    v13 = Logger.logObject.getter(v12);
    v17 = static os_log_type_t.info.getter(v13, v14, v15, v16);
    v46 = v5;
    if (os_log_type_enabled(v13, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      v19 = swift_slowAlloc(32, -1);
      v49 = v19;
      *(_DWORD *)v18 = 136315138;
      LOBYTE(v47) = v5;
      v20 = String.init<A>(describing:)(&v47, &type metadata for LyonTimeExtension.MessageDirection);
      v22 = v21;
      v47 = sub_1001C56EC(v20, v21, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v18 + 4, v18 + 12);
      swift_bridgeObjectRelease(v22);
      _os_log_impl((void *)&_mh_execute_header, v13, v17, "Started timer for %s message", v18, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);
    }

    v23 = *(void **)(v4 + 16);
    if (v23)
    {
      if (v46)
      {
        v44 = qword_1003446D8;
        v45 = v23;
        if (v44 != -1)
          swift_once(&qword_1003446D8, sub_1001A4048);
        v26 = &qword_100354E08;
      }
      else
      {
        v24 = qword_1003446D0;
        v25 = v23;
        if (v24 != -1)
          swift_once(&qword_1003446D0, sub_1001A4020);
        v26 = &qword_100354E00;
      }
      sub_10004C410((uint64_t)v23, *(double *)v26);

    }
  }
  else
  {
    if (qword_1003446E0 != -1)
      swift_once(&qword_1003446E0, sub_1001A45A8);
    v27 = type metadata accessor for Logger(0);
    v28 = sub_10009673C(v27, (uint64_t)qword_100348FA8);
    v29 = Logger.logObject.getter(v28);
    v31 = static os_log_type_t.error.getter(v29, v30);
    if (os_log_type_enabled(v29, v31))
    {
      v32 = v6 & 1;
      v33 = swift_slowAlloc(22, -1);
      v34 = swift_slowAlloc(64, -1);
      v49 = v34;
      *(_DWORD *)v33 = 136315394;
      LOBYTE(v47) = v32;
      v35 = String.init<A>(describing:)(&v47, &type metadata for LyonTimeExtension.MessageDirection);
      v37 = v36;
      v47 = sub_1001C56EC(v35, v36, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v33 + 4, v33 + 12);
      swift_bridgeObjectRelease(v37);
      *(_WORD *)(v33 + 12) = 2080;
      LOBYTE(v47) = v5;
      v38 = String.init<A>(describing:)(&v47, &type metadata for LyonTimeExtension.MessageDirection);
      v40 = v39;
      v47 = sub_1001C56EC(v38, v39, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v33 + 14, v33 + 22);
      swift_bridgeObjectRelease(v40);
      _os_log_impl((void *)&_mh_execute_header, v29, v31, "Waiting for message type %s, cannot start timer for %s", (uint8_t *)v33, 0x16u);
      swift_arrayDestroy(v34, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v33, -1, -1);
    }

    v41 = sub_1001A461C();
    v42 = swift_allocError(&type metadata for LyonTimeExtension.TimeExtensionError, v41, 0, 0);
    *v43 = 1;
    swift_willThrow(v42);
  }
}

void sub_1001A4020(uint64_t a1)
{
  sub_1001A4068(a1, 0x80000001002BF600, &qword_100354E00);
}

void sub_1001A4048(uint64_t a1)
{
  sub_1001A4068(a1, 0x80000001002BF5D0, &qword_100354E08);
}

void sub_1001A4068(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;

  sub_100153344(a1);
  *a3 = v4;
}

uint64_t sub_1001A40C4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  NSObject **v3;
  void *v4;
  NSObject **v5;
  void *v6;
  _QWORD v8[5];
  uint64_t v9;

  *(_QWORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 24) = 2;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 40) = 0;
  v1 = swift_allocObject(&unk_10030C090, 24, 7);
  swift_weakInit(v1 + 16, v0);
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v2 = (void *)qword_100354EE8;
  v3 = (NSObject **)objc_allocWithZone((Class)SESTimer);
  v8[4] = sub_1001A4684;
  v9 = v1;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  v8[2] = sub_100071C98;
  v8[3] = &unk_10030C0A8;
  v4 = _Block_copy(v8);
  swift_retain(v1);
  v5 = sub_10004C264(v3, v2, v4);
  _Block_release(v4);
  swift_release(v9);
  v6 = *(void **)(v0 + 16);
  *(_QWORD *)(v0 + 16) = v5;
  swift_release(v1);

  return v0;
}

void sub_1001A41F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  const char *v10;
  void (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v17, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    if (*(_BYTE *)(Strong + 24) == 2)
    {
      if (qword_1003446E0 != -1)
        swift_once(&qword_1003446E0, sub_1001A45A8);
      v4 = type metadata accessor for Logger(0);
      v5 = sub_10009673C(v4, (uint64_t)qword_100348FA8);
      v6 = Logger.logObject.getter(v5);
      v8 = static os_log_type_t.error.getter(v6, v7);
      if (!os_log_type_enabled(v6, v8))
        goto LABEL_14;
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      v10 = "Timer completed when extension is in idle state";
    }
    else
    {
      *(_BYTE *)(Strong + 24) = 2;
      v11 = *(void (**)(uint64_t))(Strong + 32);
      if (v11)
      {
        v12 = *(_QWORD *)(Strong + 40);
        v13 = swift_retain(v12);
        v11(v13);
        swift_release(v3);
        sub_10008F210((uint64_t)v11, v12);
        return;
      }
      if (qword_1003446E0 != -1)
        swift_once(&qword_1003446E0, sub_1001A45A8);
      v14 = type metadata accessor for Logger(0);
      v15 = sub_10009673C(v14, (uint64_t)qword_100348FA8);
      v6 = Logger.logObject.getter(v15);
      v8 = static os_log_type_t.error.getter(v6, v16);
      if (!os_log_type_enabled(v6, v8))
        goto LABEL_14;
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      v10 = "Timer completed with no completion block";
    }
    _os_log_impl((void *)&_mh_execute_header, v6, v8, v10, v9, 2u);
    swift_slowDealloc(v9, -1, -1);
LABEL_14:
    swift_release(v3);

  }
}

uint64_t sub_1001A43C0()
{
  uint64_t v0;

  sub_10008F210(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for LyonTimeExtension()
{
  return objc_opt_self(_TtC10seserviced17LyonTimeExtension);
}

uint64_t getEnumTagSinglePayload for LyonTimeExtension.State(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  BOOL v7;
  unsigned int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
  {
    v6 = *a1;
    v7 = v6 >= 2;
    v8 = v6 - 2;
    if (!v7)
      v8 = -1;
    if (v8 + 1 >= 2)
      return v8;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 2;
    if (a2 + 2 >= 0xFFFF00)
      v3 = 4;
    else
      v3 = 2;
    if (v2 >> 8 < 0xFF)
      v3 = 1;
    if (v2 >= 0x100)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1001A445C + 4 * byte_10028BFF0[v4]))();
  }
}

uint64_t storeEnumTagSinglePayload for LyonTimeExtension.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 2;
  if (a3 + 2 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xFE)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1001A4504 + 4 * byte_10028BFFA[v5]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1001A4538 + 4 * byte_10028BFF5[v5]))();
}

uint64_t sub_1001A4538(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A4540(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001A4548);
  return result;
}

uint64_t sub_1001A4554(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001A455CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1001A4560(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A4568(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A4574(unsigned __int8 *a1)
{
  unsigned int v1;

  v1 = *a1;
  if (v1 >= 2)
    return v1 - 1;
  else
    return 0;
}

_BYTE *sub_1001A4588(_BYTE *result, int a2)
{
  if (a2)
    *result = a2 + 1;
  return result;
}

ValueMetadata *type metadata accessor for LyonTimeExtension.State()
{
  return &type metadata for LyonTimeExtension.State;
}

uint64_t sub_1001A45A8()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Logger(0);
  sub_1000980F8(v0, qword_100348FA8);
  sub_10009673C(v0, (uint64_t)qword_100348FA8);
  v1 = String.init(cString:)(SESLoggingSubsystem);
  return Logger.init(subsystem:category:)(v1);
}

unint64_t sub_1001A461C()
{
  unint64_t result;

  result = qword_100349070;
  if (!qword_100349070)
  {
    result = swift_getWitnessTable(&unk_10028C154, &type metadata for LyonTimeExtension.TimeExtensionError);
    atomic_store(result, (unint64_t *)&qword_100349070);
  }
  return result;
}

uint64_t sub_1001A4660()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1001A4684()
{
  uint64_t v0;

  sub_1001A41F0(v0);
}

uint64_t sub_1001A468C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001A469C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t storeEnumTagSinglePayload for LyonTimeExtension.TimeExtensionError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1001A46F0 + 4 * byte_10028C004[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1001A4724 + 4 * byte_10028BFFF[v4]))();
}

uint64_t sub_1001A4724(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A472C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001A4734);
  return result;
}

uint64_t sub_1001A4740(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001A4748);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1001A474C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A4754(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LyonTimeExtension.TimeExtensionError()
{
  return &type metadata for LyonTimeExtension.TimeExtensionError;
}

uint64_t storeEnumTagSinglePayload for LyonTimeExtension.MessageDirection(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1001A47BC + 4 * byte_10028C00E[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001A47F0 + 4 * byte_10028C009[v4]))();
}

uint64_t sub_1001A47F0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A47F8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001A4800);
  return result;
}

uint64_t sub_1001A480C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001A4814);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1001A4818(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A4820(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LyonTimeExtension.MessageDirection()
{
  return &type metadata for LyonTimeExtension.MessageDirection;
}

unint64_t sub_1001A4840()
{
  unint64_t result;

  result = qword_100349078;
  if (!qword_100349078)
  {
    result = swift_getWitnessTable(&unk_10028C0C4, &type metadata for LyonTimeExtension.MessageDirection);
    atomic_store(result, (unint64_t *)&qword_100349078);
  }
  return result;
}

unint64_t sub_1001A4888()
{
  unint64_t result;

  result = qword_100349080;
  if (!qword_100349080)
  {
    result = swift_getWitnessTable(&unk_10028C12C, &type metadata for LyonTimeExtension.TimeExtensionError);
    atomic_store(result, (unint64_t *)&qword_100349080);
  }
  return result;
}

uint64_t sub_1001A48CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void *v19;
  _QWORD *v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD aBlock[5];
  _QWORD *v33;

  v11 = type metadata accessor for DispatchWorkItemFlags(0);
  v30 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchQoS(0);
  v28 = *(_QWORD *)(v15 - 8);
  v29 = v15;
  __chkstk_darwin(v15, v16);
  v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1003446E8 != -1)
    swift_once(&qword_1003446E8, sub_1001A7798);
  v19 = *(void **)(qword_100349088 + OBJC_IVAR____TtC10seserviced27SESPrivacyKeyImplementation_queue);
  v20 = (_QWORD *)swift_allocObject(&unk_10030C488, 64, 7);
  v20[2] = v5;
  v20[3] = a1;
  v20[4] = a2;
  v20[5] = a3;
  v20[6] = a4;
  v20[7] = a5;
  aBlock[4] = sub_1001A95AC;
  v33 = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100071C98;
  aBlock[3] = &unk_10030C4A0;
  v21 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a3);
  swift_retain(a5);
  v22 = v19;
  swift_bridgeObjectRetain(a2);
  static DispatchQoS.unspecified.getter(v23);
  v31 = _swiftEmptyArrayStorage;
  v24 = sub_1000639EC((unint64_t *)&qword_100344A20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v25 = sub_100063D3C((uint64_t *)&unk_100346200);
  v26 = sub_100127660((unint64_t *)&qword_100344A30, (uint64_t *)&unk_100346200);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v25, v26, v11, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v18, v14, v21);
  _Block_release(v21);

  (*(void (**)(char *, uint64_t))(v30 + 8))(v14, v11);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v18, v29);
  return swift_release(v33);
}

void sub_1001A4B1C(uint64_t a1, __CFString *a2, uint64_t a3, uint64_t a4, void (*a5)(void *, _QWORD))
{
  void *v8;
  id v9;

  if (qword_1003446E8 != -1)
    swift_once(&qword_1003446E8, sub_1001A7798);
  v8 = (void *)sub_1001A95CC(a2, a3);
  v9 = v8;
  a5(v8, 0);

}

uint64_t sub_1001A4CD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD aBlock[5];
  _QWORD *v37;

  v31 = a5;
  v12 = type metadata accessor for DispatchWorkItemFlags(0);
  v34 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchQoS(0);
  v32 = *(_QWORD *)(v16 - 8);
  v33 = v16;
  __chkstk_darwin(v16, v17);
  v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1003446E8 != -1)
    swift_once(&qword_1003446E8, sub_1001A7798);
  v20 = *(void **)(qword_100349088 + OBJC_IVAR____TtC10seserviced27SESPrivacyKeyImplementation_queue);
  v21 = (_QWORD *)swift_allocObject(&unk_10030C410, 72, 7);
  v21[2] = v6;
  v21[3] = a1;
  v21[4] = a2;
  v21[5] = a3;
  v22 = v31;
  v21[6] = a4;
  v21[7] = v22;
  v21[8] = a6;
  aBlock[4] = sub_1001A9564;
  v37 = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100071C98;
  aBlock[3] = &unk_10030C428;
  v23 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a4);
  swift_retain(a6);
  v24 = v20;
  swift_bridgeObjectRetain(a2);
  static DispatchQoS.unspecified.getter(v25);
  v35 = _swiftEmptyArrayStorage;
  v26 = sub_1000639EC((unint64_t *)&qword_100344A20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v27 = sub_100063D3C((uint64_t *)&unk_100346200);
  v28 = sub_100127660((unint64_t *)&qword_100344A30, (uint64_t *)&unk_100346200);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v35, v27, v28, v12, v26);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v19, v15, v23);
  _Block_release(v23);

  (*(void (**)(char *, uint64_t))(v34 + 8))(v15, v12);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v19, v33);
  return swift_release(v37);
}

void sub_1001A4F34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(id, _QWORD), uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  NSString v36;
  NSString v37;
  Class v38;
  Class v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  Class isa;
  id v49;
  uint64_t v50;
  void (*v51)(id, _QWORD);
  unint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;

  v50 = a7;
  v51 = a6;
  v11 = type metadata accessor for P256.KeyAgreement.PublicKey(0);
  v60 = *(_QWORD *)(v11 - 8);
  v61 = v11;
  __chkstk_darwin(v11, v12);
  v59 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for P256.KeyAgreement.PrivateKey(0);
  v57 = *(_QWORD *)(v14 - 8);
  v58 = v14;
  __chkstk_darwin(v14, v15);
  v17 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey.PrivateKey(0);
  __chkstk_darwin(v18, v19);
  v56 = (uint64_t)&v50 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1003446E8 != -1)
    swift_once(&qword_1003446E8, sub_1001A7798);
  v21 = sub_1001A537C(a2, a3, a4, a5);
  v22 = v21;
  if (!((unint64_t)v21 >> 62))
  {
    v23 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v23)
      goto LABEL_5;
LABEL_16:
    swift_bridgeObjectRelease(v22);
    v44 = _swiftEmptyArrayStorage;
LABEL_17:
    v46 = sub_1001FAAA0((uint64_t)v44);
    swift_bridgeObjectRelease(v44);
    v47 = objc_allocWithZone((Class)NSArray);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v46);
    v49 = objc_msgSend(v47, "initWithArray:", isa);

    v51(v49, 0);
    return;
  }
  if (v21 < 0)
    v45 = v21;
  else
    v45 = v21 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v21);
  v23 = _CocoaArrayWrapper.endIndex.getter(v45);
  swift_bridgeObjectRelease(v22);
  if (!v23)
    goto LABEL_16;
LABEL_5:
  v62 = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(v23);
  if ((v23 & 0x8000000000000000) == 0)
  {
    v24 = (void *)objc_opt_self(SESPrivacyKey);
    v25 = 0;
    v52 = v22 & 0xC000000000000001;
    v53 = v24;
    v54 = v23;
    v55 = v22;
    do
    {
      if (v52)
      {
        v26 = specialized _ArrayBuffer._getElementSlowPath(_:)(v25, v22);
      }
      else
      {
        v26 = *(_QWORD *)(v22 + 8 * v25 + 32);
        swift_retain(v26);
      }
      ++v25;
      v27 = v56;
      sub_100124B74(v26+ OBJC_IVAR____TtCC10seserviced27SESPrivacyKeyImplementationP33_01F92E85A5349E347722992BF9B9F8DA10PrivacyKey_privateKey, v56, type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey.PrivateKey);
      v29 = v57;
      v28 = v58;
      v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v57 + 32))(v17, v27, v58);
      v31 = v59;
      v32 = P256.KeyAgreement.PrivateKey.publicKey.getter(v30);
      v33 = P256.KeyAgreement.PublicKey.x963Representation.getter(v32);
      v35 = v34;
      (*(void (**)(char *, uint64_t))(v60 + 8))(v31, v61);
      (*(void (**)(char *, uint64_t))(v29 + 8))(v17, v28);
      sub_100063C8C(v33, v35);
      v36 = String._bridgeToObjectiveC()();
      v37 = String._bridgeToObjectiveC()();
      v38 = Data._bridgeToObjectiveC()().super.isa;
      sub_100063CD0(v33, v35);
      v39 = Date._bridgeToObjectiveC()().super.isa;
      v40 = objc_msgSend(v53, "withGroupIdentifier:keyIdentifier:publicKey:creationDate:", v36, v37, v38, v39, v50);
      sub_100063CD0(v33, v35);
      swift_release(v26);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v41);
      v42 = v62[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v42);
      v43 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v42, v40);
      specialized ContiguousArray._endMutation()(v43);
      v22 = v55;
    }
    while (v54 != v25);
    v44 = v62;
    swift_bridgeObjectRelease(v55);
    goto LABEL_17;
  }
  __break(1u);
}

uint64_t sub_1001A537C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  id v14;
  char v15;
  uint64_t result;
  uint64_t v17;
  uint64_t inited;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const __CFString *v22;
  const __CFString *v23;
  const __CFString *v24;
  const __CFString *v25;
  uint64_t v26;
  uint64_t v27;
  const __CFString *v28;
  unint64_t v29;
  const __CFString *v30;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v32;
  void *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD v39[2];
  __int128 v40;
  void *v41;
  _QWORD v42[5];
  uint64_t v43;
  unint64_t v44;

  v37 = a1;
  v5 = v4;
  v36 = a3;
  v8 = type metadata accessor for DispatchPredicate(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (uint64_t *)((char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = *(void **)((char *)v5 + OBJC_IVAR____TtC10seserviced27SESPrivacyKeyImplementation_queue);
  *v12 = v13;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8);
  v14 = v13;
  v15 = _dispatchPreconditionTest(_:)(v12);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v9 + 8))(v12, v8);
  if ((v15 & 1) != 0)
  {
    v17 = sub_100063D3C(&qword_1003460E0);
    inited = swift_initStackObject(v17, &v43);
    *(_OWORD *)(inited + 16) = xmmword_100288AB0;
    v42[0] = kSecClass;
    type metadata accessor for CFString(0);
    v20 = v19;
    v21 = sub_1000639EC(&qword_100344AD8, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_1002887EC);
    v22 = (id)kSecClass;
    AnyHashable.init<A>(_:)(v42, v20, v21);
    *(_QWORD *)(inited + 96) = v20;
    *(_QWORD *)(inited + 72) = kSecClassGenericPassword;
    v42[0] = kSecAttrAccount;
    v23 = (id)kSecClassGenericPassword;
    v24 = (id)kSecAttrAccount;
    AnyHashable.init<A>(_:)(v42, v20, v21);
    *(_QWORD *)(inited + 168) = &type metadata for String;
    *(_QWORD *)(inited + 144) = v37;
    *(_QWORD *)(inited + 152) = a2;
    v42[0] = kSecAttrAccessGroup;
    swift_bridgeObjectRetain(a2);
    v25 = (id)kSecAttrAccessGroup;
    AnyHashable.init<A>(_:)(v42, v20, v21);
    v27 = *(_QWORD *)((char *)v5 + OBJC_IVAR____TtC10seserviced27SESPrivacyKeyImplementation_keychainGroup);
    v26 = *(_QWORD *)((char *)v5 + OBJC_IVAR____TtC10seserviced27SESPrivacyKeyImplementation_keychainGroup + 8);
    *(_QWORD *)(inited + 240) = &type metadata for String;
    *(_QWORD *)(inited + 216) = v27;
    *(_QWORD *)(inited + 224) = v26;
    v42[0] = kSecAttrSynchronizable;
    swift_bridgeObjectRetain(v26);
    v28 = (id)kSecAttrSynchronizable;
    AnyHashable.init<A>(_:)(v42, v20, v21);
    *(_QWORD *)(inited + 312) = &type metadata for Bool;
    *(_BYTE *)(inited + 288) = 1;
    v29 = sub_10017C368(inited);
    if (a4)
    {
      *(_QWORD *)&v40 = kSecAttrService;
      swift_bridgeObjectRetain(a4);
      v30 = (id)kSecAttrService;
      AnyHashable.init<A>(_:)(&v40, v20, v21);
      v41 = &type metadata for String;
      *(_QWORD *)&v40 = v36;
      *((_QWORD *)&v40 + 1) = a4;
      sub_10006C2B4(&v40, v39);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v29);
      v44 = v29;
      sub_10018F15C(v39, (uint64_t)v42, isUniquelyReferenced_nonNull_native);
      v29 = v44;
      swift_bridgeObjectRelease(0x8000000000000000);
      sub_100098C48((uint64_t)v42);
    }
    swift_bridgeObjectRetain(v29);
    v32 = v38;
    v33 = sub_1001A7A1C();
    swift_bridgeObjectRelease(v29);
    if (v32)
    {
      swift_bridgeObjectRelease(v29);
    }
    else
    {
      v34 = v5;
      v5 = sub_1001A8FB0((uint64_t)v33, (uint64_t)v34);
      swift_bridgeObjectRelease(v33);
      swift_bridgeObjectRelease(v29);

    }
    return (uint64_t)v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1001A56C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t (*v16)(_QWORD);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void *v22;
  NSString v23;
  NSString v24;
  Class isa;
  Class v26;
  id v27;
  uint64_t v29;

  v1 = v0;
  v2 = type metadata accessor for P256.KeyAgreement.PublicKey(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for P256.KeyAgreement.PrivateKey(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey.PrivateKey(0);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100124B74(v1+ OBJC_IVAR____TtCC10seserviced27SESPrivacyKeyImplementationP33_01F92E85A5349E347722992BF9B9F8DA10PrivacyKey_privateKey, (uint64_t)v15, v16);
  v17 = (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 32))(v11, v15, v7);
  v18 = P256.KeyAgreement.PrivateKey.publicKey.getter(v17);
  v19 = P256.KeyAgreement.PublicKey.x963Representation.getter(v18);
  v21 = v20;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  v22 = (void *)objc_opt_self(SESPrivacyKey);
  sub_100063C8C(v19, v21);
  v23 = String._bridgeToObjectiveC()();
  v24 = String._bridgeToObjectiveC()();
  isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100063CD0(v19, v21);
  v26 = Date._bridgeToObjectiveC()().super.isa;
  v27 = objc_msgSend(v22, "withGroupIdentifier:keyIdentifier:publicKey:creationDate:", v23, v24, isa, v26);
  sub_100063CD0(v19, v21);

  return v27;
}

uint64_t sub_1001A59B8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  _QWORD *v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD aBlock[5];
  _QWORD *v30;

  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v27 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26, v12);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1003446E8 != -1)
    swift_once(&qword_1003446E8, sub_1001A7798);
  v15 = *(void **)(qword_100349088 + OBJC_IVAR____TtC10seserviced27SESPrivacyKeyImplementation_queue);
  v16 = (_QWORD *)swift_allocObject(&unk_10030C398, 48, 7);
  v16[2] = v3;
  v16[3] = a1;
  v16[4] = a2;
  v16[5] = a3;
  aBlock[4] = sub_1001A9524;
  v30 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100071C98;
  aBlock[3] = &unk_10030C3B0;
  v17 = _Block_copy(aBlock);
  v18 = v15;
  v19 = a1;
  v20 = swift_retain(a3);
  static DispatchQoS.unspecified.getter(v20);
  v28 = _swiftEmptyArrayStorage;
  v21 = sub_1000639EC((unint64_t *)&qword_100344A20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v22 = sub_100063D3C((uint64_t *)&unk_100346200);
  v23 = sub_100127660((unint64_t *)&qword_100344A30, (uint64_t *)&unk_100346200);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v28, v22, v23, v7, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v10, v17);
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v27 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v26);
  return swift_release(v30);
}

uint64_t sub_1001A5BF0(uint64_t a1, void *a2, uint64_t (*a3)(_QWORD))
{
  if (qword_1003446E8 != -1)
    swift_once(&qword_1003446E8, sub_1001A7798);
  sub_1001A5CA4(a2);
  return a3(0);
}

void sub_1001A5CA4(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  id v10;
  char v11;
  uint64_t v12;
  uint64_t inited;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const __CFString *v17;
  const __CFString *v18;
  const __CFString *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const __CFString *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const __CFString *v29;
  uint64_t v30;
  uint64_t v31;
  const __CFString *v32;
  unint64_t v33;
  void *v34;
  Class isa;
  unsigned int v36;
  Swift::String v37;
  void *object;
  id v39;
  _QWORD v40[2];
  CFStringRef v41;
  uint64_t v42;
  _DWORD v43[104];

  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (_QWORD *)((char *)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(void **)(v1 + OBJC_IVAR____TtC10seserviced27SESPrivacyKeyImplementation_queue);
  *v8 = v9;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  v10 = v9;
  v11 = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  if ((v11 & 1) != 0)
  {
    v12 = sub_100063D3C(&qword_1003460E0);
    inited = swift_initStackObject(v12, v43);
    *(_OWORD *)(inited + 16) = xmmword_1002892A0;
    v40[1] = v2;
    v41 = kSecClass;
    type metadata accessor for CFString(0);
    v15 = v14;
    v16 = sub_1000639EC(&qword_100344AD8, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_1002887EC);
    v17 = (id)kSecClass;
    AnyHashable.init<A>(_:)(&v41, v15, v16);
    *(_QWORD *)(inited + 96) = v15;
    *(_QWORD *)(inited + 72) = kSecClassGenericPassword;
    v41 = kSecAttrAccount;
    v18 = (id)kSecClassGenericPassword;
    v19 = (id)kSecAttrAccount;
    AnyHashable.init<A>(_:)(&v41, v15, v16);
    v20 = objc_msgSend(a1, "groupIdentifier");
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    *(_QWORD *)(inited + 168) = &type metadata for String;
    *(_QWORD *)(inited + 144) = v21;
    *(_QWORD *)(inited + 152) = v23;
    v41 = kSecAttrService;
    v24 = (id)kSecAttrService;
    AnyHashable.init<A>(_:)(&v41, v15, v16);
    v25 = objc_msgSend(a1, "keyIdentifier");
    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    v28 = v27;

    *(_QWORD *)(inited + 240) = &type metadata for String;
    *(_QWORD *)(inited + 216) = v26;
    *(_QWORD *)(inited + 224) = v28;
    v41 = kSecAttrAccessGroup;
    v29 = (id)kSecAttrAccessGroup;
    AnyHashable.init<A>(_:)(&v41, v15, v16);
    v31 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10seserviced27SESPrivacyKeyImplementation_keychainGroup);
    v30 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10seserviced27SESPrivacyKeyImplementation_keychainGroup + 8);
    *(_QWORD *)(inited + 312) = &type metadata for String;
    *(_QWORD *)(inited + 288) = v31;
    *(_QWORD *)(inited + 296) = v30;
    v41 = kSecAttrSynchronizable;
    swift_bridgeObjectRetain(v30);
    v32 = (id)kSecAttrSynchronizable;
    AnyHashable.init<A>(_:)(&v41, v15, v16);
    *(_QWORD *)(inited + 384) = &type metadata for Bool;
    *(_BYTE *)(inited + 360) = 1;
    v33 = sub_10017C368(inited);
    v34 = *(void **)(v1 + OBJC_IVAR____TtC10seserviced27SESPrivacyKeyImplementation_keychainWrapper);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v33);
    v36 = objc_msgSend(v34, "deleteItem:", isa);

    if (v36)
    {
      sub_10006C25C(0, (unint64_t *)&qword_1003469E0, NSError_ptr);
      v41 = 0;
      v42 = 0xE000000000000000;
      _StringGuts.grow(_:)(24);
      swift_bridgeObjectRelease(v42);
      v41 = (CFStringRef)0xD000000000000016;
      v42 = 0x80000001002BF850;
      v43[103] = v36;
      v37._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
      object = v37._object;
      String.append(_:)(v37);
      swift_bridgeObjectRelease(object);
      v39 = sub_1001E2838(0, 1, (uint64_t)v41, v42, 0);
      swift_willThrow(v39);
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1001A60FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  id v4;

  if (a1)
    v3 = _convertErrorToNSError(_:)(a1);
  else
    v3 = 0;
  v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);

}

uint64_t sub_1001A6148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void *v19;
  _QWORD *v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD aBlock[5];
  _QWORD *v33;

  v11 = type metadata accessor for DispatchWorkItemFlags(0);
  v30 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchQoS(0);
  v28 = *(_QWORD *)(v15 - 8);
  v29 = v15;
  __chkstk_darwin(v15, v16);
  v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1003446E8 != -1)
    swift_once(&qword_1003446E8, sub_1001A7798);
  v19 = *(void **)(qword_100349088 + OBJC_IVAR____TtC10seserviced27SESPrivacyKeyImplementation_queue);
  v20 = (_QWORD *)swift_allocObject(&unk_10030C320, 64, 7);
  v20[2] = v5;
  v20[3] = a1;
  v20[4] = a2;
  v20[5] = a3;
  v20[6] = a4;
  v20[7] = a5;
  aBlock[4] = sub_1001A9448;
  v33 = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100071C98;
  aBlock[3] = &unk_10030C338;
  v21 = _Block_copy(aBlock);
  v22 = v19;
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a3);
  v23 = swift_retain(a5);
  static DispatchQoS.unspecified.getter(v23);
  v31 = _swiftEmptyArrayStorage;
  v24 = sub_1000639EC((unint64_t *)&qword_100344A20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v25 = sub_100063D3C((uint64_t *)&unk_100346200);
  v26 = sub_100127660((unint64_t *)&qword_100344A30, (uint64_t *)&unk_100346200);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v25, v26, v11, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v18, v14, v21);
  _Block_release(v21);

  (*(void (**)(char *, uint64_t))(v30 + 8))(v14, v11);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v18, v29);
  return swift_release(v33);
}

uint64_t sub_1001A6398(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(uint64_t, unint64_t, _QWORD))
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if (qword_1003446E8 != -1)
    swift_once(&qword_1003446E8, sub_1001A7798);
  v9 = sub_1001A6498(a2, a3, a4);
  v11 = v10;
  sub_100063C8C(v9, v10);
  a5(v9, v11, 0);
  sub_100063CD0(v9, v11);
  return sub_100063CD0(v9, v11);
}

uint64_t sub_1001A6498(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  void *v32;
  id v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  void *v47;
  uint64_t v48;
  id v49;
  uint64_t result;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  NSString v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  Swift::String v61;
  Swift::String v62;
  Swift::String v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  Swift::String v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  _QWORD v102[2];
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  id v107;

  v4 = v3;
  v107 = a3;
  v7 = type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey.PrivateKey(0);
  v9 = __chkstk_darwin(v7, v8);
  v96 = (uint64_t)&v91 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9, v11);
  v98 = (uint64_t)&v91 - v13;
  __chkstk_darwin(v12, v14);
  v16 = (char *)&v91 - v15;
  v17 = type metadata accessor for P256.KeyAgreement.PrivateKey(0);
  v99 = *(_QWORD *)(v17 - 8);
  v100 = v17;
  v19 = __chkstk_darwin(v17, v18);
  v95 = (char *)&v91 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v19, v21);
  v97 = (char *)&v91 - v23;
  __chkstk_darwin(v22, v24);
  v26 = (char *)&v91 - v25;
  v27 = type metadata accessor for DispatchPredicate(0);
  v28 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27, v29);
  v31 = (uint64_t *)((char *)&v91 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  v32 = *(void **)(v4 + OBJC_IVAR____TtC10seserviced27SESPrivacyKeyImplementation_queue);
  *v31 = v32;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v28 + 104))(v31, enum case for DispatchPredicate.onQueue(_:), v27);
  v33 = v32;
  v34 = _dispatchPreconditionTest(_:)(v31);
  (*(void (**)(_QWORD *, uint64_t))(v28 + 8))(v31, v27);
  if ((v34 & 1) == 0)
  {
    __break(1u);
    goto LABEL_48;
  }
  strcpy((char *)v102, "version");
  v102[1] = 0xE700000000000000;
  AnyHashable.init<A>(_:)(v102, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(a1 + 16))
  {
    v35 = sub_100187F3C((uint64_t)&v103);
    v36 = a2;
    if ((v37 & 1) != 0)
    {
      sub_100096CB0(*(_QWORD *)(a1 + 56) + 32 * v35, (uint64_t)&v105);
    }
    else
    {
      v105 = 0u;
      v106 = 0u;
    }
  }
  else
  {
    v105 = 0u;
    v106 = 0u;
    v36 = a2;
  }
  sub_100098C48((uint64_t)&v103);
  if (!*((_QWORD *)&v106 + 1))
  {
    sub_100096700((uint64_t)&v105, (uint64_t *)&unk_100346130);
    goto LABEL_13;
  }
  if ((swift_dynamicCast(v102, &v105, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {
LABEL_13:
    sub_10006C25C(0, (unint64_t *)&qword_1003469E0, NSError_ptr);
    v42 = 0x20676E697373694DLL;
    v43 = 0xEF6E6F6973726576;
LABEL_22:
    v49 = sub_1001E2838(0, 1, v42, v43, 0);
    swift_willThrow(v49);
    return v4;
  }
  v39 = v102[0];
  v38 = v102[1];
  strcpy((char *)v102, "publicKeyHash");
  HIWORD(v102[1]) = -4864;
  AnyHashable.init<A>(_:)(v102, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(a1 + 16) && (v40 = sub_100187F3C((uint64_t)&v103), (v41 & 1) != 0))
  {
    sub_100096CB0(*(_QWORD *)(a1 + 56) + 32 * v40, (uint64_t)&v105);
  }
  else
  {
    v105 = 0u;
    v106 = 0u;
  }
  sub_100098C48((uint64_t)&v103);
  if (!*((_QWORD *)&v106 + 1))
  {
    swift_bridgeObjectRelease(v38);
    sub_100096700((uint64_t)&v105, (uint64_t *)&unk_100346130);
LABEL_21:
    sub_10006C25C(0, (unint64_t *)&qword_1003469E0, NSError_ptr);
    v42 = 0xD000000000000018;
    v43 = 0x80000001002BF810;
    goto LABEL_22;
  }
  if ((swift_dynamicCast(v102, &v105, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {
    swift_bridgeObjectRelease(v38);
    goto LABEL_21;
  }
  v93 = v39;
  v94 = v38;
  v44 = v102[0];
  v45 = v102[1];
  swift_bridgeObjectRetain(v102[1]);
  v46 = v107;
  v47 = v101;
  v48 = sub_1001A537C(v36, (uint64_t)v107, v44, v45);
  if (v47)
  {
    swift_bridgeObjectRelease(v94);
    swift_bridgeObjectRelease_n(v45, 2);
    return v4;
  }
  v51 = v48;
  v92 = v44;
  v101 = (void *)v45;
  result = swift_bridgeObjectRelease(v45);
  if ((unint64_t)v51 >> 62)
  {
    if (v51 < 0)
      v89 = v51;
    else
      v89 = v51 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v51);
    v90 = _CocoaArrayWrapper.endIndex.getter(v89);
    result = swift_bridgeObjectRelease(v51);
    v52 = v90;
  }
  else
  {
    v52 = *(_QWORD *)((v51 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v53 = v46;
  v34 = v94;
  if (!v52)
  {
    swift_bridgeObjectRelease(v94);
    swift_bridgeObjectRelease(v51);
    v4 = sub_10006C25C(0, (unint64_t *)&qword_1003469E0, NSError_ptr);
    v103 = 0;
    v104 = 0xE000000000000000;
    _StringGuts.grow(_:)(36);
    swift_bridgeObjectRelease(v104);
    v103 = 0xD00000000000001CLL;
    v104 = 0x80000001002BF830;
    v61._countAndFlagsBits = v36;
    v61._object = v53;
    String.append(_:)(v61);
    v62._countAndFlagsBits = 543451424;
    v62._object = (void *)0xE400000000000000;
    String.append(_:)(v62);
    v63._countAndFlagsBits = v92;
    v64 = v101;
    v63._object = v101;
    String.append(_:)(v63);
    swift_bridgeObjectRelease(v64);
    v42 = v103;
    v43 = v104;
    goto LABEL_22;
  }
  if ((v51 & 0xC000000000000001) != 0)
  {
    v92 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v51);
    v54 = v101;
LABEL_30:
    swift_bridgeObjectRelease(v51);
    swift_bridgeObjectRelease(v54);
    v55 = String._bridgeToObjectiveC()();
    v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(SESPrivacyEncryptionSchemeAppleHPKEv1);
    v58 = v57;
    v107 = v55;
    v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
    if (v56 == v60 && v58 == v59)
    {
      swift_bridgeObjectRelease_n(v58, 2);
LABEL_35:
      swift_bridgeObjectRelease(v34);

      v28 = v92;
      sub_100124B74(v92+ OBJC_IVAR____TtCC10seserviced27SESPrivacyKeyImplementationP33_01F92E85A5349E347722992BF9B9F8DA10PrivacyKey_privateKey, (uint64_t)v16, type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey.PrivateKey);
      v69 = v99;
      v68 = v100;
      (*(void (**)(char *, char *, uint64_t))(v99 + 32))(v26, v16, v100);
      v70 = sub_100098748(a1, (uint64_t)v26);
LABEL_36:
      v4 = v70;
      (*(void (**)(char *, uint64_t))(v69 + 8))(v26, v68);
      swift_release(v28);
      return v4;
    }
    v65 = v56;
    v66 = v59;
    v67 = _stringCompareWithSmolCheck(_:_:expecting:)(v65, v58, v60, v59, 0);
    swift_bridgeObjectRelease(v58);
    swift_bridgeObjectRelease(v66);
    if ((v67 & 1) != 0)
      goto LABEL_35;
    v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(SESPrivacyEncryptionSchemeAppleECV2);
    v73 = v72;
    v75 = static String._unconditionallyBridgeFromObjectiveC(_:)(v107);
    v76 = v74;
    if (v71 == v75 && v73 == v74)
    {
      swift_bridgeObjectRelease_n(v73, 2);
LABEL_41:
      swift_bridgeObjectRelease(v34);

      v28 = v92;
      v78 = v98;
      sub_100124B74(v92+ OBJC_IVAR____TtCC10seserviced27SESPrivacyKeyImplementationP33_01F92E85A5349E347722992BF9B9F8DA10PrivacyKey_privateKey, v98, type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey.PrivateKey);
      v69 = v99;
      v68 = v100;
      v26 = v97;
      (*(void (**)(char *, uint64_t, uint64_t))(v99 + 32))(v97, v78, v100);
      v70 = (unint64_t)sub_100136244(a1, (uint64_t)v26);
      goto LABEL_36;
    }
    v77 = _stringCompareWithSmolCheck(_:_:expecting:)(v71, v73, v75, v74, 0);
    swift_bridgeObjectRelease(v73);
    swift_bridgeObjectRelease(v76);
    if ((v77 & 1) != 0)
      goto LABEL_41;
    v28 = v92;
    v79 = static String._unconditionallyBridgeFromObjectiveC(_:)(SESPrivacyEncryptionSchemeAppleECV3);
    v81 = v80;
    v83 = static String._unconditionallyBridgeFromObjectiveC(_:)(v107);
    v84 = v82;
    if (v79 == v83 && v81 == v82)
    {

      swift_bridgeObjectRelease_n(v81, 2);
LABEL_46:
      swift_bridgeObjectRelease(v34);
      v86 = v96;
      sub_100124B74(v28+ OBJC_IVAR____TtCC10seserviced27SESPrivacyKeyImplementationP33_01F92E85A5349E347722992BF9B9F8DA10PrivacyKey_privateKey, v96, type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey.PrivateKey);
      v69 = v99;
      v68 = v100;
      v26 = v95;
      (*(void (**)(char *, uint64_t, uint64_t))(v99 + 32))(v95, v86, v100);
      v70 = sub_1001F6FA0(a1);
      goto LABEL_36;
    }
    v85 = _stringCompareWithSmolCheck(_:_:expecting:)(v79, v81, v83, v82, 0);

    swift_bridgeObjectRelease(v81);
    swift_bridgeObjectRelease(v84);
    if ((v85 & 1) != 0)
      goto LABEL_46;
LABEL_48:
    v4 = sub_10006C25C(0, (unint64_t *)&qword_1003469E0, NSError_ptr);
    v103 = 0;
    v104 = 0xE000000000000000;
    _StringGuts.grow(_:)(20);
    swift_bridgeObjectRelease(v104);
    v103 = 0xD000000000000012;
    v104 = 0x80000001002BF7F0;
    v87._countAndFlagsBits = v93;
    v87._object = (void *)v34;
    String.append(_:)(v87);
    swift_bridgeObjectRelease(v34);
    v88 = sub_1001E2838(0, 1, v103, v104, 0);
    swift_willThrow(v88);
    swift_release(v28);
    return v4;
  }
  v54 = v101;
  if (*(_QWORD *)((v51 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v92 = *(_QWORD *)(v51 + 32);
    swift_retain(v92);
    goto LABEL_30;
  }
  __break(1u);
  return result;
}

void sub_1001A6EB8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  Class isa;
  uint64_t v7;
  id v8;

  if (a2 >> 60 != 15)
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    if (a3)
      goto LABEL_3;
LABEL_5:
    v7 = 0;
    goto LABEL_6;
  }
  isa = 0;
  if (!a3)
    goto LABEL_5;
LABEL_3:
  v7 = _convertErrorToNSError(_:)(a3);
LABEL_6:
  v8 = (id)v7;
  (*(void (**)(uint64_t, Class))(a4 + 16))(a4, isa);

}

uint64_t sub_1001A6F38(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void *v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD aBlock[5];
  _QWORD *v42;

  v34 = a6;
  v36 = a5;
  v35 = type metadata accessor for DispatchWorkItemFlags(0);
  v39 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35, v13);
  v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchQoS(0);
  v37 = *(_QWORD *)(v16 - 8);
  v38 = v16;
  __chkstk_darwin(v16, v17);
  v19 = (char *)&v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1003446E8 != -1)
    swift_once(&qword_1003446E8, sub_1001A7798);
  v20 = *(void **)(qword_100349088 + OBJC_IVAR____TtC10seserviced27SESPrivacyKeyImplementation_queue);
  v21 = (_QWORD *)swift_allocObject(&unk_10030C2A8, 80, 7);
  v21[2] = v7;
  v21[3] = a1;
  v21[4] = a2;
  v21[5] = a3;
  v22 = v36;
  v21[6] = a4;
  v21[7] = v22;
  v21[8] = v34;
  v21[9] = a7;
  aBlock[4] = sub_1001A8F84;
  v42 = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100071C98;
  aBlock[3] = &unk_10030C2C0;
  v23 = a7;
  v24 = _Block_copy(aBlock);
  v25 = v20;
  sub_100063C8C(a1, a2);
  v26 = a3;
  sub_100063C8C(a4, v22);
  v27 = swift_retain(v23);
  static DispatchQoS.unspecified.getter(v27);
  v40 = _swiftEmptyArrayStorage;
  v28 = sub_1000639EC((unint64_t *)&qword_100344A20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v29 = sub_100063D3C((uint64_t *)&unk_100346200);
  v30 = sub_100127660((unint64_t *)&qword_100344A30, (uint64_t *)&unk_100346200);
  v31 = v35;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v40, v29, v30, v35, v28);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v19, v15, v24);
  _Block_release(v24);

  (*(void (**)(char *, uint64_t))(v39 + 8))(v15, v31);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v19, v38);
  return swift_release(v42);
}

void sub_1001A71B0(uint64_t a1, void (*a2)(char *, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, void (*a7)(id, _QWORD))
{
  char *v13;
  id v14;
  Class isa;
  id v16;

  if (qword_1003446E8 != -1)
    swift_once(&qword_1003446E8, sub_1001A7798);
  v13 = sub_1001A7308(a2, a3, a4, a5, a6);
  v14 = objc_allocWithZone((Class)NSDictionary);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v13);
  v16 = objc_msgSend(v14, "initWithDictionary:", isa);

  a7(v16, 0);
}

char *sub_1001A7308(void (*a1)(char *, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  id v17;
  char *result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  Swift::String v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v11 = type metadata accessor for DispatchPredicate(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v15 = (uint64_t *)((char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = *(void **)(v5 + OBJC_IVAR____TtC10seserviced27SESPrivacyKeyImplementation_queue);
  *v15 = v16;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v12 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v11);
  v17 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)(v15);
  result = (char *)(*(uint64_t (**)(_QWORD *, uint64_t))(v12 + 8))(v15, v11);
  if ((v16 & 1) == 0)
  {
    __break(1u);
    return result;
  }
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(SESPrivacyEncryptionSchemeAppleHPKEv1);
  v21 = v20;
  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  if (v19 == v22 && v21 == v23)
  {
    swift_bridgeObjectRelease_n(v21, 2);
    return sub_1000982B4((uint64_t)a1, a2, a4, a5);
  }
  v25 = v23;
  v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v21, v22, v23, 0);
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(v25);
  if ((v26 & 1) != 0)
    return sub_1000982B4((uint64_t)a1, a2, a4, a5);
  v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(SESPrivacyEncryptionSchemeAppleECV2);
  v29 = v28;
  v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  if (v27 == v30 && v29 == v31)
  {
    swift_bridgeObjectRelease_n(v29, 2);
    return sub_100135AD0(a1, a2, a4, a5);
  }
  v33 = v31;
  v34 = _stringCompareWithSmolCheck(_:_:expecting:)(v27, v29, v30, v31, 0);
  swift_bridgeObjectRelease(v29);
  swift_bridgeObjectRelease(v33);
  if ((v34 & 1) != 0)
    return sub_100135AD0(a1, a2, a4, a5);
  v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(SESPrivacyEncryptionSchemeAppleECV3);
  v37 = v36;
  v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v40 = v38;
  if (v35 == v39 && v37 == v38)
  {
    swift_bridgeObjectRelease_n(v37, 2);
    return (char *)sub_1001F7618((uint64_t)a1, a2, a4, a5);
  }
  v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v35, v37, v39, v38, 0);
  swift_bridgeObjectRelease(v37);
  swift_bridgeObjectRelease(v40);
  if ((v41 & 1) != 0)
    return (char *)sub_1001F7618((uint64_t)a1, a2, a4, a5);
  sub_10006C25C(0, (unint64_t *)&qword_1003469E0, NSError_ptr);
  v46 = 0;
  v47 = 0xE000000000000000;
  _StringGuts.grow(_:)(20);
  v42._object = (void *)0x80000001002BF7F0;
  v42._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v42);
  v48 = a3;
  type metadata accessor for SESPrivacyEncryptionScheme(0);
  _print_unlocked<A, B>(_:_:)(&v48, &v46, v43, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v44 = sub_1001E2838(0, 1, v46, v47, 0);
  return (char *)swift_willThrow(v44);
}

void sub_1001A7740(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  id v6;

  if (a2)
    v5 = _convertErrorToNSError(_:)(a2);
  else
    v5 = 0;
  v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);

}

id sub_1001A7798()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SESPrivacyKeyImplementation(0)), "init");
  qword_100349088 = (uint64_t)result;
  return result;
}

uint64_t sub_1001A77C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t (*v14)(_QWORD);
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;

  v1 = v0;
  v33 = type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey.KeychainRepresentation(0);
  __chkstk_darwin(v33, v2);
  v4 = (uint64_t *)((char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for P256.KeyAgreement.PrivateKey(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey.PrivateKey(0);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100124B74(v1+ OBJC_IVAR____TtCC10seserviced27SESPrivacyKeyImplementationP33_01F92E85A5349E347722992BF9B9F8DA10PrivacyKey_privateKey, (uint64_t)v13, v14);
  v15 = (*(uint64_t (**)(char *, char *, uint64_t))(v6 + 32))(v9, v13, v5);
  v16 = P256.KeyAgreement.PrivateKey.derRepresentation.getter(v15);
  v18 = v17;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  v20 = *(_QWORD *)(v1
                  + OBJC_IVAR____TtCC10seserviced27SESPrivacyKeyImplementationP33_01F92E85A5349E347722992BF9B9F8DA10PrivacyKey_keyIdentifier);
  v19 = *(_QWORD *)(v1
                  + OBJC_IVAR____TtCC10seserviced27SESPrivacyKeyImplementationP33_01F92E85A5349E347722992BF9B9F8DA10PrivacyKey_keyIdentifier
                  + 8);
  v21 = *(_QWORD *)(v1
                  + OBJC_IVAR____TtCC10seserviced27SESPrivacyKeyImplementationP33_01F92E85A5349E347722992BF9B9F8DA10PrivacyKey_groupIdentifier);
  v22 = *(_QWORD *)(v1
                  + OBJC_IVAR____TtCC10seserviced27SESPrivacyKeyImplementationP33_01F92E85A5349E347722992BF9B9F8DA10PrivacyKey_groupIdentifier
                  + 8);
  v23 = v1
      + OBJC_IVAR____TtCC10seserviced27SESPrivacyKeyImplementationP33_01F92E85A5349E347722992BF9B9F8DA10PrivacyKey_creationDate;
  v24 = (char *)v4 + *(int *)(v33 + 32);
  v25 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v24, v23, v25);
  *v4 = v16;
  v4[1] = v18;
  v4[2] = v20;
  v4[3] = v19;
  v4[4] = v21;
  v4[5] = v22;
  v26 = type metadata accessor for PropertyListEncoder(0);
  swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  sub_100063C8C(v16, v18);
  swift_bridgeObjectRetain(v19);
  v27 = swift_bridgeObjectRetain(v22);
  v28 = PropertyListEncoder.init()(v27);
  v29 = sub_1000639EC(&qword_100349268, type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey.KeychainRepresentation, (uint64_t)&unk_10028C260);
  v30 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v4, v33, v29);
  sub_1001247E8((uint64_t)v4, type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey.KeychainRepresentation);
  sub_100063CD0(v16, v18);
  swift_release(v28);
  return v30;
}

void *sub_1001A7A1C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  Class isa;
  unsigned int v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  id v26;
  uint64_t v27;
  id v28;
  id v29;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  _QWORD *v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;

  v2 = type metadata accessor for NSFastEnumerationIterator(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)&v39 = 0;
  *(_QWORD *)&v37 = 0;
  v8 = objc_msgSend(v0, "copyMultipleItemData:outDatas:error:", isa, &v39, &v37);

  v9 = (void *)v37;
  v10 = (void *)v39;
  if (v8)
  {
    if ((_QWORD)v39)
    {
      v11 = (id)v37;
      v12 = v10;
      v13 = (uint64_t)objc_msgSend(v12, "count");
      v36 = _swiftEmptyArrayStorage;
      sub_1001929A4(0, v13 & ~(v13 >> 63), 0);
      v14 = v12;
      NSArray.makeIterator()();

      if (v13 < 0)
      {
        __break(1u);
        goto LABEL_24;
      }
      v32 = v14;
      v33 = v3;
      v34 = v1;
      if (v13)
      {
        v15 = sub_1000639EC(&qword_100349250, (uint64_t (*)(uint64_t))&type metadata accessor for NSFastEnumerationIterator, (uint64_t)&protocol conformance descriptor for NSFastEnumerationIterator);
        while (1)
        {
          dispatch thunk of IteratorProtocol.next()(&v39, v2, v15);
          if (!v40)
            break;
          sub_100096CB0((uint64_t)&v39, (uint64_t)&v37);
          swift_dynamicCast(&v41, &v37, (char *)&type metadata for Any + 8, &type metadata for Data, 7);
          sub_10006BA9C(&v39);
          v35 = v41;
          v16 = v36;
          if ((swift_isUniquelyReferenced_nonNull_native(v36) & 1) == 0)
          {
            sub_1001929A4(0, v16[2] + 1, 1);
            v16 = v36;
          }
          v18 = v16[2];
          v17 = v16[3];
          if (v18 >= v17 >> 1)
          {
            sub_1001929A4(v17 > 1, v18 + 1, 1);
            v16 = v36;
          }
          v16[2] = v18 + 1;
          *(_OWORD *)&v16[2 * v18 + 4] = v35;
          if (!--v13)
            goto LABEL_14;
        }
LABEL_24:
        __break(1u);
      }
LABEL_14:
      v22 = sub_1000639EC(&qword_100349250, (uint64_t (*)(uint64_t))&type metadata accessor for NSFastEnumerationIterator, (uint64_t)&protocol conformance descriptor for NSFastEnumerationIterator);
      dispatch thunk of IteratorProtocol.next()(&v37, v2, v22);
      while (v38)
      {
        sub_10006C2B4(&v37, &v39);
        sub_100096CB0((uint64_t)&v39, (uint64_t)&v37);
        swift_dynamicCast(&v41, &v37, (char *)&type metadata for Any + 8, &type metadata for Data, 7);
        sub_10006BA9C(&v39);
        v35 = v41;
        v23 = v36;
        if ((swift_isUniquelyReferenced_nonNull_native(v36) & 1) == 0)
        {
          sub_1001929A4(0, v23[2] + 1, 1);
          v23 = v36;
        }
        v25 = v23[2];
        v24 = v23[3];
        if (v25 >= v24 >> 1)
        {
          sub_1001929A4(v24 > 1, v25 + 1, 1);
          v23 = v36;
        }
        v23[2] = v25 + 1;
        *(_OWORD *)&v23[2 * v25 + 4] = v35;
        dispatch thunk of IteratorProtocol.next()(&v37, v2, v22);
      }
      (*(void (**)(char *, uint64_t))(v33 + 8))(v6, v2);
      sub_100096700((uint64_t)&v37, (uint64_t *)&unk_100346130);
      v26 = v32;

      v9 = v36;
    }
    else
    {
      v27 = sub_10006C25C(0, (unint64_t *)&qword_1003469E0, NSError_ptr);
      v28 = v9;
      v9 = (void *)v27;
      v29 = sub_1001E2838(0, 1, 0xD000000000000033, 0x80000001002BF750, 0);
      swift_willThrow(v29);
    }
  }
  else
  {
    v19 = (id)v37;
    v20 = v10;
    _convertNSErrorToError(_:)(v9);

    swift_willThrow(v21);
  }
  return v9;
}

uint64_t sub_1001A7E84()
{
  return 1;
}

Swift::Int sub_1001A7E8C()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  String.hash(into:)(v1, 909455952, 0xE400000000000000);
  return Hasher._finalize()();
}

uint64_t sub_1001A7ED4(uint64_t a1)
{
  return String.hash(into:)(a1, 909455952, 0xE400000000000000);
}

Swift::Int sub_1001A7EE4()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  String.hash(into:)(v1, 909455952, 0xE400000000000000);
  return Hasher._finalize()();
}

uint64_t sub_1001A7F28@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100306020, v3);
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

void sub_1001A7F78(_QWORD *a1@<X8>)
{
  *a1 = 909455952;
  a1[1] = 0xE400000000000000;
}

uint64_t sub_1001A7F8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001AAA7C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001A7FE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001AAA7C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1001A8034(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  char v24;
  __int128 v25;

  v3 = v1;
  v5 = sub_100063D3C(&qword_100349328);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10006BA78(a1, v10);
  v12 = sub_1001AA434();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SESPrivacyKeyImplementation.PrivacyKey.KeychainRepresentation.CodingKeys, &type metadata for SESPrivacyKeyImplementation.PrivacyKey.KeychainRepresentation.CodingKeys, v12, v10, v11);
  LOBYTE(v25) = 0;
  v13 = sub_1001AA4BC();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v13, &v25, v5, &type metadata for SESPrivacyKeyImplementation.PrivacyKey.PrivateKeyType, v13);
  if (!v2)
  {
    v25 = *v3;
    v24 = 1;
    v14 = sub_10014DEDC();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v25, &v24, v5, &type metadata for Data, v14);
    v15 = *((_QWORD *)v3 + 2);
    v16 = *((_QWORD *)v3 + 3);
    LOBYTE(v25) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v15, v16, &v25, v5);
    v17 = *((_QWORD *)v3 + 4);
    v18 = *((_QWORD *)v3 + 5);
    LOBYTE(v25) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v17, v18, &v25, v5);
    v19 = (uint64_t)v3
        + *(int *)(type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey.KeychainRepresentation(0) + 32);
    LOBYTE(v25) = 4;
    v20 = type metadata accessor for Date(0);
    v21 = sub_1000639EC(&qword_100347B00, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v19, &v25, v5, v20, v21);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1001A8224@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD v34[3];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD v42[2];
  char v43;

  v37 = a2;
  v36 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36, v4);
  v6 = (_QWORD *)((char *)v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v39 = sub_100063D3C(&qword_100349310);
  v7 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39, v8);
  v10 = (char *)v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey.KeychainRepresentation(0);
  __chkstk_darwin(v11, v12);
  v14 = (char *)v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1[3];
  v16 = a1[4];
  v40 = a1;
  sub_10006BA78(a1, v15);
  v17 = sub_1001AA434();
  v38 = v10;
  v18 = v41;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SESPrivacyKeyImplementation.PrivacyKey.KeychainRepresentation.CodingKeys, &type metadata for SESPrivacyKeyImplementation.PrivacyKey.KeychainRepresentation.CodingKeys, v17, v15, v16);
  if (v18)
    return sub_10006BA9C(v40);
  v35 = v11;
  v19 = v7;
  v41 = v6;
  v20 = v14;
  v22 = v36;
  v21 = v37;
  LOBYTE(v42[0]) = 0;
  v23 = sub_1001AA478();
  v25 = v38;
  v24 = v39;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v26, &type metadata for SESPrivacyKeyImplementation.PrivacyKey.PrivateKeyType, v42, v39, &type metadata for SESPrivacyKeyImplementation.PrivacyKey.PrivateKeyType, v23);
  v43 = 1;
  v27 = sub_10014DDCC();
  KeyedDecodingContainer.decode<A>(_:forKey:)(v42, &type metadata for Data, &v43, v24, &type metadata for Data, v27);
  v28 = v42[1];
  *(_QWORD *)v20 = v42[0];
  *((_QWORD *)v20 + 1) = v28;
  v34[2] = v28;
  LOBYTE(v42[0]) = 2;
  *((_QWORD *)v20 + 2) = KeyedDecodingContainer.decode(_:forKey:)(v42, v24);
  *((_QWORD *)v20 + 3) = v29;
  v34[0] = 0;
  v34[1] = v29;
  LOBYTE(v42[0]) = 3;
  *((_QWORD *)v20 + 4) = KeyedDecodingContainer.decode(_:forKey:)(v42, v24);
  *((_QWORD *)v20 + 5) = v30;
  LOBYTE(v42[0]) = 4;
  v31 = sub_1000639EC(&qword_100347A98, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v32 = v41;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v41, v22, v42, v24, v22, v31);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v25, v24);
  (*(void (**)(char *, _QWORD *, uint64_t))(v3 + 32))(&v20[*(int *)(v35 + 32)], v32, v22);
  sub_100124B74((uint64_t)v20, v21, type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey.KeychainRepresentation);
  sub_10006BA9C(v40);
  return sub_1001247E8((uint64_t)v20, type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey.KeychainRepresentation);
}

uint64_t sub_1001A8584()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001A85B4 + 4 * byte_10028C1A0[*v0]))(0x6570795479656BLL, 0xE700000000000000);
}

uint64_t sub_1001A85B4()
{
  return 0x4B65746176697270;
}

uint64_t sub_1001A85D8()
{
  return 0x746E65644979656BLL;
}

uint64_t sub_1001A85FC()
{
  return 0x65644970756F7267;
}

uint64_t sub_1001A8620()
{
  return 0x6E6F697461657263;
}

uint64_t sub_1001A8640@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001AA7DC(a1, a2);
  *a3 = result;
  return result;
}

void sub_1001A8664(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_1001A8670(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001AA434();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001A8698(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001AA434();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001A86C0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001A8224(a1, a2);
}

uint64_t sub_1001A86D4(_QWORD *a1)
{
  return sub_1001A8034(a1);
}

uint64_t sub_1001A86E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1001247E8(v0+ OBJC_IVAR____TtCC10seserviced27SESPrivacyKeyImplementationP33_01F92E85A5349E347722992BF9B9F8DA10PrivacyKey_privateKey, type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey.PrivateKey);
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtCC10seserviced27SESPrivacyKeyImplementationP33_01F92E85A5349E347722992BF9B9F8DA10PrivacyKey_keyIdentifier
                                      + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtCC10seserviced27SESPrivacyKeyImplementationP33_01F92E85A5349E347722992BF9B9F8DA10PrivacyKey_groupIdentifier
                                      + 8));
  v1 = v0
     + OBJC_IVAR____TtCC10seserviced27SESPrivacyKeyImplementationP33_01F92E85A5349E347722992BF9B9F8DA10PrivacyKey_creationDate;
  v2 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

id sub_1001A8778()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v28;
  uint64_t v29;
  objc_class *ObjectType;
  objc_super v31;
  _QWORD *v32;

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType(v0);
  v2 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS.QoSClass(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v16, v17);
  v19 = (char *)&v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = OBJC_IVAR____TtC10seserviced27SESPrivacyKeyImplementation_queue;
  v28 = sub_10006C25C(0, (unint64_t *)&qword_1003461A0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v15, enum case for DispatchQoS.QoSClass.default(_:), v11);
  v20 = v1;
  DispatchQoS.init(qosClass:relativePriority:)(v15, 1);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v6);
  v32 = _swiftEmptyArrayStorage;
  v21 = sub_1000639EC((unint64_t *)&qword_100346E08, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v22 = sub_100063D3C(&qword_100346E10);
  v23 = sub_100127660((unint64_t *)&qword_100346E18, &qword_100346E10);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v32, v22, v23, v2, v21);
  v24 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000029, 0x80000001002BF790, v19, v5, v10, 0);
  *(_QWORD *)&v1[v29] = v24;
  v25 = OBJC_IVAR____TtC10seserviced27SESPrivacyKeyImplementation_keychainWrapper;
  *(_QWORD *)&v20[v25] = objc_msgSend((id)objc_opt_self(SESKeychainWrapper), "sharedInstance");
  v26 = &v20[OBJC_IVAR____TtC10seserviced27SESPrivacyKeyImplementation_keychainGroup];
  *(_QWORD *)v26 = 0xD000000000000028;
  *((_QWORD *)v26 + 1) = 0x80000001002BF7C0;
  Logger.init(subsystem:category:)(0xD000000000000014);

  v31.receiver = v20;
  v31.super_class = ObjectType;
  return objc_msgSendSuper2(&v31, "init");
}

uint64_t sub_1001A8B04()
{
  return type metadata accessor for SESPrivacyKeyImplementation(0);
}

uint64_t type metadata accessor for SESPrivacyKeyImplementation(uint64_t a1)
{
  return sub_10007BBF0(a1, (uint64_t *)&unk_1003490D8, (uint64_t)&nominal type descriptor for SESPrivacyKeyImplementation);
}

uint64_t sub_1001A8B20(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = "\b";
  v4[2] = &unk_10028C1F8;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1001A8BB0()
{
  return type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey(0);
}

uint64_t type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey(uint64_t a1)
{
  return sub_10007BBF0(a1, qword_100349130, (uint64_t)&nominal type descriptor for SESPrivacyKeyImplementation.PrivacyKey);
}

uint64_t sub_1001A8BCC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[4];

  result = type metadata accessor for P256.KeyAgreement.PrivateKey(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = &unk_10028C1F8;
    v5[2] = &unk_10028C1F8;
    result = type metadata accessor for Date(319);
    if (v4 <= 0x3F)
    {
      v5[3] = *(_QWORD *)(result - 8) + 64;
      result = swift_updateClassMetadata2(a1, 256, 4, v5, a1 + 80);
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t *sub_1001A8C60(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v7);
  }
  else
  {
    v6 = type metadata accessor for P256.KeyAgreement.PrivateKey(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  }
  return a1;
}

uint64_t sub_1001A8CD0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for P256.KeyAgreement.PrivateKey(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_1001A8D04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for P256.KeyAgreement.PrivateKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_1001A8D48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for P256.KeyAgreement.PrivateKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_1001A8D8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for P256.KeyAgreement.PrivateKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_1001A8DD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for P256.KeyAgreement.PrivateKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_1001A8E14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for P256.KeyAgreement.PrivateKey(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1001A8E50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for P256.KeyAgreement.PrivateKey(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, a2, a3, v6);
}

uint64_t type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey.PrivateKey(uint64_t a1)
{
  return sub_10007BBF0(a1, (uint64_t *)&unk_100349240, (uint64_t)&nominal type descriptor for SESPrivacyKeyImplementation.PrivacyKey.PrivateKey);
}

uint64_t sub_1001A8EB0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for P256.KeyAgreement.PrivateKey(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8);
    swift_initEnumMetadataSingleCase(a1, 256, v4 + 64);
    result = 0;
    *(_DWORD *)(*(_QWORD *)(a1 - 8) + 84) = *(_DWORD *)(v4 + 84);
  }
  return result;
}

uint64_t sub_1001A8F0C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_1001A8F30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1001A7740(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_1001A8F48()
{
  uint64_t v0;

  sub_100063CD0(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));

  sub_100063CD0(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  swift_release(*(_QWORD *)(v0 + 72));
  return swift_deallocObject(v0, 80, 7);
}

void sub_1001A8F84()
{
  uint64_t v0;

  sub_1001A71B0(*(_QWORD *)(v0 + 16), *(void (**)(char *, uint64_t))(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(void (**)(id, _QWORD))(v0 + 64));
}

uint64_t sub_1001A8F98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001A8FA8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

_QWORD *sub_1001A8FB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *result;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  NSObject *v39;
  uint64_t v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73[2];
  unint64_t v74;

  v5 = type metadata accessor for Date(0);
  v67 = *(_QWORD *)(v5 - 8);
  v68 = v5;
  __chkstk_darwin(v5, v6);
  v66 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey.PrivateKey(0);
  v10 = __chkstk_darwin(v8, v9);
  v62 = (uint64_t)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10, v12);
  v15 = (char *)&v59 - v14;
  __chkstk_darwin(v13, v16);
  v61 = (uint64_t)&v59 - v17;
  v72 = type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey.KeychainRepresentation(0);
  __chkstk_darwin(v72, v18);
  v70 = (uint64_t *)((char *)&v59 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  result = _swiftEmptyArrayStorage;
  v74 = (unint64_t)_swiftEmptyArrayStorage;
  v21 = *(_QWORD *)(a1 + 16);
  if (v21)
  {
    v69 = v15;
    v71 = a2 + OBJC_IVAR____TtC10seserviced27SESPrivacyKeyImplementation_logger;
    v22 = type metadata accessor for PropertyListDecoder(0);
    swift_bridgeObjectRetain(a1);
    v60 = a1;
    v23 = (unint64_t *)(a1 + 40);
    v24 = v2;
    v25 = v70;
    do
    {
      v27 = *(v23 - 1);
      v26 = *v23;
      swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
      v28 = sub_100063C8C(v27, v26);
      v32 = PropertyListDecoder.init()(v28, v29, v30, v31);
      v33 = sub_1000639EC(&qword_100349258, type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey.KeychainRepresentation, (uint64_t)&unk_10028C288);
      dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v72, v27, v26, v72, v33);
      if (v24)
      {
        swift_release(v32);
        v34 = swift_errorRelease(v24);
        v24 = 0;
        v39 = Logger.logObject.getter(v34);
        v41 = static os_log_type_t.error.getter(v39, v40);
        if (os_log_type_enabled(v39, v41))
        {
          v42 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v42 = 0;
          _os_log_impl((void *)&_mh_execute_header, v39, v41, "Failed to deserialize keychain data?", v42, 2u);
          v43 = v42;
          v24 = 0;
          v25 = v70;
          swift_slowDealloc(v43, -1, -1);
        }

        sub_100063CD0(v27, v26);
      }
      else
      {
        swift_release(v32);
        v35 = v25[1];
        v73[0] = *v25;
        v73[1] = v35;
        sub_100063C8C(v73[0], v35);
        v36 = sub_1001A9468();
        v37 = v25;
        v38 = (uint64_t)v69;
        P256.KeyAgreement.PrivateKey.init<A>(derRepresentation:)(v73, &type metadata for Data, v36);
        v65 = 0;
        v44 = v38;
        v45 = v61;
        sub_1001A94AC(v44, v61);
        v46 = v45;
        v47 = v62;
        sub_1001A94AC(v46, v62);
        v48 = v37[3];
        v49 = v37[4];
        v50 = v37[5];
        v63 = v37[2];
        v64 = v49;
        (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v66, (char *)v37 + *(int *)(v72 + 32), v68);
        swift_bridgeObjectRetain(v48);
        swift_bridgeObjectRetain(v50);
        sub_1001247E8((uint64_t)v37, type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey.KeychainRepresentation);
        v51 = type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey(0);
        v52 = swift_allocObject(v51, *(unsigned int *)(v51 + 48), *(unsigned __int16 *)(v51 + 52));
        sub_1001A94AC(v47, v52+ OBJC_IVAR____TtCC10seserviced27SESPrivacyKeyImplementationP33_01F92E85A5349E347722992BF9B9F8DA10PrivacyKey_privateKey);
        v53 = (uint64_t *)(v52
                        + OBJC_IVAR____TtCC10seserviced27SESPrivacyKeyImplementationP33_01F92E85A5349E347722992BF9B9F8DA10PrivacyKey_keyIdentifier);
        *v53 = v63;
        v53[1] = v48;
        v54 = (uint64_t *)(v52
                        + OBJC_IVAR____TtCC10seserviced27SESPrivacyKeyImplementationP33_01F92E85A5349E347722992BF9B9F8DA10PrivacyKey_groupIdentifier);
        *v54 = v64;
        v54[1] = v50;
        (*(void (**)(uint64_t, char *, uint64_t))(v67 + 32))(v52+ OBJC_IVAR____TtCC10seserviced27SESPrivacyKeyImplementationP33_01F92E85A5349E347722992BF9B9F8DA10PrivacyKey_creationDate, v66, v68);
        v55 = sub_100063CD0(v27, v26);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v55);
        v57 = *(_QWORD *)((v74 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v56 = *(_QWORD *)((v74 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v57 >= v56 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v56 > 1, v57 + 1, 1);
        v58 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v57, v52);
        specialized Array._endMutation()(v58);
        v24 = v65;
        v25 = v70;
      }
      v23 += 2;
      --v21;
    }
    while (v21);
    swift_bridgeObjectRelease(v60);
    return (_QWORD *)v74;
  }
  return result;
}

void sub_1001A940C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_1001A6EB8(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

uint64_t sub_1001A9414()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_release(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1001A9448()
{
  return sub_1001A95B8((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001A6398);
}

uint64_t type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey.KeychainRepresentation(uint64_t a1)
{
  return sub_10007BBF0(a1, qword_1003492C8, (uint64_t)&nominal type descriptor for SESPrivacyKeyImplementation.PrivacyKey.KeychainRepresentation);
}

unint64_t sub_1001A9468()
{
  unint64_t result;

  result = qword_100349260;
  if (!qword_100349260)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_100349260);
  }
  return result;
}

uint64_t sub_1001A94AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey.PrivateKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1001A94F0(uint64_t a1)
{
  uint64_t v1;

  sub_1001A60FC(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1001A94F8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001A9524()
{
  uint64_t v0;

  return sub_1001A5BF0(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(uint64_t (**)(_QWORD))(v0 + 32));
}

uint64_t sub_1001A9530()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  swift_release(v0[8]);
  return swift_deallocObject(v0, 72, 7);
}

void sub_1001A9564()
{
  uint64_t v0;

  sub_1001A4F34(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(void (**)(id, _QWORD))(v0 + 56), *(_QWORD *)(v0 + 64));
}

uint64_t sub_1001A9578()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[5]);
  swift_release(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1001A95AC()
{
  return sub_1001A95B8((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001A4B1C);
}

uint64_t sub_1001A95B8(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t sub_1001A95CC(__CFString *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __CFString *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  id v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  Swift::String v35;
  __CFString *v36;
  __CFString *v37;
  uint64_t v38;
  __n128 v39;
  __CFString *v40;
  uint64_t v41;
  uint64_t v42;
  __CFString **v43;
  __CFString *v44;
  uint64_t v45;
  uint64_t inited;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const __CFString *v50;
  const __CFString *v51;
  __CFString *v52;
  __CFString *v53;
  uint64_t v54;
  uint64_t v55;
  __CFString *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  id v60;
  __CFString *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  __CFString *v66;
  uint64_t v67;
  Class isa;
  __CFString *v69;
  id v70;
  unint64_t v71;
  void *v72;
  Class v73;
  unsigned int v74;
  uint64_t v75;
  NSObject *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  os_log_type_t v80;
  uint8_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  Swift::String v85;
  void *object;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __CFString *v94;
  __CFString *length;
  __CFString *countAndFlagsBits;
  __CFString *v97;
  __CFString *v98;
  __CFString *v99;
  __CFString *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  CFStringRef v106;
  uint64_t v107;
  _DWORD v108[158];

  v101 = a2;
  v100 = a1;
  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  v103 = v3;
  v104 = v4;
  __chkstk_darwin(v3, v5);
  v99 = (__CFString *)((char *)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey.PrivateKey(0);
  __chkstk_darwin(v7, v8);
  v98 = (__CFString *)((char *)&v89 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = (__CFString *)type metadata accessor for P256.KeyAgreement.PublicKey(0);
  length = (__CFString *)v10[-1].length;
  countAndFlagsBits = v10;
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v89 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = (__CFString *)type metadata accessor for P256.KeyAgreement.PrivateKey(0);
  v14 = v97[-1].length;
  __chkstk_darwin(v97, v15);
  v17 = (char *)&v89 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DispatchPredicate(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18, v20);
  v22 = (uint64_t *)((char *)&v89 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v105 = v2;
  v23 = *(void **)(v2 + OBJC_IVAR____TtC10seserviced27SESPrivacyKeyImplementation_queue);
  *v22 = v23;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v19 + 104))(v22, enum case for DispatchPredicate.onQueue(_:), v18);
  v24 = v23;
  LOBYTE(v23) = _dispatchPreconditionTest(_:)(v22);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v19 + 8))(v22, v18);
  if ((v23 & 1) == 0)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v26 = P256.KeyAgreement.PrivateKey.init()(result);
  v27 = P256.KeyAgreement.PrivateKey.publicKey.getter(v26);
  v28 = P256.KeyAgreement.PublicKey.x963Representation.getter(v27);
  v30 = v29;
  ((void (*)(char *, __CFString *))length->info)(v13, countAndFlagsBits);
  sub_1001EDD38(v28, v30);
  v32 = v31;
  v34 = v33;
  sub_100063CD0(v28, v30);
  v35 = Data.base64EncodedString(options:)(0);
  length = (__CFString *)v35._object;
  countAndFlagsBits = (__CFString *)v35._countAndFlagsBits;
  sub_100063CD0(v32, v34);
  v37 = v97;
  v36 = v98;
  (*(void (**)(__CFString *, char *, __CFString *))(v14 + 16))(v98, v17, v97);
  v38 = v101;
  v39 = swift_bridgeObjectRetain(v101);
  v40 = v99;
  static Date.now.getter(v39);
  (*(void (**)(char *, __CFString *))(v14 + 8))(v17, v37);
  v41 = type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey(0);
  v42 = swift_allocObject(v41, *(unsigned int *)(v41 + 48), *(unsigned __int16 *)(v41 + 52));
  sub_1001A94AC((uint64_t)v36, v42+ OBJC_IVAR____TtCC10seserviced27SESPrivacyKeyImplementationP33_01F92E85A5349E347722992BF9B9F8DA10PrivacyKey_privateKey);
  *(Swift::String *)(v42
                   + OBJC_IVAR____TtCC10seserviced27SESPrivacyKeyImplementationP33_01F92E85A5349E347722992BF9B9F8DA10PrivacyKey_keyIdentifier) = v35;
  v43 = (__CFString **)(v42
                      + OBJC_IVAR____TtCC10seserviced27SESPrivacyKeyImplementationP33_01F92E85A5349E347722992BF9B9F8DA10PrivacyKey_groupIdentifier);
  v44 = v100;
  *v43 = v100;
  v43[1] = (__CFString *)v38;
  (*(void (**)(uint64_t, __CFString *, uint64_t))(v104 + 32))(v42+ OBJC_IVAR____TtCC10seserviced27SESPrivacyKeyImplementationP33_01F92E85A5349E347722992BF9B9F8DA10PrivacyKey_creationDate, v40, v103);
  v45 = sub_100063D3C(&qword_1003460E0);
  inited = swift_initStackObject(v45, v108);
  *(_OWORD *)(inited + 16) = xmmword_10028B430;
  v106 = kSecClass;
  type metadata accessor for CFString(0);
  v48 = v47;
  v49 = sub_1000639EC(&qword_100344AD8, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_1002887EC);
  v99 = (id)(id)kSecClass;
  v94 = (__CFString *)(inited + 32);
  AnyHashable.init<A>(_:)(&v106, v48, v49);
  *(_QWORD *)(inited + 96) = v48;
  *(_QWORD *)(inited + 72) = kSecClassGenericPassword;
  v106 = kSecAttrAccessible;
  v98 = (id)(id)kSecAttrAccessible;
  v50 = (id)kSecClassGenericPassword;
  v93 = inited + 104;
  AnyHashable.init<A>(_:)(&v106, v48, v49);
  *(_QWORD *)(inited + 168) = v48;
  *(_QWORD *)(inited + 144) = kSecAttrAccessibleAfterFirstUnlock;
  v106 = kSecAttrAccount;
  v97 = (id)(id)kSecAttrAccount;
  v51 = (id)kSecAttrAccessibleAfterFirstUnlock;
  v92 = inited + 176;
  AnyHashable.init<A>(_:)(&v106, v48, v49);
  *(_QWORD *)(inited + 240) = &type metadata for String;
  *(_QWORD *)(inited + 216) = v44;
  *(_QWORD *)(inited + 224) = v38;
  v106 = kSecAttrService;
  v52 = (id)kSecAttrService;
  swift_bridgeObjectRetain(v38);
  v100 = v52;
  v91 = inited + 248;
  AnyHashable.init<A>(_:)(&v106, v48, v49);
  *(_QWORD *)(inited + 312) = &type metadata for String;
  v53 = length;
  *(_QWORD *)(inited + 288) = countAndFlagsBits;
  *(_QWORD *)(inited + 296) = v53;
  v106 = kSecAttrAccessGroup;
  countAndFlagsBits = (id)(id)kSecAttrAccessGroup;
  swift_bridgeObjectRetain(v53);
  v90 = inited + 320;
  AnyHashable.init<A>(_:)(&v106, v48, v49);
  v54 = *(_QWORD *)(v105 + OBJC_IVAR____TtC10seserviced27SESPrivacyKeyImplementation_keychainGroup);
  v55 = *(_QWORD *)(v105 + OBJC_IVAR____TtC10seserviced27SESPrivacyKeyImplementation_keychainGroup + 8);
  *(_QWORD *)(inited + 384) = &type metadata for String;
  *(_QWORD *)(inited + 360) = v54;
  *(_QWORD *)(inited + 368) = v55;
  v106 = kSecAttrSynchronizable;
  length = (id)(id)kSecAttrSynchronizable;
  swift_bridgeObjectRetain(v55);
  AnyHashable.init<A>(_:)(&v106, v48, v49);
  *(_QWORD *)(inited + 456) = &type metadata for Bool;
  *(_BYTE *)(inited + 432) = 1;
  v106 = kSecValueData;
  v56 = (id)(id)kSecValueData;
  AnyHashable.init<A>(_:)(&v106, v48, v49);
  v101 = v42;
  v57 = v102;
  v58 = sub_1001A77C8();
  v102 = v57;
  if (v57)
  {

    sub_100098C48(inited + 464);
    v60 = &unk_100348940;
    sub_100096700(inited + 392, (uint64_t *)&unk_100348940);
    sub_100096700(v90, (uint64_t *)&unk_100348940);
    sub_100096700(v91, (uint64_t *)&unk_100348940);
    sub_100096700(v92, (uint64_t *)&unk_100348940);
    sub_100096700(v93, (uint64_t *)&unk_100348940);
    v61 = v94;
    sub_100096700((uint64_t)v94, (uint64_t *)&unk_100348940);
    swift_setDeallocating(inited);
    v62 = sub_100063D3C((uint64_t *)&unk_100348940);
    swift_arrayDestroy(v61, 0, v62);
    v63 = v101;
    goto LABEL_10;
  }
  v64 = v58;
  v65 = v59;
  v94 = v56;
  v66 = v99;
  v67 = v105;
  isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100063CD0(v64, v65);
  result = sub_10006C25C(0, (unint64_t *)&qword_100347EE8, NSData_ptr);
  *(_QWORD *)(inited + 528) = result;
  *(_QWORD *)(inited + 504) = isa;
  if (!kSecAttrSyncViewHint)
    goto LABEL_14;
  v106 = kSecAttrSyncViewHint;
  v69 = (id)(id)kSecAttrSyncViewHint;
  result = AnyHashable.init<A>(_:)(&v106, v48, v49);
  if (kSecAttrViewHintApplePay)
  {
    v70 = kSecAttrViewHintApplePay;

    *(_QWORD *)(inited + 600) = v48;
    *(_QWORD *)(inited + 576) = v70;
    v71 = sub_10017C368(inited);
    v72 = *(void **)(v67 + OBJC_IVAR____TtC10seserviced27SESPrivacyKeyImplementation_keychainWrapper);
    v73 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v71);
    v74 = objc_msgSend(v72, "addItem:", v73);

    v76 = Logger.logObject.getter(v75);
    v80 = static os_log_type_t.info.getter(v76, v77, v78, v79);
    if (os_log_type_enabled(v76, v80))
    {
      v81 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v81 = 67109120;
      LODWORD(v106) = v74;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, (char *)&v106 + 4, v81 + 4, v81 + 8);
      _os_log_impl((void *)&_mh_execute_header, v76, v80, "Added keychain item %d", v81, 8u);
      swift_slowDealloc(v81, -1, -1);
    }

    v82 = v103;
    v83 = v104;
    if (!v74)
    {
      v88 = v101;
      v60 = sub_1001A56C8();
      swift_setDeallocating(v88);
      sub_1001247E8(v88+ OBJC_IVAR____TtCC10seserviced27SESPrivacyKeyImplementationP33_01F92E85A5349E347722992BF9B9F8DA10PrivacyKey_privateKey, type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey.PrivateKey);
      swift_bridgeObjectRelease(*(_QWORD *)(v88
                                          + OBJC_IVAR____TtCC10seserviced27SESPrivacyKeyImplementationP33_01F92E85A5349E347722992BF9B9F8DA10PrivacyKey_keyIdentifier
                                          + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v88
                                          + OBJC_IVAR____TtCC10seserviced27SESPrivacyKeyImplementationP33_01F92E85A5349E347722992BF9B9F8DA10PrivacyKey_groupIdentifier
                                          + 8));
      (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v88+ OBJC_IVAR____TtCC10seserviced27SESPrivacyKeyImplementationP33_01F92E85A5349E347722992BF9B9F8DA10PrivacyKey_creationDate, v82);
      swift_deallocClassInstance(v88, *(unsigned int *)(*(_QWORD *)v88 + 48), *(unsigned __int16 *)(*(_QWORD *)v88 + 52));
      return (uint64_t)v60;
    }
    v84 = sub_10006C25C(0, (unint64_t *)&qword_1003469E0, NSError_ptr);
    v106 = 0;
    v107 = 0xE000000000000000;
    _StringGuts.grow(_:)(28);
    swift_bridgeObjectRelease(v107);
    v106 = (CFStringRef)0xD00000000000001ALL;
    v107 = 0x80000001002BF870;
    v108[157] = v74;
    v85._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
    object = v85._object;
    String.append(_:)(v85);
    swift_bridgeObjectRelease(object);
    v60 = (id)v84;
    v87 = sub_1001E2838(0, 1, (uint64_t)v106, v107, 0);
    swift_willThrow(v87);
    v63 = v101;
LABEL_10:
    swift_release(v63);
    return (uint64_t)v60;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t *sub_1001A9F1C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t, __n128);
  __n128 v17;
  uint64_t v18;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v18);
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_100063C8C(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = a2[3];
    a1[2] = a2[2];
    a1[3] = v9;
    v10 = a2[4];
    v11 = a2[5];
    v12 = *(int *)(a3 + 32);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    a1[4] = v10;
    a1[5] = v11;
    v15 = type metadata accessor for Date(0);
    v16 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v15 - 8) + 16);
    swift_bridgeObjectRetain(v9);
    v17 = swift_bridgeObjectRetain(v11);
    v16(v13, v14, v15, v17);
  }
  return a1;
}

uint64_t sub_1001A9FEC(uint64_t *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  sub_100063CD0(*a1, a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  v4 = (char *)a1 + *(int *)(a2 + 32);
  v5 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t *sub_1001AA048(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t, __n128);
  __n128 v16;

  v6 = *a2;
  v7 = a2[1];
  sub_100063C8C(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = a2[3];
  a1[2] = a2[2];
  a1[3] = v8;
  v9 = a2[4];
  v10 = a2[5];
  v11 = *(int *)(a3 + 32);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  a1[4] = v9;
  a1[5] = v10;
  v14 = type metadata accessor for Date(0);
  v15 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v14 - 8) + 16);
  swift_bridgeObjectRetain(v8);
  v16 = swift_bridgeObjectRetain(v10);
  v15(v12, v13, v14, v16);
  return a1;
}

uint64_t *sub_1001AA0EC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v6 = *a2;
  v7 = a2[1];
  sub_100063C8C(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_100063CD0(v8, v9);
  a1[2] = a2[2];
  v10 = a2[3];
  v11 = a1[3];
  a1[3] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  a1[4] = a2[4];
  v12 = a2[5];
  v13 = a1[5];
  a1[5] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = *(int *)(a3 + 32);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 24))(v15, v16, v17);
  return a1;
}

_OWORD *sub_1001AA1AC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  v5 = *(int *)(a3 + 32);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t *sub_1001AA210(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100063CD0(v6, v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = a1[3];
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = a1[5];
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(int *)(a3 + 32);
  v13 = (char *)a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  return a1;
}

uint64_t sub_1001AA2A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001AA2AC);
}

uint64_t sub_1001AA2AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t sub_1001AA328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001AA334);
}

uint64_t sub_1001AA334(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1001AA3A8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = (char *)&value witness table for () + 64;
  v4[1] = &unk_10028C248;
  v4[2] = &unk_10028C1F8;
  v4[3] = &unk_10028C1F8;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_1001AA434()
{
  unint64_t result;

  result = qword_100349318;
  if (!qword_100349318)
  {
    result = swift_getWitnessTable(&unk_10028C474, &type metadata for SESPrivacyKeyImplementation.PrivacyKey.KeychainRepresentation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100349318);
  }
  return result;
}

unint64_t sub_1001AA478()
{
  unint64_t result;

  result = qword_100349320;
  if (!qword_100349320)
  {
    result = swift_getWitnessTable(&unk_10028C44C, &type metadata for SESPrivacyKeyImplementation.PrivacyKey.PrivateKeyType);
    atomic_store(result, (unint64_t *)&qword_100349320);
  }
  return result;
}

unint64_t sub_1001AA4BC()
{
  unint64_t result;

  result = qword_100349330;
  if (!qword_100349330)
  {
    result = swift_getWitnessTable(&unk_10028C424, &type metadata for SESPrivacyKeyImplementation.PrivacyKey.PrivateKeyType);
    atomic_store(result, (unint64_t *)&qword_100349330);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SESPrivacyKeyImplementation.PrivacyKey.KeychainRepresentation.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1001AA54C + 4 * byte_10028C1AA[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1001AA580 + 4 * byte_10028C1A5[v4]))();
}

uint64_t sub_1001AA580(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001AA588(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001AA590);
  return result;
}

uint64_t sub_1001AA59C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001AA5A4);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1001AA5A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001AA5B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey.KeychainRepresentation.CodingKeys()
{
  return &type metadata for SESPrivacyKeyImplementation.PrivacyKey.KeychainRepresentation.CodingKeys;
}

uint64_t getEnumTagSinglePayload for SESPrivacyKeyImplementation.PrivacyKey.PrivateKeyType(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for SESPrivacyKeyImplementation.PrivacyKey.PrivateKeyType(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1001AA660 + 4 * byte_10028C1AF[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1001AA680 + 4 * byte_10028C1B4[v4]))();
}

_BYTE *sub_1001AA660(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1001AA680(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1001AA688(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1001AA690(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1001AA698(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1001AA6A0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey.PrivateKeyType()
{
  return &type metadata for SESPrivacyKeyImplementation.PrivacyKey.PrivateKeyType;
}

unint64_t sub_1001AA6C0()
{
  unint64_t result;

  result = qword_100349338;
  if (!qword_100349338)
  {
    result = swift_getWitnessTable(&unk_10028C344, &type metadata for SESPrivacyKeyImplementation.PrivacyKey.PrivateKeyType);
    atomic_store(result, (unint64_t *)&qword_100349338);
  }
  return result;
}

unint64_t sub_1001AA708()
{
  unint64_t result;

  result = qword_100349340;
  if (!qword_100349340)
  {
    result = swift_getWitnessTable(&unk_10028C3FC, &type metadata for SESPrivacyKeyImplementation.PrivacyKey.KeychainRepresentation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100349340);
  }
  return result;
}

unint64_t sub_1001AA750()
{
  unint64_t result;

  result = qword_100349348;
  if (!qword_100349348)
  {
    result = swift_getWitnessTable(&unk_10028C36C, &type metadata for SESPrivacyKeyImplementation.PrivacyKey.KeychainRepresentation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100349348);
  }
  return result;
}

unint64_t sub_1001AA798()
{
  unint64_t result;

  result = qword_100349350;
  if (!qword_100349350)
  {
    result = swift_getWitnessTable(&unk_10028C394, &type metadata for SESPrivacyKeyImplementation.PrivacyKey.KeychainRepresentation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100349350);
  }
  return result;
}

uint64_t sub_1001AA7DC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x6570795479656BLL && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6570795479656BLL, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x4B65746176697270 && a2 == 0xEE00617461447965)
  {
    v7 = 0xEE00617461447965;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4B65746176697270, 0xEE00617461447965, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x746E65644979656BLL && a2 == 0xED00007265696669)
  {
    v8 = 0xED00007265696669;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746E65644979656BLL, 0xED00007265696669, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x65644970756F7267 && a2 == 0xEF7265696669746ELL)
  {
    v9 = 0xEF7265696669746ELL;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65644970756F7267, 0xEF7265696669746ELL, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x6E6F697461657263 && a2 == 0xEC00000065746144)
  {
    swift_bridgeObjectRelease(0xEC00000065746144);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461657263, 0xEC00000065746144, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

unint64_t sub_1001AAA7C()
{
  unint64_t result;

  result = qword_100349358;
  if (!qword_100349358)
  {
    result = swift_getWitnessTable(&unk_10028C2CC, &type metadata for SESPrivacyKeyImplementation.PrivacyKey.PrivateKeyType);
    atomic_store(result, (unint64_t *)&qword_100349358);
  }
  return result;
}

uint64_t sub_1001AAAF4()
{
  uint64_t *v0;
  uint64_t *v1;
  Swift::String v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  void *object;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::String v32;
  void *v33;
  Swift::String v34;
  uint64_t v35;
  unint64_t v36;
  Swift::String v37;
  void *v38;
  Swift::String v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  Swift::String v45;

  v1 = v0;
  _StringGuts.grow(_:)(55);
  v2._countAndFlagsBits = 0x20444955556B6C74;
  v2._object = (void *)0xEB00000000202020;
  String.append(_:)(v2);
  sub_1001BD2CC(*v1, v1[1]);
  v4 = v3;
  v5 = sub_100063D3C((uint64_t *)&unk_100346060);
  v6 = sub_10006B86C();
  v7 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v5, v6);
  v9 = v8;
  swift_bridgeObjectRelease(v4);
  v10 = sub_1001C0620(8, v7, v9);
  v12 = v11;
  v14 = v13;
  v16 = v15;
  swift_bridgeObjectRelease(v9);
  v17._countAndFlagsBits = static String._fromSubstring(_:)(v10, v12, v14, v16);
  object = v17._object;
  String.append(_:)(v17);
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(object);
  v19._object = (void *)0xEC00000020444955;
  v19._countAndFlagsBits = 0x55746E657261700ALL;
  String.append(_:)(v19);
  sub_1001BD2CC(v1[2], v1[3]);
  v21 = v20;
  v22 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v5, v6);
  v24 = v23;
  swift_bridgeObjectRelease(v21);
  v25 = sub_1001C0620(8, v22, v24);
  v27 = v26;
  v29 = v28;
  v31 = v30;
  swift_bridgeObjectRelease(v24);
  v32._countAndFlagsBits = static String._fromSubstring(_:)(v25, v27, v29, v31);
  v33 = v32._object;
  String.append(_:)(v32);
  swift_bridgeObjectRelease(v31);
  swift_bridgeObjectRelease(v33);
  v34._countAndFlagsBits = 0x44495344746C610ALL;
  v34._object = (void *)0xEC00000020202020;
  String.append(_:)(v34);
  v35 = v1[4];
  v36 = v1[5];
  sub_100063C8C(v35, v36);
  v37._countAndFlagsBits = Data.description.getter(v35, v36);
  v38 = v37._object;
  String.append(_:)(v37);
  swift_bridgeObjectRelease(v38);
  sub_100063CD0(v35, v36);
  v39._countAndFlagsBits = 0x6465776F6C6C610ALL;
  v39._object = (void *)0xEC00000020444941;
  String.append(_:)(v39);
  sub_1001BD2CC(v1[6], v1[7]);
  v41 = v40;
  v42 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v5, v6);
  v44 = v43;
  swift_bridgeObjectRelease(v41);
  v45._countAndFlagsBits = v42;
  v45._object = v44;
  String.append(_:)(v45);
  swift_bridgeObjectRelease(v44);
  return 0;
}

uint64_t sub_1001AADC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t result;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  char v20;
  _BYTE v21[3];
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[3];
  ValueMetadata *v25;
  _UNKNOWN **v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v2 = v0;
  v25 = &_s16CommandCreateTLKVN;
  v26 = &off_10030C968;
  v3 = swift_allocObject(&unk_10030C6C8, 49, 7);
  v24[0] = v3;
  v4 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)v0;
  *(_OWORD *)(v3 + 32) = v4;
  *(_BYTE *)(v3 + 48) = *(_BYTE *)(v0 + 32);
  sub_1001AD324((uint64_t)&v27);
  v5 = v29;
  v6 = v30;
  v7 = v27;
  v8 = v28;
  v9 = v31;
  sub_1001AF824((uint64_t *)v2);
  sub_10013B504((uint64_t)v24, v7, v8, v5, v6, v9);
  v11 = v10;
  sub_1001241AC(v5, v6, v9);
  if (v1)
  {
    v34 = v32;
    sub_1001241D0(&v34);
    return sub_10006BA9C(v24);
  }
  v33 = v32;
  sub_1001241D0(&v33);
  sub_10006BA9C(v24);
  if (__OFADD__(v11, 5))
  {
    __break(1u);
    goto LABEL_8;
  }
  v22 = sub_10007C71C(v11 + 5);
  v23 = v12;
  v19 = 1920;
  if ((v11 & 0x8000000000000000) != 0)
  {
LABEL_8:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
    goto LABEL_10;
  }
  if (v11 < 0x100)
  {
    v20 = v11;
    Data._Representation.append(contentsOf:)(&v19, v21);
    v25 = &_s16CommandCreateTLKVN;
    v26 = &off_10030C968;
    v13 = swift_allocObject(&unk_10030C6C8, 49, 7);
    v24[0] = v13;
    v14 = *(_OWORD *)(v2 + 16);
    *(_OWORD *)(v13 + 16) = *(_OWORD *)v2;
    *(_OWORD *)(v13 + 32) = v14;
    *(_BYTE *)(v13 + 48) = *(_BYTE *)(v2 + 32);
    sub_1001AF824((uint64_t *)v2);
    v16 = sub_100136AB8(v24);
    v18 = v17;
    sub_10006BA9C(v24);
    Data.append(_:)(v16, v18);
    sub_100063CD0((uint64_t)v16, v18);
    return v22;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
LABEL_10:
  __break(1u);
  return result;
}

double sub_1001AB028@<D0>(_OWORD *a1@<X8>)
{
  __int128 v2;
  double result;
  _OWORD v4[2];
  __int128 v5;

  sub_1001AD324((uint64_t)v4);
  v2 = v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  result = *(double *)&v5;
  a1[2] = v5;
  return result;
}

Swift::Int sub_1001AB064()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD v10[9];

  Hasher.init(_seed:)(v10);
  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  sub_100063C8C(*(_QWORD *)v0, v2);
  Data.hash(into:)(v10, v1, v2);
  sub_100063CD0(v1, v2);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  sub_100063C8C(v3, v4);
  Data.hash(into:)(v10, v3, v4);
  sub_100063CD0(v3, v4);
  v5 = *(_QWORD *)(v0 + 32);
  v6 = *(_QWORD *)(v0 + 40);
  sub_100063C8C(v5, v6);
  Data.hash(into:)(v10, v5, v6);
  sub_100063CD0(v5, v6);
  v7 = *(_QWORD *)(v0 + 48);
  v8 = *(_QWORD *)(v0 + 56);
  sub_100063C8C(v7, v8);
  Data.hash(into:)(v10, v7, v8);
  sub_100063CD0(v7, v8);
  Hasher._combine(_:)(*(_BYTE *)(v0 + 64) & 1);
  return Hasher._finalize()();
}

double sub_1001AB160@<D0>(_OWORD *a1@<X8>)
{
  __int128 v2;
  double result;
  _OWORD v4[2];
  __int128 v5;

  sub_1001AB6B0((uint64_t)v4);
  v2 = v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  result = *(double *)&v5;
  a1[2] = v5;
  return result;
}

void sub_1001AB1A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  Swift::UInt8 v11;

  v3 = *(_QWORD *)v1;
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v8 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v9 = *(_QWORD *)(v1 + 48);
  v10 = *(_QWORD *)(v1 + 56);
  v11 = *(_BYTE *)(v1 + 64);
  sub_100063C8C(v3, v4);
  Data.hash(into:)(a1, v3, v4);
  sub_100063CD0(v3, v4);
  sub_100063C8C(v5, v6);
  Data.hash(into:)(a1, v5, v6);
  sub_100063CD0(v5, v6);
  sub_100063C8C(v8, v7);
  Data.hash(into:)(a1, v8, v7);
  sub_100063CD0(v8, v7);
  sub_100063C8C(v9, v10);
  Data.hash(into:)(a1, v9, v10);
  sub_100063CD0(v9, v10);
  Hasher._combine(_:)(v11);
}

Swift::Int sub_1001AB29C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  Swift::UInt8 v9;
  _QWORD v11[9];

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  v5 = *(_QWORD *)(v0 + 32);
  v6 = *(_QWORD *)(v0 + 40);
  v8 = *(_QWORD *)(v0 + 48);
  v7 = *(_QWORD *)(v0 + 56);
  v9 = *(_BYTE *)(v0 + 64);
  Hasher.init(_seed:)(v11);
  sub_100063C8C(v1, v2);
  Data.hash(into:)(v11, v1, v2);
  sub_100063CD0(v1, v2);
  sub_100063C8C(v3, v4);
  Data.hash(into:)(v11, v3, v4);
  sub_100063CD0(v3, v4);
  sub_100063C8C(v5, v6);
  Data.hash(into:)(v11, v5, v6);
  sub_100063CD0(v5, v6);
  sub_100063C8C(v8, v7);
  Data.hash(into:)(v11, v8, v7);
  sub_100063CD0(v8, v7);
  Hasher._combine(_:)(v9);
  return Hasher._finalize()();
}

uint64_t sub_1001AB3B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  char v8;
  char v9;
  char v10;
  char v11;
  uint64_t v13;
  uint64_t v14;

  v14 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(unsigned __int8 *)(a1 + 64);
  v13 = *(_QWORD *)(a1 + 24);
  v7 = *(unsigned __int8 *)(a2 + 64);
  sub_10007C23C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  if ((v8 & 1) == 0)
    return 0;
  sub_10007C23C(v14, v13);
  if ((v9 & 1) == 0)
    return 0;
  sub_10007C23C(v2, v4);
  if ((v10 & 1) == 0)
    return 0;
  sub_10007C23C(v3, v5);
  if ((v11 & 1) != 0)
    return v6 ^ v7 ^ 1u;
  else
    return 0;
}

double sub_1001AB4A4@<D0>(_OWORD *a1@<X8>)
{
  __int128 v2;
  double result;
  _OWORD v4[2];
  __int128 v5;

  sub_1001ADB88((uint64_t)v4);
  v2 = v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  result = *(double *)&v5;
  a1[2] = v5;
  return result;
}

uint64_t sub_1001AB4E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_100063D3C(&qword_100348A70);
  result = swift_allocObject(v2, 160, 7);
  *(_OWORD *)(result + 16) = xmmword_1002888F0;
  strcpy((char *)(result + 32), "ptAttestation");
  *(_WORD *)(result + 46) = -4864;
  *(_QWORD *)(result + 48) = 196;
  *(_WORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 72) = 0;
  *(_BYTE *)(result + 80) = -64;
  *(_QWORD *)(result + 88) = _swiftEmptyArrayStorage;
  *(_QWORD *)(result + 96) = 0x7472654364736163;
  *(_QWORD *)(result + 104) = 0xEF65746163696669;
  *(_QWORD *)(result + 112) = 197;
  *(_WORD *)(result + 120) = 0;
  *(_QWORD *)(result + 128) = 0;
  *(_QWORD *)(result + 136) = 0;
  *(_BYTE *)(result + 144) = -64;
  *(_QWORD *)(result + 152) = _swiftEmptyArrayStorage;
  *(_QWORD *)a1 = 231;
  *(_WORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = result;
  *(_QWORD *)(a1 + 24) = 1;
  *(_BYTE *)(a1 + 32) = 64;
  *(_QWORD *)(a1 + 40) = _swiftEmptyArrayStorage;
  return result;
}

double sub_1001AB5C0@<D0>(_OWORD *a1@<X8>)
{
  __int128 v2;
  double result;
  _OWORD v4[2];
  __int128 v5;

  sub_1001ADC6C((uint64_t)v4);
  v2 = v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  result = *(double *)&v5;
  a1[2] = v5;
  return result;
}

double sub_1001AB5FC@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = swift_allocObject(&unk_10030C9A8, 64, 7);
  *(_QWORD *)(v2 + 16) = 48;
  *(_WORD *)(v2 + 24) = 0;
  *(_QWORD *)&result = 3;
  *(_OWORD *)(v2 + 32) = xmmword_10028C4D0;
  *(_BYTE *)(v2 + 48) = -64;
  *(_QWORD *)(v2 + 56) = _swiftEmptyArrayStorage;
  *(_QWORD *)a1 = 232;
  *(_WORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0x80;
  *(_QWORD *)(a1 + 40) = _swiftEmptyArrayStorage;
  return result;
}

double sub_1001AB674@<D0>(_OWORD *a1@<X8>)
{
  __int128 v2;
  double result;
  _OWORD v4[2];
  __int128 v5;

  sub_1001AD438((uint64_t)v4);
  v2 = v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  result = *(double *)&v5;
  a1[2] = v5;
  return result;
}

double sub_1001AB6B0@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  double result;

  v2 = sub_100063D3C(&qword_100348A70);
  v3 = swift_allocObject(v2, 352, 7);
  *(_OWORD *)(v3 + 16) = xmmword_1002892A0;
  *(_QWORD *)(v3 + 32) = 0x444955556B6C74;
  *(_QWORD *)(v3 + 40) = 0xE700000000000000;
  *(_QWORD *)(v3 + 48) = 212;
  *(_WORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = 0;
  *(_BYTE *)(v3 + 80) = -64;
  *(_QWORD *)(v3 + 88) = &off_100305628;
  strcpy((char *)(v3 + 96), "parentTLKUUID");
  *(_WORD *)(v3 + 110) = -4864;
  *(_QWORD *)(v3 + 112) = 213;
  *(_WORD *)(v3 + 120) = 0;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_BYTE *)(v3 + 144) = -64;
  *(_QWORD *)(v3 + 152) = &off_100305678;
  *(_QWORD *)(v3 + 160) = 0x44495344746C61;
  *(_QWORD *)(v3 + 168) = 0xE700000000000000;
  *(_QWORD *)(v3 + 176) = 193;
  *(_WORD *)(v3 + 184) = 0;
  *(_QWORD *)(v3 + 192) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_BYTE *)(v3 + 208) = -64;
  *(_QWORD *)(v3 + 216) = &off_1003056C8;
  *(_QWORD *)(v3 + 224) = 0x416465776F6C6C61;
  *(_QWORD *)(v3 + 232) = 0xEA00000000004449;
  *(_QWORD *)(v3 + 240) = 214;
  *(_WORD *)(v3 + 248) = 0;
  *(_QWORD *)(v3 + 256) = 0;
  *(_QWORD *)(v3 + 264) = 0;
  *(_BYTE *)(v3 + 272) = -64;
  *(_QWORD *)(v3 + 280) = &off_100305718;
  *(_QWORD *)(v3 + 288) = 0xD000000000000011;
  *(_QWORD *)(v3 + 296) = 0x80000001002BF890;
  *(_QWORD *)(v3 + 304) = 215;
  *(_WORD *)(v3 + 312) = 0;
  *(_QWORD *)&result = 2;
  *(_OWORD *)(v3 + 320) = xmmword_10028C4E0;
  *(_BYTE *)(v3 + 336) = -64;
  *(_QWORD *)(v3 + 344) = _swiftEmptyArrayStorage;
  *(_QWORD *)a1 = 225;
  *(_WORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = 1;
  *(_BYTE *)(a1 + 32) = 64;
  *(_QWORD *)(a1 + 40) = _swiftEmptyArrayStorage;
  return result;
}

uint64_t sub_1001AB834@<X0>(unint64_t a1@<X0>, unint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t result;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char v62;

  if (a1 >> 61 != 3)
  {
    v31 = sub_100071B74();
    v32 = swift_allocError(&type metadata for ASN1Error, v31, 0, 0);
    *(_QWORD *)(v33 + 8) = 0;
    *(_QWORD *)(v33 + 16) = 0;
    *(_QWORD *)v33 = 4;
    *(_BYTE *)(v33 + 24) = 3;
    swift_willThrow(v32);
    return swift_release(a1 & 0x1FFFFFFFFFFFFFFFLL);
  }
  v4 = *(_QWORD *)(a1 + 16);
  if (!*(_QWORD *)(v4 + 16))
  {
    __break(1u);
    goto LABEL_32;
  }
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 16));
  v5 = sub_100187ED0(0x444955556B6C74, 0xE700000000000000);
  if ((v6 & 1) == 0)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v7 = a1 & 0x1FFFFFFFFFFFFFFFLL;
  v8 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v5);
  if (v8 >> 61 != 1)
  {
    v34 = sub_100071B74();
    swift_allocError(&type metadata for ASN1Error, v34, 0, 0);
    *(_QWORD *)(v35 + 8) = 0;
    *(_QWORD *)(v35 + 16) = 0;
    *(_QWORD *)v35 = 4;
    *(_BYTE *)(v35 + 24) = 3;
    v36 = v8 & 0x1FFFFFFFFFFFFFFFLL;
    v37 = swift_retain(v36);
    swift_willThrow(v37);
    swift_release(v36);
    swift_bridgeObjectRelease(v4);
    return swift_release(v7);
  }
  if (!*(_QWORD *)(v4 + 16))
    goto LABEL_33;
  v10 = *(_QWORD *)(v8 + 16);
  v9 = *(_QWORD *)(v8 + 24);
  sub_100063C8C(v10, v9);
  sub_100063C8C(v10, v9);
  v11 = sub_100187ED0(0x4C54746E65726170, 0xED0000444955554BLL);
  if ((v12 & 1) == 0)
  {
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v13 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v11);
  if (v13 >> 61 != 1)
  {
    v38 = sub_100071B74();
    swift_allocError(&type metadata for ASN1Error, v38, 0, 0);
    *(_QWORD *)(v39 + 8) = 0;
    *(_QWORD *)(v39 + 16) = 0;
    *(_QWORD *)v39 = 4;
    *(_BYTE *)(v39 + 24) = 3;
    v40 = v13 & 0x1FFFFFFFFFFFFFFFLL;
    v41 = swift_retain(v40);
    swift_willThrow(v41);
    swift_bridgeObjectRelease(v4);
    swift_release(v7);
    sub_100063CD0(v10, v9);
    swift_release(v40);
    v42 = v10;
    v43 = v9;
    return sub_100063CD0(v42, v43);
  }
  if (!*(_QWORD *)(v4 + 16))
    goto LABEL_35;
  v15 = *(_QWORD *)(v13 + 16);
  v14 = *(_QWORD *)(v13 + 24);
  sub_100063C8C(v15, v14);
  sub_100063C8C(v15, v14);
  v16 = sub_100187ED0(0x44495344746C61, 0xE700000000000000);
  if ((v17 & 1) == 0)
  {
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v16);
  v61 = v18 & 0xE000000000000000;
  if ((v18 & 0xE000000000000000) != 0x2000000000000000)
  {
    v44 = sub_100071B74();
    swift_allocError(&type metadata for ASN1Error, v44, 0, 0);
    *(_QWORD *)(v45 + 8) = 0;
    *(_QWORD *)(v45 + 16) = 0;
    *(_QWORD *)v45 = 4;
    *(_BYTE *)(v45 + 24) = 3;
    v29 = v18 & 0x1FFFFFFFFFFFFFFFLL;
    v46 = swift_retain(v29);
    swift_willThrow(v46);
    swift_bridgeObjectRelease(v4);
    swift_release(v7);
    v47 = 0;
    goto LABEL_23;
  }
  v60 = v15;
  if (!*(_QWORD *)(v4 + 16))
    goto LABEL_37;
  v19 = *(_QWORD *)(v18 + 16);
  v20 = *(_QWORD *)(v18 + 24);
  sub_100063C8C(v19, v20);
  v56 = v20;
  v57 = v19;
  sub_100063C8C(v19, v20);
  v21 = sub_100187ED0(0x416465776F6C6C61, 0xEA00000000004449);
  if ((v22 & 1) == 0)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  v23 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v21);
  v15 = v60;
  if (v23 >> 61 == 1)
  {
    v55 = v14;
    v24 = *(_QWORD *)(v23 + 16);
    v25 = *(_QWORD *)(v23 + 24);
    v54 = *(_QWORD *)(v4 + 16);
    sub_100063C8C(v24, v25);
    v58 = v25;
    v59 = v24;
    sub_100063C8C(v24, v25);
    if (v54)
    {
      v26 = sub_100187ED0(0xD000000000000011, 0x80000001002BF890);
      if ((v27 & 1) != 0)
      {
        v28 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v26);
        v29 = v28 & 0x1FFFFFFFFFFFFFFFLL;
        swift_retain(v28 & 0x1FFFFFFFFFFFFFFFLL);
        swift_bridgeObjectRelease(v4);
        if (!(v28 >> 61))
        {
          v62 = *(_BYTE *)(v28 + 16);
          swift_release(v28 & 0x1FFFFFFFFFFFFFFFLL);
          swift_release(v7);
          sub_100063C8C(v10, v9);
          sub_100063C8C(v60, v55);
          sub_100063C8C(v57, v56);
          sub_100063C8C(v59, v58);
          sub_100063CD0(v59, v58);
          sub_100063CD0(v57, v56);
          sub_100063CD0(v60, v55);
          sub_100063CD0(v10, v9);
          sub_100063CD0(v10, v9);
          sub_100063CD0(v60, v55);
          sub_100063CD0(v57, v56);
          result = sub_100063CD0(v59, v58);
          *(_QWORD *)a2 = v10;
          *(_QWORD *)(a2 + 8) = v9;
          *(_QWORD *)(a2 + 16) = v60;
          *(_QWORD *)(a2 + 24) = v55;
          *(_QWORD *)(a2 + 32) = v57;
          *(_QWORD *)(a2 + 40) = v56;
          *(_QWORD *)(a2 + 48) = v59;
          *(_QWORD *)(a2 + 56) = v58;
          *(_BYTE *)(a2 + 64) = v62;
          return result;
        }
        v51 = sub_100071B74();
        v52 = swift_allocError(&type metadata for ASN1Error, v51, 0, 0);
        *(_QWORD *)(v53 + 8) = 0;
        *(_QWORD *)(v53 + 16) = 0;
        *(_QWORD *)v53 = 4;
        *(_BYTE *)(v53 + 24) = 3;
        swift_willThrow(v52);
        swift_release(v7);
        sub_100063CD0(v59, v58);
        a2 = v56;
        v7 = v57;
        sub_100063CD0(v57, v56);
        v47 = 1;
        v14 = v55;
        goto LABEL_23;
      }
    }
LABEL_39:
    result = swift_bridgeObjectRelease(v4);
    __break(1u);
    return result;
  }
  v48 = sub_100071B74();
  swift_allocError(&type metadata for ASN1Error, v48, 0, 0);
  *(_QWORD *)(v49 + 8) = 0;
  *(_QWORD *)(v49 + 16) = 0;
  *(_QWORD *)v49 = 4;
  *(_BYTE *)(v49 + 24) = 3;
  v29 = v23 & 0x1FFFFFFFFFFFFFFFLL;
  v50 = swift_retain(v29);
  swift_willThrow(v50);
  swift_bridgeObjectRelease(v4);
  swift_release(v7);
  a2 = v56;
  v7 = v57;
  sub_100063CD0(v57, v56);
  v47 = 0;
LABEL_23:
  sub_100063CD0(v15, v14);
  sub_100063CD0(v10, v9);
  swift_release(v29);
  sub_100063CD0(v10, v9);
  result = sub_100063CD0(v15, v14);
  if (v61 == 0x2000000000000000)
  {
    result = sub_100063CD0(v7, a2);
    if ((v47 & 1) == 0)
      return result;
  }
  else if (!v47)
  {
    return result;
  }
  v43 = v58;
  v42 = v59;
  return sub_100063CD0(v42, v43);
}

double sub_1001ABE48@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double result;

  v2 = sub_100063D3C(&qword_100348A70);
  v3 = swift_allocObject(v2, 608, 7);
  *(_OWORD *)(v3 + 16) = xmmword_100288AD0;
  *(_QWORD *)(v3 + 32) = 0x6E6F6973726576;
  *(_QWORD *)(v3 + 40) = 0xE700000000000000;
  *(_QWORD *)(v3 + 48) = 2;
  *(_WORD *)(v3 + 56) = 0;
  *(_OWORD *)(v3 + 64) = xmmword_100289C80;
  *(_BYTE *)(v3 + 80) = -64;
  *(_QWORD *)(v3 + 88) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v3 + 96) = 1684628851;
  *(_QWORD *)(v3 + 104) = 0xE400000000000000;
  *(_QWORD *)(v3 + 112) = 4;
  *(_WORD *)(v3 + 120) = 0;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_BYTE *)(v3 + 144) = -64;
  *(_QWORD *)(v3 + 152) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v3 + 160) = 1684628325;
  *(_QWORD *)(v3 + 168) = 0xE400000000000000;
  *(_QWORD *)(v3 + 176) = 4;
  *(_WORD *)(v3 + 184) = 0;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_BYTE *)(v3 + 208) = -64;
  *(_QWORD *)(v3 + 216) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v3 + 224) = 0x444970696863;
  *(_QWORD *)(v3 + 232) = 0xE600000000000000;
  *(_QWORD *)(v3 + 240) = 4;
  *(_WORD *)(v3 + 248) = 0;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_BYTE *)(v3 + 272) = -64;
  *(_QWORD *)(v3 + 280) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v3 + 288) = 0x44496472616F62;
  *(_QWORD *)(v3 + 296) = 0xE700000000000000;
  *(_QWORD *)(v3 + 304) = 4;
  *(_WORD *)(v3 + 312) = 0;
  *(_OWORD *)(v3 + 320) = 0u;
  *(_BYTE *)(v3 + 336) = -64;
  *(_QWORD *)(v3 + 344) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v3 + 352) = 0xD000000000000010;
  *(_QWORD *)(v3 + 360) = 0x80000001002BF970;
  *(_QWORD *)(v3 + 368) = 4;
  *(_WORD *)(v3 + 376) = 0;
  *(_OWORD *)(v3 + 384) = 0u;
  *(_BYTE *)(v3 + 400) = -64;
  *(_QWORD *)(v3 + 408) = _swiftEmptyArrayStorage;
  strcpy((char *)(v3 + 416), "publicKeyInfo");
  *(_WORD *)(v3 + 430) = -4864;
  v4 = swift_allocObject(v2, 160, 7);
  *(_OWORD *)(v4 + 16) = xmmword_1002888F0;
  *(_QWORD *)(v4 + 32) = 0x4449676C61;
  *(_QWORD *)(v4 + 40) = 0xE500000000000000;
  *(_QWORD *)(v4 + 48) = 48;
  *(_WORD *)(v4 + 56) = 0;
  result = 0.0;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_BYTE *)(v4 + 80) = -64;
  *(_QWORD *)(v4 + 88) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v4 + 96) = 0x79654B627570;
  *(_QWORD *)(v4 + 104) = 0xE600000000000000;
  *(_QWORD *)(v4 + 112) = 3;
  *(_WORD *)(v4 + 120) = 0;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_BYTE *)(v4 + 144) = -64;
  *(_QWORD *)(v4 + 152) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v3 + 432) = 48;
  *(_WORD *)(v3 + 440) = 0;
  *(_QWORD *)(v3 + 448) = v4;
  *(_QWORD *)(v3 + 456) = 1;
  *(_BYTE *)(v3 + 464) = 64;
  *(_QWORD *)(v3 + 472) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v3 + 480) = 0x4E7463656A627573;
  *(_QWORD *)(v3 + 488) = 0xEB00000000656D61;
  *(_QWORD *)(v3 + 496) = 0;
  *(_WORD *)(v3 + 504) = 1;
  *(_OWORD *)(v3 + 512) = 0u;
  *(_BYTE *)(v3 + 528) = -64;
  *(_QWORD *)(v3 + 536) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v3 + 544) = 0x6F69736E65747865;
  *(_QWORD *)(v3 + 552) = 0xEA0000000000736ELL;
  *(_QWORD *)(v3 + 560) = 0;
  *(_WORD *)(v3 + 568) = 1;
  *(_OWORD *)(v3 + 576) = 0u;
  *(_BYTE *)(v3 + 592) = -64;
  *(_QWORD *)(v3 + 600) = _swiftEmptyArrayStorage;
  *(_QWORD *)a1 = 48;
  *(_WORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = 1;
  *(_BYTE *)(a1 + 32) = 64;
  *(_QWORD *)(a1 + 40) = _swiftEmptyArrayStorage;
  return result;
}

void sub_1001AC0C0(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  _OWORD v6[3];

  v2 = sub_100063D3C(&qword_100348A70);
  v3 = swift_allocObject(v2, 224, 7);
  *(_OWORD *)(v3 + 16) = xmmword_100288AC0;
  *(_QWORD *)(v3 + 32) = 0xD000000000000011;
  *(_QWORD *)(v3 + 40) = 0x80000001002BF930;
  v4 = swift_allocObject(v2, 160, 7);
  *(_OWORD *)(v4 + 16) = xmmword_1002888F0;
  *(_QWORD *)(v4 + 32) = 0x614474656C707061;
  *(_QWORD *)(v4 + 40) = 0xEA00000000006174;
  sub_1001ABE48((uint64_t)v6);
  v5 = v6[1];
  *(_OWORD *)(v4 + 48) = v6[0];
  *(_OWORD *)(v4 + 64) = v5;
  *(_OWORD *)(v4 + 80) = v6[2];
  strcpy((char *)(v4 + 96), "platformData");
  *(_BYTE *)(v4 + 109) = 0;
  *(_WORD *)(v4 + 110) = -5120;
  *(_QWORD *)(v4 + 112) = 48;
  *(_WORD *)(v4 + 120) = 0;
  *(_QWORD *)(v4 + 128) = 0;
  *(_QWORD *)(v4 + 136) = 0;
  *(_BYTE *)(v4 + 144) = -64;
  *(_QWORD *)(v4 + 152) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v3 + 48) = 48;
  *(_WORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = v4;
  *(_QWORD *)(v3 + 72) = 1;
  *(_BYTE *)(v3 + 80) = 64;
  *(_QWORD *)(v3 + 88) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v3 + 96) = 0xD000000000000010;
  *(_QWORD *)(v3 + 104) = 0x80000001002BF950;
  *(_QWORD *)(v3 + 112) = 48;
  *(_WORD *)(v3 + 120) = 0;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_BYTE *)(v3 + 144) = -64;
  *(_QWORD *)(v3 + 152) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v3 + 160) = 0x727574616E676973;
  *(_QWORD *)(v3 + 168) = 0xE900000000000065;
  *(_QWORD *)(v3 + 176) = 3;
  *(_WORD *)(v3 + 184) = 0;
  *(_QWORD *)(v3 + 192) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_BYTE *)(v3 + 208) = -64;
  *(_QWORD *)(v3 + 216) = _swiftEmptyArrayStorage;
  *(_QWORD *)a1 = 48;
  *(_WORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = 1;
  *(_BYTE *)(a1 + 32) = 64;
  *(_QWORD *)(a1 + 40) = _swiftEmptyArrayStorage;
}

uint64_t sub_1001AC254(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 >> 61 != 3)
  {
    v11 = sub_100071B74();
    v12 = swift_allocError(&type metadata for ASN1Error, v11, 0, 0);
    *(_QWORD *)(v13 + 8) = 0;
    *(_QWORD *)(v13 + 16) = 0;
    *(_QWORD *)v13 = 4;
    *(_BYTE *)(v13 + 24) = 3;
    swift_willThrow(v12);
    v14 = a1 & 0x1FFFFFFFFFFFFFFFLL;
    return swift_release(v14);
  }
  v2 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v2 + 16))
  {
    swift_bridgeObjectRetain(*(_QWORD *)(a1 + 16));
    v3 = sub_100187ED0(0x79654B627570, 0xE600000000000000);
    if ((v4 & 1) != 0)
    {
      v5 = a1 & 0x1FFFFFFFFFFFFFFFLL;
      v6 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v3);
      v7 = v6 & 0x1FFFFFFFFFFFFFFFLL;
      swift_retain(v6 & 0x1FFFFFFFFFFFFFFFLL);
      swift_bridgeObjectRelease(v2);
      if (v6 >> 61 == 1)
      {
        v8 = *(_QWORD *)((v6 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
        v9 = *(_QWORD *)((v6 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
        sub_100063C8C(*(_QWORD *)(v7 + 16), *(_QWORD *)(v7 + 24));
        swift_release(v7);
        sub_100075CC4(1, v8, v9);
        swift_release(v5);
        return v18;
      }
      v15 = sub_100071B74();
      v16 = swift_allocError(&type metadata for ASN1Error, v15, 0, 0);
      *(_QWORD *)(v17 + 8) = 0;
      *(_QWORD *)(v17 + 16) = 0;
      *(_QWORD *)v17 = 4;
      *(_BYTE *)(v17 + 24) = 3;
      swift_willThrow(v16);
      swift_release(v6 & 0x1FFFFFFFFFFFFFFFLL);
      v14 = v5;
      return swift_release(v14);
    }
  }
  else
  {
    __break(1u);
  }
  result = swift_bridgeObjectRelease(v2);
  __break(1u);
  return result;
}

uint64_t sub_1001AC3D4@<X0>(unint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t result;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;

  if (a1 >> 61 != 3)
  {
    v46 = sub_100071B74();
    v47 = swift_allocError(&type metadata for ASN1Error, v46, 0, 0);
    *(_QWORD *)(v48 + 8) = 0;
    *(_QWORD *)(v48 + 16) = 0;
    *(_QWORD *)v48 = 4;
    *(_BYTE *)(v48 + 24) = 3;
    swift_willThrow(v47);
    v49 = a1 & 0x1FFFFFFFFFFFFFFFLL;
    return swift_release(v49);
  }
  v5 = *(_QWORD *)(a1 + 16);
  if (!*(_QWORD *)(v5 + 16))
  {
    __break(1u);
    goto LABEL_42;
  }
  v6 = v2;
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 16));
  v7 = sub_100187ED0(0x6E6F6973726576, 0xE700000000000000);
  if ((v8 & 1) == 0)
  {
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  v9 = a1 & 0x1FFFFFFFFFFFFFFFLL;
  v10 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
  if (v10 >> 61 != 2)
  {
LABEL_25:
    v50 = sub_100071B74();
    swift_allocError(&type metadata for ASN1Error, v50, 0, 0);
    *(_QWORD *)(v51 + 8) = 0;
    *(_QWORD *)(v51 + 16) = 0;
    *(_QWORD *)v51 = 4;
    *(_BYTE *)(v51 + 24) = 3;
    v52 = v10 & 0x1FFFFFFFFFFFFFFFLL;
    v53 = swift_retain(v52);
    swift_willThrow(v53);
    swift_release(v52);
    swift_bridgeObjectRelease(v5);
    v49 = v9;
    return swift_release(v49);
  }
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v11 = *(_QWORD *)(v10 + 24);
  v12 = sub_100187ED0(1684628851, 0xE400000000000000);
  if ((v13 & 1) == 0)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  v10 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v12);
  if (v10 >> 61 != 1)
    goto LABEL_25;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  v15 = *(_QWORD *)(v10 + 16);
  v14 = *(_QWORD *)(v10 + 24);
  sub_100063C8C(v15, v14);
  sub_100063C8C(v15, v14);
  v16 = sub_100187ED0(1684628325, 0xE400000000000000);
  if ((v17 & 1) == 0)
  {
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  v18 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v16);
  if (v18 >> 61 != 1)
  {
    v55 = sub_100071B74();
    swift_allocError(&type metadata for ASN1Error, v55, 0, 0);
    *(_QWORD *)(v56 + 8) = 0;
    *(_QWORD *)(v56 + 16) = 0;
    *(_QWORD *)v56 = 4;
    *(_BYTE *)(v56 + 24) = 3;
    v57 = swift_retain(v18 & 0x1FFFFFFFFFFFFFFFLL);
    swift_willThrow(v57);
    swift_bridgeObjectRelease(v5);
    swift_release(v9);
    sub_100063CD0(v15, v14);
    swift_release(v18 & 0x1FFFFFFFFFFFFFFFLL);
    v58 = v15;
    v59 = v14;
    return sub_100063CD0(v58, v59);
  }
  v74 = v11;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_47;
  v20 = *(_QWORD *)(v18 + 16);
  v19 = *(_QWORD *)(v18 + 24);
  sub_100063C8C(v20, v19);
  v81 = v20;
  v80 = v19;
  sub_100063C8C(v20, v19);
  v21 = sub_100187ED0(0x444970696863, 0xE600000000000000);
  if ((v22 & 1) == 0)
  {
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  v23 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
  v78 = v23 & 0xE000000000000000;
  if ((v23 & 0xE000000000000000) != 0x2000000000000000)
  {
    v60 = sub_100071B74();
    swift_allocError(&type metadata for ASN1Error, v60, 0, 0);
    *(_QWORD *)(v61 + 8) = 0;
    *(_QWORD *)(v61 + 16) = 0;
    *(_QWORD *)v61 = 4;
    *(_BYTE *)(v61 + 24) = 3;
    v42 = v23 & 0x1FFFFFFFFFFFFFFFLL;
    v62 = swift_retain(v23 & 0x1FFFFFFFFFFFFFFFLL);
    swift_willThrow(v62);
    swift_bridgeObjectRelease(v5);
    swift_release(v9);
    v43 = v20;
    v41 = v19;
    sub_100063CD0(v20, v19);
    sub_100063CD0(v15, v14);
    swift_release(v42);
    v44 = 0;
    v45 = 0;
    goto LABEL_31;
  }
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_49;
  v25 = *(_QWORD *)(v23 + 16);
  v24 = *(_QWORD *)(v23 + 24);
  sub_100063C8C(v25, v24);
  v76 = v24;
  sub_100063C8C(v25, v24);
  v26 = sub_100187ED0(0x44496472616F62, 0xE700000000000000);
  if ((v27 & 1) == 0)
  {
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  v28 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v26);
  if (v28 >> 61 != 1)
  {
    v63 = sub_100071B74();
    swift_allocError(&type metadata for ASN1Error, v63, 0, 0);
    *(_QWORD *)(v64 + 8) = 0;
    *(_QWORD *)(v64 + 16) = 0;
    *(_QWORD *)v64 = 4;
    *(_BYTE *)(v64 + 24) = 3;
    v42 = v28 & 0x1FFFFFFFFFFFFFFFLL;
    v65 = swift_retain(v28 & 0x1FFFFFFFFFFFFFFFLL);
    swift_willThrow(v65);
    swift_bridgeObjectRelease(v5);
    swift_release(v9);
    v6 = v25;
    sub_100063CD0(v25, v24);
    v43 = v81;
    v41 = v80;
    sub_100063CD0(v81, v80);
    sub_100063CD0(v15, v14);
    swift_release(v42);
    v44 = 0;
    v45 = 0;
    goto LABEL_31;
  }
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_51;
  v29 = *(_QWORD *)(v28 + 16);
  v30 = *(_QWORD *)(v28 + 24);
  sub_100063C8C(v29, v30);
  v77 = v29;
  v75 = v30;
  sub_100063C8C(v29, v30);
  v31 = sub_100187ED0(0xD000000000000010, 0x80000001002BF970);
  if ((v32 & 1) == 0)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v31);
  if (v33 >> 61 != 1)
  {
    v67 = sub_100071B74();
    swift_allocError(&type metadata for ASN1Error, v67, 0, 0);
    *(_QWORD *)(v68 + 8) = 0;
    *(_QWORD *)(v68 + 16) = 0;
    *(_QWORD *)v68 = 4;
    *(_BYTE *)(v68 + 24) = 3;
    v42 = v33 & 0x1FFFFFFFFFFFFFFFLL;
    v69 = swift_retain(v33 & 0x1FFFFFFFFFFFFFFFLL);
    swift_willThrow(v69);
    swift_bridgeObjectRelease(v5);
    swift_release(v9);
    sub_100063CD0(v29, v75);
    v6 = v25;
    sub_100063CD0(v25, v76);
    v43 = v81;
    v41 = v80;
    sub_100063CD0(v81, v80);
    sub_100063CD0(v15, v14);
    swift_release(v42);
    v45 = 0;
    v44 = 1;
    goto LABEL_31;
  }
  v34 = *(_QWORD *)(v33 + 16);
  v35 = *(_QWORD *)(v33 + 24);
  v70 = *(_QWORD *)(v5 + 16);
  sub_100063C8C(v34, v35);
  v72 = v34;
  v73 = v35;
  sub_100063C8C(v34, v35);
  if (!v70 || (v36 = sub_100187ED0(0x654B63696C627570, 0xED00006F666E4979), (v37 & 1) == 0))
  {
LABEL_53:
    result = swift_bridgeObjectRelease(v5);
    __break(1u);
    return result;
  }
  v38 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v36);
  swift_retain(v38 & 0x1FFFFFFFFFFFFFFFLL);
  swift_bridgeObjectRelease(v5);
  v39 = sub_1001AC254(v38);
  v41 = v80;
  if (!v2)
  {
    v79 = v39;
    v71 = v40;
    swift_release(v9);
    sub_100063C8C(v15, v14);
    sub_100063C8C(v81, v80);
    sub_100063C8C(v25, v76);
    sub_100063C8C(v77, v75);
    sub_100063C8C(v72, v73);
    sub_100063C8C(v79, v71);
    sub_100063CD0(v72, v73);
    sub_100063CD0(v77, v75);
    sub_100063CD0(v25, v76);
    sub_100063CD0(v81, v80);
    sub_100063CD0(v15, v14);
    sub_100063CD0(v15, v14);
    sub_100063CD0(v81, v80);
    sub_100063CD0(v25, v76);
    sub_100063CD0(v77, v75);
    sub_100063CD0(v72, v73);
    result = sub_100063CD0(v79, v71);
    *a2 = v74;
    a2[1] = v15;
    a2[2] = v14;
    a2[3] = v81;
    a2[4] = v80;
    a2[5] = v25;
    a2[6] = v76;
    a2[7] = v77;
    a2[8] = v75;
    a2[9] = v72;
    a2[10] = v73;
    a2[11] = v79;
    a2[12] = v71;
    return result;
  }
  swift_release(v9);
  v42 = v72;
  sub_100063CD0(v72, v73);
  sub_100063CD0(v77, v75);
  v6 = v25;
  sub_100063CD0(v25, v76);
  v43 = v81;
  sub_100063CD0(v81, v80);
  sub_100063CD0(v15, v14);
  v44 = 1;
  v45 = 1;
LABEL_31:
  sub_100063CD0(v15, v14);
  sub_100063CD0(v43, v41);
  if (v78 == 0x2000000000000000)
  {
    sub_100063CD0(v6, v76);
    result = v77;
    v66 = v75;
    if ((v44 & 1) == 0)
      goto LABEL_33;
  }
  else
  {
    result = v77;
    v66 = v75;
    if (!v44)
    {
LABEL_33:
      if (v45)
        goto LABEL_37;
      return result;
    }
  }
  result = sub_100063CD0(result, v66);
  if ((v45 & 1) != 0)
  {
LABEL_37:
    v58 = v42;
    v59 = v73;
    return sub_100063CD0(v58, v59);
  }
  return result;
}

_QWORD *sub_1001ACBD0@<X0>(unint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD v38[14];
  unint64_t v39;

  if (a1 >> 61 != 3)
  {
    v12 = sub_100071B74();
    v13 = swift_allocError(&type metadata for ASN1Error, v12, 0, 0);
    *(_QWORD *)(v14 + 8) = 0;
    *(_QWORD *)(v14 + 16) = 0;
    *(_QWORD *)v14 = 4;
    *(_BYTE *)(v14 + 24) = 3;
    swift_willThrow(v13);
    v11 = a1 & 0x1FFFFFFFFFFFFFFFLL;
    return (_QWORD *)swift_release(v11);
  }
  v5 = *(_QWORD *)(a1 + 16);
  if (!*(_QWORD *)(v5 + 16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v6 = v2;
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 16));
  v7 = sub_100187ED0(0x614474656C707061, 0xEA00000000006174);
  if ((v8 & 1) == 0)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    result = (_QWORD *)swift_bridgeObjectRelease(v5);
    __break(1u);
    return result;
  }
  v9 = a1 & 0x1FFFFFFFFFFFFFFFLL;
  v10 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
  swift_retain(v10 & 0x1FFFFFFFFFFFFFFFLL);
  sub_1001AC3D4(v10, v38);
  if (v6)
  {
    swift_bridgeObjectRelease(v5);
    v11 = a1 & 0x1FFFFFFFFFFFFFFFLL;
    return (_QWORD *)swift_release(v11);
  }
  v17 = v38[0];
  v16 = v38[1];
  v18 = v38[2];
  v29 = v38[3];
  v30 = v38[4];
  v31 = v38[5];
  v32 = v38[6];
  v33 = v38[7];
  v34 = v38[8];
  v35 = v38[9];
  v36 = v38[10];
  v37 = v38[11];
  v39 = v38[12];
  v19 = *(_QWORD *)(v5 + 16);
  sub_1001AFA08(v38, (void (*)(uint64_t, uint64_t))sub_100063C8C);
  if (!v19)
    goto LABEL_15;
  v20 = sub_100187ED0(0x6D726F6674616C70, 0xEC00000061746144);
  if ((v21 & 1) == 0)
    goto LABEL_15;
  v22 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
  v23 = v22 & 0x1FFFFFFFFFFFFFFFLL;
  swift_retain(v22 & 0x1FFFFFFFFFFFFFFFLL);
  swift_bridgeObjectRelease(v5);
  if (v22 >> 61 == 1)
  {
    v24 = *(_QWORD *)((v22 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
    v25 = *(_QWORD *)((v22 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
    sub_100063C8C(*(_QWORD *)(v23 + 16), *(_QWORD *)(v23 + 24));
    swift_release(v23);
    swift_release(v9);
    result = sub_1001AFA08(v38, (void (*)(uint64_t, uint64_t))sub_100063CD0);
    *a2 = v17;
    a2[1] = v16;
    a2[2] = v18;
    a2[3] = v29;
    a2[4] = v30;
    a2[5] = v31;
    a2[6] = v32;
    a2[7] = v33;
    a2[8] = v34;
    a2[9] = v35;
    a2[10] = v36;
    a2[11] = v37;
    a2[12] = v39;
    a2[13] = v24;
    a2[14] = v25;
  }
  else
  {
    v26 = sub_100071B74();
    v27 = swift_allocError(&type metadata for ASN1Error, v26, 0, 0);
    *(_QWORD *)(v28 + 8) = 0;
    *(_QWORD *)(v28 + 16) = 0;
    *(_QWORD *)v28 = 4;
    *(_BYTE *)(v28 + 24) = 3;
    swift_willThrow(v27);
    swift_release(v9);
    sub_1001AFA08(v38, (void (*)(uint64_t, uint64_t))sub_100063CD0);
    swift_release(v22 & 0x1FFFFFFFFFFFFFFFLL);
    sub_100063CD0(v16, v18);
    sub_100063CD0(v29, v30);
    sub_100063CD0(v31, v32);
    sub_100063CD0(v33, v34);
    sub_100063CD0(v35, v36);
    return (_QWORD *)sub_100063CD0(v37, v39);
  }
  return result;
}

uint64_t sub_1001ACEB0@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  unint64_t v59;
  _QWORD v60[2];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;

  if (a1 >> 61 != 3)
  {
    v12 = sub_100071B74();
    v13 = swift_allocError(&type metadata for ASN1Error, v12, 0, 0);
    *(_QWORD *)(v14 + 8) = 0;
    *(_QWORD *)(v14 + 16) = 0;
    *(_QWORD *)v14 = 4;
    *(_BYTE *)(v14 + 24) = 3;
    swift_willThrow(v13);
    v11 = a1 & 0x1FFFFFFFFFFFFFFFLL;
    return swift_release(v11);
  }
  v5 = *(_QWORD *)(a1 + 16);
  if (!*(_QWORD *)(v5 + 16))
  {
    __break(1u);
    goto LABEL_21;
  }
  v6 = v2;
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 16));
  v7 = sub_100187ED0(0xD000000000000011, 0x80000001002BF930);
  if ((v8 & 1) == 0)
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = a1 & 0x1FFFFFFFFFFFFFFFLL;
  v10 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
  swift_retain(v10 & 0x1FFFFFFFFFFFFFFFLL);
  sub_1001ACBD0(v10, v60);
  if (v6)
  {
    swift_bridgeObjectRelease(v5);
    v11 = a1 & 0x1FFFFFFFFFFFFFFFLL;
    return swift_release(v11);
  }
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_22;
  v42 = v60[0];
  v45 = v60[1];
  v46 = v61;
  v47 = v62;
  v48 = v63;
  v49 = v64;
  v16 = v66;
  v70 = v65;
  v18 = v67;
  v17 = v68;
  v19 = v69;
  sub_1001AF868(v60, (void (*)(uint64_t, uint64_t))sub_100063C8C);
  v20 = sub_100187ED0(0xD000000000000010, 0x80000001002BF950);
  if ((v21 & 1) == 0)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v43 = v16;
  *(_QWORD *)&v44 = v18;
  *((_QWORD *)&v44 + 1) = v17;
  v22 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
  v23 = v22 & 0xE000000000000000;
  if ((v22 & 0xE000000000000000) == 0x2000000000000000)
  {
    v41 = v19;
    v17 = *(_QWORD *)(v22 + 16);
    v22 = *(_QWORD *)(v22 + 24);
    v24 = *(_QWORD *)(v5 + 16);
    sub_100063C8C(v17, v22);
    sub_100063C8C(v17, v22);
    if (v24)
    {
      v25 = sub_100187ED0(0x727574616E676973, 0xE900000000000065);
      if ((v26 & 1) != 0)
      {
        v27 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v25);
        v28 = v27 & 0x1FFFFFFFFFFFFFFFLL;
        swift_retain(v27 & 0x1FFFFFFFFFFFFFFFLL);
        swift_bridgeObjectRelease(v5);
        if (v27 >> 61 == 1)
        {
          v29 = *(_QWORD *)((v27 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
          v30 = *(_QWORD *)((v27 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
          sub_100063C8C(v29, v30);
          swift_release(v28);
          swift_release(v9);
          *(_QWORD *)&v50 = v42;
          *((_QWORD *)&v50 + 1) = v45;
          v51 = v46;
          v52 = v47;
          v53 = v48;
          v54 = v49;
          *(_QWORD *)&v55 = v70;
          *((_QWORD *)&v55 + 1) = v43;
          v56 = v44;
          *(_QWORD *)&v57 = v41;
          *((_QWORD *)&v57 + 1) = v17;
          *(_QWORD *)&v58 = v22;
          *((_QWORD *)&v58 + 1) = v29;
          v59 = v30;
          sub_1001AF924(&v50, (void (*)(uint64_t, uint64_t))sub_100063C8C);
          sub_100063CD0(v17, v22);
          sub_1001AF868(v60, (void (*)(uint64_t, uint64_t))sub_100063CD0);
          result = (uint64_t)sub_1001AF924(&v50, (void (*)(uint64_t, uint64_t))sub_100063CD0);
          v31 = v57;
          *(_OWORD *)(a2 + 96) = v56;
          *(_OWORD *)(a2 + 112) = v31;
          *(_OWORD *)(a2 + 128) = v58;
          *(_QWORD *)(a2 + 144) = v59;
          v32 = v53;
          *(_OWORD *)(a2 + 32) = v52;
          *(_OWORD *)(a2 + 48) = v32;
          v33 = v55;
          *(_OWORD *)(a2 + 64) = v54;
          *(_OWORD *)(a2 + 80) = v33;
          v34 = v51;
          *(_OWORD *)a2 = v50;
          *(_OWORD *)(a2 + 16) = v34;
          return result;
        }
        v38 = sub_100071B74();
        v39 = swift_allocError(&type metadata for ASN1Error, v38, 0, 0);
        *(_QWORD *)(v40 + 8) = 0;
        *(_QWORD *)(v40 + 16) = 0;
        *(_QWORD *)v40 = 4;
        *(_BYTE *)(v40 + 24) = 3;
        swift_willThrow(v39);
        swift_release(v9);
        sub_100063CD0(v17, v22);
        v19 = v41;
        goto LABEL_18;
      }
    }
LABEL_24:
    result = swift_bridgeObjectRelease(v5);
    __break(1u);
    return result;
  }
  v35 = sub_100071B74();
  swift_allocError(&type metadata for ASN1Error, v35, 0, 0);
  *(_QWORD *)(v36 + 8) = 0;
  *(_QWORD *)(v36 + 16) = 0;
  *(_QWORD *)v36 = 4;
  *(_BYTE *)(v36 + 24) = 3;
  v28 = v22 & 0x1FFFFFFFFFFFFFFFLL;
  v37 = swift_retain(v22 & 0x1FFFFFFFFFFFFFFFLL);
  swift_willThrow(v37);
  swift_bridgeObjectRelease(v5);
  swift_release(v9);
LABEL_18:
  sub_1001AF868(v60, (void (*)(uint64_t, uint64_t))sub_100063CD0);
  swift_release(v28);
  sub_100063CD0(v45, v46);
  sub_100063CD0(*((uint64_t *)&v46 + 1), v47);
  sub_100063CD0(*((uint64_t *)&v47 + 1), v48);
  sub_100063CD0(*((uint64_t *)&v48 + 1), v49);
  sub_100063CD0(*((uint64_t *)&v49 + 1), v70);
  sub_100063CD0(v43, v44);
  result = sub_100063CD0(*((uint64_t *)&v44 + 1), v19);
  if (v23 == 0x2000000000000000)
    return sub_100063CD0(v17, v22);
  return result;
}

double sub_1001AD324@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  double result;

  v2 = sub_100063D3C(&qword_100348A70);
  v3 = swift_allocObject(v2, 224, 7);
  *(_OWORD *)(v3 + 16) = xmmword_100288AC0;
  *(_QWORD *)(v3 + 32) = 0x444955556B6C74;
  *(_QWORD *)(v3 + 40) = 0xE700000000000000;
  *(_QWORD *)(v3 + 48) = 212;
  *(_WORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = 0;
  *(_BYTE *)(v3 + 80) = -64;
  *(_QWORD *)(v3 + 88) = &off_100305860;
  *(_QWORD *)(v3 + 96) = 0x416465776F6C6C61;
  *(_QWORD *)(v3 + 104) = 0xEA00000000004449;
  *(_QWORD *)(v3 + 112) = 214;
  *(_WORD *)(v3 + 120) = 0;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_BYTE *)(v3 + 144) = -64;
  *(_QWORD *)(v3 + 152) = &off_1003058B0;
  *(_QWORD *)(v3 + 160) = 0xD000000000000011;
  *(_QWORD *)(v3 + 168) = 0x80000001002BF890;
  *(_QWORD *)(v3 + 176) = 215;
  *(_WORD *)(v3 + 184) = 0;
  *(_QWORD *)&result = 2;
  *(_OWORD *)(v3 + 192) = xmmword_10028C4E0;
  *(_BYTE *)(v3 + 208) = -64;
  *(_QWORD *)(v3 + 216) = _swiftEmptyArrayStorage;
  *(_QWORD *)a1 = 233;
  *(_WORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = 1;
  *(_BYTE *)(a1 + 32) = 64;
  *(_QWORD *)(a1 + 40) = _swiftEmptyArrayStorage;
  return result;
}

double sub_1001AD438@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  v2 = sub_100063D3C(&qword_100348A70);
  v3 = swift_allocObject(v2, 160, 7);
  *(_OWORD *)(v3 + 16) = xmmword_1002888F0;
  *(_QWORD *)(v3 + 32) = 0xD000000000000011;
  *(_QWORD *)(v3 + 40) = 0x80000001002BF9D0;
  v4 = swift_allocObject(v2, 160, 7);
  *(_OWORD *)(v4 + 16) = xmmword_1002888F0;
  strcpy((char *)(v4 + 32), "ptAttestation");
  *(_WORD *)(v4 + 46) = -4864;
  *(_QWORD *)(v4 + 48) = 196;
  *(_WORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = 0;
  *(_BYTE *)(v4 + 80) = -64;
  *(_QWORD *)(v4 + 88) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v4 + 96) = 0x7472654364736163;
  *(_QWORD *)(v4 + 104) = 0xEF65746163696669;
  *(_QWORD *)(v4 + 112) = 197;
  *(_WORD *)(v4 + 120) = 0;
  *(_QWORD *)(v4 + 128) = 0;
  *(_QWORD *)(v4 + 136) = 0;
  *(_BYTE *)(v4 + 144) = -64;
  *(_QWORD *)(v4 + 152) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v3 + 48) = 231;
  *(_WORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = v4;
  *(_QWORD *)(v3 + 72) = 1;
  *(_BYTE *)(v3 + 80) = 64;
  *(_QWORD *)(v3 + 88) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v3 + 96) = 0xD000000000000016;
  *(_QWORD *)(v3 + 104) = 0x80000001002BF9F0;
  v5 = swift_allocObject(&unk_10030C9A8, 64, 7);
  *(_QWORD *)(v5 + 16) = 48;
  *(_WORD *)(v5 + 24) = 0;
  *(_QWORD *)&result = 3;
  *(_OWORD *)(v5 + 32) = xmmword_10028C4D0;
  *(_BYTE *)(v5 + 48) = -64;
  *(_QWORD *)(v5 + 56) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v3 + 112) = 232;
  *(_WORD *)(v3 + 120) = 0;
  *(_QWORD *)(v3 + 128) = v5;
  *(_QWORD *)(v3 + 136) = 0;
  *(_BYTE *)(v3 + 144) = 0x80;
  *(_QWORD *)(v3 + 152) = _swiftEmptyArrayStorage;
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = _swiftEmptyArrayStorage;
  return result;
}

uint64_t sub_1001AD5EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_100063D3C(&qword_100348A70);
  result = swift_allocObject(v2, 544, 7);
  *(_OWORD *)(result + 16) = xmmword_10028B430;
  strcpy((char *)(result + 32), "formatVersion");
  *(_WORD *)(result + 46) = -4864;
  *(_QWORD *)(result + 48) = 192;
  *(_WORD *)(result + 56) = 0;
  *(_OWORD *)(result + 64) = 0u;
  *(_BYTE *)(result + 80) = -64;
  *(_QWORD *)(result + 88) = _swiftEmptyArrayStorage;
  *(_QWORD *)(result + 96) = 0x444955556B6C74;
  *(_QWORD *)(result + 104) = 0xE700000000000000;
  *(_QWORD *)(result + 112) = 212;
  *(_WORD *)(result + 120) = 0;
  *(_OWORD *)(result + 128) = 0u;
  *(_BYTE *)(result + 144) = -64;
  *(_QWORD *)(result + 152) = &off_100305900;
  strcpy((char *)(result + 160), "parentTLKUUID");
  *(_WORD *)(result + 174) = -4864;
  *(_QWORD *)(result + 176) = 213;
  *(_WORD *)(result + 184) = 0;
  *(_OWORD *)(result + 192) = 0u;
  *(_BYTE *)(result + 208) = -64;
  *(_QWORD *)(result + 216) = &off_100305950;
  *(_QWORD *)(result + 224) = 0x416465776F6C6C61;
  *(_QWORD *)(result + 232) = 0xEA00000000004449;
  *(_QWORD *)(result + 240) = 214;
  *(_WORD *)(result + 248) = 0;
  *(_OWORD *)(result + 256) = 0u;
  *(_BYTE *)(result + 272) = -64;
  *(_QWORD *)(result + 280) = &off_1003059A0;
  *(_QWORD *)(result + 288) = 0xD000000000000011;
  *(_QWORD *)(result + 296) = 0x80000001002BF890;
  *(_QWORD *)(result + 304) = 215;
  *(_WORD *)(result + 312) = 0;
  *(_OWORD *)(result + 320) = xmmword_10028C4E0;
  *(_BYTE *)(result + 336) = -64;
  *(_QWORD *)(result + 344) = _swiftEmptyArrayStorage;
  *(_QWORD *)(result + 352) = 0x5649736561;
  *(_QWORD *)(result + 360) = 0xE500000000000000;
  *(_QWORD *)(result + 368) = 216;
  *(_WORD *)(result + 376) = 256;
  *(_OWORD *)(result + 384) = 0u;
  *(_BYTE *)(result + 400) = -64;
  *(_QWORD *)(result + 408) = &off_1003059F0;
  strcpy((char *)(result + 416), "encryptedKey");
  *(_BYTE *)(result + 429) = 0;
  *(_WORD *)(result + 430) = -5120;
  *(_QWORD *)(result + 432) = 217;
  *(_WORD *)(result + 440) = 256;
  *(_OWORD *)(result + 448) = 0u;
  *(_BYTE *)(result + 464) = -64;
  *(_QWORD *)(result + 472) = &off_100305A40;
  *(_QWORD *)(result + 480) = 0xD000000000000011;
  *(_QWORD *)(result + 488) = 0x80000001002BF910;
  *(_QWORD *)(result + 496) = 218;
  *(_WORD *)(result + 504) = 256;
  *(_OWORD *)(result + 512) = 0u;
  *(_BYTE *)(result + 528) = -64;
  *(_QWORD *)(result + 536) = &off_100305A90;
  *(_QWORD *)a1 = 228;
  *(_WORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = result;
  *(_QWORD *)(a1 + 24) = 1;
  *(_BYTE *)(a1 + 32) = 64;
  *(_QWORD *)(a1 + 40) = _swiftEmptyArrayStorage;
  return result;
}

double sub_1001AD818@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  double result;

  v2 = sub_100063D3C(&qword_100348A70);
  v3 = swift_allocObject(v2, 352, 7);
  *(_QWORD *)&result = 5;
  *(_OWORD *)(v3 + 16) = xmmword_1002892A0;
  *(_QWORD *)(v3 + 32) = 1684632949;
  *(_QWORD *)(v3 + 40) = 0xE400000000000000;
  *(_QWORD *)(v3 + 48) = 212;
  *(_WORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = 0;
  *(_BYTE *)(v3 + 80) = -64;
  *(_QWORD *)(v3 + 88) = &off_100305AE0;
  *(_QWORD *)(v3 + 96) = 0x5555746E65726170;
  *(_QWORD *)(v3 + 104) = 0xEA00000000004449;
  *(_QWORD *)(v3 + 112) = 213;
  *(_WORD *)(v3 + 120) = 0;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_BYTE *)(v3 + 144) = -64;
  *(_QWORD *)(v3 + 152) = &off_100305B30;
  *(_QWORD *)(v3 + 160) = 0x44495344746C61;
  *(_QWORD *)(v3 + 168) = 0xE700000000000000;
  *(_QWORD *)(v3 + 176) = 193;
  *(_WORD *)(v3 + 184) = 0;
  *(_QWORD *)(v3 + 192) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_BYTE *)(v3 + 208) = -64;
  *(_QWORD *)(v3 + 216) = &off_100305B80;
  *(_QWORD *)(v3 + 224) = 0x416465776F6C6C61;
  *(_QWORD *)(v3 + 232) = 0xEA00000000004449;
  *(_QWORD *)(v3 + 240) = 214;
  *(_WORD *)(v3 + 248) = 0;
  *(_QWORD *)(v3 + 256) = 0;
  *(_QWORD *)(v3 + 264) = 0;
  *(_BYTE *)(v3 + 272) = -64;
  *(_QWORD *)(v3 + 280) = &off_100305BD0;
  *(_QWORD *)(v3 + 288) = 0xD000000000000011;
  *(_QWORD *)(v3 + 296) = 0x80000001002BF890;
  *(_QWORD *)(v3 + 304) = 215;
  *(_WORD *)(v3 + 312) = 0;
  *(_QWORD *)(v3 + 320) = 0;
  *(_QWORD *)(v3 + 328) = 0;
  *(_BYTE *)(v3 + 336) = -64;
  *(_QWORD *)(v3 + 344) = _swiftEmptyArrayStorage;
  *(_QWORD *)a1 = 239;
  *(_WORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = 1;
  *(_BYTE *)(a1 + 32) = 64;
  *(_QWORD *)(a1 + 40) = _swiftEmptyArrayStorage;
  return result;
}

double sub_1001AD980@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  double result;

  v2 = sub_100063D3C(&qword_100348A70);
  v3 = swift_allocObject(v2, 544, 7);
  *(_OWORD *)(v3 + 16) = xmmword_10028B430;
  strcpy((char *)(v3 + 32), "formatVersion");
  *(_WORD *)(v3 + 46) = -4864;
  *(_QWORD *)(v3 + 48) = 192;
  *(_WORD *)(v3 + 56) = 0;
  result = 0.0;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_BYTE *)(v3 + 80) = -64;
  *(_QWORD *)(v3 + 88) = &off_100305C20;
  *(_QWORD *)(v3 + 96) = 0xD00000000000001ALL;
  *(_QWORD *)(v3 + 104) = 0x80000001002BF8B0;
  *(_QWORD *)(v3 + 112) = 204;
  *(_WORD *)(v3 + 120) = 0;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_BYTE *)(v3 + 144) = -64;
  *(_QWORD *)(v3 + 152) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v3 + 160) = 0xD000000000000016;
  *(_QWORD *)(v3 + 168) = 0x80000001002BF8D0;
  *(_QWORD *)(v3 + 176) = 205;
  *(_WORD *)(v3 + 184) = 0;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_BYTE *)(v3 + 208) = -64;
  *(_QWORD *)(v3 + 216) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v3 + 224) = 0xD000000000000019;
  *(_QWORD *)(v3 + 232) = 0x80000001002BF8F0;
  *(_QWORD *)(v3 + 240) = 206;
  *(_WORD *)(v3 + 248) = 0;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_BYTE *)(v3 + 272) = -64;
  *(_QWORD *)(v3 + 280) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v3 + 288) = 0x617461446174656DLL;
  *(_QWORD *)(v3 + 296) = 0xE800000000000000;
  *(_QWORD *)(v3 + 304) = 239;
  *(_WORD *)(v3 + 312) = 0;
  *(_OWORD *)(v3 + 320) = xmmword_10028C4D0;
  *(_BYTE *)(v3 + 336) = -64;
  *(_QWORD *)(v3 + 344) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v3 + 352) = 0x6574726568706963;
  *(_QWORD *)(v3 + 360) = 0xEA00000000007478;
  *(_QWORD *)(v3 + 368) = 208;
  *(_WORD *)(v3 + 376) = 0;
  *(_OWORD *)(v3 + 384) = 0u;
  *(_BYTE *)(v3 + 400) = -64;
  *(_QWORD *)(v3 + 408) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v3 + 416) = 0xD000000000000011;
  *(_QWORD *)(v3 + 424) = 0x80000001002BF910;
  *(_QWORD *)(v3 + 432) = 209;
  *(_WORD *)(v3 + 440) = 0;
  *(_OWORD *)(v3 + 448) = 0u;
  *(_BYTE *)(v3 + 464) = -64;
  *(_QWORD *)(v3 + 472) = &off_100305C70;
  *(_QWORD *)(v3 + 480) = 0x69537265646E6573;
  *(_QWORD *)(v3 + 488) = 0xEF65727574616E67;
  *(_QWORD *)(v3 + 496) = 210;
  *(_WORD *)(v3 + 504) = 0;
  *(_OWORD *)(v3 + 512) = 0u;
  *(_BYTE *)(v3 + 528) = -64;
  *(_QWORD *)(v3 + 536) = _swiftEmptyArrayStorage;
  *(_QWORD *)a1 = 224;
  *(_WORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = 1;
  *(_BYTE *)(a1 + 32) = 64;
  *(_QWORD *)(a1 + 40) = _swiftEmptyArrayStorage;
  return result;
}

double sub_1001ADB88@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  double result;
  _OWORD v6[2];
  __int128 v7;

  v2 = sub_100063D3C(&qword_100348A70);
  v3 = swift_allocObject(v2, 160, 7);
  *(_OWORD *)(v3 + 16) = xmmword_1002888F0;
  *(_QWORD *)(v3 + 32) = 0x444955556B6C74;
  *(_QWORD *)(v3 + 40) = 0xE700000000000000;
  *(_QWORD *)(v3 + 48) = 212;
  *(_WORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = 0;
  *(_BYTE *)(v3 + 80) = -64;
  *(_QWORD *)(v3 + 88) = &off_100305CC0;
  *(_QWORD *)(v3 + 96) = 0xD000000000000012;
  *(_QWORD *)(v3 + 104) = 0x80000001002BF9B0;
  sub_1001AD438((uint64_t)v6);
  v4 = v6[1];
  *(_OWORD *)(v3 + 112) = v6[0];
  *(_OWORD *)(v3 + 128) = v4;
  result = *(double *)&v7;
  *(_OWORD *)(v3 + 144) = v7;
  *(_QWORD *)a1 = 238;
  *(_WORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = 1;
  *(_BYTE *)(a1 + 32) = 64;
  *(_QWORD *)(a1 + 40) = _swiftEmptyArrayStorage;
  return result;
}

double sub_1001ADC6C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  __int128 v6;
  double result;
  uint64_t v8;
  char v9;
  __n128 v10;
  uint64_t v11;
  _OWORD v12[2];
  __int128 v13;
  uint64_t v14;
  __n128 v15;

  v2 = sub_100063D3C(&qword_100348A70);
  v3 = swift_allocObject(v2, 160, 7);
  *(_OWORD *)(v3 + 16) = xmmword_1002888F0;
  strcpy((char *)(v3 + 32), "encryptedBlob");
  *(_WORD *)(v3 + 46) = -4864;
  sub_1001AD980((uint64_t)&v8);
  v4 = v8;
  v5 = v9;
  sub_100124140(&v10, &v15);
  sub_10012417C((uint64_t)&v15);
  v14 = v11;
  sub_1001241D0(&v14);
  *(_QWORD *)(v3 + 48) = v4;
  *(_BYTE *)(v3 + 56) = v5;
  *(_BYTE *)(v3 + 57) = 0;
  *(_OWORD *)(v3 + 64) = xmmword_10028C4D0;
  *(_BYTE *)(v3 + 80) = -64;
  *(_QWORD *)(v3 + 88) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v3 + 96) = 0xD000000000000012;
  *(_QWORD *)(v3 + 104) = 0x80000001002BF9B0;
  sub_1001AD438((uint64_t)v12);
  v6 = v12[1];
  *(_OWORD *)(v3 + 112) = v12[0];
  *(_OWORD *)(v3 + 128) = v6;
  result = *(double *)&v13;
  *(_OWORD *)(v3 + 144) = v13;
  *(_QWORD *)a1 = 237;
  *(_WORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = 1;
  *(_BYTE *)(a1 + 32) = 64;
  *(_QWORD *)(a1 + 40) = _swiftEmptyArrayStorage;
  return result;
}

unint64_t sub_1001ADDA4@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;

  v2 = result;
  if (result >> 61 != 3)
  {
    v32 = sub_100071B74();
    v33 = swift_allocError(&type metadata for ASN1Error, v32, 0, 0);
    *(_QWORD *)(v34 + 8) = 0;
    *(_QWORD *)(v34 + 16) = 0;
    *(_QWORD *)v34 = 4;
    *(_BYTE *)(v34 + 24) = 3;
    swift_willThrow(v33);
    return swift_release(v2 & 0x1FFFFFFFFFFFFFFFLL);
  }
  v4 = *(_QWORD *)(result + 16);
  if (!*(_QWORD *)(v4 + 16))
  {
    __break(1u);
    goto LABEL_56;
  }
  swift_bridgeObjectRetain(*(_QWORD *)(result + 16));
  result = sub_100187ED0(0x655674616D726F66, 0xED00006E6F697372);
  if ((v5 & 1) == 0)
  {
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  v6 = v2 & 0x1FFFFFFFFFFFFFFFLL;
  v7 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * result);
  if (v7 >> 61 != 1)
  {
    v35 = sub_100071B74();
    swift_allocError(&type metadata for ASN1Error, v35, 0, 0);
    *(_QWORD *)(v36 + 8) = 0;
    *(_QWORD *)(v36 + 16) = 0;
    *(_QWORD *)v36 = 4;
    *(_BYTE *)(v36 + 24) = 3;
    v37 = v7 & 0x1FFFFFFFFFFFFFFFLL;
    v38 = swift_retain(v37);
    swift_willThrow(v38);
    swift_release(v37);
    swift_bridgeObjectRelease(v4);
    return swift_release(v6);
  }
  if (!*(_QWORD *)(v4 + 16))
    goto LABEL_57;
  v9 = *(_QWORD *)(v7 + 16);
  v8 = *(_QWORD *)(v7 + 24);
  sub_100063C8C(v9, v8);
  sub_100063C8C(v9, v8);
  result = sub_100187ED0(0x444955556B6C74, 0xE700000000000000);
  if ((v10 & 1) == 0)
  {
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  v11 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * result);
  if (v11 >> 61 != 1)
  {
    v39 = sub_100071B74();
    swift_allocError(&type metadata for ASN1Error, v39, 0, 0);
    *(_QWORD *)(v40 + 8) = 0;
    *(_QWORD *)(v40 + 16) = 0;
    *(_QWORD *)v40 = 4;
    *(_BYTE *)(v40 + 24) = 3;
    v41 = v11 & 0x1FFFFFFFFFFFFFFFLL;
    v42 = swift_retain(v41);
    swift_willThrow(v42);
    swift_bridgeObjectRelease(v4);
    swift_release(v6);
    sub_100063CD0(v9, v8);
    swift_release(v41);
    return sub_100063CD0(v9, v8);
  }
  if (!*(_QWORD *)(v4 + 16))
    goto LABEL_59;
  v13 = *(_QWORD *)(v11 + 16);
  v12 = *(_QWORD *)(v11 + 24);
  sub_100063C8C(v13, v12);
  sub_100063C8C(v13, v12);
  result = sub_100187ED0(0x4C54746E65726170, 0xED0000444955554BLL);
  if ((v14 & 1) == 0)
  {
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  v15 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * result);
  v89 = v15 & 0xE000000000000000;
  if ((v15 & 0xE000000000000000) != 0x2000000000000000)
  {
    v43 = sub_100071B74();
    swift_allocError(&type metadata for ASN1Error, v43, 0, 0);
    *(_QWORD *)(v44 + 8) = 0;
    *(_QWORD *)(v44 + 16) = 0;
    *(_QWORD *)v44 = 4;
    *(_BYTE *)(v44 + 24) = 3;
    v45 = v15 & 0x1FFFFFFFFFFFFFFFLL;
    v46 = swift_retain(v45);
    swift_willThrow(v46);
    swift_bridgeObjectRelease(v4);
    swift_release(v6);
    v47 = 0;
    v48 = 0;
    v49 = 0;
    goto LABEL_28;
  }
  v84 = v13;
  if (!*(_QWORD *)(v4 + 16))
    goto LABEL_61;
  v16 = v12;
  v17 = *(_QWORD *)(v15 + 16);
  v18 = *(_QWORD *)(v15 + 24);
  sub_100063C8C(v17, v18);
  v87 = v18;
  v88 = v17;
  sub_100063C8C(v17, v18);
  result = sub_100187ED0(0x416465776F6C6C61, 0xEA00000000004449);
  if ((v19 & 1) == 0)
  {
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  v20 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * result);
  v12 = v16;
  if (v20 >> 61 != 1)
  {
    v50 = sub_100071B74();
    swift_allocError(&type metadata for ASN1Error, v50, 0, 0);
    *(_QWORD *)(v51 + 8) = 0;
    *(_QWORD *)(v51 + 16) = 0;
    *(_QWORD *)v51 = 4;
    *(_BYTE *)(v51 + 24) = 3;
    v45 = v20 & 0x1FFFFFFFFFFFFFFFLL;
    v52 = swift_retain(v45);
    swift_willThrow(v52);
    swift_bridgeObjectRelease(v4);
    swift_release(v6);
    sub_100063CD0(v88, v87);
    v47 = 0;
    v48 = 0;
    v49 = 0;
LABEL_27:
    v13 = v84;
    goto LABEL_28;
  }
  if (!*(_QWORD *)(v4 + 16))
    goto LABEL_63;
  v21 = *(_QWORD *)(v20 + 16);
  v22 = *(_QWORD *)(v20 + 24);
  sub_100063C8C(v21, v22);
  v85 = v21;
  v86 = v22;
  sub_100063C8C(v21, v22);
  result = sub_100187ED0(0xD000000000000011, 0x80000001002BF890);
  if ((v23 & 1) == 0)
  {
LABEL_64:
    __break(1u);
    return result;
  }
  v24 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * result);
  v12 = v16;
  if (v24 >> 61)
  {
    v53 = sub_100071B74();
    swift_allocError(&type metadata for ASN1Error, v53, 0, 0);
    *(_QWORD *)(v54 + 8) = 0;
    *(_QWORD *)(v54 + 16) = 0;
    *(_QWORD *)v54 = 4;
    *(_BYTE *)(v54 + 24) = 3;
    v45 = v24 & 0x1FFFFFFFFFFFFFFFLL;
    v55 = swift_retain(v45);
    swift_willThrow(v55);
    swift_bridgeObjectRelease(v4);
    swift_release(v6);
    sub_100063CD0(v85, v86);
    sub_100063CD0(v88, v87);
    v48 = 0;
    v49 = 0;
    v47 = 1;
    goto LABEL_27;
  }
  v75 = *(_BYTE *)(v24 + 16);
  v13 = v84;
  if (!*(_QWORD *)(v4 + 16))
  {
    v31 = 0;
    v30 = 0xF000000000000000;
LABEL_44:
    v81 = v30;
    v82 = v31;
    sub_10006BA34(v31, v30);
    goto LABEL_45;
  }
  v25 = sub_100187ED0(0x5649736561, 0xE500000000000000);
  if ((v26 & 1) != 0)
  {
    v27 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v25);
    if (v27 >> 61 != 1)
    {
      v66 = sub_100071B74();
      swift_allocError(&type metadata for ASN1Error, v66, 0, 0);
      *(_QWORD *)(v67 + 8) = 0;
      *(_QWORD *)(v67 + 16) = 0;
      *(_QWORD *)v67 = 4;
      *(_BYTE *)(v67 + 24) = 3;
      v45 = v27 & 0x1FFFFFFFFFFFFFFFLL;
      v68 = swift_retain(v45);
      swift_willThrow(v68);
      swift_bridgeObjectRelease(v4);
      swift_release(v6);
      sub_100063CD0(v85, v86);
      sub_100063CD0(v88, v87);
      v48 = 0;
      v49 = 0;
      v47 = 1;
      goto LABEL_28;
    }
    v28 = *(_QWORD *)(v27 + 16);
    v29 = *(_QWORD *)(v27 + 24);
    v83 = v28;
    sub_100063C8C(v28, v29);
    v30 = v29;
    v31 = v83;
  }
  else
  {
    v31 = 0;
    v30 = 0xF000000000000000;
  }
  if (!*(_QWORD *)(v4 + 16))
    goto LABEL_44;
  v81 = v30;
  v82 = v31;
  sub_10006BA34(v31, v30);
  v56 = sub_100187ED0(0x6574707972636E65, 0xEC00000079654B64);
  if ((v57 & 1) == 0)
  {
LABEL_45:
    v62 = 0;
    v61 = 0xF000000000000000;
    goto LABEL_46;
  }
  v58 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v56);
  if (v58 >> 61 != 1)
  {
    v72 = sub_100071B74();
    swift_allocError(&type metadata for ASN1Error, v72, 0, 0);
    *(_QWORD *)(v73 + 8) = 0;
    *(_QWORD *)(v73 + 16) = 0;
    *(_QWORD *)v73 = 4;
    *(_BYTE *)(v73 + 24) = 3;
    v45 = v58 & 0x1FFFFFFFFFFFFFFFLL;
    v74 = swift_retain(v45);
    swift_willThrow(v74);
    swift_bridgeObjectRelease(v4);
    swift_release(v6);
    sub_10006B9B4(v82, v81);
    sub_100063CD0(v85, v86);
    sub_100063CD0(v88, v87);
    v49 = 0;
    v47 = 1;
    v48 = 1;
    goto LABEL_28;
  }
  v59 = *(_QWORD *)(v58 + 16);
  v60 = *(_QWORD *)(v58 + 24);
  v79 = v59;
  sub_100063C8C(v59, v60);
  v61 = v60;
  v62 = v79;
LABEL_46:
  v63 = *(_QWORD *)(v4 + 16);
  v78 = v62;
  v80 = v61;
  sub_10006BA34(v62, v61);
  if (!v63 || (v64 = sub_100187ED0(0xD000000000000011, 0x80000001002BF910), (v65 & 1) == 0))
  {
    swift_release(v6);
    swift_bridgeObjectRelease(v4);
    v90 = 0;
    v77 = 0xF000000000000000;
    goto LABEL_51;
  }
  v76 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v64);
  v45 = v76 & 0x1FFFFFFFFFFFFFFFLL;
  swift_retain(v76 & 0x1FFFFFFFFFFFFFFFLL);
  swift_bridgeObjectRelease(v4);
  if (v76 >> 61 == 1)
  {
    v90 = *(_QWORD *)((v76 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
    v77 = *(_QWORD *)((v76 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
    sub_100063C8C(v90, v77);
    swift_release(v45);
    swift_release(v6);
LABEL_51:
    sub_100063C8C(v9, v8);
    sub_100063C8C(v84, v12);
    sub_100063C8C(v88, v87);
    sub_100063C8C(v85, v86);
    sub_10006BA34(v82, v81);
    sub_10006BA34(v78, v80);
    sub_10006BA34(v90, v77);
    sub_10006B9B4(v78, v80);
    sub_10006B9B4(v82, v81);
    sub_100063CD0(v85, v86);
    sub_100063CD0(v88, v87);
    sub_100063CD0(v84, v12);
    sub_100063CD0(v9, v8);
    sub_100063CD0(v9, v8);
    sub_100063CD0(v84, v12);
    sub_100063CD0(v88, v87);
    sub_100063CD0(v85, v86);
    sub_10006B9B4(v82, v81);
    sub_10006B9B4(v78, v80);
    result = sub_10006B9B4(v90, v77);
    *(_QWORD *)a2 = v9;
    *(_QWORD *)(a2 + 8) = v8;
    *(_QWORD *)(a2 + 16) = v84;
    *(_QWORD *)(a2 + 24) = v12;
    *(_QWORD *)(a2 + 32) = v88;
    *(_QWORD *)(a2 + 40) = v87;
    *(_QWORD *)(a2 + 48) = v85;
    *(_QWORD *)(a2 + 56) = v86;
    *(_BYTE *)(a2 + 64) = v75;
    *(_QWORD *)(a2 + 72) = v82;
    *(_QWORD *)(a2 + 80) = v81;
    *(_QWORD *)(a2 + 88) = v78;
    *(_QWORD *)(a2 + 96) = v80;
    *(_QWORD *)(a2 + 104) = v90;
    *(_QWORD *)(a2 + 112) = v77;
    return result;
  }
  v69 = sub_100071B74();
  v70 = swift_allocError(&type metadata for ASN1Error, v69, 0, 0);
  *(_QWORD *)(v71 + 8) = 0;
  *(_QWORD *)(v71 + 16) = 0;
  *(_QWORD *)v71 = 4;
  *(_BYTE *)(v71 + 24) = 3;
  swift_willThrow(v70);
  swift_release(v6);
  sub_10006B9B4(v78, v80);
  sub_10006B9B4(v82, v81);
  sub_100063CD0(v85, v86);
  sub_100063CD0(v88, v87);
  v47 = 1;
  v48 = 1;
  v49 = 1;
LABEL_28:
  sub_100063CD0(v13, v12);
  sub_100063CD0(v9, v8);
  swift_release(v45);
  sub_100063CD0(v9, v8);
  result = sub_100063CD0(v13, v12);
  if (v89 == 0x2000000000000000)
  {
    result = sub_100063CD0(v88, v87);
    if ((v47 & 1) == 0)
      goto LABEL_30;
  }
  else if (!v47)
  {
LABEL_30:
    if (v48)
      goto LABEL_31;
LABEL_35:
    if (!v49)
      return result;
    return sub_10006B9B4(v78, v80);
  }
  result = sub_100063CD0(v85, v86);
  if ((v48 & 1) == 0)
    goto LABEL_35;
LABEL_31:
  result = sub_10006B9B4(v82, v81);
  if ((v49 & 1) == 0)
    return result;
  return sub_10006B9B4(v78, v80);
}

uint64_t sub_1001AE728@<X0>(unint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  uint64_t result;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  int v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;

  if (a1 >> 61 != 3)
  {
    v53 = sub_100071B74();
    v54 = swift_allocError(&type metadata for ASN1Error, v53, 0, 0);
    *(_QWORD *)(v55 + 8) = 0;
    *(_QWORD *)(v55 + 16) = 0;
    *(_QWORD *)v55 = 4;
    *(_BYTE *)(v55 + 24) = 3;
    swift_willThrow(v54);
    return swift_release(a1 & 0x1FFFFFFFFFFFFFFFLL);
  }
  v4 = *(_QWORD *)(a1 + 16);
  if (!*(_QWORD *)(v4 + 16))
  {
    __break(1u);
    goto LABEL_50;
  }
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 16));
  v5 = sub_100187ED0(0x655674616D726F66, 0xED00006E6F697372);
  if ((v6 & 1) == 0)
  {
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  v7 = a1 & 0x1FFFFFFFFFFFFFFFLL;
  v8 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v5);
  if (v8 >> 61 != 1)
  {
    v56 = sub_100071B74();
    swift_allocError(&type metadata for ASN1Error, v56, 0, 0);
    *(_QWORD *)(v57 + 8) = 0;
    *(_QWORD *)(v57 + 16) = 0;
    *(_QWORD *)v57 = 4;
    *(_BYTE *)(v57 + 24) = 3;
    v58 = v8 & 0x1FFFFFFFFFFFFFFFLL;
    v59 = swift_retain(v58);
    swift_willThrow(v59);
    swift_release(v58);
    swift_bridgeObjectRelease(v4);
    return swift_release(v7);
  }
  if (!*(_QWORD *)(v4 + 16))
    goto LABEL_51;
  v10 = *(_QWORD *)(v8 + 16);
  v9 = *(_QWORD *)(v8 + 24);
  sub_100063C8C(v10, v9);
  sub_100063C8C(v10, v9);
  v11 = sub_100187ED0(0xD00000000000001ALL, 0x80000001002BF8B0);
  if ((v12 & 1) == 0)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  v13 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v11);
  if (v13 >> 61 == 1)
  {
    if (*(_QWORD *)(v4 + 16))
    {
      v14 = *(_QWORD *)(v13 + 16);
      v15 = *(_QWORD *)(v13 + 24);
      sub_100063C8C(v14, v15);
      v115 = v14;
      v106 = v15;
      sub_100063C8C(v14, v15);
      v16 = sub_100187ED0(0xD000000000000016, 0x80000001002BF8D0);
      if ((v17 & 1) != 0)
      {
        v18 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v16);
        v102 = v18 & 0xE000000000000000;
        if ((v18 & 0xE000000000000000) != 0x2000000000000000)
        {
          v65 = sub_100071B74();
          swift_allocError(&type metadata for ASN1Error, v65, 0, 0);
          *(_QWORD *)(v66 + 8) = 0;
          *(_QWORD *)(v66 + 16) = 0;
          *(_QWORD *)v66 = 4;
          *(_BYTE *)(v66 + 24) = 3;
          v105 = v18 & 0x1FFFFFFFFFFFFFFFLL;
          v67 = swift_retain(v18 & 0x1FFFFFFFFFFFFFFFLL);
          swift_willThrow(v67);
          swift_bridgeObjectRelease(v4);
          swift_release(v7);
          v68 = 0;
          v69 = 0;
          v70 = 0;
          v71 = 0;
          goto LABEL_32;
        }
        if (*(_QWORD *)(v4 + 16))
        {
          v19 = *(_QWORD *)(v18 + 24);
          v20 = *(_QWORD *)(v18 + 16);
          sub_100063C8C(v20, v19);
          v101 = v19;
          sub_100063C8C(v20, v19);
          v21 = sub_100187ED0(0xD000000000000019, 0x80000001002BF8F0);
          if ((v22 & 1) != 0)
          {
            v23 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v21);
            v95 = v20;
            if (v23 >> 61 != 1)
            {
              v72 = sub_100071B74();
              swift_allocError(&type metadata for ASN1Error, v72, 0, 0);
              *(_QWORD *)(v73 + 8) = 0;
              *(_QWORD *)(v73 + 16) = 0;
              *(_QWORD *)v73 = 4;
              *(_BYTE *)(v73 + 24) = 3;
              v105 = v23 & 0x1FFFFFFFFFFFFFFFLL;
              v74 = swift_retain(v23 & 0x1FFFFFFFFFFFFFFFLL);
              swift_willThrow(v74);
              swift_bridgeObjectRelease(v4);
              swift_release(v7);
              sub_100063CD0(v20, v19);
              v68 = 0;
              v69 = 0;
              v70 = 0;
              v71 = 0;
              goto LABEL_32;
            }
            if (*(_QWORD *)(v4 + 16))
            {
              v25 = *(_QWORD *)(v23 + 16);
              v24 = *(_QWORD *)(v23 + 24);
              sub_100063C8C(v25, v24);
              *((_QWORD *)&v100 + 1) = v24;
              sub_100063C8C(v25, v24);
              v26 = sub_100187ED0(0x617461446174656DLL, 0xE800000000000000);
              if ((v27 & 1) != 0)
              {
                v28 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v26);
                *(_QWORD *)&v100 = v25;
                if (v28 >> 61 != 1)
                {
                  v81 = sub_100071B74();
                  swift_allocError(&type metadata for ASN1Error, v81, 0, 0);
                  *(_QWORD *)(v82 + 8) = 0;
                  *(_QWORD *)(v82 + 16) = 0;
                  *(_QWORD *)v82 = 4;
                  *(_BYTE *)(v82 + 24) = 3;
                  v105 = v28 & 0x1FFFFFFFFFFFFFFFLL;
                  v83 = swift_retain(v28 & 0x1FFFFFFFFFFFFFFFLL);
                  swift_willThrow(v83);
                  swift_bridgeObjectRelease(v4);
                  swift_release(v7);
                  sub_100063CD0(v25, *((unint64_t *)&v100 + 1));
                  sub_100063CD0(v20, v101);
                  v69 = 0;
                  v70 = 0;
                  v71 = 0;
                  v68 = 1;
                  goto LABEL_32;
                }
                if (*(_QWORD *)(v4 + 16))
                {
                  v30 = *(_QWORD *)(v28 + 16);
                  v29 = *(_QWORD *)(v28 + 24);
                  sub_100063C8C(v30, v29);
                  *(_QWORD *)&v99 = v30;
                  *((_QWORD *)&v99 + 1) = v29;
                  sub_100063C8C(v30, v29);
                  v31 = sub_100187ED0(0x6574726568706963, 0xEA00000000007478);
                  if ((v32 & 1) != 0)
                  {
                    v33 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v31);
                    if (v33 >> 61 != 1)
                    {
                      v84 = sub_100071B74();
                      swift_allocError(&type metadata for ASN1Error, v84, 0, 0);
                      *(_QWORD *)(v85 + 8) = 0;
                      *(_QWORD *)(v85 + 16) = 0;
                      *(_QWORD *)v85 = 4;
                      *(_BYTE *)(v85 + 24) = 3;
                      v105 = v33 & 0x1FFFFFFFFFFFFFFFLL;
                      v86 = swift_retain(v33 & 0x1FFFFFFFFFFFFFFFLL);
                      swift_willThrow(v86);
                      swift_bridgeObjectRelease(v4);
                      swift_release(v7);
                      sub_100063CD0(v30, *((unint64_t *)&v99 + 1));
                      sub_100063CD0(v100, *((unint64_t *)&v100 + 1));
                      sub_100063CD0(v20, v101);
                      v70 = 0;
                      v71 = 0;
                      v68 = 1;
                      v69 = 1;
                      goto LABEL_32;
                    }
                    if (*(_QWORD *)(v4 + 16))
                    {
                      v35 = *(_QWORD *)(v33 + 16);
                      v34 = *(_QWORD *)(v33 + 24);
                      sub_100063C8C(v35, v34);
                      v98 = v35;
                      v36 = v35;
                      v37 = v34;
                      sub_100063C8C(v36, v34);
                      v38 = sub_100187ED0(0xD000000000000011, 0x80000001002BF910);
                      if ((v39 & 1) != 0)
                      {
                        v40 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v38);
                        v97 = v37;
                        if (v40 >> 61 != 1)
                        {
                          v87 = sub_100071B74();
                          swift_allocError(&type metadata for ASN1Error, v87, 0, 0);
                          *(_QWORD *)(v88 + 8) = 0;
                          *(_QWORD *)(v88 + 16) = 0;
                          *(_QWORD *)v88 = 4;
                          *(_BYTE *)(v88 + 24) = 3;
                          v105 = v40 & 0x1FFFFFFFFFFFFFFFLL;
                          v89 = swift_retain(v40 & 0x1FFFFFFFFFFFFFFFLL);
                          swift_willThrow(v89);
                          swift_bridgeObjectRelease(v4);
                          swift_release(v7);
                          sub_100063CD0(v98, v37);
                          sub_100063CD0(v99, *((unint64_t *)&v99 + 1));
                          sub_100063CD0(v100, *((unint64_t *)&v100 + 1));
                          sub_100063CD0(v20, v101);
                          v71 = 0;
                          v68 = 1;
                          v69 = 1;
                          v70 = 1;
                          goto LABEL_32;
                        }
                        v42 = *(_QWORD *)(v40 + 16);
                        v41 = *(_QWORD *)(v40 + 24);
                        v104 = *(_QWORD *)(v4 + 16);
                        sub_100063C8C(v42, v41);
                        v96 = v42;
                        v43 = v42;
                        v44 = v41;
                        sub_100063C8C(v43, v41);
                        if (v104)
                        {
                          v45 = sub_100187ED0(0x69537265646E6573, 0xEF65727574616E67);
                          if ((v46 & 1) != 0)
                          {
                            v47 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v45);
                            v105 = v47 & 0x1FFFFFFFFFFFFFFFLL;
                            swift_retain(v47 & 0x1FFFFFFFFFFFFFFFLL);
                            swift_bridgeObjectRelease(v4);
                            if (v47 >> 61 == 1)
                            {
                              v103 = *(_QWORD *)((v47 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
                              v94 = *(_QWORD *)((v47 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
                              sub_100063C8C(v103, v94);
                              swift_release(v105);
                              swift_release(v7);
                              *(_QWORD *)&v107 = v10;
                              *((_QWORD *)&v107 + 1) = v9;
                              *(_QWORD *)&v108 = v115;
                              *((_QWORD *)&v108 + 1) = v106;
                              *(_QWORD *)&v109 = v20;
                              *((_QWORD *)&v109 + 1) = v101;
                              v110 = v100;
                              v111 = v99;
                              *(_QWORD *)&v112 = v98;
                              *((_QWORD *)&v112 + 1) = v97;
                              *(_QWORD *)&v113 = v96;
                              *((_QWORD *)&v113 + 1) = v44;
                              *(_QWORD *)&v114 = v103;
                              *((_QWORD *)&v114 + 1) = v94;
                              sub_1001AF728((uint64_t *)&v107, (void (*)(uint64_t, uint64_t))sub_100063C8C);
                              sub_100063CD0(v96, v44);
                              sub_100063CD0(v98, v97);
                              sub_100063CD0(v99, *((unint64_t *)&v99 + 1));
                              sub_100063CD0(v100, *((unint64_t *)&v100 + 1));
                              sub_100063CD0(v20, v101);
                              sub_100063CD0(v115, v106);
                              sub_100063CD0(v10, v9);
                              result = (uint64_t)sub_1001AF728((uint64_t *)&v107, (void (*)(uint64_t, uint64_t))sub_100063CD0);
                              v49 = v112;
                              a2[4] = v111;
                              a2[5] = v49;
                              v50 = v114;
                              a2[6] = v113;
                              a2[7] = v50;
                              v51 = v108;
                              *a2 = v107;
                              a2[1] = v51;
                              v52 = v110;
                              a2[2] = v109;
                              a2[3] = v52;
                              return result;
                            }
                            v90 = sub_100071B74();
                            v91 = swift_allocError(&type metadata for ASN1Error, v90, 0, 0);
                            *(_QWORD *)(v92 + 8) = 0;
                            *(_QWORD *)(v92 + 16) = 0;
                            *(_QWORD *)v92 = 4;
                            *(_BYTE *)(v92 + 24) = 3;
                            swift_willThrow(v91);
                            swift_release(v7);
                            v93 = v44;
                            sub_100063CD0(v96, v44);
                            sub_100063CD0(v98, v97);
                            sub_100063CD0(v99, *((unint64_t *)&v99 + 1));
                            sub_100063CD0(v100, *((unint64_t *)&v100 + 1));
                            sub_100063CD0(v20, v101);
                            v68 = 1;
                            v69 = 1;
                            v70 = 1;
                            v71 = 1;
LABEL_32:
                            sub_100063CD0(v115, v106);
                            sub_100063CD0(v10, v9);
                            swift_release(v105);
                            sub_100063CD0(v10, v9);
                            sub_100063CD0(v115, v106);
                            if (v102 == 0x2000000000000000)
                            {
                              sub_100063CD0(v95, v101);
                              v75 = *((_QWORD *)&v100 + 1);
                              result = v100;
                              v77 = v98;
                              v76 = v99;
                              v78 = v96;
                              if ((v68 & 1) == 0)
                                goto LABEL_34;
                            }
                            else
                            {
                              v75 = *((_QWORD *)&v100 + 1);
                              result = v100;
                              v77 = v98;
                              v76 = v99;
                              v78 = v96;
                              if (!v68)
                              {
LABEL_34:
                                v79 = *((_QWORD *)&v99 + 1);
                                v80 = v97;
                                if (v69)
                                  goto LABEL_35;
                                goto LABEL_40;
                              }
                            }
                            result = sub_100063CD0(result, v75);
                            v79 = *((_QWORD *)&v99 + 1);
                            v80 = v97;
                            if ((v69 & 1) != 0)
                            {
LABEL_35:
                              result = sub_100063CD0(v76, v79);
                              if ((v70 & 1) == 0)
                                goto LABEL_36;
                              goto LABEL_41;
                            }
LABEL_40:
                            if (!v70)
                            {
LABEL_36:
                              if (!v71)
                                return result;
LABEL_42:
                              v63 = v78;
                              v64 = v93;
                              return sub_100063CD0(v63, v64);
                            }
LABEL_41:
                            result = sub_100063CD0(v77, v80);
                            if ((v71 & 1) == 0)
                              return result;
                            goto LABEL_42;
                          }
                        }
LABEL_63:
                        result = swift_bridgeObjectRelease(v4);
                        __break(1u);
                        return result;
                      }
LABEL_62:
                      __break(1u);
                      goto LABEL_63;
                    }
LABEL_61:
                    __break(1u);
                    goto LABEL_62;
                  }
LABEL_60:
                  __break(1u);
                  goto LABEL_61;
                }
LABEL_59:
                __break(1u);
                goto LABEL_60;
              }
LABEL_58:
              __break(1u);
              goto LABEL_59;
            }
LABEL_57:
            __break(1u);
            goto LABEL_58;
          }
LABEL_56:
          __break(1u);
          goto LABEL_57;
        }
LABEL_55:
        __break(1u);
        goto LABEL_56;
      }
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  v60 = sub_100071B74();
  swift_allocError(&type metadata for ASN1Error, v60, 0, 0);
  *(_QWORD *)(v61 + 8) = 0;
  *(_QWORD *)(v61 + 16) = 0;
  *(_QWORD *)v61 = 4;
  *(_BYTE *)(v61 + 24) = 3;
  v62 = swift_retain(v13 & 0x1FFFFFFFFFFFFFFFLL);
  swift_willThrow(v62);
  swift_bridgeObjectRelease(v4);
  swift_release(v7);
  sub_100063CD0(v10, v9);
  swift_release(v13 & 0x1FFFFFFFFFFFFFFFLL);
  v63 = v10;
  v64 = v9;
  return sub_100063CD0(v63, v64);
}

uint64_t sub_1001AF0F4@<X0>(unint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t result;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;

  if (a1 >> 61 != 3)
  {
    v31 = sub_100071B74();
    v32 = swift_allocError(&type metadata for ASN1Error, v31, 0, 0);
    *(_QWORD *)(v33 + 8) = 0;
    *(_QWORD *)(v33 + 16) = 0;
    *(_QWORD *)v33 = 4;
    *(_BYTE *)(v33 + 24) = 3;
    swift_willThrow(v32);
    return swift_release(a1 & 0x1FFFFFFFFFFFFFFFLL);
  }
  v4 = *(_QWORD *)(a1 + 16);
  if (!*(_QWORD *)(v4 + 16))
  {
    __break(1u);
    goto LABEL_32;
  }
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 16));
  v5 = sub_100187ED0(1684632949, 0xE400000000000000);
  if ((v6 & 1) == 0)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v7 = a1 & 0x1FFFFFFFFFFFFFFFLL;
  v8 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v5);
  if (v8 >> 61 != 1)
  {
    v34 = sub_100071B74();
    swift_allocError(&type metadata for ASN1Error, v34, 0, 0);
    *(_QWORD *)(v35 + 8) = 0;
    *(_QWORD *)(v35 + 16) = 0;
    *(_QWORD *)v35 = 4;
    *(_BYTE *)(v35 + 24) = 3;
    v36 = v8 & 0x1FFFFFFFFFFFFFFFLL;
    v37 = swift_retain(v36);
    swift_willThrow(v37);
    swift_release(v36);
    swift_bridgeObjectRelease(v4);
    return swift_release(v7);
  }
  if (!*(_QWORD *)(v4 + 16))
    goto LABEL_33;
  v10 = *(_QWORD *)(v8 + 16);
  v9 = *(_QWORD *)(v8 + 24);
  sub_100063C8C(v10, v9);
  sub_100063C8C(v10, v9);
  v11 = sub_100187ED0(0x5555746E65726170, 0xEA00000000004449);
  if ((v12 & 1) == 0)
  {
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v13 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v11);
  if (v13 >> 61 != 1)
  {
    v38 = sub_100071B74();
    swift_allocError(&type metadata for ASN1Error, v38, 0, 0);
    *(_QWORD *)(v39 + 8) = 0;
    *(_QWORD *)(v39 + 16) = 0;
    *(_QWORD *)v39 = 4;
    *(_BYTE *)(v39 + 24) = 3;
    v40 = v13 & 0x1FFFFFFFFFFFFFFFLL;
    v41 = swift_retain(v40);
    swift_willThrow(v41);
    swift_bridgeObjectRelease(v4);
    swift_release(v7);
    sub_100063CD0(v10, v9);
    swift_release(v40);
    v42 = v10;
    v43 = v9;
    return sub_100063CD0(v42, v43);
  }
  if (!*(_QWORD *)(v4 + 16))
    goto LABEL_35;
  v15 = *(_QWORD *)(v13 + 16);
  v14 = *(_QWORD *)(v13 + 24);
  sub_100063C8C(v15, v14);
  sub_100063C8C(v15, v14);
  v16 = sub_100187ED0(0x44495344746C61, 0xE700000000000000);
  if ((v17 & 1) == 0)
  {
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v16);
  v62 = v18 & 0xE000000000000000;
  if ((v18 & 0xE000000000000000) != 0x2000000000000000)
  {
    v44 = sub_100071B74();
    swift_allocError(&type metadata for ASN1Error, v44, 0, 0);
    *(_QWORD *)(v45 + 8) = 0;
    *(_QWORD *)(v45 + 16) = 0;
    *(_QWORD *)v45 = 4;
    *(_BYTE *)(v45 + 24) = 3;
    v29 = v18 & 0x1FFFFFFFFFFFFFFFLL;
    v46 = swift_retain(v29);
    swift_willThrow(v46);
    swift_bridgeObjectRelease(v4);
    swift_release(v7);
    v47 = 0;
    goto LABEL_23;
  }
  v58 = v15;
  if (!*(_QWORD *)(v4 + 16))
    goto LABEL_37;
  v19 = *(_QWORD *)(v18 + 16);
  v20 = *(_QWORD *)(v18 + 24);
  sub_100063C8C(v19, v20);
  v60 = v20;
  v61 = v19;
  sub_100063C8C(v19, v20);
  v21 = sub_100187ED0(0x416465776F6C6C61, 0xEA00000000004449);
  if ((v22 & 1) == 0)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  v23 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v21);
  v15 = v58;
  if (v23 >> 61 == 1)
  {
    v56 = v14;
    v24 = *(_QWORD *)(v23 + 16);
    v25 = *(_QWORD *)(v23 + 24);
    v54 = *(_QWORD *)(v4 + 16);
    sub_100063C8C(v24, v25);
    v59 = v24;
    v57 = v25;
    sub_100063C8C(v24, v25);
    if (v54)
    {
      v26 = sub_100187ED0(0xD000000000000011, 0x80000001002BF890);
      if ((v27 & 1) != 0)
      {
        v28 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v26);
        v29 = v28 & 0x1FFFFFFFFFFFFFFFLL;
        swift_retain(v28 & 0x1FFFFFFFFFFFFFFFLL);
        swift_bridgeObjectRelease(v4);
        if (v28 >> 61 == 1)
        {
          v63 = *(_QWORD *)((v28 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
          v55 = *(_QWORD *)((v28 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
          sub_100063C8C(v63, v55);
          swift_release(v28 & 0x1FFFFFFFFFFFFFFFLL);
          swift_release(v7);
          sub_100063C8C(v10, v9);
          sub_100063C8C(v58, v56);
          sub_100063C8C(v61, v60);
          sub_100063C8C(v59, v57);
          sub_100063C8C(v63, v55);
          sub_100063CD0(v59, v57);
          sub_100063CD0(v61, v60);
          sub_100063CD0(v58, v56);
          sub_100063CD0(v10, v9);
          sub_100063CD0(v10, v9);
          sub_100063CD0(v58, v56);
          sub_100063CD0(v61, v60);
          sub_100063CD0(v59, v57);
          result = sub_100063CD0(v63, v55);
          *a2 = v10;
          a2[1] = v9;
          a2[2] = v58;
          a2[3] = v56;
          a2[4] = v61;
          a2[5] = v60;
          a2[6] = v59;
          a2[7] = v57;
          a2[8] = v63;
          a2[9] = v55;
          return result;
        }
        v51 = sub_100071B74();
        v52 = swift_allocError(&type metadata for ASN1Error, v51, 0, 0);
        *(_QWORD *)(v53 + 8) = 0;
        *(_QWORD *)(v53 + 16) = 0;
        *(_QWORD *)v53 = 4;
        *(_BYTE *)(v53 + 24) = 3;
        swift_willThrow(v52);
        swift_release(v7);
        sub_100063CD0(v59, v57);
        a2 = (_QWORD *)v60;
        v7 = v61;
        sub_100063CD0(v61, v60);
        v47 = 1;
        v14 = v56;
        goto LABEL_23;
      }
    }
LABEL_39:
    result = swift_bridgeObjectRelease(v4);
    __break(1u);
    return result;
  }
  v48 = sub_100071B74();
  swift_allocError(&type metadata for ASN1Error, v48, 0, 0);
  *(_QWORD *)(v49 + 8) = 0;
  *(_QWORD *)(v49 + 16) = 0;
  *(_QWORD *)v49 = 4;
  *(_BYTE *)(v49 + 24) = 3;
  v29 = v23 & 0x1FFFFFFFFFFFFFFFLL;
  v50 = swift_retain(v29);
  swift_willThrow(v50);
  swift_bridgeObjectRelease(v4);
  swift_release(v7);
  a2 = (_QWORD *)v60;
  v7 = v61;
  sub_100063CD0(v61, v60);
  v47 = 0;
LABEL_23:
  sub_100063CD0(v15, v14);
  sub_100063CD0(v10, v9);
  swift_release(v29);
  sub_100063CD0(v10, v9);
  result = sub_100063CD0(v15, v14);
  if (v62 == 0x2000000000000000)
  {
    result = sub_100063CD0(v7, (unint64_t)a2);
    if ((v47 & 1) == 0)
      return result;
  }
  else if (!v47)
  {
    return result;
  }
  v42 = v59;
  v43 = v57;
  return sub_100063CD0(v42, v43);
}

uint64_t *sub_1001AF728(uint64_t *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = a1[5];
  v8 = a1[6];
  v9 = a1[7];
  v10 = a1[8];
  v11 = a1[9];
  v13 = a1[11];
  v14 = a1[10];
  v15 = a1[13];
  v16 = a1[12];
  v17 = a1[15];
  v18 = a1[14];
  a2(*a1, a1[1]);
  a2(v4, v5);
  a2(v6, v7);
  a2(v8, v9);
  a2(v10, v11);
  a2(v14, v13);
  a2(v16, v15);
  a2(v18, v17);
  return a1;
}

uint64_t sub_1001AF7F8()
{
  uint64_t v0;

  sub_100063CD0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  sub_100063CD0(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 49, 7);
}

uint64_t *sub_1001AF824(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;

  v2 = a1[2];
  v3 = a1[3];
  sub_100063C8C(*a1, a1[1]);
  sub_100063C8C(v2, v3);
  return a1;
}

_QWORD *sub_1001AF868(_QWORD *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = a1[3];
  v5 = a1[4];
  v6 = a1[5];
  v7 = a1[6];
  v8 = a1[7];
  v9 = a1[8];
  v10 = a1[9];
  v11 = a1[10];
  v13 = a1[12];
  v14 = a1[11];
  v15 = a1[14];
  v16 = a1[13];
  a2(a1[1], a1[2]);
  a2(v4, v5);
  a2(v6, v7);
  a2(v8, v9);
  a2(v10, v11);
  a2(v14, v13);
  a2(v16, v15);
  return a1;
}

_QWORD *sub_1001AF924(_QWORD *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = a1[3];
  v5 = a1[4];
  v6 = a1[5];
  v7 = a1[6];
  v8 = a1[7];
  v9 = a1[8];
  v10 = a1[9];
  v11 = a1[10];
  v13 = a1[12];
  v14 = a1[11];
  v15 = a1[14];
  v16 = a1[13];
  v17 = a1[16];
  v18 = a1[15];
  v19 = a1[18];
  v20 = a1[17];
  a2(a1[1], a1[2]);
  a2(v4, v5);
  a2(v6, v7);
  a2(v8, v9);
  a2(v10, v11);
  a2(v14, v13);
  a2(v16, v15);
  a2(v18, v17);
  a2(v20, v19);
  return a1;
}

_QWORD *sub_1001AFA08(_QWORD *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v4 = a1[3];
  v5 = a1[4];
  v6 = a1[5];
  v7 = a1[6];
  v8 = a1[7];
  v9 = a1[8];
  v10 = a1[9];
  v11 = a1[10];
  v13 = a1[12];
  v14 = a1[11];
  a2(a1[1], a1[2]);
  a2(v4, v5);
  a2(v6, v7);
  a2(v8, v9);
  a2(v10, v11);
  a2(v14, v13);
  return a1;
}

uint64_t sub_1001AFAB0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_100063D3C(&qword_100348A70);
  result = swift_allocObject(v2, 416, 7);
  *(_OWORD *)(result + 16) = xmmword_1002892B0;
  strcpy((char *)(result + 32), "formatVersion");
  *(_WORD *)(result + 46) = -4864;
  *(_QWORD *)(result + 48) = 192;
  *(_WORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 72) = 0;
  *(_BYTE *)(result + 80) = -64;
  *(_QWORD *)(result + 88) = &off_100305DB0;
  *(_QWORD *)(result + 96) = 0x444955556B6C74;
  *(_QWORD *)(result + 104) = 0xE700000000000000;
  *(_QWORD *)(result + 112) = 212;
  *(_WORD *)(result + 120) = 0;
  *(_QWORD *)(result + 128) = 0;
  *(_QWORD *)(result + 136) = 0;
  *(_BYTE *)(result + 144) = -64;
  *(_QWORD *)(result + 152) = &off_100305E00;
  strcpy((char *)(result + 160), "clientMetadata");
  *(_BYTE *)(result + 175) = -18;
  *(_QWORD *)(result + 176) = 220;
  *(_WORD *)(result + 184) = 0;
  *(_QWORD *)(result + 192) = 0;
  *(_QWORD *)(result + 200) = 0;
  *(_BYTE *)(result + 208) = -64;
  *(_QWORD *)(result + 216) = _swiftEmptyArrayStorage;
  *(_QWORD *)(result + 224) = 0x5649736561;
  *(_QWORD *)(result + 232) = 0xE500000000000000;
  *(_QWORD *)(result + 240) = 216;
  *(_WORD *)(result + 248) = 0;
  *(_QWORD *)(result + 256) = 0;
  *(_QWORD *)(result + 264) = 0;
  *(_BYTE *)(result + 272) = -64;
  *(_QWORD *)(result + 280) = _swiftEmptyArrayStorage;
  *(_QWORD *)(result + 288) = 0xD000000000000013;
  *(_QWORD *)(result + 296) = 0x80000001002BF990;
  *(_QWORD *)(result + 304) = 221;
  *(_WORD *)(result + 312) = 0;
  *(_QWORD *)(result + 320) = 0;
  *(_QWORD *)(result + 328) = 0;
  *(_BYTE *)(result + 336) = -64;
  *(_QWORD *)(result + 344) = _swiftEmptyArrayStorage;
  *(_QWORD *)(result + 352) = 0xD000000000000011;
  *(_QWORD *)(result + 360) = 0x80000001002BF910;
  *(_QWORD *)(result + 368) = 218;
  *(_WORD *)(result + 376) = 0;
  *(_QWORD *)(result + 384) = 0;
  *(_QWORD *)(result + 392) = 0;
  *(_BYTE *)(result + 400) = -64;
  *(_QWORD *)(result + 408) = _swiftEmptyArrayStorage;
  *(_QWORD *)a1 = 230;
  *(_WORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = result;
  *(_QWORD *)(a1 + 24) = 1;
  *(_BYTE *)(a1 + 32) = 64;
  *(_QWORD *)(a1 + 40) = _swiftEmptyArrayStorage;
  return result;
}

uint64_t sub_1001AFC4C@<X0>(unint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t result;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;

  if (a1 >> 61 != 3)
  {
    v37 = sub_100071B74();
    v38 = swift_allocError(&type metadata for ASN1Error, v37, 0, 0);
    *(_QWORD *)(v39 + 8) = 0;
    *(_QWORD *)(v39 + 16) = 0;
    *(_QWORD *)v39 = 4;
    *(_BYTE *)(v39 + 24) = 3;
    swift_willThrow(v38);
    return swift_release(a1 & 0x1FFFFFFFFFFFFFFFLL);
  }
  v4 = *(_QWORD *)(a1 + 16);
  if (!*(_QWORD *)(v4 + 16))
  {
    __break(1u);
    goto LABEL_37;
  }
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 16));
  v5 = sub_100187ED0(0x655674616D726F66, 0xED00006E6F697372);
  if ((v6 & 1) == 0)
  {
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  v7 = a1 & 0x1FFFFFFFFFFFFFFFLL;
  v8 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v5);
  if (v8 >> 61 != 1)
  {
    v40 = sub_100071B74();
    swift_allocError(&type metadata for ASN1Error, v40, 0, 0);
    *(_QWORD *)(v41 + 8) = 0;
    *(_QWORD *)(v41 + 16) = 0;
    *(_QWORD *)v41 = 4;
    *(_BYTE *)(v41 + 24) = 3;
    v42 = v8 & 0x1FFFFFFFFFFFFFFFLL;
    v43 = swift_retain(v42);
    swift_willThrow(v43);
    swift_release(v42);
    swift_bridgeObjectRelease(v4);
    return swift_release(v7);
  }
  if (!*(_QWORD *)(v4 + 16))
    goto LABEL_38;
  v10 = *(_QWORD *)(v8 + 16);
  v9 = *(_QWORD *)(v8 + 24);
  sub_100063C8C(v10, v9);
  sub_100063C8C(v10, v9);
  v11 = sub_100187ED0(0x444955556B6C74, 0xE700000000000000);
  if ((v12 & 1) == 0)
  {
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v13 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v11);
  if (v13 >> 61 != 1)
  {
    v44 = sub_100071B74();
    swift_allocError(&type metadata for ASN1Error, v44, 0, 0);
    *(_QWORD *)(v45 + 8) = 0;
    *(_QWORD *)(v45 + 16) = 0;
    *(_QWORD *)v45 = 4;
    *(_BYTE *)(v45 + 24) = 3;
    v46 = v13 & 0x1FFFFFFFFFFFFFFFLL;
    v47 = swift_retain(v46);
    swift_willThrow(v47);
    swift_bridgeObjectRelease(v4);
    swift_release(v7);
    sub_100063CD0(v10, v9);
    swift_release(v46);
    result = v10;
    v48 = v9;
    return sub_100063CD0(result, v48);
  }
  if (!*(_QWORD *)(v4 + 16))
    goto LABEL_40;
  v15 = *(_QWORD *)(v13 + 16);
  v14 = *(_QWORD *)(v13 + 24);
  sub_100063C8C(v15, v14);
  sub_100063C8C(v15, v14);
  v16 = sub_100187ED0(0x654D746E65696C63, 0xEE00617461646174);
  if ((v17 & 1) == 0)
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  v74 = v14;
  v18 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v16);
  v72 = v18 & 0xE000000000000000;
  if ((v18 & 0xE000000000000000) != 0x2000000000000000)
  {
    v49 = sub_100071B74();
    swift_allocError(&type metadata for ASN1Error, v49, 0, 0);
    *(_QWORD *)(v50 + 8) = 0;
    *(_QWORD *)(v50 + 16) = 0;
    *(_QWORD *)v50 = 4;
    *(_BYTE *)(v50 + 24) = 3;
    v35 = v18 & 0x1FFFFFFFFFFFFFFFLL;
    v51 = swift_retain(v35);
    swift_willThrow(v51);
    swift_bridgeObjectRelease(v4);
    swift_release(v7);
    v52 = 0;
    v53 = 0;
    goto LABEL_27;
  }
  if (!*(_QWORD *)(v4 + 16))
    goto LABEL_42;
  v19 = v15;
  v20 = *(_QWORD *)(v18 + 16);
  v21 = *(_QWORD *)(v18 + 24);
  sub_100063C8C(v20, v21);
  v67 = v20;
  v71 = v21;
  sub_100063C8C(v20, v21);
  v22 = sub_100187ED0(0x5649736561, 0xE500000000000000);
  if ((v23 & 1) == 0)
  {
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  v24 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v22);
  v15 = v19;
  if (v24 >> 61 != 1)
  {
    v54 = sub_100071B74();
    swift_allocError(&type metadata for ASN1Error, v54, 0, 0);
    *(_QWORD *)(v55 + 8) = 0;
    *(_QWORD *)(v55 + 16) = 0;
    *(_QWORD *)v55 = 4;
    *(_BYTE *)(v55 + 24) = 3;
    v35 = v24 & 0x1FFFFFFFFFFFFFFFLL;
    v56 = swift_retain(v35);
    swift_willThrow(v56);
    swift_bridgeObjectRelease(v4);
    swift_release(v7);
    v7 = v67;
    sub_100063CD0(v67, v71);
    v52 = 0;
    v53 = 0;
    goto LABEL_27;
  }
  if (!*(_QWORD *)(v4 + 16))
    goto LABEL_44;
  v25 = *(_QWORD *)(v24 + 16);
  v26 = *(_QWORD *)(v24 + 24);
  sub_100063C8C(v25, v26);
  v66 = v25;
  v70 = v26;
  sub_100063C8C(v25, v26);
  v27 = sub_100187ED0(0xD000000000000013, 0x80000001002BF990);
  if ((v28 & 1) == 0)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  v29 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v27);
  if (v29 >> 61 != 1)
  {
    v58 = sub_100071B74();
    swift_allocError(&type metadata for ASN1Error, v58, 0, 0);
    *(_QWORD *)(v59 + 8) = 0;
    *(_QWORD *)(v59 + 16) = 0;
    *(_QWORD *)v59 = 4;
    *(_BYTE *)(v59 + 24) = 3;
    v35 = v29 & 0x1FFFFFFFFFFFFFFFLL;
    v60 = swift_retain(v35);
    swift_willThrow(v60);
    swift_bridgeObjectRelease(v4);
    swift_release(v7);
    sub_100063CD0(v25, v70);
    v7 = v67;
    sub_100063CD0(v67, v71);
    v53 = 0;
    v52 = 1;
    goto LABEL_27;
  }
  v30 = *(_QWORD *)(v29 + 16);
  v31 = *(_QWORD *)(v29 + 24);
  v64 = *(_QWORD *)(v4 + 16);
  sub_100063C8C(v30, v31);
  v68 = v30;
  v69 = v31;
  sub_100063C8C(v30, v31);
  if (!v64 || (v32 = sub_100187ED0(0xD000000000000011, 0x80000001002BF910), (v33 & 1) == 0))
  {
LABEL_46:
    result = swift_bridgeObjectRelease(v4);
    __break(1u);
    return result;
  }
  v34 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v32);
  v35 = v34 & 0x1FFFFFFFFFFFFFFFLL;
  swift_retain(v34 & 0x1FFFFFFFFFFFFFFFLL);
  swift_bridgeObjectRelease(v4);
  if (v34 >> 61 == 1)
  {
    v73 = *(_QWORD *)((v34 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
    v65 = *(_QWORD *)((v34 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
    sub_100063C8C(v73, v65);
    swift_release(v34 & 0x1FFFFFFFFFFFFFFFLL);
    swift_release(v7);
    sub_100063C8C(v10, v9);
    sub_100063C8C(v15, v74);
    sub_100063C8C(v67, v71);
    sub_100063C8C(v66, v70);
    sub_100063C8C(v68, v69);
    sub_100063C8C(v73, v65);
    sub_100063CD0(v68, v69);
    sub_100063CD0(v66, v70);
    sub_100063CD0(v67, v71);
    sub_100063CD0(v15, v74);
    sub_100063CD0(v10, v9);
    sub_100063CD0(v10, v9);
    sub_100063CD0(v15, v74);
    sub_100063CD0(v67, v71);
    sub_100063CD0(v66, v70);
    sub_100063CD0(v68, v69);
    result = sub_100063CD0(v73, v65);
    *a2 = v10;
    a2[1] = v9;
    a2[2] = v15;
    a2[3] = v74;
    a2[4] = v67;
    a2[5] = v71;
    a2[6] = v66;
    a2[7] = v70;
    a2[8] = v68;
    a2[9] = v69;
    a2[10] = v73;
    a2[11] = v65;
    return result;
  }
  v61 = sub_100071B74();
  v62 = swift_allocError(&type metadata for ASN1Error, v61, 0, 0);
  *(_QWORD *)(v63 + 8) = 0;
  *(_QWORD *)(v63 + 16) = 0;
  *(_QWORD *)v63 = 4;
  *(_BYTE *)(v63 + 24) = 3;
  swift_willThrow(v62);
  swift_release(v7);
  sub_100063CD0(v68, v69);
  sub_100063CD0(v66, v70);
  v7 = v67;
  sub_100063CD0(v67, v71);
  v52 = 1;
  v53 = 1;
LABEL_27:
  sub_100063CD0(v15, v74);
  sub_100063CD0(v10, v9);
  swift_release(v35);
  sub_100063CD0(v10, v9);
  sub_100063CD0(v15, v74);
  if (v72 == 0x2000000000000000)
  {
    sub_100063CD0(v7, v71);
    v57 = v70;
    if ((v52 & 1) == 0)
      goto LABEL_29;
  }
  else
  {
    v57 = v70;
    if (!v52)
    {
LABEL_29:
      result = v68;
      v48 = v69;
      if (!v53)
        return result;
      return sub_100063CD0(result, v48);
    }
  }
  sub_100063CD0(v66, v57);
  result = v68;
  v48 = v69;
  if ((v53 & 1) != 0)
    return sub_100063CD0(result, v48);
  return result;
}

uint64_t _s16CommandCreateTLKVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_100063C8C(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  sub_100063C8C(v6, v7);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t _s16CommandCreateTLKVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_100063C8C(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  sub_100063CD0(v6, v7);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  sub_100063C8C(v8, v9);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  sub_100063CD0(v10, v11);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t _s16CommandCreateTLKVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100063CD0(v4, v5);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_100063CD0(v6, v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t _s16CommandCreateTLKVwet(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 32);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t _s16CommandCreateTLKVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = a2 + 1;
  }
  return result;
}

ValueMetadata *_s16CommandCreateTLKVMa()
{
  return &_s16CommandCreateTLKVN;
}

ValueMetadata *_s14ImportTLKInputVMa()
{
  return &_s14ImportTLKInputVN;
}

uint64_t _s14ImportTLKInputVwxx_0(uint64_t a1)
{
  sub_100063CD0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return sub_1001344D4(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

uint64_t *_s14ImportTLKInputVwcp_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = *a2;
  v5 = a2[1];
  sub_100063C8C(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  v6 = a2[2];
  v7 = a2[3];
  v9 = a2[4];
  v8 = a2[5];
  sub_100134508(v6, v7, v9, v8);
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = v9;
  a1[5] = v8;
  return a1;
}

uint64_t *_s14ImportTLKInputVwca_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v4 = *a2;
  v5 = a2[1];
  sub_100063C8C(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_100063CD0(v6, v7);
  v8 = a2[2];
  v9 = a2[3];
  v11 = a2[4];
  v10 = a2[5];
  sub_100134508(v8, v9, v11, v10);
  v12 = a1[2];
  v13 = a1[3];
  v14 = a1[4];
  v15 = a1[5];
  a1[2] = v8;
  a1[3] = v9;
  a1[4] = v11;
  a1[5] = v10;
  sub_1001344D4(v12, v13, v14, v15);
  return a1;
}

uint64_t *_s14ImportTLKInputVwta_0(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;

  v4 = *a1;
  v5 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_100063CD0(v4, v5);
  v6 = a1[2];
  v7 = a1[3];
  v8 = a1[4];
  v9 = a1[5];
  v10 = a2[2];
  *((_OWORD *)a1 + 1) = a2[1];
  *((_OWORD *)a1 + 2) = v10;
  sub_1001344D4(v6, v7, v8, v9);
  return a1;
}

uint64_t _s14ImportTLKInputVwet_0(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xF && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 15);
  v3 = (((*(_QWORD *)(a1 + 40) >> 58) >> 3) & 1 | (2
                                                               * ((*(_QWORD *)(a1 + 40) >> 58) & 4 | (*(_QWORD *)(a1 + 24) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xE)
    v3 = -1;
  return v3 + 1;
}

uint64_t _s14ImportTLKInputVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 15;
    if (a3 >= 0xF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0xF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
    {
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = (unint64_t)((-a2 >> 1) & 3) << 60;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = ((unint64_t)((-a2 >> 1) & 7 | (8 * (-a2 & 0xF))) << 58) & 0x3000000000000000;
    }
  }
  return result;
}

ValueMetadata *_s14ExportTLKInputVMa()
{
  return &_s14ExportTLKInputVN;
}

uint64_t _s13ListTLKOutputVwxx(uint64_t a1)
{
  sub_100063CD0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  sub_100063CD0(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  sub_100063CD0(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  return sub_100063CD0(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
}

uint64_t _s13ListTLKOutputVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_100063C8C(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  sub_100063C8C(v6, v7);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  sub_100063C8C(v8, v9);
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  sub_100063C8C(v10, v11);
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t _s13ListTLKOutputVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_100063C8C(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  sub_100063CD0(v6, v7);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  sub_100063C8C(v8, v9);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  sub_100063CD0(v10, v11);
  v12 = *(_QWORD *)(a2 + 32);
  v13 = *(_QWORD *)(a2 + 40);
  sub_100063C8C(v12, v13);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v12;
  *(_QWORD *)(a1 + 40) = v13;
  sub_100063CD0(v14, v15);
  v16 = *(_QWORD *)(a2 + 48);
  v17 = *(_QWORD *)(a2 + 56);
  sub_100063C8C(v16, v17);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v16;
  *(_QWORD *)(a1 + 56) = v17;
  sub_100063CD0(v18, v19);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

__n128 _s13ListTLKOutputVwtk(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t _s13ListTLKOutputVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100063CD0(v4, v5);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_100063CD0(v6, v7);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  sub_100063CD0(v8, v9);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  sub_100063CD0(v10, v11);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t _s13ListTLKOutputVwet(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 65))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 64);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t _s13ListTLKOutputVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 65) = 0;
    if (a2)
      *(_BYTE *)(result + 64) = a2 + 1;
  }
  return result;
}

ValueMetadata *_s13ListTLKOutputVMa()
{
  return &_s13ListTLKOutputVN;
}

unint64_t sub_1001B0AD4()
{
  unint64_t result;

  result = qword_100349360;
  if (!qword_100349360)
  {
    result = swift_getWitnessTable(&unk_10028C530, &_s13ListTLKOutputVN);
    atomic_store(result, (unint64_t *)&qword_100349360);
  }
  return result;
}

uint64_t sub_1001B0B18()
{
  uint64_t v0;

  sub_1001241AC(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t _s18HenosisAttestationOwxx(uint64_t a1)
{
  return sub_1001344D4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t *_s18HenosisAttestationOwcp(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  sub_100134508(*a2, v4, v5, v6);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  return a1;
}

uint64_t *_s18HenosisAttestationOwca(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  sub_100134508(*a2, v4, v5, v6);
  v7 = *a1;
  v8 = a1[1];
  v9 = a1[2];
  v10 = a1[3];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  sub_1001344D4(v7, v8, v9, v10);
  return a1;
}

uint64_t *_s18HenosisAttestationOwta(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v7;

  v3 = *a1;
  v5 = a1[1];
  v4 = a1[2];
  v6 = a1[3];
  v7 = a2[1];
  *(_OWORD *)a1 = *a2;
  *((_OWORD *)a1 + 1) = v7;
  sub_1001344D4(v3, v5, v4, v6);
  return a1;
}

uint64_t _s18HenosisAttestationOwet(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xF && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 15);
  v3 = (((*(_QWORD *)(a1 + 24) >> 58) >> 3) & 1 | (2
                                                               * ((*(_QWORD *)(a1 + 24) >> 58) & 4 | (*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xE)
    v3 = -1;
  return v3 + 1;
}

uint64_t _s18HenosisAttestationOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 15;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0xF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)((-a2 >> 1) & 3) << 60;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = ((unint64_t)((-a2 >> 1) & 7 | (8 * (-a2 & 0xF))) << 58) & 0x3000000000000000;
    }
  }
  return result;
}

uint64_t sub_1001B0D08(uint64_t a1)
{
  return (*(_QWORD *)(a1 + 24) >> 61) & 1;
}

uint64_t sub_1001B0D14(uint64_t result)
{
  *(_QWORD *)(result + 24) &= ~0x2000000000000000uLL;
  return result;
}

uint64_t sub_1001B0D24(uint64_t result, char a2)
{
  unint64_t v2;

  v2 = *(_QWORD *)(result + 24) & 0xCFFFFFFFFFFFFFFFLL | ((unint64_t)(a2 & 1) << 61);
  *(_QWORD *)(result + 8) &= 0xCFFFFFFFFFFFFFFFLL;
  *(_QWORD *)(result + 24) = v2;
  return result;
}

ValueMetadata *_s18HenosisAttestationOMa()
{
  return &_s18HenosisAttestationON;
}

ValueMetadata *_s16CertificateChainVMa()
{
  return &_s16CertificateChainVN;
}

ValueMetadata *_s17AppletAttestationVMa()
{
  return &_s17AppletAttestationVN;
}

void sub_1001B0D78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  os_log_type_t v42;
  uint8_t *v43;
  void (*v44)(char *, uint64_t);
  char *v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  os_log_type_t v55;
  uint8_t *v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  os_log_type_t v64;
  uint8_t *v65;
  BOOL v66;
  __n128 v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  os_log_type_t v77;
  _BOOL4 v78;
  uint64_t v79;
  uint8_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint8_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  os_log_type_t v92;
  uint8_t *v93;
  uint64_t v94;
  uint64_t v95;
  NSObject *v96;
  os_log_type_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  NSObject *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  os_log_type_t v107;
  uint8_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  NSObject *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  os_log_type_t v117;
  uint8_t *v118;
  uint64_t v119;
  void (*v120)(char *, uint64_t);
  char *v121;
  uint64_t v122;
  NSObject *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  os_log_type_t v127;
  uint8_t *v128;
  uint8_t *v129;
  uint64_t v130;
  uint64_t v131;
  void (*v132)(char *, uint64_t, uint64_t);
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139[5];
  _OWORD v140[2];
  uint64_t v141;
  __int128 v142;
  _BYTE v143[24];
  __int128 v144;
  _OWORD v145[2];

  v136 = type metadata accessor for Logger(0);
  v0 = *(_QWORD *)(v136 - 8);
  v2 = __chkstk_darwin(v136, v1);
  v4 = (char *)&v131 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v2, v5);
  v8 = (char *)&v131 - v7;
  v10 = __chkstk_darwin(v6, v9);
  v12 = (char *)&v131 - v11;
  v14 = __chkstk_darwin(v10, v13);
  v16 = (char *)&v131 - v15;
  v18 = __chkstk_darwin(v14, v17);
  v20 = (char *)&v131 - v19;
  v22 = __chkstk_darwin(v18, v21);
  v24 = (char *)&v131 - v23;
  v26 = __chkstk_darwin(v22, v25);
  v135 = (char *)&v131 - v27;
  v29 = __chkstk_darwin(v26, v28);
  v31 = (char *)&v131 - v30;
  __chkstk_darwin(v29, v32);
  v34 = (char *)&v131 - v33;
  if (qword_1003445B0 != -1)
    swift_once(&qword_1003445B0, sub_1000E87A8);
  if ((sub_1000E8840() & 1) != 0)
  {
    v35 = type metadata accessor for SECDefaultAppReconciler(0);
    v36 = v136;
    v37 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v0 + 16))(v4, v137 + *(int *)(v35 + 20), v136);
    v38 = Logger.logObject.getter(v37);
    v42 = static os_log_type_t.info.getter(v38, v39, v40, v41);
    if (os_log_type_enabled(v38, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v43 = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, v42, "reconcileDefaultContactlessApp: pending migration -- no op", v43, 2u);
      swift_slowDealloc(v43, -1, -1);
    }

    v44 = *(void (**)(char *, uint64_t))(v0 + 8);
    v45 = v4;
    goto LABEL_7;
  }
  sub_1001EBCCC(v139);
  sub_1000E9350((uint64_t)v139, (uint64_t)v140);
  if (!*((_QWORD *)&v140[0] + 1))
    goto LABEL_13;
  v142 = v140[0];
  *(_OWORD *)v143 = v140[1];
  *(_QWORD *)&v143[16] = v141;
  if ((sub_100097720() & 1) == 0)
  {
    v144 = v142;
    sub_10006F8A4((uint64_t)&v144);
    v145[0] = *(_OWORD *)&v143[8];
    sub_10006F8A4((uint64_t)v145);
LABEL_13:
    v48 = type metadata accessor for SECDefaultAppReconciler(0);
    v49 = v136;
    v50 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v0 + 16))(v8, v137 + *(int *)(v48 + 20), v136);
    v51 = Logger.logObject.getter(v50);
    v55 = static os_log_type_t.info.getter(v51, v52, v53, v54);
    if (os_log_type_enabled(v51, v55))
    {
      v56 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v56 = 0;
      _os_log_impl((void *)&_mh_execute_header, v51, v55, "No default app or default app not installed -- overwriting passbook as default", v56, 2u);
      swift_slowDealloc(v56, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v0 + 8))(v8, v49);
    sub_1001EB1DC();
    return;
  }
  v46 = v142;
  if (v142 == __PAIR128__(0x80000001002BD780, 0xD000000000000012))
  {
    v47 = *(_QWORD *)v143;
    goto LABEL_17;
  }
  v57 = _stringCompareWithSmolCheck(_:_:expecting:)(v142, *((_QWORD *)&v142 + 1), 0xD000000000000012, 0x80000001002BD780, 0);
  v47 = *(_QWORD *)v143;
  if ((v57 & 1) != 0)
  {
LABEL_17:
    if (v47 == 3)
    {
      swift_bridgeObjectRelease(*((_QWORD *)&v46 + 1));
      v145[0] = *(_OWORD *)&v143[8];
      sub_10006F8A4((uint64_t)v145);
      v58 = type metadata accessor for SECDefaultAppReconciler(0);
      v36 = v136;
      v59 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v0 + 16))(v12, v137 + *(int *)(v58 + 20), v136);
      v60 = Logger.logObject.getter(v59);
      v64 = static os_log_type_t.info.getter(v60, v61, v62, v63);
      if (os_log_type_enabled(v60, v64))
      {
        v65 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v65 = 0;
        _os_log_impl((void *)&_mh_execute_header, v60, v64, "Passbook is default -- no op", v65, 2u);
        swift_slowDealloc(v65, -1, -1);
      }

      v44 = *(void (**)(char *, uint64_t))(v0 + 8);
      v45 = v12;
      goto LABEL_7;
    }
  }
  if (v47 == 1)
    goto LABEL_28;
  if (v47 != 2)
  {
    v94 = type metadata accessor for SECDefaultAppReconciler(0);
    v36 = v136;
    (*(void (**)(char *, uint64_t, uint64_t))(v0 + 16))(v16, v137 + *(int *)(v94 + 20), v136);
    v145[0] = *(_OWORD *)&v143[8];
    swift_bridgeObjectRetain(*((_QWORD *)&v46 + 1));
    sub_10006F87C((uint64_t)v145);
    swift_bridgeObjectRetain(*((_QWORD *)&v46 + 1));
    sub_10006F87C((uint64_t)v145);
    swift_bridgeObjectRetain(*((_QWORD *)&v46 + 1));
    v95 = sub_10006F87C((uint64_t)v145);
    v96 = Logger.logObject.getter(v95);
    v97 = static os_log_type_t.fault.getter();
    if (!os_log_type_enabled(v96, v97))
    {
      swift_bridgeObjectRelease(*((_QWORD *)&v46 + 1));
      sub_10006F8A4((uint64_t)v145);
      swift_bridgeObjectRelease(*((_QWORD *)&v46 + 1));
      sub_10006F8A4((uint64_t)v145);
      swift_bridgeObjectRelease(*((_QWORD *)&v46 + 1));
      sub_10006F8A4((uint64_t)v145);
      swift_bridgeObjectRelease(*((_QWORD *)&v46 + 1));
      sub_10006F8A4((uint64_t)v145);

      v44 = *(void (**)(char *, uint64_t))(v0 + 8);
      v45 = v16;
LABEL_7:
      v44(v45, v36);
      return;
    }
    v98 = swift_slowAlloc(22, -1);
    v99 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v144 = v99;
    *(_DWORD *)v98 = 136315394;
    swift_bridgeObjectRetain(*((_QWORD *)&v46 + 1));
    v138 = sub_1001C56EC(v46, *((unint64_t *)&v46 + 1), (uint64_t *)&v144);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, v139, v98 + 4, v98 + 12);
    swift_bridgeObjectRelease_n(*((_QWORD *)&v46 + 1), 2);
    sub_10006F8A4((uint64_t)v145);
    swift_bridgeObjectRelease(*((_QWORD *)&v46 + 1));
    sub_10006F8A4((uint64_t)v145);
    *(_WORD *)(v98 + 12) = 2048;
    swift_bridgeObjectRelease(*((_QWORD *)&v46 + 1));
    sub_10006F8A4((uint64_t)v145);
    v138 = v47;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, v139, v98 + 14, v98 + 22);
    swift_bridgeObjectRelease(*((_QWORD *)&v46 + 1));
    sub_10006F8A4((uint64_t)v145);
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v46, v97, "Unexpected default app info has no tcc string %s, domain %lu", (uint8_t *)v98, 0x16u);
    swift_arrayDestroy(v99, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v99, -1, -1);
    swift_slowDealloc(v98, -1, -1);

    (*(void (**)(char *, uint64_t))(v0 + 8))(v16, v136);
    return;
  }
  if (!sub_1001E24CC(0))
  {
LABEL_28:
    v85 = type metadata accessor for SECDefaultAppReconciler(0);
    v86 = v136;
    v87 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v0 + 16))(v20, v137 + *(int *)(v85 + 20), v136);
    v88 = Logger.logObject.getter(v87);
    v92 = static os_log_type_t.info.getter(v88, v89, v90, v91);
    if (os_log_type_enabled(v88, v92))
    {
      v93 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v93 = 0;
      _os_log_impl((void *)&_mh_execute_header, v88, v92, "Reconcile Default Contactless: Ineligible to use default app, attempt to fallback to counterpart service", v93, 2u);
      swift_slowDealloc(v93, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v0 + 8))(v20, v86);
    sub_1001B1BE8(&v142);
    swift_bridgeObjectRelease(*((_QWORD *)&v46 + 1));
    v145[0] = *(_OWORD *)&v143[8];
    goto LABEL_31;
  }
  v66 = sub_1001E24CC(2);
  v134 = v46;
  v68 = TCCContext.checkTCCAccess(to:for:)(0, v46, *((_QWORD *)&v46 + 1), v67);
  if (v68)
  {
    if (v68 == 2)
    {
      v69 = v137 + *(int *)(type metadata accessor for SECDefaultAppReconciler(0) + 20);
      v70 = *(void (**)(char *, uint64_t, uint64_t))(v0 + 16);
      v71 = v136;
      v70(v31, v69, v136);
      v145[0] = *(_OWORD *)&v143[8];
      swift_bridgeObjectRetain(*((_QWORD *)&v46 + 1));
      sub_10006F87C((uint64_t)v145);
      swift_bridgeObjectRetain(*((_QWORD *)&v46 + 1));
      v72 = sub_10006F87C((uint64_t)v145);
      v73 = Logger.logObject.getter(v72);
      v77 = static os_log_type_t.info.getter(v73, v74, v75, v76);
      v78 = os_log_type_enabled(v73, v77);
      v133 = *((_QWORD *)&v46 + 1);
      if (v78)
      {
        v79 = swift_slowAlloc(12, -1);
        v132 = v70;
        v80 = (uint8_t *)v79;
        v81 = swift_slowAlloc(32, -1);
        v131 = v69;
        v82 = v81;
        *(_QWORD *)&v144 = v81;
        *(_DWORD *)v80 = 136315138;
        swift_bridgeObjectRetain(*((_QWORD *)&v46 + 1));
        v138 = sub_1001C56EC(v134, *((unint64_t *)&v46 + 1), (uint64_t *)&v144);
        v71 = v136;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, v139, v80 + 4, v80 + 12);
        swift_bridgeObjectRelease_n(*((_QWORD *)&v46 + 1), 2);
        sub_10006F8A4((uint64_t)v145);
        swift_bridgeObjectRelease(*((_QWORD *)&v46 + 1));
        sub_10006F8A4((uint64_t)v145);
        _os_log_impl((void *)&_mh_execute_header, v73, v77, "Default app %s found after restore", v80, 0xCu);
        swift_arrayDestroy(v82, 1, (char *)&type metadata for Any + 8);
        v83 = v82;
        v69 = v131;
        swift_slowDealloc(v83, -1, -1);
        v84 = v80;
        v70 = v132;
        swift_slowDealloc(v84, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease(*((_QWORD *)&v46 + 1));
        sub_10006F8A4((uint64_t)v145);
        swift_bridgeObjectRelease(*((_QWORD *)&v46 + 1));
        sub_10006F8A4((uint64_t)v145);
      }

      v120 = *(void (**)(char *, uint64_t))(v0 + 8);
      v120(v31, v71);
      if (!v66)
      {
        v121 = v135;
        v122 = ((uint64_t (*)(char *, uint64_t, uint64_t))v70)(v135, v69, v71);
        v123 = Logger.logObject.getter(v122);
        v127 = static os_log_type_t.info.getter(v123, v124, v125, v126);
        if (os_log_type_enabled(v123, v127))
        {
          v128 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v128 = 0;
          _os_log_impl((void *)&_mh_execute_header, v123, v127, "Ineligible to use app after restore, attempt to fallback to counterpart service", v128, 2u);
          v129 = v128;
          v121 = v135;
          swift_slowDealloc(v129, -1, -1);
        }

        v120(v121, v71);
        sub_1001B1BE8(&v142);
      }
      v130 = v133;
      goto LABEL_50;
    }
    if (v68 == 1)
    {
      v110 = type metadata accessor for SECDefaultAppReconciler(0);
      v111 = v136;
      (*(void (**)(char *, uint64_t, uint64_t))(v0 + 16))(v34, v137 + *(int *)(v110 + 20), v136);
      v145[0] = *(_OWORD *)&v143[8];
      swift_bridgeObjectRetain(*((_QWORD *)&v46 + 1));
      sub_10006F87C((uint64_t)v145);
      swift_bridgeObjectRetain(*((_QWORD *)&v46 + 1));
      v112 = sub_10006F87C((uint64_t)v145);
      v113 = Logger.logObject.getter(v112);
      v117 = static os_log_type_t.info.getter(v113, v114, v115, v116);
      if (os_log_type_enabled(v113, v117))
      {
        v118 = (uint8_t *)swift_slowAlloc(12, -1);
        v119 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v144 = v119;
        *(_DWORD *)v118 = 136315138;
        swift_bridgeObjectRetain(*((_QWORD *)&v46 + 1));
        v138 = sub_1001C56EC(v134, *((unint64_t *)&v46 + 1), (uint64_t *)&v144);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, v139, v118 + 4, v118 + 12);
        swift_bridgeObjectRelease_n(*((_QWORD *)&v46 + 1), 2);
        sub_10006F8A4((uint64_t)v145);
        swift_bridgeObjectRelease(*((_QWORD *)&v46 + 1));
        sub_10006F8A4((uint64_t)v145);
        _os_log_impl((void *)&_mh_execute_header, v113, v117, "Default app %s TCC revoked, attempt to fallback to counterpart service", v118, 0xCu);
        swift_arrayDestroy(v119, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v119, -1, -1);
        swift_slowDealloc(v118, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease(*((_QWORD *)&v46 + 1));
        sub_10006F8A4((uint64_t)v145);
        swift_bridgeObjectRelease(*((_QWORD *)&v46 + 1));
        sub_10006F8A4((uint64_t)v145);
      }

      (*(void (**)(char *, uint64_t))(v0 + 8))(v34, v111);
      sub_1001B1BE8(&v142);
      v130 = *((_QWORD *)&v46 + 1);
LABEL_50:
      swift_bridgeObjectRelease(v130);
LABEL_31:
      sub_10006F8A4((uint64_t)v145);
      return;
    }
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "seserviced/SECDefaultAppReconciliation.swift", 44, 2, 148, 0);
    __break(1u);
  }
  else
  {
    v100 = type metadata accessor for SECDefaultAppReconciler(0);
    v101 = v136;
    (*(void (**)(char *, uint64_t, uint64_t))(v0 + 16))(v24, v137 + *(int *)(v100 + 20), v136);
    v145[0] = *(_OWORD *)&v143[8];
    swift_bridgeObjectRetain(*((_QWORD *)&v46 + 1));
    v102 = sub_10006F87C((uint64_t)v145);
    v103 = Logger.logObject.getter(v102);
    v107 = static os_log_type_t.info.getter(v103, v104, v105, v106);
    if (os_log_type_enabled(v103, v107))
    {
      v108 = (uint8_t *)swift_slowAlloc(12, -1);
      v109 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v144 = v109;
      *(_DWORD *)v108 = 136315138;
      swift_bridgeObjectRetain(*((_QWORD *)&v46 + 1));
      v138 = sub_1001C56EC(v134, *((unint64_t *)&v46 + 1), (uint64_t *)&v144);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, v139, v108 + 4, v108 + 12);
      swift_bridgeObjectRelease_n(*((_QWORD *)&v46 + 1), 2);
      sub_10006F8A4((uint64_t)v145);
      swift_bridgeObjectRelease(*((_QWORD *)&v46 + 1));
      sub_10006F8A4((uint64_t)v145);
      _os_log_impl((void *)&_mh_execute_header, v103, v107, "Default app %s still eligible to use HCE first time after restore -- no op", v108, 0xCu);
      swift_arrayDestroy(v109, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v109, -1, -1);
      swift_slowDealloc(v108, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease(*((_QWORD *)&v46 + 1));
      sub_10006F8A4((uint64_t)v145);
      swift_bridgeObjectRelease(*((_QWORD *)&v46 + 1));
      sub_10006F8A4((uint64_t)v145);
    }

    (*(void (**)(char *, uint64_t))(v0 + 8))(v24, v101);
  }
}

void sub_1001B1BE8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  os_log_type_t v49;
  uint64_t v50;
  uint8_t *v51;
  os_log_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  Swift::String v58;
  uint8_t *v59;
  os_log_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v7 = __chkstk_darwin(v4, v6);
  v9 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v7, v10);
  v13 = (char *)&v59 - v12;
  __chkstk_darwin(v11, v14);
  v16 = (char *)&v59 - v15;
  v17 = 0;
  v18 = a1[2];
  if (v18 != 2)
  {
    if (v18 != 1)
    {
      __break(1u);
      __break(1u);
      __break(1u);
      goto LABEL_25;
    }
    v17 = 1;
  }
  v19 = TCCContext.TCCService.fallbackTCCService.getter(v17);
  if (v19 == 1)
  {
LABEL_7:
    v20 = type metadata accessor for SECDefaultAppReconciler(0);
    v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v9, v2 + *(int *)(v20 + 20), v4);
    v22 = Logger.logObject.getter(v21);
    v26 = static os_log_type_t.info.getter(v22, v23, v24, v25);
    if (os_log_type_enabled(v22, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v26, "Default app ineligible for both services, configuring Passbook as default", v27, 2u);
      swift_slowDealloc(v27, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
LABEL_10:
    sub_1001EB1DC();
    return;
  }
  if (v19)
  {
LABEL_25:
    *(_QWORD *)&v65 = 0;
    *((_QWORD *)&v65 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(37);
    swift_bridgeObjectRelease(*((_QWORD *)&v65 + 1));
    *(_QWORD *)&v65 = 0xD000000000000023;
    *((_QWORD *)&v65 + 1) = 0x80000001002BFA40;
    v56 = *a1;
    v57 = (void *)a1[1];
    swift_bridgeObjectRetain(v57);
    v58._countAndFlagsBits = v56;
    v58._object = v57;
    String.append(_:)(v58);
    swift_bridgeObjectRelease(v57);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v65, *((_QWORD *)&v65 + 1), "seserviced/SECDefaultAppReconciliation.swift", 44, 2, 161, 0);
    goto LABEL_26;
  }
  if (!sub_1001E24CC(2))
    goto LABEL_7;
  v28 = TCCContext.TCCService.fallbackTCCService.getter(v18 != 2);
  v30 = *a1;
  v29 = a1[1];
  v32 = TCCContext.checkTCCAccess(to:for:)(v28, *a1, v29, v31);
  if ((unint64_t)(v32 - 1) < 2)
  {
    v33 = type metadata accessor for SECDefaultAppReconciler(0);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v16, v2 + *(int *)(v33 + 20), v4);
    v65 = *(_OWORD *)(a1 + 3);
    swift_bridgeObjectRetain(v29);
    sub_10006F87C((uint64_t)&v65);
    swift_bridgeObjectRetain(v29);
    v34 = sub_10006F87C((uint64_t)&v65);
    v35 = Logger.logObject.getter(v34);
    v39 = static os_log_type_t.info.getter(v35, v36, v37, v38);
    if (os_log_type_enabled(v35, v39))
    {
      v62 = v30;
      v40 = (uint8_t *)swift_slowAlloc(12, -1);
      v41 = swift_slowAlloc(32, -1);
      v64 = v41;
      *(_DWORD *)v40 = 136315138;
      swift_bridgeObjectRetain(v29);
      v63 = sub_1001C56EC(v62, v29, &v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v40 + 4, v40 + 12);
      swift_bridgeObjectRelease_n(v29, 2);
      sub_10006F8A4((uint64_t)&v65);
      swift_bridgeObjectRelease(v29);
      sub_10006F8A4((uint64_t)&v65);
      _os_log_impl((void *)&_mh_execute_header, v35, v39, "Default app %s TCC denied/unknown for fallback TCC, overwriting passbook as default", v40, 0xCu);
      swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v40, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease(v29);
      sub_10006F8A4((uint64_t)&v65);
      swift_bridgeObjectRelease(v29);
      sub_10006F8A4((uint64_t)&v65);
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v16, v4);
    goto LABEL_10;
  }
  if (v32)
  {
    while (1)
    {
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "seserviced/SECDefaultAppReconciliation.swift", 44, 2, 186, 0);
LABEL_26:
      __break(1u);
    }
  }
  v42 = type metadata accessor for SECDefaultAppReconciler(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v13, v2 + *(int *)(v42 + 20), v4);
  v43 = a1[4];
  v62 = a1[3];
  swift_bridgeObjectRetain_n(v29, 2);
  v44 = swift_bridgeObjectRetain_n(v43, 2);
  v45 = Logger.logObject.getter(v44);
  v49 = static os_log_type_t.info.getter(v45, v46, v47, v48);
  if (os_log_type_enabled(v45, v49))
  {
    v50 = swift_slowAlloc(12, -1);
    v60 = v45;
    v51 = (uint8_t *)v50;
    v61 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v65 = v61;
    v59 = v51;
    *(_DWORD *)v51 = 136315138;
    swift_bridgeObjectRetain(v29);
    v64 = sub_1001C56EC(v30, v29, (uint64_t *)&v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65, v51 + 4, v51 + 12);
    swift_bridgeObjectRelease_n(v43, 2);
    swift_bridgeObjectRelease_n(v29, 3);
    v53 = v59;
    v52 = v60;
    _os_log_impl((void *)&_mh_execute_header, v60, v49, "Default app %s is granted for fallback TCC Service, pivoting", v59, 0xCu);
    v54 = v61;
    swift_arrayDestroy(v61, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v54, -1, -1);
    swift_slowDealloc(v53, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v43, 2);
    swift_bridgeObjectRelease_n(v29, 2);
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v4);
  if (v18 == 1)
    v55 = 2;
  else
    v55 = 1;
  *(_QWORD *)&v65 = v30;
  *((_QWORD *)&v65 + 1) = v29;
  v66 = v55;
  v67 = v62;
  v68 = v43;
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRetain(v43);
  sub_1001EC214((uint64_t)&v65);
  swift_bridgeObjectRelease(v43);
  swift_bridgeObjectRelease(v29);
}

uint64_t type metadata accessor for SECDefaultAppReconciler(uint64_t a1)
{
  uint64_t result;

  result = qword_1003493C0;
  if (!qword_1003493C0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SECDefaultAppReconciler);
  return result;
}

void **sub_1001B224C(void **a1, void **a2, uint64_t a3)
{
  int v3;
  char *v4;
  void **v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  char *v11;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain(v4);
  }
  else
  {
    v5 = a1;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for Logger(0);
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    v11 = v4;
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t sub_1001B22E0(id *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  v4 = (char *)a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for Logger(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

void **sub_1001B2328(void **a1, void **a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  id v10;

  v4 = *a2;
  *a1 = *a2;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for Logger(0);
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  v10 = v4;
  v9(v6, v7, v8);
  return a1;
}

void **sub_1001B2394(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  v8 = v6;

  v9 = *(int *)(a3 + 20);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for Logger(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v10, v11, v12);
  return a1;
}

_QWORD *sub_1001B2404(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for Logger(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void **sub_1001B2460(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v6 = *a1;
  *a1 = *a2;

  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Logger(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_1001B24CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001B24D8);
}

uint64_t sub_1001B24D8(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Logger(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_1001B2554(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001B2560);
}

char *sub_1001B2560(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for Logger(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_1001B25D4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1001B264C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t result;
  _QWORD v26[5];

  v1 = v0;
  v2 = *v0;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (_QWORD *)((char *)&v26[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v8 = qword_100354EE8;
  *v7 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  v9 = (id)v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v7, v3);
  if ((v8 & 1) != 0)
  {
    if (qword_100344608 == -1)
      goto LABEL_5;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100344608, sub_100141A78);
LABEL_5:
  v10 = 0x80000001002BA410;
  v11 = sub_1000E848C(0xD000000000000012, 0x80000001002BA410);
  if (v12 >> 60 == 15)
  {
    __break(1u);
    goto LABEL_12;
  }
  v13 = v11;
  v14 = v12;
  sub_100143B94(&off_1003052B0, v11, v12);
  sub_10006B9B4(v13, v14);
  v26[3] = v2;
  v26[4] = &off_10030CBF0;
  v26[0] = v1;
  swift_retain(v1);
  v15 = sub_1000E848C(0xD000000000000012, 0x80000001002BA410);
  if (v16 >> 60 == 15)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v17 = v15;
  v18 = v16;
  v10 = 0;
  sub_100141854((uint64_t)v26, v15, v16);
  sub_10006B9B4(v17, v18);
  sub_10006BA9C(v26);
  v19 = sub_1000E848C(0xD000000000000012, 0x80000001002BA410);
  if (v20 >> 60 != 15)
  {
    v21 = v19;
    v22 = v20;
    v23 = sub_100143DF4(v19, v20);
    sub_10006B9B4(v21, v22);
    sub_1001B3D3C(v23);
    return swift_release(v23);
  }
LABEL_13:
  __break(1u);
  result = swift_unexpectedError(v10, "seserviced/LyonExpress.swift", 28, 1, 29);
  __break(1u);
  return result;
}

uint64_t sub_1001B28A8(uint64_t a1, unint64_t a2)
{
  uint8_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  void (*v10)(_QWORD *, uint64_t, uint64_t);
  id v11;
  char v12;
  void (*v13)(_QWORD *, uint64_t);
  char *v14;
  uint64_t result;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  NSObject *v41;
  uint64_t v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  unint64_t v57;
  unint64_t v58;
  __int128 v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint8_t *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  int v71;
  uint8_t *v72;
  uint8_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint8_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint8_t *v85;
  uint8_t *v86;
  uint64_t v87;
  __int128 v88;
  uint8_t *v89;
  uint64_t v90;
  void (*v91)(_QWORD *, uint64_t);
  uint8_t *v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  _QWORD *v97;

  v91 = (void (*)(_QWORD *, uint64_t))a2;
  v92 = (uint8_t *)a1;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (uint64_t *)((char *)&v84 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v8 = (void *)qword_100354EE8;
  *v7 = qword_100354EE8;
  v9 = enum case for DispatchPredicate.onQueue(_:);
  v10 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v4 + 104);
  v10(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  v11 = v8;
  v12 = _dispatchPreconditionTest(_:)(v7);
  v13 = *(void (**)(_QWORD *, uint64_t))(v4 + 8);
  v13(v7, v3);
  if ((v12 & 1) != 0)
  {
    v89 = v2;
    if (qword_100344608 == -1)
      goto LABEL_5;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100344608, sub_100141A78);
LABEL_5:
  v14 = (char *)qword_100354CE0;
  result = sub_1000E848C(0xD000000000000012, 0x80000001002BA410);
  if (v16 >> 60 != 15)
  {
    v17 = (_QWORD *)result;
    v18 = v16;
    v19 = (void *)qword_100354EE8;
    *v7 = qword_100354EE8;
    v10(v7, v9, v3);
    v20 = v19;
    v21 = _dispatchPreconditionTest(_:)(v7);
    v13(v7, v3);
    if ((v21 & 1) != 0)
    {
      v22 = *(_QWORD *)&v14[OBJC_IVAR____TtC10seserviced10DSKExpress_expressKeys];
      swift_bridgeObjectRetain(v22);
      v13 = v91;
      v23 = (uint64_t)v92;
      sub_100063C8C((uint64_t)v92, (unint64_t)v91);
      sub_10006BA34((uint64_t)v17, v18);
      v24 = v89;
      v25 = sub_1001B6F30(v22);
      sub_10006B9B4((uint64_t)v17, v18);
      sub_100063CD0(v23, (unint64_t)v13);
      swift_bridgeObjectRelease(v22);
      if (v25)
      {
        v21 = *(_QWORD *)(v25 + 48);
        swift_bridgeObjectRetain(v21);
        swift_release(v25);
        sub_10006B9B4((uint64_t)v17, v18);
        if (v21)
        {
          v97 = _swiftEmptyArrayStorage;
          if (!*(_QWORD *)(v21 + 16)
            || (v26 = sub_100187ED0(0xD000000000000010, 0x80000001002B9D40), (v27 & 1) == 0)
            || (sub_100096CB0(*(_QWORD *)(v21 + 56) + 32 * v26, (uint64_t)&v95),
                v14 = (char *)&type metadata for Any,
                (swift_dynamicCast(&v93, &v95, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
            || (v28 = sub_1000E848C(v93, v94), v29 >> 60 == 15))
          {
            swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
            swift_bridgeObjectRetain(v21);
            v31 = Logger.logObject.getter(v30);
            v33 = static os_log_type_t.error.getter(v31, v32);
            if (os_log_type_enabled(v31, v33))
            {
              v34 = (uint8_t *)swift_slowAlloc(12, -1);
              v35 = swift_slowAlloc(32, -1);
              *(_QWORD *)&v95 = v35;
              *(_DWORD *)v34 = 136315138;
              v92 = v34 + 4;
              swift_bridgeObjectRetain(v21);
              v37 = Dictionary.description.getter(v36, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
              v39 = v38;
              swift_bridgeObjectRelease(v21);
              v93 = sub_1001C56EC(v37, v39, (uint64_t *)&v95);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94, v92, v34 + 12);
              swift_bridgeObjectRelease_n(v21, 2);
              swift_bridgeObjectRelease(v39);
              _os_log_impl((void *)&_mh_execute_header, v31, v33, "Cannot get data representation of primary reader identifier in %s", v34, 0xCu);
              swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v35, -1, -1);
              swift_slowDealloc(v34, -1, -1);
            }
            else
            {
              swift_bridgeObjectRelease_n(v21, 2);
            }

            goto LABEL_21;
          }
          v18 = v28;
          v7 = (_QWORD *)v29;
          v89 = v24;
          sub_100063C8C(v28, v29);
          sub_1001BD150(8, v18, (uint64_t)v7);
          v88 = v95;
          v17 = _swiftEmptyArrayStorage;
          if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) != 0)
          {
LABEL_23:
            v58 = v17[2];
            v57 = v17[3];
            if (v58 >= v57 >> 1)
              v17 = sub_1001C4254((_QWORD *)(v57 > 1), v58 + 1, 1, v17);
            v59 = v88;
            v17[2] = v58 + 1;
            *(_OWORD *)&v17[2 * v58 + 4] = v59;
            v97 = v17;
            if (*(_QWORD *)(v21 + 16)
              && (v60 = sub_100187ED0(0xD00000000000001BLL, 0x80000001002BFAB0), (v61 & 1) != 0))
            {
              sub_100096CB0(*(_QWORD *)(v21 + 56) + 32 * v60, (uint64_t)&v95);
            }
            else
            {
              v95 = 0u;
              v96 = 0u;
            }
            swift_bridgeObjectRelease(v21);
            if (*((_QWORD *)&v96 + 1))
            {
              v62 = sub_100063D3C(&qword_100346050);
              if ((swift_dynamicCast(&v93, &v95, v14 + 8, v62, 6) & 1) != 0)
              {
                v63 = v93;
                v64 = v90;
                swift_retain(v90);
                v65 = v89;
                v66 = sub_1001B7B44(v63);
                v89 = v65;
                if (v65)
                {
                  swift_release(v64);
                  sub_10006B9B4(v18, (unint64_t)v7);
                  swift_bridgeObjectRelease(v63);
                  return swift_bridgeObjectRelease(v17);
                }
                v83 = (uint64_t)v66;
                swift_bridgeObjectRelease(v63);
                swift_release(v64);
                sub_1001B6C84(v83);
                sub_10006B9B4(v18, (unint64_t)v7);
                return (uint64_t)v97;
              }
            }
            else
            {
              sub_100098C7C((uint64_t)&v95);
            }
            v67 = (uint64_t)v92;
            sub_100063C8C((uint64_t)v92, (unint64_t)v13);
            v68 = sub_100063C8C(v67, (unint64_t)v13);
            v69 = Logger.logObject.getter(v68);
            v70 = static os_log_type_t.debug.getter();
            v71 = v70;
            if (os_log_type_enabled(v69, v70))
            {
              LODWORD(v90) = v71;
              v72 = (uint8_t *)swift_slowAlloc(12, -1);
              v87 = swift_slowAlloc(32, -1);
              *(_QWORD *)&v95 = v87;
              v86 = v72;
              *(_DWORD *)v72 = 136315138;
              v85 = v72 + 4;
              v73 = v89;
              sub_1001BD2CC(v67, (uint64_t)v13);
              *(_QWORD *)&v88 = v18;
              v75 = v74;
              v89 = v73;
              v93 = v74;
              v76 = sub_100063D3C((uint64_t *)&unk_100346060);
              v77 = sub_10006B86C();
              v78 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v76, v77);
              v80 = v79;
              swift_bridgeObjectRelease(v75);
              v93 = sub_1001C56EC(v78, v80, (uint64_t *)&v95);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94, v85, v72 + 12);
              swift_bridgeObjectRelease(v80);
              sub_100063CD0(v67, (unint64_t)v13);
              sub_100063CD0(v67, (unint64_t)v13);
              v81 = v86;
              _os_log_impl((void *)&_mh_execute_header, v69, (os_log_type_t)v90, "No aux keys found for endpoint %s", v86, 0xCu);
              v82 = v87;
              swift_arrayDestroy(v87, 1, v14 + 8);
              swift_slowDealloc(v82, -1, -1);
              swift_slowDealloc(v81, -1, -1);
              sub_10006B9B4(v88, (unint64_t)v7);

            }
            else
            {
              sub_10006B9B4(v18, (unint64_t)v7);

              sub_100063CD0(v67, (unint64_t)v13);
              sub_100063CD0(v67, (unint64_t)v13);
            }
            return (uint64_t)v97;
          }
LABEL_42:
          v17 = sub_1001C4254(0, v17[2] + 1, 1, v17);
          goto LABEL_23;
        }
      }
      else
      {
        sub_10006B9B4((uint64_t)v17, v18);
      }
      sub_100063C8C(v23, (unint64_t)v13);
      v40 = sub_100063C8C(v23, (unint64_t)v13);
      v41 = Logger.logObject.getter(v40);
      v43 = static os_log_type_t.error.getter(v41, v42);
      if (os_log_type_enabled(v41, v43))
      {
        v44 = (uint8_t *)swift_slowAlloc(12, -1);
        v90 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v95 = v90;
        *(_DWORD *)v44 = 136315138;
        v89 = v44 + 4;
        sub_1001BD2CC(v23, (uint64_t)v13);
        v45 = v23;
        v47 = v46;
        v93 = v46;
        v48 = sub_100063D3C((uint64_t *)&unk_100346060);
        v49 = sub_10006B86C();
        v50 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v48, v49);
        v52 = v51;
        swift_bridgeObjectRelease(v47);
        v93 = sub_1001C56EC(v50, v52, (uint64_t *)&v95);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94, v89, v44 + 12);
        swift_bridgeObjectRelease(v52);
        sub_100063CD0(v45, (unint64_t)v13);
        sub_100063CD0(v45, (unint64_t)v13);
        _os_log_impl((void *)&_mh_execute_header, v41, v43, "Configured items missing for key %s", v44, 0xCu);
        v53 = v90;
        swift_arrayDestroy(v90, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v53, -1, -1);
        swift_slowDealloc(v44, -1, -1);

      }
      else
      {

        sub_100063CD0(v23, (unint64_t)v13);
        sub_100063CD0(v23, (unint64_t)v13);
      }
LABEL_21:
      v54 = sub_10006B828();
      v55 = swift_allocError(&type metadata for DSKError, v54, 0, 0);
      *v56 = 0;
      return swift_willThrow(v55);
    }
    __break(1u);
    goto LABEL_42;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001B3268(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  id v12;
  uint64_t result;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint8_t *v35;
  uint64_t v36;
  char v37[16];
  uint64_t v38[3];

  v3 = v2;
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (uint64_t *)((char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v11 = qword_100354EE8;
  *v10 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  v12 = (id)v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v10);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v7 + 8))(v10, v6);
  if ((v11 & 1) != 0)
  {
    v14 = (uint64_t *)(v3 + OBJC_IVAR____TtC10seserviced11LyonExpress_activeExpressEndpoints);
    swift_beginAccess(v3 + OBJC_IVAR____TtC10seserviced11LyonExpress_activeExpressEndpoints, v38, 32, 0);
    v15 = *v14;
    if (*(_QWORD *)(v15 + 16))
    {
      sub_100063C8C(a1, a2);
      v16 = sub_100187F6C(a1, a2);
      if ((v17 & 1) != 0)
      {
        v18 = (uint64_t *)(*(_QWORD *)(v15 + 56) + 24 * v16);
        v19 = *v18;
        v20 = v18[1];
        swift_endAccess(v38);
        sub_100063C8C(v19, v20);
        sub_100063CD0(a1, a2);
        return v19;
      }
      sub_100063CD0(a1, a2);
    }
    swift_endAccess(v38);
    sub_100063C8C(a1, a2);
    v21 = sub_100063C8C(a1, a2);
    v22 = Logger.logObject.getter(v21);
    v24 = static os_log_type_t.error.getter(v22, v23);
    if (os_log_type_enabled(v22, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = swift_slowAlloc(32, -1);
      v38[0] = v26;
      *(_DWORD *)v25 = 136315138;
      v35 = v25 + 4;
      sub_1001BD2CC(a1, a2);
      v28 = v27;
      v36 = v27;
      v29 = sub_100063D3C((uint64_t *)&unk_100346060);
      v30 = sub_10006B86C();
      v31 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v29, v30);
      v33 = v32;
      swift_bridgeObjectRelease(v28);
      v36 = sub_1001C56EC(v31, v33, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, v37, v35, v25 + 12);
      swift_bridgeObjectRelease(v33);
      sub_100063CD0(a1, a2);
      sub_100063CD0(a1, a2);
      _os_log_impl((void *)&_mh_execute_header, v22, v24, "Invalid pass %s not an active express endpoint", v25, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);

    }
    else
    {

      sub_100063CD0(a1, a2);
      sub_100063CD0(a1, a2);
    }
    return 0;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001B35AC(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  void (*v10)(_QWORD *, uint64_t, uint64_t);
  id v11;
  char v12;
  void (*v13)(_QWORD *, uint64_t);
  uint64_t v14;
  uint64_t result;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  id v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint8_t *v55;
  unint64_t v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  _BYTE v60[16];

  v56 = a2;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (uint64_t *)((char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v8 = (void *)qword_100354EE8;
  *v7 = qword_100354EE8;
  v9 = enum case for DispatchPredicate.onQueue(_:);
  v10 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v4 + 104);
  v10(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  v11 = v8;
  v12 = _dispatchPreconditionTest(_:)(v7);
  v13 = *(void (**)(_QWORD *, uint64_t))(v4 + 8);
  v13(v7, v3);
  if ((v12 & 1) != 0)
  {
    if (qword_100344608 == -1)
      goto LABEL_5;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100344608, sub_100141A78);
LABEL_5:
  v14 = qword_100354CE0;
  result = sub_1000E848C(0xD000000000000012, 0x80000001002BA410);
  if (v16 >> 60 != 15)
  {
    v17 = result;
    v18 = v16;
    v19 = (void *)qword_100354EE8;
    *v7 = qword_100354EE8;
    v10(v7, v9, v3);
    v20 = v19;
    v21 = _dispatchPreconditionTest(_:)(v7);
    result = ((uint64_t (*)(_QWORD *, uint64_t))v13)(v7, v3);
    if ((v21 & 1) != 0)
    {
      v22 = *(_QWORD *)(v14 + OBJC_IVAR____TtC10seserviced10DSKExpress_expressKeys);
      swift_bridgeObjectRetain(v22);
      v23 = v56;
      sub_100063C8C(a1, v56);
      sub_10006BA34(v17, v18);
      v24 = sub_1001B6F30(v22);
      sub_10006B9B4(v17, v18);
      sub_100063CD0(a1, v23);
      swift_bridgeObjectRelease(v22);
      if (v24)
      {
        v25 = *(_QWORD *)(v24 + 48);
        swift_bridgeObjectRetain(v25);
        swift_release(v24);
        sub_10006B9B4(v17, v18);
        if (v25)
        {
          if (*(_QWORD *)(v25 + 16)
            && (v26 = sub_100187ED0(0xD000000000000017, 0x80000001002B9D20), (v27 & 1) != 0))
          {
            sub_100096CB0(*(_QWORD *)(v25 + 56) + 32 * v26, (uint64_t)&v57);
          }
          else
          {
            v57 = 0u;
            v58 = 0u;
          }
          swift_bridgeObjectRelease(v25);
          if (*((_QWORD *)&v58 + 1))
          {
            v43 = sub_100063D3C((uint64_t *)&unk_1003465F0);
            if ((swift_dynamicCast(&v59, &v57, (char *)&type metadata for Any + 8, v43, 6) & 1) != 0)
              return v59;
          }
          else
          {
            sub_100098C7C((uint64_t)&v57);
          }
          sub_100063C8C(a1, v23);
          v44 = sub_100063C8C(a1, v23);
          v29 = Logger.logObject.getter(v44);
          v31 = static os_log_type_t.error.getter(v29, v45);
          if (os_log_type_enabled(v29, v31))
          {
            v32 = (uint8_t *)swift_slowAlloc(12, -1);
            v33 = swift_slowAlloc(32, -1);
            *(_QWORD *)&v57 = v33;
            *(_DWORD *)v32 = 136315138;
            v55 = v32 + 4;
            sub_1001BD2CC(a1, v23);
            v47 = v46;
            v59 = v46;
            v48 = v23;
            v49 = sub_100063D3C((uint64_t *)&unk_100346060);
            v50 = sub_10006B86C();
            v51 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v49, v50);
            v53 = v52;
            swift_bridgeObjectRelease(v47);
            v59 = sub_1001C56EC(v51, v53, (uint64_t *)&v57);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, v60, v55, v32 + 12);
            swift_bridgeObjectRelease(v53);
            sub_100063CD0(a1, v48);
            sub_100063CD0(a1, v48);
            v42 = "GRKs missing for %s";
            goto LABEL_22;
          }
          goto LABEL_23;
        }
      }
      else
      {
        sub_10006B9B4(v17, v18);
      }
      sub_100063C8C(a1, v23);
      v28 = sub_100063C8C(a1, v23);
      v29 = Logger.logObject.getter(v28);
      v31 = static os_log_type_t.error.getter(v29, v30);
      if (os_log_type_enabled(v29, v31))
      {
        v32 = (uint8_t *)swift_slowAlloc(12, -1);
        v33 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v57 = v33;
        *(_DWORD *)v32 = 136315138;
        v55 = v32 + 4;
        sub_1001BD2CC(a1, v23);
        v35 = v34;
        v59 = v34;
        v36 = v23;
        v37 = sub_100063D3C((uint64_t *)&unk_100346060);
        v38 = sub_10006B86C();
        v39 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v37, v38);
        v41 = v40;
        swift_bridgeObjectRelease(v35);
        v59 = sub_1001C56EC(v39, v41, (uint64_t *)&v57);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, v60, v55, v32 + 12);
        swift_bridgeObjectRelease(v41);
        sub_100063CD0(a1, v36);
        sub_100063CD0(a1, v36);
        v42 = "Configured items missing for key %s";
LABEL_22:
        _os_log_impl((void *)&_mh_execute_header, v29, v31, v42, v32, 0xCu);
        swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v33, -1, -1);
        swift_slowDealloc(v32, -1, -1);

        return 0;
      }
LABEL_23:

      sub_100063CD0(a1, v23);
      sub_100063CD0(a1, v23);
      return 0;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1001B3B74()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for LyonExpress(0);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  result = sub_1001B3BB0();
  qword_100354E10 = result;
  return result;
}

uint64_t sub_1001B3BB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  _QWORD aBlock[5];
  uint64_t v14;

  v1 = v0;
  v2 = type metadata accessor for DispatchQoS.QoSClass(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = String.init(cString:)(SESLoggingSubsystem);
  Logger.init(subsystem:category:)(v7);
  v8 = OBJC_IVAR____TtC10seserviced11LyonExpress_activeExpressEndpoints;
  *(_QWORD *)(v1 + v8) = sub_10017C4B4((uint64_t)_swiftEmptyArrayStorage);
  sub_10006C25C(0, (unint64_t *)&qword_1003461A0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchQoS.QoSClass.default(_:), v2);
  v9 = (void *)static OS_dispatch_queue.global(qos:)(v6);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  aBlock[4] = sub_1001B6F10;
  v14 = v1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10017BF6C;
  aBlock[3] = &unk_10030CC00;
  v10 = _Block_copy(aBlock);
  v11 = v14;
  swift_retain(v1);
  swift_release(v11);
  os_state_add_handler(v9, v10);
  _Block_release(v10);

  return v1;
}

uint64_t sub_1001B3D3C(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void (*v8)(_QWORD);
  id v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_log_type_t v16;
  _BOOL4 v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  os_unfair_lock_s *v26;
  os_unfair_lock_s *v27;
  _QWORD *v28;
  __int128 v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __objc2_class **v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  uint64_t v64;
  os_log_type_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __objc2_class **v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  NSObject *v92;
  uint64_t v93;
  os_log_type_t v94;
  _DWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint8_t *v105;
  os_log_t v106;
  uint64_t v107;
  uint64_t v108;
  id v109;
  unint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  __n128 v118;
  int64_t v119;
  _QWORD *v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  BOOL v124;
  int64_t v125;
  unint64_t v126;
  int64_t v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  id v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  os_unfair_lock_s *v149;
  os_unfair_lock_s *v150;
  uint64_t v151;
  void *v152;
  uint64_t v153;
  NSObject *v154;
  uint64_t v155;
  os_log_type_t v156;
  uint8_t *v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  NSObject *v161;
  uint64_t v162;
  int v163;
  _DWORD *v164;
  uint64_t v165;
  id v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  _QWORD *v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t v176;
  NSObject *v177;
  int v178;
  _BOOL4 v179;
  _DWORD *v180;
  char *v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  char v189;
  char *v190;
  _BYTE *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  BOOL v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v200;
  uint64_t v201;
  uint64_t *v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  BOOL v210;
  uint64_t v211;
  unsigned __int8 v212;
  uint64_t v213;
  uint64_t v214;
  _QWORD v216[2];
  int v217;
  unint64_t *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  __n128 v223;
  uint64_t v224;
  _QWORD *v225;
  _QWORD *v226;
  uint64_t v227;
  NSObject *v228;
  _DWORD *v229;
  NSObject *v230;
  uint64_t v231;
  int64_t v232;
  uint64_t v233;
  void (*v234)(_QWORD *, uint64_t);
  void (*v235)(_QWORD *, _QWORD, uint64_t);
  unsigned int v236;
  uint64_t v237;
  unint64_t v238;
  int64_t v239;
  unint64_t v240;
  unint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  _DWORD *v246;
  os_log_t v247;
  uint64_t v248;
  char *v249;
  __int128 v250;
  _QWORD *v251;
  unint64_t v252;
  __int128 v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  char v257;
  uint64_t v258;
  __objc2_class **v259;
  uint64_t v260;
  uint64_t v261;
  _QWORD *v262;
  _QWORD *v263;
  uint64_t v264;
  unint64_t v265;

  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (_QWORD *)((char *)v216 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v7 = qword_100354EE8;
  *v6 = qword_100354EE8;
  v8 = *(void (**)(_QWORD))(v3 + 104);
  v236 = enum case for DispatchPredicate.onQueue(_:);
  v235 = (void (*)(_QWORD *, _QWORD, uint64_t))v8;
  v8(v6);
  v9 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  v234 = *(void (**)(_QWORD *, uint64_t))(v3 + 8);
  v234(v6, v2);
  if ((v7 & 1) != 0)
  {
    v10 = v219 + OBJC_IVAR____TtC10seserviced11LyonExpress_logger;
    v11 = swift_retain_n(a1, 2);
    v237 = v10;
    v12 = Logger.logObject.getter(v11);
    v16 = static os_log_type_t.info.getter(v12, v13, v14, v15);
    v17 = os_log_type_enabled(v12, v16);
    v226 = v6;
    if (v17)
    {
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      v19 = swift_slowAlloc(32, -1);
      v261 = v19;
      *(_DWORD *)v18 = 136315138;
      v20 = sub_1001443D0();
      v22 = v21;
      v259 = (__objc2_class **)sub_1001C56EC(v20, v21, &v261);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v259, &v260, v18 + 4, v18 + 12);
      swift_release_n(a1, 2);
      swift_bridgeObjectRelease(v22);
      _os_log_impl((void *)&_mh_execute_header, v12, v16, "%s", v18, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);
    }
    else
    {
      swift_release_n(a1, 2);
    }

    if (qword_1003447A0 == -1)
      goto LABEL_8;
  }
  else
  {
    __break(1u);
  }
  v23 = swift_once(&qword_1003447A0, sub_1001EDCA4);
LABEL_8:
  __chkstk_darwin(v23, v24);
  v216[-4] = sub_10007BEAC;
  v216[-3] = 0;
  v216[-2] = v25;
  v27 = v26 + 4;
  os_unfair_lock_lock(v26 + 4);
  sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_10006F860, &v261);
  v224 = 0;
  os_unfair_lock_unlock(v27);
  v30 = v261;
  v31 = v261 & 0xC000000000000001;
  v217 = *(unsigned __int8 *)(a1 + 16);
  v220 = v2;
  v252 = a1;
  if (v217 == 2)
  {
    if (v31)
    {
      if (v261 < 0)
        v32 = v261;
      else
        v32 = v261 & 0xFFFFFFFFFFFFFF8;
      v33 = __CocoaSet.makeIterator()(v32);
      v34 = type metadata accessor for Peer(0);
      v35 = sub_1000639EC((unint64_t *)&qword_100347720, type metadata accessor for Peer, (uint64_t)&unk_10028BFA8);
      v28 = Set.Iterator.init(_cocoa:)(&v261, v33, v34, v35);
      v30 = v261;
      v36 = v262;
      v37 = (uint64_t)v263;
      v38 = v264;
      v39 = v265;
    }
    else
    {
      v38 = 0;
      v48 = -1 << *(_BYTE *)(v261 + 32);
      v36 = (_QWORD *)(v261 + 56);
      v49 = ~v48;
      v50 = -v48;
      if (v50 < 64)
        v51 = ~(-1 << v50);
      else
        v51 = -1;
      v39 = v51 & *(_QWORD *)(v261 + 56);
      v37 = v49;
    }
    v254 = v30 & 0x7FFFFFFFFFFFFFFFLL;
    v248 = v37;
    v255 = (unint64_t)(v37 + 64) >> 6;
    *(_QWORD *)&v29 = 136315138;
    v250 = v29;
    v249 = (char *)&type metadata for Any + 8;
    *(_QWORD *)&v253 = (char *)&type metadata for Swift.AnyObject + 8;
    v251 = v36;
    while (1)
    {
      if (v30 < 0)
      {
        v55 = __CocoaSet.Iterator.next()(v28);
        if (!v55)
          goto LABEL_96;
        v56 = v55;
        v256 = v55;
        v57 = type metadata accessor for Peer(0);
        swift_unknownObjectRetain(v56);
        swift_dynamicCast(&v259, &v256, v253, v57, 7);
        v58 = v259;
        swift_unknownObjectRelease(v56);
        v54 = v38;
        v52 = v39;
        if (!v58)
        {
LABEL_96:
          sub_10007EF58(v30);
          a1 = v252;
          goto LABEL_98;
        }
      }
      else
      {
        if (v39)
        {
          v52 = (v39 - 1) & v39;
          v53 = __clz(__rbit64(v39)) | (v38 << 6);
          v54 = v38;
        }
        else
        {
          v59 = v38 + 1;
          if (__OFADD__(v38, 1))
          {
            __break(1u);
            goto LABEL_195;
          }
          if (v59 >= v255)
            goto LABEL_96;
          v60 = v36[v59];
          v54 = v38 + 1;
          if (!v60)
          {
            v54 = v38 + 2;
            if (v38 + 2 >= v255)
              goto LABEL_96;
            v60 = v36[v54];
            if (!v60)
            {
              v54 = v38 + 3;
              if (v38 + 3 >= v255)
                goto LABEL_96;
              v60 = v36[v54];
              if (!v60)
              {
                v54 = v38 + 4;
                if (v38 + 4 >= v255)
                  goto LABEL_96;
                v60 = v36[v54];
                if (!v60)
                {
                  v61 = v38 + 5;
                  do
                  {
                    if (v255 == v61)
                      goto LABEL_96;
                    v60 = v36[v61++];
                  }
                  while (!v60);
                  v54 = v61 - 1;
                }
              }
            }
          }
          v52 = (v60 - 1) & v60;
          v53 = __clz(__rbit64(v60)) + (v54 << 6);
        }
        v58 = *(__objc2_class ***)(*(_QWORD *)(v30 + 48) + 8 * v53);
        swift_retain(v58);
        if (!v58)
          goto LABEL_96;
      }
      if (*v58 == _TtC10seserviced8LyonPeer
        && *((_BYTE *)v58 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState) != 1)
      {
        v62 = swift_retain_n(v58, 3);
        v63 = Logger.logObject.getter(v62);
        v65 = static os_log_type_t.error.getter(v63, v64);
        if (os_log_type_enabled(v63, v65))
        {
          v66 = swift_slowAlloc(12, -1);
          v67 = swift_slowAlloc(32, -1);
          v259 = (__objc2_class **)v67;
          *(_DWORD *)v66 = v250;
          v68 = type metadata accessor for UUID(0);
          v69 = sub_1000639EC((unint64_t *)&qword_100344CC8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v70 = dispatch thunk of CustomStringConvertible.description.getter(v68, v69);
          v72 = v71;
          *(_QWORD *)(v66 + 4) = sub_1001C56EC(v70, v71, (uint64_t *)&v259);
          swift_release_n(v58, 2);
          swift_bridgeObjectRelease(v72);
          _os_log_impl((void *)&_mh_execute_header, v63, v65, "Disconnecting %s due to biolockout", (uint8_t *)v66, 0xCu);
          swift_arrayDestroy(v67, 1, v249);
          v73 = v67;
          v2 = v220;
          swift_slowDealloc(v73, -1, -1);
          swift_slowDealloc(v66, -1, -1);
        }
        else
        {
          swift_release_n(v58, 2);
        }

        *(_DWORD *)((char *)v58 + OBJC_IVAR____TtC10seserviced8LyonPeer_disconnectionReason) = 3;
        v36 = v251;
        if (qword_100344568 != -1)
          swift_once(&qword_100344568, sub_100073158);
        sub_10007CD7C((uint64_t)v58, 0);
        swift_release(v58);
      }
      v28 = (_QWORD *)swift_release(v58);
      v38 = v54;
      v39 = v52;
    }
  }
  if (v31)
  {
    if (v261 < 0)
      v40 = v261;
    else
      v40 = v261 & 0xFFFFFFFFFFFFFF8;
    v41 = __CocoaSet.makeIterator()(v40);
    v42 = type metadata accessor for Peer(0);
    v43 = sub_1000639EC((unint64_t *)&qword_100347720, type metadata accessor for Peer, (uint64_t)&unk_10028BFA8);
    v28 = Set.Iterator.init(_cocoa:)(&v261, v41, v42, v43);
    v30 = v261;
    v44 = v262;
    v45 = v263;
    v46 = v264;
    v47 = v265;
  }
  else
  {
    v46 = 0;
    v74 = -1 << *(_BYTE *)(v261 + 32);
    v44 = (_QWORD *)(v261 + 56);
    v75 = ~v74;
    v76 = -v74;
    if (v76 < 64)
      v77 = ~(-1 << v76);
    else
      v77 = -1;
    v47 = v77 & *(_QWORD *)(v261 + 56);
    v45 = (_QWORD *)v75;
  }
  v251 = v45;
  v254 = v30 & 0x7FFFFFFFFFFFFFFFLL;
  v255 = (unint64_t)(v45 + 8) >> 6;
  *(_QWORD *)&v29 = 136315138;
  v250 = v29;
  v249 = (char *)&type metadata for Any + 8;
  *(_QWORD *)&v253 = (char *)&type metadata for Swift.AnyObject + 8;
  while (v30 < 0)
  {
    v81 = __CocoaSet.Iterator.next()(v28);
    if (!v81)
      goto LABEL_97;
    v82 = v81;
    v256 = v81;
    v83 = type metadata accessor for Peer(0);
    swift_unknownObjectRetain(v82);
    swift_dynamicCast(&v259, &v256, v253, v83, 7);
    v84 = v259;
    swift_unknownObjectRelease(v82);
    v80 = v46;
    v78 = v47;
    if (!v84)
      goto LABEL_97;
LABEL_83:
    if (*v84 == _TtC10seserviced8LyonPeer)
    {
      v88 = *(unint64_t *)((char *)v84 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
      if (v88 >> 60 != 15)
      {
        v89 = *(uint64_t *)((char *)v84 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
        v90 = *(_QWORD *)(a1 + 24);
        swift_retain(v84);
        sub_10006BA34(v89, v88);
        if ((sub_10017E358(v89, v88, v90) & 1) == 0)
        {
          v91 = swift_retain_n(v84, 2);
          v92 = Logger.logObject.getter(v91);
          v94 = static os_log_type_t.error.getter(v92, v93);
          if (os_log_type_enabled(v92, v94))
          {
            v95 = (_DWORD *)swift_slowAlloc(12, -1);
            v246 = v95;
            v248 = swift_slowAlloc(32, -1);
            v259 = (__objc2_class **)v248;
            *v95 = v250;
            v96 = type metadata accessor for UUID(0);
            v247 = v92;
            v97 = v44;
            v98 = v96;
            v99 = sub_1000639EC((unint64_t *)&qword_100344CC8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            v100 = v98;
            v44 = v97;
            v101 = dispatch thunk of CustomStringConvertible.description.getter(v100, v99);
            v103 = v102;
            v104 = sub_1001C56EC(v101, v102, (uint64_t *)&v259);
            v105 = (uint8_t *)v246;
            *(_QWORD *)(v246 + 1) = v104;
            swift_release_n(v84, 2);
            swift_bridgeObjectRelease(v103);
            v106 = v247;
            _os_log_impl((void *)&_mh_execute_header, v247, v94, "Disconnecting %s because it is no longer an express key", v105, 0xCu);
            v107 = v248;
            swift_arrayDestroy(v248, 1, v249);
            swift_slowDealloc(v107, -1, -1);
            swift_slowDealloc(v105, -1, -1);

          }
          else
          {
            swift_release_n(v84, 2);

          }
          a1 = v252;
          if (qword_100344568 != -1)
            swift_once(&qword_100344568, sub_100073158);
          sub_10007CD7C((uint64_t)v84, 0);
        }
        if (*((_BYTE *)v84 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState) == 1)
        {
          if (qword_100344558 != -1)
            swift_once(&qword_100344558, sub_10006449C);
          v108 = *(_QWORD *)(qword_100354A68 + OBJC_IVAR____TtC10seserviced6LyonSE_urskSlotManager);
          v109 = (id)qword_100354A68;
          sub_10006BABC((uint64_t)v84, v108, v109);
          swift_release(v84);

        }
        else
        {
          swift_release(v84);
        }
        sub_10006B9B4(v89, v88);
      }
    }
    v28 = (_QWORD *)swift_release(v84);
    v46 = v80;
    v47 = v78;
  }
  if (v47)
  {
    v78 = (v47 - 1) & v47;
    v79 = __clz(__rbit64(v47)) | (v46 << 6);
    v80 = v46;
    goto LABEL_82;
  }
  v85 = v46 + 1;
  if (__OFADD__(v46, 1))
  {
LABEL_195:
    __break(1u);
    JUMPOUT(0x1001B5C40);
  }
  if (v85 >= v255)
    goto LABEL_97;
  v86 = v44[v85];
  v80 = v46 + 1;
  if (v86)
    goto LABEL_81;
  v80 = v46 + 2;
  if (v46 + 2 >= v255)
    goto LABEL_97;
  v86 = v44[v80];
  if (v86)
    goto LABEL_81;
  v80 = v46 + 3;
  if (v46 + 3 >= v255)
    goto LABEL_97;
  v86 = v44[v80];
  if (v86)
    goto LABEL_81;
  v80 = v46 + 4;
  if (v46 + 4 >= v255)
    goto LABEL_97;
  v86 = v44[v80];
  if (v86)
  {
LABEL_81:
    v78 = (v86 - 1) & v86;
    v79 = __clz(__rbit64(v86)) + (v80 << 6);
LABEL_82:
    v84 = *(__objc2_class ***)(*(_QWORD *)(v30 + 48) + 8 * v79);
    swift_retain(v84);
    if (!v84)
      goto LABEL_97;
    goto LABEL_83;
  }
  v87 = v46 + 5;
  while (v255 != v87)
  {
    v86 = v44[v87++];
    if (v86)
    {
      v80 = v87 - 1;
      goto LABEL_81;
    }
  }
LABEL_97:
  sub_10007EF58(v30);
  v2 = v220;
LABEL_98:
  v110 = sub_10017C4B4((uint64_t)_swiftEmptyArrayStorage);
  v111 = (unint64_t *)(v219 + OBJC_IVAR____TtC10seserviced11LyonExpress_activeExpressEndpoints);
  swift_beginAccess(v219 + OBJC_IVAR____TtC10seserviced11LyonExpress_activeExpressEndpoints, &v259, 1, 0);
  v112 = *v111;
  v218 = v111;
  *v111 = v110;
  swift_bridgeObjectRelease(v112);
  v113 = *(_QWORD *)(a1 + 24);
  v114 = *(_QWORD *)(v113 + 56);
  v231 = v113 + 56;
  v115 = 1 << *(_BYTE *)(v113 + 32);
  v116 = -1;
  if (v115 < 64)
    v116 = ~(-1 << v115);
  v117 = v116 & v114;
  v232 = (unint64_t)(v115 + 63) >> 6;
  v216[1] = &v257;
  v118 = swift_bridgeObjectRetain(v113);
  v119 = 0;
  v233 = 0x80000001002BA410;
  v118.n128_u64[0] = 136315138;
  v223 = v118;
  v253 = xmmword_1002888E0;
  v222 = (char *)&type metadata for Any + 8;
  v225 = _swiftEmptyArrayStorage;
  v120 = v226;
  v221 = v113;
  while (2)
  {
    if (v117)
    {
      v121 = __clz(__rbit64(v117));
      v122 = (v117 - 1) & v117;
      v239 = v119;
      v123 = v121 | (v119 << 6);
      goto LABEL_116;
    }
    v124 = __OFADD__(v119, 1);
    v125 = v119 + 1;
    if (v124)
      goto LABEL_191;
    if (v125 < v232)
    {
      v126 = *(_QWORD *)(v231 + 8 * v125);
      if (!v126)
      {
        v127 = v125 + 1;
        if (v125 + 1 >= v232)
          break;
        v126 = *(_QWORD *)(v231 + 8 * v127);
        if (!v126)
        {
          v127 = v125 + 2;
          if (v125 + 2 >= v232)
            break;
          v126 = *(_QWORD *)(v231 + 8 * v127);
          if (!v126)
          {
            v127 = v125 + 3;
            if (v125 + 3 >= v232)
              break;
            v126 = *(_QWORD *)(v231 + 8 * v127);
            if (!v126)
            {
              while (1)
              {
                v125 = v127 + 1;
                if (__OFADD__(v127, 1))
                  goto LABEL_193;
                if (v125 >= v232)
                  goto LABEL_146;
                v126 = *(_QWORD *)(v231 + 8 * v125);
                ++v127;
                if (v126)
                  goto LABEL_115;
              }
            }
          }
        }
        v125 = v127;
      }
LABEL_115:
      v122 = (v126 - 1) & v126;
      v239 = v125;
      v123 = __clz(__rbit64(v126)) + (v125 << 6);
LABEL_116:
      v238 = v122;
      v128 = (unint64_t *)(*(_QWORD *)(v113 + 48) + 16 * v123);
      v129 = *v128;
      v130 = *v128;
      v254 = v128[1];
      sub_100063C8C(v130, v254);
      if (qword_100344608 != -1)
        swift_once(&qword_100344608, sub_100141A78);
      v131 = qword_100354CE0;
      v132 = sub_1000E848C(0xD000000000000012, v233);
      if (v133 >> 60 == 15)
      {
        __break(1u);
        JUMPOUT(0x1001B5DC4);
      }
      v134 = v132;
      v135 = v133;
      v136 = qword_100354EE8;
      *v120 = qword_100354EE8;
      v235(v120, v236, v2);
      v137 = (id)v136;
      LOBYTE(v136) = _dispatchPreconditionTest(_:)(v120);
      v234(v120, v2);
      if ((v136 & 1) == 0)
      {
        __break(1u);
LABEL_190:
        __break(1u);
LABEL_191:
        __break(1u);
LABEL_192:
        __break(1u);
LABEL_193:
        __break(1u);
        JUMPOUT(0x1001B5C2CLL);
      }
      v138 = v254;
      v252 = v254 >> 62;
      v139 = *(_QWORD *)(v131 + OBJC_IVAR____TtC10seserviced10DSKExpress_expressKeys);
      sub_100063C8C(v129, v254);
      swift_bridgeObjectRetain(v139);
      sub_10006BA34(v134, v135);
      v140 = sub_1001B6F30(v139);
      sub_10006B9B4(v134, v135);
      sub_100063CD0(v129, v138);
      swift_bridgeObjectRelease(v139);
      *(_QWORD *)&v250 = v129 >> 8;
      v249 = (char *)(v129 >> 16);
      v248 = v129 >> 24;
      v251 = (_QWORD *)HIDWORD(v129);
      v247 = (os_log_t)(v129 >> 40);
      v246 = (_DWORD *)HIWORD(v129);
      v255 = v129;
      v245 = HIBYTE(v129);
      v244 = v138 >> 8;
      v243 = v138 >> 16;
      v242 = v138 >> 24;
      v241 = HIDWORD(v138);
      v240 = v138 >> 40;
      if (v140)
      {
        v141 = *(_QWORD *)(v140 + 48);
        swift_bridgeObjectRetain(v141);
        swift_release(v140);
        sub_10006B9B4(v134, v135);
        if (v141)
        {
          v142 = swift_allocObject(&unk_10030CC38, 32, 7);
          v144 = v254;
          v143 = v255;
          *(_QWORD *)(v142 + 16) = v255;
          *(_QWORD *)(v142 + 24) = v144;
          sub_100063C8C(v143, v144);
          if (qword_1003445B8 != -1)
            swift_once(&qword_1003445B8, sub_1000EAA4C);
          v145 = off_1003463F0;
          v146 = swift_allocObject(&unk_10030CC60, 32, 7);
          *(_QWORD *)(v146 + 16) = sub_100096688;
          *(_QWORD *)(v146 + 24) = v142;
          v148 = __chkstk_darwin(v146, v147);
          v216[-4] = sub_100095FDC;
          v216[-3] = v148;
          v150 = v149 + 4;
          v216[-2] = v145;
          swift_retain(v142);
          os_unfair_lock_lock(v150);
          sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_10007EFBC, &v256);
          os_unfair_lock_unlock(v150);
          v151 = v256;
          swift_release(v142);
          swift_release(v146);
          v152 = (void *)sub_10009F618(v151);
          swift_bridgeObjectRelease(v151);
          if (!v152)
          {
            v153 = swift_bridgeObjectRelease(v141);
            v154 = Logger.logObject.getter(v153);
            v156 = static os_log_type_t.error.getter(v154, v155);
            if (os_log_type_enabled(v154, v156))
            {
              v157 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v157 = 0;
              _os_log_impl((void *)&_mh_execute_header, v154, v156, "Failed to retrieve endpoint", v157, 2u);
              swift_slowDealloc(v157, -1, -1);
            }
            sub_100063CD0(v255, v254);

            v120 = v226;
            goto LABEL_102;
          }
          v166 = objc_msgSend(v152, "homeUUIDString");
          if (v166)
          {
            v167 = v166;
            v168 = static String._unconditionallyBridgeFromObjectiveC(_:)(v166);
            v170 = v169;

            if ((swift_isUniquelyReferenced_nonNull_native(v225) & 1) == 0)
              v225 = sub_1001C4590(0, v225[2] + 1, 1, v225);
            v172 = v225[2];
            v171 = v225[3];
            if (v172 >= v171 >> 1)
              v225 = sub_1001C4590((_QWORD *)(v171 > 1), v172 + 1, 1, v225);
            v173 = v225;
            v225[2] = v172 + 1;
            v174 = &v173[2 * v172];
            v174[4] = v168;
            v174[5] = v170;
            v120 = v226;
            v158 = v254;
            v175 = v255;
          }
          else
          {
            v158 = v254;
            v175 = v255;
            sub_100063C8C(v255, v254);
            v176 = sub_100063C8C(v175, v158);
            v177 = Logger.logObject.getter(v176);
            v178 = static os_log_type_t.default.getter();
            v179 = os_log_type_enabled(v177, (os_log_type_t)v178);
            v120 = v226;
            if (v179)
            {
              v228 = v177;
              LODWORD(v227) = v178;
              v180 = (_DWORD *)swift_slowAlloc(12, -1);
              v216[0] = swift_slowAlloc(32, -1);
              v258 = v216[0];
              *v180 = v223.n128_u32[0];
              v181 = (char *)&loc_1001B5490 + *((int *)qword_1001B5DF0 + v252);
              v229 = v180;
              __asm { BR              X9 }
            }

            sub_100063CD0(v175, v158);
            sub_100063CD0(v175, v158);
          }
          v182 = (uint64_t)v218;
          swift_beginAccess(v218, &v256, 33, 0);
          sub_1001B5E10(v182, v141, v175, v158);
          swift_endAccess(&v256);
          swift_bridgeObjectRelease(v141);

          v165 = v175;
LABEL_131:
          sub_100063CD0(v165, v158);
LABEL_102:
          v119 = v239;
          v117 = v238;
          continue;
        }
      }
      else
      {
        sub_10006B9B4(v134, v135);
      }
      v158 = v254;
      v159 = v255;
      sub_100063C8C(v255, v254);
      v160 = sub_100063C8C(v159, v158);
      v161 = Logger.logObject.getter(v160);
      v163 = static os_log_type_t.error.getter(v161, v162);
      if (os_log_type_enabled(v161, (os_log_type_t)v163))
      {
        LODWORD(v228) = v163;
        v230 = v161;
        v164 = (_DWORD *)swift_slowAlloc(12, -1);
        v227 = swift_slowAlloc(32, -1);
        v258 = v227;
        v229 = v164;
        *v164 = v223.n128_u32[0];
        __asm { BR              X9 }
      }
      sub_100063CD0(v159, v158);

      sub_100063CD0(v159, v158);
      v165 = v159;
      goto LABEL_131;
    }
    break;
  }
LABEL_146:
  swift_release(v113);
  if (qword_100344628 != -1)
    swift_once(&qword_100344628, sub_1001539B4);
  v252 = qword_100354CF0;
  v183 = (uint64_t *)(qword_100354CF0 + OBJC_IVAR____TtC10seserviced21LyonGeofenceException_homeDelegates);
  swift_beginAccess(qword_100354CF0 + OBJC_IVAR____TtC10seserviced21LyonGeofenceException_homeDelegates, &v256, 0, 0);
  v184 = *v183;
  if ((unint64_t)v184 >> 62)
  {
    if (v184 < 0)
      v211 = v184;
    else
      v211 = v184 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v184);
    v185 = _CocoaArrayWrapper.endIndex.getter(v211);
    if (!v185)
      goto LABEL_203;
LABEL_150:
    v186 = 0;
    v187 = v225[2];
    v188 = v184 & 0xC000000000000001;
    v254 = v184 + 32;
    v255 = v184 & 0xFFFFFFFFFFFFFF8;
    v251 = v225 + 11;
    while (1)
    {
      if (v188)
      {
        v190 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v186, v184);
      }
      else
      {
        if (v186 >= *(_QWORD *)(v255 + 16))
          goto LABEL_192;
        v190 = (char *)*(id *)(v254 + 8 * v186);
      }
      v191 = v190;
      v124 = __OFADD__(v186++, 1);
      if (v124)
        goto LABEL_190;
      if (v187)
      {
        v192 = *(_QWORD *)&v190[OBJC_IVAR____TtC10seserviced16LyonHomeDelegate_homeUUID];
        v193 = *(_QWORD *)&v190[OBJC_IVAR____TtC10seserviced16LyonHomeDelegate_homeUUID + 8];
        v194 = v225[4];
        v195 = v225[5];
        v196 = v194 == v192 && v195 == v193;
        if (!v196)
        {
          v189 = _stringCompareWithSmolCheck(_:_:expecting:)(v194, v195, *(_QWORD *)&v191[OBJC_IVAR____TtC10seserviced16LyonHomeDelegate_homeUUID], *(_QWORD *)&v191[OBJC_IVAR____TtC10seserviced16LyonHomeDelegate_homeUUID + 8], 0);
          if ((v189 & 1) != 0 || v187 == 1)
            goto LABEL_152;
          v197 = v225[6];
          v198 = v225[7];
          if (v197 != v192 || v198 != v193)
          {
            v189 = _stringCompareWithSmolCheck(_:_:expecting:)(v197, v198, v192, v193, 0);
            if ((v189 & 1) != 0 || v187 == 2)
              goto LABEL_152;
            v200 = v225[8];
            v201 = v225[9];
            if (v200 != v192 || v201 != v193)
            {
              v189 = _stringCompareWithSmolCheck(_:_:expecting:)(v200, v201, v192, v193, 0);
              if ((v189 & 1) == 0 && v187 != 3)
              {
                v203 = v251;
                v204 = 3;
                *(_QWORD *)&v253 = v185;
                while (1)
                {
                  v205 = v188;
                  v206 = v184;
                  v207 = v204 + 1;
                  if (__OFADD__(v204, 1))
                  {
                    __break(1u);
                    JUMPOUT(0x1001B5C48);
                  }
                  v208 = *(v203 - 1);
                  v209 = *v203;
                  v210 = v208 == v192 && v209 == v193;
                  if (v210 || (_stringCompareWithSmolCheck(_:_:expecting:)(v208, v209, v192, v193, 0) & 1) != 0)
                    break;
                  v189 = 0;
                  v203 += 2;
                  ++v204;
                  v196 = v207 == v187;
                  v184 = v206;
                  v188 = v205;
                  v185 = v253;
                  if (v196)
                    goto LABEL_152;
                }
                v189 = 1;
                v184 = v206;
                v188 = v205;
                v185 = v253;
              }
              goto LABEL_152;
            }
          }
        }
        v189 = 1;
      }
      else
      {
        v189 = 0;
      }
LABEL_152:
      v191[OBJC_IVAR____TtC10seserviced16LyonHomeDelegate_isExpress] = v189 & 1;

      if (v186 == v185)
        goto LABEL_203;
    }
  }
  v185 = *(_QWORD *)((v184 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v184);
  if (v185)
    goto LABEL_150;
LABEL_203:
  swift_bridgeObjectRelease(v184);
  sub_100154234();
  swift_bridgeObjectRelease(v225);
  if (qword_100344708 != -1)
    swift_once(&qword_100344708, sub_1001C2AE4);
  v212 = v217 == 2;
  swift_bridgeObjectRetain(*v218);
  v214 = sub_1001416B8(v213);
  sub_1001C1B10(v212, 2u, 2u, v214, 2u);
  return swift_bridgeObjectRelease(v214);
}

void sub_1001B5E10(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  NSObject *v54;
  uint64_t v55;
  os_log_type_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  os_log_type_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  os_log_type_t typea[8];
  os_log_type_t type[8];
  os_log_type_t typeb;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  __int128 v81;
  __int128 v82;

  if (!*(_QWORD *)(a2 + 16)
    || (v7 = (_QWORD *)a1, a1 = sub_100187ED0(0xD000000000000010, 0x80000001002B9D40), (v8 & 1) == 0)
    || (sub_100096CB0(*(_QWORD *)(a2 + 56) + 32 * a1, (uint64_t)&v81),
        a1 = swift_dynamicCast(&v79, &v81, (char *)&type metadata for Any + 8, &type metadata for String, 6),
        (a1 & 1) == 0))
  {
    v14 = Logger.logObject.getter(a1);
    v16 = static os_log_type_t.error.getter(v14, v20);
    if (!os_log_type_enabled(v14, v16))
    {
LABEL_10:

      return;
    }
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v81 = v18;
    *(_DWORD *)v17 = 136315138;
    v79 = sub_1001C56EC(0xD000000000000010, 0x80000001002B9D40, (uint64_t *)&v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v17 + 4, v17 + 12);
    v19 = "Primary reader identifier with key: %s expected to be a string";
LABEL_9:
    _os_log_impl((void *)&_mh_execute_header, v14, v16, v19, v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);
    goto LABEL_10;
  }
  v10 = v79;
  v9 = v80;
  swift_bridgeObjectRetain(v80);
  v11 = sub_1000E848C(v10, v9);
  if (v12 >> 60 == 15)
  {
    swift_bridgeObjectRetain(v9);
    v14 = Logger.logObject.getter(v13);
    v16 = static os_log_type_t.error.getter(v14, v15);
    if (!os_log_type_enabled(v14, v16))
    {
      swift_bridgeObjectRelease_n(v9, 2);
      goto LABEL_10;
    }
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v81 = v18;
    *(_DWORD *)v17 = 136315138;
    swift_bridgeObjectRetain(v9);
    v79 = sub_1001C56EC(v10, v9, (uint64_t *)&v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease_n(v9, 3);
    v19 = "Cannot get data representation of %s";
    goto LABEL_9;
  }
  v21 = v12;
  v22 = v11;
  swift_bridgeObjectRelease(v9);
  sub_100063C8C(v22, v21);
  v77 = v22;
  v78 = v21;
  sub_1001BD150(8, v22, v21);
  v24 = *((_QWORD *)&v81 + 1);
  v23 = v81;
  sub_100063C8C(v81, *((unint64_t *)&v81 + 1));
  sub_100063C8C(a3, a4);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v7);
  *(_QWORD *)&v81 = *v7;
  *v7 = 0x8000000000000000;
  sub_10018E2AC(a3, a4, -1, v23, v24, isUniquelyReferenced_nonNull_native);
  v26 = *v7;
  *v7 = v81;
  swift_bridgeObjectRelease(v26);
  v76 = v23;
  sub_100063CD0(v23, v24);
  if (!*(_QWORD *)(a2 + 16)
    || (v27 = sub_100187ED0(0x6F666E4932504345, 0xE800000000000000), (v28 & 1) == 0)
    || (sub_100096CB0(*(_QWORD *)(a2 + 56) + 32 * v27, (uint64_t)&v81),
        v29 = sub_100063D3C(&qword_100345388),
        (swift_dynamicCast(&v79, &v81, (char *)&type metadata for Any + 8, v29, 6) & 1) == 0))
  {
    sub_100063C8C(a3, a4);
    v33 = sub_100063C8C(a3, a4);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = swift_slowAlloc(22, -1);
      *(_QWORD *)typea = v24;
      v37 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v81 = v37;
      *(_DWORD *)v36 = 136315394;
      v79 = sub_1001C56EC(0x6F666E4932504345, 0xE800000000000000, (uint64_t *)&v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v36 + 4, v36 + 12);
      *(_WORD *)(v36 + 12) = 2080;
      sub_1001BD2CC(a3, a4);
      v39 = v38;
      v79 = v38;
      v40 = sub_100063D3C((uint64_t *)&unk_100346060);
      v41 = sub_10006B86C();
      v42 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v40, v41);
      v44 = v43;
      swift_bridgeObjectRelease(v39);
      v79 = sub_1001C56EC(v42, v44, (uint64_t *)&v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v36 + 14, v36 + 22);
      swift_bridgeObjectRelease(v44);
      sub_100063CD0(a3, a4);
      sub_100063CD0(a3, a4);
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "No ecp2info with key %s found for endpoint %s", (uint8_t *)v36, 0x16u);
      swift_arrayDestroy(v37, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v36, -1, -1);
      sub_10006B9B4(v77, v78);
      v46 = *(_QWORD *)typea;
      v45 = v76;
LABEL_19:
      sub_100063CD0(v45, v46);

      return;
    }
LABEL_38:
    sub_10006B9B4(v77, v78);
    sub_100063CD0(v76, v24);

    sub_100063CD0(a3, a4);
    sub_100063CD0(a3, a4);
    return;
  }
  v30 = v79;
  if (*(_QWORD *)(v79 + 16) && (v31 = sub_100187ED0(0xD00000000000001BLL, 0x80000001002BFAB0), (v32 & 1) != 0))
  {
    sub_100096CB0(*(_QWORD *)(v30 + 56) + 32 * v31, (uint64_t)&v81);
  }
  else
  {
    v81 = 0u;
    v82 = 0u;
  }
  swift_bridgeObjectRelease(v30);
  if (!*((_QWORD *)&v82 + 1))
  {
    sub_100098C7C((uint64_t)&v81);
LABEL_36:
    sub_100063C8C(a3, a4);
    v60 = sub_100063C8C(a3, a4);
    v34 = Logger.logObject.getter(v60);
    v61 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v34, v61))
    {
      v62 = swift_slowAlloc(22, -1);
      v63 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v81 = v63;
      *(_DWORD *)v62 = 136315394;
      typeb = v61;
      v79 = sub_1001C56EC(0xD00000000000001BLL, 0x80000001002BFAB0, (uint64_t *)&v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v62 + 4, v62 + 12);
      *(_WORD *)(v62 + 12) = 2080;
      sub_1001BD2CC(a3, a4);
      v65 = v64;
      v79 = v64;
      v66 = v24;
      v67 = sub_100063D3C((uint64_t *)&unk_100346060);
      v68 = sub_10006B86C();
      v69 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v67, v68);
      v71 = v70;
      swift_bridgeObjectRelease(v65);
      v79 = sub_1001C56EC(v69, v71, (uint64_t *)&v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v62 + 14, v62 + 22);
      swift_bridgeObjectRelease(v71);
      sub_100063CD0(a3, a4);
      sub_100063CD0(a3, a4);
      _os_log_impl((void *)&_mh_execute_header, v34, typeb, "No aux keys with key: %s found for endpoint %s", (uint8_t *)v62, 0x16u);
      swift_arrayDestroy(v63, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v63, -1, -1);
      swift_slowDealloc(v62, -1, -1);
      sub_10006B9B4(v77, v78);
      v45 = v76;
      v46 = v66;
      goto LABEL_19;
    }
    goto LABEL_38;
  }
  v47 = sub_100063D3C(&qword_100346050);
  v48 = swift_dynamicCast(&v79, &v81, (char *)&type metadata for Any + 8, v47, 6);
  if ((v48 & 1) == 0)
    goto LABEL_36;
  v72 = v79;
  v49 = *(_QWORD *)(v79 + 16);
  if (v49)
  {
    v50 = (_QWORD *)(v79 + 32);
    *(_QWORD *)type = v24;
    do
    {
      v51 = *v50;
      if (*(_QWORD *)(*v50 + 16))
      {
        swift_bridgeObjectRetain(*v50);
        v52 = sub_100187ED0(0xD000000000000010, 0x80000001002B9D40);
        if ((v53 & 1) != 0)
        {
          sub_100096CB0(*(_QWORD *)(v51 + 56) + 32 * v52, (uint64_t)&v81);
          if ((swift_dynamicCast(&v79, &v81, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) != 0)
            __asm { BR              X9 }
        }
        v48 = swift_bridgeObjectRelease(v51);
      }
      v54 = Logger.logObject.getter(v48);
      v56 = static os_log_type_t.error.getter(v54, v55);
      if (os_log_type_enabled(v54, v56))
      {
        v57 = swift_slowAlloc(22, -1);
        v58 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v81 = v58;
        *(_DWORD *)v57 = 136315394;
        *(_QWORD *)(v57 + 4) = sub_1001C56EC(0xD000000000000010, 0x80000001002B9D40, (uint64_t *)&v81);
        *(_WORD *)(v57 + 12) = 2048;
        *(_QWORD *)(v57 + 14) = 8;
        _os_log_impl((void *)&_mh_execute_header, v54, v56, "Auxiliary reader identifier with key %s expected to be a Data of length %ld", (uint8_t *)v57, 0x16u);
        swift_arrayDestroy(v58, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v58, -1, -1);
        v59 = v57;
        v24 = *(_QWORD *)type;
        swift_slowDealloc(v59, -1, -1);
      }

      ++v50;
      --v49;
    }
    while (v49);
  }
  swift_bridgeObjectRelease(v72);
  sub_10006B9B4(v77, v78);
  sub_100063CD0(v76, v24);
}

uint64_t sub_1001B6C84(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;
  char v16;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_1001C4254(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy(v9);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v16 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v16, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001B6DD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC10seserviced11LyonExpress_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced11LyonExpress_activeExpressEndpoints));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1001B6E34()
{
  return type metadata accessor for LyonExpress(0);
}

uint64_t type metadata accessor for LyonExpress(uint64_t a1)
{
  uint64_t result;

  result = qword_100349430;
  if (!qword_100349430)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LyonExpress);
  return result;
}

uint64_t sub_1001B6E78(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1001B6EF0(unint64_t a1)
{
  return sub_1001B3D3C(a1);
}

uint64_t sub_1001B6F10()
{
  return 0;
}

uint64_t sub_1001B6F18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001B6F28(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1001B6F30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[5];

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = type metadata accessor for DSKExpress.ExpressKey();
    v5 = sub_1000639EC(&qword_100345218, (uint64_t (*)(uint64_t))type metadata accessor for DSKExpress.ExpressKey, (uint64_t)&unk_10028ABE0);
    v6 = Set.Iterator.init(_cocoa:)(v28, v3, v4, v5);
    v1 = v28[0];
    v25 = v28[1];
    v7 = v28[2];
    v8 = v28[3];
    v9 = v28[4];
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v25 = a1 + 56;
    v7 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v9 = v12 & *(_QWORD *)(a1 + 56);
    v6 = (_QWORD *)swift_bridgeObjectRetain(a1);
    v8 = 0;
  }
  v24 = (unint64_t)(v7 + 64) >> 6;
  v13 = v8;
  if (v1 < 0)
  {
    v15 = __CocoaSet.Iterator.next()(v6);
    if (v15)
    {
      v16 = v15;
      v26 = v15;
      v17 = type metadata accessor for DSKExpress.ExpressKey();
      swift_unknownObjectRetain(v16);
      swift_dynamicCast(&v27, &v26, (char *)&type metadata for Swift.AnyObject + 8, v17, 7);
      v18 = v27;
      swift_unknownObjectRelease(v16);
      if (v18)
        goto LABEL_28;
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (v9)
  {
    v14 = __clz(__rbit64(v9)) | (v8 << 6);
    goto LABEL_27;
  }
  v19 = v8 + 1;
  if (__OFADD__(v13, 1))
  {
    __break(1u);
    JUMPOUT(0x1001B79CCLL);
  }
  if (v19 >= v24)
  {
LABEL_35:
    v18 = 0;
    goto LABEL_36;
  }
  v20 = *(_QWORD *)(v25 + 8 * v19);
  if (!v20)
  {
    v21 = v13 + 2;
    if (v13 + 2 < v24)
    {
      v20 = *(_QWORD *)(v25 + 8 * v21);
      if (v20)
        goto LABEL_25;
      v21 = v13 + 3;
      if (v13 + 3 >= v24)
        goto LABEL_35;
      v20 = *(_QWORD *)(v25 + 8 * v21);
      if (v20)
      {
LABEL_25:
        v19 = v21;
        goto LABEL_26;
      }
      v21 = v13 + 4;
      if (v13 + 4 < v24)
      {
        v20 = *(_QWORD *)(v25 + 8 * v21);
        if (v20)
          goto LABEL_25;
        v19 = v13 + 5;
        if (v13 + 5 < v24)
        {
          v20 = *(_QWORD *)(v25 + 8 * v19);
          if (!v20)
          {
            v22 = v13 + 6;
            do
            {
              if (v24 == v22)
                goto LABEL_35;
              v20 = *(_QWORD *)(v25 + 8 * v22++);
            }
            while (!v20);
            v19 = v22 - 1;
          }
          goto LABEL_26;
        }
      }
    }
    goto LABEL_35;
  }
LABEL_26:
  v14 = __clz(__rbit64(v20)) + (v19 << 6);
LABEL_27:
  v18 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v14);
  swift_retain(v18);
  if (v18)
LABEL_28:
    __asm { BR              X10 }
LABEL_36:
  sub_10007EF58(v1);
  return v18;
}

uint64_t sub_1001B7AFC()
{
  uint64_t v0;

  sub_100063CD0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001B7B20()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

_QWORD *sub_1001B7B44(uint64_t a1)
{
  int64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  NSObject *v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _QWORD v15[2];
  _BYTE v16[32];
  _QWORD *v17;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v17 = _swiftEmptyArrayStorage;
    sub_1001929A4(0, v1, 0);
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(_QWORD *)(v3 + 16);
    swift_bridgeObjectRetain(v3);
    if (v4)
    {
      v5 = sub_100187ED0(0xD000000000000010, 0x80000001002B9D40);
      if ((v6 & 1) != 0)
      {
        sub_100096CB0(*(_QWORD *)(v3 + 56) + 32 * v5, (uint64_t)v16);
        v5 = swift_dynamicCast(v15, v16, (char *)&type metadata for Any + 8, &type metadata for Data, 6);
        if ((_DWORD)v5)
          __asm { BR              X13 }
      }
    }
    v7 = Logger.logObject.getter(v5);
    v9 = static os_log_type_t.error.getter(v7, v8);
    if (os_log_type_enabled(v7, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v9, "Aux Reader identifier expected to be of type Data", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

    v11 = sub_10006B828();
    v12 = swift_allocError(&type metadata for DSKError, v11, 0, 0);
    *v13 = 0;
    swift_willThrow(v12);
    swift_release(_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease(v3);
  }
  return _swiftEmptyArrayStorage;
}

void sub_1001B7F38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  uint64_t v32;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  id v37;
  NSString v38;
  Class isa;
  id v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  void *v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  char *v67;
  unint64_t v68;
  unint64_t v69;
  void *v70;
  char *v71;

  v2 = sub_100063D3C(&qword_100348B00);
  v62 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v3);
  v61 = (char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100063D3C((uint64_t *)&unk_100346930);
  __chkstk_darwin(v5, v6);
  v8 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CredentialType(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100063D3C(&qword_100348B28);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  v18 = (uint64_t)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001B8918();
  v60 = v1;
  if (!v1)
  {
    v20 = v19;
    v67 = v13;
    v68 = v15;
    v66 = v14;
    v69 = v10;
    v59 = v0;
    if (v19 >> 62)
      goto LABEL_20;
    v21 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v21)
    {
      while (1)
      {
        v71 = (char *)_swiftEmptyArrayStorage;
        sub_100192A68(0, v21 & ~(v21 >> 63), 0);
        if (v21 < 0)
          break;
        v15 = 0;
        v13 = v71;
        v64 = v20;
        v65 = v20 & 0xC000000000000001;
        v63 = v21;
        while (v21 != v15)
        {
          if (v65)
            v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v15, v20);
          else
            v22 = *(id *)(v20 + 8 * v15 + 32);
          v23 = v22;
          v24 = objc_msgSend(v22, "type", v59);
          if (!v24)
            goto LABEL_55;
          v25 = v24;
          v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
          v28 = v27;

          CredentialType.init(rawValue:)(v26, v28);
          v29 = v69;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48))(v8, 1, v9) == 1)
          {
            sub_100096700((uint64_t)v8, (uint64_t *)&unk_100346930);
            v37 = objc_allocWithZone((Class)NSError);
            v38 = String._bridgeToObjectiveC()();
            isa = Dictionary._bridgeToObjectiveC()().super.isa;
            v40 = objc_msgSend(v37, "initWithDomain:code:userInfo:", v38, 23, isa);

            v60 = (uint64_t)v40;
            swift_willThrow(v41);

            v42 = v71;
            swift_bridgeObjectRelease(v64);
            swift_release(v42);
            return;
          }
          v30 = *(void (**)(char *, char *, uint64_t))(v29 + 32);
          v31 = v67;
          v30(v67, v8, v9);
          v32 = *(int *)(v66 + 48);
          v30((char *)v18, v31, v9);

          *(_QWORD *)(v18 + v32) = 1;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v13);
          v71 = v13;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_100192A68(0, *((_QWORD *)v13 + 2) + 1, 1);
            v13 = v71;
          }
          v34 = v68;
          v36 = *((_QWORD *)v13 + 2);
          v35 = *((_QWORD *)v13 + 3);
          if (v36 >= v35 >> 1)
          {
            sub_100192A68(v35 > 1, v36 + 1, 1);
            v34 = v68;
            v13 = v71;
          }
          ++v15;
          *((_QWORD *)v13 + 2) = v36 + 1;
          sub_10006C218(v18, (uint64_t)&v13[((*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80))+ *(_QWORD *)(v34 + 72) * v36], &qword_100348B28);
          v21 = v63;
          v20 = v64;
          if (v63 == v15)
          {
            swift_bridgeObjectRelease(v64);
            goto LABEL_25;
          }
        }
        __break(1u);
LABEL_20:
        if (v20 < 0)
          v43 = v20;
        else
          v43 = v20 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v20);
        v21 = _CocoaArrayWrapper.endIndex.getter(v43);
        swift_bridgeObjectRelease(v20);
        if (!v21)
          goto LABEL_24;
      }
LABEL_45:
      __break(1u);
    }
    else
    {
LABEL_24:
      swift_bridgeObjectRelease(v20);
      v13 = (char *)_swiftEmptyArrayStorage;
LABEL_25:
      v18 = v60;
      v44 = *((_QWORD *)v13 + 2);
      if (v44)
      {
        sub_100063D3C(&qword_100348B08);
        v45 = (char *)static _DictionaryStorage.allocate(capacity:)(v44);
      }
      else
      {
        v45 = (char *)&_swiftEmptyDictionarySingleton;
      }
      v71 = v45;
      sub_1001BB19C((uint64_t)v13, 1, &v71);
      if (v18)
        goto LABEL_56;
      swift_bridgeObjectRelease(v13);
      v15 = (unint64_t)v71;
      sub_1001B8918();
      v9 = 0;
      v20 = v46;
      if (!(v46 >> 62))
      {
        v18 = *(_QWORD *)((v46 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (!v18)
          goto LABEL_50;
LABEL_33:
        v68 = v15;
        v71 = (char *)_swiftEmptyArrayStorage;
        sub_100192A3C(0, v18 & ~(v18 >> 63), 0);
        if ((v18 & 0x8000000000000000) == 0)
        {
          v47 = 0;
          v13 = v71;
          v69 = v20 & 0xC000000000000001;
          v48 = v20;
          do
          {
            if (v18 == v47)
            {
              __break(1u);
              goto LABEL_45;
            }
            if (v69)
              v49 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v47, v20);
            else
              v49 = *(id *)(v20 + 8 * v47 + 32);
            v50 = v49;
            v51 = v61;
            v70 = v49;
            sub_1001B85F8(&v70, v61);

            v71 = v13;
            v15 = *((_QWORD *)v13 + 2);
            v52 = *((_QWORD *)v13 + 3);
            if (v15 >= v52 >> 1)
            {
              sub_100192A3C(v52 > 1, v15 + 1, 1);
              v13 = v71;
            }
            ++v47;
            *((_QWORD *)v13 + 2) = v15 + 1;
            sub_10006C218((uint64_t)v51, (uint64_t)&v13[((*(unsigned __int8 *)(v62 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80))+ *(_QWORD *)(v62 + 72) * v15], &qword_100348B00);
            v20 = v48;
          }
          while (v18 != v47);
          swift_bridgeObjectRelease(v48);
          v15 = v68;
          v53 = *((_QWORD *)v13 + 2);
          if (!v53)
            goto LABEL_51;
          goto LABEL_43;
        }
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        swift_bridgeObjectRelease(v13);
        swift_release(v71);
        __break(1u);
LABEL_57:
        swift_unexpectedError(v18, "Swift/Dictionary.swift", 22, 1, 489);
        __break(1u);
        return;
      }
    }
    if (v20 < 0)
      v55 = v20;
    else
      v55 = v20 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v20);
    v18 = _CocoaArrayWrapper.endIndex.getter(v55);
    swift_bridgeObjectRelease(v20);
    if (!v18)
    {
LABEL_50:
      swift_bridgeObjectRelease(v20);
      v13 = (char *)_swiftEmptyArrayStorage;
      v53 = _swiftEmptyArrayStorage[2];
      if (!v53)
      {
LABEL_51:
        v54 = (char *)&_swiftEmptyDictionarySingleton;
LABEL_52:
        v71 = v54;
        v56 = swift_bridgeObjectRetain(v13);
        sub_1001BAD04(v56, 1, &v71);
        v18 = v9;
        if (!v9)
        {
          swift_bridgeObjectRelease(v13);
          v57 = v71;
          v58 = objc_allocWithZone((Class)type metadata accessor for ReservationState(0));
          ReservationState.init(counts:reservations:)(v15, v57);
          return;
        }
        goto LABEL_57;
      }
LABEL_43:
      sub_100063D3C(&qword_100348AF0);
      v54 = (char *)static _DictionaryStorage.allocate(capacity:)(v53);
      goto LABEL_52;
    }
    goto LABEL_33;
  }
}

id sub_1001B85F8@<X0>(void **a1@<X0>, char *a2@<X8>)
{
  uint64_t (*v2)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void *v21;
  id v22;
  void *v23;
  void (*v24)(char *, char *, uint64_t);
  unsigned int (*v25)(char *, uint64_t, uint64_t);
  id v26;
  void *v27;
  id result;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  char *v41;

  v41 = a2;
  v4 = sub_100063D3C((uint64_t *)&unk_100346930);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100063D3C((uint64_t *)&unk_1003465E0);
  v15 = __chkstk_darwin(v13, v14);
  v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v18);
  v20 = (char *)&v40 - v19;
  v21 = *a1;
  v22 = objc_msgSend(v21, "uuid");
  if (!v22)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v20, 1, 1, v8);
    goto LABEL_10;
  }
  v23 = v22;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v22);

  v24 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v24(v20, v12, v8);
  v2 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  v2(v20, 0, 1, v8);
  v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  if (v25(v20, 1, v8) == 1)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v24(v41, v20, v8);
  v26 = objc_msgSend(v21, "uuid");
  if (!v26)
  {
LABEL_11:
    result = (id)v2(v17, 1, 1, v8);
    goto LABEL_12;
  }
  v27 = v26;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v26);

  v24(v17, v12, v8);
  v2(v17, 0, 1, v8);
  result = (id)((uint64_t (*)(char *, uint64_t, uint64_t))v25)(v17, 1, v8);
  if ((_DWORD)result == 1)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  result = objc_msgSend(v21, "type");
  if (!result)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v29 = result;
  v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
  v32 = v31;

  CredentialType.init(rawValue:)(v30, v32);
  v33 = type metadata accessor for CredentialType(0);
  result = (id)(*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 48))(v7, 1, v33);
  if ((_DWORD)result == 1)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  result = objc_msgSend(v21, "metadata");
  if (result)
  {
    v34 = result;
    v35 = *(int *)(sub_100063D3C(&qword_100348B00) + 48);
    v36 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v34);
    v38 = v37;

    v39 = objc_allocWithZone((Class)type metadata accessor for Reservation(0));
    result = (id)Reservation.init(uuid:type:metadata:)(v17, v7, v36, v38);
    *(_QWORD *)&v41[v35] = result;
    return result;
  }
LABEL_15:
  __break(1u);
  return result;
}

void sub_1001B8918()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  id v4;
  NSString v5;
  Class isa;
  uint64_t v7;
  _QWORD v8[5];
  uint64_t v9;

  v1 = *(void **)(v0 + 112);
  if (v1)
  {
    v8[2] = *(_QWORD *)(v0 + 112);
    v2 = v1;
    v3 = sub_100063D3C(&qword_100349618);
    NSManagedObjectContext.performAndWait<A>(_:)(&v9, sub_1001BACEC, v8, v3);

  }
  else
  {
    v4 = objc_allocWithZone((Class)NSError);
    v5 = String._bridgeToObjectiveC()();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v4, "initWithDomain:code:userInfo:", v5, 21, isa);

    swift_willThrow(v7);
  }
}

void sub_1001B8A4C(uint64_t *a1@<X8>)
{
  uint64_t v1;
  id v3;
  NSString v4;
  id v5;
  uint64_t v6;
  uint64_t v7;

  v3 = objc_allocWithZone((Class)NSFetchRequest);
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v3, "initWithEntityName:", v4);

  v6 = type metadata accessor for Item();
  v7 = NSManagedObjectContext.fetch<A>(_:)(v5, v6);

  if (!v1)
    *a1 = v7;
}

uint64_t sub_1001B8AF0(id *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  id v24;
  void *v25;
  void (*v26)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t);
  int v29;
  uint64_t *v30;
  char v31;
  char *v32;
  unint64_t v33;
  void (*v34)(char *, uint64_t);
  uint64_t v36;
  char *v37;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v37 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100063D3C(&qword_100346F80);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100063D3C((uint64_t *)&unk_1003465E0);
  v14 = __chkstk_darwin(v12, v13);
  v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v14, v17);
  v20 = (char *)&v36 - v19;
  __chkstk_darwin(v18, v21);
  v23 = (char *)&v36 - v22;
  v24 = objc_msgSend(*a1, "uuid");
  if (v24)
  {
    v25 = v24;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    v26(v23, 0, 1, v4);
  }
  else
  {
    v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    v26(v23, 1, 1, v4);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v20, a2, v4);
  v26(v20, 0, 1, v4);
  v27 = (uint64_t)&v11[*(int *)(v8 + 48)];
  sub_1000E4E48((uint64_t)v23, (uint64_t)v11, (uint64_t *)&unk_1003465E0);
  sub_1000E4E48((uint64_t)v20, v27, (uint64_t *)&unk_1003465E0);
  v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v28((uint64_t)v11, 1, v4) == 1)
  {
    sub_100096700((uint64_t)v20, (uint64_t *)&unk_1003465E0);
    sub_100096700((uint64_t)v23, (uint64_t *)&unk_1003465E0);
    v29 = v28(v27, 1, v4);
    if (v29 == 1)
      v30 = (uint64_t *)&unk_1003465E0;
    else
      v30 = &qword_100346F80;
    if (v29 == 1)
      v31 = -1;
    else
      v31 = 0;
  }
  else
  {
    sub_1000E4E48((uint64_t)v11, (uint64_t)v16, (uint64_t *)&unk_1003465E0);
    if (v28(v27, 1, v4) == 1)
    {
      sub_100096700((uint64_t)v20, (uint64_t *)&unk_1003465E0);
      sub_100096700((uint64_t)v23, (uint64_t *)&unk_1003465E0);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v16, v4);
      v31 = 0;
      v30 = &qword_100346F80;
    }
    else
    {
      v32 = v37;
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v37, v27, v4);
      v33 = sub_1001BAC84();
      v31 = dispatch thunk of static Equatable.== infix(_:_:)(v16, v32, v4, v33);
      v34 = *(void (**)(char *, uint64_t))(v5 + 8);
      v34(v32, v4);
      v30 = (uint64_t *)&unk_1003465E0;
      sub_100096700((uint64_t)v20, (uint64_t *)&unk_1003465E0);
      sub_100096700((uint64_t)v23, (uint64_t *)&unk_1003465E0);
      v34(v16, v4);
    }
  }
  sub_100096700((uint64_t)v11, v30);
  return v31 & 1;
}

char *sub_1001B8E1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  char *result;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  _QWORD v36[2];

  v3 = sub_100063D3C((uint64_t *)&unk_100346930);
  __chkstk_darwin(v3, v4);
  v6 = (char *)v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100063D3C((uint64_t *)&unk_1003465E0);
  __chkstk_darwin(v12, v13);
  v15 = (char *)v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001B8918();
  if (v1)
    return v6;
  __chkstk_darwin(v16, v17);
  v36[-2] = a1;
  v19 = (uint64_t)sub_1001F1CBC(sub_1001BB58C, &v36[-4], v18);
  v20 = v19;
  if (!((unint64_t)v19 >> 62))
  {
    if (*(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_4;
LABEL_16:
    swift_bridgeObjectRelease(v20);
    return 0;
  }
  if (v19 >= 0)
    v19 &= 0xFFFFFFFFFFFFFF8uLL;
  if (!_CocoaArrayWrapper.endIndex.getter(v19))
    goto LABEL_16;
LABEL_4:
  if ((v20 & 0xC000000000000001) != 0)
  {
    v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v20);
  }
  else
  {
    if (!*(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_20;
    }
    v21 = *(id *)(v20 + 32);
  }
  v22 = v21;
  swift_bridgeObjectRelease(v20);
  v23 = objc_msgSend(v22, "uuid");
  if (!v23)
  {
LABEL_20:
    result = (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v15, 1, 1, v7);
    goto LABEL_21;
  }
  v24 = v23;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v11, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v15, 0, 1, v7);
  result = (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v15, 1, v7);
  if ((_DWORD)result == 1)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  result = (char *)objc_msgSend(v22, "type");
  if (!result)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v26 = result;
  v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
  v29 = v28;

  CredentialType.init(rawValue:)(v27, v29);
  v30 = type metadata accessor for CredentialType(0);
  result = (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 48))(v6, 1, v30);
  if ((_DWORD)result == 1)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  result = (char *)objc_msgSend(v22, "metadata");
  if (result)
  {
    v31 = result;
    v32 = static Data._unconditionallyBridgeFromObjectiveC(_:)(result);
    v34 = v33;

    v35 = objc_allocWithZone((Class)type metadata accessor for Reservation(0));
    v6 = (char *)Reservation.init(uuid:type:metadata:)(v15, v6, v32, v34);

    return v6;
  }
LABEL_24:
  __break(1u);
  return result;
}

void sub_1001B913C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  NSString v18;
  Class isa;
  uint64_t v20;
  _QWORD v21[2];
  uint64_t v22;

  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(void **)(v3 + 112);
  if (v12)
  {
    v13 = v12;
    v14 = UUID.init()(v13);
    v21[1] = v21;
    __chkstk_darwin(v14, v15);
    v21[-6] = v13;
    v21[-5] = a1;
    v21[-4] = v11;
    v21[-3] = a2;
    v21[-2] = a3;
    v16 = type metadata accessor for Reservation(0);
    NSManagedObjectContext.performAndWait<A>(_:)(&v22, sub_1001BACCC, &v21[-8], v16);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);

  }
  else
  {
    v17 = objc_allocWithZone((Class)NSError);
    v18 = String._bridgeToObjectiveC()();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v17, "initWithDomain:code:userInfo:", v18, 21, isa);

    swift_willThrow(v20);
  }
}

void sub_1001B930C(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  NSString v27;
  unint64_t v28;
  Class isa;
  Class v30;
  id v31;
  void *v32;
  id v33;
  void *v34;
  unsigned __int8 v35;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  unint64_t v45;
  uint64_t v46;
  id v47;

  v40 = a6;
  v45 = a5;
  v46 = a3;
  v9 = type metadata accessor for CredentialType(0);
  v41 = *(_QWORD *)(v9 - 8);
  v42 = v9;
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100063D3C((uint64_t *)&unk_1003465E0);
  __chkstk_darwin(v18, v19);
  v21 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for Item();
  v23 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v22));
  v44 = a1;
  v24 = objc_msgSend(v23, "initWithContext:", a1);
  v43 = a2;
  CredentialType.rawValue.getter();
  v26 = v25;
  v27 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v26);
  objc_msgSend(v24, "setType:", v27);

  v28 = v45;
  isa = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v24, "setUuid:", isa);

  v30 = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v24, "setMetadata:", v30);

  v31 = objc_msgSend(v24, "uuid");
  if (!v31)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v21, 1, 1, v13);
LABEL_8:
    __break(1u);
  }
  v32 = v31;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v31);

  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v21, v17, v13);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v21, 0, 1, v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v21, 1, v13) == 1)
    goto LABEL_8;
  (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v12, v43, v42);
  v33 = objc_allocWithZone((Class)type metadata accessor for Reservation(0));
  sub_100063C8C(a4, v28);
  v34 = (void *)Reservation.init(uuid:type:metadata:)(v21, v12, a4, v28);
  v47 = 0;
  v35 = objc_msgSend(v44, "save:", &v47);
  v36 = v47;
  if ((v35 & 1) != 0)
  {
    v37 = v47;

    *v40 = v34;
  }
  else
  {
    v38 = v47;
    _convertNSErrorToError(_:)(v36);

    swift_willThrow(v39);
  }
}

void sub_1001B9628(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  id v7;
  NSString v8;
  Class isa;
  uint64_t v10;
  _QWORD v11[8];
  uint64_t v12;

  v4 = *(void **)(v3 + 112);
  if (v4)
  {
    v11[3] = a1;
    v11[4] = a2;
    v11[5] = a3;
    v11[6] = v4;
    v5 = type metadata accessor for Reservation(0);
    v6 = v4;
    NSManagedObjectContext.performAndWait<A>(_:)(&v12, sub_1001BAC48, v11, v5);

  }
  else
  {
    v7 = objc_allocWithZone((Class)NSError);
    v8 = String._bridgeToObjectiveC()();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v7, "initWithDomain:code:userInfo:", v8, 21, isa);

    swift_willThrow(v10);
  }
}

void sub_1001B9768(char *a1@<X1>, uint64_t a2@<X2>, unint64_t a3@<X3>, void *a4@<X4>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  id v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  id v45;
  void *v46;
  uint64_t v47;
  void *v48;
  void *v49;
  Swift::String v50;
  Swift::String v51;
  id v52;
  char *v53;
  char *v54;
  id v55;
  void *v56;
  Class isa;
  id v58;
  unsigned __int8 v59;
  id v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t);
  id v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  Swift::String v67;
  void *object;
  Swift::String v69;
  id v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  id v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  id v83;
  id v84;
  uint64_t v85;

  v82 = a1;
  v79 = a4;
  v80 = a2;
  v81 = a3;
  v78 = a5;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100063D3C((uint64_t *)&unk_100346930);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for CredentialType(0);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = __chkstk_darwin(v14, v16);
  v19 = (char *)&v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v20);
  v22 = (char *)&v71 - v21;
  v23 = v83;
  sub_1001B8918();
  if (v23)
    return;
  v74 = v22;
  v75 = v13;
  v71 = v19;
  v72 = v6;
  v73 = v5;
  v83 = v9;
  v27 = v80;
  v26 = v81;
  v76 = v15;
  v77 = v14;
  __chkstk_darwin(v24, v25);
  v28 = v82;
  *(&v71 - 2) = v82;
  v30 = (uint64_t)sub_1001F1CBC(sub_1001BAC68, &v71 - 4, v29);
  v31 = v30;
  if ((unint64_t)v30 >> 62)
  {
    if (v30 >= 0)
      v30 &= 0xFFFFFFFFFFFFFF8uLL;
    v32 = v26;
    if (_CocoaArrayWrapper.endIndex.getter(v30))
      goto LABEL_4;
LABEL_17:
    swift_bridgeObjectRelease(v31);
    sub_100098CBC();
    v84 = 0;
    v85 = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    v66 = swift_bridgeObjectRelease(v85);
    v84 = (id)0xD000000000000020;
    v85 = 0x80000001002BFB60;
    v67._countAndFlagsBits = UUID.uuidString.getter(v66);
    object = v67._object;
    String.append(_:)(v67);
    swift_bridgeObjectRelease(object);
    v69._countAndFlagsBits = 46;
    v69._object = (void *)0xE100000000000000;
    String.append(_:)(v69);
    v70 = sub_1001E2838(22, 0, (uint64_t)v84, v85, 0);
    swift_willThrow(v70);
    return;
  }
  v32 = v26;
  if (!*(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_17;
LABEL_4:
  v33 = v27;
  if ((v31 & 0xC000000000000001) != 0)
  {
    v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v31);
    v34 = v83;
  }
  else
  {
    v34 = v83;
    if (!*(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10))
      __break(1u);
    v35 = *(id *)(v31 + 32);
  }
  swift_bridgeObjectRelease(v31);
  v83 = v35;
  v36 = objc_msgSend(v35, "type");
  if (!v36)
  {
    __break(1u);
LABEL_21:
    __break(1u);
    return;
  }
  v37 = v36;
  v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
  v40 = v39;

  v41 = (uint64_t)v75;
  CredentialType.init(rawValue:)(v38, v40);
  v43 = v76;
  v42 = v77;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v76 + 48))(v41, 1, v77) == 1)
  {
    sub_100096700(v41, (uint64_t *)&unk_100346930);
    v84 = 0;
    v85 = 0xE000000000000000;
    _StringGuts.grow(_:)(43);
    swift_bridgeObjectRelease(v85);
    v84 = (id)0xD000000000000012;
    v85 = 0x80000001002BC6C0;
    v44 = v83;
    v45 = objc_msgSend(v83, "type");
    if (v45)
    {
      v46 = v45;
      sub_100098CBC();
      v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
      v49 = v48;

      v50._countAndFlagsBits = v47;
      v50._object = v49;
      String.append(_:)(v50);
      swift_bridgeObjectRelease(v49);
      v51._countAndFlagsBits = 0xD000000000000017;
      v51._object = (void *)0x80000001002BFB40;
      String.append(_:)(v51);
      v52 = sub_1001E2838(23, 0, (uint64_t)v84, v85, 0);
      swift_willThrow(v52);

      return;
    }
    goto LABEL_21;
  }
  v53 = v74;
  (*(void (**)(char *, uint64_t, uint64_t))(v43 + 32))(v74, v41, v42);
  (*(void (**)(id, char *, uint64_t))(v72 + 16))(v34, v28, v73);
  v54 = v71;
  (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v71, v53, v42);
  v55 = objc_allocWithZone((Class)type metadata accessor for Reservation(0));
  sub_100063C8C(v33, v32);
  v56 = (void *)Reservation.init(uuid:type:metadata:)(v34, v54, v33, v32);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v58 = v83;
  objc_msgSend(v83, "setMetadata:", isa);

  v84 = 0;
  v59 = objc_msgSend(v79, "save:", &v84);
  v60 = v84;
  v61 = v42;
  if ((v59 & 1) != 0)
  {
    v62 = *(void (**)(char *, uint64_t))(v43 + 8);
    v63 = v84;
    v62(v53, v61);

    *v78 = v56;
  }
  else
  {
    v64 = v84;
    _convertNSErrorToError(_:)(v60);

    swift_willThrow(v65);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v53, v61);
  }
}

void sub_1001B9CBC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  unsigned __int8 v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  void *object;
  Swift::String v21;
  id v22;
  _QWORD v23[5];
  id v24;
  uint64_t v25;

  sub_1001B8918();
  if (v3)
    return;
  __chkstk_darwin(v6, v7);
  v23[2] = a2;
  v9 = (uint64_t)sub_1001F1CBC(sub_1001BB58C, v23, v8);
  v10 = v9;
  if ((unint64_t)v9 >> 62)
  {
    if (v9 >= 0)
      v9 &= 0xFFFFFFFFFFFFFF8uLL;
    if (_CocoaArrayWrapper.endIndex.getter(v9))
      goto LABEL_4;
LABEL_14:
    swift_bridgeObjectRelease(v10);
    sub_100098CBC();
    v24 = 0;
    v25 = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    v18 = swift_bridgeObjectRelease(v25);
    v24 = (id)0xD000000000000020;
    v25 = 0x80000001002BFB60;
    v19._countAndFlagsBits = UUID.uuidString.getter(v18);
    object = v19._object;
    String.append(_:)(v19);
    swift_bridgeObjectRelease(object);
    v21._countAndFlagsBits = 46;
    v21._object = (void *)0xE100000000000000;
    String.append(_:)(v21);
    v22 = sub_1001E2838(22, 0, (uint64_t)v24, v25, 0);
    swift_willThrow(v22);
    return;
  }
  if (!*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_14;
LABEL_4:
  if ((v10 & 0xC000000000000001) != 0)
  {
    v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v10);
  }
  else
  {
    if (!*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
      __break(1u);
    v11 = *(id *)(v10 + 32);
  }
  v12 = v11;
  swift_bridgeObjectRelease(v10);
  objc_msgSend(a3, "deleteObject:", v12);
  v24 = 0;
  v13 = objc_msgSend(a3, "save:", &v24);
  v14 = v24;
  if ((v13 & 1) != 0)
  {
    v15 = v24;
  }
  else
  {
    v16 = v24;
    _convertNSErrorToError(_:)(v14);

    swift_willThrow(v17);
  }

}

void sub_1001B9ED8(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  id v8;
  void *v9;
  uint64_t v10;
  unsigned int v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  id v16;

  sub_1001B8918();
  if (!v2)
  {
    v5 = v4;
    if ((unint64_t)v4 >> 62)
    {
      if (v4 < 0)
        v10 = v4;
      else
        v10 = v4 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v4);
      v6 = _CocoaArrayWrapper.endIndex.getter(v10);
      swift_bridgeObjectRelease(v5);
      if (v6)
        goto LABEL_4;
    }
    else
    {
      v6 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v6)
      {
LABEL_4:
        if (v6 < 1)
          __break(1u);
        for (i = 0; i != v6; ++i)
        {
          if ((v5 & 0xC000000000000001) != 0)
            v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v5);
          else
            v8 = *(id *)(v5 + 8 * i + 32);
          v9 = v8;
          objc_msgSend(a2, "deleteObject:", v8);

        }
      }
    }
    swift_bridgeObjectRelease(v5);
    v16 = 0;
    v11 = objc_msgSend(a2, "save:", &v16);
    v12 = v16;
    if (v11)
    {
      v13 = v16;
    }
    else
    {
      v14 = v16;
      _convertNSErrorToError(_:)(v12);

      swift_willThrow(v15);
    }
  }
}

uint64_t sub_1001BA048(uint64_t a1)
{
  return sub_1001BA090(a1, qword_1003494C8, 0xD00000000000002CLL, 0x80000001002BFC40);
}

uint64_t sub_1001BA06C(uint64_t a1)
{
  return sub_1001BA090(a1, qword_1003494E0, 0xD000000000000031, 0x80000001002BFC00);
}

uint64_t sub_1001BA090(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  v7 = type metadata accessor for URL.DirectoryHint(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100063D3C(&qword_1003466C8);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for URL(0);
  sub_1000980F8(v16, a2);
  sub_10009673C(v16, (uint64_t)a2);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v11, enum case for URL.DirectoryHint.inferFromPath(_:), v7);
  return URL.init(filePath:directoryHint:relativeTo:)(a3, a4, v11, v15);
}

void *sub_1001BA1B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  NSURL *v21;
  void *v22;
  void *v23;
  id v24;
  void (*v25)(char *, uint64_t, uint64_t);
  unint64_t v26;
  void (*v27)(char *, uint64_t);
  void *v28;
  uint64_t v29;
  Class isa;
  id v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  NSURL *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  unsigned int v41;
  id v42;
  id v43;
  NSString v44;
  unsigned int v45;
  id v46;
  NSString v47;
  unsigned int v48;
  id v49;
  NSString v50;
  unsigned int v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  void *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t inited;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  id v79;
  id v80;
  id v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  id v85;
  void *v86;
  void *result;
  uint64_t v88;
  uint64_t (*v89)(char *, char *, uint64_t);
  void (*v90)(char *, uint64_t);
  uint64_t v91;
  void *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  id v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  _BYTE v102[80];
  id v103;
  unint64_t v104;

  v1 = type metadata accessor for NSPersistentStore.StoreType(0);
  v96 = *(_QWORD *)(v1 - 8);
  v97 = v1;
  __chkstk_darwin(v1, v2);
  v95 = (char *)&v88 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for URL.DirectoryHint(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v88 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v12 = __chkstk_darwin(v9, v11);
  v93 = (char *)&v88 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12, v14);
  v17 = (char *)&v88 - v16;
  __chkstk_darwin(v15, v18);
  v100 = (char *)&v88 - v19;
  swift_defaultActor_initialize(v0);
  *(_QWORD *)(v0 + 112) = 0;
  v99 = v0;
  v92 = (void *)(v0 + OBJC_IVAR____TtC10seserviced24SERPersistenceController_logger);
  Logger.init(subsystem:category:)(0xD000000000000014);
  if (qword_1003446F8 != -1)
    swift_once(&qword_1003446F8, sub_1001BA048);
  sub_10009673C(v9, (uint64_t)qword_1003494C8);
  v20 = objc_allocWithZone((Class)NSManagedObjectModel);
  URL._bridgeToObjectiveC()(v21);
  v23 = v22;
  v24 = objc_msgSend(v20, "initWithContentsOfURL:", v22);

  v98 = v24;
  if (!v24)
  {
    v66 = v99;
    swift_release(v99);
    sub_100098CBC();
    v67 = sub_1001E2838(21, 0, 0xD00000000000001ELL, 0x80000001002BFBB0, 0);
    swift_willThrow(v67);
    return (void *)v66;
  }
  if (qword_100344700 != -1)
    swift_once(&qword_100344700, sub_1001BA06C);
  v91 = sub_10009673C(v9, (uint64_t)qword_1003494E0);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v25(v17, v91, v9);
  v103 = (id)0xD000000000000022;
  v104 = 0x80000001002BFBD0;
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for URL.DirectoryHint.inferFromPath(_:), v4);
  v26 = sub_1000F716C();
  URL.appending<A>(path:directoryHint:)(&v103, v8, &type metadata for String, v26);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  swift_bridgeObjectRelease(v104);
  v27 = *(void (**)(char *, uint64_t))(v10 + 8);
  v27(v17, v9);
  v28 = (void *)objc_opt_self(NSString);
  v29 = URL.pathComponents.getter();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v29);
  v31 = objc_msgSend(v28, "pathWithComponents:", isa);

  v88 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
  v33 = v32;

  v34 = (void *)objc_opt_self(NSFileManager);
  v35 = objc_msgSend(v34, "defaultManager");
  v89 = (uint64_t (*)(char *, char *, uint64_t))v25;
  v25(v17, v91, v9);
  URL._bridgeToObjectiveC()(v36);
  v38 = v37;
  v91 = v9;
  v39 = v9;
  v40 = v27;
  v27(v17, v39);
  v103 = 0;
  v41 = objc_msgSend(v35, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v38, 1, 0, &v103);

  v42 = v103;
  if (!v41)
  {
    v68 = v42;
    v66 = v99;
    swift_release(v99);
    swift_bridgeObjectRelease(v33);
    _convertNSErrorToError(_:)(v68);

    swift_willThrow(v69);
    v70 = v100;
    v71 = v91;
LABEL_22:
    v40(v70, v71);
    return (void *)v66;
  }
  v90 = v27;
  v43 = objc_msgSend(v34, "defaultManager");
  v44 = String._bridgeToObjectiveC()();
  v45 = objc_msgSend(v43, "fileExistsAtPath:", v44);

  v46 = objc_msgSend(v34, "defaultManager");
  v47 = String._bridgeToObjectiveC()();
  v48 = objc_msgSend(v46, "isReadableFileAtPath:", v47);

  v49 = objc_msgSend(v34, "defaultManager");
  v50 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v33);
  v51 = objc_msgSend(v49, "isWritableFileAtPath:", v50);

  v52 = v93;
  v53 = v100;
  v54 = v91;
  v55 = v89(v93, v100, v91);
  v56 = Logger.logObject.getter(v55);
  v57 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v56, v57))
  {
    v58 = swift_slowAlloc(34, -1);
    v92 = (void *)swift_slowAlloc(64, -1);
    v103 = v92;
    *(_DWORD *)v58 = 136315906;
    LODWORD(v89) = v48;
    v59 = URL.description.getter();
    v61 = v60;
    v101 = sub_1001C56EC(v59, v60, (uint64_t *)&v103);
    LODWORD(v88) = v51;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, v102, v58 + 4, v58 + 12);
    swift_bridgeObjectRelease(v61);
    v90(v52, v54);
    *(_WORD *)(v58 + 12) = 2080;
    if (v45)
      v62 = 1702195828;
    else
      v62 = 0x65736C6166;
    if (v45)
      v63 = 0xE400000000000000;
    else
      v63 = 0xE500000000000000;
    v101 = sub_1001C56EC(v62, v63, (uint64_t *)&v103);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, v102, v58 + 14, v58 + 22);
    swift_bridgeObjectRelease(v63);
    *(_WORD *)(v58 + 22) = 1024;
    LODWORD(v101) = (_DWORD)v89;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, (char *)&v101 + 4, v58 + 24, v58 + 28);
    *(_WORD *)(v58 + 28) = 1024;
    LODWORD(v101) = v88;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, (char *)&v101 + 4, v58 + 30, v58 + 34);
    _os_log_impl((void *)&_mh_execute_header, v56, v57, "Storage path %s for ReservationsManager exists %s R_OK %{BOOL}d W_OK %{BOOL}d ", (uint8_t *)v58, 0x22u);
    v64 = v92;
    swift_arrayDestroy(v92, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v64, -1, -1);
    v65 = v58;
    v53 = v100;
    swift_slowDealloc(v65, -1, -1);

  }
  else
  {

    v90(v52, v54);
  }
  v73 = v94;
  v72 = v95;
  v74 = sub_100063D3C(&qword_100349620);
  inited = swift_initStackObject(v74, v102);
  *(_OWORD *)(inited + 16) = xmmword_1002888F0;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSInferMappingModelAutomaticallyOption);
  *(_QWORD *)(inited + 40) = v76;
  *(_BYTE *)(inited + 48) = 1;
  *(_QWORD *)(inited + 56) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSMigratePersistentStoresAutomaticallyOption);
  *(_QWORD *)(inited + 64) = v77;
  *(_BYTE *)(inited + 72) = 1;
  v78 = sub_10017C7B4(inited);
  v79 = objc_allocWithZone((Class)NSPersistentStoreCoordinator);
  v80 = v98;
  v81 = objc_msgSend(v79, "initWithManagedObjectModel:", v98);
  static NSPersistentStore.StoreType.sqlite.getter();
  v82 = sub_10017D44C(v78);
  swift_bridgeObjectRelease(v78);
  v83 = (void *)NSPersistentStoreCoordinator.addPersistentStore(type:configuration:at:options:)(v72, 0, 0, v53, v82);
  if (v73)
  {

    v66 = v99;
    swift_release(v99);
    swift_bridgeObjectRelease(v82);
    (*(void (**)(char *, uint64_t))(v96 + 8))(v72, v97);
    v90(v53, v54);
    return (void *)v66;
  }
  v84 = v54;

  swift_bridgeObjectRelease(v82);
  (*(void (**)(char *, uint64_t))(v96 + 8))(v72, v97);
  v85 = objc_msgSend(objc_allocWithZone((Class)NSManagedObjectContext), "initWithConcurrencyType:", 1);
  v66 = v99;
  v86 = *(void **)(v99 + 112);
  *(_QWORD *)(v99 + 112) = v85;

  result = *(void **)(v66 + 112);
  v40 = v90;
  if (result)
  {
    objc_msgSend(result, "setPersistentStoreCoordinator:", v81);

    v70 = v53;
    v71 = v84;
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001BAB30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC10seserviced24SERPersistenceController_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_1001BAB84()
{
  return type metadata accessor for SERPersistenceController(0);
}

uint64_t type metadata accessor for SERPersistenceController(uint64_t a1)
{
  uint64_t result;

  result = qword_100349528;
  if (!qword_100349528)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SERPersistenceController);
  return result;
}

uint64_t sub_1001BABC8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[1] = &unk_10028C798;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

void sub_1001BAC48(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_1001B9768(*(char **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(void **)(v1 + 48), a1);
}

uint64_t sub_1001BAC68(id *a1)
{
  uint64_t v1;

  return sub_1001B8AF0(a1, *(_QWORD *)(v1 + 16)) & 1;
}

unint64_t sub_1001BAC84()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100346150;
  if (!qword_100346150)
  {
    v1 = type metadata accessor for UUID(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for UUID, v1);
    atomic_store(result, (unint64_t *)&qword_100346150);
  }
  return result;
}

void sub_1001BACCC(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_1001B930C(*(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), a1);
}

void sub_1001BACEC(uint64_t *a1@<X8>)
{
  sub_1001B8A4C(a1);
}

uint64_t sub_1001BAD04(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(unint64_t, char *, uint64_t);
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _BOOL8 v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  Swift::String v54;
  Swift::String v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(unint64_t, char *, uint64_t);
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;

  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100063D3C(&qword_100348B00);
  v14 = __chkstk_darwin(v12, v13);
  v17 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(a1 + 16);
  if (!v18)
    return swift_bridgeObjectRelease(a1);
  LODWORD(v61) = a2;
  v58 = v3;
  v19 = *(int *)(v14 + 48);
  v57 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v20 = a1 + v57;
  v63 = *(_QWORD *)(v15 + 72);
  v60 = a1;
  swift_bridgeObjectRetain(a1);
  sub_1000E4E48(v20, (uint64_t)v17, &qword_100348B00);
  v59 = v8;
  v21 = *(void (**)(unint64_t, char *, uint64_t))(v8 + 32);
  v64 = v7;
  v65 = v21;
  v21((unint64_t)v11, v17, v7);
  v62 = v19;
  v22 = *(void **)&v17[v19];
  v23 = (_QWORD *)*a3;
  v25 = sub_100187E34((uint64_t)v11);
  v26 = v23[2];
  v27 = (v24 & 1) == 0;
  v28 = v26 + v27;
  if (__OFADD__(v26, v27))
    goto LABEL_24;
  v8 = v24;
  if (v23[3] >= v28)
  {
    if ((v61 & 1) != 0)
    {
      if ((v24 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_1001910BC();
      if ((v8 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v36 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v25 >> 6) + 64) |= 1 << v25;
    v37 = v36[6];
    v61 = *(_QWORD *)(v59 + 72);
    v8 = v64;
    v65(v37 + v61 * v25, v11, v64);
    *(_QWORD *)(v36[7] + 8 * v25) = v22;
    v38 = v36[2];
    v39 = __OFADD__(v38, 1);
    v40 = v38 + 1;
    if (v39)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v36[2] = v40;
    v41 = v18 - 1;
    if (v18 == 1)
      return swift_bridgeObjectRelease_n(v60, 2);
    v42 = v60 + v63 + v57;
    while (1)
    {
      sub_1000E4E48(v42, (uint64_t)v17, &qword_100348B00);
      v65((unint64_t)v11, v17, v8);
      v22 = *(void **)&v17[v62];
      v43 = (_QWORD *)*a3;
      v45 = sub_100187E34((uint64_t)v11);
      v46 = v43[2];
      v47 = (v44 & 1) == 0;
      v48 = v46 + v47;
      if (__OFADD__(v46, v47))
        break;
      v8 = v44;
      if (v43[3] < v48)
      {
        sub_10018B364(v48, 1);
        v49 = sub_100187E34((uint64_t)v11);
        if ((v8 & 1) != (v50 & 1))
          goto LABEL_26;
        v45 = v49;
      }
      if ((v8 & 1) != 0)
        goto LABEL_10;
      v51 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v45 >> 6) + 64) |= 1 << v45;
      v8 = v64;
      v65(v51[6] + v61 * v45, v11, v64);
      *(_QWORD *)(v51[7] + 8 * v45) = v22;
      v52 = v51[2];
      v39 = __OFADD__(v52, 1);
      v53 = v52 + 1;
      if (v39)
        goto LABEL_25;
      v51[2] = v53;
      v42 += v63;
      if (!--v41)
        return swift_bridgeObjectRelease_n(v60, 2);
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  sub_10018B364(v28, v61 & 1);
  v29 = sub_100187E34((uint64_t)v11);
  if ((v8 & 1) == (v30 & 1))
  {
    v25 = v29;
    if ((v8 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v32 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
    swift_willThrow(v32);
    v68 = v32;
    swift_errorRetain(v32);
    v33 = sub_100063D3C(&qword_100345378);
    v34 = swift_dynamicCast(v33, &v68, v33, &type metadata for _MergeError, 0);
    v8 = v64;
    if ((v34 & 1) == 0)
    {

      v35 = v60;
      swift_bridgeObjectRelease(v60);
      (*(void (**)(char *, uint64_t))(v59 + 8))(v11, v8);
      swift_bridgeObjectRelease(v35);
      return swift_errorRelease(v68);
    }
    goto LABEL_27;
  }
LABEL_26:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v64);
  __break(1u);
LABEL_27:
  v66 = 0;
  v67 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v54._object = (void *)0x80000001002BBCA0;
  v54._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v54);
  _print_unlocked<A, B>(_:_:)(v11, &v66, v8, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v55._countAndFlagsBits = 39;
  v55._object = (void *)0xE100000000000000;
  String.append(_:)(v55);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v66, v67, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001BB19C(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  _QWORD *v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  char v51;
  unint64_t v52;
  uint64_t v53;
  _BOOL8 v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  char v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(unint64_t, char *, uint64_t);
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;

  v7 = type metadata accessor for CredentialType(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100063D3C(&qword_100348B28);
  result = __chkstk_darwin(v12, v13);
  v17 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(a1 + 16);
  if (v18)
  {
    v67 = v3;
    v19 = *(int *)(result + 48);
    v66 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
    v20 = a1 + v66;
    v72 = *(_QWORD *)(v15 + 72);
    v69 = a1;
    swift_bridgeObjectRetain(a1);
    sub_1000E4E48(v20, (uint64_t)v17, &qword_100348B28);
    v73 = v8;
    v74 = v7;
    v21 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v21(v11, v17, v7);
    v70 = v19;
    v71 = v17;
    v22 = *(_QWORD *)&v17[v19];
    v23 = (_QWORD *)*a3;
    v25 = sub_1001880AC((uint64_t)v11);
    v26 = v23[2];
    v27 = (v24 & 1) == 0;
    v28 = v26 + v27;
    if (__OFADD__(v26, v27))
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    v29 = v24;
    v30 = v23[3];
    v75 = v11;
    v65 = (void (*)(unint64_t, char *, uint64_t))v21;
    v68 = v22;
    if (v30 < v28)
    {
      sub_10018B6FC(v28, a2 & 1);
      v31 = sub_1001880AC((uint64_t)v11);
      if ((v29 & 1) != (v32 & 1))
      {
LABEL_31:
        result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v74);
        __break(1u);
        return result;
      }
      v25 = v31;
      v33 = a3;
      v34 = v73;
      v35 = v74;
      v36 = (_QWORD *)*a3;
      if ((v29 & 1) == 0)
        goto LABEL_13;
LABEL_9:
      v37 = *(_QWORD *)(v36[7] + 8 * v25);
      v38 = v37 + v68;
      if (__OFADD__(v37, v68))
      {
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      (*(void (**)(char *, uint64_t))(v34 + 8))(v75, v35);
      *(_QWORD *)(*(_QWORD *)(*v33 + 56) + 8 * v25) = v38;
      v39 = v18 - 1;
      if (v18 == 1)
        return swift_bridgeObjectRelease(v69);
LABEL_17:
      v43 = v69 + v72 + v66;
      while (1)
      {
        v44 = (uint64_t)v71;
        sub_1000E4E48(v43, (uint64_t)v71, &qword_100348B28);
        v45 = *(void (**)(char *, uint64_t, uint64_t))(v34 + 32);
        v46 = (uint64_t)v75;
        v45(v75, v44, v35);
        v47 = *(_QWORD *)(v44 + v70);
        v48 = v33;
        v49 = v46;
        v50 = (_QWORD *)*v48;
        v52 = sub_1001880AC(v46);
        v53 = v50[2];
        v54 = (v51 & 1) == 0;
        v55 = v53 + v54;
        if (__OFADD__(v53, v54))
          goto LABEL_28;
        v56 = v51;
        if (v50[3] < v55)
        {
          sub_10018B6FC(v55, 1);
          v57 = sub_1001880AC(v49);
          if ((v56 & 1) != (v58 & 1))
            goto LABEL_31;
          v52 = v57;
        }
        v33 = v48;
        v59 = (_QWORD *)*v48;
        if ((v56 & 1) != 0)
        {
          v60 = *(_QWORD *)(v59[7] + 8 * v52);
          v41 = __OFADD__(v60, v47);
          v61 = v60 + v47;
          v34 = v73;
          v35 = v74;
          if (v41)
            goto LABEL_30;
          (*(void (**)(char *, uint64_t))(v73 + 8))(v75, v74);
          *(_QWORD *)(*(_QWORD *)(*v33 + 56) + 8 * v52) = v61;
        }
        else
        {
          v59[(v52 >> 6) + 8] |= 1 << v52;
          v34 = v73;
          v62 = v74;
          v45((char *)(v59[6] + *(_QWORD *)(v73 + 72) * v52), (uint64_t)v75, v74);
          *(_QWORD *)(v59[7] + 8 * v52) = v47;
          v63 = v59[2];
          v41 = __OFADD__(v63, 1);
          v64 = v63 + 1;
          if (v41)
            goto LABEL_29;
          v35 = v62;
          v59[2] = v64;
        }
        v43 += v72;
        if (!--v39)
          return swift_bridgeObjectRelease(v69);
      }
    }
    v33 = a3;
    v34 = v73;
    v35 = v74;
    if ((a2 & 1) != 0)
    {
      v36 = (_QWORD *)*a3;
      if ((v24 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_1001912E4();
      v36 = (_QWORD *)*a3;
      if ((v29 & 1) != 0)
        goto LABEL_9;
    }
LABEL_13:
    v36[(v25 >> 6) + 8] |= 1 << v25;
    v65(v36[6] + *(_QWORD *)(v34 + 72) * v25, v75, v35);
    *(_QWORD *)(v36[7] + 8 * v25) = v68;
    v40 = v36[2];
    v41 = __OFADD__(v40, 1);
    v42 = v40 + 1;
    if (v41)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    v36[2] = v42;
    v39 = v18 - 1;
    if (v18 == 1)
      return swift_bridgeObjectRelease(v69);
    goto LABEL_17;
  }
  return result;
}

uint64_t sub_1001BB58C(id *a1)
{
  return sub_1001BAC68(a1) & 1;
}

uint64_t sub_1001BB5A4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[23] = v0;
  v2 = sub_100063D3C(&qword_100346BB0);
  v1[24] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100063D3C(&qword_100346C00);
  v1[25] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001BB624, v0, 0);
}

uint64_t sub_1001BB624()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t result;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  os_log_type_t v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  char v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 184) + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__cachedLocalIdentity;
  swift_beginAccess(v2, v0 + 96, 0, 0);
  v3 = *(_QWORD *)(v2 + 8);
  v4 = *(_QWORD *)(v2 + 24);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  sub_100120444(v3, v1);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  v5 = type metadata accessor for SESPeerIdentityData(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v1, 1, v5) == 1)
  {
    v6 = *(_QWORD *)(v0 + 192);
    v7 = &qword_100346BB0;
LABEL_5:
    result = sub_100096700(v6, v7);
    v15 = 0.0;
    goto LABEL_7;
  }
  v8 = *(_QWORD *)(v0 + 192);
  v9 = *(_QWORD *)(v0 + 200);
  sub_1001BBFC0(v8 + *(int *)(v5 + 32), v9);
  sub_100134580(v8);
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10);
  v13 = *(_QWORD *)(v0 + 200);
  if (v12 == 1)
  {
    v7 = &qword_100346C00;
    v6 = *(_QWORD *)(v0 + 200);
    goto LABEL_5;
  }
  v15 = Date.timeIntervalSinceNow.getter();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v13, v10);
LABEL_7:
  v16 = fabs(v15) / 3600.0;
  if ((~*(_QWORD *)&v16 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v16 <= -1.0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v16 >= 4294967300.0)
  {
LABEL_18:
    __break(1u);
    return result;
  }
  v17 = v16;
  v18 = *(_QWORD *)(v0 + 184);
  v19 = *(_BYTE *)(v18 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_preconditionsMet) & 1;
  v46 = *(_BYTE *)(v18 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_allViewsSynchronized) & 1;
  v20 = swift_retain(v18);
  v21 = Logger.logObject.getter(v20);
  v25 = static os_log_type_t.info.getter(v21, v22, v23, v24);
  v26 = os_log_type_enabled(v21, v25);
  v27 = *(_QWORD *)(v0 + 184);
  if (v26)
  {
    v28 = swift_slowAlloc(26, -1);
    *(_DWORD *)v28 = 67109888;
    *(_DWORD *)(v0 + 52) = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 52, v0 + 56, v28 + 4, v28 + 8);
    *(_WORD *)(v28 + 8) = 1024;
    *(_DWORD *)(v0 + 92) = v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 92, v0 + 96, v28 + 10, v28 + 14);
    *(_WORD *)(v28 + 14) = 1024;
    v29 = (_OWORD *)(v27 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__didRecoverTLK);
    v31 = *(_OWORD *)(v27 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__didRecoverTLK);
    v30 = *(_OWORD *)(v27 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__didRecoverTLK + 16);
    *(_WORD *)(v0 + 88) = *(_WORD *)(v27 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__didRecoverTLK + 32);
    *(_OWORD *)(v0 + 56) = v31;
    *(_OWORD *)(v0 + 72) = v30;
    *(_OWORD *)(v0 + 120) = *v29;
    *(_OWORD *)(v0 + 136) = *(_OWORD *)(v0 + 72);
    sub_10006F87C(v0 + 120);
    v32 = sub_10006F87C(v0 + 136);
    sub_10015348C(v32);
    v34 = v33;
    sub_10006F8A4(v0 + 120);
    sub_10006F8A4(v0 + 136);
    *(_DWORD *)(v0 + 208) = v34 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 212, v28 + 16, v28 + 20);
    swift_release(v27);
    *(_WORD *)(v28 + 20) = 1024;
    *(_DWORD *)(v0 + 212) = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 212, v0 + 216, v28 + 22, v28 + 26);
    _os_log_impl((void *)&_mh_execute_header, v21, v25, "Reporting state preconditions %{BOOL}d allViewsSynchronized %{BOOL}d serverRecovery %{BOOL}d identityAge %u", (uint8_t *)v28, 0x1Au);
    swift_slowDealloc(v28, -1, -1);
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 184));
  }
  v35 = *(_QWORD *)(v0 + 192);
  v36 = *(_QWORD *)(v0 + 200);
  v37 = *(_QWORD *)(v0 + 184);

  v38 = (_OWORD *)(v37 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__didRecoverTLK);
  v40 = *(_OWORD *)(v37 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__didRecoverTLK);
  v39 = *(_OWORD *)(v37 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__didRecoverTLK + 16);
  *(_WORD *)(v0 + 48) = *(_WORD *)(v37 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__didRecoverTLK + 32);
  *(_OWORD *)(v0 + 16) = v40;
  *(_OWORD *)(v0 + 32) = v39;
  *(_OWORD *)(v0 + 168) = *v38;
  *(_OWORD *)(v0 + 152) = *(_OWORD *)(v0 + 32);
  sub_10006F87C(v0 + 168);
  v41 = sub_10006F87C(v0 + 152);
  sub_10015348C(v41);
  v43 = v42;
  sub_10006F8A4(v0 + 168);
  sub_10006F8A4(v0 + 152);
  v44 = objc_opt_self(SESDAnalyticsLogger);
  v45 = 0x10000;
  if ((v43 & 1) == 0)
    v45 = 0;
  sub_10004A3B0(v44, v45 | (v17 << 32) | (v46 << 8) | v19);
  swift_task_dealloc(v36);
  swift_task_dealloc(v35);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001BBA58(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001BBA90 + 4 * byte_10028C7D8[a1]))(0x74616572436B6C74, 0xEA00000000006465);
}

uint64_t sub_1001BBA90()
{
  return 0x766F6365526B6C74;
}

uint64_t sub_1001BBAB0()
{
  return 0x65726168536B6C74;
}

uint64_t sub_1001BBACC()
{
  return 0x726F706D496B6C74;
}

uint64_t sub_1001BBAEC()
{
  return 0x6C6569467261656ELL;
}

uint64_t sub_1001BBB10()
{
  return 0x676E69646F636E65;
}

unint64_t sub_1001BBB4C()
{
  return 0xD000000000000010;
}

unint64_t sub_1001BBDAC()
{
  return 0xD00000000000001ALL;
}

void sub_1001BBDC8()
{
  JUMPOUT(0x1001BBDDCLL);
}

uint64_t sub_1001BBDE8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = sub_1001BBA58(*a1);
  v5 = v4;
  v6 = sub_1001BBA58(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int sub_1001BBE70()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6);
  v2 = sub_1001BBA58(v1);
  v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_1001BBED0(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_1001BBA58(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1001BBF10()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6);
  v2 = sub_1001BBA58(v1);
  v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_1001BBF6C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1001BC1AC(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_1001BBF98@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1001BBA58(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1001BBFC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100063D3C(&qword_100346C00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t getEnumTagSinglePayload for KeySyncEvent(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xDE)
    goto LABEL_17;
  if (a2 + 34 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 34) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 34;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 34;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 34;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x23;
  v8 = v6 - 35;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for KeySyncEvent(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 34 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 34) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xDE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xDD)
    return ((uint64_t (*)(void))((char *)&loc_1001BC0E4 + 4 * byte_10028C800[v4]))();
  *a1 = a2 + 34;
  return ((uint64_t (*)(void))((char *)sub_1001BC118 + 4 * byte_10028C7FB[v4]))();
}

uint64_t sub_1001BC118(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001BC120(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001BC128);
  return result;
}

uint64_t sub_1001BC134(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001BC13CLL);
  *(_BYTE *)result = a2 + 34;
  return result;
}

uint64_t sub_1001BC140(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001BC148(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KeySyncEvent()
{
  return &type metadata for KeySyncEvent;
}

unint64_t sub_1001BC168()
{
  unint64_t result;

  result = qword_100349630;
  if (!qword_100349630)
  {
    result = swift_getWitnessTable(&unk_10028C890, &type metadata for KeySyncEvent);
    atomic_store(result, (unint64_t *)&qword_100349630);
  }
  return result;
}

uint64_t sub_1001BC1AC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_100306058, a1, a2, &unk_1003447F0);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x23)
    return 35;
  else
    return v3;
}

void sub_1001BC1FC(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSString v8;
  NSString v9;
  unint64_t v10;
  Class isa;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  unsigned __int8 v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  NSString v20;
  NSString v21;
  unint64_t v22;
  Class v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  unsigned __int8 v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  NSString v32;
  NSString v33;
  unint64_t v34;
  Class v35;
  uint64_t v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  NSString v44;
  NSString v45;
  unint64_t v46;
  Class v47;
  uint64_t v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  NSString v56;
  NSString v57;
  unint64_t v58;
  Class v59;
  uint64_t v60;
  id v61;
  id v62;
  id v63;
  unsigned __int8 v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  NSString v68;
  NSString v69;
  unint64_t v70;
  Class v71;
  uint64_t v72;
  id v73;
  id v74;
  uint64_t v75;
  id v76;
  _QWORD *v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  NSString v82;
  NSString v83;
  unint64_t v84;
  Class v85;
  uint64_t v86;
  id v87;
  id v88;
  uint64_t v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  NSString v96;
  NSString v97;
  unint64_t v98;
  Class v99;
  uint64_t v100;
  id v101;
  id v102;
  id v103;
  unsigned __int8 v104;
  id v105;
  uint64_t v106;
  uint64_t v107;
  id v109;

  v4 = a1;
  if (a3 >> 60 != 15)
  {
    v5 = *(_QWORD *)(v3 + 56);
    if (v5 >> 60 == 15)
    {
      v6 = *(_QWORD *)(v3 + 48);
      *(_QWORD *)(v3 + 48) = a2;
      *(_QWORD *)(v3 + 56) = a3;
      sub_100063C8C(a2, a3);
      v7 = v6;
      v4 = a1;
      sub_10006B9B4(v7, v5);
    }
  }
  v8 = String._bridgeToObjectiveC()();
  v9 = String._bridgeToObjectiveC()();
  v10 = *(_QWORD *)(v3 + 56);
  if (v10 >> 60 == 15)
  {
    isa = 0;
  }
  else
  {
    v12 = *(_QWORD *)(v3 + 48);
    sub_100063C8C(v12, *(_QWORD *)(v3 + 56));
    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10006B9B4(v12, v10);
  }
  v109 = 0;
  v13 = objc_msgSend(v4, "BOOLValueForSetting:manufacturer:brand:uuid:error:", 2, v8, v9, isa, &v109);

  v14 = v109;
  if (v13)
  {
    v15 = v109;
    v16 = objc_msgSend(v13, "BOOLValue");

    *(_BYTE *)(v3 + 64) = v16;
  }
  else
  {
    v17 = v109;
    v18 = _convertNSErrorToError(_:)(v14);

    swift_willThrow(v19);
    swift_errorRelease(v18);
  }
  v20 = String._bridgeToObjectiveC()();
  v21 = String._bridgeToObjectiveC()();
  v22 = *(_QWORD *)(v3 + 56);
  if (v22 >> 60 == 15)
  {
    v23 = 0;
  }
  else
  {
    v24 = *(_QWORD *)(v3 + 48);
    sub_100063C8C(v24, *(_QWORD *)(v3 + 56));
    v23 = Data._bridgeToObjectiveC()().super.isa;
    sub_10006B9B4(v24, v22);
  }
  v109 = 0;
  v25 = objc_msgSend(v4, "BOOLValueForSetting:manufacturer:brand:uuid:error:", 4, v20, v21, v23, &v109);

  v26 = v109;
  if (v25)
  {
    v27 = v109;
    v28 = objc_msgSend(v25, "BOOLValue");

    *(_BYTE *)(v3 + 65) = v28;
  }
  else
  {
    v29 = v109;
    v30 = _convertNSErrorToError(_:)(v26);

    swift_willThrow(v31);
    swift_errorRelease(v30);
  }
  v32 = String._bridgeToObjectiveC()();
  v33 = String._bridgeToObjectiveC()();
  v34 = *(_QWORD *)(v3 + 56);
  if (v34 >> 60 == 15)
  {
    v35 = 0;
  }
  else
  {
    v36 = *(_QWORD *)(v3 + 48);
    sub_100063C8C(v36, *(_QWORD *)(v3 + 56));
    v35 = Data._bridgeToObjectiveC()().super.isa;
    sub_10006B9B4(v36, v34);
  }
  v109 = 0;
  v37 = objc_msgSend(a1, "intValueForSetting:manufacturer:brand:uuid:error:", 1, v32, v33, v35, &v109);

  v38 = v109;
  if (v37)
  {
    v39 = v109;
    v40 = objc_msgSend(v37, "integerValue");

    *(_QWORD *)(v3 + 96) = v40;
  }
  else
  {
    v41 = v109;
    v42 = _convertNSErrorToError(_:)(v38);

    swift_willThrow(v43);
    swift_errorRelease(v42);
  }
  v44 = String._bridgeToObjectiveC()();
  v45 = String._bridgeToObjectiveC()();
  v46 = *(_QWORD *)(v3 + 56);
  if (v46 >> 60 == 15)
  {
    v47 = 0;
  }
  else
  {
    v48 = *(_QWORD *)(v3 + 48);
    sub_100063C8C(v48, *(_QWORD *)(v3 + 56));
    v47 = Data._bridgeToObjectiveC()().super.isa;
    sub_10006B9B4(v48, v46);
  }
  v109 = 0;
  v49 = objc_msgSend(a1, "intValueForSetting:manufacturer:brand:uuid:error:", 2, v44, v45, v47, &v109);

  v50 = v109;
  if (v49)
  {
    v51 = v109;
    v52 = objc_msgSend(v49, "integerValue");

    *(_QWORD *)(v3 + 104) = v52;
  }
  else
  {
    v53 = v109;
    v54 = _convertNSErrorToError(_:)(v50);

    swift_willThrow(v55);
    swift_errorRelease(v54);
  }
  v56 = String._bridgeToObjectiveC()();
  v57 = String._bridgeToObjectiveC()();
  v58 = *(_QWORD *)(v3 + 56);
  if (v58 >> 60 == 15)
  {
    v59 = 0;
  }
  else
  {
    v60 = *(_QWORD *)(v3 + 48);
    sub_100063C8C(v60, *(_QWORD *)(v3 + 56));
    v59 = Data._bridgeToObjectiveC()().super.isa;
    sub_10006B9B4(v60, v58);
  }
  v109 = 0;
  v61 = objc_msgSend(a1, "BOOLValueForSetting:manufacturer:brand:uuid:error:", 6, v56, v57, v59, &v109);

  v62 = v109;
  if (v61)
  {
    v63 = v109;
    v64 = objc_msgSend(v61, "BOOLValue");

    *(_BYTE *)(v3 + 80) = v64;
  }
  else
  {
    v65 = v109;
    v66 = _convertNSErrorToError(_:)(v62);

    swift_willThrow(v67);
    swift_errorRelease(v66);
  }
  v68 = String._bridgeToObjectiveC()();
  v69 = String._bridgeToObjectiveC()();
  v70 = *(_QWORD *)(v3 + 56);
  if (v70 >> 60 == 15)
  {
    v71 = 0;
  }
  else
  {
    v72 = *(_QWORD *)(v3 + 48);
    sub_100063C8C(v72, *(_QWORD *)(v3 + 56));
    v71 = Data._bridgeToObjectiveC()().super.isa;
    sub_10006B9B4(v72, v70);
  }
  v109 = 0;
  v73 = objc_msgSend(a1, "arrayValueForSetting:manufacturer:brand:uuid:error:", 0, v68, v69, v71, &v109);

  v74 = v109;
  if (v73)
  {
    v75 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v73, (char *)&type metadata for Any + 8);
    v76 = v74;

    v77 = sub_1000C5AAC(v75);
    swift_bridgeObjectRelease(v75);
    if (v77)
    {
      v78 = *(_QWORD *)(v3 + 72);
      *(_QWORD *)(v3 + 72) = v77;
      swift_bridgeObjectRelease(v78);
    }
  }
  else
  {
    v79 = v109;
    v80 = _convertNSErrorToError(_:)(v74);

    swift_willThrow(v81);
    swift_errorRelease(v80);
  }
  v82 = String._bridgeToObjectiveC()();
  v83 = String._bridgeToObjectiveC()();
  v84 = *(_QWORD *)(v3 + 56);
  if (v84 >> 60 == 15)
  {
    v85 = 0;
  }
  else
  {
    v86 = *(_QWORD *)(v3 + 48);
    sub_100063C8C(v86, *(_QWORD *)(v3 + 56));
    v85 = Data._bridgeToObjectiveC()().super.isa;
    sub_10006B9B4(v86, v84);
  }
  v109 = 0;
  v87 = objc_msgSend(a1, "dictValueForSetting:manufacturer:brand:uuid:error:", 0, v82, v83, v85, &v109);

  v88 = v109;
  if (v87)
  {
    v89 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v87, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
    v90 = v88;

    v91 = sub_1001BCAD0(v89);
    swift_bridgeObjectRelease(v89);
    if (v91)
    {
      v92 = *(_QWORD *)(v3 + 88);
      *(_QWORD *)(v3 + 88) = v91;
      swift_bridgeObjectRelease(v92);
    }
  }
  else
  {
    v93 = v109;
    v94 = _convertNSErrorToError(_:)(v88);

    swift_willThrow(v95);
    swift_errorRelease(v94);
  }
  v96 = String._bridgeToObjectiveC()();
  v97 = String._bridgeToObjectiveC()();
  v98 = *(_QWORD *)(v3 + 56);
  if (v98 >> 60 == 15)
  {
    v99 = 0;
  }
  else
  {
    v100 = *(_QWORD *)(v3 + 48);
    sub_100063C8C(v100, *(_QWORD *)(v3 + 56));
    v99 = Data._bridgeToObjectiveC()().super.isa;
    sub_10006B9B4(v100, v98);
  }
  v109 = 0;
  v101 = objc_msgSend(a1, "BOOLValueForSetting:manufacturer:brand:uuid:error:", 7, v96, v97, v99, &v109);

  v102 = v109;
  if (v101)
  {
    v103 = v109;
    v104 = objc_msgSend(v101, "BOOLValue");

    *(_BYTE *)(v3 + 112) = v104;
  }
  else
  {
    v105 = v109;
    v106 = _convertNSErrorToError(_:)(v102);

    swift_willThrow(v107);
    swift_errorRelease(v106);
  }
}

uint64_t sub_1001BCAD0(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  _BYTE v30[40];
  _OWORD v31[2];
  _OWORD v32[2];
  uint64_t v33;
  _OWORD v34[2];
  _OWORD v35[2];
  uint64_t v36;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_100063D3C(&qword_100349A00);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v27 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v26 = (unint64_t)(63 - v4) >> 6;
  v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  result = swift_retain(v3);
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v11 = (v6 - 1) & v6;
      v12 = __clz(__rbit64(v6)) | (v9 << 6);
      v13 = v9;
      goto LABEL_28;
    }
    v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    if (v14 >= v26)
      goto LABEL_42;
    v15 = *(_QWORD *)(v27 + 8 * v14);
    v13 = v9 + 1;
    if (!v15)
    {
      v13 = v9 + 2;
      if (v9 + 2 >= v26)
        goto LABEL_42;
      v15 = *(_QWORD *)(v27 + 8 * v13);
      if (!v15)
      {
        v13 = v9 + 3;
        if (v9 + 3 >= v26)
          goto LABEL_42;
        v15 = *(_QWORD *)(v27 + 8 * v13);
        if (!v15)
        {
          v13 = v9 + 4;
          if (v9 + 4 >= v26)
            goto LABEL_42;
          v15 = *(_QWORD *)(v27 + 8 * v13);
          if (!v15)
            break;
        }
      }
    }
LABEL_27:
    v11 = (v15 - 1) & v15;
    v12 = __clz(__rbit64(v15)) + (v13 << 6);
LABEL_28:
    sub_1001988C4(*(_QWORD *)(a1 + 48) + 40 * v12, (uint64_t)v34);
    sub_100096CB0(*(_QWORD *)(a1 + 56) + 32 * v12, (uint64_t)v35 + 8);
    v32[0] = v35[0];
    v32[1] = v35[1];
    v33 = v36;
    v31[0] = v34[0];
    v31[1] = v34[1];
    sub_1001988C4((uint64_t)v31, (uint64_t)v30);
    if (!swift_dynamicCast(&v28, v30, &type metadata for AnyHashable, &type metadata for UInt16, 6))
    {
      LOWORD(v28) = 0;
      BYTE2(v28) = 1;
      sub_1001BD110((uint64_t)v31);
      goto LABEL_41;
    }
    v17 = (unsigned __int16)v28;
    sub_100096CB0((uint64_t)v32 + 8, (uint64_t)v30);
    sub_1001BD110((uint64_t)v31);
    if ((swift_dynamicCast(&v28, v30, (char *)&type metadata for Any + 8, &type metadata for UInt, 6) & 1) == 0)
    {
      v28 = 0;
      v29 = 1;
LABEL_41:
      swift_release(v3);
      sub_10007EF58(a1);
      swift_release(v3);
      return 0;
    }
    v18 = v28;
    result = static Hasher._hash(seed:bytes:count:)(v3[5], v17, 2);
    v19 = -1 << *((_BYTE *)v3 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)&v7[8 * (v20 >> 6)]) != 0)
    {
      v10 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)&v7[8 * (v20 >> 6)])) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)&v7[8 * v21];
      }
      while (v25 == -1);
      v10 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)&v7[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v10;
    *(_WORD *)(v3[6] + 2 * v10) = v17;
    *(_QWORD *)(v3[7] + 8 * v10) = v18;
    ++v3[2];
    v9 = v13;
    v6 = v11;
  }
  v16 = v9 + 5;
  if (v9 + 5 >= v26)
  {
LABEL_42:
    swift_release(v3);
    sub_10007EF58(a1);
    return (uint64_t)v3;
  }
  v15 = *(_QWORD *)(v27 + 8 * v16);
  if (v15)
  {
    v13 = v9 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v13 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v13 >= v26)
      goto LABEL_42;
    v15 = *(_QWORD *)(v27 + 8 * v13);
    ++v16;
    if (v15)
      goto LABEL_27;
  }
LABEL_45:
  __break(1u);
  return result;
}

uint64_t sub_1001BCEC0()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  sub_10006B9B4(v0[6], v0[7]);
  swift_bridgeObjectRelease(v0[9]);
  swift_bridgeObjectRelease(v0[11]);
  return swift_deallocClassInstance(v0, 113, 7);
}

uint64_t sub_1001BCF04()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced10AlishaPeer_configuration));
}

uint64_t sub_1001BCF14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);

  v1 = v0 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
  v2 = type metadata accessor for UUID(0);
  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v3(v1, v2);
  v3(v0 + OBJC_IVAR____TtC10seserviced4Peer_connectionIdentifier, v2);
  sub_10006B9B4(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier), *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier + 8));
  sub_10006B9B4(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier), *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8));
  sub_10006B9B4(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced4Peer_buffer), *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced4Peer_buffer + 8));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced10AlishaPeer_configuration));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1001BCFE4()
{
  return type metadata accessor for AlishaPeer(0);
}

uint64_t type metadata accessor for AlishaPeer(uint64_t a1)
{
  uint64_t result;

  result = qword_100349660;
  if (!qword_100349660)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AlishaPeer);
  return result;
}

uint64_t sub_1001BD028(uint64_t a1)
{
  char *v2;

  v2 = (char *)&value witness table for Builtin.NativeObject + 64;
  return swift_updateClassMetadata2(a1, 256, 1, &v2, a1 + 408);
}

uint64_t type metadata accessor for AlishaPeer.Configuration()
{
  return objc_opt_self(_TtCC10seserviced10AlishaPeer13Configuration);
}

uint64_t sub_1001BD08C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, void *a7)
{
  uint64_t v7;

  *(_WORD *)(v7 + 64) = 0;
  *(_QWORD *)(v7 + 72) = _swiftEmptyArrayStorage;
  *(_BYTE *)(v7 + 80) = 0;
  *(_QWORD *)(v7 + 88) = &_swiftEmptyDictionarySingleton;
  *(_OWORD *)(v7 + 96) = xmmword_10028C900;
  *(_BYTE *)(v7 + 112) = 0;
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  *(_QWORD *)(v7 + 32) = a3;
  *(_QWORD *)(v7 + 40) = a4;
  *(_QWORD *)(v7 + 48) = a5;
  *(_QWORD *)(v7 + 56) = a6;
  sub_10006BA34(a5, a6);
  sub_10006B9B4(0, 0xF000000000000000);
  sub_1001BC1FC(a7, 0, 0xF000000000000000);
  return v7;
}

uint64_t sub_1001BD110(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100063D3C(&qword_100349A08);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1001BD150(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x8000000000000000) == 0)
    __asm { BR              X9 }
  __break(1u);
  JUMPOUT(0x1001BD298);
}

void sub_1001BD2CC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

uint64_t sub_1001BD324(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v28;

  v4 = BYTE6(v28);
  if (BYTE6(v28))
  {
    *(_QWORD *)(v3 - 104) = v2;
    v5 = BYTE6(v28);
    v6 = sub_100192924(0, BYTE6(v28), 0);
    v2 = *(_QWORD *)(v3 - 104);
    if ((_DWORD)v1)
    {
      if ((_DWORD)v1 == 1)
        v7 = (int)a1;
      else
        v7 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v7 = 0;
    }
    *(_QWORD *)(v3 - 136) = v28 & 0x3FFFFFFFFFFFFFFFLL;
    *(_QWORD *)(v3 - 128) = v1;
    while (v5)
    {
      if ((_DWORD)v1)
      {
        if ((_DWORD)v1 == 1)
        {
          if (v7 < (int)a1 || v7 >= a1 >> 32)
            goto LABEL_29;
          v8 = __DataStorage._bytes.getter(v6);
          if (!v8)
          {
            __break(1u);
LABEL_36:
            __break(1u);
          }
          v11 = v8;
          v12 = __DataStorage._offset.getter(v8, v9, v10);
          v13 = v7 - v12;
          if (__OFSUB__(v7, v12))
            goto LABEL_32;
        }
        else
        {
          if (v7 < *(_QWORD *)(a1 + 16))
            goto LABEL_31;
          if (v7 >= *(_QWORD *)(a1 + 24))
            goto LABEL_33;
          v15 = __DataStorage._bytes.getter(v6);
          if (!v15)
            goto LABEL_36;
          v11 = v15;
          v18 = __DataStorage._offset.getter(v15, v16, v17);
          v13 = v7 - v18;
          if (__OFSUB__(v7, v18))
            goto LABEL_34;
        }
        v14 = *(_BYTE *)(v11 + v13);
      }
      else
      {
        if (v7 >= BYTE6(v28))
          goto LABEL_30;
        *(_QWORD *)(v3 - 118) = a1;
        *(_WORD *)(v3 - 110) = v28;
        *(_BYTE *)(v3 - 108) = BYTE2(v28);
        *(_BYTE *)(v3 - 107) = BYTE3(v28);
        *(_BYTE *)(v3 - 106) = BYTE4(v28);
        *(_BYTE *)(v3 - 105) = BYTE5(v28);
        v14 = *(_BYTE *)(v3 - 118 + v7);
      }
      v19 = sub_100063D3C((uint64_t *)&unk_1003477E0);
      v20 = swift_allocObject(v19, 72, 7);
      *(_OWORD *)(v20 + 16) = xmmword_1002888E0;
      *(_QWORD *)(v20 + 56) = &type metadata for UInt8;
      *(_QWORD *)(v20 + 64) = &protocol witness table for UInt8;
      *(_BYTE *)(v20 + 32) = v14;
      v6 = String.init(format:_:)(0x586868323025, 0xE600000000000000, v20);
      v21 = v6;
      v23 = v22;
      *(_QWORD *)(v3 - 104) = v2;
      v25 = *(_QWORD *)(v2 + 16);
      v24 = *(_QWORD *)(v2 + 24);
      if (v25 >= v24 >> 1)
      {
        v6 = sub_100192924(v24 > 1, v25 + 1, 1);
        v2 = *(_QWORD *)(v3 - 104);
      }
      *(_QWORD *)(v2 + 16) = v25 + 1;
      v26 = v2 + 16 * v25;
      *(_QWORD *)(v26 + 32) = v21;
      *(_QWORD *)(v26 + 40) = v23;
      ++v7;
      --v5;
      --v4;
      v1 = *(_QWORD *)(v3 - 128);
      if (!v4)
        return v2;
    }
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    __break(1u);
    JUMPOUT(0x1001BD63CLL);
  }
  return v2;
}

_QWORD *sub_1001BD664(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((unint64_t)a1 >> 62)
    goto LABEL_14;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    result = _swiftEmptyArrayStorage;
    if (!v2)
      break;
    result = (_QWORD *)specialized ContiguousArray.reserveCapacity(_:)(v2);
    if (v2 < 0)
    {
      __break(1u);
      return result;
    }
    v4 = 0;
    while (v2 != v4)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, a1);
      else
        v5 = *(id *)(a1 + 8 * v4 + 32);
      v6 = v5;
      ++v4;
      v7 = objc_msgSend(v5, "dumpState");

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v8);
      v9 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v9);
      v10 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, v7);
      specialized ContiguousArray._endMutation()(v10);
      if (v2 == v4)
        return _swiftEmptyArrayStorage;
    }
    __break(1u);
LABEL_14:
    if (a1 < 0)
      v11 = a1;
    else
      v11 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v11);
    swift_bridgeObjectRelease(a1);
  }
  return result;
}

uint64_t sub_1001BD7A4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v26;
  uint64_t v27;

  v1 = v0;
  v2 = sub_100063D3C(&qword_100347800);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100063D3C(&qword_100346C00);
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100063D3C(&qword_100349A10);
  v11 = swift_allocObject(v10, 224, 7);
  *(_OWORD *)(v11 + 16) = xmmword_100288AC0;
  *(_QWORD *)(v11 + 56) = &type metadata for String;
  strcpy((char *)(v11 + 32), "peerIdentifier");
  *(_BYTE *)(v11 + 47) = -18;
  sub_1001BD2CC(*v0, v0[1]);
  v13 = v12;
  *(_QWORD *)&v26 = v12;
  v14 = sub_100063D3C((uint64_t *)&unk_100346060);
  v15 = sub_10006B86C();
  v16 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v14, v15);
  v18 = v17;
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(v11 + 64) = v16;
  *(_QWORD *)(v11 + 72) = v18;
  *(_QWORD *)(v11 + 120) = &type metadata for String;
  *(_QWORD *)(v11 + 88) = &type metadata for String;
  strcpy((char *)(v11 + 96), "creationTime");
  *(_BYTE *)(v11 + 109) = 0;
  *(_WORD *)(v11 + 110) = -5120;
  v19 = type metadata accessor for SESPeerIdentityData(0);
  sub_1000E4E48((uint64_t)v1 + *(int *)(v19 + 32), (uint64_t)v9, &qword_100346C00);
  v20 = type metadata accessor for Date(0);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v9, 1, v20) == 1)
  {
    sub_100096700((uint64_t)v9, &qword_100346C00);
    *(_QWORD *)(v11 + 152) = &type metadata for String;
    *(_QWORD *)(v11 + 128) = 0x3E6C696E3CLL;
    *(_QWORD *)(v11 + 136) = 0xE500000000000000;
  }
  else
  {
    v27 = v20;
    v22 = sub_1000960AC(&v26);
    (*(void (**)(_QWORD *, char *, uint64_t))(v21 + 32))(v22, v9, v20);
    sub_10006C2B4(&v26, (_OWORD *)(v11 + 128));
  }
  *(_QWORD *)(v11 + 184) = &type metadata for String;
  *(_QWORD *)(v11 + 160) = 0xD000000000000010;
  *(_QWORD *)(v11 + 168) = 0x80000001002BDA80;
  sub_1000E4E48((uint64_t)v1 + *(int *)(v19 + 36), (uint64_t)v5, &qword_100347800);
  v23 = type metadata accessor for CreationMetadata(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 48))(v5, 1, v23) == 1)
  {
    sub_100096700((uint64_t)v5, &qword_100347800);
    *(_QWORD *)(v11 + 216) = &type metadata for String;
    *(_QWORD *)(v11 + 192) = 0x3E6C696E3CLL;
    *(_QWORD *)(v11 + 200) = 0xE500000000000000;
  }
  else
  {
    v24 = sub_1001BEC18();
    v27 = sub_10006C25C(0, &qword_100346D78, NSDictionary_ptr);
    *(_QWORD *)&v26 = v24;
    sub_1001247E8((uint64_t)v5, type metadata accessor for CreationMetadata);
    sub_10006C2B4(&v26, (_OWORD *)(v11 + 192));
  }
  sub_10006C25C(0, &qword_100346D78, NSDictionary_ptr);
  return NSDictionary.init(dictionaryLiteral:)(v11);
}

uint64_t sub_1001BDAC8(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  Swift::String v18;
  Swift::String v19;
  void *object;
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  Swift::String v26;

  v26._countAndFlagsBits = 8315;
  v26._object = (void *)0xE200000000000000;
  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    v25 = _swiftEmptyArrayStorage;
    sub_100192924(0, v1, 0);
    v4 = a1 + 32;
    v2 = _swiftEmptyArrayStorage;
    do
    {
      sub_1000E504C(v4, (uint64_t)v22);
      v5 = v23;
      v6 = v24;
      sub_10006BA78(v22, v23);
      v7 = dispatch thunk of CustomStringConvertible.description.getter(v5, v6);
      v9 = v8;
      sub_10006BA9C(v22);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_100192924(0, v2[2] + 1, 1);
        v2 = v25;
      }
      v11 = v2[2];
      v10 = v2[3];
      if (v11 >= v10 >> 1)
      {
        sub_100192924(v10 > 1, v11 + 1, 1);
        v2 = v25;
      }
      v2[2] = v11 + 1;
      v12 = &v2[2 * v11];
      v12[4] = v7;
      v12[5] = v9;
      v4 += 40;
      --v1;
    }
    while (v1);
  }
  v22[0] = v2;
  v13 = sub_100063D3C((uint64_t *)&unk_100346060);
  v14 = sub_10006B86C();
  v15 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v13, v14);
  v17 = v16;
  swift_bridgeObjectRelease(v2);
  v18._countAndFlagsBits = v15;
  v18._object = v17;
  String.append(_:)(v18);
  swift_bridgeObjectRelease(v17);
  v19._countAndFlagsBits = 32032;
  v19._object = (void *)0xE200000000000000;
  String.append(_:)(v19);
  object = v26._object;
  String.append(_:)(v26);
  return swift_bridgeObjectRelease(object);
}

uint64_t SESViewInformation.description.getter()
{
  void *v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  Swift::String v8;
  Swift::String v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  void *object;
  Swift::String v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  void *v20;
  _QWORD v22[2];

  v1 = v0;
  _StringGuts.grow(_:)(45);
  swift_bridgeObjectRelease(0xE000000000000000);
  strcpy((char *)v22, "Current TLK ");
  HIWORD(v22[1]) = -5120;
  v2 = objc_msgSend(v0, "currentTLK");
  if (v2)
  {
    v3 = v2;
    v4 = objc_msgSend(v2, "description");

    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v7 = v6;

  }
  else
  {
    v7 = (void *)0xE500000000000000;
    v5 = 0x3E6C696E3CLL;
  }
  v8._countAndFlagsBits = v5;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(v7);
  v9._countAndFlagsBits = 0x616853204B4C540ALL;
  v9._object = (void *)0xEC00000020736572;
  String.append(_:)(v9);
  v10 = objc_msgSend(v1, "tlkShares");
  v11 = sub_10006C25C(0, &qword_100346BB8, SESTLKShare_ptr);
  v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v10, v11);

  v13._countAndFlagsBits = Array.description.getter(v12, v11);
  object = v13._object;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(object);
  v15._countAndFlagsBits = 0x756F69766572500ALL;
  v15._object = (void *)0xEF20734B4C542073;
  String.append(_:)(v15);
  v16 = objc_msgSend(v1, "previousTLKs");
  v17 = sub_10006C25C(0, &qword_100346C40, SESTLKRecord_ptr);
  v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v16, v17);

  v19._countAndFlagsBits = Array.description.getter(v18, v17);
  v20 = v19._object;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(v18);
  swift_bridgeObjectRelease(v20);
  return v22[0];
}

uint64_t sub_1001BDEDC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  __int128 v20;
  uint64_t v21;

  v1 = sub_100063D3C(&qword_100349A10);
  v2 = swift_allocObject(v1, 288, 7);
  *(_OWORD *)(v2 + 16) = xmmword_100288AB0;
  *(_QWORD *)(v2 + 56) = &type metadata for String;
  *(_QWORD *)(v2 + 32) = 2003134838;
  *(_QWORD *)(v2 + 40) = 0xE400000000000000;
  v3 = objc_msgSend(v0, "viewName");
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  *(_QWORD *)(v2 + 64) = v4;
  *(_QWORD *)(v2 + 72) = v6;
  *(_QWORD *)(v2 + 120) = &type metadata for String;
  *(_QWORD *)(v2 + 88) = &type metadata for String;
  *(_QWORD *)(v2 + 96) = 0x54746E6572727563;
  *(_QWORD *)(v2 + 104) = 0xEA00000000004B4CLL;
  v7 = objc_msgSend(v0, "currentTLK");
  if (v7)
  {
    v8 = v7;
    v9 = objc_msgSend(v7, "dumpState");

    v21 = sub_10006C25C(0, &qword_100346D78, NSDictionary_ptr);
    *(_QWORD *)&v20 = v9;
    sub_10006C2B4(&v20, (_OWORD *)(v2 + 128));
  }
  else
  {
    *(_QWORD *)(v2 + 152) = &type metadata for String;
    *(_QWORD *)(v2 + 128) = 0x3E6C696E3CLL;
    *(_QWORD *)(v2 + 136) = 0xE500000000000000;
  }
  *(_QWORD *)(v2 + 184) = &type metadata for String;
  *(_QWORD *)(v2 + 160) = 0x72616853736B6C74;
  *(_QWORD *)(v2 + 168) = 0xEA00000000007365;
  v10 = objc_msgSend(v0, "tlkShares");
  v11 = sub_10006C25C(0, &qword_100346BB8, SESTLKShare_ptr);
  v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v10, v11);

  v13 = sub_1001BD664(v12);
  swift_bridgeObjectRelease(v12);
  v14 = sub_100063D3C(&qword_100349A18);
  *(_QWORD *)(v2 + 192) = v13;
  *(_QWORD *)(v2 + 248) = &type metadata for String;
  *(_QWORD *)(v2 + 216) = v14;
  strcpy((char *)(v2 + 224), "previousTLKS");
  *(_BYTE *)(v2 + 237) = 0;
  *(_WORD *)(v2 + 238) = -5120;
  v15 = objc_msgSend(v0, "previousTLKs");
  v16 = sub_10006C25C(0, &qword_100346C40, SESTLKRecord_ptr);
  v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v15, v16);

  v18 = sub_1001BD664(v17);
  swift_bridgeObjectRelease(v17);
  *(_QWORD *)(v2 + 280) = v14;
  *(_QWORD *)(v2 + 256) = v18;
  sub_10006C25C(0, &qword_100346D78, NSDictionary_ptr);
  return NSDictionary.init(dictionaryLiteral:)(v2);
}

unint64_t SESPeerIdentity.description.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;

  v1 = v0;
  v2 = sub_100063D3C(&qword_100346BB0);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SESPeerIdentityData(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PropertyListDecoder(0);
  v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  v16 = PropertyListDecoder.init()(v12, v13, v14, v15);
  v17 = objc_msgSend(v1, "peerData");
  v18 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v20 = v19;

  v21 = sub_1000639EC(&qword_100346BC0, type metadata accessor for SESPeerIdentityData, (uint64_t)&unk_10028AE3C);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v6, v18, v20, v6, v21);
  sub_100063CD0(v18, v20);
  swift_release(v16);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
  sub_1001C06A8((uint64_t)v5, (uint64_t)v10);
  v22 = sub_1001BE4B4();
  sub_1001247E8((uint64_t)v10, type metadata accessor for SESPeerIdentityData);
  return v22;
}

unint64_t sub_1001BE4B4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  Swift::String v24;
  _QWORD v26[2];
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v1 = v0;
  v2 = sub_100063D3C(&qword_100347800);
  __chkstk_darwin(v2, v3);
  v5 = (char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = 0;
  v30 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease(v30);
  v29 = 0xD000000000000019;
  v30 = 0x80000001002BFE70;
  v6 = *v0;
  v7 = v1[1];
  sub_100063C8C(*v1, v7);
  sub_1001BD150(4, v6, v7);
  v8 = v27;
  v9 = v28;
  sub_1001BD2CC(v27, v28);
  v11 = v10;
  v26[1] = v10;
  v12 = sub_100063D3C((uint64_t *)&unk_100346060);
  v13 = sub_10006B86C();
  v14 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v12, v13);
  v16 = v15;
  swift_bridgeObjectRelease(v11);
  sub_100063CD0(v8, v9);
  v17._countAndFlagsBits = v14;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease(v16);
  v18._countAndFlagsBits = 32;
  v18._object = (void *)0xE100000000000000;
  String.append(_:)(v18);
  v19 = type metadata accessor for SESPeerIdentityData(0);
  sub_1000E4E48((uint64_t)v1 + *(int *)(v19 + 36), (uint64_t)v5, &qword_100347800);
  v20 = type metadata accessor for CreationMetadata(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 48))(v5, 1, v20) == 1)
  {
    sub_100096700((uint64_t)v5, &qword_100347800);
    v21 = (void *)0xE500000000000000;
    v22 = 0x3E6C696E3CLL;
  }
  else
  {
    v22 = sub_1001BE9DC();
    v21 = v23;
    sub_1001247E8((uint64_t)v5, type metadata accessor for CreationMetadata);
  }
  v24._countAndFlagsBits = v22;
  v24._object = v21;
  String.append(_:)(v24);
  swift_bridgeObjectRelease(v21);
  return v29;
}

uint64_t sub_1001BE6F0()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v1 = v0;
  v2 = sub_100063D3C(&qword_100346BB0);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SESPeerIdentityData(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PropertyListDecoder(0);
  v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  v16 = PropertyListDecoder.init()(v12, v13, v14, v15);
  v17 = objc_msgSend(v1, "peerData");
  v18 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v20 = v19;

  v21 = sub_1000639EC(&qword_100346BC0, type metadata accessor for SESPeerIdentityData, (uint64_t)&unk_10028AE3C);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v6, v18, v20, v6, v21);
  sub_100063CD0(v18, v20);
  swift_release(v16);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
  sub_1001C06A8((uint64_t)v5, (uint64_t)v10);
  v22 = sub_1001BD7A4();
  sub_1001247E8((uint64_t)v10, type metadata accessor for SESPeerIdentityData);
  return v22;
}

uint64_t sub_1001BE9DC()
{
  uint64_t *v0;
  int *v1;
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  void *v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  void *object;
  Swift::String v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  Swift::String v31;

  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease(0xE000000000000000);
  v1 = (int *)type metadata accessor for CreationMetadata(0);
  v2 = (uint64_t *)((char *)v0 + v1[7]);
  v3 = *v2;
  v4 = (void *)v2[1];
  swift_bridgeObjectRetain(v4);
  v5._countAndFlagsBits = v3;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(v4);
  v6._countAndFlagsBits = 32;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  v7 = (uint64_t *)((char *)v0 + v1[6]);
  v8 = *v7;
  v9 = (void *)v7[1];
  swift_bridgeObjectRetain(v9);
  v10._countAndFlagsBits = v8;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v9);
  v11._countAndFlagsBits = 32;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  v12 = *v0;
  v13 = (void *)v0[1];
  swift_bridgeObjectRetain(v13);
  v14._countAndFlagsBits = v12;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(v13);
  v15._countAndFlagsBits = 544108320;
  v15._object = (void *)0xE400000000000000;
  String.append(_:)(v15);
  v16 = type metadata accessor for Date(0);
  v17 = sub_1000639EC(&qword_100346C30, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v16, v17);
  object = v18._object;
  String.append(_:)(v18);
  swift_bridgeObjectRelease(object);
  v20._countAndFlagsBits = 0x746E756F6363410ALL;
  v20._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v20);
  v21 = (uint64_t *)((char *)v0 + v1[8]);
  v22 = v21[1];
  if (v22)
  {
    v23 = *v21;
    v24 = (void *)v21[1];
  }
  else
  {
    v24 = (void *)0xE500000000000000;
    v23 = 0x3E6C696E3CLL;
  }
  swift_bridgeObjectRetain(v22);
  v25._countAndFlagsBits = v23;
  v25._object = v24;
  String.append(_:)(v25);
  swift_bridgeObjectRelease(v24);
  v26._countAndFlagsBits = 0x20746C6120;
  v26._object = (void *)0xE500000000000000;
  String.append(_:)(v26);
  v27 = (uint64_t *)((char *)v0 + v1[9]);
  v28 = v27[1];
  if (v28)
    v29 = *v27;
  else
    v29 = 0x3E6C696E3CLL;
  if (v28)
    v30 = (void *)v27[1];
  else
    v30 = (void *)0xE500000000000000;
  swift_bridgeObjectRetain(v28);
  v31._countAndFlagsBits = v29;
  v31._object = v30;
  String.append(_:)(v31);
  swift_bridgeObjectRelease(v30);
  return 0x203A656369766544;
}

uint64_t sub_1001BEC18()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;

  v1 = sub_100063D3C(&qword_100349A10);
  v2 = swift_allocObject(v1, 416, 7);
  *(_OWORD *)(v2 + 16) = xmmword_1002892B0;
  *(_QWORD *)(v2 + 32) = 0x6F69737265567773;
  *(_QWORD *)(v2 + 40) = 0xE90000000000006ELL;
  v3 = *v0;
  v4 = v0[1];
  *(_QWORD *)(v2 + 56) = &type metadata for String;
  *(_QWORD *)(v2 + 64) = v3;
  *(_QWORD *)(v2 + 72) = v4;
  *(_QWORD *)(v2 + 120) = &type metadata for String;
  *(_QWORD *)(v2 + 88) = &type metadata for String;
  *(_QWORD *)(v2 + 96) = 1702125924;
  *(_QWORD *)(v2 + 104) = 0xE400000000000000;
  v5 = (int *)type metadata accessor for CreationMetadata(0);
  v6 = (char *)v0 + v5[5];
  v7 = type metadata accessor for Date(0);
  *(_QWORD *)(v2 + 152) = v7;
  v8 = sub_1000960AC((_QWORD *)(v2 + 128));
  (*(void (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v8, v6, v7);
  *(_QWORD *)(v2 + 184) = &type metadata for String;
  v9 = 0xE500000000000000;
  *(_QWORD *)(v2 + 160) = 0x6C65646F6DLL;
  *(_QWORD *)(v2 + 168) = 0xE500000000000000;
  v10 = (uint64_t *)((char *)v0 + v5[6]);
  v11 = v10[1];
  *(_QWORD *)(v2 + 192) = *v10;
  *(_QWORD *)(v2 + 200) = v11;
  *(_QWORD *)(v2 + 248) = &type metadata for String;
  *(_QWORD *)(v2 + 216) = &type metadata for String;
  *(_QWORD *)(v2 + 224) = 0x656369766564;
  *(_QWORD *)(v2 + 232) = 0xE600000000000000;
  v12 = (uint64_t *)((char *)v0 + v5[7]);
  v13 = v12[1];
  *(_QWORD *)(v2 + 256) = *v12;
  *(_QWORD *)(v2 + 264) = v13;
  *(_QWORD *)(v2 + 312) = &type metadata for String;
  *(_QWORD *)(v2 + 280) = &type metadata for String;
  *(_QWORD *)(v2 + 288) = 1684632420;
  *(_QWORD *)(v2 + 296) = 0xE400000000000000;
  v14 = (uint64_t *)((char *)v0 + v5[8]);
  v15 = *v14;
  v16 = v14[1];
  v17 = 0x3E6C696E3CLL;
  if (v16)
  {
    v18 = v16;
  }
  else
  {
    v15 = 0x3E6C696E3CLL;
    v18 = 0xE500000000000000;
  }
  *(_QWORD *)(v2 + 320) = v15;
  *(_QWORD *)(v2 + 328) = v18;
  *(_QWORD *)(v2 + 376) = &type metadata for String;
  *(_QWORD *)(v2 + 344) = &type metadata for String;
  *(_QWORD *)(v2 + 352) = 0x44495344746C61;
  *(_QWORD *)(v2 + 360) = 0xE700000000000000;
  v19 = (uint64_t *)((char *)v0 + v5[9]);
  v20 = *v19;
  v21 = v19[1];
  *(_QWORD *)(v2 + 408) = &type metadata for String;
  if (v21)
  {
    v17 = v20;
    v9 = v21;
  }
  *(_QWORD *)(v2 + 384) = v17;
  *(_QWORD *)(v2 + 392) = v9;
  sub_10006C25C(0, &qword_100346D78, NSDictionary_ptr);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v13);
  return NSDictionary.init(dictionaryLiteral:)(v2);
}

unint64_t SESTLKShare.description.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  Swift::String v18;
  Swift::String v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  Swift::String v31;
  Swift::String v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  Swift::String v44;
  Swift::String v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  Swift::String v62;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;

  v1 = v0;
  v2 = sub_100063D3C(&qword_100346C70);
  __chkstk_darwin(v2, v3);
  v64 = (char *)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = 0;
  v69 = 0xE000000000000000;
  _StringGuts.grow(_:)(48);
  swift_bridgeObjectRelease(v69);
  v68 = 0xD000000000000014;
  v69 = 0x80000001002BFD70;
  v5 = objc_msgSend(v0, "tlkUUID");
  v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v8 = v7;

  sub_1001BD150(4, v6, v8);
  v9 = v66;
  v10 = v67;
  sub_1001BD2CC(v66, v67);
  v12 = v11;
  v65 = v11;
  v13 = sub_100063D3C((uint64_t *)&unk_100346060);
  v14 = sub_10006B86C();
  v15 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v13, v14);
  v17 = v16;
  swift_bridgeObjectRelease(v12);
  sub_100063CD0(v9, v10);
  v18._countAndFlagsBits = v15;
  v18._object = v17;
  String.append(_:)(v18);
  swift_bridgeObjectRelease(v17);
  v19._countAndFlagsBits = 2120480;
  v19._object = (void *)0xE300000000000000;
  String.append(_:)(v19);
  v20 = objc_msgSend(v1, "sourcePeerIdentifier");
  v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v23 = v22;

  sub_1001BD150(4, v21, v23);
  v24 = v66;
  v25 = v67;
  sub_1001BD2CC(v66, v67);
  v27 = v26;
  v65 = v26;
  v28 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v13, v14);
  v30 = v29;
  swift_bridgeObjectRelease(v27);
  sub_100063CD0(v24, v25);
  v31._countAndFlagsBits = v28;
  v31._object = v30;
  String.append(_:)(v31);
  swift_bridgeObjectRelease(v30);
  v32._countAndFlagsBits = 540945696;
  v32._object = (void *)0xE400000000000000;
  String.append(_:)(v32);
  v33 = objc_msgSend(v1, "targetPeerIdentifier");
  v34 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v33);
  v36 = v35;

  sub_1001BD150(4, v34, v36);
  v37 = v66;
  v38 = v67;
  sub_1001BD2CC(v66, v67);
  v40 = v39;
  v65 = v39;
  v41 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v13, v14);
  v43 = v42;
  swift_bridgeObjectRelease(v40);
  sub_100063CD0(v37, v38);
  v44._countAndFlagsBits = v41;
  v44._object = v43;
  String.append(_:)(v44);
  swift_bridgeObjectRelease(v43);
  v45._countAndFlagsBits = 0x65726168530A5D20;
  v45._object = (void *)0xED00002061746144;
  String.append(_:)(v45);
  v46 = type metadata accessor for PropertyListDecoder(0);
  v47 = swift_allocObject(v46, *(unsigned int *)(v46 + 48), *(unsigned __int16 *)(v46 + 52));
  v51 = PropertyListDecoder.init()(v47, v48, v49, v50);
  v52 = type metadata accessor for SESTLKShareData(0);
  v53 = objc_msgSend(v1, "shareData");
  v54 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v53);
  v56 = v55;

  v57 = (uint64_t)v64;
  v58 = sub_1000639EC(&qword_100346C38, type metadata accessor for SESTLKShareData, (uint64_t)&unk_10028AE14);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v52, v54, v56, v52, v58);
  sub_100063CD0(v54, v56);
  swift_release(v51);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v57, 0, 1, v52);
  v59 = sub_1001BF2B0();
  v61 = v60;
  sub_1001247E8(v57, type metadata accessor for SESTLKShareData);
  v62._countAndFlagsBits = v59;
  v62._object = v61;
  String.append(_:)(v62);
  swift_bridgeObjectRelease(v61);
  return v68;
}

uint64_t sub_1001BF2B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  Swift::String v5;
  void *object;
  Swift::String v7;
  uint64_t v8;
  Swift::String v9;
  void *v10;
  Swift::String v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  Swift::String v16;
  uint64_t v18;
  unint64_t v19;

  v1 = sub_100063D3C(&qword_100347800);
  __chkstk_darwin(v1, v2);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = 0;
  v19 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease(v19);
  v18 = 0x203A20637253;
  v19 = 0xE600000000000000;
  v5._countAndFlagsBits = sub_1001BE4B4();
  object = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(object);
  v7._countAndFlagsBits = 0x203A207473440ALL;
  v7._object = (void *)0xE700000000000000;
  String.append(_:)(v7);
  v8 = type metadata accessor for SESTLKShareData(0);
  v9._countAndFlagsBits = sub_1001BE4B4();
  v10 = v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(v10);
  v11._countAndFlagsBits = 0x646574616572430ALL;
  v11._object = (void *)0xEB00000000203A20;
  String.append(_:)(v11);
  sub_1000E4E48(v0 + *(int *)(v8 + 28), (uint64_t)v4, &qword_100347800);
  v12 = type metadata accessor for CreationMetadata(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v4, 1, v12) == 1)
  {
    sub_100096700((uint64_t)v4, &qword_100347800);
    v13 = (void *)0xE500000000000000;
    v14 = 0x3E6C696E3CLL;
  }
  else
  {
    v14 = sub_1001BE9DC();
    v13 = v15;
    sub_1001247E8((uint64_t)v4, type metadata accessor for CreationMetadata);
  }
  v16._countAndFlagsBits = v14;
  v16._object = v13;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(v13);
  return v18;
}

uint64_t sub_1001BF49C()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  char *v52;
  __int128 v53;
  uint64_t v54;

  v1 = v0;
  v2 = sub_100063D3C(&qword_100346C70);
  __chkstk_darwin(v2, v3);
  v52 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100063D3C(&qword_100349A10);
  v6 = swift_allocObject(v5, 288, 7);
  *(_OWORD *)(v6 + 16) = xmmword_100288AB0;
  *(_QWORD *)(v6 + 56) = &type metadata for String;
  *(_QWORD *)(v6 + 32) = 0x444955554B4C54;
  *(_QWORD *)(v6 + 40) = 0xE700000000000000;
  v7 = objc_msgSend(v0, "tlkUUID");
  v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v10 = v9;

  sub_1001BD2CC(v8, v10);
  v12 = v11;
  *(_QWORD *)&v53 = v11;
  v13 = sub_100063D3C((uint64_t *)&unk_100346060);
  v14 = sub_10006B86C();
  v15 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v13, v14);
  v17 = v16;
  swift_bridgeObjectRelease(v12);
  sub_100063CD0(v8, v10);
  *(_QWORD *)(v6 + 64) = v15;
  *(_QWORD *)(v6 + 72) = v17;
  *(_QWORD *)(v6 + 120) = &type metadata for String;
  *(_QWORD *)(v6 + 88) = &type metadata for String;
  *(_QWORD *)(v6 + 96) = 0xD000000000000014;
  *(_QWORD *)(v6 + 104) = 0x80000001002BFDF0;
  v18 = objc_msgSend(v1, "sourcePeerIdentifier");
  v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v21 = v20;

  sub_1001BD2CC(v19, v21);
  v23 = v22;
  *(_QWORD *)&v53 = v22;
  v24 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v13, v14);
  v26 = v25;
  swift_bridgeObjectRelease(v23);
  sub_100063CD0(v19, v21);
  *(_QWORD *)(v6 + 128) = v24;
  *(_QWORD *)(v6 + 136) = v26;
  *(_QWORD *)(v6 + 184) = &type metadata for String;
  *(_QWORD *)(v6 + 152) = &type metadata for String;
  *(_QWORD *)(v6 + 160) = 0xD000000000000014;
  *(_QWORD *)(v6 + 168) = 0x80000001002BFE10;
  v27 = objc_msgSend(v1, "targetPeerIdentifier");
  v28 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v27);
  v30 = v29;

  sub_1001BD2CC(v28, v30);
  v32 = v31;
  *(_QWORD *)&v53 = v31;
  v33 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v13, v14);
  v35 = v34;
  swift_bridgeObjectRelease(v32);
  sub_100063CD0(v28, v30);
  *(_QWORD *)(v6 + 192) = v33;
  *(_QWORD *)(v6 + 200) = v35;
  *(_QWORD *)(v6 + 248) = &type metadata for String;
  *(_QWORD *)(v6 + 216) = &type metadata for String;
  *(_QWORD *)(v6 + 224) = 0x7461446572616873;
  *(_QWORD *)(v6 + 232) = 0xE900000000000061;
  v36 = type metadata accessor for PropertyListDecoder(0);
  v37 = swift_allocObject(v36, *(unsigned int *)(v36 + 48), *(unsigned __int16 *)(v36 + 52));
  v41 = PropertyListDecoder.init()(v37, v38, v39, v40);
  v42 = type metadata accessor for SESTLKShareData(0);
  v43 = objc_msgSend(v1, "shareData");
  v44 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v43);
  v46 = v45;

  v47 = (uint64_t)v52;
  v48 = sub_1000639EC(&qword_100346C38, type metadata accessor for SESTLKShareData, (uint64_t)&unk_10028AE14);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v42, v44, v46, v42, v48);
  sub_100063CD0(v44, v46);
  swift_release(v41);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v47, 0, 1, v42);
  v49 = sub_1001BF928();
  v54 = sub_10006C25C(0, &qword_100346D78, NSDictionary_ptr);
  *(_QWORD *)&v53 = v49;
  sub_1001247E8(v47, type metadata accessor for SESTLKShareData);
  sub_10006C2B4(&v53, (_OWORD *)(v6 + 256));
  sub_10006C25C(0, &qword_100346D78, NSDictionary_ptr);
  return NSDictionary.init(dictionaryLiteral:)(v6);
}

uint64_t sub_1001BF928()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  uint64_t v15;

  v1 = v0;
  v2 = sub_100063D3C(&qword_100347800);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100063D3C(&qword_100349A10);
  v7 = swift_allocObject(v6, 224, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100288AC0;
  *(_QWORD *)(v7 + 56) = &type metadata for String;
  *(_QWORD *)(v7 + 32) = 0xD000000000000013;
  *(_QWORD *)(v7 + 40) = 0x80000001002BDAA0;
  v8 = sub_1001BD7A4();
  v9 = sub_10006C25C(0, &qword_100346D78, NSDictionary_ptr);
  *(_QWORD *)(v7 + 64) = v8;
  *(_QWORD *)(v7 + 120) = &type metadata for String;
  *(_QWORD *)(v7 + 88) = v9;
  *(_QWORD *)(v7 + 96) = 0xD000000000000013;
  *(_QWORD *)(v7 + 104) = 0x80000001002BDAC0;
  v10 = type metadata accessor for SESTLKShareData(0);
  *(_QWORD *)(v7 + 128) = sub_1001BD7A4();
  *(_QWORD *)(v7 + 184) = &type metadata for String;
  *(_QWORD *)(v7 + 152) = v9;
  *(_QWORD *)(v7 + 160) = 0xD000000000000010;
  *(_QWORD *)(v7 + 168) = 0x80000001002BFE30;
  sub_1000E4E48(v1 + *(int *)(v10 + 28), (uint64_t)v5, &qword_100347800);
  v11 = type metadata accessor for CreationMetadata(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v5, 1, v11) == 1)
  {
    sub_100096700((uint64_t)v5, &qword_100347800);
    *(_QWORD *)(v7 + 216) = &type metadata for String;
    *(_QWORD *)(v7 + 192) = 0x3E6C696E3CLL;
    *(_QWORD *)(v7 + 200) = 0xE500000000000000;
  }
  else
  {
    v12 = sub_1001BEC18();
    v15 = v9;
    *(_QWORD *)&v14 = v12;
    sub_1001247E8((uint64_t)v5, type metadata accessor for CreationMetadata);
    sub_10006C2B4(&v14, (_OWORD *)(v7 + 192));
  }
  return NSDictionary.init(dictionaryLiteral:)(v7);
}

id sub_1001BFB2C(void *a1, uint64_t a2, void (*a3)(void))
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  NSString v7;

  v4 = a1;
  a3();
  v6 = v5;

  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  return v7;
}

uint64_t SESTLKRecord.description.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  Swift::String v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  Swift::String v14;
  Swift::String v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  Swift::String v34;
  void *object;
  Swift::String v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  Swift::String v53;
  void *v54;
  Swift::String v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  void *v62;
  Swift::String v63;
  void *v64;
  uint64_t v65;
  Swift::String v66;
  uint64_t v68;
  _QWORD v69[2];
  uint64_t v70;
  unint64_t v71;

  v1 = v0;
  v2 = sub_100063D3C(&qword_100347800);
  __chkstk_darwin(v2, v3);
  v68 = (uint64_t)&v69[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100063D3C(&qword_100347B20);
  __chkstk_darwin(v5, v6);
  v8 = (char *)&v69[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = 0;
  v71 = 0xE000000000000000;
  _StringGuts.grow(_:)(66);
  v9._object = (void *)0x80000001002BFD90;
  v9._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v9);
  v10 = objc_msgSend(v0, "view");
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v13 = v12;

  v14._countAndFlagsBits = v11;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(v13);
  v15._countAndFlagsBits = 0x444955556B6C740ALL;
  v15._object = (void *)0xE900000000000020;
  String.append(_:)(v15);
  v16 = objc_msgSend(v1, "tlkUUID");
  v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v16);
  v19 = v18;

  sub_1001BD2CC(v17, v19);
  v21 = v20;
  v69[0] = v20;
  v22 = sub_100063D3C((uint64_t *)&unk_100346060);
  v23 = sub_10006B86C();
  v24 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v22, v23);
  v26 = v25;
  swift_bridgeObjectRelease(v21);
  sub_100063CD0(v17, v19);
  v27 = sub_1001C0620(8, v24, v26);
  v29 = v28;
  v31 = v30;
  v33 = v32;
  swift_bridgeObjectRelease(v26);
  v34._countAndFlagsBits = static String._fromSubstring(_:)(v27, v29, v31, v33);
  object = v34._object;
  String.append(_:)(v34);
  swift_bridgeObjectRelease(v33);
  swift_bridgeObjectRelease(object);
  v36._countAndFlagsBits = 0x54746E657261700ALL;
  v36._object = (void *)0xEF20444955554B4CLL;
  String.append(_:)(v36);
  v37 = objc_msgSend(v1, "tlkUUID");
  v38 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v37);
  v40 = v39;

  sub_1001BD2CC(v38, v40);
  v42 = v41;
  v69[0] = v41;
  v43 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v22, v23);
  v45 = v44;
  swift_bridgeObjectRelease(v42);
  sub_100063CD0(v38, v40);
  v46 = sub_1001C0620(8, v43, v45);
  v48 = v47;
  v50 = v49;
  v52 = v51;
  swift_bridgeObjectRelease(v45);
  v53._countAndFlagsBits = static String._fromSubstring(_:)(v46, v48, v50, v52);
  v54 = v53._object;
  String.append(_:)(v53);
  swift_bridgeObjectRelease(v52);
  swift_bridgeObjectRelease(v54);
  v55._countAndFlagsBits = 0x4464726F6365720ALL;
  v55._object = (void *)0xEC00000020617461;
  String.append(_:)(v55);
  sub_10014BBDC((uint64_t)v8);
  v56 = type metadata accessor for SESTLKRecordData(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56))(v8, 0, 1, v56);
  strcpy((char *)v69, "Created by: ");
  BYTE5(v69[1]) = 0;
  HIWORD(v69[1]) = -5120;
  v57 = (uint64_t)&v8[*(int *)(v56 + 20)];
  v58 = v68;
  sub_1000E4E48(v57, v68, &qword_100347800);
  v59 = type metadata accessor for CreationMetadata(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 48))(v58, 1, v59) == 1)
  {
    sub_100096700(v58, &qword_100347800);
    v60 = (void *)0xE500000000000000;
    v61 = 0x3E6C696E3CLL;
  }
  else
  {
    v61 = sub_1001BE9DC();
    v60 = v62;
    sub_1001247E8(v58, type metadata accessor for CreationMetadata);
  }
  v63._countAndFlagsBits = v61;
  v63._object = v60;
  String.append(_:)(v63);
  swift_bridgeObjectRelease(v60);
  v65 = v69[0];
  v64 = (void *)v69[1];
  sub_1001247E8((uint64_t)v8, type metadata accessor for SESTLKRecordData);
  v66._countAndFlagsBits = v65;
  v66._object = v64;
  String.append(_:)(v66);
  swift_bridgeObjectRelease(v64);
  return v70;
}

uint64_t sub_1001C0058()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  Swift::String v10;
  _QWORD v12[2];

  v1 = sub_100063D3C(&qword_100347800);
  __chkstk_darwin(v1, v2);
  v4 = (char *)v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  strcpy((char *)v12, "Created by: ");
  BYTE5(v12[1]) = 0;
  HIWORD(v12[1]) = -5120;
  v5 = type metadata accessor for SESTLKRecordData(0);
  sub_1000E4E48(v0 + *(int *)(v5 + 20), (uint64_t)v4, &qword_100347800);
  v6 = type metadata accessor for CreationMetadata(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v4, 1, v6) == 1)
  {
    sub_100096700((uint64_t)v4, &qword_100347800);
    v7 = (void *)0xE500000000000000;
    v8 = 0x3E6C696E3CLL;
  }
  else
  {
    v8 = sub_1001BE9DC();
    v7 = v9;
    sub_1001247E8((uint64_t)v4, type metadata accessor for CreationMetadata);
  }
  v10._countAndFlagsBits = v8;
  v10._object = v7;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v7);
  return v12[0];
}

uint64_t sub_1001C01B0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v1 = sub_100063D3C(&qword_100347B20);
  __chkstk_darwin(v1, v2);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100063D3C(&qword_100349A10);
  v6 = swift_allocObject(v5, 288, 7);
  *(_OWORD *)(v6 + 16) = xmmword_100288AB0;
  *(_QWORD *)(v6 + 56) = &type metadata for String;
  *(_QWORD *)(v6 + 32) = 2003134838;
  *(_QWORD *)(v6 + 40) = 0xE400000000000000;
  v7 = objc_msgSend(v0, "view");
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v10 = v9;

  *(_QWORD *)(v6 + 64) = v8;
  *(_QWORD *)(v6 + 72) = v10;
  *(_QWORD *)(v6 + 120) = &type metadata for String;
  *(_QWORD *)(v6 + 88) = &type metadata for String;
  *(_QWORD *)(v6 + 96) = 0x444955556B6C74;
  *(_QWORD *)(v6 + 104) = 0xE700000000000000;
  v11 = objc_msgSend(v0, "tlkUUID");
  v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v14 = v13;

  *(_QWORD *)(v6 + 128) = v12;
  *(_QWORD *)(v6 + 136) = v14;
  *(_QWORD *)(v6 + 184) = &type metadata for String;
  *(_QWORD *)(v6 + 152) = &type metadata for Data;
  strcpy((char *)(v6 + 160), "parentTLKUUID");
  *(_WORD *)(v6 + 174) = -4864;
  v15 = objc_msgSend(v0, "parentTLKUUID");
  v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v15);
  v18 = v17;

  *(_QWORD *)(v6 + 192) = v16;
  *(_QWORD *)(v6 + 200) = v18;
  *(_QWORD *)(v6 + 248) = &type metadata for String;
  *(_QWORD *)(v6 + 216) = &type metadata for Data;
  *(_QWORD *)(v6 + 224) = 0x614464726F636572;
  *(_QWORD *)(v6 + 232) = 0xEA00000000006174;
  sub_10014BBDC((uint64_t)v4);
  v19 = type metadata accessor for SESTLKRecordData(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v4, 0, 1, v19);
  v20 = sub_1001C047C();
  v24 = sub_10006C25C(0, &qword_100346D78, NSDictionary_ptr);
  *(_QWORD *)&v23 = v20;
  sub_1001247E8((uint64_t)v4, type metadata accessor for SESTLKRecordData);
  sub_10006C2B4(&v23, (_OWORD *)(v6 + 256));
  sub_10006C25C(0, &qword_100346D78, NSDictionary_ptr);
  return NSDictionary.init(dictionaryLiteral:)(v6);
}

uint64_t sub_1001C047C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;

  v1 = sub_100063D3C(&qword_100347800);
  __chkstk_darwin(v1, v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100063D3C(&qword_100349A10);
  v6 = swift_allocObject(v5, 96, 7);
  *(_OWORD *)(v6 + 16) = xmmword_1002888E0;
  *(_QWORD *)(v6 + 56) = &type metadata for String;
  *(_QWORD *)(v6 + 32) = 0xD000000000000010;
  *(_QWORD *)(v6 + 40) = 0x80000001002BDA80;
  v7 = type metadata accessor for SESTLKRecordData(0);
  sub_1000E4E48(v0 + *(int *)(v7 + 20), (uint64_t)v4, &qword_100347800);
  v8 = type metadata accessor for CreationMetadata(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    sub_100096700((uint64_t)v4, &qword_100347800);
    *(_QWORD *)(v6 + 88) = &type metadata for String;
    *(_QWORD *)(v6 + 64) = 0x3E6C696E3CLL;
    *(_QWORD *)(v6 + 72) = 0xE500000000000000;
  }
  else
  {
    v9 = sub_1001BEC18();
    v12 = sub_10006C25C(0, &qword_100346D78, NSDictionary_ptr);
    *(_QWORD *)&v11 = v9;
    sub_1001247E8((uint64_t)v4, type metadata accessor for CreationMetadata);
    sub_10006C2B4(&v11, (_OWORD *)(v6 + 64));
  }
  sub_10006C25C(0, &qword_100346D78, NSDictionary_ptr);
  return NSDictionary.init(dictionaryLiteral:)(v6);
}

uint64_t sub_1001C0620(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v5 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0)
      v5 = a2;
    v6 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v6 = 11;
    v7 = v6 | (v5 << 16);
    v8 = String.index(_:offsetBy:limitedBy:)(15, result, v7, a2, a3);
    if ((v9 & 1) != 0)
      v10 = v7;
    else
      v10 = v8;
    return String.subscript.getter(15, v10, a2, a3);
  }
  return result;
}

uint64_t sub_1001C06A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SESPeerIdentityData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001C06EC@<X0>(unint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t result;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  int v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  if (a1 >> 61 != 3)
  {
    v31 = sub_100071B74();
    v32 = swift_allocError(&type metadata for ASN1Error, v31, 0, 0);
    *(_QWORD *)(v33 + 8) = 0;
    *(_QWORD *)(v33 + 16) = 0;
    *(_QWORD *)v33 = 4;
    *(_BYTE *)(v33 + 24) = 3;
    swift_willThrow(v32);
    v34 = a1 & 0x1FFFFFFFFFFFFFFFLL;
    return swift_release(v34);
  }
  v4 = a1 & 0x1FFFFFFFFFFFFFFFLL;
  v5 = *(_QWORD *)(a1 + 16);
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_17;
  swift_bridgeObjectRetain(v5);
  v6 = sub_100187ED0(0x754E6C6169726573, 0xEC0000007265626DLL);
  if ((v7 & 1) == 0)
  {
    swift_bridgeObjectRelease(v5);
LABEL_17:
    v35 = sub_100071B74();
    v36 = swift_allocError(&type metadata for ASN1Error, v35, 0, 0);
    *(_QWORD *)(v37 + 8) = 0;
    *(_QWORD *)(v37 + 16) = 0;
    *(_QWORD *)v37 = 3;
    *(_BYTE *)(v37 + 24) = 3;
    swift_willThrow(v36);
LABEL_18:
    v34 = v4;
    return swift_release(v34);
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v6);
  if (v8 >> 61 != 1)
  {
    v38 = sub_100071B74();
    swift_allocError(&type metadata for ASN1Error, v38, 0, 0);
    *(_QWORD *)(v39 + 8) = 0;
    *(_QWORD *)(v39 + 16) = 0;
    *(_QWORD *)v39 = 4;
    *(_BYTE *)(v39 + 24) = 3;
    v40 = v8 & 0x1FFFFFFFFFFFFFFFLL;
    v41 = swift_retain(v40);
    swift_willThrow(v41);
    swift_bridgeObjectRelease(v5);
    swift_release(v40);
    goto LABEL_18;
  }
  v9 = v8 & 0x1FFFFFFFFFFFFFFFLL;
  v11 = *(_QWORD *)(v8 + 16);
  v10 = *(_QWORD *)(v8 + 24);
  v12 = *(_QWORD *)(v5 + 16);
  sub_100063C8C(v11, v10);
  swift_retain(v9);
  sub_100063C8C(v11, v10);
  if (!v12 || (v13 = sub_100187ED0(0x69746E6564496163, 0xEC00000072656966), (v14 & 1) == 0))
  {
    swift_bridgeObjectRelease(v5);
    sub_100063CD0(v11, v10);
    v42 = sub_100071B74();
    v43 = swift_allocError(&type metadata for ASN1Error, v42, 0, 0);
    *(_QWORD *)(v44 + 8) = 0;
    *(_QWORD *)(v44 + 16) = 0;
    *(_QWORD *)v44 = 3;
    *(_BYTE *)(v44 + 24) = 3;
    swift_willThrow(v43);
    swift_release(v9);
    v45 = v4;
LABEL_23:
    swift_release(v45);
    return sub_100063CD0(v11, v10);
  }
  v15 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v13);
  if (v15 >> 61 != 1)
  {
    v46 = sub_100071B74();
    swift_allocError(&type metadata for ASN1Error, v46, 0, 0);
    *(_QWORD *)(v47 + 8) = 0;
    *(_QWORD *)(v47 + 16) = 0;
    *(_QWORD *)v47 = 4;
    *(_BYTE *)(v47 + 24) = 3;
    v48 = swift_retain(v15 & 0x1FFFFFFFFFFFFFFFLL);
    swift_willThrow(v48);
    swift_release(v4);
    sub_100063CD0(v11, v10);
    swift_bridgeObjectRelease(v5);
    swift_release(v9);
    v45 = v15 & 0x1FFFFFFFFFFFFFFFLL;
    goto LABEL_23;
  }
  v71 = v9;
  v16 = v15 & 0x1FFFFFFFFFFFFFFFLL;
  v18 = *(_QWORD *)(v15 + 16);
  v17 = *(_QWORD *)(v15 + 24);
  v72 = *(_QWORD *)(v5 + 16);
  sub_100063C8C(v18, v17);
  v70 = v16;
  swift_retain(v16);
  v74 = v18;
  v19 = v18;
  v20 = v17;
  sub_100063C8C(v19, v17);
  if (v72 && (v21 = sub_100187ED0(0xD000000000000011, 0x80000001002BCAC0), (v22 & 1) != 0))
  {
    v23 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if (v23 >> 61 == 1)
    {
      v73 = v23 & 0x1FFFFFFFFFFFFFFFLL;
      v25 = *(_QWORD *)(v23 + 16);
      v24 = *(_QWORD *)(v23 + 24);
      v66 = *(_QWORD *)(v5 + 16);
      sub_100063C8C(v25, v24);
      swift_retain(v73);
      v68 = v24;
      v69 = v25;
      sub_100063C8C(v25, v24);
      v17 = v20;
      if (v66 && (v26 = sub_100187ED0(0xD000000000000011, 0x80000001002BCAE0), (v27 & 1) != 0))
      {
        v28 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v26);
        swift_retain(v28 & 0x1FFFFFFFFFFFFFFFLL);
        swift_bridgeObjectRelease(v5);
        if (v28 >> 61 == 1)
        {
          v29 = *(_QWORD *)((v28 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
          v67 = *(_QWORD *)((v28 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
          sub_100063C8C(v67, v29);
          swift_release(v28 & 0x1FFFFFFFFFFFFFFFLL);
          swift_release(v73);
          swift_release(v70);
          swift_release(v71);
          swift_release(v4);
          sub_100063C8C(v11, v10);
          sub_100063C8C(v74, v20);
          sub_100063C8C(v69, v68);
          sub_100063C8C(v67, v29);
          sub_100063CD0(v69, v68);
          sub_100063CD0(v74, v20);
          sub_100063CD0(v11, v10);
          sub_100063CD0(v11, v10);
          sub_100063CD0(v74, v20);
          sub_100063CD0(v69, v68);
          result = sub_100063CD0(v67, v29);
          *a2 = v11;
          a2[1] = v10;
          a2[2] = v74;
          a2[3] = v20;
          a2[4] = v69;
          a2[5] = v68;
          a2[6] = v67;
          a2[7] = v29;
          return result;
        }
        v62 = sub_100071B74();
        v63 = swift_allocError(&type metadata for ASN1Error, v62, 0, 0);
        *(_QWORD *)(v64 + 8) = 0;
        *(_QWORD *)(v64 + 16) = 0;
        *(_QWORD *)v64 = 4;
        *(_BYTE *)(v64 + 24) = 3;
        swift_willThrow(v63);
        swift_release(v4);
        v65 = v28 & 0x1FFFFFFFFFFFFFFFLL;
        a2 = (_QWORD *)v68;
        v20 = v69;
        sub_100063CD0(v69, v68);
        v49 = v74;
        sub_100063CD0(v74, v17);
        sub_100063CD0(v11, v10);
        swift_release(v71);
        swift_release(v70);
        swift_release(v73);
        v61 = v65;
      }
      else
      {
        swift_bridgeObjectRelease(v5);
        a2 = (_QWORD *)v24;
        v20 = v69;
        sub_100063CD0(v69, v24);
        v49 = v74;
        sub_100063CD0(v74, v17);
        sub_100063CD0(v11, v10);
        v58 = sub_100071B74();
        v59 = swift_allocError(&type metadata for ASN1Error, v58, 0, 0);
        *(_QWORD *)(v60 + 8) = 0;
        *(_QWORD *)(v60 + 16) = 0;
        *(_QWORD *)v60 = 3;
        *(_BYTE *)(v60 + 24) = 3;
        swift_willThrow(v59);
        swift_release(v71);
        swift_release(v70);
        swift_release(v73);
        v61 = v4;
      }
      swift_release(v61);
      v54 = 1;
      goto LABEL_27;
    }
    v55 = sub_100071B74();
    swift_allocError(&type metadata for ASN1Error, v55, 0, 0);
    *(_QWORD *)(v56 + 8) = 0;
    *(_QWORD *)(v56 + 16) = 0;
    *(_QWORD *)v56 = 4;
    *(_BYTE *)(v56 + 24) = 3;
    a2 = (_QWORD *)(v23 & 0x1FFFFFFFFFFFFFFFLL);
    v57 = swift_retain(v23 & 0x1FFFFFFFFFFFFFFFLL);
    swift_willThrow(v57);
    swift_release(v4);
    v49 = v74;
    sub_100063CD0(v74, v17);
    sub_100063CD0(v11, v10);
    swift_bridgeObjectRelease(v5);
    swift_release(v71);
    swift_release(v70);
    v53 = a2;
  }
  else
  {
    swift_bridgeObjectRelease(v5);
    v49 = v74;
    sub_100063CD0(v74, v17);
    sub_100063CD0(v11, v10);
    v50 = sub_100071B74();
    v51 = swift_allocError(&type metadata for ASN1Error, v50, 0, 0);
    *(_QWORD *)(v52 + 8) = 0;
    *(_QWORD *)(v52 + 16) = 0;
    *(_QWORD *)v52 = 3;
    *(_BYTE *)(v52 + 24) = 3;
    swift_willThrow(v51);
    swift_release(v71);
    swift_release(v70);
    v53 = (_QWORD *)v4;
  }
  swift_release(v53);
  v54 = 0;
LABEL_27:
  sub_100063CD0(v11, v10);
  result = sub_100063CD0(v49, v17);
  if (v54)
    return sub_100063CD0(v20, (unint64_t)a2);
  return result;
}

uint64_t sub_1001C0E14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  os_log_type_t v15;
  uint8_t *v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  id v20;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  id v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  _BYTE v34[24];

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = &v34[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v7 = qword_100354EE8;
  *v6 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) != 0)
  {
    if (qword_100344718 == -1)
      goto LABEL_5;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100344718, sub_1001C41B8);
LABEL_5:
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10009673C(v9, (uint64_t)qword_100349A28);
  v11 = Logger.logObject.getter(v10);
  v15 = static os_log_type_t.info.getter(v11, v12, v13, v14);
  if (os_log_type_enabled(v11, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v15, "Lyon Power started", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }

  if (qword_100344618 != -1)
    swift_once(&qword_100344618, sub_100152F14);
  v17 = (void *)qword_100354CE8;
  v18 = (_QWORD *)(v1 + 24);
  swift_beginAccess(v1 + 24, v34, 33, 0);
  v19 = *(_QWORD **)(v1 + 24);
  v20 = v17;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v19);
  *(_QWORD *)(v1 + 24) = v19;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v19 = sub_1001C47A8(0, v19[2] + 1, 1, v19);
    *v18 = v19;
  }
  v23 = v19[2];
  v22 = v19[3];
  if (v23 >= v22 >> 1)
  {
    v19 = sub_1001C47A8((_QWORD *)(v22 > 1), v23 + 1, 1, v19);
    *v18 = v19;
  }
  v19[2] = v23 + 1;
  v24 = &v19[3 * v23];
  *((_BYTE *)v24 + 32) = 2;
  v24[5] = v20;
  v24[6] = &off_10030AD70;
  swift_endAccess(v34);
  if (qword_100344628 != -1)
    swift_once(&qword_100344628, sub_1001539B4);
  v25 = (void *)qword_100354CF0;
  swift_beginAccess(v18, v34, 33, 0);
  v26 = (_QWORD *)*v18;
  v27 = v25;
  v28 = swift_isUniquelyReferenced_nonNull_native(v26);
  *v18 = v26;
  if ((v28 & 1) == 0)
  {
    v26 = sub_1001C47A8(0, v26[2] + 1, 1, v26);
    *v18 = v26;
  }
  v30 = v26[2];
  v29 = v26[3];
  if (v30 >= v29 >> 1)
  {
    v26 = sub_1001C47A8((_QWORD *)(v29 > 1), v30 + 1, 1, v26);
    *v18 = v26;
  }
  v26[2] = v30 + 1;
  v31 = &v26[3 * v30];
  *((_BYTE *)v31 + 32) = 1;
  v31[5] = v27;
  v31[6] = &off_10030AE30;
  return swift_endAccess(v34);
}

void sub_1001C1168(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  id v10;
  char v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  void **v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  os_log_type_t v32;
  uint8_t *v33;
  unint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void **v55;
  uint64_t v56;
  uint64_t inited;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  void *v64;
  void *v65;
  Swift::String v66;
  void **v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  NSObject *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  os_log_type_t v75;
  uint8_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  os_log_type_t v82;
  uint8_t *v83;
  uint64_t v84;
  void *v85;
  NSObject **v86;
  void *v87;
  NSObject **v88;
  void *v89;
  void *v90;
  double v91;
  id v92;
  uint64_t v93;
  uint8_t *v94;
  void **v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void **aBlock;
  _QWORD v100[4];
  uint64_t v101;
  char v102[80];
  uint64_t v103;
  uint64_t v104;

  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (uint64_t *)((char *)&v93 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v9 = (void *)qword_100354EE8;
  *v8 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  v10 = v9;
  v11 = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  if ((v11 & 1) == 0)
  {
    __break(1u);
LABEL_35:
    swift_once(&qword_100344718, sub_1001C41B8);
    goto LABEL_6;
  }
  v12 = (uint64_t *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
  v13 = *(_QWORD *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
  if (v13 >> 60 != 15)
  {
    v26 = *v12;
    v27 = *(_BYTE *)(v1 + 57);
    sub_100063C8C(*v12, v13);
    if ((v27 & 1) != 0)
    {
      if (qword_100344718 != -1)
        swift_once(&qword_100344718, sub_1001C41B8);
      v28 = type metadata accessor for Logger(0);
      v29 = sub_10009673C(v28, (uint64_t)qword_100349A28);
      v30 = Logger.logObject.getter(v29);
      v32 = static os_log_type_t.error.getter(v30, v31);
      if (os_log_type_enabled(v30, v32))
      {
        v33 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v33 = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, v32, "We are already in biolockout backoff, should not have connected to a peer", v33, 2u);
        swift_slowDealloc(v33, -1, -1);

        sub_10006B9B4(v26, v13);
        return;
      }
    }
    else
    {
      if (qword_100344718 != -1)
        swift_once(&qword_100344718, sub_1001C41B8);
      v97 = v1;
      v37 = type metadata accessor for Logger(0);
      v38 = sub_10009673C(v37, (uint64_t)qword_100349A28);
      sub_100063C8C(v26, v13);
      v39 = sub_100063C8C(v26, v13);
      v96 = v38;
      v40 = Logger.logObject.getter(v39);
      v44 = static os_log_type_t.info.getter(v40, v41, v42, v43);
      if (os_log_type_enabled(v40, v44))
      {
        v45 = (uint8_t *)swift_slowAlloc(12, -1);
        v95 = (void **)swift_slowAlloc(32, -1);
        aBlock = v95;
        *(_DWORD *)v45 = 136315138;
        v94 = v45 + 4;
        sub_1001BD2CC(v26, v13);
        v47 = v46;
        v98 = v2;
        v103 = v46;
        v48 = sub_100063D3C((uint64_t *)&unk_100346060);
        v49 = sub_10006B86C();
        v50 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v48, v49);
        v52 = v51;
        swift_bridgeObjectRelease(v47);
        v53 = v50;
        v54 = v98;
        v103 = sub_1001C56EC(v53, v52, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v94, v45 + 12);
        swift_bridgeObjectRelease(v52);
        sub_10006B9B4(v26, v13);
        sub_10006B9B4(v26, v13);
        _os_log_impl((void *)&_mh_execute_header, v40, v44, "Sending biolockout event for %s", v45, 0xCu);
        v55 = v95;
        swift_arrayDestroy(v95, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v55, -1, -1);
        swift_slowDealloc(v45, -1, -1);

      }
      else
      {
        sub_10006B9B4(v26, v13);
        sub_10006B9B4(v26, v13);

        v54 = v2;
      }
      v56 = sub_100063D3C((uint64_t *)&unk_100346040);
      inited = swift_initStackObject(v56, v102);
      *(_OWORD *)(inited + 16) = xmmword_1002888E0;
      *(_QWORD *)(inited + 32) = 0xD000000000000014;
      *(_QWORD *)(inited + 40) = 0x80000001002BEA90;
      aBlock = (void **)0xD000000000000013;
      v100[0] = 0x80000001002C0250;
      sub_10006BA34(v26, v13);
      v58 = v54;
      sub_1001BD2CC(v26, v13);
      v60 = v59;
      v98 = v58;
      v103 = v59;
      v61 = sub_100063D3C((uint64_t *)&unk_100346060);
      v62 = sub_10006B86C();
      v63 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v61, v62);
      v65 = v64;
      swift_bridgeObjectRelease(v60);
      v66._countAndFlagsBits = v63;
      v66._object = v65;
      String.append(_:)(v66);
      swift_bridgeObjectRelease(v65);
      v67 = aBlock;
      v68 = v100[0];
      *(_QWORD *)(inited + 72) = &type metadata for String;
      *(_QWORD *)(inited + 48) = v67;
      *(_QWORD *)(inited + 56) = v68;
      v69 = sub_10017C218(inited);
      sub_1001F119C(0xD000000000000025, 0x80000001002BEA60, 0, 0xF000000000000000, v26, v13, v69);
      swift_bridgeObjectRelease(v69);
      v70 = sub_10006B9B4(v26, v13);
      v71 = Logger.logObject.getter(v70);
      v75 = static os_log_type_t.info.getter(v71, v72, v73, v74);
      if (os_log_type_enabled(v71, v75))
      {
        v76 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v76 = 134217984;
        if (qword_100344710 != -1)
          swift_once(&qword_100344710, sub_1001C2B1C);
        aBlock = (void **)qword_100349A20;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v100, v76 + 4, v76 + 12);
        _os_log_impl((void *)&_mh_execute_header, v71, v75, "Starting biolockout backoff for %f seconds for Lyon", v76, 0xCu);
        swift_slowDealloc(v76, -1, -1);
      }

      v77 = v97;
      *(_BYTE *)(v97 + 57) = 1;
      v78 = sub_1001C2B90();
      if (qword_100344710 != -1)
        v78 = swift_once(&qword_100344710, sub_1001C2B1C);
      if (*(double *)&qword_100349A20 != 0.0)
      {
        v84 = swift_allocObject(&unk_10030CF68, 24, 7);
        swift_weakInit(v84 + 16, v77);
        v85 = (void *)qword_100354EE8;
        v86 = (NSObject **)objc_allocWithZone((Class)SESTimer);
        v100[3] = sub_1001C6F90;
        v101 = v84;
        aBlock = _NSConcreteStackBlock;
        v100[0] = 1107296256;
        v100[1] = sub_100071C98;
        v100[2] = &unk_10030CF80;
        v87 = _Block_copy(&aBlock);
        swift_retain(v84);
        v88 = sub_10004C264(v86, v85, v87);
        _Block_release(v87);
        swift_release(v101);
        v89 = *(void **)(v77 + 16);
        *(_QWORD *)(v77 + 16) = v88;

        v90 = *(void **)(v77 + 16);
        if (v90)
        {
          v91 = *(double *)&qword_100349A20;
          v92 = v90;
          sub_10004C410((uint64_t)v92, v91);
          sub_10006B9B4(v26, v13);
          swift_release(v84);

        }
        else
        {
          sub_10006B9B4(v26, v13);
          swift_release(v84);
        }
        return;
      }
      v30 = Logger.logObject.getter(v78);
      v82 = static os_log_type_t.info.getter(v30, v79, v80, v81);
      if (os_log_type_enabled(v30, v82))
      {
        v83 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v83 = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, v82, "Scanning disabled till device exits biolockout", v83, 2u);
        swift_slowDealloc(v83, -1, -1);

        sub_10006B9B4(v26, v13);
        return;
      }
    }
    sub_10006B9B4(v26, v13);

    return;
  }
  if (qword_100344718 != -1)
    goto LABEL_35;
LABEL_6:
  v14 = type metadata accessor for Logger(0);
  sub_10009673C(v14, (uint64_t)qword_100349A28);
  v15 = swift_retain_n(a1, 2);
  v16 = Logger.logObject.getter(v15);
  v18 = static os_log_type_t.error.getter(v16, v17);
  if (os_log_type_enabled(v16, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(12, -1);
    v20 = (void **)swift_slowAlloc(32, -1);
    *(_DWORD *)v19 = 136315138;
    aBlock = v20;
    v21 = type metadata accessor for UUID(0);
    v22 = sub_10006B7E0();
    v23 = dispatch thunk of CustomStringConvertible.description.getter(v21, v22);
    v25 = v24;
    v103 = sub_1001C56EC(v23, v24, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v19 + 4, v19 + 12);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease(v25);
    _os_log_impl((void *)&_mh_execute_header, v16, v18, "Key identifier not set for peer %s", v19, 0xCu);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v19, -1, -1);

  }
  else
  {

    swift_release_n(a1, 2);
  }
  v34 = sub_10006B828();
  v35 = swift_allocError(&type metadata for DSKError, v34, 0, 0);
  *v36 = 0;
  swift_willThrow(v35);
}

void sub_1001C1B10(unsigned __int8 a1, unsigned __int8 a2, unsigned __int8 a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  id v18;
  int v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  int v24;
  uint64_t v25;
  char v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  os_log_type_t v31;
  uint8_t *v32;
  char v33;
  int v34;
  int v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  os_log_type_t v40;
  uint8_t *v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  os_log_type_t v46;
  uint8_t *v47;
  int v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t ObjectType;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  os_log_type_t v70;
  uint8_t *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  NSObject *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  os_log_type_t v82;
  uint8_t *v83;
  uint64_t v84;
  uint8_t *v85;
  uint64_t v86;
  int v87;
  _BYTE v88[20];
  uint64_t v89;
  uint64_t v90;

  v6 = v5;
  v12 = type metadata accessor for DispatchPredicate(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v16 = (uint64_t *)((char *)&v84 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v17 = qword_100354EE8;
  *v16 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v13 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v12);
  v18 = (id)v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)(v16);
  (*(void (**)(_QWORD *, uint64_t))(v13 + 8))(v16, v12);
  if ((v17 & 1) != 0)
  {
    if (qword_100344718 == -1)
      goto LABEL_5;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100344718, sub_1001C41B8);
LABEL_5:
  v19 = a1;
  v20 = type metadata accessor for Logger(0);
  v86 = sub_10009673C(v20, (uint64_t)qword_100349A28);
  v21 = Logger.logObject.getter(v86);
  v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Updating configuration", v23, 2u);
    swift_slowDealloc(v23, -1, -1);
  }
  v24 = a2;

  if (v19 == 2 || (v19 & 1) == *(_BYTE *)(v6 + 40))
  {
    v33 = 0;
    goto LABEL_17;
  }
  *(_BYTE *)(v6 + 40) = v19 & 1;
  if ((v19 & 1) != 0)
  {
    v26 = *(_BYTE *)(v6 + 57);
    *(_BYTE *)(v6 + 57) = v26;
    if ((v26 & 1) != 0)
      goto LABEL_13;
    v25 = *(_QWORD *)(v6 + 16);
    if (!v25)
      goto LABEL_13;
  }
  else
  {
    *(_BYTE *)(v6 + 57) = 0;
    v25 = *(_QWORD *)(v6 + 16);
    if (!v25)
      goto LABEL_13;
  }
  sub_10004C548(v25);
LABEL_13:
  v27 = Logger.logObject.getter(v25);
  v31 = static os_log_type_t.info.getter(v27, v28, v29, v30);
  if (os_log_type_enabled(v27, v31))
  {
    v32 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v32 = 67109120;
    v87 = v19 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, v88, v32 + 4, v32 + 8);
    _os_log_impl((void *)&_mh_execute_header, v27, v31, "Biolockout %{BOOL}d", v32, 8u);
    swift_slowDealloc(v32, -1, -1);
  }

  v33 = 1;
LABEL_17:
  v34 = a3;
  if (v24 != 2)
  {
    v35 = v24 & 1;
    if (v35 != *(unsigned __int8 *)(v6 + 41))
    {
      *(_BYTE *)(v6 + 41) = v35;
      v36 = Logger.logObject.getter(v25);
      v40 = static os_log_type_t.info.getter(v36, v37, v38, v39);
      if (os_log_type_enabled(v36, v40))
      {
        v41 = (uint8_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v41 = 67109120;
        v87 = v35;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, v88, v41 + 4, v41 + 8);
        _os_log_impl((void *)&_mh_execute_header, v36, v40, "UWB suspended %{BOOL}d", v41, 8u);
        swift_slowDealloc(v41, -1, -1);
      }

      v33 = 1;
    }
  }
  if (v34 != 2 && (v34 & 1) != *(_BYTE *)(v6 + 56))
  {
    *(_BYTE *)(v6 + 56) = v34 & 1;
    v42 = Logger.logObject.getter(v25);
    v46 = static os_log_type_t.info.getter(v42, v43, v44, v45);
    if (os_log_type_enabled(v42, v46))
    {
      v47 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v47 = 67109120;
      v87 = v34 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, v88, v47 + 4, v47 + 8);
      _os_log_impl((void *)&_mh_execute_header, v42, v46, "Ranging limit exceeded %{BOOL}d", v47, 8u);
      swift_slowDealloc(v47, -1, -1);
    }

    v33 = 1;
  }
  v48 = a5;
  if (!a4)
    goto LABEL_52;
  v49 = *(_QWORD *)(v6 + 48);
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRetain(v49);
  v50 = sub_10016A5DC(a4, v49);
  swift_bridgeObjectRelease(v49);
  if ((v50 & 1) == 0)
  {
    v51 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 16);
    if (*(_QWORD *)(a4 + 16))
    {
      if (!v51)
      {
        swift_beginAccess(v6 + 24, &v87, 0, 0);
        v52 = *(_QWORD *)(v6 + 24);
        v53 = *(_QWORD *)(v52 + 16);
        if (v53)
        {
          swift_bridgeObjectRetain(*(_QWORD *)(v6 + 24));
          v54 = (uint64_t *)(v52 + 48);
          do
          {
            v55 = *(v54 - 1);
            v56 = *v54;
            ObjectType = swift_getObjectType(v55);
            v90 = v55;
            (*(void (**)(uint64_t, uint64_t))(v56 + 8))(ObjectType, v56);
            v54 += 3;
            --v53;
          }
          while (v53);
          swift_bridgeObjectRelease(v52);
        }
        if ((*(_BYTE *)(v6 + 59) & 1) == 0)
        {
          if (qword_100344598 != -1)
            swift_once(&qword_100344598, sub_10009F9BC);
          sub_10009FC70();
        }
      }
    }
    else if (v51)
    {
      if (qword_100344598 != -1)
        swift_once(&qword_100344598, sub_10009F9BC);
      sub_10009BF20();
      swift_beginAccess(v6 + 24, &v87, 0, 0);
      v58 = *(_QWORD *)(v6 + 24);
      v59 = *(_QWORD *)(v58 + 16);
      if (v59)
      {
        swift_bridgeObjectRetain(*(_QWORD *)(v6 + 24));
        v60 = (uint64_t *)(v58 + 48);
        do
        {
          v61 = *(v60 - 1);
          v62 = *v60;
          v63 = swift_getObjectType(v61);
          v90 = v61;
          (*(void (**)(uint64_t, uint64_t))(v62 + 16))(v63, v62);
          v60 += 3;
          --v59;
        }
        while (v59);
        swift_bridgeObjectRelease(v58);
      }
    }
    v64 = *(_QWORD *)(v6 + 48);
    *(_QWORD *)(v6 + 48) = a4;
    swift_bridgeObjectRetain_n(a4, 2);
    v65 = swift_bridgeObjectRelease(v64);
    v66 = Logger.logObject.getter(v65);
    v70 = static os_log_type_t.info.getter(v66, v67, v68, v69);
    if (!os_log_type_enabled(v66, v70))
    {

      v25 = swift_bridgeObjectRelease_n(a4, 2);
      v33 = 1;
      if (v48 == 2)
        goto LABEL_58;
      goto LABEL_53;
    }
    v71 = (uint8_t *)swift_slowAlloc(12, -1);
    v72 = swift_slowAlloc(32, -1);
    v90 = v72;
    *(_DWORD *)v71 = 136315138;
    v85 = v71 + 4;
    v73 = sub_100145B1C();
    v74 = swift_bridgeObjectRetain(a4);
    v75 = Set.description.getter(v74, &type metadata for Data, v73);
    v77 = v76;
    swift_bridgeObjectRelease(a4);
    v89 = sub_1001C56EC(v75, v77, &v90);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, &v90, v85, v71 + 12);
    swift_bridgeObjectRelease_n(a4, 2);
    swift_bridgeObjectRelease(v77);
    _os_log_impl((void *)&_mh_execute_header, v66, v70, "Express reader group identifiers %s", v71, 0xCu);
    v33 = 1;
    swift_arrayDestroy(v72, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v72, -1, -1);
    swift_slowDealloc(v71, -1, -1);

LABEL_52:
    if (v48 == 2)
      goto LABEL_58;
    goto LABEL_53;
  }
  v25 = swift_bridgeObjectRelease(a4);
  if (v48 == 2)
  {
LABEL_58:
    if ((v33 & 1) == 0)
      return;
    goto LABEL_59;
  }
LABEL_53:
  if ((v48 & 1) == *(_BYTE *)(v6 + 58))
    goto LABEL_58;
  *(_BYTE *)(v6 + 58) = v48 & 1;
  v78 = Logger.logObject.getter(v25);
  v82 = static os_log_type_t.info.getter(v78, v79, v80, v81);
  if (os_log_type_enabled(v78, v82))
  {
    v83 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v83 = 67109120;
    LODWORD(v90) = v48 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, (char *)&v90 + 4, v83 + 4, v83 + 8);
    _os_log_impl((void *)&_mh_execute_header, v78, v82, "Device is out of all geofence bubbles %{BOOL}d", v83, 8u);
    swift_slowDealloc(v83, -1, -1);
  }

LABEL_59:
  sub_1001C2B90();
}

char *sub_1001C22FC(char a1, double a2, double a3)
{
  _BYTE *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  NSObject **v9;
  void *v10;
  NSObject **v11;
  void *v12;
  void *v13;
  NSObject **v14;
  void *v15;
  NSObject **v16;
  uint64_t v17;
  void *v18;
  void **v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t);
  void *v23;
  void (*v24)();
  uint64_t v25;
  objc_super v26;

  *(_QWORD *)&v3[OBJC_IVAR____TtC10seserviced30LyonPowerExceptionHandlerClass_debounceTimer] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC10seserviced30LyonPowerExceptionHandlerClass_exceptionTimer] = 0;
  *(double *)&v3[OBJC_IVAR____TtC10seserviced30LyonPowerExceptionHandlerClass_debounceDuration] = a2;
  *(double *)&v3[OBJC_IVAR____TtC10seserviced30LyonPowerExceptionHandlerClass_exceptionDuration] = a3;
  v3[OBJC_IVAR____TtC10seserviced30LyonPowerExceptionHandlerClass_debounceActive] = 0;
  v3[OBJC_IVAR____TtC10seserviced30LyonPowerExceptionHandlerClass_exceptionActive] = 0;
  v3[OBJC_IVAR____TtC10seserviced30LyonPowerExceptionHandlerClass_exceptionTriggerStatus] = a1;
  v26.receiver = v3;
  v26.super_class = (Class)type metadata accessor for LyonPowerExceptionHandlerClass();
  v4 = objc_msgSendSuper2(&v26, "init");
  v5 = swift_allocObject(&unk_10030CEF0, 24, 7);
  swift_unknownObjectWeakInit(v5 + 16, v4);
  v6 = qword_1003447B8;
  v7 = (char *)v4;
  if (v6 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v8 = (void *)qword_100354EE8;
  v9 = (NSObject **)objc_allocWithZone((Class)SESTimer);
  v24 = sub_1001C422C;
  v25 = v5;
  v20 = _NSConcreteStackBlock;
  v21 = 1107296256;
  v22 = sub_100071C98;
  v23 = &unk_10030CF08;
  v10 = _Block_copy(&v20);
  swift_retain(v5);
  v11 = sub_10004C264(v9, v8, v10);
  _Block_release(v10);
  swift_release(v25);
  v12 = *(void **)&v7[OBJC_IVAR____TtC10seserviced30LyonPowerExceptionHandlerClass_debounceTimer];
  *(_QWORD *)&v7[OBJC_IVAR____TtC10seserviced30LyonPowerExceptionHandlerClass_debounceTimer] = v11;

  v13 = (void *)qword_100354EE8;
  v14 = (NSObject **)objc_allocWithZone((Class)SESTimer);
  v24 = sub_1001C424C;
  v25 = v5;
  v20 = _NSConcreteStackBlock;
  v21 = 1107296256;
  v22 = sub_100071C98;
  v23 = &unk_10030CF30;
  v15 = _Block_copy(&v20);
  swift_retain(v5);
  v16 = sub_10004C264(v14, v13, v15);
  _Block_release(v15);
  v17 = v25;

  swift_release(v17);
  v18 = *(void **)&v7[OBJC_IVAR____TtC10seserviced30LyonPowerExceptionHandlerClass_exceptionTimer];
  *(_QWORD *)&v7[OBJC_IVAR____TtC10seserviced30LyonPowerExceptionHandlerClass_exceptionTimer] = v16;
  swift_release(v5);

  return v7;
}

void sub_1001C2530()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(_QWORD *, uint64_t, uint64_t);
  id v10;
  void (*v11)(_QWORD *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (uint64_t *)((char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v7 = qword_100354EE8;
  *v6 = qword_100354EE8;
  v8 = enum case for DispatchPredicate.onQueue(_:);
  v9 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v3 + 104);
  v9(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v10 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  v11 = *(void (**)(_QWORD *, uint64_t))(v3 + 8);
  v11(v6, v2);
  if ((v7 & 1) != 0)
  {
    if (qword_100344718 == -1)
      goto LABEL_5;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100344718, sub_1001C41B8);
LABEL_5:
  v12 = type metadata accessor for Logger(0);
  v13 = sub_10009673C(v12, (uint64_t)qword_100349A28);
  v14 = Logger.logObject.getter(v13);
  v18 = static os_log_type_t.info.getter(v14, v15, v16, v17);
  if (os_log_type_enabled(v14, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v18, "Exception status active", v19, 2u);
    swift_slowDealloc(v19, -1, -1);
  }

  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC10seserviced30LyonPowerExceptionHandlerClass_exceptionTriggerStatus) != 1)
  {
    *(_BYTE *)(v1 + OBJC_IVAR____TtC10seserviced30LyonPowerExceptionHandlerClass_exceptionTriggerStatus) = 1;
    if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC10seserviced30LyonPowerExceptionHandlerClass_exceptionActive) & 1) != 0)
      return;
    v24 = Logger.logObject.getter(v20);
    v25 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Starting debounce", v26, 2u);
      swift_slowDealloc(v26, -1, -1);
    }

    v27 = qword_100354EE8;
    *v6 = qword_100354EE8;
    v9(v6, v8, v2);
    v28 = (id)v27;
    LOBYTE(v27) = _dispatchPreconditionTest(_:)(v6);
    v11(v6, v2);
    if ((v27 & 1) != 0)
    {
      v29 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10seserviced30LyonPowerExceptionHandlerClass_debounceTimer);
      if (v29)
      {
        sub_10004C410(v29, *(double *)(v1 + OBJC_IVAR____TtC10seserviced30LyonPowerExceptionHandlerClass_debounceDuration));
        *(_BYTE *)(v1 + OBJC_IVAR____TtC10seserviced30LyonPowerExceptionHandlerClass_debounceActive) = 1;
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return;
  }
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Exception status has not changed; doing nothing", v23, 2u);
    swift_slowDealloc(v23, -1, -1);
  }

}

void sub_1001C284C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(_QWORD *, uint64_t, uint64_t);
  id v10;
  void (*v11)(_QWORD *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (uint64_t *)((char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v7 = qword_100354EE8;
  *v6 = qword_100354EE8;
  v8 = enum case for DispatchPredicate.onQueue(_:);
  v9 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v3 + 104);
  v9(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v10 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  v11 = *(void (**)(_QWORD *, uint64_t))(v3 + 8);
  v11(v6, v2);
  if ((v7 & 1) != 0)
  {
    if (qword_100344718 == -1)
      goto LABEL_5;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100344718, sub_1001C41B8);
LABEL_5:
  v12 = type metadata accessor for Logger(0);
  v13 = sub_10009673C(v12, (uint64_t)qword_100349A28);
  v14 = Logger.logObject.getter(v13);
  v18 = static os_log_type_t.info.getter(v14, v15, v16, v17);
  if (os_log_type_enabled(v14, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v18, "Exception status inactive", v19, 2u);
    swift_slowDealloc(v19, -1, -1);
  }

  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC10seserviced30LyonPowerExceptionHandlerClass_exceptionTriggerStatus) & 1) != 0)
  {
    *(_BYTE *)(v1 + OBJC_IVAR____TtC10seserviced30LyonPowerExceptionHandlerClass_exceptionTriggerStatus) = 0;
    v21 = qword_100354EE8;
    *v6 = qword_100354EE8;
    v9(v6, v8, v2);
    v22 = (id)v21;
    LOBYTE(v21) = _dispatchPreconditionTest(_:)(v6);
    v11(v6, v2);
    if ((v21 & 1) != 0)
    {
      v23 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10seserviced30LyonPowerExceptionHandlerClass_debounceTimer);
      if (v23)
      {
        sub_10004C548(v23);
        *(_BYTE *)(v1 + OBJC_IVAR____TtC10seserviced30LyonPowerExceptionHandlerClass_debounceActive) = 0;
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    v24 = Logger.logObject.getter(v20);
    v25 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Exception status has not changed; doing nothing", v26, 2u);
      swift_slowDealloc(v26, -1, -1);
    }

  }
}

uint64_t sub_1001C2AD4()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC10seserviced30LyonPowerExceptionHandlerClass_exceptionActive);
}

uint64_t sub_1001C2AE4()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for LyonPower();
  swift_allocObject(v0, 60, 7);
  result = sub_1001C338C();
  qword_100354E20 = result;
  return result;
}

void sub_1001C2B1C(uint64_t a1)
{
  uint64_t v1;

  sub_100153344(a1);
  qword_100349A20 = v1;
}

uint64_t sub_1001C2B90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  _BYTE v13[24];

  v1 = type metadata accessor for DispatchPredicate(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  v5 = &v13[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v6 = qword_100354EE8;
  *v5 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v1);
  v7 = (id)v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v5);
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v5, v1);
  if ((v6 & 1) == 0)
  {
    __break(1u);
LABEL_18:
    swift_once(&qword_100344668, sub_1001647D0);
    goto LABEL_11;
  }
  if ((*(_BYTE *)(v0 + 59) & 1) != 0
    || (*(_BYTE *)(v0 + 41) & 1) != 0
    || (*(_BYTE *)(v0 + 57) & 1) != 0
    || !*(_QWORD *)(*(_QWORD *)(v0 + 48) + 16))
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    LOBYTE(v5) = *(_BYTE *)(v0 + 58) ^ 1;
  }
  if (qword_100344668 != -1)
    goto LABEL_18;
LABEL_11:
  if ((v5 & 1) != 0)
  {
    v8 = *(_QWORD *)(v0 + 48);
    swift_bridgeObjectRetain(v8);
  }
  else
  {
    v8 = 0;
  }
  v9 = *(_BYTE *)(v0 + 40);
  swift_beginAccess(v0 + 32, v13, 0, 0);
  v10 = *(_QWORD *)(*(_QWORD *)(v0 + 32) + 16);
  if (v10)
    LOBYTE(v10) = *(_BYTE *)(v0 + 56) ^ 1;
  sub_100164E3C(v8, v9, v10 & 1);
  return swift_bridgeObjectRelease(v8);
}

uint64_t sub_1001C2D34()
{
  uint8_t *v0;
  uint8_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  id v10;
  void (*v11)(_QWORD *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD **v16;
  char v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint8_t *v49;
  uint64_t v50;
  unsigned int v51;
  void (*v52)(_QWORD *, uint64_t, uint64_t);
  void (*v53)(_QWORD *, uint64_t);
  _QWORD *v54;
  uint64_t v55[3];
  uint64_t v56;
  _BYTE v57[24];
  char v58[24];

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (uint8_t **)((char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v7 = qword_100354EE8;
  *v6 = qword_100354EE8;
  v8 = enum case for DispatchPredicate.onQueue(_:);
  v9 = *(uint64_t **)(v3 + 104);
  ((void (*)(_QWORD *, _QWORD, uint64_t))v9)(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v10 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  v11 = *(void (**)(_QWORD *, uint64_t))(v3 + 8);
  v11(v6, v2);
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_29:
    swift_once(&qword_100344718, sub_1001C41B8);
    goto LABEL_15;
  }
  v51 = v8;
  v52 = (void (*)(_QWORD *, uint64_t, uint64_t))v9;
  v53 = v11;
  v54 = v6;
  v9 = (uint64_t *)(v1 + 32);
  swift_beginAccess(v1 + 32, v58, 1, 0);
  v12 = *((_QWORD *)v1 + 4);
  *((_QWORD *)v1 + 4) = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v12);
  swift_beginAccess(v1 + 24, v57, 0, 0);
  v13 = *((_QWORD *)v1 + 3);
  v14 = *(_QWORD *)(v13 + 16);
  if (v14)
  {
    v49 = v1;
    v50 = v2;
    v15 = swift_bridgeObjectRetain(v13);
    v16 = (_QWORD **)(v13 + 40);
    do
    {
      v17 = *((_BYTE *)v16 - 8);
      v18 = *v16;
      v15 = (*(uint64_t (**)(uint64_t))((swift_isaMask & **v16) + 0xE8))(v15);
      if ((v15 & 1) != 0)
      {
        swift_beginAccess(v9, v55, 33, 0);
        v19 = (_QWORD *)*v9;
        v20 = v18;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v19);
        *v9 = (uint64_t)v19;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v19 = sub_1001C54F0(0, v19[2] + 1, 1, v19, &qword_100349B68);
          *v9 = (uint64_t)v19;
        }
        v23 = v19[2];
        v22 = v19[3];
        if (v23 >= v22 >> 1)
        {
          v19 = sub_1001C54F0((_QWORD *)(v22 > 1), v23 + 1, 1, v19, &qword_100349B68);
          *v9 = (uint64_t)v19;
        }
        v19[2] = v23 + 1;
        *((_BYTE *)v19 + v23 + 32) = v17;
        swift_endAccess(v55);

      }
      v16 += 3;
      --v14;
    }
    while (v14);
    swift_bridgeObjectRelease(v13);
    v1 = v49;
    v2 = v50;
  }
  if (qword_100344718 != -1)
    goto LABEL_29;
LABEL_15:
  v24 = type metadata accessor for Logger(0);
  sub_10009673C(v24, (uint64_t)qword_100349A28);
  v25 = swift_retain_n(v1, 2);
  v26 = Logger.logObject.getter(v25);
  v30 = static os_log_type_t.info.getter(v26, v27, v28, v29);
  if (os_log_type_enabled(v26, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc(12, -1);
    v50 = swift_slowAlloc(32, -1);
    v55[0] = v50;
    *(_DWORD *)v31 = 136315138;
    v49 = v31 + 4;
    v32 = *((_QWORD *)v1 + 4);
    v33 = swift_bridgeObjectRetain(v32);
    v34 = v1;
    v35 = Array.description.getter(v33, &type metadata for LyonException);
    v37 = v36;
    swift_bridgeObjectRelease(v32);
    v56 = sub_1001C56EC(v35, v37, v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57, v49, v31 + 12);
    swift_release_n(v34, 2);
    swift_bridgeObjectRelease(v37);
    _os_log_impl((void *)&_mh_execute_header, v26, v30, "Active Exceptions %s", v31, 0xCu);
    v38 = v50;
    swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v31, -1, -1);

  }
  else
  {

    swift_release_n(v1, 2);
  }
  v39 = v51;
  sub_1001C2B90();
  if (qword_100344598 != -1)
    swift_once(&qword_100344598, sub_10009F9BC);
  v40 = *v9;
  v41 = qword_100354EE8;
  v42 = v54;
  *v54 = qword_100354EE8;
  v52(v42, v39, v2);
  swift_bridgeObjectRetain(v40);
  v43 = (id)v41;
  LOBYTE(v41) = _dispatchPreconditionTest(_:)(v42);
  v53(v42, v2);
  if ((v41 & 1) != 0)
  {
    if (qword_100344690 == -1)
      goto LABEL_22;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100344690, sub_100182BE4);
LABEL_22:
  v44 = *(_QWORD *)(v40 + 16);
  if (v44)
  {
    v45 = 0;
    v46 = (char *)(v40 + 32);
    do
    {
      v47 = *v46++;
      v45 |= qword_10028CB60[v47];
      --v44;
    }
    while (v44);
  }
  else
  {
    v45 = 0;
  }
  sub_100182698(v45, 1uLL);
  return swift_bridgeObjectRelease(v40);
}

uint64_t sub_1001C321C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  _BYTE v13[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v13, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v3 = result;
    if (qword_100344718 != -1)
      swift_once(&qword_100344718, sub_1001C41B8);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10009673C(v4, (uint64_t)qword_100349A28);
    v6 = Logger.logObject.getter(v5);
    v10 = static os_log_type_t.info.getter(v6, v7, v8, v9);
    if (os_log_type_enabled(v6, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v11 = 134217984;
      if (qword_100344710 != -1)
        swift_once(&qword_100344710, sub_1001C2B1C);
      v12 = qword_100349A20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, v13, v11 + 4, v11 + 12);
      _os_log_impl((void *)&_mh_execute_header, v6, v10, "Ending biolockout backoff for %f seconds for Lyon", v11, 0xCu);
      swift_slowDealloc(v11, -1, -1);
    }

    *(_BYTE *)(v3 + 57) = 0;
    sub_1001C2B90();
    return swift_release(v3);
  }
  return result;
}

uint64_t sub_1001C338C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  _QWORD aBlock[5];
  uint64_t v12;

  v1 = v0;
  v2 = type metadata accessor for DispatchQoS.QoSClass(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v0 + 32) = _swiftEmptyArrayStorage;
  *(_WORD *)(v0 + 40) = 0;
  *(_QWORD *)(v0 + 48) = &_swiftEmptySetSingleton;
  sub_100071AEC();
  *(_DWORD *)(v0 + 56) = 0;
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchQoS.QoSClass.default(_:), v2);
  v7 = (void *)static OS_dispatch_queue.global(qos:)(v6);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  aBlock[4] = sub_1001C6F98;
  v12 = v1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10017BF6C;
  aBlock[3] = &unk_10030CFA8;
  v8 = _Block_copy(aBlock);
  v9 = v12;
  swift_retain(v1);
  swift_release(v9);
  os_state_add_handler(v7, v8);
  _Block_release(v8);

  return v1;
}

unint64_t sub_1001C34D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  int64_t v27;
  _QWORD *v28;
  void **v29;
  char v30;
  void *v31;
  id v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  Class isa;
  _DWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[2];
  uint64_t v55;
  uint64_t v56;
  void *v57;
  _OWORD v58[2];
  _QWORD v59[2];
  uint64_t v60;
  uint64_t v61;
  char v62[24];
  __int128 v63;
  uint64_t v64;

  v1 = v0;
  swift_beginAccess(v0 + 32, v62, 0, 0);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v2 + 16);
  v4 = _swiftEmptyArrayStorage;
  if (v3)
  {
    v52 = v1;
    *(_QWORD *)&v63 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v2);
    sub_100192B70(0, v3, 0);
    sub_100063D3C(&qword_100348988);
    v5 = 0;
    while (1)
    {
      v6 = v2;
      v7 = *(_BYTE *)(v2 + v5 + 32);
      strcpy((char *)v59, "exception type");
      HIBYTE(v59[1]) = -18;
      LOBYTE(v58[0]) = v7;
      v60 = String.init<A>(describing:)(v58, &type metadata for LyonException);
      v61 = v8;
      v9 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(1);
      v10 = v59[0];
      v11 = v59[1];
      v12 = v60;
      v13 = v61;
      swift_retain(v9);
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRetain(v13);
      result = sub_100187ED0(v10, v11);
      if ((v15 & 1) != 0)
        break;
      v9[(result >> 6) + 8] |= 1 << result;
      v16 = (uint64_t *)(v9[6] + 16 * result);
      *v16 = v10;
      v16[1] = v11;
      v17 = (uint64_t *)(v9[7] + 16 * result);
      *v17 = v12;
      v17[1] = v13;
      v18 = v9[2];
      v19 = __OFADD__(v18, 1);
      v20 = v18 + 1;
      if (v19)
        goto LABEL_23;
      v9[2] = v20;
      v21 = sub_100063D3C(&qword_100349B88);
      swift_arrayDestroy(v59, 1, v21);
      swift_release(v9);
      v4 = (_QWORD *)v63;
      if ((swift_isUniquelyReferenced_nonNull_native(v63) & 1) == 0)
      {
        sub_100192B70(0, v4[2] + 1, 1);
        v4 = (_QWORD *)v63;
      }
      v2 = v6;
      v23 = v4[2];
      v22 = v4[3];
      if (v23 >= v22 >> 1)
      {
        sub_100192B70(v22 > 1, v23 + 1, 1);
        v4 = (_QWORD *)v63;
      }
      ++v5;
      v4[2] = v23 + 1;
      v4[v23 + 4] = v9;
      if (v3 == v5)
      {
        swift_bridgeObjectRelease(v6);
        v1 = v52;
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
  }
  else
  {
LABEL_11:
    v24 = sub_100063D3C(&qword_100349B90);
    v64 = v24;
    *(_QWORD *)&v63 = v4;
    sub_10006C2B4(&v63, v58);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    v57 = &_swiftEmptyDictionarySingleton;
    sub_10018DEC0(v58, 0xD000000000000010, 0x80000001002BEB50, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease(0x8000000000000000);
    swift_beginAccess(v1 + 24, &v57, 0, 0);
    v26 = *(_QWORD *)(v1 + 24);
    v27 = *(_QWORD *)(v26 + 16);
    v28 = _swiftEmptyArrayStorage;
    if (!v27)
    {
LABEL_21:
      v64 = v24;
      *(_QWORD *)&v63 = v28;
      sub_10006C2B4(&v63, v58);
      v47 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
      sub_10018DEC0(v58, 0xD000000000000013, 0x80000001002C02A0, v47);
      swift_bridgeObjectRelease(0x8000000000000000);
      v48 = sub_10017D088((uint64_t)&_swiftEmptyDictionarySingleton);
      swift_bridgeObjectRelease(&_swiftEmptyDictionarySingleton);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v48);
      v50 = sub_100015734((uint64_t)"lyonPower.state", (uint64_t)isa);

      return (unint64_t)v50;
    }
    v53 = v24;
    *(_QWORD *)&v63 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v26);
    sub_100192B70(0, v27, 0);
    sub_100063D3C(&qword_100348988);
    v51 = v26;
    v29 = (void **)(v26 + 40);
    while (1)
    {
      v30 = *((_BYTE *)v29 - 8);
      v31 = *v29;
      strcpy((char *)v54, "exception type");
      HIBYTE(v54[1]) = -18;
      LOBYTE(v58[0]) = v30;
      v32 = v31;
      v55 = String.init<A>(describing:)(v58, &type metadata for LyonException);
      v56 = v33;
      v34 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(1);
      v35 = v54[0];
      v36 = v54[1];
      v38 = v55;
      v37 = v56;
      swift_retain(v34);
      swift_bridgeObjectRetain(v36);
      swift_bridgeObjectRetain(v37);
      result = sub_100187ED0(v35, v36);
      if ((v39 & 1) != 0)
        break;
      v34[(result >> 6) + 8] |= 1 << result;
      v40 = (uint64_t *)(v34[6] + 16 * result);
      *v40 = v35;
      v40[1] = v36;
      v41 = (uint64_t *)(v34[7] + 16 * result);
      *v41 = v38;
      v41[1] = v37;
      v42 = v34[2];
      v19 = __OFADD__(v42, 1);
      v43 = v42 + 1;
      if (v19)
        goto LABEL_25;
      v34[2] = v43;
      v44 = sub_100063D3C(&qword_100349B88);
      swift_arrayDestroy(v54, 1, v44);

      swift_release(v34);
      v28 = (_QWORD *)v63;
      if ((swift_isUniquelyReferenced_nonNull_native(v63) & 1) == 0)
      {
        sub_100192B70(0, v28[2] + 1, 1);
        v28 = (_QWORD *)v63;
      }
      v46 = v28[2];
      v45 = v28[3];
      if (v46 >= v45 >> 1)
      {
        sub_100192B70(v45 > 1, v46 + 1, 1);
        v28 = (_QWORD *)v63;
      }
      v28[2] = v46 + 1;
      v28[v46 + 4] = v34;
      v29 += 3;
      if (!--v27)
      {
        swift_bridgeObjectRelease(v51);
        v24 = v53;
        goto LABEL_21;
      }
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1001C3A2C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocClassInstance(v0, 60, 7);
}

uint64_t type metadata accessor for LyonPower()
{
  return objc_opt_self(_TtC10seserviced9LyonPower);
}

void sub_1001C3A88(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t Strong;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  _BYTE v27[24];

  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = &v27[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a1 += 16;
  swift_beginAccess(a1, v27, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a1);
  if (Strong)
  {
    v8 = (_BYTE *)Strong;
    *(_BYTE *)(Strong + OBJC_IVAR____TtC10seserviced30LyonPowerExceptionHandlerClass_debounceActive) = 0;
    if ((*(_BYTE *)(Strong + OBJC_IVAR____TtC10seserviced30LyonPowerExceptionHandlerClass_exceptionTriggerStatus) & 1) == 0)
    {
      if (qword_100344718 != -1)
        swift_once(&qword_100344718, sub_1001C41B8);
      v9 = type metadata accessor for Logger(0);
      v10 = sub_10009673C(v9, (uint64_t)qword_100349A28);
      v11 = Logger.logObject.getter(v10);
      v13 = static os_log_type_t.error.getter(v11, v12);
      if (os_log_type_enabled(v11, v13))
      {
        v14 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v14 = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, v13, "If exception source status is false, debounce should have been cancelled; we should not be here",
          v14,
          2u);
        swift_slowDealloc(v14, -1, -1);
      }

    }
    if (qword_100344718 != -1)
      swift_once(&qword_100344718, sub_1001C41B8);
    v15 = type metadata accessor for Logger(0);
    v16 = sub_10009673C(v15, (uint64_t)qword_100349A28);
    v17 = Logger.logObject.getter(v16);
    v21 = static os_log_type_t.info.getter(v17, v18, v19, v20);
    if (os_log_type_enabled(v17, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v21, "Starting exception", v22, 2u);
      swift_slowDealloc(v22, -1, -1);
    }

    if (qword_1003447B8 != -1)
      swift_once(&qword_1003447B8, sub_1001EEFA4);
    v23 = qword_100354EE8;
    *v6 = qword_100354EE8;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
    v24 = (id)v23;
    LOBYTE(v23) = _dispatchPreconditionTest(_:)(v6);
    (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
    if ((v23 & 1) != 0)
    {
      v25 = *(_QWORD *)&v8[OBJC_IVAR____TtC10seserviced30LyonPowerExceptionHandlerClass_exceptionTimer];
      if (!v25)
      {
        __break(1u);
        return;
      }
      sub_10004C410(v25, *(double *)&v8[OBJC_IVAR____TtC10seserviced30LyonPowerExceptionHandlerClass_exceptionDuration]);
      v8[OBJC_IVAR____TtC10seserviced30LyonPowerExceptionHandlerClass_exceptionActive] = 1;
      if (qword_100344708 == -1)
        goto LABEL_17;
    }
    else
    {
      __break(1u);
    }
    swift_once(&qword_100344708, sub_1001C2AE4);
LABEL_17:
    sub_1001C2D34();

  }
}

void sub_1001C3D78(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (void *)Strong;
    *(_BYTE *)(Strong + OBJC_IVAR____TtC10seserviced30LyonPowerExceptionHandlerClass_exceptionActive) = 0;
    if (qword_100344708 != -1)
      swift_once(&qword_100344708, sub_1001C2AE4);
    sub_1001C2D34();

  }
}

id sub_1001C3E30()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LyonPowerExceptionHandlerClass();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for LyonPowerExceptionHandlerClass()
{
  return objc_opt_self(_TtC10seserviced30LyonPowerExceptionHandlerClass);
}

uint64_t destroy for LyonPowerConfigStates(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

uint64_t _s10seserviced21LyonPowerConfigStatesVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_WORD *)a1 = *(_WORD *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_WORD *)(a1 + 17) = *(_WORD *)(a2 + 17);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for LyonPowerConfigStates(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  return a1;
}

__n128 initializeWithTake for LyonPowerConfigStates(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_DWORD *)(a1 + 15) = *(_DWORD *)(a2 + 15);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for LyonPowerConfigStates(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  return a1;
}

uint64_t getEnumTagSinglePayload for LyonPowerConfigStates(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 19))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LyonPowerConfigStates(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 18) = 0;
    *(_WORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 19) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 19) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LyonPowerConfigStates()
{
  return &type metadata for LyonPowerConfigStates;
}

uint64_t storeEnumTagSinglePayload for LyonException(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1001C40CC + 4 * byte_10028CA35[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1001C4100 + 4 * byte_10028CA30[v4]))();
}

uint64_t sub_1001C4100(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001C4108(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001C4110);
  return result;
}

uint64_t sub_1001C411C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001C4124);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1001C4128(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001C4130(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LyonException()
{
  return &type metadata for LyonException;
}

unint64_t sub_1001C4150()
{
  unint64_t result;

  result = qword_100349B60;
  if (!qword_100349B60)
  {
    result = swift_getWitnessTable(&unk_10028CB34, &type metadata for LyonException);
    atomic_store(result, (unint64_t *)&qword_100349B60);
  }
  return result;
}

uint64_t sub_1001C4194()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001C41B8()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Logger(0);
  sub_1000980F8(v0, qword_100349A28);
  sub_10009673C(v0, (uint64_t)qword_100349A28);
  v1 = String.init(cString:)(SESLoggingSubsystem);
  return Logger.init(subsystem:category:)(v1);
}

void sub_1001C422C()
{
  uint64_t v0;

  sub_1001C3A88(v0);
}

uint64_t sub_1001C4234(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001C4244(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_1001C424C()
{
  uint64_t v0;

  sub_1001C3D78(v0);
}

_QWORD *sub_1001C4254(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100063D3C(&qword_100348980);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1001C5E94(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1001C4360(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100063D3C(&qword_100348A68);
      v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4])
          memmove(v14, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1001C608C(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1001C446C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100063D3C(&qword_100349B70);
      v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4])
          memmove(v13, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1001C6174(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1001C4590(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100063D3C((uint64_t *)&unk_100348920);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1001C5DA4(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1001C469C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100063D3C(&qword_100349B80);
      v11 = (_QWORD *)swift_allocObject(v10, 32 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 1;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 5);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v8 + 4])
          memmove(v14, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1001C638C(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1001C47A8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100063D3C(&qword_100349BA8);
      v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4])
          memmove(v13, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1001C647C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1001C48CC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100063D3C(&qword_100349B98);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1001C6588(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1001C49D8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100063D3C((uint64_t *)&unk_100348910);
      v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4])
          memmove(v14, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1001C5F84(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1001C4AE4(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100063D3C((uint64_t *)&unk_1003489B0);
      v11 = (_QWORD *)swift_allocObject(v10, 56 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 56);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[7 * v8 + 4])
          memmove(v13, a4 + 4, 56 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1001C6280(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1001C4C0C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100063D3C((uint64_t *)&unk_100346040);
      v11 = (_QWORD *)swift_allocObject(v10, 48 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 48);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[6 * v8 + 4])
          memmove(v13, a4 + 4, 48 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1001C6778(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1001C4D30(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1001C54F0(a1, a2, a3, a4, &qword_100346F90);
}

_QWORD *sub_1001C4D3C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100063D3C((uint64_t *)&unk_100347440);
      v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[5 * v8 + 4])
          memmove(v13, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1001C698C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1001C4E5C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100063D3C(&qword_100349BD0);
      v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4])
          memmove(v14, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1001C6B74(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1001C4F68(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100063D3C(&qword_100348A90);
      v11 = (_QWORD *)swift_allocObject(v10, 72 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 72);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[9 * v8 + 4])
          memmove(v13, a4 + 4, 72 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1001C6A80(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1001C508C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100063D3C(&qword_100348A80);
      v11 = (_QWORD *)swift_allocObject(v10, 48 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 48);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[6 * v8 + 4])
          memmove(v13, a4 + 4, 48 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1001C6C64(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001C51B0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1001C52E4(a1, a2, a3, a4, &qword_100349BC8, type metadata accessor for SESTLKShareData);
}

_QWORD *sub_1001C51C4(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100063D3C(&qword_100349BB8);
      v11 = (_QWORD *)swift_allocObject(v10, (v9 << 6) | 0x20, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 + 31;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 6);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[8 * v8 + 4])
          memmove(v14, a4 + 4, v8 << 6);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1001C6884(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001C52D0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1001C52E4(a1, a2, a3, a4, &qword_100349BD8, (uint64_t (*)(_QWORD))&type metadata accessor for JPKIInternalTypes.CertificateType);
}

uint64_t sub_1001C52E4(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_100063D3C(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
    goto LABEL_29;
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = a6(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (unint64_t)v18 + v23;
  if ((a1 & 1) != 0)
  {
    v25 = a4 + v23;
    if ((unint64_t)v18 < a4 || v24 >= v25 + *(_QWORD *)(v22 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v18 + v23, v25, v11, v21);
    }
    else if (v18 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v18 + v23);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1001C6D70(0, v11, v24, a4, a6);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v18;
}

_QWORD *sub_1001C54F0(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  _QWORD *v12;
  size_t v13;
  _QWORD *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      v11 = sub_100063D3C(a5);
      v12 = (_QWORD *)swift_allocObject(v11, v10 + 32, 7);
      v13 = j__malloc_size(v12);
      v12[2] = v9;
      v12[3] = 2 * v13 - 64;
      v14 = v12 + 4;
      if ((v6 & 1) != 0)
      {
LABEL_13:
        if (v12 != a4 || v14 >= (_QWORD *)((char *)a4 + v9 + 32))
          memmove(v14, a4 + 4, v9);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v12 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1001C6E88(0, v9, (char *)v14, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v12;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1001C55E4(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  int64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100063D3C(&qword_100348A20);
      v11 = (_QWORD *)swift_allocObject(v10, 2 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 31;
      v11[2] = v8;
      v11[3] = v13 & 0xFFFFFFFFFFFFFFFELL;
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= (_QWORD *)((char *)a4 + 2 * v8 + 32))
          memmove(v14, a4 + 4, 2 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1001C6690(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001C56EC(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  void *ObjectType;

  v6 = sub_1001C57BC(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_100096CB0((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_100096CB0((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_10006BA9C(v12);
  return v7;
}

uint64_t sub_1001C57BC(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_1001C5974(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v14, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

uint64_t sub_1001C5974(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_1001C5A08(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_1001C5C58(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_1001C5C58(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_1001C5A08(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_1001C5B7C(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return _swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_1001C5B7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return _swiftEmptyArrayStorage;
  v4 = sub_100063D3C(&qword_100346F90);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_1001C5BE0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v5 = a1;
  v6 = a1 >> 16;
  v7 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v13 = String.UTF16View.index(_:offsetBy:)(15, v6, a2);
    v14 = v13 + (v7 << 16);
    v15 = v13 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v16 = v14 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v16 = v15;
    return v16 | 4;
  }
  else
  {
    v8 = String.UTF8View._foreignIndex(_:offsetBy:)(15, v6);
    v9 = v8 + (v7 << 16);
    v10 = v8 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v11 = v9 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v11 = v10;
    return v11 | 8;
  }
}

uint64_t sub_1001C5C58(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100063D3C(&qword_100346F90);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001C5DA4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1001C5E94(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1001C5F84(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + 8 * a1 + 32;
    v7 = a3 + 8 * v4;
    if (v6 >= v7 || v6 + 8 * v4 <= a3)
    {
      sub_100063D3C(&qword_100345388);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

char *sub_1001C608C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1001C6174(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 24 * a1 + 32;
  v7 = a3 + 24 * v4;
  if (v6 >= v7 || v6 + 24 * v4 <= a3)
  {
    sub_100063D3C(&qword_100349B78);
    swift_arrayInitWithCopy(a3);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1001C6280(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 56 * a1 + 32;
  v7 = a3 + 56 * v4;
  if (v6 >= v7 || v6 + 56 * v4 <= a3)
  {
    sub_100063D3C(&qword_100344DD8);
    swift_arrayInitWithCopy(a3);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1001C638C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1001C647C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 24 * a1 + 32;
  v7 = a3 + 24 * v4;
  if (v6 >= v7 || v6 + 24 * v4 <= a3)
  {
    sub_100063D3C(&qword_100349BB0);
    swift_arrayInitWithCopy(a3);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1001C6588(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + 16 * a1 + 32;
    v7 = a3 + 16 * v4;
    if (v6 >= v7 || v6 + 16 * v4 <= a3)
    {
      sub_100063D3C(&qword_100349BA0);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

char *sub_1001C6690(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + 2 * a1 + 32);
    v6 = 2 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1001C6778(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 48 * a1 + 32;
  v7 = a3 + 48 * v4;
  if (v6 >= v7 || v6 + 48 * v4 <= a3)
  {
    sub_100063D3C(&qword_1003461B8);
    swift_arrayInitWithCopy(a3);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1001C6884(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + (a1 << 6) + 32;
    v7 = a3 + (v4 << 6);
    if (v6 >= v7 || v6 + (v4 << 6) <= a3)
    {
      sub_100063D3C(&qword_100349BC0);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1001C698C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 40 * a1 + 32;
  v6 = a3 + 40 * v4;
  if (v5 >= v6 || v5 + 40 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1001C6A80(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 72 * a1 + 32;
  v6 = a3 + 72 * v4;
  if (v5 >= v6 || v5 + 72 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1001C6B74(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 8 * a1 + 32;
    v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1001C6C64(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 48 * a1 + 32;
  v7 = a3 + 48 * v4;
  if (v6 >= v7 || v6 + 48 * v4 <= a3)
  {
    sub_100063D3C(&qword_100348A88);
    swift_arrayInitWithCopy(a3);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1001C6D70(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(a5(0) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 72);
  v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_1001C6E88(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if ((v4 & 0x8000000000000000) != 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1001C6F6C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001C6F90()
{
  uint64_t v0;

  return sub_1001C321C(v0);
}

void (*sub_1001C6FB4(_QWORD *a1, uint64_t a2, unint64_t a3))(_QWORD *a1)
{
  _QWORD *v6;

  v6 = malloc(0x38uLL);
  *a1 = v6;
  v6[4] = a2;
  v6[5] = a3;
  sub_100063C8C(a2, a3);
  v6[6] = sub_1001C96CC(v6, a2, a3);
  return sub_1001C7024;
}

void sub_1001C7024(_QWORD *a1)
{
  void *v1;
  unint64_t v2;
  uint64_t v3;

  v1 = (void *)*a1;
  v2 = *(_QWORD *)(*a1 + 40);
  v3 = *(_QWORD *)(*a1 + 32);
  (*(void (**)(_QWORD, _QWORD))(*a1 + 48))(*a1, 0);
  sub_100063CD0(v3, v2);
  free(v1);
}

uint64_t sub_1001C706C(id *a1)
{
  id v1;
  uint64_t result;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v1 = *a1;
  if (objc_msgSend(*a1, "endPointType") != (id)1)
    return 0;
  result = (uint64_t)objc_msgSend(v1, "supportedRKEFunctions");
  if (result)
  {

    result = (uint64_t)objc_msgSend(v1, "readerIdentifier");
    if (result)
    {
      v3 = (void *)result;
      v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)(result);
      v6 = v5;

      sub_100063CD0(v4, v6);
      return 1;
    }
  }
  return result;
}

void sub_1001C7110(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  id v10;
  unint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  os_log_type_t v15;
  uint8_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[24];
  _BYTE v27[24];

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = &v26[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v9 = qword_100354EE8;
  *v8 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) != 0)
  {
    if (a1)
    {
      v11 = *(_QWORD *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
      if (v11 >> 60 == 15)
      {
        v12 = swift_retain(a1);
        v13 = Logger.logObject.getter(v12);
        v15 = static os_log_type_t.error.getter(v13, v14);
        if (os_log_type_enabled(v13, v15))
        {
          v16 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v16 = 0;
          _os_log_impl((void *)&_mh_execute_header, v13, v15, "Missing peer key identifier", v16, 2u);
          swift_slowDealloc(v16, -1, -1);
        }
        swift_release(a1);

      }
      else
      {
        v23 = *(_QWORD *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
        swift_beginAccess(v2 + OBJC_IVAR____TtC10seserviced13AlishaVehicle_status, v27, 33, 0);
        sub_10006BA34(v23, v11);
        sub_10006BA34(v23, v11);
        swift_retain(a1);
        v24 = sub_10012EC60(v23, v11);
        swift_endAccess(v27);
        sub_10006B9B4(v23, v11);
        swift_bridgeObjectRelease(v24);
        swift_beginAccess(v2 + OBJC_IVAR____TtC10seserviced13AlishaVehicle_proprietaryData, v27, 33, 0);
        sub_100063C8C(v23, v11);
        v25 = sub_10012EB7C(v23, v11);
        swift_endAccess(v27);
        sub_10006B9B4(v23, v11);
        swift_bridgeObjectRelease(v25);
        sub_10006B9B4(v23, v11);
        swift_release(a1);
      }
    }
    else
    {
      v17 = sub_10017CB68((uint64_t)_swiftEmptyArrayStorage);
      v18 = (unint64_t *)(v2 + OBJC_IVAR____TtC10seserviced13AlishaVehicle_status);
      swift_beginAccess(v2 + OBJC_IVAR____TtC10seserviced13AlishaVehicle_status, v27, 1, 0);
      v19 = *v18;
      *v18 = v17;
      swift_bridgeObjectRelease(v19);
      v20 = sub_10017CB74((uint64_t)_swiftEmptyArrayStorage);
      v21 = (unint64_t *)(v2 + OBJC_IVAR____TtC10seserviced13AlishaVehicle_proprietaryData);
      swift_beginAccess(v2 + OBJC_IVAR____TtC10seserviced13AlishaVehicle_proprietaryData, v26, 1, 0);
      v22 = *v21;
      *v21 = v20;
      swift_bridgeObjectRelease(v22);
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1001C7400()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for AlishaVehicle(0);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  result = sub_1001C743C();
  qword_100354E28 = result;
  return result;
}

uint64_t sub_1001C743C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  _QWORD aBlock[5];
  uint64_t v13;

  v1 = v0;
  v2 = type metadata accessor for DispatchQoS.QoSClass(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = String.init(cString:)(SESLoggingSubsystem);
  Logger.init(subsystem:category:)(v7);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced13AlishaVehicle_status) = &_swiftEmptyDictionarySingleton;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced13AlishaVehicle_proprietaryData) = &_swiftEmptyDictionarySingleton;
  sub_10006C25C(0, (unint64_t *)&qword_1003461A0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchQoS.QoSClass.default(_:), v2);
  v8 = (void *)static OS_dispatch_queue.global(qos:)(v6);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  aBlock[4] = sub_1001C96B0;
  v13 = v1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10017BF6C;
  aBlock[3] = &unk_10030D008;
  v9 = _Block_copy(aBlock);
  v10 = v13;
  swift_retain(v1);
  swift_release(v10);
  os_state_add_handler(v8, v9);
  _Block_release(v9);

  return v1;
}

_DWORD *sub_1001C75D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  Class isa;
  _DWORD *v10;
  void *v12;
  _OWORD v13[2];
  _BYTE v14[24];
  __int128 v15;
  uint64_t v16;

  v1 = v0;
  v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC10seserviced13AlishaVehicle_status);
  swift_beginAccess(v2, v14, 0, 0);
  v3 = *v2;
  v16 = sub_100063D3C(&qword_100349CB8);
  *(_QWORD *)&v15 = v3;
  sub_10006C2B4(&v15, v13);
  swift_bridgeObjectRetain(v3);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  v12 = &_swiftEmptyDictionarySingleton;
  sub_10018DEC0(v13, 0x737574617473, 0xE600000000000000, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease(0x8000000000000000);
  v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC10seserviced13AlishaVehicle_proprietaryData);
  swift_beginAccess(v5, &v12, 0, 0);
  v6 = *v5;
  v16 = sub_100063D3C(&qword_100349CC0);
  *(_QWORD *)&v15 = v6;
  sub_10006C2B4(&v15, v13);
  swift_bridgeObjectRetain(v6);
  v7 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_10018DEC0(v13, 0x74656972706F7270, 0xEF61746144797261, v7);
  swift_bridgeObjectRelease(0x8000000000000000);
  v8 = sub_10017D088((uint64_t)&_swiftEmptyDictionarySingleton);
  swift_bridgeObjectRelease(&_swiftEmptyDictionarySingleton);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v8);
  v10 = sub_100015734((uint64_t)"alishavehicle.state", (uint64_t)isa);

  return v10;
}

void sub_1001C7778(char a1, unsigned __int16 a2, unint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  os_log_type_t v21;
  uint64_t v22;
  _QWORD **v23;
  NSObject *v24;
  uint64_t v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  char v29;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v31;
  char v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t inited;
  unint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE v49[40];
  unsigned __int16 v50;
  _BYTE v51[6];

  v4 = v3;
  v8 = type metadata accessor for DispatchPredicate(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (uint64_t *)((char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v13 = (void *)qword_100354EE8;
  *v12 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8);
  v14 = v13;
  v15 = _dispatchPreconditionTest(_:)(v12);
  v16 = (*(uint64_t (**)(_QWORD *, uint64_t))(v9 + 8))(v12, v8);
  if ((v15 & 1) == 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  v17 = Logger.logObject.getter(v16);
  v21 = static os_log_type_t.info.getter(v17, v18, v19, v20);
  if (os_log_type_enabled(v17, v21))
  {
    v9 = swift_slowAlloc(9, -1);
    *(_DWORD *)v9 = 33554944;
    v50 = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51, v9 + 4, v9 + 6);
    *(_WORD *)(v9 + 6) = 256;
    LOBYTE(v50) = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, (char *)&v50 + 1, v9 + 8, v9 + 9);
    _os_log_impl((void *)&_mh_execute_header, v17, v21, "Vehicle function %hu status %hhu", (uint8_t *)v9, 9u);
    swift_slowDealloc(v9, -1, -1);
  }

  v23 = (_QWORD **)(a3 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
  a3 = *(_QWORD *)(a3 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
  if (a3 >> 60 != 15)
  {
    v12 = *v23;
    v4 = (_QWORD *)((char *)v4 + OBJC_IVAR____TtC10seserviced13AlishaVehicle_status);
    swift_beginAccess(v4, &v50, 32, 0);
    v28 = *(_QWORD *)(*v4 + 16);
    sub_100063C8C((uint64_t)v12, a3);
    if (v28)
    {
      sub_100063C8C((uint64_t)v12, a3);
      sub_100187F6C((uint64_t)v12, a3);
      if ((v29 & 1) != 0)
      {
        swift_endAccess(&v50);
        sub_10006B9B4((uint64_t)v12, a3);
        swift_beginAccess(v4, &v50, 33, 0);
        sub_100063C8C((uint64_t)v12, a3);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
        v48 = *v4;
        v31 = v48;
        *v4 = 0x8000000000000000;
        sub_100063C8C((uint64_t)v12, a3);
        v15 = sub_100187F6C((uint64_t)v12, a3);
        v33 = *(_QWORD *)(v31 + 16);
        v34 = (v32 & 1) == 0;
        v35 = v33 + v34;
        if (!__OFADD__(v33, v34))
        {
          LOBYTE(v9) = v32;
          if (*(_QWORD *)(v31 + 24) < v35)
          {
            sub_10018BD70(v35, isUniquelyReferenced_nonNull_native);
            v36 = sub_100187F6C((uint64_t)v12, a3);
            if ((v9 & 1) != (v37 & 1))
            {
LABEL_27:
              KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Data);
              __break(1u);
              return;
            }
            v15 = v36;
            if ((v9 & 1) == 0)
            {
LABEL_26:
              __break(1u);
              goto LABEL_27;
            }
            goto LABEL_21;
          }
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            if ((v32 & 1) == 0)
              goto LABEL_26;
            goto LABEL_21;
          }
LABEL_25:
          sub_1001916B0();
          if ((v9 & 1) == 0)
            goto LABEL_26;
LABEL_21:
          v43 = *(_QWORD *)(*(_QWORD *)(v48 + 56) + 8 * v15);
          v44 = swift_isUniquelyReferenced_nonNull_native(v43);
          v46 = v43;
          sub_10018F294(a1, a2, v44);
          v47 = v46;
          swift_bridgeObjectRelease(0x8000000000000000);
          sub_1001C9958(&v47, 1, &v48, v15, (uint64_t)v12, a3, (void (*)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))sub_10018FBBC, (void (*)(uint64_t, _QWORD))sub_10012FE74);
          swift_bridgeObjectRelease(v47);
          sub_10006B9B4((uint64_t)v12, a3);
          *v4 = v48;
          swift_endAccess(&v50);
          sub_10006B9B4((uint64_t)v12, a3);
          goto LABEL_22;
        }
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      sub_10006B9B4((uint64_t)v12, a3);
    }
    swift_endAccess(&v50);
    v38 = sub_100063D3C(&qword_100349CD8);
    inited = swift_initStackObject(v38, v49);
    *(_OWORD *)(inited + 16) = xmmword_1002888E0;
    *(_WORD *)(inited + 32) = a2;
    *(_BYTE *)(inited + 34) = a1;
    v40 = sub_100197488(inited);
    swift_setDeallocating(inited);
    swift_beginAccess(v4, &v50, 33, 0);
    sub_10006BA34((uint64_t)v12, a3);
    v41 = swift_isUniquelyReferenced_nonNull_native(*v4);
    v48 = *v4;
    *v4 = 0x8000000000000000;
    sub_10018EEB0(v40, (uint64_t)v12, a3, v41);
    v42 = *v4;
    *v4 = v48;
    swift_bridgeObjectRelease(v42);
    sub_10006B9B4((uint64_t)v12, a3);
    swift_endAccess(&v50);
LABEL_22:
    sub_10006B9B4((uint64_t)v12, a3);
    return;
  }
  v24 = Logger.logObject.getter(v22);
  v26 = static os_log_type_t.error.getter(v24, v25);
  if (os_log_type_enabled(v24, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v26, "Missing peer key identifier", v27, 2u);
    swift_slowDealloc(v27, -1, -1);
  }

}

void sub_1001C7C78(uint64_t a1, unint64_t a2, int a3, uint64_t a4)
{
  uint64_t *v4;
  char v5;
  uint64_t *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  NSObject *v34;
  uint64_t v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t *v44;
  void (*v45)(_QWORD *);
  uint64_t *v46;
  unint64_t v47;
  char v48;
  unint64_t v49;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  _BOOL8 v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t inited;
  unint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t *v76;
  int v77;
  uint64_t v78;
  char v79[56];
  uint64_t v80;
  uint64_t v81[4];
  uint64_t v82;
  uint64_t v83;

  v6 = v4;
  v77 = a3;
  v10 = type metadata accessor for DispatchPredicate(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (unint64_t)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v15 = (void *)qword_100354EE8;
  *(_QWORD *)v14 = qword_100354EE8;
  (*(void (**)(unint64_t, _QWORD, uint64_t))(v11 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v10);
  v16 = v15;
  v17 = _dispatchPreconditionTest(_:)(v14);
  (*(void (**)(unint64_t, uint64_t))(v11 + 8))(v14, v10);
  if ((v17 & 1) == 0)
  {
    __break(1u);
    goto LABEL_45;
  }
  v5 = (_BYTE)v6 + OBJC_IVAR____TtC10seserviced13AlishaVehicle_logger;
  sub_10006BA34(a1, a2);
  v18 = sub_10006BA34(a1, a2);
  v19 = Logger.logObject.getter(v18);
  v23 = static os_log_type_t.info.getter(v19, v20, v21, v22);
  if (os_log_type_enabled(v19, v23))
  {
    v75 = a4;
    v24 = swift_slowAlloc(16, -1);
    v25 = swift_slowAlloc(32, -1);
    v81[0] = v25;
    *(_DWORD *)v24 = 33554946;
    LOWORD(v82) = v77;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, (char *)&v82 + 2, v24 + 4, v24 + 6);
    *(_WORD *)(v24 + 6) = 2080;
    v76 = v6;
    if (a2 >> 60 == 15)
    {
      v26 = 0xE300000000000000;
      v27 = 7104878;
    }
    else
    {
      sub_1001BD2CC(a1, a2);
      v30 = v29;
      v82 = v29;
      v31 = sub_100063D3C((uint64_t *)&unk_100346060);
      v32 = sub_10006B86C();
      v27 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v31, v32);
      v26 = v33;
      swift_bridgeObjectRelease(v30);
    }
    v82 = sub_1001C56EC(v27, v26, v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v24 + 8, v24 + 16);
    swift_bridgeObjectRelease(v26);
    sub_10006B9B4(a1, a2);
    sub_10006B9B4(a1, a2);
    _os_log_impl((void *)&_mh_execute_header, v19, v23, "Vehicle function %hu proprietary data %s", (uint8_t *)v24, 0x10u);
    swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v24, -1, -1);

    a4 = v75;
    v6 = v76;
  }
  else
  {

    sub_10006B9B4(a1, a2);
    v28 = sub_10006B9B4(a1, a2);
  }
  v14 = *(_QWORD *)(a4 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
  if (v14 >> 60 != 15)
  {
    v11 = *(_QWORD *)(a4 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
    v6 = (uint64_t *)((char *)v6 + OBJC_IVAR____TtC10seserviced13AlishaVehicle_proprietaryData);
    if (a2 >> 60 == 15)
    {
      swift_beginAccess(v6, v81, 32, 0);
      v38 = *v6;
      v39 = *(_QWORD *)(*v6 + 16);
      sub_100063C8C(v11, v14);
      if (v39)
      {
        sub_100063C8C(v11, v14);
        v40 = sub_100187F6C(v11, v14);
        if ((v41 & 1) != 0)
        {
          v42 = *(_QWORD *)(*(_QWORD *)(v38 + 56) + 8 * v40);
          swift_bridgeObjectRetain(v42);
          sub_10006B9B4(v11, v14);
          if (*(_QWORD *)(v42 + 16))
          {
            sub_100187FF8(v77);
            if ((v43 & 1) != 0)
            {
              swift_endAccess(v81);
              swift_bridgeObjectRelease(v42);
              swift_beginAccess(v6, &v82, 33, 0);
              sub_100063C8C(v11, v14);
              v45 = sub_1001C6FB4(v81, v11, v14);
              if (*v44)
              {
                v46 = v44;
                v47 = sub_100187FF8(v77);
                if ((v48 & 1) != 0)
                {
                  v49 = v47;
                  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v46);
                  v80 = *v46;
                  *v46 = 0x8000000000000000;
                  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                    sub_10019201C();
                  v51 = v80;
                  v52 = (uint64_t *)(*(_QWORD *)(v80 + 56) + 16 * v49);
                  v53 = *v52;
                  v54 = v52[1];
                  sub_1001303B8(v49, v80);
                  v55 = *v46;
                  *v46 = v51;
                  swift_bridgeObjectRelease(v55);
                  sub_100063CD0(v53, v54);
                }
              }
              ((void (*)(uint64_t *, _QWORD))v45)(v81, 0);
              swift_endAccess(&v82);
              goto LABEL_41;
            }
          }
          swift_bridgeObjectRelease(v42);
        }
        else
        {
          sub_10006B9B4(v11, v14);
        }
      }
      swift_endAccess(v81);
LABEL_42:
      v71 = v11;
      v72 = v14;
      goto LABEL_43;
    }
    swift_beginAccess(v6, v81, 32, 0);
    if (!*(_QWORD *)(*v6 + 16))
      goto LABEL_32;
    sub_10006BA34(v11, v14);
    sub_10006BA34(a1, a2);
    sub_10006BA34(v11, v14);
    sub_100187F6C(v11, v14);
    if ((v56 & 1) == 0)
    {
      sub_10006B9B4(v11, v14);
      goto LABEL_35;
    }
    swift_endAccess(v81);
    sub_10006B9B4(v11, v14);
    swift_beginAccess(v6, v81, 33, 0);
    sub_10006BA34(a1, a2);
    sub_10006BA34(v11, v14);
    v57 = swift_isUniquelyReferenced_nonNull_native(*v6);
    v82 = *v6;
    v58 = v82;
    *v6 = 0x8000000000000000;
    sub_100063C8C(v11, v14);
    v17 = sub_100187F6C(v11, v14);
    v60 = *(_QWORD *)(v58 + 16);
    v61 = (v59 & 1) == 0;
    v62 = v60 + v61;
    if (!__OFADD__(v60, v61))
    {
      v5 = v59;
      if (*(_QWORD *)(v58 + 24) < v62)
      {
        sub_10018BD64(v62, v57);
        v63 = sub_100187F6C(v11, v14);
        if ((v5 & 1) != (v64 & 1))
        {
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Data);
          __break(1u);
          return;
        }
        v17 = v63;
        if ((v5 & 1) == 0)
          goto LABEL_31;
LABEL_40:
        v73 = *(_QWORD *)(*(_QWORD *)(v82 + 56) + 8 * v17);
        v74 = swift_isUniquelyReferenced_nonNull_native(v73);
        v78 = v73;
        sub_10018F3BC(a1, a2, v77, v74);
        v80 = v78;
        swift_bridgeObjectRelease(0x8000000000000000);
        sub_1001C9958(&v80, 1, &v82, v17, v11, v14, (void (*)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))sub_10018FBBC, (void (*)(uint64_t, _QWORD))sub_10012FE74);
        swift_bridgeObjectRelease(v80);
        sub_10006B9B4(v11, v14);
        *v6 = v82;
        swift_endAccess(v81);
        sub_10006B9B4(a1, a2);
LABEL_41:
        sub_10006B9B4(v11, v14);
        goto LABEL_42;
      }
      if ((v57 & 1) != 0)
      {
        if ((v59 & 1) != 0)
          goto LABEL_40;
LABEL_31:
        __break(1u);
LABEL_32:
        sub_10006BA34(a1, a2);
        sub_10006BA34(v11, v14);
LABEL_35:
        swift_endAccess(v81);
        v65 = sub_100063D3C(&qword_100349CC8);
        inited = swift_initStackObject(v65, v79);
        *(_OWORD *)(inited + 16) = xmmword_1002888E0;
        *(_WORD *)(inited + 32) = v77;
        *(_QWORD *)(inited + 40) = a1;
        *(_QWORD *)(inited + 48) = a2;
        v67 = sub_10019755C(inited);
        swift_setDeallocating(inited);
        sub_10006BA34(a1, a2);
        sub_10006BA34(v11, v14);
        v68 = sub_100063D3C(&qword_100349CD0);
        swift_arrayDestroy(inited + 32, 1, v68);
        swift_beginAccess(v6, v81, 33, 0);
        v69 = swift_isUniquelyReferenced_nonNull_native(*v6);
        v82 = *v6;
        *v6 = 0x8000000000000000;
        sub_10018ED0C(v67, v11, v14, v69);
        v70 = *v6;
        *v6 = v82;
        swift_bridgeObjectRelease(v70);
        sub_10006B9B4(v11, v14);
        swift_endAccess(v81);
        sub_10006B9B4(v11, v14);
        v71 = a1;
        v72 = a2;
LABEL_43:
        sub_10006B9B4(v71, v72);
        return;
      }
LABEL_46:
      sub_1001916A4();
      if ((v5 & 1) != 0)
        goto LABEL_40;
      goto LABEL_31;
    }
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  v34 = Logger.logObject.getter(v28);
  v36 = static os_log_type_t.error.getter(v34, v35);
  if (os_log_type_enabled(v34, v36))
  {
    v37 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v37 = 0;
    _os_log_impl((void *)&_mh_execute_header, v34, v36, "Missing peer key identifier", v37, 2u);
    swift_slowDealloc(v37, -1, -1);
  }

}

uint64_t sub_1001C84B4(uint64_t a1)
{
  return sub_1001C84DC(a1, &OBJC_IVAR____TtC10seserviced13AlishaVehicle_status, (uint64_t (*)(_QWORD *))sub_100197488);
}

uint64_t sub_1001C84C8(uint64_t a1)
{
  return sub_1001C84DC(a1, &OBJC_IVAR____TtC10seserviced13AlishaVehicle_proprietaryData, (uint64_t (*)(_QWORD *))sub_10019755C);
}

uint64_t sub_1001C84DC(uint64_t a1, _QWORD *a2, uint64_t (*a3)(_QWORD *))
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  id v13;
  uint64_t result;
  uint64_t *v15;
  unint64_t v16;
  NSObject *v17;
  uint64_t v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  _BYTE v29[24];

  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = &v29[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v12 = qword_100354EE8;
  *v11 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v7);
  v13 = (id)v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v11);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v8 + 8))(v11, v7);
  if ((v12 & 1) != 0)
  {
    v15 = (uint64_t *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
    v16 = *(_QWORD *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
    if (v16 >> 60 == 15)
    {
      v17 = Logger.logObject.getter(result);
      v19 = static os_log_type_t.error.getter(v17, v18);
      if (os_log_type_enabled(v17, v19))
      {
        v20 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v20 = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, v19, "Missing peer key identifier", v20, 2u);
        swift_slowDealloc(v20, -1, -1);
      }

      return a3(_swiftEmptyArrayStorage);
    }
    v22 = *v15;
    v23 = (uint64_t *)(v3 + *a2);
    swift_beginAccess(v23, v29, 32, 0);
    v24 = *v23;
    v25 = *(_QWORD *)(v24 + 16);
    sub_100063C8C(v22, v16);
    if (v25)
    {
      sub_100063C8C(v22, v16);
      v26 = sub_100187F6C(v22, v16);
      if ((v27 & 1) != 0)
      {
        v21 = *(_QWORD *)(*(_QWORD *)(v24 + 56) + 8 * v26);
        swift_endAccess(v29);
        swift_bridgeObjectRetain(v21);
        sub_10006B9B4(v22, v16);
LABEL_13:
        sub_10006B9B4(v22, v16);
        return v21;
      }
      sub_10006B9B4(v22, v16);
    }
    swift_endAccess(v29);
    v21 = a3(_swiftEmptyArrayStorage);
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

unint64_t sub_1001C872C(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (uint64_t *)((char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v8 = qword_100354EE8;
  *v7 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  v9 = (id)v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  v10 = (*(uint64_t (**)(_QWORD *, uint64_t))(v4 + 8))(v7, v3);
  if ((v8 & 1) != 0)
  {
    if (qword_1003445B8 == -1)
      goto LABEL_5;
  }
  else
  {
    __break(1u);
  }
  v10 = swift_once(&qword_1003445B8, sub_1000EAA4C);
LABEL_5:
  __chkstk_darwin(v10, v11);
  *(&v18 - 4) = (uint64_t)sub_1001C706C;
  *(&v18 - 3) = 0;
  *(&v18 - 2) = v12;
  v14 = v13 + 4;
  os_unfair_lock_lock(v13 + 4);
  sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_10007EFBC, &v19);
  os_unfair_lock_unlock(v14);
  v15 = v19;
  if ((v19 & 0xC000000000000001) != 0)
  {
    if (v19 < 0)
      v16 = v19;
    else
      v16 = v19 & 0xFFFFFFFFFFFFFF8;
    if (__CocoaSet.count.getter(v16))
      goto LABEL_10;
  }
  else if (*(_QWORD *)(v19 + 16))
  {
LABEL_10:
    v19 = (uint64_t)&_swiftEmptyDictionarySingleton;
    swift_retain(v1);
    sub_1001CA3D4(v15, v1, a1 & 1, &v19);
    swift_bridgeObjectRelease(v15);
    swift_release(v1);
    return v19;
  }
  swift_bridgeObjectRelease(v15);
  return sub_10017CCC0((uint64_t)_swiftEmptyArrayStorage);
}

void sub_1001C8920(void **a1, uint64_t a2, int a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  os_unfair_lock_s *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  id v26;
  NSObject *v27;
  uint64_t v28;
  os_log_type_t v29;
  int v30;
  uint8_t *v31;
  uint8_t *v32;
  id v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  void *v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  id v67;
  void *v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  id v98;
  id v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  id v107;
  uint64_t *v108;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t *v119;
  uint8_t *v120;
  uint64_t v121;
  id v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126[3];
  _QWORD *v127;

  v119 = a4;
  LODWORD(v120) = a3;
  v121 = a2;
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (uint64_t *)((char *)&v111 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *a1;
  v12 = swift_allocObject(&unk_10030D040, 24, 7);
  *(_QWORD *)(v12 + 16) = v11;
  v13 = qword_1003447A0;
  v122 = v11;
  if (v13 != -1)
    swift_once(&qword_1003447A0, sub_1001EDCA4);
  v14 = off_10034A560;
  v15 = swift_allocObject(&unk_10030D068, 32, 7);
  *(_QWORD *)(v15 + 16) = sub_1001CA70C;
  *(_QWORD *)(v15 + 24) = v12;
  v17 = __chkstk_darwin(v15, v16);
  *(&v111 - 4) = (uint64_t)sub_100095FDC;
  *(&v111 - 3) = v17;
  *(&v111 - 2) = (uint64_t)v14;
  v19 = v18 + 4;
  swift_retain(v12);
  os_unfair_lock_lock(v19);
  sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_10006F860, v126);
  if (v4)
    goto LABEL_41;
  os_unfair_lock_unlock(v19);
  v20 = v126[0];
  swift_release(v12);
  swift_release(v15);
  v21 = sub_10009F640(v20);
  swift_bridgeObjectRelease(v20);
  if (v21)
  {
    v22 = type metadata accessor for AlishaPeer(0);
    v23 = swift_dynamicCastClass(v21, v22);
    if (!v23
      || (v19 = (os_unfair_lock_s *)v23,
          v24 = (uint64_t *)(v23 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier),
          v25 = *(_QWORD *)(v23 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8),
          v25 >> 60 == 15))
    {
      swift_release(v21);
      goto LABEL_8;
    }
    v46 = *v24;
    v117 = *v24;
    v118 = v25;
    if ((v120 & 1) != 0
      && *(_BYTE *)(*(_QWORD *)((char *)&v19->_os_unfair_lock_opaque
                              + OBJC_IVAR____TtC10seserviced10AlishaPeer_configuration)
                  + 80) != 1)
    {
      v50 = _swiftEmptyArrayStorage;
      v127 = _swiftEmptyArrayStorage;
      sub_100063C8C(v46, v25);
    }
    else
    {
      sub_100063C8C(v46, v25);
      v47 = objc_msgSend(v122, "supportedRKEFunctions");
      if (!v47)
      {
LABEL_40:
        __break(1u);
LABEL_41:
        os_unfair_lock_unlock(v19);
        __break(1u);
        return;
      }
      v48 = v47;
      v49 = sub_10006C25C(0, (unint64_t *)&qword_100344CD8, NSNumber_ptr);
      v50 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v48, v49);

      v127 = v50;
      if ((v120 & 1) == 0)
        goto LABEL_20;
    }
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((char *)&v19->_os_unfair_lock_opaque
                                           + OBJC_IVAR____TtC10seserviced10AlishaPeer_configuration)
                               + 72)
                   + 16))
    {
      swift_retain(v21);
      swift_bridgeObjectRetain(v50);
      v52 = sub_1001C9A04(v51, (uint64_t)v19);
      swift_bridgeObjectRelease_n(v50, 2);
      swift_release(v21);
      v127 = v52;
      v53 = v118;
LABEL_21:
      if (qword_1003447D8 != -1)
        swift_once(&qword_1003447D8, sub_1001FC514);
      v54 = qword_100354F18;
      if (qword_1003447B8 != -1)
        swift_once(&qword_1003447B8, sub_1001EEFA4);
      v55 = qword_100354EE8;
      *v10 = qword_100354EE8;
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
      v56 = (id)v55;
      LOBYTE(v55) = _dispatchPreconditionTest(_:)(v10);
      (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v10, v6);
      if ((v55 & 1) != 0)
      {
        v57 = (uint64_t *)(v54 + OBJC_IVAR____TtC10seserviced9AlishaRKE_requestsInProgress);
        swift_beginAccess(v54 + OBJC_IVAR____TtC10seserviced9AlishaRKE_requestsInProgress, v126, 0, 0);
        v58 = *v57;
        v59 = v117;
        sub_10006BA34(v117, v53);
        swift_bridgeObjectRetain(v58);
        v61 = sub_1001C9BC4(v60);
        sub_10006B9B4(v59, v53);
        swift_bridgeObjectRelease(v58);
        sub_1001BD2CC(v59, v53);
        v63 = v62;
        v19 = 0;
        v124 = v62;
        v64 = sub_100063D3C((uint64_t *)&unk_100346060);
        v65 = sub_10006B86C();
        v120 = (uint8_t *)BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v64, v65);
        v116 = v66;
        swift_bridgeObjectRelease(v63);
        v67 = objc_msgSend(v122, "readerIdentifier");
        if (v67)
        {
          v68 = v67;
          v69 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v67);
          v71 = v70;

          sub_1001BD2CC(v69, v71);
          v73 = v72;
          v122 = 0;
          v124 = v72;
          v74 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v64, v65);
          v113 = v75;
          v114 = v74;
          swift_bridgeObjectRelease(v73);
          sub_100063CD0(v69, v71);
          v76 = (uint64_t)v127;
          swift_bridgeObjectRetain(v127);
          v112 = sub_1001FAD00((uint64_t)v61);
          swift_bridgeObjectRelease(v61);
          v77 = v121;
          v78 = v121 + OBJC_IVAR____TtC10seserviced13AlishaVehicle_status;
          swift_beginAccess(v121 + OBJC_IVAR____TtC10seserviced13AlishaVehicle_status, &v124, 32, 0);
          v79 = *(_QWORD *)v78;
          v80 = *(_QWORD *)(*(_QWORD *)v78 + 16);
          v81 = v117;
          v82 = v118;
          v115 = v64;
          if (v80)
          {
            sub_100063C8C(v117, v118);
            v83 = sub_100187F6C(v81, v82);
            if ((v84 & 1) != 0)
            {
              v85 = *(_QWORD *)(*(_QWORD *)(v79 + 56) + 8 * v83);
              swift_endAccess(&v124);
              swift_bridgeObjectRetain(v85);
              sub_10006B9B4(v81, v82);
              v124 = v85;
              v86 = sub_100063D3C(&qword_100349CF0);
              v87 = sub_100063D3C(&qword_100349CF8);
              swift_dynamicCast(&v123, &v124, v86, v87, 7);
              v88 = v123;
              goto LABEL_32;
            }
            sub_10006B9B4(v81, v82);
          }
          swift_endAccess(&v124);
          v88 = 0;
LABEL_32:
          v89 = v77 + OBJC_IVAR____TtC10seserviced13AlishaVehicle_proprietaryData;
          swift_beginAccess(v77 + OBJC_IVAR____TtC10seserviced13AlishaVehicle_proprietaryData, &v124, 32, 0);
          v90 = *(_QWORD *)v89;
          if (*(_QWORD *)(*(_QWORD *)v89 + 16))
          {
            sub_100063C8C(v81, v82);
            v91 = sub_100187F6C(v81, v82);
            if ((v92 & 1) != 0)
            {
              v93 = v65;
              v94 = *(_QWORD *)(*(_QWORD *)(v90 + 56) + 8 * v91);
              swift_endAccess(&v124);
              swift_bridgeObjectRetain(v94);
              sub_10006B9B4(v81, v82);
              v124 = v94;
              v95 = sub_100063D3C(&qword_100349CE0);
              v96 = sub_100063D3C(&qword_100349CE8);
              swift_dynamicCast(&v123, &v124, v95, v96, 7);
              v97 = v123;
LABEL_37:
              v98 = objc_allocWithZone((Class)SESVehicleReport);
              v99 = sub_1001C9500((uint64_t)v120, v116, v114, v113, v76, (uint64_t)v112, v88, v97);
              sub_1001BD2CC(v81, v82);
              v100 = v81;
              v102 = v101;
              v124 = v101;
              v103 = v82;
              v104 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v115, v93);
              v106 = v105;
              swift_bridgeObjectRelease(v102);
              v107 = v99;
              v108 = v119;
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v119);
              v124 = *v108;
              *v108 = 0x8000000000000000;
              sub_10018F4F8((uint64_t)v107, v104, v106, isUniquelyReferenced_nonNull_native);
              v110 = *v108;
              *v108 = v124;
              swift_release(v21);
              swift_bridgeObjectRelease(v106);
              swift_bridgeObjectRelease(v110);
              sub_10006B9B4(v100, v103);

              swift_bridgeObjectRelease(v127);
              return;
            }
            sub_10006B9B4(v81, v82);
          }
          v93 = v65;
          swift_endAccess(&v124);
          v97 = 0;
          goto LABEL_37;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      goto LABEL_40;
    }
LABEL_20:
    v53 = v118;
    goto LABEL_21;
  }
LABEL_8:
  v26 = v122;
  v27 = Logger.logObject.getter(v26);
  v29 = static os_log_type_t.error.getter(v27, v28);
  v30 = v29;
  if (os_log_type_enabled(v27, v29))
  {
    LODWORD(v122) = v30;
    v31 = (uint8_t *)swift_slowAlloc(12, -1);
    v121 = swift_slowAlloc(32, -1);
    v126[0] = v121;
    *(_DWORD *)v31 = 136315138;
    v32 = v31 + 12;
    v119 = (uint64_t *)(v31 + 4);
    v120 = v31;
    v33 = objc_msgSend(v26, "publicKeyIdentifier");
    v34 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v33);
    v36 = v35;

    sub_1001BD2CC(v34, v36);
    v38 = v37;
    v124 = v37;
    v39 = sub_100063D3C((uint64_t *)&unk_100346060);
    v40 = sub_10006B86C();
    v41 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v39, v40);
    v43 = v42;
    swift_bridgeObjectRelease(v38);
    sub_100063CD0(v34, v36);
    v124 = sub_1001C56EC(v41, v43, v126);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v124, &v125, v119, v32);

    swift_bridgeObjectRelease(v43);
    v44 = v120;
    _os_log_impl((void *)&_mh_execute_header, v27, (os_log_type_t)v122, "Failed to retrieve AlishaPeer for %s", v120, 0xCu);
    v45 = v121;
    swift_arrayDestroy(v121, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v45, -1, -1);
    swift_slowDealloc(v44, -1, -1);
  }
  else
  {

  }
}

BOOL sub_1001C92AC(uint64_t a1, void *a2)
{
  uint64_t v4;
  unint64_t v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  char v11;

  if (!*(_BYTE *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_type))
  {
    v4 = *(_QWORD *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
    v5 = *(_QWORD *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
    sub_10006BA34(v4, v5);
    v6 = objc_msgSend(a2, "publicKeyIdentifier");
    v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v6);
    v9 = v8;

    if (v5 >> 60 == 15)
    {
      sub_10006B9B4(v4, v5);
      sub_10006B9B4(v7, v9);
    }
    else
    {
      sub_10006BA34(v4, v5);
      sub_10007C23C(v4, v5);
      v11 = v10;
      sub_100063CD0(v7, v9);
      sub_10006B9B4(v4, v5);
      sub_10006B9B4(v4, v5);
      if ((v11 & 1) != 0)
        return *(_BYTE *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_pairingState) == 2;
    }
  }
  return 0;
}

uint64_t sub_1001C93D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC10seserviced13AlishaVehicle_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced13AlishaVehicle_status));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced13AlishaVehicle_proprietaryData));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1001C9440()
{
  return type metadata accessor for AlishaVehicle(0);
}

uint64_t type metadata accessor for AlishaVehicle(uint64_t a1)
{
  uint64_t result;

  result = qword_100349C20;
  if (!qword_100349C20)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AlishaVehicle);
  return result;
}

uint64_t sub_1001C9484(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

id sub_1001C9500(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v8;
  NSString v15;
  NSString v16;
  NSArray v17;
  NSArray v18;
  NSDictionary v19;
  NSDictionary v20;
  id v21;

  v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  sub_10006C25C(0, (unint64_t *)&qword_100344CD8, NSNumber_ptr);
  v17.super.isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a5);
  if (a6)
  {
    v18.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a6);
    if (a7)
      goto LABEL_3;
LABEL_6:
    v19.super.isa = 0;
    if (a8)
      goto LABEL_4;
LABEL_7:
    v20.super.isa = 0;
    goto LABEL_8;
  }
  v18.super.isa = 0;
  if (!a7)
    goto LABEL_6;
LABEL_3:
  sub_1000DCA84(&qword_100349D00, (unint64_t *)&qword_100344CD8, NSNumber_ptr);
  v19.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a7);
  if (!a8)
    goto LABEL_7;
LABEL_4:
  sub_1000DCA84(&qword_100349D00, (unint64_t *)&qword_100344CD8, NSNumber_ptr);
  v20.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a8);
LABEL_8:
  v21 = objc_msgSend(v8, "initWithKeyIdentifier:readerIdentifier:supportedFunctions:functionsInProgress:status:proprietaryData:", v15, v16, v17.super.isa, v18.super.isa, v19.super.isa, v20.super.isa);

  return v21;
}

uint64_t sub_1001C96B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001C96C4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void (*sub_1001C96CC(_QWORD *a1, uint64_t a2, unint64_t a3))(uint64_t a1)
{
  _QWORD *v3;
  _QWORD *v7;
  char isUniquelyReferenced_nonNull_native;

  v7 = malloc(0x60uLL);
  *a1 = v7;
  v7[8] = a2;
  v7[9] = a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  sub_100063C8C(a2, a3);
  v7[10] = sub_1001C992C(v7);
  v7[11] = sub_1001C97B4(v7 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_1001C9760;
}

void sub_1001C9760(uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);
  unint64_t v3;
  uint64_t v4;

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 80);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 72);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 88))(*(_QWORD *)a1 + 32, 0);
  sub_100063CD0(v4, v3);
  v2(v1, 0);
  free(v1);
}

void (*sub_1001C97B4(_QWORD *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1)
{
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  void (*result)(uint64_t **);

  v5 = v4;
  v10 = malloc(0x30uLL);
  *a1 = v10;
  v10[2] = a3;
  v10[3] = v5;
  v10[1] = a2;
  v11 = *v5;
  v13 = sub_100187F6C(a2, a3);
  *((_BYTE *)v10 + 40) = v12 & 1;
  v14 = *(_QWORD *)(v11 + 16);
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    v17 = v12;
    v18 = *(_QWORD *)(v11 + 24);
    if (v18 >= v16 && (a4 & 1) != 0)
    {
LABEL_7:
      v10[4] = v13;
      if ((v17 & 1) != 0)
      {
LABEL_8:
        v19 = *(_QWORD *)(*(_QWORD *)(*v5 + 56) + 8 * v13);
LABEL_12:
        *v10 = v19;
        return sub_1001C98E0;
      }
LABEL_11:
      v19 = 0;
      goto LABEL_12;
    }
    if (v18 >= v16 && (a4 & 1) == 0)
    {
      sub_1001916A4();
      goto LABEL_7;
    }
    sub_10018BD64(v16, a4 & 1);
    v20 = sub_100187F6C(a2, a3);
    if ((v17 & 1) == (v21 & 1))
    {
      v13 = v20;
      v10[4] = v20;
      if ((v17 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Data);
  __break(1u);
  return result;
}

void sub_1001C98E0(uint64_t **a1)
{
  uint64_t *v1;

  v1 = *a1;
  sub_1001C9958(*a1, *((_BYTE *)*a1 + 40), (_QWORD *)(*a1)[3], (*a1)[4], (*a1)[1], (*a1)[2], (void (*)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))sub_10018FBBC, (void (*)(uint64_t, _QWORD))sub_10012FE74);
  swift_bridgeObjectRelease(*v1);
  free(v1);
}

uint64_t (*sub_1001C992C(_QWORD *a1))(uint64_t result)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return sub_1001C994C;
}

uint64_t sub_1001C994C(uint64_t result)
{
  **(_QWORD **)(result + 8) = *(_QWORD *)result;
  return result;
}

uint64_t sub_1001C9958(uint64_t *a1, char a2, _QWORD *a3, uint64_t a4, uint64_t a5, unint64_t a6, void (*a7)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t), void (*a8)(uint64_t, _QWORD))
{
  uint64_t v10;
  uint64_t v12;

  v10 = *a1;
  if (*a1)
  {
    v12 = *a3;
    if ((a2 & 1) != 0)
    {
      *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * a4) = v10;
    }
    else
    {
      a7(a4, a5, a6, v10, v12);
      sub_100063C8C(a5, a6);
    }
  }
  else if ((a2 & 1) != 0)
  {
    swift_arrayDestroy(*(_QWORD *)(*a3 + 48) + 16 * a4, 1, &type metadata for Data);
    a8(a4, *a3);
  }
  return swift_bridgeObjectRetain(v10);
}

_QWORD *sub_1001C9A04(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v23;

  v2 = a1;
  v23 = _swiftEmptyArrayStorage;
  if (a1 >> 62)
    goto LABEL_24;
  for (i = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10); i; i = _CocoaArrayWrapper.endIndex.getter(v20))
  {
    v4 = 0;
    v5 = OBJC_IVAR____TtC10seserviced10AlishaPeer_configuration;
    v6 = v2 & 0xC000000000000001;
    v7 = v2 & 0xFFFFFFFFFFFFFF8;
    v21 = v2;
    v8 = v2 + 32;
    while (1)
    {
      if (v6)
      {
        v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v21);
      }
      else
      {
        if (v4 >= *(_QWORD *)(v7 + 16))
          goto LABEL_22;
        v12 = *(id *)(v8 + 8 * v4);
      }
      v13 = v12;
      if (__OFADD__(v4++, 1))
        goto LABEL_23;
      v2 = *(_QWORD *)(*(_QWORD *)(a2 + v5) + 72);
      swift_bridgeObjectRetain(v2);
      v15 = objc_msgSend(v13, "unsignedIntegerValue");
      v16 = *(_QWORD *)(v2 + 16);
      if (v16)
      {
        if (*(id *)(v2 + 32) == v15)
        {
LABEL_12:

          swift_bridgeObjectRelease(v2);
          goto LABEL_5;
        }
        if (v16 != 1)
          break;
      }
LABEL_4:
      v9 = swift_bridgeObjectRelease(v2);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v9);
      v10 = v23[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v10);
      v11 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, v13);
      v2 = (uint64_t)&v23;
      specialized ContiguousArray._endMutation()(v11);
LABEL_5:
      if (v4 == i)
        return v23;
    }
    v17 = 5;
    while (1)
    {
      v18 = v17 - 3;
      if (__OFADD__(v17 - 4, 1))
        break;
      if (*(id *)(v2 + 8 * v17) == v15)
        goto LABEL_12;
      ++v17;
      if (v18 == v16)
        goto LABEL_4;
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    if (v2 < 0)
      v20 = v2;
    else
      v20 = v2 & 0xFFFFFFFFFFFFFF8;
  }
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_1001C9BC4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v4 = a1;
    else
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    if (_CocoaArrayWrapper.endIndex.getter(v4))
    {
LABEL_3:
      if ((a1 & 0xC000000000000001) != 0)
        v3 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
      else
        v3 = swift_retain(*(_QWORD *)(a1 + 32));
      __asm { BR              X10 }
    }
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v2)
      goto LABEL_3;
  }
  swift_bridgeObjectRelease(a1);
  return _swiftEmptyArrayStorage;
}

void sub_1001CA3D4(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  int64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  int64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v35;
  _QWORD v36[5];
  void *v37;

  v5 = v4;
  v7 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v8 = a1;
    else
      v8 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v9 = __CocoaSet.makeIterator()(v8);
    v10 = sub_10006C25C(0, (unint64_t *)&qword_100347710, SEEndPoint_ptr);
    v11 = sub_1000DCA84((unint64_t *)&qword_100346160, (unint64_t *)&qword_100347710, SEEndPoint_ptr);
    v12 = Set.Iterator.init(_cocoa:)(v36, v9, v10, v11);
    v7 = v36[0];
    v32 = v36[1];
    v13 = v36[2];
    v14 = v36[3];
    v15 = v36[4];
  }
  else
  {
    v16 = -1 << *(_BYTE *)(a1 + 32);
    v32 = a1 + 56;
    v13 = ~v16;
    v17 = -v16;
    if (v17 < 64)
      v18 = ~(-1 << v17);
    else
      v18 = -1;
    v15 = v18 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v14 = 0;
  }
  v31 = (unint64_t)(v13 + 64) >> 6;
  v19 = a3 & 1;
  if ((v7 & 0x8000000000000000) == 0)
    goto LABEL_14;
LABEL_11:
  v20 = __CocoaSet.Iterator.next()(v12);
  if (v20)
  {
    v21 = v20;
    v35 = v20;
    v22 = sub_10006C25C(0, (unint64_t *)&qword_100347710, SEEndPoint_ptr);
    swift_unknownObjectRetain(v21);
    swift_dynamicCast(&v37, &v35, (char *)&type metadata for Swift.AnyObject + 8, v22, 7);
    v23 = v37;
    swift_unknownObjectRelease(v21);
    v24 = v14;
    v25 = v15;
    while (v23)
    {
      v37 = v23;
      sub_1001C8920(&v37, a2, v19, a4);

      if (v5)
      {
        v30 = v7;
        goto LABEL_39;
      }
      v14 = v24;
      v15 = v25;
      if (v7 < 0)
        goto LABEL_11;
LABEL_14:
      if (v15)
      {
        v25 = (v15 - 1) & v15;
        v26 = __clz(__rbit64(v15)) | (v14 << 6);
        v24 = v14;
      }
      else
      {
        v24 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
          __break(1u);
          return;
        }
        if (v24 >= v31)
          break;
        v27 = *(_QWORD *)(v32 + 8 * v24);
        if (!v27)
        {
          v28 = v14 + 2;
          if (v14 + 2 >= v31)
            break;
          v27 = *(_QWORD *)(v32 + 8 * v28);
          if (v27)
            goto LABEL_25;
          v28 = v14 + 3;
          if (v14 + 3 >= v31)
            break;
          v27 = *(_QWORD *)(v32 + 8 * v28);
          if (v27)
            goto LABEL_25;
          v28 = v14 + 4;
          if (v14 + 4 >= v31)
            break;
          v27 = *(_QWORD *)(v32 + 8 * v28);
          if (v27)
          {
LABEL_25:
            v24 = v28;
          }
          else
          {
            v24 = v14 + 5;
            if (v14 + 5 >= v31)
              break;
            v27 = *(_QWORD *)(v32 + 8 * v24);
            if (!v27)
            {
              v29 = v14 + 6;
              while (v31 != v29)
              {
                v27 = *(_QWORD *)(v32 + 8 * v29++);
                if (v27)
                {
                  v24 = v29 - 1;
                  goto LABEL_26;
                }
              }
              break;
            }
          }
        }
LABEL_26:
        v25 = (v27 - 1) & v27;
        v26 = __clz(__rbit64(v27)) + (v24 << 6);
      }
      v23 = *(id *)(*(_QWORD *)(v7 + 48) + 8 * v26);
    }
  }
  v30 = v7;
LABEL_39:
  sub_10007EF58(v30);
}

uint64_t sub_1001CA6E8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

BOOL sub_1001CA70C(uint64_t a1)
{
  uint64_t v1;

  return sub_1001C92AC(a1, *(void **)(v1 + 16));
}

uint64_t sub_1001CA714()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1001CA738(uint64_t a1, uint64_t a2)
{
  type metadata accessor for String.Encoding(0);
  __chkstk_darwin();
  __asm { BR              X10 }
}

uint64_t sub_1001CA7C0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  _DWORD *v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  unint64_t v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  os_log_type_t v37;
  uint8_t *v38;
  unint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  void (*v50)(uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;

  if (BYTE6(v2) == 32)
  {
    *(_QWORD *)(v8 - 120) = v0;
    *(_QWORD *)(v8 - 104) = v1;
    if (qword_100344728 != -1)
      swift_once(&qword_100344728, sub_1001CD5F0);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_10009673C(v9, (uint64_t)qword_100349D08);
    sub_100063C8C(v3, v2);
    v11 = sub_100063C8C(v3, v2);
    *(_QWORD *)(v8 - 112) = v10;
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.debug.getter();
    v14 = os_log_type_enabled(v12, v13);
    *(_QWORD *)(v8 - 128) = v7;
    if (v14)
    {
      v15 = (_DWORD *)swift_slowAlloc(12, -1);
      v16 = swift_slowAlloc(32, -1);
      *(_QWORD *)(v8 - 152) = v16;
      *(_QWORD *)(v8 - 72) = v16;
      *v15 = 136315138;
      v17 = v15 + 3;
      *(_QWORD *)(v8 - 168) = v15 + 1;
      *(_QWORD *)(v8 - 160) = v15;
      v18 = *(_QWORD *)(v8 - 104);
      sub_1001BD2CC(v3, v2);
      *(_QWORD *)(v8 - 136) = v6;
      v20 = v19;
      *(_QWORD *)(v8 - 104) = v18;
      *(_QWORD *)(v8 - 96) = v19;
      v21 = sub_100063D3C((uint64_t *)&unk_100346060);
      *(_QWORD *)(v8 - 144) = v4;
      v22 = v21;
      v23 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
      v24 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v22, v23);
      v26 = v25;
      v27 = v20;
      v6 = *(_QWORD *)(v8 - 136);
      swift_bridgeObjectRelease(v27);
      *(_QWORD *)(v8 - 96) = sub_1001C56EC(v24, v26, (uint64_t *)(v8 - 72));
      v28 = v17;
      v7 = *(_QWORD *)(v8 - 128);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v8 - 96, v8 - 88, *(_QWORD *)(v8 - 168), v28);
      v29 = v26;
      v4 = *(_QWORD **)(v8 - 144);
      swift_bridgeObjectRelease(v29);
      sub_100063CD0(v3, v2);
      sub_100063CD0(v3, v2);
      v30 = v13;
      v31 = *(uint8_t **)(v8 - 160);
      _os_log_impl((void *)&_mh_execute_header, v12, v30, "Received BLESK with type %s", v31, 0xCu);
      v32 = *(_QWORD *)(v8 - 152);
      swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1, -1);
      swift_slowDealloc(v31, -1, -1);
    }
    else
    {
      sub_100063CD0(v3, v2);
      sub_100063CD0(v3, v2);
    }

    v43 = Logger.logObject.getter(v42);
    v44 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v45 = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "Deriving BleSKDevice", v45, 2u);
      swift_slowDealloc(v45, -1, -1);
    }

    static String.Encoding.utf8.getter(v46);
    v47 = String.data(using:allowLossyConversion:)(v5, 0, 0x7665444B53656C42, 0xEB00000000656369);
    v49 = v48;
    v50 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 120) + 8);
    *(_QWORD *)(v8 - 120) = v50;
    v50(v5, v7);
    if (v49 >> 60 == 15)
    {
      __break(1u);
      goto LABEL_23;
    }
    v51 = *(_QWORD *)(v8 - 104);
    v52 = sub_1001CCC80(v3, v2, v47, v49, v6);
    if (!v51)
    {
      v54 = v52;
      v55 = v53;
      *(_QWORD *)(v8 - 136) = v6;
      sub_10006B9B4(v47, v49);
      v56 = v4[5];
      v57 = v4[6];
      v4[5] = v54;
      v4[6] = v55;
      v58 = sub_10006B9B4(v56, v57);
      v59 = Logger.logObject.getter(v58);
      v60 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v59, v60))
      {
        v61 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v61 = 0;
        _os_log_impl((void *)&_mh_execute_header, v59, v60, "Deriving BleSKReader", v61, 2u);
        swift_slowDealloc(v61, -1, -1);
      }

      static String.Encoding.utf8.getter(v62);
      v63 = String.data(using:allowLossyConversion:)(v5, 0, 0x6165524B53656C42, 0xEB00000000726564);
      v65 = v64;
      (*(void (**)(uint64_t, _QWORD))(v8 - 120))(v5, *(_QWORD *)(v8 - 128));
      if (v65 >> 60 != 15)
      {
        v66 = sub_1001CCC80(v3, v2, v63, v65, *(_QWORD *)(v8 - 136));
        v68 = v67;
        sub_10006B9B4(v63, v65);
        v69 = v4[3];
        v70 = v4[4];
        v4[3] = v66;
        v4[4] = v68;
        return sub_10006B9B4(v69, v70);
      }
LABEL_23:
      __break(1u);
      JUMPOUT(0x1001CAD50);
    }
    v40 = sub_10006B9B4(v47, v49);
  }
  else
  {
    if (qword_100344728 != -1)
      swift_once(&qword_100344728, sub_1001CD5F0);
    v33 = type metadata accessor for Logger(0);
    v34 = sub_10009673C(v33, (uint64_t)qword_100349D08);
    v35 = Logger.logObject.getter(v34);
    v37 = static os_log_type_t.error.getter(v35, v36);
    if (os_log_type_enabled(v35, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v37, "Incorrect length for BLESK, cannot set value", v38, 2u);
      swift_slowDealloc(v38, -1, -1);
    }

    v39 = sub_10006B828();
    v40 = swift_allocError(&type metadata for DSKError, v39, 0, 0);
    *v41 = 0;
  }
  return swift_willThrow(v40);
}

void sub_1001CAD60()
{
  __asm { BR              X12 }
}

uint64_t sub_1001CADB0()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v4;
  _QWORD v5[3];
  uint64_t v6;
  uint64_t v7;

  v2 = BYTE6(v0);
  v6 = sub_100063D3C(&qword_100344DE8);
  v7 = sub_10007EF60((unint64_t *)&qword_100344DF0, &qword_100344DE8, (uint64_t)&protocol conformance descriptor for <A> CollectionOfOne<A>);
  LOBYTE(v5[0]) = v1;
  v4 = *(_BYTE *)sub_10006BA78(v5, v6);
  Data._Representation.replaceSubrange(_:with:count:)(v2, v2, &v4, 1);
  return sub_10006BA9C(v5);
}

void sub_1001CAE60(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

NSObject *sub_1001CAEB4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_log_t log, uint64_t a19, os_log_type_t type,uint64_t a21,uint64_t a22,id a23,id a24,id a25,id a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  uint64_t v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  os_log_type_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  _BYTE *v73;

  if (BYTE6(v49) < 0x11uLL)
  {
    if (qword_100344728 != -1)
      swift_once(&qword_100344728, sub_1001CD5F0);
    v57 = type metadata accessor for Logger(0);
    sub_10009673C(v57, (uint64_t)qword_100349D08);
    sub_100063C8C(v47, v49);
    v58 = sub_100063C8C(v47, v49);
    v53 = Logger.logObject.getter(v58);
    v60 = static os_log_type_t.error.getter(v53, v59);
    if (!os_log_type_enabled(v53, v60))
    {
      sub_100063CD0(v47, v49);
      sub_100063CD0(v47, v49);
      goto LABEL_13;
    }
    v56 = (uint8_t *)swift_slowAlloc(12, -1);
    v61 = swift_slowAlloc(32, -1);
    *(_QWORD *)(v50 - 128) = v61;
    *(_QWORD *)(v50 - 72) = v61;
    *(_DWORD *)v56 = 136315138;
    *(_QWORD *)(v50 - 136) = v56 + 4;
    sub_1001BD2CC(v47, v49);
    v62 = v47;
    v64 = v63;
    *(_QWORD *)(v50 - 104) = v63;
    v65 = sub_100063D3C((uint64_t *)&unk_100346060);
    v66 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
    v67 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v65, v66);
    v69 = v68;
    swift_bridgeObjectRelease(v64);
    *(_QWORD *)(v50 - 104) = sub_1001C56EC(v67, v69, (uint64_t *)(v50 - 72));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v50 - 104, v50 - 96, *(_QWORD *)(v50 - 136), v56 + 12);
    swift_bridgeObjectRelease(v69);
    sub_100063CD0(v62, v49);
    sub_100063CD0(v62, v49);
    _os_log_impl((void *)&_mh_execute_header, v53, v60, "Auth tag not present in %s", v56, 0xCu);
    v70 = *(_QWORD *)(v50 - 128);
    swift_arrayDestroy(v70, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v70, -1, -1);
    goto LABEL_11;
  }
  *(_QWORD *)(v50 - 128) = v47;
  if (*(_QWORD *)(v48 + 32) >> 60 != 15)
    __asm { BR              X10 }
  if (qword_100344728 != -1)
    swift_once(&qword_100344728, sub_1001CD5F0);
  v51 = type metadata accessor for Logger(0);
  v52 = sub_10009673C(v51, (uint64_t)qword_100349D08);
  v53 = Logger.logObject.getter(v52);
  v55 = static os_log_type_t.error.getter(v53, v54);
  if (os_log_type_enabled(v53, v55))
  {
    v56 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v56 = 0;
    _os_log_impl((void *)&_mh_execute_header, v53, v55, "Decrypt message called before bleSKReader is derived", v56, 2u);
LABEL_11:
    swift_slowDealloc(v56, -1, -1);
  }
LABEL_13:

  v71 = sub_10006B828();
  v72 = swift_allocError(&type metadata for DSKError, v71, 0, 0);
  *v73 = 0;
  swift_willThrow(v72);
  return v53;
}

uint64_t sub_1001CBCFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _BYTE *v17;

  if (*(_DWORD *)(v4 + 76) > 0xFEu)
  {
    if (qword_100344728 != -1)
      swift_once(&qword_100344728, sub_1001CD5F0);
    v12 = type metadata accessor for Logger(0);
    v13 = sub_10009673C(v12, (uint64_t)qword_100349D08);
    v7 = Logger.logObject.getter(v13);
    v9 = static os_log_type_t.error.getter(v7, v14);
    if (os_log_type_enabled(v7, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      v11 = "Counter has reached max value cannot encrypt";
      goto LABEL_11;
    }
  }
  else
  {
    if (*(_QWORD *)(v4 + 48) >> 60 != 15)
      __asm { BR              X10 }
    if (qword_100344728 != -1)
      swift_once(&qword_100344728, sub_1001CD5F0);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_10009673C(v5, (uint64_t)qword_100349D08);
    v7 = Logger.logObject.getter(v6);
    v9 = static os_log_type_t.error.getter(v7, v8);
    if (os_log_type_enabled(v7, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      v11 = "Encrypt message called before bleSKDevice is derived";
LABEL_11:
      _os_log_impl((void *)&_mh_execute_header, v7, v9, v11, v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }
  }

  v15 = sub_10006B828();
  v16 = swift_allocError(&type metadata for DSKError, v15, 0, 0);
  *v17 = 0;
  return swift_willThrow(v16);
}

void sub_1001CCA10(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  NSObject *oslog;
  uint64_t v23;
  _BYTE v24[16];
  uint64_t v25;

  v5 = *(_QWORD *)(v2 + 56);
  v6 = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(v2 + 56) = a1;
  *(_QWORD *)(v2 + 64) = a2;
  sub_10006B9B4(v5, v6);
  sub_100063C8C(a1, a2);
  if (qword_100344728 != -1)
    swift_once(&qword_100344728, sub_1001CD5F0);
  v7 = type metadata accessor for Logger(0);
  sub_10009673C(v7, (uint64_t)qword_100349D08);
  sub_100063C8C(a1, a2);
  v8 = sub_100063C8C(a1, a2);
  oslog = Logger.logObject.getter(v8);
  v12 = static os_log_type_t.info.getter(oslog, v9, v10, v11);
  if (os_log_type_enabled(oslog, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    v25 = v14;
    *(_DWORD *)v13 = 136315138;
    sub_1001BD2CC(a1, a2);
    v16 = v15;
    v17 = sub_100063D3C((uint64_t *)&unk_100346060);
    v18 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
    v19 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v17, v18);
    v21 = v20;
    swift_bridgeObjectRelease(v16);
    v23 = sub_1001C56EC(v19, v21, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, v24, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease(v21);
    sub_100063CD0(a1, a2);
    sub_100063CD0(a1, a2);
    _os_log_impl((void *)&_mh_execute_header, oslog, v12, "Set supported protocol versions as %s", v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

  }
  else
  {
    sub_100063CD0(a1, a2);
    sub_100063CD0(a1, a2);

  }
}

uint64_t sub_1001CCC80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  id v7;
  void *v8;
  unint64_t v9;
  unsigned __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  unint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  Class isa;
  Class v28;
  __int128 v29;
  Class v30;
  uint64_t v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  uint64_t v43;
  os_log_type_t v44;
  uint8_t *v45;
  unint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  id v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  _DWORD *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  id v65;
  _DWORD *v66;
  uint8_t *buf;
  id type;
  os_log_type_t typea;
  objc_class *v70;
  objc_class *v71;
  objc_class *v72;
  id v73;
  uint64_t v74;
  os_log_t log;
  NSObject *loga;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE v80[8];
  uint64_t v81[3];
  uint64_t v82;
  uint64_t v83;
  __int128 v84;

  v7 = objc_msgSend(objc_allocWithZone((Class)NSMutableData), "initWithLength:", 32);
  if (!v7)
    goto LABEL_5;
  v8 = v7;
  v9 = *(_QWORD *)(v5 + 64);
  if (v9 >> 60 == 15
    || (v10 = (unsigned __int16 *)(a5 + OBJC_IVAR____TtC10seserviced8LyonPeer_selectedProtocolVersion),
        (*(_BYTE *)(a5 + OBJC_IVAR____TtC10seserviced8LyonPeer_selectedProtocolVersion + 2) & 1) != 0))
  {

LABEL_5:
    if (qword_100344728 != -1)
      swift_once(&qword_100344728, sub_1001CD5F0);
    v11 = type metadata accessor for Logger(0);
    v12 = sub_10009673C(v11, (uint64_t)qword_100349D08);
    v13 = Logger.logObject.getter(v12);
    v15 = static os_log_type_t.error.getter(v13, v14);
    v16 = v15;
    if (os_log_type_enabled(v13, v15))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, (os_log_type_t)v16, "Data to derive keys cannot be initializd", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }

    v18 = sub_10006B828();
    v19 = swift_allocError(&type metadata for DSKError, v18, 0, 0);
    *v20 = 0;
    swift_willThrow(v19);
    return v16;
  }
  v22 = *(_QWORD *)(v5 + 56);
  v23 = *v10;
  v84 = xmmword_1002889A0;
  v77 = v9;
  v78 = v22;
  if (*(_BYTE *)(v5 + 16) != 1)
  {
    v82 = sub_100063D3C(&qword_100344DE8);
    v83 = sub_10007EF60((unint64_t *)&qword_100344DF0, &qword_100344DE8, (uint64_t)&protocol conformance descriptor for <A> CollectionOfOne<A>);
    LOBYTE(v81[0]) = 92;
    LOBYTE(v79) = *(_BYTE *)sub_10006BA78(v81, v82);
    sub_100063C8C(v22, v9);
    Data._Representation.replaceSubrange(_:with:count:)(0, 0, &v79, 1);
    sub_10006BA9C(v81);
    __asm { BR              X10 }
  }
  sub_100063C8C(v22, v9);
  Data.append(_:)(v22, v9);
  LOWORD(v81[0]) = __rev16(v23);
  v24 = sub_100074C98((uint64_t)v81, (uint64_t)v81 + 2);
  v26 = v25;
  Data.append(_:)(v24, v25);
  sub_100063CD0(v24, v26);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v28 = Data._bridgeToObjectiveC()().super.isa;
  v29 = v84;
  sub_100063C8C(v84, *((unint64_t *)&v84 + 1));
  v30 = Data._bridgeToObjectiveC()().super.isa;
  v31 = sub_100063CD0(v29, *((unint64_t *)&v29 + 1));
  log = (os_log_t)ccsha256_di(v31);
  v73 = -[objc_class length](v28, "length");
  v72 = objc_retainAutorelease(v28);
  v32 = -[objc_class bytes](v72, "bytes");
  v33 = -[objc_class length](v30, "length");
  v71 = objc_retainAutorelease(v30);
  v34 = -[objc_class bytes](v71, "bytes");
  v35 = -[objc_class length](isa, "length");
  v70 = objc_retainAutorelease(isa);
  v36 = -[objc_class bytes](v70, "bytes");
  v37 = objc_msgSend(v8, "length");
  type = objc_retainAutorelease(v8);
  v38 = cchkdf(log, v73, v32, v33, v34, v35, v36, v37, objc_msgSend(type, "mutableBytes"));
  if (v38)
  {
    v39 = v38;
    if (qword_100344728 != -1)
      swift_once(&qword_100344728, sub_1001CD5F0);
    v40 = type metadata accessor for Logger(0);
    v41 = sub_10009673C(v40, (uint64_t)qword_100349D08);
    v42 = Logger.logObject.getter(v41);
    v44 = static os_log_type_t.error.getter(v42, v43);
    v16 = v44;
    if (os_log_type_enabled(v42, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v45 = 67109120;
      LODWORD(v81[0]) = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v81, (char *)v81 + 4, v45 + 4, v45 + 8);
      _os_log_impl((void *)&_mh_execute_header, v42, (os_log_type_t)v16, "Unable to derive key with error: %d", v45, 8u);
      swift_slowDealloc(v45, -1, -1);
    }

    v46 = sub_10006B828();
    v47 = swift_allocError(&type metadata for DSKError, v46, 0, 0);
    *v48 = 0;
    swift_willThrow(v47);
    sub_10006B9B4(v78, v77);

    sub_100063CD0(v84, *((unint64_t *)&v84 + 1));
  }
  else
  {
    if (qword_100344728 != -1)
      swift_once(&qword_100344728, sub_1001CD5F0);
    v49 = type metadata accessor for Logger(0);
    sub_10009673C(v49, (uint64_t)qword_100349D08);
    v50 = type;
    v51 = Logger.logObject.getter(v50);
    v52 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v51, v52))
    {
      loga = v51;
      typea = v52;
      v53 = (uint8_t *)swift_slowAlloc(12, -1);
      v74 = swift_slowAlloc(32, -1);
      v81[0] = v74;
      *(_DWORD *)v53 = 136380675;
      v54 = v53 + 12;
      v66 = v53 + 4;
      buf = v53;
      v55 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v8);
      v57 = v56;
      sub_1001BD2CC(v55, v56);
      v59 = v58;
      v60 = sub_100063D3C((uint64_t *)&unk_100346060);
      v61 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
      v62 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v60, v61);
      v64 = v63;
      swift_bridgeObjectRelease(v59);
      sub_100063CD0(v55, v57);
      v79 = sub_1001C56EC(v62, v64, v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, v80, v66, v54);

      swift_bridgeObjectRelease(v64);
      _os_log_impl((void *)&_mh_execute_header, loga, typea, "Derived %{private}s", buf, 0xCu);
      swift_arrayDestroy(v74, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v74, -1, -1);
      swift_slowDealloc(buf, -1, -1);

    }
    else
    {

    }
    v65 = v50;
    v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v8);
    sub_10006B9B4(v78, v77);

    sub_100063CD0(v84, *((unint64_t *)&v84 + 1));
  }
  return v16;
}

uint64_t sub_1001CD59C()
{
  uint64_t v0;

  sub_10006B9B4(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  sub_10006B9B4(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  sub_10006B9B4(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  return swift_deallocClassInstance(v0, 80, 7);
}

uint64_t type metadata accessor for LyonBLESecureChannel()
{
  return objc_opt_self(_TtC10seserviced20LyonBLESecureChannel);
}

uint64_t sub_1001CD5F0()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Logger(0);
  sub_1000980F8(v0, qword_100349D08);
  sub_10009673C(v0, (uint64_t)qword_100349D08);
  v1 = String.init(cString:)(SESLoggingSubsystem);
  return Logger.init(subsystem:category:)(v1);
}

id sub_1001CD664()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v36;
  uint64_t v37;
  objc_class *ObjectType;
  objc_super v39;
  _QWORD *v40;

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType(v0);
  v2 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS.QoSClass(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v16, v17);
  v19 = (char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = OBJC_IVAR____TtC10seserviced15SESAssetManager_queue;
  v36 = sub_10006C25C(0, (unint64_t *)&qword_1003461A0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v15, enum case for DispatchQoS.QoSClass.default(_:), v11);
  v20 = v1;
  DispatchQoS.init(qosClass:relativePriority:)(v15, 0);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v6);
  v40 = _swiftEmptyArrayStorage;
  v21 = sub_1000639EC((unint64_t *)&qword_100346E08, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v22 = sub_100063D3C(&qword_100346E10);
  v23 = sub_100127660((unint64_t *)&qword_100346E18, &qword_100346E10);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v40, v22, v23, v2, v21);
  v24 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000021, 0x80000001002C0770, v19, v5, v10, 0);
  *(_QWORD *)&v1[v37] = v24;
  v25 = String.init(cString:)(SESLoggingSubsystem);
  Logger.init(subsystem:category:)(v25);
  v20[OBJC_IVAR____TtC10seserviced15SESAssetManager_isRunning] = 0;
  v26 = &v20[OBJC_IVAR____TtC10seserviced15SESAssetManager_staticAssetPath];
  *(_QWORD *)v26 = 0xD000000000000021;
  *((_QWORD *)v26 + 1) = 0x80000001002C07A0;
  v27 = &v20[OBJC_IVAR____TtC10seserviced15SESAssetManager_activeAssetPath];
  *(_QWORD *)v27 = 0xD000000000000037;
  *((_QWORD *)v27 + 1) = 0x80000001002C07D0;
  *(_QWORD *)&v20[OBJC_IVAR____TtC10seserviced15SESAssetManager_minimumCompatibilityVersion] = 4;
  *(_QWORD *)&v20[OBJC_IVAR____TtC10seserviced15SESAssetManager_currentCompatibilityVersion] = 4;
  *(_QWORD *)&v20[OBJC_IVAR____TtC10seserviced15SESAssetManager_currentContentVersion] = 0;
  v28 = &v20[OBJC_IVAR____TtC10seserviced15SESAssetManager_assetInfoFileName];
  *(_QWORD *)v28 = 0x666E497465737341;
  *((_QWORD *)v28 + 1) = 0xEF7473696C702E6FLL;
  v29 = &v20[OBJC_IVAR____TtC10seserviced15SESAssetManager_profilePrefix];
  *(_QWORD *)v29 = 0x5F656C69666F7270;
  *((_QWORD *)v29 + 1) = 0xE800000000000000;
  v30 = &v20[OBJC_IVAR____TtC10seserviced15SESAssetManager_compatibilityVersionKey];
  *(_QWORD *)v30 = 0xD000000000000015;
  *((_QWORD *)v30 + 1) = 0x80000001002C0810;
  v31 = &v20[OBJC_IVAR____TtC10seserviced15SESAssetManager_contentVersionKey];
  *(_QWORD *)v31 = 0x746E65746E6F435FLL;
  *((_QWORD *)v31 + 1) = 0xEF6E6F6973726556;
  v32 = &v20[OBJC_IVAR____TtC10seserviced15SESAssetManager_manufacturerKey];
  strcpy(&v20[OBJC_IVAR____TtC10seserviced15SESAssetManager_manufacturerKey], "Manufacturer");
  v32[13] = 0;
  *((_WORD *)v32 + 7) = -5120;
  v33 = &v20[OBJC_IVAR____TtC10seserviced15SESAssetManager_versionKey];
  *(_QWORD *)v33 = 0x6E6F6973726556;
  *((_QWORD *)v33 + 1) = 0xE700000000000000;
  v34 = &v20[OBJC_IVAR____TtC10seserviced15SESAssetManager_lastAssetCheckBootUUIDKey];
  *(_QWORD *)v34 = 0xD00000000000001CLL;
  *((_QWORD *)v34 + 1) = 0x80000001002C0830;
  *(_QWORD *)&v20[OBJC_IVAR____TtC10seserviced15SESAssetManager_mobileAssetClient] = 0;
  *(_QWORD *)&v20[OBJC_IVAR____TtC10seserviced15SESAssetManager_delegates] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v20[OBJC_IVAR____TtC10seserviced15SESAssetManager_caStatisticsActivity] = 0;

  v39.receiver = v20;
  v39.super_class = ObjectType;
  return objc_msgSendSuper2(&v39, "init");
}

id sub_1001CDAF0()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SESAssetManager(0)), "init");
  qword_100349DE8 = (uint64_t)result;
  return result;
}

void sub_1001CDB48()
{
  if (qword_100344730 != -1)
    swift_once(&qword_100344730, sub_1001CDAF0);
  sub_1001CDB9C();
}

void sub_1001CDB9C()
{
  char *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  void *v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t, uint64_t);
  void (*v36)(_QWORD);
  char *v37;
  NSObject *v38;
  void *v39;
  NSString v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t);
  uint64_t v52;
  char *v53;
  NSObject *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  os_log_type_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  id v66;
  NSString v67;
  id v68;
  uint64_t v69;
  void *v70;
  void *v71;
  void *v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  char *v76;
  id v77;
  id v78;
  void (*v79)(char *, uint64_t);
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  NSString v86;
  uint64_t v87;
  NSObject *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  os_log_type_t v92;
  _BOOL4 v93;
  uint8_t *v94;
  id v95;
  uint64_t v96;
  char *v97;
  void (*v98)(char *, _QWORD, uint64_t);
  unsigned int v99;
  char *v100;
  uint64_t v101;
  id v102;
  char *v103;
  NSObject *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t aBlock;
  uint64_t v110;
  void *v111;
  void *v112;
  void *v113;
  uint64_t v114;

  v2 = v0;
  v3 = type metadata accessor for URL.DirectoryHint(0);
  v106 = *(_QWORD *)(v3 - 8);
  v107 = v3;
  __chkstk_darwin(v3, v4);
  v6 = (char *)&v95 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100063D3C(&qword_1003466C8);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v95 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for URL(0);
  v108 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11, v12);
  v103 = (char *)&v95 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13, v15);
  v100 = (char *)&v95 - v17;
  __chkstk_darwin(v16, v18);
  v104 = ((char *)&v95 - v19);
  v20 = type metadata accessor for DispatchPredicate(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20, v22);
  v24 = (id *)((char *)&v95 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v25 = *(void **)&v2[OBJC_IVAR____TtC10seserviced15SESAssetManager_queue];
  *v24 = v25;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v21 + 104))(v24, enum case for DispatchPredicate.onQueue(_:), v20);
  v102 = v25;
  LOBYTE(v25) = _dispatchPreconditionTest(_:)(v24);
  v26 = (*(uint64_t (**)(_QWORD *, uint64_t))(v21 + 8))(v24, v20);
  if ((v25 & 1) == 0)
  {
    __break(1u);
    return;
  }
  if ((v2[OBJC_IVAR____TtC10seserviced15SESAssetManager_isRunning] & 1) == 0)
  {
    v105 = v11;
    v101 = v1;
    v96 = OBJC_IVAR____TtC10seserviced15SESAssetManager_isRunning;
    v97 = &v2[OBJC_IVAR____TtC10seserviced15SESAssetManager_logger];
    v27 = Logger.logObject.getter(v26);
    v31 = static os_log_type_t.info.getter(v27, v28, v29, v30);
    if (os_log_type_enabled(v27, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v31, "Asset Manager starting", v32, 2u);
      swift_slowDealloc(v32, -1, -1);
    }

    v33 = *(_QWORD *)&v2[OBJC_IVAR____TtC10seserviced15SESAssetManager_activeAssetPath];
    v34 = *(_QWORD *)&v2[OBJC_IVAR____TtC10seserviced15SESAssetManager_activeAssetPath + 8];
    v35 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v108 + 56);
    v35(v10, 1, 1, v105);
    v36 = *(void (**)(_QWORD))(v106 + 104);
    v99 = enum case for URL.DirectoryHint.inferFromPath(_:);
    v98 = (void (*)(char *, _QWORD, uint64_t))v36;
    v36(v6);
    swift_bridgeObjectRetain(v34);
    v37 = v2;
    v38 = v104;
    URL.init(filePath:directoryHint:relativeTo:)(v33, v34, v6, v10);
    v39 = (void *)objc_opt_self(SESBootUUID);
    v40 = String._bridgeToObjectiveC()();
    v95 = v39;
    LODWORD(v39) = objc_msgSend(v39, "isFirstLaunchAfterBootForKey:", v40);

    if ((_DWORD)v39)
    {
      v41 = v101;
      sub_1001CE698((uint64_t)v38);
      if (v41)
      {
        (*(void (**)(NSObject *, uint64_t))(v108 + 8))(v38, v105);
        return;
      }
      sub_1001CEE48((uint64_t)v38);
      v101 = 0;
      v82 = *(_QWORD *)&v37[OBJC_IVAR____TtC10seserviced15SESAssetManager_staticAssetPath];
      v83 = *(_QWORD *)&v37[OBJC_IVAR____TtC10seserviced15SESAssetManager_staticAssetPath + 8];
      v35(v10, 1, 1, v105);
      v98(v6, v99, v107);
      swift_bridgeObjectRetain(v83);
      v84 = (uint64_t)v100;
      URL.init(filePath:directoryHint:relativeTo:)(v82, v83, v6, v10);
      v85 = v101;
      sub_1001CF8B0(v84, v38);
      if (v85)
      {
        v51 = *(void (**)(uint64_t, uint64_t))(v108 + 8);
        v44 = v105;
        v51(v84, v105);
        goto LABEL_12;
      }
      sub_1001D18F0((uint64_t)v38);
      v43 = 0;
      v42 = v37;
      v86 = String._bridgeToObjectiveC()();
      objc_msgSend(v95, "setFirstLaunchAfterBootDoneForKey:", v86);

      v88 = Logger.logObject.getter(v87);
      v92 = static os_log_type_t.info.getter(v88, v89, v90, v91);
      v93 = os_log_type_enabled(v88, v92);
      v44 = v105;
      if (v93)
      {
        v94 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v94 = 0;
        _os_log_impl((void *)&_mh_execute_header, v88, v92, "Asset Manager first launch after boot complete", v94, 2u);
        swift_slowDealloc(v94, -1, -1);
      }

      (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v84, v44);
    }
    else
    {
      v42 = v37;
      v43 = v101;
      v44 = v105;
    }
    v45 = v42;
    v46 = *(_QWORD *)&v42[OBJC_IVAR____TtC10seserviced15SESAssetManager_assetInfoFileName + 8];
    aBlock = *(_QWORD *)&v42[OBJC_IVAR____TtC10seserviced15SESAssetManager_assetInfoFileName];
    v110 = v46;
    v47 = v107;
    v98(v6, v99, v107);
    v48 = sub_1000F716C();
    swift_bridgeObjectRetain(v46);
    v49 = (uint64_t)v103;
    URL.appending<A>(path:directoryHint:)(&aBlock, v6, &type metadata for String, v48);
    (*(void (**)(char *, uint64_t))(v106 + 8))(v6, v47);
    swift_bridgeObjectRelease(v110);
    sub_1001D4830(v49, *(_QWORD *)&v45[OBJC_IVAR____TtC10seserviced15SESAssetManager_contentVersionKey], *(_QWORD *)&v45[OBJC_IVAR____TtC10seserviced15SESAssetManager_contentVersionKey + 8]);
    if (v43)
    {
      v51 = *(void (**)(uint64_t, uint64_t))(v108 + 8);
      v51(v49, v44);
LABEL_12:
      v51((uint64_t)v38, v44);
      return;
    }
    v52 = v50;
    *(_QWORD *)&v45[OBJC_IVAR____TtC10seserviced15SESAssetManager_currentContentVersion] = v50;
    v53 = v45;
    v54 = Logger.logObject.getter(v53);
    v58 = static os_log_type_t.info.getter(v54, v55, v56, v57);
    if (os_log_type_enabled(v54, v58))
    {
      v59 = swift_slowAlloc(22, -1);
      *(_DWORD *)v59 = 134218240;
      aBlock = 4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v110, v59 + 4, v59 + 12);

      *(_WORD *)(v59 + 12) = 2048;
      aBlock = v52;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v110, v59 + 14, v59 + 22);
      _os_log_impl((void *)&_mh_execute_header, v54, v58, "Asset Manager compatibility version %lu content version %lu", (uint8_t *)v59, 0x16u);
      swift_slowDealloc(v59, -1, -1);
    }
    else
    {

    }
    v60 = v102;

    v61 = swift_allocObject(&unk_10030D108, 24, 7);
    *(_QWORD *)(v61 + 16) = v53;
    v113 = sub_1001D4FBC;
    v114 = v61;
    aBlock = (uint64_t)_NSConcreteStackBlock;
    v110 = 1107296256;
    v111 = sub_10017BF6C;
    v112 = &unk_10030D120;
    v62 = _Block_copy(&aBlock);
    v63 = v114;
    v64 = v53;
    swift_release(v63);
    os_state_add_handler(v60, v62);
    _Block_release(v62);
    v65 = objc_opt_self(SESDAnalyticsLogger);
    sub_10004A4F8(v65, 4, v52);
    v66 = objc_allocWithZone((Class)NSBackgroundActivityScheduler);
    v67 = String._bridgeToObjectiveC()();
    v68 = objc_msgSend(v66, "initWithIdentifier:", v67);

    v69 = OBJC_IVAR____TtC10seserviced15SESAssetManager_caStatisticsActivity;
    v70 = *(void **)&v64[OBJC_IVAR____TtC10seserviced15SESAssetManager_caStatisticsActivity];
    *(_QWORD *)&v64[OBJC_IVAR____TtC10seserviced15SESAssetManager_caStatisticsActivity] = v68;

    v71 = *(void **)&v64[v69];
    if (v71)
    {
      objc_msgSend(v71, "setPreregistered:", 1);
      v72 = *(void **)&v64[v69];
      if (v72)
      {
        v73 = swift_allocObject(&unk_10030D158, 24, 7);
        *(_QWORD *)(v73 + 16) = v64;
        v113 = sub_1001D5000;
        v114 = v73;
        aBlock = (uint64_t)_NSConcreteStackBlock;
        v110 = 1107296256;
        v111 = sub_10016D660;
        v112 = &unk_10030D170;
        v74 = _Block_copy(&aBlock);
        v75 = v114;
        v76 = v64;
        v77 = v72;
        swift_release(v75);
        objc_msgSend(v77, "scheduleWithBlock:", v74);
        _Block_release(v74);

      }
    }
    v78 = objc_msgSend(objc_allocWithZone((Class)SESMobileAssetClient), "initWithManager:", v64);
    v79 = *(void (**)(char *, uint64_t))(v108 + 8);
    v80 = v105;
    v79(v103, v105);
    v79((char *)v104, v80);
    v81 = *(void **)&v64[OBJC_IVAR____TtC10seserviced15SESAssetManager_mobileAssetClient];
    *(_QWORD *)&v64[OBJC_IVAR____TtC10seserviced15SESAssetManager_mobileAssetClient] = v78;

    v45[v96] = 1;
  }
}

uint64_t sub_1001CE534(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _BYTE v9[24];

  if (qword_100344730 != -1)
    swift_once(&qword_100344730, sub_1001CDAF0);
  v3 = (_QWORD *)(qword_100349DE8 + OBJC_IVAR____TtC10seserviced15SESAssetManager_delegates);
  swift_beginAccess(qword_100349DE8 + OBJC_IVAR____TtC10seserviced15SESAssetManager_delegates, v9, 33, 0);
  v4 = swift_unknownObjectRetain(a2);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v4);
  v6 = *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v5 = *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v6 >= v5 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v6 + 1, 1);
  v7 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, a2);
  specialized Array._endMutation()(v7);
  return swift_endAccess(v9);
}

void sub_1001CE698(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  id v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t *v28;
  char *v29;
  uint64_t v30;
  int v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t *v33;
  uint64_t inited;
  NSString *v35;
  NSString *v36;
  void *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  NSObject *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  os_log_type_t v55;
  uint8_t *v56;
  Swift::String v57;
  os_log_t v58;
  uint8_t *v59;
  void *v60;
  id v61;
  NSURL *v62;
  void *v63;
  void *v64;
  unsigned int v65;
  id v66;
  id v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint8_t *v71;
  os_log_t v72;
  void *v73;
  __int128 v74;
  id *v75;
  uint64_t v76;
  void (*v77)(char *, uint64_t);
  id v78;
  uint64_t *v79;
  id v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  NSString *v87;
  __int128 v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  char v95[32];
  uint64_t v96;
  uint64_t v97;

  v2 = v1;
  v86 = type metadata accessor for URLResourceValues(0);
  v85 = *(_QWORD *)(v86 - 8);
  __chkstk_darwin(v86, v4);
  v91 = (char *)&v70 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100063D3C(&qword_1003466C8);
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v13 = __chkstk_darwin(v10, v12);
  v81 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v15);
  v90 = (char *)&v70 - v16;
  v83 = type metadata accessor for NSFastEnumerationIterator(0);
  v82 = *(_QWORD *)(v83 - 8);
  __chkstk_darwin(v83, v17);
  v19 = (char *)&v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = (id)objc_opt_self(NSFileManager);
  v20 = objc_msgSend(v80, "defaultManager");
  v89 = sub_100063D3C(&qword_100349F10);
  v21 = swift_allocObject(v89, 40, 7);
  v88 = xmmword_1002888E0;
  *(_OWORD *)(v21 + 16) = xmmword_1002888E0;
  *(_QWORD *)(v21 + 32) = NSURLIsRegularFileKey;
  v87 = NSURLIsRegularFileKey;
  v22 = (void *)NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)(a1, v21, 0, 0, 0);

  v23 = swift_bridgeObjectRelease(v21);
  if (!v22)
    return;
  v78 = v22;
  v24 = NSEnumerator.makeIterator()(v23);
  v25 = OBJC_IVAR____TtC10seserviced15SESAssetManager_profilePrefix;
  v26 = OBJC_IVAR____TtC10seserviced15SESAssetManager_logger;
  NSFastEnumerationIterator.next()(&v96, v24);
  if (!v97)
  {
LABEL_21:
    (*(void (**)(char *, uint64_t))(v82 + 8))(v19, v83);

    return;
  }
  v79 = (uint64_t *)(v2 + v25);
  v76 = v2 + v26;
  v75 = &v94;
  *(_QWORD *)&v27 = 136315138;
  v74 = v27;
  v28 = &qword_1003466C8;
  v29 = v90;
  v84 = v19;
  while (1)
  {
    v31 = swift_dynamicCast(v9, &v96, (char *)&type metadata for Any + 8, v10, 6);
    v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    if (v31)
      break;
    v32(v9, 1, 1, v10);
LABEL_5:
    v30 = sub_100096700((uint64_t)v9, v28);
LABEL_6:
    NSFastEnumerationIterator.next()(&v96, v30);
    if (!v97)
      goto LABEL_21;
  }
  v32(v9, 0, 1, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    goto LABEL_5;
  v33 = v28;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v29, v9, v10);
  inited = swift_initStackObject(v89, v95);
  *(_OWORD *)(inited + 16) = v88;
  v35 = v87;
  *(_QWORD *)(inited + 32) = v87;
  v36 = v35;
  v37 = sub_10009699C(inited);
  swift_setDeallocating(inited);
  type metadata accessor for URLResourceKey(0);
  v38 = v91;
  swift_arrayDestroy(inited + 32, 1, v39);
  v40 = v92;
  URL.resourceValues(forKeys:)(v37);
  v92 = v40;
  if (v40)
  {

    swift_bridgeObjectRelease(v37);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v90, v10);
    goto LABEL_24;
  }
  v41 = swift_bridgeObjectRelease(v37);
  v42 = URLResourceValues.isRegularFile.getter(v41);
  if (v42 == 2)
    __break(1u);
  v29 = v90;
  if ((v42 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v85 + 8))(v38, v86);
    v30 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v29, v10);
LABEL_20:
    v28 = v33;
    v19 = v84;
    goto LABEL_6;
  }
  v43 = URL.lastPathComponent.getter();
  v45 = v44;
  v46 = v29;
  v47 = *v79;
  v48 = v79[1];
  swift_bridgeObjectRetain(v48);
  LOBYTE(v47) = sub_1001D3CB0(v47, v48, v43, v45);
  swift_bridgeObjectRelease(v45);
  swift_bridgeObjectRelease(v48);
  if ((v47 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v85 + 8))(v91, v86);
    v30 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v46, v10);
    v29 = v46;
    goto LABEL_20;
  }
  v49 = v81;
  v50 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 16))(v81, v46, v10);
  v51 = Logger.logObject.getter(v50);
  v55 = static os_log_type_t.info.getter(v51, v52, v53, v54);
  if (os_log_type_enabled(v51, v55))
  {
    v56 = (uint8_t *)swift_slowAlloc(12, -1);
    v73 = (void *)swift_slowAlloc(32, -1);
    v94 = v73;
    v72 = v51;
    v71 = v56;
    *(_DWORD *)v56 = v74;
    v77 = (void (*)(char *, uint64_t))(v56 + 4);
    v57 = URL.path(percentEncoded:)(1);
    v93 = sub_1001C56EC(v57._countAndFlagsBits, (unint64_t)v57._object, (uint64_t *)&v94);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, v75, v77, v56 + 12);
    swift_bridgeObjectRelease(v57._object);
    v77 = *(void (**)(char *, uint64_t))(v11 + 8);
    v77(v49, v10);
    v58 = v72;
    v59 = v71;
    _os_log_impl((void *)&_mh_execute_header, v72, v55, "Deleting profile %s", v71, 0xCu);
    v60 = v73;
    swift_arrayDestroy(v73, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v60, -1, -1);
    swift_slowDealloc(v59, -1, -1);

  }
  else
  {

    v77 = *(void (**)(char *, uint64_t))(v11 + 8);
    v77(v49, v10);
  }
  v61 = objc_msgSend(v80, "defaultManager");
  v29 = v90;
  URL._bridgeToObjectiveC()(v62);
  v64 = v63;
  v94 = 0;
  v65 = objc_msgSend(v61, "removeItemAtURL:error:", v63, &v94);

  v66 = v94;
  if (v65)
  {
    v67 = v94;
    (*(void (**)(char *, uint64_t))(v85 + 8))(v91, v86);
    v30 = ((uint64_t (*)(char *, uint64_t))v77)(v29, v10);
    goto LABEL_20;
  }
  v68 = v94;
  _convertNSErrorToError(_:)(v66);

  swift_willThrow(v69);
  (*(void (**)(char *, uint64_t))(v85 + 8))(v91, v86);
  v77(v90, v10);
LABEL_24:
  (*(void (**)(char *, uint64_t))(v82 + 8))(v84, v83);
}

uint64_t sub_1001CEE48(uint64_t a1)
{
  _BYTE *v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  void *v25;
  id v26;
  uint64_t result;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  Swift::String v49;
  void (*v50)(_BYTE *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  char *v53;
  _BYTE *v54;
  _BYTE *v55;
  NSObject *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  os_log_type_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  Swift::String v64;
  _BYTE *v65;
  uint64_t (*v66)(uint64_t, uint64_t);
  os_log_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t inited;
  uint64_t v72;
  unint64_t v73;
  uint64_t (*v74)(uint64_t, uint64_t);
  _BYTE *v75;
  NSObject *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  os_log_type_t v80;
  _DWORD *v81;
  _DWORD *v82;
  _DWORD *v83;
  uint64_t v84;
  _BYTE v85[12];
  int v86;
  os_log_t v87;
  uint64_t v88;
  void (*v89)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v90;
  _BYTE *v91;
  _BYTE *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97[24];
  unint64_t v98;
  _QWORD v99[3];
  char v100[80];
  uint64_t v101;
  _BYTE v102[20];
  uint64_t v103;

  v2 = v1;
  v96 = a1;
  v3 = type metadata accessor for URL.DirectoryHint(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = &v85[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v95 = type metadata accessor for URL(0);
  v94 = *(_QWORD *)(v95 - 8);
  v9 = __chkstk_darwin(v95, v8);
  v90 = &v85[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = __chkstk_darwin(v9, v11);
  v91 = &v85[-v13];
  v15 = __chkstk_darwin(v12, v14);
  v92 = &v85[-v16];
  __chkstk_darwin(v15, v17);
  v19 = &v85[-v18];
  v20 = type metadata accessor for DispatchPredicate(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20, v22);
  v24 = &v85[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v25 = *(void **)&v2[OBJC_IVAR____TtC10seserviced15SESAssetManager_queue];
  *v24 = v25;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v21 + 104))(v24, enum case for DispatchPredicate.onQueue(_:), v20);
  v26 = v25;
  LOBYTE(v25) = _dispatchPreconditionTest(_:)(v24);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v21 + 8))(v24, v20);
  if ((v25 & 1) != 0)
  {
    v28 = *(_QWORD *)&v2[OBJC_IVAR____TtC10seserviced15SESAssetManager_assetInfoFileName + 8];
    v98 = *(_QWORD *)&v2[OBJC_IVAR____TtC10seserviced15SESAssetManager_assetInfoFileName];
    v99[0] = v28;
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v4 + 104))(v7, enum case for URL.DirectoryHint.inferFromPath(_:), v3);
    v29 = sub_1000F716C();
    swift_bridgeObjectRetain(v28);
    v30 = v96;
    URL.appending<A>(path:directoryHint:)(&v98, v7, &type metadata for String, v29);
    (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v7, v3);
    swift_bridgeObjectRelease(v99[0]);
    v103 = 0;
    v31 = *(_QWORD *)&v2[OBJC_IVAR____TtC10seserviced15SESAssetManager_compatibilityVersionKey];
    v32 = *(_QWORD *)&v2[OBJC_IVAR____TtC10seserviced15SESAssetManager_compatibilityVersionKey + 8];
    v33 = v93;
    sub_1001D4830((uint64_t)v19, v31, v32);
    v35 = (uint64_t)v19;
    v36 = v30;
    if (v33)
    {
      v93 = v33;
      v91 = v2;
      v37 = v94;
      v38 = v92;
      v39 = v95;
      v40 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v94 + 16))(v92, v30, v95);
      v41 = Logger.logObject.getter(v40);
      v45 = static os_log_type_t.info.getter(v41, v42, v43, v44);
      if (os_log_type_enabled(v41, v45))
      {
        v46 = (uint8_t *)swift_slowAlloc(12, -1);
        v47 = swift_slowAlloc(32, -1);
        v89 = (void (*)(_BYTE *, uint64_t, uint64_t))v35;
        v48 = v47;
        v98 = v47;
        *(_DWORD *)v46 = 136315138;
        v49 = URL.path(percentEncoded:)(1);
        v101 = sub_1001C56EC(v49._countAndFlagsBits, (unint64_t)v49._object, (uint64_t *)&v98);
        v39 = v95;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, v102, v46 + 4, v46 + 12);
        swift_bridgeObjectRelease(v49._object);
        v50 = *(void (**)(_BYTE *, uint64_t))(v37 + 8);
        v50(v38, v39);
        _os_log_impl((void *)&_mh_execute_header, v41, v45, "Deleting asset due to failure reading its compatibility version at %s", v46, 0xCu);
        swift_arrayDestroy(v48, 1, (char *)&type metadata for Any + 8);
        v51 = v48;
        v35 = (uint64_t)v89;
        swift_slowDealloc(v51, -1, -1);
        swift_slowDealloc(v46, -1, -1);

      }
      else
      {

        v50 = *(void (**)(_BYTE *, uint64_t))(v37 + 8);
        v50(v38, v39);
      }
      sub_1001D2ACC(v96);
      v50((_BYTE *)v35, v39);
      return swift_errorRelease(v93);
    }
    else
    {
      v103 = v34;
      v52 = v94;
      if (v34 == 4)
      {
        return (*(uint64_t (**)(uint64_t, uint64_t))(v94 + 8))(v35, v95);
      }
      else
      {
        v53 = &v2[OBJC_IVAR____TtC10seserviced15SESAssetManager_logger];
        v54 = v91;
        v89 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v94 + 16);
        v89(v91, v36, v95);
        v55 = v2;
        v93 = v53;
        v56 = Logger.logObject.getter(v55);
        v60 = static os_log_type_t.info.getter(v56, v57, v58, v59);
        v61 = v60;
        if (os_log_type_enabled(v56, v60))
        {
          v62 = swift_slowAlloc(32, -1);
          v92 = v55;
          v63 = v62;
          v88 = swift_slowAlloc(32, -1);
          v98 = v88;
          *(_DWORD *)v63 = 134218498;
          v87 = v56;
          swift_beginAccess(&v103, v97, 0, 0);
          v101 = v103;
          v86 = v61;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, v102, v63 + 4, v63 + 12);
          *(_WORD *)(v63 + 12) = 2048;
          v101 = 4;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, v102, v63 + 14, v63 + 22);

          *(_WORD *)(v63 + 22) = 2080;
          v64 = URL.path(percentEncoded:)(1);
          v101 = sub_1001C56EC(v64._countAndFlagsBits, (unint64_t)v64._object, (uint64_t *)&v98);
          v65 = v92;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, v102, v63 + 24, v63 + 32);
          swift_bridgeObjectRelease(v64._object);
          v66 = *(uint64_t (**)(uint64_t, uint64_t))(v94 + 8);
          v66((uint64_t)v54, v95);
          v67 = v87;
          _os_log_impl((void *)&_mh_execute_header, v87, (os_log_type_t)v86, "Migrating asset from %lu to %lu at %s", (uint8_t *)v63, 0x20u);
          v68 = v88;
          swift_arrayDestroy(v88, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v68, -1, -1);
          v69 = v63;
          v55 = v65;
          swift_slowDealloc(v69, -1, -1);

        }
        else
        {

          v66 = *(uint64_t (**)(uint64_t, uint64_t))(v52 + 8);
          v66((uint64_t)v54, v95);
        }
        swift_beginAccess(&v103, &v101, 0, 0);
        if (v103 == 4)
        {
          v70 = sub_100063D3C(&qword_100349F28);
          inited = swift_initStackObject(v70, v100);
          *(_OWORD *)(inited + 16) = xmmword_1002888F0;
          *(_QWORD *)(inited + 32) = v31;
          *(_QWORD *)(inited + 40) = v32;
          *(_QWORD *)(inited + 48) = 4;
          v72 = *(_QWORD *)&v55[OBJC_IVAR____TtC10seserviced15SESAssetManager_contentVersionKey + 8];
          *(_QWORD *)(inited + 56) = *(_QWORD *)&v55[OBJC_IVAR____TtC10seserviced15SESAssetManager_contentVersionKey];
          *(_QWORD *)(inited + 64) = v72;
          *(_QWORD *)(inited + 72) = 1;
          swift_bridgeObjectRetain(v32);
          swift_bridgeObjectRetain(v72);
          v73 = sub_10017CE08(inited);
          *(_QWORD *)&v55[OBJC_IVAR____TtC10seserviced15SESAssetManager_currentContentVersion] = 1;
          v99[2] = sub_100063D3C(&qword_100349F30);
          v98 = v73;
          sub_1001D4BC8(&v98, v35);
          v66(v35, v95);
          return sub_10006BA9C(&v98);
        }
        else
        {
          v74 = v66;
          v75 = v55;
          v76 = Logger.logObject.getter(v75);
          v80 = static os_log_type_t.info.getter(v76, v77, v78, v79);
          if (os_log_type_enabled(v76, v80))
          {
            v81 = (_DWORD *)swift_slowAlloc(32, -1);
            v89 = (void (*)(_BYTE *, uint64_t, uint64_t))v35;
            v82 = v81;
            *v81 = 134218496;
            v98 = v103;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, v99, v81 + 1, v81 + 3);
            *((_WORD *)v82 + 6) = 2048;
            v98 = 4;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, v99, (char *)v82 + 14, (char *)v82 + 22);
            *((_WORD *)v82 + 11) = 2048;

            v98 = 4;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, v99, v82 + 6, v82 + 8);

            _os_log_impl((void *)&_mh_execute_header, v76, v80, "Can't migrate asset compatibility version %lu current %lu minimum %ld", (uint8_t *)v82, 0x20u);
            v83 = v82;
            v35 = (uint64_t)v89;
            swift_slowDealloc(v83, -1, -1);
          }
          else
          {

          }
          v84 = v95;

          sub_1001D2ACC(v96);
          return v74(v35, v84);
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001CF8B0(uint64_t a1, NSObject *a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  void *v72;
  id v73;
  uint64_t v74;
  char *v75;
  void (*v76)(NSObject *, uint64_t, char *);
  uint64_t v77;
  NSObject *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  os_log_type_t v82;
  int v83;
  _BOOL4 v84;
  char *v85;
  uint64_t v86;
  Swift::String v87;
  char *v88;
  Swift::String v89;
  char *v90;
  id v91;
  void *object;
  NSString v93;
  void *v94;
  NSString v95;
  char *v96;
  void *v97;
  unint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  void (*v105)(char *, uint64_t);
  uint64_t v106;
  uint64_t v107;
  Swift::String v108;
  id v109;
  uint64_t result;
  char *v111;
  uint64_t v112;
  NSObject *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  os_log_type_t v117;
  uint8_t *v118;
  uint64_t v119;
  Swift::String v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t (*v126)(char *, uint64_t, char *);
  char *v127;
  uint64_t v128;
  NSObject *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  os_log_type_t v133;
  int v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  Swift::String v138;
  Swift::String v139;
  os_log_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  Swift::String v146;
  void *v147;
  id v148;
  unint64_t v149;
  void *v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  NSObject *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  os_log_type_t v162;
  uint64_t v163;
  uint64_t (*v164)(char *, os_log_t, char *);
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  os_log_type_t v169;
  int v170;
  _BOOL4 v171;
  uint64_t v172;
  Swift::String v173;
  _QWORD *v174;
  Swift::String v175;
  char *v176;
  char *v177;
  char *v178;
  uint64_t v179;
  NSObject *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  os_log_type_t v184;
  uint8_t *v185;
  uint64_t v186;
  Swift::String v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  NSString *v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  char *v199;
  int v200;
  _QWORD *v201;
  void (*v202)(uint64_t, uint64_t, uint64_t, char *);
  uint64_t inited;
  NSString *v204;
  void *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char v209;
  uint64_t v210;
  void *v211;
  void *v212;
  char v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v220;
  unint64_t v221;
  uint64_t v222;
  _BOOL8 v223;
  uint64_t v224;
  char v225;
  unint64_t v226;
  char v227;
  _QWORD *v228;
  uint64_t v229;
  BOOL v230;
  uint64_t v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  char *v241;
  unint64_t v242;
  uint64_t v243;
  char *v244;
  unint64_t v245;
  uint64_t v246;
  unint64_t v247;
  _QWORD *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  Swift::String v257;
  Swift::String v258;
  unint64_t v259;
  uint64_t v260;
  void *v261;
  void *v262;
  char *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  char *v271;
  char *v272;
  uint64_t v273;
  char *v274;
  char *v275;
  uint64_t v276;
  NSObject *v277;
  uint64_t v278;
  os_log_type_t v279;
  uint8_t *v280;
  uint64_t v281;
  char *v282;
  Swift::String v283;
  char *v284;
  char *v285;
  uint64_t *v286;
  unint64_t v287;
  void (*v288)(char *, uint64_t);
  void *v289;
  id v290;
  uint64_t v291;
  char *v292;
  char *v293;
  char *v294;
  uint64_t v295;
  uint64_t v296;
  char *v297;
  __int128 v298;
  _QWORD *countAndFlagsBits;
  char *v300;
  uint64_t v301;
  char *v302;
  char *v303;
  uint64_t *v304;
  unint64_t v305;
  uint64_t v306;
  char *v307;
  uint64_t v308;
  char *v309;
  uint64_t v310;
  char *v311;
  _QWORD *v312;
  unint64_t v313;
  char *v314;
  uint64_t v315;
  uint64_t v316;
  char *v317;
  unint64_t v318;
  uint64_t (*v319)(char *, os_log_t, char *);
  uint64_t v320;
  char *v321;
  char *v322;
  os_log_t v323;
  uint64_t v324;
  uint64_t v325;
  unint64_t v326;
  char v327;
  char v328[8];
  Swift::String v329;
  uint64_t v330;
  Swift::String v331;

  v3 = v2;
  v323 = a2;
  v324 = a1;
  v4 = sub_100063D3C(&qword_100349F08);
  v6 = __chkstk_darwin(v4, v5);
  v309 = (char *)&v286 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v8);
  v308 = (uint64_t)&v286 - v9;
  v301 = type metadata accessor for URLResourceValues(0);
  v300 = *(char **)(v301 - 8);
  __chkstk_darwin(v301, v10);
  v304 = (uint64_t *)((char *)&v286 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = sub_100063D3C(&qword_1003466C8);
  __chkstk_darwin(v12, v13);
  v302 = (char *)&v286 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v296 = type metadata accessor for NSFastEnumerationIterator(0);
  v295 = *(_QWORD *)(v296 - 8);
  __chkstk_darwin(v296, v15);
  v303 = (char *)&v286 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v315 = type metadata accessor for URL.DirectoryHint(0);
  v313 = *(_QWORD *)(v315 - 8);
  __chkstk_darwin(v315, v17);
  v314 = (char *)&v286 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (char *)type metadata accessor for URL(0);
  v20 = (_QWORD *)*((_QWORD *)v19 - 1);
  v22 = __chkstk_darwin(v19, v21);
  v311 = (char *)&v286 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v22, v24);
  v317 = (char *)&v286 - v26;
  v28 = __chkstk_darwin(v25, v27);
  v322 = (char *)&v286 - v29;
  v31 = __chkstk_darwin(v28, v30);
  v307 = (char *)&v286 - v32;
  v34 = __chkstk_darwin(v31, v33);
  v310 = (uint64_t)&v286 - v35;
  v37 = __chkstk_darwin(v34, v36);
  v293 = (char *)&v286 - v38;
  v40 = __chkstk_darwin(v37, v39);
  v294 = (char *)&v286 - v41;
  v43 = __chkstk_darwin(v40, v42);
  v305 = (unint64_t)&v286 - v44;
  v46 = __chkstk_darwin(v43, v45);
  countAndFlagsBits = (uint64_t **)((char *)&v286 - v47);
  v49 = __chkstk_darwin(v46, v48);
  *(_QWORD *)&v298 = (char *)&v286 - v50;
  v52 = __chkstk_darwin(v49, v51);
  v297 = (char *)&v286 - v53;
  v55 = __chkstk_darwin(v52, v54);
  v306 = (uint64_t)&v286 - v56;
  v58 = __chkstk_darwin(v55, v57);
  v316 = (uint64_t)&v286 - v59;
  v61 = __chkstk_darwin(v58, v60);
  v63 = (char *)&v286 - v62;
  __chkstk_darwin(v61, v64);
  v66 = ((char *)&v286 - v65);
  v67 = type metadata accessor for DispatchPredicate(0);
  v68 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67, v69);
  v71 = (uint64_t **)((char *)&v286 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0));
  v72 = *(void **)&v3[OBJC_IVAR____TtC10seserviced15SESAssetManager_queue];
  *v71 = v72;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v68 + 104))(v71, enum case for DispatchPredicate.onQueue(_:), v67);
  v73 = v72;
  v74 = _dispatchPreconditionTest(_:)(v71);
  (*(void (**)(_QWORD *, uint64_t))(v68 + 8))(v71, v67);
  if ((v74 & 1) != 0)
  {
    v321 = v3;
    v75 = &v3[OBJC_IVAR____TtC10seserviced15SESAssetManager_logger];
    v76 = (void (*)(NSObject *, uint64_t, char *))v20[2];
    v76(v66, v324, v19);
    v319 = (uint64_t (*)(char *, os_log_t, char *))v76;
    v77 = ((uint64_t (*)(char *, os_log_t, char *))v76)(v63, v323, v19);
    v318 = (unint64_t)v75;
    v78 = Logger.logObject.getter(v77);
    v82 = static os_log_type_t.info.getter(v78, v79, v80, v81);
    v83 = v82;
    v84 = os_log_type_enabled(v78, v82);
    v85 = v19;
    v312 = v20;
    if (v84)
    {
      v86 = swift_slowAlloc(22, -1);
      v292 = (char *)swift_slowAlloc(64, -1);
      v329._countAndFlagsBits = (uint64_t)v292;
      *(_DWORD *)v86 = 136315394;
      LODWORD(v291) = v83;
      v87 = URL.path(percentEncoded:)(1);
      v331._countAndFlagsBits = sub_1001C56EC(v87._countAndFlagsBits, (unint64_t)v87._object, &v329._countAndFlagsBits);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v331, &v331._object, v86 + 4, v86 + 12);
      swift_bridgeObjectRelease(v87._object);
      v88 = (char *)v20[1];
      ((void (*)(NSObject *, char *))v88)(v66, v85);
      *(_WORD *)(v86 + 12) = 2080;
      v89 = URL.path(percentEncoded:)(1);
      v331._countAndFlagsBits = sub_1001C56EC(v89._countAndFlagsBits, (unint64_t)v89._object, &v329._countAndFlagsBits);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v331, &v331._object, v86 + 14, v86 + 22);
      swift_bridgeObjectRelease(v89._object);
      ((void (*)(char *, char *))v88)(v63, v85);
      _os_log_impl((void *)&_mh_execute_header, v78, (os_log_type_t)v291, "Trying to apply %s on top of %s", (uint8_t *)v86, 0x16u);
      v90 = v292;
      swift_arrayDestroy(v292, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v90, -1, -1);
      swift_slowDealloc(v86, -1, -1);

    }
    else
    {

      v88 = (char *)v20[1];
      ((void (*)(NSObject *, char *))v88)(v66, v85);
      ((void (*)(char *, char *))v88)(v63, v85);
    }
    v91 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
    v327 = 0;
    object = URL.path(percentEncoded:)(1)._object;
    v93 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(object);
    LODWORD(object) = objc_msgSend(v91, "fileExistsAtPath:isDirectory:", v93, &v327);

    if (!(_DWORD)object || v327 != 1)
    {
      sub_10006C25C(0, (unint64_t *)&qword_1003469E0, NSError_ptr);
      v329._countAndFlagsBits = 0;
      v329._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(26);
      swift_bridgeObjectRelease(v329._object);
      v329._countAndFlagsBits = 0xD000000000000018;
      v329._object = (void *)0x80000001002C05D0;
      v108 = URL.path(percentEncoded:)(1);
      v103 = (uint64_t)v108._object;
      String.append(_:)(v108);
      swift_bridgeObjectRelease(v103);
      v109 = sub_1001E2838(0, 1, v329._countAndFlagsBits, (uint64_t)v329._object, 0);
      swift_willThrow(v109);
      goto LABEL_12;
    }
    v94 = URL.path(percentEncoded:)(1)._object;
    v95 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v94);
    LODWORD(v94) = objc_msgSend(v91, "fileExistsAtPath:isDirectory:", v95, &v327);

    if (!(_DWORD)v94 || v327 != 1)
    {
      v111 = v322;
      v112 = v319(v322, v323, v85);
      v113 = Logger.logObject.getter(v112);
      v117 = static os_log_type_t.info.getter(v113, v114, v115, v116);
      if (os_log_type_enabled(v113, v117))
      {
        v118 = (uint8_t *)swift_slowAlloc(12, -1);
        v119 = swift_slowAlloc(32, -1);
        v329._countAndFlagsBits = v119;
        *(_DWORD *)v118 = 136315138;
        v292 = v88;
        v120 = URL.path(percentEncoded:)(1);
        v331._countAndFlagsBits = sub_1001C56EC(v120._countAndFlagsBits, (unint64_t)v120._object, &v329._countAndFlagsBits);
        v88 = v292;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v331, &v331._object, v118 + 4, v118 + 12);
        swift_bridgeObjectRelease(v120._object);
        v121 = v85;
        ((void (*)(char *, char *))v88)(v322, v85);
        _os_log_impl((void *)&_mh_execute_header, v113, v117, "Invalid target asset at %s", v118, 0xCu);
        swift_arrayDestroy(v119, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v119, -1, -1);
        swift_slowDealloc(v118, -1, -1);

      }
      else
      {

        v121 = v85;
        ((void (*)(char *, char *))v88)(v111, v85);
      }
      v103 = (uint64_t)v323;
      v122 = v324;
      v123 = v320;
      v124 = v317;
      sub_1001D2ACC((uint64_t)v323);
      if (v123)
        goto LABEL_12;
      sub_1001D4DC4();
      v320 = 0;
      v125 = v122;
      v126 = (uint64_t (*)(char *, uint64_t, char *))v319;
      v319(v124, (os_log_t)v125, v121);
      v127 = v311;
      v128 = v126(v311, v103, v121);
      v129 = Logger.logObject.getter(v128);
      v133 = static os_log_type_t.info.getter(v129, v130, v131, v132);
      v134 = v133;
      if (os_log_type_enabled(v129, v133))
      {
        v135 = swift_slowAlloc(22, -1);
        v323 = v129;
        v136 = v124;
        v137 = v135;
        v324 = swift_slowAlloc(64, -1);
        v329._countAndFlagsBits = v324;
        *(_DWORD *)v137 = 136315394;
        LOBYTE(v103) = 1;
        LODWORD(v322) = v134;
        v138 = URL.path(percentEncoded:)(1);
        v331._countAndFlagsBits = sub_1001C56EC(v138._countAndFlagsBits, (unint64_t)v138._object, &v329._countAndFlagsBits);
        v290 = v91;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v331, &v331._object, v137 + 4, v137 + 12);
        swift_bridgeObjectRelease(v138._object);
        ((void (*)(char *, char *))v88)(v136, v121);
        *(_WORD *)(v137 + 12) = 2080;
        v139 = URL.path(percentEncoded:)(1);
        v331._countAndFlagsBits = sub_1001C56EC(v139._countAndFlagsBits, (unint64_t)v139._object, &v329._countAndFlagsBits);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v331, &v331._object, v137 + 14, v137 + 22);
        swift_bridgeObjectRelease(v139._object);
        ((void (*)(char *, char *))v88)(v127, v121);
        v140 = v323;
        _os_log_impl((void *)&_mh_execute_header, v323, (os_log_type_t)v322, "Copied asset from %s to %s", (uint8_t *)v137, 0x16u);
        v141 = v324;
        swift_arrayDestroy(v324, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v141, -1, -1);
        swift_slowDealloc(v137, -1, -1);

      }
      else
      {

        ((void (*)(char *, char *))v88)(v124, v121);
        ((void (*)(char *, char *))v88)(v127, v121);
        LOBYTE(v103) = 1;
      }
      return v103 & 1;
    }
    v292 = v88;
    v322 = v85;
    v96 = v321;
    v97 = *(void **)&v321[OBJC_IVAR____TtC10seserviced15SESAssetManager_assetInfoFileName + 8];
    v291 = *(_QWORD *)&v321[OBJC_IVAR____TtC10seserviced15SESAssetManager_assetInfoFileName];
    v329._countAndFlagsBits = v291;
    v329._object = v97;
    v98 = v313;
    v99 = *(char **)(v313 + 104);
    v100 = v314;
    LODWORD(v317) = enum case for URL.DirectoryHint.inferFromPath(_:);
    v101 = v315;
    v311 = v99;
    ((void (*)(char *))v99)(v314);
    v102 = sub_1000F716C();
    swift_bridgeObjectRetain(v97);
    v103 = v316;
    URL.appending<A>(path:directoryHint:)(&v329, v100, &type metadata for String, v102);
    v104 = v100;
    v105 = *(void (**)(char *, uint64_t))(v98 + 8);
    v105(v104, v101);
    swift_bridgeObjectRelease(v329._object);
    v106 = v320;
    sub_1001D4830(v103, *(_QWORD *)&v96[OBJC_IVAR____TtC10seserviced15SESAssetManager_compatibilityVersionKey], *(_QWORD *)&v96[OBJC_IVAR____TtC10seserviced15SESAssetManager_compatibilityVersionKey + 8]);
    if (v106)
    {
      ((void (*)(uint64_t, char *))v292)(v103, v322);
LABEL_12:

      return v103 & 1;
    }
    v142 = v107;
    v143 = v317;
    v289 = v97;
    v313 = v102;
    if (v107 != 4)
    {
      LOBYTE(v103) = sub_10006C25C(0, (unint64_t *)&qword_1003469E0, NSError_ptr);
      v329._countAndFlagsBits = 0;
      v329._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(43);
      swift_bridgeObjectRelease(v329._object);
      v329._countAndFlagsBits = 0xD000000000000029;
      v329._object = (void *)0x80000001002C05F0;
      v331._countAndFlagsBits = v142;
      v146._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt, &protocol witness table for UInt);
      v147 = v146._object;
      String.append(_:)(v146);
      swift_bridgeObjectRelease(v147);
      v148 = sub_1001E2838(0, 1, v329._countAndFlagsBits, (uint64_t)v329._object, 0);
      swift_willThrow(v148);

      ((void (*)(uint64_t, char *))v292)(v316, v322);
      return v103 & 1;
    }
    v144 = *(_QWORD *)&v321[OBJC_IVAR____TtC10seserviced15SESAssetManager_contentVersionKey];
    v145 = *(_QWORD *)&v321[OBJC_IVAR____TtC10seserviced15SESAssetManager_contentVersionKey + 8];
    sub_1001D4830(v316, v144, v145);
    v19 = v292;
    v287 = v149;
    v150 = v289;
    v329._countAndFlagsBits = v291;
    v329._object = v289;
    v151 = v143;
    v152 = v314;
    v288 = v105;
    v153 = v315;
    ((void (*)(char *, uint64_t, uint64_t))v311)(v314, v151, v315);
    swift_bridgeObjectRetain(v150);
    v154 = v306;
    URL.appending<A>(path:directoryHint:)(&v329, v152, &type metadata for String, v313);
    v288(v152, v153);
    swift_bridgeObjectRelease(v329._object);
    sub_1001D4830(v154, v144, v145);
    v320 = 0;
    v156 = v155;
    v157 = v287;
    v290 = v91;
    if (v155 >= v287)
    {
      v177 = v297;
      v178 = v322;
      v179 = v319(v297, v323, v322);
      v180 = Logger.logObject.getter(v179);
      v184 = static os_log_type_t.info.getter(v180, v181, v182, v183);
      if (os_log_type_enabled(v180, v184))
      {
        v185 = (uint8_t *)swift_slowAlloc(12, -1);
        v186 = swift_slowAlloc(32, -1);
        v329._countAndFlagsBits = v186;
        *(_DWORD *)v185 = 136315138;
        v324 = (uint64_t)(v185 + 4);
        v187 = URL.path(percentEncoded:)(1);
        v331._countAndFlagsBits = sub_1001C56EC(v187._countAndFlagsBits, (unint64_t)v187._object, &v329._countAndFlagsBits);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v331, &v331._object, v324, v185 + 12);
        swift_bridgeObjectRelease(v187._object);
        ((void (*)(char *, char *))v19)(v177, v178);
        _os_log_impl((void *)&_mh_execute_header, v180, v184, "Target asset already up to date %s", v185, 0xCu);
        swift_arrayDestroy(v186, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v186, -1, -1);
        swift_slowDealloc(v185, -1, -1);

      }
      else
      {

        ((void (*)(char *, char *))v19)(v177, v178);
      }
      ((void (*)(uint64_t, char *))v19)(v306, v178);
      ((void (*)(uint64_t, char *))v19)(v316, v178);
      LOBYTE(v103) = 0;
      return v103 & 1;
    }
    v158 = Logger.logObject.getter(v155);
    v162 = static os_log_type_t.info.getter(v158, v159, v160, v161);
    if (os_log_type_enabled(v158, v162))
    {
      v163 = swift_slowAlloc(22, -1);
      *(_DWORD *)v163 = 134218240;
      v329._countAndFlagsBits = v157;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v329, &v329._object, v163 + 4, v163 + 12);
      *(_WORD *)(v163 + 12) = 2048;
      v329._countAndFlagsBits = v156;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v329, &v329._object, v163 + 14, v163 + 22);
      _os_log_impl((void *)&_mh_execute_header, v158, v162, "Source asset version %lu target asset version %lu", (uint8_t *)v163, 0x16u);
      swift_slowDealloc(v163, -1, -1);
    }

    v68 = v298;
    v3 = v322;
    v164 = v319;
    v319((char *)v298, v323, v322);
    v20 = countAndFlagsBits;
    v165 = v164((char *)countAndFlagsBits, (os_log_t)v324, v3);
    v66 = Logger.logObject.getter(v165);
    v169 = static os_log_type_t.info.getter(v66, v166, v167, v168);
    v170 = v169;
    v171 = os_log_type_enabled(v66, v169);
    v74 = v310;
    if (v171)
    {
      v172 = swift_slowAlloc(22, -1);
      v297 = (char *)swift_slowAlloc(64, -1);
      v329._countAndFlagsBits = (uint64_t)v297;
      *(_DWORD *)v172 = 136315394;
      LODWORD(v286) = v170;
      v173 = URL.path(percentEncoded:)(1);
      v331._countAndFlagsBits = sub_1001C56EC(v173._countAndFlagsBits, (unint64_t)v173._object, &v329._countAndFlagsBits);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v331, &v331._object, v172 + 4, v172 + 12);
      swift_bridgeObjectRelease(v173._object);
      ((void (*)(uint64_t, char *))v19)(v68, v3);
      *(_WORD *)(v172 + 12) = 2080;
      v174 = countAndFlagsBits;
      v175 = URL.path(percentEncoded:)(1);
      v331._countAndFlagsBits = sub_1001C56EC(v175._countAndFlagsBits, (unint64_t)v175._object, &v329._countAndFlagsBits);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v331, &v331._object, v172 + 14, v172 + 22);
      swift_bridgeObjectRelease(v175._object);
      ((void (*)(_QWORD *, char *))v19)(v174, v3);
      _os_log_impl((void *)&_mh_execute_header, v66, (os_log_type_t)v286, "Updating target asset %s with %s", (uint8_t *)v172, 0x16u);
      v176 = v297;
      swift_arrayDestroy(v297, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v176, -1, -1);
      swift_slowDealloc(v172, -1, -1);

      goto LABEL_33;
    }
  }
  else
  {
    __break(1u);
  }

  ((void (*)(uint64_t, char *))v19)(v68, v3);
  ((void (*)(_QWORD *, char *))v19)(v20, v3);
LABEL_33:
  v188 = v303;
  v189 = sub_100063D3C(&qword_100349F10);
  v190 = swift_allocObject(v189, 40, 7);
  v298 = xmmword_1002888E0;
  *(_OWORD *)(v190 + 16) = xmmword_1002888E0;
  *(_QWORD *)(v190 + 32) = NSURLIsRegularFileKey;
  v191 = NSURLIsRegularFileKey;
  v192 = (char *)NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)(v324, v190, 0, 0, 0);
  v193 = swift_bridgeObjectRelease(v190);
  v194 = (uint64_t)v302;
  if (!v192)
  {
    v197 = &_swiftEmptyDictionarySingleton;
LABEL_69:
    v234 = 0;
    countAndFlagsBits = v197;
    v237 = v197[8];
    v236 = (char *)(v197 + 8);
    v235 = v237;
    v238 = 1 << *(v236 - 32);
    v239 = -1;
    if (v238 < 64)
      v239 = ~(-1 << v238);
    v240 = v239 & v235;
    v241 = v321;
    v304 = (uint64_t *)&v321[OBJC_IVAR____TtC10seserviced15SESAssetManager_versionKey];
    v242 = (unint64_t)(v238 + 63) >> 6;
    *(_QWORD *)&v298 = v242 - 1;
    v303 = (char *)v242;
    v301 = v242 - 5;
    v302 = v236;
    v300 = v236 + 40;
    v243 = (uint64_t)v309;
    while (1)
    {
      v292 = v19;
      if (v240)
        break;
      v251 = v234 + 1;
      if (__OFADD__(v234, 1))
        __break(1u);
      if (v251 < (uint64_t)v303)
      {
        v252 = *(_QWORD *)&v302[8 * v251];
        if (v252)
          goto LABEL_80;
        if (v234 + 2 >= (uint64_t)v303)
        {
          ++v234;
        }
        else
        {
          v252 = *(_QWORD *)&v302[8 * v234 + 16];
          if (v252)
          {
            v251 = v234 + 2;
            goto LABEL_80;
          }
          if (v234 + 3 >= (uint64_t)v303)
          {
            v234 += 2;
          }
          else
          {
            v252 = *(_QWORD *)&v302[8 * v234 + 24];
            if (v252)
            {
              v251 = v234 + 3;
              goto LABEL_80;
            }
            v251 = v234 + 4;
            if (v234 + 4 >= (uint64_t)v303)
            {
              v234 += 3;
            }
            else
            {
              v252 = *(_QWORD *)&v302[8 * v251];
              if (v252)
              {
LABEL_101:
                v241 = v321;
                v243 = (uint64_t)v309;
                v74 = v310;
LABEL_80:
                v246 = (v252 - 1) & v252;
                v247 = __clz(__rbit64(v252)) + (v251 << 6);
                v234 = v251;
LABEL_76:
                v248 = countAndFlagsBits;
                v319((char *)v243, (os_log_t)(countAndFlagsBits[6] + v312[9] * v247), v322);
                v249 = v248[7];
                v250 = sub_100063D3C(&qword_100349F18);
                *(_QWORD *)(v243 + *(int *)(v250 + 48)) = *(_QWORD *)(v249 + 8 * v247);
                (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v250 - 8) + 56))(v243, 0, 1, v250);
                goto LABEL_86;
              }
              v268 = v234;
              while (v301 != v268)
              {
                v252 = *(_QWORD *)&v300[8 * v268++];
                if (v252)
                {
                  v251 = v268 + 4;
                  goto LABEL_101;
                }
              }
              v234 = v298;
            }
            v241 = v321;
            v243 = (uint64_t)v309;
            v74 = v310;
          }
        }
      }
      v253 = sub_100063D3C(&qword_100349F18);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v253 - 8) + 56))(v243, 1, 1, v253);
      v246 = 0;
LABEL_86:
      v254 = v308;
      sub_10006C218(v243, v308, &qword_100349F08);
      v255 = sub_100063D3C(&qword_100349F18);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v255 - 8) + 48))(v254, 1, v255) == 1)
      {
        swift_release(countAndFlagsBits);
        v269 = v316;
        v103 = v306;
        v270 = v320;
        sub_1001D2FCC(v316, v306);

        if (v270)
        {
          v271 = v322;
          v272 = v292;
          ((void (*)(uint64_t, char *))v292)(v103, v322);
          ((void (*)(uint64_t, char *))v272)(v269, v271);
        }
        else
        {
          v273 = v103;
          v274 = v322;
          v103 = (uint64_t)v292;
          ((void (*)(uint64_t, char *))v292)(v273, v322);
          ((void (*)(uint64_t, char *))v103)(v269, v274);
          *(_QWORD *)&v241[OBJC_IVAR____TtC10seserviced15SESAssetManager_currentContentVersion] = v287;
          LOBYTE(v103) = 1;
        }
        return v103 & 1;
      }
      v318 = v246;
      v256 = v234;
      v305 = *(_QWORD *)(v254 + *(int *)(v255 + 48));
      ((void (*)(uint64_t, uint64_t, char *))v312[4])(v74, v254, v322);
      v257 = URL.path(percentEncoded:)(1);
      v329 = v257;
      v258 = URL.path(percentEncoded:)(1);
      v331 = v258;
      v325 = 0;
      v326 = 0xE000000000000000;
      v259 = v313;
      v260 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v331, &v325, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v313, v313, v313);
      v262 = v261;
      swift_bridgeObjectRelease(v257._object);
      swift_bridgeObjectRelease(v258._object);
      v329._countAndFlagsBits = v260;
      v329._object = v262;
      v263 = v314;
      v264 = v315;
      ((void (*)(char *, _QWORD, uint64_t))v311)(v314, v317, v315);
      v265 = (uint64_t)v307;
      URL.appending<A>(component:directoryHint:)(&v329, v263, &type metadata for String, v259);
      v288(v263, v264);
      swift_bridgeObjectRelease(v262);
      v266 = v320;
      sub_1001D4830(v265, *v304, v304[1]);
      if (v266)
      {
        swift_errorRelease(v266);
        v234 = v256;
      }
      else
      {
        v234 = v256;
        if (v267 >= v305)
        {
          v320 = 0;
          v241 = v321;
          v243 = (uint64_t)v309;
          v74 = v310;
          v19 = v292;
          v240 = v318;
          goto LABEL_73;
        }
      }
      v74 = v310;
      v241 = v321;
      sub_1001D2FCC(v310, v265);
      v243 = (uint64_t)v309;
      v320 = 0;
      v19 = v292;
      v240 = v318;
LABEL_73:
      v244 = v322;
      ((void (*)(uint64_t, char *))v19)(v265, v322);
      ((void (*)(uint64_t, char *))v19)(v74, v244);
    }
    v245 = __clz(__rbit64(v240));
    v246 = (v240 - 1) & v240;
    v247 = v245 | (v234 << 6);
    goto LABEL_76;
  }
  v297 = v192;
  v195 = NSEnumerator.makeIterator()(v193);
  v196 = OBJC_IVAR____TtC10seserviced15SESAssetManager_versionKey;
  NSFastEnumerationIterator.next()(&v329, v195);
  if (!v330)
  {
    v197 = &_swiftEmptyDictionarySingleton;
    goto LABEL_68;
  }
  v286 = (uint64_t *)&v321[v196];
  v197 = &_swiftEmptyDictionarySingleton;
  v103 = (uint64_t)&type metadata for Any + 8;
  while (2)
  {
    countAndFlagsBits = v197;
    while (1)
    {
      v199 = v322;
      v200 = swift_dynamicCast(v194, &v329, (char *)&type metadata for Any + 8, v322, 6);
      v201 = v312;
      v202 = (void (*)(uint64_t, uint64_t, uint64_t, char *))v312[7];
      if (v200)
        break;
      v202(v194, 1, 1, v199);
LABEL_38:
      v198 = sub_100096700(v194, &qword_1003466C8);
LABEL_39:
      NSFastEnumerationIterator.next()(&v329, v198);
      if (!v330)
      {
        v197 = countAndFlagsBits;
LABEL_68:
        (*(void (**)(char *, uint64_t))(v295 + 8))(v188, v296);

        goto LABEL_69;
      }
    }
    v202(v194, 0, 1, v199);
    if (((unsigned int (*)(uint64_t, uint64_t, char *))v201[6])(v194, 1, v199) == 1)
      goto LABEL_38;
    ((void (*)(unint64_t, uint64_t, char *))v312[4])(v305, v194, v322);
    inited = swift_initStackObject(v189, v328);
    *(_OWORD *)(inited + 16) = v298;
    *(_QWORD *)(inited + 32) = v191;
    v204 = v191;
    v205 = sub_10009699C(inited);
    swift_setDeallocating(inited);
    type metadata accessor for URLResourceKey(0);
    swift_arrayDestroy(inited + 32, 1, v206);
    v207 = v320;
    URL.resourceValues(forKeys:)(v205);
    v320 = v207;
    if (v207)
    {

      swift_bridgeObjectRelease(v205);
      v275 = v322;
      ((void (*)(unint64_t, char *))v19)(v305, v322);
      (*(void (**)(char *, uint64_t))(v295 + 8))(v303, v296);
      swift_bridgeObjectRelease(countAndFlagsBits);
      ((void (*)(uint64_t, char *))v19)(v306, v275);
      ((void (*)(uint64_t, char *))v19)(v316, v275);
      return v103 & 1;
    }
    v208 = swift_bridgeObjectRelease(v205);
    v209 = URLResourceValues.isRegularFile.getter(v208);
    if (v209 == 2)
      goto LABEL_116;
    v188 = v303;
    v194 = (uint64_t)v302;
    if ((v209 & 1) == 0)
      goto LABEL_49;
    v210 = URL.lastPathComponent.getter();
    v212 = v211;
    if (v210 == v291 && v211 == v289)
    {
      swift_bridgeObjectRelease(v289);
LABEL_49:
      (*((void (**)(uint64_t *, uint64_t))v300 + 1))(v304, v301);
      v198 = ((uint64_t (*)(unint64_t, char *))v19)(v305, v322);
      goto LABEL_39;
    }
    v213 = _stringCompareWithSmolCheck(_:_:expecting:)(v210, v211, v291, v289, 0);
    swift_bridgeObjectRelease(v212);
    if ((v213 & 1) != 0)
      goto LABEL_49;
    v214 = v320;
    sub_1001D4830(v305, *v286, v286[1]);
    v320 = v214;
    if (v214)
    {
      swift_bridgeObjectRelease(countAndFlagsBits);
      v276 = v319(v293, (os_log_t)v305, v322);
      v277 = Logger.logObject.getter(v276);
      v279 = static os_log_type_t.error.getter(v277, v278);
      if (os_log_type_enabled(v277, v279))
      {
        v280 = (uint8_t *)swift_slowAlloc(12, -1);
        v281 = swift_slowAlloc(32, -1);
        v331._countAndFlagsBits = v281;
        *(_DWORD *)v280 = 136315138;
        v282 = v293;
        v283 = URL.path(percentEncoded:)(1);
        v325 = sub_1001C56EC(v283._countAndFlagsBits, (unint64_t)v283._object, &v331._countAndFlagsBits);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v325, &v326, v280 + 4, v280 + 12);
        swift_bridgeObjectRelease(v283._object);
        v284 = v282;
        v285 = v322;
        ((void (*)(char *, char *))v19)(v284, v322);
        _os_log_impl((void *)&_mh_execute_header, v277, v279, "Rejecting source asset due to incorrect file %s", v280, 0xCu);
        swift_arrayDestroy(v281, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v281, -1, -1);
        swift_slowDealloc(v280, -1, -1);

        swift_errorRelease(v320);
      }
      else
      {

        swift_errorRelease(v320);
        v285 = v322;
        ((void (*)(char *, char *))v19)(v293, v322);
      }
      (*((void (**)(uint64_t *, uint64_t))v300 + 1))(v304, v301);
      ((void (*)(unint64_t, char *))v19)(v305, v285);
      (*(void (**)(char *, uint64_t))(v295 + 8))(v303, v296);
      ((void (*)(uint64_t, char *))v19)(v306, v285);
      ((void (*)(uint64_t, char *))v19)(v316, v285);
      LOBYTE(v103) = 0;
      return v103 & 1;
    }
    v216 = v215;
    v217 = (uint64_t)v294;
    v319(v294, (os_log_t)v305, v322);
    v218 = (uint64_t)countAndFlagsBits;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(countAndFlagsBits);
    v331._countAndFlagsBits = v218;
    v221 = sub_100188204(v217);
    v222 = *(_QWORD *)(v218 + 16);
    v223 = (v220 & 1) == 0;
    v224 = v222 + v223;
    if (__OFADD__(v222, v223))
    {
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
      goto LABEL_117;
    }
    v225 = v220;
    if (countAndFlagsBits[3] >= v224)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_100192370();
LABEL_57:
      countAndFlagsBits = (_QWORD *)v331._countAndFlagsBits;
      if ((v225 & 1) != 0)
      {
        *(_QWORD *)(countAndFlagsBits[7] + 8 * v221) = v216;
      }
      else
      {
        v228 = countAndFlagsBits;
        countAndFlagsBits[(v221 >> 6) + 8] |= 1 << v221;
        v319((char *)(v228[6] + v312[9] * v221), (os_log_t)v294, v322);
        *(_QWORD *)(v228[7] + 8 * v221) = v216;
        v229 = v228[2];
        v230 = __OFADD__(v229, 1);
        v231 = v229 + 1;
        if (v230)
          goto LABEL_115;
        countAndFlagsBits[2] = v231;
      }
      swift_bridgeObjectRelease(0x8000000000000000);
      v232 = v322;
      ((void (*)(char *, char *))v19)(v294, v322);
      (*((void (**)(uint64_t *, uint64_t))v300 + 1))(v304, v301);
      v233 = ((uint64_t (*)(unint64_t, char *))v19)(v305, v232);
      v188 = v303;
      NSFastEnumerationIterator.next()(&v329, v233);
      v74 = v310;
      v194 = (uint64_t)v302;
      v197 = countAndFlagsBits;
      if (!v330)
        goto LABEL_68;
      continue;
    }
    break;
  }
  sub_10018D354(v224, isUniquelyReferenced_nonNull_native);
  v226 = sub_100188204((uint64_t)v294);
  if ((v225 & 1) == (v227 & 1))
  {
    v221 = v226;
    goto LABEL_57;
  }
LABEL_117:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v322);
  __break(1u);
  return result;
}

void sub_1001D18F0(uint64_t a1)
{
  uint64_t v1;
  id v3;
  NSString v4;
  id v5;
  id v6;
  NSString v7;
  id v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  uint64_t (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  int64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  __int128 v34;
  _OWORD v35[2];
  uint64_t v36;
  uint64_t (*v37)(char *, char *, uint64_t);
  __int128 v38;
  uint64_t v39;

  v3 = objc_allocWithZone((Class)NSUserDefaults);
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v3, "initWithSuiteName:", v4);

  if (v5)
  {
    v6 = v5;
    v7 = String._bridgeToObjectiveC()();
    v8 = objc_msgSend(v6, "dictionaryForKey:", v7);

    if (v8)
    {
      v9 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v8, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

      v10 = 0;
      v28 = v9 + 64;
      v11 = 1 << *(_BYTE *)(v9 + 32);
      v12 = -1;
      if (v11 < 64)
        v12 = ~(-1 << v11);
      v13 = v12 & *(_QWORD *)(v9 + 64);
      v31 = v9;
      v29 = v6;
      v30 = (unint64_t)(v11 + 63) >> 6;
      v27 = v9 + 104;
      while (!v13)
      {
        v18 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
          __break(1u);
          return;
        }
        if (v18 < v30)
        {
          v19 = *(_QWORD *)(v28 + 8 * v18);
          if (v19)
            goto LABEL_14;
          if (v10 + 2 >= v30)
          {
            ++v10;
          }
          else
          {
            v19 = *(_QWORD *)(v28 + 8 * (v10 + 2));
            if (v19)
            {
              v18 = v10 + 2;
              goto LABEL_14;
            }
            if (v10 + 3 >= v30)
            {
              v10 += 2;
            }
            else
            {
              v19 = *(_QWORD *)(v28 + 8 * (v10 + 3));
              if (v19)
              {
                v18 = v10 + 3;
LABEL_14:
                v33 = (v19 - 1) & v19;
                v14 = __clz(__rbit64(v19)) + (v18 << 6);
                v10 = v18;
LABEL_10:
                v15 = *(_QWORD *)(v31 + 56);
                v16 = (_QWORD *)(*(_QWORD *)(v31 + 48) + 16 * v14);
                v17 = v16[1];
                *(_QWORD *)&v34 = *v16;
                *((_QWORD *)&v34 + 1) = v17;
                sub_100096CB0(v15 + 32 * v14, (uint64_t)v35);
                swift_bridgeObjectRetain(v17);
                goto LABEL_20;
              }
              v18 = v10 + 4;
              if (v10 + 4 >= v30)
              {
                v10 += 3;
              }
              else
              {
                v19 = *(_QWORD *)(v28 + 8 * v18);
                if (v19)
                  goto LABEL_14;
                while (v30 - 5 != v10)
                {
                  v19 = *(_QWORD *)(v27 + 8 * v10++);
                  if (v19)
                  {
                    v18 = v10 + 4;
                    goto LABEL_14;
                  }
                }
                v10 = v30 - 1;
              }
            }
          }
        }
        v33 = 0;
        memset(v35, 0, sizeof(v35));
        v34 = 0u;
LABEL_20:
        sub_10006C218((uint64_t)&v34, (uint64_t)&v36, &qword_100349F20);
        v20 = v37;
        if (!v37)
        {

          swift_release(v31);
          return;
        }
        v32 = v10;
        v21 = v36;
        sub_10006C2B4(&v38, &v34);
        v22 = sub_100063D3C(&qword_100346050);
        if (swift_dynamicCast(&v39, &v34, (char *)&type metadata for Any + 8, v22, 6))
        {
          v23 = v39;
          v24 = *(_QWORD *)(v39 + 16);
          if (v24)
          {
            swift_bridgeObjectRetain(v39);
            v25 = 0;
            do
            {
              v26 = *(_QWORD *)(v23 + 8 * v25++ + 32);
              *(_QWORD *)&v34 = v26;
              swift_bridgeObjectRetain(v26);
              sub_1001D3E14((uint64_t *)&v34, v1, a1, v21, v20);
              swift_bridgeObjectRelease(v26);
            }
            while (v24 != v25);
            swift_bridgeObjectRelease(v20);
            swift_bridgeObjectRelease_n(v23, 2);
            v6 = v29;
          }
          else
          {
            swift_bridgeObjectRelease(v39);
            swift_bridgeObjectRelease(v20);
          }
        }
        else
        {
          swift_bridgeObjectRelease(v20);
        }
        v10 = v32;
        v13 = v33;
      }
      v33 = (v13 - 1) & v13;
      v14 = __clz(__rbit64(v13)) | (v10 << 6);
      goto LABEL_10;
    }

  }
}

uint64_t sub_1001D1CCC()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t inited;
  NSString *v43;
  NSString *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t result;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  Class isa;
  _DWORD *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t *v97;
  char *v98;
  id v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t (*v106)(char *, uint64_t);
  NSString *v107;
  __int128 v108;
  uint64_t v109;
  void (*v110)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v111;
  char *v112;
  char *v113;
  char v114[40];
  _QWORD v115[3];
  uint64_t v116;

  v1 = sub_100063D3C(&qword_100349F38);
  v3 = __chkstk_darwin(v1, v2);
  v102 = (uint64_t)&v92 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3, v5);
  v111 = (uint64_t)&v92 - v6;
  v104 = type metadata accessor for NSFastEnumerationIterator(0);
  v103 = *(_QWORD *)(v104 - 8);
  __chkstk_darwin(v104, v7);
  v105 = (uint64_t)&v92 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = type metadata accessor for URL.DirectoryHint(0);
  *(_QWORD *)&v108 = *(_QWORD *)(v109 - 8);
  __chkstk_darwin(v109, v9);
  v11 = (char *)&v92 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100063D3C(&qword_1003466C8);
  v14 = __chkstk_darwin(v12, v13);
  v16 = (char *)&v92 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v17);
  v19 = (char *)&v92 - v18;
  v20 = type metadata accessor for URL(0);
  v21 = *(_QWORD *)(v20 - 8);
  v23 = __chkstk_darwin(v20, v22);
  v112 = (char *)&v92 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23, v25);
  v27 = (char *)&v92 - v26;
  v28 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v100 = v0;
  v30 = *(_QWORD *)&v0[OBJC_IVAR____TtC10seserviced15SESAssetManager_activeAssetPath];
  v29 = *(_QWORD *)&v0[OBJC_IVAR____TtC10seserviced15SESAssetManager_activeAssetPath + 8];
  v110 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56);
  v110(v19, 1, 1, v20);
  (*(void (**)(char *, _QWORD, uint64_t))(v108 + 104))(v11, enum case for URL.DirectoryHint.inferFromPath(_:), v109);
  swift_bridgeObjectRetain(v29);
  URL.init(filePath:directoryHint:relativeTo:)(v30, v29, v11, v19);
  v109 = sub_100063D3C(&qword_100349F10);
  v31 = swift_allocObject(v109, 40, 7);
  v108 = xmmword_1002888E0;
  *(_OWORD *)(v31 + 16) = xmmword_1002888E0;
  *(_QWORD *)(v31 + 32) = NSURLIsRegularFileKey;
  v107 = NSURLIsRegularFileKey;
  v32 = (void *)NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)(v27, v31, 0, 0, 0);

  swift_bridgeObjectRelease(v31);
  v106 = *(uint64_t (**)(char *, uint64_t))(v21 + 8);
  v33 = v106(v27, v20);
  if (!v32)
  {
    v88 = &_swiftEmptyDictionarySingleton;
LABEL_26:
    v89 = sub_10017DF9C((uint64_t)v88);
    swift_bridgeObjectRelease(v88);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v89);
    v91 = sub_100015734((uint64_t)"assetmanager.state", (uint64_t)isa);

    return (uint64_t)v91;
  }
  v34 = v105;
  v99 = v32;
  v35 = NSEnumerator.makeIterator()(v33);
  v36 = OBJC_IVAR____TtC10seserviced15SESAssetManager_assetInfoFileName;
  v37 = OBJC_IVAR____TtC10seserviced15SESAssetManager_versionKey;
  v38 = OBJC_IVAR____TtC10seserviced15SESAssetManager_compatibilityVersionKey;
  v39 = OBJC_IVAR____TtC10seserviced15SESAssetManager_contentVersionKey;
  NSFastEnumerationIterator.next()(v115, v35);
  if (!v116)
  {
    v100 = (char *)&_swiftEmptyDictionarySingleton;
LABEL_25:
    (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v34, v104);

    v88 = v100;
    goto LABEL_26;
  }
  v98 = &v100[v36];
  v95 = (uint64_t *)&v100[v37];
  v97 = (uint64_t *)&v100[v38];
  v96 = (uint64_t *)&v100[v39];
  v100 = (char *)&_swiftEmptyDictionarySingleton;
  v40 = v110;
  v101 = v21;
  while (1)
  {
    while (!swift_dynamicCast(v16, v115, (char *)&type metadata for Any + 8, v20, 6))
    {
      v40(v16, 1, 1, v20);
LABEL_5:
      v41 = sub_100096700((uint64_t)v16, &qword_1003466C8);
LABEL_6:
      NSFastEnumerationIterator.next()(v115, v41);
      if (!v116)
        goto LABEL_25;
    }
    v40(v16, 0, 1, v20);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v16, 1, v20) == 1)
      goto LABEL_5;
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v112, v16, v20);
    inited = swift_initStackObject(v109, v114);
    *(_OWORD *)(inited + 16) = v108;
    v43 = v107;
    *(_QWORD *)(inited + 32) = v107;
    v44 = v43;
    v45 = sub_10009699C(inited);
    swift_setDeallocating(inited);
    type metadata accessor for URLResourceKey(0);
    v46 = v111;
    swift_arrayDestroy(inited + 32, 1, v47);
    URL.resourceValues(forKeys:)(v45);
    v48 = v34;
    swift_bridgeObjectRelease(v45);
    v49 = type metadata accessor for URLResourceValues(0);
    v50 = *(_QWORD *)(v49 - 8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v50 + 56))(v46, 0, 1, v49);
    v51 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48);
    if (v51(v46, 1, v49) == 1)
    {
      v34 = v48;
      v21 = v101;
      v106(v112, v20);
      v41 = sub_100096700(v46, &qword_100349F38);
      v40 = v110;
      goto LABEL_6;
    }
    v52 = v46;
    v53 = v102;
    sub_1001D5040(v52, v102);
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v51)(v53, 1, v49);
    if ((_DWORD)result == 1)
      break;
    v55 = URLResourceValues.isRegularFile.getter(result);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v50 + 8))(v53, v49);
    if (v55 == 2)
      goto LABEL_28;
    v56 = v111;
    v34 = v48;
    if ((v55 & 1) == 0)
    {
      v106(v112, v20);
      v41 = sub_100096700(v56, &qword_100349F38);
      v21 = v101;
      v40 = v110;
      goto LABEL_6;
    }
    v57 = URL.lastPathComponent.getter(result);
    v59 = v58;
    v60 = *((_QWORD *)v98 + 1);
    v21 = v101;
    if (v57 == *(_QWORD *)v98 && v58 == v60)
    {
      swift_bridgeObjectRelease(v58);
    }
    else
    {
      v61 = _stringCompareWithSmolCheck(_:_:expecting:)(v57, v58, *(_QWORD *)v98, v60, 0);
      swift_bridgeObjectRelease(v59);
      if ((v61 & 1) == 0)
      {
        sub_1001D4830((uint64_t)v112, *v95, v95[1]);
        v80 = v79;
        v105 = URL.lastPathComponent.getter(v79);
        v82 = v81;
        v113 = v80;
        v94 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt, &protocol witness table for UInt);
        v84 = v83;
        v85 = v100;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v100);
        v113 = v85;
        sub_10018F698(v94, v84, v105, v82, isUniquelyReferenced_nonNull_native);
        v100 = v113;
        swift_bridgeObjectRelease(v82);
        swift_bridgeObjectRelease(0x8000000000000000);
        goto LABEL_21;
      }
    }
    v63 = *v97;
    v62 = v97[1];
    sub_1001D4830((uint64_t)v112, *v97, v62);
    v92 = v64;
    v66 = *v96;
    v65 = v96[1];
    sub_1001D4830((uint64_t)v112, *v96, v65);
    v105 = v62;
    v94 = v63;
    v93 = v66;
    v113 = v67;
    swift_bridgeObjectRetain(v65);
    v68 = v65;
    v69 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt, &protocol witness table for UInt);
    v71 = v70;
    v72 = v100;
    v73 = swift_isUniquelyReferenced_nonNull_native(v100);
    v113 = v72;
    sub_10018F698(v69, v71, v93, v68, v73);
    v74 = v113;
    swift_bridgeObjectRelease(v68);
    swift_bridgeObjectRelease(0x8000000000000000);
    v113 = v92;
    v75 = v105;
    swift_bridgeObjectRetain(v105);
    v100 = (char *)dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt, &protocol witness table for UInt);
    v77 = v76;
    v78 = swift_isUniquelyReferenced_nonNull_native(v74);
    v113 = v74;
    sub_10018F698((uint64_t)v100, v77, v94, v75, v78);
    v100 = v113;
    swift_bridgeObjectRelease(v75);
    swift_bridgeObjectRelease(0x8000000000000000);
LABEL_21:
    v106(v112, v20);
    v87 = sub_100096700(v111, &qword_100349F38);
    NSFastEnumerationIterator.next()(v115, v87);
    v40 = v110;
    if (!v116)
      goto LABEL_25;
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1001D2668(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  void *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  _QWORD *v25;
  _QWORD aBlock[5];
  _QWORD *v27;

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = *(_QWORD *)&a3[OBJC_IVAR____TtC10seserviced15SESAssetManager_queue];
  v16 = (_QWORD *)swift_allocObject(&unk_10030D1A8, 40, 7);
  v16[2] = a3;
  v16[3] = a1;
  v16[4] = a2;
  aBlock[4] = sub_1001D5034;
  v27 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100071C98;
  aBlock[3] = &unk_10030D1C0;
  v17 = _Block_copy(aBlock);
  v18 = a3;
  v19 = swift_retain(a2);
  static DispatchQoS.unspecified.getter(v19);
  v25 = _swiftEmptyArrayStorage;
  v20 = sub_1000639EC((unint64_t *)&qword_100344A20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v21 = sub_100063D3C((uint64_t *)&unk_100346200);
  v22 = sub_100127660((unint64_t *)&qword_100344A30, (uint64_t *)&unk_100346200);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v21, v22, v6, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v10, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  return swift_release(v27);
}

uint64_t sub_1001D2864(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t);
  uint64_t v42;
  uint64_t v43;

  v40 = a3;
  v41 = a2;
  v37 = a1;
  v4 = type metadata accessor for URL.DirectoryHint(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100063D3C(&qword_1003466C8);
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  v38 = v13;
  v39 = v14;
  v16 = __chkstk_darwin(v13, v15);
  v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v19);
  v21 = (char *)&v37 - v20;
  v23 = *(_QWORD *)(a1 + OBJC_IVAR____TtC10seserviced15SESAssetManager_activeAssetPath);
  v22 = *(_QWORD *)(a1 + OBJC_IVAR____TtC10seserviced15SESAssetManager_activeAssetPath + 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 56))(v12, 1, 1);
  v25 = enum case for URL.DirectoryHint.inferFromPath(_:);
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 104);
  v26(v8, enum case for URL.DirectoryHint.inferFromPath(_:), v4);
  swift_bridgeObjectRetain(v22);
  URL.init(filePath:directoryHint:relativeTo:)(v23, v22, v8, v12);
  v27 = v37;
  v28 = *(_QWORD *)(v37 + OBJC_IVAR____TtC10seserviced15SESAssetManager_assetInfoFileName + 8);
  v42 = *(_QWORD *)(v37 + OBJC_IVAR____TtC10seserviced15SESAssetManager_assetInfoFileName);
  v43 = v28;
  v29 = v4;
  v26(v8, v25, v4);
  v30 = sub_1000F716C();
  swift_bridgeObjectRetain(v28);
  v31 = v38;
  URL.appending<A>(path:directoryHint:)(&v42, v8, &type metadata for String, v30);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v29);
  swift_bridgeObjectRelease(v43);
  v32 = *(void (**)(char *, uint64_t))(v39 + 8);
  v32(v18, v31);
  sub_1001D4830((uint64_t)v21, *(_QWORD *)(v27 + OBJC_IVAR____TtC10seserviced15SESAssetManager_contentVersionKey), *(_QWORD *)(v27 + OBJC_IVAR____TtC10seserviced15SESAssetManager_contentVersionKey + 8));
  v34 = v33;
  v35 = objc_opt_self(SESDAnalyticsLogger);
  sub_10004A4F8(v35, 4, v34);
  v41(1);
  return ((uint64_t (*)(char *, uint64_t))v32)(v21, v31);
}

void sub_1001D2ACC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint8_t *v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  os_log_type_t v19;
  uint64_t v20;
  uint8_t *v21;
  void *v22;
  void *v23;
  Swift::String v24;
  void (*v25)(char *, uint64_t);
  void *v26;
  uint8_t *v27;
  id v28;
  void *object;
  NSString v30;
  NSURL *v31;
  char *v32;
  void *v33;
  void *v34;
  unsigned int v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint8_t *v45;
  void *v46;
  void *v47;
  Swift::String v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  Swift::String v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t (*v58)(char *, uint64_t, uint64_t);
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  id v64;
  unint64_t v65;

  v3 = v2;
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  v8 = __chkstk_darwin(v5, v7);
  v62 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v57 - v11;
  v13 = (uint8_t *)(v1 + OBJC_IVAR____TtC10seserviced15SESAssetManager_logger);
  v58 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v14 = v58((char *)&v57 - v11, a1, v5);
  v59 = v13;
  v15 = Logger.logObject.getter(v14);
  v19 = static os_log_type_t.info.getter(v15, v16, v17, v18);
  if (os_log_type_enabled(v15, v19))
  {
    v20 = swift_slowAlloc(12, -1);
    v57 = a1;
    v21 = (uint8_t *)v20;
    v22 = (void *)swift_slowAlloc(32, -1);
    v61 = v2;
    v23 = v22;
    v64 = v22;
    *(_DWORD *)v21 = 136315138;
    v60 = v5;
    v24 = URL.path(percentEncoded:)(1);
    v63 = sub_1001C56EC(v24._countAndFlagsBits, (unint64_t)v24._object, (uint64_t *)&v64);
    v5 = v60;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v21 + 4, v21 + 12);
    swift_bridgeObjectRelease(v24._object);
    v25 = *(void (**)(char *, uint64_t))(v6 + 8);
    v25(v12, v5);
    _os_log_impl((void *)&_mh_execute_header, v15, v19, "Deleting %s", v21, 0xCu);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    v26 = v23;
    v3 = v61;
    swift_slowDealloc(v26, -1, -1);
    v27 = v21;
    a1 = v57;
    swift_slowDealloc(v27, -1, -1);

  }
  else
  {

    v25 = *(void (**)(char *, uint64_t))(v6 + 8);
    v25(v12, v5);
  }
  v28 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  object = URL.path(percentEncoded:)(1)._object;
  v30 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  LODWORD(object) = objc_msgSend(v28, "fileExistsAtPath:", v30);

  v32 = v62;
  if ((_DWORD)object)
  {
    URL._bridgeToObjectiveC()(v31);
    v34 = v33;
    v64 = 0;
    v35 = objc_msgSend(v28, "removeItemAtURL:error:", v33, &v64);

    v36 = v64;
    if (v35)
    {
      v37 = v64;
    }
    else
    {
      v49 = v64;
      v50 = _convertNSErrorToError(_:)(v36);

      swift_willThrow(v51);
      sub_10006C25C(0, (unint64_t *)&qword_1003469E0, NSError_ptr);
      v64 = 0;
      v65 = 0xE000000000000000;
      _StringGuts.grow(_:)(19);
      swift_bridgeObjectRelease(v65);
      v64 = (id)0xD000000000000011;
      v65 = 0x80000001002C0750;
      v52 = URL.path(percentEncoded:)(1);
      v53 = v52._object;
      String.append(_:)(v52);
      swift_bridgeObjectRelease(v53);
      v54 = (uint64_t)v64;
      v55 = v65;
      swift_errorRetain(v50);
      v56 = sub_1001E2838(0, 1, v54, v55, v50);
      swift_willThrow(v56);
      swift_errorRelease(v50);
    }

  }
  else
  {
    v38 = v58(v62, a1, v5);
    v39 = v5;
    v40 = Logger.logObject.getter(v38);
    v44 = static os_log_type_t.info.getter(v40, v41, v42, v43);
    if (os_log_type_enabled(v40, (os_log_type_t)v44))
    {
      v60 = v39;
      v45 = (uint8_t *)swift_slowAlloc(12, -1);
      v46 = (void *)swift_slowAlloc(32, -1);
      v61 = v3;
      v47 = v46;
      v64 = v46;
      *(_DWORD *)v45 = 136315138;
      v59 = v45 + 4;
      v48 = URL.path(percentEncoded:)(1);
      v63 = sub_1001C56EC(v48._countAndFlagsBits, (unint64_t)v48._object, (uint64_t *)&v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v59, v45 + 12);
      swift_bridgeObjectRelease(v48._object);
      v25(v32, v60);
      _os_log_impl((void *)&_mh_execute_header, v40, (os_log_type_t)v44, "Target does not exist %s", v45, 0xCu);
      swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v47, -1, -1);
      swift_slowDealloc(v45, -1, -1);

    }
    else
    {

      v25(v32, v39);
    }
  }
}

void sub_1001D2FCC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void *object;
  NSString v23;
  Swift::String v24;
  void *v25;
  id v26;
  void *v27;
  NSString v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(_BYTE *);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Swift::String v36;
  void *v37;
  Swift::String v38;
  unint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(_BYTE *, uint64_t);
  _BYTE *v44;
  NSURL *v45;
  void *v46;
  void *v47;
  NSURL *v48;
  void *v49;
  void *v50;
  id v51;
  unsigned int v52;
  uint64_t v53;
  id v54;
  NSURL *v55;
  void *v56;
  void *v57;
  NSURL *v58;
  void *v59;
  void *v60;
  unsigned __int8 v61;
  uint64_t v62;
  id v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  NSURL *v67;
  void *v68;
  void *v69;
  unsigned int v70;
  uint64_t v71;
  id v72;
  id v73;
  uint64_t v74;
  NSURL *v75;
  void *v76;
  void *v77;
  unsigned int v78;
  uint64_t v79;
  id v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  Swift::String v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  _BYTE v92[12];
  unsigned int v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _BYTE *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;

  v94 = a2;
  v3 = type metadata accessor for UUID(0);
  v96 = *(_QWORD *)(v3 - 8);
  v97 = v3;
  __chkstk_darwin(v3, v4);
  v6 = &v92[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v98 = type metadata accessor for URL.DirectoryHint(0);
  v100 = *(_QWORD *)(v98 - 8);
  __chkstk_darwin(v98, v7);
  v9 = &v92[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = sub_100063D3C(&qword_1003466C8);
  __chkstk_darwin(v10, v11);
  v13 = &v92[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v101 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v101 - 8);
  v16 = __chkstk_darwin(v101, v15);
  v18 = &v92[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v16, v19);
  v99 = &v92[-v20];
  v21 = (char *)objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v105 = 0;
  v102 = a1;
  object = URL.path(percentEncoded:)(1)._object;
  v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  LODWORD(object) = objc_msgSend(v21, "fileExistsAtPath:isDirectory:", v23, &v105);

  if (!(_DWORD)object || (v105 & 1) != 0)
  {
    sub_10006C25C(0, (unint64_t *)&qword_1003469E0, NSError_ptr);
    v103 = 0;
    v104 = 0xE000000000000000;
    _StringGuts.grow(_:)(19);
    swift_bridgeObjectRelease(v104);
    v103 = 0xD000000000000011;
    v104 = 0x80000001002C0620;
LABEL_4:
    v24 = URL.path(percentEncoded:)(1);
    v25 = v24._object;
    String.append(_:)(v24);
    swift_bridgeObjectRelease(v25);
    v26 = sub_1001E2838(0, 1, v103, v104, 0);
    swift_willThrow(v26);

    return;
  }
  v27 = URL.path(percentEncoded:)(1)._object;
  v28 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v27);
  LODWORD(v27) = objc_msgSend(v21, "isReadableFileAtPath:", v28);

  if (!(_DWORD)v27)
  {
    sub_10006C25C(0, (unint64_t *)&qword_1003469E0, NSError_ptr);
    v103 = 0;
    v104 = 0xE000000000000000;
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease(v104);
    v103 = 0xD00000000000001CLL;
    v104 = 0x80000001002C0640;
    goto LABEL_4;
  }
  v29 = *(_QWORD *)&v95[OBJC_IVAR____TtC10seserviced15SESAssetManager_activeAssetPath];
  v30 = *(_QWORD *)&v95[OBJC_IVAR____TtC10seserviced15SESAssetManager_activeAssetPath + 8];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v13, 1, 1, v101);
  v93 = enum case for URL.DirectoryHint.inferFromPath(_:);
  v95 = v21;
  v31 = *(void (**)(_BYTE *))(v100 + 104);
  v32 = v98;
  v31(v9);
  swift_bridgeObjectRetain(v30);
  v33 = URL.init(filePath:directoryHint:relativeTo:)(v29, v30, v9, v13);
  v103 = 1601203572;
  v104 = 0xE400000000000000;
  UUID.init()(v33);
  v34 = sub_1000639EC((unint64_t *)&qword_100344CC8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v35 = v97;
  v36._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v97, v34);
  v37 = v36._object;
  String.append(_:)(v36);
  swift_bridgeObjectRelease(v37);
  (*(void (**)(_BYTE *, uint64_t))(v96 + 8))(v6, v35);
  v38._countAndFlagsBits = 0x7473696C702ELL;
  v38._object = (void *)0xE600000000000000;
  String.append(_:)(v38);
  ((void (*)(_BYTE *, _QWORD, uint64_t))v31)(v9, v93, v32);
  v39 = sub_1000F716C();
  v40 = v99;
  URL.appending<A>(component:directoryHint:)(&v103, v9, &type metadata for String, v39);
  v41 = v32;
  v42 = v101;
  (*(void (**)(_BYTE *, uint64_t))(v100 + 8))(v9, v41);
  swift_bridgeObjectRelease(v104);
  v43 = *(void (**)(_BYTE *, uint64_t))(v14 + 8);
  v44 = v40;
  v43(v18, v42);
  URL._bridgeToObjectiveC()(v45);
  v47 = v46;
  URL._bridgeToObjectiveC()(v48);
  v50 = v49;
  v103 = 0;
  v51 = v95;
  v52 = objc_msgSend(v95, "copyItemAtURL:toURL:error:", v47, v49, &v103);

  v53 = v103;
  if (v52)
  {
    v54 = (id)v103;
    URL._bridgeToObjectiveC()(v55);
    v57 = v56;
    URL._bridgeToObjectiveC()(v58);
    v60 = v59;
    v103 = 0;
    v61 = objc_msgSend(v51, "replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:", v57, v59, 0, 0, 0, &v103);

    v62 = v103;
    if ((v61 & 1) != 0)
    {
      v63 = (id)v103;
      v43(v44, v42);

      return;
    }
    v73 = (id)v103;
    v65 = _convertNSErrorToError(_:)(v62);

    swift_willThrow(v74);
    URL._bridgeToObjectiveC()(v75);
    v77 = v76;
    v103 = 0;
    v78 = objc_msgSend(v51, "removeItemAtURL:error:", v76, &v103);

    v79 = v103;
    if (v78)
    {
      v80 = (id)v103;
    }
    else
    {
      v84 = (id)v103;
      v85 = _convertNSErrorToError(_:)(v79);

      swift_willThrow(v86);
      swift_errorRelease(v85);
    }
    sub_10006C25C(0, (unint64_t *)&qword_1003469E0, NSError_ptr);
    v103 = 0;
    v104 = 0xE000000000000000;
    _StringGuts.grow(_:)(37);
    swift_bridgeObjectRelease(v104);
    v103 = 0xD000000000000023;
    v104 = 0x80000001002C0690;
  }
  else
  {
    v64 = (id)v103;
    v65 = _convertNSErrorToError(_:)(v53);

    swift_willThrow(v66);
    URL._bridgeToObjectiveC()(v67);
    v69 = v68;
    v103 = 0;
    v70 = objc_msgSend(v51, "removeItemAtURL:error:", v68, &v103);

    v71 = v103;
    if (v70)
    {
      v72 = (id)v103;
    }
    else
    {
      v81 = (id)v103;
      v82 = _convertNSErrorToError(_:)(v71);

      swift_willThrow(v83);
      swift_errorRelease(v82);
    }
    sub_10006C25C(0, (unint64_t *)&qword_1003469E0, NSError_ptr);
    v103 = 0;
    v104 = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease(v104);
    v103 = 0xD000000000000025;
    v104 = 0x80000001002C0660;
  }
  v87 = URL.path(percentEncoded:)(1);
  v88 = v87._object;
  String.append(_:)(v87);
  swift_bridgeObjectRelease(v88);
  v89 = v103;
  v90 = v104;
  swift_errorRetain(v65);
  v91 = sub_1001E2838(0, 1, v89, v90, v65);
  swift_willThrow(v91);

  swift_errorRelease(v65);
  v43(v44, v42);
}

