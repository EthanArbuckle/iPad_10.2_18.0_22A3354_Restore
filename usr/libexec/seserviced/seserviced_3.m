uint64_t sub_1001D3780(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  char *v14;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD aBlock[5];
  uint64_t v18;

  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3, v6);
  v7 = *(NSObject **)&v1[OBJC_IVAR____TtC10seserviced15SESAssetManager_queue];
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  v8 = *(unsigned __int8 *)(v4 + 80);
  v9 = (v8 + 24) & ~v8;
  v10 = swift_allocObject(&unk_10030D090, v9 + v5, v8 | 7);
  *(_QWORD *)(v10 + 16) = v1;
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v10 + v9, (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  v11 = swift_allocObject(&unk_10030D0B8, 32, 7);
  *(_QWORD *)(v11 + 16) = sub_1001D46D0;
  *(_QWORD *)(v11 + 24) = v10;
  aBlock[4] = sub_1000997DC;
  v18 = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10016DF1C;
  aBlock[3] = &unk_10030D0D0;
  v12 = _Block_copy(aBlock);
  v13 = v18;
  v14 = v1;
  swift_retain(v11);
  swift_release(v13);
  dispatch_sync(v7, v12);
  _Block_release(v12);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v11, "", 109, 287, 25, 1);
  swift_release(v10);
  result = swift_release(v11);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_1001D3920(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[32];

  v33 = a2;
  v3 = type metadata accessor for URL.DirectoryHint(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100063D3C(&qword_1003466C8);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v16 = ((char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = *(_QWORD *)(a1 + OBJC_IVAR____TtC10seserviced15SESAssetManager_activeAssetPath);
  v18 = *(_QWORD *)(a1 + OBJC_IVAR____TtC10seserviced15SESAssetManager_activeAssetPath + 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v7, enum case for URL.DirectoryHint.inferFromPath(_:), v3);
  swift_bridgeObjectRetain(v18);
  URL.init(filePath:directoryHint:relativeTo:)(v17, v18, v7, v11);
  LOBYTE(v4) = sub_1001CF8B0(v33, v16);
  result = (*(uint64_t (**)(NSObject *, uint64_t))(v13 + 8))(v16, v12);
  if ((v4 & 1) != 0)
  {
    v20 = Logger.logObject.getter(result);
    v24 = static os_log_type_t.info.getter(v20, v21, v22, v23);
    if (os_log_type_enabled(v20, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v24, "Notifying clients of an asset update", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

    v26 = (uint64_t *)(a1 + OBJC_IVAR____TtC10seserviced15SESAssetManager_delegates);
    swift_beginAccess(v26, v34, 0, 0);
    v27 = *v26;
    if ((unint64_t)v27 >> 62)
    {
      if (v27 < 0)
        v31 = v27;
      else
        v31 = v27 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n(v27, 2);
      result = _CocoaArrayWrapper.endIndex.getter(v31);
      v28 = result;
      if (result)
        goto LABEL_6;
    }
    else
    {
      v28 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain_n(v27, 2);
      if (v28)
      {
LABEL_6:
        if (v28 < 1)
        {
          __break(1u);
          return result;
        }
        for (i = 0; i != v28; ++i)
        {
          if ((v27 & 0xC000000000000001) != 0)
          {
            v30 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v27);
          }
          else
          {
            v30 = *(void **)(v27 + 8 * i + 32);
            swift_unknownObjectRetain(v30);
          }
          objc_msgSend(v30, "onNewAssetAvailable");
          swift_unknownObjectRelease(v30);
        }
      }
    }
    return swift_bridgeObjectRelease_n(v27, 2);
  }
  return result;
}

uint64_t sub_1001D3CB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::String_optional v5;
  uint64_t countAndFlagsBits;
  void *object;
  char v8;
  Swift::String_optional v9;
  Swift::String_optional v10;
  void *v11;
  _BOOL8 v12;

  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a4);
  v5 = String.Iterator.next()();
  if (v5.value._object)
  {
    countAndFlagsBits = v5.value._countAndFlagsBits;
    object = v5.value._object;
    do
    {
      v10 = String.Iterator.next()();
      if (!v10.value._object)
      {
        swift_bridgeObjectRelease(object);
        swift_bridgeObjectRelease(a4);
        swift_bridgeObjectRelease(a2);
        return 1;
      }
      if (countAndFlagsBits == v10.value._countAndFlagsBits && object == v10.value._object)
      {
        swift_bridgeObjectRelease(object);
        swift_bridgeObjectRelease(v10.value._object);
      }
      else
      {
        v8 = _stringCompareWithSmolCheck(_:_:expecting:)(countAndFlagsBits, object, v10.value._countAndFlagsBits, v10.value._object, 0);
        swift_bridgeObjectRelease(object);
        swift_bridgeObjectRelease(v10.value._object);
        if ((v8 & 1) == 0)
        {
          swift_bridgeObjectRelease(a4);
          swift_bridgeObjectRelease(a2);
          return 0;
        }
      }
      v9 = String.Iterator.next()();
      countAndFlagsBits = v9.value._countAndFlagsBits;
      object = v9.value._object;
    }
    while (v9.value._object);
  }
  swift_bridgeObjectRelease(a4);
  v11 = String.Iterator.next()().value._object;
  swift_bridgeObjectRelease(a2);
  v12 = v11 == 0;
  swift_bridgeObjectRelease(v11);
  return v12;
}

uint64_t sub_1001D3E14(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(char *, char *, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  Swift::String v35;
  __int128 v36;
  Swift::String v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  uint64_t (*v45)(char *, char *, uint64_t);
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  Swift::String v58;
  void (*v59)(char *, uint64_t);
  uint64_t v60;
  uint8_t *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  uint64_t v67;
  os_log_type_t v68;
  uint8_t *v69;
  uint64_t v70;
  Swift::String v71;
  uint64_t (*v72)(char *, uint64_t);
  char *v73;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t (*v81)(char *, char *, uint64_t);
  uint64_t v82;
  void (*v83)(char *, uint64_t);
  char *v84;
  uint64_t v85;
  void *v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;

  v81 = a5;
  v79 = a4;
  v8 = type metadata accessor for URL.DirectoryHint(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = type metadata accessor for URL(0);
  v83 = *(void (**)(char *, uint64_t))(v89 - 8);
  v14 = __chkstk_darwin(v89, v13);
  v78 = (char *)&v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14, v16);
  v19 = (char *)&v75 - v18;
  __chkstk_darwin(v17, v20);
  v84 = (char *)&v75 - v21;
  v22 = *a1;
  v23 = *(_QWORD *)(*a1 + 16);
  v76 = *a1;
  v82 = a3;
  v80 = v19;
  if (!v23)
  {
    v87 = 0u;
    v88 = 0u;
    goto LABEL_8;
  }
  v25 = *(_QWORD *)(a2 + OBJC_IVAR____TtC10seserviced15SESAssetManager_manufacturerKey);
  v24 = *(_QWORD *)(a2 + OBJC_IVAR____TtC10seserviced15SESAssetManager_manufacturerKey + 8);
  swift_bridgeObjectRetain(v24);
  v26 = sub_100187ED0(v25, v24);
  if ((v27 & 1) == 0)
  {
    v87 = 0u;
    v88 = 0u;
    swift_bridgeObjectRelease(v24);
    goto LABEL_8;
  }
  sub_100096CB0(*(_QWORD *)(v22 + 56) + 32 * v26, (uint64_t)&v87);
  swift_bridgeObjectRelease(v24);
  if (!*((_QWORD *)&v88 + 1))
  {
LABEL_8:
    v28 = a2;
    sub_100096700((uint64_t)&v87, (uint64_t *)&unk_100346130);
    goto LABEL_9;
  }
  v28 = a2;
  if (swift_dynamicCast(&v85, &v87, (char *)&type metadata for Any + 8, &type metadata for String, 6))
  {
    v30 = v85;
    v29 = v86;
    goto LABEL_10;
  }
LABEL_9:
  v29 = (void *)0xE900000000000073;
  v30 = 0x676E69747465735FLL;
LABEL_10:
  v31 = sub_100063D3C((uint64_t *)&unk_100348920);
  v32 = swift_allocObject(v31, 64, 7);
  *(_OWORD *)(v32 + 16) = xmmword_1002888F0;
  v33 = v81;
  *(_QWORD *)(v32 + 32) = v79;
  *(_QWORD *)(v32 + 40) = v33;
  v34 = *(_QWORD *)(v28 + OBJC_IVAR____TtC10seserviced15SESAssetManager_profilePrefix + 8);
  *(_QWORD *)&v87 = *(_QWORD *)(v28 + OBJC_IVAR____TtC10seserviced15SESAssetManager_profilePrefix);
  *((_QWORD *)&v87 + 1) = v34;
  swift_bridgeObjectRetain(v34);
  v35._countAndFlagsBits = v30;
  v35._object = v29;
  String.append(_:)(v35);
  v36 = v87;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRelease(v29);
  v87 = v36;
  swift_bridgeObjectRetain(*((_QWORD *)&v36 + 1));
  v37._countAndFlagsBits = 0x7473696C702ELL;
  v37._object = (void *)0xE600000000000000;
  String.append(_:)(v37);
  swift_bridgeObjectRelease(*((_QWORD *)&v36 + 1));
  v38 = *((_QWORD *)&v87 + 1);
  *(_QWORD *)(v32 + 48) = v87;
  *(_QWORD *)(v32 + 56) = v38;
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v12, enum case for URL.DirectoryHint.inferFromPath(_:), v8);
  v39 = sub_1000F716C();
  v40 = v84;
  URL.appending<A>(components:directoryHint:)(v32, v12, &type metadata for String, v39);
  v41 = v32;
  v42 = (uint64_t)v40;
  swift_bridgeObjectRelease(v41);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  v43 = v28 + OBJC_IVAR____TtC10seserviced15SESAssetManager_logger;
  v44 = v83;
  v45 = (uint64_t (*)(char *, char *, uint64_t))*((_QWORD *)v83 + 2);
  v46 = v80;
  v47 = v40;
  v48 = v89;
  v49 = v45(v80, v47, v89);
  v50 = Logger.logObject.getter(v49);
  v54 = static os_log_type_t.info.getter(v50, v51, v52, v53);
  if (os_log_type_enabled(v50, v54))
  {
    v55 = (uint8_t *)swift_slowAlloc(12, -1);
    v56 = swift_slowAlloc(32, -1);
    v81 = v45;
    v82 = v43;
    v57 = v56;
    *(_QWORD *)&v87 = v56;
    *(_DWORD *)v55 = 136315138;
    v58 = URL.path(percentEncoded:)(1);
    v85 = sub_1001C56EC(v58._countAndFlagsBits, (unint64_t)v58._object, (uint64_t *)&v87);
    v48 = v89;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86, v55 + 4, v55 + 12);
    swift_bridgeObjectRelease(v58._object);
    v59 = (void (*)(char *, uint64_t))*((_QWORD *)v44 + 1);
    v59(v46, v48);
    _os_log_impl((void *)&_mh_execute_header, v50, v54, "Writing profile %s", v55, 0xCu);
    swift_arrayDestroy(v57, 1, (char *)&type metadata for Any + 8);
    v60 = v57;
    v45 = v81;
    swift_slowDealloc(v60, -1, -1);
    v61 = v55;
    v42 = (uint64_t)v84;
    swift_slowDealloc(v61, -1, -1);

  }
  else
  {

    v59 = (void (*)(char *, uint64_t))*((_QWORD *)v44 + 1);
    v59(v46, v48);
  }
  v62 = v77;
  v63 = v78;
  v64 = v76;
  *((_QWORD *)&v88 + 1) = sub_100063D3C(&qword_100345388);
  *(_QWORD *)&v87 = v64;
  swift_bridgeObjectRetain(v64);
  sub_1001D4BC8(&v87, v42);
  if (v62)
  {
    v83 = v59;
    sub_10006BA9C(&v87);
    v65 = v45(v63, (char *)v42, v48);
    v66 = Logger.logObject.getter(v65);
    v68 = static os_log_type_t.error.getter(v66, v67);
    if (os_log_type_enabled(v66, v68))
    {
      v69 = (uint8_t *)swift_slowAlloc(12, -1);
      v70 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v87 = v70;
      *(_DWORD *)v69 = 136315138;
      v71 = URL.path(percentEncoded:)(1);
      v85 = sub_1001C56EC(v71._countAndFlagsBits, (unint64_t)v71._object, (uint64_t *)&v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86, v69 + 4, v69 + 12);
      swift_bridgeObjectRelease(v71._object);
      v48 = v89;
      v72 = (uint64_t (*)(char *, uint64_t))v83;
      v83(v63, v89);
      _os_log_impl((void *)&_mh_execute_header, v66, v68, "Failed to write profile file to %s", v69, 0xCu);
      swift_arrayDestroy(v70, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v70, -1, -1);
      swift_slowDealloc(v69, -1, -1);
      swift_errorRelease(v62);

      v73 = v84;
    }
    else
    {
      swift_errorRelease(v62);
      v72 = (uint64_t (*)(char *, uint64_t))v83;
      v83(v63, v48);

      v73 = (char *)v42;
    }
    return v72(v73, v48);
  }
  else
  {
    v59((char *)v42, v48);
    return sub_10006BA9C(&v87);
  }
}

uint64_t sub_1001D4550()
{
  return type metadata accessor for SESAssetManager(0);
}

uint64_t type metadata accessor for SESAssetManager(uint64_t a1)
{
  uint64_t result;

  result = qword_100349EF8;
  if (!qword_100349EF8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SESAssetManager);
  return result;
}

uint64_t sub_1001D4594(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[18];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_10028CC20;
    v4[3] = &unk_10028CC38;
    v4[4] = &unk_10028CC38;
    v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[7] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[8] = &unk_10028CC38;
    v4[9] = &unk_10028CC38;
    v4[10] = &unk_10028CC38;
    v4[11] = &unk_10028CC38;
    v4[12] = &unk_10028CC38;
    v4[13] = &unk_10028CC38;
    v4[14] = &unk_10028CC38;
    v4[15] = &unk_10028CC50;
    v4[16] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[17] = &unk_10028CC50;
    return swift_updateClassMetadata2(a1, 256, 18, v4, a1 + 80);
  }
  return result;
}

uint64_t sub_1001D465C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001D46D0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for URL(0) - 8) + 80);
  return sub_1001D3920(*(_QWORD *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t sub_1001D4700()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001D4710(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001D4720(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

id sub_1001D4728(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v15;

  v2 = v1;
  URL._bridgeToObjectiveC()(__stack_chk_guard);
  v5 = v4;
  v15 = 0;
  v6 = objc_msgSend(v2, "initWithContentsOfURL:error:", v4, &v15);

  v7 = v15;
  if (v6)
  {
    v8 = type metadata accessor for URL(0);
    v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
    v10 = v7;
    v9(a1, v8);
  }
  else
  {
    v11 = v15;
    _convertNSErrorToError(_:)(v7);

    swift_willThrow(v12);
    v13 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a1, v13);
  }
  return v6;
}

void sub_1001D4830(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  void *object;
  NSString v13;
  id v14;
  id v15;
  unint64_t v16;
  const char *v17;
  Swift::String v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  Swift::String v29;
  Swift::String v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v33 = a2;
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  object = URL.path(percentEncoded:)(1)._object;
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  LODWORD(object) = objc_msgSend(v11, "isReadableFileAtPath:", v13);

  if (!(_DWORD)object)
  {
    sub_10006C25C(0, (unint64_t *)&qword_1003469E0, NSError_ptr);
    *(_QWORD *)&v34 = 0;
    *((_QWORD *)&v34 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease(*((_QWORD *)&v34 + 1));
    v16 = 0xD000000000000015;
    v17 = "File is not readable ";
    goto LABEL_6;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a1, v6);
  v14 = objc_allocWithZone((Class)NSDictionary);
  v15 = sub_1001D4728((uint64_t)v10);
  if (v3)
  {
    swift_errorRelease(v3);
LABEL_4:
    sub_10006C25C(0, (unint64_t *)&qword_1003469E0, NSError_ptr);
    *(_QWORD *)&v34 = 0;
    *((_QWORD *)&v34 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease(*((_QWORD *)&v34 + 1));
    v16 = 0xD000000000000017;
    v17 = "Failed to read file at ";
LABEL_6:
    *(_QWORD *)&v34 = v16;
    *((_QWORD *)&v34 + 1) = (unint64_t)(v17 - 32) | 0x8000000000000000;
    v18 = URL.path(percentEncoded:)(1);
    v19 = v18._object;
    String.append(_:)(v18);
    swift_bridgeObjectRelease(v19);
    v21 = *((_QWORD *)&v34 + 1);
    v20 = v34;
LABEL_7:
    v22 = sub_1001E2838(0, 1, v20, v21, 0);
    swift_willThrow(v22);

    return;
  }
  v23 = v15;
  *(_QWORD *)&v34 = 0;
  static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)(v15, &v34, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  v24 = v34;
  if (!(_QWORD)v34)
    goto LABEL_4;
  if (*(_QWORD *)(v34 + 16))
  {
    swift_bridgeObjectRetain(a3);
    v25 = v33;
    v26 = sub_100187ED0(v33, a3);
    if ((v27 & 1) != 0)
    {
      sub_100096CB0(*(_QWORD *)(v24 + 56) + 32 * v26, (uint64_t)&v34);
    }
    else
    {
      v34 = 0u;
      v35 = 0u;
    }
    swift_bridgeObjectRelease(a3);
  }
  else
  {
    v34 = 0u;
    v35 = 0u;
    v25 = v33;
  }
  swift_bridgeObjectRelease(v24);
  if (!*((_QWORD *)&v35 + 1))
  {
    sub_100096700((uint64_t)&v34, (uint64_t *)&unk_100346130);
    goto LABEL_19;
  }
  if ((swift_dynamicCast(&v36, &v34, (char *)&type metadata for Any + 8, &type metadata for UInt, 6) & 1) == 0)
  {
LABEL_19:
    sub_10006C25C(0, (unint64_t *)&qword_1003469E0, NSError_ptr);
    *(_QWORD *)&v34 = 0;
    *((_QWORD *)&v34 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(42);
    v28 = *((_QWORD *)&v34 + 1);
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRelease(v28);
    *(_QWORD *)&v34 = v25;
    *((_QWORD *)&v34 + 1) = a3;
    v29._countAndFlagsBits = 0xD000000000000026;
    v29._object = (void *)0x80000001002C0700;
    String.append(_:)(v29);
    v30 = URL.path(percentEncoded:)(1);
    v31 = v30._object;
    String.append(_:)(v30);
    swift_bridgeObjectRelease(v31);
    v21 = *((_QWORD *)&v34 + 1);
    v20 = v34;
    goto LABEL_7;
  }

}

uint64_t sub_1001D4BC8(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  NSURL *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void *v23;
  uint64_t v24;
  id v25;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL.deletingLastPathComponent()();
  URL._bridgeToObjectiveC()(v10);
  v12 = v11;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  v25 = 0;
  LODWORD(v8) = objc_msgSend(v9, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v12, 1, 0, &v25);

  v13 = v25;
  if (!(_DWORD)v8)
    goto LABEL_4;
  v14 = (void *)objc_opt_self(NSPropertyListSerialization);
  v15 = a1[3];
  v16 = sub_10006BA78(a1, v15);
  v17 = _bridgeAnythingToObjectiveC<A>(_:)(v16, v15);
  v25 = 0;
  v18 = objc_msgSend(v14, "dataWithPropertyList:format:options:error:", v17, 200, 0, &v25);
  swift_unknownObjectRelease(v17);
  v13 = v25;
  if (v18)
  {
    v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v21 = v20;

    Data.write(to:options:)(a2, 0, v19, v21);
    return sub_100063CD0(v19, v21);
  }
  else
  {
LABEL_4:
    v23 = v13;
    _convertNSErrorToError(_:)(v13);

    return swift_willThrow(v24);
  }
}

void sub_1001D4DC4()
{
  id v0;
  void *object;
  NSString v2;
  NSURL *v3;
  void *v4;
  void *v5;
  NSURL *v6;
  void *v7;
  void *v8;
  unsigned __int8 v9;
  id v10;
  id v11;
  Swift::String v12;
  void *v13;
  id v14;
  id v15;
  id v16[2];

  v0 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  object = URL.path(percentEncoded:)(1)._object;
  v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  LODWORD(object) = objc_msgSend(v0, "isReadableFileAtPath:", v2);

  if (!(_DWORD)object)
  {
    sub_10006C25C(0, (unint64_t *)&qword_1003469E0, NSError_ptr);
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease(0xE000000000000000);
    v16[0] = (id)0xD000000000000015;
    v16[1] = (id)0x80000001002C0730;
    v12 = URL.path(percentEncoded:)(1);
    v13 = v12._object;
    String.append(_:)(v12);
    swift_bridgeObjectRelease(v13);
    v14 = sub_1001E2838(0, 1, 0xD000000000000015, 0x80000001002C0730, 0);
LABEL_6:
    swift_willThrow(v14);
    goto LABEL_7;
  }
  URL._bridgeToObjectiveC()(v3);
  v5 = v4;
  URL._bridgeToObjectiveC()(v6);
  v8 = v7;
  v16[0] = 0;
  v9 = objc_msgSend(v0, "copyItemAtURL:toURL:error:", v5, v7, v16);

  v10 = v16[0];
  if ((v9 & 1) == 0)
  {
    v15 = v16[0];
    _convertNSErrorToError(_:)(v10);

    goto LABEL_6;
  }
  v11 = v16[0];
LABEL_7:

}

void sub_1001D4FA4()
{
  sub_1001CDB48();
}

uint64_t sub_1001D4FBC()
{
  return sub_1001D1CCC();
}

uint64_t sub_1001D4FDC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001D5000(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1001D2668(a1, a2, *(char **)(v2 + 16));
}

uint64_t sub_1001D5008()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001D5034()
{
  uint64_t v0;

  return sub_1001D2864(*(_QWORD *)(v0 + 16), *(void (**)(uint64_t))(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1001D5040(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100063D3C(&qword_100349F38);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1001D50A4(unsigned int a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  os_log_type_t v35;
  _BOOL4 v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  NSObject *v41;
  uint64_t v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  os_log_type_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unsigned __int8 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  NSString v70;
  unint64_t v71;
  char v72;
  char v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  NSString v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  BOOL v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t *v100;
  _QWORD v101[2];
  int v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  char v114[16];
  __int128 v115;
  __int128 v116;
  _UNKNOWN **v117;

  v9 = v8;
  v108 = a5;
  v109 = a7;
  v107 = a6;
  v110 = a4;
  v111 = a2;
  v112 = a3;
  v12 = sub_100063D3C((uint64_t *)&unk_1003465E0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  v16 = __chkstk_darwin(v12, v15);
  v17 = (char *)v101 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v18);
  v106 = (uint64_t)v101 - v19;
  v20 = type metadata accessor for DispatchPredicate(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20, v22);
  v24 = (_QWORD *)((char *)v101 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v25 = qword_100354EE8;
  *v24 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v21 + 104))(v24, enum case for DispatchPredicate.onQueue(_:), v20);
  v26 = (id)v25;
  LOBYTE(v25) = _dispatchPreconditionTest(_:)(v24);
  v27 = (*(uint64_t (**)(_QWORD *, uint64_t))(v21 + 8))(v24, v20);
  if ((v25 & 1) == 0)
  {
    __break(1u);
LABEL_39:
    swift_once(&qword_100344680, sub_10016E9A8);
LABEL_10:
    LOWORD(v115) = bswap32(a1) >> 16;
    v38 = sub_100074C98((uint64_t)&v115, (uint64_t)&v115 + 2);
    v40 = v39;
    sub_10016E310(1u, 12, v38, v39, v13, v108, v107, v109, v21);
    sub_100063CD0(v38, v40);
    return;
  }
  if (*(_BYTE *)(v9 + OBJC_IVAR____TtC10seserviced8AlishaSE_isRunning) != 1)
  {
    v41 = Logger.logObject.getter(v27);
    v43 = static os_log_type_t.error.getter(v41, v42);
    if (!os_log_type_enabled(v41, v43))
    {
LABEL_16:

      return;
    }
    v44 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v44 = 0;
    _os_log_impl((void *)&_mh_execute_header, v41, v43, "Not running", v44, 2u);
    v45 = (uint64_t)v44;
LABEL_15:
    swift_slowDealloc(v45, -1, -1);
    goto LABEL_16;
  }
  if (a1 != 11)
  {
    v46 = v111;
    v47 = v112;
    sub_100063C8C(v111, v112);
    v48 = sub_100063C8C(v46, v47);
    v41 = Logger.logObject.getter(v48);
    v52 = static os_log_type_t.info.getter(v41, v49, v50, v51);
    if (!os_log_type_enabled(v41, v52))
    {

      sub_100063CD0(v46, v47);
      sub_100063CD0(v46, v47);
      return;
    }
    v53 = swift_slowAlloc(15, -1);
    v54 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v115 = v54;
    *(_DWORD *)v53 = 16777730;
    LOBYTE(v113) = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, (char *)&v113 + 1, v53 + 4, v53 + 5);
    *(_WORD *)(v53 + 5) = 2080;
    sub_1001BD2CC(v46, v47);
    v56 = v55;
    v113 = v55;
    v57 = sub_100063D3C((uint64_t *)&unk_100346060);
    v58 = sub_10006B86C();
    v59 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v57, v58);
    v61 = v60;
    swift_bridgeObjectRelease(v56);
    v113 = sub_1001C56EC(v59, v61, (uint64_t *)&v115);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, v114, v53 + 7, v53 + 15);
    swift_bridgeObjectRelease(v61);
    sub_100063CD0(v46, v47);
    sub_100063CD0(v46, v47);
    _os_log_impl((void *)&_mh_execute_header, v41, v52, "Ignoring unknown message with identifier %hhu payload %s", (uint8_t *)v53, 0xFu);
    swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v54, -1, -1);
    v45 = v53;
    goto LABEL_15;
  }
  LODWORD(v21) = a8 & 1;
  v29 = v111;
  v28 = v112;
  sub_1001D6758(v111, v112);
  if ((v30 & 0x10000) == 0)
  {
    a1 = v30;
    v31 = Logger.logObject.getter(v30);
    v35 = static os_log_type_t.info.getter(v31, v32, v33, v34);
    v36 = os_log_type_enabled(v31, v35);
    v13 = v110;
    if (v36)
    {
      v37 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v35, "Blocking invalid command", v37, 2u);
      swift_slowDealloc(v37, -1, -1);
    }

    if (qword_100344680 == -1)
      goto LABEL_10;
    goto LABEL_39;
  }
  sub_100063C8C(v29, v28);
  sub_1000723E8(v29, v28, 1);
  v63 = v110;
  switch(v62)
  {
    case 0xA4u:
      v79 = 1;
      break;
    case 0x71u:
      v75 = objc_opt_self(SESDAnalyticsLogger);
      UUID.uuidString.getter(v75);
      v77 = v76;
      v78 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v77);
      sub_100048C5C(v75, 1u, v78);

      break;
    case 0x3Cu:
      if (qword_100344680 != -1)
        swift_once(&qword_100344680, sub_10016E9A8);
      v64 = sub_10007C66C((uint64_t)&off_100305328);
      v66 = v65;
      sub_10016E310(1u, 12, v64, v65, v63, v108, v107, v109, v21);
      sub_100063CD0(v64, v66);
      v67 = objc_opt_self(SESDAnalyticsLogger);
      UUID.uuidString.getter(v67);
      v69 = v68;
      v70 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v69);
      LODWORD(v67) = sub_100049048(v67, v70);

      if ((_DWORD)v67 == 4)
      {
        v71 = v112;
        sub_100063C8C(v29, v112);
        sub_1000723E8(v29, v71, 2);
        v73 = v72;
        sub_100063C8C(v29, v71);
        sub_1000723E8(v29, v71, 3);
        if (v73 == 1 && (v74 & 0xFE) == 0x90)
          sub_1001754A8(v63);
      }
      return;
    default:
      v79 = 0;
      break;
  }
  if (qword_1003445F0 != -1)
    swift_once(&qword_1003445F0, sub_100128818);
  v80 = *(_QWORD *)(v9 + OBJC_IVAR____TtC10seserviced8AlishaSE_seTimeoutInSec);
  v81 = *(_QWORD *)(v63 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
  v82 = *(_QWORD *)(v63 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
  v101[1] = qword_100354C60;
  v104 = v81;
  v105 = v80;
  v103 = v82;
  v83 = v63;
  if (v82 >> 60 == 15)
  {
    v117 = 0;
    v115 = 0u;
    v116 = 0u;
  }
  else
  {
    v84 = v81;
    v85 = type metadata accessor for AlishaSE.HandoffToken();
    v86 = swift_allocObject(v85, 32, 7);
    *(_QWORD *)(v86 + 16) = v84;
    *(_QWORD *)(v86 + 24) = v82;
    *((_QWORD *)&v116 + 1) = v85;
    v117 = &off_10030D1E8;
    *(_QWORD *)&v115 = v86;
  }
  v87 = (_DWORD)v21 != 0;
  v88 = v107;
  sub_10013EA8C(v107, v106);
  sub_10013EA8C(v88, (uint64_t)v17);
  v89 = *(unsigned __int8 *)(v13 + 80);
  v90 = (v89 + 64) & ~v89;
  v91 = (v14 + v90 + 7) & 0xFFFFFFFFFFFFFFF8;
  v92 = swift_allocObject(&unk_10030D238, v91 + 9, v89 | 7);
  *(_BYTE *)(v92 + 16) = v79;
  v102 = v21;
  v93 = v111;
  LODWORD(v107) = v79;
  v94 = v112;
  *(_QWORD *)(v92 + 24) = v111;
  *(_QWORD *)(v92 + 32) = v94;
  *(_QWORD *)(v92 + 40) = v9;
  *(_QWORD *)(v92 + 48) = v83;
  v95 = v108;
  *(_QWORD *)(v92 + 56) = v108;
  sub_1001A308C((uint64_t)v17, v92 + v90);
  v96 = v92 + v91;
  v97 = v109;
  *(_QWORD *)v96 = v109;
  *(_BYTE *)(v96 + 8) = v87;
  v98 = type metadata accessor for SERequest(0);
  swift_allocObject(v98, *(unsigned int *)(v98 + 48), *(unsigned __int16 *)(v98 + 52));
  swift_retain(v83);
  sub_100063C8C(v93, v94);
  swift_retain(v83);
  swift_retain(v9);
  sub_10006BA34(v104, v103);
  v99 = sub_10013E1EC(0xD000000000000019, 0x80000001002C0980, v107, v105, 0, (uint64_t)&v115, 2, v83, v95, 0, v106, v97, v102, (uint64_t)sub_1001D82F0, v92);
  if (v99)
  {
    v100 = v99;
    sub_100127720(1uLL, (uint64_t)v99);
    swift_release(v100);
  }
  else
  {
    __break(1u);
    swift_unexpectedError(v83, "seserviced/AlishaSE.swift", 25, 1, 90);
    __break(1u);
    swift_unexpectedError(v83, "seserviced/AlishaSE.swift", 25, 1, 109);
    __break(1u);
    swift_unexpectedError(v83, "seserviced/AlishaSE.swift", 25, 1, 110);
    __break(1u);
  }
}

void sub_1001D5A38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (uint64_t *)((char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v7 = qword_100354EE8;
  *v6 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  v9 = (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) != 0)
  {
    v10 = OBJC_IVAR____TtC10seserviced8AlishaSE_isRunning;
    v11 = *(_BYTE *)(v1 + OBJC_IVAR____TtC10seserviced8AlishaSE_isRunning);
    v12 = Logger.logObject.getter(v9);
    v16 = v12;
    if ((v11 & 1) != 0)
    {
      v17 = static os_log_type_t.error.getter(v12, v13);
      if (os_log_type_enabled(v16, v17))
      {
        v18 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v18 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "AlishaSE is already running", v18, 2u);
        swift_slowDealloc(v18, -1, -1);
      }

    }
    else
    {
      v19 = static os_log_type_t.info.getter(v12, v13, v14, v15);
      if (os_log_type_enabled(v16, v19))
      {
        v20 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v20 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, v19, "Starting AlishaSE", v20, 2u);
        swift_slowDealloc(v20, -1, -1);
      }

      *(_BYTE *)(v1 + v10) = 1;
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1001D5C10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (uint64_t *)((char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v7 = qword_100354EE8;
  *v6 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  v9 = (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) != 0)
  {
    v10 = OBJC_IVAR____TtC10seserviced8AlishaSE_isRunning;
    v11 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC10seserviced8AlishaSE_isRunning);
    v12 = Logger.logObject.getter(v9);
    v16 = v12;
    if (v11 == 1)
    {
      v17 = static os_log_type_t.info.getter(v12, v13, v14, v15);
      if (os_log_type_enabled(v16, v17))
      {
        v18 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v18 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Stopping AlishaSE", v18, 2u);
        swift_slowDealloc(v18, -1, -1);
      }

      *(_BYTE *)(v1 + v10) = 0;
    }
    else
    {
      v19 = static os_log_type_t.error.getter(v12, v13);
      if (os_log_type_enabled(v16, v19))
      {
        v20 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v20 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, v19, "AlishaSE is not running", v20, 2u);
        swift_slowDealloc(v20, -1, -1);
      }

    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1001D5DE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  id v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  _UNKNOWN **v43;

  v37 = a6;
  v38 = a7;
  v39 = a1;
  v40 = a4;
  v13 = sub_100063D3C((uint64_t *)&unk_1003465E0);
  __chkstk_darwin(v13, v14);
  v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DispatchPredicate(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17, v19);
  v21 = (uint64_t *)((char *)&v37 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v22 = (void *)qword_100354EE8;
  *v21 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v18 + 104))(v21, enum case for DispatchPredicate.onQueue(_:), v17);
  v23 = v22;
  v24 = _dispatchPreconditionTest(_:)(v21);
  v25 = (*(uint64_t (**)(_QWORD *, uint64_t))(v18 + 8))(v21, v17);
  if ((v24 & 1) == 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (*(_BYTE *)(v8 + OBJC_IVAR____TtC10seserviced8AlishaSE_isRunning) == 1)
  {
    v24 = a5 & 1;
    if (qword_1003445F0 == -1)
    {
LABEL_6:
      v27 = *(_QWORD *)(a3 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
      v26 = *(_QWORD *)(a3 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
      if (v26 >> 60 == 15)
      {
        v43 = 0;
        v41 = 0u;
        v42 = 0u;
      }
      else
      {
        v32 = type metadata accessor for AlishaSE.HandoffToken();
        v33 = swift_allocObject(v32, 32, 7);
        *(_QWORD *)(v33 + 16) = v27;
        *(_QWORD *)(v33 + 24) = v26;
        *((_QWORD *)&v42 + 1) = v32;
        v43 = &off_10030D1E8;
        *(_QWORD *)&v41 = v33;
      }
      sub_10013EA8C(v37, (uint64_t)v16);
      v34 = type metadata accessor for SERequest(0);
      swift_allocObject(v34, *(unsigned int *)(v34 + 48), *(unsigned __int16 *)(v34 + 52));
      swift_retain(a8);
      swift_retain(a3);
      swift_bridgeObjectRetain(a2);
      sub_10006BA34(v27, v26);
      v35 = sub_10013E1EC(v39, a2, 1, 0, 1, (uint64_t)&v41, 2, a3, v40, v24, (uint64_t)v16, 0, 1u, v38, a8);
      if (v35)
      {
        v36 = v35;
        sub_100127720(0, (uint64_t)v35);
        swift_release(v36);
      }
      else
      {
        __break(1u);
      }
      return;
    }
LABEL_15:
    swift_once(&qword_1003445F0, sub_100128818);
    goto LABEL_6;
  }
  v28 = Logger.logObject.getter(v25);
  v30 = static os_log_type_t.error.getter(v28, v29);
  if (os_log_type_enabled(v28, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v31 = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, v30, "Not running", v31, 2u);
    swift_slowDealloc(v31, -1, -1);
  }

}

void sub_1001D6108(char *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(_QWORD *, uint64_t, uint64_t);
  id v11;
  uint64_t (*v12)(_QWORD *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v27[24];

  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = &v27[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v8 = qword_100354EE8;
  *v7 = qword_100354EE8;
  v9 = enum case for DispatchPredicate.onQueue(_:);
  v10 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v4 + 104);
  v10(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  v11 = (id)v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  v12 = *(uint64_t (**)(_QWORD *, uint64_t))(v4 + 8);
  v13 = v12(v7, v3);
  if ((v8 & 1) == 0)
  {
    __break(1u);
LABEL_17:
    swift_once(&qword_1003445F0, sub_100128818);
LABEL_6:
    v14 = qword_100354C60;
    v15 = qword_100354EE8;
    *v7 = qword_100354EE8;
    v10(v7, v9, v3);
    v16 = (id)v15;
    LOBYTE(v15) = _dispatchPreconditionTest(_:)(v7);
    v12(v7, v3);
    if ((v15 & 1) != 0)
    {
      if (!a1)
      {
        v23 = (uint64_t *)(v14 + OBJC_IVAR____TtC10seserviced5DSKSE_pendingRequestQueue);
        swift_beginAccess(v14 + OBJC_IVAR____TtC10seserviced5DSKSE_pendingRequestQueue, v27, 1, 0);
        v24 = *v23;
        *v23 = (uint64_t)_swiftEmptyArrayStorage;
        swift_bridgeObjectRelease(v24);
        goto LABEL_15;
      }
      v17 = (uint64_t *)(v14 + OBJC_IVAR____TtC10seserviced5DSKSE_pendingRequestQueue);
      swift_beginAccess(v14 + OBJC_IVAR____TtC10seserviced5DSKSE_pendingRequestQueue, v27, 33, 0);
      swift_retain(a1);
      v7 = (_QWORD *)sub_100130644(v17, (uint64_t)a1);
      swift_release(a1);
      v3 = *v17;
      if (!((unint64_t)*v17 >> 62))
      {
        v18 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v18 >= (uint64_t)v7)
        {
LABEL_10:
          sub_1001F66F8((uint64_t)v7, v18);
          swift_endAccess(v27);
LABEL_15:
          sub_100127D5C(a1);
          return;
        }
        goto LABEL_23;
      }
    }
    else
    {
      __break(1u);
    }
    if (v3 < 0)
      v25 = v3;
    else
      v25 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    v18 = _CocoaArrayWrapper.endIndex.getter(v25);
    swift_bridgeObjectRelease(v3);
    if (v18 >= (uint64_t)v7)
      goto LABEL_10;
LABEL_23:
    __break(1u);
    return;
  }
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC10seserviced8AlishaSE_isRunning) == 1)
  {
    if (qword_1003445F0 == -1)
      goto LABEL_6;
    goto LABEL_17;
  }
  v19 = Logger.logObject.getter(v13);
  v21 = static os_log_type_t.error.getter(v19, v20);
  if (os_log_type_enabled(v19, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v21, "Not running", v22, 2u);
    swift_slowDealloc(v22, -1, -1);
  }

}

uint64_t sub_1001D63E8()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for AlishaSE(0);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  result = sub_1001D6424();
  qword_100354E40 = result;
  return result;
}

uint64_t sub_1001D6424()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  _QWORD aBlock[5];
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;

  v1 = v0;
  v2 = type metadata accessor for DispatchQoS.QoSClass(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = String.init(cString:)(SESLoggingSubsystem);
  v8 = Logger.init(subsystem:category:)(v7);
  *(_BYTE *)(v0 + OBJC_IVAR____TtC10seserviced8AlishaSE_isRunning) = 0;
  v9 = OBJC_IVAR____TtC10seserviced8AlishaSE_seTimeoutInSec;
  v17 = 0xD000000000000014;
  v18 = 0x80000001002BA5B0;
  v19 = 0xD00000000000001BLL;
  v20 = 0x80000001002C0920;
  v21 = 0x4008000000000000;
  v22 = 1;
  sub_100153344(v8);
  *(_QWORD *)(v0 + v9) = v10;
  sub_10006C25C(0, (unint64_t *)&qword_1003461A0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchQoS.QoSClass.default(_:), v2);
  v11 = (void *)static OS_dispatch_queue.global(qos:)(v6);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  aBlock[4] = sub_1001D8218;
  v16 = v1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10017BF6C;
  aBlock[3] = &unk_10030D200;
  v12 = _Block_copy(aBlock);
  v13 = v16;
  swift_retain(v1);
  swift_release(v13);
  os_state_add_handler(v11, v12);
  _Block_release(v12);

  return v1;
}

_DWORD *sub_1001D65F4()
{
  uint64_t v0;
  char v1;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v3;
  char v4;
  uint64_t v5;
  Class isa;
  _DWORD *v7;
  _OWORD v9[2];
  __int128 v10;
  void *v11;

  v1 = *(_BYTE *)(v0 + OBJC_IVAR____TtC10seserviced8AlishaSE_isRunning);
  v11 = &type metadata for Bool;
  LOBYTE(v10) = v1;
  sub_10006C2B4(&v10, v9);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_10018DEC0(v9, 0x6E696E6E75527369, 0xE900000000000067, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease(0x8000000000000000);
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced8AlishaSE_seTimeoutInSec);
  v11 = &type metadata for Double;
  *(_QWORD *)&v10 = v3;
  sub_10006C2B4(&v10, v9);
  v4 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_10018DEC0(v9, 0x756F656D69546573, 0xEE006365536E4974, v4);
  swift_bridgeObjectRelease(0x8000000000000000);
  v5 = sub_10017D088((uint64_t)&_swiftEmptyDictionarySingleton);
  swift_bridgeObjectRelease(&_swiftEmptyDictionarySingleton);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v5);
  v7 = sub_100015734((uint64_t)"alishase.state", (uint64_t)isa);

  return v7;
}

void sub_1001D6758(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;

  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (uint64_t *)((char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v8 = qword_100354EE8;
  *v7 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  v9 = (id)v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v7, v3);
  if ((v8 & 1) != 0)
    __asm { BR              X9 }
  __break(1u);
  JUMPOUT(0x1001D71A0);
}

uint64_t sub_1001D7208(void *a1, char a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v13;
  uint64_t v14;
  char v15;
  unsigned __int8 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  os_log_type_t v27;
  uint8_t *v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint8_t *v41;
  int v42;
  NSObject *v43;
  uint64_t v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint8_t *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint8_t *v52;
  char v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  Class isa;
  id v62;
  uint8_t *v63;
  uint64_t v64;
  uint8_t *v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  Class v70;
  id v71;
  uint8_t *v72;
  uint64_t v73;
  uint8_t *v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint8_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  uint64_t v85;
  uint64_t v86;
  uint8_t *v87;
  _DWORD *v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  _DWORD *v98;
  unint64_t v99;
  uint8_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  NSObject *v104;
  uint64_t v105;
  os_log_type_t v106;
  uint8_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _DWORD *v123;
  uint8_t *buf;
  uint8_t *bufa;
  uint8_t *bufb;
  uint8_t *v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v132;
  uint64_t v133;
  uint8_t *v134;

  v13 = a1;
  v14 = a9;
  v15 = a11 & 1;
  if ((a2 & 1) != 0)
  {
    v42 = a1;
    v43 = Logger.logObject.getter(a1);
    v45 = static os_log_type_t.error.getter(v43, v44);
    if (os_log_type_enabled(v43, v45))
    {
      v46 = (uint8_t *)swift_slowAlloc(12, -1);
      v47 = (uint8_t *)swift_slowAlloc(32, -1);
      v134 = v47;
      *(_DWORD *)v46 = 136315138;
      v48 = sub_10006B9E4();
      v49 = Error.localizedDescription.getter(&type metadata for SEError, v48);
      v51 = v50;
      v132 = sub_1001C56EC(v49, v50, (uint64_t *)&v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133, v46 + 4, v46 + 12);
      swift_bridgeObjectRelease(v51);
      _os_log_impl((void *)&_mh_execute_header, v43, v45, "Failed to get SE %s", v46, 0xCu);
      swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
      v52 = v47;
      v15 = a11 & 1;
      swift_slowDealloc(v52, -1, -1);
      swift_slowDealloc(v46, -1, -1);
    }

    if (v42)
      v53 = 3;
    else
      v53 = -126;
    if (v42 == 3)
      v54 = -127;
    else
      v54 = v53;
    if (qword_100344680 != -1)
      swift_once(&qword_100344680, sub_10016E9A8);
    v55 = sub_100063D3C(&qword_100346F90);
    v56 = swift_allocObject(v55, 34, 7);
    *(_OWORD *)(v56 + 16) = xmmword_1002888F0;
    *(_BYTE *)(v56 + 32) = 1;
    *(_BYTE *)(v56 + 33) = v54;
    v57 = sub_10007C66C(v56);
    v59 = v58;
    swift_bridgeObjectRelease(v56);
    sub_10016E310(3u, 17, v57, v59, a7, a8, a9, a10, v15);
    goto LABEL_38;
  }
  if ((a3 & 1) == 0)
  {
    v60 = a1;
    isa = Data._bridgeToObjectiveC()().super.isa;
    v134 = 0;
    v62 = sub_10004F5F4(v60, (uint64_t)isa, &v134);

    v63 = v134;
    if (v62)
    {
      v64 = qword_100344680;
      v65 = v134;
      if (v64 != -1)
        swift_once(&qword_100344680, sub_10016E9A8);
      v66 = (id)sub_1000117DC((uint64_t)v62);
      v67 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v66);
      v59 = v68;

      sub_10016E310(1u, 12, v67, v59, a7, a8, a9, a10, a11 & 1);
      sub_10006BA28(a1, 0);

      v69 = v67;
      goto LABEL_39;
    }
    v80 = v134;
    v81 = _convertNSErrorToError(_:)(v63);

    swift_willThrow(v82);
    swift_errorRelease(v81);
    sub_100063C8C(a4, a5);
    v83 = sub_100063C8C(a4, a5);
    v84 = Logger.logObject.getter(v83);
    v86 = static os_log_type_t.error.getter(v84, v85);
    if (os_log_type_enabled(v84, (os_log_type_t)v86))
    {
      v87 = (uint8_t *)swift_slowAlloc(12, -1);
      v127 = (uint8_t *)swift_slowAlloc(32, -1);
      v134 = v127;
      v130 = a7;
      *(_DWORD *)v87 = 136315138;
      v88 = v87 + 12;
      v123 = v87 + 4;
      bufa = v87;
      sub_1001BD2CC(a4, a5);
      v89 = a8;
      v91 = v90;
      v92 = sub_100063D3C((uint64_t *)&unk_100346060);
      v93 = sub_10006B86C();
      v94 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v92, v93);
      v96 = v95;
      v97 = v91;
      a8 = v89;
      v14 = a9;
      swift_bridgeObjectRelease(v97);
      v132 = sub_1001C56EC(v94, v96, (uint64_t *)&v134);
      v98 = v88;
      a7 = v130;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133, v123, v98);
      v99 = v96;
      v15 = a11 & 1;
      swift_bridgeObjectRelease(v99);
      sub_100063CD0(a4, a5);
      sub_100063CD0(a4, a5);
      _os_log_impl((void *)&_mh_execute_header, v84, (os_log_type_t)v86, "Failed to transceive %s", bufa, 0xCu);
      swift_arrayDestroy(v127, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v127, -1, -1);
      swift_slowDealloc(bufa, -1, -1);

    }
    else
    {

      sub_100063CD0(a4, a5);
      sub_100063CD0(a4, a5);
    }
    if (qword_100344680 != -1)
      swift_once(&qword_100344680, sub_10016E9A8);
    v57 = sub_10007C66C((uint64_t)&off_1003063E8);
    v59 = v120;
    sub_10016E310(3u, 17, v57, v120, a7, a8, v14, a10, v15);
    goto LABEL_37;
  }
  v128 = a11 & 1;
  sub_10017B8F4(a1, 0);
  sub_100063C8C(a4, a5);
  sub_1000723E8(a4, a5, 4);
  v19 = Data.subdata(in:)(5, v18 + 5, a4, a5);
  v21 = v20;
  sub_100063C8C(v19, v20);
  v22 = sub_100063C8C(v19, v21);
  v23 = Logger.logObject.getter(v22);
  v27 = static os_log_type_t.info.getter(v23, v24, v25, v26);
  v129 = a7;
  if (os_log_type_enabled(v23, v27))
  {
    v28 = (uint8_t *)swift_slowAlloc(12, -1);
    buf = (uint8_t *)swift_slowAlloc(32, -1);
    v134 = buf;
    *(_DWORD *)v28 = 136315138;
    sub_1001BD2CC(v19, v21);
    v29 = v21;
    v30 = a8;
    v32 = v31;
    v33 = v19;
    v34 = sub_100063D3C((uint64_t *)&unk_100346060);
    v35 = sub_10006B86C();
    v36 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v34, v35);
    v38 = v37;
    v39 = v32;
    a8 = v30;
    v21 = v29;
    swift_bridgeObjectRelease(v39);
    v132 = sub_1001C56EC(v36, v38, (uint64_t *)&v134);
    v13 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133, v28 + 4, v28 + 12);
    v40 = v38;
    v19 = v33;
    swift_bridgeObjectRelease(v40);
    sub_100063CD0(v33, v29);
    sub_100063CD0(v33, v29);
    _os_log_impl((void *)&_mh_execute_header, v23, v27, "Selecting %s", v28, 0xCu);
    swift_arrayDestroy(buf, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(buf, -1, -1);
    v41 = v28;
    v14 = a9;
    swift_slowDealloc(v41, -1, -1);

  }
  else
  {

    sub_100063CD0(v19, v21);
    sub_100063CD0(v19, v21);
  }
  v70 = Data._bridgeToObjectiveC()().super.isa;
  v134 = 0;
  v71 = sub_10004FFE4(v13, v70, 1, &v134);

  v72 = v134;
  if (!v71)
  {
    v100 = v134;
    v101 = _convertNSErrorToError(_:)(v72);

    swift_willThrow(v102);
    swift_errorRelease(v101);
    sub_100063C8C(v19, v21);
    v103 = sub_100063C8C(v19, v21);
    v104 = Logger.logObject.getter(v103);
    v106 = static os_log_type_t.error.getter(v104, v105);
    if (os_log_type_enabled(v104, v106))
    {
      v107 = (uint8_t *)swift_slowAlloc(12, -1);
      bufb = (uint8_t *)swift_slowAlloc(32, -1);
      v134 = bufb;
      *(_DWORD *)v107 = 136315138;
      sub_1001BD2CC(v19, v21);
      v108 = v14;
      v110 = v109;
      v132 = v109;
      v111 = v19;
      v112 = sub_100063D3C((uint64_t *)&unk_100346060);
      v113 = sub_10006B86C();
      v114 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v112, v113);
      v116 = v115;
      v117 = v110;
      v14 = v108;
      swift_bridgeObjectRelease(v117);
      v132 = sub_1001C56EC(v114, v116, (uint64_t *)&v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133, v107 + 4, v107 + 12);
      v118 = v116;
      v19 = v111;
      swift_bridgeObjectRelease(v118);
      sub_100063CD0(v111, v21);
      v119 = v21;
      sub_100063CD0(v111, v21);
      _os_log_impl((void *)&_mh_execute_header, v104, v106, "Failed to select %s", v107, 0xCu);
      swift_arrayDestroy(bufb, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(bufb, -1, -1);
      swift_slowDealloc(v107, -1, -1);

    }
    else
    {

      sub_100063CD0(v19, v21);
      v119 = v21;
      sub_100063CD0(v19, v21);
    }
    if (qword_100344680 != -1)
      swift_once(&qword_100344680, sub_10016E9A8);
    v57 = sub_10007C66C((uint64_t)&off_1003063C0);
    v59 = v121;
    sub_10016E310(3u, 17, v57, v121, v129, a8, v14, a10, v128);
    sub_100063CD0(v19, v119);
LABEL_37:
    sub_10006BA28(a1, 0);
LABEL_38:
    v69 = v57;
LABEL_39:
    v79 = v59;
    return sub_100063CD0(v69, v79);
  }
  v73 = qword_100344680;
  v74 = v134;
  if (v73 != -1)
    swift_once(&qword_100344680, sub_10016E9A8);
  v75 = (id)sub_1000117DC((uint64_t)v71);
  v76 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v75);
  v78 = v77;

  sub_10016E310(1u, 12, v76, v78, v129, a8, v14, a10, v128);
  sub_100063CD0(v19, v21);

  sub_10006BA28(a1, 0);
  v69 = v76;
  v79 = v78;
  return sub_100063CD0(v69, v79);
}

uint64_t sub_1001D7E04()
{
  uint64_t v0;

  sub_100063CD0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t sub_1001D7E28()
{
  uint64_t *v0;
  uint64_t v1;
  id v2;
  id v3;
  uint64_t v4;
  unint64_t v5;

  v1 = *v0;
  v2 = objc_msgSend((id)objc_opt_self(_SESSessionManager), "sessionManager");
  v3 = objc_msgSend(v2, "getActiveDCKSessions");

  v4 = sub_10006C25C(0, &qword_100346F88, off_100301C60);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

  swift_retain(v1);
  LOBYTE(v3) = sub_1001D8028(v5, v1);
  swift_bridgeObjectRelease(v5);
  swift_release(v1);
  return v3 & 1;
}

uint64_t sub_1001D7EF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC10seserviced8AlishaSE_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1001D7F40()
{
  return type metadata accessor for AlishaSE(0);
}

uint64_t type metadata accessor for AlishaSE(uint64_t a1)
{
  uint64_t result;

  result = qword_100349F80;
  if (!qword_100349F80)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AlishaSE);
  return result;
}

uint64_t sub_1001D7F84(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_10028CC78;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for AlishaSE.HandoffToken()
{
  return objc_opt_self(_TtCC10seserviced8AlishaSEP33_E9F5D916046A64E9F393309CE5C86C0212HandoffToken);
}

uint64_t sub_1001D8028(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v2 = a1;
  if (a1 >> 62)
    goto LABEL_16;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v3; v3 = _CocoaArrayWrapper.endIndex.getter(v23))
  {
    v24 = v3;
    v25 = v2 & 0xC000000000000001;
    v4 = 4;
    while (1)
    {
      v7 = v25 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, v2) : *(id *)(v2 + 8 * v4);
      v8 = v7;
      v9 = v4 - 3;
      if (__OFADD__(v4 - 4, 1))
        break;
      v10 = objc_msgSend(v7, "activeEndpoint");
      if (v10)
      {
        v11 = v10;
        v12 = v2;
        v13 = objc_msgSend(v10, "publicKeyIdentifier");

        v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v13);
        v16 = v15;

        v17 = *(_QWORD *)(a2 + 16);
        v18 = *(_QWORD *)(a2 + 24);
        sub_100063C8C(v17, v18);
        sub_100063C8C(v14, v16);
        sub_10007C23C(v14, v16);
        v20 = v19;
        v21 = v17;
        v2 = v12;
        sub_100063CD0(v21, v18);
        sub_100063CD0(v14, v16);
        sub_100063CD0(v14, v16);

        if ((v20 & 1) != 0)
        {
          v3 = 1;
          goto LABEL_14;
        }
      }
      else
      {
        v5 = *(_QWORD *)(a2 + 16);
        v6 = *(_QWORD *)(a2 + 24);
        sub_100063C8C(v5, v6);
        sub_10006B9B4(0, 0xF000000000000000);
        sub_10006B9B4(v5, v6);

      }
      ++v4;
      if (v9 == v24)
      {
        v3 = 0;
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_16:
    if (v2 < 0)
      v23 = v2;
    else
      v23 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
  }
LABEL_14:
  swift_bridgeObjectRelease(v2);
  return v3;
}

uint64_t sub_1001D821C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001D822C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1001D8234()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(sub_100063D3C((uint64_t *)&unk_1003465E0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 64) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  sub_100063CD0(*((_QWORD *)v0 + 3), *((_QWORD *)v0 + 4));
  swift_release(*((_QWORD *)v0 + 5));
  swift_release(*((_QWORD *)v0 + 6));
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(&v0[v3], 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(&v0[v3], v5);
  return swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 9, v2 | 7);
}

uint64_t sub_1001D82F0(void *a1, char a2)
{
  uint64_t v2;
  char v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v4 = a2 & 1;
  v5 = *(_QWORD *)(sub_100063D3C((uint64_t *)&unk_1003465E0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1001D7208(a1, v4, *(_BYTE *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), v2 + v6, *(_QWORD *)(v2 + v7), *(_BYTE *)(v2 + v7 + 8));
}

uint64_t sub_1001D8380(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD v7[6];

  v7[0] = &unk_10028CD28;
  v7[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for DispatchTimeInterval(319);
  if (v3 <= 0x3F)
  {
    v7[2] = *(_QWORD *)(result - 8) + 64;
    v7[3] = (char *)&value witness table for () + 64;
    result = type metadata accessor for Logger(319);
    if (v5 <= 0x3F)
    {
      v7[4] = *(_QWORD *)(result - 8) + 64;
      result = type metadata accessor for TriggerCoalescer.State(319, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), v4);
      if (v6 <= 0x3F)
      {
        v7[5] = *(_QWORD *)(result - 8) + 64;
        return swift_initClassMetadata2(a1, 0, 6, v7, a1 + 96);
      }
    }
  }
  return result;
}

uint64_t sub_1001D8448(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  __chkstk_darwin();
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v3);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v3, 1, v5) == 1)
    return 1819047278;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v3, v5);
  return 0x676E6974696177;
}

uint64_t *sub_1001D850C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *v0;
  swift_bridgeObjectRelease(v0[3]);

  v2 = (uint64_t)v0 + qword_10034A0C8;
  v3 = type metadata accessor for DispatchTimeInterval(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  swift_release(*(uint64_t *)((char *)v0 + qword_10034A0D0 + 8));
  v4 = (uint64_t)v0 + qword_10034A0D8;
  v5 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = (uint64_t)v0 + *(_QWORD *)(*v0 + 136);
  v8 = type metadata accessor for TriggerCoalescer.State(0, *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), v7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  return v0;
}

uint64_t sub_1001D85D4()
{
  uint64_t v0;

  sub_1001D850C();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for TriggerCoalescer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100099EA0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TriggerCoalescer);
}

uint64_t type metadata accessor for TriggerCoalescer.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100099EA0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TriggerCoalescer.State);
}

uint64_t sub_1001D8610(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload(a1, 0, *(_QWORD *)(result - 8) + 64, 1);
    return 0;
  }
  return result;
}

_QWORD *sub_1001D8668(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v13;
  int v14;
  int v15;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned int *)(v6 + 84);
  if ((_DWORD)v8)
    v9 = *(_QWORD *)(v6 + 64);
  else
    v9 = v7 + 1;
  v10 = *(_DWORD *)(v6 + 80);
  if (v10 <= 7 && (*(_DWORD *)(v6 + 80) & 0x100000) == 0 && v9 <= 0x18)
  {
    if ((_DWORD)v8)
    {
      if (!(*(unsigned int (**)(_QWORD *, uint64_t, _QWORD))(v6 + 48))(a2, v8, *(_QWORD *)(a3 + 16)))
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16))(v4, a2, v5);
        return v4;
      }
    }
    else
    {
      if (!*((_BYTE *)a2 + v7))
        goto LABEL_26;
      v14 = (*((unsigned __int8 *)a2 + v7) - 1) << (8 * v7);
      if (v7 > 3)
        v14 = 0;
      if ((_DWORD)v7)
      {
        if (v7 <= 3)
          v15 = *(_QWORD *)(v6 + 64);
        else
          v15 = 4;
        __asm { BR              X11 }
      }
      if (v14 == -1)
      {
LABEL_26:
        (*(void (**)(_QWORD *, _QWORD *, _QWORD))(v6 + 16))(a1, a2, *(_QWORD *)(a3 + 16));
        *((_BYTE *)v4 + v7) = 0;
        return v4;
      }
    }
    memcpy(v4, a2, v9);
    return v4;
  }
  v13 = *a2;
  *v4 = *a2;
  v4 = (_QWORD *)(v13 + ((v10 + 16) & ~v10));
  swift_retain(v13);
  return v4;
}

uint64_t sub_1001D87C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int v8;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned int *)(v4 + 84);
  if ((_DWORD)v5)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, v5, v3);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  else
  {
    v7 = *(_QWORD *)(v4 + 64);
    if (!*(_BYTE *)(a1 + v7))
      return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
    v8 = (*(unsigned __int8 *)(a1 + v7) - 1) << (8 * v7);
    if (v7 > 3)
      v8 = 0;
    if ((_DWORD)v7)
    {
      if (v7 > 3)
        LODWORD(v7) = 4;
      __asm { BR              X11 }
    }
    result = (v8 + 1);
    if (v8 == -1)
      return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  return result;
}

_BYTE *sub_1001D88A8(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  int v9;
  int v10;
  size_t v11;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  if (v7)
  {
    if (!(*(unsigned int (**)(_BYTE *, _QWORD, _QWORD))(v6 + 48))(a2, *(unsigned int *)(v6 + 84), *(_QWORD *)(a3 + 16)))
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 16))(a1, a2, v5);
      return a1;
    }
  }
  else
  {
    if (!a2[v8])
      goto LABEL_17;
    v9 = (a2[v8] - 1) << (8 * v8);
    if (v8 > 3)
      v9 = 0;
    if ((_DWORD)v8)
    {
      if (v8 <= 3)
        v10 = *(_QWORD *)(v6 + 64);
      else
        v10 = 4;
      __asm { BR              X11 }
    }
    if (v9 == -1)
    {
LABEL_17:
      (*(void (**)(_BYTE *, _BYTE *, _QWORD))(v6 + 16))(a1, a2, *(_QWORD *)(a3 + 16));
      a1[v8] = 0;
      return a1;
    }
  }
  if (v7)
    v11 = v8;
  else
    v11 = v8 + 1;
  memcpy(a1, a2, v11);
  return a1;
}

_BYTE *sub_1001D89D0(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t (*v9)(_BYTE *, uint64_t, uint64_t);
  int v10;
  int v11;
  char v12;
  int v13;
  int v14;
  int v15;
  int v16;
  size_t v17;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  if (!(_DWORD)v7)
  {
    v12 = 8 * v8;
    if (a1[v8])
    {
      v13 = (a1[v8] - 1) << v12;
      if (v8 > 3)
        v13 = 0;
      if ((_DWORD)v8)
      {
        if (v8 <= 3)
          v14 = *(_QWORD *)(v6 + 64);
        else
          v14 = 4;
        __asm { BR              X12 }
      }
      if (v13 != -1)
      {
        if (!a2[v8] || (a2[v8] - 1) << v12 == -1)
        {
          (*(void (**)(_BYTE *, _BYTE *, _QWORD))(v6 + 16))(a1, a2, *(_QWORD *)(a3 + 16));
          a1[v8] = 0;
          return a1;
        }
        goto LABEL_27;
      }
    }
    if (!a2[v8])
      goto LABEL_31;
    v15 = (a2[v8] - 1) << v12;
    if (v8 > 3)
      v15 = 0;
    if ((_DWORD)v8)
    {
      if (v8 <= 3)
        v16 = *(_QWORD *)(v6 + 64);
      else
        v16 = 4;
      __asm { BR              X11 }
    }
    v11 = v15 + 1;
LABEL_25:
    if (v11)
    {
      (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(a1, v5);
      goto LABEL_27;
    }
LABEL_31:
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 24))(a1, a2, v5);
    return a1;
  }
  v9 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v6 + 48);
  v10 = v9(a1, *(unsigned int *)(v6 + 84), *(_QWORD *)(a3 + 16));
  v11 = v9(a2, v7, v5);
  if (!v10)
    goto LABEL_25;
  if (!v11)
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 16))(a1, a2, v5);
    return a1;
  }
LABEL_27:
  if ((_DWORD)v7)
    v17 = v8;
  else
    v17 = v8 + 1;
  memcpy(a1, a2, v17);
  return a1;
}

_BYTE *sub_1001D8C28(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  int v9;
  int v10;
  size_t v11;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  if (v7)
  {
    if (!(*(unsigned int (**)(_BYTE *, _QWORD, _QWORD))(v6 + 48))(a2, *(unsigned int *)(v6 + 84), *(_QWORD *)(a3 + 16)))
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 32))(a1, a2, v5);
      return a1;
    }
  }
  else
  {
    if (!a2[v8])
      goto LABEL_17;
    v9 = (a2[v8] - 1) << (8 * v8);
    if (v8 > 3)
      v9 = 0;
    if ((_DWORD)v8)
    {
      if (v8 <= 3)
        v10 = *(_QWORD *)(v6 + 64);
      else
        v10 = 4;
      __asm { BR              X11 }
    }
    if (v9 == -1)
    {
LABEL_17:
      (*(void (**)(_BYTE *, _BYTE *, _QWORD))(v6 + 32))(a1, a2, *(_QWORD *)(a3 + 16));
      a1[v8] = 0;
      return a1;
    }
  }
  if (v7)
    v11 = v8;
  else
    v11 = v8 + 1;
  memcpy(a1, a2, v11);
  return a1;
}

_BYTE *sub_1001D8D50(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t (*v9)(_BYTE *, uint64_t, uint64_t);
  int v10;
  int v11;
  char v12;
  int v13;
  int v14;
  int v15;
  int v16;
  size_t v17;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  if (!(_DWORD)v7)
  {
    v12 = 8 * v8;
    if (a1[v8])
    {
      v13 = (a1[v8] - 1) << v12;
      if (v8 > 3)
        v13 = 0;
      if ((_DWORD)v8)
      {
        if (v8 <= 3)
          v14 = *(_QWORD *)(v6 + 64);
        else
          v14 = 4;
        __asm { BR              X12 }
      }
      if (v13 != -1)
      {
        if (!a2[v8] || (a2[v8] - 1) << v12 == -1)
        {
          (*(void (**)(_BYTE *, _BYTE *, _QWORD))(v6 + 32))(a1, a2, *(_QWORD *)(a3 + 16));
          a1[v8] = 0;
          return a1;
        }
        goto LABEL_27;
      }
    }
    if (!a2[v8])
      goto LABEL_31;
    v15 = (a2[v8] - 1) << v12;
    if (v8 > 3)
      v15 = 0;
    if ((_DWORD)v8)
    {
      if (v8 <= 3)
        v16 = *(_QWORD *)(v6 + 64);
      else
        v16 = 4;
      __asm { BR              X11 }
    }
    v11 = v15 + 1;
LABEL_25:
    if (v11)
    {
      (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(a1, v5);
      goto LABEL_27;
    }
LABEL_31:
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 40))(a1, a2, v5);
    return a1;
  }
  v9 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v6 + 48);
  v10 = v9(a1, *(unsigned int *)(v6 + 84), *(_QWORD *)(a3 + 16));
  v11 = v9(a2, v7, v5);
  if (!v10)
    goto LABEL_25;
  if (!v11)
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 32))(a1, a2, v5);
    return a1;
  }
LABEL_27:
  if ((_DWORD)v7)
    v17 = v8;
  else
    v17 = v8 + 1;
  memcpy(a1, a2, v17);
  return a1;
}

uint64_t sub_1001D8FA8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (!v5)
    v6 = 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v7;
  if (!a2)
    return 0;
  v8 = a2 - v6;
  if (a2 > v6)
  {
    v9 = 8 * v7;
    if (v7 > 3)
      goto LABEL_8;
    v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v7);
      if (v10)
        goto LABEL_15;
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2)
          goto LABEL_24;
LABEL_8:
        v10 = *(unsigned __int8 *)(a1 + v7);
        if (!*(_BYTE *)(a1 + v7))
          goto LABEL_24;
LABEL_15:
        v12 = (v10 - 1) << v9;
        if (v7 > 3)
          v12 = 0;
        if ((_DWORD)v7)
        {
          if (v7 <= 3)
            v13 = v7;
          else
            v13 = 4;
          __asm { BR              X12 }
        }
        return v6 + v12 + 1;
      }
      v10 = *(unsigned __int16 *)(a1 + v7);
      if (*(_WORD *)(a1 + v7))
        goto LABEL_15;
    }
  }
LABEL_24:
  if (v5 < 2)
    return 0;
  v14 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v14 >= 2)
    return v14 - 1;
  else
    return 0;
}

void sub_1001D90E8(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  size_t v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v8)
    v10 = *(_QWORD *)(v7 + 64);
  else
    v10 = *(_QWORD *)(v7 + 64) + 1;
  v11 = a3 >= v9;
  v12 = a3 - v9;
  if (v12 != 0 && v11)
  {
    if (v10 > 3)
    {
      v6 = &_mh_execute_header.magic + 1;
      if (v9 < a2)
        goto LABEL_17;
      goto LABEL_24;
    }
    v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      v6 = &dword_100000004;
      if (v9 < a2)
      {
LABEL_17:
        v14 = ~v9 + a2;
        if (v10 < 4)
        {
          if ((_DWORD)v10)
          {
            v15 = v14 & ~(-1 << (8 * v10));
            bzero(a1, v10);
            if ((_DWORD)v10 == 3)
            {
              *a1 = v15;
              *((_BYTE *)a1 + 2) = BYTE2(v15);
            }
            else if ((_DWORD)v10 == 2)
            {
              *a1 = v15;
            }
            else
            {
              *(_BYTE *)a1 = v15;
            }
          }
        }
        else
        {
          bzero(a1, v10);
          *(_DWORD *)a1 = v14;
        }
        __asm { BR              X10 }
      }
LABEL_24:
      __asm { BR              X12 }
    }
    if (v13 >= 0x100)
      v6 = 2;
    else
      v6 = v13 > 1;
  }
  if (v9 < a2)
    goto LABEL_17;
  goto LABEL_24;
}

void sub_1001D92FC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_1001D9304()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_1001D9324()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_1001D932C()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_1001D933C()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

uint64_t sub_1001D9348(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  int v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  if (*(_DWORD *)(v2 + 84))
    return (*(uint64_t (**)(void))(v2 + 48))();
  v4 = *(_QWORD *)(v2 + 64);
  if (!*(_BYTE *)(a1 + v4))
    return 0;
  v5 = (*(unsigned __int8 *)(a1 + v4) - 1) << (8 * v4);
  if (v4 > 3)
    v5 = 0;
  if (!(_DWORD)v4)
    return (v5 + 1);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1001D93AC + 4 * byte_10028CCFA[(v4 - 1)]))();
}

void sub_1001D93E4(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  unsigned int v7;
  int v8;
  int v9;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned int *)(v4 + 84);
  v6 = *(_QWORD *)(v4 + 64);
  if (v5 >= a2)
  {
    if ((_DWORD)v5)
    {
      if (!(_DWORD)a2)
        return;
    }
    else
    {
      a1[v6] = 0;
      if (!(_DWORD)a2)
        return;
    }
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 56))(a1, a2, v5);
    return;
  }
  v7 = ~(_DWORD)v5 + a2;
  if (v6 >= 4)
  {
    bzero(a1, v6);
    *(_DWORD *)a1 = v7;
    LOBYTE(v8) = 1;
    if ((_DWORD)v5)
      return;
    goto LABEL_17;
  }
  v8 = (v7 >> (8 * v6)) + 1;
  if (!(_DWORD)v6)
  {
LABEL_16:
    if ((_DWORD)v5)
      return;
    goto LABEL_17;
  }
  v9 = v7 & ~(-1 << (8 * v6));
  bzero(a1, v6);
  if ((_DWORD)v6 == 3)
  {
    *(_WORD *)a1 = v9;
    a1[2] = BYTE2(v9);
    goto LABEL_16;
  }
  if ((_DWORD)v6 == 2)
  {
    *(_WORD *)a1 = v9;
    if ((_DWORD)v5)
      return;
    goto LABEL_17;
  }
  *a1 = v9;
  if (!(_DWORD)v5)
LABEL_17:
    a1[v6] = v8;
}

uint64_t sub_1001D94EC(id *a1)
{
  id v1;
  id v2;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v1 = *a1;
  if (objc_msgSend(*a1, "endPointType") != (id)1)
    return 0;
  v2 = objc_msgSend(v1, "revocationAttestation");
  if (v2)
  {
    v3 = v2;
    v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v2);
    v6 = v5;

    sub_100063CD0(v4, v6);
    return 0;
  }
  return 1;
}

id sub_1001D9570()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AlishaExternal()), "init");
  qword_100354E48 = (uint64_t)result;
  return result;
}

id sub_1001D9654(void *a1, uint64_t a2, void *a3, uint64_t (*a4)(uint64_t, uint64_t, unint64_t))
{
  id v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v7 = a3;
  v8 = a1;
  v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v11 = v10;

  v14 = sub_1001DE72C(v12, v13);
  sub_100063C8C(v9, v11);
  v15 = (void *)a4(v14, v9, v11);
  sub_100063CD0(v9, v11);
  swift_bridgeObjectRelease(v14);
  sub_100063CD0(v9, v11);

  return v15;
}

void sub_1001D9708(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  os_unfair_lock_s *v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  id v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  int v36;
  _QWORD v37[2];
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;

  v39 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39, v8);
  v10 = (_QWORD *)((char *)v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = swift_allocObject(&unk_10030DA10, 32, 7);
  *(_QWORD *)(v11 + 16) = a1;
  *(_QWORD *)(v11 + 24) = a2;
  sub_100063C8C(a1, a2);
  if (qword_1003445B8 != -1)
    swift_once(&qword_1003445B8, sub_1000EAA4C);
  v12 = off_1003463F0;
  v13 = swift_allocObject(&unk_10030DA38, 32, 7);
  *(_QWORD *)(v13 + 16) = sub_1001E04A8;
  *(_QWORD *)(v13 + 24) = v11;
  v15 = __chkstk_darwin(v13, v14);
  v37[-4] = sub_100095FDC;
  v37[-3] = v15;
  v37[-2] = v12;
  v17 = v16 + 4;
  swift_retain(v11);
  os_unfair_lock_lock(v17);
  sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_10007EFBC, &v40);
  if (!v3)
  {
    os_unfair_lock_unlock(v17);
    v18 = v40;
    swift_release(v11);
    swift_release(v13);
    v19 = (void *)sub_10009F618(v18);
    swift_bridgeObjectRelease(v18);
    if (!v19)
    {
      v32 = 0;
      goto LABEL_20;
    }
    v38 = a3;
    if (qword_100344608 != -1)
      swift_once(&qword_100344608, sub_100141A78);
    v37[1] = 0;
    v20 = objc_msgSend(v19, "publicKeyIdentifier", qword_100354CE0);
    v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    v24 = objc_msgSend(v19, "appletIdentifier");
    a3 = (_BYTE *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v24);
    v26 = v25;

    if (qword_1003447B8 != -1)
      swift_once(&qword_1003447B8, sub_1001EEFA4);
    v27 = qword_100354EE8;
    *v10 = qword_100354EE8;
    v28 = v39;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v39);
    v29 = (id)v27;
    LOBYTE(v27) = _dispatchPreconditionTest(_:)(v10);
    (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v10, v28);
    if ((v27 & 1) == 0)
    {
      __break(1u);
      goto LABEL_22;
    }
    v30 = v37[0];
    if (*(_BYTE *)(v37[0] + OBJC_IVAR____TtC10seserviced10DSKExpress_debugBypassExpress) == 1)
    {
      sub_100063CD0((uint64_t)a3, v26);
      sub_100063CD0(v21, v23);
      a3 = v38;
      goto LABEL_12;
    }
    v33 = *(_QWORD *)(v37[0] + OBJC_IVAR____TtC10seserviced10DSKExpress_expressKeys);
    sub_100063C8C(v21, v23);
    sub_100063C8C((uint64_t)a3, v26);
    swift_bridgeObjectRetain(v33);
    v35 = sub_10007D82C(v34);
    sub_100063CD0((uint64_t)a3, v26);
    sub_100063CD0(v21, v23);
    swift_bridgeObjectRelease(v33);
    if ((v35 & 1) != 0)
    {
      v36 = *(unsigned __int8 *)(v30 + OBJC_IVAR____TtC10seserviced10DSKExpress_expressState);
      sub_100063CD0((uint64_t)a3, v26);
      sub_100063CD0(v21, v23);
      if (v36 == 1)
      {
        a3 = v38;
LABEL_12:
        if (qword_100344690 == -1)
        {
LABEL_13:
          v31 = qword_100354D70;

          v32 = *(_BYTE *)(v31 + OBJC_IVAR____TtC10seserviced6DSKUWB_isAvailable);
LABEL_20:
          *a3 = v32;
          return;
        }
LABEL_22:
        swift_once(&qword_100344690, sub_100182BE4);
        goto LABEL_13;
      }
    }
    else
    {
      sub_100063CD0((uint64_t)a3, v26);
      sub_100063CD0(v21, v23);
    }

    v32 = 0;
    a3 = v38;
    goto LABEL_20;
  }
  os_unfair_lock_unlock(v17);
  __break(1u);
}

uint64_t sub_1001D9B18(void *a1, uint64_t a2, unint64_t a3)
{
  id v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t result;

  if (objc_msgSend(a1, "endPointType") != (id)1)
    return 0;
  v6 = objc_msgSend(a1, "readerIdentifier");
  if (!v6)
  {
    sub_100063C8C(a2, a3);
    sub_10006B9B4(0, 0xF000000000000000);
    sub_10006B9B4(a2, a3);
    return 0;
  }
  v7 = v6;
  v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v10 = v9;

  sub_100063C8C(a2, a3);
  sub_100063C8C(v8, v10);
  sub_10007C23C(v8, v10);
  LOBYTE(v7) = v11;
  sub_100063CD0(a2, a3);
  sub_100063CD0(v8, v10);
  sub_100063CD0(v8, v10);
  if ((v7 & 1) == 0)
    return 0;
  result = (uint64_t)objc_msgSend(a1, "bleUUID");
  if (result)
  {

    return 1;
  }
  return result;
}

void sub_1001D9CA8(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  os_unfair_lock_s *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;

  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = (v9 + 16) & ~v9;
  v11 = swift_allocObject(&unk_10030D9C0, v10 + v7, v9 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v11 + v10, (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  if (qword_1003447A0 != -1)
    swift_once(&qword_1003447A0, sub_1001EDCA4);
  v12 = off_10034A560;
  v13 = swift_allocObject(&unk_10030D9E8, 32, 7);
  *(_QWORD *)(v13 + 16) = sub_1001E018C;
  *(_QWORD *)(v13 + 24) = v11;
  v15 = __chkstk_darwin(v13, v14);
  *(&v21 - 4) = (uint64_t)sub_100096F30;
  *(&v21 - 3) = v15;
  *(&v21 - 2) = (uint64_t)v12;
  v17 = v16 + 4;
  swift_retain(v11);
  os_unfair_lock_lock(v17);
  sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_10017BF58, &v22);
  if (v2)
  {
    os_unfair_lock_unlock(v17);
    __break(1u);
  }
  else
  {
    os_unfair_lock_unlock(v17);
    v18 = v22;
    swift_release(v11);
    swift_release(v13);
    v19 = sub_10009F640(v18);
    swift_bridgeObjectRelease(v18);
    if (v19)
    {
      v20 = *(_BYTE *)(v19 + OBJC_IVAR____TtC10seserviced4Peer_isConnected);
      swift_release(v19);
    }
    else
    {
      v20 = 0;
    }
    *a2 = v20;
  }
}

void sub_1001D9F24(unsigned int a1@<W0>, uint64_t a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (qword_1003447D8 != -1)
    swift_once(&qword_1003447D8, sub_1001FC514);
  sub_1001FADA4(a1, a2, a3);
  if (v4)
  {
    v13 = v4;
    v9 = sub_100063D3C(&qword_100345378);
    v10 = sub_10006C25C(0, (unint64_t *)&qword_1003469E0, NSError_ptr);
    swift_dynamicCast(&v12, &v13, v9, v10, 0);
    v11 = v12;
    swift_errorRelease(v13);
  }
  else
  {
    v11 = 0;
  }
  *a4 = v11;
}

void sub_1001DA08C(__int16 a1@<W0>, unsigned __int8 a2@<W1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t *v20;
  unint64_t v21;
  int v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  NSString v27;
  Class isa;
  id v29;
  _QWORD v30[10];
  _BOOL4 v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char v43[24];

  v8 = v7;
  v30[7] = a6;
  v30[6] = a5;
  v36 = a4;
  v39 = a3;
  LOWORD(v10) = a1;
  v12 = type metadata accessor for DispatchPredicate(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v16 = (char *)v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1003447D8 != -1)
LABEL_21:
    swift_once(&qword_1003447D8, sub_1001FC514);
  v17 = qword_100354F18;
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v18 = qword_100354EE8;
  *(_QWORD *)v16 = qword_100354EE8;
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v12);
  v19 = (id)v18;
  LOBYTE(v18) = _dispatchPreconditionTest(_:)(v16);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  if ((v18 & 1) == 0)
  {
    __break(1u);
LABEL_23:
    if (a7 < 0)
      v25 = a7;
    else
      v25 = a7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(a7, 2);
    v13 = _CocoaArrayWrapper.endIndex.getter(v25);
    if (v13)
      goto LABEL_7;
    goto LABEL_27;
  }
  v33 = (_QWORD *)a7;
  v20 = (uint64_t *)(v17 + OBJC_IVAR____TtC10seserviced9AlishaRKE_requestsInProgress);
  swift_beginAccess(v17 + OBJC_IVAR____TtC10seserviced9AlishaRKE_requestsInProgress, v43, 0, 0);
  a7 = *v20;
  v21 = (unint64_t)*v20 >> 62;
  v32 = v8;
  if (v21)
    goto LABEL_23;
  v13 = *(_QWORD *)((a7 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n(a7, 2);
  if (v13)
  {
LABEL_7:
    v12 = a2;
    v22 = (unsigned __int16)v10;
    v41 = v36 >> 62;
    v42 = a7 & 0xC000000000000001;
    v30[5] = HIDWORD(v39);
    v23 = __OFSUB__(HIDWORD(v39), (_DWORD)v39);
    v31 = v23;
    v40 = BYTE6(v36);
    v35 = v36 & 0x3FFFFFFFFFFFFFFFLL;
    v30[8] = (int)v39;
    v30[9] = HIDWORD(v39) - (int)v39;
    v30[4] = v39 >> 32;
    v30[3] = (v39 >> 32) - (int)v39;
    v24 = 4;
    v34 = v13;
    v37 = (unsigned __int16)v10;
    v38 = a2;
    do
    {
      v10 = v24 - 4;
      if (v42)
      {
        v16 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v24 - 4, a7);
        v8 = v24 - 3;
        if (__OFADD__(v10, 1))
          goto LABEL_20;
      }
      else
      {
        v16 = *(char **)(a7 + 8 * v24);
        swift_retain(v16);
        v8 = v24 - 3;
        if (__OFADD__(v10, 1))
        {
LABEL_20:
          __break(1u);
          goto LABEL_21;
        }
      }
      if (*(unsigned __int16 *)&v16[OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_functionIdentifier] == v22
        && v16[16] == a2)
      {
        __asm { BR              X8 }
      }
      swift_release(v16);
      ++v24;
    }
    while (v8 != v13);
  }
LABEL_27:
  swift_bridgeObjectRelease_n(a7, 2);
  v26 = objc_allocWithZone((Class)NSError);
  v27 = String._bridgeToObjectiveC()();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v29 = objc_msgSend(v26, "initWithDomain:code:userInfo:", v27, 16, isa);

  *v33 = v29;
}

unint64_t sub_1001DAE80@<X0>(char a1@<W0>, unint64_t *a2@<X8>)
{
  unint64_t result;

  if (qword_100344720 != -1)
    swift_once(&qword_100344720, sub_1001C7400);
  result = sub_1001C872C(a1 & 1);
  *a2 = result;
  return result;
}

void sub_1001DAF54(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  os_unfair_lock_s *v21;
  os_unfair_lock_s *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;

  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9, v12);
  v13 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a1, v9);
  v14 = *(unsigned __int8 *)(v10 + 80);
  v15 = (v14 + 16) & ~v14;
  v16 = swift_allocObject(&unk_10030D970, v15 + v11, v14 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v16 + v15, v13, v9);
  if (qword_1003447A0 != -1)
    swift_once(&qword_1003447A0, sub_1001EDCA4);
  v17 = off_10034A560;
  v18 = swift_allocObject(&unk_10030D998, 32, 7);
  *(_QWORD *)(v18 + 16) = sub_1001E018C;
  *(_QWORD *)(v18 + 24) = v16;
  v20 = __chkstk_darwin(v18, v19);
  *(&v30 - 4) = (uint64_t)sub_100096F30;
  *(&v30 - 3) = v20;
  *(&v30 - 2) = (uint64_t)v17;
  v22 = v21 + 4;
  swift_retain(v16);
  os_unfair_lock_lock(v22);
  sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_10017BF58, &v31);
  if (!v4)
  {
    os_unfair_lock_unlock(v22);
    v23 = v31;
    swift_release(v16);
    swift_release(v18);
    v24 = sub_10009F640(v23);
    swift_bridgeObjectRelease(v23);
    if (v24)
    {
      if ((*(_BYTE *)(v24 + OBJC_IVAR____TtC10seserviced4Peer_isConnected) & 1) != 0)
      {
        if (qword_1003445A0 != -1)
          swift_once(&qword_1003445A0, sub_1000B26B0);
        if (qword_100344680 != -1)
          swift_once(&qword_100344680, sub_10016E9A8);
        sub_100176C18(4, 16, a2, a3);
        v26 = v25;
        v28 = v27;
        sub_1000ADCAC(v25, v27, v24);
        swift_release(v24);
        sub_100063CD0(v26, v28);
        v29 = 0;
        goto LABEL_13;
      }
      swift_release(v24);
    }
    sub_10006C25C(0, (unint64_t *)&qword_1003469E0, NSError_ptr);
    v29 = sub_1001E2838(13, 0, 0xD000000000000018, 0x80000001002C0B50, 0);
LABEL_13:
    *a4 = v29;
    return;
  }
  os_unfair_lock_unlock(v22);
  __break(1u);
}

void sub_1001DB348(_QWORD *a1@<X8>)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __int16 v24;
  objc_class *v25;
  char *v26;
  uint64_t *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  objc_super v36;
  _BYTE v37[24];
  unint64_t v38;

  v34 = a1;
  v1 = type metadata accessor for DispatchPredicate(0);
  v2 = *(_QWORD **)(v1 - 8);
  __chkstk_darwin(v1, v3);
  v5 = (uint64_t)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1003447D8 != -1)
    swift_once(&qword_1003447D8, sub_1001FC514);
  v6 = qword_100354F18;
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v7 = qword_100354EE8;
  *(_QWORD *)v5 = qword_100354EE8;
  ((void (*)(uint64_t, _QWORD, uint64_t))v2[13])(v5, enum case for DispatchPredicate.onQueue(_:), v1);
  v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v5);
  ((void (*)(uint64_t, uint64_t))v2[1])(v5, v1);
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v6 + OBJC_IVAR____TtC10seserviced9AlishaRKE_requestsInProgress);
    swift_beginAccess(v6 + OBJC_IVAR____TtC10seserviced9AlishaRKE_requestsInProgress, v37, 0, 0);
    v5 = *v9;
    v2 = _swiftEmptyArrayStorage;
    v38 = (unint64_t)_swiftEmptyArrayStorage;
    if (!((unint64_t)v5 >> 62))
    {
      v10 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v5);
      if (v10)
        goto LABEL_8;
LABEL_24:
      swift_bridgeObjectRelease(v5);
      v16 = (unint64_t)_swiftEmptyArrayStorage;
      if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0)
        goto LABEL_34;
      goto LABEL_25;
    }
  }
  else
  {
    __break(1u);
  }
  if (v5 < 0)
    v17 = v5;
  else
    v17 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v10 = _CocoaArrayWrapper.endIndex.getter(v17);
  if (!v10)
    goto LABEL_24;
LABEL_8:
  if (v10 < 1)
  {
    __break(1u);
    goto LABEL_38;
  }
  for (i = 0; i != v10; ++i)
  {
    if ((v5 & 0xC000000000000001) != 0)
    {
      v14 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v5);
      v15 = v14;
    }
    else
    {
      v15 = *(_QWORD *)(v5 + 8 * i + 32);
      v14 = swift_retain(v15);
    }
    if (*(_BYTE *)(v15 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_type) == 2)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v14);
      v12 = *(_QWORD *)(v38 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v12);
      v13 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v15);
      specialized ContiguousArray._endMutation()(v13);
    }
    else
    {
      swift_release(v15);
    }
  }
  swift_bridgeObjectRelease(v5);
  v16 = v38;
  if ((v38 & 0x8000000000000000) != 0)
    goto LABEL_34;
LABEL_25:
  if ((v16 & 0x4000000000000000) == 0)
  {
    v18 = *(_QWORD *)(v16 + 16);
    if (!v18)
    {
LABEL_35:
      swift_release(v16);
      v32 = _swiftEmptyArrayStorage;
LABEL_36:
      *v34 = v32;
      return;
    }
    goto LABEL_27;
  }
LABEL_34:
  swift_bridgeObjectRetain(v16);
  v18 = _CocoaArrayWrapper.endIndex.getter(v33);
  swift_release(v16);
  if (!v18)
    goto LABEL_35;
LABEL_27:
  v38 = (unint64_t)v2;
  specialized ContiguousArray.reserveCapacity(_:)(v18);
  if ((v18 & 0x8000000000000000) == 0)
  {
    v19 = 0;
    v35 = v16 & 0xC000000000000001;
    v20 = (_QWORD *)v16;
    do
    {
      if (v35)
      {
        v21 = specialized _ArrayBuffer._getElementSlowPath(_:)(v19, v16);
      }
      else
      {
        v21 = *(_QWORD *)(v16 + 8 * v19 + 32);
        swift_retain(v21);
      }
      ++v19;
      v22 = *(_QWORD *)(v21 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier);
      v23 = *(_QWORD *)(v21 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier + 8);
      v24 = *(_WORD *)(v21 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_functionIdentifier);
      v25 = (objc_class *)type metadata accessor for AlishaExternal.RequestInProgress();
      v26 = (char *)objc_allocWithZone(v25);
      v27 = (uint64_t *)&v26[OBJC_IVAR____TtCC10seserviced14AlishaExternal17RequestInProgress_keyIdentifier];
      *v27 = v22;
      v27[1] = v23;
      *(_WORD *)&v26[OBJC_IVAR____TtCC10seserviced14AlishaExternal17RequestInProgress_functionIdentifier] = v24;
      sub_100063C8C(v22, v23);
      v36.receiver = v26;
      v36.super_class = v25;
      v28 = objc_msgSendSuper2(&v36, "init");
      v29 = swift_release(v21);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v29);
      v30 = *(_QWORD *)(v38 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v30);
      v31 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v30, v28);
      specialized ContiguousArray._endMutation()(v31);
      v16 = (unint64_t)v20;
    }
    while (v18 != v19);
    v32 = (_QWORD *)v38;
    swift_release(v20);
    goto LABEL_36;
  }
LABEL_38:
  __break(1u);
}

uint64_t sub_1001DB83C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, unint64_t a7, uint64_t a8, void (*a9)(Class, _QWORD), void (*a10)(Class, _QWORD), uint64_t a11)
{
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  int v18;
  uint64_t v19;

  if (a2)
  {
    v16 = swift_allocObject(&unk_10030D948, 32, 7);
    *(_QWORD *)(v16 + 16) = a2;
    *(_QWORD *)(v16 + 24) = a3;
    v17 = sub_1001E0390;
  }
  else
  {
    v17 = 0;
    v16 = 0;
  }
  sub_1000DCA74(a2, a3);
  if (qword_1003447D8 != -1)
    swift_once(&qword_1003447D8, sub_1001FC514);
  if (a1 == 2)
    v18 = 2;
  else
    v18 = a1 == 1;
  v19 = qword_100354F18;
  swift_retain(a11);
  sub_100207188(a4, a5, a6, a7, v18, (uint64_t)v17, v16, a8, a9, v19, a10, a11);
  swift_release(a11);
  return sub_10008F210((uint64_t)v17, v16);
}

void sub_1001DB964(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(Class, Class, uint64_t, uint64_t, uint64_t, uint64_t))
{
  Class isa;
  Class v13;

  isa = UInt16._bridgeToObjectiveC()().super.super.isa;
  v13 = UInt8._bridgeToObjectiveC()().super.super.isa;
  a7(isa, v13, a3, a4, a5, a6);

}

void sub_1001DB9F0(__int16 a1, void (*a2)(Class, _QWORD))
{
  Class isa;

  if ((a1 & 0x100) != 0)
    __asm { BR              X10 }
  isa = UInt8._bridgeToObjectiveC()().super.super.isa;
  a2(isa, 0);

}

void sub_1001DC018(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  Class isa;
  Class v11;

  if (a4 >> 60 == 15)
    isa = 0;
  else
    isa = Data._bridgeToObjectiveC()().super.isa;
  v11 = Data._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, uint64_t, uint64_t, Class, Class))(a7 + 16))(a7, a1, a2, isa, v11);

}

void sub_1001DC0B4(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;

  if (qword_100344690 != -1)
    a1 = swift_once(&qword_100344690, sub_100182BE4);
  __chkstk_darwin(a1, a2);
  v2 = sub_1001800A8((uint64_t (*)(id))sub_1001E0290);
  v3 = (void *)sub_10009F62C((uint64_t)v2);
  swift_bridgeObjectRelease(v2);
  if (v3)
  {
    sub_100184CD0();
    sub_100184BA0();

  }
}

uint64_t sub_1001DC180(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  os_unfair_lock_s *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;

  v8 = swift_allocObject(&unk_10030D808, 32, 7);
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  sub_100063C8C(a1, a2);
  if (qword_1003447A0 != -1)
    swift_once(&qword_1003447A0, sub_1001EDCA4);
  v9 = swift_allocObject(&unk_10030D830, 32, 7);
  *(_QWORD *)(v9 + 16) = sub_1001E0228;
  *(_QWORD *)(v9 + 24) = v8;
  __chkstk_darwin(v9, v10);
  v12 = v11 + 4;
  swift_retain(v8);
  os_unfair_lock_lock(v12);
  sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_10017BF58, &v16);
  os_unfair_lock_unlock(v12);
  v13 = v16;
  swift_release(v8);
  swift_release(v9);
  v14 = sub_10009F640(v13);
  result = swift_bridgeObjectRelease(v13);
  if (v14)
  {
    if (qword_100344680 != -1)
      swift_once(&qword_100344680, sub_10016E9A8);
    sub_10017027C(a3, a4, v14);
    return swift_release(v14);
  }
  return result;
}

uint64_t sub_1001DC340(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  os_unfair_lock_s *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;

  v8 = type metadata accessor for DispatchPredicate(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (uint64_t *)((char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = swift_allocObject(&unk_10030D768, 32, 7);
  *(_QWORD *)(v13 + 16) = a1;
  *(_QWORD *)(v13 + 24) = a2;
  sub_100063C8C(a1, a2);
  if (qword_1003447A0 != -1)
    swift_once(&qword_1003447A0, sub_1001EDCA4);
  v14 = off_10034A560;
  v15 = swift_allocObject(&unk_10030D790, 32, 7);
  *(_QWORD *)(v15 + 16) = sub_1001E0528;
  *(_QWORD *)(v15 + 24) = v13;
  v17 = __chkstk_darwin(v15, v16);
  *(&v26 - 4) = (uint64_t)sub_100096F30;
  *(&v26 - 3) = v17;
  *(&v26 - 2) = (uint64_t)v14;
  v19 = v18 + 4;
  swift_retain(v13);
  os_unfair_lock_lock(v19);
  sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_10017BF58, &v27);
  os_unfair_lock_unlock(v19);
  v20 = v27;
  swift_release(v13);
  swift_release(v15);
  v21 = sub_10009F640(v20);
  result = swift_bridgeObjectRelease(v20);
  if (v21)
  {
    if (qword_100344680 != -1)
      swift_once(&qword_100344680, sub_10016E9A8);
    v23 = qword_100354D60;
    if (qword_1003447B8 != -1)
      swift_once(&qword_1003447B8, sub_1001EEFA4);
    v24 = qword_100354EE8;
    *v12 = qword_100354EE8;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8);
    v25 = (id)v24;
    LOBYTE(v24) = _dispatchPreconditionTest(_:)(v12);
    (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v12, v8);
    if ((v24 & 1) != 0)
    {
      if (qword_1003447C8 == -1)
      {
LABEL_10:
        sub_1001F32D4(v21 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier, a3, a4);
        if (*(_BYTE *)(v23 + OBJC_IVAR____TtC10seserviced6Alisha_isLowPowerModeEnabled) == 1)
        {
          if (qword_1003445A0 != -1)
            swift_once(&qword_1003445A0, sub_1000B26B0);
          sub_1000AD358(v21);
        }
        return swift_release(v21);
      }
    }
    else
    {
      __break(1u);
    }
    swift_once(&qword_1003447C8, sub_1001F416C);
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_1001DC640(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v14 = v13;
  v15 = a4;
  v16 = a1;
  v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a4);
  v19 = v18;

  sub_1001DF200(v12, v14, v17, v19, a5, a6, a7);
  sub_100063CD0(v17, v19);

  return swift_bridgeObjectRelease(v14);
}

uint64_t sub_1001DC6F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2, v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  v6 = *(unsigned __int8 *)(v3 + 80);
  v7 = (v6 + 16) & ~v6;
  v8 = swift_allocObject(&unk_10030D6C8, v7 + v4, v6 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v8 + v7, (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  if (qword_1003447A0 != -1)
    swift_once(&qword_1003447A0, sub_1001EDCA4);
  v9 = off_10034A560;
  v10 = swift_allocObject(&unk_10030D6F0, 32, 7);
  *(_QWORD *)(v10 + 16) = sub_1001E018C;
  *(_QWORD *)(v10 + 24) = v8;
  v12 = __chkstk_darwin(v10, v11);
  *(&v18 - 4) = (uint64_t)sub_100096F30;
  *(&v18 - 3) = v12;
  *(&v18 - 2) = (uint64_t)v9;
  v14 = v13 + 4;
  swift_retain(v8);
  os_unfair_lock_lock(v14);
  sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_10017BF58, &v19);
  os_unfair_lock_unlock(v14);
  v15 = v19;
  swift_release(v8);
  swift_release(v10);
  v16 = sub_10009F640(v15);
  result = swift_bridgeObjectRelease(v15);
  if (v16)
  {
    if (qword_1003445A0 != -1)
      swift_once(&qword_1003445A0, sub_1000B26B0);
    sub_1000B8D70(v16);
    return swift_release(v16);
  }
  return result;
}

uint64_t sub_1001DC8F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v16;

  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)&v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(a3);
  sub_1001DF408((uint64_t)v14, a4, a5, a6);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

uint64_t sub_1001DC9A0(int64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  os_unfair_lock_s *v21;
  os_unfair_lock_s *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[16];
  uint64_t v27;
  _BYTE v28[24];

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  result = __chkstk_darwin(v6, v9);
  if (a1 != 0xFFFF && a2 != 0xFFFF)
  {
    if (qword_1003447D8 != -1)
      swift_once(&qword_1003447D8, sub_1001FC514);
    v11 = (uint64_t *)(qword_100354F18 + OBJC_IVAR____TtC10seserviced9AlishaRKE_peersAvailableToSubscribe);
    swift_beginAccess(qword_100354F18 + OBJC_IVAR____TtC10seserviced9AlishaRKE_peersAvailableToSubscribe, v28, 0, 0);
    v12 = *v11;
    swift_bridgeObjectRetain(v12);
    v13 = sub_10017EF48(a3, v12);
    result = swift_bridgeObjectRelease(v12);
    if ((v13 & 1) != 0)
    {
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(&v26[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)], a3, v6);
      v14 = *(unsigned __int8 *)(v7 + 80);
      v15 = (v14 + 16) & ~v14;
      v16 = swift_allocObject(&unk_10030D628, v15 + v8, v14 | 7);
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(v7 + 32))(v16 + v15, &v26[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)], v6);
      if (qword_1003447A0 != -1)
        swift_once(&qword_1003447A0, sub_1001EDCA4);
      v17 = off_10034A560;
      v18 = swift_allocObject(&unk_10030D650, 32, 7);
      *(_QWORD *)(v18 + 16) = sub_1001E013C;
      *(_QWORD *)(v18 + 24) = v16;
      v20 = __chkstk_darwin(v18, v19);
      *(_QWORD *)&v26[-32] = sub_100096F30;
      *(_QWORD *)&v26[-24] = v20;
      *(_QWORD *)&v26[-16] = v17;
      v22 = v21 + 4;
      swift_retain(v16);
      os_unfair_lock_lock(v22);
      sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_10017BF58, &v27);
      os_unfair_lock_unlock(v22);
      v23 = v27;
      swift_release(v16);
      swift_release(v18);
      v24 = sub_10009F640(v23);
      result = swift_bridgeObjectRelease(v23);
      if (v24)
      {
        v25 = a1 + a2;
        if (__OFADD__(a1, a2))
        {
          __break(1u);
        }
        else if (v25 >= a1)
        {
          sub_1001FBDB0(a1, v25, v24);
          return swift_release(v24);
        }
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t sub_1001DCC20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  char v9;
  uint64_t v11;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_type))
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
LABEL_5:
    v9 = 0;
    goto LABEL_6;
  }
  v8 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_isConnected);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  if (v8 != 1)
    goto LABEL_5;
  v9 = static UUID.== infix(_:_:)(a1 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier, v7);
LABEL_6:
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v9 & 1;
}

uint64_t sub_1001DCDD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  if (qword_1003447C8 != -1)
    swift_once(&qword_1003447C8, sub_1001F416C);
  return a4(a1, a2, a3);
}

uint64_t sub_1001DCE68(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v23;

  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a4);
  v20 = v19;
  v21 = a1;
  sub_1001DF8AC((uint64_t)v17, v18, v20, a5, a6, a7);

  swift_bridgeObjectRelease(v20);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v13);
}

uint64_t sub_1001DCF50(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v4 = swift_allocObject(&unk_10030D4E8, 32, 7);
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  sub_100063C8C(a1, a2);
  if (qword_1003447A0 != -1)
    swift_once(&qword_1003447A0, sub_1001EDCA4);
  v5 = swift_allocObject(&unk_10030D510, 32, 7);
  *(_QWORD *)(v5 + 16) = sub_10017B91C;
  *(_QWORD *)(v5 + 24) = v4;
  __chkstk_darwin(v5, v6);
  v8 = v7 + 4;
  swift_retain(v4);
  os_unfair_lock_lock(v8);
  sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_10017BF58, &v12);
  os_unfair_lock_unlock(v8);
  v9 = v12;
  swift_release(v4);
  swift_release(v5);
  v10 = sub_10009F640(v9);
  result = swift_bridgeObjectRelease(v9);
  if (v10)
  {
    if (qword_1003446C0 != -1)
      swift_once(&qword_1003446C0, sub_10019CC14);
    sub_10019B2F8(v10);
    return swift_release(v10);
  }
  return result;
}

uint64_t sub_1001DD104(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  os_unfair_lock_s *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;

  v8 = swift_allocObject(&unk_10030D448, 32, 7);
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  sub_100063C8C(a1, a2);
  if (qword_1003447A0 != -1)
    swift_once(&qword_1003447A0, sub_1001EDCA4);
  v9 = swift_allocObject(&unk_10030D470, 32, 7);
  *(_QWORD *)(v9 + 16) = sub_1001E0528;
  *(_QWORD *)(v9 + 24) = v8;
  __chkstk_darwin(v9, v10);
  v12 = v11 + 4;
  swift_retain(v8);
  os_unfair_lock_lock(v12);
  sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_10006F860, &v16);
  os_unfair_lock_unlock(v12);
  v13 = v16;
  swift_release(v8);
  swift_release(v9);
  v14 = sub_10009F640(v13);
  result = swift_bridgeObjectRelease(v13);
  if (v14)
  {
    if (qword_1003445C0 != -1)
      swift_once(&qword_1003445C0, sub_1000EB484);
    sub_1000EB954(a3, a4, 0, v14);
    return swift_release(v14);
  }
  return result;
}

uint64_t sub_1001DD2AC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  char v8;
  char v9;

  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_type))
    return 0;
  v5 = *(_QWORD *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
  v6 = *(_QWORD *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
  if (v6 >> 60 == 15)
  {
    sub_100063C8C(a2, a3);
    sub_10006B9B4(v5, v6);
    sub_10006B9B4(a2, a3);
    return 0;
  }
  sub_10006BA34(*(_QWORD *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier), v6);
  sub_100063C8C(a2, a3);
  sub_10007C23C(v5, v6);
  v9 = v8;
  sub_100063CD0(a2, a3);
  sub_10006B9B4(v5, v6);
  return v9 & 1;
}

void sub_1001DD448(uint64_t a1, unint64_t a2)
{
  if (qword_100344680 != -1)
    swift_once(&qword_100344680, sub_10016E9A8);
  sub_100174B80(a1, a2);
}

void sub_1001DD4C8(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  id v15;

  v11 = a3;
  v15 = a1;
  v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v14 = v13;

  sub_1001DFD28(v12, v14, a4, a5, a6);
  sub_100063CD0(v12, v14);

}

id sub_1001DD5F0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AlishaExternal.RequestInProgress();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AlishaExternal()
{
  return objc_opt_self(_TtC10seserviced14AlishaExternal);
}

uint64_t type metadata accessor for AlishaExternal.RequestInProgress()
{
  return objc_opt_self(_TtCC10seserviced14AlishaExternal17RequestInProgress);
}

id sub_1001DD6B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  _QWORD v33[5];

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = sub_10006C25C(0, (unint64_t *)&qword_100347710, SEEndPoint_ptr);
    v5 = sub_10007EFD8();
    v6 = Set.Iterator.init(_cocoa:)(v33, v3, v4, v5);
    v1 = v33[0];
    v30 = v33[1];
    v7 = v33[2];
    v8 = v33[3];
    v9 = v33[4];
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v30 = a1 + 56;
    v7 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v9 = v12 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v8 = 0;
  }
  v28 = v7;
  v29 = (unint64_t)(v7 + 64) >> 6;
  v13 = v8;
  if (v1 < 0)
  {
    v15 = v1;
    v16 = __CocoaSet.Iterator.next()(v6);
    if (v16)
    {
      v17 = v16;
      v31 = v16;
      v18 = sub_10006C25C(0, (unint64_t *)&qword_100347710, SEEndPoint_ptr);
      swift_unknownObjectRetain(v17);
      swift_dynamicCast(&v32, &v31, (char *)&type metadata for Swift.AnyObject + 8, v18, 7);
      v19 = v32;
      swift_unknownObjectRelease(v17);
      v1 = v15;
      if (v19)
        goto LABEL_28;
    }
    else
    {
      v19 = 0;
    }
    goto LABEL_37;
  }
  if (v9)
  {
    v14 = __clz(__rbit64(v9)) | (v8 << 6);
    goto LABEL_27;
  }
  v20 = v8 + 1;
  if (__OFADD__(v13, 1))
  {
    __break(1u);
    JUMPOUT(0x1001DDDDCLL);
  }
  if (v20 >= v29)
    goto LABEL_35;
  v21 = *(_QWORD *)(v30 + 8 * v20);
  if (!v21)
  {
    v22 = v13 + 2;
    if (v13 + 2 < v29)
    {
      v21 = *(_QWORD *)(v30 + 8 * v22);
      if (v21)
        goto LABEL_25;
      v22 = v13 + 3;
      if (v13 + 3 >= v29)
        goto LABEL_35;
      v21 = *(_QWORD *)(v30 + 8 * v22);
      if (v21)
      {
LABEL_25:
        v20 = v22;
        goto LABEL_26;
      }
      v22 = v13 + 4;
      if (v13 + 4 < v29)
      {
        v21 = *(_QWORD *)(v30 + 8 * v22);
        if (v21)
          goto LABEL_25;
        v20 = v13 + 5;
        if (v13 + 5 < v29)
        {
          v21 = *(_QWORD *)(v30 + 8 * v20);
          if (!v21)
          {
            v26 = v13 + 6;
            do
            {
              if (v29 == v26)
                goto LABEL_35;
              v21 = *(_QWORD *)(v30 + 8 * v26++);
            }
            while (!v21);
            v20 = v26 - 1;
          }
          goto LABEL_26;
        }
      }
    }
LABEL_35:
    v19 = 0;
    goto LABEL_37;
  }
LABEL_26:
  v14 = __clz(__rbit64(v21)) + (v20 << 6);
LABEL_27:
  v19 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v14);
  if (v19)
  {
LABEL_28:
    v23 = objc_msgSend(v19, "publicKeyIdentifier", v28);
    static Data._unconditionallyBridgeFromObjectiveC(_:)(v23);
    v25 = v24;

    __asm { BR              X10 }
  }
LABEL_37:
  sub_10007EF58(v1);
  return v19;
}

id sub_1001DDE7C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  unint64_t v25;
  int64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  _QWORD v37[5];

  v5 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v6 = a1;
    else
      v6 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v7 = __CocoaSet.makeIterator()(v6);
    v8 = sub_10006C25C(0, (unint64_t *)&qword_100347710, SEEndPoint_ptr);
    v9 = sub_10007EFD8();
    v10 = Set.Iterator.init(_cocoa:)(v37, v7, v8, v9);
    v5 = v37[0];
    v34 = v37[1];
    v11 = v37[2];
    v12 = v37[3];
    v13 = v37[4];
  }
  else
  {
    v14 = -1 << *(_BYTE *)(a1 + 32);
    v34 = a1 + 56;
    v11 = ~v14;
    v15 = -v14;
    if (v15 < 64)
      v16 = ~(-1 << v15);
    else
      v16 = -1;
    v13 = v16 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v12 = 0;
  }
  v33 = (unint64_t)(v11 + 64) >> 6;
  while (1)
  {
    v17 = v13;
    v18 = v12;
    if ((v5 & 0x8000000000000000) == 0)
      break;
    v21 = __CocoaSet.Iterator.next()(v10);
    if (!v21)
      goto LABEL_38;
    v22 = v21;
    v35 = v21;
    v23 = sub_10006C25C(0, (unint64_t *)&qword_100347710, SEEndPoint_ptr);
    swift_unknownObjectRetain(v22);
    swift_dynamicCast(&v36, &v35, (char *)&type metadata for Swift.AnyObject + 8, v23, 7);
    v24 = v36;
    swift_unknownObjectRelease(v22);
    v13 = v17;
    if (!v24)
      goto LABEL_39;
LABEL_29:
    v27 = objc_msgSend(v24, "readerIdentifier");
    if (v27)
    {
      v28 = v27;
      static Data._unconditionallyBridgeFromObjectiveC(_:)(v27);
      v30 = v29;

      __asm { BR              X8 }
    }
    sub_100063C8C(a2, a3);
    sub_10006B9B4(0, 0xF000000000000000);
    sub_10006B9B4(a2, a3);

  }
  if (v13)
  {
    v19 = __clz(__rbit64(v13));
    v13 &= v13 - 1;
    v20 = v19 | (v12 << 6);
    goto LABEL_28;
  }
  ++v12;
  if (__OFADD__(v18, 1))
  {
    __break(1u);
    JUMPOUT(0x1001DE68CLL);
  }
  if (v12 >= v33)
    goto LABEL_38;
  v25 = *(_QWORD *)(v34 + 8 * v12);
  if (v25)
  {
LABEL_27:
    v13 = (v25 - 1) & v25;
    v20 = __clz(__rbit64(v25)) + (v12 << 6);
LABEL_28:
    v24 = *(id *)(*(_QWORD *)(v5 + 48) + 8 * v20);
    if (!v24)
      goto LABEL_39;
    goto LABEL_29;
  }
  v26 = v18 + 2;
  if (v18 + 2 >= v33)
    goto LABEL_38;
  v25 = *(_QWORD *)(v34 + 8 * v26);
  if (v25)
    goto LABEL_26;
  v26 = v18 + 3;
  if (v18 + 3 >= v33)
    goto LABEL_38;
  v25 = *(_QWORD *)(v34 + 8 * v26);
  if (v25)
    goto LABEL_26;
  v26 = v18 + 4;
  if (v18 + 4 >= v33)
    goto LABEL_38;
  v25 = *(_QWORD *)(v34 + 8 * v26);
  if (v25)
  {
LABEL_26:
    v12 = v26;
    goto LABEL_27;
  }
  v12 = v18 + 5;
  if (v18 + 5 >= v33)
    goto LABEL_38;
  v25 = *(_QWORD *)(v34 + 8 * v12);
  if (v25)
    goto LABEL_27;
  v31 = v18 + 6;
  while (v33 != v31)
  {
    v25 = *(_QWORD *)(v34 + 8 * v31++);
    if (v25)
    {
      v12 = v31 - 1;
      goto LABEL_27;
    }
  }
LABEL_38:
  v24 = 0;
LABEL_39:
  sub_10007EF58(v5);
  return v24;
}

uint64_t sub_1001DE72C(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  uint64_t v5;

  if (qword_1003445B8 != -1)
    a1 = swift_once(&qword_1003445B8, sub_1000EAA4C);
  __chkstk_darwin(a1, a2);
  v3 = v2 + 4;
  os_unfair_lock_lock(v2 + 4);
  sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_100096F14, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

uint64_t sub_1001DE7E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  id v10;
  uint64_t result;
  uint64_t v12;
  _BYTE v13[15];
  uint64_t v14;

  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v9 = qword_100354EE8;
  *v8 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.notOnQueue(_:), v4);
  v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) != 0)
  {
    __chkstk_darwin(result, v12);
    *(_QWORD *)&v13[-16] = a1;
    *(_QWORD *)&v13[-8] = a2;
    OS_dispatch_queue.sync<A>(execute:)(&v14, sub_1001E048C, &v13[-32], &type metadata for Bool);
    return v14;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001DE920(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  uint64_t result;
  uint64_t v10;
  _BYTE v11[15];
  uint64_t v12;

  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v7 = qword_100354EE8;
  *v6 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.notOnQueue(_:), v2);
  v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) != 0)
  {
    __chkstk_darwin(result, v10);
    *(_QWORD *)&v11[-16] = a1;
    OS_dispatch_queue.sync<A>(execute:)(&v12, sub_1001E0410, &v11[-32], &type metadata for Bool);
    return v12;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001DEA50(__int16 a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  id v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (uint64_t *)((char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v11 = qword_100354EE8;
  *v10 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.notOnQueue(_:), v6);
  v12 = (id)v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v10);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v7 + 8))(v10, v6);
  if ((v11 & 1) != 0)
  {
    __chkstk_darwin(result, v14);
    *((_WORD *)&v16 - 16) = a1;
    *(&v16 - 3) = a2;
    *(&v16 - 2) = a3;
    v15 = sub_100063D3C(&qword_10034A248);
    OS_dispatch_queue.sync<A>(execute:)(&v17, sub_1001E03F4, &v16 - 6, v15);
    return v17;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001DEBA0(__int16 a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  id v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v23 = a4;
  v11 = type metadata accessor for DispatchPredicate(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v15 = (uint64_t *)((char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v16 = qword_100354EE8;
  *v15 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v12 + 104))(v15, enum case for DispatchPredicate.notOnQueue(_:), v11);
  v17 = (id)v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)(v15);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v12 + 8))(v15, v11);
  if ((v16 & 1) != 0)
  {
    __chkstk_darwin(result, v19);
    *((_WORD *)&v22 - 24) = a1;
    *((_BYTE *)&v22 - 46) = a2;
    *(&v22 - 5) = a5;
    *(&v22 - 4) = a6;
    v20 = v23;
    *(&v22 - 3) = a3;
    *(&v22 - 2) = v20;
    v21 = sub_100063D3C(&qword_10034A248);
    OS_dispatch_queue.sync<A>(execute:)(&v24, sub_1001E03D0, &v22 - 8, v21);
    return v24;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001DED10(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (uint64_t *)((char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v7 = qword_100354EE8;
  *v6 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.notOnQueue(_:), v2);
  v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) != 0)
  {
    __chkstk_darwin(result, v10);
    *((_BYTE *)&v12 - 16) = a1 & 1;
    v11 = sub_100063D3C(&qword_10034A258);
    OS_dispatch_queue.sync<A>(execute:)(&v13, sub_1001E03B8, &v12 - 4, v11);
    return v13;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001DEE50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  id v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (uint64_t *)((char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v11 = qword_100354EE8;
  *v10 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.notOnQueue(_:), v6);
  v12 = (id)v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v10);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v7 + 8))(v10, v6);
  if ((v11 & 1) != 0)
  {
    __chkstk_darwin(result, v14);
    *(&v16 - 4) = a3;
    *(&v16 - 3) = a1;
    *(&v16 - 2) = a2;
    v15 = sub_100063D3C(&qword_10034A248);
    OS_dispatch_queue.sync<A>(execute:)(&v17, sub_1001E0398, &v16 - 6, v15);
    return v17;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001DEFA0(__int16 a1, char a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD aBlock[5];
  uint64_t v47;

  v41 = a8;
  v37 = a10;
  v38 = a11;
  v40 = type metadata accessor for DispatchWorkItemFlags(0);
  v44 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40, v18);
  v20 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for DispatchQoS(0);
  v42 = *(_QWORD *)(v21 - 8);
  v43 = v21;
  __chkstk_darwin(v21, v22);
  v24 = (char *)&v36 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v39 = qword_100354EE8;
  v25 = swift_allocObject(&unk_10030D8F8, 96, 7);
  *(_QWORD *)(v25 + 16) = a5;
  *(_QWORD *)(v25 + 24) = a6;
  *(_QWORD *)(v25 + 32) = a7;
  *(_WORD *)(v25 + 40) = a1;
  *(_BYTE *)(v25 + 42) = a2;
  *(_QWORD *)(v25 + 48) = a3;
  *(_QWORD *)(v25 + 56) = a4;
  v26 = a4;
  v27 = v41;
  *(_QWORD *)(v25 + 64) = v41;
  *(_QWORD *)(v25 + 72) = a9;
  v28 = v38;
  *(_QWORD *)(v25 + 80) = v37;
  *(_QWORD *)(v25 + 88) = v28;
  aBlock[4] = sub_1001E034C;
  v47 = v25;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100071C98;
  aBlock[3] = &unk_10030D910;
  v29 = _Block_copy(aBlock);
  sub_1000DCA74(a6, a7);
  sub_100063C8C(a3, v26);
  sub_10006BA34(v27, a9);
  v30 = swift_retain(v28);
  static DispatchQoS.unspecified.getter(v30);
  v45 = _swiftEmptyArrayStorage;
  v31 = sub_100099850();
  v32 = sub_100063D3C((uint64_t *)&unk_100346200);
  v33 = sub_100063D7C();
  v34 = v40;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v45, v32, v33, v40, v31);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v24, v20, v29);
  _Block_release(v29);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v20, v34);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v24, v43);
  return swift_release(v47);
}

uint64_t sub_1001DF200(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD aBlock[5];
  _QWORD *v35;

  v31 = a7;
  v29 = a6;
  v12 = type metadata accessor for DispatchWorkItemFlags(0);
  v32 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchQoS(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16, v18);
  v20 = (char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v30 = qword_100354EE8;
  v21 = (_QWORD *)swift_allocObject(a5, 48, 7);
  v21[2] = a3;
  v21[3] = a4;
  v21[4] = a1;
  v21[5] = a2;
  aBlock[4] = v29;
  v35 = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100071C98;
  aBlock[3] = v31;
  v22 = _Block_copy(aBlock);
  sub_100063C8C(a3, a4);
  swift_bridgeObjectRetain(a2);
  static DispatchQoS.unspecified.getter(v23);
  v33 = _swiftEmptyArrayStorage;
  v24 = sub_100099850();
  v25 = sub_100063D3C((uint64_t *)&unk_100346200);
  v26 = sub_100063D7C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v33, v25, v26, v12, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v20, v15, v22);
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v15, v12);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
  return swift_release(v35);
}

uint64_t sub_1001DF408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD aBlock[5];
  uint64_t v33;

  v27 = a3;
  v28 = a4;
  v26 = a2;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v30 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29, v10);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v13, v16);
  v17 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v13);
  v18 = *(unsigned __int8 *)(v14 + 80);
  v19 = (v18 + 16) & ~v18;
  v20 = swift_allocObject(v26, v19 + v15, v18 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v20 + v19, v17, v13);
  aBlock[4] = v27;
  v33 = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100071C98;
  aBlock[3] = v28;
  v21 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v21);
  v31 = _swiftEmptyArrayStorage;
  v22 = sub_100099850();
  v23 = sub_100063D3C((uint64_t *)&unk_100346200);
  v24 = sub_100063D7C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v23, v24, v5, v22);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v8, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v29);
  return swift_release(v33);
}

uint64_t sub_1001DF650(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD aBlock[5];
  uint64_t v33;

  v27 = a1;
  v28 = a2;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v30 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29, v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12, v15);
  v16 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v12);
  v17 = *(unsigned __int8 *)(v13 + 80);
  v18 = (v17 + 32) & ~v17;
  v19 = swift_allocObject(&unk_10030D5D8, v18 + v14, v17 | 7);
  v20 = v28;
  *(_QWORD *)(v19 + 16) = v27;
  *(_QWORD *)(v19 + 24) = v20;
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v19 + v18, v16, v12);
  aBlock[4] = sub_1001E0108;
  v33 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100071C98;
  aBlock[3] = &unk_10030D5F0;
  v21 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v21);
  v31 = _swiftEmptyArrayStorage;
  v22 = sub_100099850();
  v23 = sub_100063D3C((uint64_t *)&unk_100346200);
  v24 = sub_100063D7C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v23, v24, v4, v22);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v7, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v29);
  return swift_release(v33);
}

uint64_t sub_1001DF8AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD v32[2];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD aBlock[5];
  uint64_t v42;

  v35 = a5;
  v36 = a6;
  v33 = a4;
  v34 = a2;
  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v39 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v9);
  v11 = (char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v37 = *(_QWORD *)(v12 - 8);
  v38 = v12;
  __chkstk_darwin(v12, v13);
  v15 = (char *)v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for UUID(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(_QWORD *)(v17 + 64);
  __chkstk_darwin(v16, v19);
  v20 = (char *)v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v32[1] = qword_100354EE8;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))((char *)v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v16);
  v21 = *(unsigned __int8 *)(v17 + 80);
  v22 = (v21 + 16) & ~v21;
  v23 = (v18 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = swift_allocObject(v33, v23 + 16, v21 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v24 + v22, v20, v16);
  v25 = (_QWORD *)(v24 + v23);
  *v25 = v34;
  v25[1] = a3;
  aBlock[4] = v35;
  v42 = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100071C98;
  aBlock[3] = v36;
  v26 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a3);
  static DispatchQoS.unspecified.getter(v27);
  v40 = _swiftEmptyArrayStorage;
  v28 = sub_100099850();
  v29 = sub_100063D3C((uint64_t *)&unk_100346200);
  v30 = sub_100063D7C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v40, v29, v30, v8, v28);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v11, v26);
  _Block_release(v26);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v15, v38);
  return swift_release(v42);
}

uint64_t sub_1001DFB1C(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD v24[2];
  uint64_t v25;
  _QWORD *v26;
  _QWORD aBlock[5];
  _QWORD *v28;

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v25 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v9);
  v11 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v16 = (char *)v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v24[1] = qword_100354EE8;
  v17 = (_QWORD *)swift_allocObject(&unk_10030D3F8, 48, 7);
  v17[2] = a3;
  v17[3] = a4;
  v17[4] = a1;
  v17[5] = a2;
  aBlock[4] = sub_1001DFF74;
  v28 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100071C98;
  aBlock[3] = &unk_10030D410;
  v18 = _Block_copy(aBlock);
  sub_100063C8C(a3, a4);
  v19 = sub_10006BA34(a1, a2);
  static DispatchQoS.unspecified.getter(v19);
  v26 = _swiftEmptyArrayStorage;
  v20 = sub_100099850();
  v21 = sub_100063D3C((uint64_t *)&unk_100346200);
  v22 = sub_100063D7C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v21, v22, v8, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v16, v11, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  return swift_release(v28);
}

uint64_t sub_1001DFD28(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD aBlock[5];
  uint64_t v30;

  v26 = a5;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v27 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v18 = swift_allocObject(a3, 32, 7);
  *(_QWORD *)(v18 + 16) = a1;
  *(_QWORD *)(v18 + 24) = a2;
  aBlock[4] = a4;
  v30 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100071C98;
  aBlock[3] = v26;
  v19 = _Block_copy(aBlock);
  v20 = sub_100063C8C(a1, a2);
  static DispatchQoS.unspecified.getter(v20);
  v28 = _swiftEmptyArrayStorage;
  v21 = sub_100099850();
  v22 = sub_100063D3C((uint64_t *)&unk_100346200);
  v23 = sub_100063D7C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v28, v22, v23, v9, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v17, v12, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v12, v9);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  return swift_release(v30);
}

void sub_1001DFF18()
{
  uint64_t v0;

  sub_1001DD448(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1001DFF20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001DFF30(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1001DFF38()
{
  _QWORD *v0;
  unint64_t v1;

  sub_100063CD0(v0[2], v0[3]);
  v1 = v0[5];
  if (v1 >> 60 != 15)
    sub_100063CD0(v0[4], v1);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001DFF74()
{
  uint64_t v0;

  return sub_1001DD104(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1001DFF84()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001DFFAC()
{
  uint64_t v0;

  return sub_1001DCF50(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1001DFFBC()
{
  return sub_1001E0050((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1001F32D4);
}

uint64_t sub_1001DFFCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_1001E0044()
{
  return sub_1001E0050((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1001F2CA0);
}

uint64_t sub_1001E0050(uint64_t (*a1)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;

  v3 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (uint64_t *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  return sub_1001DCDD4(v1 + v4, *v5, v5[1], a1);
}

uint64_t sub_1001E00A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001E0108()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  return sub_1001DC9A0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), v0 + ((v1 + 32) & ~v1));
}

uint64_t sub_1001E013C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  return sub_1001DCC20(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_1001E017C()
{
  return sub_1001E0254(sub_1001DC6F4);
}

uint64_t sub_1001E0190(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  return sub_10008C788(a1, v1 + ((v3 + 16) & ~v3)) & 1;
}

uint64_t sub_1001E01D8()
{
  uint64_t v0;

  return sub_1001DC340(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1001E01EC()
{
  _QWORD *v0;

  sub_100063CD0(v0[2], v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001E0218()
{
  uint64_t v0;

  return sub_1001DC180(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1001E0228(uint64_t a1)
{
  uint64_t v1;

  return sub_1001DD2AC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24)) & 1;
}

uint64_t sub_1001E0248()
{
  return sub_1001E0254((uint64_t (*)(uint64_t))sub_1001DC0B4);
}

uint64_t sub_1001E0254(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  return a1(v1 + ((v2 + 16) & ~v2));
}

uint64_t sub_1001E0290(uint64_t a1)
{
  uint64_t v1;

  return static UUID.== infix(_:_:)(*(_QWORD *)(a1 + OBJC_IVAR____TtC10seserviced10UWBSession_peer)+ OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1001E02B8()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001E02DC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

void sub_1001E02F0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  sub_1001DC018(a1, a2, a3, a4, a5, a6, *(_QWORD *)(v6 + 16));
}

uint64_t sub_1001E02F8()
{
  _QWORD *v0;
  unint64_t v1;

  if (v0[3])
    swift_release(v0[4]);
  sub_100063CD0(v0[6], v0[7]);
  v1 = v0[9];
  if (v1 >> 60 != 15)
    sub_100063CD0(v0[8], v1);
  swift_release(v0[11]);
  return swift_deallocObject(v0, 96, 7);
}

uint64_t sub_1001E034C()
{
  uint64_t v0;

  return sub_1001DB83C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(unsigned __int16 *)(v0 + 40), *(unsigned __int8 *)(v0 + 42), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(void (**)(Class, _QWORD))(v0 + 72), *(void (**)(Class, _QWORD))(v0 + 80), *(_QWORD *)(v0 + 88));
}

void sub_1001E0390(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  sub_1001DB964(a1, a2, a3, a4, a5, a6, *(void (**)(Class, Class, uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 16));
}

void sub_1001E0398(_QWORD *a1@<X8>)
{
  uint64_t *v1;

  sub_1001DAF54(v1[2], v1[3], v1[4], a1);
}

unint64_t sub_1001E03B8@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1001DAE80(*(_BYTE *)(v1 + 16), a1);
}

void sub_1001E03D0(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_1001DA08C(*(_WORD *)(v1 + 16), *(_BYTE *)(v1 + 18), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), a1);
}

void sub_1001E03F4(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_1001D9F24(*(unsigned __int16 *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), a1);
}

void sub_1001E0410(_BYTE *a1@<X8>)
{
  uint64_t v1;

  sub_1001D9CA8(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1001E042C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_1001E048C(_BYTE *a1@<X8>)
{
  uint64_t v1;

  sub_1001D9708(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1001E04A8(void *a1)
{
  uint64_t v1;

  return sub_1001D9B18(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

id sub_1001E052C()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for LyonExternal()), "init");
  qword_100354E50 = (uint64_t)result;
  return result;
}

uint64_t sub_1001E05E8(uint64_t a1, unint64_t a2)
{
  if (qword_100344598 != -1)
    swift_once(&qword_100344598, sub_10009F9BC);
  return sub_1000A6D9C(a1, a2);
}

uint64_t sub_1001E0710(uint64_t a1, unint64_t a2)
{
  if (qword_100344598 != -1)
    swift_once(&qword_100344598, sub_10009F9BC);
  return sub_1000A8860(a1, a2);
}

void sub_1001E0870(char a1, unint64_t a2)
{
  if (qword_100344568 != -1)
    swift_once(&qword_100344568, sub_100073158);
  sub_100079D58(a1 & 1, a2);
}

void sub_1001E0978(char a1)
{
  if (qword_100344618 != -1)
    swift_once(&qword_100344618, sub_100152F14);
  sub_10015300C(a1 & 1);
}

uint64_t type metadata accessor for LyonExternal()
{
  return objc_opt_self(_TtC10seserviced12LyonExternal);
}

uint64_t sub_1001E0A34(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  uint64_t v5;

  if (qword_1003445B8 != -1)
    a1 = swift_once(&qword_1003445B8, sub_1000EAA4C);
  __chkstk_darwin(a1, a2);
  v3 = v2 + 4;
  os_unfair_lock_lock(v2 + 4);
  sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_10007EFBC, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

_QWORD *sub_1001E0AEC(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  id v12;
  _QWORD *result;
  uint64_t v14;
  _QWORD v15[2];

  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (_QWORD *)((char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v11 = qword_100354EE8;
  *v10 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.notOnQueue(_:), v6);
  v12 = (id)v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v10);
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(v7 + 8))(v10, v6);
  if ((v11 & 1) != 0)
  {
    __chkstk_darwin(result, v14);
    v15[-4] = a1;
    v15[-3] = a2;
    *(double *)&v15[-2] = a3;
    return OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), sub_1001E12EC, &v15[-6], &type metadata for () + 1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *sub_1001E0C34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  id v10;
  _QWORD *result;
  uint64_t v12;
  uint64_t v13;

  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (uint64_t *)((char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v9 = qword_100354EE8;
  *v8 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.notOnQueue(_:), v4);
  v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) != 0)
  {
    __chkstk_darwin(result, v12);
    *(&v13 - 2) = a1;
    *(&v13 - 1) = a2;
    return OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), sub_1001E12D4, &v13 - 4, &type metadata for () + 1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_1001E0D6C()
{
  uint64_t inited;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v15[104];

  inited = type metadata accessor for DispatchPredicate(0);
  v1 = *(_QWORD *)(inited - 8);
  __chkstk_darwin(inited, v2);
  v4 = &v15[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v5 = qword_100354EE8;
  *v4 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v1 + 104))(v4, enum case for DispatchPredicate.notOnQueue(_:), inited);
  v6 = (id)v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)(v4);
  (*(void (**)(_QWORD *, uint64_t))(v1 + 8))(v4, inited);
  if ((v5 & 1) != 0)
  {
    v4 = (_QWORD *)0xD000000000000016;
    v7 = sub_100063D3C(&qword_10034A290);
    inited = swift_initStackObject(v7, v15);
    *(_OWORD *)(inited + 16) = xmmword_100288AC0;
    *(_QWORD *)(inited + 32) = 0xD000000000000016;
    *(_QWORD *)(inited + 40) = 0x80000001002C0C10;
    if (qword_1003446A8 == -1)
      goto LABEL_5;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1003446A8, sub_10019A194);
LABEL_5:
  v8 = qword_100354D88;
  *(_QWORD *)(inited + 48) = qword_100354D88;
  *(_QWORD *)(inited + 56) = (char *)v4 + 9;
  *(_QWORD *)(inited + 64) = 0x80000001002C0C30;
  v9 = qword_1003446B0;
  swift_bridgeObjectRetain(v8);
  if (v9 != -1)
    swift_once(&qword_1003446B0, sub_10019A1A8);
  v10 = qword_100354D90;
  *(_QWORD *)(inited + 72) = qword_100354D90;
  *(_QWORD *)(inited + 80) = (char *)v4 + 23;
  *(_QWORD *)(inited + 88) = 0x80000001002C0C50;
  v11 = qword_1003446B8;
  swift_bridgeObjectRetain(v10);
  if (v11 != -1)
    swift_once(&qword_1003446B8, sub_10019A1BC);
  v12 = qword_100354D98;
  *(_QWORD *)(inited + 96) = qword_100354D98;
  swift_bridgeObjectRetain(v12);
  return sub_10017CF48(inited);
}

_QWORD *sub_1001E0F64(char a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  id v10;
  _QWORD *result;
  uint64_t v12;
  uint64_t v13;

  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (uint64_t *)((char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v9 = qword_100354EE8;
  *v8 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.notOnQueue(_:), v4);
  v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) != 0)
  {
    __chkstk_darwin(result, v12);
    *((_BYTE *)&v13 - 16) = a1 & 1;
    *(&v13 - 1) = a2;
    return OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), sub_1001E12B8, &v13 - 4, &type metadata for () + 1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001E10A4(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  uint64_t result;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _QWORD aBlock[5];
  uint64_t v16;

  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (_QWORD *)((char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v7 = qword_100354EE8;
  *v6 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.notOnQueue(_:), v2);
  v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) == 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  v10 = qword_100354EE8;
  v11 = swift_allocObject(&unk_10030DA60, 17, 7);
  *(_BYTE *)(v11 + 16) = a1 & 1;
  v12 = swift_allocObject(&unk_10030DA88, 32, 7);
  *(_QWORD *)(v12 + 16) = sub_1001E1288;
  *(_QWORD *)(v12 + 24) = v11;
  aBlock[4] = sub_1000997DC;
  v16 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10016DF1C;
  aBlock[3] = &unk_10030DAA0;
  v13 = _Block_copy(aBlock);
  v14 = v16;
  swift_retain(v12);
  swift_release(v14);
  dispatch_sync(v10, v13);
  _Block_release(v13);
  LOBYTE(v10) = swift_isEscapingClosureAtFileLocation(v12, "", 108, 54, 24, 1);
  swift_release(v11);
  result = swift_release(v12);
  if ((v10 & 1) != 0)
LABEL_7:
    __break(1u);
  return result;
}

uint64_t sub_1001E1278()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

void sub_1001E1288()
{
  uint64_t v0;

  sub_1001E0978(*(_BYTE *)(v0 + 16));
}

uint64_t sub_1001E1290()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001E12A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001E12B0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_1001E12B8()
{
  uint64_t v0;

  sub_1001E0870(*(_BYTE *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1001E12D4()
{
  uint64_t v0;

  return sub_1001E0710(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1001E12EC()
{
  uint64_t v0;

  return sub_1001E05E8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1001E1308(uint64_t a1)
{
  return sub_1001E13F8(a1, 0xD00000000000043CLL, 0x80000001002C2600, &qword_100354E58, &qword_100354E60);
}

uint64_t sub_1001E1330(uint64_t a1)
{
  return sub_1001E13F8(a1, 0xD000000000000558, 0x80000001002C1B40, &qword_100354E68, &qword_100354E70);
}

uint64_t sub_1001E1358(uint64_t a1)
{
  return sub_1001E13F8(a1, 0xD000000000000554, 0x80000001002C20A0, &qword_100354E78, &qword_100354E80);
}

uint64_t sub_1001E1380(uint64_t a1)
{
  return sub_1001E13F8(a1, 0xD00000000000041CLL, 0x80000001002C1720, &qword_100354E88, &qword_100354E90);
}

uint64_t sub_1001E13A8(uint64_t a1)
{
  return sub_1001E13F8(a1, 0xD000000000000548, 0x80000001002C11D0, &qword_100354E98, &qword_100354EA0);
}

uint64_t sub_1001E13D0(uint64_t a1)
{
  return sub_1001E13F8(a1, 0xD000000000000548, 0x80000001002C0C80, &qword_100354EA8, &qword_100354EB0);
}

uint64_t sub_1001E13F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  uint64_t result;
  unint64_t v8;

  result = Data.init(base64Encoded:options:)(a2, a3, 0);
  if (v8 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    *a4 = result;
    *a5 = v8;
  }
  return result;
}

uint64_t sub_1001E1440(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  NSObject *v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  unint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  NSObject *v18;
  uint64_t v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t inited;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  os_log_type_t v53;
  uint8_t *v54;
  _DWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  _DWORD *v65;
  Class isa;
  id v67;
  id v68;
  NSObject *v69;
  uint64_t v70;
  os_log_type_t v71;
  uint8_t *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  _DWORD *v81;
  uint8_t *buf;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  _QWORD v92[3];
  char v93[8];
  uint64_t v94;
  _QWORD v95[3];
  uint64_t v96;
  unint64_t v97;
  char v98[256];
  char v99[8];

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10seserviced16LyonStepUpHelper_stepUpSK + 8);
  if (v2 >> 60 == 15
    || (v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10seserviced16LyonStepUpHelper_endpointId + 8), v3 >> 60 == 15))
  {
    if (qword_1003447B0 != -1)
      a1 = swift_once(&qword_1003447B0, sub_1001EEF58);
    v4 = Logger.logObject.getter(a1);
    v6 = static os_log_type_t.error.getter(v4, v5);
    if (os_log_type_enabled(v4, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v6, "StepUpSK not initialized, cannot setup event", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }

    v8 = sub_10006B828();
    v9 = swift_allocError(&type metadata for DSKError, v8, 0, 0);
    *v10 = 0;
    return swift_willThrow(v9);
  }
  else
  {
    v12 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10seserviced16LyonStepUpHelper_stepUpSK);
    v13 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10seserviced16LyonStepUpHelper_endpointId);
    v14 = *(void **)(v1 + OBJC_IVAR____TtC10seserviced16LyonStepUpHelper_stsHelper);
    sub_10006BA34(v12, *(_QWORD *)(v1 + OBJC_IVAR____TtC10seserviced16LyonStepUpHelper_stepUpSK + 8));
    sub_10006BA34(v13, v3);
    v15 = objc_msgSend(v14, "startISO18013WithConnectionHandoverConfiguration:type:delegate:", 32, 2, v1);
    if (v15)
    {
      v16 = v15;
      if (qword_1003447B0 != -1)
        swift_once(&qword_1003447B0, sub_1001EEF58);
      v17 = v16;
      v18 = Logger.logObject.getter(v17);
      v20 = static os_log_type_t.error.getter(v18, v19);
      if (os_log_type_enabled(v18, v20))
      {
        v21 = (uint8_t *)swift_slowAlloc(12, -1);
        v86 = v12;
        v22 = swift_slowAlloc(32, -1);
        v96 = v22;
        *(_DWORD *)v21 = 136315138;
        swift_getErrorValue(v17, v93, v92);
        v23 = Error.localizedDescription.getter(v92[1], v92[2]);
        v25 = v24;
        v94 = sub_1001C56EC(v23, v24, &v96);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, v95, v21 + 4, v21 + 12);

        swift_bridgeObjectRelease(v25);
        _os_log_impl((void *)&_mh_execute_header, v18, v20, "Could not startISO18013: %s", v21, 0xCu);
        swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
        v26 = v22;
        v12 = v86;
        swift_slowDealloc(v26, -1, -1);
        swift_slowDealloc(v21, -1, -1);

      }
      else
      {

      }
      v44 = sub_10006B828();
      v45 = swift_allocError(&type metadata for DSKError, v44, 0, 0);
      *v46 = 0;
      swift_willThrow(v45);

      v47 = v13;
    }
    else
    {
      v85 = v14;
      v27 = sub_100063D3C(&qword_1003460E0);
      inited = swift_initStackObject(v27, v98);
      *(_OWORD *)(inited + 16) = xmmword_100288AC0;
      v96 = 0xD000000000000010;
      v97 = 0x80000001002BD920;
      AnyHashable.init<A>(_:)(&v96, &type metadata for String, &protocol witness table for String);
      *(_QWORD *)(inited + 96) = &type metadata for String;
      *(_QWORD *)(inited + 72) = 0xD000000000000012;
      *(_QWORD *)(inited + 80) = 0x80000001002BA410;
      v96 = static String._unconditionallyBridgeFromObjectiveC(_:)(STSUAStepupEventKeyEndpointData);
      v97 = v29;
      AnyHashable.init<A>(_:)(&v96, &type metadata for String, &protocol witness table for String);
      *(_QWORD *)(inited + 168) = &type metadata for Data;
      *(_QWORD *)(inited + 144) = v13;
      *(_QWORD *)(inited + 152) = v3;
      v96 = static String._unconditionallyBridgeFromObjectiveC(_:)(STSUAStepupEventKeySharedSecretData);
      v97 = v30;
      v90 = v13;
      sub_100063C8C(v13, v3);
      AnyHashable.init<A>(_:)(&v96, &type metadata for String, &protocol witness table for String);
      *(_QWORD *)(inited + 240) = &type metadata for Data;
      *(_QWORD *)(inited + 216) = v12;
      *(_QWORD *)(inited + 224) = v2;
      sub_100063C8C(v12, v2);
      v31 = sub_10017C368(inited);
      if (qword_1003447B0 != -1)
        swift_once(&qword_1003447B0, sub_1001EEF58);
      v32 = swift_bridgeObjectRetain_n(v31, 2);
      v33 = Logger.logObject.getter(v32);
      v37 = static os_log_type_t.info.getter(v33, v34, v35, v36);
      v91 = v3;
      if (os_log_type_enabled(v33, v37))
      {
        v87 = v12;
        v38 = (uint8_t *)swift_slowAlloc(12, -1);
        v83 = swift_slowAlloc(32, -1);
        v96 = v83;
        *(_DWORD *)v38 = 136642819;
        v39 = swift_bridgeObjectRetain(v31);
        v40 = Dictionary.description.getter(v39, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
        v42 = v41;
        swift_bridgeObjectRelease(v31);
        v43 = v40;
        v12 = v87;
        v94 = sub_1001C56EC(v43, v42, &v96);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, v95, v38 + 4, v38 + 12);
        swift_bridgeObjectRelease_n(v31, 2);
        swift_bridgeObjectRelease(v42);
        _os_log_impl((void *)&_mh_execute_header, v33, v37, "Sending event dictionary %{sensitive}s to stepup", v38, 0xCu);
        swift_arrayDestroy(v83, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v83, -1, -1);
        swift_slowDealloc(v38, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v31, 2);
      }
      sub_100063C8C(v12, v2);
      v48 = sub_100063C8C(v12, v2);
      v49 = Logger.logObject.getter(v48);
      v53 = static os_log_type_t.info.getter(v49, v50, v51, v52);
      if (os_log_type_enabled(v49, v53))
      {
        v54 = (uint8_t *)swift_slowAlloc(12, -1);
        v84 = swift_slowAlloc(32, -1);
        v96 = v84;
        v88 = v31;
        *(_DWORD *)v54 = 136642819;
        v55 = v54 + 12;
        v81 = v54 + 4;
        buf = v54;
        sub_1001BD2CC(v12, v2);
        v56 = v12;
        v58 = v57;
        v94 = v57;
        v59 = sub_100063D3C((uint64_t *)&unk_100346060);
        v60 = sub_10006B86C();
        v61 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v59, v60);
        v63 = v62;
        v64 = v58;
        v12 = v56;
        swift_bridgeObjectRelease(v64);
        v94 = sub_1001C56EC(v61, v63, &v96);
        v65 = v55;
        v31 = v88;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, v95, v81, v65);
        swift_bridgeObjectRelease(v63);
        sub_10006B9B4(v56, v2);
        sub_10006B9B4(v56, v2);
        _os_log_impl((void *)&_mh_execute_header, v49, v53, "Has stepupSK %{sensitive}s", buf, 0xCu);
        swift_arrayDestroy(v84, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v84, -1, -1);
        swift_slowDealloc(buf, -1, -1);
      }
      else
      {
        sub_10006B9B4(v12, v2);
        sub_10006B9B4(v12, v2);
      }

      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v31);
      v67 = objc_msgSend(v85, "signalUnifiedAccessStepUpWithEventDictionary:", isa);

      v3 = v91;
      if (v67)
      {
        v68 = v67;
        v69 = Logger.logObject.getter(v68);
        v71 = static os_log_type_t.error.getter(v69, v70);
        if (os_log_type_enabled(v69, v71))
        {
          v72 = (uint8_t *)swift_slowAlloc(12, -1);
          v89 = v12;
          v73 = swift_slowAlloc(32, -1);
          v96 = v73;
          *(_DWORD *)v72 = 136315138;
          swift_getErrorValue(v68, v99, v95);
          v74 = Error.localizedDescription.getter(v95[1], v95[2]);
          v76 = v75;
          v94 = sub_1001C56EC(v74, v75, &v96);
          v3 = v91;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, v95, v72 + 4, v72 + 12);

          swift_bridgeObjectRelease(v76);
          _os_log_impl((void *)&_mh_execute_header, v69, v71, "Could not create lyonStepUp object with error: %s", v72, 0xCu);
          swift_arrayDestroy(v73, 1, (char *)&type metadata for Any + 8);
          v77 = v73;
          v12 = v89;
          swift_slowDealloc(v77, -1, -1);
          swift_slowDealloc(v72, -1, -1);

        }
        else
        {

        }
        v78 = sub_10006B828();
        v79 = swift_allocError(&type metadata for DSKError, v78, 0, 0);
        *v80 = 0;
        swift_willThrow(v79);

      }
      v47 = v90;
    }
    sub_10006B9B4(v47, v3);
    return sub_10006B9B4(v12, v2);
  }
}

uint64_t sub_1001E1E30(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v33;
  os_log_type_t type;
  NSObject *log;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[16];
  uint64_t v40;

  v5 = v4;
  if (qword_1003447B0 != -1)
    swift_once(&qword_1003447B0, sub_1001EEF58);
  sub_100063C8C(a1, a2);
  sub_100063C8C(a3, a4);
  sub_100063C8C(a1, a2);
  v10 = sub_100063C8C(a3, a4);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc(22, -1);
    v36 = swift_slowAlloc(64, -1);
    v40 = v36;
    *(_DWORD *)v13 = 136643075;
    v37 = v5;
    sub_1001BD2CC(a1, a2);
    v15 = v14;
    v33 = sub_100063D3C((uint64_t *)&unk_100346060);
    log = v11;
    v16 = sub_10006B86C();
    v17 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v33, v16);
    type = v12;
    v19 = v18;
    swift_bridgeObjectRelease(v15);
    v38 = sub_1001C56EC(v17, v19, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease(v19);
    sub_100063CD0(a1, a2);
    sub_100063CD0(a1, a2);
    *(_WORD *)(v13 + 12) = 2080;
    sub_1001BD2CC(a3, a4);
    v21 = v20;
    v38 = v20;
    v22 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v33, v16);
    v24 = v23;
    v25 = v21;
    v5 = v37;
    swift_bridgeObjectRelease(v25);
    v38 = sub_1001C56EC(v22, v24, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease(v24);
    sub_100063CD0(a3, a4);
    sub_100063CD0(a3, a4);
    _os_log_impl((void *)&_mh_execute_header, log, type, "Received stepupSK %{sensitive}s for endpoint %s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v36, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v13, -1, -1);

  }
  else
  {
    sub_100063CD0(a1, a2);
    sub_100063CD0(a1, a2);
    sub_100063CD0(a3, a4);
    sub_100063CD0(a3, a4);

  }
  v26 = (uint64_t *)(v5 + OBJC_IVAR____TtC10seserviced16LyonStepUpHelper_stepUpSK);
  v27 = *(_QWORD *)(v5 + OBJC_IVAR____TtC10seserviced16LyonStepUpHelper_stepUpSK);
  v28 = *(_QWORD *)(v5 + OBJC_IVAR____TtC10seserviced16LyonStepUpHelper_stepUpSK + 8);
  *v26 = a1;
  v26[1] = a2;
  sub_10006B9B4(v27, v28);
  v29 = (uint64_t *)(v5 + OBJC_IVAR____TtC10seserviced16LyonStepUpHelper_endpointId);
  v30 = *(_QWORD *)(v5 + OBJC_IVAR____TtC10seserviced16LyonStepUpHelper_endpointId);
  v31 = *(_QWORD *)(v5 + OBJC_IVAR____TtC10seserviced16LyonStepUpHelper_endpointId + 8);
  *v29 = a3;
  v29[1] = a4;
  sub_100063C8C(a1, a2);
  sub_10006B9B4(v30, v31);
  return sub_100063C8C(a3, a4);
}

uint64_t sub_1001E222C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, unint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;
  _BYTE *v11;

  if (a3)
  {
    swift_errorRetain(a3);
    a5(a3, 0, 1);
    v7 = a3;
    return swift_errorRelease(v7);
  }
  if (a2 >> 60 == 15)
  {
    v9 = sub_100198900();
    v10 = swift_allocError(&type metadata for DSKUWB.UWBError, v9, 0, 0);
    *v11 = 0;
    a5(v10, 0, 1);
    v7 = v10;
    return swift_errorRelease(v7);
  }
  sub_100063C8C(a1, a2);
  a5(a1, a2, 0);
  return sub_10006B9B4(a1, a2);
}

uint64_t type metadata accessor for LyonStepUpHelper()
{
  return objc_opt_self(_TtC10seserviced16LyonStepUpHelper);
}

uint64_t sub_1001E2370()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v0 = sub_100063D3C((uint64_t *)&unk_1003465E0);
  __chkstk_darwin(v0, v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for UUID(0);
  sub_1000980F8(v4, qword_100354EB8);
  v5 = sub_10009673C(v4, (uint64_t)qword_100354EB8);
  UUID.init(uuidString:)(0xD000000000000024, 0x80000001002BE8A0);
  v6 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v3, 1, v4);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(v5, v3, v4);
  __break(1u);
  return result;
}

uint64_t sub_1001E2450()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000980F8(v0, qword_10034A360);
  sub_10009673C(v0, (uint64_t)qword_10034A360);
  return Logger.init(subsystem:category:)(0xD000000000000014);
}

BOOL sub_1001E24CC(char a1)
{
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  unint64_t v12;
  int domain_answer;
  int v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v23;
  _OWORD v24[2];
  __int16 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v24[0] = unk_10034A338;
  v24[1] = unk_10034A348;
  v25 = word_10034A358;
  v26 = unk_10034A338;
  v27 = unk_10034A348;
  sub_10006F87C((uint64_t)&v26);
  v2 = sub_10006F87C((uint64_t)&v27);
  sub_10015348C(v2);
  v4 = v3;
  sub_10006F8A4((uint64_t)&v26);
  sub_10006F8A4((uint64_t)&v27);
  if ((v4 & 1) != 0)
  {
    if (qword_100344788 != -1)
      swift_once(&qword_100344788, sub_1001E2450);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_10009673C(v5, (uint64_t)qword_10034A360);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = 0xD000000000000010;
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = swift_slowAlloc(32, -1);
      v28 = v11;
      *(_DWORD *)v10 = 136315138;
      if (a1)
      {
        if (a1 == 1)
        {
          v12 = 0x80000001002C2AC0;
        }
        else
        {
          v9 = 0x6946454348657375;
          v12 = 0xEF656D6954747372;
        }
      }
      else
      {
        v12 = 0x80000001002C2AE0;
      }
      v23 = sub_1001C56EC(v9, v12, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, v24, v10 + 4, v10 + 12);
      swift_bridgeObjectRelease(v12);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Bypassing eligibility check for domain %s due to UD", v10, 0xCu);
      v21 = 1;
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);

    }
    else
    {

      return 1;
    }
  }
  else
  {
    v28 = 0;
    domain_answer = os_eligibility_get_domain_answer(qword_10028CE38[a1], &v28, 0, 0, 0);
    if (domain_answer)
    {
      v14 = domain_answer;
      if (qword_100344788 != -1)
        swift_once(&qword_100344788, sub_1001E2450);
      v15 = type metadata accessor for Logger(0);
      v16 = sub_10009673C(v15, (uint64_t)qword_10034A360);
      v17 = Logger.logObject.getter(v16);
      v19 = static os_log_type_t.error.getter(v17, v18);
      if (os_log_type_enabled(v17, v19))
      {
        v20 = (uint8_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v20 = 67109120;
        LODWORD(v23) = v14;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, (char *)&v23 + 4, v20 + 4, v20 + 8);
        _os_log_impl((void *)&_mh_execute_header, v17, v19, "OSEligibility Error code %d encountered while getting eligibility", v20, 8u);
        swift_slowDealloc(v20, -1, -1);
      }

      return 0;
    }
    else
    {
      return v28 == 4;
    }
  }
  return v21;
}

id sub_1001E2838(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  id v20;
  NSString v21;
  Class isa;
  id v23;
  _OWORD v25[2];
  __int128 v26;
  void *v27;

  if (a4)
  {
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    v13 = v12;
    v27 = &type metadata for String;
    *(_QWORD *)&v26 = a3;
    *((_QWORD *)&v26 + 1) = a4;
    sub_10006C2B4(&v26, v25);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    sub_10018DEC0(v25, v11, v13, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  if (a5)
  {
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSUnderlyingErrorKey);
    v17 = v16;
    swift_errorRetain(a5);
    v18 = _convertErrorToNSError(_:)(a5);
    v27 = (void *)sub_100098CBC();
    *(_QWORD *)&v26 = v18;
    sub_10006C2B4(&v26, v25);
    v19 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    sub_10018DEC0(v25, v15, v17, v19);
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(0x8000000000000000);
    swift_errorRelease(a5);
  }
  if ((a2 & 1) != 0)
    a1 = 0;
  v20 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v5));
  v21 = String._bridgeToObjectiveC()();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(&_swiftEmptyDictionarySingleton);
  v23 = objc_msgSend(v20, "initWithDomain:code:userInfo:", v21, a1, isa);
  swift_errorRelease(a5);

  return v23;
}

id sub_1001E2A30(uint64_t a1, char a2)
{
  void *v2;
  uint64_t v4;
  Class isa;
  id v6;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v12;
  void *v13;

  v4 = sub_10017DBD8(a1);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v4);
  v12 = 0;
  v13 = 0;
  LODWORD(v4) = objc_msgSend(v2, "copyItemData:outData:updateToApplePayView:error:", isa, &v13, a2 & 1, &v12);

  v6 = v13;
  v7 = v12;
  if ((_DWORD)v4)
  {
    if (v6)
    {
      v8 = v6;
      v6 = (id)static Data._unconditionallyBridgeFromObjectiveC(_:)(v6);

    }
  }
  else
  {
    v9 = v7;
    v6 = v6;
    _convertNSErrorToError(_:)(v9);

    swift_willThrow(v10);
  }
  return v6;
}

id sub_1001E2B68()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SEFidoKeyManager(0)), "init");
  qword_100354ED0 = (uint64_t)result;
  return result;
}

uint64_t sub_1001E2BD8(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void *a6, uint64_t a7, void *a8)
{
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  os_log_type_t v13;
  uint8_t *v14;
  void *object;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v43;
  uint64_t v44;
  uint64_t countAndFlagsBits;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  Swift::String v50;
  void *v51;
  Swift::String v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  id v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  __n128 v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  Swift::String v78;
  uint64_t v79;
  void *v80;
  void *v81;
  uint64_t v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  Swift::String v87;
  uint64_t v88;
  void *v89;
  void *v90;
  uint64_t v91;
  void *v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __n128 v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  Swift::String v108;
  uint64_t v110;
  unint64_t v113;
  id v115;
  Swift::String v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;

  v108._countAndFlagsBits = a7;
  v108._object = a8;
  v9 = Logger.logObject.getter(a1);
  v13 = static os_log_type_t.info.getter(v9, v10, v11, v12);
  if (os_log_type_enabled(v9, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v13, "Creating FiDO Attestation", v14, 2u);
    swift_slowDealloc(v14, -1, -1);
  }

  object = Data.base64EncodedString(options:)(0)._object;
  v124 = 47;
  v125 = 0xE100000000000000;
  v122 = 95;
  v123 = 0xE100000000000000;
  v16 = sub_1000F716C();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v124, &v122, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v16, v16, v16);
  v18 = v17;
  swift_bridgeObjectRelease(object);
  v124 = 43;
  v125 = 0xE100000000000000;
  v122 = 45;
  v123 = 0xE100000000000000;
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v124, &v122, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v16, v16, v16);
  v20 = v19;
  swift_bridgeObjectRelease(v18);
  v124 = 61;
  v125 = 0xE100000000000000;
  v122 = 0;
  v123 = 0xE000000000000000;
  v21 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v124, &v122, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v16, v16, v16);
  v23 = v22;
  swift_bridgeObjectRelease(v20);
  v117._countAndFlagsBits = 0x6E68747561626577;
  v117._object = (void *)0xEF6574616572632ELL;
  v118 = v21;
  v119 = v23;
  v120 = a5;
  v121 = (unint64_t)a6;
  v24 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  v25 = swift_bridgeObjectRetain(a6);
  v26 = JSONEncoder.init()(v25);
  v27 = sub_1001E7264();
  v28 = v126;
  v29 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v117, &type metadata for WebauthN.ClientData, v27);
  v126 = v28;
  if (v28)
  {
    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(v23);
    swift_release(v26);
  }
  else
  {
    v31 = v29;
    v32 = v30;
    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(v23);
    swift_release(v26);
    sub_1001EDD38(v31, v32);
    v106 = v34;
    v107 = v33;
    v35 = objc_msgSend(a4, "key");
    v36 = objc_msgSend(v35, "publicKey");

    v37 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v36);
    v26 = v38;

    v39 = v126;
    sub_1001E78B4(a5, (uint64_t)a6, v37, v26, 1);
    if (v39)
    {
      sub_100063CD0(v37, v26);
      sub_100063CD0(v107, v106);
      sub_100063CD0(v31, v32);
      v126 = v39;
    }
    else
    {
      v43 = v41;
      v103 = v31;
      v104 = v32;
      v44 = v40;
      sub_100063CD0(v37, v26);
      v117._countAndFlagsBits = v44;
      v117._object = v43;
      v102 = v44;
      sub_100063C8C(v44, (unint64_t)v43);
      sub_100063C8C(v107, v106);
      sub_1000FB17C(v107, v106);
      sub_100063CD0(v107, v106);
      countAndFlagsBits = v117._countAndFlagsBits;
      v46 = v117._object;
      sub_1001EDD38(v117._countAndFlagsBits, (uint64_t)v117._object);
      v48 = v47;
      v105 = v49;
      sub_100063CD0(countAndFlagsBits, (unint64_t)v46);
      v117 = v108;
      swift_bridgeObjectRetain(v108._object);
      v50._countAndFlagsBits = 47;
      v50._object = (void *)0xE100000000000000;
      String.append(_:)(v50);
      v51 = v117._object;
      swift_bridgeObjectRetain(v117._object);
      v52._countAndFlagsBits = a5;
      v52._object = a6;
      String.append(_:)(v52);
      swift_bridgeObjectRelease(v51);
      v53 = v117._object;
      v54 = sub_1001C0620(32, v117._countAndFlagsBits, (unint64_t)v117._object);
      v56 = v55;
      v57 = (unint64_t)v43;
      v59 = v58;
      v61 = v60;
      swift_bridgeObjectRelease(v53);
      static String._fromSubstring(_:)(v54, v56, v59, v61);
      v63 = v62;
      swift_bridgeObjectRelease(v61);
      v64 = sub_1001E7C14(a1, a2, a3, a4);
      v126 = 0;
      v65 = v64;
      swift_bridgeObjectRelease(v63);
      v66 = objc_msgSend(a4, "key");
      v67 = objc_msgSend(v66, "publicKey");

      v68 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v67);
      v70 = v69;

      v117._countAndFlagsBits = 0x656C707061;
      v117._object = (void *)0xE500000000000000;
      v118 = -7;
      v119 = v65;
      v120 = v102;
      v121 = v57;
      v71 = type metadata accessor for CBOREncoder(0);
      swift_allocObject(v71, *(unsigned int *)(v71 + 48), *(unsigned __int16 *)(v71 + 52));
      sub_100063C8C(v102, v57);
      v72 = swift_bridgeObjectRetain(v65);
      v73 = CBOREncoder.init()(v72);
      v74 = sub_1001E7FB4();
      v75 = v126;
      v76 = dispatch thunk of CBOREncoder.encode<A>(_:)(&v117, &type metadata for WebauthN.AttestationStatement, v74);
      v115 = v77;
      swift_bridgeObjectRelease(v65);
      swift_bridgeObjectRelease(0xE500000000000000);
      swift_release(v73);
      v26 = v57;
      sub_100063CD0(v102, v57);
      v126 = v75;
      if (v75)
      {
        sub_100063CD0(v68, v70);
        swift_bridgeObjectRelease(v65);
        sub_100063CD0(v48, v105);
        sub_100063CD0(v102, v57);
        sub_100063CD0(v107, v106);
        sub_100063CD0(v103, v104);
      }
      else
      {
        v113 = v57;
        swift_bridgeObjectRelease(v65);
        sub_100063CD0(v68, v70);
        v78 = Data.base64EncodedString(options:)(0);
        v117 = v78;
        v124 = 47;
        v125 = 0xE100000000000000;
        v122 = 95;
        v123 = 0xE100000000000000;
        v79 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v124, &v122, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v16, v16, v16);
        v81 = v80;
        swift_bridgeObjectRelease(v78._object);
        v117._countAndFlagsBits = v79;
        v117._object = v81;
        v124 = 43;
        v125 = 0xE100000000000000;
        v122 = 45;
        v123 = 0xE100000000000000;
        v82 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v124, &v122, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v16, v16, v16);
        v84 = v83;
        swift_bridgeObjectRelease(v81);
        v117._countAndFlagsBits = v82;
        v117._object = v84;
        v124 = 61;
        v125 = 0xE100000000000000;
        v122 = 0;
        v123 = 0xE000000000000000;
        v110 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v124, &v122, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v16, v16, v16);
        v86 = v85;
        swift_bridgeObjectRelease(v84);
        v87 = Data.base64EncodedString(options:)(0);
        v117 = v87;
        v124 = 47;
        v125 = 0xE100000000000000;
        v122 = 95;
        v123 = 0xE100000000000000;
        v88 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v124, &v122, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v16, v16, v16);
        v90 = v89;
        swift_bridgeObjectRelease(v87._object);
        v117._countAndFlagsBits = v88;
        v117._object = v90;
        v124 = 43;
        v125 = 0xE100000000000000;
        v122 = 45;
        v123 = 0xE100000000000000;
        v91 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v124, &v122, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v16, v16, v16);
        v93 = v92;
        swift_bridgeObjectRelease(v90);
        v117._countAndFlagsBits = v91;
        v117._object = v93;
        v124 = 61;
        v125 = 0xE100000000000000;
        v122 = 0;
        v123 = 0xE000000000000000;
        v94 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v124, &v122, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v16, v16, v16);
        v96 = v95;
        swift_bridgeObjectRelease(v93);
        v117._countAndFlagsBits = v110;
        v117._object = v86;
        v118 = v94;
        v119 = v96;
        swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
        v98 = JSONEncoder.init()(v97);
        v99 = sub_1001E7FF8();
        v26 = v98;
        v100 = v126;
        v101 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v117, &type metadata for WebauthN.AuthenticatorAttestationResponse, v99);
        v126 = v100;
        if (!v100)
          v26 = v101;
        swift_release(v98);
        sub_100063CD0(v76, (unint64_t)v115);
        sub_100063CD0(v102, v113);
        sub_100063CD0(v107, v106);
        sub_100063CD0(v103, v104);
        sub_100063CD0(v48, v105);
        swift_bridgeObjectRelease(v96);
        swift_bridgeObjectRelease(v86);
      }
    }
  }
  return v26;
}

uint64_t sub_1001E3980(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t isa;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  void *object;
  uint64_t v34;
  uint64_t v35;
  Swift::String v36;
  Swift::String v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  id v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  Swift::String v51;
  Swift::String v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;

  v90 = a2;
  v77 = a1;
  v7 = type metadata accessor for P256.Signing.ECDSASignature(0);
  v74 = *(_QWORD *)(v7 - 8);
  v75 = v7;
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for P256.Signing.PublicKey(0);
  v76 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11, v12);
  v15 = (char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = Logger.logObject.getter(v13);
  v20 = static os_log_type_t.info.getter(v16, v17, v18, v19);
  if (os_log_type_enabled(v16, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v20, "Performing FIDO verification", v21, 2u);
    swift_slowDealloc(v21, -1, -1);
  }

  v22 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
  v23 = sub_100063C8C(a3, a4);
  isa = JSONDecoder.init()(v23);
  v25 = sub_1001E7220();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(&v84, &type metadata for WebauthN.AuthenticatorAssertionResponse, a3, a4, &type metadata for WebauthN.AuthenticatorAssertionResponse, v25);
  if (!v4)
  {
    v68 = v11;
    sub_100063CD0(a3, a4);
    swift_release(isa);
    v26 = v86;
    v70 = v85;
    v71 = v88;
    v72 = v89;
    v73 = v87;
    v82 = v84;
    v83 = v85;
    v80 = 95;
    v81 = 0xE100000000000000;
    v78 = 47;
    v79 = 0xE100000000000000;
    v27 = sub_1000F716C();
    v28 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v80, &v78, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v27, v27, v27);
    v30 = v29;
    v82 = v28;
    v83 = v29;
    v80 = 45;
    v81 = 0xE100000000000000;
    v78 = 43;
    v79 = 0xE100000000000000;
    v31 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v80, &v78, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v27, v27, v27);
    object = v32;
    swift_bridgeObjectRelease(v30);
    v84 = v31;
    v85 = (unint64_t)object;
    swift_bridgeObjectRetain(object);
    if ((String.count.getter(v31, object) & 3) != 0)
    {
      v34 = String.count.getter(v31, object);
      swift_bridgeObjectRelease(object);
      v35 = v34 & 3;
      if (v34 <= 0)
        v35 = -(-v34 & 3);
      v36._countAndFlagsBits = 61;
      v36._object = (void *)0xE100000000000000;
      v37 = String.init(repeating:count:)(v36, 4 - v35);
      object = v37._object;
      String.append(_:)(v37);
    }
    swift_bridgeObjectRelease(object);
    v38 = v85;
    v39 = Data.init(base64Encoded:options:)(v84, v85, 0);
    v41 = v40;
    sub_10006BA34(v39, v40);
    swift_bridgeObjectRelease(v38);
    if (v41 >> 60 == 15)
    {
      isa = sub_10006C25C(0, (unint64_t *)&qword_1003469E0, NSError_ptr);
      v42 = sub_1001E2838(0, 1, 0xD00000000000001CLL, 0x80000001002C2C30, 0);
      swift_willThrow(v42);
    }
    else
    {
      v69 = v39;
      sub_10006B9B4(v39, v41);
      v82 = v26;
      v83 = v73;
      v80 = 95;
      v81 = 0xE100000000000000;
      v78 = 47;
      v79 = 0xE100000000000000;
      v43 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v80, &v78, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v27, v27, v27);
      v45 = v44;
      v82 = v43;
      v83 = v44;
      v80 = 45;
      v81 = 0xE100000000000000;
      v78 = 43;
      v79 = 0xE100000000000000;
      v46 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v80, &v78, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v27, v27, v27);
      v48 = v47;
      swift_bridgeObjectRelease(v45);
      v84 = v46;
      v85 = (unint64_t)v48;
      swift_bridgeObjectRetain(v48);
      if ((String.count.getter(v46, v48) & 3) != 0)
      {
        v49 = String.count.getter(v46, v48);
        swift_bridgeObjectRelease(v48);
        v50 = v49 & 3;
        if (v49 <= 0)
          v50 = -(-v49 & 3);
        v51._countAndFlagsBits = 61;
        v51._object = (void *)0xE100000000000000;
        v52 = String.init(repeating:count:)(v51, 4 - v50);
        v48 = v52._object;
        String.append(_:)(v52);
      }
      swift_bridgeObjectRelease(v48);
      v53 = v85;
      v54 = Data.init(base64Encoded:options:)(v84, v85, 0);
      v56 = v55;
      sub_10006BA34(v54, v55);
      swift_bridgeObjectRelease(v53);
      v57 = v69;
      if (v56 >> 60 != 15)
      {
        sub_10006B9B4(v54, v56);
        sub_1001EDD38(v57, v41);
        v60 = v59;
        v62 = v61;
        v84 = v54;
        v85 = v56;
        sub_100063C8C(v54, v56);
        sub_1000FB17C(v60, v62);
        sub_100063CD0(v60, v62);
        v64 = v84;
        v63 = v85;
        v84 = v77;
        v85 = v90;
        sub_100063C8C(v77, v90);
        P256.Signing.PublicKey.init<A>(x963Representation:)(&v84, &type metadata for Data, &protocol witness table for Data);
        v84 = v71;
        v85 = v72;
        sub_100063C8C(v71, v72);
        v66 = sub_10007EF0C();
        P256.Signing.ECDSASignature.init<A>(derRepresentation:)(&v84, &type metadata for Data, v66);
        v84 = v64;
        v85 = v63;
        LOBYTE(v66) = P256.Signing.PublicKey.isValidSignature<A>(_:for:)(v10, &v84, &type metadata for Data, v66);
        sub_10006C25C(0, (unint64_t *)&qword_100344CD8, NSNumber_ptr);
        isa = (uint64_t)NSNumber.init(BOOLeanLiteral:)(v66 & 1).super.super.isa;
        sub_100063CD0(v64, v63);
        sub_10006B9B4(v54, v56);
        sub_10006B9B4(v69, v41);
        swift_bridgeObjectRelease(v73);
        swift_bridgeObjectRelease(v70);
        sub_100063CD0(v71, v72);
        (*(void (**)(char *, uint64_t))(v74 + 8))(v10, v75);
        (*(void (**)(char *, uint64_t))(v76 + 8))(v15, v68);
        return isa;
      }
      isa = sub_10006C25C(0, (unint64_t *)&qword_1003469E0, NSError_ptr);
      v58 = sub_1001E2838(0, 1, 0xD000000000000023, 0x80000001002C2C50, 0);
      swift_willThrow(v58);
      sub_10006B9B4(v57, v41);
    }
    swift_bridgeObjectRelease(v73);
    swift_bridgeObjectRelease(v70);
    sub_100063CD0(v71, v72);
    return isa;
  }
  sub_100063CD0(a3, a4);
  swift_release(isa);
  return isa;
}

uint64_t sub_1001E41F0(uint64_t a1, unint64_t a2, uint64_t a3, void *a4, uint64_t a5, unint64_t a6, void *a7)
{
  uint64_t v7;
  uint64_t v8;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t inited;
  uint64_t v16;
  uint64_t v17;
  const __CFString *v18;
  const __CFString *v19;
  const __CFString *v20;
  const __CFString *v21;
  const __CFString *v22;
  unint64_t v23;
  __CFString *v24;
  Swift::String v25;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t result;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  Class v55;
  unsigned int v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  NSObject *v60;
  uint64_t v61;
  os_log_type_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v68;
  unint64_t v70;
  void *v72;
  void *object;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  _OWORD v80[2];
  Swift::String v81;
  void *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char v87[200];

  v8 = v7;
  v81._countAndFlagsBits = a1;
  v81._object = (void *)a2;
  swift_bridgeObjectRetain(a2);
  v11._countAndFlagsBits = 58;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  swift_bridgeObjectRetain(v81._object);
  v68 = a3;
  v12._countAndFlagsBits = a3;
  v70 = (unint64_t)a4;
  v12._object = a4;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(v81._object);
  v13 = v81;
  v14 = sub_100063D3C(&qword_100347EF0);
  inited = swift_initStackObject(v14, v87);
  *(_OWORD *)(inited + 16) = xmmword_100288AB0;
  *(_QWORD *)(inited + 32) = kSecClass;
  type metadata accessor for CFString(0);
  *(_QWORD *)(inited + 40) = kSecClassGenericPassword;
  *(_QWORD *)(inited + 64) = v16;
  *(_QWORD *)(inited + 72) = kSecAttrAccount;
  *(Swift::String *)(inited + 80) = v13;
  *(_QWORD *)(inited + 104) = &type metadata for String;
  *(_QWORD *)(inited + 112) = kSecAttrAccessGroup;
  v17 = *(_QWORD *)(v8 + OBJC_IVAR____TtC10seserviced16SEFidoKeyManager_keychainGroup + 8);
  *(_QWORD *)(inited + 120) = *(_QWORD *)(v8 + OBJC_IVAR____TtC10seserviced16SEFidoKeyManager_keychainGroup);
  *(_QWORD *)(inited + 128) = v17;
  *(_QWORD *)(inited + 144) = &type metadata for String;
  *(_QWORD *)(inited + 152) = kSecAttrSynchronizable;
  *(_QWORD *)(inited + 184) = &type metadata for Bool;
  *(_BYTE *)(inited + 160) = 1;
  v18 = (id)kSecClass;
  v19 = (id)kSecClassGenericPassword;
  v20 = (id)kSecAttrAccount;
  v21 = (id)kSecAttrAccessGroup;
  swift_bridgeObjectRetain(v17);
  v22 = (id)kSecAttrSynchronizable;
  v23 = sub_10017C8EC(inited);
  if (a6 >> 60 != 15)
  {
    sub_10006BA34(a5, a6);
    v24 = (id)kSecAttrService;
    v25 = Data.base64EncodedString(options:)(0);
    v82 = &type metadata for String;
    v81 = v25;
    sub_10006C2B4(&v81, v80);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v23);
    sub_10018F82C(v80, v24, isUniquelyReferenced_nonNull_native);

    swift_bridgeObjectRelease(0x8000000000000000);
    sub_10006B9B4(a5, a6);
  }
  v28 = a2;
  v27 = (unint64_t)a4;
  swift_getObjectType(*(_QWORD *)(v8 + OBJC_IVAR____TtC10seserviced16SEFidoKeyManager_keychainWrapper));
  v29 = sub_10017DBD8(v23);
  swift_bridgeObjectRelease(v23);
  v30 = sub_1001A7A1C();
  result = swift_bridgeObjectRelease(v29);
  if (!v76)
  {
    swift_bridgeObjectRetain_n(a2, 2);
    swift_bridgeObjectRetain_n(v30, 2);
    v32 = swift_bridgeObjectRetain_n(a4, 2);
    v33 = Logger.logObject.getter(v32);
    v37 = static os_log_type_t.info.getter(v33, v34, v35, v36);
    if (os_log_type_enabled(v33, (os_log_type_t)v37))
    {
      v38 = swift_slowAlloc(32, -1);
      v39 = swift_slowAlloc(64, -1);
      v81._countAndFlagsBits = v39;
      *(_DWORD *)v38 = 134218498;
      v40 = v30[2];
      swift_bridgeObjectRelease(v30);
      *(_QWORD *)&v80[0] = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v80, (char *)v80 + 8, v38 + 4, v38 + 12);
      swift_bridgeObjectRelease(v30);
      *(_WORD *)(v38 + 12) = 2080;
      swift_bridgeObjectRetain(a2);
      *(_QWORD *)&v80[0] = sub_1001C56EC(a1, a2, &v81._countAndFlagsBits);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v80, (char *)v80 + 8, v38 + 14, v38 + 22);
      swift_bridgeObjectRelease_n(a2, 3);
      *(_WORD *)(v38 + 22) = 2080;
      swift_bridgeObjectRetain(v70);
      *(_QWORD *)&v80[0] = sub_1001C56EC(v68, v70, &v81._countAndFlagsBits);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v80, (char *)v80 + 8, v38 + 24, v38 + 32);
      swift_bridgeObjectRelease_n(v70, 3);
      _os_log_impl((void *)&_mh_execute_header, v33, (os_log_type_t)v37, "Found %ld candidate keys for %s : %s", (uint8_t *)v38, 0x20u);
      swift_arrayDestroy(v39, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v38, -1, -1);

    }
    else
    {
      swift_bridgeObjectRelease_n(v70, 2);
      swift_bridgeObjectRelease_n(a2, 2);

      swift_bridgeObjectRelease_n(v30, 2);
    }
    v41 = v30;
    v42 = v30[2];
    if (v42)
    {
      v43 = type metadata accessor for PropertyListDecoder(0);
      swift_bridgeObjectRetain(v41);
      v66 = v41;
      v44 = v41 + 5;
      while (1)
      {
        v46 = *(v44 - 1);
        v45 = *v44;
        swift_allocObject(v43, *(unsigned int *)(v43 + 48), *(unsigned __int16 *)(v43 + 52));
        v47 = sub_100063C8C(v46, v45);
        v51 = PropertyListDecoder.init()(v47, v48, v49, v50);
        v52 = sub_1001E71DC();
        dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(&type metadata for SEFidoKeyManager.FiDOKeyInKeychain, v46, v45, &type metadata for SEFidoKeyManager.FiDOKeyInKeychain, v52);
        swift_release(v51);
        v72 = v82;
        object = v81._object;
        v53 = v85;
        v75 = v83;
        v77 = v84;
        v54 = v86;
        if (qword_1003445D8 != -1)
        {
          v57 = v85;
          swift_once(&qword_1003445D8, sub_1000FB394);
          v53 = v57;
        }
        v78 = v53;
        v55 = sub_1000FFE30(v53, v54, a7);
        v56 = -[objc_class BOOLValue](v55, "BOOLValue");
        sub_100063CD0(v46, v45);

        if (v56)
          break;
        swift_bridgeObjectRelease(v72);
        swift_bridgeObjectRelease(object);
        sub_100063CD0(v75, v77);
        sub_100063CD0(v78, v54);
        v44 += 2;
        if (!--v42)
        {
          v58 = v66;
          swift_bridgeObjectRelease(v66);
          v28 = a2;
          v27 = v70;
          goto LABEL_16;
        }
      }
      swift_bridgeObjectRelease_n(v66, 2);
      sub_100063C8C(v78, v54);
      swift_bridgeObjectRelease(v72);
      swift_bridgeObjectRelease(object);
      sub_100063CD0(v75, v77);
      sub_100063CD0(v78, v54);
      return v78;
    }
    else
    {
      v58 = v41;
LABEL_16:
      swift_bridgeObjectRetain_n(v28, 2);
      swift_bridgeObjectRetain_n(v27, 2);
      swift_bridgeObjectRetain(v58);
      v60 = Logger.logObject.getter(v59);
      v62 = static os_log_type_t.error.getter(v60, v61);
      if (os_log_type_enabled(v60, v62))
      {
        v63 = swift_slowAlloc(32, -1);
        v64 = swift_slowAlloc(64, -1);
        v81._countAndFlagsBits = v64;
        *(_DWORD *)v63 = 134218498;
        v65 = v58[2];
        swift_bridgeObjectRelease(v58);
        *(_QWORD *)&v80[0] = v65;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v80, (char *)v80 + 8, v63 + 4, v63 + 12);
        swift_bridgeObjectRelease(v58);
        *(_WORD *)(v63 + 12) = 2080;
        swift_bridgeObjectRetain(v28);
        *(_QWORD *)&v80[0] = sub_1001C56EC(a1, v28, &v81._countAndFlagsBits);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v80, (char *)v80 + 8, v63 + 14, v63 + 22);
        swift_bridgeObjectRelease_n(v28, 3);
        *(_WORD *)(v63 + 22) = 2080;
        swift_bridgeObjectRetain(v27);
        *(_QWORD *)&v80[0] = sub_1001C56EC(v68, v27, &v81._countAndFlagsBits);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v80, (char *)v80 + 8, v63 + 24, v63 + 32);
        swift_bridgeObjectRelease_n(v27, 3);
        _os_log_impl((void *)&_mh_execute_header, v60, v62, "No matches found out of %ld candidate keys for %s : %s", (uint8_t *)v63, 0x20u);
        swift_arrayDestroy(v64, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v64, -1, -1);
        swift_slowDealloc(v63, -1, -1);

      }
      else
      {
        swift_bridgeObjectRelease_n(v27, 2);
        swift_bridgeObjectRelease_n(v28, 2);

        swift_bridgeObjectRelease_n(v58, 2);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_1001E4C38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t inited;
  uint64_t v4;
  uint64_t v5;
  const __CFString *v6;
  const __CFString *v7;
  const __CFString *v8;
  const __CFString *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t v14;
  _BYTE v16[152];

  v2 = sub_100063D3C(&qword_100347EF0);
  inited = swift_initStackObject(v2, v16);
  *(_OWORD *)(inited + 16) = xmmword_100288AC0;
  *(_QWORD *)(inited + 32) = kSecClass;
  type metadata accessor for CFString(0);
  *(_QWORD *)(inited + 40) = kSecClassGenericPassword;
  *(_QWORD *)(inited + 64) = v4;
  *(_QWORD *)(inited + 72) = kSecAttrAccessGroup;
  v5 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced16SEFidoKeyManager_keychainGroup + 8);
  *(_QWORD *)(inited + 80) = *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced16SEFidoKeyManager_keychainGroup);
  *(_QWORD *)(inited + 88) = v5;
  *(_QWORD *)(inited + 104) = &type metadata for String;
  *(_QWORD *)(inited + 112) = kSecAttrSynchronizable;
  *(_QWORD *)(inited + 144) = &type metadata for Bool;
  *(_BYTE *)(inited + 120) = 1;
  v6 = (id)kSecClass;
  v7 = (id)kSecClassGenericPassword;
  v8 = (id)kSecAttrAccessGroup;
  swift_bridgeObjectRetain(v5);
  v9 = (id)kSecAttrSynchronizable;
  v10 = sub_10017C8EC(inited);
  swift_getObjectType(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced16SEFidoKeyManager_keychainWrapper));
  v11 = sub_10017DBD8(v10);
  swift_bridgeObjectRelease(v10);
  v12 = sub_1001A7A1C();
  swift_bridgeObjectRelease(v11);
  if (!v1)
  {
    v14 = v12[2];
    swift_bridgeObjectRelease(v12);
    return v14 != 0;
  }
  return v13;
}

uint64_t sub_1001E4F94(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8)
{
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const __CFString *v23;
  const __CFString *v24;
  const __CFString *v25;
  const __CFString *v26;
  const __CFString *v27;
  const __CFString *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const __CFString *v32;
  uint64_t v33;
  const __CFString *v34;
  const __CFString *v35;
  __n128 v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  Class isa;
  uint64_t result;
  void *v45;
  uint64_t v46;
  const __CFString *v47;
  id v48;
  void *v49;
  void *v50;
  uint64_t v51;
  Class v52;
  unsigned int v53;
  uint64_t v54;
  NSObject *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  os_log_type_t v59;
  uint8_t *v60;
  Swift::String v61;
  void *object;
  id v63;
  uint64_t v64;
  uint64_t v67;
  void *v68;
  uint64_t v70;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unsigned int v83;

  v75 = a1;
  v76 = a2;
  swift_bridgeObjectRetain(a2);
  v15._countAndFlagsBits = 58;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  swift_bridgeObjectRetain(a2);
  v68 = a4;
  swift_bridgeObjectRetain(a4);
  sub_100063C8C(a5, a6);
  sub_100063C8C(a7, a8);
  swift_bridgeObjectRetain(v76);
  v16._countAndFlagsBits = a3;
  v16._object = a4;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(v76);
  v17 = v75;
  v18 = v76;
  v19 = sub_100063D3C(&qword_100349A10);
  v20 = swift_allocObject(v19, 544, 7);
  *(_OWORD *)(v20 + 16) = xmmword_10028B430;
  type metadata accessor for CFString(0);
  v22 = v21;
  *(_QWORD *)(v20 + 32) = kSecClass;
  *(_QWORD *)(v20 + 88) = v21;
  *(_QWORD *)(v20 + 96) = kSecAttrAccessible;
  *(_QWORD *)(v20 + 56) = v21;
  *(_QWORD *)(v20 + 64) = kSecClassGenericPassword;
  *(_QWORD *)(v20 + 152) = v21;
  *(_QWORD *)(v20 + 160) = kSecAttrAccount;
  *(_QWORD *)(v20 + 120) = v21;
  *(_QWORD *)(v20 + 128) = kSecAttrAccessibleAfterFirstUnlock;
  *(_QWORD *)(v20 + 216) = &type metadata for String;
  *(_QWORD *)(v20 + 184) = v21;
  *(_QWORD *)(v20 + 192) = v17;
  *(_QWORD *)(v20 + 200) = v18;
  *(_QWORD *)(v20 + 224) = kSecAttrService;
  *(_QWORD *)(v20 + 248) = v21;
  v23 = (id)kSecClass;
  v24 = (id)kSecClassGenericPassword;
  v25 = (id)kSecAttrAccessible;
  v26 = (id)kSecAttrAccessibleAfterFirstUnlock;
  v27 = (id)kSecAttrAccount;
  v28 = (id)kSecAttrService;
  *(Swift::String *)(v20 + 256) = Data.base64EncodedString(options:)(0);
  *(_QWORD *)(v20 + 280) = &type metadata for String;
  *(_QWORD *)(v20 + 288) = kSecAttrAccessGroup;
  v29 = *(_QWORD *)(v70 + OBJC_IVAR____TtC10seserviced16SEFidoKeyManager_keychainGroup);
  v30 = *(_QWORD *)(v70 + OBJC_IVAR____TtC10seserviced16SEFidoKeyManager_keychainGroup + 8);
  *(_QWORD *)(v20 + 312) = v22;
  *(_QWORD *)(v20 + 320) = v29;
  *(_QWORD *)(v20 + 328) = v30;
  *(_QWORD *)(v20 + 376) = v22;
  *(_QWORD *)(v20 + 344) = &type metadata for String;
  *(_QWORD *)(v20 + 352) = kSecAttrSynchronizable;
  *(_BYTE *)(v20 + 384) = 1;
  *(_QWORD *)(v20 + 440) = v22;
  *(_QWORD *)(v20 + 408) = &type metadata for Bool;
  *(_QWORD *)(v20 + 416) = kSecValueData;
  v31 = type metadata accessor for PropertyListEncoder(0);
  swift_allocObject(v31, *(unsigned int *)(v31 + 48), *(unsigned __int16 *)(v31 + 52));
  v32 = (id)kSecAttrAccessGroup;
  v33 = a5;
  swift_bridgeObjectRetain(v30);
  v34 = (id)kSecAttrSynchronizable;
  v35 = (id)kSecValueData;
  v37 = PropertyListEncoder.init()(v36);
  v75 = a1;
  v76 = a2;
  v77 = a3;
  v78 = v68;
  v79 = a5;
  v80 = a6;
  v81 = a7;
  v82 = a8;
  v38 = sub_1001E7198();
  v39 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(&v75, &type metadata for SEFidoKeyManager.FiDOKeyInKeychain, v38);
  if (v67)
  {
    swift_release(v37);
    sub_10006BA9C((_QWORD *)(v20 + 416));
    sub_100096700(v20 + 352, &qword_10034A3C8);
    sub_100096700(v20 + 288, &qword_10034A3C8);
    sub_100096700(v20 + 224, &qword_10034A3C8);
    sub_100096700(v20 + 160, &qword_10034A3C8);
    sub_100096700(v20 + 96, &qword_10034A3C8);
    sub_100096700(v20 + 32, &qword_10034A3C8);
    *(_QWORD *)(v20 + 16) = 0;
    swift_bridgeObjectRelease(v68);
    swift_bridgeObjectRelease(a2);
    swift_release(v20);
    goto LABEL_10;
  }
  v41 = v39;
  v42 = v40;
  swift_release(v37);
  isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100063CD0(v41, v42);
  result = sub_10006C25C(0, (unint64_t *)&qword_100347EE8, NSData_ptr);
  *(_QWORD *)(v20 + 472) = result;
  *(_QWORD *)(v20 + 448) = isa;
  if (!kSecAttrSyncViewHint)
  {
    __break(1u);
    goto LABEL_14;
  }
  *(_QWORD *)(v20 + 504) = v22;
  *(_QWORD *)(v20 + 480) = kSecAttrSyncViewHint;
  v45 = (void *)kSecAttrViewHintApplePay;
  v46 = a2;
  if (!kSecAttrViewHintApplePay)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  *(_QWORD *)(v20 + 536) = v22;
  *(_QWORD *)(v20 + 512) = v45;
  sub_10006C25C(0, &qword_100346D78, NSDictionary_ptr);
  v47 = (id)kSecAttrSyncViewHint;
  v48 = v45;
  v49 = (void *)NSDictionary.init(dictionaryLiteral:)(v20);
  v50 = *(void **)(v70 + OBJC_IVAR____TtC10seserviced16SEFidoKeyManager_keychainWrapper);
  v75 = 0;
  result = static Dictionary._forceBridgeFromObjectiveC(_:result:)(v49, &v75, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  v51 = v75;
  if (v75)
  {
    v52 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v51);
    v53 = objc_msgSend(v50, "addItem:", v52);

    v55 = Logger.logObject.getter(v54);
    v59 = static os_log_type_t.info.getter(v55, v56, v57, v58);
    if (os_log_type_enabled(v55, v59))
    {
      v60 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v60 = 67109120;
      v46 = a2;
      LODWORD(v75) = v53;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, (char *)&v75 + 4, v60 + 4, v60 + 8);
      _os_log_impl((void *)&_mh_execute_header, v55, v59, "Added keychain item %d", v60, 8u);
      swift_slowDealloc(v60, -1, -1);
    }

    if (!v53)
    {
      swift_bridgeObjectRelease(v68);
      swift_bridgeObjectRelease(v46);

      v64 = a5;
      goto LABEL_11;
    }
    sub_10006C25C(0, (unint64_t *)&qword_1003469E0, NSError_ptr);
    v75 = 0;
    v76 = 0xE000000000000000;
    _StringGuts.grow(_:)(28);
    swift_bridgeObjectRelease(v76);
    v75 = 0xD00000000000001ALL;
    v76 = 0x80000001002BF870;
    v83 = v53;
    v61._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
    object = v61._object;
    String.append(_:)(v61);
    swift_bridgeObjectRelease(object);
    v63 = sub_1001E2838(0, 1, v75, v76, 0);
    swift_willThrow(v63);
    swift_bridgeObjectRelease(v68);
    swift_bridgeObjectRelease(v46);

    v33 = a5;
LABEL_10:
    v64 = v33;
LABEL_11:
    sub_100063CD0(v64, a6);
    return sub_100063CD0(a7, a8);
  }
LABEL_15:
  __break(1u);
  return result;
}

void sub_1001E573C(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t inited;
  uint64_t v17;
  const __CFString *v18;
  const __CFString *v19;
  const __CFString *v20;
  const __CFString *v21;
  uint64_t v22;
  const __CFString *v23;
  const __CFString *v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  Class isa;
  unsigned int v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;
  Swift::String v48;
  Swift::String v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  Swift::String v57;
  Swift::String v58;
  Swift::String v59;
  void *object;
  id v61;
  os_log_type_t type;
  uint64_t v63;
  unsigned int v64;
  uint64_t v69;
  _BYTE v70[232];
  uint64_t v71;
  uint64_t v72;

  v7 = v6;
  v71 = a1;
  v72 = (uint64_t)a2;
  swift_bridgeObjectRetain(a2);
  v11._countAndFlagsBits = 58;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  swift_bridgeObjectRetain(v72);
  v12._countAndFlagsBits = a3;
  v12._object = a4;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(v72);
  v13 = v71;
  v14 = v72;
  v15 = sub_100063D3C(&qword_100347EF0);
  inited = swift_initStackObject(v15, v70);
  *(_OWORD *)(inited + 16) = xmmword_1002892A0;
  *(_QWORD *)(inited + 32) = kSecClass;
  type metadata accessor for CFString(0);
  *(_QWORD *)(inited + 40) = kSecClassGenericPassword;
  *(_QWORD *)(inited + 64) = v17;
  *(_QWORD *)(inited + 72) = kSecAttrAccount;
  *(_QWORD *)(inited + 80) = v13;
  *(_QWORD *)(inited + 88) = v14;
  *(_QWORD *)(inited + 104) = &type metadata for String;
  *(_QWORD *)(inited + 112) = kSecAttrService;
  v18 = (id)kSecClass;
  v19 = (id)kSecClassGenericPassword;
  v20 = (id)kSecAttrAccount;
  v21 = (id)kSecAttrService;
  *(Swift::String *)(inited + 120) = Data.base64EncodedString(options:)(0);
  *(_QWORD *)(inited + 144) = &type metadata for String;
  *(_QWORD *)(inited + 152) = kSecAttrAccessGroup;
  v22 = *(_QWORD *)(v7 + OBJC_IVAR____TtC10seserviced16SEFidoKeyManager_keychainGroup + 8);
  *(_QWORD *)(inited + 160) = *(_QWORD *)(v7 + OBJC_IVAR____TtC10seserviced16SEFidoKeyManager_keychainGroup);
  *(_QWORD *)(inited + 168) = v22;
  *(_QWORD *)(inited + 184) = &type metadata for String;
  *(_QWORD *)(inited + 192) = kSecAttrSynchronizable;
  *(_QWORD *)(inited + 224) = &type metadata for Bool;
  *(_BYTE *)(inited + 200) = 1;
  v23 = (id)kSecAttrAccessGroup;
  swift_bridgeObjectRetain(v22);
  v24 = (id)kSecAttrSynchronizable;
  v25 = sub_10017C8EC(inited);
  v26 = *(void **)(v7 + OBJC_IVAR____TtC10seserviced16SEFidoKeyManager_keychainWrapper);
  v27 = sub_10017DBD8(v25);
  swift_bridgeObjectRelease(v25);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v27);
  v29 = objc_msgSend(v26, "deleteItem:", isa);

  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a4);
  sub_100063C8C(a5, a6);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a4);
  v30 = sub_100063C8C(a5, a6);
  v31 = Logger.logObject.getter(v30);
  v35 = static os_log_type_t.info.getter(v31, v32, v33, v34);
  if (!os_log_type_enabled(v31, v35))
  {
    swift_bridgeObjectRelease_n(a4, 2);
    swift_bridgeObjectRelease_n(a2, 2);

    sub_100063CD0(a5, a6);
    sub_100063CD0(a5, a6);
    if (!v29)
      return;
    goto LABEL_5;
  }
  v36 = swift_slowAlloc(38, -1);
  v63 = swift_slowAlloc(96, -1);
  v71 = v63;
  *(_DWORD *)v36 = 136315906;
  swift_bridgeObjectRetain(a2);
  v69 = sub_1001C56EC(a1, (unint64_t)a2, &v71);
  v64 = v29;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, v70, v36 + 4, v36 + 12);
  swift_bridgeObjectRelease_n(a2, 3);
  type = v35;
  *(_WORD *)(v36 + 12) = 2080;
  swift_bridgeObjectRetain(a4);
  v69 = sub_1001C56EC(a3, (unint64_t)a4, &v71);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, v70, v36 + 14, v36 + 22);
  swift_bridgeObjectRelease_n(a4, 3);
  *(_WORD *)(v36 + 22) = 2080;
  sub_1001BD2CC(a5, a6);
  v38 = v37;
  v69 = v37;
  v39 = sub_100063D3C((uint64_t *)&unk_100346060);
  v40 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
  v41 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v39, v40);
  v43 = v42;
  v44 = v38;
  v29 = v64;
  swift_bridgeObjectRelease(v44);
  v69 = sub_1001C56EC(v41, v43, &v71);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, v70, v36 + 24, v36 + 32);
  swift_bridgeObjectRelease(v43);
  sub_100063CD0(a5, a6);
  sub_100063CD0(a5, a6);
  *(_WORD *)(v36 + 32) = 1024;
  LODWORD(v69) = v64;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, (char *)&v69 + 4, v36 + 34, v36 + 38);
  _os_log_impl((void *)&_mh_execute_header, v31, type, "Key for RP %s RPAH %s KH %s deleted with status %d", (uint8_t *)v36, 0x26u);
  swift_arrayDestroy(v63, 3, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v63, -1, -1);
  swift_slowDealloc(v36, -1, -1);

  if (v64)
  {
LABEL_5:
    sub_10006C25C(0, (unint64_t *)&qword_1003469E0, NSError_ptr);
    v71 = 0;
    v72 = 0xE000000000000000;
    _StringGuts.grow(_:)(54);
    v45._object = (void *)0x80000001002C2C10;
    v45._countAndFlagsBits = 0xD00000000000001CLL;
    String.append(_:)(v45);
    v46._countAndFlagsBits = a1;
    v46._object = a2;
    String.append(_:)(v46);
    v47._countAndFlagsBits = 0x204841505220;
    v47._object = (void *)0xE600000000000000;
    String.append(_:)(v47);
    v48._countAndFlagsBits = a3;
    v48._object = a4;
    String.append(_:)(v48);
    v49._countAndFlagsBits = 541608736;
    v49._object = (void *)0xE400000000000000;
    String.append(_:)(v49);
    sub_1001BD2CC(a5, a6);
    v51 = v50;
    v69 = v50;
    v52 = sub_100063D3C((uint64_t *)&unk_100346060);
    v53 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
    v54 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v52, v53);
    v56 = v55;
    swift_bridgeObjectRelease(v51);
    v57._countAndFlagsBits = v54;
    v57._object = v56;
    String.append(_:)(v57);
    swift_bridgeObjectRelease(v56);
    v58._countAndFlagsBits = 0x2073757461747320;
    v58._object = (void *)0xE800000000000000;
    String.append(_:)(v58);
    LODWORD(v69) = v29;
    v59._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
    object = v59._object;
    String.append(_:)(v59);
    swift_bridgeObjectRelease(object);
    v61 = sub_1001E2838(0, 1, v71, v72, 0);
    swift_willThrow(v61);
  }
}

uint64_t sub_1001E5EC4(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  char v20;
  __int128 v21;

  v3 = v1;
  v5 = sub_100063D3C(&qword_10034A410);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10006BA78(a1, v10);
  v12 = sub_1001E92A4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SEFidoKeyManager.FiDOKeyInKeychain.CodingKeys, &type metadata for SEFidoKeyManager.FiDOKeyInKeychain.CodingKeys, v12, v10, v11);
  v13 = *v3;
  v14 = v3[1];
  LOBYTE(v21) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v13, v14, &v21, v5);
  if (!v2)
  {
    v15 = v3[2];
    v16 = v3[3];
    LOBYTE(v21) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v15, v16, &v21, v5);
    v21 = *((_OWORD *)v3 + 2);
    v20 = 2;
    v17 = sub_10014DEDC();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v21, &v20, v5, &type metadata for Data, v17);
    v21 = *((_OWORD *)v3 + 3);
    v20 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v21, &v20, v5, &type metadata for Data, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1001E6058()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001E6090 + 4 * byte_10028CE50[*v0]))(0x50676E69796C6572, 0xEC00000079747261);
}

unint64_t sub_1001E6090()
{
  return 0xD000000000000017;
}

uint64_t sub_1001E60AC()
{
  return 0x4879654B6F646966;
}

uint64_t sub_1001E60CC()
{
  return 0x74614479654B7470;
}

uint64_t sub_1001E60E8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001E92E8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001E610C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001E92A4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001E6134(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001E92A4();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1001E615C@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[2];
  __int128 v8;
  __int128 v9;

  sub_1001E94D4(a1, (uint64_t *)v7);
  if (!v2)
  {
    v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    result = *(double *)&v8;
    v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }
  return result;
}

uint64_t sub_1001E619C(_QWORD *a1)
{
  return sub_1001E5EC4(a1);
}

id sub_1001E62B4()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SEFidoKeyManager(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1001E634C()
{
  return type metadata accessor for SEFidoKeyManager(0);
}

uint64_t type metadata accessor for SEFidoKeyManager(uint64_t a1)
{
  uint64_t result;

  result = qword_10034A3B0;
  if (!qword_10034A3B0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SEFidoKeyManager);
  return result;
}

uint64_t sub_1001E6390(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_10028CE98;
  v4[1] = &unk_10028CEB0;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1001E6410(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  char v22;
  char v23;

  v3 = v1;
  v5 = sub_100063D3C(&qword_10034A438);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10006BA78(a1, v10);
  v12 = sub_1001EA040();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for WebauthN.ClientData.CodingKeys, &type metadata for WebauthN.ClientData.CodingKeys, v12, v10, v11);
  v13 = *v3;
  v14 = v3[1];
  v23 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v13, v14, &v23, v5);
  if (!v2)
  {
    v15 = v3[2];
    v16 = v3[3];
    v22 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v15, v16, &v22, v5);
    v17 = v3[4];
    v18 = v3[5];
    v21 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v17, v18, &v21, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1001E654C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;

  v18 = a4;
  v19 = a5;
  v9 = sub_100063D3C(&qword_10034A460);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1[3];
  v14 = a1[4];
  sub_10006BA78(a1, v15);
  v16 = sub_1001EA10C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for WebauthN.AuthenticatorAttestationResponse.CodingKeys, &type metadata for WebauthN.AuthenticatorAttestationResponse.CodingKeys, v16, v15, v14);
  v21 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, a3, &v21, v9);
  if (!v5)
  {
    v20 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v18, v19, &v20, v9);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

uint64_t sub_1001E6674(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  char v20;
  __int128 v21;

  v3 = v1;
  v5 = sub_100063D3C(&qword_10034A470);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10006BA78(a1, v10);
  v12 = sub_1001E9FFC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for WebauthN.AuthenticatorAssertionResponse.CodingKeys, &type metadata for WebauthN.AuthenticatorAssertionResponse.CodingKeys, v12, v10, v11);
  v13 = *v3;
  v14 = v3[1];
  LOBYTE(v21) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v13, v14, &v21, v5);
  if (!v2)
  {
    v15 = v3[2];
    v16 = v3[3];
    LOBYTE(v21) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v15, v16, &v21, v5);
    v21 = *((_OWORD *)v3 + 2);
    v20 = 2;
    v17 = sub_10014DEDC();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v21, &v20, v5, &type metadata for Data, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1001E67C8()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x676E656C6C616863;
  if (*v0 != 1)
    v1 = 0x6E696769726FLL;
  if (*v0)
    return v1;
  else
    return 1701869940;
}

uint64_t sub_1001E681C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001E9808(a1, a2);
  *a3 = result;
  return result;
}

void sub_1001E6840(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1001E684C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001EA040();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001E6874(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001EA040();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001E689C(_QWORD *a1)
{
  return sub_1001E6410(a1);
}

uint64_t sub_1001E68B0(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[3];
  _OWORD v8[3];

  v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  v3 = *a2;
  v4 = a2[1];
  v7[2] = a1[2];
  v8[0] = v3;
  v5 = a2[2];
  v8[1] = v4;
  v8[2] = v5;
  return sub_1001E72A8((uint64_t *)v7, v8) & 1;
}

uint64_t sub_1001E68F4()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000011;
  else
    return 0x6144746E65696C63;
}

uint64_t sub_1001E6940@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001E9950(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001E6964(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001EA10C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001E698C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001EA10C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001E69B4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_1001E9A60(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_1001E69E0(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1001E654C(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_1001E69FC(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  char v12;
  uint64_t result;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = a2[1];
  v9 = a2[2];
  v10 = a2[3];
  v11 = v4 == *a2 && v5 == v8;
  if (v11 || (v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v8, 0), result = 0, (v12 & 1) != 0))
  {
    if (v6 == v9 && v7 == v10)
      return 1;
    else
      return _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v9, v10, 0);
  }
  return result;
}

uint64_t sub_1001E6A8C()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000011;
  if (*v0 != 1)
    v1 = 0x727574616E676973;
  if (*v0)
    return v1;
  else
    return 0x6144746E65696C63;
}

uint64_t sub_1001E6AFC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001E9C0C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001E6B20(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001E9FFC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001E6B48(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001E9FFC();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1001E6B70@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;

  sub_1001E9D88(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_1001E6BB0(_QWORD *a1)
{
  return sub_1001E6674(a1);
}

uint64_t sub_1001E6BC4(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  char v6;
  _OWORD v8[3];
  _OWORD v9[3];

  v2 = a1[1];
  v8[0] = *a1;
  v8[1] = v2;
  v3 = *a2;
  v4 = a2[1];
  v8[2] = a1[2];
  v9[0] = v3;
  v5 = a2[2];
  v9[1] = v4;
  v9[2] = v5;
  sub_1001E7348((uint64_t *)v8, v9);
  return v6 & 1;
}

uint64_t sub_1001E6C08(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;

  v7 = sub_100063D3C(&qword_10034A508);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10006BA78(a1, v12);
  v14 = sub_1001EAF0C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for WebauthN.AttestationStatement.AppleAttestationFormat.CodingKeys, &type metadata for WebauthN.AttestationStatement.AppleAttestationFormat.CodingKeys, v14, v12, v13);
  v21 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, &v21, v7);
  if (!v3)
  {
    v19 = a3;
    v20 = 1;
    v15 = sub_100063D3C((uint64_t *)&unk_1003465F0);
    v16 = sub_1001EAF50(&qword_10034A518, (void (*)(void))sub_10014DEDC, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v20, v7, v15, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_1001E6D60()
{
  _BYTE *v0;

  if (*v0)
    return 6501752;
  else
    return 6777953;
}

uint64_t sub_1001E6D84@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001EA150(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001E6DA8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001EAF0C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001E6DD0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001EAF0C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001E6DF8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_1001EA220(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1001E6E20(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1001E6C08(a1, *v1, v1[1]);
}

uint64_t sub_1001E6E38(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2)
    return sub_100203884(a1[1], a2[1]);
  else
    return 0;
}

uint64_t sub_1001E6E5C(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  char v19;
  __int128 v20;

  v3 = v1;
  v5 = sub_100063D3C(&qword_10034A448);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10006BA78(a1, v10);
  v12 = sub_1001EA084();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for WebauthN.AttestationStatement.CodingKeys, &type metadata for WebauthN.AttestationStatement.CodingKeys, v12, v10, v11);
  v13 = *v3;
  v14 = v3[1];
  LOBYTE(v20) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v13, v14, &v20, v5);
  if (!v2)
  {
    v20 = *((_OWORD *)v3 + 1);
    v19 = 1;
    v15 = sub_1001EA0C8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v19, v5, &type metadata for WebauthN.AttestationStatement.AppleAttestationFormat, v15);
    v20 = *((_OWORD *)v3 + 2);
    v19 = 2;
    v16 = sub_10014DEDC();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v19, v5, &type metadata for Data, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1001E6FC8()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x746D7453747461;
  if (*v0 != 1)
    v1 = 0x6174614468747561;
  if (*v0)
    return v1;
  else
    return 7630182;
}

uint64_t sub_1001E701C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001EA3AC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001E7040(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001EA084();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001E7068(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001EA084();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1001E7090@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;

  sub_1001EA4F0(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_1001E70D0(_QWORD *a1)
{
  return sub_1001E6E5C(a1);
}

void sub_1001E70E4(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v8 = a1[3];
  v7 = a1[4];
  v9 = a1[5];
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  if ((v4 == *a2 && v5 == v10 || (_stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v10, 0) & 1) != 0)
    && v6 == v12
    && (sub_100203884(v8, v11) & 1) != 0)
  {
    sub_10007C23C(v7, v9);
  }
}

unint64_t sub_1001E7198()
{
  unint64_t result;

  result = qword_10034A3C0;
  if (!qword_10034A3C0)
  {
    result = swift_getWitnessTable(&unk_10028D13C, &type metadata for SEFidoKeyManager.FiDOKeyInKeychain);
    atomic_store(result, (unint64_t *)&qword_10034A3C0);
  }
  return result;
}

unint64_t sub_1001E71DC()
{
  unint64_t result;

  result = qword_10034A3D0;
  if (!qword_10034A3D0)
  {
    result = swift_getWitnessTable(&unk_10028D114, &type metadata for SEFidoKeyManager.FiDOKeyInKeychain);
    atomic_store(result, (unint64_t *)&qword_10034A3D0);
  }
  return result;
}

unint64_t sub_1001E7220()
{
  unint64_t result;

  result = qword_10034A3D8;
  if (!qword_10034A3D8)
  {
    result = swift_getWitnessTable(&unk_10028D0EC, &type metadata for WebauthN.AuthenticatorAssertionResponse);
    atomic_store(result, (unint64_t *)&qword_10034A3D8);
  }
  return result;
}

unint64_t sub_1001E7264()
{
  unint64_t result;

  result = qword_10034A3E0;
  if (!qword_10034A3E0)
  {
    result = swift_getWitnessTable(&unk_10028D0C4, &type metadata for WebauthN.ClientData);
    atomic_store(result, (unint64_t *)&qword_10034A3E0);
  }
  return result;
}

uint64_t sub_1001E72A8(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  v7 = v4 == *a2 && v5 == v6;
  if (v7 || (v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0), result = 0, (v8 & 1) != 0))
  {
    v10 = a1[2];
    v11 = a1[3];
    v12 = a2[2];
    v13 = a2[3];
    v14 = v10 == v12 && v11 == v13;
    if (v14
      || (v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, v12, v13, 0), result = 0, (v15 & 1) != 0))
    {
      v16 = a1[4];
      v17 = a1[5];
      v18 = a2[4];
      v19 = a2[5];
      if (v16 == v18 && v17 == v19)
        return 1;
      else
        return _stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, v18, v19, 0);
    }
  }
  return result;
}

void sub_1001E7348(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  v7 = v4 == *a2 && v5 == v6;
  if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0) & 1) != 0)
  {
    v8 = a1[2];
    v9 = a1[3];
    v10 = a2[2];
    v11 = a2[3];
    v12 = v8 == v10 && v9 == v11;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, v10, v11, 0) & 1) != 0)
      sub_10007C23C(a1[4], a1[5]);
  }
}

void sub_1001E73C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = sub_100063D3C(&qword_10034A3F8);
  __chkstk_darwin(v3, v4);
  v5 = type metadata accessor for COSEKey(0);
  __chkstk_darwin(v5, v6);
  __asm { BR              X9 }
}

uint64_t sub_1001E748C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v33;
  unint64_t v34;

  if (BYTE6(v6) != 65)
  {
    *(_QWORD *)(v8 - 144) = 0;
    *(_QWORD *)(v8 - 136) = 0xE000000000000000;
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease(*(_QWORD *)(v8 - 136));
    *(_QWORD *)(v8 - 144) = 0xD00000000000001BLL;
    *(_QWORD *)(v8 - 136) = 0x80000001002C2CD0;
    __asm { BR              X10 }
  }
  *(_QWORD *)(v8 - 176) = v1;
  v9 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  v10 = __DataStorage.init(capacity:)(111);
  *(_QWORD *)(v8 - 104) = 0;
  *(_QWORD *)(v8 - 96) = v10 | 0x4000000000000000;
  v11 = sub_10007C66C((uint64_t)&off_100306460);
  *(_QWORD *)(v8 - 168) = v12;
  *(_QWORD *)(v8 - 160) = v11;
  Data.append(_:)(v11, v12);
  *(_WORD *)(v8 - 146) = 4096;
  *(_QWORD *)(v8 - 120) = &type metadata for UnsafeRawBufferPointer;
  *(_QWORD *)(v8 - 112) = &protocol witness table for UnsafeRawBufferPointer;
  *(_QWORD *)(v8 - 144) = v8 - 146;
  *(_QWORD *)(v8 - 136) = v8 - 144;
  v13 = sub_10006BA78((_QWORD *)(v8 - 144), (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)(*v13, v13[1]);
  sub_10006BA9C((_QWORD *)(v8 - 144));
  sub_1001EDD38(v5, v6);
  sub_1001BD150(16, v14, v15);
  v16 = *(_QWORD *)(v8 - 144);
  v17 = *(_QWORD *)(v8 - 136);
  Data.append(_:)(v16, v17);
  sub_100063CD0(v16, v17);
  v18 = Data._Representation.subscript.getter(1, 33, v5, v6);
  v20 = v19;
  v21 = Data._Representation.subscript.getter(33, 65, v5, v6);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, unint64_t, uint64_t, _QWORD, _QWORD, unint64_t))COSEKey.init(ec2CurveIdentifier:x:y:d:algorithm:keyOperations:keyIdentifier:))(1, v18, v20, v21, v22, 0, 0xF000000000000000, -7, 0, 0, 0xF000000000000000);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v7, 1, v0) == 1)
  {
    sub_100096700(v7, &qword_10034A3F8);
    sub_10006C25C(0, (unint64_t *)&qword_1003469E0, NSError_ptr);
    v23 = sub_1001E2838(0, 1, 0xD000000000000028, 0x80000001002C2CF0, 0);
    swift_willThrow(v23);
    sub_100063CD0(*(_QWORD *)(v8 - 160), *(_QWORD *)(v8 - 168));
    return sub_100063CD0(*(_QWORD *)(v8 - 104), *(_QWORD *)(v8 - 96));
  }
  v24 = *(_QWORD *)(v8 - 160);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v2, v7, v0);
  v25 = type metadata accessor for CBOREncoder(0);
  swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
  v27 = CBOREncoder.init()(v26);
  v28 = sub_1001E803C();
  v29 = *(_QWORD *)(v8 - 176);
  v30 = dispatch thunk of CBOREncoder.encode<A>(_:)(v2, v0, v28);
  if (v29)
  {
    swift_release(v27);
    sub_100063CD0(v24, *(_QWORD *)(v8 - 168));
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v0);
    return sub_100063CD0(*(_QWORD *)(v8 - 104), *(_QWORD *)(v8 - 96));
  }
  v33 = v30;
  v34 = v31;
  swift_release(v27);
  Data.append(_:)(v33, v34);
  sub_100063CD0(v33, v34);
  sub_100063CD0(v24, *(_QWORD *)(v8 - 168));
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v0);
  return *(_QWORD *)(v8 - 104);
}

void sub_1001E78B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;

  v11 = type metadata accessor for String.Encoding(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a5 & 1) != 0)
  {
    sub_1001E73C4(a3, a4);
    if (!v5)
      __asm { BR              X11 }
  }
  else
  {
    v27 = sub_10007C71C(37);
    v28 = v17;
    static String.Encoding.utf8.getter(v27);
    v18 = String.data(using:allowLossyConversion:)(v15, 0, a1, a2);
    v20 = v19;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    if (v20 >> 60 != 15)
    {
      sub_1001EDD38(v18, v20);
      v23 = v22;
      v25 = v24;
      Data.append(_:)(v22, v24);
      sub_100063CD0(v23, v25);
      __asm { BR              X12 }
    }
    sub_10006C25C(0, (unint64_t *)&qword_1003469E0, NSError_ptr);
    v21 = sub_1001E2838(0, 1, 0xD000000000000027, 0x80000001002C2CA0, 0);
    swift_willThrow(v21);
    sub_100063CD0(0, 0xC000000000000000);
    sub_100063CD0(v27, v28);
  }
}

uint64_t sub_1001E7C14(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  Class isa;
  NSString v7;
  Class v8;
  id v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  id v14;
  Class v15;
  const char *v16;
  id v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  Class v22;
  Class v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Class v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  id v42;
  id v43;
  uint64_t v44;
  id v46;
  uint64_t v47;
  unint64_t v48;
  id v49;

  isa = Data._bridgeToObjectiveC()().super.isa;
  v7 = String._bridgeToObjectiveC()();
  v8 = Data._bridgeToObjectiveC()().super.isa;
  v49 = 0;
  v9 = sub_10003181C(a1, isa, a4, v7, 0, v8, &v49);

  v10 = v49;
  if (!v9)
  {
    v31 = sub_10006C25C(0, (unint64_t *)&qword_1003469E0, NSError_ptr);
    v41 = v10;
    v42 = sub_1001E2838(0, 1, 0xD000000000000015, 0x80000001002C2C80, (uint64_t)v10);
    swift_willThrow(v42);
LABEL_6:

    return v31;
  }
  v46 = v49;
  v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v13 = v12;

  v14 = objc_msgSend((id)objc_opt_self(SEABAAManager), "sharedManager");
  v47 = v11;
  v48 = v13;
  v15 = Data._bridgeToObjectiveC()().super.isa;
  v17 = sub_10005066C(a1, v16);
  v18 = objc_msgSend(v17, "casdCertificate");

  v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v21 = v20;

  v22 = Data._bridgeToObjectiveC()().super.isa;
  sub_100063CD0(v19, v21);
  v23 = Data._bridgeToObjectiveC()().super.isa;
  v24 = sub_100063D3C((uint64_t *)&unk_100348920);
  v25 = swift_allocObject(v24, 48, 7);
  *(_OWORD *)(v25 + 16) = xmmword_1002888E0;
  *(_QWORD *)(v25 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("1.2.840.113635.100.8.2"));
  *(_QWORD *)(v25 + 40) = v26;
  v27 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v25);
  v49 = 0;
  v28 = objc_msgSend(v14, "PerformSEABAAWithAttestation:casdCertificate:nonce:OIDs:validityInterval:error:", v15, v22, v23, v27, 0, &v49);
  swift_unknownObjectRelease(v14);

  v29 = v49;
  if (!v28)
  {
    v43 = v49;
    v31 = _convertNSErrorToError(_:)(v29);

    swift_willThrow(v44);
    sub_100063CD0(v47, v48);
    goto LABEL_6;
  }
  v30 = sub_100063D3C(&qword_100348980);
  v31 = swift_allocObject(v30, 64, 7);
  *(_OWORD *)(v31 + 16) = xmmword_1002888F0;
  v32 = v29;
  v33 = (id)sub_1000117DC((uint64_t)v28);
  v34 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v33);
  v36 = v35;

  *(_QWORD *)(v31 + 32) = v34;
  *(_QWORD *)(v31 + 40) = v36;
  v37 = (id)sub_1000117D0((uint64_t)v28);
  v38 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v37);
  v40 = v39;

  *(_QWORD *)(v31 + 48) = v38;
  *(_QWORD *)(v31 + 56) = v40;

  sub_100063CD0(v47, v48);
  return v31;
}

unint64_t sub_1001E7FB4()
{
  unint64_t result;

  result = qword_10034A3E8;
  if (!qword_10034A3E8)
  {
    result = swift_getWitnessTable(&unk_10028D09C, &type metadata for WebauthN.AttestationStatement);
    atomic_store(result, (unint64_t *)&qword_10034A3E8);
  }
  return result;
}

unint64_t sub_1001E7FF8()
{
  unint64_t result;

  result = qword_10034A3F0;
  if (!qword_10034A3F0)
  {
    result = swift_getWitnessTable(&unk_10028D074, &type metadata for WebauthN.AuthenticatorAttestationResponse);
    atomic_store(result, (unint64_t *)&qword_10034A3F0);
  }
  return result;
}

unint64_t sub_1001E803C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10034A400;
  if (!qword_10034A400)
  {
    v1 = type metadata accessor for COSEKey(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for COSEKey, v1);
    atomic_store(result, (unint64_t *)&qword_10034A400);
  }
  return result;
}

void *sub_1001E8084(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  os_log_type_t v12;
  uint8_t *v13;
  Swift::String v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  id v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  uint64_t countAndFlagsBits;
  void *object;
  Class isa;
  Class v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  Class v56;
  id v57;
  unint64_t v58;
  Swift::String v59;
  uint64_t v60;
  void *v61;
  void *v62;
  uint64_t v63;
  void *v64;
  void *v65;
  uint64_t v66;
  void *v67;
  void *v68;
  Swift::String v69;
  uint64_t v70;
  void *v71;
  void *v72;
  uint64_t v73;
  void *v74;
  void *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __n128 v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  NSObject *v85;
  uint64_t v86;
  os_log_type_t v87;
  uint8_t *v88;
  uint64_t v89;
  double v90;
  id v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  id v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  id v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v112;
  id v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  id v120;
  Swift::String v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;

  v8 = Logger.logObject.getter(a1);
  v12 = static os_log_type_t.info.getter(v8, v9, v10, v11);
  if (os_log_type_enabled(v8, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v12, "Performing FiDO signature", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  v14 = Data.base64EncodedString(options:)(0);
  v121 = v14;
  v15 = (void *)0xE100000000000000;
  v126 = 47;
  v127 = 0xE100000000000000;
  v118 = 95;
  v119 = 0xE100000000000000;
  v16 = sub_1000F716C();
  v17 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v126, &v118, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v16, v16, v16);
  v19 = v18;
  swift_bridgeObjectRelease(v14._object);
  v121._countAndFlagsBits = v17;
  v121._object = v19;
  v126 = 43;
  v127 = 0xE100000000000000;
  v118 = 45;
  v119 = 0xE100000000000000;
  v20 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v126, &v118, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v16, v16, v16);
  v22 = v21;
  swift_bridgeObjectRelease(v19);
  v121._countAndFlagsBits = v20;
  v121._object = v22;
  v126 = 61;
  v127 = 0xE100000000000000;
  v118 = 0;
  v119 = 0xE000000000000000;
  v23 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v126, &v118, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v16, v16, v16);
  v25 = v24;
  swift_bridgeObjectRelease(v22);
  strcpy((char *)&v121, "webauthn.get");
  BYTE5(v121._object) = 0;
  HIWORD(v121._object) = -5120;
  v122 = v23;
  v123 = v25;
  v124 = a5;
  v125 = a6;
  v26 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  v27 = swift_bridgeObjectRetain(a6);
  v28 = JSONEncoder.init()(v27);
  v29 = sub_1001E7264();
  v30 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v121, &type metadata for WebauthN.ClientData, v29);
  if (v116)
  {
    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(v25);
    swift_release(v28);
  }
  else
  {
    v32 = v30;
    v33 = v31;
    v106 = v26;
    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(v25);
    swift_release(v28);
    sub_1001EDD38(v32, v33);
    v117 = v34;
    v107 = v35;
    v36 = objc_msgSend(a4, "key");
    v37 = v32;
    v38 = objc_msgSend(v36, "publicKey");

    v39 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v38);
    v41 = v40;

    sub_1001E78B4(a5, a6, v39, v41, 0);
    v43 = v42;
    v45 = v44;
    sub_100063CD0(v39, v41);
    v104 = v37;
    v105 = v33;
    v121._countAndFlagsBits = v43;
    v121._object = v45;
    sub_100063C8C(v43, (unint64_t)v45);
    sub_100063C8C(v117, v107);
    sub_1000FB17C(v117, v107);
    sub_100063CD0(v117, v107);
    countAndFlagsBits = v121._countAndFlagsBits;
    object = v121._object;
    v109 = v43;
    v110 = (unint64_t)v45;
    isa = Data._bridgeToObjectiveC()().super.isa;
    v50 = Data._bridgeToObjectiveC()().super.isa;
    v51 = countAndFlagsBits;
    sub_1001EDD38(countAndFlagsBits, (uint64_t)object);
    v53 = v52;
    v55 = v54;
    v56 = Data._bridgeToObjectiveC()().super.isa;
    sub_100063CD0(v53, v55);
    v121._countAndFlagsBits = 0;
    v57 = sub_10002F708(a1, isa, v50, a4, v56, (void *)kSecKeyAlgorithmECDSASignatureMessageX962SHA256, &v121);

    v15 = (void *)v121._countAndFlagsBits;
    v120 = (id)v121._countAndFlagsBits;
    if (v57)
    {
      v114 = object;
      v108 = (id)v121._countAndFlagsBits;
      v102 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v57);
      v103 = v58;

      v59 = Data.base64EncodedString(options:)(0);
      v121 = v59;
      v126 = 47;
      v127 = 0xE100000000000000;
      v118 = 95;
      v119 = 0xE100000000000000;
      v60 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v126, &v118, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v16, v16, v16);
      v62 = v61;
      swift_bridgeObjectRelease(v59._object);
      v121._countAndFlagsBits = v60;
      v121._object = v62;
      v126 = 43;
      v127 = 0xE100000000000000;
      v118 = 45;
      v119 = 0xE100000000000000;
      v63 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v126, &v118, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v16, v16, v16);
      v65 = v64;
      swift_bridgeObjectRelease(v62);
      v121._countAndFlagsBits = v63;
      v121._object = v65;
      v126 = 61;
      v127 = 0xE100000000000000;
      v118 = 0;
      v119 = 0xE000000000000000;
      v66 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v126, &v118, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v16, v16, v16);
      v68 = v67;
      swift_bridgeObjectRelease(v65);
      v69 = Data.base64EncodedString(options:)(0);
      v121 = v69;
      v126 = 47;
      v127 = 0xE100000000000000;
      v118 = 95;
      v119 = 0xE100000000000000;
      v70 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v126, &v118, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v16, v16, v16);
      v72 = v71;
      swift_bridgeObjectRelease(v69._object);
      v121._countAndFlagsBits = v70;
      v121._object = v72;
      v126 = 43;
      v127 = 0xE100000000000000;
      v118 = 45;
      v119 = 0xE100000000000000;
      v73 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v126, &v118, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v16, v16, v16);
      v75 = v74;
      swift_bridgeObjectRelease(v72);
      v121._countAndFlagsBits = v73;
      v121._object = v75;
      v126 = 61;
      v127 = 0xE100000000000000;
      v118 = 0;
      v119 = 0xE000000000000000;
      v100 = v16;
      v101 = v16;
      v99 = v16;
      v76 = v68;
      v77 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v126, &v118, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v99, v100, v101);
      v79 = v78;
      swift_bridgeObjectRelease(v75);
      v121._countAndFlagsBits = v66;
      v121._object = v68;
      v122 = v77;
      v123 = v79;
      v124 = v102;
      v125 = v103;
      swift_allocObject(v106, *(unsigned int *)(v106 + 48), *(unsigned __int16 *)(v106 + 52));
      sub_100063C8C(v102, v103);
      v81 = JSONEncoder.init()(v80);
      v82 = sub_1001E8A9C();
      v15 = (void *)dispatch thunk of JSONEncoder.encode<A>(_:)(&v121, &type metadata for WebauthN.AuthenticatorAssertionResponse, v82);
      swift_release(v81);
      sub_100063CD0(v102, v103);
      sub_100063CD0(v51, (unint64_t)v114);
      sub_100063CD0(v109, v110);
      sub_100063CD0(v117, v107);
      sub_100063CD0(v104, v105);
      swift_bridgeObjectRelease(v79);
      swift_bridgeObjectRelease(v76);
      sub_100063CD0(v102, v103);

    }
    else
    {
      v83 = v107;
      v84 = (unint64_t)object;
      v85 = Logger.logObject.getter((id)v121._countAndFlagsBits);
      v87 = static os_log_type_t.error.getter(v85, v86);
      if (os_log_type_enabled(v85, v87))
      {
        v112 = v51;
        v115 = object;
        v88 = (uint8_t *)swift_slowAlloc(12, -1);
        v89 = swift_slowAlloc(32, -1);
        v126 = v89;
        *(_DWORD *)v88 = 136315138;
        *(_QWORD *)&v90 = swift_beginAccess(&v120, &v121, 0, 0).n128_u64[0];
        v15 = v120;
        if (v120)
        {
          v91 = objc_msgSend(v120, "localizedDescription", v90);
          v92 = static String._unconditionallyBridgeFromObjectiveC(_:)(v91);
          v94 = v93;

        }
        else
        {
          v94 = 0xE300000000000000;
          v92 = 7104878;
        }
        v118 = sub_1001C56EC(v92, v94, &v126);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, &v119, v88 + 4, v88 + 12);
        swift_bridgeObjectRelease(v94);
        _os_log_impl((void *)&_mh_execute_header, v85, v87, "Failed to sign challenge %s", v88, 0xCu);
        swift_arrayDestroy(v89, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v89, -1, -1);
        swift_slowDealloc(v88, -1, -1);

        v83 = v107;
        v84 = (unint64_t)v115;
        v95 = v117;
        v96 = v112;
      }
      else
      {

        v95 = v117;
        v96 = v51;
      }
      sub_10006C25C(0, (unint64_t *)&qword_1003469E0, NSError_ptr);
      v97 = v15;
      v98 = sub_1001E2838(0, 1, 0xD000000000000010, 0x80000001002C2D50, (uint64_t)v15);
      swift_willThrow(v98);

      sub_100063CD0(v96, v84);
      sub_100063CD0(v109, v110);
      sub_100063CD0(v95, v83);
      sub_100063CD0(v104, v105);
    }
  }
  return v15;
}

unint64_t sub_1001E8A9C()
{
  unint64_t result;

  result = qword_10034A408;
  if (!qword_10034A408)
  {
    result = swift_getWitnessTable(&unk_10028D04C, &type metadata for WebauthN.AuthenticatorAssertionResponse);
    atomic_store(result, (unint64_t *)&qword_10034A408);
  }
  return result;
}

uint64_t destroy for WebauthN.AuthenticatorAttestationResponse(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

_QWORD *initializeWithCopy for WebauthN.AuthenticatorAttestationResponse(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for WebauthN.AuthenticatorAttestationResponse(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

_QWORD *assignWithTake for WebauthN.AuthenticatorAttestationResponse(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for WebauthN.AuthenticatorAttestationResponse(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WebauthN.AuthenticatorAttestationResponse(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for WebauthN.AuthenticatorAttestationResponse()
{
  return &type metadata for WebauthN.AuthenticatorAttestationResponse;
}

ValueMetadata *type metadata accessor for WebauthN.AttestationStatement()
{
  return &type metadata for WebauthN.AttestationStatement;
}

uint64_t destroy for WebauthN.ClientData(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  return swift_bridgeObjectRelease(a1[5]);
}

_QWORD *initializeWithCopy for WebauthN.ClientData(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *assignWithCopy for WebauthN.ClientData(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

_QWORD *assignWithTake for WebauthN.ClientData(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[5];
  v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  return a1;
}

ValueMetadata *type metadata accessor for WebauthN.ClientData()
{
  return &type metadata for WebauthN.ClientData;
}

uint64_t _s10seserviced8WebauthNV20AttestationStatementVwxx_0(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  return sub_100063CD0(a1[4], a1[5]);
}

_QWORD *_s10seserviced8WebauthNV20AttestationStatementVwcp_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[4];
  v6 = a2[5];
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  sub_100063C8C(v5, v6);
  a1[4] = v5;
  a1[5] = v6;
  return a1;
}

_QWORD *_s10seserviced8WebauthNV20AttestationStatementVwca_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v9 = a2[4];
  v8 = a2[5];
  sub_100063C8C(v9, v8);
  v10 = a1[4];
  v11 = a1[5];
  a1[4] = v9;
  a1[5] = v8;
  sub_100063CD0(v10, v11);
  return a1;
}

_QWORD *_s10seserviced8WebauthNV20AttestationStatementVwta_0(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = a1[1];
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = a1[3];
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a1[4];
  v9 = a1[5];
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  sub_100063CD0(v8, v9);
  return a1;
}

uint64_t _s10seserviced8WebauthNV20AttestationStatementVwet_0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1001E8FD4(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for WebauthN.AuthenticatorAssertionResponse()
{
  return &type metadata for WebauthN.AuthenticatorAssertionResponse;
}

uint64_t destroy for SEFidoKeyManager.FiDOKeyInKeychain(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  sub_100063CD0(a1[4], a1[5]);
  return sub_100063CD0(a1[6], a1[7]);
}

_QWORD *initializeWithCopy for SEFidoKeyManager.FiDOKeyInKeychain(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = a2[4];
  v7 = a2[5];
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  sub_100063C8C(v6, v7);
  a1[4] = v6;
  a1[5] = v7;
  v9 = a2[6];
  v8 = a2[7];
  sub_100063C8C(v9, v8);
  a1[6] = v9;
  a1[7] = v8;
  return a1;
}

_QWORD *assignWithCopy for SEFidoKeyManager.FiDOKeyInKeychain(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[4];
  v9 = a2[5];
  sub_100063C8C(v8, v9);
  v10 = a1[4];
  v11 = a1[5];
  a1[4] = v8;
  a1[5] = v9;
  sub_100063CD0(v10, v11);
  v13 = a2[6];
  v12 = a2[7];
  sub_100063C8C(v13, v12);
  v14 = a1[6];
  v15 = a1[7];
  a1[6] = v13;
  a1[7] = v12;
  sub_100063CD0(v14, v15);
  return a1;
}

__n128 initializeWithTake for SEFidoKeyManager.FiDOKeyInKeychain(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

_QWORD *assignWithTake for SEFidoKeyManager.FiDOKeyInKeychain(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = a1[1];
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = a1[3];
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a1[4];
  v9 = a1[5];
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  sub_100063CD0(v8, v9);
  v10 = a1[6];
  v11 = a1[7];
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
  sub_100063CD0(v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for SEFidoKeyManager.FiDOKeyInKeychain(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SEFidoKeyManager.FiDOKeyInKeychain(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SEFidoKeyManager.FiDOKeyInKeychain()
{
  return &type metadata for SEFidoKeyManager.FiDOKeyInKeychain;
}

unint64_t sub_1001E92A4()
{
  unint64_t result;

  result = qword_10034A418;
  if (!qword_10034A418)
  {
    result = swift_getWitnessTable(&unk_10028D6D8, &type metadata for SEFidoKeyManager.FiDOKeyInKeychain.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10034A418);
  }
  return result;
}

uint64_t sub_1001E92E8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x50676E69796C6572 && a2 == 0xEC00000079747261)
  {
    v5 = 0xEC00000079747261;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x50676E69796C6572, 0xEC00000079747261, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000017)
  {
    v7 = 0x80000001002C2D70;
    if (a2 == 0x80000001002C2D70)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x80000001002C2D70, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0x4879654B6F646966 && a2 == 0xEB00000000687361)
  {
    v8 = 0xEB00000000687361;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4879654B6F646966, 0xEB00000000687361, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_19;
  }
  if (a1 == 0x74614479654B7470 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease(0xE900000000000061);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74614479654B7470, 0xE900000000000061, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1001E94D4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t result;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;

  v5 = sub_100063D3C(&qword_10034A420);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10006BA78(a1, v10);
  v12 = sub_1001E92A4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SEFidoKeyManager.FiDOKeyInKeychain.CodingKeys, &type metadata for SEFidoKeyManager.FiDOKeyInKeychain.CodingKeys, v12, v10, v11);
  if (v2)
    return sub_10006BA9C(a1);
  LOBYTE(v32) = 0;
  v13 = KeyedDecodingContainer.decode(_:forKey:)(&v32, v5);
  v15 = v14;
  v30 = v13;
  LOBYTE(v32) = 1;
  swift_bridgeObjectRetain(v14);
  v16 = KeyedDecodingContainer.decode(_:forKey:)(&v32, v5);
  v31 = v17;
  v18 = v17;
  v28 = v16;
  v34 = 2;
  v19 = sub_10014DDCC();
  swift_bridgeObjectRetain(v18);
  v29 = v19;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v32, &type metadata for Data, &v34, v5, &type metadata for Data, v19);
  v34 = 3;
  v26 = v33;
  v27 = v32;
  sub_100063C8C(v32, v33);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v32, &type metadata for Data, &v34, v5, &type metadata for Data, v29);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  v20 = v32;
  v21 = v33;
  swift_bridgeObjectRetain(v15);
  v22 = v31;
  swift_bridgeObjectRetain(v31);
  v24 = v26;
  v23 = v27;
  sub_100063C8C(v27, v26);
  sub_100063C8C(v20, v21);
  sub_100063CD0(v23, v24);
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v22);
  sub_10006BA9C(a1);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(v15);
  sub_100063CD0(v23, v24);
  result = sub_100063CD0(v20, v21);
  *a2 = v30;
  a2[1] = v15;
  a2[2] = v28;
  a2[3] = v22;
  a2[4] = v23;
  a2[5] = v24;
  a2[6] = v20;
  a2[7] = v21;
  return result;
}

uint64_t sub_1001E9808(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701869940, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x676E656C6C616863 && a2 == 0xE900000000000065)
  {
    v7 = 0xE900000000000065;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x676E656C6C616863, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6E696769726FLL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E696769726FLL, 0xE600000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1001E9950(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x6144746E65696C63 && a2 == 0xEE004E4F534A6174)
  {
    v5 = 0xEE004E4F534A6174;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6144746E65696C63, 0xEE004E4F534A6174, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x80000001002C2DB0)
  {
    swift_bridgeObjectRelease(0x80000001002C2DB0);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001002C2DB0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1001E9A60(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;

  v3 = sub_100063D3C(&qword_10034A478);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_10006BA78(a1, v8);
  v10 = sub_1001EA10C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for WebauthN.AuthenticatorAttestationResponse.CodingKeys, &type metadata for WebauthN.AuthenticatorAttestationResponse.CodingKeys, v10, v8, v9);
  if (v1)
  {
    sub_10006BA9C(a1);
  }
  else
  {
    v18 = 0;
    v9 = KeyedDecodingContainer.decode(_:forKey:)(&v18, v3);
    v13 = v12;
    v17 = 1;
    swift_bridgeObjectRetain(v12);
    KeyedDecodingContainer.decode(_:forKey:)(&v17, v3);
    v15 = v14;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    swift_bridgeObjectRetain(v15);
    sub_10006BA9C(a1);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v13);
  }
  return v9;
}

uint64_t sub_1001E9C0C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x6144746E65696C63 && a2 == 0xEE004E4F534A6174)
  {
    v5 = 0xEE004E4F534A6174;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6144746E65696C63, 0xEE004E4F534A6174, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000011)
  {
    v7 = 0x80000001002C2D90;
    if (a2 == 0x80000001002C2D90)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001002C2D90, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0x727574616E676973 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease(0xE900000000000065);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x727574616E676973, 0xE900000000000065, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1001E9D88@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];
  char v29;

  v5 = sub_100063D3C(&qword_10034A428);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10006BA78(a1, v10);
  v12 = sub_1001E9FFC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for WebauthN.AuthenticatorAssertionResponse.CodingKeys, &type metadata for WebauthN.AuthenticatorAssertionResponse.CodingKeys, v12, v10, v11);
  if (v2)
    return sub_10006BA9C(a1);
  LOBYTE(v28[0]) = 0;
  v13 = KeyedDecodingContainer.decode(_:forKey:)(v28, v5);
  v15 = v14;
  v27 = v13;
  LOBYTE(v28[0]) = 1;
  swift_bridgeObjectRetain(v14);
  v16 = KeyedDecodingContainer.decode(_:forKey:)(v28, v5);
  v18 = v17;
  v25 = v16;
  v29 = 2;
  v19 = sub_10014DDCC();
  swift_bridgeObjectRetain(v18);
  v26 = v18;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v28, &type metadata for Data, &v29, v5, &type metadata for Data, v19);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  v20 = v28[0];
  v21 = v28[1];
  swift_bridgeObjectRetain(v15);
  v22 = v26;
  swift_bridgeObjectRetain(v26);
  sub_100063C8C(v20, v21);
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v22);
  sub_10006BA9C(a1);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(v15);
  result = sub_100063CD0(v20, v21);
  *a2 = v27;
  a2[1] = v15;
  a2[2] = v25;
  a2[3] = v22;
  a2[4] = v20;
  a2[5] = v21;
  return result;
}

unint64_t sub_1001E9FFC()
{
  unint64_t result;

  result = qword_10034A430;
  if (!qword_10034A430)
  {
    result = swift_getWitnessTable(&unk_10028D688, &type metadata for WebauthN.AuthenticatorAssertionResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10034A430);
  }
  return result;
}

unint64_t sub_1001EA040()
{
  unint64_t result;

  result = qword_10034A440;
  if (!qword_10034A440)
  {
    result = swift_getWitnessTable(&unk_10028D638, &type metadata for WebauthN.ClientData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10034A440);
  }
  return result;
}

unint64_t sub_1001EA084()
{
  unint64_t result;

  result = qword_10034A450;
  if (!qword_10034A450)
  {
    result = swift_getWitnessTable(&unk_10028D5E8, &type metadata for WebauthN.AttestationStatement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10034A450);
  }
  return result;
}

unint64_t sub_1001EA0C8()
{
  unint64_t result;

  result = qword_10034A458;
  if (!qword_10034A458)
  {
    result = swift_getWitnessTable(&unk_10028D5C0, &type metadata for WebauthN.AttestationStatement.AppleAttestationFormat);
    atomic_store(result, (unint64_t *)&qword_10034A458);
  }
  return result;
}

unint64_t sub_1001EA10C()
{
  unint64_t result;

  result = qword_10034A468;
  if (!qword_10034A468)
  {
    result = swift_getWitnessTable(&unk_10028D570, &type metadata for WebauthN.AuthenticatorAttestationResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10034A468);
  }
  return result;
}

uint64_t sub_1001EA150(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 6777953 && a2 == 0xE300000000000000)
  {
    v5 = 0xE300000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(6777953, 0xE300000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 6501752 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease(0xE300000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(6501752, 0xE300000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1001EA220(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;

  v3 = sub_100063D3C(&qword_10034A520);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_10006BA78(a1, v8);
  v10 = sub_1001EAF0C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for WebauthN.AttestationStatement.AppleAttestationFormat.CodingKeys, &type metadata for WebauthN.AttestationStatement.AppleAttestationFormat.CodingKeys, v10, v8, v9);
  if (!v1)
  {
    v17 = 0;
    v8 = KeyedDecodingContainer.decode(_:forKey:)(&v17, v3);
    v11 = sub_100063D3C((uint64_t *)&unk_1003465F0);
    v15 = 1;
    v12 = sub_1001EAF50(&qword_10034A528, (void (*)(void))sub_10014DDCC, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, v11, &v15, v3, v11, v12);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  }
  sub_10006BA9C(a1);
  return v8;
}

uint64_t sub_1001EA3AC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 7630182 && a2 == 0xE300000000000000)
  {
    v5 = 0xE300000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(7630182, 0xE300000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x746D7453747461 && a2 == 0xE700000000000000)
  {
    v7 = 0xE700000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746D7453747461, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6174614468747561 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6174614468747561, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1001EA4F0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;

  v5 = sub_100063D3C(&qword_10034A480);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10006BA78(a1, v10);
  v12 = sub_1001EA084();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for WebauthN.AttestationStatement.CodingKeys, &type metadata for WebauthN.AttestationStatement.CodingKeys, v12, v10, v11);
  if (v2)
  {
    sub_10006BA9C(a1);
    return swift_bridgeObjectRelease(0xE500000000000000);
  }
  else
  {
    LOBYTE(v24) = 0;
    v13 = KeyedDecodingContainer.decode(_:forKey:)(&v24, v5);
    v15 = v14;
    v26 = 1;
    v16 = sub_1001EA77C();
    swift_bridgeObjectRetain(v15);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v24, &type metadata for WebauthN.AttestationStatement.AppleAttestationFormat, &v26, v5, &type metadata for WebauthN.AttestationStatement.AppleAttestationFormat, v16);
    v22 = v24;
    v23 = v13;
    v17 = v25;
    v26 = 2;
    v18 = sub_10014DDCC();
    swift_bridgeObjectRetain(v17);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v24, &type metadata for Data, &v26, v5, &type metadata for Data, v18);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v19 = v24;
    v20 = v25;
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v17);
    sub_100063C8C(v19, v20);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v17);
    sub_10006BA9C(a1);
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(v15);
    result = sub_100063CD0(v19, v20);
    *a2 = v23;
    a2[1] = v15;
    a2[2] = v22;
    a2[3] = v17;
    a2[4] = v19;
    a2[5] = v20;
  }
  return result;
}

unint64_t sub_1001EA77C()
{
  unint64_t result;

  result = qword_10034A488;
  if (!qword_10034A488)
  {
    result = swift_getWitnessTable(&unk_10028D548, &type metadata for WebauthN.AttestationStatement.AppleAttestationFormat);
    atomic_store(result, (unint64_t *)&qword_10034A488);
  }
  return result;
}

ValueMetadata *type metadata accessor for WebauthN.AuthenticatorAttestationResponse.CodingKeys()
{
  return &type metadata for WebauthN.AuthenticatorAttestationResponse.CodingKeys;
}

ValueMetadata *type metadata accessor for WebauthN.AttestationStatement.CodingKeys()
{
  return &type metadata for WebauthN.AttestationStatement.CodingKeys;
}

ValueMetadata *type metadata accessor for WebauthN.ClientData.CodingKeys()
{
  return &type metadata for WebauthN.ClientData.CodingKeys;
}

uint64_t _s10seserviced8WebauthNV20AttestationStatementV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1001EA848 + 4 * byte_10028CE59[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1001EA87C + 4 * byte_10028CE54[v4]))();
}

uint64_t sub_1001EA87C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001EA884(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001EA88CLL);
  return result;
}

uint64_t sub_1001EA898(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001EA8A0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1001EA8A4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001EA8AC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WebauthN.AuthenticatorAssertionResponse.CodingKeys()
{
  return &type metadata for WebauthN.AuthenticatorAssertionResponse.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for SEFidoKeyManager.FiDOKeyInKeychain.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1001EA914 + 4 * byte_10028CE63[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1001EA948 + 4 * byte_10028CE5E[v4]))();
}

uint64_t sub_1001EA948(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001EA950(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001EA958);
  return result;
}

uint64_t sub_1001EA964(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001EA96CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1001EA970(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001EA978(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SEFidoKeyManager.FiDOKeyInKeychain.CodingKeys()
{
  return &type metadata for SEFidoKeyManager.FiDOKeyInKeychain.CodingKeys;
}

ValueMetadata *type metadata accessor for WebauthN()
{
  return &type metadata for WebauthN;
}

_QWORD *initializeBufferWithCopyOfBuffer for WebauthN.AttestationStatement.AppleAttestationFormat(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

_QWORD *assignWithCopy for WebauthN.AttestationStatement.AppleAttestationFormat(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

_QWORD *assignWithTake for WebauthN.AttestationStatement.AppleAttestationFormat(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for WebauthN.AttestationStatement.AppleAttestationFormat(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WebauthN.AttestationStatement.AppleAttestationFormat(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for WebauthN.AttestationStatement.AppleAttestationFormat()
{
  return &type metadata for WebauthN.AttestationStatement.AppleAttestationFormat;
}

unint64_t sub_1001EAAD8()
{
  unint64_t result;

  result = qword_10034A490;
  if (!qword_10034A490)
  {
    result = swift_getWitnessTable(&unk_10028D240, &type metadata for SEFidoKeyManager.FiDOKeyInKeychain.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10034A490);
  }
  return result;
}

unint64_t sub_1001EAB20()
{
  unint64_t result;

  result = qword_10034A498;
  if (!qword_10034A498)
  {
    result = swift_getWitnessTable(&unk_10028D2F8, &type metadata for WebauthN.AuthenticatorAssertionResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10034A498);
  }
  return result;
}

unint64_t sub_1001EAB68()
{
  unint64_t result;

  result = qword_10034A4A0;
  if (!qword_10034A4A0)
  {
    result = swift_getWitnessTable(&unk_10028D3B0, &type metadata for WebauthN.ClientData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10034A4A0);
  }
  return result;
}

unint64_t sub_1001EABB0()
{
  unint64_t result;

  result = qword_10034A4A8;
  if (!qword_10034A4A8)
  {
    result = swift_getWitnessTable(&unk_10028D468, &type metadata for WebauthN.AttestationStatement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10034A4A8);
  }
  return result;
}

unint64_t sub_1001EABF8()
{
  unint64_t result;

  result = qword_10034A4B0;
  if (!qword_10034A4B0)
  {
    result = swift_getWitnessTable(&unk_10028D520, &type metadata for WebauthN.AuthenticatorAttestationResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10034A4B0);
  }
  return result;
}

unint64_t sub_1001EAC40()
{
  unint64_t result;

  result = qword_10034A4B8;
  if (!qword_10034A4B8)
  {
    result = swift_getWitnessTable(&unk_10028D490, &type metadata for WebauthN.AuthenticatorAttestationResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10034A4B8);
  }
  return result;
}

unint64_t sub_1001EAC88()
{
  unint64_t result;

  result = qword_10034A4C0;
  if (!qword_10034A4C0)
  {
    result = swift_getWitnessTable(&unk_10028D4B8, &type metadata for WebauthN.AuthenticatorAttestationResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10034A4C0);
  }
  return result;
}

unint64_t sub_1001EACD0()
{
  unint64_t result;

  result = qword_10034A4C8;
  if (!qword_10034A4C8)
  {
    result = swift_getWitnessTable(&unk_10028D3D8, &type metadata for WebauthN.AttestationStatement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10034A4C8);
  }
  return result;
}

unint64_t sub_1001EAD18()
{
  unint64_t result;

  result = qword_10034A4D0;
  if (!qword_10034A4D0)
  {
    result = swift_getWitnessTable(&unk_10028D400, &type metadata for WebauthN.AttestationStatement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10034A4D0);
  }
  return result;
}

unint64_t sub_1001EAD60()
{
  unint64_t result;

  result = qword_10034A4D8;
  if (!qword_10034A4D8)
  {
    result = swift_getWitnessTable(&unk_10028D320, &type metadata for WebauthN.ClientData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10034A4D8);
  }
  return result;
}

unint64_t sub_1001EADA8()
{
  unint64_t result;

  result = qword_10034A4E0;
  if (!qword_10034A4E0)
  {
    result = swift_getWitnessTable(&unk_10028D348, &type metadata for WebauthN.ClientData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10034A4E0);
  }
  return result;
}

unint64_t sub_1001EADF0()
{
  unint64_t result;

  result = qword_10034A4E8;
  if (!qword_10034A4E8)
  {
    result = swift_getWitnessTable(&unk_10028D268, &type metadata for WebauthN.AuthenticatorAssertionResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10034A4E8);
  }
  return result;
}

unint64_t sub_1001EAE38()
{
  unint64_t result;

  result = qword_10034A4F0;
  if (!qword_10034A4F0)
  {
    result = swift_getWitnessTable(&unk_10028D290, &type metadata for WebauthN.AuthenticatorAssertionResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10034A4F0);
  }
  return result;
}

unint64_t sub_1001EAE80()
{
  unint64_t result;

  result = qword_10034A4F8;
  if (!qword_10034A4F8)
  {
    result = swift_getWitnessTable(&unk_10028D1B0, &type metadata for SEFidoKeyManager.FiDOKeyInKeychain.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10034A4F8);
  }
  return result;
}

unint64_t sub_1001EAEC8()
{
  unint64_t result;

  result = qword_10034A500;
  if (!qword_10034A500)
  {
    result = swift_getWitnessTable(&unk_10028D1D8, &type metadata for SEFidoKeyManager.FiDOKeyInKeychain.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10034A500);
  }
  return result;
}

unint64_t sub_1001EAF0C()
{
  unint64_t result;

  result = qword_10034A510;
  if (!qword_10034A510)
  {
    result = swift_getWitnessTable(&unk_10028D7E0, &type metadata for WebauthN.AttestationStatement.AppleAttestationFormat.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10034A510);
  }
  return result;
}

uint64_t sub_1001EAF50(unint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_100063DC8((uint64_t *)&unk_1003465F0);
    a2();
    result = swift_getWitnessTable(a3, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s10seserviced8WebauthNV32AuthenticatorAttestationResponseV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1001EB004 + 4 * byte_10028CE6D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001EB038 + 4 * byte_10028CE68[v4]))();
}

uint64_t sub_1001EB038(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001EB040(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001EB048);
  return result;
}

uint64_t sub_1001EB054(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001EB05CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1001EB060(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001EB068(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WebauthN.AttestationStatement.AppleAttestationFormat.CodingKeys()
{
  return &type metadata for WebauthN.AttestationStatement.AppleAttestationFormat.CodingKeys;
}

unint64_t sub_1001EB088()
{
  unint64_t result;

  result = qword_10034A530;
  if (!qword_10034A530)
  {
    result = swift_getWitnessTable(&unk_10028D7B8, &type metadata for WebauthN.AttestationStatement.AppleAttestationFormat.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10034A530);
  }
  return result;
}

unint64_t sub_1001EB0D0()
{
  unint64_t result;

  result = qword_10034A538;
  if (!qword_10034A538)
  {
    result = swift_getWitnessTable(&unk_10028D728, &type metadata for WebauthN.AttestationStatement.AppleAttestationFormat.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10034A538);
  }
  return result;
}

unint64_t sub_1001EB118()
{
  unint64_t result;

  result = qword_10034A540;
  if (!qword_10034A540)
  {
    result = swift_getWitnessTable(&unk_10028D750, &type metadata for WebauthN.AttestationStatement.AppleAttestationFormat.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10034A540);
  }
  return result;
}

uint64_t sub_1001EB160()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000980F8(v0, qword_10034A548);
  sub_10009673C(v0, (uint64_t)qword_10034A548);
  return Logger.init(subsystem:category:)(0xD000000000000014);
}

void sub_1001EB1DC()
{
  id v0;
  NSString v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  id v8;
  id v9;
  unint64_t v10;
  unint64_t v11;
  NSString v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  NSString v24;
  NSString v25;
  Class isa;
  NSString v27;
  NSString v28;
  id v29;
  id v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;

  v0 = objc_allocWithZone((Class)NSUserDefaults);
  v1 = String._bridgeToObjectiveC()();
  v30 = objc_msgSend(v0, "initWithSuiteName:", v1);

  if (v30)
  {
    v2 = objc_allocWithZone((Class)LSApplicationRecord);
    v8 = sub_1001415A4(0xD000000000000012, 0x80000001002BD780, 0);
    v9 = objc_msgSend(v8, "localizedName");
    static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v11 = v10;

    v12 = String._bridgeToObjectiveC()();
    v13 = objc_msgSend(v30, "stringForKey:", v12);

    if (v13)
    {
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v16 = v15;

      if (v14 == 0xD000000000000012 && v16 == 0x80000001002BD780)
      {
        swift_bridgeObjectRelease(v11);
        v17 = 0x80000001002BD780;
LABEL_14:
        swift_bridgeObjectRelease(v17);
        if (qword_100344798 != -1)
          swift_once(&qword_100344798, sub_1001EB160);
        v19 = type metadata accessor for Logger(0);
        v20 = sub_10009673C(v19, (uint64_t)qword_10034A548);
        v21 = Logger.logObject.getter(v20);
        v22 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v21, v22))
        {
          v23 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v23 = 0;
          _os_log_impl((void *)&_mh_execute_header, v21, v22, "Passbook is already default -- no op", v23, 2u);
          swift_slowDealloc(v23, -1, -1);
        }

        return;
      }
      v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v16, 0xD000000000000012, 0x80000001002BD780, 0);
      swift_bridgeObjectRelease(v16);
      if ((v18 & 1) != 0)
      {
        v17 = v11;
        goto LABEL_14;
      }
    }
    v24 = String._bridgeToObjectiveC()();
    v25 = String._bridgeToObjectiveC()();
    objc_msgSend(v30, "setValue:forKey:", v24, v25);

    isa = UInt._bridgeToObjectiveC()().super.super.isa;
    v27 = String._bridgeToObjectiveC()();
    objc_msgSend(v30, "setValue:forKey:", isa, v27);

    v28 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v11);
    v29 = String._bridgeToObjectiveC()();
    objc_msgSend(v30, "setValue:forKey:", v28, v29);

    return;
  }
  if (qword_100344798 != -1)
    swift_once(&qword_100344798, sub_1001EB160);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10009673C(v3, (uint64_t)qword_10034A548);
  v31 = Logger.logObject.getter(v4);
  v5 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v31, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v33 = v7;
    *(_DWORD *)v6 = 136315138;
    v32 = sub_1001C56EC(0xD00000000000001CLL, 0x80000001002C2E50, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v6 + 4, v6 + 12);
    _os_log_impl((void *)&_mh_execute_header, v31, v5, "%s -- unable to initialize Settings Suite!?", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

  }
}

void sub_1001EB7AC()
{
  id v0;
  NSString v1;
  NSString v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  os_log_type_t v13;
  uint8_t *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  os_log_type_t v25;
  uint8_t *v26;
  id v27;
  id v28;
  NSString v29;
  uint64_t v30;
  uint64_t v31;
  NSString v32;
  NSObject *oslog;
  NSObject *v34;

  v0 = objc_allocWithZone((Class)NSUserDefaults);
  v1 = String._bridgeToObjectiveC()();
  v34 = objc_msgSend(v0, "initWithSuiteName:", v1);

  if (v34)
  {
    v2 = String._bridgeToObjectiveC()();
    v3 = -[NSObject stringForKey:](v34, "stringForKey:", v2);

    if (v3)
    {
      v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
      v6 = v5;

      if (qword_100344798 != -1)
        swift_once(&qword_100344798, sub_1001EB160);
      v7 = type metadata accessor for Logger(0);
      v8 = sub_10009673C(v7, (uint64_t)qword_10034A548);
      v9 = Logger.logObject.getter(v8);
      v13 = static os_log_type_t.info.getter(v9, v10, v11, v12);
      if (os_log_type_enabled(v9, v13))
      {
        v14 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v14 = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, v13, "Migrating from v1 schema to v3", v14, 2u);
        swift_slowDealloc(v14, -1, -1);
      }

      v15 = objc_allocWithZone((Class)LSApplicationRecord);
      v27 = sub_1001415A4(v4, v6, 1);
      v28 = objc_msgSend(v27, "localizedName");
      v29 = v28;
      if (!v28)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(0);
        v31 = v30;
        v29 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v31);
      }
      v32 = String._bridgeToObjectiveC()();
      -[NSObject setValue:forKey:](v34, "setValue:forKey:", v29, v32);

    }
    else
    {
      if (qword_100344798 != -1)
        swift_once(&qword_100344798, sub_1001EB160);
      v20 = type metadata accessor for Logger(0);
      v21 = sub_10009673C(v20, (uint64_t)qword_10034A548);
      oslog = Logger.logObject.getter(v21);
      v25 = static os_log_type_t.info.getter(oslog, v22, v23, v24);
      if (os_log_type_enabled(oslog, v25))
      {
        v26 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v26 = 0;
        _os_log_impl((void *)&_mh_execute_header, oslog, v25, "No default app, nothing to migrate", v26, 2u);
        swift_slowDealloc(v26, -1, -1);

        return;
      }

    }
  }
  else
  {
    if (qword_100344798 != -1)
      swift_once(&qword_100344798, sub_1001EB160);
    v16 = type metadata accessor for Logger(0);
    v17 = sub_10009673C(v16, (uint64_t)qword_10034A548);
    v34 = Logger.logObject.getter(v17);
    v18 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v34, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v18, "Unable to initialize Settings Suite!?", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }
  }

}

void sub_1001EBCCC(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  id v10;
  NSString v11;
  id v12;
  uint64_t v13;
  NSString v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSString v19;
  id v20;
  NSObject *v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  NSString v26;
  id v27;
  void *v28;
  NSString v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  NSString v33;
  id v34;
  NSString v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[24];
  uint64_t v43;

  if (qword_100344798 != -1)
    swift_once(&qword_100344798, sub_1001EB160);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10009673C(v2, (uint64_t)qword_10034A548);
  v4 = Logger.logObject.getter(v3);
  v8 = static os_log_type_t.info.getter(v4, v5, v6, v7);
  if (os_log_type_enabled(v4, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v8, "Current Default app?", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  v10 = objc_allocWithZone((Class)NSUserDefaults);
  v11 = String._bridgeToObjectiveC()();
  v12 = objc_msgSend(v10, "initWithSuiteName:", v11);

  if (!v12)
  {
    v21 = Logger.logObject.getter(v13);
    v22 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v21, (os_log_type_t)v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, (os_log_type_t)v22, "We are super doomed -- unable to initialize Settings Suite!?", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }

    goto LABEL_33;
  }
  v14 = String._bridgeToObjectiveC()();
  v15 = objc_msgSend(v12, "stringForKey:", v14);

  if (v15)
  {
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v18 = v17;

    v19 = String._bridgeToObjectiveC()();
    v20 = objc_msgSend(v12, "objectForKey:", v19);

    if (v20)
    {
      _bridgeAnyObjectToAny(_:)(&v40);
      swift_unknownObjectRelease(v20);
    }
    else
    {
      v40 = 0u;
      v41 = 0u;
    }
    sub_10006C218((uint64_t)&v40, (uint64_t)v42, (uint64_t *)&unk_100346130);
    if (v43)
    {
      if ((swift_dynamicCast(&v39, v42, (char *)&type metadata for Any + 8, &type metadata for UInt, 6) & 1) != 0)
      {
        v24 = v39;
        v26 = String._bridgeToObjectiveC()();
        v27 = objc_msgSend(v12, "stringForKey:", v26);

        if (v27)
        {
LABEL_17:
          v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
          v15 = v28;

          goto LABEL_34;
        }
        swift_bridgeObjectRelease(v18);
        sub_1001EB7AC();
        v29 = String._bridgeToObjectiveC()();
        v30 = objc_msgSend(v12, "stringForKey:", v29);

        if (v30)
        {
          v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
          v18 = v32;

          v33 = String._bridgeToObjectiveC()();
          v34 = objc_msgSend(v12, "objectForKey:", v33);

          if (v34)
          {
            _bridgeAnyObjectToAny(_:)(&v40);
            swift_unknownObjectRelease(v34);
          }
          else
          {
            v40 = 0u;
            v41 = 0u;
          }
          sub_10006C218((uint64_t)&v40, (uint64_t)v42, (uint64_t *)&unk_100346130);
          if (v43)
          {
            if ((swift_dynamicCast(&v39, v42, (char *)&type metadata for Any + 8, &type metadata for UInt, 6) & 1) != 0)
            {
              v24 = v39;
              v35 = String._bridgeToObjectiveC()();
              v27 = objc_msgSend(v12, "stringForKey:", v35);

              if (v27)
                goto LABEL_17;
            }
            v31 = swift_bridgeObjectRelease(v18);
          }
          else
          {
            swift_bridgeObjectRelease(v18);
            v31 = sub_100098C7C((uint64_t)v42);
          }
        }
        v36 = Logger.logObject.getter(v31);
        v37 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v36, v37))
        {
          v38 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v38 = 0;
          _os_log_impl((void *)&_mh_execute_header, v36, v37, "Default app localized name missing even after migration", v38, 2u);
          swift_slowDealloc(v38, -1, -1);
        }

      }
      else
      {
        swift_bridgeObjectRelease(v18);
      }

    }
    else
    {
      swift_bridgeObjectRelease(v18);

      sub_100098C7C((uint64_t)v42);
    }
LABEL_33:
    v16 = 0;
    v18 = 0;
    v24 = 0;
    v25 = 0;
    v15 = 0;
    goto LABEL_34;
  }

  v16 = 0;
  v18 = 0;
  v24 = 0;
  v25 = 0;
LABEL_34:
  *a1 = v16;
  a1[1] = v18;
  a1[2] = v24;
  a1[3] = v25;
  a1[4] = (uint64_t)v15;
}

void sub_1001EC214(uint64_t a1)
{
  id v2;
  NSString v3;
  id v4;
  NSString v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;
  NSString v9;
  NSString v10;
  NSString v11;
  uint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  NSObject *oslog;
  uint64_t v18;
  uint64_t v19;

  v2 = objc_allocWithZone((Class)NSUserDefaults);
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v2, "initWithSuiteName:", v3);

  if (v4)
  {
    v5 = String._bridgeToObjectiveC()();
    v6 = String._bridgeToObjectiveC()();
    objc_msgSend(v4, "setValue:forKey:", v5, v6);

    v19 = *(_QWORD *)(a1 + 16);
    type metadata accessor for NFWalletDomain(0);
    v8 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v19, v7);
    v9 = String._bridgeToObjectiveC()();
    objc_msgSend(v4, "setValue:forKey:", v8, v9);
    swift_unknownObjectRelease(v8);

    v10 = String._bridgeToObjectiveC()();
    v11 = String._bridgeToObjectiveC()();
    objc_msgSend(v4, "setValue:forKey:", v10, v11);

  }
  else
  {
    if (qword_100344798 != -1)
      swift_once(&qword_100344798, sub_1001EB160);
    v12 = type metadata accessor for Logger(0);
    v13 = sub_10009673C(v12, (uint64_t)qword_10034A548);
    oslog = Logger.logObject.getter(v13);
    v14 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(oslog, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v16 = swift_slowAlloc(32, -1);
      v19 = v16;
      *(_DWORD *)v15 = 136315138;
      v18 = sub_1001C56EC(0xD000000000000011, 0x80000001002C30B0, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v15 + 4, v15 + 12);
      _os_log_impl((void *)&_mh_execute_header, oslog, v14, "%s -- unable to initialize Settings Suite!?", v15, 0xCu);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);

    }
    else
    {

    }
  }
}

void sub_1001EC4E4()
{
  id v0;
  NSString v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  NSString v11;
  id v12;
  NSString v13;
  NSString v14;
  NSString v15;
  id v16;
  NSString v17;
  NSString v18;
  NSString v19;
  id v20;
  NSString v21;
  NSString v22;
  NSString v23;
  NSString v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  _QWORD *v31;
  Class isa;
  NSString v33;
  NSString v34;
  NSString v35;
  id v36;
  NSString v37;
  NSString v38;
  uint64_t v39;
  NSString v40;
  NSString v41;
  NSString v42;
  NSString v43;
  NSObject *oslog;
  _QWORD *v45;
  _OWORD v46[2];
  _BYTE v47[24];
  uint64_t v48;

  v0 = objc_allocWithZone((Class)NSUserDefaults);
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "initWithSuiteName:", v1);

  if (v2)
  {
    if (qword_100344798 != -1)
      swift_once(&qword_100344798, sub_1001EB160);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_10009673C(v3, (uint64_t)qword_10034A548);
    v5 = Logger.logObject.getter(v4);
    v9 = static os_log_type_t.info.getter(v5, v6, v7, v8);
    if (os_log_type_enabled(v5, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v9, "Performing migration from v2 to v4", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

    v11 = String._bridgeToObjectiveC()();
    v12 = objc_msgSend(v2, "BOOLForKey:", v11);

    v13 = String._bridgeToObjectiveC()();
    objc_msgSend(v2, "setBool:forKey:", v12, v13);

    v14 = String._bridgeToObjectiveC()();
    objc_msgSend(v2, "removeObjectForKey:", v14);

    v15 = String._bridgeToObjectiveC()();
    v16 = objc_msgSend(v2, "BOOLForKey:", v15);

    v17 = String._bridgeToObjectiveC()();
    objc_msgSend(v2, "setBool:forKey:", v16, v17);

    v18 = String._bridgeToObjectiveC()();
    objc_msgSend(v2, "removeObjectForKey:", v18);

    v19 = String._bridgeToObjectiveC()();
    v20 = objc_msgSend(v2, "BOOLForKey:", v19);

    v21 = String._bridgeToObjectiveC()();
    objc_msgSend(v2, "setBool:forKey:", v20, v21);

    v22 = String._bridgeToObjectiveC()();
    objc_msgSend(v2, "setBool:forKey:", v20, v22);

    v23 = String._bridgeToObjectiveC()();
    objc_msgSend(v2, "removeObjectForKey:", v23);

    v24 = String._bridgeToObjectiveC()();
    v25 = objc_msgSend(v2, "objectForKey:", v24);

    if (v25)
    {
      _bridgeAnyObjectToAny(_:)(v46);
      swift_unknownObjectRelease(v25);
    }
    else
    {
      memset(v46, 0, sizeof(v46));
    }
    sub_10006C218((uint64_t)v46, (uint64_t)v47, (uint64_t *)&unk_100346130);
    if (v48)
    {
      v30 = sub_100063D3C(&qword_100346050);
      if (swift_dynamicCast(&v45, v47, (char *)&type metadata for Any + 8, v30, 6))
      {
        v31 = v45;
LABEL_19:
        sub_100063D3C(&qword_100345388);
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v31);
        v33 = String._bridgeToObjectiveC()();
        objc_msgSend(v2, "setObject:forKey:", isa, v33);

        v34 = String._bridgeToObjectiveC()();
        objc_msgSend(v2, "removeObjectForKey:", v34);

        v35 = String._bridgeToObjectiveC()();
        v36 = objc_msgSend(v2, "stringForKey:", v35);

        v37 = String._bridgeToObjectiveC()();
        objc_msgSend(v2, "setObject:forKey:", v36, v37);

        v38 = String._bridgeToObjectiveC()();
        objc_msgSend(v2, "removeObjectForKey:", v38);

        v39 = PKDoubleClickAllowed();
        v40 = String._bridgeToObjectiveC()();
        objc_msgSend(v2, "setBool:forKey:", v39, v40);

        LOBYTE(v39) = sub_1001E24CC(1);
        v41 = String._bridgeToObjectiveC()();
        objc_msgSend(v2, "setBool:forKey:", v39 & 1, v41);

        v42 = String._bridgeToObjectiveC()();
        objc_msgSend(v2, "setBool:forKey:", 0, v42);

        v43 = String._bridgeToObjectiveC()();
        objc_msgSend(v2, "setInteger:forKey:", 4, v43);

        return;
      }
    }
    else
    {
      sub_100098C7C((uint64_t)v47);
    }
    v31 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  if (qword_100344798 != -1)
    swift_once(&qword_100344798, sub_1001EB160);
  v26 = type metadata accessor for Logger(0);
  v27 = sub_10009673C(v26, (uint64_t)qword_10034A548);
  oslog = Logger.logObject.getter(v27);
  v28 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(oslog, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v29 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v28, "Unable to initialize Settings Suite!?", v29, 2u);
    swift_slowDealloc(v29, -1, -1);
  }

}

void sub_1001ECBCC()
{
  id v0;
  NSString v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  NSString v11;
  uint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  uint8_t *v15;
  NSObject *oslog;

  v0 = objc_allocWithZone((Class)NSUserDefaults);
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "initWithSuiteName:", v1);

  if (v2)
  {
    if (qword_100344798 != -1)
      swift_once(&qword_100344798, sub_1001EB160);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_10009673C(v3, (uint64_t)qword_10034A548);
    v5 = Logger.logObject.getter(v4);
    v9 = static os_log_type_t.info.getter(v5, v6, v7, v8);
    if (os_log_type_enabled(v5, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v9, "Performing migration from v3 to v4", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

    v11 = String._bridgeToObjectiveC()();
    objc_msgSend(v2, "setBool:forKey:", 0, v11);

    oslog = String._bridgeToObjectiveC()();
    objc_msgSend(v2, "setInteger:forKey:", 4);

  }
  else
  {
    if (qword_100344798 != -1)
      swift_once(&qword_100344798, sub_1001EB160);
    v12 = type metadata accessor for Logger(0);
    v13 = sub_10009673C(v12, (uint64_t)qword_10034A548);
    oslog = Logger.logObject.getter(v13);
    v14 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(oslog, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v14, "Unable to initialize Settings Suite!?", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
    }
  }

}

uint64_t sub_1001ECE0C()
{
  id v0;
  NSString v1;
  id v2;
  NSString v3;
  id v4;
  NSString v5;
  id v6;
  NSString v7;
  unsigned __int8 v8;
  NSString v9;
  unsigned __int8 v10;
  NSString v11;
  unsigned __int8 v12;
  NSString v13;
  unsigned __int8 v14;
  NSString v15;
  id v16;
  uint64_t v17;
  _QWORD *v18;
  NSString v19;
  unsigned __int8 v20;
  NSString v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t result;
  unsigned __int8 v48;
  id v49;
  unsigned __int8 v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;

  v0 = objc_allocWithZone((Class)NSUserDefaults);
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "initWithSuiteName:", v1);

  if (!v2)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000003CLL, 0x80000001002C2FB0, "seserviced/SECSettingsReconciliationUserDefaults.swift", 54, 2, 19, 0);
    __break(1u);
    return result;
  }
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v2, "valueForKey:", v3);

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)(&v57);
    swift_unknownObjectRelease(v4);
    sub_100098C7C((uint64_t)&v57);
  }
  else
  {
    v57 = 0u;
    v58 = 0u;
    sub_100098C7C((uint64_t)&v57);
    sub_1001EC4E4();
  }
  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend(v2, "integerForKey:", v5);

  if (v6 == (id)3)
    sub_1001ECBCC();
  v7 = String._bridgeToObjectiveC()();
  v8 = objc_msgSend(v2, "BOOLForKey:", v7);

  v9 = String._bridgeToObjectiveC()();
  v10 = objc_msgSend(v2, "BOOLForKey:", v9);

  v11 = String._bridgeToObjectiveC()();
  v12 = objc_msgSend(v2, "BOOLForKey:", v11);

  v13 = String._bridgeToObjectiveC()();
  v14 = objc_msgSend(v2, "BOOLForKey:", v13);

  v15 = String._bridgeToObjectiveC()();
  v16 = objc_msgSend(v2, "objectForKey:", v15);

  if (v16)
  {
    _bridgeAnyObjectToAny(_:)(&v54);
    swift_unknownObjectRelease(v16);
  }
  else
  {
    v54 = 0u;
    v55 = 0u;
  }
  sub_10006C218((uint64_t)&v54, (uint64_t)&v57, (uint64_t *)&unk_100346130);
  v50 = v12;
  if (!*((_QWORD *)&v58 + 1))
  {
    sub_100098C7C((uint64_t)&v57);
    goto LABEL_14;
  }
  v17 = sub_100063D3C(&qword_100346050);
  if (!swift_dynamicCast(&v53, &v57, (char *)&type metadata for Any + 8, v17, 6))
  {
LABEL_14:
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_15;
  }
  v18 = v53;
LABEL_15:
  v19 = String._bridgeToObjectiveC()();
  v20 = objc_msgSend(v2, "BOOLForKey:", v19);

  v21 = String._bridgeToObjectiveC()();
  v22 = objc_msgSend(v2, "BOOLForKey:", v21);

  v23 = v18[2];
  if (v23)
  {
    v48 = v10;
    v49 = v2;
    swift_bridgeObjectRetain(v18);
    v24 = 0;
    v25 = _swiftEmptyArrayStorage;
    v51 = v18;
    do
    {
      swift_bridgeObjectRetain(v18[v24 + 4]);
      sub_100097DC4(v27, (uint64_t *)&v54);
      v28 = v54;
      v29 = v55;
      v30 = v56;
      sub_10006C218((uint64_t)&v54, (uint64_t)&v57, &qword_1003463E8);
      if (*((_QWORD *)&v57 + 1))
      {
        if ((swift_isUniquelyReferenced_nonNull_native(v25) & 1) == 0)
          v25 = sub_1001C4D3C(0, v25[2] + 1, 1, v25);
        v32 = v25[2];
        v31 = v25[3];
        if (v32 >= v31 >> 1)
          v25 = sub_1001C4D3C((_QWORD *)(v31 > 1), v32 + 1, 1, v25);
        v25[2] = v32 + 1;
        v26 = &v25[5 * v32];
        *((_OWORD *)v26 + 2) = v28;
        *((_OWORD *)v26 + 3) = v29;
        v26[8] = v30;
        v18 = v51;
      }
      ++v24;
    }
    while (v23 != v24);
    swift_bridgeObjectRelease(v18);
    v2 = v49;
    v10 = v48;
  }
  else
  {
    v25 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease(v18);
  v33 = type metadata accessor for SECSettingsPaneReconciler.PaneConfig();
  v34 = swift_allocObject(v33, 32, 7);
  *(_BYTE *)(v34 + 16) = v8;
  *(_BYTE *)(v34 + 17) = v10;
  *(_BYTE *)(v34 + 18) = v50;
  *(_BYTE *)(v34 + 19) = v14;
  *(_BYTE *)(v34 + 20) = v20;
  *(_BYTE *)(v34 + 21) = v22;
  *(_QWORD *)(v34 + 24) = v25;
  if (qword_100344798 != -1)
    swift_once(&qword_100344798, sub_1001EB160);
  v35 = type metadata accessor for Logger(0);
  sub_10009673C(v35, (uint64_t)qword_10034A548);
  v36 = swift_retain(v34);
  v37 = Logger.logObject.getter(v36);
  v41 = static os_log_type_t.info.getter(v37, v38, v39, v40);
  if (os_log_type_enabled(v37, v41))
  {
    v42 = (uint8_t *)swift_slowAlloc(12, -1);
    v43 = swift_slowAlloc(32, -1);
    v53 = (_QWORD *)v43;
    *(_DWORD *)v42 = 136315138;
    v44 = sub_10013EAE4();
    v46 = v45;
    v52 = sub_1001C56EC(v44, v45, (uint64_t *)&v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v42 + 4, v42 + 12);
    swift_release(v34);
    swift_bridgeObjectRelease(v46);
    _os_log_impl((void *)&_mh_execute_header, v37, v41, "Read current Pane Config %s", v42, 0xCu);
    swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1, -1);
    swift_slowDealloc(v42, -1, -1);

  }
  else
  {

    swift_release(v34);
  }
  return v34;
}

void sub_1001ED468(uint64_t a1)
{
  id v2;
  NSString v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  os_log_type_t v19;
  uint8_t *v20;
  Class isa;
  NSString v22;
  Class v23;
  NSString v24;
  Class v25;
  NSString v26;
  Class v27;
  NSString v28;
  uint64_t v29;
  int64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t inited;
  uint64_t v40;
  unint64_t v41;
  char v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  Class v63;
  NSString v64;
  Class v65;
  NSString v66;
  Class v67;
  NSString v68;
  uint64_t v69;
  _QWORD *v70;
  NSObject *oslog;
  uint64_t v72;
  uint64_t v73;
  _OWORD v74[2];
  _BYTE v75[176];
  _QWORD *v76;
  uint64_t v77;

  v2 = objc_allocWithZone((Class)NSUserDefaults);
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v2, "initWithSuiteName:", v3);

  if (v4)
  {
    if (qword_100344798 != -1)
      goto LABEL_28;
    while (1)
    {
      v5 = type metadata accessor for Logger(0);
      sub_10009673C(v5, (uint64_t)qword_10034A548);
      v6 = swift_retain_n(a1, 2);
      v7 = Logger.logObject.getter(v6);
      v11 = static os_log_type_t.info.getter(v7, v8, v9, v10);
      if (os_log_type_enabled(v7, v11))
      {
        v12 = (uint8_t *)swift_slowAlloc(12, -1);
        v13 = swift_slowAlloc(32, -1);
        v72 = v13;
        *(_DWORD *)v12 = 136315138;
        v14 = sub_10013EAE4();
        v16 = v15;
        v76 = (_QWORD *)sub_1001C56EC(v14, v15, &v72);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v12 + 4, v12 + 12);
        swift_release_n(a1, 2);
        swift_bridgeObjectRelease(v16);
        _os_log_impl((void *)&_mh_execute_header, v7, v11, "Writing Pane Config %s", v12, 0xCu);
        swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v13, -1, -1);
        swift_slowDealloc(v12, -1, -1);

      }
      else
      {

        swift_release_n(a1, 2);
      }
      isa = Bool._bridgeToObjectiveC()().super.super.isa;
      v22 = String._bridgeToObjectiveC()();
      objc_msgSend(v4, "setValue:forKey:", isa, v22);

      v23 = Bool._bridgeToObjectiveC()().super.super.isa;
      v24 = String._bridgeToObjectiveC()();
      objc_msgSend(v4, "setValue:forKey:", v23, v24);

      v25 = Bool._bridgeToObjectiveC()().super.super.isa;
      v26 = String._bridgeToObjectiveC()();
      objc_msgSend(v4, "setValue:forKey:", v25, v26);

      v27 = Bool._bridgeToObjectiveC()().super.super.isa;
      v28 = String._bridgeToObjectiveC()();
      objc_msgSend(v4, "setValue:forKey:", v27, v28);

      v29 = *(_QWORD *)(a1 + 24);
      v30 = *(_QWORD *)(v29 + 16);
      v31 = _swiftEmptyArrayStorage;
      if (!v30)
        break;
      v70 = v4;
      v76 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v29);
      sub_1001929E4(0, v30, 0);
      sub_100063D3C(&qword_1003461B0);
      v69 = v29;
      v32 = (uint64_t *)(v29 + 64);
      while (1)
      {
        v33 = *(v32 - 4);
        v34 = *(v32 - 3);
        v35 = *(v32 - 2);
        v36 = *(v32 - 1);
        v37 = *v32;
        v38 = sub_100063D3C((uint64_t *)&unk_100346040);
        inited = swift_initStackObject(v38, v75);
        *(_QWORD *)(inited + 32) = 0x6449656C646E7562;
        *(_OWORD *)(inited + 16) = xmmword_100288AC0;
        *(_QWORD *)(inited + 72) = &type metadata for String;
        *(_QWORD *)(inited + 40) = 0xE800000000000000;
        *(_QWORD *)(inited + 48) = v33;
        *(_QWORD *)(inited + 56) = v34;
        *(_QWORD *)(inited + 80) = 0x6E69616D6F64;
        *(_QWORD *)(inited + 120) = &type metadata for UInt;
        *(_QWORD *)(inited + 88) = 0xE600000000000000;
        *(_QWORD *)(inited + 96) = v35;
        *(_QWORD *)(inited + 128) = 0x4E79616C70736964;
        *(_QWORD *)(inited + 168) = &type metadata for String;
        *(_QWORD *)(inited + 136) = 0xEB00000000656D61;
        *(_QWORD *)(inited + 144) = v36;
        *(_QWORD *)(inited + 152) = v37;
        v4 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(3);
        swift_bridgeObjectRetain(v34);
        swift_bridgeObjectRetain(v37);
        swift_retain(v4);
        sub_1001EDC5C(inited + 32, (uint64_t)&v72);
        v40 = v72;
        a1 = v73;
        v41 = sub_100187ED0(v72, v73);
        if ((v42 & 1) != 0)
          break;
        v43 = v4 + 8;
        *(_QWORD *)((char *)v4 + ((v41 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v41;
        v44 = (uint64_t *)(v4[6] + 16 * v41);
        *v44 = v40;
        v44[1] = a1;
        sub_10006C2B4(v74, (_OWORD *)(v4[7] + 32 * v41));
        v45 = v4[2];
        v46 = __OFADD__(v45, 1);
        v47 = v45 + 1;
        if (v46)
          goto LABEL_27;
        v4[2] = v47;
        sub_1001EDC5C(inited + 80, (uint64_t)&v72);
        v48 = v72;
        a1 = v73;
        v49 = sub_100187ED0(v72, v73);
        if ((v50 & 1) != 0)
          break;
        *(_QWORD *)((char *)v43 + ((v49 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v49;
        v51 = (uint64_t *)(v4[6] + 16 * v49);
        *v51 = v48;
        v51[1] = a1;
        sub_10006C2B4(v74, (_OWORD *)(v4[7] + 32 * v49));
        v52 = v4[2];
        v46 = __OFADD__(v52, 1);
        v53 = v52 + 1;
        if (v46)
          goto LABEL_27;
        v4[2] = v53;
        sub_1001EDC5C(inited + 128, (uint64_t)&v72);
        v54 = v72;
        v55 = v73;
        v56 = sub_100187ED0(v72, v73);
        if ((v57 & 1) != 0)
          break;
        *(_QWORD *)((char *)v43 + ((v56 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v56;
        v58 = (uint64_t *)(v4[6] + 16 * v56);
        *v58 = v54;
        v58[1] = v55;
        sub_10006C2B4(v74, (_OWORD *)(v4[7] + 32 * v56));
        v59 = v4[2];
        v46 = __OFADD__(v59, 1);
        v60 = v59 + 1;
        if (v46)
          goto LABEL_27;
        v4[2] = v60;
        swift_release(v4);
        swift_bridgeObjectRelease(inited);
        v31 = v76;
        if ((swift_isUniquelyReferenced_nonNull_native(v76) & 1) == 0)
        {
          sub_1001929E4(0, v31[2] + 1, 1);
          v31 = v76;
        }
        v62 = v31[2];
        v61 = v31[3];
        if (v62 >= v61 >> 1)
        {
          sub_1001929E4(v61 > 1, v62 + 1, 1);
          v31 = v76;
        }
        v32 += 5;
        v31[2] = v62 + 1;
        v31[v62 + 4] = v4;
        if (!--v30)
        {
          swift_bridgeObjectRelease(v69);
          v4 = v70;
          goto LABEL_25;
        }
      }
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      swift_once(&qword_100344798, sub_1001EB160);
    }
LABEL_25:
    sub_100063D3C(&qword_100345388);
    v63 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v31);
    v64 = String._bridgeToObjectiveC()();
    objc_msgSend(v4, "setValue:forKey:", v63, v64);

    v65 = Bool._bridgeToObjectiveC()().super.super.isa;
    v66 = String._bridgeToObjectiveC()();
    objc_msgSend(v4, "setValue:forKey:", v65, v66);

    v67 = Bool._bridgeToObjectiveC()().super.super.isa;
    v68 = String._bridgeToObjectiveC()();
    objc_msgSend(v4, "setValue:forKey:", v67, v68);

  }
  else
  {
    if (qword_100344798 != -1)
      swift_once(&qword_100344798, sub_1001EB160);
    v17 = type metadata accessor for Logger(0);
    v18 = sub_10009673C(v17, (uint64_t)qword_10034A548);
    oslog = Logger.logObject.getter(v18);
    v19 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(oslog, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v19, "Unable to initialize Settings Suite!?", v20, 2u);
      swift_slowDealloc(v20, -1, -1);
    }

  }
}

uint64_t sub_1001EDC5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100063D3C(&qword_1003461B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001EDCA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v0 = sub_100063D3C(&qword_10034A600);
  v1 = swift_allocObject(v0, 48, 7);
  *(_QWORD *)(v1 + 16) = &_swiftEmptySetSingleton;
  *(_QWORD *)(v1 + 32) = &_swiftEmptySetSingleton;
  v2 = sub_100063D3C(&qword_100346428);
  result = swift_allocObject(v2, 20, 7);
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)(v1 + 40) = result;
  *(_BYTE *)(v1 + 24) = 1;
  off_10034A560 = (_UNKNOWN *)v1;
  return result;
}

uint64_t type metadata accessor for PeerStore()
{
  return objc_opt_self(_TtC10seserviced9PeerStore);
}

void sub_1001EDD38(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = type metadata accessor for SHA256(0);
  __chkstk_darwin(v3, v4);
  v5 = type metadata accessor for SHA256Digest(0);
  __chkstk_darwin(v5, v6);
  v7 = sub_1000639EC((unint64_t *)&qword_100346FA8, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256, (uint64_t)&protocol conformance descriptor for SHA256);
  dispatch thunk of HashFunction.init()(v3, v7);
  __asm { BR              X10 }
}

uint64_t sub_1001EDE3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  *(_QWORD *)(v8 - 128) = v5;
  *(_WORD *)(v8 - 120) = v4;
  *(_BYTE *)(v8 - 118) = BYTE2(v4);
  *(_BYTE *)(v8 - 117) = BYTE3(v4);
  *(_BYTE *)(v8 - 116) = BYTE4(v4);
  *(_BYTE *)(v8 - 115) = BYTE5(v4);
  dispatch thunk of HashFunction.update(bufferPointer:)(v8 - 128, v8 - 128 + BYTE6(v4), v2, v6);
  sub_100063CD0(v5, v4);
  ((void (*)(uint64_t, uint64_t))dispatch thunk of HashFunction.finalize())(v2, v6);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 160) + 8))(v3, v2);
  *(_QWORD *)(v8 - 104) = v0;
  v9 = sub_1000639EC(&qword_100346FB0, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256Digest, (uint64_t)&protocol conformance descriptor for SHA256Digest);
  *(_QWORD *)(v8 - 96) = v9;
  v10 = sub_1000960AC((_QWORD *)(v8 - 128));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v7 + 16))(v10, v1, v0);
  sub_10006BA78((_QWORD *)(v8 - 128), *(_QWORD *)(v8 - 104));
  ((void (*)(_BYTE *(*)@<X0>(_BYTE *@<X0>, _BYTE *@<X1>, _QWORD *@<X8>), _QWORD, _QWORD *, uint64_t, uint64_t))dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:))(sub_10007BECC, 0, &type metadata for Data._Representation, v0, v9);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v1, v0);
  v11 = *(_QWORD *)(v8 - 144);
  sub_10006BA9C((_QWORD *)(v8 - 128));
  return v11;
}

void sub_1001EE0CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = type metadata accessor for SHA384(0);
  __chkstk_darwin(v3, v4);
  v5 = type metadata accessor for SHA384Digest(0);
  __chkstk_darwin(v5, v6);
  v7 = sub_1000639EC(&qword_10034A608, (uint64_t (*)(uint64_t))&type metadata accessor for SHA384, (uint64_t)&protocol conformance descriptor for SHA384);
  dispatch thunk of HashFunction.init()(v3, v7);
  __asm { BR              X10 }
}

uint64_t sub_1001EE1D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  *(_QWORD *)(v8 - 128) = v5;
  *(_WORD *)(v8 - 120) = v4;
  *(_BYTE *)(v8 - 118) = BYTE2(v4);
  *(_BYTE *)(v8 - 117) = BYTE3(v4);
  *(_BYTE *)(v8 - 116) = BYTE4(v4);
  *(_BYTE *)(v8 - 115) = BYTE5(v4);
  dispatch thunk of HashFunction.update(bufferPointer:)(v8 - 128, v8 - 128 + BYTE6(v4), v2, v6);
  sub_100063CD0(v5, v4);
  ((void (*)(uint64_t, uint64_t))dispatch thunk of HashFunction.finalize())(v2, v6);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 160) + 8))(v3, v2);
  *(_QWORD *)(v8 - 104) = v0;
  v9 = sub_1000639EC(qword_10034A610, (uint64_t (*)(uint64_t))&type metadata accessor for SHA384Digest, (uint64_t)&protocol conformance descriptor for SHA384Digest);
  *(_QWORD *)(v8 - 96) = v9;
  v10 = sub_1000960AC((_QWORD *)(v8 - 128));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v7 + 16))(v10, v1, v0);
  sub_10006BA78((_QWORD *)(v8 - 128), *(_QWORD *)(v8 - 104));
  ((void (*)(_BYTE *(*)@<X0>(_BYTE *@<X0>, _BYTE *@<X1>, _QWORD *@<X8>), _QWORD, _QWORD *, uint64_t, uint64_t))dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:))(sub_10007BECC, 0, &type metadata for Data._Representation, v0, v9);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v1, v0);
  v11 = *(_QWORD *)(v8 - 144);
  sub_10006BA9C((_QWORD *)(v8 - 128));
  return v11;
}

uint64_t sub_1001EE460(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), unint64_t *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  result = __DataStorage._bytes.getter(a1);
  v15 = result;
  if (result)
  {
    result = __DataStorage._offset.getter(result, v13, v14);
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v15 += a1 - result;
  }
  v16 = __OFSUB__(a2, a1);
  v17 = a2 - a1;
  if (v16)
  {
    __break(1u);
    goto LABEL_13;
  }
  v18 = __DataStorage._length.getter(result, v13, v14);
  if (v18 >= v17)
    v19 = v17;
  else
    v19 = v18;
  v20 = v15 + v19;
  if (v15)
    v21 = v20;
  else
    v21 = 0;
  v22 = a5(0);
  v23 = sub_1000639EC(a6, a5, a7);
  return dispatch thunk of HashFunction.update(bufferPointer:)(v15, v21, v22, v23);
}

uint64_t sub_1001EE534(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 32);
}

uint64_t type metadata accessor for UserDefaultBackedCodable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100099EA0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UserDefaultBackedCodable);
}

uint64_t sub_1001EE548(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

uint64_t sub_1001EE550(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_10028D8B8;
  v4[1] = &unk_10028D8B8;
  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = &unk_10028D8D0;
    swift_initStructMetadata(a1, 0, 4, v4, a1 + 24);
    return 0;
  }
  return result;
}

uint64_t *sub_1001EE5D0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || v7 + ((v6 + 32) & (unint64_t)~v6) + 1 > 0x18)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain(v10);
  }
  else
  {
    v11 = a2[1];
    *a1 = *a2;
    a1[1] = v11;
    v12 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
    v13 = (_QWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v12 = *v13;
    v14 = v13[1];
    v12[1] = v14;
    v15 = ((unint64_t)v12 + v6 + 16) & ~v6;
    v16 = ((unint64_t)v13 + v6 + 16) & ~v6;
    v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v14);
    v17(v15, v16, v4);
    *(_BYTE *)(v15 + v7) = *(_BYTE *)(v16 + v7);
  }
  return a1;
}

uint64_t sub_1001EE6D0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = (a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + 8));
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((v4 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_QWORD *sub_1001EE724(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v7 = v6[1];
  v5[1] = v7;
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = ((unint64_t)v5 + v10 + 16) & ~v10;
  v12 = ((unint64_t)v6 + v10 + 16) & ~v10;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v7);
  v13(v11, v12, v8);
  *(_BYTE *)(v11 + *(_QWORD *)(v9 + 64)) = *(_BYTE *)(v12 + *(_QWORD *)(v9 + 64));
  return a1;
}

_QWORD *sub_1001EE7D0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v9 = (_QWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = ((unint64_t)v8 + v13 + 16) & ~v13;
  v15 = ((unint64_t)v9 + v13 + 16) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v12 + 24))(v14, v15);
  *(_BYTE *)(v14 + *(_QWORD *)(v12 + 64)) = *(_BYTE *)(v15 + *(_QWORD *)(v12 + 64));
  return a1;
}

_OWORD *sub_1001EE894(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = (_OWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_OWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)v4 + v7 + 16) & ~v7;
  v9 = ((unint64_t)v5 + v7 + 16) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v8, v9);
  *(_BYTE *)(v8 + *(_QWORD *)(v6 + 64)) = *(_BYTE *)(v9 + *(_QWORD *)(v6 + 64));
  return a1;
}

_QWORD *sub_1001EE918(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v9 = (_QWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v8 = *v9;
  v10 = v8[1];
  v8[1] = v9[1];
  swift_bridgeObjectRelease(v10);
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = ((unint64_t)v8 + v12 + 16) & ~v12;
  v14 = ((unint64_t)v9 + v12 + 16) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v11 + 40))(v13, v14);
  *(_BYTE *)(v13 + *(_QWORD *)(v11 + 64)) = *(_BYTE *)(v14 + *(_QWORD *)(v11 + 64));
  return a1;
}

uint64_t sub_1001EE9C4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = *(_QWORD *)(v4 + 64) + ((v7 + 32) & ~v7) + 1;
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((((a1 + 23) & 0xFFFFFFFFFFFFFFF8) + v7 + 16) & ~v7);
      v15 = *(_QWORD *)(a1 + 8);
      if (v15 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1001EEA9C + 4 * byte_10028D840[(v9 - 1)]))();
}

void sub_1001EEB14(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64)
     + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + 1;
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = &dword_100000004;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = &_mh_execute_header.magic + 1;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if (*(_DWORD *)(v5 + 64) + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~*(unsigned __int8 *)(v5 + 80)) != -1)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t type metadata accessor for UserDefaultBacked(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100099EA0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UserDefaultBacked);
}

uint64_t sub_1001EEDF8()
{
  uint64_t v0;
  uint64_t result;

  v0 = sub_100063D3C(&qword_10034A720);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  result = DispatchSpecificKey.init()();
  qword_10034A718 = result;
  return result;
}

void sub_1001EEE38(uint64_t a1, uint64_t a2)
{
  id v4;
  _QWORD v5[4];
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v7 = a2;
  v5[2] = sub_1001EEF2C;
  v5[3] = &v6;
  sub_100071AEC();
  if (qword_1003447A8 != -1)
    swift_once(&qword_1003447A8, sub_1001EEDF8);
  static OS_dispatch_queue.getSpecific<A>(key:)(&v8, qword_10034A718);
  if ((v9 & 1) != 0 || v8 != 0x534F534543555245)
  {
    v4 = (id)sub_100050680(a1);
    OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), sub_1001EEF38, v5, &type metadata for () + 1);

  }
  else
  {
    (*(void (**)(uint64_t))(a2 + 16))(a2);
  }
}

uint64_t sub_1001EEF2C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_1001EEF38()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

id sub_1001EEF58()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DSK(0)), "init");
  qword_100354EE0 = (uint64_t)result;
  return result;
}

uint64_t sub_1001EEFA4(uint64_t a1)
{
  return sub_1001EF044(a1, 0xD000000000000018, 0x80000001002C3180, &qword_100354EE8);
}

id sub_1001EEFE4(uint64_t a1, uint64_t a2, _QWORD *a3, id *a4, uint64_t a5)
{
  if (*a3 != -1)
    swift_once(a3, a5);
  return *a4;
}

uint64_t sub_1001EF020(uint64_t a1)
{
  return sub_1001EF044(a1, 0xD000000000000028, 0x80000001002C31A0, &qword_100354EF0);
}

uint64_t sub_1001EF044(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;

  v22 = a3;
  v23 = a4;
  v21 = a2;
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin();
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin();
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS.QoSClass(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin();
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DispatchQoS(0);
  __chkstk_darwin();
  v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100071AEC();
  (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for DispatchQoS.QoSClass.userInitiated(_:), v11);
  DispatchQoS.init(qosClass:relativePriority:)(v14, 0);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v7);
  v24 = _swiftEmptyArrayStorage;
  v17 = sub_1001F15CC();
  v18 = sub_100063D3C(&qword_100346E10);
  v19 = sub_10007EF60((unint64_t *)&qword_100346E18, &qword_100346E10, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v18, v19, v4, v17);
  result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v21, v22, v16, v6, v10, 0);
  *v23 = result;
  return result;
}

id sub_1001EF23C()
{
  _BYTE *v0;
  _BYTE *v1;
  objc_class *ObjectType;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id v18;
  _QWORD aBlock[5];
  uint64_t v21;
  objc_super v22;

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType(v0);
  v3 = type metadata accessor for DispatchQoS.QoSClass(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[OBJC_IVAR____TtC10seserviced3DSK_isRunning] = 0;
  v1[OBJC_IVAR____TtC10seserviced3DSK_isLowPowerModeEnabled] = 0;
  v8 = SESLoggingSubsystem;
  v9 = v1;
  v10 = String.init(cString:)(v8);
  Logger.init(subsystem:category:)(v10);
  v11 = &v9[OBJC_IVAR____TtC10seserviced3DSK_lowPowerHandlerName];
  *(_QWORD *)v11 = 0xD000000000000016;
  *((_QWORD *)v11 + 1) = 0x80000001002C31D0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC10seserviced3DSK_runningModules] = &_swiftEmptySetSingleton;

  v22.receiver = v9;
  v22.super_class = ObjectType;
  v12 = objc_msgSendSuper2(&v22, "init");
  sub_100071AEC();
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v7, enum case for DispatchQoS.QoSClass.default(_:), v3);
  v13 = v12;
  v14 = (void *)static OS_dispatch_queue.global(qos:)(v7);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  v15 = swift_allocObject(&unk_10030E330, 24, 7);
  *(_QWORD *)(v15 + 16) = v13;
  aBlock[4] = sub_1001F1A08;
  v21 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10017BF6C;
  aBlock[3] = &unk_10030E348;
  v16 = _Block_copy(aBlock);
  v17 = v21;
  v18 = v13;
  swift_release(v17);
  os_state_add_handler(v14, v16);

  _Block_release(v16);
  return v18;
}

uint64_t sub_1001EF448()
{
  uint64_t v0;
  char v1;
  char isUniquelyReferenced_nonNull_native;
  char v3;
  char v4;
  uint64_t *v5;
  uint64_t v6;
  int64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  Class isa;
  _DWORD *v26;
  uint64_t result;
  void *v28;
  _OWORD v29[2];
  __int128 v30;
  void *v31;

  v1 = *(_BYTE *)(v0 + OBJC_IVAR____TtC10seserviced3DSK_isRunning);
  v31 = &type metadata for Bool;
  LOBYTE(v30) = v1;
  sub_10006C2B4(&v30, v29);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  v28 = &_swiftEmptyDictionarySingleton;
  sub_10018DEC0(v29, 0x6E696E6E75527369, 0xE900000000000067, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease(0x8000000000000000);
  v3 = *(_BYTE *)(v0 + OBJC_IVAR____TtC10seserviced3DSK_isLowPowerModeEnabled);
  v31 = &type metadata for Bool;
  LOBYTE(v30) = v3;
  sub_10006C2B4(&v30, v29);
  v4 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  v28 = &_swiftEmptyDictionarySingleton;
  sub_10018DEC0(v29, 0xD000000000000015, 0x80000001002BE930, v4);
  swift_bridgeObjectRelease(0x8000000000000000);
  v5 = (uint64_t *)(v0 + OBJC_IVAR____TtC10seserviced3DSK_runningModules);
  swift_beginAccess(v5, &v28, 0, 0);
  v6 = *v5;
  v7 = *(_QWORD *)(*v5 + 16);
  v8 = _swiftEmptyArrayStorage;
  if (v7)
  {
    *(_QWORD *)&v30 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v6);
    sub_100192924(0, v7, 0);
    v8 = (_QWORD *)v30;
    v9 = sub_1001F9BBC(v6);
    v11 = v10;
    v13 = v12 & 1;
    v14 = v6 + 56;
    while ((v9 & 0x8000000000000000) == 0)
    {
      v14 = 1 << *(_BYTE *)(v6 + 32);
      if (v9 >= v14)
        break;
      v14 = *(_QWORD *)(v6 + 56 + (((unint64_t)v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9;
      if ((v14 & 1) == 0)
        goto LABEL_17;
      v14 = *(unsigned int *)(v6 + 36);
      if ((_DWORD)v14 != (_DWORD)v11)
        goto LABEL_18;
      v14 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v9);
      if (v14)
      {
        if (v14 != 1)
          goto LABEL_19;
        v15 = 0xE400000000000000;
        v16 = 1852799308;
      }
      else
      {
        v15 = 0xE600000000000000;
        v16 = 0x616873696C41;
      }
      *(_QWORD *)&v30 = v8;
      v18 = v8[2];
      v17 = v8[3];
      if (v18 >= v17 >> 1)
      {
        sub_100192924(v17 > 1, v18 + 1, 1);
        v8 = (_QWORD *)v30;
      }
      v8[2] = v18 + 1;
      v19 = &v8[2 * v18];
      v19[4] = v16;
      v19[5] = v15;
      v20 = sub_100195EE4(v9, v11, v13 & 1, v6);
      v9 = v20;
      v11 = v21;
      v13 = v22 & 1;
      if (!--v7)
      {
        sub_1000960E8(v20, v21, v22 & 1);
        swift_bridgeObjectRelease(v6);
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    *(_QWORD *)&v29[0] = v14;
    result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for DSK.Module, v29, &type metadata for DSK.Module, &type metadata for Int);
    __break(1u);
  }
  else
  {
LABEL_15:
    v31 = (void *)sub_100063D3C((uint64_t *)&unk_100346060);
    *(_QWORD *)&v30 = v8;
    sub_10006C2B4(&v30, v29);
    v23 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    sub_10018DEC0(v29, 0x4D676E696E6E7572, 0xEE0073656C75646FLL, v23);
    swift_bridgeObjectRelease(0x8000000000000000);
    v24 = sub_10017D088((uint64_t)&_swiftEmptyDictionarySingleton);
    swift_bridgeObjectRelease(&_swiftEmptyDictionarySingleton);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v24);
    v26 = sub_100015734((uint64_t)"dsk.state", (uint64_t)isa);

    return (uint64_t)v26;
  }
  return result;
}

void sub_1001EF7E8(Swift::UInt a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  os_log_type_t v19;
  uint8_t *v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  os_log_type_t v42;
  uint64_t v43;
  unint64_t v44;
  os_log_type_t v45;
  const char *v46;
  uint64_t *v47;
  uint64_t v48[3];
  uint64_t v49;
  uint64_t v50;

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (uint64_t *)((char *)v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v9 = qword_100354EE8;
  *v8 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_47:
    swift_once(&qword_1003445A0, sub_1000B26B0);
    goto LABEL_11;
  }
  if (!a1)
  {
    v11 = sub_10017B658();
    if ((v11 & 1) != 0)
      goto LABEL_6;
LABEL_23:
    v30 = Logger.logObject.getter(v11);
    v34 = static os_log_type_t.info.getter(v30, v31, v32, v33);
    if (os_log_type_enabled(v30, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(12, -1);
      v36 = swift_slowAlloc(32, -1);
      v48[0] = v36;
      *(_DWORD *)v35 = 136315138;
      if (a1)
      {
        v38 = 0xE400000000000000;
        v37 = 1852799308;
      }
      else
      {
        v37 = 0x616873696C41;
        v38 = 0xE600000000000000;
      }
      v49 = sub_1001C56EC(v37, v38, v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v35 + 4, v35 + 12);
      swift_bridgeObjectRelease(v38);
      v45 = v34;
      v46 = "Rejecting DSK %s start";
      goto LABEL_44;
    }
LABEL_45:

    return;
  }
  if (a1 != 1)
    goto LABEL_48;
  v11 = sub_10007D674();
  if ((v11 & 1) == 0)
    goto LABEL_23;
LABEL_6:
  swift_beginAccess(v2 + OBJC_IVAR____TtC10seserviced3DSK_runningModules, v48, 33, 0);
  v12 = sub_1000C7394((Swift::UInt *)&v49, a1);
  v13 = swift_endAccess(v48);
  if ((v12 & 1) == 0)
  {
    v30 = Logger.logObject.getter(v13);
    v42 = static os_log_type_t.info.getter(v30, v39, v40, v41);
    if (os_log_type_enabled(v30, v42))
    {
      v35 = (uint8_t *)swift_slowAlloc(12, -1);
      v36 = swift_slowAlloc(32, -1);
      v48[0] = v36;
      *(_DWORD *)v35 = 136315138;
      if (a1)
      {
        v44 = 0xE400000000000000;
        v43 = 1852799308;
      }
      else
      {
        v43 = 0x616873696C41;
        v44 = 0xE600000000000000;
      }
      v49 = sub_1001C56EC(v43, v44, v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v35 + 4, v35 + 12);
      swift_bridgeObjectRelease(v44);
      v45 = v42;
      v46 = "DSK %s is already running";
LABEL_44:
      _os_log_impl((void *)&_mh_execute_header, v30, v45, v46, v35, 0xCu);
      swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1, -1);
      swift_slowDealloc(v35, -1, -1);
      goto LABEL_45;
    }
    goto LABEL_45;
  }
  v14 = OBJC_IVAR____TtC10seserviced3DSK_isRunning;
  if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC10seserviced3DSK_isRunning) & 1) != 0)
    goto LABEL_18;
  v15 = Logger.logObject.getter(v13);
  v19 = static os_log_type_t.info.getter(v15, v16, v17, v18);
  if (os_log_type_enabled(v15, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v19, "Starting DSK", v20, 2u);
    swift_slowDealloc(v20, -1, -1);
  }

  *(_BYTE *)(v2 + v14) = 1;
  if (qword_1003445A0 != -1)
    goto LABEL_47;
LABEL_11:
  sub_1000B3C60();
  if (qword_1003445F0 != -1)
    swift_once(&qword_1003445F0, sub_100128818);
  sub_100129008();
  if (qword_100344690 != -1)
    swift_once(&qword_100344690, sub_100182BE4);
  sub_1001834CC();
  if (qword_100344608 != -1)
    swift_once(&qword_100344608, sub_100141A78);
  sub_100141F9C();
LABEL_18:
  v21 = Logger.logObject.getter(v13);
  v25 = static os_log_type_t.info.getter(v21, v22, v23, v24);
  if (os_log_type_enabled(v21, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc(12, -1);
    v27 = swift_slowAlloc(32, -1);
    v48[0] = v27;
    *(_DWORD *)v26 = 136315138;
    if (a1)
    {
      if (a1 != 1)
      {
        v49 = a1;
        v47 = &v49;
        goto LABEL_50;
      }
      v29 = 0xE400000000000000;
      v28 = 1852799308;
    }
    else
    {
      v28 = 0x616873696C41;
      v29 = 0xE600000000000000;
    }
    v49 = sub_1001C56EC(v28, v29, v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v26 + 4, v26 + 12);
    swift_bridgeObjectRelease(v29);
    _os_log_impl((void *)&_mh_execute_header, v21, v25, "Starting DSK %s", v26, 0xCu);
    swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v26, -1, -1);
  }

  if (a1 == 1)
  {
    if (qword_100344568 != -1)
      swift_once(&qword_100344568, sub_100073158);
    sub_100073474();
    return;
  }
  if (a1)
  {
LABEL_48:
    v48[0] = a1;
    v47 = v48;
LABEL_50:
    _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for DSK.Module, v47, &type metadata for DSK.Module, &type metadata for Int);
    __break(1u);
    return;
  }
  if (qword_100344680 != -1)
    swift_once(&qword_100344680, sub_10016E9A8);
  sub_10016EDBC();
}

void sub_1001EFE98(Swift::UInt a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  os_log_type_t v39;
  uint8_t *v40;
  os_unfair_lock_s *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45[3];
  uint64_t v46;
  uint64_t v47;

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v9 = (void *)qword_100354EE8;
  *(_QWORD *)v8 = qword_100354EE8;
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  v10 = v9;
  v11 = _dispatchPreconditionTest(_:)(v8);
  v12 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  if ((v11 & 1) == 0)
  {
    __break(1u);
    goto LABEL_42;
  }
  v11 = OBJC_IVAR____TtC10seserviced3DSK_isRunning;
  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC10seserviced3DSK_isRunning) != 1
    || (v8 = (char *)(v2 + OBJC_IVAR____TtC10seserviced3DSK_runningModules),
        swift_beginAccess(v2 + OBJC_IVAR____TtC10seserviced3DSK_runningModules, v45, 33, 0),
        sub_1000D354C(a1),
        v14 = v13,
        v12 = swift_endAccess(v45),
        (v14 & 1) != 0))
  {
    v25 = Logger.logObject.getter(v12);
    v29 = static os_log_type_t.info.getter(v25, v26, v27, v28);
    if (os_log_type_enabled(v25, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(12, -1);
      v31 = swift_slowAlloc(32, -1);
      v45[0] = v31;
      *(_DWORD *)v30 = 136315138;
      if (a1)
      {
        if (a1 != 1)
          goto LABEL_43;
        v33 = 0xE400000000000000;
        v32 = 1852799308;
      }
      else
      {
        v32 = 0x616873696C41;
        v33 = 0xE600000000000000;
      }
      v46 = sub_1001C56EC(v32, v33, v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v30 + 4, v30 + 12);
      swift_bridgeObjectRelease(v33);
      _os_log_impl((void *)&_mh_execute_header, v25, v29, "DSK %s is not running", v30, 0xCu);
      swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v30, -1, -1);
    }

    return;
  }
  v15 = v2 + OBJC_IVAR____TtC10seserviced3DSK_logger;
  v16 = Logger.logObject.getter(v12);
  v20 = static os_log_type_t.info.getter(v16, v17, v18, v19);
  if (os_log_type_enabled(v16, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(12, -1);
    v22 = swift_slowAlloc(32, -1);
    v45[0] = v22;
    *(_DWORD *)v21 = 136315138;
    v44 = v15;
    if (!a1)
    {
      v23 = 0x616873696C41;
      v24 = 0xE600000000000000;
      goto LABEL_22;
    }
    if (a1 == 1)
    {
      v24 = 0xE400000000000000;
      v23 = 1852799308;
LABEL_22:
      v46 = sub_1001C56EC(v23, v24, v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v21 + 4, v21 + 12);
      swift_bridgeObjectRelease(v24);
      _os_log_impl((void *)&_mh_execute_header, v16, v20, "Stopping DSK %s", v21, 0xCu);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);

      if (a1 != 1)
        goto LABEL_23;
      goto LABEL_18;
    }
LABEL_43:
    v46 = a1;
    v43 = &v46;
    goto LABEL_45;
  }

  if (a1 != 1)
  {
LABEL_23:
    if (!a1)
    {
      if (qword_100344680 != -1)
        swift_once(&qword_100344680, sub_10016E9A8);
      sub_10016FD04();
      goto LABEL_27;
    }
    v45[0] = a1;
    v43 = v45;
LABEL_45:
    _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for DSK.Module, v43, &type metadata for DSK.Module, &type metadata for Int);
    __break(1u);
    return;
  }
LABEL_18:
  if (qword_100344568 != -1)
LABEL_42:
    swift_once(&qword_100344568, sub_100073158);
  sub_100073CC0();
LABEL_27:
  if (!*(_QWORD *)(*(_QWORD *)v8 + 16))
  {
    v35 = Logger.logObject.getter(v34);
    v39 = static os_log_type_t.info.getter(v35, v36, v37, v38);
    if (os_log_type_enabled(v35, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v40 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v39, "Stopping DSK", v40, 2u);
      swift_slowDealloc(v40, -1, -1);
    }

    if (qword_1003445A0 != -1)
      swift_once(&qword_1003445A0, sub_1000B26B0);
    sub_1000B3F68();
    if (qword_1003445F0 != -1)
      swift_once(&qword_1003445F0, sub_100128818);
    sub_10012965C();
    if (qword_100344690 != -1)
      swift_once(&qword_100344690, sub_100182BE4);
    sub_10018385C();
    if (qword_100344608 != -1)
      swift_once(&qword_100344608, sub_100141A78);
    sub_1001424A4();
    if (qword_1003447A0 != -1)
      swift_once(&qword_1003447A0, sub_1001EDCA4);
    v41 = (os_unfair_lock_s *)(*((_QWORD *)off_10034A560 + 5) + 16);
    os_unfair_lock_lock(v41);
    sub_10016B0FC(v42, sub_1001F1994);
    os_unfair_lock_unlock(v41);
    *(_BYTE *)(v2 + v11) = 0;
  }
}

void sub_1001F04E0()
{
  _BYTE *v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  os_log_type_t v21;
  uint8_t *v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  os_log_type_t v27;
  uint8_t *v28;
  char v30[24];

  v2 = v0;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = &v30[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v8 = qword_100354EE8;
  *(_QWORD *)v7 = qword_100354EE8;
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  v9 = (id)v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  v10 = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  if ((v8 & 1) == 0)
  {
    __break(1u);
LABEL_19:
    swift_once(&qword_1003445A0, sub_1000B26B0);
LABEL_8:
    sub_1000B3F68();
    if (qword_1003445F0 != -1)
      swift_once(&qword_1003445F0, sub_100128818);
    sub_10012965C();
    if (qword_100344690 != -1)
      swift_once(&qword_100344690, sub_100182BE4);
    sub_10018385C();
    if (qword_100344608 != -1)
      swift_once(&qword_100344608, sub_100141A78);
    sub_1001424A4();
    v2[v1] = 0;
    return;
  }
  v1 = OBJC_IVAR____TtC10seserviced3DSK_isRunning;
  if (v2[OBJC_IVAR____TtC10seserviced3DSK_isRunning] == 1)
  {
    v11 = (uint64_t *)&v2[OBJC_IVAR____TtC10seserviced3DSK_runningModules];
    swift_beginAccess(&v2[OBJC_IVAR____TtC10seserviced3DSK_runningModules], v30, 1, 0);
    v12 = *v11;
    v13 = v2;
    swift_bridgeObjectRetain(v12);
    sub_1001F1614(v14, (uint64_t)v13);
    swift_bridgeObjectRelease(v12);

    v15 = *v11;
    *v11 = (uint64_t)&_swiftEmptySetSingleton;
    v16 = swift_bridgeObjectRelease(v15);
    v17 = Logger.logObject.getter(v16);
    v21 = static os_log_type_t.info.getter(v17, v18, v19, v20);
    if (os_log_type_enabled(v17, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v21, "Stopping DSK", v22, 2u);
      swift_slowDealloc(v22, -1, -1);
    }

    if (qword_1003445A0 == -1)
      goto LABEL_8;
    goto LABEL_19;
  }
  v23 = Logger.logObject.getter(v10);
  v27 = static os_log_type_t.info.getter(v23, v24, v25, v26);
  if (os_log_type_enabled(v23, v27))
  {
    v28 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, v27, "DSK is not running", v28, 2u);
    swift_slowDealloc(v28, -1, -1);
  }

}

Swift::Int sub_1001F0834()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1001F0878()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1001F08A0()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

_QWORD *sub_1001F08E0@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2;

  v2 = *result != 1 && *result != 0;
  *(_QWORD *)a2 = *result == 1;
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

uint64_t sub_1001F0910(uint64_t a1)
{
  uint64_t *v1;
  uint64_t result;
  uint64_t v3;

  if (!*v1)
    return 0x616873696C41;
  if (*v1 == 1)
    return 1852799308;
  v3 = *v1;
  result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(a1, &v3, a1, &type metadata for Int);
  __break(1u);
  return result;
}

uint64_t sub_1001F09D8()
{
  return type metadata accessor for DSK(0);
}

uint64_t type metadata accessor for DSK(uint64_t a1)
{
  uint64_t result;

  result = qword_10034A770;
  if (!qword_10034A770)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DSK);
  return result;
}

uint64_t sub_1001F0A1C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_10028D910;
  v4[1] = &unk_10028D910;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = &unk_10028D928;
    v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for SessionChecks()
{
  return &type metadata for SessionChecks;
}

ValueMetadata *type metadata accessor for DSK.Module()
{
  return &type metadata for DSK.Module;
}

unint64_t sub_1001F0AD0()
{
  unint64_t result;

  result = qword_10034A780;
  if (!qword_10034A780)
  {
    result = swift_getWitnessTable(&unk_10028D9F8, &type metadata for DSK.Module);
    atomic_store(result, (unint64_t *)&qword_10034A780);
  }
  return result;
}

unint64_t sub_1001F0B18()
{
  unint64_t result;

  result = qword_10034A788;
  if (!qword_10034A788)
  {
    result = swift_getWitnessTable(&unk_10028DA50, &type metadata for SessionChecks);
    atomic_store(result, (unint64_t *)&qword_10034A788);
  }
  return result;
}

unint64_t sub_1001F0B60()
{
  unint64_t result;

  result = qword_10034A790;
  if (!qword_10034A790)
  {
    result = swift_getWitnessTable(&unk_10028DA20, &type metadata for SessionChecks);
    atomic_store(result, (unint64_t *)&qword_10034A790);
  }
  return result;
}

unint64_t sub_1001F0BA8()
{
  unint64_t result;

  result = qword_10034A798;
  if (!qword_10034A798)
  {
    result = swift_getWitnessTable(&unk_10028DA78, &type metadata for SessionChecks);
    atomic_store(result, (unint64_t *)&qword_10034A798);
  }
  return result;
}

unint64_t sub_1001F0BF0()
{
  unint64_t result;

  result = qword_10034A7A0;
  if (!qword_10034A7A0)
  {
    result = swift_getWitnessTable(&unk_10028DAB0, &type metadata for SessionChecks);
    atomic_store(result, (unint64_t *)&qword_10034A7A0);
  }
  return result;
}

uint64_t sub_1001F0C34@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v4 = *a1;
  v3 = a1[1];
  sub_100096CB0((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  *a2 = v4;
  a2[1] = v3;
  return swift_bridgeObjectRetain(v3);
}

uint64_t sub_1001F0C74(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t i;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  char v35;
  unint64_t v36;
  uint64_t v37;
  _BOOL8 v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  _OWORD v48[2];
  _OWORD v49[2];
  __int128 v50;
  _OWORD v51[2];
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v9 = -1 << *(_BYTE *)(a1 + 32);
  v10 = ~v9;
  v11 = *(_QWORD *)(a1 + 64);
  v12 = -v9;
  v52 = a1;
  v53 = a1 + 64;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  else
    v13 = -1;
  v54 = v10;
  v55 = 0;
  v56 = v13 & v11;
  v57 = a2;
  v58 = a3;
  swift_bridgeObjectRetain(a1);
  swift_retain(a3);
  sub_1001F0FC8(&v50);
  v14 = *((_QWORD *)&v50 + 1);
  if (!*((_QWORD *)&v50 + 1))
    goto LABEL_27;
  v15 = v50;
  sub_10006C2B4(v51, v49);
  v16 = *(_QWORD **)a5;
  v18 = sub_100187ED0(v15, v14);
  v19 = v16[2];
  v20 = (v17 & 1) == 0;
  v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v22 = v17;
  if (v16[3] >= v21)
  {
    if ((a4 & 1) != 0)
    {
      if ((v17 & 1) != 0)
        goto LABEL_12;
    }
    else
    {
      sub_10019000C();
      if ((v22 & 1) != 0)
        goto LABEL_12;
    }
LABEL_14:
    v26 = *(_QWORD **)a5;
    *(_QWORD *)(*(_QWORD *)a5 + 8 * (v18 >> 6) + 64) |= 1 << v18;
    v27 = (uint64_t *)(v26[6] + 16 * v18);
    *v27 = v15;
    v27[1] = v14;
    sub_10006C2B4(v49, (_OWORD *)(v26[7] + 32 * v18));
    v28 = v26[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (v29)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    v26[2] = v30;
LABEL_16:
    sub_1001F0FC8(&v50);
    for (i = *((_QWORD *)&v50 + 1); *((_QWORD *)&v50 + 1); i = *((_QWORD *)&v50 + 1))
    {
      v33 = v50;
      sub_10006C2B4(v51, v49);
      v34 = *(_QWORD **)a5;
      v36 = sub_100187ED0(v33, i);
      v37 = v34[2];
      v38 = (v35 & 1) == 0;
      v39 = v37 + v38;
      if (__OFADD__(v37, v38))
        goto LABEL_28;
      v40 = v35;
      if (v34[3] < v39)
      {
        sub_1001897D4(v39, 1);
        v41 = sub_100187ED0(v33, i);
        if ((v40 & 1) != (v42 & 1))
          goto LABEL_30;
        v36 = v41;
      }
      if ((v40 & 1) != 0)
      {
        sub_100096CB0((uint64_t)v49, (uint64_t)v48);
        sub_10006BA9C(v49);
        swift_bridgeObjectRelease(i);
        v32 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)a5 + 56) + 32 * v36);
        sub_10006BA9C(v32);
        sub_10006C2B4(v48, v32);
      }
      else
      {
        v43 = *(_QWORD **)a5;
        *(_QWORD *)(*(_QWORD *)a5 + 8 * (v36 >> 6) + 64) |= 1 << v36;
        v44 = (uint64_t *)(v43[6] + 16 * v36);
        *v44 = v33;
        v44[1] = i;
        sub_10006C2B4(v49, (_OWORD *)(v43[7] + 32 * v36));
        v45 = v43[2];
        v29 = __OFADD__(v45, 1);
        v46 = v45 + 1;
        if (v29)
          goto LABEL_29;
        v43[2] = v46;
      }
      sub_1001F0FC8(&v50);
    }
LABEL_27:
    swift_release(a3);
    swift_bridgeObjectRelease(a1);
    sub_10007EF58(v52);
    return swift_release(v58);
  }
  sub_1001897D4(v21, a4 & 1);
  v23 = sub_100187ED0(v15, v14);
  if ((v22 & 1) == (v24 & 1))
  {
    v18 = v23;
    if ((v22 & 1) == 0)
      goto LABEL_14;
LABEL_12:
    sub_100096CB0((uint64_t)v49, (uint64_t)v48);
    sub_10006BA9C(v49);
    swift_bridgeObjectRelease(v14);
    v25 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)a5 + 56) + 32 * v18);
    sub_10006BA9C(v25);
    sub_10006C2B4(v48, v25);
    goto LABEL_16;
  }
LABEL_30:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_1001F0FC8@<X0>(_OWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  void (*v19)(_OWORD *);
  uint64_t result;
  _OWORD v21[3];
  _OWORD v22[3];
  __int128 v23;
  _OWORD v24[2];

  v3 = *v1;
  v4 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  v7 = v5;
  v8 = v1[4];
  if (v8)
  {
    v9 = (v8 - 1) & v8;
    v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    v11 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v10);
    v13 = *v11;
    v12 = v11[1];
    sub_100096CB0(*(_QWORD *)(v3 + 56) + 32 * v10, (uint64_t)v24);
    *(_QWORD *)&v23 = v13;
    *((_QWORD *)&v23 + 1) = v12;
    swift_bridgeObjectRetain(v12);
    goto LABEL_23;
  }
  v14 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  v15 = (unint64_t)(v6 + 64) >> 6;
  if (v14 < v15)
  {
    v16 = *(_QWORD *)(v4 + 8 * v14);
    if (v16)
    {
LABEL_7:
      v9 = (v16 - 1) & v16;
      v10 = __clz(__rbit64(v16)) + (v14 << 6);
      v7 = v14;
      goto LABEL_3;
    }
    v17 = v5 + 2;
    v7 = v5 + 1;
    if (v5 + 2 < v15)
    {
      v16 = *(_QWORD *)(v4 + 8 * v17);
      if (v16)
      {
LABEL_10:
        v14 = v17;
        goto LABEL_7;
      }
      v7 = v5 + 2;
      if (v5 + 3 < v15)
      {
        v16 = *(_QWORD *)(v4 + 8 * (v5 + 3));
        if (v16)
        {
          v14 = v5 + 3;
          goto LABEL_7;
        }
        v17 = v5 + 4;
        v7 = v5 + 3;
        if (v5 + 4 < v15)
        {
          v16 = *(_QWORD *)(v4 + 8 * v17);
          if (v16)
            goto LABEL_10;
          v14 = v5 + 5;
          v7 = v5 + 4;
          if (v5 + 5 < v15)
          {
            v16 = *(_QWORD *)(v4 + 8 * v14);
            if (v16)
              goto LABEL_7;
            v7 = v15 - 1;
            v18 = v5 + 6;
            while (v15 != v18)
            {
              v16 = *(_QWORD *)(v4 + 8 * v18++);
              if (v16)
              {
                v14 = v18 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  v9 = 0;
  memset(v24, 0, sizeof(v24));
  v23 = 0u;
LABEL_23:
  *v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  v19 = (void (*)(_OWORD *))v1[5];
  result = sub_1001F1544((uint64_t)&v23, (uint64_t)v22);
  if (*((_QWORD *)&v22[0] + 1))
  {
    v21[0] = v22[0];
    v21[1] = v22[1];
    v21[2] = v22[2];
    v19(v21);
    return sub_1001F158C((uint64_t)v21);
  }
  else
  {
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

void sub_1001F119C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t inited;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  id v34;
  uint64_t v35;
  NSDictionary v36;
  Class isa;
  _OWORD v39[2];
  __int128 v40;
  void *v41;
  _BYTE v42[88];

  v13 = sub_100063D3C((uint64_t *)&unk_100346040);
  inited = swift_initStackObject(v13, v42);
  *(_OWORD *)(inited + 16) = xmmword_1002888E0;
  strcpy((char *)(inited + 32), "xpcEventName");
  *(_BYTE *)(inited + 45) = 0;
  *(_WORD *)(inited + 46) = -5120;
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 48) = a1;
  *(_QWORD *)(inited + 56) = a2;
  swift_bridgeObjectRetain(a2);
  v15 = sub_10017C218(inited);
  if (a4 >> 60 != 15)
  {
    sub_100063C8C(a3, a4);
    sub_1001BD2CC(a3, a4);
    v17 = v16;
    v18 = a6;
    v19 = sub_100063D3C((uint64_t *)&unk_100346060);
    v20 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
    v21 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v19, v20);
    v23 = v22;
    swift_bridgeObjectRelease(v17);
    v41 = &type metadata for String;
    *(_QWORD *)&v40 = v21;
    *((_QWORD *)&v40 + 1) = v23;
    a6 = v18;
    sub_10006C2B4(&v40, v39);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v15);
    sub_10018DEC0(v39, 0xD000000000000010, 0x80000001002BD920, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease(0x8000000000000000);
    sub_10006B9B4(a3, a4);
  }
  if (a6 >> 60 != 15)
  {
    sub_100063C8C(a5, a6);
    sub_1001BD2CC(a5, a6);
    v26 = v25;
    *(_QWORD *)&v40 = v25;
    v27 = sub_100063D3C((uint64_t *)&unk_100346060);
    v28 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
    v29 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v27, v28);
    v31 = v30;
    swift_bridgeObjectRelease(v26);
    v41 = &type metadata for String;
    *(_QWORD *)&v40 = v29;
    *((_QWORD *)&v40 + 1) = v31;
    sub_10006C2B4(&v40, v39);
    v32 = swift_isUniquelyReferenced_nonNull_native(v15);
    sub_10018DEC0(v39, 0x746E65644979656BLL, 0xED00007265696669, v32);
    swift_bridgeObjectRelease(0x8000000000000000);
    sub_10006B9B4(a5, a6);
  }
  if (a7)
  {
    swift_bridgeObjectRetain(a7);
    v33 = swift_isUniquelyReferenced_nonNull_native(v15);
    *(_QWORD *)&v40 = v15;
    sub_1001F0C74(a7, (uint64_t)sub_1001F0C34, 0, v33, (uint64_t)&v40);
    v15 = v40;
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v34 = objc_msgSend((id)objc_opt_self(EventPublisher), "sharedInstance");
  v35 = sub_10017D088(v15);
  swift_bridgeObjectRelease(v15);
  v36.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v35);
  if (a6 >> 60 == 15)
    isa = 0;
  else
    isa = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v34, "sendEvent:keyIdentifier:", v36.super.isa, isa, a5);

}

uint64_t sub_1001F1544(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100063D3C(&qword_100349F20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001F158C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100063D3C((uint64_t *)&unk_100347770);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1001F15CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100346E08;
  if (!qword_100346E08)
  {
    v1 = type metadata accessor for OS_dispatch_queue.Attributes(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for OS_dispatch_queue.Attributes, v1);
    atomic_store(result, (unint64_t *)&qword_100346E08);
  }
  return result;
}

uint64_t sub_1001F1614(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = a1;
  v28 = a1 + 56;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 56);
  v7 = a2 + OBJC_IVAR____TtC10seserviced3DSK_logger;
  v29 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v9 = 0;
  v27 = v8;
  while (1)
  {
    while (1)
    {
      if (v6)
      {
        v10 = __clz(__rbit64(v6));
        v6 &= v6 - 1;
        v11 = v10 | (v9 << 6);
      }
      else
      {
        v12 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
LABEL_38:
          __break(1u);
LABEL_39:
          v31 = v2;
          v26 = &v31;
          goto LABEL_41;
        }
        if (v12 >= v29)
          return swift_release(v3);
        v13 = *(_QWORD *)(v28 + 8 * v12);
        ++v9;
        if (!v13)
        {
          v9 = v12 + 1;
          if (v12 + 1 >= v29)
            return swift_release(v3);
          v13 = *(_QWORD *)(v28 + 8 * v9);
          if (!v13)
          {
            v9 = v12 + 2;
            if (v12 + 2 >= v29)
              return swift_release(v3);
            v13 = *(_QWORD *)(v28 + 8 * v9);
            if (!v13)
            {
              v9 = v12 + 3;
              if (v12 + 3 >= v29)
                return swift_release(v3);
              v13 = *(_QWORD *)(v28 + 8 * v9);
              if (!v13)
              {
                v14 = v12 + 4;
                if (v14 >= v29)
                  return swift_release(v3);
                v13 = *(_QWORD *)(v28 + 8 * v14);
                if (!v13)
                {
                  while (1)
                  {
                    v9 = v14 + 1;
                    if (__OFADD__(v14, 1))
                      goto LABEL_38;
                    if (v9 >= v29)
                      return swift_release(v3);
                    v13 = *(_QWORD *)(v28 + 8 * v9);
                    ++v14;
                    if (v13)
                      goto LABEL_21;
                  }
                }
                v9 = v14;
              }
            }
          }
        }
LABEL_21:
        v6 = (v13 - 1) & v13;
        v11 = __clz(__rbit64(v13)) + (v9 << 6);
      }
      v2 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v11);
      v15 = Logger.logObject.getter(v8);
      v19 = static os_log_type_t.info.getter(v15, v16, v17, v18);
      if (os_log_type_enabled(v15, v19))
        break;

      if (v2 != 1)
        goto LABEL_32;
LABEL_26:
      if (qword_100344568 != -1)
        swift_once(&qword_100344568, sub_100073158);
      sub_100073CC0();
    }
    v20 = v7;
    v21 = swift_slowAlloc(12, -1);
    v22 = swift_slowAlloc(32, -1);
    v31 = v22;
    *(_DWORD *)v21 = 136315138;
    if (!v2)
    {
      v23 = 0xE600000000000000;
      v24 = 0x616873696C41;
      goto LABEL_31;
    }
    if (v2 != 1)
      break;
    v23 = 0xE400000000000000;
    v24 = 1852799308;
LABEL_31:
    *(_QWORD *)(v21 + 4) = sub_1001C56EC(v24, v23, &v31);
    swift_bridgeObjectRelease(v23);
    _os_log_impl((void *)&_mh_execute_header, v15, v19, "Stopping DSK %s", (uint8_t *)v21, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v21, -1, -1);

    v7 = v20;
    v3 = v27;
    if (v2 == 1)
      goto LABEL_26;
LABEL_32:
    if (v2)
      goto LABEL_39;
    if (qword_100344680 != -1)
      swift_once(&qword_100344680, sub_10016E9A8);
    sub_10016FD04();
  }
  v30 = v2;
  v26 = &v30;
LABEL_41:
  result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for DSK.Module, v26, &type metadata for DSK.Module, &type metadata for Int);
  __break(1u);
  return result;
}

uint64_t sub_1001F1994()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(v0 + 32, v3, 1, 0);
  v1 = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v0 + 32) = &_swiftEmptySetSingleton;
  return swift_bridgeObjectRelease(v1);
}

uint64_t sub_1001F19E4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001F1A08()
{
  return sub_1001EF448();
}

uint64_t sub_1001F1A28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001F1A38(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t storeEnumTagSinglePayload for DSKError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1001F1BF4 + 4 * byte_10028D8FD[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1001F1C28 + 4 * byte_10028D8F8[v4]))();
}

uint64_t sub_1001F1C28(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001F1C30(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001F1C38);
  return result;
}

uint64_t sub_1001F1C44(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001F1C4CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1001F1C50(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001F1C58(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DSKError()
{
  return &type metadata for DSKError;
}

unint64_t sub_1001F1C78()
{
  unint64_t result;

  result = qword_10034A7A8;
  if (!qword_10034A7A8)
  {
    result = swift_getWitnessTable(&unk_10028DBFC, &type metadata for DSKError);
    atomic_store(result, (unint64_t *)&qword_10034A7A8);
  }
  return result;
}

_QWORD *sub_1001F1CBC(uint64_t (*a1)(id *), _QWORD *a2, unint64_t a3)
{
  return sub_1001F1CD0(a1, a2, a3);
}

_QWORD *sub_1001F1CD0(uint64_t (*a1)(id *), _QWORD *a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  id v9;
  void *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(id *);
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  id v25;
  _QWORD *v26;

  v4 = a3;
  v26 = _swiftEmptyArrayStorage;
  if (a3 >> 62)
    goto LABEL_18;
  v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v7)
  {
    while (1)
    {
      v8 = 0;
      v23 = v4 & 0xFFFFFFFFFFFFFF8;
      v24 = v4 & 0xC000000000000001;
      v22 = v4;
      while (v24)
      {
        v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v4);
LABEL_9:
        v10 = v9;
        v11 = v8 + 1;
        if (__OFADD__(v8, 1))
          goto LABEL_17;
        v25 = v9;
        v12 = a2;
        v13 = a1(&v25);
        if (v3)
        {
          swift_bridgeObjectRelease(v4);

          swift_release(v26);
          return v12;
        }
        if ((v13 & 1) != 0)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
          v14 = v7;
          v15 = a1;
          v16 = a2;
          v17 = v26[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v17);
          v18 = v17;
          a2 = v16;
          a1 = v15;
          v7 = v14;
          v4 = v22;
          v19 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v10);
          specialized ContiguousArray._endMutation()(v19);
        }
        else
        {

        }
        ++v8;
        if (v11 == v7)
        {
          v12 = v26;
          goto LABEL_23;
        }
      }
      if (v8 < *(_QWORD *)(v23 + 16))
        break;
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      if (v4 < 0)
        v20 = v4;
      else
        v20 = v4 & 0xFFFFFFFFFFFFFF8;
      v7 = _CocoaArrayWrapper.endIndex.getter(v20);
      if (!v7)
        goto LABEL_22;
    }
    v9 = *(id *)(v4 + 8 * v8 + 32);
    goto LABEL_9;
  }
LABEL_22:
  v12 = _swiftEmptyArrayStorage;
LABEL_23:
  swift_bridgeObjectRelease(v4);
  return v12;
}

_QWORD *sub_1001F1E74(uint64_t (*a1)(uint64_t *), _QWORD *a2, unint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t *);
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;

  v5 = a3;
  v25 = _swiftEmptyArrayStorage;
  if (a3 >> 62)
    goto LABEL_18;
  for (i = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10); i; i = _CocoaArrayWrapper.endIndex.getter(v19))
  {
    v9 = 0;
    v22 = v5 & 0xFFFFFFFFFFFFFF8;
    v23 = v5 & 0xC000000000000001;
    v21 = v5;
    while (1)
    {
      if (v23)
      {
        v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v5);
        v11 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_14:
          __break(1u);
LABEL_15:
          swift_bridgeObjectRelease(v5);
          swift_release(v10);
          swift_release(v25);
          return v3;
        }
        goto LABEL_9;
      }
      if (v9 >= *(_QWORD *)(v22 + 16))
        break;
      v10 = *(_QWORD *)(v5 + 8 * v9 + 32);
      swift_retain(v10);
      v11 = v9 + 1;
      if (__OFADD__(v9, 1))
        goto LABEL_14;
LABEL_9:
      v24 = v10;
      v3 = a2;
      v12 = a1(&v24);
      if (v4)
        goto LABEL_15;
      if ((v12 & 1) != 0)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v12);
        v13 = i;
        v14 = a1;
        v15 = a2;
        v16 = v25[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v16);
        v17 = v16;
        a2 = v15;
        a1 = v14;
        i = v13;
        v5 = v21;
        v18 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v10);
        v3 = &v25;
        specialized ContiguousArray._endMutation()(v18);
      }
      else
      {
        swift_release(v10);
      }
      ++v9;
      if (v11 == i)
      {
        v3 = v25;
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_18:
    if (v5 < 0)
      v19 = v5;
    else
      v19 = v5 & 0xFFFFFFFFFFFFFF8;
  }
  v3 = _swiftEmptyArrayStorage;
LABEL_23:
  swift_bridgeObjectRelease(v5);
  return v3;
}

_QWORD *sub_1001F2028(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  int64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[5];
  uint64_t v34;

  v4 = v3;
  v5 = a3;
  if ((a3 & 0xC000000000000001) != 0)
  {
    if (a3 < 0)
      v7 = a3;
    else
      v7 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v8 = __CocoaSet.makeIterator()(v7);
    v9 = type metadata accessor for DSKBLE.BLEPeripheral();
    v10 = sub_1000639EC(&qword_1003460B8, (uint64_t (*)(uint64_t))type metadata accessor for DSKBLE.BLEPeripheral, (uint64_t)&unk_1002898C0);
    result = Set.Iterator.init(_cocoa:)(v33, v8, v9, v10);
    v5 = v33[0];
    v31 = v33[1];
    v12 = v33[2];
    v13 = v33[3];
    v14 = v33[4];
  }
  else
  {
    v15 = -1 << *(_BYTE *)(a3 + 32);
    v31 = a3 + 56;
    v16 = ~v15;
    v17 = -v15;
    if (v17 < 64)
      v18 = ~(-1 << v17);
    else
      v18 = -1;
    v14 = v18 & *(_QWORD *)(a3 + 56);
    result = (_QWORD *)swift_bridgeObjectRetain(a3);
    v12 = v16;
    v13 = 0;
  }
  v30 = (unint64_t)(v12 + 64) >> 6;
  if ((v5 & 0x8000000000000000) == 0)
    goto LABEL_14;
LABEL_11:
  v19 = __CocoaSet.Iterator.next()(result);
  if (v19)
  {
    v20 = v19;
    v32 = v19;
    v21 = type metadata accessor for DSKBLE.BLEPeripheral();
    swift_unknownObjectRetain(v20);
    swift_dynamicCast(&v34, &v32, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
    v22 = v34;
    swift_unknownObjectRelease(v20);
    v23 = v13;
    v24 = v14;
    while (v22)
    {
      v34 = v22;
      v28 = a1(&v34);
      if (v4)
      {
        swift_release(v22);
LABEL_39:
        sub_10007EF58(v5);
        return (_QWORD *)v22;
      }
      if ((v28 & 1) != 0)
        goto LABEL_39;
      result = (_QWORD *)swift_release(v22);
      v13 = v23;
      v14 = v24;
      if (v5 < 0)
        goto LABEL_11;
LABEL_14:
      if (v14)
      {
        v24 = (v14 - 1) & v14;
        v25 = __clz(__rbit64(v14)) | (v13 << 6);
        v23 = v13;
      }
      else
      {
        v23 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
          __break(1u);
          return result;
        }
        if (v23 >= v30)
          break;
        v26 = *(_QWORD *)(v31 + 8 * v23);
        if (!v26)
        {
          v27 = v13 + 2;
          if (v13 + 2 >= v30)
            break;
          v26 = *(_QWORD *)(v31 + 8 * v27);
          if (v26)
            goto LABEL_25;
          v27 = v13 + 3;
          if (v13 + 3 >= v30)
            break;
          v26 = *(_QWORD *)(v31 + 8 * v27);
          if (v26)
            goto LABEL_25;
          v27 = v13 + 4;
          if (v13 + 4 >= v30)
            break;
          v26 = *(_QWORD *)(v31 + 8 * v27);
          if (v26)
          {
LABEL_25:
            v23 = v27;
          }
          else
          {
            v23 = v13 + 5;
            if (v13 + 5 >= v30)
              break;
            v26 = *(_QWORD *)(v31 + 8 * v23);
            if (!v26)
            {
              v29 = v13 + 6;
              while (v30 != v29)
              {
                v26 = *(_QWORD *)(v31 + 8 * v29++);
                if (v26)
                {
                  v23 = v29 - 1;
                  goto LABEL_26;
                }
              }
              break;
            }
          }
        }
LABEL_26:
        v24 = (v26 - 1) & v26;
        v25 = __clz(__rbit64(v26)) + (v23 << 6);
      }
      v22 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v25);
      swift_retain(v22);
    }
  }
  sub_10007EF58(v5);
  return 0;
}

uint64_t sub_1001F2340(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  char v13;
  uint64_t v15;
  uint64_t v16;

  v4 = v3;
  if ((unint64_t)a3 >> 62)
    goto LABEL_17;
  v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a3);
  while (v7)
  {
    v8 = 4;
    while (1)
    {
      v9 = v8 - 4;
      if ((a3 & 0xC000000000000001) == 0)
        break;
      v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v8 - 4, a3);
      v11 = __OFADD__(v9, 1);
      v12 = v8 - 3;
      if (v11)
        goto LABEL_16;
LABEL_9:
      v16 = v10;
      v13 = a1(&v16);
      if (v4)
      {
        swift_bridgeObjectRelease(a3);
        swift_release(v10);
        return v10;
      }
      if ((v13 & 1) != 0)
      {
        swift_bridgeObjectRelease(a3);
        return v10;
      }
      swift_release(v10);
      ++v8;
      if (v12 == v7)
        goto LABEL_12;
    }
    v10 = *(_QWORD *)(a3 + 8 * v8);
    swift_retain(v10);
    v11 = __OFADD__(v9, 1);
    v12 = v8 - 3;
    if (!v11)
      goto LABEL_9;
LABEL_16:
    __break(1u);
LABEL_17:
    if (a3 < 0)
      v15 = a3;
    else
      v15 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v15);
  }
LABEL_12:
  swift_bridgeObjectRelease(a3);
  return 0;
}

uint64_t sub_1001F2474(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  id v15;
  uint64_t result;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42[3];

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchPredicate(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (uint64_t *)((char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v14 = qword_100354EE8;
  *v13 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v10 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v9);
  v15 = (id)v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)(v13);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v10 + 8))(v13, v9);
  if ((v14 & 1) != 0)
  {
    v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
    v18 = Logger.logObject.getter(v17);
    v22 = static os_log_type_t.info.getter(v18, v19, v20, v21);
    if (os_log_type_enabled(v18, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      v24 = swift_slowAlloc(32, -1);
      v39 = v2;
      v25 = v24;
      v42[0] = v24;
      v38 = a1;
      *(_DWORD *)v23 = 136315138;
      v26 = sub_1000639EC((unint64_t *)&qword_100344CC8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v27 = dispatch thunk of CustomStringConvertible.description.getter(v4, v26);
      v29 = v28;
      v40 = sub_1001C56EC(v27, v28, v42);
      a1 = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v23 + 4, v23 + 12);
      swift_bridgeObjectRelease(v29);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      _os_log_impl((void *)&_mh_execute_header, v18, v22, "Removing connection %s", v23, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      v30 = v25;
      v2 = v39;
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v23, -1, -1);

    }
    else
    {

      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }
    v31 = (unint64_t *)(v2 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_connections);
    v32 = swift_beginAccess(v2 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_connections, v42, 1, 0);
    v33 = *v31;
    __chkstk_darwin(v32, v34);
    *(&v37 - 2) = a1;
    swift_bridgeObjectRetain(v33);
    v35 = sub_1001F1E74((uint64_t (*)(uint64_t *))sub_1001F5F04, &v37 - 4, v33);
    v36 = *v31;
    *v31 = (unint64_t)v35;
    swift_bridgeObjectRelease(v36);
    return sub_1001F4AD8();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1001F2798(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  id v18;
  char v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  os_log_type_t v46;
  uint8_t *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t, uint64_t);
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64[3];

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v7 = __chkstk_darwin(v4, v6);
  v59 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v9);
  v11 = (uint64_t)&v55 - v10;
  v12 = type metadata accessor for DispatchPredicate(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v16 = (uint64_t *)((char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v17 = (void *)qword_100354EE8;
  *v16 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v13 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v12);
  v18 = v17;
  v19 = _dispatchPreconditionTest(_:)(v16);
  (*(void (**)(_QWORD *, uint64_t))(v13 + 8))(v16, v12);
  if ((v19 & 1) == 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  v20 = v2 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_logger;
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v60 = a1;
  v58 = v21;
  v22 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v21)(v11, a1, v4);
  v57 = v20;
  v23 = v4;
  v24 = Logger.logObject.getter(v22);
  v28 = static os_log_type_t.info.getter(v24, v25, v26, v27);
  if (os_log_type_enabled(v24, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc(12, -1);
    v30 = swift_slowAlloc(32, -1);
    v64[0] = v30;
    v56 = v2;
    *(_DWORD *)v29 = 136315138;
    v31 = sub_1000639EC((unint64_t *)&qword_100344CC8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v32 = dispatch thunk of CustomStringConvertible.description.getter(v23, v31);
    v34 = v33;
    v62 = sub_1001C56EC(v32, v33, v64);
    v2 = v56;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v29 + 4, v29 + 12);
    swift_bridgeObjectRelease(v34);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v11, v23);
    _os_log_impl((void *)&_mh_execute_header, v24, v28, "Adding connection %s", v29, 0xCu);
    swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v29, -1, -1);

  }
  else
  {

    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v11, v23);
  }
  v35 = (uint64_t *)(v2 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_connections);
  v36 = swift_beginAccess(v2 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_connections, v64, 0, 0);
  v37 = *v35;
  __chkstk_darwin(v36, v38);
  v39 = v60;
  *(&v55 - 2) = v60;
  swift_bridgeObjectRetain(v37);
  v40 = sub_1000FAF08(sub_1001F6F88, (uint64_t)(&v55 - 4), v37);
  v41 = swift_bridgeObjectRelease(v37);
  if ((v40 & 1) == 0)
  {
    v48 = v59;
    v58(v59, v39, v23);
    v49 = type metadata accessor for DSKBLEConnectionPriority.Connection(0);
    v17 = (void *)swift_allocObject(v49, *(unsigned int *)(v49 + 48), *(unsigned __int16 *)(v49 + 52));
    *((_BYTE *)v17
    + OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD110Connection_isHighPriorityCurrent) = 1;
    *((_BYTE *)v17
    + OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD110Connection_isHighPriorityWanted) = 1;
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))((uint64_t)v17+ OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD110Connection_identifier, v48, v23);
    v50 = swift_beginAccess(v35, &v62, 33, 0);
    v61 = (uint64_t)v17;
    v51 = *v35;
    __chkstk_darwin(v50, v52);
    *(&v55 - 2) = (uint64_t)&v61;
    swift_bridgeObjectRetain(v51);
    v11 = (uint64_t)sub_1001F1E74((uint64_t (*)(uint64_t *))sub_1001F6258, &v55 - 4, v51);
    swift_bridgeObjectRelease(*v35);
    *v35 = v11;
    v12 = v61;
    if (!((unint64_t)v11 >> 62))
    {
      swift_retain(v61);
      goto LABEL_13;
    }
LABEL_15:
    if (v11 < 0)
      v53 = v11;
    else
      v53 = v11 & 0xFFFFFFFFFFFFFF8;
    swift_retain(v12);
    swift_bridgeObjectRetain(v11);
    v54 = _CocoaArrayWrapper.endIndex.getter(v53);
    swift_bridgeObjectRelease(v11);
    if (v54 < 0)
    {
      __break(1u);
      return;
    }
LABEL_13:
    sub_1001F5F80(0, 0, v12);
    swift_endAccess(&v62);
    swift_release(v17);
    sub_1001F4AD8();
    return;
  }
  v42 = Logger.logObject.getter(v41);
  v46 = static os_log_type_t.info.getter(v42, v43, v44, v45);
  if (os_log_type_enabled(v42, v46))
  {
    v47 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v47 = 0;
    _os_log_impl((void *)&_mh_execute_header, v42, v46, "Connection already exists", v47, 2u);
    swift_slowDealloc(v47, -1, -1);
  }

}

void sub_1001F2CA0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  id v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  os_log_type_t v29;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  os_log_type_t v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE v77[24];
  uint64_t v78[3];

  v4 = v3;
  v74 = a2;
  v75 = a1;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v9 = __chkstk_darwin(v6, v8);
  v72 = (char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v11);
  v13 = (char *)&v67 - v12;
  v14 = type metadata accessor for DispatchPredicate(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  v18 = (uint64_t *)((char *)&v67 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v19 = (void *)qword_100354EE8;
  *v18 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v15 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v14);
  v20 = v19;
  v21 = _dispatchPreconditionTest(_:)(v18);
  (*(void (**)(_QWORD *, uint64_t))(v15 + 8))(v18, v14);
  if ((v21 & 1) == 0)
  {
    __break(1u);
LABEL_21:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v21 + 1, 1);
    goto LABEL_13;
  }
  v23 = v4 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_logger;
  v69 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v69(v13, v75, v6);
  v24 = swift_bridgeObjectRetain_n(a3, 2);
  v73 = v23;
  v25 = Logger.logObject.getter(v24);
  v29 = static os_log_type_t.info.getter(v25, v26, v27, v28);
  v30 = os_log_type_enabled(v25, v29);
  v70 = v7;
  v71 = v6;
  if (v30)
  {
    v31 = swift_slowAlloc(22, -1);
    v67 = swift_slowAlloc(64, -1);
    v68 = v4;
    v78[0] = v67;
    *(_DWORD *)v31 = 136315394;
    v32 = sub_1000639EC((unint64_t *)&qword_100344CC8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v33 = dispatch thunk of CustomStringConvertible.description.getter(v6, v32);
    v35 = v34;
    v76 = sub_1001C56EC(v33, v34, v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, v77, v31 + 4, v31 + 12);
    swift_bridgeObjectRelease(v35);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    *(_WORD *)(v31 + 12) = 2080;
    swift_bridgeObjectRetain(a3);
    v36 = v74;
    v76 = sub_1001C56EC(v74, a3, v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, v77, v31 + 14, v31 + 22);
    swift_bridgeObjectRelease_n(a3, 3);
    _os_log_impl((void *)&_mh_execute_header, v25, v29, "Adding high priority request for connection %s client %s", (uint8_t *)v31, 0x16u);
    v37 = v67;
    swift_arrayDestroy(v67, 2, (char *)&type metadata for Any + 8);
    v4 = v68;
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v31, -1, -1);

  }
  else
  {

    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    swift_bridgeObjectRelease_n(a3, 2);
    v36 = v74;
  }
  v38 = (uint64_t *)(v4 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_requests);
  swift_beginAccess(v4 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_requests, v78, 0, 0);
  v39 = *v38;
  __chkstk_darwin(v40, v41);
  *(&v67 - 4) = v75;
  *(&v67 - 3) = v36;
  *(&v67 - 2) = a3;
  swift_bridgeObjectRetain(v39);
  v42 = sub_1001F2340(sub_1001F6C18, (uint64_t)(&v67 - 6), v39);
  v43 = swift_bridgeObjectRelease(v39);
  if (v42)
  {
    v44 = Logger.logObject.getter(v43);
    v48 = static os_log_type_t.info.getter(v44, v45, v46, v47);
    if (os_log_type_enabled(v44, v48))
    {
      v49 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v49 = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, v48, "Request already exists", v49, 2u);
      swift_slowDealloc(v49, -1, -1);
    }

    swift_beginAccess(v38, &v76, 33, 0);
    sub_1001F579C(v42);
    swift_endAccess(&v76);
    goto LABEL_11;
  }
  v50 = v71;
  v51 = v72;
  v69(v72, v75, v71);
  v52 = type metadata accessor for DSKBLEConnectionPriority.HighPriorityRequest(0);
  v14 = swift_allocObject(v52, *(unsigned int *)(v52 + 48), *(unsigned __int16 *)(v52 + 52));
  (*(void (**)(uint64_t, char *, uint64_t))(v70 + 32))(v14+ OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD119HighPriorityRequest_connectionIdentifier, v51, v50);
  v53 = (uint64_t *)(v14
                  + OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD119HighPriorityRequest_client);
  *v53 = v36;
  v53[1] = a3;
  swift_beginAccess(v38, &v76, 33, 0);
  swift_bridgeObjectRetain(a3);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v54);
  v21 = *(_QWORD *)((*v38 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v22 = *(_QWORD *)((*v38 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v21 >= v22 >> 1)
    goto LABEL_21;
LABEL_13:
  v55 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v14);
  specialized Array._endMutation()(v55);
  swift_endAccess(&v76);
  v56 = (uint64_t *)(v4 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_connections);
  swift_beginAccess(v4 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_connections, &v76, 0, 0);
  v57 = *v56;
  __chkstk_darwin(v58, v59);
  *(&v67 - 2) = v75;
  swift_bridgeObjectRetain(v57);
  v42 = sub_1001F2340(sub_1001F6F88, (uint64_t)(&v67 - 4), v57);
  v60 = swift_bridgeObjectRelease(v57);
  if (v42)
  {
    if ((*(_BYTE *)(v42
                   + OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD110Connection_isHighPriorityCurrent) & 1) == 0)
    {
      sub_1001F4AD8();
LABEL_11:
      swift_release(v42);
      return;
    }
    v60 = swift_release(v42);
  }
  v61 = Logger.logObject.getter(v60);
  v65 = static os_log_type_t.info.getter(v61, v62, v63, v64);
  if (os_log_type_enabled(v61, v65))
  {
    v66 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v66 = 0;
    _os_log_impl((void *)&_mh_execute_header, v61, v65, "Connection does not exist or priority is already HIGH", v66, 2u);
    swift_slowDealloc(v66, -1, -1);
  }

}

uint64_t sub_1001F32D4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  id v17;
  char v18;
  uint64_t result;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50[3];

  v4 = v3;
  v46 = a2;
  v47 = a1;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchPredicate(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v15 = (uint64_t *)((char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v16 = (void *)qword_100354EE8;
  *v15 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v12 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v11);
  v17 = v16;
  v18 = _dispatchPreconditionTest(_:)(v15);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v12 + 8))(v15, v11);
  if ((v18 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v47, v6);
    v20 = swift_bridgeObjectRetain_n(a3, 2);
    v21 = Logger.logObject.getter(v20);
    v25 = a3;
    v26 = static os_log_type_t.info.getter(v21, v22, v23, v24);
    if (os_log_type_enabled(v21, v26))
    {
      v27 = swift_slowAlloc(22, -1);
      v45 = v4;
      v28 = v27;
      v44 = swift_slowAlloc(64, -1);
      v50[0] = v44;
      *(_DWORD *)v28 = 136315394;
      v29 = sub_1000639EC((unint64_t *)&qword_100344CC8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v30 = dispatch thunk of CustomStringConvertible.description.getter(v6, v29);
      v32 = v31;
      v48 = sub_1001C56EC(v30, v31, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v28 + 4, v28 + 12);
      swift_bridgeObjectRelease(v32);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      *(_WORD *)(v28 + 12) = 2080;
      swift_bridgeObjectRetain(v25);
      v33 = v46;
      v48 = sub_1001C56EC(v46, v25, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v28 + 14, v28 + 22);
      swift_bridgeObjectRelease_n(v25, 3);
      _os_log_impl((void *)&_mh_execute_header, v21, v26, "Removing high priority request for connection %s client %s", (uint8_t *)v28, 0x16u);
      v34 = v44;
      swift_arrayDestroy(v44, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1, -1);
      v35 = v28;
      v4 = v45;
      swift_slowDealloc(v35, -1, -1);

      v36 = v25;
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      swift_bridgeObjectRelease_n(v25, 2);
      v36 = v25;
      v33 = v46;
    }
    v37 = (unint64_t *)(v4 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_requests);
    swift_beginAccess(v4 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_requests, v50, 1, 0);
    v38 = *v37;
    __chkstk_darwin(v39, v40);
    *(&v43 - 4) = v47;
    *(&v43 - 3) = v33;
    *(&v43 - 2) = v36;
    swift_bridgeObjectRetain(v38);
    v41 = sub_1001F1E74(sub_1001F6BF8, &v43 - 6, v38);
    v42 = *v37;
    *v37 = (unint64_t)v41;
    swift_bridgeObjectRelease(v42);
    return sub_1001F4AD8();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1001F3670(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  os_log_type_t v60;
  uint8_t *v61;
  _QWORD v62[2];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68[3];

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchPredicate(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (_QWORD *)((char *)v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v14 = qword_100354EE8;
  *v13 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v10 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v9);
  v15 = (id)v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)(v13);
  (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v13, v9);
  if ((v14 & 1) != 0)
  {
    v16 = v2 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_logger;
    v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
    v18 = Logger.logObject.getter(v17);
    v22 = static os_log_type_t.info.getter(v18, v19, v20, v21);
    if (os_log_type_enabled(v18, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      v24 = swift_slowAlloc(32, -1);
      v63 = a1;
      v25 = v24;
      v68[0] = v24;
      v64 = v2;
      *(_DWORD *)v23 = 136315138;
      v62[0] = v23 + 4;
      v62[1] = v16;
      v26 = sub_1000639EC((unint64_t *)&qword_100344CC8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v27 = dispatch thunk of CustomStringConvertible.description.getter(v4, v26);
      v29 = v28;
      v66 = sub_1001C56EC(v27, v28, v68);
      v2 = v64;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67, v62[0], v23 + 12);
      swift_bridgeObjectRelease(v29);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      _os_log_impl((void *)&_mh_execute_header, v18, v22, "Setting low priority for connection %s", v23, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      v30 = v25;
      a1 = v63;
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v23, -1, -1);

    }
    else
    {

      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }
    v31 = (uint64_t *)(v2 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_requests);
    v32 = swift_beginAccess(v2 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_requests, v68, 0, 0);
    v33 = *v31;
    __chkstk_darwin(v32, v34);
    v62[-2] = a1;
    swift_bridgeObjectRetain(v33);
    v35 = sub_1001F2340(sub_1001F6B80, (uint64_t)&v62[-4], v33);
    swift_bridgeObjectRelease(v33);
    if (v35)
    {
      v36 = swift_retain(v35);
      v37 = Logger.logObject.getter(v36);
      v41 = static os_log_type_t.info.getter(v37, v38, v39, v40);
      if (os_log_type_enabled(v37, v41))
      {
        v42 = (uint8_t *)swift_slowAlloc(12, -1);
        v43 = swift_slowAlloc(32, -1);
        v66 = v43;
        *(_DWORD *)v42 = 136315138;
        v44 = *(_QWORD *)(v35
                        + OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD119HighPriorityRequest_client);
        v45 = *(_QWORD *)(v35
                        + OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD119HighPriorityRequest_client
                        + 8);
        swift_bridgeObjectRetain(v45);
        v65 = sub_1001C56EC(v44, v45, &v66);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v42 + 4, v42 + 12);
        swift_release(v35);
        swift_bridgeObjectRelease(v45);
        _os_log_impl((void *)&_mh_execute_header, v37, v41, "Can't set priority to LOW because HIGH priority is requested by client %s", v42, 0xCu);
        swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v43, -1, -1);
        swift_slowDealloc(v42, -1, -1);

        swift_release(v35);
        return;
      }
      swift_release_n(v35, 2);
    }
    else
    {
      v46 = (uint64_t *)(v2 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_connections);
      v47 = swift_beginAccess(v2 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_connections, &v66, 0, 0);
      v48 = *v46;
      __chkstk_darwin(v47, v49);
      v62[-2] = a1;
      swift_bridgeObjectRetain(v48);
      v50 = sub_1001F2340(sub_1001F6BBC, (uint64_t)&v62[-4], v48);
      v51 = swift_bridgeObjectRelease(v48);
      if (v50)
      {
        *(_BYTE *)(v50
                 + OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD110Connection_isHighPriorityWanted) = 0;
        if (*(_BYTE *)(v50
                      + OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD110Connection_isHighPriorityCurrent) == 1)
        {
          sub_1001F4AD8();
          swift_release(v50);
          return;
        }
        v37 = Logger.logObject.getter(v51);
        v60 = static os_log_type_t.info.getter(v37, v57, v58, v59);
        if (os_log_type_enabled(v37, v60))
        {
          v61 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v61 = 0;
          _os_log_impl((void *)&_mh_execute_header, v37, v60, "Connection priority already LOW", v61, 2u);
          swift_slowDealloc(v61, -1, -1);
        }
        swift_release(v50);
      }
      else
      {
        v37 = Logger.logObject.getter(v51);
        v55 = static os_log_type_t.info.getter(v37, v52, v53, v54);
        if (os_log_type_enabled(v37, v55))
        {
          v56 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v56 = 0;
          _os_log_impl((void *)&_mh_execute_header, v37, v55, "Connection does not exist", v56, 2u);
          swift_slowDealloc(v56, -1, -1);
        }
      }
    }

  }
  else
  {
    __break(1u);
  }
}

void sub_1001F3C50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[2];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59[3];

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (uint64_t)v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchPredicate(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (_QWORD *)((char *)v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v14 = qword_100354EE8;
  *v13 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v10 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v9);
  v15 = (id)v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)(v13);
  (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v13, v9);
  if ((v14 & 1) != 0)
  {
    v16 = v2 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_logger;
    v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    v55 = a1;
    v18 = v17(v8, a1, v4);
    v19 = Logger.logObject.getter(v18);
    v23 = static os_log_type_t.info.getter(v19, v20, v21, v22);
    if (os_log_type_enabled(v19, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(12, -1);
      v25 = swift_slowAlloc(32, -1);
      v53[1] = v16;
      v26 = v25;
      v59[0] = v25;
      v54 = v2;
      *(_DWORD *)v24 = 136315138;
      v27 = sub_1000639EC((unint64_t *)&qword_100344CC8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v28 = dispatch thunk of CustomStringConvertible.description.getter(v4, v27);
      v30 = v29;
      v57 = sub_1001C56EC(v28, v29, v59);
      v2 = v54;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v24 + 4, v24 + 12);
      swift_bridgeObjectRelease(v30);
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v8, v4);
      _os_log_impl((void *)&_mh_execute_header, v19, v23, "Setting high priority for connection %s", v24, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v24, -1, -1);

    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v8, v4);
    }
    v31 = (uint64_t *)(v2 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_connections);
    v32 = swift_beginAccess(v2 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_connections, v59, 0, 0);
    v33 = *v31;
    __chkstk_darwin(v32, v34);
    v53[-2] = v55;
    swift_bridgeObjectRetain(v33);
    v4 = sub_1001F2340(sub_1001F6F88, (uint64_t)&v53[-4], v33);
    v35 = swift_bridgeObjectRelease(v33);
    if (!v4)
    {
      v40 = Logger.logObject.getter(v35);
      v49 = static os_log_type_t.info.getter(v40, v46, v47, v48);
      if (os_log_type_enabled(v40, v49))
      {
        v50 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v50 = 0;
        _os_log_impl((void *)&_mh_execute_header, v40, v49, "Connection does not exist", v50, 2u);
        swift_slowDealloc(v50, -1, -1);
      }
      goto LABEL_16;
    }
    *(_BYTE *)(v4
             + OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD110Connection_isHighPriorityWanted) = 1;
    v36 = swift_beginAccess(v31, &v57, 33, 0);
    v56 = v4;
    v37 = *v31;
    __chkstk_darwin(v36, v38);
    v53[-2] = &v56;
    swift_bridgeObjectRetain(v37);
    v8 = (uint64_t)sub_1001F1E74((uint64_t (*)(uint64_t *))sub_1001F6258, &v53[-4], v37);
    swift_bridgeObjectRelease(*v31);
    *v31 = v8;
    v5 = v56;
    if (!((unint64_t)v8 >> 62))
    {
      swift_retain(v56);
      goto LABEL_10;
    }
  }
  else
  {
    __break(1u);
  }
  if (v8 < 0)
    v51 = v8;
  else
    v51 = v8 & 0xFFFFFFFFFFFFFF8;
  swift_retain(v5);
  swift_bridgeObjectRetain(v8);
  v52 = _CocoaArrayWrapper.endIndex.getter(v51);
  swift_bridgeObjectRelease(v8);
  if (v52 < 0)
  {
    __break(1u);
    return;
  }
LABEL_10:
  sub_1001F5F80(0, 0, v5);
  v39 = swift_endAccess(&v57);
  if ((*(_BYTE *)(v4
                 + OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD110Connection_isHighPriorityCurrent) & 1) != 0)
  {
    v40 = Logger.logObject.getter(v39);
    v44 = static os_log_type_t.info.getter(v40, v41, v42, v43);
    if (os_log_type_enabled(v40, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v45 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, v44, "Connection priority already HIGH", v45, 2u);
      swift_slowDealloc(v45, -1, -1);
    }
    swift_release(v4);
LABEL_16:

    return;
  }
  sub_1001F4AD8();
  swift_release(v4);
}

uint64_t sub_1001F416C()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for DSKBLEConnectionPriority(0);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  result = sub_1001F41A8();
  qword_100354F00 = result;
  return result;
}

uint64_t sub_1001F41A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  _QWORD aBlock[5];
  uint64_t v14;

  v1 = v0;
  v2 = type metadata accessor for DispatchQoS.QoSClass(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = String.init(cString:)(SESLoggingSubsystem);
  Logger.init(subsystem:category:)(v7);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_connections) = _swiftEmptyArrayStorage;
  v8 = v0 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_delegate;
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_numHighPrioritySlots) = 2;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_requests) = _swiftEmptyArrayStorage;
  sub_10006C25C(0, (unint64_t *)&qword_1003461A0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchQoS.QoSClass.default(_:), v2);
  v9 = (void *)static OS_dispatch_queue.global(qos:)(v6);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  aBlock[4] = sub_1001F6278;
  v14 = v1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10017BF6C;
  aBlock[3] = &unk_10030E618;
  v10 = _Block_copy(aBlock);
  v11 = v14;
  swift_retain(v1);
  swift_release(v11);
  os_state_add_handler(v9, v10);
  _Block_release(v10);

  return v1;
}

uint64_t sub_1001F4360()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t inited;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  _QWORD *v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  Class isa;
  _DWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  __int128 v66;
  _OWORD v67[2];
  _BYTE v68[128];
  void *v69;
  _OWORD v70[2];
  _BYTE v71[176];
  _BYTE v72[32];

  v1 = v0;
  v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_connections);
  swift_beginAccess(v0 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_connections, v72, 0, 0);
  v3 = *v2;
  if ((unint64_t)*v2 >> 62)
    goto LABEL_47;
  v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(*v2);
  while (1)
  {
    if (v4)
    {
      *(_QWORD *)&v66 = _swiftEmptyArrayStorage;
      result = sub_1001929E4(0, v4 & ~(v4 >> 63), 0);
      if (v4 < 0)
      {
        __break(1u);
LABEL_58:
        __break(1u);
        return result;
      }
      v63 = v1;
      v6 = 0;
      v64 = v3 & 0xC000000000000001;
      v7 = v3;
      do
      {
        if (v64)
        {
          v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v3);
        }
        else
        {
          v8 = *(_QWORD *)(v3 + 8 * v6 + 32);
          swift_retain(v8);
        }
        v9 = sub_100063D3C((uint64_t *)&unk_100346040);
        inited = swift_initStackObject(v9, v71);
        *(_OWORD *)(inited + 16) = xmmword_100288AC0;
        *(_QWORD *)(inited + 32) = 0x696669746E656469;
        *(_QWORD *)(inited + 40) = 0xEA00000000007265;
        v11 = v8
            + OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD110Connection_identifier;
        v12 = type metadata accessor for UUID(0);
        *(_QWORD *)(inited + 72) = v12;
        v13 = sub_1000960AC((_QWORD *)(inited + 48));
        (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v13, v11, v12);
        *(_QWORD *)(inited + 80) = 0xD000000000000010;
        *(_QWORD *)(inited + 88) = 0x80000001002C3380;
        if (*(_BYTE *)(v8
                      + OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD110Connection_isHighPriorityCurrent))
          v14 = 1751607656;
        else
          v14 = 7827308;
        if (*(_BYTE *)(v8
                      + OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD110Connection_isHighPriorityCurrent))
          v15 = 0xE400000000000000;
        else
          v15 = 0xE300000000000000;
        *(_QWORD *)(inited + 96) = v14;
        *(_QWORD *)(inited + 104) = v15;
        *(_QWORD *)(inited + 120) = &type metadata for String;
        *(_QWORD *)(inited + 128) = 0x70206465746E6177;
        *(_QWORD *)(inited + 136) = 0xEF797469726F6972;
        if (*(_BYTE *)(v8
                      + OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD110Connection_isHighPriorityWanted))
          v16 = 1751607656;
        else
          v16 = 7827308;
        if (*(_BYTE *)(v8
                      + OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD110Connection_isHighPriorityWanted))
          v17 = 0xE400000000000000;
        else
          v17 = 0xE300000000000000;
        *(_QWORD *)(inited + 168) = &type metadata for String;
        *(_QWORD *)(inited + 144) = v16;
        *(_QWORD *)(inited + 152) = v17;
        v18 = sub_10017C218(inited);
        swift_release(v8);
        v19 = (_QWORD *)v66;
        if ((swift_isUniquelyReferenced_nonNull_native(v66) & 1) == 0)
        {
          sub_1001929E4(0, v19[2] + 1, 1);
          v19 = (_QWORD *)v66;
        }
        v21 = v19[2];
        v20 = v19[3];
        if (v21 >= v20 >> 1)
        {
          sub_1001929E4(v20 > 1, v21 + 1, 1);
          v19 = (_QWORD *)v66;
        }
        ++v6;
        v19[2] = v21 + 1;
        v19[v21 + 4] = v18;
        v3 = v7;
      }
      while (v4 != v6);
      swift_bridgeObjectRelease(v7);
      v1 = v63;
    }
    else
    {
      swift_bridgeObjectRelease(v3);
      v19 = _swiftEmptyArrayStorage;
    }
    v22 = sub_100063D3C(&qword_100346050);
    *((_QWORD *)&v67[0] + 1) = v22;
    *(_QWORD *)&v66 = v19;
    sub_10006C2B4(&v66, v70);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    v69 = &_swiftEmptyDictionarySingleton;
    sub_10018DEC0(v70, 0x697463656E6E6F63, 0xEB00000000736E6FLL, isUniquelyReferenced_nonNull_native);
    v24 = (uint64_t)v69;
    swift_bridgeObjectRelease(0x8000000000000000);
    v25 = (uint64_t *)(v1 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_requests);
    swift_beginAccess(v1 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_requests, &v69, 0, 0);
    v26 = *v25;
    if ((unint64_t)*v25 >> 62)
      break;
    v27 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v26);
    if (!v27)
      goto LABEL_55;
LABEL_30:
    *(_QWORD *)&v70[0] = _swiftEmptyArrayStorage;
    result = sub_1001929E4(0, v27 & ~(v27 >> 63), 0);
    if (v27 < 0)
      goto LABEL_58;
    v59 = v24;
    v60 = v22;
    v65 = v26 & 0xC000000000000001;
    sub_100063D3C(&qword_1003461B0);
    v3 = 0;
    v61 = v27;
    v62 = v26;
    while (1)
    {
      if (v65)
      {
        v28 = specialized _ArrayBuffer._getElementSlowPath(_:)(v3, v26);
      }
      else
      {
        v28 = *(_QWORD *)(v26 + 8 * v3 + 32);
        swift_retain(v28);
      }
      v29 = sub_100063D3C((uint64_t *)&unk_100346040);
      v30 = swift_initStackObject(v29, v68);
      *(_OWORD *)(v30 + 16) = xmmword_1002888F0;
      *(_QWORD *)(v30 + 32) = 0x696669746E656469;
      *(_QWORD *)(v30 + 40) = 0xEA00000000007265;
      v31 = v28
          + OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD119HighPriorityRequest_connectionIdentifier;
      v32 = type metadata accessor for UUID(0);
      *(_QWORD *)(v30 + 72) = v32;
      v33 = sub_1000960AC((_QWORD *)(v30 + 48));
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v33, v31, v32);
      *(_QWORD *)(v30 + 80) = 0x746E65696C63;
      *(_QWORD *)(v30 + 88) = 0xE600000000000000;
      v34 = *(_QWORD *)(v28
                      + OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD119HighPriorityRequest_client);
      v35 = *(_QWORD *)(v28
                      + OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD119HighPriorityRequest_client
                      + 8);
      *(_QWORD *)(v30 + 120) = &type metadata for String;
      *(_QWORD *)(v30 + 96) = v34;
      *(_QWORD *)(v30 + 104) = v35;
      v36 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(2);
      swift_bridgeObjectRetain(v35);
      swift_retain(v36);
      sub_1001EDC5C(v30 + 32, (uint64_t)&v66);
      v1 = *((_QWORD *)&v66 + 1);
      v37 = v66;
      v38 = sub_100187ED0(v66, *((uint64_t *)&v66 + 1));
      if ((v39 & 1) != 0)
        break;
      *(_QWORD *)((char *)v36 + ((v38 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v38;
      v40 = (_QWORD *)(v36[6] + 16 * v38);
      *v40 = v37;
      v40[1] = v1;
      sub_10006C2B4(v67, (_OWORD *)(v36[7] + 32 * v38));
      v41 = v36[2];
      v42 = __OFADD__(v41, 1);
      v43 = v41 + 1;
      if (v42)
        goto LABEL_46;
      v36[2] = v43;
      sub_1001EDC5C(v30 + 80, (uint64_t)&v66);
      v1 = *((_QWORD *)&v66 + 1);
      v44 = v66;
      v45 = sub_100187ED0(v66, *((uint64_t *)&v66 + 1));
      if ((v46 & 1) != 0)
        break;
      *(_QWORD *)((char *)v36 + ((v45 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v45;
      v47 = (_QWORD *)(v36[6] + 16 * v45);
      *v47 = v44;
      v47[1] = v1;
      sub_10006C2B4(v67, (_OWORD *)(v36[7] + 32 * v45));
      v48 = v36[2];
      v42 = __OFADD__(v48, 1);
      v49 = v48 + 1;
      if (v42)
        goto LABEL_46;
      v36[2] = v49;
      swift_release(v36);
      swift_bridgeObjectRelease(v30);
      swift_release(v28);
      v50 = *(_QWORD **)&v70[0];
      if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)&v70[0]) & 1) == 0)
      {
        sub_1001929E4(0, v50[2] + 1, 1);
        v50 = *(_QWORD **)&v70[0];
      }
      v26 = v62;
      v52 = v50[2];
      v51 = v50[3];
      if (v52 >= v51 >> 1)
      {
        sub_1001929E4(v51 > 1, v52 + 1, 1);
        v50 = *(_QWORD **)&v70[0];
      }
      ++v3;
      v50[2] = v52 + 1;
      v50[v52 + 4] = v36;
      if (v61 == v3)
      {
        swift_bridgeObjectRelease(v62);
        v24 = v59;
        v22 = v60;
        goto LABEL_56;
      }
    }
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    if (v3 < 0)
      v53 = v3;
    else
      v53 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    v4 = _CocoaArrayWrapper.endIndex.getter(v53);
  }
  if (v26 < 0)
    v54 = *v25;
  else
    v54 = v26 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v26);
  v27 = _CocoaArrayWrapper.endIndex.getter(v54);
  if (v27)
    goto LABEL_30;
LABEL_55:
  swift_bridgeObjectRelease(v26);
  v50 = _swiftEmptyArrayStorage;
LABEL_56:
  *((_QWORD *)&v67[0] + 1) = v22;
  *(_QWORD *)&v66 = v50;
  sub_10006C2B4(&v66, v70);
  v55 = swift_isUniquelyReferenced_nonNull_native(v24);
  sub_10018DEC0(v70, 0xD000000000000016, 0x80000001002C33A0, v55);
  swift_bridgeObjectRelease(0x8000000000000000);
  v56 = sub_10017D088(v24);
  swift_bridgeObjectRelease(v24);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v56);
  v58 = sub_100015734((uint64_t)"dskbleconnectionpriority.state", (uint64_t)isa);

  return (uint64_t)v58;
}

uint64_t sub_1001F4AD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const void *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  const void *v78;
  void *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  void **aBlock;
  uint64_t v106;
  uint64_t (*v107)(uint64_t);
  void *v108;
  uint64_t (*v109)();
  uint64_t v110;
  _QWORD v111[3];
  uint64_t v112;
  char v113[24];
  char v114[32];

  v99 = type metadata accessor for DispatchWorkItemFlags(0);
  v98 = *(_QWORD *)(v99 - 8);
  __chkstk_darwin(v99, v1);
  v97 = (char *)&v91 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = type metadata accessor for DispatchQoS(0);
  v95 = *(_QWORD *)(v96 - 8);
  __chkstk_darwin(v96, v3);
  v94 = (char *)&v91 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (uint64_t)&v91 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1003447B8 != -1)
LABEL_80:
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v10 = (void *)qword_100354EE8;
  *(_QWORD *)v9 = qword_100354EE8;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5);
  v11 = v10;
  v12 = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
  if ((v12 & 1) != 0)
  {
    v13 = (uint64_t *)(v0 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_requests);
    swift_beginAccess(v0 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_requests, v114, 0, 0);
    v12 = *v13;
    if (!((unint64_t)*v13 >> 62))
    {
      v5 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n(v12, 2);
      goto LABEL_5;
    }
  }
  else
  {
    __break(1u);
  }
  if (v12 < 0)
    v82 = v12;
  else
    v82 = v12 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain_n(v12, 2);
  v5 = _CocoaArrayWrapper.endIndex.getter(v82);
LABEL_5:
  v100 = v0;
  v93 = v12;
  if (v5)
  {
    v14 = (uint64_t *)(v0 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_connections);
    v102 = v12 & 0xC000000000000001;
    swift_beginAccess(v0 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_connections, v113, 0, 0);
    v15 = 0;
    v103 = 0;
    v91 = v12 + 32;
    v92 = v14;
    v101 = v5;
    while (1)
    {
      if (v102)
      {
        v16 = specialized _ArrayBuffer._getElementSlowPath(_:)(v15, v93);
        v17 = __OFADD__(v15++, 1);
        if (v17)
        {
LABEL_79:
          __break(1u);
          goto LABEL_80;
        }
      }
      else
      {
        v16 = *(_QWORD *)(v91 + 8 * v15);
        swift_retain(v16);
        v17 = __OFADD__(v15++, 1);
        if (v17)
          goto LABEL_79;
      }
      v5 = *v14;
      if ((unint64_t)*v14 >> 62)
      {
        if (v5 < 0)
          v26 = *v14;
        else
          v26 = v5 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain_n(*v14, 2);
        v6 = _CocoaArrayWrapper.endIndex.getter(v26);
        if (!v6)
          goto LABEL_7;
      }
      else
      {
        v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain_n(*v14, 2);
        if (!v6)
          goto LABEL_7;
      }
      if ((v5 & 0xC000000000000001) != 0)
      {
        v18 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v5);
      }
      else
      {
        v18 = *(_QWORD *)(v5 + 32);
        swift_retain(v18);
      }
      v9 = v16
         + OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD119HighPriorityRequest_connectionIdentifier;
      if ((static UUID.== infix(_:_:)(v18+ OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD110Connection_identifier, v16+ OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD119HighPriorityRequest_connectionIdentifier) & 1) == 0)
      {
        swift_release(v18);
        if (v6 != 1)
        {
          v0 = 5;
          do
          {
            v19 = v0 - 4;
            if ((v5 & 0xC000000000000001) != 0)
            {
              v18 = specialized _ArrayBuffer._getElementSlowPath(_:)(v0 - 4, v5);
              v17 = __OFADD__(v19, 1);
              v20 = v0 - 3;
              if (v17)
                goto LABEL_78;
            }
            else
            {
              v18 = *(_QWORD *)(v5 + 8 * v0);
              swift_retain(v18);
              v17 = __OFADD__(v19, 1);
              v20 = v0 - 3;
              if (v17)
              {
LABEL_78:
                __break(1u);
                goto LABEL_79;
              }
            }
            if ((static UUID.== infix(_:_:)(v18+ OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD110Connection_identifier, v9) & 1) != 0)
            {
              v14 = v92;
              goto LABEL_30;
            }
            swift_release(v18);
            ++v0;
          }
          while (v20 != v6);
        }
LABEL_7:
        swift_bridgeObjectRelease_n(v5, 2);
        swift_release(v16);
        v14 = v92;
        goto LABEL_8;
      }
LABEL_30:
      swift_bridgeObjectRelease_n(v5, 2);
      *(_BYTE *)(v18
               + OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD110Connection_isHighPriorityWanted) = 1;
      v21 = swift_beginAccess(v14, &aBlock, 33, 0);
      v111[0] = v18;
      v22 = *v14;
      __chkstk_darwin(v21, v23);
      *(&v91 - 2) = (uint64_t)v111;
      swift_bridgeObjectRetain(v22);
      v24 = v103;
      v6 = (uint64_t)sub_1001F1E74((uint64_t (*)(uint64_t *))sub_1001F6258, &v91 - 4, v22);
      v103 = v24;
      swift_bridgeObjectRelease(*v14);
      *v14 = v6;
      v25 = v111[0];
      if ((unint64_t)v6 >> 62)
      {
        if (v6 < 0)
          v27 = v6;
        else
          v27 = v6 & 0xFFFFFFFFFFFFFF8;
        swift_retain(v111[0]);
        swift_bridgeObjectRetain(v6);
        v9 = _CocoaArrayWrapper.endIndex.getter(v27);
        swift_bridgeObjectRelease(v6);
        if (v9 < 0)
        {
          __break(1u);
          break;
        }
      }
      else
      {
        swift_retain(v111[0]);
      }
      v0 = (uint64_t)v14;
      sub_1001F5F80(0, 0, v25);
      swift_endAccess(&aBlock);
      swift_release(v16);
      swift_release(v18);
LABEL_8:
      v5 = v101;
      if (v15 == v101)
        goto LABEL_45;
    }
  }
  v103 = 0;
LABEL_45:
  swift_bridgeObjectRelease_n(v93, 2);
  v112 = (uint64_t)_swiftEmptyArrayStorage;
  v28 = v100;
  v29 = (uint64_t *)(v100 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_connections);
  swift_beginAccess(v100 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_connections, v111, 0, 0);
  v92 = v29;
  v30 = *v29;
  v31 = &unk_10034A000;
  if ((unint64_t)*v29 >> 62)
  {
    if (v30 < 0)
      v83 = *v29;
    else
      v83 = v30 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v30, 2);
    result = _CocoaArrayWrapper.endIndex.getter(v83);
    v32 = result;
    if (result)
      goto LABEL_47;
LABEL_90:
    swift_bridgeObjectRelease_n(v30, 2);
    v62 = (uint64_t)_swiftEmptyArrayStorage;
    if ((unint64_t)_swiftEmptyArrayStorage >> 62)
      goto LABEL_91;
LABEL_68:
    v63 = *(_QWORD *)((v62 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain_n(v62, 2);
    if (v63)
      goto LABEL_69;
LABEL_95:
    swift_bridgeObjectRelease_n(v62, 2);
    v85 = *v92;
    if ((unint64_t)*v92 >> 62)
    {
      if (v85 < 0)
        v90 = *v92;
      else
        v90 = v85 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n(*v92, 2);
      result = _CocoaArrayWrapper.endIndex.getter(v90);
      v86 = result;
      if (result)
        goto LABEL_97;
    }
    else
    {
      v86 = *(_QWORD *)((v85 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain_n(*v92, 2);
      if (v86)
      {
LABEL_97:
        if (v86 < 1)
          goto LABEL_110;
        v87 = 0;
        do
        {
          if ((v85 & 0xC000000000000001) != 0)
          {
            v88 = specialized _ArrayBuffer._getElementSlowPath(_:)(v87, v85);
          }
          else
          {
            v88 = *(_QWORD *)(v85 + 8 * v87 + 32);
            swift_retain(v88);
          }
          ++v87;
          aBlock = (void **)v88;
          v89 = v103;
          sub_1001F59A4(&aBlock);
          v103 = v89;
          swift_release(v88);
        }
        while (v86 != v87);
      }
    }
    swift_bridgeObjectRelease_n(v85, 2);
    return swift_bridgeObjectRelease(v112);
  }
  v32 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain_n(*v29, 2);
  if (!v32)
    goto LABEL_90;
LABEL_47:
  if (v32 < 1)
  {
    __break(1u);
    goto LABEL_109;
  }
  v34 = 0;
  v35 = v30 & 0xC000000000000001;
  v101 = v30;
  v93 = v30 & 0xC000000000000001;
  v36 = v97;
  do
  {
    if (v35)
    {
      v42 = specialized _ArrayBuffer._getElementSlowPath(_:)(v34, v30);
    }
    else
    {
      v42 = *(_QWORD *)(v30 + 8 * v34 + 32);
      swift_retain(v42);
    }
    v43 = v112;
    if ((unint64_t)v112 >> 62)
    {
      if (v112 < 0)
        v60 = v112;
      else
        v60 = v112 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v112);
      v61 = _CocoaArrayWrapper.endIndex.getter(v60);
      swift_bridgeObjectRelease(v43);
      if (v61 > 1)
        goto LABEL_60;
    }
    else if (*(uint64_t *)((v112 & 0xFFFFFFFFFFFFF8) + 0x10) > 1)
    {
      goto LABEL_60;
    }
    if ((*(_BYTE *)(v42
                   + OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD110Connection_isHighPriorityWanted) & 1) != 0)
    {
      v37 = swift_retain(v42);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v37);
      v39 = *(_QWORD *)((v112 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v38 = *(_QWORD *)((v112 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v39 >= v38 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1);
      v40 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v39, v42);
      specialized Array._endMutation()(v40);
LABEL_52:
      v41 = v42;
      goto LABEL_53;
    }
LABEL_60:
    v44 = v31[278];
    if ((*(_BYTE *)(v42 + v44) & 1) == 0)
      goto LABEL_52;
    *(_BYTE *)(v42 + v44) = 0;
    v102 = qword_100354EE8;
    v45 = swift_allocObject(&unk_10030E5D8, 32, 7);
    v46 = v100;
    *(_QWORD *)(v45 + 16) = v100;
    *(_QWORD *)(v45 + 24) = v42;
    v109 = sub_1001F5F60;
    v110 = v45;
    aBlock = _NSConcreteStackBlock;
    v106 = 1107296256;
    v107 = sub_100071C98;
    v108 = &unk_10030E5F0;
    v47 = _Block_copy(&aBlock);
    swift_retain(v42);
    v48 = swift_retain(v46);
    v49 = v94;
    static DispatchQoS.unspecified.getter(v48);
    v104 = _swiftEmptyArrayStorage;
    v50 = sub_1000639EC((unint64_t *)&qword_100344A20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v51 = sub_100063D3C((uint64_t *)&unk_100346200);
    v52 = sub_100063D7C();
    v53 = v32;
    v54 = v99;
    v55 = v50;
    v31 = (_QWORD *)&unk_10034A000;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v104, v51, v52, v99, v55);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v49, v36, v47);
    v56 = v47;
    v30 = v101;
    _Block_release(v56);
    v57 = v54;
    v32 = v53;
    (*(void (**)(char *, uint64_t))(v98 + 8))(v36, v57);
    v58 = v49;
    v35 = v93;
    (*(void (**)(char *, uint64_t))(v95 + 8))(v58, v96);
    v59 = v110;
    swift_release(v42);
    v41 = v59;
LABEL_53:
    swift_release(v41);
    ++v34;
  }
  while (v32 != v34);
  swift_bridgeObjectRelease_n(v30, 2);
  v62 = v112;
  v28 = v100;
  if (!((unint64_t)v112 >> 62))
    goto LABEL_68;
LABEL_91:
  if (v62 < 0)
    v84 = v62;
  else
    v84 = v62 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain_n(v62, 2);
  result = _CocoaArrayWrapper.endIndex.getter(v84);
  v63 = result;
  if (!result)
    goto LABEL_95;
LABEL_69:
  if (v63 >= 1)
  {
    v64 = 0;
    v65 = v62 & 0xC000000000000001;
    v101 = v62;
    v93 = v63;
    v66 = v94;
    v67 = v99;
    do
    {
      if (v65)
      {
        v69 = specialized _ArrayBuffer._getElementSlowPath(_:)(v64, v62);
      }
      else
      {
        v69 = *(_QWORD *)(v62 + 8 * v64 + 32);
        swift_retain(v69);
      }
      v70 = v31[278];
      if ((*(_BYTE *)(v69 + v70) & 1) != 0)
      {
        v68 = v69;
      }
      else
      {
        *(_BYTE *)(v69 + v70) = 1;
        v102 = qword_100354EE8;
        v71 = swift_allocObject(&unk_10030E588, 32, 7);
        *(_QWORD *)(v71 + 16) = v28;
        *(_QWORD *)(v71 + 24) = v69;
        v109 = sub_1001F5F24;
        v110 = v71;
        aBlock = _NSConcreteStackBlock;
        v106 = 1107296256;
        v107 = sub_100071C98;
        v108 = &unk_10030E5A0;
        v72 = _Block_copy(&aBlock);
        swift_retain(v28);
        v73 = swift_retain(v69);
        static DispatchQoS.unspecified.getter(v73);
        v104 = _swiftEmptyArrayStorage;
        v74 = sub_1000639EC((unint64_t *)&qword_100344A20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v75 = sub_100063D3C((uint64_t *)&unk_100346200);
        v76 = sub_100063D7C();
        v77 = v97;
        v28 = v100;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v104, v75, v76, v67, v74);
        v78 = v72;
        v79 = v72;
        v31 = (_QWORD *)&unk_10034A000;
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v66, v77, v79);
        _Block_release(v78);
        v80 = v77;
        v63 = v93;
        (*(void (**)(char *, uint64_t))(v98 + 8))(v80, v67);
        (*(void (**)(char *, uint64_t))(v95 + 8))(v66, v96);
        v81 = v110;
        swift_release(v69);
        v68 = v81;
        v62 = v101;
      }
      swift_release(v68);
      ++v64;
    }
    while (v63 != v64);
    goto LABEL_95;
  }
LABEL_109:
  __break(1u);
LABEL_110:
  __break(1u);
  return result;
}

BOOL sub_1001F5690(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a1
     + OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD110Connection_identifier;
  v4 = type metadata accessor for UUID(0);
  v5 = sub_1000639EC((unint64_t *)&qword_100346150, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  return (dispatch thunk of static Equatable.== infix(_:_:)(v3, a2, v4, v5) & 1) == 0;
}

uint64_t sub_1001F5714(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *a1;
  if ((static UUID.== infix(_:_:)(*a1+ OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD119HighPriorityRequest_connectionIdentifier, a2) & 1) == 0)return 0;
  v7 = *(_QWORD *)(v6
                 + OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD119HighPriorityRequest_client);
  v8 = *(_QWORD *)(v6
                 + OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD119HighPriorityRequest_client
                 + 8);
  if (v7 == a3 && v8 == a4)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, a3, a4, 0) & 1;
}

uint64_t sub_1001F579C(uint64_t a1)
{
  unint64_t *v1;
  unint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD v10[5];
  uint64_t v11;

  v11 = a1;
  v2 = *v1;
  v10[2] = &v11;
  swift_bridgeObjectRetain(v2);
  v3 = sub_1001F1E74((uint64_t (*)(uint64_t *))sub_1001F6C38, v10, v2);
  swift_bridgeObjectRelease(*v1);
  *v1 = (unint64_t)v3;
  v4 = v11;
  v5 = swift_retain(v11);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v5);
  v7 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v6 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v7 >= v6 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
  v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, v4);
  return specialized Array._endMutation()(v8);
}

uint64_t sub_1001F5850(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;

  v7 = *a1;
  v8 = *a1
     + OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD119HighPriorityRequest_connectionIdentifier;
  v9 = type metadata accessor for UUID(0);
  v10 = sub_1000639EC((unint64_t *)&qword_100346150, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  if ((dispatch thunk of static Equatable.== infix(_:_:)(v8, a2, v9, v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7
                    + OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD119HighPriorityRequest_client);
    v12 = *(_QWORD *)(v7
                    + OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD119HighPriorityRequest_client
                    + 8);
    if (v11 == a3 && v12 == a4)
      v14 = 0;
    else
      v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v12, a3, a4, 0) ^ 1;
  }
  else
  {
    v14 = 1;
  }
  return v14 & 1;
}

uint64_t sub_1001F592C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  _BYTE v8[24];

  v5 = (_QWORD *)(a1 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_delegate);
  result = swift_beginAccess(a1 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_delegate, v8, 0, 0);
  v7 = v5[3];
  if (v7)
  {
    sub_10006BA78(v5, v7);
    return a3(a2+ OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD110Connection_identifier);
  }
  return result;
}

void sub_1001F59A4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *a1;
  v2 = swift_retain_n(*a1, 6);
  v3 = Logger.logObject.getter(v2);
  v7 = static os_log_type_t.info.getter(v3, v4, v5, v6);
  if (os_log_type_enabled(v3, v7))
  {
    v8 = swift_slowAlloc(24, -1);
    v9 = swift_slowAlloc(32, -1);
    v18 = v9;
    *(_DWORD *)v8 = 136315650;
    v10 = type metadata accessor for UUID(0);
    v11 = sub_1000639EC((unint64_t *)&qword_100344CC8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v12 = dispatch thunk of CustomStringConvertible.description.getter(v10, v11);
    v14 = v13;
    v16 = sub_1001C56EC(v12, v13, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v8 + 4, v8 + 12);
    swift_release_n(v1, 2);
    swift_bridgeObjectRelease(v14);
    *(_WORD *)(v8 + 12) = 1024;
    LODWORD(v14) = *(unsigned __int8 *)(v1
                                      + OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD110Connection_isHighPriorityCurrent);
    swift_release(v1);
    LODWORD(v16) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, (char *)&v16 + 4, v8 + 14, v8 + 18);
    swift_release(v1);
    *(_WORD *)(v8 + 18) = 1024;
    v15 = *(unsigned __int8 *)(v1
                             + OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD110Connection_isHighPriorityWanted);
    swift_release(v1);
    LODWORD(v16) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, (char *)&v16 + 4, v8 + 20, v8 + 24);
    swift_release(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v7, "Priority for %s current high %{BOOL}d wanted high %{BOOL}d", (uint8_t *)v8, 0x18u);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

    swift_release_n(v1, 6);
  }
}

uint64_t sub_1001F5BC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0
     + OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD110Connection_identifier;
  v2 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1001F5C14(_QWORD *a1, _QWORD *a2)
{
  return static UUID.== infix(_:_:)(*a1+ OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD110Connection_identifier, *a2+ OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD110Connection_identifier);
}

uint64_t sub_1001F5C30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0
     + OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD119HighPriorityRequest_connectionIdentifier;
  v2 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD119HighPriorityRequest_client
                                      + 8));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1001F5C94(_QWORD *a1, _QWORD *a2)
{
  return static UUID.== infix(_:_:)(*a1+ OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD119HighPriorityRequest_connectionIdentifier, *a2+ OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD119HighPriorityRequest_connectionIdentifier);
}

uint64_t sub_1001F5CB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_connections));
  sub_1001F6B40(v0 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_delegate);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_requests));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1001F5D30()
{
  return type metadata accessor for DSKBLEConnectionPriority(0);
}

uint64_t type metadata accessor for DSKBLEConnectionPriority(uint64_t a1)
{
  return sub_10007BBF0(a1, qword_10034A800, (uint64_t)&nominal type descriptor for DSKBLEConnectionPriority);
}

uint64_t sub_1001F5D4C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[2] = "(";
    v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1001F5DE0()
{
  return type metadata accessor for DSKBLEConnectionPriority.Connection(0);
}

uint64_t type metadata accessor for DSKBLEConnectionPriority.Connection(uint64_t a1)
{
  return sub_10007BBF0(a1, qword_10034A8E8, (uint64_t)&nominal type descriptor for DSKBLEConnectionPriority.Connection);
}

uint64_t sub_1001F5DFC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_10028DCB8;
    v4[2] = &unk_10028DCB8;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1001F5E74()
{
  return type metadata accessor for DSKBLEConnectionPriority.HighPriorityRequest(0);
}

uint64_t type metadata accessor for DSKBLEConnectionPriority.HighPriorityRequest(uint64_t a1)
{
  return sub_10007BBF0(a1, qword_10034A9E8, (uint64_t)&nominal type descriptor for DSKBLEConnectionPriority.HighPriorityRequest);
}

uint64_t sub_1001F5E90(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_10028DCE8;
    result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

BOOL sub_1001F5F04(_QWORD *a1)
{
  uint64_t v1;

  return sub_1001F5690(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1001F5F24()
{
  uint64_t v0;

  return sub_1001F592C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), (uint64_t (*)(uint64_t))sub_1000C317C);
}

uint64_t sub_1001F5F44(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001F5F54(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1001F5F60()
{
  uint64_t v0;

  return sub_1001F592C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), (uint64_t (*)(uint64_t))sub_1000C318C);
}

uint64_t sub_1001F5F80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v3 = a3;
    v5 = a2;
    v6 = a1;
    v7 = *v4;
    if (!((unint64_t)*v4 >> 62))
    {
      v9 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v9 >= a2)
        goto LABEL_4;
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }
  if (v7 < 0)
    v24 = v7;
  else
    v24 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  v9 = _CocoaArrayWrapper.endIndex.getter(v24);
  swift_bridgeObjectRelease(v7);
  if (v9 < v5)
    goto LABEL_34;
LABEL_4:
  v9 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v8 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v7 = *v4;
  if (!((unint64_t)*v4 >> 62))
  {
    v10 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    v11 = v10 + v8;
    if (!__OFADD__(v10, v8))
      goto LABEL_8;
LABEL_42:
    __break(1u);
LABEL_43:
    if (v7 < 0)
      v26 = v7;
    else
      v26 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v7);
    v14 = _CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease(v7);
    goto LABEL_15;
  }
LABEL_37:
  if (v7 < 0)
    v25 = v7;
  else
    v25 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  v10 = _CocoaArrayWrapper.endIndex.getter(v25);
  swift_bridgeObjectRelease(v7);
  v11 = v10 + v8;
  if (__OFADD__(v10, v8))
    goto LABEL_42;
LABEL_8:
  v7 = *v4;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v4);
  *v4 = v7;
  v10 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000) == 0 && (v7 & 0x4000000000000000) == 0)
  {
    v13 = v7 & 0xFFFFFFFFFFFFFF8;
    if (v11 <= *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v10 = 1;
  }
  if ((unint64_t)v7 >> 62)
    goto LABEL_43;
  v14 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v14 <= v11)
    v14 = v11;
  swift_bridgeObjectRetain(v7);
  v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v10, v14, 1, v7);
  swift_bridgeObjectRelease(*v4);
  *v4 = v7;
  v13 = v7 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v15 = (_QWORD *)(v13 + 32 + 8 * v6);
  v16 = type metadata accessor for DSKBLEConnectionPriority.Connection(0);
  v17 = (char *)swift_arrayDestroy(v15, v9, v16);
  if (!v8)
  {
LABEL_28:
    *v15 = v3;
    return specialized Array._endMutation()(v17);
  }
  if (!((unint64_t)v7 >> 62))
  {
    v18 = *(_QWORD *)(v13 + 16);
    v19 = v18 - v5;
    if (!__OFSUB__(v18, v5))
      goto LABEL_21;
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v7 < 0)
    v27 = v7;
  else
    v27 = v13;
  swift_bridgeObjectRetain(v7);
  v28 = _CocoaArrayWrapper.endIndex.getter(v27);
  swift_bridgeObjectRelease(v7);
  v19 = v28 - v5;
  if (__OFSUB__(v28, v5))
    goto LABEL_52;
LABEL_21:
  if ((v19 & 0x8000000000000000) == 0)
  {
    v17 = (char *)(v15 + 1);
    v20 = (char *)(v13 + 32 + 8 * v5);
    if (v15 + 1 != (_QWORD *)v20 || v17 >= &v20[8 * v19])
      v17 = (char *)memmove(v17, v20, 8 * v19);
    if (!((unint64_t)v7 >> 62))
    {
      v21 = *(_QWORD *)(v13 + 16);
      v22 = v21 + v8;
      if (!__OFADD__(v21, v8))
      {
LABEL_27:
        *(_QWORD *)(v13 + 16) = v22;
        goto LABEL_28;
      }
      goto LABEL_58;
    }
LABEL_53:
    if (v7 < 0)
      v29 = v7;
    else
      v29 = v13;
    swift_bridgeObjectRetain(v7);
    v30 = _CocoaArrayWrapper.endIndex.getter(v29);
    v17 = (char *)swift_bridgeObjectRelease(v7);
    v22 = v30 + v8;
    if (!__OFADD__(v30, v8))
      goto LABEL_27;
LABEL_58:
    __break(1u);
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

BOOL sub_1001F6258(_QWORD *a1)
{
  return sub_1001F6F34(a1, &OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD110Connection_identifier);
}

uint64_t sub_1001F627C(uint64_t a1, uint64_t a2)
{
  return sub_1001F6294(a1, a2, type metadata accessor for DSKBLEPairing.BLEUnpairingRequest);
}

uint64_t sub_1001F6288(uint64_t a1, uint64_t a2)
{
  return sub_1001F6294(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for DSKBLEPairing.BLEPairingRequest);
}

uint64_t sub_1001F6294(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v6 = a3;
    v3 = a2;
    v5 = a1;
    v7 = *v4;
    if (!((unint64_t)*v4 >> 62))
    {
      v9 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v9 >= a2)
        goto LABEL_4;
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }
  if (v7 < 0)
    v28 = v7;
  else
    v28 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  v9 = _CocoaArrayWrapper.endIndex.getter(v28);
  swift_bridgeObjectRelease(v7);
  if (v9 < v3)
    goto LABEL_34;
LABEL_4:
  v7 = v3 - v5;
  if (__OFSUB__(v3, v5))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v8 = v5 - v3;
  if (__OFSUB__(0, v7))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v9 = *v4;
  if (!((unint64_t)*v4 >> 62))
  {
    v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    v11 = v10 - v7;
    if (!__OFADD__(v10, v8))
      goto LABEL_8;
LABEL_42:
    __break(1u);
LABEL_43:
    if (v9 < 0)
      v30 = v9;
    else
      v30 = v9 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v9);
    v14 = _CocoaArrayWrapper.endIndex.getter(v30);
    swift_bridgeObjectRelease(v9);
    v9 = *v4;
    goto LABEL_15;
  }
LABEL_37:
  if (v9 < 0)
    v29 = v9;
  else
    v29 = v9 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v9);
  v10 = _CocoaArrayWrapper.endIndex.getter(v29);
  swift_bridgeObjectRelease(v9);
  v11 = v10 + v8;
  if (__OFADD__(v10, v8))
    goto LABEL_42;
LABEL_8:
  v9 = *v4;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v4);
  *v4 = v9;
  v10 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v9 & 0x8000000000000000) == 0 && (v9 & 0x4000000000000000) == 0)
  {
    v13 = v9 & 0xFFFFFFFFFFFFFF8;
    if (v11 <= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v10 = 1;
  }
  if ((unint64_t)v9 >> 62)
    goto LABEL_43;
  v14 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v14 <= v11)
    v14 = v11;
  swift_bridgeObjectRetain(v9);
  v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v10, v14, 1, v9);
  v16 = *v4;
  *v4 = v15;
  swift_bridgeObjectRelease(v16);
  v13 = *v4 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v17 = v13 + 32;
  v18 = (char *)(v13 + 32 + 8 * v5);
  v19 = v6(0);
  v20 = (void *)swift_arrayDestroy(v18, v7, v19);
  if (!v8)
    return specialized Array._endMutation()(v20);
  v21 = *v4;
  if (!((unint64_t)*v4 >> 62))
  {
    v22 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
    v23 = v22 - v3;
    if (!__OFSUB__(v22, v3))
      goto LABEL_21;
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v21 < 0)
    v31 = *v4;
  else
    v31 = v21 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v4);
  v32 = _CocoaArrayWrapper.endIndex.getter(v31);
  v20 = (void *)swift_bridgeObjectRelease(v21);
  v23 = v32 - v3;
  if (__OFSUB__(v32, v3))
    goto LABEL_52;
LABEL_21:
  if ((v23 & 0x8000000000000000) == 0)
  {
    v24 = (char *)(v17 + 8 * v3);
    if (v5 != v3 || v18 >= &v24[8 * v23])
      v20 = memmove(v18, v24, 8 * v23);
    v3 = *v4;
    if (!((unint64_t)*v4 >> 62))
    {
      v25 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
      v26 = v25 + v8;
      if (!__OFADD__(v25, v8))
      {
LABEL_27:
        *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFF8) + 0x10) = v26;
        return specialized Array._endMutation()(v20);
      }
      goto LABEL_58;
    }
LABEL_53:
    if (v3 < 0)
      v33 = v3;
    else
      v33 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    v34 = _CocoaArrayWrapper.endIndex.getter(v33);
    v20 = (void *)swift_bridgeObjectRelease(v3);
    v26 = v34 + v8;
    if (!__OFADD__(v34, v8))
      goto LABEL_27;
LABEL_58:
    __break(1u);
  }
  v35 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v35, 1046, 0);
  __break(1u);
  return result;
}

void *sub_1001F6590(uint64_t a1, int64_t a2)
{
  _QWORD *v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  void *result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = (_QWORD *)*v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_1001C4254(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  result = (void *)swift_arrayDestroy(&v4[2 * a1 + 4], v7, &type metadata for Data);
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[2 * a2 + 4];
    if (a1 != a2 || &v4[2 * a1 + 4] >= (_QWORD *)&v16[16 * v15])
      result = memmove(&v4[2 * a1 + 4], v16, 16 * v15);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  v19 = 2;
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v19, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001F66F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = a2;
    v4 = a1;
    v5 = *v3;
    if (!((unint64_t)*v3 >> 62))
    {
      v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v7 >= a2)
        goto LABEL_4;
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }
  if (v5 < 0)
    v21 = v5;
  else
    v21 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v7 = _CocoaArrayWrapper.endIndex.getter(v21);
  swift_bridgeObjectRelease(v5);
  if (v7 < v2)
    goto LABEL_34;
LABEL_4:
  v7 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v6 = v4 - v2;
  if (__OFSUB__(0, v7))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v5 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    v8 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    v9 = v8 - v7;
    if (!__OFADD__(v8, v6))
      goto LABEL_8;
LABEL_42:
    __break(1u);
LABEL_43:
    if (v5 < 0)
      v23 = v5;
    else
      v23 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v12 = _CocoaArrayWrapper.endIndex.getter(v23);
    swift_bridgeObjectRelease(v5);
    goto LABEL_15;
  }
LABEL_37:
  if (v5 < 0)
    v22 = v5;
  else
    v22 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v8 = _CocoaArrayWrapper.endIndex.getter(v22);
  swift_bridgeObjectRelease(v5);
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
    goto LABEL_42;
LABEL_8:
  v5 = *v3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v3);
  *v3 = v5;
  v8 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    v11 = v5 & 0xFFFFFFFFFFFFFF8;
    if (v9 <= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v8 = 1;
  }
  if ((unint64_t)v5 >> 62)
    goto LABEL_43;
  v12 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v12 <= v9)
    v12 = v9;
  swift_bridgeObjectRetain(v5);
  v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v8, v12, 1, v5);
  swift_bridgeObjectRelease(*v3);
  *v3 = v5;
  v11 = v5 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v13 = type metadata accessor for SERequest(0);
  v14 = (void *)swift_arrayDestroy(v11 + 32 + 8 * v4, v7, v13);
  if (!v6)
    return specialized Array._endMutation()(v14);
  if (!((unint64_t)v5 >> 62))
  {
    v15 = *(_QWORD *)(v11 + 16);
    v16 = v15 - v2;
    if (!__OFSUB__(v15, v2))
      goto LABEL_21;
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v5 < 0)
    v24 = v5;
  else
    v24 = v11;
  swift_bridgeObjectRetain(v5);
  v25 = _CocoaArrayWrapper.endIndex.getter(v24);
  v14 = (void *)swift_bridgeObjectRelease(v5);
  v16 = v25 - v2;
  if (__OFSUB__(v25, v2))
    goto LABEL_52;
LABEL_21:
  if ((v16 & 0x8000000000000000) == 0)
  {
    v17 = (const void *)(v11 + 32 + 8 * v2);
    if (v4 != v2 || v11 + 32 + 8 * v4 >= (unint64_t)v17 + 8 * v16)
      v14 = memmove((void *)(v11 + 32 + 8 * v4), v17, 8 * v16);
    if (!((unint64_t)v5 >> 62))
    {
      v18 = *(_QWORD *)(v11 + 16);
      v19 = v18 + v6;
      if (!__OFADD__(v18, v6))
      {
LABEL_27:
        *(_QWORD *)(v11 + 16) = v19;
        return specialized Array._endMutation()(v14);
      }
      goto LABEL_58;
    }
LABEL_53:
    if (v5 < 0)
      v26 = v5;
    else
      v26 = v11;
    swift_bridgeObjectRetain(v5);
    v27 = _CocoaArrayWrapper.endIndex.getter(v26);
    v14 = (void *)swift_bridgeObjectRelease(v5);
    v19 = v27 + v6;
    if (!__OFADD__(v27, v6))
      goto LABEL_27;
LABEL_58:
    __break(1u);
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

void *sub_1001F69C4(uint64_t a1, int64_t a2)
{
  _QWORD *v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t v12;
  void *result;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = (_QWORD *)*v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_1001C446C(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  v12 = sub_100063D3C(&qword_100349B78);
  result = (void *)swift_arrayDestroy(&v4[3 * a1 + 4], v7, v12);
  if (!v7)
    goto LABEL_20;
  v14 = v4[2];
  v15 = __OFSUB__(v14, a2);
  v16 = v14 - a2;
  if (v15)
    goto LABEL_26;
  if ((v16 & 0x8000000000000000) == 0)
  {
    v17 = (char *)&v4[3 * a2 + 4];
    if (a1 != a2 || &v4[3 * a1 + 4] >= (_QWORD *)&v17[24 * v16])
      result = memmove(&v4[3 * a1 + 4], v17, 24 * v16);
    v18 = v4[2];
    v15 = __OFADD__(v18, v8);
    v19 = v18 - v7;
    if (!v15)
    {
      v4[2] = v19;
LABEL_20:
      *v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  v20 = 2;
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v20, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001F6B40(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100063D3C(&qword_100346258);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001F6B80(_QWORD *a1)
{
  uint64_t v1;

  return static UUID.== infix(_:_:)(*a1+ OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD119HighPriorityRequest_connectionIdentifier, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_1001F6BBC(_QWORD *a1)
{
  uint64_t v1;

  return static UUID.== infix(_:_:)(*a1+ OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD110Connection_identifier, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_1001F6BF8(uint64_t *a1)
{
  uint64_t *v1;

  return sub_1001F5850(a1, v1[2], v1[3], v1[4]) & 1;
}

uint64_t sub_1001F6C18(uint64_t *a1)
{
  uint64_t *v1;

  return sub_1001F5714(a1, v1[2], v1[3], v1[4]) & 1;
}

BOOL sub_1001F6C38(_QWORD *a1)
{
  return sub_1001F6F34(a1, &OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD119HighPriorityRequest_connectionIdentifier);
}

uint64_t sub_1001F6C58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = a2;
    v4 = a1;
    v5 = *v3;
    if (!((unint64_t)*v3 >> 62))
    {
      v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v7 >= a2)
        goto LABEL_4;
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }
  if (v5 < 0)
    v21 = v5;
  else
    v21 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v7 = _CocoaArrayWrapper.endIndex.getter(v21);
  swift_bridgeObjectRelease(v5);
  if (v7 < v2)
    goto LABEL_34;
LABEL_4:
  v7 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v6 = v4 - v2;
  if (__OFSUB__(0, v7))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v5 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    v8 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    v9 = v8 - v7;
    if (!__OFADD__(v8, v6))
      goto LABEL_8;
LABEL_42:
    __break(1u);
LABEL_43:
    if (v5 < 0)
      v23 = v5;
    else
      v23 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v12 = _CocoaArrayWrapper.endIndex.getter(v23);
    swift_bridgeObjectRelease(v5);
    goto LABEL_15;
  }
LABEL_37:
  if (v5 < 0)
    v22 = v5;
  else
    v22 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v8 = _CocoaArrayWrapper.endIndex.getter(v22);
  swift_bridgeObjectRelease(v5);
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
    goto LABEL_42;
LABEL_8:
  v5 = *v3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v3);
  *v3 = v5;
  v8 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    v11 = v5 & 0xFFFFFFFFFFFFFF8;
    if (v9 <= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v8 = 1;
  }
  if ((unint64_t)v5 >> 62)
    goto LABEL_43;
  v12 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v12 <= v9)
    v12 = v9;
  swift_bridgeObjectRetain(v5);
  v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v8, v12, 1, v5);
  swift_bridgeObjectRelease(*v3);
  *v3 = v5;
  v11 = v5 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v13 = sub_10006C25C(0, (unint64_t *)&qword_100346310, SESDesignatedKey_ptr);
  v14 = (void *)swift_arrayDestroy(v11 + 32 + 8 * v4, v7, v13);
  if (!v6)
    return specialized Array._endMutation()(v14);
  if (!((unint64_t)v5 >> 62))
  {
    v15 = *(_QWORD *)(v11 + 16);
    v16 = v15 - v2;
    if (!__OFSUB__(v15, v2))
      goto LABEL_21;
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v5 < 0)
    v24 = v5;
  else
    v24 = v11;
  swift_bridgeObjectRetain(v5);
  v25 = _CocoaArrayWrapper.endIndex.getter(v24);
  v14 = (void *)swift_bridgeObjectRelease(v5);
  v16 = v25 - v2;
  if (__OFSUB__(v25, v2))
    goto LABEL_52;
LABEL_21:
  if ((v16 & 0x8000000000000000) == 0)
  {
    v17 = (const void *)(v11 + 32 + 8 * v2);
    if (v4 != v2 || v11 + 32 + 8 * v4 >= (unint64_t)v17 + 8 * v16)
      v14 = memmove((void *)(v11 + 32 + 8 * v4), v17, 8 * v16);
    if (!((unint64_t)v5 >> 62))
    {
      v18 = *(_QWORD *)(v11 + 16);
      v19 = v18 + v6;
      if (!__OFADD__(v18, v6))
      {
LABEL_27:
        *(_QWORD *)(v11 + 16) = v19;
        return specialized Array._endMutation()(v14);
      }
      goto LABEL_58;
    }
LABEL_53:
    if (v5 < 0)
      v26 = v5;
    else
      v26 = v11;
    swift_bridgeObjectRetain(v5);
    v27 = _CocoaArrayWrapper.endIndex.getter(v26);
    v14 = (void *)swift_bridgeObjectRelease(v5);
    v19 = v27 + v6;
    if (!__OFADD__(v27, v6))
      goto LABEL_27;
LABEL_58:
    __break(1u);
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

BOOL sub_1001F6F34(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  return (static UUID.== infix(_:_:)(*a1 + *a2, **(_QWORD **)(v2 + 16) + *a2) & 1) == 0;
}

uint64_t sub_1001F6F88(_QWORD *a1)
{
  return sub_1001F6BBC(a1) & 1;
}

uint64_t sub_1001F6FA0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  const char *v23;
  id v24;
  unint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  id v33;
  uint64_t v34;
  unint64_t v35;
  id v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  __int128 v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  void (*v55)(char *, uint64_t);
  void (**v56)(char *, uint64_t);
  void (*v57)(char *, uint64_t);
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  unint64_t v66;
  unint64_t v67;
  _OWORD v68[2];
  __int128 v69;
  __int128 v70;
  unint64_t v71;

  v2 = type metadata accessor for SymmetricKey(0);
  v63 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = type metadata accessor for SharedSecret(0);
  v62 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64, v6);
  v65 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for P256.KeyAgreement.PublicKey(0);
  v9 = *(_QWORD *)(v8 - 8);
  v11 = __chkstk_darwin(v8, v10);
  v13 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  v16 = (char *)&v55 - v15;
  v66 = 0xD000000000000012;
  v67 = 0x80000001002BB220;
  AnyHashable.init<A>(_:)(&v66, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(a1 + 16) && (v17 = sub_100187F3C((uint64_t)v68), (v18 & 1) != 0))
  {
    sub_100096CB0(*(_QWORD *)(a1 + 56) + 32 * v17, (uint64_t)&v69);
  }
  else
  {
    v69 = 0u;
    v70 = 0u;
  }
  sub_100098C48((uint64_t)v68);
  if (!*((_QWORD *)&v70 + 1))
  {
    sub_100096700((uint64_t)&v69, (uint64_t *)&unk_100346130);
    goto LABEL_10;
  }
  if ((swift_dynamicCast(&v66, &v69, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {
LABEL_10:
    sub_100098CBC();
    v23 = "Missing ephemeralPublicKey";
    goto LABEL_11;
  }
  v59 = v5;
  v60 = v2;
  v61 = v8;
  v19 = v67;
  v20 = Data.init(base64Encoded:options:)(v66, v67, 0);
  v22 = v21;
  swift_bridgeObjectRelease(v19);
  if (v22 >> 60 == 15)
  {
    sub_100098CBC();
    v23 = "Invalid ephemeralPublicKey";
LABEL_11:
    v24 = sub_1001E2838(0, 1, 0xD00000000000001ALL, (unint64_t)(v23 - 32) | 0x8000000000000000, 0);
    return swift_willThrow(v24);
  }
  v58 = v20;
  v66 = 1635017060;
  v67 = 0xE400000000000000;
  AnyHashable.init<A>(_:)(&v66, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(a1 + 16) && (v26 = sub_100187F3C((uint64_t)v68), (v27 & 1) != 0))
  {
    sub_100096CB0(*(_QWORD *)(a1 + 56) + 32 * v26, (uint64_t)&v69);
  }
  else
  {
    v69 = 0u;
    v70 = 0u;
  }
  sub_100098C48((uint64_t)v68);
  if (!*((_QWORD *)&v70 + 1))
  {
    sub_100096700((uint64_t)&v69, (uint64_t *)&unk_100346130);
    goto LABEL_21;
  }
  if ((swift_dynamicCast(&v66, &v69, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {
LABEL_21:
    sub_100098CBC();
    v36 = sub_1001E2838(0, 1, 0x20676E697373694DLL, 0xEC00000061746164, 0);
    swift_willThrow(v36);
    v34 = v58;
    v35 = v22;
    return sub_10006B9B4(v34, v35);
  }
  v28 = v67;
  v29 = Data.init(base64Encoded:options:)(v66, v67, 0);
  v31 = v30;
  swift_bridgeObjectRelease(v28);
  v32 = v22;
  if (v31 >> 60 == 15)
  {
    sub_100098CBC();
    v33 = sub_1001E2838(0, 1, 0x2064696C61766E49, 0xEC00000061746164, 0);
    swift_willThrow(v33);
    v34 = v58;
    v35 = v22;
    return sub_10006B9B4(v34, v35);
  }
  v57 = (void (*)(char *, uint64_t))v29;
  v37 = v58;
  *(_QWORD *)&v68[0] = v58;
  *((_QWORD *)&v68[0] + 1) = v32;
  sub_100063C8C(v58, v32);
  v38 = v71;
  P256.KeyAgreement.PublicKey.init<A>(x963Representation:)(v68, &type metadata for Data, &protocol witness table for Data);
  if (v38)
  {
    sub_10006B9B4(v37, v32);
    v34 = (uint64_t)v57;
    v35 = v31;
    return sub_10006B9B4(v34, v35);
  }
  v71 = v31;
  v39 = v65;
  P256.KeyAgreement.PrivateKey.sharedSecretFromKeyAgreement(with:)(v16);
  v56 = (void (**)(char *, uint64_t))type metadata accessor for SHA256(0);
  v40 = P256.KeyAgreement.PrivateKey.publicKey.getter(v56);
  v41 = P256.KeyAgreement.PublicKey.x963Representation.getter(v40);
  v43 = v42;
  v44 = *(void (**)(char *, uint64_t))(v9 + 8);
  v45 = v37;
  v55 = v44;
  v44(v13, v61);
  *(_QWORD *)&v68[0] = v37;
  *((_QWORD *)&v68[0] + 1) = v32;
  sub_10006BA34(v37, v32);
  sub_100063C8C(v41, v43);
  sub_1000FB17C(v41, v43);
  sub_100063CD0(v41, v43);
  sub_100063CD0(v41, v43);
  v46 = v68[0];
  v69 = v68[0];
  v47 = sub_1001F7A00();
  v48 = sub_10007EF0C();
  v49 = v59;
  SharedSecret.x963DerivedSymmetricKey<A, B>(using:sharedInfo:outputByteCount:)(v56, &v69, 32, v56, &type metadata for Data, v47, v48);
  v50 = sub_100063CD0(v46, *((unint64_t *)&v46 + 1));
  v51 = v32;
  v56 = &v55;
  __chkstk_darwin(v50, v52);
  v53 = (uint64_t)v57;
  v54 = v71;
  *(&v55 - 2) = v57;
  *(&v55 - 1) = (void (*)(char *, uint64_t))v54;
  SymmetricKey.withUnsafeBytes<A>(_:)(v68, sub_1001F83E4);
  sub_10006B9B4(v45, v51);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v49, v60);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v39, v64);
  v55(v16, v61);
  sub_10006B9B4(v53, v54);
  return *(_QWORD *)&v68[0];
}

uint64_t sub_1001F7618(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t result;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  _QWORD v61[2];
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;

  v53 = a1;
  v54 = a2;
  v58 = type metadata accessor for SymmetricKey(0);
  v56 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58, v6);
  v55 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = type metadata accessor for SharedSecret(0);
  v8 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57, v9);
  v59 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for P256.KeyAgreement.PrivateKey(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v60 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for P256.KeyAgreement.PublicKey(0);
  v16 = *(_QWORD *)(v15 - 8);
  v18 = __chkstk_darwin(v15, v17);
  v20 = (char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v21);
  v23 = (char *)&v44 - v22;
  v62 = a3;
  v63 = a4;
  sub_100063C8C(a3, a4);
  v24 = v64;
  result = P256.KeyAgreement.PublicKey.init<A>(x963Representation:)(&v62, &type metadata for Data, &protocol witness table for Data);
  if (!v24)
  {
    v47 = v20;
    v48 = a4;
    v49 = v8;
    v50 = v16;
    v64 = v15;
    v51 = v12;
    v52 = v11;
    v26 = v60;
    P256.KeyAgreement.PrivateKey.init()(result);
    v27 = v59;
    P256.KeyAgreement.PrivateKey.sharedSecretFromKeyAgreement(with:)(v23);
    v46 = v23;
    v45 = type metadata accessor for SHA256(0);
    v28 = v47;
    v29 = P256.KeyAgreement.PrivateKey.publicKey.getter(v45);
    v30 = P256.KeyAgreement.PublicKey.x963Representation.getter(v29);
    v32 = v31;
    v50 = *(_QWORD *)(v50 + 8);
    ((void (*)(char *, uint64_t))v50)(v28, v64);
    v62 = v30;
    v63 = v32;
    v33 = a3;
    v34 = v48;
    sub_100063C8C(a3, v48);
    sub_100063C8C(v30, v32);
    sub_1000FB17C(a3, v34);
    sub_100063CD0(a3, v34);
    sub_100063CD0(v30, v32);
    v36 = v62;
    v35 = v63;
    v61[0] = v62;
    v61[1] = v63;
    v37 = sub_1001F7A00();
    v38 = sub_10007EF0C();
    v39 = v55;
    SharedSecret.x963DerivedSymmetricKey<A, B>(using:sharedInfo:outputByteCount:)(v45, v61, 32, v45, &type metadata for Data, v37, v38);
    v40 = sub_100063CD0(v36, v35);
    __chkstk_darwin(v40, v41);
    v42 = v54;
    *(&v44 - 6) = v53;
    *(&v44 - 5) = v42;
    *(&v44 - 4) = v33;
    *(&v44 - 3) = v34;
    *(&v44 - 2) = (uint64_t)v26;
    sub_100063D3C((uint64_t *)&unk_100346180);
    SymmetricKey.withUnsafeBytes<A>(_:)(&v62, sub_1001F7F98);
    v43 = v51;
    (*(void (**)(char *, uint64_t))(v56 + 8))(v39, v58);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v27, v57);
    ((void (*)(char *, uint64_t))v50)(v46, v64);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v26, v52);
    return v62;
  }
  return result;
}

unint64_t sub_1001F7A00()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100346FA8;
  if (!qword_100346FA8)
  {
    v1 = type metadata accessor for SHA256(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for SHA256, v1);
    atomic_store(result, (unint64_t *)&qword_100346FA8);
  }
  return result;
}

uint64_t sub_1001F7A48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, char *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, unint64_t *a7@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t inited;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  Swift::String v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  Swift::String v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  Swift::String v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD v83[3];
  uint64_t v84;

  v70 = a6;
  v67 = a4;
  v68 = a5;
  v76 = a2;
  v77 = a3;
  v75 = a7;
  v8 = type metadata accessor for P256.KeyAgreement.PublicKey(0);
  v71 = *(_QWORD *)(v8 - 8);
  v72 = v8;
  __chkstk_darwin(v8, v9);
  v69 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100063D3C(&qword_100346F98);
  __chkstk_darwin(v11, v12);
  v78 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for AES.GCM.SealedBox(0);
  v73 = *(_QWORD *)(v14 - 8);
  v74 = v14;
  __chkstk_darwin(v14, v15);
  v79 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for AES.GCM.Nonce(0);
  v80 = *(_QWORD *)(v17 - 8);
  v81 = v17;
  __chkstk_darwin(v17, v18);
  v20 = (char *)&v65 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for SymmetricKey(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21, v23);
  v25 = (char *)&v65 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83[0] = a1;
  v83[1] = 16;
  v26 = sub_100063D3C(&qword_10034AA78);
  v27 = sub_1001F7FB8(&qword_10034AA80, (uint64_t)&protocol conformance descriptor for <A> UnsafeBufferPointer<A>);
  v28 = v25;
  SymmetricKey.init<A>(data:)(v83, v26, v27);
  v29 = a1 + 16;
  if (!a1)
    v29 = 0;
  v83[0] = v29;
  v83[1] = 16;
  v30 = sub_1001F7FB8(&qword_10034AA88, (uint64_t)&protocol conformance descriptor for <A> UnsafeBufferPointer<A>);
  v31 = v84;
  AES.GCM.Nonce.init<A>(data:)(v83, v26, v30);
  if (v31)
    return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v25, v21);
  v66 = v22;
  v84 = v21;
  v33 = (uint64_t)v78;
  v83[0] = v76;
  v83[1] = v77;
  v35 = v80;
  v34 = v81;
  (*(void (**)(char *, char *, uint64_t))(v80 + 16))(v78, v20, v81);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v35 + 56))(v33, 0, 1, v34);
  v36 = sub_10007EF0C();
  static AES.GCM.seal<A>(_:using:nonce:)(v83, v28, v33, &type metadata for Data, v36);
  sub_100096700(v33, &qword_100346F98);
  v37 = sub_100063D3C(&qword_1003460E0);
  inited = swift_initStackObject(v37, &v82);
  *(_OWORD *)(inited + 16) = xmmword_100288AB0;
  strcpy((char *)v83, "version");
  v83[1] = 0xE700000000000000;
  AnyHashable.init<A>(_:)(v83, &type metadata for String, &protocol witness table for String);
  v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(SESPrivacyEncryptionSchemeAppleECV3);
  *(_QWORD *)(inited + 96) = &type metadata for String;
  *(_QWORD *)(inited + 72) = v39;
  *(_QWORD *)(inited + 80) = v40;
  strcpy((char *)v83, "publicKeyHash");
  HIWORD(v83[1]) = -4864;
  AnyHashable.init<A>(_:)(v83, &type metadata for String, &protocol witness table for String);
  sub_1001EDD38(v67, v68);
  v42 = v41;
  v78 = v20;
  v44 = v43;
  v45 = Data.base64EncodedString(options:)(0);
  v77 = v28;
  sub_100063CD0(v42, v44);
  *(_QWORD *)(inited + 168) = &type metadata for String;
  *(Swift::String *)(inited + 144) = v45;
  v83[0] = 0xD000000000000012;
  v83[1] = 0x80000001002BB220;
  v46 = AnyHashable.init<A>(_:)(v83, &type metadata for String, &protocol witness table for String);
  v47 = v69;
  v48 = P256.KeyAgreement.PrivateKey.publicKey.getter(v46);
  v49 = P256.KeyAgreement.PublicKey.x963Representation.getter(v48);
  v51 = v50;
  (*(void (**)(char *, uint64_t))(v71 + 8))(v47, v72);
  v52 = Data.base64EncodedString(options:)(0);
  sub_100063CD0(v49, v51);
  *(_QWORD *)(inited + 240) = &type metadata for String;
  *(Swift::String *)(inited + 216) = v52;
  v83[0] = 1635017060;
  v83[1] = 0xE400000000000000;
  v53 = AnyHashable.init<A>(_:)(v83, &type metadata for String, &protocol witness table for String);
  v54 = v79;
  v55 = AES.GCM.SealedBox.ciphertext.getter(v53);
  v57 = v56;
  v58 = AES.GCM.SealedBox.tag.getter();
  v60 = v59;
  v83[0] = v55;
  v83[1] = v57;
  sub_100063C8C(v55, v57);
  sub_1000FB17C(v58, v60);
  sub_100063CD0(v58, v60);
  sub_100063CD0(v55, v57);
  v61 = v83[0];
  v62 = v83[1];
  v63 = Data.base64EncodedString(options:)(0);
  sub_100063CD0(v61, v62);
  *(_QWORD *)(inited + 312) = &type metadata for String;
  *(Swift::String *)(inited + 288) = v63;
  v64 = sub_10017C368(inited);
  (*(void (**)(char *, uint64_t))(v73 + 8))(v54, v74);
  (*(void (**)(char *, uint64_t))(v80 + 8))(v78, v81);
  result = (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v77, v84);
  *v75 = v64;
  return result;
}

uint64_t sub_1001F7F98@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1001F7A48(a1, *(_QWORD *)(v2 + 16), *(char **)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), a2);
}

uint64_t sub_1001F7FB8(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_100063DC8(&qword_10034AA78);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001F7FFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  _QWORD v26[8];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;

  v26[7] = a2;
  v27 = a3;
  v26[3] = a4;
  v5 = type metadata accessor for AES.GCM.SealedBox(0);
  v26[4] = *(_QWORD *)(v5 - 8);
  v26[5] = v5;
  __chkstk_darwin(v5, v6);
  v26[6] = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for AES.GCM.Nonce(0);
  v9 = __chkstk_darwin(v28, v8);
  v11 = (char *)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  v14 = (char *)v26 - v13;
  v15 = type metadata accessor for SymmetricKey(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15, v17);
  v19 = (char *)v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = a1;
  v30 = 16;
  v20 = sub_100063D3C(&qword_10034AA78);
  v21 = sub_1001F7FB8(&qword_10034AA80, (uint64_t)&protocol conformance descriptor for <A> UnsafeBufferPointer<A>);
  SymmetricKey.init<A>(data:)(&v29, v20, v21);
  v22 = a1 + 16;
  if (!a1)
    v22 = 0;
  v29 = v22;
  v30 = 16;
  v23 = sub_1001F7FB8(&qword_10034AA88, (uint64_t)&protocol conformance descriptor for <A> UnsafeBufferPointer<A>);
  v24 = v31;
  AES.GCM.Nonce.init<A>(data:)(&v29, v20, v23);
  if (!v24)
  {
    v31 = v11;
    v26[1] = v16;
    v26[2] = v14;
    v26[0] = v15;
    __asm { BR              X10 }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, v15);
}

uint64_t sub_1001F83E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1001F7FFC(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

void sub_1001F83FC(Swift::UInt a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  os_log_type_t v28;
  uint8_t *v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39[3];
  uint64_t v40;
  uint64_t v41;

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (uint64_t *)((char *)v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v9 = qword_100354EE8;
  *v8 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  v11 = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  v12 = Logger.logObject.getter(v11);
  v16 = static os_log_type_t.info.getter(v12, v13, v14, v15);
  if (os_log_type_enabled(v12, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = swift_slowAlloc(32, -1);
    v39[0] = v18;
    *(_DWORD *)v17 = 136315138;
    if (a1)
    {
      if (a1 != 1)
        goto LABEL_24;
      v20 = 0xE400000000000000;
      v19 = 1852799308;
    }
    else
    {
      v19 = 0x616873696C41;
      v20 = 0xE600000000000000;
    }
    v40 = sub_1001C56EC(v19, v20, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease(v20);
    _os_log_impl((void *)&_mh_execute_header, v12, v16, "Enabling LPEM for %s", v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);
  }

  swift_beginAccess(v2 + OBJC_IVAR____TtC10seserviced7DSKLPEM_runningModules, v39, 33, 0);
  v21 = sub_1000C7394((Swift::UInt *)&v40, a1);
  v22 = swift_endAccess(v39);
  if ((v21 & 1) == 0)
  {
    v30 = Logger.logObject.getter(v22);
    v34 = static os_log_type_t.info.getter(v30, v31, v32, v33);
    if (!os_log_type_enabled(v30, v34))
    {
LABEL_21:

      return;
    }
    v35 = (uint8_t *)swift_slowAlloc(12, -1);
    v36 = swift_slowAlloc(32, -1);
    v39[0] = v36;
    *(_DWORD *)v35 = 136315138;
    if (!a1)
    {
      v37 = 0x616873696C41;
      v38 = 0xE600000000000000;
LABEL_20:
      v40 = sub_1001C56EC(v37, v38, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v35 + 4, v35 + 12);
      swift_bridgeObjectRelease(v38);
      _os_log_impl((void *)&_mh_execute_header, v30, v34, "LPEM already enabled for %s", v35, 0xCu);
      swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1, -1);
      swift_slowDealloc(v35, -1, -1);
      goto LABEL_21;
    }
    if (a1 == 1)
    {
      v38 = 0xE400000000000000;
      v37 = 1852799308;
      goto LABEL_20;
    }
LABEL_24:
    v40 = a1;
    _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for DSK.Module, &v40, &type metadata for DSK.Module, &type metadata for Int);
    __break(1u);
    return;
  }
  v23 = OBJC_IVAR____TtC10seserviced7DSKLPEM_isEnabled;
  if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC10seserviced7DSKLPEM_isEnabled) & 1) == 0)
  {
    v24 = Logger.logObject.getter(v22);
    v28 = static os_log_type_t.info.getter(v24, v25, v26, v27);
    if (os_log_type_enabled(v24, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v28, "Enabling LPEM", v29, 2u);
      swift_slowDealloc(v29, -1, -1);
    }

    sub_1001F9180(1);
    *(_BYTE *)(v2 + v23) = 1;
  }
}

void sub_1001F8820(Swift::UInt a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  os_log_type_t v29;
  uint8_t *v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41[3];

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (uint64_t *)((char *)&v41[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v9 = qword_100354EE8;
  *v8 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  v11 = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  v12 = Logger.logObject.getter(v11);
  v16 = static os_log_type_t.info.getter(v12, v13, v14, v15);
  if (os_log_type_enabled(v12, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = swift_slowAlloc(32, -1);
    v41[0] = v18;
    *(_DWORD *)v17 = 136315138;
    if (a1)
    {
      if (a1 != 1)
        goto LABEL_24;
      v20 = 0xE400000000000000;
      v19 = 1852799308;
    }
    else
    {
      v19 = 0x616873696C41;
      v20 = 0xE600000000000000;
    }
    v40 = sub_1001C56EC(v19, v20, v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, v41, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease(v20);
    _os_log_impl((void *)&_mh_execute_header, v12, v16, "Disabling LPEM for %s", v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);
  }

  v21 = v2 + OBJC_IVAR____TtC10seserviced7DSKLPEM_runningModules;
  swift_beginAccess(v2 + OBJC_IVAR____TtC10seserviced7DSKLPEM_runningModules, v41, 33, 0);
  sub_1000D354C(a1);
  v23 = v22;
  v24 = swift_endAccess(v41);
  if ((v23 & 1) != 0)
  {
    v31 = Logger.logObject.getter(v24);
    v35 = static os_log_type_t.info.getter(v31, v32, v33, v34);
    if (!os_log_type_enabled(v31, v35))
    {
LABEL_21:

      return;
    }
    v36 = (uint8_t *)swift_slowAlloc(12, -1);
    v37 = swift_slowAlloc(32, -1);
    v41[0] = v37;
    *(_DWORD *)v36 = 136315138;
    if (!a1)
    {
      v38 = 0x616873696C41;
      v39 = 0xE600000000000000;
LABEL_20:
      v40 = sub_1001C56EC(v38, v39, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, v41, v36 + 4, v36 + 12);
      swift_bridgeObjectRelease(v39);
      _os_log_impl((void *)&_mh_execute_header, v31, v35, "LPEM is not enabled for %s", v36, 0xCu);
      swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v36, -1, -1);
      goto LABEL_21;
    }
    if (a1 == 1)
    {
      v39 = 0xE400000000000000;
      v38 = 1852799308;
      goto LABEL_20;
    }
LABEL_24:
    v40 = a1;
    _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for DSK.Module, &v40, &type metadata for DSK.Module, &type metadata for Int);
    __break(1u);
    return;
  }
  if (!*(_QWORD *)(*(_QWORD *)v21 + 16))
  {
    v25 = Logger.logObject.getter(v24);
    v29 = static os_log_type_t.info.getter(v25, v26, v27, v28);
    if (os_log_type_enabled(v25, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v29, "Disabling LPEM", v30, 2u);
      swift_slowDealloc(v30, -1, -1);
    }

    sub_1001F9180(0);
    *(_BYTE *)(v2 + OBJC_IVAR____TtC10seserviced7DSKLPEM_isEnabled) = 0;
  }
}

uint64_t sub_1001F8C40()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for DSKLPEM(0);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  result = sub_1001F8C7C();
  qword_100354F08 = result;
  return result;
}

uint64_t sub_1001F8C7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  _QWORD aBlock[5];
  uint64_t v13;

  v1 = v0;
  v2 = type metadata accessor for DispatchQoS.QoSClass(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = String.init(cString:)(SESLoggingSubsystem);
  Logger.init(subsystem:category:)(v7);
  *(_BYTE *)(v0 + OBJC_IVAR____TtC10seserviced7DSKLPEM_isEnabled) = 0;
  *(_BYTE *)(v0 + OBJC_IVAR____TtC10seserviced7DSKLPEM_isSupported) = 1;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced7DSKLPEM_runningModules) = &_swiftEmptySetSingleton;
  sub_100071AEC();
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchQoS.QoSClass.default(_:), v2);
  v8 = (void *)static OS_dispatch_queue.global(qos:)(v6);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  aBlock[4] = sub_1001F9BB8;
  v13 = v1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10017BF6C;
  aBlock[3] = &unk_10030E6A0;
  v9 = _Block_copy(aBlock);
  v10 = v13;
  swift_retain(v1);
  swift_release(v10);
  os_state_add_handler(v8, v9);
  _Block_release(v9);

  return v1;
}

uint64_t sub_1001F8E08()
{
  uint64_t v0;
  char v1;
  char isUniquelyReferenced_nonNull_native;
  char v3;
  uint64_t *v4;
  uint64_t v5;
  int64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  Class isa;
  _DWORD *v25;
  uint64_t result;
  void *v27;
  _OWORD v28[2];
  __int128 v29;
  void *v30;

  v1 = *(_BYTE *)(v0 + OBJC_IVAR____TtC10seserviced7DSKLPEM_isEnabled);
  v30 = &type metadata for Bool;
  LOBYTE(v29) = v1;
  sub_10006C2B4(&v29, v28);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_10018DEC0(v28, 0x656C62616E457369, 0xE900000000000064, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease(0x8000000000000000);
  v30 = &type metadata for Bool;
  LOBYTE(v29) = 1;
  sub_10006C2B4(&v29, v28);
  v3 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  v27 = &_swiftEmptyDictionarySingleton;
  sub_10018DEC0(v28, 0x726F707075537369, 0xEB00000000646574, v3);
  swift_bridgeObjectRelease(0x8000000000000000);
  v4 = (uint64_t *)(v0 + OBJC_IVAR____TtC10seserviced7DSKLPEM_runningModules);
  swift_beginAccess(v4, &v27, 0, 0);
  v5 = *v4;
  v6 = *(_QWORD *)(*v4 + 16);
  v7 = _swiftEmptyArrayStorage;
  if (v6)
  {
    *(_QWORD *)&v29 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v5);
    sub_100192924(0, v6, 0);
    v7 = (_QWORD *)v29;
    v8 = sub_1001F9BC0(v5);
    v10 = v9;
    v12 = v11 & 1;
    v13 = v5 + 56;
    while ((v8 & 0x8000000000000000) == 0)
    {
      v13 = 1 << *(_BYTE *)(v5 + 32);
      if (v8 >= v13)
        break;
      v13 = *(_QWORD *)(v5 + 56 + (((unint64_t)v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8;
      if ((v13 & 1) == 0)
        goto LABEL_17;
      v13 = *(unsigned int *)(v5 + 36);
      if ((_DWORD)v13 != (_DWORD)v10)
        goto LABEL_18;
      v13 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v8);
      if (v13)
      {
        if (v13 != 1)
          goto LABEL_19;
        v14 = 0xE400000000000000;
        v15 = 1852799308;
      }
      else
      {
        v14 = 0xE600000000000000;
        v15 = 0x616873696C41;
      }
      *(_QWORD *)&v29 = v7;
      v17 = v7[2];
      v16 = v7[3];
      if (v17 >= v16 >> 1)
      {
        sub_100192924(v16 > 1, v17 + 1, 1);
        v7 = (_QWORD *)v29;
      }
      v7[2] = v17 + 1;
      v18 = &v7[2 * v17];
      v18[4] = v15;
      v18[5] = v14;
      v19 = sub_100195EE4(v8, v10, v12 & 1, v5);
      v8 = v19;
      v10 = v20;
      v12 = v21 & 1;
      if (!--v6)
      {
        sub_1000960E8(v19, v20, v21 & 1);
        swift_bridgeObjectRelease(v5);
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    *(_QWORD *)&v28[0] = v13;
    result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for DSK.Module, v28, &type metadata for DSK.Module, &type metadata for Int);
    __break(1u);
  }
  else
  {
LABEL_15:
    v30 = (void *)sub_100063D3C((uint64_t *)&unk_100346060);
    *(_QWORD *)&v29 = v7;
    sub_10006C2B4(&v29, v28);
    v22 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    sub_10018DEC0(v28, 0x4D676E696E6E7572, 0xEE0073656C75646FLL, v22);
    swift_bridgeObjectRelease(0x8000000000000000);
    v23 = sub_10017D088((uint64_t)&_swiftEmptyDictionarySingleton);
    swift_bridgeObjectRelease(&_swiftEmptyDictionarySingleton);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v23);
    v25 = sub_100015734((uint64_t)"dsklpem.state", (uint64_t)isa);

    return (uint64_t)v25;
  }
  return result;
}

void sub_1001F9180(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_log_type_t v16;
  uint8_t *v17;
  id v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  id v23;
  _QWORD aBlock[5];
  uint64_t v25;

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (_QWORD *)((char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v9 = qword_100354EE8;
  *v8 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  v11 = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) != 0)
  {
    v12 = Logger.logObject.getter(v11);
    v16 = static os_log_type_t.info.getter(v12, v13, v14, v15);
    if (os_log_type_enabled(v12, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v17 = 67109120;
      LODWORD(aBlock[0]) = a1 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(aBlock, (char *)aBlock + 4, v17 + 4, v17 + 8);
      _os_log_impl((void *)&_mh_execute_header, v12, v16, "Setting LPEM %{BOOL}d", v17, 8u);
      swift_slowDealloc(v17, -1, -1);
    }

    v18 = objc_msgSend((id)objc_opt_self(NFHardwareManager), "sharedHardwareManager");
    if (v18)
    {
      v19 = v18;
      v20 = swift_allocObject(&unk_10030E660, 25, 7);
      *(_QWORD *)(v20 + 16) = v2;
      *(_BYTE *)(v20 + 24) = a1 & 1;
      aBlock[4] = sub_1001F9B94;
      v25 = v20;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100128598;
      aBlock[3] = &unk_10030E678;
      v21 = _Block_copy(aBlock);
      v22 = v25;
      swift_retain(v2);
      swift_release(v22);
      v23 = objc_msgSend(v19, "startLPEMConfigSession:", v21);
      _Block_release(v21);
      swift_unknownObjectRelease(v23);

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_1001F93E4(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  os_log_type_t v24;
  uint8_t *v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint8_t *v33;
  unsigned int v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  os_log_type_t v47;
  uint8_t *v48;
  NSObject *oslog;
  _QWORD v50[3];
  _BYTE v51[8];
  _QWORD v52[3];
  _BYTE v53[8];
  uint64_t v54;
  _QWORD v55[3];
  _BYTE v56[16];
  id v57;

  if (a2)
  {
    swift_errorRetain(a2);
    swift_errorRetain(a2);
    v5 = swift_errorRetain(a2);
    v6 = Logger.logObject.getter(v5);
    v8 = static os_log_type_t.error.getter(v6, v7);
    if (os_log_type_enabled(v6, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      v10 = (void *)swift_slowAlloc(32, -1);
      v57 = v10;
      *(_DWORD *)v9 = 136315138;
      swift_getErrorValue(a2, v51, v50);
      v11 = Error.localizedDescription.getter(v50[1], v50[2]);
      v13 = v12;
      v54 = sub_1001C56EC(v11, v12, (uint64_t *)&v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, v55, v9 + 4, v9 + 12);
      swift_bridgeObjectRelease(v13);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v6, v8, "Error starting LPEM config session %s", v9, 0xCu);
      swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);
      swift_errorRelease(a2);

    }
    else
    {
      swift_errorRelease(a2);

      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }
    return;
  }
  if (a1)
  {
    if ((a4 & 1) != 0)
    {
      v57 = 0;
      v16 = objc_msgSend(a1, "enableLPEMFeature:error:", 2, &v57);
      v17 = v57;
      if (!v16)
      {
        v18 = v57;
        v19 = _convertNSErrorToError(_:)(v17);

        swift_willThrow(v20);
        swift_errorRetain(v19);
        v21 = swift_errorRetain(v19);
        v22 = Logger.logObject.getter(v21);
        v24 = static os_log_type_t.error.getter(v22, v23);
        if (os_log_type_enabled(v22, v24))
        {
          v25 = (uint8_t *)swift_slowAlloc(12, -1);
          v26 = (void *)swift_slowAlloc(32, -1);
          v57 = v26;
          *(_DWORD *)v25 = 136315138;
          swift_getErrorValue(v19, v53, v52);
          v27 = Error.localizedDescription.getter(v52[1], v52[2]);
          v29 = v28;
          v54 = sub_1001C56EC(v27, v28, (uint64_t *)&v57);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, v55, v25 + 4, v25 + 12);
          swift_bridgeObjectRelease(v29);
          swift_errorRelease(v19);
          swift_errorRelease(v19);
          v30 = "Failed to enable LPEM %s";
LABEL_17:
          _os_log_impl((void *)&_mh_execute_header, v22, v24, v30, v25, 0xCu);
          swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v26, -1, -1);
          swift_slowDealloc(v25, -1, -1);
          swift_errorRelease(v19);

          goto LABEL_19;
        }
        goto LABEL_18;
      }
    }
    else
    {
      v57 = 0;
      v34 = objc_msgSend(a1, "disableLPEMFeature:error:", 2, &v57);
      v17 = v57;
      if (!v34)
      {
        v36 = v57;
        v19 = _convertNSErrorToError(_:)(v17);

        swift_willThrow(v37);
        swift_errorRetain(v19);
        v38 = swift_errorRetain(v19);
        v22 = Logger.logObject.getter(v38);
        v24 = static os_log_type_t.error.getter(v22, v39);
        if (os_log_type_enabled(v22, v24))
        {
          v25 = (uint8_t *)swift_slowAlloc(12, -1);
          v26 = (void *)swift_slowAlloc(32, -1);
          v57 = v26;
          *(_DWORD *)v25 = 136315138;
          swift_getErrorValue(v19, v56, v55);
          v40 = Error.localizedDescription.getter(v55[1], v55[2]);
          v42 = v41;
          v54 = sub_1001C56EC(v40, v41, (uint64_t *)&v57);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, v55, v25 + 4, v25 + 12);
          swift_bridgeObjectRelease(v42);
          swift_errorRelease(v19);
          swift_errorRelease(v19);
          v30 = "Failed to disable LPEM %s";
          goto LABEL_17;
        }
LABEL_18:
        swift_errorRelease(v19);

        swift_errorRelease(v19);
        swift_errorRelease(v19);
        goto LABEL_19;
      }
    }
    v35 = v17;
LABEL_19:
    v43 = Logger.logObject.getter(objc_msgSend(a1, "endSession"));
    v47 = static os_log_type_t.info.getter(v43, v44, v45, v46);
    if (os_log_type_enabled(v43, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v48 = 67109120;
      LODWORD(v57) = a4 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, (char *)&v57 + 4, v48 + 4, v48 + 8);
      _os_log_impl((void *)&_mh_execute_header, v43, v47, "LPEM set to %{BOOL}d", v48, 8u);
      swift_slowDealloc(v48, -1, -1);
    }

    return;
  }
  oslog = Logger.logObject.getter(0);
  v32 = static os_log_type_t.error.getter(oslog, v31);
  if (os_log_type_enabled(oslog, (os_log_type_t)v32))
  {
    v33 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v33 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, (os_log_type_t)v32, "Got no LPEM config session", v33, 2u);
    swift_slowDealloc(v33, -1, -1);
  }

}

uint64_t sub_1001F9A48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC10seserviced7DSKLPEM_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced7DSKLPEM_runningModules));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1001F9AA8()
{
  return type metadata accessor for DSKLPEM(0);
}

uint64_t type metadata accessor for DSKLPEM(uint64_t a1)
{
  uint64_t result;

  result = qword_10034AAD0;
  if (!qword_10034AAD0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DSKLPEM);
  return result;
}

uint64_t sub_1001F9AEC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_10028DD88;
    v4[2] = &unk_10028DD88;
    v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1001F9B70()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

void sub_1001F9B94(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1001F93E4(a1, a2, *(_QWORD *)(v2 + 16), *(_BYTE *)(v2 + 24));
}

uint64_t sub_1001F9BA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001F9BB0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1001F9BC0(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

void sub_1001F9C68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  id v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD v34[5];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[32];

  v35 = a2;
  v36 = a1;
  v5 = sub_100063D3C((uint64_t *)&unk_1003465E0);
  __chkstk_darwin(v5, v6);
  v34[4] = (char *)v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v10 = __chkstk_darwin(v8, v9);
  __chkstk_darwin(v10, v11);
  v12 = type metadata accessor for DispatchPredicate(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v16 = (_QWORD *)((char *)v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v17 = qword_100354EE8;
  *v16 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v13 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v12);
  v18 = (id)v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)(v16);
  (*(void (**)(_QWORD *, uint64_t))(v13 + 8))(v16, v12);
  if ((v17 & 1) == 0)
  {
    __break(1u);
    JUMPOUT(0x1001FA48CLL);
  }
  v19 = (uint64_t *)(v3 + OBJC_IVAR____TtC10seserviced9AlishaRKE_requestsInProgress);
  swift_beginAccess(v3 + OBJC_IVAR____TtC10seserviced9AlishaRKE_requestsInProgress, v40, 0, 0);
  v20 = *v19;
  swift_retain(a3);
  v21 = swift_bridgeObjectRetain(v20);
  v22 = sub_100205D34(v21, a3);
  swift_bridgeObjectRelease(v20);
  swift_release(a3);
  if (v22)
  {
    v23 = *(_QWORD *)(v22 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_timer);
    if (v23)
      sub_10004C548(v23);
    __asm { BR              X10 }
  }
  v24 = swift_retain_n(a3, 2);
  v25 = Logger.logObject.getter(v24);
  v27 = static os_log_type_t.error.getter(v25, v26);
  if (os_log_type_enabled(v25, (os_log_type_t)v27))
  {
    v28 = (uint8_t *)swift_slowAlloc(12, -1);
    v29 = swift_slowAlloc(32, -1);
    *(_DWORD *)v28 = 136315138;
    v39 = v29;
    v30 = swift_retain(a3);
    v31 = UUID.uuidString.getter(v30);
    v33 = v32;
    swift_release(a3);
    v37 = sub_1001C56EC(v31, v33, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v28 + 4, v28 + 12);
    swift_release_n(a3, 2);
    swift_bridgeObjectRelease(v33);
    _os_log_impl((void *)&_mh_execute_header, v25, (os_log_type_t)v27, "Failed to retrieve RKE request in progress for %s", v28, 0xCu);
    swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v28, -1, -1);
  }
  else
  {
    swift_release_n(a3, 2);
  }

}

void sub_1001FA4BC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  id v12;
  void *v13;
  Class isa;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;

  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (uint64_t *)((char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v11 = qword_100354EE8;
  *v10 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  v12 = (id)v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v10);
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v10, v6);
  if ((v11 & 1) == 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  v13 = (void *)objc_opt_self(SESTLV);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v15 = objc_msgSend(v13, "TLVsWithData:", isa);

  if (!v15)
    goto LABEL_20;
  v16 = sub_10006C25C(0, &qword_100344CE0, SESTLV_ptr);
  a1 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v15, v16);

  if ((unint64_t)a1 >> 62)
  {
LABEL_14:
    if (a1 < 0)
      v21 = a1;
    else
      v21 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v17 = _CocoaArrayWrapper.endIndex.getter(v21);
    if (v17)
      goto LABEL_7;
LABEL_18:
    swift_bridgeObjectRelease_n(a1, 2);
    return;
  }
  v17 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  if (!v17)
    goto LABEL_18;
LABEL_7:
  if (v17 >= 1)
  {
    v18 = 0;
    do
    {
      if ((a1 & 0xC000000000000001) != 0)
        v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v18, a1);
      else
        v19 = *(id *)(a1 + 8 * v18 + 32);
      v20 = v19;
      ++v18;
      v23 = v19;
      sub_1001FDC5C(&v23, v3, a3);

    }
    while (v17 != v18);
    goto LABEL_18;
  }
  __break(1u);
LABEL_20:
  __break(1u);
}

uint64_t sub_1001FA6D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  id v14;
  uint64_t result;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  void (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v32[32];
  _BYTE v33[24];

  v2 = v1;
  v4 = sub_100063D3C((uint64_t *)&unk_1003465E0);
  __chkstk_darwin(v4, v5);
  v7 = &v32[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = type metadata accessor for DispatchPredicate(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = &v32[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v13 = qword_100354EE8;
  *v12 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8);
  v14 = (id)v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)(v12);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v9 + 8))(v12, v8);
  if ((v13 & 1) != 0)
  {
    v16 = (uint64_t *)(v2 + OBJC_IVAR____TtC10seserviced9AlishaRKE_requestsInProgress);
    swift_beginAccess(v2 + OBJC_IVAR____TtC10seserviced9AlishaRKE_requestsInProgress, v33, 1, 0);
    v17 = *v16;
    swift_retain(a1);
    swift_bridgeObjectRetain(v17);
    v19 = sub_100205D34(v18, a1);
    swift_bridgeObjectRelease(v17);
    result = swift_release(a1);
    if (v19)
    {
      v20 = *(_QWORD *)(v19 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_timer);
      if (v20)
        sub_10004C548(v20);
      v21 = (uint64_t *)(v19 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_completion);
      v22 = *(void (**)(uint64_t))(v19 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_completion);
      if (v22)
      {
        v23 = v21[1];
        swift_retain(v23);
        v22(262);
        sub_10008F210((uint64_t)v22, v23);
        v24 = *v21;
        v25 = v21[1];
        *v21 = 0;
        v21[1] = 0;
        sub_10008F210(v24, v25);
      }
      v26 = *v16;
      swift_retain(v19);
      swift_bridgeObjectRetain(v26);
      v28 = sub_1002051FC(v27, v19);
      swift_bridgeObjectRelease(v26);
      swift_release(v19);
      v29 = *v16;
      *v16 = (uint64_t)v28;
      swift_bridgeObjectRelease(v29);
      v30 = a1 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
      swift_beginAccess(v2 + OBJC_IVAR____TtC10seserviced9AlishaRKE_notificationsToBeSuppressed, v32, 33, 0);
      sub_10012ED44(v30);
      swift_endAccess(v32);
      swift_beginAccess(v2 + OBJC_IVAR____TtC10seserviced9AlishaRKE_passiveEntryState, v32, 33, 0);
      sub_10012EC6C(v30);
      swift_endAccess(v32);
      swift_beginAccess(v2 + OBJC_IVAR____TtC10seserviced9AlishaRKE_peersAvailableToSubscribe, v32, 33, 0);
      sub_1000D4128(v30, (uint64_t)v7);
      swift_endAccess(v32);
      swift_release(v19);
      return sub_1000F1C30((uint64_t)v7);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *sub_1001FA9A4(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  unint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v10;
  _QWORD *v11;
  _UNKNOWN **v12;
  _QWORD *v13;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    v13 = _swiftEmptyArrayStorage;
    sub_100192ACC(0, v1, 0);
    v2 = _swiftEmptyArrayStorage;
    v4 = (unint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      sub_100063C8C(v5, *v4);
      v13 = v2;
      v8 = v2[2];
      v7 = v2[3];
      if (v8 >= v7 >> 1)
      {
        sub_100192ACC(v7 > 1, v8 + 1, 1);
        v2 = v13;
      }
      v4 += 2;
      v11 = &type metadata for Data;
      v12 = &off_100309F68;
      *(_QWORD *)&v10 = v5;
      *((_QWORD *)&v10 + 1) = v6;
      v2[2] = v8 + 1;
      sub_1000DB160(&v10, (uint64_t)&v2[5 * v8 + 4]);
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1001FAAA0(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  uint64_t i;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  id *v9;
  uint64_t v10;
  id v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  _OWORD v16[2];
  _QWORD *v17;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v14 = a1;
    else
      v14 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v14);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v3 = _swiftEmptyArrayStorage;
  if (!v2)
    return (uint64_t)v3;
  v17 = _swiftEmptyArrayStorage;
  result = sub_100192B54(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v2; ++i)
      {
        v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
        v6 = sub_10006C25C(0, &qword_10034AE08, SESPrivacyKey_ptr);
        swift_dynamicCast(v16, &v15, v6, (char *)&type metadata for Any + 8, 7);
        v3 = v17;
        if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
        {
          sub_100192B54(0, v3[2] + 1, 1);
          v3 = v17;
        }
        v8 = v3[2];
        v7 = v3[3];
        if (v8 >= v7 >> 1)
        {
          sub_100192B54(v7 > 1, v8 + 1, 1);
          v3 = v17;
        }
        v3[2] = v8 + 1;
        sub_10006C2B4(v16, &v3[4 * v8 + 4]);
      }
    }
    else
    {
      v9 = (id *)(a1 + 32);
      v10 = sub_10006C25C(0, &qword_10034AE08, SESPrivacyKey_ptr);
      do
      {
        v15 = *v9;
        v11 = v15;
        swift_dynamicCast(v16, &v15, v10, (char *)&type metadata for Any + 8, 7);
        v3 = v17;
        if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
        {
          sub_100192B54(0, v3[2] + 1, 1);
          v3 = v17;
        }
        v13 = v3[2];
        v12 = v3[3];
        if (v13 >= v12 >> 1)
        {
          sub_100192B54(v12 > 1, v13 + 1, 1);
          v3 = v17;
        }
        v3[2] = v13 + 1;
        sub_10006C2B4(v16, &v3[4 * v13 + 4]);
        ++v9;
        --v2;
      }
      while (v2);
    }
    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1001FAD00(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  Class isa;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v2);
    v4 = a1 + 32;
    do
    {
      v4 += 2;
      isa = UInt16._bridgeToObjectiveC()().super.super.isa;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(isa);
      v6 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v6);
      v7 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, isa);
      specialized ContiguousArray._endMutation()(v7);
      --v2;
    }
    while (v2);
    return _swiftEmptyArrayStorage;
  }
  return result;
}

void sub_1001FADA4(unsigned int a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  id v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  id v29;
  uint64_t v30;
  Class isa;
  id v32;
  id v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint8_t *v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  uint64_t v60;
  os_log_type_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  unint64_t v74;
  uint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint8_t *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  _BYTE v85[24];

  v5 = v4;
  v9 = sub_100063D3C((uint64_t *)&unk_1003465E0);
  __chkstk_darwin(v9, v10);
  v81 = (uint64_t)&v79 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchPredicate(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v16 = (uint64_t *)((char *)&v79 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v17 = qword_100354EE8;
  *v16 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v13 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v12);
  v18 = (id)v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)(v16);
  (*(void (**)(_QWORD *, uint64_t))(v13 + 8))(v16, v12);
  if ((v17 & 1) == 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  v19 = (uint64_t *)(v3 + OBJC_IVAR____TtC10seserviced9AlishaRKE_requestsInProgress);
  swift_beginAccess(v3 + OBJC_IVAR____TtC10seserviced9AlishaRKE_requestsInProgress, v85, 0, 0);
  v20 = *v19;
  swift_bridgeObjectRetain(v20);
  sub_100063C8C(a2, a3);
  v5 = sub_1002057EC(v20);
  sub_100063CD0(a2, a3);
  swift_bridgeObjectRelease(v20);
  if (!v5)
  {
    sub_100063C8C(a2, a3);
    v45 = sub_100063C8C(a2, a3);
    v46 = Logger.logObject.getter(v45);
    v48 = static os_log_type_t.error.getter(v46, v47);
    if (os_log_type_enabled(v46, v48))
    {
      v49 = (uint8_t *)swift_slowAlloc(12, -1);
      v81 = swift_slowAlloc(32, -1);
      v82 = v81;
      *(_DWORD *)v49 = 136315138;
      v80 = v49 + 4;
      sub_1001BD2CC(a2, a3);
      v51 = v50;
      v84 = v50;
      v52 = sub_100063D3C((uint64_t *)&unk_100346060);
      v53 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
      v54 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v52, v53);
      v56 = v55;
      swift_bridgeObjectRelease(v51);
      v84 = sub_1001C56EC(v54, v56, &v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, v85, v80, v49 + 12);
      swift_bridgeObjectRelease(v56);
      sub_100063CD0(a2, a3);
      sub_100063CD0(a2, a3);
      _os_log_impl((void *)&_mh_execute_header, v46, v48, "No RKE request in progress for %s", v49, 0xCu);
      v57 = v81;
      swift_arrayDestroy(v81, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v57, -1, -1);
      swift_slowDealloc(v49, -1, -1);

    }
    else
    {

      sub_100063CD0(a2, a3);
      sub_100063CD0(a2, a3);
    }
    v71 = sub_100208460();
    v72 = swift_allocError(&type metadata for AlishaRKE.RKEError, v71, 0, 0);
    *v73 = 7;
    swift_willThrow(v72);
    return;
  }
  v80 = (uint8_t *)v4;
  v21 = OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_functionIdentifier;
  if (*(unsigned __int16 *)(v5 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_functionIdentifier) != (unsigned __int16)a1)
  {
    sub_100063C8C(a2, a3);
    sub_100063C8C(a2, a3);
    v58 = swift_retain(v5);
    v59 = Logger.logObject.getter(v58);
    v61 = static os_log_type_t.error.getter(v59, v60);
    if (os_log_type_enabled(v59, v61))
    {
      v62 = swift_slowAlloc(20, -1);
      v81 = swift_slowAlloc(32, -1);
      v82 = v81;
      *(_DWORD *)v62 = 33555202;
      LOWORD(v84) = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, (char *)&v84 + 2, v62 + 4, v62 + 6);
      *(_WORD *)(v62 + 6) = 512;
      LOWORD(v84) = *(_WORD *)(v5 + v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, (char *)&v84 + 2, v62 + 8, v62 + 10);
      swift_release(v5);
      *(_WORD *)(v62 + 10) = 2080;
      v79 = v62 + 12;
      sub_1001BD2CC(a2, a3);
      v64 = v63;
      v84 = v63;
      v65 = sub_100063D3C((uint64_t *)&unk_100346060);
      v66 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
      v67 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v65, v66);
      v69 = v68;
      swift_bridgeObjectRelease(v64);
      v84 = sub_1001C56EC(v67, v69, &v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, v85, v79, v62 + 20);
      swift_bridgeObjectRelease(v69);
      sub_100063CD0(a2, a3);
      sub_100063CD0(a2, a3);
      _os_log_impl((void *)&_mh_execute_header, v59, v61, "RKE function %hu does not match current function in progress %hu for key %s", (uint8_t *)v62, 0x14u);
      v70 = v81;
      swift_arrayDestroy(v81, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v70, -1, -1);
      swift_slowDealloc(v62, -1, -1);

    }
    else
    {
      swift_release(v5);

      sub_100063CD0(a2, a3);
      sub_100063CD0(a2, a3);
    }
    v74 = sub_100208460();
    v75 = swift_allocError(&type metadata for AlishaRKE.RKEError, v74, 0, 0);
    *v76 = 7;
    swift_willThrow(v75);
    swift_release(v5);
    return;
  }
  v22 = OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_timer;
  v23 = *(_QWORD *)(v5 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_timer);
  if (v23)
    sub_10004C548(v23);
  v82 = sub_10007C66C((uint64_t)&off_100306410);
  v83 = v24;
  v25 = sub_100063D3C(&qword_100346220);
  v26 = swift_allocObject(v25, 48, 7);
  *(_OWORD *)(v26 + 16) = xmmword_10028DDB0;
  v27 = (void *)objc_opt_self(SESTLV);
  v28 = objc_msgSend(v27, "TLVWithTag:unsignedShort:", 128, bswap32(a1) >> 16);
  if (!v28)
  {
    __break(1u);
    goto LABEL_29;
  }
  *(_QWORD *)(v26 + 32) = v28;
  v29 = objc_msgSend(v27, "TLVWithTag:unsignedChar:", 129, *(unsigned __int8 *)(v5 + 16));
  if (!v29)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  *(_QWORD *)(v26 + 40) = v29;
  v84 = v26;
  specialized Array._endMutation()(v29);
  v30 = v84;
  sub_10006C25C(0, &qword_100344CE0, SESTLV_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v30);
  v32 = objc_msgSend(v27, "TLVWithTag:children:", 32631, isa);

  if (!v32)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v33 = objc_msgSend(v32, "asData");

  if (!v33)
  {
LABEL_31:
    __break(1u);
    return;
  }
  v79 = v22;
  v34 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v33);
  v36 = v35;

  Data.append(_:)(v34, v36);
  sub_100063CD0(v34, v36);
  if (qword_100344680 != -1)
LABEL_27:
    swift_once(&qword_100344680, sub_10016E9A8);
  v37 = v82;
  v38 = v83;
  v39 = *(_QWORD *)(v5 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_peer);
  v40 = v5 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_connectionIdentifier;
  v41 = type metadata accessor for UUID(0);
  v42 = *(_QWORD *)(v41 - 8);
  v43 = v81;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 16))(v81, v40, v41);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v42 + 56))(v43, 0, 1, v41);
  sub_100063C8C(v37, v38);
  v44 = v80;
  sub_10016E310(3u, 17, v37, v38, v39, 1, v43, 0, 1);
  sub_100063CD0(v37, v38);
  if (v44)
    swift_errorRelease(v44);
  v77 = v79;
  sub_1000F1C30(v81);
  *(_BYTE *)(v5 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_state) = 4;
  v78 = *(_QWORD *)(v5 + v77);
  if (v78)
    sub_10004C410(v78, *(double *)(v5 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_timeoutSec));
  swift_release(v5);
  sub_100063CD0(v82, v83);
}

void sub_1001FB670(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  unsigned __int8 v26;
  id v27;
  uint64_t v28;
  Class isa;
  id v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  Class v36;
  id v37;
  id v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  os_log_type_t v48;
  _BOOL4 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  NSObject *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;

  v74 = a2;
  v7 = sub_100063D3C((uint64_t *)&unk_1003465E0);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchPredicate(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v15 = (uint64_t *)((char *)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v16 = qword_100354EE8;
  *v15 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v12 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v11);
  v17 = (id)v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)(v15);
  v18 = (*(uint64_t (**)(_QWORD *, uint64_t))(v12 + 8))(v15, v11);
  if ((v16 & 1) == 0)
  {
    __break(1u);
LABEL_35:
    swift_once(&qword_100344680, sub_10016E9A8);
LABEL_29:
    v61 = v77;
    v62 = v78;
    v63 = *(_QWORD *)(a1 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_peer);
    v64 = a1 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_connectionIdentifier;
    v65 = type metadata accessor for UUID(0);
    v66 = *(_QWORD *)(v65 - 8);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v66 + 16))(v15, v64, v65);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v66 + 56))(v15, 0, 1, v65);
    sub_100063C8C(v61, v62);
    v67 = v71;
    sub_10016E310(3u, 17, v61, v62, v63, 1, (uint64_t)v15, 0, 1);
    if (v67)
    {
      sub_100063CD0(v61, v62);
      sub_1000F1C30((uint64_t)v15);
    }
    else
    {
      sub_1000F1C30((uint64_t)v15);
      sub_100063CD0(v61, v62);
      v68 = *(_QWORD *)(a1 + v69);
      if (v68)
        sub_10004C410(v68, *(double *)(a1 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_timeoutSec));
    }
    sub_100063CD0(v77, v78);
    return;
  }
  if ((*(unsigned __int8 *)(a1 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_type) | 2) == 2)
  {
    v72 = v10;
    v73 = v3;
    v19 = OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_timer;
    v20 = *(_QWORD *)(a1 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_timer);
    if (v20)
      sub_10004C548(v20);
    v21 = sub_100063D3C(&qword_100346220);
    v22 = swift_allocObject(v21, 48, 7);
    *(_OWORD *)(v22 + 16) = xmmword_10028DDB0;
    v70 = *(unsigned __int16 *)(a1 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_functionIdentifier);
    v23 = __rev16(v70);
    v24 = (void *)objc_opt_self(SESTLV);
    v25 = objc_msgSend(v24, "TLVWithTag:unsignedShort:", 128, v23);
    if (v25)
    {
      v69 = v19;
      *(_QWORD *)(v22 + 32) = v25;
      v26 = *(_BYTE *)(a1 + 16);
      v27 = objc_msgSend(v24, "TLVWithTag:unsignedChar:", 129, v26);
      if (v27)
      {
        *(_QWORD *)(v22 + 40) = v27;
        v77 = v22;
        specialized Array._endMutation()(v27);
        v28 = v77;
        v79 = v77;
        if (a3 >> 60 != 15)
        {
          sub_100063C8C(v74, a3);
          isa = Data._bridgeToObjectiveC()().super.isa;
          v30 = objc_msgSend(v24, "TLVWithTag:value:", 136, isa);

          if (!v30)
          {
LABEL_40:
            __break(1u);
            return;
          }
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v31);
          v33 = *(_QWORD *)((v79 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v32 = *(_QWORD *)((v79 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v33 >= v32 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1);
          v34 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v33, v30);
          specialized Array._endMutation()(v34);
          sub_10006B9B4(v74, a3);
          v28 = v79;
        }
        v77 = sub_10007C66C((uint64_t)&off_100305480);
        v78 = v35;
        sub_10006C25C(0, &qword_100344CE0, SESTLV_ptr);
        swift_bridgeObjectRetain(v28);
        v36 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v28);
        v37 = objc_msgSend(v24, "TLVWithTag:children:", 32630, v36);

        if (v37)
        {
          v38 = objc_msgSend(v37, "asData");

          if (v38)
          {
            v39 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v38);
            v41 = v40;

            swift_bridgeObjectRelease(v79);
            Data.append(_:)(v39, v41);
            sub_100063CD0(v39, v41);
            v42 = v74;
            sub_10006BA34(v74, a3);
            swift_retain(a1);
            sub_10006BA34(v42, a3);
            v43 = swift_retain(a1);
            v44 = Logger.logObject.getter(v43);
            v48 = static os_log_type_t.info.getter(v44, v45, v46, v47);
            v49 = os_log_type_enabled(v44, v48);
            v71 = v4;
            if (v49)
            {
              v50 = swift_slowAlloc(19, -1);
              v51 = v42;
              v52 = swift_slowAlloc(32, -1);
              v76 = v52;
              *(_DWORD *)v50 = 33555202;
              LOWORD(v75) = v70;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, (char *)&v75 + 2, v50 + 4, v50 + 6);
              *(_WORD *)(v50 + 6) = 256;
              swift_release(a1);
              LOBYTE(v75) = v26;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, (char *)&v75 + 1, v50 + 8, v50 + 9);
              swift_release(a1);
              *(_WORD *)(v50 + 9) = 2080;
              if (a3 >> 60 == 15)
                v53 = 0;
              else
                v53 = 0x7461642068746977;
              if (a3 >> 60 == 15)
                v54 = 0xE000000000000000;
              else
                v54 = 0xE900000000000061;
              v75 = sub_1001C56EC(v53, v54, &v76);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v50 + 11, v50 + 19);
              swift_bridgeObjectRelease(v54);
              sub_10006B9B4(v51, a3);
              sub_10006B9B4(v51, a3);
              _os_log_impl((void *)&_mh_execute_header, v44, v48, "Sending continuation request function %hu action %hhu %s", (uint8_t *)v50, 0x13u);
              swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v52, -1, -1);
              swift_slowDealloc(v50, -1, -1);

            }
            else
            {
              swift_release_n(a1, 2);

              sub_10006B9B4(v42, a3);
              sub_10006B9B4(v42, a3);
            }
            v15 = v72;
            if (qword_100344680 == -1)
              goto LABEL_29;
            goto LABEL_35;
          }
          goto LABEL_39;
        }
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_38;
  }
  v55 = Logger.logObject.getter(v18);
  v59 = static os_log_type_t.info.getter(v55, v56, v57, v58);
  if (os_log_type_enabled(v55, v59))
  {
    v60 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v60 = 0;
    _os_log_impl((void *)&_mh_execute_header, v55, v59, "Ignoring confirmation for non-enduring request", v60, 2u);
    swift_slowDealloc(v60, -1, -1);
  }

}

void sub_1001FBDB0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int v12;
  void (*v13)(_QWORD *, unint64_t, uint64_t);
  id v14;
  void (*v15)(_QWORD *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint8_t *v24;
  uint64_t v25;
  Swift::String v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  id v36;
  uint64_t v37;
  Class isa;
  id v39;
  id v40;
  uint64_t v41;
  Class v42;
  id v43;
  id v44;
  uint64_t v45;
  void (*v46)(_QWORD *, uint64_t);
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  id v50;
  _QWORD *v51;
  void (*v52)(_QWORD *, uint64_t);
  os_log_type_t v53;
  uint8_t *v54;
  uint64_t v55;
  Swift::String v56;
  unint64_t v57;
  uint8_t *v58;
  void (*v59)(_QWORD *, uint64_t);
  __int128 v60;
  void (*v61)(_QWORD *, unint64_t, uint64_t);
  unsigned int v62;
  uint64_t v63;
  _QWORD v64[2];
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;

  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (uint8_t **)((char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v11 = qword_100354EE8;
  *v10 = qword_100354EE8;
  v12 = enum case for DispatchPredicate.onQueue(_:);
  v13 = *(void (**)(_QWORD *, unint64_t, uint64_t))(v7 + 104);
  v13(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  v14 = (id)v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v10);
  v15 = *(void (**)(_QWORD *, uint64_t))(v7 + 8);
  v16 = ((uint64_t (*)(_QWORD *, uint64_t))v15)(v10, v6);
  if ((v11 & 1) == 0)
  {
    __break(1u);
LABEL_24:
    swift_once(&qword_100344680, sub_10016E9A8);
LABEL_17:
    v47 = v66;
    v48 = v67;
    v49 = qword_100354EE8;
    *v10 = qword_100354EE8;
    v13(v10, a1, v6);
    sub_100063C8C(v47, v48);
    v50 = (id)v49;
    LOBYTE(v49) = _dispatchPreconditionTest(_:)(v10);
    v59(v10, v6);
    if ((v49 & 1) != 0)
    {
      sub_100176C18(3, 17, v47, v48);
      v10 = v51;
      v15 = v52;
      if (qword_1003445A0 == -1)
      {
LABEL_19:
        sub_1000ADCAC((uint64_t)v10, (unint64_t)v15, a3);
        sub_100063CD0((uint64_t)v10, (unint64_t)v15);
        sub_100063CD0(v47, v48);
        sub_100063CD0(v66, v67);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    swift_once(&qword_1003445A0, sub_1000B26B0);
    goto LABEL_19;
  }
  v62 = v12;
  v17 = Logger.logObject.getter(v16);
  v21 = v17;
  if ((a1 & 0x8000000000000000) == 0 && a2 >= (uint64_t)a1 && a2 < 0x10000)
  {
    v61 = v13;
    v22 = static os_log_type_t.info.getter(v17, v18, v19, v20);
    v23 = os_log_type_enabled(v21, v22);
    v59 = v15;
    if (v23)
    {
      v24 = (uint8_t *)swift_slowAlloc(12, -1);
      v25 = swift_slowAlloc(32, -1);
      v65 = v25;
      v66 = 0;
      *(_QWORD *)&v60 = a3;
      *(_DWORD *)v24 = 136315138;
      v58 = v24 + 4;
      v63 = a2;
      v64[0] = a1;
      v67 = 0xE000000000000000;
      _print_unlocked<A, B>(_:_:)(v64, &v66, &type metadata for Int, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v26._countAndFlagsBits = 3026478;
      v26._object = (void *)0xE300000000000000;
      String.append(_:)(v26);
      _print_unlocked<A, B>(_:_:)(&v63, &v66, &type metadata for Int, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v27 = v67;
      v66 = sub_1001C56EC(v66, v67, &v65);
      a3 = v60;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67, v58, v24 + 12);
      swift_bridgeObjectRelease(v27);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Subscribing to function identifier range %s", v24, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);
    }

    v66 = sub_10007C66C((uint64_t)&off_1003054D0);
    v67 = v28;
    v29 = sub_100063D3C(&qword_100346220);
    v30 = swift_allocObject(v29, 48, 7);
    v60 = xmmword_10028DDB0;
    *(_OWORD *)(v30 + 16) = xmmword_10028DDB0;
    v31 = swift_allocObject(v29, 48, 7);
    *(_OWORD *)(v31 + 16) = v60;
    v13 = v61;
    if (a1 >= 0x10000)
      goto LABEL_33;
    v32 = v31;
    v33 = bswap32(a1) >> 16;
    v34 = (void *)objc_opt_self(SESTLV);
    v35 = objc_msgSend(v34, "TLVWithTag:unsignedShort:", 132, v33);
    if (v35)
    {
      *(_QWORD *)(v32 + 32) = v35;
      v36 = objc_msgSend(v34, "TLVWithTag:unsignedShort:", 133, bswap32(a2) >> 16);
      if (v36)
      {
        *(_QWORD *)(v32 + 40) = v36;
        v65 = v32;
        specialized Array._endMutation()(v36);
        v37 = v65;
        sub_10006C25C(0, &qword_100344CE0, SESTLV_ptr);
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v37);
        v39 = objc_msgSend(v34, "TLVWithTag:children:", 48, isa);

        if (v39)
        {
          *(_QWORD *)(v30 + 32) = v39;
          v40 = objc_msgSend(v34, "TLVWithTag:value:", 134, 0);
          if (v40)
          {
            *(_QWORD *)(v30 + 40) = v40;
            v65 = v30;
            specialized Array._endMutation()(v40);
            v41 = v65;
            v42 = Array._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease(v41);
            v43 = objc_msgSend(v34, "TLVWithTag:children:", 32627, v42);

            if (v43)
            {
              v44 = objc_msgSend(v43, "asData");

              a1 = v62;
              if (v44)
              {
                v45 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v44);
                v15 = v46;

                Data.append(_:)(v45, v15);
                sub_100063CD0(v45, (unint64_t)v15);
                if (qword_100344680 == -1)
                  goto LABEL_17;
                goto LABEL_24;
              }
              goto LABEL_32;
            }
LABEL_31:
            __break(1u);
LABEL_32:
            __break(1u);
LABEL_33:
            _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
            __break(1u);
            return;
          }
LABEL_30:
          __break(1u);
          goto LABEL_31;
        }
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_29;
  }
  v53 = static os_log_type_t.error.getter(v17, v18);
  if (os_log_type_enabled(v21, v53))
  {
    v54 = (uint8_t *)swift_slowAlloc(12, -1);
    v55 = swift_slowAlloc(32, -1);
    v65 = v55;
    v66 = 0;
    *(_DWORD *)v54 = 136315138;
    v63 = a2;
    v64[0] = a1;
    v67 = 0xE000000000000000;
    _print_unlocked<A, B>(_:_:)(v64, &v66, &type metadata for Int, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v56._countAndFlagsBits = 3026478;
    v56._object = (void *)0xE300000000000000;
    String.append(_:)(v56);
    _print_unlocked<A, B>(_:_:)(&v63, &v66, &type metadata for Int, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v57 = v67;
    v66 = sub_1001C56EC(v66, v67, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67, v54 + 4, v54 + 12);
    swift_bridgeObjectRelease(v57);
    _os_log_impl((void *)&_mh_execute_header, v21, v53, "Invalid subscription range %s", v54, 0xCu);
    swift_arrayDestroy(v55, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v55, -1, -1);
    swift_slowDealloc(v54, -1, -1);
  }

}

uint64_t sub_1001FC514()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for AlishaRKE(0);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  result = sub_1001FC550();
  qword_100354F18 = result;
  return result;
}

uint64_t sub_1001FC550()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  _QWORD aBlock[5];
  uint64_t v13;

  v1 = v0;
  v2 = type metadata accessor for DispatchQoS.QoSClass(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = String.init(cString:)(SESLoggingSubsystem);
  Logger.init(subsystem:category:)(v7);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced9AlishaRKE_notificationsToBeSuppressed) = &_swiftEmptyDictionarySingleton;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced9AlishaRKE_passiveEntryState) = &_swiftEmptyDictionarySingleton;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced9AlishaRKE_peersAvailableToSubscribe) = &_swiftEmptySetSingleton;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced9AlishaRKE_requestsInProgress) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced9AlishaRKE_rkeOEMProprietaryDataMaxLength) = 64;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced9AlishaRKE_rkeTimeoutDefaultMilliseconds) = 5000;
  sub_10006C25C(0, (unint64_t *)&qword_1003461A0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchQoS.QoSClass.default(_:), v2);
  v8 = (void *)static OS_dispatch_queue.global(qos:)(v6);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  aBlock[4] = sub_1002057D0;
  v13 = v1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10017BF6C;
  aBlock[3] = &unk_10030E908;
  v9 = _Block_copy(aBlock);
  v10 = v13;
  swift_retain(v1);
  swift_release(v10);
  os_state_add_handler(v8, v9);
  _Block_release(v9);

  return v1;
}

uint64_t sub_1001FC728()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  char v19;
  uint64_t *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  Class isa;
  _DWORD *v26;
  unint64_t v27;
  uint64_t v28[3];
  uint64_t v29[3];
  uint64_t v30[3];
  _OWORD v31[2];
  char v32[24];
  __int128 v33;
  uint64_t v34;

  v1 = v0;
  v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC10seserviced9AlishaRKE_requestsInProgress);
  swift_beginAccess(v2, v32, 0, 0);
  v3 = *v2;
  if ((unint64_t)*v2 >> 62)
    goto LABEL_14;
  v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(*v2);
  if (v4)
  {
    while (1)
    {
      *(_QWORD *)&v33 = _swiftEmptyArrayStorage;
      result = sub_1001929E4(0, v4 & ~(v4 >> 63), 0);
      if (v4 < 0)
        break;
      v27 = v1;
      v6 = 0;
      v7 = (_QWORD *)v33;
      while (v4 != v6)
      {
        if ((v3 & 0xC000000000000001) != 0)
        {
          v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v3);
        }
        else
        {
          v8 = *(_QWORD *)(v3 + 8 * v6 + 32);
          swift_retain(v8);
        }
        v30[0] = v8;
        sub_100202B34(v30, (unint64_t *)v31);
        swift_release(v8);
        v9 = *(_QWORD *)&v31[0];
        *(_QWORD *)&v33 = v7;
        v1 = v7[2];
        v10 = v7[3];
        if (v1 >= v10 >> 1)
        {
          sub_1001929E4(v10 > 1, v1 + 1, 1);
          v7 = (_QWORD *)v33;
        }
        ++v6;
        v7[2] = v1 + 1;
        v7[v1 + 4] = v9;
        if (v4 == v6)
        {
          swift_bridgeObjectRelease(v3);
          v1 = v27;
          goto LABEL_19;
        }
      }
      __break(1u);
LABEL_14:
      if (v3 < 0)
        v11 = v3;
      else
        v11 = v3 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v3);
      v4 = _CocoaArrayWrapper.endIndex.getter(v11);
      if (!v4)
        goto LABEL_18;
    }
    __break(1u);
  }
  else
  {
LABEL_18:
    swift_bridgeObjectRelease(v3);
    v7 = _swiftEmptyArrayStorage;
LABEL_19:
    v34 = sub_100063D3C(&qword_100346050);
    *(_QWORD *)&v33 = v7;
    sub_10006C2B4(&v33, v31);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    v30[0] = (uint64_t)&_swiftEmptyDictionarySingleton;
    sub_10018DEC0(v31, 0xD000000000000012, 0x80000001002C34F0, isUniquelyReferenced_nonNull_native);
    v13 = v30[0];
    swift_bridgeObjectRelease(0x8000000000000000);
    v14 = (uint64_t *)(v1 + OBJC_IVAR____TtC10seserviced9AlishaRKE_passiveEntryState);
    swift_beginAccess(v1 + OBJC_IVAR____TtC10seserviced9AlishaRKE_passiveEntryState, v30, 0, 0);
    v15 = *v14;
    v34 = sub_100063D3C(&qword_10034ADE8);
    *(_QWORD *)&v33 = v15;
    sub_10006C2B4(&v33, v31);
    swift_bridgeObjectRetain(v15);
    v16 = swift_isUniquelyReferenced_nonNull_native(v13);
    v29[0] = v13;
    sub_10018DEC0(v31, 0xD000000000000011, 0x80000001002C34B0, v16);
    swift_bridgeObjectRelease(0x8000000000000000);
    v17 = (uint64_t *)(v1 + OBJC_IVAR____TtC10seserviced9AlishaRKE_notificationsToBeSuppressed);
    swift_beginAccess(v1 + OBJC_IVAR____TtC10seserviced9AlishaRKE_notificationsToBeSuppressed, v29, 0, 0);
    v18 = *v17;
    v34 = sub_100063D3C(&qword_10034ADF0);
    *(_QWORD *)&v33 = v18;
    sub_10006C2B4(&v33, v31);
    swift_bridgeObjectRetain(v18);
    v19 = swift_isUniquelyReferenced_nonNull_native(v13);
    v28[0] = v13;
    sub_10018DEC0(v31, 0xD00000000000001BLL, 0x80000001002C3490, v19);
    swift_bridgeObjectRelease(0x8000000000000000);
    v20 = (uint64_t *)(v1 + OBJC_IVAR____TtC10seserviced9AlishaRKE_peersAvailableToSubscribe);
    swift_beginAccess(v20, v28, 0, 0);
    v21 = *v20;
    v34 = sub_100063D3C(&qword_10034ADF8);
    *(_QWORD *)&v33 = v21;
    sub_10006C2B4(&v33, v31);
    swift_bridgeObjectRetain(v21);
    v22 = swift_isUniquelyReferenced_nonNull_native(v13);
    sub_10018DEC0(v31, 0xD000000000000019, 0x80000001002C34D0, v22);
    v23 = v13;
    swift_bridgeObjectRelease(0x8000000000000000);
    v24 = sub_10017D088(v13);
    swift_bridgeObjectRelease(v23);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v24);
    v26 = sub_100015734((uint64_t)"alisharke.state", (uint64_t)isa);

    return (uint64_t)v26;
  }
  return result;
}

uint64_t sub_1001FCB38(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  char v8;
  char v9;

  if (!*(_BYTE *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_type))
  {
    v6 = *(_QWORD *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
    v7 = *(_QWORD *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
    if (v7 >> 60 == 15)
    {
      sub_100063C8C(a2, a3);
      sub_10006B9B4(v6, v7);
      sub_10006B9B4(a2, a3);
    }
    else
    {
      sub_10006BA34(*(_QWORD *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier), v7);
      sub_100063C8C(a2, a3);
      sub_10007C23C(v6, v7);
      v9 = v8;
      sub_100063CD0(a2, a3);
      sub_10006B9B4(v6, v7);
      if ((v9 & 1) != 0)
        return *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_isConnected);
    }
  }
  return 0;
}

uint64_t sub_1001FCC2C(void *a1)
{
  id v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char v6;
  char v7;
  uint64_t result;

  if (objc_msgSend(a1, "endPointType") != (id)1)
    return 0;
  v2 = objc_msgSend(a1, "publicKeyIdentifier");
  v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v5 = v4;

  sub_10007C23C(v3, v5);
  v7 = v6;
  sub_100063CD0(v3, v5);
  if ((v7 & 1) == 0)
    return 0;
  result = (uint64_t)objc_msgSend(a1, "bleUUID");
  if (result)
  {

    return 1;
  }
  return result;
}

uint64_t sub_1001FCCF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  void *object;
  Swift::String v21;
  Swift::String v22;
  void *v23;
  _BYTE v24[24];

  v6 = a1 + 16;
  swift_beginAccess(a1 + 16, v24, 0, 0);
  result = swift_weakLoadStrong(v6);
  if (result)
  {
    v8 = result;
    _StringGuts.grow(_:)(54);
    v9._object = (void *)0x80000001002C39A0;
    v9._countAndFlagsBits = 0xD00000000000001ELL;
    String.append(_:)(v9);
    sub_1001BD2CC(a3, a4);
    v11 = v10;
    v12 = sub_100063D3C((uint64_t *)&unk_100346060);
    v13 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
    v14 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v12, v13);
    v16 = v15;
    swift_bridgeObjectRelease(v11);
    v17._countAndFlagsBits = v14;
    v17._object = v16;
    String.append(_:)(v17);
    swift_bridgeObjectRelease(v16);
    v18._countAndFlagsBits = 0x6F6974636E756620;
    v18._object = (void *)0xEA0000000000206ELL;
    String.append(_:)(v18);
    v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt16, &protocol witness table for UInt16);
    object = v19._object;
    String.append(_:)(v19);
    swift_bridgeObjectRelease(object);
    v21._countAndFlagsBits = 0x206E6F6974636120;
    v21._object = (void *)0xE800000000000000;
    String.append(_:)(v21);
    v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt8, &protocol witness table for UInt8);
    v23 = v22._object;
    String.append(_:)(v22);
    swift_bridgeObjectRelease(v23);
    sub_1001FCEF4(v8, 5u, 0, 0xE000000000000000, 2147483655);
    swift_release(v8);
    return swift_bridgeObjectRelease(0xE000000000000000);
  }
  return result;
}

void sub_1001FCEF4(uint64_t a1, unsigned __int8 a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  id v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t *v28;
  void (*v29)(_QWORD);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSString v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40[3];
  _BYTE v41[24];

  v38 = a3;
  v10 = type metadata accessor for DispatchPredicate(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (uint64_t *)((char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v15 = qword_100354EE8;
  *v14 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v10);
  v16 = (id)v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)(v14);
  (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v14, v10);
  if ((v15 & 1) != 0)
  {
    v17 = (uint64_t *)(v5 + OBJC_IVAR____TtC10seserviced9AlishaRKE_requestsInProgress);
    swift_beginAccess(v5 + OBJC_IVAR____TtC10seserviced9AlishaRKE_requestsInProgress, v41, 1, 0);
    v18 = *v17;
    swift_retain(a1);
    v19 = swift_bridgeObjectRetain(v18);
    v20 = sub_1002051FC(v19, a1);
    swift_bridgeObjectRelease(v18);
    swift_release(a1);
    v21 = *v17;
    *v17 = (uint64_t)v20;
    swift_bridgeObjectRelease(v21);
    v22 = swift_bridgeObjectRetain_n(a4, 2);
    v23 = Logger.logObject.getter(v22);
    v25 = static os_log_type_t.error.getter(v23, v24);
    if (os_log_type_enabled(v23, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(12, -1);
      v27 = swift_slowAlloc(32, -1);
      v40[0] = v27;
      *(_DWORD *)v26 = 136315138;
      swift_bridgeObjectRetain(a4);
      v39 = sub_1001C56EC(v38, a4, v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v26 + 4, v26 + 12);
      swift_bridgeObjectRelease_n(a4, 3);
      _os_log_impl((void *)&_mh_execute_header, v23, v25, "%s", v26, 0xCu);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(a4, 2);
    }

    v28 = (uint64_t *)(a1 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_completion);
    v29 = *(void (**)(_QWORD))(a1 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_completion);
    if (v29)
    {
      v30 = v28[1];
      swift_retain(v30);
      v29(a2 | 0x100u);
      sub_10008F210((uint64_t)v29, v30);
      v31 = *v28;
      v32 = v28[1];
      *v28 = 0;
      v28[1] = 0;
      sub_10008F210(v31, v32);
    }
    sub_10020640C(a1, v38, a4);
    v33 = objc_opt_self(SESDAnalyticsLogger);
    v34 = *(unsigned __int16 *)(a1 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_functionIdentifier);
    v35 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_type);
    v36 = *(unsigned __int8 *)(a1 + 16);
    v37 = String._bridgeToObjectiveC()();
    sub_10004A084(v33, 1, v34, v36, a5, v35, v37);

  }
  else
  {
    __break(1u);
  }
}

void sub_1001FD248(void *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  NSData v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  NSData v35;
  Class v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  Class v41;
  id v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  id v48;
  id v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  id v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  Class v57;
  void *v58;
  id v59;
  id v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  Class v66;
  id v67;
  id v68;
  void *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  Class v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  NSObject *v83;
  uint64_t v84;
  os_log_type_t v85;
  uint8_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  Swift::String v93;
  void *object;
  unint64_t v95;
  id v96;
  Swift::String v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  void *v104;
  Swift::String v105;
  Swift::String v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  Class isa;
  id v114;
  __int16 v115;
  char v116;
  __int16 *v117;
  char *v118;
  void *v119;
  void *v120;
  uint64_t v121;
  unint64_t v122;
  _BYTE v123[24];

  v12 = sub_100063D3C((uint64_t *)&unk_1003465E0);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v108 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (uint64_t *)(a3 + OBJC_IVAR____TtC10seserviced9AlishaRKE_requestsInProgress);
  swift_beginAccess(a3 + OBJC_IVAR____TtC10seserviced9AlishaRKE_requestsInProgress, v123, 0, 0);
  v17 = *v16;
  swift_retain(a4);
  v18 = swift_bridgeObjectRetain(v17);
  v19 = sub_100205D34(v18, a4);
  swift_bridgeObjectRelease(v17);
  swift_release(a4);
  if (!v19)
  {
    v82 = swift_retain_n(a4, 2);
    v83 = Logger.logObject.getter(v82);
    v85 = static os_log_type_t.error.getter(v83, v84);
    if (os_log_type_enabled(v83, v85))
    {
      v86 = (uint8_t *)swift_slowAlloc(12, -1);
      v87 = swift_slowAlloc(32, -1);
      *(_DWORD *)v86 = 136315138;
      v117 = (__int16 *)v87;
      v88 = swift_retain(a4);
      v89 = UUID.uuidString.getter(v88);
      v91 = v90;
      swift_release(a4);
      v121 = sub_1001C56EC(v89, v91, (uint64_t *)&v117);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, &v122, v86 + 4, v86 + 12);
      swift_release_n(a4, 2);
      swift_bridgeObjectRelease(v91);
      _os_log_impl((void *)&_mh_execute_header, v83, v85, "Failed to retrieve RKE request in progress for %s", v86, 0xCu);
      swift_arrayDestroy(v87, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v87, -1, -1);
      swift_slowDealloc(v86, -1, -1);
    }
    else
    {
      swift_release_n(a4, 2);
    }

    return;
  }
  if ((a2 & 1) != 0)
  {
    v117 = 0;
    v118 = (char *)0xE000000000000000;
    _StringGuts.grow(_:)(19);
    swift_bridgeObjectRelease(v118);
    v117 = (__int16 *)0xD000000000000011;
    v118 = (char *)0x80000001002C38A0;
    LOBYTE(v121) = (_BYTE)a1;
    v92 = sub_10006B9E4();
    v93._countAndFlagsBits = Error.localizedDescription.getter(&type metadata for SEError, v92);
    object = v93._object;
    String.append(_:)(v93);
    swift_bridgeObjectRelease(object);
    v95 = (unint64_t)v118;
    sub_1001FCEF4(v19, 2u, (uint64_t)v117, (unint64_t)v118, 2147483650);
    swift_bridgeObjectRelease(v95);
LABEL_26:
    swift_release(v19);
    return;
  }
  v20 = OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_state;
  if (*(_BYTE *)(v19 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_state) != 2)
  {
    v117 = 0;
    v118 = (char *)0xE000000000000000;
    v96 = a1;
    _StringGuts.grow(_:)(44);
    v97._countAndFlagsBits = 0xD00000000000001ELL;
    v97._object = (void *)0x80000001002C3830;
    String.append(_:)(v97);
    sub_1001BD2CC(*(_QWORD *)(v19 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier), *(_QWORD *)(v19 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier + 8));
    v99 = v98;
    v121 = v98;
    v100 = sub_100063D3C((uint64_t *)&unk_100346060);
    v101 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
    v102 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v100, v101);
    v104 = v103;
    swift_bridgeObjectRelease(v99);
    v105._countAndFlagsBits = v102;
    v105._object = v104;
    String.append(_:)(v105);
    swift_bridgeObjectRelease(v104);
    v106._countAndFlagsBits = 0x74617473206E6920;
    v106._object = (void *)0xEA00000000002065;
    String.append(_:)(v106);
    LOBYTE(v121) = *(_BYTE *)(v19 + v20);
    _print_unlocked<A, B>(_:_:)(&v121, &v117, &type metadata for AlishaRKE.RKERequest.RequestState, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v107 = (unint64_t)v118;
    sub_1001FCEF4(v19, 2u, (uint64_t)v117, (unint64_t)v118, 2147483649);
    swift_bridgeObjectRelease(v107);
    sub_10006BA28(a1, 0);
    goto LABEL_26;
  }
  v111 = 0;
  v112 = OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_state;
  v114 = a1;
  v121 = Data.subdata(in:)(0, 16, a5, a6);
  v122 = v21;
  v115 = bswap32(*(unsigned __int16 *)(v19 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_functionIdentifier)) >> 16;
  v119 = &type metadata for UnsafeRawBufferPointer;
  v120 = &protocol witness table for UnsafeRawBufferPointer;
  v117 = &v115;
  v118 = &v116;
  v22 = sub_10006BA78(&v117, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)(*v22, v22[1]);
  sub_10006BA9C(&v117);
  LOBYTE(v115) = *(_BYTE *)(v19 + 16);
  v119 = &type metadata for UnsafeRawBufferPointer;
  v120 = &protocol witness table for UnsafeRawBufferPointer;
  v117 = &v115;
  v118 = (char *)&v115 + 1;
  v23 = sub_10006BA78(&v117, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)(*v23, v23[1]);
  sub_10006BA9C(&v117);
  v24 = *(_QWORD *)(v19 + 24);
  v25 = *(_QWORD *)(v19 + 32);
  sub_100063C8C(v24, v25);
  isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100063CD0(v24, v25);
  v26 = *(_QWORD *)(v19 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier);
  v27 = *(_QWORD *)(v19 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier + 8);
  sub_100063C8C(v26, v27);
  v28.super.isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100063CD0(v26, v27);
  v29 = v121;
  v30 = v122;
  sub_100063C8C(v121, v122);
  sub_1001EDD38(v29, v30);
  v32 = v31;
  v34 = v33;
  v109 = v30;
  v110 = v29;
  sub_100063CD0(v29, v30);
  v35.super.isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100063CD0(v32, v34);
  v36 = 0;
  v37 = *(_QWORD *)(v19 + 48);
  if (v37 >> 60 != 15)
  {
    v38 = a1;
    v39 = *(_QWORD *)(v19 + 40);
    sub_100063C8C(v39, *(_QWORD *)(v19 + 48));
    v36 = Data._bridgeToObjectiveC()().super.isa;
    v40 = v39;
    a1 = v38;
    sub_10006B9B4(v40, v37);
  }
  v41 = isa;
  v42 = sub_100045614(v114, isa, v28.super.isa, v35.super.isa, v36, 0);

  if (*(_QWORD *)(v19 + 48) >> 60 != 15)
  {
    v43 = *(_QWORD *)(a4 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier);
    v44 = *(_QWORD *)(a4 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier + 8);
    v45 = a4 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier;
    v46 = *(_QWORD *)(a4 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
    v47 = *(_QWORD *)(v45 + 8);
    sub_10006BA34(v43, v44);
    sub_10006BA34(v46, v47);
    sub_1001F119C(0xD000000000000042, 0x80000001002C38F0, v43, v44, v46, v47, 0);
    sub_10006B9B4(v46, v47);
    sub_10006B9B4(v43, v44);
  }
  if (!v42)
  {
    sub_1001FCEF4(v19, 2u, 0xD000000000000027, 0x80000001002C38C0, 2147483651);
    sub_10006BA28(a1, 0);
    swift_release(v19);
    sub_100063CD0(v110, v109);
    return;
  }
  v114 = a1;
  v48 = v42;
  v49 = objc_msgSend(v48, "signedData");
  v50 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v49);
  v52 = v51;

  v117 = (__int16 *)v50;
  v118 = (char *)v52;
  v53 = objc_msgSend(v48, "signature");
  v54 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v53);
  v56 = v55;

  v57 = Data._bridgeToObjectiveC()().super.isa;
  sub_100063CD0(v54, v56);
  v58 = (void *)objc_opt_self(SESTLV);
  v59 = objc_msgSend(v58, "TLVWithTag:value:", 158, v57);

  if (!v59)
  {
    __break(1u);
    goto LABEL_29;
  }
  v60 = objc_msgSend(v59, "asData");

  if (!v60)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v61 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v60);
  v63 = v62;

  Data.append(_:)(v61, v63);
  sub_100063CD0(v61, v63);
  v64 = (uint64_t)v117;
  v65 = (unint64_t)v118;
  sub_100063C8C((uint64_t)v117, (unint64_t)v118);
  v66 = Data._bridgeToObjectiveC()().super.isa;
  sub_100063CD0(v64, v65);
  v67 = objc_msgSend(v58, "TLVWithTag:value:", 32557, v66);

  if (!v67)
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    return;
  }
  if (qword_100344680 != -1)
    swift_once(&qword_100344680, sub_10016E9A8);
  isa = (Class)v48;
  v68 = objc_msgSend(v67, "asData");
  if (!v68)
    goto LABEL_31;
  v69 = v68;
  v70 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v68);
  v72 = v71;

  v73 = *(_QWORD *)(v19 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_peer);
  v74 = v19 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_connectionIdentifier;
  v75 = type metadata accessor for UUID(0);
  v76 = *(_QWORD *)(v75 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v76 + 16))(v15, v74, v75);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v76 + 56))(v15, 0, 1, v75);
  v77 = v73;
  v78 = v111;
  sub_10016E310(5u, 21, v70, v72, v77, 1, (uint64_t)v15, 0, 1);
  sub_100063CD0(v70, v72);
  if (v78)
    swift_errorRelease(v78);
  sub_1000F1C30((uint64_t)v15);
  v79 = isa;
  *(_BYTE *)(v19 + v112) = 3;
  v80 = *(_QWORD *)(v19 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_timer);
  v81 = v114;
  if (v80)
    sub_10004C410(v80, *(double *)(v19 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_timeoutSec));
  sub_10006BA28(v81, 0);
  swift_release(v19);

  sub_100063CD0((uint64_t)v117, (unint64_t)v118);
  sub_100063CD0(v121, v122);
}

void sub_1001FDC5C(id *a1, uint64_t a2, unint64_t a3)
{
  id v5;
  int v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  os_log_type_t v19;
  uint8_t *v20;
  id v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  int v32;

  v5 = *a1;
  v6 = objc_msgSend(*a1, "tag");
  if (v6 > 32625)
  {
    if (v6 == 32626)
    {
      v26 = objc_msgSend(v5, "children");
      if (v26)
      {
        v27 = v26;
        v28 = sub_10006C25C(0, &qword_100344CE0, SESTLV_ptr);
        v29 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v27, v28);

        sub_100200AA0(v29, a3);
        swift_bridgeObjectRelease(v29);
        v30 = a3 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
        swift_beginAccess(a2 + OBJC_IVAR____TtC10seserviced9AlishaRKE_notificationsToBeSuppressed, &v31, 33, 0);
        sub_10012ED44(v30);
        swift_endAccess(&v31);
        swift_beginAccess(a2 + OBJC_IVAR____TtC10seserviced9AlishaRKE_passiveEntryState, &v31, 33, 0);
        sub_10012EC6C(v30);
        swift_endAccess(&v31);
        return;
      }
      goto LABEL_23;
    }
    if (v6 == 32629)
    {
      v11 = objc_msgSend(v5, "children");
      if (v11)
      {
        v12 = v11;
        v13 = sub_10006C25C(0, &qword_100344CE0, SESTLV_ptr);
        v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v12, v13);

        sub_1001FED54(v10, a3);
        goto LABEL_10;
      }
      goto LABEL_21;
    }
  }
  else
  {
    if (v6 == 24440)
    {
      v21 = objc_msgSend(v5, "value");
      if (v21)
      {
        v22 = v21;
        v23 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v21);
        v25 = v24;

        sub_1001FF9B0(v23, v25, a3);
        sub_100063CD0(v23, v25);
        return;
      }
      goto LABEL_22;
    }
    if (v6 == 32625)
    {
      v7 = objc_msgSend(v5, "children");
      if (v7)
      {
        v8 = v7;
        v9 = sub_10006C25C(0, &qword_100344CE0, SESTLV_ptr);
        v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v8, v9);

        sub_1001FDFC0(v10, a3);
LABEL_10:
        swift_bridgeObjectRelease(v10);
        return;
      }
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
      return;
    }
  }
  v14 = v5;
  v15 = Logger.logObject.getter(v14);
  v19 = static os_log_type_t.info.getter(v15, v16, v17, v18);
  if (os_log_type_enabled(v15, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v20 = 67109120;
    v31 = objc_msgSend(v14, "tag");
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v20 + 4, v20 + 8);

    _os_log_impl((void *)&_mh_execute_header, v15, v19, "Ignoring unknown event %u", v20, 8u);
    swift_slowDealloc(v20, -1, -1);
  }
  else
  {

  }
}

void sub_1001FDFC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  id v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  id v19;
  void *v20;
  unsigned int v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  unsigned __int16 v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  os_log_type_t v69;
  uint8_t *v70;
  uint64_t v71;
  NSObject *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  os_log_type_t v76;
  uint8_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  NSObject *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  os_log_type_t v89;
  uint8_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  char isUniquelyReferenced_nonNull_native;
  char v100;
  uint64_t v101;
  uint64_t *v102;
  void (*v103)(_QWORD);
  unsigned __int8 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  NSString v116;
  uint64_t v117;
  uint64_t *v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  NSObject *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  os_log_type_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  os_log_type_t v139;
  uint8_t *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  _BYTE v148[16];
  uint64_t v149;
  uint64_t v150;
  uint64_t v151[3];

  v3 = v2;
  v146 = a1;
  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (uint64_t *)((char *)&v141 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v10 = (void *)qword_100354EE8;
  *v9 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5);
  v11 = v10;
  v12 = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v9, v5);
  if ((v12 & 1) != 0)
  {
    if (!((unint64_t)v146 >> 62))
    {
      v13 = *(_QWORD *)((v146 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v146);
      if (v13)
        goto LABEL_6;
LABEL_65:
      v40 = swift_bridgeObjectRelease(v146);
      goto LABEL_66;
    }
  }
  else
  {
    __break(1u);
  }
  if (v146 < 0)
    v137 = v146;
  else
    v137 = v146 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v146);
  v13 = _CocoaArrayWrapper.endIndex.getter(v137);
  if (!v13)
    goto LABEL_65;
LABEL_6:
  if (v13 >= 1)
  {
    v142 = a2;
    v143 = v3;
    v14 = 0;
    v144 = 0;
    v145 = 0;
    v15 = v146 & 0xC000000000000001;
    v16 = 1;
    v17 = 1;
    v18 = 1;
    do
    {
      if (v15)
        v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v14, v146);
      else
        v19 = *(id *)(v146 + 8 * v14 + 32);
      v20 = v19;
      v21 = objc_msgSend(v19, "tag");
      switch(v21)
      {
        case 0x82u:
          v28 = objc_msgSend(v20, "value");
          if (!v28)
            goto LABEL_71;
          v29 = v28;
          v30 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v28);
          v32 = v31;

          sub_1000723E8(v30, v32, 0);
          LODWORD(v144) = v38;
          v16 = 0;
          break;
        case 0x81u:
          v33 = objc_msgSend(v20, "value");
          if (!v33)
            goto LABEL_72;
          v34 = v33;
          v35 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v33);
          v37 = v36;

          sub_1000723E8(v35, v37, 0);
          HIDWORD(v144) = v39;
          v17 = 0;
          break;
        case 0x80u:
          v22 = objc_msgSend(v20, "value");
          if (!v22)
            goto LABEL_70;
          v23 = v22;
          v24 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v22);
          v26 = v25;

          sub_100072014(v24, v26, 0);
          v145 = v27;
          v18 = 0;
          break;
      }

      ++v14;
    }
    while (v13 != v14);
    v40 = swift_bridgeObjectRelease(v146);
    v41 = v143;
    if (((v18 | v17 | v16) & 1) == 0)
    {
      v42 = BYTE4(v144);
      v43 = v145 - 1;
      v44 = v142;
      if ((unsigned __int16)(v145 - 1) <= 1u)
      {
        if (BYTE4(v144) == 81)
        {
          v84 = swift_retain_n(v142, 2);
          v85 = Logger.logObject.getter(v84);
          v89 = static os_log_type_t.info.getter(v85, v86, v87, v88);
          if (os_log_type_enabled(v85, v89))
          {
            v90 = (uint8_t *)swift_slowAlloc(12, -1);
            v91 = swift_slowAlloc(32, -1);
            *(_DWORD *)v90 = 136315138;
            v151[0] = v91;
            v92 = swift_retain(v44);
            v93 = UUID.uuidString.getter(v92);
            v95 = v94;
            swift_release(v142);
            v147 = sub_1001C56EC(v93, v95, v151);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, v148, v90 + 4, v90 + 12);
            swift_release_n(v142, 2);
            v96 = v95;
            v44 = v142;
            swift_bridgeObjectRelease(v96);
            _os_log_impl((void *)&_mh_execute_header, v85, v89, "Vehicle unlocked using passive entry for %s", v90, 0xCu);
            swift_arrayDestroy(v91, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v91, -1, -1);
            swift_slowDealloc(v90, -1, -1);
          }
          else
          {
            swift_release_n(v44, 2);
          }

          v97 = v44 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
          v98 = (_QWORD *)(v41 + OBJC_IVAR____TtC10seserviced9AlishaRKE_passiveEntryState);
          swift_beginAccess(v41 + OBJC_IVAR____TtC10seserviced9AlishaRKE_passiveEntryState, v151, 33, 0);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v98);
          v147 = *v98;
          *v98 = 0x8000000000000000;
          v100 = 2;
          goto LABEL_48;
        }
        if (BYTE4(v144) == 80)
        {
          v45 = swift_retain_n(v142, 2);
          v46 = Logger.logObject.getter(v45);
          v50 = static os_log_type_t.info.getter(v46, v47, v48, v49);
          if (os_log_type_enabled(v46, v50))
          {
            v51 = (uint8_t *)swift_slowAlloc(12, -1);
            v52 = swift_slowAlloc(32, -1);
            *(_DWORD *)v51 = 136315138;
            v151[0] = v52;
            v53 = swift_retain(v44);
            v54 = UUID.uuidString.getter(v53);
            v56 = v55;
            swift_release(v142);
            v147 = sub_1001C56EC(v54, v56, v151);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, v148, v51 + 4, v51 + 12);
            swift_release_n(v142, 2);
            v57 = v56;
            v44 = v142;
            swift_bridgeObjectRelease(v57);
            _os_log_impl((void *)&_mh_execute_header, v46, v50, "Vehicle locked using passive entry for %s", v51, 0xCu);
            swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v52, -1, -1);
            swift_slowDealloc(v51, -1, -1);
          }
          else
          {
            swift_release_n(v44, 2);
          }

          v97 = v44 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
          v98 = (_QWORD *)(v41 + OBJC_IVAR____TtC10seserviced9AlishaRKE_passiveEntryState);
          swift_beginAccess(v41 + OBJC_IVAR____TtC10seserviced9AlishaRKE_passiveEntryState, v151, 33, 0);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v98);
          v147 = *v98;
          *v98 = 0x8000000000000000;
          v100 = 1;
LABEL_48:
          sub_10018EEBC(v100, v97, isUniquelyReferenced_nonNull_native);
          v101 = *v98;
          *v98 = v147;
          swift_bridgeObjectRelease(v101);
          swift_endAccess(v151);
          return;
        }
      }
      v58 = (uint64_t *)(v143 + OBJC_IVAR____TtC10seserviced9AlishaRKE_requestsInProgress);
      swift_beginAccess(v143 + OBJC_IVAR____TtC10seserviced9AlishaRKE_requestsInProgress, v151, 1, 0);
      v59 = *v58;
      swift_retain(v44);
      v60 = swift_bridgeObjectRetain(v59);
      v61 = sub_100205D34(v60, v44);
      swift_bridgeObjectRelease(v59);
      swift_release(v44);
      if (!v61)
      {
        v71 = swift_retain_n(v44, 2);
        v72 = Logger.logObject.getter(v71);
        v76 = static os_log_type_t.info.getter(v72, v73, v74, v75);
        if (os_log_type_enabled(v72, v76))
        {
          v77 = (uint8_t *)swift_slowAlloc(12, -1);
          v78 = swift_slowAlloc(32, -1);
          *(_DWORD *)v77 = 136315138;
          v147 = v78;
          v79 = swift_retain(v44);
          v80 = UUID.uuidString.getter(v79);
          v81 = v44;
          v83 = v82;
          swift_release(v81);
          v149 = sub_1001C56EC(v80, v83, &v147);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, &v150, v77 + 4, v77 + 12);
          swift_release_n(v81, 2);
          swift_bridgeObjectRelease(v83);
          _os_log_impl((void *)&_mh_execute_header, v72, v76, "Received execution status but there's no ongoing request for %s", v77, 0xCu);
          swift_arrayDestroy(v78, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v78, -1, -1);
          swift_slowDealloc(v77, -1, -1);
        }
        else
        {
          swift_release_n(v44, 2);
        }

        return;
      }
      v62 = OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_timer;
      v63 = *(_QWORD *)(v61 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_timer);
      if (v63)
        sub_10004C548(v63);
      v64 = OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_functionIdentifier;
      if (*(unsigned __int16 *)(v61 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_functionIdentifier) == (unsigned __int16)v145
        && *(unsigned __int8 *)(v61 + 16) == v42)
      {
        if (v144 == 1)
        {
          if (*(_BYTE *)(v61 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_type) == 1)
          {
            sub_1001FCEF4(v61, 1u, 0xD000000000000030, 0x80000001002C3610, 2147483656);
          }
          else
          {
            v121 = swift_retain_n(v61, 2);
            v122 = Logger.logObject.getter(v121);
            v126 = static os_log_type_t.info.getter(v122, v123, v124, v125);
            if (os_log_type_enabled(v122, v126))
            {
              v127 = swift_slowAlloc(19, -1);
              v128 = swift_slowAlloc(32, -1);
              v147 = v128;
              *(_DWORD *)v127 = 136315650;
              v146 = v127 + 4;
              sub_1001BD2CC(*(_QWORD *)(v61 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier), *(_QWORD *)(v61 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier + 8));
              v130 = v129;
              v149 = v129;
              v131 = sub_100063D3C((uint64_t *)&unk_100346060);
              v132 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
              v133 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v131, v132);
              v135 = v134;
              swift_bridgeObjectRelease(v130);
              v149 = sub_1001C56EC(v133, v135, &v147);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, &v150, v146, v127 + 12);
              swift_release_n(v61, 2);
              swift_bridgeObjectRelease(v135);
              *(_WORD *)(v127 + 12) = 512;
              LOWORD(v149) = v145;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, (char *)&v149 + 2, v127 + 14, v127 + 16);
              *(_WORD *)(v127 + 16) = 256;
              LOBYTE(v149) = v42;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, (char *)&v149 + 1, v127 + 18, v127 + 19);
              _os_log_impl((void *)&_mh_execute_header, v122, v126, "Vehicle for key %s started execution of function %hu action %hhu", (uint8_t *)v127, 0x13u);
              swift_arrayDestroy(v128, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v128, -1, -1);
              swift_slowDealloc(v127, -1, -1);
            }
            else
            {
              swift_release_n(v61, 2);
            }

            v136 = *(_QWORD *)(v61 + v62);
            if (v136)
              sub_10004C410(v136, *(double *)(v61 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_timeoutSec));
          }
        }
        else
        {
          v102 = (uint64_t *)(v61 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_completion);
          v103 = *(void (**)(_QWORD))(v61 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_completion);
          v104 = v144;
          if (v103)
          {
            v105 = v102[1];
            swift_retain(v105);
            v103(v104);
            sub_10008F210((uint64_t)v103, v105);
            v106 = *v102;
            v107 = v102[1];
            *v102 = 0;
            v102[1] = 0;
            sub_10008F210(v106, v107);
          }
          sub_100206584(v61, v104);
          v108 = *v58;
          swift_retain(v61);
          v109 = swift_bridgeObjectRetain(v108);
          v110 = sub_1002051FC(v109, v61);
          swift_bridgeObjectRelease(v108);
          swift_release(v61);
          v111 = *v58;
          *v58 = (uint64_t)v110;
          swift_bridgeObjectRelease(v111);
          v112 = objc_opt_self(SESDAnalyticsLogger);
          v113 = *(unsigned __int16 *)(v61 + v64);
          v114 = *(unsigned __int8 *)(v61 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_type);
          v115 = *(unsigned __int8 *)(v61 + 16);
          v116 = String._bridgeToObjectiveC()();
          sub_10004A084(v112, 1, v113, v115, v104, v114, v116);

          if (!v104 && v43 <= 1u)
          {
            v117 = v142 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
            v118 = (uint64_t *)(v143 + OBJC_IVAR____TtC10seserviced9AlishaRKE_notificationsToBeSuppressed);
            swift_beginAccess(v143 + OBJC_IVAR____TtC10seserviced9AlishaRKE_notificationsToBeSuppressed, &v147, 33, 0);
            v119 = swift_isUniquelyReferenced_nonNull_native(*v118);
            v149 = *v118;
            *v118 = 0x8000000000000000;
            sub_10018F00C(v145, v117, v119);
            v120 = *v118;
            *v118 = v149;
            swift_bridgeObjectRelease(v120);
            swift_endAccess(&v147);
          }
        }
        swift_release(v61);
        return;
      }
      v65 = Logger.logObject.getter(v63);
      v69 = static os_log_type_t.info.getter(v65, v66, v67, v68);
      if (os_log_type_enabled(v65, v69))
      {
        v70 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v70 = 0;
        _os_log_impl((void *)&_mh_execute_header, v65, v69, "Ignoring execution status for a request which we didn't start", v70, 2u);
        swift_slowDealloc(v70, -1, -1);
      }
      swift_release(v61);
LABEL_68:

      return;
    }
LABEL_66:
    v65 = Logger.logObject.getter(v40);
    v139 = static os_log_type_t.error.getter(v65, v138);
    if (os_log_type_enabled(v65, v139))
    {
      v140 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v140 = 0;
      _os_log_impl((void *)&_mh_execute_header, v65, v139, "Ignoring invalid execution status", v140, 2u);
      swift_slowDealloc(v140, -1, -1);
    }
    goto LABEL_68;
  }
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
}

void sub_1001FED54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  id v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unint64_t);
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  os_log_type_t v49;
  uint8_t *v50;
  __int128 v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  Swift::String v57;
  void *object;
  Swift::String v59;
  Swift::String v60;
  void *v61;
  Swift::String v62;
  Swift::String v63;
  void *v64;
  Swift::String v65;
  Swift::String v66;
  void *v67;
  unint64_t v68;
  NSObject *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  os_log_type_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  id v79;
  id v80;
  uint64_t v81;
  Class isa;
  id v83;
  id v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  NSObject *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint8_t *v100;
  uint64_t v101;
  NSObject *v102;
  uint64_t v103;
  os_log_type_t v104;
  uint8_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  __int128 v116;
  __int16 v117;
  unsigned __int16 v118;
  char v119;
  _BYTE v120[24];

  v3 = v2;
  v6 = sub_100063D3C((uint64_t *)&unk_1003465E0);
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v108 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchPredicate(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (uint64_t *)((char *)&v108 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v15 = qword_100354EE8;
  *v14 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v10);
  v16 = (id)v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)(v14);
  (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v14, v10);
  if ((v15 & 1) != 0)
  {
    v17 = (uint64_t *)(v3 + OBJC_IVAR____TtC10seserviced9AlishaRKE_requestsInProgress);
    swift_beginAccess(v3 + OBJC_IVAR____TtC10seserviced9AlishaRKE_requestsInProgress, v120, 0, 0);
    v18 = *v17;
    swift_retain(a2);
    v19 = swift_bridgeObjectRetain(v18);
    v14 = 0;
    v10 = sub_100205D34(v19, a2);
    swift_bridgeObjectRelease(v18);
    swift_release(a2);
    if (v10)
    {
      v20 = *(_QWORD *)(v10 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_timer);
      if (v20)
        sub_10004C548(v20);
    }
    v118 = 0;
    v119 = 1;
    v117 = 256;
    v116 = xmmword_1002888D0;
    if (!((unint64_t)a1 >> 62))
    {
      v21 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(a1);
      if (v21)
        goto LABEL_9;
LABEL_63:
      v25 = swift_bridgeObjectRelease(a1);
      goto LABEL_64;
    }
  }
  else
  {
    __break(1u);
  }
  if (a1 < 0)
    v101 = a1;
  else
    v101 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v21 = _CocoaArrayWrapper.endIndex.getter(v101);
  if (!v21)
    goto LABEL_63;
LABEL_9:
  if (v21 < 1)
  {
    __break(1u);
LABEL_72:
    swift_once(&qword_100344680, sub_10016E9A8);
LABEL_43:
    v88 = v114;
    v89 = v115;
    if (v10)
    {
      v90 = v10 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_connectionIdentifier;
      v91 = type metadata accessor for UUID(0);
      v92 = *(_QWORD *)(v91 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v92 + 16))(v9, v90, v91);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v92 + 56))(v9, 0, 1, v91);
    }
    else
    {
      v93 = type metadata accessor for UUID(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v93 - 8) + 56))(v9, 1, 1, v93);
    }
    sub_100063C8C(v88, v89);
    sub_10016E310(3u, 17, v88, v89, a2, 1, (uint64_t)v9, 0, 1);
    if (v14)
    {
      sub_100063CD0(v88, v89);
      swift_errorRelease(v14);
      sub_1000F1C30((uint64_t)v9);
      if (!v10)
        goto LABEL_53;
    }
    else
    {
      sub_1000F1C30((uint64_t)v9);
      sub_100063CD0(v88, v89);
      if (!v10)
      {
LABEL_53:
        sub_100063CD0(v114, v115);
LABEL_69:
        v56 = *((_QWORD *)&v116 + 1);
        v55 = v116;
LABEL_70:
        sub_10006B9B4(v55, v56);
        return;
      }
    }
    v94 = *(_QWORD *)(v10 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_timer);
    if (v94)
      sub_10004C410(v94, *(double *)(v10 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_timeoutSec));
    swift_release(v10);
    goto LABEL_53;
  }
  v22 = 0;
  do
  {
    if ((a1 & 0xC000000000000001) != 0)
      v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v22, a1);
    else
      v23 = *(id *)(a1 + 8 * v22 + 32);
    v24 = v23;
    ++v22;
    v114 = (uint64_t)v23;
    sub_1002016A0((id *)&v114, (uint64_t)&v118, &v117);

  }
  while (v21 != v22);
  v25 = swift_bridgeObjectRelease(a1);
  if ((v119 & 1) != 0 || (v117 & 0x100) != 0)
  {
LABEL_64:
    v102 = Logger.logObject.getter(v25);
    v104 = static os_log_type_t.error.getter(v102, v103);
    if (os_log_type_enabled(v102, v104))
    {
      v105 = (uint8_t *)swift_slowAlloc(12, -1);
      v106 = swift_slowAlloc(32, -1);
      v114 = v106;
      *(_DWORD *)v105 = 136315138;
      v112 = sub_1001C56EC(0xD000000000000025, 0x80000001002C36C0, &v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113, v105 + 4, v105 + 12);
      _os_log_impl((void *)&_mh_execute_header, v102, v104, "%s", v105, 0xCu);
      swift_arrayDestroy(v106, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v106, -1, -1);
      swift_slowDealloc(v105, -1, -1);
    }

    if (!v10)
      goto LABEL_69;
    v107 = swift_retain(v10);
    sub_1001FCEF4(v107, 2u, 0xD000000000000025, 0x80000001002C36C0, 2147483653);
    goto LABEL_68;
  }
  v26 = v118;
  v27 = v117;
  if (v10 && *(_BYTE *)(v10 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_state) != 4)
  {
    v28 = OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_functionIdentifier;
    if (*(unsigned __int16 *)(v10 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_functionIdentifier) == v118
      && *(unsigned __int8 *)(v10 + 16) == v117)
    {
      v29 = v3 + OBJC_IVAR____TtC10seserviced9AlishaRKE_logger;
      v30 = swift_retain(v10);
      v31 = Logger.logObject.getter(v30);
      v35 = static os_log_type_t.info.getter(v31, v32, v33, v34);
      if (os_log_type_enabled(v31, v35))
      {
        v36 = swift_slowAlloc(19, -1);
        v110 = v29;
        v37 = v36;
        v109 = swift_slowAlloc(32, -1);
        v114 = v109;
        *(_DWORD *)v37 = 33555202;
        LOWORD(v112) = v26;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, (char *)&v112 + 2, v37 + 4, v37 + 6);
        *(_WORD *)(v37 + 6) = 256;
        LOBYTE(v112) = v27;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, (char *)&v112 + 1, v37 + 8, v37 + 9);
        *(_WORD *)(v37 + 9) = 2080;
        swift_beginAccess(&v116, &v112, 0, 0);
        if (*((_QWORD *)&v116 + 1) >> 60 == 15)
          v38 = 0;
        else
          v38 = 0x7461642068746977;
        if (*((_QWORD *)&v116 + 1) >> 60 == 15)
          v39 = 0xE000000000000000;
        else
          v39 = 0xE900000000000061;
        v111 = sub_1001C56EC(v38, v39, &v114);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112, v37 + 11, v37 + 19);
        swift_bridgeObjectRelease(v39);
        _os_log_impl((void *)&_mh_execute_header, v31, v35, "Received confirmation request for function %hu action %hhu %s", (uint8_t *)v37, 0x13u);
        v40 = v109;
        swift_arrayDestroy(v109, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v40, -1, -1);
        swift_slowDealloc(v37, -1, -1);
      }

      v42 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, unint64_t))(v10 + 56);
      if (v42)
      {
        v43 = *(_QWORD *)(v10 + 64);
        v44 = swift_retain(v43);
        v45 = Logger.logObject.getter(v44);
        v49 = static os_log_type_t.info.getter(v45, v46, v47, v48);
        if (os_log_type_enabled(v45, v49))
        {
          v50 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v50 = 0;
          _os_log_impl((void *)&_mh_execute_header, v45, v49, "Sending continuation request to client", v50, 2u);
          swift_slowDealloc(v50, -1, -1);
        }

        swift_beginAccess(&v116, &v114, 0, 0);
        v51 = v116;
        v52 = *(_QWORD *)(v10 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier);
        v53 = *(_QWORD *)(v10 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier + 8);
        sub_10006BA34(v116, *((unint64_t *)&v116 + 1));
        sub_100063C8C(v52, v53);
        v42(v26, v27, v51, *((_QWORD *)&v51 + 1), v52, v53);
        sub_100063CD0(v52, v53);
        sub_10006B9B4(v51, *((unint64_t *)&v51 + 1));
        v54 = *(_QWORD *)(v10 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_timer);
        if (v54)
          sub_10004C410(v54, *(double *)(v10 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_timeoutSec));
        swift_release(v10);
        sub_10008F210((uint64_t)v42, v43);
        swift_release(v10);
        v56 = *((_QWORD *)&v51 + 1);
        v55 = v51;
        goto LABEL_70;
      }
      v95 = Logger.logObject.getter(v41);
      v99 = static os_log_type_t.info.getter(v95, v96, v97, v98);
      if (os_log_type_enabled(v95, (os_log_type_t)v99))
      {
        v100 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v100 = 0;
        _os_log_impl((void *)&_mh_execute_header, v95, (os_log_type_t)v99, "Automatically sending an event to continue the enduring request", v100, 2u);
        swift_slowDealloc(v100, -1, -1);
      }

      sub_1001FB670(v10, 0, 0xF000000000000000);
      if (v14)
        swift_errorRelease(v14);
LABEL_68:
      swift_release_n(v10, 2);
      goto LABEL_69;
    }
    v114 = 0;
    v115 = 0xE000000000000000;
    swift_retain(v10);
    _StringGuts.grow(_:)(46);
    swift_bridgeObjectRelease(v115);
    v114 = 0xD000000000000016;
    v115 = 0x80000001002C36F0;
    LOWORD(v112) = *(_WORD *)(v10 + v28);
    v57._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt16, &protocol witness table for UInt16);
    object = v57._object;
    String.append(_:)(v57);
    swift_bridgeObjectRelease(object);
    v59._countAndFlagsBits = 2122016;
    v59._object = (void *)0xE300000000000000;
    String.append(_:)(v59);
    LOBYTE(v112) = *(_BYTE *)(v10 + 16);
    v60._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt8, &protocol witness table for UInt8);
    v61 = v60._object;
    String.append(_:)(v60);
    swift_bridgeObjectRelease(v61);
    v62._countAndFlagsBits = 0x20746E657665202CLL;
    v62._object = (void *)0xEA00000000002066;
    String.append(_:)(v62);
    LOWORD(v112) = v26;
    v63._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt16, &protocol witness table for UInt16);
    v64 = v63._object;
    String.append(_:)(v63);
    swift_bridgeObjectRelease(v64);
    v65._countAndFlagsBits = 2122016;
    v65._object = (void *)0xE300000000000000;
    String.append(_:)(v65);
    LOBYTE(v112) = v27;
    v66._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt8, &protocol witness table for UInt8);
    v67 = v66._object;
    String.append(_:)(v66);
    swift_bridgeObjectRelease(v67);
    v68 = v115;
    sub_1001FCEF4(v10, 2u, v114, v115, 2147483654);
    swift_release(v10);
    v25 = swift_bridgeObjectRelease(v68);
  }
  v69 = Logger.logObject.getter(v25);
  v73 = static os_log_type_t.info.getter(v69, v70, v71, v72);
  if (os_log_type_enabled(v69, v73))
  {
    v74 = swift_slowAlloc(9, -1);
    *(_DWORD *)v74 = 33554944;
    LOWORD(v114) = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, (char *)&v114 + 2, v74 + 4, v74 + 6);
    *(_WORD *)(v74 + 6) = 256;
    LOBYTE(v114) = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, (char *)&v114 + 1, v74 + 8, v74 + 9);
    _os_log_impl((void *)&_mh_execute_header, v69, v73, "Sending an event to stop the enduring RKE function %hu action %hhu", (uint8_t *)v74, 9u);
    swift_slowDealloc(v74, -1, -1);
  }

  v114 = sub_10007C66C((uint64_t)&off_1003054A8);
  v115 = v75;
  v76 = sub_100063D3C(&qword_100346220);
  v77 = swift_allocObject(v76, 48, 7);
  *(_OWORD *)(v77 + 16) = xmmword_10028DDB0;
  v78 = (void *)objc_opt_self(SESTLV);
  v79 = objc_msgSend(v78, "TLVWithTag:unsignedShort:", 128, __rev16(v26));
  if (!v79)
  {
    __break(1u);
    goto LABEL_74;
  }
  *(_QWORD *)(v77 + 32) = v79;
  v80 = objc_msgSend(v78, "TLVWithTag:unsignedChar:", 129, v27);
  if (!v80)
  {
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }
  *(_QWORD *)(v77 + 40) = v80;
  v112 = v77;
  specialized Array._endMutation()(v80);
  v81 = v112;
  sub_10006C25C(0, &qword_100344CE0, SESTLV_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v81);
  v83 = objc_msgSend(v78, "TLVWithTag:children:", 32631, isa);

  if (!v83)
  {
LABEL_75:
    __break(1u);
    goto LABEL_76;
  }
  v84 = objc_msgSend(v83, "asData");

  if (v84)
  {
    v85 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v84);
    v87 = v86;

    Data.append(_:)(v85, v87);
    sub_100063CD0(v85, v87);
    if (qword_100344680 == -1)
      goto LABEL_43;
    goto LABEL_72;
  }
LABEL_76:
  __break(1u);
}

void sub_1001FF9B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = a3;
  v4 = sub_100063D3C((uint64_t *)&unk_1003465E0);
  __chkstk_darwin(v4, v5);
  v17 = type metadata accessor for UUID(0);
  v7 = __chkstk_darwin(v17, v6);
  __chkstk_darwin(v7, v8);
  v9 = type metadata accessor for DispatchPredicate(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (uint64_t *)((char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v14 = qword_100354EE8;
  *v13 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v10 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v9);
  v15 = (id)v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)(v13);
  (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v13, v9);
  if ((v14 & 1) != 0)
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0x100200984);
}

void sub_100200AA0(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char **v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  os_unfair_lock_s *v24;
  os_unfair_lock_s *v25;
  id v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  os_log_type_t v34;
  uint8_t *v35;
  NSObject *v36;
  uint64_t v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  NSObject *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  os_log_type_t v45;
  uint8_t *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  id v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  id v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  void *v75;
  unsigned __int16 v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  void *v87;
  void *v88;
  id v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint8_t *v99;
  uint64_t v100;
  _QWORD *v101;
  char *v102;
  char **v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  void *v108;
  _QWORD *v109;
  id aBlock[5];
  _QWORD *v111;
  __int16 v112;
  uint64_t v113;
  uint64_t v114;

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(char ***)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v98 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (_QWORD *)type metadata accessor for DispatchQoS(0);
  v106 = *(v9 - 1);
  __chkstk_darwin(v9, v10);
  v105 = (char *)&v98 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchPredicate(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v16 = (uint8_t *)&v98 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1003447B8 != -1)
LABEL_36:
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v17 = qword_100354EE8;
  *(_QWORD *)v16 = qword_100354EE8;
  (*(void (**)(uint8_t *, _QWORD, uint64_t))(v13 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v12);
  v18 = (id)v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)(v16);
  (*(void (**)(uint8_t *, uint64_t))(v13 + 8))(v16, v12);
  if ((v17 & 1) != 0)
  {
    v19 = qword_1003445B8;
    swift_retain(a2);
    if (v19 == -1)
      goto LABEL_4;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1003445B8, sub_1000EAA4C);
LABEL_4:
  v20 = off_1003463F0;
  v21 = swift_allocObject(&unk_10030E968, 32, 7);
  *(_QWORD *)(v21 + 16) = sub_10017B8A0;
  *(_QWORD *)(v21 + 24) = a2;
  v23 = __chkstk_darwin(v21, v22);
  *(&v98 - 4) = (uint64_t)sub_100096F30;
  *(&v98 - 3) = v23;
  *(&v98 - 2) = (uint64_t)v20;
  v25 = v24 + 4;
  swift_retain(a2);
  os_unfair_lock_lock(v25);
  v16 = 0;
  sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_100096F14, aBlock);
  os_unfair_lock_unlock(v25);
  v26 = aBlock[0];
  swift_release(a2);
  swift_release(v21);
  v27 = (void *)sub_10009F618((uint64_t)v26);
  v28 = swift_bridgeObjectRelease(v26);
  v108 = v27;
  if (!v27)
  {
    v36 = Logger.logObject.getter(v28);
    v38 = static os_log_type_t.error.getter(v36, v37);
    if (os_log_type_enabled(v36, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v38, "Failed to retrieve endpoint", v39, 2u);
      swift_slowDealloc(v39, -1, -1);
    }

    return;
  }
  v103 = v5;
  v104 = v4;
  v101 = v9;
  v102 = v8;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v62 = a1;
    else
      v62 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v12 = _CocoaArrayWrapper.endIndex.getter(v62);
    v8 = v107;
    if (v12)
      goto LABEL_7;
LABEL_14:
    v31 = swift_bridgeObjectRelease(a1);
    v32 = Logger.logObject.getter(v31);
    v34 = static os_log_type_t.error.getter(v32, v33);
    if (os_log_type_enabled(v32, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v34, "No function sequence tag", v35, 2u);
      swift_slowDealloc(v35, -1, -1);
    }

    goto LABEL_17;
  }
  v12 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  v8 = v107;
  if (!v12)
    goto LABEL_14;
LABEL_7:
  v13 = a1 & 0xC000000000000001;
  v4 = 4;
  v5 = &selRef_removeObject_;
  while (1)
  {
    if (v13)
      v29 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, a1);
    else
      v29 = *(id *)(a1 + 8 * v4);
    v9 = v29;
    v30 = v4 - 3;
    if (__OFADD__(v4 - 4, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (objc_msgSend(v29, "tag") == 48)
      break;

    ++v4;
    if (v30 == v12)
      goto LABEL_14;
  }
  swift_bridgeObjectRelease(a1);
  v40 = swift_retain_n(a2, 2);
  v41 = Logger.logObject.getter(v40);
  v45 = static os_log_type_t.info.getter(v41, v42, v43, v44);
  if (os_log_type_enabled(v41, v45))
  {
    v46 = (uint8_t *)swift_slowAlloc(12, -1);
    v47 = (void *)swift_slowAlloc(32, -1);
    v100 = (uint64_t)v47;
    *(_DWORD *)v46 = 136315138;
    aBlock[0] = v47;
    v99 = v46 + 4;
    v48 = swift_retain(a2);
    v49 = UUID.uuidString.getter(v48);
    v4 = v50;
    swift_release(a2);
    v113 = sub_1001C56EC(v49, v4, (uint64_t *)aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, &v114, v99, v46 + 12);
    swift_release_n(a2, 2);
    swift_bridgeObjectRelease(v4);
    _os_log_impl((void *)&_mh_execute_header, v41, v45, "Received vehicle status update %s", v46, 0xCu);
    v51 = v100;
    swift_arrayDestroy(v100, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v51, -1, -1);
    swift_slowDealloc(v46, -1, -1);
  }
  else
  {
    swift_release_n(a2, 2);
  }

  if (qword_100344720 != -1)
    swift_once(&qword_100344720, sub_1001C7400);
  v52 = sub_1001C84B4(a2);
  v113 = v52;
  v53 = (_QWORD *)sub_1001C84C8(a2);
  v112 = 0;
  v54 = objc_msgSend(v9, "children");
  if (!v54)
    goto LABEL_79;
  v55 = v54;
  v56 = sub_10006C25C(0, &qword_100344CE0, SESTLV_ptr);
  v57 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v55, v56);

  if ((unint64_t)v57 >> 62)
  {
    if (v57 < 0)
      v63 = v57;
    else
      v63 = v57 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v57);
    v58 = _CocoaArrayWrapper.endIndex.getter(v63);
    v100 = v52;
    if (!v58)
      goto LABEL_48;
  }
  else
  {
    v58 = *(_QWORD *)((v57 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v57);
    v100 = v52;
    if (!v58)
      goto LABEL_48;
  }
  if (v58 < 1)
  {
    __break(1u);
    goto LABEL_65;
  }
  v59 = 0;
  do
  {
    if ((v57 & 0xC000000000000001) != 0)
      v60 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v59, v57);
    else
      v60 = *(id *)(v57 + 8 * v59 + 32);
    v61 = v60;
    ++v59;
    aBlock[0] = v60;
    sub_100201AC4(aBlock, (uint64_t)v8, v108, a2, (uint64_t)&v113, (uint64_t)v53, &v112, (BOOL *)&v112 + 1);

  }
  while (v58 != v59);
LABEL_48:
  swift_bridgeObjectRelease_n(v57, 2);
  swift_bridgeObjectRelease(v53);
  if ((v112 & 0x100) != 0)
  {
    if (v112 == 1)
    {
      v64 = *(_QWORD *)(a2 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier);
      v65 = *(_QWORD *)(a2 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier + 8);
      v66 = *(_QWORD *)(a2 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
      v67 = *(_QWORD *)(a2 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
      sub_10006BA34(v64, v65);
      sub_10006BA34(v66, v67);
      sub_1001F119C(0xD000000000000042, 0x80000001002C3730, v64, v65, v66, v67, 0);

      sub_10006B9B4(v66, v67);
      sub_10006B9B4(v64, v65);
      swift_bridgeObjectRelease(v100);
      return;
    }
    v79 = v100;
    goto LABEL_77;
  }
  v4 = sub_1001C84B4(a2);
  swift_bridgeObjectRelease(v100);
  v113 = v4;
  swift_bridgeObjectRetain_n(v4, 2);
  v68 = sub_1002043C0(v4);
  swift_bridgeObjectRelease(v4);
  aBlock[0] = v68;
  sub_1002044A0((uint64_t *)aBlock);
  swift_bridgeObjectRelease(v4);
  v16 = (uint8_t *)aBlock[0];
  v69 = objc_msgSend(v108, "supportedRKEFunctions");
  v53 = _swiftEmptyArrayStorage;
  if (!v69)
    goto LABEL_70;
  v70 = v69;
  v71 = sub_10006C25C(0, (unint64_t *)&qword_100344CD8, NSNumber_ptr);
  v52 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v70, v71);

  if (!((unint64_t)v52 >> 62))
  {
    v72 = *(_QWORD *)((v52 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v72)
      goto LABEL_54;
LABEL_69:
    swift_bridgeObjectRelease(v52);
    goto LABEL_70;
  }
LABEL_65:
  if (v52 < 0)
    v80 = v52;
  else
    v80 = v52 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v52);
  v72 = _CocoaArrayWrapper.endIndex.getter(v80);
  swift_bridgeObjectRelease(v52);
  if (!v72)
    goto LABEL_69;
LABEL_54:
  v99 = v16;
  v100 = v4;
  aBlock[0] = v53;
  sub_100192B9C(0, v72 & ~(v72 >> 63), 0);
  if (v72 < 0)
  {
    __break(1u);
LABEL_79:
    __break(1u);
    swift_release(aBlock[0]);
    __break(1u);
    return;
  }
  v73 = 0;
  v53 = aBlock[0];
  do
  {
    if ((v52 & 0xC000000000000001) != 0)
      v74 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v73, v52);
    else
      v74 = *(id *)(v52 + 8 * v73 + 32);
    v75 = v74;
    v76 = (unsigned __int16)objc_msgSend(v74, "unsignedShortValue");

    aBlock[0] = v53;
    v78 = v53[2];
    v77 = v53[3];
    if (v78 >= v77 >> 1)
    {
      sub_100192B9C(v77 > 1, v78 + 1, 1);
      v53 = aBlock[0];
    }
    ++v73;
    v53[2] = v78 + 1;
    *((_WORD *)v53 + v78 + 16) = v76;
    v8 = v107;
  }
  while (v72 != v73);
  swift_bridgeObjectRelease(v52);
  v16 = v99;
  v4 = v100;
LABEL_70:
  v81 = sub_10020425C((uint64_t)v16, (uint64_t)v53);
  swift_bridgeObjectRelease(v53);
  if (v81)
  {
    swift_release(v16);
    if (v112 != 1)
    {
      v79 = v4;
LABEL_77:
      swift_bridgeObjectRelease(v79);

LABEL_17:
      return;
    }
    v82 = *(_QWORD *)(a2 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier);
    v83 = *(_QWORD *)(a2 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier + 8);
    v84 = *(_QWORD *)(a2 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
    v85 = *(_QWORD *)(a2 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
    sub_10006BA34(v82, v83);
    sub_10006BA34(v84, v85);
    sub_1001F119C(0xD000000000000042, 0x80000001002C3730, v82, v83, v84, v85, 0);

    sub_10006B9B4(v84, v85);
    sub_10006B9B4(v82, v83);
    swift_bridgeObjectRelease(v4);
  }
  else
  {
    if (qword_1003447C0 != -1)
      swift_once(&qword_1003447C0, sub_1001EF020);
    v86 = (_QWORD *)swift_allocObject(&unk_10030E990, 48, 7);
    v87 = v108;
    v86[2] = v108;
    v86[3] = v16;
    v86[4] = v8;
    v86[5] = a2;
    aBlock[4] = sub_100206734;
    v111 = v86;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_100071C98;
    aBlock[3] = &unk_10030E9A8;
    v88 = _Block_copy(aBlock);
    swift_retain(a2);
    v89 = v87;
    v90 = swift_retain(v8);
    v91 = v105;
    static DispatchQoS.unspecified.getter(v90);
    v109 = _swiftEmptyArrayStorage;
    v92 = sub_1000639EC((unint64_t *)&qword_100344A20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v93 = sub_100063D3C((uint64_t *)&unk_100346200);
    v94 = sub_10007EF60((unint64_t *)&qword_100344A30, (uint64_t *)&unk_100346200, (uint64_t)&protocol conformance descriptor for [A]);
    v95 = v102;
    v96 = v93;
    v97 = v104;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v109, v96, v94, v104, v92);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v91, v95, v88);
    _Block_release(v88);

    ((void (*)(char *, uint64_t))v103[1])(v95, v97);
    (*(void (**)(char *, _QWORD *))(v106 + 8))(v91, v101);
    swift_release(v111);
    swift_bridgeObjectRelease(v113);
  }
}

void sub_1002016A0(id *a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;
  id v6;
  unsigned int v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  v6 = *a1;
  v7 = objc_msgSend(*a1, "tag");
  if (v7 == 135)
  {
    v14 = objc_msgSend(v6, "value");
    if (v14)
    {
      v15 = v14;
      static Data._unconditionallyBridgeFromObjectiveC(_:)(v14);
      v17 = v16;

      __asm { BR              X10 }
    }
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v7 != 129)
  {
    if (v7 != 128)
      return;
    v8 = objc_msgSend(v6, "value");
    if (v8)
    {
      v9 = v8;
      v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v8);
      v12 = v11;

      sub_100072014(v10, v12, 0);
      if (v3)
      {
        swift_errorRelease(v3);
        v13 = 0;
      }
      *(_WORD *)a2 = v13;
      *(_BYTE *)(a2 + 2) = v3 != 0;
      return;
    }
    __break(1u);
    goto LABEL_16;
  }
  v18 = objc_msgSend(v6, "value");
  if (!v18)
  {
LABEL_17:
    __break(1u);
    JUMPOUT(0x100201A9CLL);
  }
  v19 = v18;
  v20 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v22 = v21;

  sub_1000723E8(v20, v22, 0);
  if (v3)
  {
    swift_errorRelease(v3);
    v23 = 0;
  }
  *a3 = v23;
  a3[1] = v3 != 0;
}

void sub_100201AC4(id *a1, uint64_t a2, void *a3, unint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7, BOOL *a8)
{
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  int v22;
  int v23;
  __int128 v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  os_log_type_t v36;
  uint8_t *v37;
  id v38;
  void *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  BOOL *v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t *v53;
  void *v54;
  unint64_t v55;
  os_log_type_t v56;
  uint64_t v57;
  char v58[8];
  id v59;
  __int128 v60;
  __int16 v61;
  unsigned __int16 v62;
  char v63;

  v14 = *a1;
  if (objc_msgSend(*a1, "tag") == 160)
  {
    v53 = (uint64_t *)a5;
    v55 = a4;
    v62 = 0;
    v63 = 1;
    v61 = 256;
    v60 = xmmword_1002888D0;
    v15 = objc_msgSend(v14, "children");
    if (!v15)
      goto LABEL_29;
    v16 = v15;
    v17 = sub_10006C25C(0, &qword_100344CE0, SESTLV_ptr);
    v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v16, v17);

    if ((unint64_t)v18 >> 62)
    {
      if (v18 < 0)
        v33 = v18;
      else
        v33 = v18 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v18);
      a5 = _CocoaArrayWrapper.endIndex.getter(v33);
      if (a5)
        goto LABEL_5;
    }
    else
    {
      a5 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v18);
      if (a5)
      {
LABEL_5:
        if (a5 >= 1)
        {
          v51 = a6;
          v52 = a7;
          v50 = a8;
          v19 = 0;
          do
          {
            if ((v18 & 0xC000000000000001) != 0)
              v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v19, v18);
            else
              v20 = *(id *)(v18 + 8 * v19 + 32);
            v21 = v20;
            ++v19;
            v59 = v20;
            sub_100201F4C(&v59, (uint64_t)&v62, &v61);

          }
          while (a5 != v19);
          swift_bridgeObjectRelease_n(v18, 2);
          if ((v63 & 1) == 0 && (v61 & 0x100) == 0)
          {
            v22 = v62;
            v23 = v61;
            v24 = v60;
            sub_10006BA34(v60, *((unint64_t *)&v60 + 1));
            v25 = objc_msgSend(a3, "publicKeyIdentifier");
            v26 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v25);
            v28 = v27;

            v29 = *v53;
            swift_bridgeObjectRetain(*v53);
            v30 = sub_1002067B4(v22, v23, v24, *((unint64_t *)&v24 + 1), v55, v29, v51);
            swift_bridgeObjectRelease(v29);
            sub_100063CD0(v26, v28);
            sub_10006B9B4(v24, *((unint64_t *)&v24 + 1));
            *v52 = (*v52 | v30) & 1;
            if (v22 == 17)
              *v50 = v23 == 1;
            v32 = *((_QWORD *)&v24 + 1);
            v31 = v24;
            goto LABEL_26;
          }
          goto LABEL_21;
        }
        __break(1u);
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
    }
    swift_bridgeObjectRelease_n(v18, 2);
LABEL_21:
    a5 = (uint64_t)v14;
    v34 = Logger.logObject.getter(a5);
    v36 = static os_log_type_t.error.getter(v34, v35);
    if (!os_log_type_enabled(v34, v36))
    {

      goto LABEL_25;
    }
    v56 = v36;
    v37 = (uint8_t *)swift_slowAlloc(12, -1);
    v54 = (void *)swift_slowAlloc(32, -1);
    v59 = v54;
    *(_DWORD *)v37 = 136315138;
    v38 = objc_msgSend((id)a5, "asData");
    if (v38)
    {
      v39 = v38;
      v40 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v38);
      v42 = v41;

      sub_1001BD2CC(v40, v42);
      v44 = v43;
      v45 = sub_100063D3C((uint64_t *)&unk_100346060);
      v46 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
      v47 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v45, v46);
      v49 = v48;
      swift_bridgeObjectRelease(v44);
      sub_100063CD0(v40, v42);
      v57 = sub_1001C56EC(v47, v49, (uint64_t *)&v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, v58, v37 + 4, v37 + 12);

      swift_bridgeObjectRelease(v49);
      _os_log_impl((void *)&_mh_execute_header, v34, v56, "Failed to retrieve function identifier and status %s", v37, 0xCu);
      swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v54, -1, -1);
      swift_slowDealloc(v37, -1, -1);
LABEL_25:

      v32 = *((_QWORD *)&v60 + 1);
      v31 = v60;
LABEL_26:
      sub_10006B9B4(v31, v32);
      return;
    }
LABEL_30:

    __break(1u);
  }
}

void sub_100201F4C(id *a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;
  id v6;
  unsigned int v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  v6 = *a1;
  v7 = objc_msgSend(*a1, "tag");
  if (v7 == 192)
  {
    v14 = objc_msgSend(v6, "value");
    if (v14)
    {
      v15 = v14;
      static Data._unconditionallyBridgeFromObjectiveC(_:)(v14);
      v17 = v16;

      __asm { BR              X10 }
    }
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v7 != 131)
  {
    if (v7 != 128)
      return;
    v8 = objc_msgSend(v6, "value");
    if (v8)
    {
      v9 = v8;
      v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v8);
      v12 = v11;

      sub_100072014(v10, v12, 0);
      if (v3)
      {
        swift_errorRelease(v3);
        v13 = 0;
      }
      *(_WORD *)a2 = v13;
      *(_BYTE *)(a2 + 2) = v3 != 0;
      return;
    }
    __break(1u);
    goto LABEL_16;
  }
  v18 = objc_msgSend(v6, "value");
  if (!v18)
  {
LABEL_17:
    __break(1u);
    JUMPOUT(0x100202348);
  }
  v19 = v18;
  v20 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v22 = v21;

  sub_1000723E8(v20, v22, 0);
  if (v3)
  {
    swift_errorRelease(v3);
    v23 = 0;
  }
  *a3 = v23;
  a3[1] = v3 != 0;
}

uint64_t sub_100202370(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void **v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSString v24;
  uint64_t v25;
  void *v26;
  _QWORD *v27;
  id v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  void **aBlock;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  _QWORD *v51;

  v40 = a3;
  v41 = a4;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v44 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v42 = *(_QWORD *)(v10 - 8);
  v43 = v10;
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = objc_msgSend(a1, "publicKeyIdentifier");
  v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v14);
  v17 = v16;

  sub_1001BD2CC(v15, v17);
  v19 = v18;
  aBlock = v18;
  v20 = sub_100063D3C((uint64_t *)&unk_100346060);
  v21 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
  BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v20, v21);
  v23 = v22;
  swift_bridgeObjectRelease(v19);
  sub_100063CD0(v15, v17);
  v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v23);
  v25 = swift_allocObject(&unk_10030E9E0, 24, 7);
  *(_QWORD *)(v25 + 16) = a2;
  v50 = sub_100206764;
  v51 = (_QWORD *)v25;
  aBlock = _NSConcreteStackBlock;
  v47 = 1107296256;
  v48 = sub_100087BE8;
  v49 = &unk_10030E9F8;
  v26 = _Block_copy(&aBlock);
  v27 = v51;
  swift_bridgeObjectRetain(a2);
  swift_release(v27);
  v28 = (id)SESEndPointUpdateWithBlock(v24, v26);
  _Block_release(v26);

  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v29 = (_QWORD *)swift_allocObject(&unk_10030EA30, 48, 7);
  v31 = v40;
  v30 = v41;
  v29[2] = v28;
  v29[3] = v31;
  v29[4] = a1;
  v29[5] = v30;
  v50 = sub_1002067A8;
  v51 = v29;
  aBlock = _NSConcreteStackBlock;
  v47 = 1107296256;
  v48 = sub_100071C98;
  v49 = &unk_10030EA48;
  v32 = _Block_copy(&aBlock);
  v33 = v28;
  swift_retain(v31);
  v34 = a1;
  v35 = swift_retain(v30);
  static DispatchQoS.unspecified.getter(v35);
  v45 = _swiftEmptyArrayStorage;
  v36 = sub_1000639EC((unint64_t *)&qword_100344A20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v37 = sub_100063D3C((uint64_t *)&unk_100346200);
  v38 = sub_10007EF60((unint64_t *)&qword_100344A30, (uint64_t *)&unk_100346200, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v45, v37, v38, v6, v36);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v9, v32);
  _Block_release(v32);

  (*(void (**)(char *, uint64_t))(v44 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v13, v43);
  return swift_release(v51);
}

void sub_1002026FC(void *a1, uint64_t a2)
{
  _QWORD *v3;
  Class isa;

  v3 = sub_1001FAD00(a2);
  sub_10006C25C(0, (unint64_t *)&qword_100344CD8, NSNumber_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v3);
  objc_msgSend(a1, "setSupportedRKEFunctions:", isa);

}

uint64_t sub_100202774(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7;
  id v8;
  NSObject *v9;
  uint64_t v10;
  os_log_type_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  os_log_type_t type;
  uint64_t v40;
  _QWORD v41[3];
  _BYTE v42[8];
  uint64_t v43;
  _BYTE v44[16];
  uint64_t v45;

  if (a1)
  {
    swift_errorRetain(a1);
    swift_errorRetain(a1);
    v7 = a3;
    swift_errorRetain(a1);
    v8 = v7;
    v9 = Logger.logObject.getter(v8);
    v11 = static os_log_type_t.error.getter(v9, v10);
    if (os_log_type_enabled(v9, v11))
    {
      v12 = swift_slowAlloc(22, -1);
      v40 = swift_slowAlloc(64, -1);
      v45 = v40;
      *(_DWORD *)v12 = 136315394;
      type = v11;
      v13 = objc_msgSend(v8, "publicKeyIdentifier");
      v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v16 = v15;

      sub_1001BD2CC(v14, v16);
      v18 = v17;
      v19 = sub_100063D3C((uint64_t *)&unk_100346060);
      v20 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
      v21 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v19, v20);
      v23 = v22;
      swift_bridgeObjectRelease(v18);
      sub_100063CD0(v14, v16);
      v43 = sub_1001C56EC(v21, v23, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44, v12 + 4, v12 + 12);

      swift_bridgeObjectRelease(v23);
      *(_WORD *)(v12 + 12) = 2080;
      swift_getErrorValue(a1, v42, v41);
      v24 = Error.localizedDescription.getter(v41[1], v41[2]);
      v26 = v25;
      v43 = sub_1001C56EC(v24, v25, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44, v12 + 14, v12 + 22);
      swift_bridgeObjectRelease(v26);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v9, type, "Failed to update supported RKE functions for %s %s", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy(v40, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v12, -1, -1);
      swift_errorRelease(a1);

    }
    else
    {
      swift_errorRelease(a1);

      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }
  }
  else
  {
    v27 = Logger.logObject.getter(0);
    v31 = static os_log_type_t.info.getter(v27, v28, v29, v30);
    if (os_log_type_enabled(v27, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v31, "Endpoint updated with supported RKE functions", v32, 2u);
      swift_slowDealloc(v32, -1, -1);
    }

  }
  v33 = *(_QWORD *)(a4 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier);
  v34 = *(_QWORD *)(a4 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier + 8);
  v35 = a4 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier;
  v36 = *(_QWORD *)(a4 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
  v37 = *(_QWORD *)(v35 + 8);
  sub_10006BA34(v33, v34);
  sub_10006BA34(v36, v37);
  sub_1001F119C(0xD000000000000042, 0x80000001002C3730, v33, v34, v36, v37, 0);
  sub_10006B9B4(v36, v37);
  return sub_10006B9B4(v33, v34);
}

unint64_t sub_100202B34@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t inited;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t result;
  _BYTE v23[424];

  v2 = *a1;
  v3 = sub_100063D3C((uint64_t *)&unk_100346040);
  inited = swift_initStackObject(v3, v23);
  *(_OWORD *)(inited + 16) = xmmword_10028B430;
  *(_QWORD *)(inited + 32) = 0xD000000000000012;
  *(_QWORD *)(inited + 40) = 0x80000001002C0AE0;
  *(_WORD *)(inited + 48) = *(_WORD *)(v2 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_functionIdentifier);
  *(_QWORD *)(inited + 72) = &type metadata for UInt16;
  *(_QWORD *)(inited + 80) = 0xD000000000000010;
  *(_QWORD *)(inited + 88) = 0x80000001002C3580;
  *(_BYTE *)(inited + 96) = *(_BYTE *)(v2 + 16);
  *(_QWORD *)(inited + 120) = &type metadata for UInt8;
  strcpy((char *)(inited + 128), "keyIdentifier");
  *(_WORD *)(inited + 142) = -4864;
  sub_1001BD2CC(*(_QWORD *)(v2 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier), *(_QWORD *)(v2 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier + 8));
  v6 = v5;
  v7 = sub_100063D3C((uint64_t *)&unk_100346060);
  v8 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
  v9 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v7, v8);
  v11 = v10;
  swift_bridgeObjectRelease(v6);
  *(_QWORD *)(inited + 144) = v9;
  *(_QWORD *)(inited + 152) = v11;
  *(_QWORD *)(inited + 168) = &type metadata for String;
  *(_QWORD *)(inited + 176) = 0xD000000000000010;
  *(_QWORD *)(inited + 184) = 0x80000001002BD920;
  sub_1001BD2CC(*(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
  v13 = v12;
  v14 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v7, v8);
  v16 = v15;
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(inited + 192) = v14;
  *(_QWORD *)(inited + 200) = v16;
  *(_QWORD *)(inited + 216) = &type metadata for String;
  *(_QWORD *)(inited + 224) = 1919247728;
  *(_QWORD *)(inited + 232) = 0xE400000000000000;
  v17 = *(_QWORD *)(v2 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_peer)
      + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
  v18 = type metadata accessor for UUID(0);
  *(_QWORD *)(inited + 264) = v18;
  v19 = sub_1000960AC((_QWORD *)(inited + 240));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v19, v17, v18);
  *(_QWORD *)(inited + 272) = 1701869940;
  *(_QWORD *)(inited + 280) = 0xE400000000000000;
  *(_BYTE *)(inited + 288) = *(_BYTE *)(v2 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_type);
  *(_QWORD *)(inited + 312) = &type metadata for AlishaRKE.RequestType;
  *(_QWORD *)(inited + 320) = 0x6574617473;
  *(_QWORD *)(inited + 328) = 0xE500000000000000;
  *(_BYTE *)(inited + 336) = *(_BYTE *)(v2 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_state);
  *(_QWORD *)(inited + 360) = &type metadata for AlishaRKE.RKERequest.RequestState;
  *(_QWORD *)(inited + 368) = 0x5374756F656D6974;
  *(_QWORD *)(inited + 376) = 0xEA00000000006365;
  v20 = *(_QWORD *)(v2 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_timeoutSec);
  *(_QWORD *)(inited + 408) = &type metadata for Double;
  *(_QWORD *)(inited + 384) = v20;
  result = sub_10017C218(inited);
  *a2 = result;
  return result;
}

uint64_t sub_100202E1C(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;
  _QWORD *v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v19 = v18;
  v25 = (_QWORD *)(v18 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_completion);
  *v25 = 0;
  v25[1] = 0;
  *(_BYTE *)(v18 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_state) = 0;
  *(_QWORD *)(v18 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_timer) = 0;
  v26 = (uint64_t *)(v18 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier);
  *v26 = a1;
  v26[1] = a2;
  *(_QWORD *)(v18 + 24) = a3;
  *(_QWORD *)(v18 + 32) = a4;
  *(_WORD *)(v18 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_functionIdentifier) = a5;
  *(_BYTE *)(v18 + 16) = a6;
  *(_BYTE *)(v18 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_type) = a7;
  *(_QWORD *)(v18 + 56) = a8;
  *(_QWORD *)(v18 + 64) = a9;
  *(_QWORD *)(v18 + 40) = a10;
  *(_QWORD *)(v18 + 48) = a11;
  v27 = (_QWORD *)(v18 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_readerInformation);
  *v27 = a12;
  v27[1] = a13;
  *(_QWORD *)(v18 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_peer) = a14;
  v28 = v18 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_connectionIdentifier;
  v29 = type metadata accessor for UUID(0);
  v42 = *(_QWORD *)(v29 - 8);
  v43 = v29;
  (*(void (**)(uint64_t, uint64_t))(v42 + 16))(v28, a15);
  *(double *)(v19 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_timeoutSec) = (double)a16 / 1000.0;
  v30 = (_QWORD *)(v19 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_completion);
  v31 = *(_QWORD *)(v19 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_completion + 8);
  v40 = *(_QWORD *)(v19 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_completion);
  *v30 = a17;
  v30[1] = a18;
  sub_100063C8C(a1, a2);
  v41 = a4;
  sub_100063C8C(a3, a4);
  sub_1000DCA74(a8, a9);
  sub_10006BA34(a10, a11);
  swift_retain(a14);
  swift_retain(a18);
  sub_10008F210(v40, v31);
  *(_BYTE *)(v19 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_state) = 0;
  if (qword_1003447D8 != -1)
    swift_once(&qword_1003447D8, sub_1001FC514);
  v32 = swift_retain_n(v19, 2);
  v33 = Logger.logObject.getter(v32);
  v37 = static os_log_type_t.info.getter(v33, v34, v35, v36);
  if (os_log_type_enabled(v33, v37))
  {
    v38 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v38 = 134217984;
    v44 = *(_QWORD *)(v19 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_timeoutSec);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v38 + 4, v38 + 12);
    swift_release_n(v19, 2);
    _os_log_impl((void *)&_mh_execute_header, v33, v37, "RKE request timer set to %f sec", v38, 0xCu);
    swift_slowDealloc(v38, -1, -1);
    swift_release(a14);
    swift_release(a18);
    sub_10006B9B4(a10, a11);
    sub_10008F210(a8, a9);
    sub_100063CD0(a3, v41);
    sub_100063CD0(a1, a2);
  }
  else
  {
    swift_release(a14);
    swift_release(a18);
    sub_10006B9B4(a10, a11);
    sub_10008F210(a8, a9);
    sub_100063CD0(a3, v41);
    sub_100063CD0(a1, a2);
    swift_release_n(v19, 2);
  }

  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(a15, v43);
  return v19;
}

uint64_t sub_1002031A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100063CD0(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  sub_10006B9B4(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  sub_10008F210(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  v1 = v0 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_connectionIdentifier;
  v2 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_10008F210(*(_QWORD *)(v0 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_completion), *(_QWORD *)(v0 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_completion + 8));
  sub_100063CD0(*(_QWORD *)(v0 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier), *(_QWORD *)(v0 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier + 8));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_peer));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_readerInformation + 8));

  return v0;
}

uint64_t sub_10020325C()
{
  uint64_t v0;

  sub_1002031A4();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

void sub_100203280(uint64_t *a1, uint64_t *a2)
{
  sub_1002051AC(*a1, *a2);
}

uint64_t *sub_10020328C@<X0>(uint64_t *result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  v2 = *result;
  if ((unint64_t)*result >= 3)
    LOBYTE(v2) = 3;
  *a2 = v2;
  return result;
}

uint64_t sub_1002032A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC10seserviced9AlishaRKE_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced9AlishaRKE_notificationsToBeSuppressed));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced9AlishaRKE_passiveEntryState));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced9AlishaRKE_peersAvailableToSubscribe));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC10seserviced9AlishaRKE_requestsInProgress));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100203334()
{
  return type metadata accessor for AlishaRKE(0);
}

uint64_t type metadata accessor for AlishaRKE(uint64_t a1)
{
  return sub_10007BBF0(a1, qword_10034ABC8, (uint64_t)&nominal type descriptor for AlishaRKE);
}

uint64_t sub_100203350(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
    result = swift_updateClassMetadata2(a1, 256, 7, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1002033E0()
{
  return type metadata accessor for AlishaRKE.RKERequest(0);
}

uint64_t type metadata accessor for AlishaRKE.RKERequest(uint64_t a1)
{
  return sub_10007BBF0(a1, qword_10034ACD8, (uint64_t)&nominal type descriptor for AlishaRKE.RKERequest);
}

uint64_t sub_1002033FC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[14];

  v4[0] = (char *)&value witness table for Builtin.Int8 + 64;
  v4[1] = &unk_10028DE28;
  v4[2] = &unk_10028DE40;
  v4[3] = &unk_10028DE58;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(result - 8) + 64;
    v4[5] = &unk_10028DE58;
    v4[6] = (char *)&value witness table for Builtin.Int16 + 64;
    v4[7] = &unk_10028DE28;
    v4[8] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[9] = &unk_10028DE70;
    v4[10] = &unk_10028DE88;
    v4[11] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[12] = &unk_10028DEA0;
    v4[13] = &unk_10028DEB8;
    return swift_updateClassMetadata2(a1, 256, 14, v4, a1 + 80);
  }
  return result;
}

ValueMetadata *type metadata accessor for AlishaRKE.RequestType()
{
  return &type metadata for AlishaRKE.RequestType;
}

uint64_t storeEnumTagSinglePayload for AlishaRKE.RKERequest.RequestState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10020354C + 4 * byte_10028DDC5[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100203580 + 4 * byte_10028DDC0[v4]))();
}

uint64_t sub_100203580(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100203588(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100203590);
  return result;
}

uint64_t sub_10020359C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1002035A4);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1002035A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002035B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AlishaRKE.RKERequest.RequestState()
{
  return &type metadata for AlishaRKE.RKERequest.RequestState;
}

uint64_t storeEnumTagSinglePayload for AlishaRKE.RKEError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_100203618 + 4 * byte_10028DDCF[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_10020364C + 4 * byte_10028DDCA[v4]))();
}

uint64_t sub_10020364C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100203654(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10020365CLL);
  return result;
}

uint64_t sub_100203668(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100203670);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_100203674(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10020367C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AlishaRKE.RKEError()
{
  return &type metadata for AlishaRKE.RKEError;
}

uint64_t _s10seserviced9AlishaRKEC17PassiveEntryStateOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1002036E4 + 4 * byte_10028DDD9[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100203718 + 4 * byte_10028DDD4[v4]))();
}

uint64_t sub_100203718(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100203720(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100203728);
  return result;
}

uint64_t sub_100203734(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10020373CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100203740(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100203748(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AlishaRKE.PassiveEntryState()
{
  return &type metadata for AlishaRKE.PassiveEntryState;
}

unint64_t sub_100203768()
{
  unint64_t result;

  result = qword_10034ADC8;
  if (!qword_10034ADC8)
  {
    result = swift_getWitnessTable(&unk_10028DF54, &type metadata for AlishaRKE.PassiveEntryState);
    atomic_store(result, (unint64_t *)&qword_10034ADC8);
  }
  return result;
}

unint64_t sub_1002037B0()
{
  unint64_t result;

  result = qword_10034ADD0;
  if (!qword_10034ADD0)
  {
    result = swift_getWitnessTable(&unk_10028DFFC, &type metadata for AlishaRKE.RKEError);
    atomic_store(result, (unint64_t *)&qword_10034ADD0);
  }
  return result;
}

unint64_t sub_1002037F8()
{
  unint64_t result;

  result = qword_10034ADD8;
  if (!qword_10034ADD8)
  {
    result = swift_getWitnessTable(&unk_10028E064, &type metadata for AlishaRKE.RKERequest.RequestState);
    atomic_store(result, (unint64_t *)&qword_10034ADD8);
  }
  return result;
}

unint64_t sub_100203840()
{
  unint64_t result;

  result = qword_10034ADE0;
  if (!qword_10034ADE0)
  {
    result = swift_getWitnessTable(&unk_10028E104, &type metadata for AlishaRKE.RequestType);
    atomic_store(result, (unint64_t *)&qword_10034ADE0);
  }
  return result;
}

uint64_t sub_100203884(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2)
  {
    if (a1 != a2)
      __asm { BR              X8 }
  }
  return 1;
}

uint64_t sub_100204198(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char v10;
  uint64_t result;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = a1[4];
  v6 = a1[5];
  v7 = a2[4];
  v8 = a2[5];
  v9 = v5 == v7 && v6 == v8;
  if (v9 || (v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v7, v8, 0), result = 0, (v10 & 1) != 0))
  {
    v12 = v2 - 1;
    if (!v12)
      return 1;
    v13 = a1 + 7;
    for (i = a2 + 7; ; i += 2)
    {
      v15 = *(v13 - 1);
      v16 = *v13;
      v17 = *(i - 1);
      v18 = *i;
      v19 = v15 == v17 && v16 == v18;
      if (!v19 && (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v17, v18, 0) & 1) == 0)
        break;
      v13 += 2;
      if (!--v12)
        return 1;
    }
    return 0;
  }
  return result;
}

BOOL sub_10020425C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 result;
  uint64_t v4;
  unsigned __int16 *v5;
  unsigned __int16 *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(unsigned __int16 *)(a1 + 32) != *(unsigned __int16 *)(a2 + 32))
    return 0;
  if (v2 == 1)
    return 1;
  v4 = v2 - 2;
  v5 = (unsigned __int16 *)(a1 + 34);
  v6 = (unsigned __int16 *)(a2 + 34);
  do
  {
    v8 = *v5++;
    v7 = v8;
    v10 = *v6++;
    v9 = v10;
    v12 = v4-- != 0;
    result = v7 == v9;
  }
  while (v7 == v9 && v12);
  return result;
}

_QWORD *sub_1002042D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_100063D3C((uint64_t *)&unk_100347440);
  v4 = (_QWORD *)swift_allocObject(v3, 40 * v1 + 32, 7);
  v5 = j__malloc_size(v4);
  v4[2] = v1;
  v4[3] = 2 * ((uint64_t)(v5 - 32) / 40);
  v6 = sub_100204DF4(&v9, (uint64_t)(v4 + 4), v1, a1);
  v7 = v9;
  swift_bridgeObjectRetain(a1);
  sub_10007EF58(v7);
  if (v6 != (_QWORD *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

_QWORD *sub_1002043C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  int64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_100063D3C(&qword_100348A20);
  v4 = swift_allocObject(v3, 2 * v1 + 32, 7);
  v5 = j__malloc_size((const void *)v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 31;
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = v6 & 0xFFFFFFFFFFFFFFFELL;
  v7 = sub_100205018(&v10, (_WORD *)(v4 + 32), v1, a1);
  v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_10007EF58(v8);
  if (v7 != (_QWORD *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return (_QWORD *)v4;
}

Swift::Int sub_1002044A0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  Swift::Int result;
  _QWORD v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_10006F960(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_100204508(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_100204508(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  Swift::Int v18;
  Swift::Int v19;
  __int16 v20;
  Swift::Int v21;
  unsigned __int16 *v22;
  unsigned int v23;
  Swift::Int v24;
  unsigned __int16 *v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  char v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  unint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  Swift::Int v96;
  Swift::Int v97;
  uint64_t v98;
  char *__dst;

  v2 = a1;
  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)v3 < 2)
        return result;
      v80 = 0;
      v81 = *v2;
      v82 = 1;
      while (1)
      {
        v83 = *(unsigned __int16 *)(v81 + 2 * v82);
        v84 = v80;
        do
        {
          v85 = *(unsigned __int16 *)(v81 + v84);
          if (v83 >= v85)
            break;
          if (!v81)
            goto LABEL_143;
          *(_WORD *)(v81 + v84 + 2) = v85;
          *(_WORD *)(v81 + v84) = v83;
          v84 -= 2;
        }
        while (v84 != -2);
        ++v82;
        v80 += 2;
        if (v82 == v3)
          return result;
      }
    }
    goto LABEL_139;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
  {
LABEL_148:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    return result;
  }
  v96 = result;
  v97 = v3;
  if (v3 < 2)
  {
    v8 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v12 = _swiftEmptyArrayStorage[2];
      v11 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_104;
    }
    v95 = _swiftEmptyArrayStorage;
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for UInt16);
    *(_QWORD *)(v7 + 16) = v6;
    v3 = v97;
    v95 = (_QWORD *)v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *v2;
  v93 = v2;
  v94 = *v2 - 2;
  v11 = (char *)_swiftEmptyArrayStorage;
  v98 = *v2;
  while (1)
  {
    v13 = v9++;
    if (v9 < v3)
    {
      v14 = *(unsigned __int16 *)(v10 + 2 * v9);
      v15 = *(unsigned __int16 *)(v10 + 2 * v13);
      v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        v16 = v14;
        while (1)
        {
          v17 = *(unsigned __int16 *)(v10 + 2 * v9);
          if (v14 < v15 == v17 >= v16)
            break;
          ++v9;
          v16 = v17;
          if (v3 == v9)
          {
            v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13)
          goto LABEL_140;
        if (v13 < v9)
        {
          v18 = v9 - 1;
          v19 = v13;
          do
          {
            if (v19 != v18)
            {
              if (!v10)
                goto LABEL_146;
              v20 = *(_WORD *)(v10 + 2 * v19);
              *(_WORD *)(v10 + 2 * v19) = *(_WORD *)(v10 + 2 * v18);
              *(_WORD *)(v10 + 2 * v18) = v20;
            }
            v59 = ++v19 < v18--;
          }
          while (v59);
        }
      }
    }
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13))
        goto LABEL_138;
      if (v9 - v13 < v96)
      {
        v21 = v13 + v96;
        if (__OFADD__(v13, v96))
          goto LABEL_141;
        if (v21 >= v3)
          v21 = v3;
        if (v21 < v13)
          goto LABEL_142;
        if (v9 != v21)
        {
          v22 = (unsigned __int16 *)(v94 + 2 * v9);
          do
          {
            v23 = *(unsigned __int16 *)(v10 + 2 * v9);
            v24 = v13;
            v25 = v22;
            do
            {
              v26 = *v25;
              if (v23 >= v26)
                break;
              if (!v10)
                goto LABEL_144;
              v25[1] = v26;
              *v25-- = v23;
              ++v24;
            }
            while (v9 != v24);
            ++v9;
            ++v22;
          }
          while (v9 != v21);
          v9 = v21;
        }
      }
    }
    if (v9 < v13)
    {
LABEL_133:
      __break(1u);
      goto LABEL_134;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
      v11 = sub_10006F5F0(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v28 = *((_QWORD *)v11 + 2);
    v27 = *((_QWORD *)v11 + 3);
    v12 = v28 + 1;
    v10 = v98;
    if (v28 >= v27 >> 1)
    {
      v77 = sub_10006F5F0((char *)(v27 > 1), v28 + 1, 1, v11);
      v10 = v98;
      v11 = v77;
    }
    *((_QWORD *)v11 + 2) = v12;
    v29 = v11 + 32;
    v30 = &v11[16 * v28 + 32];
    *(_QWORD *)v30 = v13;
    *((_QWORD *)v30 + 1) = v9;
    if (v28)
      break;
    v12 = 1;
LABEL_15:
    v3 = v97;
    if (v9 >= v97)
    {
      v8 = v95;
      v2 = v93;
LABEL_104:
      v95 = v8;
      if (v12 < 2)
      {
LABEL_115:
        v79 = v11;
        goto LABEL_116;
      }
      v86 = *v2;
      while (1)
      {
        v87 = v12 - 2;
        if (v12 < 2)
          break;
        if (!v86)
          goto LABEL_147;
        v78 = v11;
        v88 = v11 + 32;
        v89 = *(_QWORD *)&v11[16 * v87 + 32];
        v90 = *(_QWORD *)&v11[16 * v12 + 24];
        sub_100204B94((unsigned __int16 *)(v86 + 2 * v89), (unsigned __int16 *)(v86 + 2 * *(_QWORD *)&v88[16 * v12 - 16]), v86 + 2 * v90, __dst);
        if (v1)
          goto LABEL_95;
        if (v90 < v89)
          goto LABEL_135;
        if ((swift_isUniquelyReferenced_nonNull_native(v78) & 1) == 0)
          v78 = sub_10006F84C((uint64_t)v78);
        if (v87 >= *((_QWORD *)v78 + 2))
          goto LABEL_136;
        v91 = &v78[16 * v87 + 32];
        *(_QWORD *)v91 = v89;
        *((_QWORD *)v91 + 1) = v90;
        v92 = *((_QWORD *)v78 + 2);
        if (v12 > v92)
          goto LABEL_137;
        memmove(&v78[16 * v12 + 16], &v78[16 * v12 + 32], 16 * (v92 - v12));
        v11 = v78;
        *((_QWORD *)v78 + 2) = v92 - 1;
        v12 = v92 - 1;
        if (v92 <= 2)
          goto LABEL_115;
      }
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
      goto LABEL_148;
    }
  }
  while (1)
  {
    v31 = v12 - 1;
    if (v12 >= 4)
    {
      v36 = &v29[16 * v12];
      v37 = *((_QWORD *)v36 - 8);
      v38 = *((_QWORD *)v36 - 7);
      v42 = __OFSUB__(v38, v37);
      v39 = v38 - v37;
      if (v42)
        goto LABEL_122;
      v41 = *((_QWORD *)v36 - 6);
      v40 = *((_QWORD *)v36 - 5);
      v42 = __OFSUB__(v40, v41);
      v34 = v40 - v41;
      v35 = v42;
      if (v42)
        goto LABEL_123;
      v43 = v12 - 2;
      v44 = &v29[16 * v12 - 32];
      v46 = *(_QWORD *)v44;
      v45 = *((_QWORD *)v44 + 1);
      v42 = __OFSUB__(v45, v46);
      v47 = v45 - v46;
      if (v42)
        goto LABEL_125;
      v42 = __OFADD__(v34, v47);
      v48 = v34 + v47;
      if (v42)
        goto LABEL_128;
      if (v48 >= v39)
      {
        v66 = &v29[16 * v31];
        v68 = *(_QWORD *)v66;
        v67 = *((_QWORD *)v66 + 1);
        v42 = __OFSUB__(v67, v68);
        v69 = v67 - v68;
        if (v42)
          goto LABEL_132;
        v59 = v34 < v69;
        goto LABEL_84;
      }
    }
    else
    {
      if (v12 != 3)
      {
        v60 = *((_QWORD *)v11 + 4);
        v61 = *((_QWORD *)v11 + 5);
        v42 = __OFSUB__(v61, v60);
        v53 = v61 - v60;
        v54 = v42;
        goto LABEL_78;
      }
      v33 = *((_QWORD *)v11 + 4);
      v32 = *((_QWORD *)v11 + 5);
      v42 = __OFSUB__(v32, v33);
      v34 = v32 - v33;
      v35 = v42;
    }
    if ((v35 & 1) != 0)
      goto LABEL_124;
    v43 = v12 - 2;
    v49 = &v29[16 * v12 - 32];
    v51 = *(_QWORD *)v49;
    v50 = *((_QWORD *)v49 + 1);
    v52 = __OFSUB__(v50, v51);
    v53 = v50 - v51;
    v54 = v52;
    if (v52)
      goto LABEL_127;
    v55 = &v29[16 * v31];
    v57 = *(_QWORD *)v55;
    v56 = *((_QWORD *)v55 + 1);
    v42 = __OFSUB__(v56, v57);
    v58 = v56 - v57;
    if (v42)
      goto LABEL_130;
    if (__OFADD__(v53, v58))
      goto LABEL_131;
    if (v53 + v58 >= v34)
    {
      v59 = v34 < v58;
LABEL_84:
      if (v59)
        v31 = v43;
      goto LABEL_86;
    }
LABEL_78:
    if ((v54 & 1) != 0)
      goto LABEL_126;
    v62 = &v29[16 * v31];
    v64 = *(_QWORD *)v62;
    v63 = *((_QWORD *)v62 + 1);
    v42 = __OFSUB__(v63, v64);
    v65 = v63 - v64;
    if (v42)
      goto LABEL_129;
    if (v65 < v53)
      goto LABEL_15;
LABEL_86:
    v70 = v31 - 1;
    if (v31 - 1 >= v12)
    {
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
      goto LABEL_133;
    }
    if (!v10)
      goto LABEL_145;
    v71 = &v29[16 * v70];
    v72 = *(_QWORD *)v71;
    v73 = v29;
    v74 = &v29[16 * v31];
    v75 = *((_QWORD *)v74 + 1);
    sub_100204B94((unsigned __int16 *)(v10 + 2 * *(_QWORD *)v71), (unsigned __int16 *)(v10 + 2 * *(_QWORD *)v74), v10 + 2 * v75, __dst);
    if (v1)
      break;
    if (v75 < v72)
      goto LABEL_119;
    if (v31 > *((_QWORD *)v11 + 2))
      goto LABEL_120;
    *(_QWORD *)v71 = v72;
    *(_QWORD *)&v73[16 * v70 + 8] = v75;
    v76 = *((_QWORD *)v11 + 2);
    if (v31 >= v76)
      goto LABEL_121;
    v12 = v76 - 1;
    memmove(v74, v74 + 16, 16 * (v76 - 1 - v31));
    v29 = v73;
    *((_QWORD *)v11 + 2) = v76 - 1;
    v10 = v98;
    if (v76 <= 2)
      goto LABEL_15;
  }
  v78 = v11;
LABEL_95:
  v79 = v78;
LABEL_116:
  swift_bridgeObjectRelease(v79);
  v95[2] = 0;
  return swift_bridgeObjectRelease(v95);
}

uint64_t sub_100204B94(unsigned __int16 *__src, unsigned __int16 *a2, unint64_t a3, char *__dst)
{
  unsigned __int16 *v4;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned __int16 *v17;
  unsigned __int16 *v18;
  unsigned __int16 *v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  unsigned int v22;
  uint64_t result;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  unsigned __int16 *v26;

  v26 = __src;
  v4 = (unsigned __int16 *)__dst;
  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  if ((char *)a2 - (char *)__src >= 0)
    v9 = (char *)a2 - (char *)__src;
  else
    v9 = v8 + 1;
  v10 = v9 >> 1;
  v11 = a3 - (_QWORD)a2;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  else
    v12 = v11 + 1;
  v13 = v12 >> 1;
  v25 = (unsigned __int16 *)__dst;
  if (v10 >= v12 >> 1)
  {
    if (v11 >= -1)
    {
      if (__dst != (char *)a2 || &a2[v13] <= (unsigned __int16 *)__dst)
        memmove(__dst, a2, 2 * v13);
      v18 = &v4[v13];
      v24 = v18;
      v26 = v6;
      if (v7 < v6 && v11 >= 2)
      {
        v19 = (unsigned __int16 *)(a3 - 2);
        while (1)
        {
          v20 = v19 + 1;
          v21 = v6 - 1;
          v22 = *(v6 - 1);
          if (*(v18 - 1) >= v22)
          {
            v24 = v18 - 1;
            if (v20 < v18 || v19 >= v18 || v20 != v18)
              *v19 = *(v18 - 1);
            --v18;
            if (v6 <= v7)
              goto LABEL_44;
          }
          else
          {
            if (v20 != v6 || v19 >= v6)
              *v19 = v22;
            v26 = --v6;
            if (v21 <= v7)
              goto LABEL_44;
          }
          --v19;
          if (v18 <= v4)
            goto LABEL_44;
        }
      }
      goto LABEL_44;
    }
  }
  else if (v8 >= -1)
  {
    if (__dst != (char *)__src || &__src[v10] <= (unsigned __int16 *)__dst)
      memmove(__dst, __src, 2 * v10);
    v14 = &v4[v10];
    v24 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 2)
    {
      do
      {
        v15 = *v6;
        v16 = *v4;
        if (v15 >= v16)
        {
          if (v7 != v4)
            *v7 = v16;
          v25 = ++v4;
          v17 = v6;
        }
        else
        {
          v17 = v6 + 1;
          if (v7 < v6 || v7 >= v17 || v7 != v6)
            *v7 = v15;
        }
        ++v7;
        if (v4 >= v14)
          break;
        v6 = v17;
      }
      while ((unint64_t)v17 < a3);
      v26 = v7;
    }
LABEL_44:
    sub_10006F7A8((void **)&v26, (const void **)&v25, &v24);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

_QWORD *sub_100204DF4(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  _QWORD *v24;

  v5 = a4 + 56;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v7 = ~(-1 << -(char)v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v11 = 0;
    v9 = 0;
LABEL_39:
    *result = a4;
    result[1] = v5;
    result[2] = ~v6;
    result[3] = v11;
    result[4] = v8;
    return (_QWORD *)v9;
  }
  v9 = a3;
  if (!a3)
  {
    v11 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v10 = a2;
  v23 = -1 << *(_BYTE *)(a4 + 32);
  v24 = result;
  v11 = 0;
  v12 = 0;
  v13 = (unint64_t)(63 - v6) >> 6;
  if (!v8)
    goto LABEL_9;
LABEL_8:
  v14 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  v15 = v14 | (v11 << 6);
  while (1)
  {
    ++v12;
    v19 = *(_QWORD *)(a4 + 48) + 40 * v15;
    v20 = *(_QWORD *)(v19 + 8);
    v21 = *(_QWORD *)(v19 + 32);
    v22 = *(_OWORD *)(v19 + 16);
    *(_QWORD *)v10 = *(_QWORD *)v19;
    *(_QWORD *)(v10 + 8) = v20;
    *(_OWORD *)(v10 + 16) = v22;
    *(_QWORD *)(v10 + 32) = v21;
    if (v12 == v9)
    {
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }
    v10 += 40;
    swift_bridgeObjectRetain(v20);
    result = (_QWORD *)swift_bridgeObjectRetain(v21);
    if (v8)
      goto LABEL_8;
LABEL_9:
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v16 >= v13)
      goto LABEL_33;
    v17 = *(_QWORD *)(v5 + 8 * v16);
    if (!v17)
    {
      v11 += 2;
      if (v16 + 1 >= v13)
      {
        v8 = 0;
        v11 = v16;
      }
      else
      {
        v17 = *(_QWORD *)(v5 + 8 * v11);
        if (v17)
          goto LABEL_14;
        v18 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_33;
        v17 = *(_QWORD *)(v5 + 8 * v18);
        if (v17)
        {
LABEL_17:
          v16 = v18;
          goto LABEL_18;
        }
        v11 = v16 + 3;
        if (v16 + 3 < v13)
        {
          v17 = *(_QWORD *)(v5 + 8 * v11);
          if (v17)
          {
LABEL_14:
            v16 = v11;
            goto LABEL_18;
          }
          v18 = v16 + 4;
          if (v16 + 4 >= v13)
          {
LABEL_33:
            v8 = 0;
            goto LABEL_37;
          }
          v17 = *(_QWORD *)(v5 + 8 * v18);
          if (!v17)
          {
            while (1)
            {
              v16 = v18 + 1;
              if (__OFADD__(v18, 1))
                goto LABEL_42;
              if (v16 >= v13)
              {
                v8 = 0;
                v11 = v13 - 1;
                goto LABEL_37;
              }
              v17 = *(_QWORD *)(v5 + 8 * v16);
              ++v18;
              if (v17)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v8 = 0;
        v11 = v16 + 2;
      }
LABEL_37:
      v9 = v12;
LABEL_38:
      v6 = v23;
      result = v24;
      goto LABEL_39;
    }
LABEL_18:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v16 << 6);
    v11 = v16;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

_QWORD *sub_100205018(_QWORD *result, _WORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;

  v4 = a4 + 64;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_35:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(_WORD *)(*(_QWORD *)(a4 + 48) + 2 * v12);
    if (v9 == a3)
      goto LABEL_35;
  }
  v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v13);
  if (v14)
    goto LABEL_19;
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    v7 = 0;
    v8 = v13;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    v13 = v8;
LABEL_19:
    v16 = __clz(__rbit64(v14));
    v7 = (v14 - 1) & v14;
    v12 = v16 + (v13 << 6);
    v8 = v13;
    goto LABEL_8;
  }
  v15 = v13 + 2;
  if (v13 + 2 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    v13 = v15;
    goto LABEL_19;
  }
  v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    v7 = 0;
    v8 = v13 + 2;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
    goto LABEL_15;
  v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
    goto LABEL_18;
  while (1)
  {
    v13 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v13 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_34;
    }
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v15;
    if (v14)
      goto LABEL_19;
  }
LABEL_38:
  __break(1u);
  return result;
}

void sub_1002051AC(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int16 *)(a1 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_functionIdentifier) == *(unsigned __int16 *)(a2 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_functionIdentifier)
    && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16))
  {
    sub_10007C23C(*(_QWORD *)(a1 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier), *(_QWORD *)(a1 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier + 8));
  }
}

_QWORD *sub_1002051FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = a1;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 >= 0)
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    v4 = _CocoaArrayWrapper.endIndex.getter(a1);
    if (v4)
      goto LABEL_3;
    return _swiftEmptyArrayStorage;
  }
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v4)
    return _swiftEmptyArrayStorage;
LABEL_3:
  v5 = 0;
  v12 = OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_functionIdentifier;
  while ((v3 & 0xC000000000000001) != 0)
  {
    v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v3);
    v6 = v7;
    v8 = v5 + 1;
    if (__OFADD__(v5, 1))
      goto LABEL_14;
LABEL_7:
    if (*(unsigned __int16 *)(v6 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_functionIdentifier) == *(unsigned __int16 *)(a2 + v12)
      && *(unsigned __int8 *)(v6 + 16) == *(unsigned __int8 *)(a2 + 16))
    {
      __asm { BR              X10 }
    }
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v7);
    v9 = _swiftEmptyArrayStorage[2];
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v9);
    v10 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, v6);
    specialized ContiguousArray._endMutation()(v10);
    ++v5;
    if (v8 == v4)
      return _swiftEmptyArrayStorage;
  }
  if (v5 >= *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    JUMPOUT(0x1002056E4);
  }
  v6 = *(_QWORD *)(v3 + 8 * v5 + 32);
  v7 = swift_retain(v6);
  v8 = v5 + 1;
  if (!__OFADD__(v5, 1))
    goto LABEL_7;
LABEL_14:
  __break(1u);
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1002057D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1002057E4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1002057EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v4 = a1;
    else
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    if (_CocoaArrayWrapper.endIndex.getter(v4))
    {
LABEL_3:
      if ((a1 & 0xC000000000000001) != 0)
      {
        v3 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
      }
      else
      {
        v3 = *(_QWORD *)(a1 + 32);
        swift_retain(v3);
      }
      __asm { BR              X10 }
    }
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v2)
      goto LABEL_3;
  }
  swift_bridgeObjectRelease(a1);
  return 0;
}

uint64_t sub_100205D34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;

  if ((unint64_t)a1 >> 62)
    goto LABEL_14;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v4)
  {
    a2 += OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
    v5 = 4;
    while (1)
    {
      v6 = v5 - 4;
      if ((a1 & 0xC000000000000001) == 0)
        break;
      v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, a1);
      v8 = __OFADD__(v6, 1);
      v9 = v5 - 3;
      if (v8)
        goto LABEL_13;
LABEL_9:
      if ((static UUID.== infix(_:_:)(*(_QWORD *)(v7 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_peer)+ OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier, a2) & 1) != 0)
      {
        swift_bridgeObjectRelease(a1);
        return v7;
      }
      swift_release(v7);
      ++v5;
      if (v9 == v4)
        goto LABEL_18;
    }
    v7 = *(_QWORD *)(a1 + 8 * v5);
    swift_retain(v7);
    v8 = __OFADD__(v6, 1);
    v9 = v5 - 3;
    if (!v8)
      goto LABEL_9;
LABEL_13:
    __break(1u);
LABEL_14:
    if (a1 < 0)
      v10 = a1;
    else
      v10 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v4 = _CocoaArrayWrapper.endIndex.getter(v10);
  }
LABEL_18:
  swift_bridgeObjectRelease(a1);
  return 0;
}

uint64_t sub_100205E7C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v4 = a1;
    else
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    if (_CocoaArrayWrapper.endIndex.getter(v4))
    {
LABEL_3:
      if ((a1 & 0xC000000000000001) != 0)
      {
        v3 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
      }
      else
      {
        v3 = *(_QWORD *)(a1 + 32);
        swift_retain(v3);
      }
      __asm { BR              X10 }
    }
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v2)
      goto LABEL_3;
  }
  swift_bridgeObjectRelease(a1);
  return 0;
}

uint64_t sub_10020640C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t inited;
  unint64_t v12;
  uint64_t v13;

  if (!*(_BYTE *)(result + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_type))
  {
    v5 = result;
    v6 = *(_QWORD *)(result + 24);
    v7 = *(_QWORD *)(result + 32);
    v8 = *(_QWORD *)(result + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier);
    v9 = *(_QWORD *)(result + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier + 8);
    v10 = sub_100063D3C((uint64_t *)&unk_100346040);
    inited = swift_initStackObject(v10, &v13);
    *(_OWORD *)(inited + 16) = xmmword_100288AC0;
    strcpy((char *)(inited + 32), "rkeFunctionID");
    *(_WORD *)(inited + 46) = -4864;
    *(_WORD *)(inited + 48) = *(_WORD *)(v5 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_functionIdentifier);
    *(_QWORD *)(inited + 72) = &type metadata for UInt16;
    *(_QWORD *)(inited + 80) = 0x6F69746341656B72;
    *(_QWORD *)(inited + 88) = 0xEB0000000044496ELL;
    *(_BYTE *)(inited + 96) = *(_BYTE *)(v5 + 16);
    *(_QWORD *)(inited + 120) = &type metadata for UInt8;
    *(_QWORD *)(inited + 128) = 0x726F727265;
    *(_QWORD *)(inited + 168) = &type metadata for String;
    *(_QWORD *)(inited + 136) = 0xE500000000000000;
    *(_QWORD *)(inited + 144) = a2;
    *(_QWORD *)(inited + 152) = a3;
    swift_bridgeObjectRetain(a3);
    v12 = sub_10017C218(inited);
    sub_1001F119C(0xD000000000000048, 0x80000001002C3650, v6, v7, v8, v9, v12);
    return swift_bridgeObjectRelease(v12);
  }
  return result;
}

uint64_t sub_100206584(uint64_t result, char a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t inited;
  unint64_t v10;
  uint64_t v11;

  if (!*(_BYTE *)(result + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_type))
  {
    v3 = result;
    v4 = *(_QWORD *)(result + 24);
    v5 = *(_QWORD *)(result + 32);
    v6 = *(_QWORD *)(result + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier);
    v7 = *(_QWORD *)(result + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier + 8);
    v8 = sub_100063D3C((uint64_t *)&unk_100346040);
    inited = swift_initStackObject(v8, &v11);
    *(_OWORD *)(inited + 16) = xmmword_100288AC0;
    strcpy((char *)(inited + 32), "rkeFunctionID");
    *(_WORD *)(inited + 46) = -4864;
    *(_WORD *)(inited + 48) = *(_WORD *)(v3 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_functionIdentifier);
    *(_QWORD *)(inited + 72) = &type metadata for UInt16;
    *(_QWORD *)(inited + 80) = 0x6F69746341656B72;
    *(_QWORD *)(inited + 88) = 0xEB0000000044496ELL;
    *(_BYTE *)(inited + 96) = *(_BYTE *)(v3 + 16);
    *(_QWORD *)(inited + 120) = &type metadata for UInt8;
    *(_QWORD *)(inited + 128) = 0xD000000000000012;
    *(_QWORD *)(inited + 136) = 0x80000001002C36A0;
    *(_QWORD *)(inited + 168) = &type metadata for UInt8;
    *(_BYTE *)(inited + 144) = a2;
    v10 = sub_10017C218(inited);
    sub_1001F119C(0xD000000000000048, 0x80000001002C3650, v4, v5, v6, v7, v10);
    return swift_bridgeObjectRelease(v10);
  }
  return result;
}

uint64_t sub_1002066D4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002066F8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100206734()
{
  uint64_t v0;

  return sub_100202370(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_100206740()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_100206764(void *a1)
{
  uint64_t v1;

  sub_1002026FC(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_10020676C()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1002067A8()
{
  uint64_t v0;

  return sub_100202774(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1002067B4(int a1, unsigned __int8 a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  id v20;
  unint64_t v21;
  char v22;
  unsigned int v23;
  unsigned __int8 v24;
  unint64_t v25;
  char v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  char v44;
  _BOOL4 v45;
  uint64_t v46;
  NSObject *v47;
  uint64_t v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  int v64;
  uint64_t *v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86[3];
  uint64_t v87;
  uint64_t v88;

  v8 = v7;
  v84 = a5;
  v85 = a3;
  v14 = type metadata accessor for DispatchPredicate(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  v18 = (unint64_t *)((char *)&v82 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003447B8 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v19 = qword_100354EE8;
  *v18 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v15 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v14);
  v20 = (id)v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)(v18);
  (*(void (**)(_QWORD *, uint64_t))(v15 + 8))(v18, v14);
  if ((v19 & 1) == 0)
  {
    __break(1u);
LABEL_79:
    swift_once(&qword_100344720, sub_1001C7400);
LABEL_11:
    v29 = v84;
    sub_1001C7778(a2, a1, v84);
    sub_1001C7C78(v85, a4, a1, v29);
    if ((unsigned __int16)a1 == 16)
    {
      if (qword_100344680 != -1)
        swift_once(&qword_100344680, sub_10016E9A8);
      sub_1001739F0(a2 == 1, v29);
    }
    return 1;
  }
  if (!*(_QWORD *)(a6 + 16) || (v21 = sub_100187FF8(a1), (v22 & 1) == 0))
  {
    if (qword_100344720 == -1)
      goto LABEL_11;
    goto LABEL_79;
  }
  v23 = *(unsigned __int8 *)(*(_QWORD *)(a6 + 56) + v21);
  v24 = a2;
  if (*(_QWORD *)(a7 + 16) && (v25 = sub_100187FF8(a1), (v26 & 1) != 0))
  {
    v27 = (uint64_t *)(*(_QWORD *)(a7 + 56) + 16 * v25);
    v28 = v27[1];
    v83 = *v27;
    sub_100063C8C(v83, v28);
    if (v23 != a2)
      goto LABEL_23;
  }
  else
  {
    v83 = 0;
    v28 = 0xF000000000000000;
    if (v23 != a2)
      goto LABEL_23;
  }
  if (v28 >> 60 == 15)
  {
    if (a4 >> 60 == 15)
      return 0;
    goto LABEL_20;
  }
  if (a4 >> 60 == 15)
  {
LABEL_20:
    v31 = v85;
    sub_10006BA34(v85, a4);
    v32 = v83;
    sub_10006BA34(v83, v28);
    sub_10006B9B4(v32, v28);
    sub_10006B9B4(v31, a4);
    goto LABEL_23;
  }
  LODWORD(v82) = v23;
  v33 = v85;
  sub_10006BA34(v85, a4);
  v34 = v83;
  sub_10006BA34(v83, v28);
  sub_10007C23C(v34, v28);
  v36 = v35;
  v37 = v33;
  v23 = v82;
  sub_10006B9B4(v37, a4);
  sub_10006B9B4(v34, v28);
  if ((v36 & 1) != 0)
  {
    sub_10006B9B4(v83, v28);
    return 0;
  }
LABEL_23:
  v82 = v28;
  v38 = v8;
  if (qword_100344720 != -1)
    swift_once(&qword_100344720, sub_1001C7400);
  v39 = v84;
  sub_1001C7778(a2, a1, v84);
  sub_1001C7C78(v85, a4, a1, v39);
  v40 = type metadata accessor for AlishaPeer(0);
  v41 = swift_dynamicCastClass(v39, v40);
  if (v41)
  {
    if ((unsigned __int16)(a1 - 1) > 1u)
    {
      swift_retain(v39);
      v56 = v82;
      if ((unsigned __int16)a1 == 16)
      {
        if (qword_100344680 != -1)
          swift_once(&qword_100344680, sub_10016E9A8);
        sub_1001739F0(v24 == 1, v39);
      }
      goto LABEL_76;
    }
    v42 = *(unsigned __int8 *)(*(_QWORD *)(v41 + OBJC_IVAR____TtC10seserviced10AlishaPeer_configuration) + 65);
    if (*(_QWORD *)(a6 + 16) && (v43 = sub_100187FF8(0x10u), (v44 & 1) != 0))
    {
      v45 = *(unsigned __int8 *)(*(_QWORD *)(a6 + 56) + v43) == 1;
      if ((v42 & 1) != 0)
      {
        swift_retain(v39);
        goto LABEL_48;
      }
    }
    else
    {
      if (v42)
      {
        swift_retain(v39);
        v45 = 0;
        goto LABEL_48;
      }
      v45 = 0;
    }
    v57 = (uint64_t *)(v38 + OBJC_IVAR____TtC10seserviced9AlishaRKE_notificationsToBeSuppressed);
    swift_beginAccess(v38 + OBJC_IVAR____TtC10seserviced9AlishaRKE_notificationsToBeSuppressed, v86, 32, 0);
    v58 = *v57;
    if (*(_QWORD *)(v58 + 16))
    {
      v59 = v23;
      v60 = v39 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
      swift_retain(v39);
      v61 = v60;
      v23 = v59;
      v24 = a2;
      v62 = sub_100187E34(v61);
      if ((v63 & 1) != 0)
      {
        v64 = *(unsigned __int16 *)(*(_QWORD *)(v58 + 56) + 2 * v62);
        swift_endAccess(v86);
        if (v64 == (unsigned __int16)a1)
          v45 = 1;
        goto LABEL_48;
      }
    }
    else
    {
      swift_retain(v39);
    }
    swift_endAccess(v86);
LABEL_48:
    v65 = (uint64_t *)(v38 + OBJC_IVAR____TtC10seserviced9AlishaRKE_passiveEntryState);
    swift_beginAccess(v38 + OBJC_IVAR____TtC10seserviced9AlishaRKE_passiveEntryState, v86, 32, 0);
    v66 = *v65;
    if (*(_QWORD *)(v66 + 16))
    {
      v67 = sub_100187E34(v39 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier);
      v56 = v82;
      if ((v68 & 1) != 0)
        v69 = *(unsigned __int8 *)(*(_QWORD *)(v66 + 56) + v67);
      else
        v69 = 0;
    }
    else
    {
      v69 = 0;
      v56 = v82;
    }
    swift_endAccess(v86);
    if (v24 > 3u || v24 == 1)
      goto LABEL_60;
    if (v23 > 3 || v23 == 1)
    {
      if (v69 == 1)
        v77 = 0;
      else
        v77 = v42;
      if (((v45 | v77) & 1) == 0)
      {
        v78 = *(_QWORD *)(v39 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier);
        v79 = *(_QWORD *)(v39 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier + 8);
        v80 = *(_QWORD *)(v39 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
        v81 = *(_QWORD *)(v39 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
        sub_10006BA34(v78, v79);
        sub_10006BA34(v80, v81);
        sub_1001F119C(0xD000000000000039, 0x80000001002C37C0, v78, v79, v80, v81, 0);
        sub_10006B9B4(v80, v81);
        sub_10006B9B4(v78, v79);
      }
      v76 = qword_100344680;
      v75 = 1;
      goto LABEL_73;
    }
    if (v24 > 3u || v24 == 1)
    {
LABEL_60:
      if (v23 <= 3 && v23 != 1)
      {
        if (v69 == 2)
          v70 = 0;
        else
          v70 = v42;
        if (((v45 | v70) & 1) == 0)
        {
          v71 = *(_QWORD *)(v39 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier);
          v72 = *(_QWORD *)(v39 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier + 8);
          v73 = *(_QWORD *)(v39 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
          v74 = *(_QWORD *)(v39 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
          sub_10006BA34(v71, v72);
          sub_10006BA34(v73, v74);
          sub_1001F119C(0xD00000000000003BLL, 0x80000001002C3780, v71, v72, v73, v74, 0);
          sub_10006B9B4(v73, v74);
          sub_10006B9B4(v71, v72);
        }
        v75 = 0;
        v76 = qword_100344680;
LABEL_73:
        if (v76 != -1)
          swift_once(&qword_100344680, sub_10016E9A8);
        sub_100173D0C(v75, v39);
      }
    }
LABEL_76:
    sub_10006B9B4(v83, v56);
    swift_release(v39);
    return 1;
  }
  v46 = swift_retain_n(v39, 2);
  v47 = Logger.logObject.getter(v46);
  v49 = static os_log_type_t.error.getter(v47, v48);
  if (os_log_type_enabled(v47, v49))
  {
    v50 = (uint8_t *)swift_slowAlloc(12, -1);
    v51 = swift_slowAlloc(32, -1);
    *(_DWORD *)v50 = 136315138;
    v86[0] = v51;
    v52 = swift_retain(v39);
    v53 = UUID.uuidString.getter(v52);
    v55 = v54;
    swift_release(v39);
    v87 = sub_1001C56EC(v53, v55, v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, &v88, v50 + 4, v50 + 12);
    swift_release_n(v39, 2);
    swift_bridgeObjectRelease(v55);
    _os_log_impl((void *)&_mh_execute_header, v47, v49, "Failed to cast Peer to AlishaPeer %s", v50, 0xCu);
    swift_arrayDestroy(v51, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v51, -1, -1);
    swift_slowDealloc(v50, -1, -1);
    sub_10006B9B4(v83, v82);
  }
  else
  {
    sub_10006B9B4(v83, v82);
    swift_release_n(v39, 2);
  }

  return 0;
}

uint64_t sub_100207044()
{
  return sub_10020840C(48);
}

void sub_10020704C(void *a1, char a2)
{
  uint64_t *v2;

  sub_1001FD248(a1, a2 & 1, v2[2], v2[3], v2[4], v2[5]);
}

uint64_t sub_10020705C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t inited;
  char v8;
  unint64_t v9;
  uint64_t v10;

  if (!*(_BYTE *)(result + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_type))
  {
    v1 = result;
    v2 = *(_QWORD *)(result + 24);
    v3 = *(_QWORD *)(result + 32);
    v4 = *(_QWORD *)(result + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier);
    v5 = *(_QWORD *)(result + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier + 8);
    v6 = sub_100063D3C((uint64_t *)&unk_100346040);
    inited = swift_initStackObject(v6, &v10);
    *(_OWORD *)(inited + 16) = xmmword_1002888F0;
    strcpy((char *)(inited + 32), "rkeFunctionID");
    *(_WORD *)(inited + 46) = -4864;
    *(_WORD *)(inited + 48) = *(_WORD *)(v1 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_functionIdentifier);
    *(_QWORD *)(inited + 72) = &type metadata for UInt16;
    *(_QWORD *)(inited + 80) = 0x6F69746341656B72;
    *(_QWORD *)(inited + 88) = 0xEB0000000044496ELL;
    v8 = *(_BYTE *)(v1 + 16);
    *(_QWORD *)(inited + 120) = &type metadata for UInt8;
    *(_BYTE *)(inited + 96) = v8;
    v9 = sub_10017C218(inited);
    sub_1001F119C(0xD000000000000045, 0x80000001002C3950, v2, v3, v4, v5, v9);
    return swift_bridgeObjectRelease(v9);
  }
  return result;
}

void sub_100207188(int a1, int a2, uint64_t a3, unint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(Class, _QWORD), uint64_t a10, void (*a11)(Class, _QWORD), uint64_t a12)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  os_unfair_lock_s *v31;
  os_unfair_lock_s *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  NSObject *v41;
  uint64_t v42;
  os_log_type_t v43;
  uint64_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint8_t *v55;
  NSObject *v56;
  uint64_t v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  os_unfair_lock_s *v64;
  os_unfair_lock_s *v65;
  uint64_t v66;
  void *v67;
  id v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  unint64_t v79;
  __int16 v80;
  uint64_t v81;
  NSObject *v82;
  uint64_t v83;
  os_log_type_t v84;
  uint8_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  id v95;
  id v96;
  const __CFString *v97;
  const __CFString *v98;
  uint64_t v99;
  NSObject *v100;
  uint64_t v101;
  os_log_type_t v102;
  uint8_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  const __CFString *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  NSString v114;
  id v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __n128 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void (*v125)(Class, _QWORD);
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  uint64_t v130;
  NSObject **v131;
  void *v132;
  NSObject **v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  os_unfair_lock_s *v143;
  id v144;
  id v145;
  uint64_t v146;
  uint64_t v147;
  Class isa;
  id v149;
  id v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  id v160;
  id v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  void (*v165)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  id v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint8_t *v184;
  uint64_t v185;
  uint64_t v186;
  void (*v187)(Class, _QWORD);
  uint64_t v188;
  uint64_t aBlock;
  unint64_t v190;
  uint64_t (*v191)(uint64_t);
  void *v192;
  uint64_t (*v193)();
  uint64_t v194;
  uint64_t v195;
  char v196[8];
  char v197[8];

  v175 = a8;
  v176 = a7;
  v177 = a6;
  v179 = a5;
  LODWORD(v184) = a2;
  v15 = sub_100063D3C((uint64_t *)&unk_1003465E0);
  __chkstk_darwin(v15, v16);
  v174 = (char *)&v164 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v182 = type metadata accessor for UUID(0);
  v181 = *(_QWORD *)(v182 - 8);
  __chkstk_darwin(v182, v18);
  v183 = (uint64_t)&v164 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for DispatchPredicate(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20, v22);
  v24 = (uint64_t *)((char *)&v164 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v25 = swift_allocObject(&unk_10030EAA8, 32, 7);
  *(_QWORD *)(v25 + 16) = a11;
  *(_QWORD *)(v25 + 24) = a12;
  v26 = qword_1003447B8;
  swift_retain(a12);
  if (v26 != -1)
    swift_once(&qword_1003447B8, sub_1001EEFA4);
  v27 = qword_100354EE8;
  *v24 = qword_100354EE8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v21 + 104))(v24, enum case for DispatchPredicate.onQueue(_:), v20);
  v28 = (id)v27;
  LOBYTE(v27) = _dispatchPreconditionTest(_:)(v24);
  (*(void (**)(_QWORD *, uint64_t))(v21 + 8))(v24, v20);
  if ((v27 & 1) != 0)
  {
    v178 = a1;
    v20 = swift_allocObject(&unk_10030EAD0, 32, 7);
    *(_QWORD *)(v20 + 16) = a3;
    *(_QWORD *)(v20 + 24) = a4;
    sub_100063C8C(a3, a4);
    if (qword_1003447A0 == -1)
      goto LABEL_5;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1003447A0, sub_1001EDCA4);
LABEL_5:
  v187 = a11;
  v29 = swift_allocObject(&unk_10030EAF8, 32, 7);
  *(_QWORD *)(v29 + 16) = sub_1002083CC;
  *(_QWORD *)(v29 + 24) = v20;
  __chkstk_darwin(v29, v30);
  v32 = v31 + 4;
  swift_retain(v20);
  os_unfair_lock_lock(v32);
  sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_10006F860, &aBlock);
  os_unfair_lock_unlock(v32);
  v33 = aBlock;
  swift_release(v20);
  swift_release(v29);
  v34 = sub_10009F640(v33);
  v35 = swift_bridgeObjectRelease(v33);
  if (!v34)
  {
    v56 = Logger.logObject.getter(v35);
    v58 = static os_log_type_t.error.getter(v56, v57);
    if (os_log_type_enabled(v56, v58))
    {
      v59 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v59 = 0;
      _os_log_impl((void *)&_mh_execute_header, v56, v58, "Vehicle is not connected", v59, 2u);
      swift_slowDealloc(v59, -1, -1);
    }

    sub_1001DB9F0(264, v187);
    v60 = v25;
    goto LABEL_28;
  }
  v185 = a12;
  v36 = (uint64_t *)(a10 + OBJC_IVAR____TtC10seserviced9AlishaRKE_requestsInProgress);
  swift_beginAccess(a10 + OBJC_IVAR____TtC10seserviced9AlishaRKE_requestsInProgress, v197, 0, 0);
  v37 = *v36;
  sub_100063C8C(a3, a4);
  swift_bridgeObjectRetain(v37);
  v39 = sub_100205E7C(v38);
  sub_100063CD0(a3, a4);
  swift_bridgeObjectRelease(v37);
  v186 = v34;
  if ((v39 & 1) != 0)
  {
    sub_100063C8C(a3, a4);
    v40 = sub_100063C8C(a3, a4);
    v41 = Logger.logObject.getter(v40);
    v43 = static os_log_type_t.error.getter(v41, v42);
    if (os_log_type_enabled(v41, v43))
    {
      v44 = swift_slowAlloc(12, -1);
      v180 = v25;
      v45 = (uint8_t *)v44;
      v46 = swift_slowAlloc(32, -1);
      aBlock = v46;
      *(_DWORD *)v45 = 136315138;
      v184 = v45 + 4;
      sub_1001BD2CC(a3, a4);
      v48 = v47;
      v195 = v47;
      v49 = sub_100063D3C((uint64_t *)&unk_100346060);
      v50 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
      v51 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v49, v50);
      v53 = v52;
      swift_bridgeObjectRelease(v48);
      v195 = sub_1001C56EC(v51, v53, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v195, v196, v184, v45 + 12);
      v54 = v53;
      v34 = v186;
      swift_bridgeObjectRelease(v54);
      sub_100063CD0(a3, a4);
      sub_100063CD0(a3, a4);
      _os_log_impl((void *)&_mh_execute_header, v41, v43, "An action is already in progress for key %s", v45, 0xCu);
      swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      v55 = v45;
      v25 = v180;
      swift_slowDealloc(v55, -1, -1);

    }
    else
    {

      sub_100063CD0(a3, a4);
      sub_100063CD0(a3, a4);
    }
    v80 = 260;
LABEL_27:
    sub_1001DB9F0(v80, v187);
    swift_release(v25);
    v60 = v34;
LABEL_28:
    swift_release(v60);
    return;
  }
  v180 = v25;
  v61 = swift_allocObject(&unk_10030EB20, 32, 7);
  *(_QWORD *)(v61 + 16) = a3;
  *(_QWORD *)(v61 + 24) = a4;
  sub_100063C8C(a3, a4);
  if (qword_1003445B8 != -1)
    swift_once(&qword_1003445B8, sub_1000EAA4C);
  v62 = swift_allocObject(&unk_10030EB48, 32, 7);
  *(_QWORD *)(v62 + 16) = sub_1002083D8;
  *(_QWORD *)(v62 + 24) = v61;
  __chkstk_darwin(v62, v63);
  v65 = v64 + 4;
  swift_retain(v61);
  os_unfair_lock_lock(v65);
  sub_10009B4E4((_QWORD *(*)(uint64_t *__return_ptr))sub_100096F14, &aBlock);
  os_unfair_lock_unlock(v65);
  v66 = aBlock;
  swift_release(v61);
  swift_release(v62);
  v67 = (void *)sub_10009F618(v66);
  swift_bridgeObjectRelease(v66);
  v25 = v180;
  v34 = v186;
  if (!v67)
  {
LABEL_23:
    sub_100063C8C(a3, a4);
    v81 = sub_100063C8C(a3, a4);
    v82 = Logger.logObject.getter(v81);
    v84 = static os_log_type_t.error.getter(v82, v83);
    if (os_log_type_enabled(v82, v84))
    {
      v85 = (uint8_t *)swift_slowAlloc(12, -1);
      v86 = swift_slowAlloc(32, -1);
      aBlock = v86;
      *(_DWORD *)v85 = 136315138;
      v184 = v85 + 4;
      sub_1001BD2CC(a3, a4);
      v88 = v87;
      v195 = v87;
      v89 = sub_100063D3C((uint64_t *)&unk_100346060);
      v90 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
      v91 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v89, v90);
      v93 = v92;
      swift_bridgeObjectRelease(v88);
      v195 = sub_1001C56EC(v91, v93, &aBlock);
      v25 = v180;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v195, v196, v184, v85 + 12);
      v94 = v93;
      v34 = v186;
      swift_bridgeObjectRelease(v94);
      sub_100063CD0(a3, a4);
      sub_100063CD0(a3, a4);
      _os_log_impl((void *)&_mh_execute_header, v82, v84, "Failed to retrieve valid endpoint for key %s", v85, 0xCu);
      swift_arrayDestroy(v86, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v86, -1, -1);
      swift_slowDealloc(v85, -1, -1);

    }
    else
    {

      sub_100063CD0(a3, a4);
      sub_100063CD0(a3, a4);
    }
    v80 = 256;
    goto LABEL_27;
  }
  v68 = objc_msgSend(v67, "readerInfo");
  if (!v68)
  {

    goto LABEL_23;
  }
  v69 = v68;
  v173 = v67;
  v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
  v72 = v71;

  v73 = type metadata accessor for AlishaPeer(0);
  v74 = swift_dynamicCastClass(v34, v73);
  if (v74)
  {
    v172 = v72;
    v75 = *(_QWORD *)(*(_QWORD *)(v74 + OBJC_IVAR____TtC10seserviced10AlishaPeer_configuration) + 88);
    v76 = *(_QWORD *)(v75 + 16);
    v166 = 0;
    if (v76 && (v77 = sub_100187FF8(v178), (v78 & 1) != 0))
      v79 = *(_QWORD *)(*(_QWORD *)(v75 + 56) + 8 * v77);
    else
      v79 = 5000;
    v170 = v79;
    v171 = v70;
    v187 = a9;
    swift_retain(v34);
    v95 = v173;
    v96 = objc_msgSend(v173, "getEndpointUser");
    if (v96 == (id)1)
    {
      v97 = CFSTR("friend3rdPartyRKECount");
      v98 = CFSTR("friendWalletRKECount");
    }
    else
    {
      if (v96)
        goto LABEL_40;
      v97 = CFSTR("owner3rdPartyRKECount");
      v98 = CFSTR("ownerWalletRKECount");
    }
    if ((_BYTE)v179)
      v110 = v97;
    else
      v110 = v98;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v110);
    v112 = v111;
    v113 = objc_opt_self(SESDAnalyticsLogger);
    v114 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v112);
    sub_100049C94(v113, v114);

LABEL_40:
    sub_100063C8C(a3, a4);
    v115 = objc_msgSend(v95, "appletIdentifier");
    v169 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v115);
    v168 = v116;

    v117 = v186;
    v118 = v186 + OBJC_IVAR____TtC10seserviced4Peer_connectionIdentifier;
    v119 = swift_beginAccess(v186 + OBJC_IVAR____TtC10seserviced4Peer_connectionIdentifier, &v195, 0, 0);
    v165 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v181 + 16);
    v165(v183, v118, v182, v119);
    v120 = type metadata accessor for AlishaRKE.RKERequest(0);
    v167 = swift_allocObject(v120, *(unsigned int *)(v120 + 48), *(unsigned __int16 *)(v120 + 52));
    swift_retain(v117);
    swift_retain(v25);
    v121 = v177;
    v122 = v176;
    sub_1000DCA74(v177, v176);
    v123 = v25;
    v124 = v175;
    v125 = v187;
    sub_10006BA34(v175, (unint64_t)v187);
    v163 = (unint64_t)v125;
    v162 = v124;
    v126 = v178;
    LOBYTE(v125) = (_BYTE)v184;
    v127 = sub_100202E1C(a3, a4, v169, v168, v178, (char)v184, v179, v121, v122, v162, v163, v171, v172, v117, v183, v170, (uint64_t)sub_1002083B4, v123);
    v128 = swift_allocObject(&unk_10030EB70, 24, 7);
    swift_weakInit(v128 + 16, v127);
    v129 = (void *)qword_100354EE8;
    v130 = swift_allocObject(&unk_10030EB98, 51, 7);
    *(_QWORD *)(v130 + 16) = v128;
    *(_QWORD *)(v130 + 24) = a10;
    *(_QWORD *)(v130 + 32) = a3;
    *(_QWORD *)(v130 + 40) = a4;
    *(_WORD *)(v130 + 48) = v126;
    *(_BYTE *)(v130 + 50) = (_BYTE)v125;
    v131 = (NSObject **)objc_allocWithZone((Class)SESTimer);
    v193 = sub_10020844C;
    v194 = v130;
    aBlock = (uint64_t)_NSConcreteStackBlock;
    v190 = 1107296256;
    v191 = sub_100071C98;
    v192 = &unk_10030EBB0;
    v132 = _Block_copy(&aBlock);
    sub_100063C8C(a3, a4);
    swift_retain(v128);
    swift_retain(a10);
    v133 = sub_10004C264(v131, v129, v132);
    _Block_release(v132);
    swift_release(v194);
    v134 = OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_timer;
    v135 = *(void **)(v127 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_timer);
    *(_QWORD *)(v127 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_timer) = v133;

    swift_beginAccess(v36, &aBlock, 33, 0);
    v136 = swift_retain(v127);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v136);
    v138 = *(_QWORD *)((*v36 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v137 = *(_QWORD *)((*v36 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v138 >= v137 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v137 > 1, v138 + 1, 1);
    v139 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v138, v127);
    specialized Array._endMutation()(v139);
    swift_endAccess(&aBlock);
    aBlock = sub_10007C66C((uint64_t)&off_100306438);
    v190 = v140;
    v141 = sub_100063D3C(&qword_100346220);
    v142 = swift_allocObject(v141, 48, 7);
    *(_OWORD *)(v142 + 16) = xmmword_10028DDB0;
    v143 = (os_unfair_lock_s *)objc_opt_self(SESTLV);
    v144 = -[os_unfair_lock_s TLVWithTag:unsignedShort:](v143, "TLVWithTag:unsignedShort:", 128, bswap32(v126) >> 16);
    if (v144)
    {
      *(_QWORD *)(v142 + 32) = v144;
      v145 = -[os_unfair_lock_s TLVWithTag:unsignedChar:](v143, "TLVWithTag:unsignedChar:", 129, v184);
      v146 = (uint64_t)v174;
      if (v145)
      {
        *(_QWORD *)(v142 + 40) = v145;
        v188 = v142;
        specialized Array._endMutation()(v145);
        v147 = v188;
        sub_10006C25C(0, &qword_100344CE0, SESTLV_ptr);
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v147);
        v149 = -[os_unfair_lock_s TLVWithTag:children:](v143, "TLVWithTag:children:", 32624, isa);

        if (v149)
        {
          v150 = objc_msgSend(v149, "asData");

          if (v150)
          {
            v151 = v128;
            v152 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v150);
            v154 = v153;

            Data.append(_:)(v152, v154);
            sub_100063CD0(v152, v154);
            if (qword_100344680 != -1)
              swift_once(&qword_100344680, sub_10016E9A8);
            v155 = aBlock;
            v156 = v190;
            v157 = v182;
            ((void (*)(uint64_t, uint64_t, uint64_t))v165)(v146, v127 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_connectionIdentifier, v182);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v181 + 56))(v146, 0, 1, v157);
            sub_100063C8C(v155, v156);
            v158 = v166;
            sub_10016E310(3u, 17, v155, v156, v186, 1, v146, 0, 1);
            sub_100063CD0(v155, v156);
            if (v158)
              swift_errorRelease(v158);
            sub_1000F1C30(v146);
            *(_BYTE *)(v127 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_state) = 1;
            v159 = *(_QWORD *)(v127 + v134);
            v160 = v173;
            if (v159)
              sub_10004C410(v159, *(double *)(v127 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_timeoutSec));
            sub_10020705C(v127);
            swift_release(v127);
            swift_release_n(v186, 2);

            sub_100063CD0(aBlock, v190);
            swift_release(v180);
            v60 = v151;
            goto LABEL_28;
          }
          goto LABEL_60;
        }
LABEL_59:
        swift_release(v185);
        __break(1u);
LABEL_60:
        swift_release(v185);
        __break(1u);
        swift_release(v36);
        os_unfair_lock_unlock(v143);
        __break(1u);
        return;
      }
    }
    else
    {
      swift_release(v185);
      __break(1u);
    }
    swift_release(v185);
    __break(1u);
    goto LABEL_59;
  }
  swift_bridgeObjectRelease(v72);
  v99 = swift_retain_n(v34, 2);
  v100 = Logger.logObject.getter(v99);
  v102 = static os_log_type_t.error.getter(v100, v101);
  if (os_log_type_enabled(v100, v102))
  {
    v103 = (uint8_t *)swift_slowAlloc(12, -1);
    v104 = swift_slowAlloc(32, -1);
    *(_DWORD *)v103 = 136315138;
    aBlock = v104;
    v105 = swift_retain(v186);
    v106 = UUID.uuidString.getter(v105);
    v108 = v107;
    swift_release(v186);
    v195 = sub_1001C56EC(v106, v108, &aBlock);
    v34 = v186;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v195, v196, v103 + 4, v103 + 12);
    swift_release_n(v34, 2);
    swift_bridgeObjectRelease(v108);
    _os_log_impl((void *)&_mh_execute_header, v100, v102, "Failed to cast Peer to AlishaPeer %s", v103, 0xCu);
    swift_arrayDestroy(v104, 1, (char *)&type metadata for Any + 8);
    v109 = v104;
    v25 = v180;
    swift_slowDealloc(v109, -1, -1);
    swift_slowDealloc(v103, -1, -1);
  }
  else
  {
    swift_release_n(v34, 2);
  }

  v161 = v173;
  sub_1001DB9F0(258, v187);
  swift_release(v25);
  swift_release(v34);

}

void sub_1002083B4(__int16 a1)
{
  uint64_t v1;

  sub_1001DB9F0(a1 & 0x1FF, *(void (**)(Class, _QWORD))(v1 + 16));
}

uint64_t sub_1002083CC(uint64_t a1)
{
  uint64_t v1;

  return sub_1001FCB38(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1002083D8(void *a1)
{
  return sub_1001FCC2C(a1);
}

uint64_t sub_1002083E0()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100208404()
{
  return sub_10020840C(51);
}

uint64_t sub_10020840C(uint64_t a1)
{
  _QWORD *v1;

  swift_release(v1[2]);
  swift_release(v1[3]);
  sub_100063CD0(v1[4], v1[5]);
  return swift_deallocObject(v1, a1, 7);
}

uint64_t sub_10020844C()
{
  uint64_t *v0;

  return sub_1001FCCF4(v0[2], v0[3], v0[4], v0[5]);
}

unint64_t sub_100208460()
{
  unint64_t result;

  result = qword_10034AE00;
  if (!qword_10034AE00)
  {
    result = swift_getWitnessTable(&unk_10028DF7C, &type metadata for AlishaRKE.RKEError);
    atomic_store(result, (unint64_t *)&qword_10034AE00);
  }
  return result;
}

void sub_1002084D4(uint64_t a1)
{
  void *v1;
  NSString v2;

  if (SESInternalVariant(a1))
  {
    v1 = (void *)objc_opt_self(SESBootUUID);
    v2 = String._bridgeToObjectiveC()();
    LODWORD(v1) = objc_msgSend(v1, "isFirstLaunchAfterBootForKey:", v2);

    if ((_DWORD)v1)
      sub_10020855C();
  }
}

void sub_10020855C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  NSObject *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  NSObject *v22;
  _BOOL4 v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  os_log_type_t v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  os_log_type_t v39;
  uint8_t *v40;
  void *v41;
  NSString v42;
  int v43;
  NSObject *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  void *v48;
  _QWORD *v49;
  uint64_t v50;
  void *v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  NSObject *v67;
  _QWORD *v68;
  uint64_t aBlock[5];
  _QWORD *v70;
  char v71[24];
  _OWORD v72[3];
  char v73;

  v0 = type metadata accessor for DispatchWorkItemFlags(0);
  v63 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0, v1);
  v3 = (char *)&v56 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS.QoSClass(0);
  v66 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9, v10);
  v65 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (id)MobileGestalt_get_current_device(v11);
  if (v13)
  {
    v14 = v13;
    v15 = (id)MobileGestalt_copy_buildVersion_obj();

    if (v15)
    {
      v58 = v9;
      v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
      v67 = v17;

      if (qword_1003447E0 != -1)
        swift_once(&qword_1003447E0, sub_10020914C);
      v59 = v5;
      swift_beginAccess(&xmmword_10034AE10, v71, 0, 0);
      v72[0] = xmmword_10034AE10;
      v72[1] = *(_OWORD *)&qword_10034AE20;
      v72[2] = xmmword_10034AE30;
      v73 = byte_10034AE40;
      v18 = sub_10015C054(v72);
      sub_100153858((uint64_t)v18);
      v20 = v19;
      v22 = v21;
      sub_10015C09C(v72);
      v23 = sub_100209268();
      if (qword_1003447E8 != -1)
        swift_once(&qword_1003447E8, sub_1002091F4);
      v24 = type metadata accessor for Logger(0);
      sub_10009673C(v24, (uint64_t)qword_10034AE48);
      swift_bridgeObjectRetain_n(v22, 2);
      v25 = v67;
      v26 = swift_bridgeObjectRetain_n(v67, 2);
      v27 = Logger.logObject.getter(v26);
      v31 = static os_log_type_t.info.getter(v27, v28, v29, v30);
      v61 = v31;
      v32 = os_log_type_enabled(v27, v31);
      v60 = v4;
      v62 = v20;
      if (v32)
      {
        v33 = swift_slowAlloc(28, -1);
        v56 = swift_slowAlloc(64, -1);
        aBlock[0] = v56;
        *(_DWORD *)v33 = 136315650;
        v57 = v3;
        if (v22)
          v34 = v20;
        else
          v34 = 0x3E6C696E3CLL;
        if (v22)
          v35 = (unint64_t)v22;
        else
          v35 = 0xE500000000000000;
        swift_bridgeObjectRetain(v22);
        v68 = (_QWORD *)sub_1001C56EC(v34, v35, aBlock);
        v25 = v67;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, aBlock, v33 + 4, v33 + 12);
        swift_bridgeObjectRelease_n(v22, 2);
        swift_bridgeObjectRelease(v35);
        *(_WORD *)(v33 + 12) = 2080;
        swift_bridgeObjectRetain(v25);
        v68 = (_QWORD *)sub_1001C56EC(v16, (unint64_t)v25, aBlock);
        v3 = v57;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, aBlock, v33 + 14, v33 + 22);
        swift_bridgeObjectRelease_n(v25, 3);
        *(_WORD *)(v33 + 22) = 1024;
        LODWORD(v68) = v23;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, (char *)&v68 + 4, v33 + 24, v33 + 28);
        _os_log_impl((void *)&_mh_execute_header, v27, (os_log_type_t)v61, "lastCheckedVersion %s current %s tethered %{BOOL}d", (uint8_t *)v33, 0x1Cu);
        v36 = v56;
        swift_arrayDestroy(v56, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v36, -1, -1);
        swift_slowDealloc(v33, -1, -1);

        if (v22)
          goto LABEL_15;
      }
      else
      {

        swift_bridgeObjectRelease_n(v25, 2);
        swift_bridgeObjectRelease_n(v22, 2);
        if (v22)
        {
LABEL_15:
          if (v62 == v16 && v22 == v25)
          {
            swift_bridgeObjectRelease(v22);
LABEL_25:
            sub_1002094DC(v16, (uint64_t)v25);
            swift_bridgeObjectRelease(v25);
            v41 = (void *)objc_opt_self(SESBootUUID);
            v42 = String._bridgeToObjectiveC()();
            objc_msgSend(v41, "setFirstLaunchAfterBootDoneForKey:", v42);

            return;
          }
          v43 = _stringCompareWithSmolCheck(_:_:expecting:)(v62, v22, v16, v25, 0);
          swift_bridgeObjectRelease(v22);
          if (((v43 | v23) & 1) != 0)
            goto LABEL_25;
          goto LABEL_27;
        }
      }
      if (v23)
        goto LABEL_25;
LABEL_27:
      sub_10006C25C(0, (unint64_t *)&qword_1003461A0, OS_dispatch_queue_ptr);
      v44 = v25;
      v46 = v65;
      v45 = v66;
      v47 = v58;
      (*(void (**)(char *, _QWORD, uint64_t))(v66 + 104))(v65, enum case for DispatchQoS.QoSClass.default(_:), v58);
      v48 = (void *)static OS_dispatch_queue.global(qos:)(v46);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v47);
      v49 = (_QWORD *)swift_allocObject(&unk_10030EC68, 48, 7);
      v50 = v64;
      v49[2] = v64;
      v49[3] = v16;
      v49[4] = v44;
      v49[5] = v50;
      aBlock[4] = (uint64_t)sub_1002094B8;
      v70 = v49;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_100071C98;
      aBlock[3] = (uint64_t)&unk_10030EC80;
      v51 = _Block_copy(aBlock);
      static DispatchQoS.unspecified.getter(v51);
      v68 = _swiftEmptyArrayStorage;
      v52 = sub_100099850();
      v53 = v8;
      v54 = sub_100063D3C((uint64_t *)&unk_100346200);
      v55 = sub_10007EF60((unint64_t *)&qword_100344A30, (uint64_t *)&unk_100346200, (uint64_t)&protocol conformance descriptor for [A]);
      dispatch thunk of SetAlgebra.init<A>(_:)(&v68, v54, v55, v0, v52);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v53, v3, v51);
      _Block_release(v51);

      (*(void (**)(char *, uint64_t))(v63 + 8))(v3, v0);
      (*(void (**)(char *, uint64_t))(v59 + 8))(v53, v60);
      swift_release(v70);
      return;
    }
    if (qword_1003447E8 != -1)
      swift_once(&qword_1003447E8, sub_1002091F4);
    v37 = type metadata accessor for Logger(0);
    v38 = sub_10009673C(v37, (uint64_t)qword_10034AE48);
    v67 = Logger.logObject.getter(v38);
    v39 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v67, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v40 = 0;
      _os_log_impl((void *)&_mh_execute_header, v67, v39, "MG buildVersion not available?", v40, 2u);
      swift_slowDealloc(v40, -1, -1);
    }

  }
  else
  {
    __break(1u);
  }
}

void sub_100208CC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  _QWORD *v14;
  uint64_t v15;
  NSString v16;
  _QWORD *v17;
  void *v18;
  _QWORD *v19;
  id v20;
  _QWORD aBlock[5];
  _QWORD *v22;

  v8 = type metadata accessor for DispatchQoS.QoSClass(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)aBlock - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006C25C(0, (unint64_t *)&qword_1003461A0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v12, enum case for DispatchQoS.QoSClass.default(_:), v8);
  v13 = (void *)static OS_dispatch_queue.global(qos:)(v12);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  v14 = (_QWORD *)swift_allocObject(&unk_10030ECB8, 48, 7);
  v14[2] = a1;
  v14[3] = a2;
  v14[4] = a3;
  v14[5] = a4;
  v15 = objc_opt_self(SecureElementManager);
  swift_bridgeObjectRetain(a3);
  v16 = String._bridgeToObjectiveC()();
  v17 = (_QWORD *)swift_allocObject(&unk_10030ECE0, 40, 7);
  v17[2] = v13;
  v17[3] = sub_100209630;
  v17[4] = v14;
  aBlock[4] = sub_100130D58;
  v22 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100128598;
  aBlock[3] = &unk_10030ECF8;
  v18 = _Block_copy(aBlock);
  v19 = v22;
  v20 = v13;
  swift_retain(v14);
  swift_release(v19);
  sub_100051680(v15, v16, v18);
  _Block_release(v18);

  swift_release(v14);
}

void sub_100208EA0(void *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const char *v8;
  void *v9;
  NSString v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  NSObject *oslog;
  uint64_t v21;
  _QWORD v22[3];
  _BYTE v23[8];
  uint64_t v24;

  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_1003447E8 != -1)
      swift_once(&qword_1003447E8, sub_1002091F4);
    v11 = type metadata accessor for Logger(0);
    sub_10009673C(v11, (uint64_t)qword_10034AE48);
    swift_errorRetain(a1);
    v12 = swift_errorRetain(a1);
    oslog = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.error.getter(oslog, v13);
    if (os_log_type_enabled(oslog, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v16 = swift_slowAlloc(32, -1);
      v24 = v16;
      *(_DWORD *)v15 = 136315138;
      swift_getErrorValue(a1, v23, v22);
      v17 = Error.localizedDescription.getter(v22[1], v22[2]);
      v19 = v18;
      v21 = sub_1001C56EC(v17, v18, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, v22, v15 + 4, v15 + 12);
      swift_bridgeObjectRelease(v19);
      sub_100130DA4(a1, 1);
      sub_100130DA4(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v14, "Failed to get SE %s", v15, 0xCu);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);

      sub_100130DA4(a1, 1);
    }
    else
    {
      sub_100130DA4(a1, 1);
      sub_100130DA4(a1, 1);
      swift_errorRelease(a1);

    }
  }
  else
  {
    sub_100130D98(a1, 0);
    sub_100209A74(a1, v8);
    swift_bridgeObjectRetain(a5);
    sub_1002094DC(a4, a5);
    swift_bridgeObjectRelease(a5);
    v9 = (void *)objc_opt_self(SESBootUUID);
    v10 = String._bridgeToObjectiveC()();
    objc_msgSend(v9, "setFirstLaunchAfterBootDoneForKey:", v10);

    sub_100130DA4(a1, 0);
  }
}

void sub_10020914C()
{
  xmmword_10034AE30 = 0uLL;
  *(_QWORD *)&xmmword_10034AE10 = 0xD000000000000014;
  *((_QWORD *)&xmmword_10034AE10 + 1) = 0x80000001002BA5B0;
  qword_10034AE20 = 0xD000000000000020;
  unk_10034AE28 = 0x80000001002C3A50;
  byte_10034AE40 = 0;
}

uint64_t type metadata accessor for SecureElementVersionTTR()
{
  return objc_opt_self(_TtC10seserviced23SecureElementVersionTTR);
}

uint64_t sub_1002091F4()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Logger(0);
  sub_1000980F8(v0, qword_10034AE48);
  sub_10009673C(v0, (uint64_t)qword_10034AE48);
  v1 = String.init(cString:)(SESLoggingSubsystem);
  return Logger.init(subsystem:category:)(v1);
}

BOOL sub_100209268()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  int v11;
  _BYTE v12[24];
  int v13;
  int v14;

  v11 = 1;
  if (MSURetrievePreviousUpdateState(&v11))
  {
    if (qword_1003447E8 != -1)
      swift_once(&qword_1003447E8, sub_1002091F4);
    v0 = type metadata accessor for Logger(0);
    v1 = sub_10009673C(v0, (uint64_t)qword_10034AE48);
    v2 = Logger.logObject.getter(v1);
    v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v4 = 67109120;
      swift_beginAccess(&v11, v12, 0, 0);
      v13 = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v4 + 4, v4 + 8);
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "MSURetrievePreviousUpdateState %u", v4, 8u);
      swift_slowDealloc(v4, -1, -1);
    }

    swift_beginAccess(&v11, &v13, 0, 0);
    return v11 == 0;
  }
  else
  {
    if (qword_1003447E8 != -1)
      swift_once(&qword_1003447E8, sub_1002091F4);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_10009673C(v6, (uint64_t)qword_10034AE48);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to MSURetrievePreviousUpdateState", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

    return 0;
  }
}

uint64_t sub_100209494()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

void sub_1002094B8()
{
  uint64_t *v0;

  sub_100208CC8(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_1002094C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1002094D4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_1002094DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  id v6;
  NSString v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  NSString v11;
  _QWORD v12[2];
  _BYTE v13[24];

  if (qword_1003447E0 != -1)
    swift_once(&qword_1003447E0, sub_10020914C);
  swift_beginAccess(&xmmword_10034AE10, v13, 33, 0);
  if (byte_10034AE40 == 1 && !SESInternalVariant(v4))
    goto LABEL_7;
  v5 = *((_QWORD *)&xmmword_10034AE10 + 1);
  v6 = objc_allocWithZone((Class)NSUserDefaults);
  swift_bridgeObjectRetain(v5);
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v5);
  v8 = objc_msgSend(v6, "initWithSuiteName:", v7);

  if (v8)
  {
    v12[0] = a1;
    v12[1] = a2;
    swift_bridgeObjectRetain(a2);
    v9 = sub_100063D3C((uint64_t *)&unk_100347DD0);
    v10 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v12, v9);
    v11 = String._bridgeToObjectiveC()();
    objc_msgSend(v8, "setValue:forKey:", v10, v11);

    swift_unknownObjectRelease(v10);
LABEL_7:
    swift_endAccess(v13);
    return;
  }
  __break(1u);
}

void sub_100209630(void *a1, char a2)
{
  uint64_t *v2;

  sub_100208EA0(a1, a2 & 1, v2[2], v2[3], v2[4]);
}

uint64_t sub_100209640()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_10020966C(void *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  Class isa;
  id v9;
  id v10;
  id v11;
  Class v12;
  id v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *log;
  void *v38;
  unint64_t v39;
  uint64_t v40;
  _BYTE v41[16];
  id v42;

  v2 = sub_10007C66C((uint64_t)&off_100306490);
  v4 = v3;
  v5 = sub_10007C66C((uint64_t)&off_1003064B8);
  v7 = v6;
  isa = Data._bridgeToObjectiveC()().super.isa;
  v42 = 0;
  v9 = sub_10004FFE4(a1, isa, 1, &v42);

  v10 = v42;
  if (v9)
  {
    v11 = v42;

    v12 = Data._bridgeToObjectiveC()().super.isa;
    v42 = 0;
    v13 = objc_msgSend(a1, "transceive:error:", v12, &v42);

    v14 = v42;
    if (v13)
    {
      v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v17 = v16;

      if (qword_1003447E8 != -1)
        swift_once(&qword_1003447E8, sub_1002091F4);
      v18 = type metadata accessor for Logger(0);
      sub_10009673C(v18, (uint64_t)qword_10034AE48);
      sub_100063C8C(v15, v17);
      v19 = sub_100063C8C(v15, v17);
      v20 = Logger.logObject.getter(v19);
      v22 = static os_log_type_t.error.getter(v20, v21);
      if (os_log_type_enabled(v20, v22))
      {
        log = v20;
        v23 = (uint8_t *)swift_slowAlloc(12, -1);
        v38 = (void *)swift_slowAlloc(32, -1);
        v42 = v38;
        *(_DWORD *)v23 = 136315138;
        sub_1001BD2CC(v15, v17);
        v25 = v24;
        v39 = v7;
        v26 = sub_100063D3C((uint64_t *)&unk_100346060);
        v27 = sub_10007EF60((unint64_t *)&qword_1003477F0, (uint64_t *)&unk_100346060, (uint64_t)&protocol conformance descriptor for [A]);
        v28 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v26, v27);
        v30 = v29;
        swift_bridgeObjectRelease(v25);
        v40 = sub_1001C56EC(v28, v30, (uint64_t *)&v42);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, v41, v23 + 4, v23 + 12);
        swift_bridgeObjectRelease(v30);
        sub_100063CD0(v15, v17);
        sub_100063CD0(v15, v17);
        _os_log_impl((void *)&_mh_execute_header, log, v22, "Dumped Slot Info : %s", v23, 0xCu);
        swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v38, -1, -1);
        swift_slowDealloc(v23, -1, -1);
        sub_100063CD0(v2, v4);
        sub_100063CD0(v5, v39);

        sub_100063CD0(v15, v17);
      }
      else
      {
        sub_100063CD0(v15, v17);
        sub_100063CD0(v15, v17);
        sub_100063CD0(v15, v17);
        sub_100063CD0(v2, v4);
        sub_100063CD0(v5, v7);

      }
    }
    else
    {
      v34 = v14;
      v35 = _convertNSErrorToError(_:)(v14);

      swift_willThrow(v36);
      sub_100063CD0(v2, v4);
      sub_100063CD0(v5, v7);
      swift_errorRelease(v35);
    }
  }
  else
  {
    v31 = v42;
    v32 = _convertNSErrorToError(_:)(v10);

    swift_willThrow(v33);
    sub_100063CD0(v2, v4);
    sub_100063CD0(v5, v7);
    swift_errorRelease(v32);
  }
}

void sub_100209A74(void *a1, const char *a2)
{
  void *v2;
  id v3;
  unsigned int v4;
  const char *v5;
  id v6;
  id v7;
  _UNKNOWN **v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  NSString v20;
  uint64_t v21;
  uint64_t inited;
  id v23;
  unint64_t v24;
  Class isa;
  uint64_t v26;
  void *v27;
  NSString v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  Class v32;
  uint64_t v33;
  id v34;
  id v35;
  NSObject *v36;
  id v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  os_log_type_t v42;
  __objc2_prop_list *v43;
  uint64_t v44;
  _QWORD *v45;
  const char *v46;
  id v47;
  id v48;
  id v49;
  uint64_t v50;
  const char *v51;
  id v52;
  id v53;
  void *v54;
  NSString v55;
  NSString v56;
  void *v57;
  void *v58;
  void *v59;
  id v60;
  uint64_t v61;
  _BYTE v62[104];
  _BYTE v63[24];
  uint64_t v64;
  _QWORD v65[2];
  _BYTE v66[111];
  _BYTE v67[9];

  v2 = a1;
  v3 = sub_10005066C(a1, a2);
  v4 = objc_msgSend(v3, "isProd");

  if (!v4)
    return;
  v6 = sub_10005066C(v2, v5);
  v7 = objc_msgSend(v6, "chipId");

  v8 = sub_10020A120((uint64_t)v7);
  if (!v8)
    return;
  v9 = v8;
  v67[0] = 0;
  v10 = objc_msgSend((id)objc_opt_self(SEUpdaterEvents), "getLoggedEvents");
  if (v10)
  {
    v11 = v10;
    v61 = sub_10006C25C(0, (unint64_t *)&qword_100344CD8, NSNumber_ptr);
    v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v11, v61);

    if ((unint64_t)v12 >> 62)
    {
      if (v12 < 0)
        v26 = v12;
      else
        v26 = v12 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v12);
      v13 = _CocoaArrayWrapper.endIndex.getter(v26);
      swift_bridgeObjectRelease(v12);
      if (v13)
        goto LABEL_6;
    }
    else
    {
      v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v13)
      {
LABEL_6:
        v57 = v2;
        v58 = v9;
        v60 = (id)objc_opt_self(CALogger);
        if (v13 < 1)
        {
          __break(1u);
          return;
        }
        v14 = 0;
        v15 = v12 & 0xC000000000000001;
        v16 = v12;
        v17 = v13;
        do
        {
          if (v15)
            v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v14, v12);
          else
            v18 = *(id *)(v12 + 8 * v14 + 32);
          v19 = v18;
          ++v14;
          v20 = String._bridgeToObjectiveC()();
          v21 = sub_100063D3C(&qword_1003460E0);
          inited = swift_initStackObject(v21, v62);
          *(_OWORD *)(inited + 16) = xmmword_1002888E0;
          v64 = 0x617453746E657645;
          v65[0] = 0xEB00000000737574;
          AnyHashable.init<A>(_:)(&v64, &type metadata for String, &protocol witness table for String);
          *(_QWORD *)(inited + 96) = v61;
          *(_QWORD *)(inited + 72) = v19;
          v23 = v19;
          v24 = sub_10017C368(inited);
          isa = Dictionary._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v24);
          objc_msgSend(v60, "postCAEventFor:eventInput:", v20, isa);

          v67[0] = 1;
          v12 = v16;
        }
        while (v17 != v14);
        swift_bridgeObjectRelease(v16);
        v2 = v57;
        v9 = v58;
        goto LABEL_19;
      }
    }
    swift_bridgeObjectRelease(v12);
  }
  v27 = (void *)objc_opt_self(CALogger);
  v28 = String._bridgeToObjectiveC()();
  v29 = sub_100063D3C(&qword_1003460E0);
  v30 = swift_initStackObject(v29, v66);
  *(_OWORD *)(v30 + 16) = xmmword_1002888E0;
  v64 = 0x617453746E657645;
  v65[0] = 0xEB00000000737574;
  AnyHashable.init<A>(_:)(&v64, &type metadata for String, &protocol witness table for String);
  *(_QWORD *)(v30 + 96) = &type metadata for Int;
  *(_QWORD *)(v30 + 72) = 0;
  v31 = sub_10017C368(v30);
  v32 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v31);
  objc_msgSend(v27, "postCAEventFor:eventInput:", v28, v32);

LABEL_19:
  if (qword_1003447E8 != -1)
    swift_once(&qword_1003447E8, sub_1002091F4);
  v33 = type metadata accessor for Logger(0);
  sub_10009673C(v33, (uint64_t)qword_10034AE48);
  v34 = v2;
  v35 = v9;
  v36 = v34;
  v37 = v35;
  v38 = Logger.logObject.getter(v37);
  v42 = static os_log_type_t.info.getter(v38, v39, v40, v41);
  v43 = &KmlKeyManagementSession__properties;
  if (os_log_type_enabled(v38, v42))
  {
    v44 = swift_slowAlloc(28, -1);
    v59 = v9;
    v45 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v44 = 134218498;
    v47 = sub_10005066C(v36, v46);
    v48 = objc_msgSend(v47, "csn");

    v64 = (uint64_t)v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, v65, v44 + 4, v44 + 12);

    *(_WORD *)(v44 + 12) = 2112;
    v64 = (uint64_t)v37;
    v49 = v37;
    v43 = &KmlKeyManagementSession__properties;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, v65, v44 + 14, v44 + 22);
    *v45 = v59;

    *(_WORD *)(v44 + 22) = 1024;
    swift_beginAccess(v67, v63, 0, 0);
    LODWORD(v64) = v67[0];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, (char *)&v64 + 4, v44 + 24, v44 + 28);
    _os_log_impl((void *)&_mh_execute_header, v38, v42, "Got SE CSN %lu expected CSN %@, eventLogged: %{BOOL}d", (uint8_t *)v44, 0x1Cu);
    v50 = sub_100063D3C((uint64_t *)&unk_100346090);
    swift_arrayDestroy(v45, 1, v50);
    swift_slowDealloc(v45, -1, -1);
    swift_slowDealloc(v44, -1, -1);
  }
  else
  {

    v38 = v36;
  }

  v52 = sub_10005066C(v36, v51);
  v53 = objc_msgSend(v52, *(SEL *)&v43[481]);

  if (v53 < objc_msgSend(v37, "unsignedIntegerValue") || (swift_beginAccess(v67, &v64, 0, 0), v67[0] == 1))
  {
    sub_10020966C(v36);
    v54 = (void *)objc_opt_self(SESTapToRadar);
    v55 = String._bridgeToObjectiveC()();
    v56 = String._bridgeToObjectiveC()();
    objc_msgSend(v54, "requestTapToRadar:client:fullArchive:", v55, v56, 1);

  }
}

_UNKNOWN **sub_10020A120(uint64_t a1)
{
  _UNKNOWN **v1;
  _UNKNOWN **v2;

  v1 = 0;
  if (a1 <= 99)
  {
    if (a1 <= 54)
    {
      if (a1 == 44)
      {
        v1 = &off_100322F68;
        goto LABEL_18;
      }
      if (a1 != 54)
        return v1;
      goto LABEL_16;
    }
    if (a1 == 55)
    {
LABEL_16:
      v1 = &off_100322F80;
      goto LABEL_18;
    }
    if (a1 == 56)
    {
      v1 = &off_100322F98;
      goto LABEL_18;
    }
    return v1;
  }
  if (a1 > 199)
  {
    if (a1 != 200 && a1 != 210)
      return v1;
LABEL_15:
    v1 = &off_100322FB0;
    goto LABEL_18;
  }
  if (a1 == 100)
    goto LABEL_15;
  if (a1 == 115)
  {
    v1 = &off_100322FC8;
LABEL_18:
    v2 = v1;
  }
  return v1;
}

id Item.__allocating_init(entity:insertInto:)(void *a1, void *a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_msgSend(objc_allocWithZone(v2), "initWithEntity:insertIntoManagedObjectContext:", a1, a2);

  return v5;
}

id Item.init(entity:insertInto:)(void *a1, void *a2)
{
  void *v2;
  id v5;
  objc_super v7;

  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for Item();
  v5 = objc_msgSendSuper2(&v7, "initWithEntity:insertIntoManagedObjectContext:", a1, a2);

  return v5;
}

uint64_t type metadata accessor for Item()
{
  return objc_opt_self(Item);
}

id Item.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for Item();
  return objc_msgSendSuper2(&v2, "dealloc");
}

id static Item.fetchRequest()()
{
  id v0;
  NSString v1;
  id v2;

  v0 = objc_allocWithZone((Class)NSFetchRequest);
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "initWithEntityName:", v1);

  return v2;
}

void *sub_10020A398()
{
  return &protocol witness table for ObjectIdentifier;
}

uint64_t sub_10020A3A4@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for Item();
  result = Identifiable<>.id.getter(v4, a1);
  *a2 = result;
  return result;
}

void *acm_mem_alloc_data(size_t size)
{
  void *result;

  result = malloc_type_calloc(1uLL, size, 0xCB62F0E9uLL);
  if (result)
    qword_100354828 += size;
  return result;
}

void acm_mem_free_data(void *a1, rsize_t __n)
{
  uint64_t v4;

  if (a1)
  {
    memset_s(a1, __n, 0, __n);
    free(a1);
    v4 = qword_100354828 - __n;
    if (qword_100354828 < __n)
      v4 = 0;
    qword_100354828 = v4;
  }
}

void *acm_mem_alloc(size_t size)
{
  void *result;

  result = malloc_type_calloc(1uLL, size, 0xDB9956F0uLL);
  if (result)
    qword_100354830 += size;
  return result;
}

void acm_mem_free(void *a1, rsize_t __n)
{
  uint64_t v4;

  if (a1)
  {
    memset_s(a1, __n, 0, __n);
    free(a1);
    v4 = qword_100354830 - __n;
    if (qword_100354830 < __n)
      v4 = 0;
    qword_100354830 = v4;
  }
}

const char *acm_mem_alloc_info(const char *result, const void *a2, uint64_t a3, const char *a4, int a5, const char *a6)
{
  const char *v6;
  const char *v7;
  const char *v8;

  if (a2)
    qword_100354820 += a3;
  if (gACMLoggingLevel <= 0x1Eu)
  {
    v6 = "NULL";
    if (result)
      v7 = result;
    else
      v7 = "NULL";
    if (a4)
      v8 = a4;
    else
      v8 = "NULL";
    if (a6)
      v6 = a6;
    return (const char *)printf("%s: %s: mem: type=%s ptr=%p size=%u (total=%u raw=%u data=%u types=%u) %s:%d (%s).\n", "ACM", "acm_mem_alloc_info", v7, a2, a3, qword_100354820, 0, qword_100354828, qword_100354830, v8, a5, v6);
  }
  return result;
}

const char *acm_mem_free_info(const char *result, const void *a2, unint64_t a3, const char *a4, int a5, const char *a6)
{
  uint64_t v6;
  const char *v7;
  const char *v8;
  const char *v9;

  if (a2)
  {
    v6 = qword_100354820 - a3;
    if (qword_100354820 < a3)
      v6 = 0;
    qword_100354820 = v6;
  }
  if (gACMLoggingLevel <= 0x1Eu)
  {
    v7 = "NULL";
    if (result)
      v8 = result;
    else
      v8 = "NULL";
    if (a4)
      v9 = a4;
    else
      v9 = "NULL";
    if (a6)
      v7 = a6;
    return (const char *)printf("%s: %s: mem: type=%s ptr=%p size=%u (total=%u raw=%u data=%u types=%u) %s:%d (%s).\n", "ACM", "acm_mem_free_info", v8, a2, a3, qword_100354820, 0, qword_100354828, qword_100354830, v9, a5, v7);
  }
  return result;
}

uint64_t ACMContextCreate(uint64_t *a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  uint64_t v12;

  if (byte_10034AEB1 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v8 = "ACMLib";
    v9 = 2080;
    v10 = "ACMContextCreate";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  v6 = 0;
  v2 = LibCall_ACMContextCreate((uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _BYTE *, uint64_t *))sub_10020A880, (uint64_t)&v6, a1, &byte_10034AEB1, 1);
  if ((_DWORD)v2)
  {
    sub_10020B394();
    v3 = 70;
  }
  else
  {
    v3 = 10;
    if (a1 && byte_10034AEB1 <= 0x28u)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
      {
        v4 = *a1;
        if (*a1)
          LODWORD(v4) = *(_DWORD *)(v4 + 16);
        *(_DWORD *)buf = 136315650;
        v8 = "ACMLib";
        v9 = 2080;
        v10 = "ACMContextCreate";
        v11 = 1024;
        LODWORD(v12) = v4;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: CS[%u] created.\n", buf, 0x1Cu);
      }
      v3 = 10;
    }
  }
  if (v3 >= byte_10034AEB1 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v8 = "ACMLib";
    v9 = 2080;
    v10 = "ACMContextCreate";
    v11 = 2048;
    v12 = (int)v2;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v2;
}

uint64_t sub_10020A880(uint64_t *a1, int a2, char a3, const void *a4, size_t a5, void *a6, size_t *a7)
{
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;

  if (byte_10034AEB1 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    v18 = 136315394;
    v19 = "ACMLib";
    v20 = 2080;
    v21 = "ioKitTransport";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v18, 0x16u);
  }
  if (a1)
  {
    v14 = sub_10020AE34();
    v15 = 70;
    if ((_DWORD)v14)
    {
      v16 = v14;
    }
    else
    {
      v16 = sub_10020B014(*a1, a2, a3, a4, a5, a6, a7);
      if ((_DWORD)v16)
        v15 = 70;
      else
        v15 = 10;
    }
  }
  else
  {
    v15 = 70;
    v16 = 4294967293;
  }
  if (v15 >= byte_10034AEB1 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    v18 = 136315650;
    v19 = "ACMLib";
    v20 = 2080;
    v21 = "ioKitTransport";
    v22 = 2048;
    v23 = (int)v16;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", (uint8_t *)&v18, 0x20u);
  }
  return v16;
}

uint64_t ACMContextDelete(_DWORD *a1, int a2)
{
  unsigned int v4;
  int v5;
  const char *v6;
  uint64_t v7;
  unsigned int v8;
  _DWORD *v10;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  _QWORD v16[2];

  v4 = byte_10034AEB1;
  if (byte_10034AEB1 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v12 = "ACMLib";
    v13 = 2080;
    v14 = "ACMContextDelete";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
    v4 = byte_10034AEB1;
  }
  if (a1 && v4 <= 0x28 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    v5 = a1[4];
    v6 = "deleted";
    *(_DWORD *)buf = 136315906;
    v12 = "ACMLib";
    v14 = "ACMContextDelete";
    v13 = 2080;
    if (a2)
      v6 = "destroyed";
    v15 = 1024;
    LODWORD(v16[0]) = v5;
    WORD2(v16[0]) = 2080;
    *(_QWORD *)((char *)v16 + 6) = v6;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: CS[%u] %s.\n", buf, 0x26u);
  }
  v10 = a1;
  v7 = LibCall_ACMContextDelete((void (*)(uint64_t, uint64_t, _QWORD, void *, uint64_t, _QWORD, _QWORD))sub_10020A880, (uint64_t)&v10, a1, a2);
  if ((_DWORD)v7)
    v8 = 70;
  else
    v8 = 10;
  if (v8 >= byte_10034AEB1 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v12 = "ACMLib";
    v13 = 2080;
    v14 = "ACMContextDelete";
    v15 = 2048;
    v16[0] = (int)v7;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v7;
}

void ACMContextGetExternalForm(const void *a1, uint64_t a2)
{
  int v4;
  const char *v5;
  __int16 v6;
  const char *v7;

  if (byte_10034AEB1 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    v4 = 136315394;
    v5 = "ACMLib";
    v6 = 2080;
    v7 = "ACMContextGetExternalForm";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v4, 0x16u);
  }
  if (!a1
    || !a2
    || sub_10020AE34()
    || sub_10020B014((uint64_t)a1, 19, 0, a1, 0x10uLL, 0, 0))
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(a2 + 16))(a2, 0, 0);
  }
  else
  {
    (*(void (**)(uint64_t, const void *, uint64_t))(a2 + 16))(a2, a1, 16);
  }
  if (byte_10034AEB1 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    v4 = 136315394;
    v5 = "ACMLib";
    v6 = 2080;
    v7 = "ACMContextGetExternalForm";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning.\n", (uint8_t *)&v4, 0x16u);
  }
}

uint64_t sub_10020AE34()
{
  uint64_t v0;
  const __CFDictionary *v1;
  io_service_t MatchingService;
  io_object_t v3;
  unsigned int v4;
  int v6;
  const char *v7;
  __int16 v8;
  const char *v9;
  __int16 v10;
  uint64_t v11;

  if (byte_10034AEB1 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    v6 = 136315394;
    v7 = "ACMLib";
    v8 = 2080;
    v9 = "init";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v6, 0x16u);
  }
  if ((byte_10035483C & 1) != 0)
  {
    v0 = 0;
  }
  else
  {
    v1 = IOServiceMatching("AppleCredentialManager");
    MatchingService = IOServiceGetMatchingService(kIOMasterPortDefault, v1);
    if (!MatchingService)
    {
      v4 = 70;
      v0 = 4294967291;
      goto LABEL_10;
    }
    v3 = MatchingService;
    v0 = IOServiceOpen(MatchingService, mach_task_self_, 0, (io_connect_t *)&dword_100354838);
    if ((_DWORD)v0)
    {
      v4 = 70;
      goto LABEL_10;
    }
    IOObjectRelease(v3);
    byte_10035483C = 1;
  }
  v4 = 10;
LABEL_10:
  if (v4 >= byte_10034AEB1 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    v6 = 136315650;
    v7 = "ACMLib";
    v8 = 2080;
    v9 = "init";
    v10 = 2048;
    v11 = (int)v0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", (uint8_t *)&v6, 0x20u);
  }
  return v0;
}

uint64_t sub_10020B014(uint64_t a1, int a2, char a3, const void *a4, size_t a5, void *a6, size_t *a7)
{
  _BYTE *v14;
  void *v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  unsigned int v20;
  size_t v22;
  size_t inputStructCnt;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  _BYTE v29[10];
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;

  if (byte_10034AEB1 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v25 = "ACMLib";
    v26 = 2080;
    v27 = "performCommand";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  inputStructCnt = 0;
  v14 = LibCall_BuildCommand(a2, 0, a3, a4, a5, &inputStructCnt);
  if (v14)
  {
    v15 = v14;
    if (!a6 && a7)
    {
      v18 = 4294967293;
    }
    else
    {
      if (a7)
        v16 = *a7;
      else
        v16 = 0;
      v22 = v16;
      v17 = IOConnectCallStructMethod(dword_100354838, 0, v14, inputStructCnt, a6, &v22);
      v18 = v17;
      if (a1)
        LODWORD(a1) = *(_DWORD *)(a1 + 16);
      if ((_DWORD)v17)
      {
        if (byte_10034AEB1 <= 0x46u
          && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136316418;
          v25 = "ACMLib";
          v26 = 2080;
          v27 = "performCommand";
          v28 = 1024;
          *(_DWORD *)v29 = a2;
          *(_WORD *)&v29[4] = 1024;
          *(_DWORD *)&v29[6] = a1;
          v30 = 1024;
          v31 = v18;
          v32 = 1024;
          v33 = v18;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: cmd(%u) on CS[%u] -> err 0x%x (%d).\n", buf, 0x2Eu);
        }
      }
      else
      {
        if (byte_10034AEB1 <= 0x28u
          && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315906;
          v25 = "ACMLib";
          v26 = 2080;
          v27 = "performCommand";
          v28 = 1024;
          *(_DWORD *)v29 = a2;
          *(_WORD *)&v29[4] = 1024;
          *(_DWORD *)&v29[6] = a1;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: cmd(%u) on CS[%u] -> ok.\n", buf, 0x22u);
        }
        v18 = 0;
        if (a7)
          *a7 = v22;
      }
    }
    v19 = inputStructCnt;
    acm_mem_free_info("<data>", v15, inputStructCnt, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 134, "performCommand");
    acm_mem_free_data(v15, v19);
    if ((_DWORD)v18)
      v20 = 70;
    else
      v20 = 10;
  }
  else
  {
    v20 = 70;
    v18 = 4294967291;
  }
  if (v20 >= byte_10034AEB1 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v25 = "ACMLib";
    v26 = 2080;
    v27 = "performCommand";
    v28 = 2048;
    *(_QWORD *)v29 = (int)v18;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v18;
}

void sub_10020B394()
{
  unsigned __int8 v0;
  unsigned int v1;
  uint32_t outputCnt;
  uint64_t output;
  uint8_t buf[4];
  const char *v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;

  if (byte_10034AEB1 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v5 = "ACMLib";
    v6 = 2080;
    v7 = "updateLogLevelFromKext";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  output = 0;
  outputCnt = 1;
  if (IOConnectCallScalarMethod(dword_100354838, 2u, 0, 0, &output, &outputCnt))
    goto LABEL_8;
  v0 = output;
  v1 = output;
  byte_10034AEB1 = output;
  if (output <= 0x1EuLL && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v5 = "ACMLib";
    v6 = 2080;
    v7 = "updateLogLevelFromKext";
    v8 = 1024;
    v9 = v0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: log level set to %d.\n", buf, 0x1Cu);
LABEL_8:
    v1 = byte_10034AEB1;
  }
  if (v1 <= 0xA && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v5 = "ACMLib";
    v6 = 2080;
    v7 = "updateLogLevelFromKext";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning.\n", buf, 0x16u);
  }
}

_BYTE *LibCall_BuildCommand(char a1, char a2, char a3, const void *a4, size_t a5, _QWORD *a6)
{
  _BYTE *v12;
  BOOL v13;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_BuildCommand");
  v12 = 0;
  if (a5)
    v13 = a4 == 0;
  else
    v13 = 0;
  if (!v13 && a6)
  {
    if (a5 >= 0xFFFFFFFFFFFFFFF8)
    {
      v12 = 0;
    }
    else
    {
      v12 = acm_mem_alloc_data(a5 + 8);
      acm_mem_alloc_info("<data>", v12, a5 + 8, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 22, "LibCall_BuildCommand");
      if (v12)
      {
        *a6 = a5 + 8;
        *(_DWORD *)v12 = 1396920900;
        v12[4] = a1;
        v12[5] = a2;
        v12[6] = a3;
        if (a5)
          memcpy(v12 + 8, a4, a5);
      }
    }
  }
  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: returning.\n", "ACM", "LibCall_BuildCommand");
  return v12;
}

uint64_t LibCall_ACMContextCreate(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _BYTE *, uint64_t *), uint64_t a2, _QWORD *a3, _BYTE *a4, int a5)
{
  unsigned int v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  uint64_t v18;
  _BYTE v19[21];

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextCreate");
  v10 = 70;
  v11 = 4294967293;
  if (!a1 || !a3)
    goto LABEL_25;
  v12 = acm_mem_alloc(0x14uLL);
  acm_mem_alloc_info("ACMHandleWithPayload", v12, 20, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 50, "LibCall_ACMContextCreate");
  if (!v12)
  {
    v10 = 70;
    v11 = 4294967292;
    goto LABEL_25;
  }
  memset(v19, 0, sizeof(v19));
  if (a5)
  {
    v18 = 21;
    v13 = a1(a2, 36, 0, 0, 0, v19, &v18);
    if (!(_DWORD)v13)
    {
      if (v18 != 21)
      {
        v11 = 4294967291;
        goto LABEL_23;
      }
      v11 = 0;
      goto LABEL_20;
    }
    v11 = v13;
    if ((_DWORD)v13 != -3)
    {
LABEL_23:
      acm_mem_free_info("ACMHandleWithPayload", v12, 0x14uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 89, "LibCall_ACMContextCreate");
      acm_mem_free(v12, 0x14uLL);
      v10 = 70;
      goto LABEL_25;
    }
  }
  v18 = 17;
  v14 = a1(a2, 1, 0, 0, 0, v19, &v18);
  if (v18 == 17)
    v15 = 0;
  else
    v15 = -5;
  if (v14)
    v11 = v14;
  else
    v11 = v15;
  if (!v14 && v18 == 17)
  {
LABEL_20:
    v16 = *(_DWORD *)&v19[17];
    *(_OWORD *)v12 = *(_OWORD *)v19;
    v12[4] = v16;
    *a3 = v12;
    if (a4)
      *a4 = v19[16];
  }
  if ((_DWORD)v11)
    goto LABEL_23;
  v10 = 10;
LABEL_25:
  if (v10 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextCreate", (int)v11);
  return v11;
}

uint64_t LibCall_ACMContextDelete(void (*a1)(uint64_t, uint64_t, _QWORD, void *, uint64_t, _QWORD, _QWORD), uint64_t a2, void *a3, int a4)
{
  uint64_t v8;
  unsigned int v9;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextDelete");
  if (a1 && a3)
  {
    if (a4)
      a1(a2, 2, 0, a3, 16, 0, 0);
    goto LABEL_7;
  }
  if (a3)
  {
LABEL_7:
    acm_mem_free_info("ACMHandleWithPayload", a3, 0x14uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 172, "LibCall_ACMContextDelete");
    acm_mem_free(a3, 0x14uLL);
    v8 = 0;
    v9 = 10;
    goto LABEL_8;
  }
  v9 = 70;
  v8 = 4294967293;
LABEL_8:
  if (v9 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextDelete", (int)v8);
  return v8;
}

uint64_t DERDecodeItem(uint64_t a1, unint64_t *a2)
{
  return DERDecodeItemPartialBufferGetLength(a1, a2, 0);
}

uint64_t DERDecodeItemPartialBufferGetLength(uint64_t result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  unsigned __int8 *v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  BOOL v10;
  unint64_t v11;
  char *v12;
  unsigned __int8 v13;
  _BYTE *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  BOOL v25;
  char v26;
  unint64_t v27;
  _BYTE *v28;

  v3 = *(_QWORD *)(result + 8);
  if (v3 < 2)
    return 3;
  v4 = *(_BYTE **)result;
  if (*(_QWORD *)result == -1)
    goto LABEL_68;
  v5 = &v4[v3];
  v6 = v4 + 1;
  v7 = v3 - 1;
  v8 = *v4 & 0x1F;
  if ((*v4 & 0x1F) != 0x1F)
  {
    v12 = v4 + 1;
LABEL_20:
    *a2 = v8 | ((unint64_t)(*v4 & 0xE0) << 56);
    if (v12 != (char *)-1)
    {
      if (v12 >= v5 || v12 < v4)
        goto LABEL_69;
      v14 = v12 + 1;
      v15 = *v12;
      v16 = v7 - 1;
      if ((*v12 & 0x80000000) == 0)
      {
        if (a3 || v16 >= v15)
        {
          if (v16 >= v15)
            v17 = *v12;
          else
            v17 = v7 - 1;
          v10 = v5 >= v14;
          v18 = v5 - v14;
          if (v10 && v4 <= v14 && v17 <= v18)
          {
            a2[1] = (unint64_t)v14;
            a2[2] = v17;
            if (!a3)
              return 0;
LABEL_34:
            result = 0;
            *a3 = v15;
            return result;
          }
LABEL_69:
          __break(0x5519u);
LABEL_70:
          __break(0x5515u);
          return result;
        }
        return 3;
      }
      v19 = v15 & 0x7F;
      if ((v15 & 0x7F) > 8)
        return 3;
      if ((v15 & 0x7F) == 0 || v16 < v19)
        return 3;
      if (v14 >= v5 || v14 < v4)
        goto LABEL_69;
      if (!*v14)
        return 3;
      v15 = 0;
      v21 = (v19 - 1);
      v22 = v7 - v21 - 2;
      v23 = (unint64_t)&v12[v21 + 2];
      while (v14 != (_BYTE *)-1)
      {
        if (v14 >= v5)
          goto LABEL_69;
        v10 = v16-- != 0;
        if (!v10)
          goto LABEL_70;
        v24 = *v14++;
        v15 = (v15 << 8) | v24;
        LODWORD(v19) = v19 - 1;
        if (!(_DWORD)v19)
        {
          if (a3)
            v25 = 0;
          else
            v25 = v15 > v22;
          v26 = v25;
          result = 3;
          if (v15 < 0x80 || (v26 & 1) != 0)
            return result;
          if (v15 >= v22)
            v27 = v22;
          else
            v27 = v15;
          v10 = (unint64_t)v5 >= v23;
          v28 = &v5[-v23];
          if (!v10 || (unint64_t)v4 > v23 || v27 > (unint64_t)v28)
            goto LABEL_69;
          a2[1] = v23;
          a2[2] = v27;
          if (a3)
            goto LABEL_34;
          return 0;
        }
      }
    }
LABEL_68:
    __break(0x5513u);
    goto LABEL_69;
  }
  v9 = *v6;
  v10 = v9 != 128 && v9 >= 0x1F;
  if (!v10)
    return 3;
  v8 = 0;
  result = 3;
  while (v7 >= 2)
  {
    v11 = v8;
    if (v8 >> 57)
      break;
    if (v6 == (unsigned __int8 *)-1)
      goto LABEL_68;
    if (v6 >= v5 || v6 < v4)
      goto LABEL_69;
    v12 = (char *)(v6 + 1);
    --v7;
    v13 = *v6;
    v8 = *v6++ & 0x7F | (v8 << 7);
    if ((v13 & 0x80) == 0)
    {
      if (v11 >> 54)
        return 3;
      goto LABEL_20;
    }
  }
  return result;
}

uint64_t DERParseBitString(uint64_t result, unint64_t *a2, _BYTE *a3)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unint64_t v10;

  *a3 = 0;
  *a2 = 0;
  a2[1] = 0;
  if (!*(_QWORD *)(result + 8))
    return 3;
  v3 = **(unsigned __int8 **)result;
  *a3 = v3;
  v4 = *(_QWORD *)(result + 8);
  if (v4 != 1)
  {
    if (v3 <= 7)
    {
      v5 = v4 - 1;
      if (!v4)
      {
LABEL_20:
        __break(0x5515u);
        goto LABEL_21;
      }
      v6 = *(_QWORD *)result;
      v7 = *(_QWORD *)result + v4;
      v8 = (unsigned __int8 *)(*(_QWORD *)result + v5);
      if ((unint64_t)v8 >= v7 || (unint64_t)v8 < v6)
      {
LABEL_19:
        __break(0x5519u);
        goto LABEL_20;
      }
      if (((0xFFu >> (8 - v3)) & *v8) == 0)
      {
        if (v6 == -1)
        {
LABEL_21:
          __break(0x5513u);
          return result;
        }
        v10 = v6 + 1;
        if (v6 + 1 <= v7 && v6 <= v10)
        {
          result = 0;
          *a2 = v10;
          a2[1] = v5;
          return result;
        }
        goto LABEL_19;
      }
    }
    return 3;
  }
  if (v3)
    return 3;
  else
    return 0;
}

uint64_t DERDecodeSeqNext(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD v10[2];

  v10[0] = 0;
  v2 = *a1;
  v3 = a1[1];
  if (*a1 >= v3)
    return 1;
  v10[0] = *a1;
  v10[1] = v3 - v2;
  result = DERDecodeItemPartialBufferGetLength((uint64_t)v10, a2, 0);
  if (!(_DWORD)result)
  {
    v8 = a2[1];
    v7 = a2[2];
    if (!__CFADD__(v8, v7))
    {
      v9 = v8 + v7;
      if (v9 <= a1[1] && *a1 <= v9)
      {
        result = 0;
        *a1 = v9;
        return result;
      }
      __break(0x5519u);
    }
    __break(0x5513u);
  }
  return result;
}

uint64_t DERParseSequenceToObject(uint64_t a1, unsigned int a2, uint64_t a3, unint64_t a4, unint64_t a5, size_t a6)
{
  uint64_t result;
  unint64_t v12[3];

  memset(v12, 170, sizeof(v12));
  result = DERDecodeItemPartialBufferGetLength(a1, v12, 0);
  if (!(_DWORD)result)
  {
    if (v12[0] == 0x2000000000000010)
      return DERParseSequenceContentToObject(&v12[1], a2, a3, a4, a5, a6);
    else
      return 2;
  }
  return result;
}

uint64_t DERParseSequenceContentToObject(unint64_t *a1, unsigned int a2, uint64_t a3, unint64_t a4, unint64_t a5, size_t a6)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int16 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;
  unsigned __int16 v17;
  __int16 v18;
  unint64_t v19;
  char *v21;
  uint64_t v23;
  unint64_t v24;
  __int16 *v25;
  unint64_t v26;
  __int16 v27;
  unint64_t v28;
  char *v29;
  unint64_t v31[3];
  unint64_t v32;
  unint64_t v33;

  v32 = 0;
  if (a6)
  {
    if (a6 > a5)
      goto LABEL_59;
    bzero((void *)a4, a6);
  }
  v10 = *a1;
  v11 = a1[1];
  if (__CFADD__(*a1, v11))
    goto LABEL_58;
  v12 = v10 + v11;
  if (v10 > v12)
LABEL_59:
    __break(0x5519u);
  v32 = *a1;
  v33 = v12;
  if (a2)
  {
    v13 = 0;
    v29 = (char *)(a4 + a5);
    while (1)
    {
      memset(v31, 170, sizeof(v31));
      v15 = v32;
      v14 = v33;
      result = DERDecodeSeqNext(&v32, v31);
      if ((_DWORD)result)
        break;
      if (a2 <= v13)
        return 2;
      while (1)
      {
        if (24 * (__int16)v13 > (unint64_t)~a3)
          goto LABEL_58;
        v17 = v13;
        v18 = *(_WORD *)(a3 + 24 * v13 + 16);
        if ((v18 & 2) != 0 || v31[0] == *(_QWORD *)(a3 + 24 * v13 + 8))
          break;
        result = 2;
        if ((v18 & 1) != 0)
        {
          ++v13;
          if (a2 > (unsigned __int16)(v17 + 1))
            continue;
        }
        return result;
      }
      if ((v18 & 4) == 0)
      {
        v19 = *(_QWORD *)(a3 + 24 * v13);
        if (v19 > 0xFFFFFFFFFFFFFFEFLL || v19 + 16 > a5)
          return 7;
        if (v19 > ~a4)
          goto LABEL_58;
        v21 = (char *)(a4 + v19);
        if (v21 >= v29 || (unint64_t)v21 < a4)
          goto LABEL_59;
        *(_OWORD *)v21 = *(_OWORD *)&v31[1];
        if ((v18 & 8) != 0)
        {
          if (v15 >= v31[1])
          {
            if (v21 + 16 <= v29 && v14 >= v15 && *((_QWORD *)v21 + 1) <= v14 - v15)
            {
              *(_QWORD *)v21 = v15;
              return 3;
            }
            goto LABEL_59;
          }
          if (v21 + 16 > v29)
            goto LABEL_59;
          v23 = *((_QWORD *)v21 + 1);
          v24 = v23 + v31[1] - v15;
          if (__CFADD__(v23, v31[1] - v15))
          {
            __break(0x5500u);
            return result;
          }
          if (v14 < v15 || v24 > v14 - v15)
            goto LABEL_59;
          *(_QWORD *)v21 = v15;
          *((_QWORD *)v21 + 1) = v24;
        }
      }
      ++v13;
      if (a2 == (unsigned __int16)(v17 + 1))
      {
        if (!__CFADD__(v31[1], v31[2]))
        {
          v28 = a1[1];
          if (!__CFADD__(*a1, v28))
          {
            v10 = v31[1] + v31[2];
            v12 = *a1 + v28;
            goto LABEL_47;
          }
        }
LABEL_58:
        __break(0x5513u);
        goto LABEL_59;
      }
      if (a2 <= (unsigned __int16)(v17 + 1))
      {
        v10 = v32;
        v12 = v33;
        goto LABEL_47;
      }
    }
    if ((_DWORD)result == 1)
    {
      if (a2 <= v13)
      {
        return 0;
      }
      else
      {
        v25 = (__int16 *)(a3 + 24 * v13 + 16);
        v26 = a2 - (unint64_t)v13;
        result = 0;
        while (1)
        {
          v27 = *v25;
          v25 += 12;
          if ((v27 & 1) == 0)
            break;
          if (!--v26)
            return result;
        }
        return 5;
      }
    }
  }
  else
  {
LABEL_47:
    if (v10 == v12)
      return 0;
    else
      return 3;
  }
  return result;
}

uint64_t DERParseSequence(uint64_t result, unsigned int a2, uint64_t a3, unint64_t a4, size_t a5)
{
  if ((a4 | 0x7FFFFFFFFFFFFFFFLL) >= a4)
    return DERParseSequenceToObject(result, a2, a3, a4, ~a4 & 0x7FFFFFFFFFFFFFFFLL, a5);
  __break(0x5519u);
  return result;
}

uint64_t DERDecodeSequenceWithBlock(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v4[3];

  memset(v4, 170, sizeof(v4));
  result = DERDecodeItemPartialBufferGetLength(a1, v4, 0);
  if (!(_DWORD)result)
  {
    if (v4[0] - 0x2000000000000012 >= 0xFFFFFFFFFFFFFFFELL)
      return DERDecodeSequenceContentWithBlock(&v4[1], a2);
    else
      return 2;
  }
  return result;
}

uint64_t DERDecodeSequenceContentWithBlock(unint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t result;
  char v7;
  unint64_t v8[3];
  unint64_t v9[2];

  v9[0] = 0;
  v2 = *a1;
  v3 = a1[1];
  if (__CFADD__(*a1, v3))
  {
    __break(0x5513u);
LABEL_13:
    __break(0x5519u);
  }
  v4 = v2 + v3;
  if (v2 > v4)
    goto LABEL_13;
  v9[0] = *a1;
  v9[1] = v4;
  memset(v8, 170, sizeof(v8));
  v7 = 0;
  while (1)
  {
    LODWORD(result) = DERDecodeSeqNext(v9, v8);
    if ((_DWORD)result)
      break;
    LODWORD(result) = (*(uint64_t (**)(uint64_t, unint64_t *, char *))(a2 + 16))(a2, v8, &v7);
    if ((_DWORD)result)
      break;
    if (v7)
      return 0;
  }
  if (result <= 1)
    return 0;
  else
    return result;
}

unint64_t sub_10020C2C0(unint64_t result, unint64_t a2, int a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unsigned __int8 **v10;
  __int16 v11;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned __int8 *v20;
  unint64_t v21;
  uint64_t v22;

  v5 = 0;
  if (!a3)
  {
LABEL_38:
    result = 0;
LABEL_40:
    *a5 = v5;
    return result;
  }
  v6 = 0;
  v7 = result + a2;
  while (24 * (unint64_t)v6 <= ~a4)
  {
    v8 = *(_QWORD *)(a4 + 24 * v6);
    v9 = v8 > 0xFFFFFFFFFFFFFFEFLL || v8 + 16 > a2;
    if (v9)
    {
      v5 = 0;
      result = 7;
      goto LABEL_40;
    }
    if (v8 > ~result)
      break;
    v10 = (unsigned __int8 **)(result + v8);
    v11 = *(_WORD *)(a4 + 24 * v6 + 16);
    if ((v11 & 0x200) == 0)
    {
      if ((v11 & 1) != 0)
      {
        if ((unint64_t)v10 < result || (unint64_t)(v10 + 2) > v7)
          goto LABEL_43;
        if (!v10[1])
          goto LABEL_37;
      }
      v13 = *(_QWORD *)(a4 + 24 * v6 + 8) & 0x1FFFFFFFFFFFFFFFLL;
      v14 = 1;
      if (v13 >= 0x1F)
      {
        do
        {
          ++v14;
          v9 = v13 > 0x7F;
          v13 >>= 7;
        }
        while (v9);
      }
      v15 = __CFADD__(v5, v14);
      v16 = v5 + v14;
      if (v15)
        goto LABEL_42;
      if ((unint64_t)v10 < result || (unint64_t)(v10 + 2) > v7)
        goto LABEL_43;
      v17 = (unint64_t)v10[1];
      if ((*(_WORD *)(a4 + 24 * v6 + 16) & 0x100) != 0)
      {
        if (v17)
        {
          v17 += (unint64_t)**v10 >> 7;
          goto LABEL_24;
        }
LABEL_25:
        v18 = 1;
      }
      else
      {
LABEL_24:
        if (v17 < 0x80)
          goto LABEL_25;
        v18 = 1;
        v21 = v17;
        do
        {
          ++v18;
          v9 = v21 > 0xFF;
          v21 >>= 8;
        }
        while (v9);
      }
      v15 = __CFADD__(v16, v18);
      v22 = v16 + v18;
      if (v15)
        goto LABEL_42;
      v15 = __CFADD__(v22, v17);
      v5 = v22 + v17;
      if (v15)
        goto LABEL_42;
      goto LABEL_37;
    }
    if ((unint64_t)v10 < result || (unint64_t)(v10 + 2) > v7)
      goto LABEL_43;
    v20 = v10[1];
    v15 = __CFADD__(v5, v20);
    v5 += (uint64_t)v20;
    if (v15)
      goto LABEL_42;
LABEL_37:
    if (++v6 == a3)
      goto LABEL_38;
  }
  __break(0x5513u);
LABEL_42:
  __break(0x5500u);
LABEL_43:
  __break(0x5519u);
  return result;
}

unint64_t DERLengthOfEncodedSequenceFromObject(uint64_t a1, unint64_t a2, unint64_t a3, int a4, uint64_t a5, unint64_t *a6)
{
  unint64_t result;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v17 = 0;
  result = sub_10020C2C0(a2, a3, a4, a5, &v17);
  if (!(_DWORD)result)
  {
    v9 = a1 & 0x1FFFFFFFFFFFFFFFLL;
    v10 = 1;
    if ((a1 & 0x1FFFFFFFFFFFFFFFuLL) >= 0x1F)
    {
      do
      {
        ++v10;
        v11 = v9 > 0x7F;
        v9 >>= 7;
      }
      while (v11);
    }
    v12 = 1;
    if (v17 >= 0x80)
    {
      v13 = v17;
      do
      {
        ++v12;
        v11 = v13 > 0xFF;
        v13 >>= 8;
      }
      while (v11);
    }
    v14 = __CFADD__(v10, v12);
    v15 = v10 + v12;
    if (v14 || (v14 = __CFADD__(v15, v17), v16 = v15 + v17, v14))
    {
      __break(0x5500u);
    }
    else
    {
      result = 0;
      *a6 = v16;
    }
  }
  return result;
}

unint64_t DERLengthOfEncodedSequence(uint64_t a1, unint64_t a2, int a3, uint64_t a4)
{
  unint64_t v5;

  v5 = 0;
  if ((a2 | 0x7FFFFFFFFFFFFFFFLL) < a2)
    __break(0x5519u);
  if (DERLengthOfEncodedSequenceFromObject(a1, a2, ~a2 & 0x7FFFFFFFFFFFFFFFLL, a3, a4, &v5))
    return 0;
  else
    return v5;
}

id sub_10020C588(uint64_t a1)
{
  objc_opt_self(a1);
  if (qword_100354848 != -1)
    dispatch_once(&qword_100354848, &stru_10030ED40);
  return (id)qword_100354840;
}

void sub_10020C5CC(id a1)
{
  dispatch_queue_attr_t v1;
  dispatch_queue_t v2;
  void *v3;
  NSObject *v4;

  v1 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v4 = objc_claimAutoreleasedReturnValue(v1);
  v2 = dispatch_queue_create("com.apple.sesd.kml.ownerSharingSession", v4);
  v3 = (void *)qword_100354840;
  qword_100354840 = (uint64_t)v2;

}

uint64_t sub_10020C61C(uint64_t a1, void *a2, void *a3, void *a4, unsigned int a5, void *a6, void *a7)
{
  id v14;
  id v15;
  id v16;
  id v17;
  id *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  void *v29;
  unsigned int v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  KmlDeviceConfigurationData *v44;
  void *v45;
  uint64_t v46;
  void *v47;
  id v48;
  NSObject *v49;
  id v50;
  uint64_t v51;
  void *v52;
  id v53;
  uint64_t v54;
  void *v55;
  void *v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  NSString *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  void *v67;
  id v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  id v76;
  id v77;
  objc_super v78;
  NSErrorUserInfoKey v79;
  void *v80;

  v14 = a2;
  v77 = a3;
  v15 = a4;
  v16 = a6;
  v17 = a7;
  if (a1)
  {
    v78.receiver = (id)a1;
    v78.super_class = (Class)KmlOwnerSharingSession;
    v18 = (id *)objc_msgSendSuper2(&v78, "init");
    a1 = (uint64_t)v18;
    if (v18)
    {
      v19 = objc_msgSend(objc_retainAutorelease(v18[25]), "UTF8String");
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 94, (uint64_t)v19, CFSTR("let's init"), v20, v21, v22, v74);
      objc_storeWeak((id *)(a1 + 216), v15);
      objc_storeStrong((id *)(a1 + 24), a2);
      objc_storeStrong((id *)(a1 + 104), a3);
      objc_storeStrong((id *)(a1 + 176), a6);
      objc_storeStrong((id *)(a1 + 88), a7);
      *(_BYTE *)(a1 + 96) = 0;
      v23 = sub_100253E34([KmlBindingAttestation alloc], *(void **)(a1 + 88));
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 104), "anonymizedDsid"));
      if (objc_msgSend(v24, "length"))
      {
        v25 = sub_1002225B8((uint64_t)v23);
        v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
        v27 = objc_msgSend(v26, "length");

        if (v27)
        {
          v28 = sub_1002225B8((uint64_t)v23);
          v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
          v30 = objc_msgSend(v24, "isEqualToData:", v29);

          if (v30)
          {
            v31 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 200)), "UTF8String");
            KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 106, (uint64_t)v31, CFSTR("Saved Anonymized DSID matches Anonymized DSID in ourBindingAttestation. Authless share possible"), v32, v33, v34, v75);
            *(_BYTE *)(a1 + 96) = 1;
          }
        }
      }
      *(int64x2_t *)(a1 + 8) = vdupq_n_s64(1uLL);
      v35 = sub_10021728C((uint64_t)v14);
      v36 = objc_claimAutoreleasedReturnValue(v35);
      v37 = *(void **)(a1 + 200);
      *(_QWORD *)(a1 + 200) = v36;

      v38 = sub_10022ADC8((uint64_t)v14);
      v39 = objc_claimAutoreleasedReturnValue(v38);
      v40 = *(void **)(a1 + 48);
      *(_QWORD *)(a1 + 48) = v39;

      v41 = sub_100217274((uint64_t)v14);
      v42 = objc_claimAutoreleasedReturnValue(v41);
      v43 = *(void **)(a1 + 64);
      *(_QWORD *)(a1 + 64) = v42;

      *(_BYTE *)(a1 + 97) = 0;
      v44 = [KmlDeviceConfigurationData alloc];
      v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 104), "deviceConfiguration"));
      v46 = sub_10022D114((uint64_t)v44, v45);
      v47 = *(void **)(a1 + 152);
      *(_QWORD *)(a1 + 152) = v46;

      if (*(_QWORD *)(a1 + 200))
      {
        v48 = KmlSignpostLogger();
        v49 = objc_claimAutoreleasedReturnValue(v48);
        *(_QWORD *)(a1 + 160) = os_signpost_id_make_with_pointer(v49, *(const void **)(a1 + 200));

      }
      else
      {
        *(_QWORD *)(a1 + 160) = 0xEEEEB0B5B2B2EEEELL;
      }
      v50 = sub_10020C588((uint64_t)KmlOwnerSharingSession);
      v51 = objc_claimAutoreleasedReturnValue(v50);
      v52 = *(void **)(a1 + 168);
      *(_QWORD *)(a1 + 168) = v51;

      v53 = sub_1002342C4((uint64_t)KmlSharingTransport);
      v54 = objc_claimAutoreleasedReturnValue(v53);
      v55 = *(void **)(a1 + 120);
      *(_QWORD *)(a1 + 120) = v54;

      if (a5)
      {
        v56 = *(void **)(a1 + 200);
        if (v56)
        {
          sub_100234518(*(_QWORD *)(a1 + 120), (void *)a1, v56);
          v57 = sub_10022ADD4((uint64_t)v14);
          v58 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 200)), "UTF8String");
          if (v57 == 3)
          {
            KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 135, (uint64_t)v58, CFSTR("session is worth restoring"), v59, v60, v61, v75);
            *(_QWORD *)(a1 + 8) = 11;
          }
          else
          {
            KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 138, (uint64_t)v58, CFSTR("session can't continue after re-generation. Moving to cancel state to clean out."), v59, v60, v61, v75);
            v76 = v16;
            v62 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
            v79 = NSLocalizedDescriptionKey;
            v63 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(122));
            v64 = (void *)objc_claimAutoreleasedReturnValue(v63);
            v80 = v64;
            v65 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v80, &v79, 1));
            v66 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v62, 122, v65));
            v67 = *(void **)(a1 + 128);
            *(_QWORD *)(a1 + 128) = v66;

            v16 = v76;
            sub_10020CAC0(a1, 22);
          }
        }
      }
      v68 = objc_retainAutorelease(*(id *)(a1 + 200));
      v69 = objc_msgSend(v68, "UTF8String");
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 145, (uint64_t)v69, CFSTR("ready to roll regenerated %d _sharingInvitationId %@"), v70, v71, v72, a5);

    }
  }

  return a1;
}

uint64_t sub_10020CAB4(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 200);
  return result;
}

void sub_10020CAC0(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD v3[6];

  if (a1)
  {
    v2 = *(NSObject **)(a1 + 168);
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_10020E398;
    v3[3] = &unk_100304AD0;
    v3[4] = a1;
    v3[5] = a2;
    dispatch_async(v2, v3);
  }
}

dispatch_queue_t *sub_10020CB8C(dispatch_queue_t *a1)
{
  dispatch_queue_t *v1;
  NSObject *v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  void (*v9)(uint64_t);
  id v10;

  v1 = a1;
  if (a1)
  {
    dispatch_assert_queue_not_V2(a1[21]);
    v5 = 0;
    v6 = &v5;
    v7 = 0x3032000000;
    v8 = sub_10020CC4C;
    v9 = sub_10020CC5C;
    v10 = 0;
    v2 = v1[21];
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_10020CC64;
    v4[3] = &unk_1003044E0;
    v4[4] = v1;
    v4[5] = &v5;
    dispatch_sync(v2, v4);
    v1 = (dispatch_queue_t *)(id)v6[5];
    _Block_object_dispose(&v5, 8);

  }
  return v1;
}

uint64_t sub_10020CC4C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10020CC5C(uint64_t a1)
{

}

void sub_10020CC64(uint64_t a1)
{
  void *v2;
  NSString *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  NSErrorUserInfoKey v13;
  void *v14;

  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) != 1)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
    v13 = NSLocalizedDescriptionKey;
    v3 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(214));
    v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    v14 = v4;
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v14, &v13, 1));
    v6 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v2, 214, v5));
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v8 = *(void **)(v7 + 40);
    *(_QWORD *)(v7 + 40) = v6;

  }
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))
  {
    v9 = sub_10020CDB4(*(_QWORD *)(a1 + 32));
    v10 = objc_claimAutoreleasedReturnValue(v9);
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v12 = *(void **)(v11 + 40);
    *(_QWORD *)(v11 + 40) = v10;

  }
}

uint64_t sub_10020CDB4(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  KeySharingInvitation *v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id *v18;
  id *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;
  void *v28;
  unsigned __int8 *v29;
  void *v30;
  id v31;
  uint64_t v32;
  void *v33;
  id v34;
  NSObject *v35;

  if (a1)
  {
    v2 = sub_10020FBB8(a1);
    v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
    v4 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 200)), "UTF8String");
    v5 = kmlUtilHexStringFromData(v3);
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 608, (uint64_t)v4, CFSTR("SupportedRadiosData:%@"), v7, v8, v9, (uint64_t)v6);

    v10 = objc_alloc_init(KeySharingInvitation);
    v11 = sub_1002206D4((uint64_t)v10, *(void **)(a1 + 104), v3, *(void **)(a1 + 24), *(void **)(a1 + 176));
    v12 = objc_claimAutoreleasedReturnValue(v11);
    v13 = *(void **)(a1 + 208);
    *(_QWORD *)(a1 + 208) = v12;

    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Sharing Invitation : %@"), *(_QWORD *)(a1 + 200)));
    kmlUtilLogLargeData(v14, *(void **)(a1 + 208));

    v15 = sub_1000117DC((uint64_t)v10);
    v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    v17 = sub_1000117DC((uint64_t)v16);
    v18 = (id *)objc_claimAutoreleasedReturnValue(v17);
    v19 = sub_10022CD6C(v18);
    v20 = objc_claimAutoreleasedReturnValue(v19);
    v21 = *(void **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v20;

    v22 = sub_1000117DC((uint64_t)v10);
    v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
    v24 = sub_10002BA88((uint64_t)v23);
    v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
    v26 = sub_10022D014((uint64_t)v25);
    v27 = objc_claimAutoreleasedReturnValue(v26);
    v28 = *(void **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v27;

    sub_10020FD5C(a1);
    v29 = kmlUtilSHA1(*(void **)(a1 + 208));
    v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
    v31 = kmlUtilHexStringFromData(v30);
    v32 = objc_claimAutoreleasedReturnValue(v31);
    v33 = *(void **)(a1 + 200);
    *(_QWORD *)(a1 + 200) = v32;

    v34 = KmlSignpostLogger();
    v35 = objc_claimAutoreleasedReturnValue(v34);
    *(_QWORD *)(a1 + 160) = os_signpost_id_make_with_pointer(v35, *(const void **)(a1 + 200));

  }
  return 0;
}

void sub_10020CF6C(uint64_t a1)
{
  if (a1)
    sub_10020CAC0(a1, 2);
}

void sub_10020CF7C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  _QWORD v6[5];
  id v7;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = *(NSObject **)(a1 + 168);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10020D008;
    v6[3] = &unk_100304370;
    v6[4] = a1;
    v7 = v3;
    dispatch_async(v5, v6);

  }
}

void sub_10020D008(uint64_t a1)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  NSString *v10;
  void *v11;
  void *v12;
  id WeakRetained;
  uint64_t v14;
  NSErrorUserInfoKey v15;
  void *v16;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(uint64_t *)(v2 + 8) > 11)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
    v15 = NSLocalizedDescriptionKey;
    v10 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(101));
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    v16 = v11;
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v16, &v15, 1));
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v9, 101, v12));

  }
  else
  {
    v3 = objc_msgSend(objc_retainAutorelease(*(id *)(v2 + 200)), "UTF8String");
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 189, (uint64_t)v3, CFSTR("Key sharing cancel requested"), v4, v5, v6, v14);
    v7 = *(_QWORD *)(a1 + 32);
    if (!*(_QWORD *)(v7 + 128))
    {
      objc_storeStrong((id *)(v7 + 128), *(id *)(a1 + 40));
      v7 = *(_QWORD *)(a1 + 32);
    }
    sub_10020CAC0(v7, 22);
    v8 = 0;
  }
  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 216));
  objc_msgSend(WeakRetained, "handleOwnerKeySharingCancelledWithStatus:", v8);

}

void sub_10020D194(uint64_t a1, void *a2)
{
  NSObject *v3;
  id v4;
  _QWORD block[5];
  id v6;

  v4 = a2;
  if (a1)
  {
    dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 168));
    v3 = *(NSObject **)(a1 + 168);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10020D224;
    block[3] = &unk_100304370;
    block[4] = a1;
    v6 = v4;
    dispatch_sync(v3, block);

  }
}

void sub_10020D224(uint64_t a1)
{
  sub_100048A08(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24), *(void **)(a1 + 40));
}

void sub_10020D230(uint64_t a1, void *a2)
{
  NSObject *v3;
  id v4;
  _QWORD block[5];
  id v6;

  v4 = a2;
  if (a1)
  {
    dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 168));
    v3 = *(NSObject **)(a1 + 168);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10020D2C0;
    block[3] = &unk_100304370;
    block[4] = a1;
    v6 = v4;
    dispatch_sync(v3, block);

  }
}

void sub_10020D2C0(uint64_t a1)
{
  sub_10020D2EC(*(_QWORD *)(a1 + 32));
  sub_10024EC50(*(_QWORD *)(a1 + 40), *(void **)(*(_QWORD *)(a1 + 32) + 24));
}

uint64_t sub_10020D2EC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (result)
  {
    v1 = result;
    v2 = sub_10021728C(*(_QWORD *)(result + 24));
    v3 = (void *)objc_claimAutoreleasedReturnValue(v2);

    if (!v3)
      sub_10024E69C(*(_QWORD *)(v1 + 24), *(void **)(v1 + 200));
    v4 = sub_10022ADC8(*(_QWORD *)(v1 + 24));
    v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

    if (!v5)
      sub_10024E66C(*(_QWORD *)(v1 + 24), *(void **)(v1 + 48));
    v6 = sub_100217274(*(_QWORD *)(v1 + 24));
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);

    if (!v7)
      sub_10024E67C(*(_QWORD *)(v1 + 24), *(void **)(v1 + 64));
    v8 = *(_QWORD *)(v1 + 8);
    if (v8 == 13)
    {
      v9 = sub_100217280(*(_QWORD *)(v1 + 24));
      v10 = (void *)objc_claimAutoreleasedReturnValue(v9);

      if (!v10)
        sub_10024E68C(*(_QWORD *)(v1 + 24), *(void **)(v1 + 144));
      v8 = *(_QWORD *)(v1 + 8);
    }
    v11 = 4;
    if (v8 != 13)
      v11 = 2;
    if (((1 << v8) & 0x1800) != 0)
      v12 = 3;
    else
      v12 = v11;
    if (((1 << v8) & 0x80E00000) != 0)
      v13 = 5;
    else
      v13 = v12;
    if (v8 <= 0x1F)
      v14 = v13;
    else
      v14 = 2;
    return sub_10024E624(*(_QWORD *)(v1 + 24), v14);
  }
  return result;
}

uint64_t sub_10020D3F8(void *a1)
{
  uint64_t *v1;
  uint64_t v2;

  if (!a1)
    return 0;
  v1 = a1;
  objc_sync_enter(v1);
  v2 = sub_1002225E0(v1[3]);
  objc_sync_exit(v1);

  return v2;
}

void sub_10020D444(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10020D458(void *a1)
{
  uint64_t *v1;
  uint64_t v2;

  if (!a1)
    return 0;
  v1 = a1;
  objc_sync_enter(v1);
  v2 = sub_10024DE58(v1[3]);
  objc_sync_exit(v1);

  return v2;
}

void sub_10020D4A4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10020D4B8(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1)
  {
    v2 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 200)), "UTF8String");
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 237, (uint64_t)v2, CFSTR("Key sharing cleanup requested"), v3, v4, v5, v6);
    sub_10020CAC0(a1, 31);
  }
}

void sub_10020D640(uint64_t a1)
{
  sub_10020D658(*(_QWORD *)(a1 + 32), *(void **)(a1 + 40), *(void **)(a1 + 48), *(_QWORD *)(a1 + 80), *(void **)(a1 + 56), *(void **)(a1 + 64), *(void **)(a1 + 72));
}

void sub_10020D658(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5, void *a6, void *a7)
{
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  unsigned __int8 v22;
  uint64_t v23;
  void *v24;
  unsigned __int8 v25;
  id v26;
  id v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  unsigned __int8 v39;
  void *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  KeySigningRequest *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  id *v63;
  void *v64;
  id v65;
  uint64_t v66;
  void *v67;
  unsigned __int8 v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  KeySigningRequest *v74;
  id v75;
  uint64_t v76;
  void *v77;
  id v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  void *v88;
  uint64_t v89;
  int v90;
  NSString *v91;
  void *v92;
  void *v93;
  void *v94;
  uint64_t v95;
  id v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  NSString *v100;
  uint64_t v101;
  void *v102;
  void *v103;
  id v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  id v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  id WeakRetained;
  void *v115;
  NSString *v116;
  void *v117;
  void *v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  id v123;
  id *v124;
  void *v125;
  KeySigningRequest *v126;
  id v127;
  NSErrorUserInfoKey v128;
  void *v129;
  NSErrorUserInfoKey v130;
  void *v131;
  NSErrorUserInfoKey v132;
  void *v133;

  v13 = a2;
  v14 = a3;
  v15 = a5;
  v16 = a6;
  v17 = a7;
  if (a1)
  {
    if (!v15)
    {
      v33 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 200)), "UTF8String");
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 640, (uint64_t)v33, CFSTR("Sender unknown"), v34, v35, v36, v121);
      goto LABEL_34;
    }
    v127 = v16;
    v18 = sub_10024E5DC(*(_QWORD *)(a1 + 24));
    v19 = *(_QWORD *)(a1 + 24);
    if (v18)
    {
      v20 = sub_10002BA88(v19);
      v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
      v22 = objc_msgSend(v21, "isEqualToString:", v15);

      if ((v22 & 1) == 0)
      {
        v45 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 200)), "UTF8String");
        KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 647, (uint64_t)v45, CFSTR("Message from unexpected IDS sender: %@"), v46, v47, v48, (uint64_t)v15);
        goto LABEL_17;
      }
      v23 = sub_1000117DC(*(_QWORD *)(a1 + 24));
      v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
      v25 = objc_msgSend(v24, "isEqual:", v14);

      if ((v25 & 1) == 0)
      {
        v26 = objc_retainAutorelease(*(id *)(a1 + 200));
        v27 = objc_msgSend(v26, "UTF8String");
        v28 = sub_1000117DC(*(_QWORD *)(a1 + 24));
        v29 = (void *)objc_claimAutoreleasedReturnValue(v28);

        KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 653, (uint64_t)v27, CFSTR("Message not for sharing manager uuid: %@"), v30, v31, v32, (uint64_t)v29);
LABEL_17:
        sub_10023470C(*(_QWORD *)(a1 + 120), v15);
LABEL_33:
        v16 = v127;
        goto LABEL_34;
      }
    }
    else
    {
      v37 = sub_10022ADB0(v19);
      v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
      v39 = objc_msgSend(v38, "isEqualToString:", v15);

      if ((v39 & 1) == 0)
      {
        v49 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 200)), "UTF8String");
        KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 660, (uint64_t)v49, CFSTR("Message from unexpected XP sender: %@"), v50, v51, v52, (uint64_t)v15);
        goto LABEL_33;
      }
    }
    v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Message for - %@"), *(_QWORD *)(a1 + 200)));
    kmlUtilLogLargeData(v40, v13);

    v16 = v127;
    switch(a4)
    {
      case 7:
        goto LABEL_44;
      case 5:
        v83 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 200)), "UTF8String");
        KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 720, (uint64_t)v83, CFSTR("Friend requested cancelling this invite."), v84, v85, v86, v122);
        v87 = sub_10023803C([KmlCancelMessage alloc], v13);
        v88 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
        if (v87)
        {
          v89 = sub_100238448((uint64_t)v87);
          v130 = NSLocalizedDescriptionKey;
          v90 = sub_100238448((uint64_t)v87);
          v91 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(v90));
          v92 = (void *)objc_claimAutoreleasedReturnValue(v91);
          v131 = v92;
          v93 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v131, &v130, 1));
          v94 = v88;
          v95 = v89;
        }
        else
        {
          v128 = NSLocalizedDescriptionKey;
          v100 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(102));
          v92 = (void *)objc_claimAutoreleasedReturnValue(v100);
          v129 = v92;
          v93 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v129, &v128, 1));
          v94 = v88;
          v95 = 102;
        }
        v101 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v94, v95, v93));
        v102 = *(void **)(a1 + 128);
        *(_QWORD *)(a1 + 128) = v101;

        sub_10020CAC0(a1, 23);
        goto LABEL_33;
      case 2:
LABEL_44:
        if (*(_QWORD *)(a1 + 32) && *(_QWORD *)(a1 + 136))
        {
          v41 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 200)), "UTF8String");
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 670, (uint64_t)v41, CFSTR("We are processing a signingRequest. Ignoring another one."), v42, v43, v44, v122);
          if (sub_10024E5DC(*(_QWORD *)(a1 + 24)))
            sub_10023470C(*(_QWORD *)(a1 + 120), v15);
          break;
        }
        v53 = objc_alloc_init(KeySigningRequest);
        sub_1000536E4((uint64_t)v53, *(void **)(a1 + 176));
        if ((sub_10022121C((uint64_t)v53, v13) & 1) != 0)
        {
          v126 = v53;
          v54 = sub_1002299DC(*(_QWORD *)(a1 + 24));
          v55 = objc_claimAutoreleasedReturnValue(v54);
          if (!v55)
            goto LABEL_26;
          v56 = (void *)v55;
          v57 = sub_1002299E8(*(_QWORD *)(a1 + 24));

          if (!v57)
            goto LABEL_26;
          v58 = *(_QWORD *)(a1 + 24);
          v59 = sub_1002299E8(v58);
          sub_10024E6E8(v58, v59 - 1);
          v60 = sub_100050680((uint64_t)v126);
          v61 = (void *)objc_claimAutoreleasedReturnValue(v60);

          if (!v61)
            goto LABEL_35;
          v123 = objc_alloc((Class)NSString);
          v62 = sub_100050680((uint64_t)v126);
          v124 = (id *)objc_claimAutoreleasedReturnValue(v62);
          v63 = sub_10022CD6C(v124);
          v64 = (void *)objc_claimAutoreleasedReturnValue(v63);
          v65 = objc_msgSend(v123, "initWithData:encoding:", v64, 4);

          v125 = v65;
          if (v65)
          {
            v66 = sub_1002299DC(*(_QWORD *)(a1 + 24));
            v67 = (void *)objc_claimAutoreleasedReturnValue(v66);
            v68 = objc_msgSend(v67, "isEqualToString:", v65);

            if ((v68 & 1) != 0)
            {
              v69 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 200)), "UTF8String");
              KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 696, (uint64_t)v69, CFSTR("Passcode verified. Ok to continue"), v70, v71, v72, v122);

LABEL_26:
              v73 = *(void **)(a1 + 32);
              *(_QWORD *)(a1 + 32) = v126;
              v74 = v126;

              objc_storeStrong((id *)(a1 + 144), a6);
              v75 = kmlUtilDataForHexString(*(void **)(a1 + 144));
              v76 = objc_claimAutoreleasedReturnValue(v75);
              v77 = *(void **)(a1 + 136);
              *(_QWORD *)(a1 + 136) = v76;

              objc_storeStrong((id *)(a1 + 80), a7);
              v78 = objc_retainAutorelease(*(id *)(a1 + 200));
              v79 = objc_msgSend(v78, "UTF8String");
              KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 715, (uint64_t)v79, CFSTR("Received signing request, keyId: %@, bindingAttestation - %@"), v80, v81, v82, *(_QWORD *)(a1 + 144));

              sub_1002102A4(a1);
              v16 = v127;
              break;
            }
            v103 = v125;
          }
          else
          {
LABEL_35:
            v103 = 0;
          }
          v104 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 200)), "UTF8String");
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 698, (uint64_t)v104, CFSTR("Passcode verification failed"), v105, v106, v107, v122);
          if (sub_1002299E8(*(_QWORD *)(a1 + 24)))
          {
            v108 = objc_retainAutorelease(*(id *)(a1 + 200));
            v109 = objc_msgSend(v108, "UTF8String");
            v110 = sub_1002299E8(*(_QWORD *)(a1 + 24));

            KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 700, (uint64_t)v109, CFSTR("Number of attempts left : %d"), v111, v112, v113, v110);
            sub_10020F8F8(a1);
            WeakRetained = objc_loadWeakRetained((id *)(a1 + 216));
            objc_msgSend(WeakRetained, "handlePasscodeRetryRequestedForInvitation:", *(_QWORD *)(a1 + 200));

          }
          else
          {
            v115 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
            v132 = NSLocalizedDescriptionKey;
            v116 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(118));
            v117 = (void *)objc_claimAutoreleasedReturnValue(v116);
            v133 = v117;
            v118 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v133, &v132, 1));
            v119 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v115, 118, v118));
            v120 = *(void **)(a1 + 128);
            *(_QWORD *)(a1 + 128) = v119;

            sub_10020CAC0(a1, 22);
          }

          v53 = v126;
          v16 = v127;
        }
        else
        {
          v96 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 200)), "UTF8String");
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 680, (uint64_t)v96, CFSTR("Still waiting for signing request"), v97, v98, v99, v122);
          if (sub_10024E5DC(*(_QWORD *)(a1 + 24)))
            sub_10023470C(*(_QWORD *)(a1 + 120), v15);
        }

        break;
    }
  }
LABEL_34:

}

void sub_10020DED8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v9 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v9 + 8) == 2)
  {
    v11 = *(_QWORD *)(a1 + 40);
    v12 = objc_retainAutorelease(*(id *)(v9 + 200));
    if (v11)
    {
      v13 = v12;
      v14 = objc_msgSend(v13, "UTF8String");
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 265, (uint64_t)v14, CFSTR("Error setting up transport %@"), v15, v16, v17, *(_QWORD *)(a1 + 40));

      objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 128), *(id *)(a1 + 40));
      v18 = *(_QWORD *)(a1 + 32);
      v19 = 21;
    }
    else
    {
      v24 = objc_msgSend(v12, "UTF8String");
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 269, (uint64_t)v24, CFSTR("Transport set up"), v25, v26, v27, v28);
      v18 = *(_QWORD *)(a1 + 32);
      v19 = 3;
    }
    sub_10020CAC0(v18, v19);
  }
  else
  {
    v20 = objc_msgSend(objc_retainAutorelease(*(id *)(v9 + 200)), "UTF8String");
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 260, (uint64_t)v20, CFSTR("We are not waiting on Transport setup result"), v21, v22, v23, a9);
  }
}

void sub_10020E04C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(v10 + 8);
  if (v11 == 12)
  {
    v21 = *(_QWORD *)(a1 + 40);
    v22 = objc_retainAutorelease(*(id *)(v10 + 200));
    if (v21)
    {
      v23 = v22;
      v24 = objc_msgSend(v23, "UTF8String");
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 289, (uint64_t)v24, CFSTR("Error sending message %@"), v25, v26, v27, *(_QWORD *)(a1 + 40));

      objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 128), *(id *)(a1 + 40));
      v19 = *(_QWORD *)(a1 + 32);
      v20 = 23;
    }
    else
    {
      v36 = objc_msgSend(v22, "UTF8String");
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 293, (uint64_t)v36, CFSTR("Signed request sent successfully"), v37, v38, v39, v40);
      v19 = *(_QWORD *)(a1 + 32);
      v20 = 13;
    }
  }
  else
  {
    if (v11 != 3)
    {
      v28 = objc_msgSend(objc_retainAutorelease(*(id *)(v10 + 200)), "UTF8String");
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 297, (uint64_t)v28, CFSTR("We didn't send anything, ignore"), v29, v30, v31, a9);
      return;
    }
    v12 = *(_QWORD *)(a1 + 40);
    v13 = objc_retainAutorelease(*(id *)(v10 + 200));
    if (v12)
    {
      v14 = v13;
      v15 = objc_msgSend(v14, "UTF8String");
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 280, (uint64_t)v15, CFSTR("Error sending sharing invitation %@"), v16, v17, v18, *(_QWORD *)(a1 + 40));

      objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 128), *(id *)(a1 + 40));
      v19 = *(_QWORD *)(a1 + 32);
      v20 = 21;
    }
    else
    {
      v32 = objc_msgSend(v13, "UTF8String");
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 284, (uint64_t)v32, CFSTR("Sent invitation successfully"), v33, v34, v35, v40);
      v19 = *(_QWORD *)(a1 + 32);
      v20 = 11;
    }
  }
  sub_10020CAC0(v19, v20);
}

void sub_10020E284(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  id v13;

  v12 = *(_QWORD *)(a1 + 32);
  v13 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "genericData"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "message"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "additionalData"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "sharingSessionUUID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "genericData"));
  v6 = objc_msgSend(v5, "messageType");
  v7 = *(void **)(a1 + 48);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "genericData"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "friendKeyIdentifier"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "additionalData"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "bindingAttestation"));
  sub_10020D658(v12, v2, v4, (uint64_t)v6, v7, v9, v11);

}

void sub_10020E398(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10020E3A4(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), a3, a4, a5, a6, a7, a8, a9);
}

void sub_10020E3A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __CFString *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  NSObject *v35;
  NSObject *v36;
  os_signpost_id_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  NSObject *v53;
  NSObject *v54;
  os_signpost_id_t v55;
  void *v56;
  uint64_t v57;
  void *v58;
  void *v59;
  void *v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  id v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  _BOOL8 v74;
  id v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  NSObject *v81;
  NSObject *v82;
  os_signpost_id_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  NSObject *v92;
  NSObject *v93;
  os_signpost_id_t v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  id v99;
  NSObject *v100;
  NSObject *v101;
  os_signpost_id_t v102;
  uint64_t v103;
  id v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  _BOOL8 v108;
  id v109;
  void *v110;
  _BOOL4 v111;
  id v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  id v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  dispatch_queue_t *v120;
  void *v121;
  id v122;
  id v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  NSString *v128;
  void *v129;
  void *v130;
  uint64_t v131;
  void *v132;
  id v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  id v137;
  void *v138;
  uint64_t v139;
  void *v140;
  id v141;
  id v142;
  id v143;
  id v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  id WeakRetained;
  uint8_t buf[4];
  uint64_t v153;
  NSErrorUserInfoKey v154;
  void *v155;

  if (a1)
  {
    v11 = *(_QWORD *)(a1 + 8);
    v12 = objc_retainAutorelease(*(id *)(a1 + 200));
    if (v11 >= a2)
    {
      v24 = objc_msgSend(v12, "UTF8String");
      v28 = CFSTR("Current state higher than new state. Do nothing");
      v29 = 329;
LABEL_7:
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", v29, (uint64_t)v24, v28, v25, v26, v27, a9);
    }
    else
    {
      v13 = v12;
      v14 = objc_msgSend(v13, "UTF8String");
      v15 = *(_QWORD *)(a1 + 8);

      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 333, (uint64_t)v14, CFSTR("Current state %ld, new state %ld"), v16, v17, v18, v15);
      v19 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = a2;
      *(_QWORD *)(a1 + 16) = v19;
      if (a2 > 10)
      {
        switch(a2)
        {
          case 11:
            v20 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 200)), "UTF8String");
            KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 379, (uint64_t)v20, CFSTR("Wait for signing request"), v21, v22, v23, v148);
            sub_10024E624(*(_QWORD *)(a1 + 24), 3);
            WeakRetained = objc_loadWeakRetained((id *)(a1 + 216));
            objc_msgSend(WeakRetained, "handleSentInvitationWithIdentifier:", *(_QWORD *)(a1 + 200));
            goto LABEL_22;
          case 12:
            v48 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 200)), "UTF8String");
            KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 385, (uint64_t)v48, CFSTR("Friend request signed. Sending now"), v49, v50, v51, v148);
            v52 = KmlSignpostLogger();
            v53 = objc_claimAutoreleasedReturnValue(v52);
            v54 = v53;
            v55 = *(_QWORD *)(a1 + 160);
            if (v55 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v53))
            {
              *(_WORD *)buf = 0;
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v54, OS_SIGNPOST_EVENT, v55, "OwnerSendSignedRequest", "", buf, 2u);
            }

            v149 = *(_QWORD *)(a1 + 200);
            v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("SignedResponse - %@")));
            kmlUtilLogLargeData(v56, *(void **)(a1 + 40));

            if (sub_10024E5DC(*(_QWORD *)(a1 + 24)))
            {
              v57 = *(_QWORD *)(a1 + 120);
              v58 = *(void **)(a1 + 40);
              v59 = *(void **)(a1 + 200);
              v60 = *(void **)(a1 + 144);
              v61 = sub_1000117DC(*(_QWORD *)(a1 + 24));
              v62 = (void *)objc_claimAutoreleasedReturnValue(v61);
              v63 = sub_10002BA88(*(_QWORD *)(a1 + 24));
              v64 = (void *)objc_claimAutoreleasedReturnValue(v63);
              v65 = sub_1002225E0(*(_QWORD *)(a1 + 24));
              sub_100234AC4(v57, v58, 0, 0, v59, v60, v62, v64, v65, 3);

            }
            else
            {
              v104 = objc_msgSend(objc_alloc((Class)DACarKeyGenericCrossPlatformSharingData), "initWithSharingIdentifier:friendKeyIdentifier:sharingMessageType:message:", *(_QWORD *)(a1 + 200), 0, 3, *(_QWORD *)(a1 + 40));
              v116 = objc_alloc((Class)DACarKeyAdditionalCrossPlatformSharingData);
              v117 = sub_1000117DC(*(_QWORD *)(a1 + 24));
              v118 = (void *)objc_claimAutoreleasedReturnValue(v117);
              v119 = sub_1002225E0(*(_QWORD *)(a1 + 24));
              if (*(_QWORD *)(a1 + 80))
              {
                v120 = sub_100234998(*(dispatch_queue_t **)(a1 + 120));
                v121 = (void *)objc_claimAutoreleasedReturnValue(v120);
                v122 = objc_msgSend(v116, "initWithSharingSessionUUID:bindingAttestation:targetDeviceType:initiatorIdsPseudonym:", v118, 0, v119, v121);

              }
              else
              {
                v122 = objc_msgSend(v116, "initWithSharingSessionUUID:bindingAttestation:targetDeviceType:initiatorIdsPseudonym:", v118, 0, v119, 0);
              }

              v137 = objc_msgSend(objc_alloc((Class)DACarKeySharingMessage), "initWithGenericCrossPlatformSharingData:additionalData:privateData:", v104, v122, 0);
              v138 = (void *)objc_claimAutoreleasedReturnValue(+[KmlClientReporterFactory getReporter](KmlClientReporterFactory, "getReporter"));
              v139 = sub_10022ADB0(*(_QWORD *)(a1 + 24));
              v140 = (void *)objc_claimAutoreleasedReturnValue(v139);
              objc_msgSend(v138, "sendCrossPlatformSharingMessage:toMailboxIdentifier:", v137, v140);

              v141 = objc_loadWeakRetained((id *)(a1 + 184));
              if (v141)
              {
                v142 = objc_msgSend(objc_alloc((Class)DAShareInitiatorResult), "initInviteAcceptedResultWithResponse:", v137);
                v143 = objc_loadWeakRetained((id *)(a1 + 184));
                objc_msgSend(v143, "handleInitiatorMessageResult:", v142);

              }
              v144 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 200)), "UTF8String");
              KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 428, (uint64_t)v144, CFSTR("We don't get send results for cross-platform. Sharing is successful from our perspective."), v145, v146, v147, v149);
              sub_10020CAC0(a1, 13);

LABEL_47:
            }
            return;
          case 13:
            v66 = objc_retainAutorelease(*(id *)(a1 + 200));
            v67 = objc_msgSend(v66, "UTF8String");
            KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 435, (uint64_t)v67, CFSTR("Successfully shared key with friend. FriendKeyID:%@"), v68, v69, v70, *(_QWORD *)(a1 + 144));

            WeakRetained = (id)objc_claimAutoreleasedReturnValue(+[KmlClientReporterFactory getReporter](KmlClientReporterFactory, "getReporter"));
            objc_msgSend(WeakRetained, "sharingCompleteForInvitationIdentifier:friendKeyIdentifier:status:", *(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 144), 0);
            v71 = *(_QWORD *)(a1 + 120);
            v72 = sub_10002BA88(*(_QWORD *)(a1 + 24));
            v73 = (void *)objc_claimAutoreleasedReturnValue(v72);
            v74 = sub_100234860(v71, v73);

            sub_100234668(*(_QWORD *)(a1 + 120), *(void **)(a1 + 200));
            v75 = objc_loadWeakRetained((id *)(a1 + 216));
            objc_msgSend(v75, "handleSharingCompleteForInvitationIdentifier:localShare:bindingAttestationUsed:status:", *(_QWORD *)(a1 + 200), v74, *(_QWORD *)(a1 + 80) != 0, *(_QWORD *)(a1 + 128));

            sub_10020EF04(a1);
LABEL_22:

            return;
          case 14:
          case 15:
          case 16:
          case 17:
          case 18:
          case 19:
          case 20:
            return;
          case 21:
            v76 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 200)), "UTF8String");
            KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 455, (uint64_t)v76, CFSTR("Failed to send invitation."), v77, v78, v79, v148);
            v80 = KmlSignpostLogger();
            v81 = objc_claimAutoreleasedReturnValue(v80);
            v82 = v81;
            v83 = *(_QWORD *)(a1 + 160);
            if (v83 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v81))
            {
              v84 = *(_QWORD *)(a1 + 128);
              *(_DWORD *)buf = 138412290;
              v153 = v84;
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v82, OS_SIGNPOST_EVENT, v83, "OwnerFailedToSendInvitation", "error - %@", buf, 0xCu);
            }

            v85 = a1;
            v86 = 23;
            goto LABEL_41;
          case 22:
            v87 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 200)), "UTF8String");
            KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 461, (uint64_t)v87, CFSTR("Preparing to cancel sharing."), v88, v89, v90, v148);
            v91 = KmlSignpostLogger();
            v92 = objc_claimAutoreleasedReturnValue(v91);
            v93 = v92;
            v94 = *(_QWORD *)(a1 + 160);
            if (v94 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v92))
            {
              *(_WORD *)buf = 0;
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v93, OS_SIGNPOST_EVENT, v94, "OwnerSessionCancelled", "", buf, 2u);
            }

            sub_10020F504(a1);
            return;
          case 23:
            v95 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 200)), "UTF8String");
            KmlSharingLogFunc(OS_LOG_TYPE_ERROR, (uint64_t)"KmlOwnerSharingSession.m", 467, (uint64_t)v95, CFSTR("Error while sharing key."), v96, v97, v98, v148);
            v99 = KmlSignpostLogger();
            v100 = objc_claimAutoreleasedReturnValue(v99);
            v101 = v100;
            v102 = *(_QWORD *)(a1 + 160);
            if (v102 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v100))
            {
              v103 = *(_QWORD *)(a1 + 128);
              *(_DWORD *)buf = 138412290;
              v153 = v103;
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v101, OS_SIGNPOST_EVENT, v102, "OwnerSharingError", "error - %@", buf, 0xCu);
            }

            v104 = (id)objc_claimAutoreleasedReturnValue(+[KmlClientReporterFactory getReporter](KmlClientReporterFactory, "getReporter"));
            objc_msgSend(v104, "sharingCompleteForInvitationIdentifier:friendKeyIdentifier:status:", *(_QWORD *)(a1 + 200), 0, *(_QWORD *)(a1 + 128));
            v105 = *(_QWORD *)(a1 + 120);
            v106 = sub_10002BA88(*(_QWORD *)(a1 + 24));
            v107 = (void *)objc_claimAutoreleasedReturnValue(v106);
            v108 = sub_100234860(v105, v107);

            sub_100234668(*(_QWORD *)(a1 + 120), *(void **)(a1 + 200));
            v109 = objc_loadWeakRetained((id *)(a1 + 216));
            objc_msgSend(v109, "handleSharingCompleteForInvitationIdentifier:localShare:bindingAttestationUsed:status:", *(_QWORD *)(a1 + 200), v108, *(_QWORD *)(a1 + 80) != 0, *(_QWORD *)(a1 + 128));

            goto LABEL_47;
          default:
            if (a2 != 31)
              return;
            v24 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 200)), "UTF8String");
            v28 = CFSTR("Object can be safely removed.");
            v29 = 488;
            goto LABEL_7;
        }
      }
      if (a2 == 2)
      {
        v110 = *(void **)(a1 + 200);
        if (v110)
        {
          sub_100234518(*(_QWORD *)(a1 + 120), (void *)a1, v110);
          v111 = sub_10024E5DC(*(_QWORD *)(a1 + 24));
          v112 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 200)), "UTF8String");
          if (v111)
          {
            KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 354, (uint64_t)v112, CFSTR("Checking transport for IDS"), v113, v114, v115, v148);
            sub_1002347A4(*(_QWORD *)(a1 + 120), *(void **)(a1 + 200));
          }
          else
          {
            KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 357, (uint64_t)v112, CFSTR("No need to check transport for Cross-platform sharing"), v113, v114, v115, v148);
            v133 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 200)), "UTF8String");
            KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 358, (uint64_t)v133, CFSTR("Also we don't get notified when invitations are sent"), v134, v135, v136, v150);
            sub_10020CAC0(a1, 11);
          }
        }
        else
        {
          v123 = objc_msgSend(0, "UTF8String");
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 348, (uint64_t)v123, CFSTR("Never built an invitation. Error out"), v124, v125, v126, v148);
          v127 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
          v154 = NSLocalizedDescriptionKey;
          v128 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(109));
          v129 = (void *)objc_claimAutoreleasedReturnValue(v128);
          v155 = v129;
          v130 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v155, &v154, 1));
          v131 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v127, 109, v130));
          v132 = *(void **)(a1 + 128);
          *(_QWORD *)(a1 + 128) = v131;

          v85 = a1;
          v86 = 21;
LABEL_41:
          sub_10020CAC0(v85, v86);
        }
      }
      else if (a2 == 3)
      {
        v30 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 200)), "UTF8String");
        KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 365, (uint64_t)v30, CFSTR("Send sharing invitation"), v31, v32, v33, v148);
        v34 = KmlSignpostLogger();
        v35 = objc_claimAutoreleasedReturnValue(v34);
        v36 = v35;
        v37 = *(_QWORD *)(a1 + 160);
        if (v37 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v35))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v36, OS_SIGNPOST_EVENT, v37, "OwnerSendInvitation", "", buf, 2u);
        }

        v38 = *(_QWORD *)(a1 + 120);
        v39 = *(void **)(a1 + 208);
        v40 = sub_1002225C4(*(_QWORD *)(a1 + 24));
        v41 = (void *)objc_claimAutoreleasedReturnValue(v40);
        v42 = *(void **)(a1 + 200);
        v43 = sub_1000117DC(*(_QWORD *)(a1 + 24));
        v44 = (void *)objc_claimAutoreleasedReturnValue(v43);
        v45 = sub_10002BA88(*(_QWORD *)(a1 + 24));
        v46 = (void *)objc_claimAutoreleasedReturnValue(v45);
        v47 = sub_1002225E0(*(_QWORD *)(a1 + 24));
        sub_100234AC4(v38, v39, v41, 0, v42, 0, v44, v46, v47, 1);

      }
    }
  }
}

void sub_10020EF04(uint64_t a1)
{
  id WeakRetained;
  id v3;
  _BOOL8 v4;
  _BOOL4 v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const __CFString *v19;
  void *v20;
  const __CFString *v21;
  void *v22;
  const __CFString *v23;
  void *v24;
  uint64_t v25;
  id v26;
  int v27;
  void *v28;
  id v29;
  uint64_t v30;
  NSNumber *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  NSNumber *v35;
  void *v36;
  uint64_t v37;
  void *v38;
  const __CFString *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  void *v47;
  __CFString *v48;
  void *v49;
  void *v50;
  uint64_t v51;
  void *v52;
  unsigned int v53;
  unsigned int v54;
  __CFString *v55;
  void *v56;
  void *v57;
  __CFString *v58;
  id v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  _QWORD v64[25];
  _QWORD v65[25];

  if (a1)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 216));
    v59 = objc_msgSend(WeakRetained, "getTotalNumberOfSharedKeys");

    v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 104), "readerInfo"));
    v3 = objc_msgSend(objc_alloc((Class)KmlRoutingInformation), "initWithReaderInformation:", v63);
    v4 = sub_10022F124(*(_QWORD *)(a1 + 152));
    v5 = sub_10022F138(*(_QWORD *)(a1 + 152));
    v6 = 2;
    if (!v5)
      v6 = 0;
    v51 = v6 | v4;
    v7 = sub_1002299DC(*(_QWORD *)(a1 + 24));
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    v9 = v8 != 0;

    v54 = sub_10024DE64(*(_QWORD *)(a1 + 24)) | (2 * v9);
    v10 = *(_QWORD *)(a1 + 120);
    v11 = sub_10002BA88(*(_QWORD *)(a1 + 24));
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    LODWORD(v10) = sub_100234860(v10, v12);

    if ((_DWORD)v10)
      v17 = 1;
    else
      v17 = 2;
    if (v3)
    {
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "manufacturer"));
      v19 = (const __CFString *)objc_msgSend(v18, "copy");

      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "brand"));
      v21 = (const __CFString *)objc_msgSend(v20, "copy");

      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "regionString"));
      v23 = (const __CFString *)objc_msgSend(v22, "copy");

    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerSharingSession reportSharingEventToCA]", 1074, CFSTR("No routing info available"), v13, v14, v15, v16, v46);
      v19 = CFSTR("Unknown");
      v21 = CFSTR("Unknown");
      v23 = CFSTR("Unknown");
    }
    v62 = v3;
    v24 = *(void **)(a1 + 128);
    if (v24)
    {
      v25 = *(_QWORD *)(a1 + 16);
      v26 = objc_msgSend(v24, "code");
    }
    else
    {
      v26 = 0;
      v25 = *(_QWORD *)(a1 + 8);
    }
    v27 = objc_msgSend(*(id *)(a1 + 176), "agreedKmlVehicleVersion") == 768;
    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 104), "configuration"));
    v53 = kmlUtilKeyClassOriginBitmap(objc_msgSend(v28, "opt2"));

    v29 = sub_100219A88(*(_QWORD *)(a1 + 176));
    v30 = objc_claimAutoreleasedReturnValue(v29);
    v64[0] = CFSTR("destination");
    v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v17));
    v65[0] = v61;
    v65[1] = &off_100322FE0;
    v64[1] = CFSTR("type");
    v64[2] = CFSTR("targetDeviceType");
    v31 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", sub_1002225E0(*(_QWORD *)(a1 + 24)));
    v57 = (void *)objc_claimAutoreleasedReturnValue(v31);
    v65[2] = v57;
    v64[3] = CFSTR("step");
    v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v25));
    v65[3] = v56;
    v65[4] = v23;
    v58 = (__CFString *)v23;
    v64[4] = CFSTR("dataCenterCode");
    v64[5] = CFSTR("manufacturer");
    v65[5] = v19;
    v65[6] = v21;
    v64[6] = CFSTR("brand");
    v64[7] = CFSTR("transportSupported");
    v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v51));
    v65[7] = v52;
    v64[8] = CFSTR("totalSharedKeysForOwnerKey");
    v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v59));
    v65[8] = v60;
    v64[9] = CFSTR("status");
    v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v26));
    v65[9] = v50;
    v64[10] = CFSTR("activationOption");
    v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v54));
    v65[10] = v49;
    v64[11] = CFSTR("sharingTransport");
    if (sub_10024E5DC(*(_QWORD *)(a1 + 24)))
      v32 = 1;
    else
      v32 = 2;
    v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v32));
    v65[11] = v33;
    v64[12] = CFSTR("pinAttempts");
    v34 = sub_1002299F4(*(_QWORD *)(a1 + 24));
    v35 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v34 - sub_1002299E8(*(_QWORD *)(a1 + 24)));
    v55 = (__CFString *)v19;
    v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
    v65[12] = v36;
    v64[13] = CFSTR("appleToApple");
    v37 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(_QWORD *)(a1 + 80) != 0));
    v47 = (void *)v30;
    v48 = (__CFString *)v21;
    v38 = (void *)v37;
    v39 = &stru_100316BD0;
    if (v30)
      v39 = (const __CFString *)v30;
    v65[13] = v37;
    v65[14] = v39;
    v64[14] = CFSTR("senderSupportedFrameworkVersions");
    v64[15] = CFSTR("receiverSupportedFrameworkVersions");
    v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%04X"), objc_msgSend(*(id *)(a1 + 176), "agreedKmlSharingVersion")));
    v65[15] = v40;
    v64[16] = CFSTR("attestationChainLength");
    v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *(unsigned __int8 *)(a1 + 97)));
    v65[16] = v41;
    v65[17] = &off_100322FF8;
    v64[17] = CFSTR("certificateChainLength");
    v64[18] = CFSTR("accountRole");
    v65[18] = &off_100322FF8;
    v65[19] = &off_100322FF8;
    v64[19] = CFSTR("isIntraAccountShare");
    v64[20] = CFSTR("wasUserAuthRequired");
    v65[20] = &off_100322FF8;
    v64[21] = CFSTR("mailboxVersion");
    v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", (v27 << 7)));
    v65[21] = v42;
    v64[22] = CFSTR("frameworkVersion");
    v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", objc_msgSend(*(id *)(a1 + 176), "agreedKmlSharingVersion")));
    v65[22] = v43;
    v65[23] = &off_100322FF8;
    v64[23] = CFSTR("accessProfile");
    v64[24] = CFSTR("keyClassOriginBitmap");
    v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v53));
    v65[24] = v44;
    v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v65, v64, 25));

    sub_100211BC8((uint64_t)KmlAnalyticsLogger, v45);
  }
}

void sub_10020F504(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[5];

  if (a1)
  {
    v1 = *(NSObject **)(a1 + 168);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10020F560;
    block[3] = &unk_100302AA0;
    block[4] = a1;
    dispatch_async(v1, block);
  }
}

void sub_10020F560(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  NSString *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  uint64_t *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  void *v29;
  id v30;
  void *v31;
  uint64_t v32;
  void *v33;
  id WeakRetained;
  id v35;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  NSErrorUserInfoKey v40;
  void *v41;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    v3 = *(void **)(v2 + 200);
  else
    v3 = 0;
  v4 = objc_msgSend(objc_retainAutorelease(v3), "UTF8String");
  KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 499, (uint64_t)v4, CFSTR("Cancelling sharing as per user request."), v5, v6, v7, v39);
  if (!*(_QWORD *)(*(_QWORD *)(a1 + 32) + 128))
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
    v40 = NSLocalizedDescriptionKey;
    v9 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(105));
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    v41 = v10;
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v41, &v40, 1));
    v12 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v8, 105, v11));
    v13 = *(_QWORD *)(a1 + 32);
    v14 = *(void **)(v13 + 128);
    *(_QWORD *)(v13 + 128) = v12;

  }
  v15 = sub_100238330([KmlCancelMessage alloc], (int)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 128), "code"));
  v16 = sub_1002383B4((uint64_t)v15);
  v17 = (void *)objc_claimAutoreleasedReturnValue(v16);

  if (sub_10024E5DC(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24)))
  {
    v18 = *(uint64_t **)(a1 + 32);
    v19 = v18[15];
    v20 = (void *)v18[25];
    v21 = (void *)v18[18];
    v22 = sub_1000117DC(v18[3]);
    v23 = (id)objc_claimAutoreleasedReturnValue(v22);
    v24 = sub_10002BA88(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24));
    v25 = (id)objc_claimAutoreleasedReturnValue(v24);
    v26 = sub_1002225E0(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24));
    sub_100234AC4(v19, v17, 0, 0, v20, v21, v23, v25, v26, 4);
  }
  else
  {
    v23 = objc_msgSend(objc_alloc((Class)DACarKeyGenericCrossPlatformSharingData), "initWithSharingIdentifier:friendKeyIdentifier:sharingMessageType:message:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 200), 0, 4, v17);
    v27 = objc_alloc((Class)DACarKeyAdditionalCrossPlatformSharingData);
    v28 = sub_1000117DC(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24));
    v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
    v25 = objc_msgSend(v27, "initWithSharingSessionUUID:bindingAttestation:targetDeviceType:initiatorIdsPseudonym:", v29, 0, sub_1002225E0(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24)), 0);

    v30 = objc_msgSend(objc_alloc((Class)DACarKeySharingMessage), "initWithGenericCrossPlatformSharingData:additionalData:privateData:", v23, v25, 0);
    v31 = (void *)objc_claimAutoreleasedReturnValue(+[KmlClientReporterFactory getReporter](KmlClientReporterFactory, "getReporter"));
    v32 = sub_10022ADB0(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24));
    v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
    objc_msgSend(v31, "sendCrossPlatformSharingMessage:toMailboxIdentifier:", v30, v33);

    WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 184));
    if (WeakRetained)
    {
      v35 = objc_msgSend(objc_alloc((Class)DAShareInitiatorResult), "initFailureResultWithResponse:error:", v30, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 128));
      v36 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 184));
      objc_msgSend(v36, "handleInitiatorMessageResult:", v35);

    }
    v37 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 192));

    if (v37)
    {
      v38 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 192));
      objc_msgSend(v38, "handleSharingCancelledMessage:", v30);

    }
  }

  sub_10020CAC0(*(_QWORD *)(a1 + 32), 23);
}

void sub_10020F8F8(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[5];

  if (a1)
  {
    v1 = *(NSObject **)(a1 + 168);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10020F954;
    block[3] = &unk_100302AA0;
    block[4] = a1;
    dispatch_async(v1, block);
  }
}

void sub_10020F954(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _WORD *v9;
  void *v10;
  id v11;
  uint64_t *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  void *v23;
  id v24;
  void *v25;
  uint64_t v26;
  void *v27;
  id WeakRetained;
  id v29;
  id v30;
  uint64_t v31;
  id v32;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    v3 = *(void **)(v2 + 200);
  else
    v3 = 0;
  v4 = objc_msgSend(objc_retainAutorelease(v3), "UTF8String");
  KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 558, (uint64_t)v4, CFSTR("Passcode needs to be retried"), v5, v6, v7, v31);
  v8 = sub_1002299E8(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24));
  v9 = sub_10022CB90((uint64_t)KmlTlv, 40727, v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  v11 = sub_10022D014((uint64_t)v10);
  v32 = (id)objc_claimAutoreleasedReturnValue(v11);

  if (sub_10024E5DC(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24)))
  {
    v12 = *(uint64_t **)(a1 + 32);
    v13 = v12[15];
    v14 = (void *)v12[25];
    v15 = (void *)v12[18];
    v16 = sub_1000117DC(v12[3]);
    v17 = (id)objc_claimAutoreleasedReturnValue(v16);
    v18 = sub_10002BA88(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24));
    v19 = (id)objc_claimAutoreleasedReturnValue(v18);
    v20 = sub_1002225E0(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24));
    sub_100234AC4(v13, v32, 0, 0, v14, v15, v17, v19, v20, 6);
  }
  else
  {
    v17 = objc_msgSend(objc_alloc((Class)DACarKeyGenericCrossPlatformSharingData), "initWithSharingIdentifier:friendKeyIdentifier:sharingMessageType:message:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 200), 0, 6, v32);
    v21 = objc_alloc((Class)DACarKeyAdditionalCrossPlatformSharingData);
    v22 = sub_1000117DC(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24));
    v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
    v19 = objc_msgSend(v21, "initWithSharingSessionUUID:bindingAttestation:targetDeviceType:initiatorIdsPseudonym:", v23, 0, sub_1002225E0(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24)), 0);

    v24 = objc_msgSend(objc_alloc((Class)DACarKeySharingMessage), "initWithGenericCrossPlatformSharingData:additionalData:privateData:", v17, v19, 0);
    v25 = (void *)objc_claimAutoreleasedReturnValue(+[KmlClientReporterFactory getReporter](KmlClientReporterFactory, "getReporter"));
    v26 = sub_10022ADB0(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24));
    v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
    objc_msgSend(v25, "sendCrossPlatformSharingMessage:toMailboxIdentifier:", v24, v27);

    WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 184));
    if (WeakRetained)
    {
      v29 = objc_msgSend(objc_alloc((Class)DAShareInitiatorResult), "initDataRequiredResultWithResponse:", v24);
      v30 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 184));
      objc_msgSend(v30, "handleInitiatorMessageResult:", v29);

    }
  }

}

id sub_10020FBB8(uint64_t a1)
{
  uint64_t v1;
  KmlDeviceConfigurationData *v2;
  void *v3;
  _BYTE *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id DckIdFromSlotId;
  void *v12;
  void *v13;
  id OOBKey;
  void *v15;
  int v16;
  void *v17;
  const __CFString *v18;
  void *v19;
  _BYTE *v20;

  v1 = a1;
  if (a1)
  {
    v2 = [KmlDeviceConfigurationData alloc];
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 104), "deviceConfiguration"));
    v4 = (_BYTE *)sub_10022D114((uint64_t)v2, v3);

    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 104), "bleIntroKey"));
    sub_1000536E4((uint64_t)v4, v5);

    v6 = sub_10022ADB0((uint64_t)v4);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);

    if (!v7)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 104), "bleAddress"));
      sub_100048A08((uint64_t)v4, v8);

    }
    v9 = sub_10022ADE0(*(_QWORD *)(v1 + 24));
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    DckIdFromSlotId = kmlUtilGetDckIdFromSlotId(v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue(DckIdFromSlotId);

    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 104), "bleOOBMasterKey"));
    OOBKey = kmlUtilGetOOBKey(v13, v12);
    v15 = (void *)objc_claimAutoreleasedReturnValue(OOBKey);
    sub_10021F9A8((uint64_t)v4, v15);

    if (*(_QWORD *)(v1 + 8) == 1)
    {
      v16 = 1;
    }
    else
    {
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 104), "subjectIdentifier"));
      v18 = sub_100254798((uint64_t)KmlEndpointManager, v17);
      v19 = (void *)objc_claimAutoreleasedReturnValue(v18);

      v16 = (objc_msgSend(v19, "isEqualToString:", CFSTR("OWNR")) & 1) == 0
         && objc_msgSend(*(id *)(v1 + 176), "agreedKmlSharingVersion") == 256;

    }
    v20 = sub_10022DCC4(v4, v16);
    v1 = objc_claimAutoreleasedReturnValue(v20);

  }
  return (id)v1;
}

void sub_10020FD5C(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  _WORD *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  int v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  _WORD *v23;
  void *v24;
  uint64_t v25;
  _WORD *v26;
  void *v27;
  _WORD *v28;
  void *v29;
  void *v30;
  _WORD *v31;
  void *v32;
  void *v33;
  _WORD *v34;
  void *v35;
  void *v36;
  _WORD *v37;
  void *v38;
  void *v39;
  _WORD *v40;
  void *v41;
  void *v42;
  id v43;
  id v44;
  id v45;
  uint64_t v46;
  void *v47;
  id v48;
  void *v49;
  _WORD *v50;
  void *v51;
  id v52;
  uint64_t v53;
  void *v54;
  void *v55;
  id v56;
  id v57;
  id v58;
  uint64_t v59;
  void *v60;
  id v61;
  void *v62;
  void *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  char v72;
  _BYTE v73[128];
  _BYTE v74[128];

  if (!a1)
    return;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  if ((sub_10022DC4C(*(_QWORD *)(a1 + 152)) & 1) == 0)
  {
    v4 = sub_10022ADE0(*(_QWORD *)(a1 + 24));
    v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    v6 = sub_10022CB3C((uint64_t)KmlTlv, 4, v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    objc_msgSend(v2, "addObject:", v7);

  }
  v72 = 0;
  if (sub_10024DE64(*(_QWORD *)(a1 + 24)) && sub_10022F14C(*(_QWORD *)(a1 + 152)))
  {
    v8 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 200)), "UTF8String");
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 958, (uint64_t)v8, CFSTR("activation option is required"), v9, v10, v11, v64);
    v72 = 1;
    v12 = sub_1002299D0(*(_QWORD *)(a1 + 24));
    v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    if (!objc_msgSend(v13, "length"))
    {
LABEL_11:

      goto LABEL_12;
    }
    v14 = sub_100217298(*(_QWORD *)(a1 + 24));
    v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    if (!objc_msgSend(v15, "length"))
    {
LABEL_10:

      goto LABEL_11;
    }
    v16 = sub_10022F160(*(_QWORD *)(a1 + 152));

    if (v16)
    {
      v17 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 200)), "UTF8String");
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 961, (uint64_t)v17, CFSTR("VEP can be an activation option"), v18, v19, v20, v64);
      v21 = sub_1002299D0(*(_QWORD *)(a1 + 24));
      v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
      v23 = sub_10022CB3C((uint64_t)KmlTlv, 4, v22);
      v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
      objc_msgSend(v2, "addObject:", v24);

      v25 = sub_1002299D0(*(_QWORD *)(a1 + 24));
      v13 = (void *)objc_claimAutoreleasedReturnValue(v25);
      v26 = sub_10022CB3C((uint64_t)KmlTlv, 68, v13);
      v15 = (void *)objc_claimAutoreleasedReturnValue(v26);
      objc_msgSend(v3, "addObject:", v15);
      goto LABEL_10;
    }
  }
LABEL_12:
  v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", &v72, 1));
  v28 = sub_10022CB3C((uint64_t)KmlTlv, 1, v27);
  v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
  objc_msgSend(v2, "addObject:", v29);

  v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", &v72, 1));
  v31 = sub_10022CB3C((uint64_t)KmlTlv, 215, v30);
  v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
  objc_msgSend(v3, "addObject:", v32);

  if (sub_10022DC4C(*(_QWORD *)(a1 + 152)))
  {
    v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 104), "readerIdentifier"));
    v34 = sub_10022CB3C((uint64_t)KmlTlv, 4, v33);
    v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
    objc_msgSend(v2, "addObject:", v35);

    v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 104), "readerIdentifier"));
    v37 = sub_10022CB3C((uint64_t)KmlTlv, 77, v36);
    v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
    objc_msgSend(v3, "addObject:", v38);

  }
  v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 104), "slotIdentifier"));
  v40 = sub_10022CB3C((uint64_t)KmlTlv, 130, v39);
  v41 = (void *)objc_claimAutoreleasedReturnValue(v40);
  objc_msgSend(v3, "addObject:", v41);

  v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData data](NSMutableData, "data"));
  objc_msgSend(v42, "appendData:", *(_QWORD *)(a1 + 56));
  v70 = 0u;
  v71 = 0u;
  v68 = 0u;
  v69 = 0u;
  v43 = v2;
  v44 = objc_msgSend(v43, "countByEnumeratingWithState:objects:count:", &v68, v74, 16);
  if (v44)
  {
    v45 = v44;
    v46 = *(_QWORD *)v69;
    do
    {
      v47 = 0;
      do
      {
        if (*(_QWORD *)v69 != v46)
          objc_enumerationMutation(v43);
        v48 = sub_10022D014(*(_QWORD *)(*((_QWORD *)&v68 + 1) + 8 * (_QWORD)v47));
        v49 = (void *)objc_claimAutoreleasedReturnValue(v48);
        objc_msgSend(v42, "appendData:", v49);

        v47 = (char *)v47 + 1;
      }
      while (v45 != v47);
      v45 = objc_msgSend(v43, "countByEnumeratingWithState:objects:count:", &v68, v74, 16);
    }
    while (v45);
  }

  v50 = sub_10022CB3C((uint64_t)KmlTlv, 48, v42);
  v51 = (void *)objc_claimAutoreleasedReturnValue(v50);
  v52 = sub_10022D014((uint64_t)v51);
  v53 = objc_claimAutoreleasedReturnValue(v52);
  v54 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v53;

  v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData data](NSMutableData, "data"));
  objc_msgSend(v55, "appendData:", *(_QWORD *)(a1 + 72));
  v66 = 0u;
  v67 = 0u;
  v64 = 0u;
  v65 = 0u;
  v56 = v3;
  v57 = objc_msgSend(v56, "countByEnumeratingWithState:objects:count:", &v64, v73, 16);
  if (v57)
  {
    v58 = v57;
    v59 = *(_QWORD *)v65;
    do
    {
      v60 = 0;
      do
      {
        if (*(_QWORD *)v65 != v59)
          objc_enumerationMutation(v56);
        v61 = sub_10022D014(*(_QWORD *)(*((_QWORD *)&v64 + 1) + 8 * (_QWORD)v60));
        v62 = (void *)objc_claimAutoreleasedReturnValue(v61);
        objc_msgSend(v55, "appendData:", v62, (_QWORD)v64);

        v60 = (char *)v60 + 1;
      }
      while (v58 != v60);
      v58 = objc_msgSend(v56, "countByEnumeratingWithState:objects:count:", &v64, v73, 16);
    }
    while (v58);
  }

  v63 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v55;

}

void sub_1002102A4(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  id *v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  id *v39;
  uint64_t v40;
  id *v41;
  void *v42;
  uint64_t v43;
  id *v44;
  id *v45;
  void *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  __int16 v50;
  __int16 v51;
  uint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  void *v58;
  id v59;
  void *v60;
  void *v61;
  id v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  void *v68;
  uint64_t v69;
  void *v70;
  id v71;
  void *v72;
  id v73;
  id v74;
  id v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  void *v81;
  id v82;
  id v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  void *v89;
  SharingSignedResponse *v90;
  uint64_t v91;
  _BOOL4 v92;
  id v93;
  uint64_t v94;
  void *v95;
  id v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  void *v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  void *v106;
  NSString *v107;
  void *v108;
  void *v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  void *v115;
  id *v116;
  id *v117;
  void *v118;
  unsigned int v119;
  void *v120;
  id v121;
  id v122;
  _QWORD v123[2];
  _QWORD v124[2];

  if (a1)
  {
    v2 = objc_retainAutorelease(*(id *)(a1 + 200));
    v3 = objc_msgSend(v2, "UTF8String");
    v4 = sub_100016AC8(*(_QWORD *)(a1 + 32));
    v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

    v6 = kmlUtilHexStringFromData(v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 736, (uint64_t)v3, CFSTR("encryption attestation - %@"), v8, v9, v10, (uint64_t)v7);

    LODWORD(v7) = objc_msgSend(*(id *)(a1 + 176), "agreedKmlSharingVersion");
    v11 = objc_retainAutorelease(*(id *)(a1 + 200));
    v12 = objc_msgSend(v11, "UTF8String");
    if ((_DWORD)v7 == 768)
    {
      v13 = (id *)(a1 + 64);
      v14 = kmlUtilHexStringFromData(*(void **)(a1 + 64));
      v15 = (void *)objc_claimAutoreleasedReturnValue(v14);

      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 741, (uint64_t)v12, CFSTR("Extracted entitlements data (TLV) : %@ "), v16, v17, v18, (uint64_t)v15);
      v19 = 3;
    }
    else
    {
      v13 = (id *)(a1 + 48);
      v20 = kmlUtilHexStringFromData(*(void **)(a1 + 48));
      v15 = (void *)objc_claimAutoreleasedReturnValue(v20);

      v19 = 1;
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 745, (uint64_t)v12, CFSTR("Extracted entitlements data (ASN1) : %@ "), v21, v22, v23, (uint64_t)v15);
    }

    v121 = *v13;
    if (*(_BYTE *)(a1 + 96)
      || (v24 = sub_10022ADBC(*(_QWORD *)(a1 + 24)),
          v25 = (void *)objc_claimAutoreleasedReturnValue(v24),
          v25,
          v25))
    {
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 104), "publicKeyIdentifier"));
      v27 = kmlUtilHexStringFromData(v26);
      v28 = objc_claimAutoreleasedReturnValue(v27);

      v29 = sub_1000117DC(*(_QWORD *)(a1 + 24));
      v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
      v31 = kmlUtilUUIDToData(v30);
      v120 = (void *)objc_claimAutoreleasedReturnValue(v31);

      v119 = v19;
      v118 = (void *)v28;
      if (*(_BYTE *)(a1 + 96))
      {
        v32 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 200)), "UTF8String");
        KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 761, (uint64_t)v32, CFSTR("Prepare for authless share by providing out bindingAttestation to applet"), v33, v34, v35, v112);
        v36 = SESEndpointPreAuthorizeWithSession(0, 0, v28, *(_QWORD *)(a1 + 88));
        v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
      }
      else
      {
        v37 = 0;
      }
      v38 = sub_1000117D0(*(_QWORD *)(a1 + 32));
      v117 = (id *)objc_claimAutoreleasedReturnValue(v38);
      v39 = sub_10022CD6C(v117);
      v115 = (void *)objc_claimAutoreleasedReturnValue(v39);
      v40 = sub_1000117DC(*(_QWORD *)(a1 + 32));
      v116 = (id *)objc_claimAutoreleasedReturnValue(v40);
      v41 = sub_10022CD6C(v116);
      v42 = (void *)objc_claimAutoreleasedReturnValue(v41);
      v43 = sub_10002BA88(*(_QWORD *)(a1 + 32));
      v44 = (id *)objc_claimAutoreleasedReturnValue(v43);
      v45 = sub_10022CD6C(v44);
      v46 = (void *)objc_claimAutoreleasedReturnValue(v45);
      v47 = sub_100016AC8(*(_QWORD *)(a1 + 32));
      v48 = (void *)objc_claimAutoreleasedReturnValue(v47);
      v49 = *(_QWORD *)(a1 + 80);
      v50 = sub_10024DE4C(*(_QWORD *)(a1 + 24));
      v51 = sub_10021E480(*(_QWORD *)(a1 + 24));
      v52 = sub_10022ADBC(*(_QWORD *)(a1 + 24));
      v53 = (void *)objc_claimAutoreleasedReturnValue(v52);
      v122 = v37;
      HIWORD(v114) = v51;
      LOWORD(v114) = v50;
      v113 = v49;
      v54 = v118;
      v55 = SESEndPointAuthorizeWithSession(0, 0, v119, v118, v115, v42, v46, v48, v113, v120, v114, v121, v53, &v122);
      v56 = objc_claimAutoreleasedReturnValue(v55);
      v57 = v122;
      v58 = v37;
      v59 = v57;

      v60 = *(void **)(a1 + 112);
      *(_QWORD *)(a1 + 112) = v56;

      v61 = v59;
      if (v59)
      {
        v62 = objc_retainAutorelease(*(id *)(a1 + 200));
        v63 = objc_msgSend(v62, "UTF8String");
        KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 785, (uint64_t)v63, CFSTR("Error while signing the request %@"), v64, v65, v66, (uint64_t)v59);

        v67 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
        v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v59, "userInfo"));
        v69 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v67, 204, v68));
        v70 = *(void **)(a1 + 128);
        *(_QWORD *)(a1 + 128) = v69;

        sub_10020CAC0(a1, 22);
      }
      else
      {
        v71 = objc_alloc((Class)NSData);
        v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 104), "mailboxMapping"));
        v73 = objc_msgSend(v71, "initWithData:", v72);

        v74 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 200)), "UTF8String");
        v75 = kmlUtilHexStringFromData(v73);
        v76 = (void *)objc_claimAutoreleasedReturnValue(v75);
        KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 792, (uint64_t)v74, CFSTR("mappingData:%@"), v77, v78, v79, (uint64_t)v76);

        v80 = sub_10020FBB8(a1);
        v81 = (void *)objc_claimAutoreleasedReturnValue(v80);
        v82 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 200)), "UTF8String");
        v83 = kmlUtilHexStringFromData(v81);
        v84 = (void *)objc_claimAutoreleasedReturnValue(v83);
        KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 795, (uint64_t)v82, CFSTR("SupportedRadiosData:%@"), v85, v86, v87, (uint64_t)v84);

        v88 = sub_1002109E8(a1);
        v89 = (void *)objc_claimAutoreleasedReturnValue(v88);
        kmlUtilLogLargeData(CFSTR("AdditionalAttestations"), v89);
        v90 = objc_alloc_init(SharingSignedResponse);
        sub_1002225D0((uint64_t)v90, *(void **)(a1 + 176));
        v91 = *(_QWORD *)(a1 + 112);
        v92 = sub_10024DE78(*(_QWORD *)(a1 + 24));
        v93 = sub_100221740((uint64_t)v90, v91, v73, v81, v92, v89);
        v94 = objc_claimAutoreleasedReturnValue(v93);
        v95 = *(void **)(a1 + 40);
        *(_QWORD *)(a1 + 40) = v94;

        v96 = sub_100210F14((_QWORD *)a1);
        v61 = (void *)objc_claimAutoreleasedReturnValue(v96);
        if (v61)
        {
          v97 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 200)), "UTF8String");
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 813, (uint64_t)v97, CFSTR("Error while setting signaling bitmap %@"), v98, v99, v100, (uint64_t)v61);
          v101 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
          v102 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v61, "userInfo"));
          v103 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v101, 204, v102));
          v104 = *(void **)(a1 + 128);
          *(_QWORD *)(a1 + 128) = v103;

          v105 = 22;
        }
        else
        {
          v105 = 12;
        }
        sub_10020CAC0(a1, v105);

        v54 = v118;
      }

    }
    else
    {
      v106 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
      v123[0] = NSLocalizedDescriptionKey;
      v107 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(105));
      v108 = (void *)objc_claimAutoreleasedReturnValue(v107);
      v123[1] = NSLocalizedFailureReasonErrorKey;
      v124[0] = v108;
      v124[1] = CFSTR("Missing user auth");
      v109 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v124, v123, 2));
      v110 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v106, 105, v109));
      v111 = *(void **)(a1 + 128);
      *(_QWORD *)(a1 + 128) = v110;

      sub_10020CAC0(a1, 22);
    }

  }
}

id sub_1002109E8(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  KmlMailboxMappingData *v6;
  void *v7;
  char *v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t PrivateData;
  void *v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v22;
  uint64_t v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  __int16 v30;
  unsigned __int16 v31;
  int v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int16 v37;
  __int16 v38;
  int v39;
  void *v40;
  id v41;
  void *v42;
  id v43;
  id v44;
  id v45;
  char v46;
  uint64_t v47;
  __int16 v48;
  void *i;
  uint64_t v50;
  id v51;
  void *v52;
  _WORD *v53;
  void *v54;
  id v55;
  void *v56;
  id v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  void *v65;
  char *v66;
  id v67;
  __int16 v68;
  unsigned int v69;
  void *v70;
  int v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  id v76;
  _BYTE v77[128];

  if (!a1 || objc_msgSend(*(id *)(a1 + 176), "agreedKmlSharingVersion") != 768)
    return 0;
  v2 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 200)), "UTF8String");
  KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 860, (uint64_t)v2, CFSTR("Let's check for additional attestation packages to send"), v3, v4, v5, v63);
  v6 = [KmlMailboxMappingData alloc];
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 104), "mailboxMapping"));
  v8 = sub_10022A0B4((char *)v6, v7, (__int16)objc_msgSend(*(id *)(a1 + 176), "agreedKmlSharingVersion"));

  LOWORD(v7) = sub_10022AAF0((uint64_t)v8);
  LOWORD(v6) = (_WORD)v7 - sub_10022AAE4((uint64_t)v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 104), "publicKeyIdentifier"));
  v10 = kmlUtilHexStringFromData(v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue(v10);

  v12 = sub_10022AAE4((uint64_t)v8);
  v76 = 0;
  PrivateData = SESEndPointGetPrivateData(v11, v12, (unsigned __int16)v6, &v76);
  v14 = (void *)objc_claimAutoreleasedReturnValue(PrivateData);
  v15 = v76;
  if (v15)
  {
    v16 = objc_retainAutorelease(*(id *)(a1 + 200));
    v17 = objc_msgSend(v16, "UTF8String");
    KmlSharingLogFunc(OS_LOG_TYPE_ERROR, (uint64_t)"KmlOwnerSharingSession.m", 873, (uint64_t)v17, CFSTR("Error while getting signaling bitmap %@"), v18, v19, v20, (uint64_t)v15);

  }
  else
  {
    kmlUtilLogLargeData(CFSTR("Private Mailbox Data"), v14);
    v22 = objc_retainAutorelease(v14);
    v23 = *(unsigned __int8 *)objc_msgSend(v22, "bytes");
    if (sub_10022AA3C((uint64_t)v8, v23) && sub_10022AAD8(*(_QWORD *)(a1 + 152)) > 1)
    {
      v30 = sub_10022AAD8(*(_QWORD *)(a1 + 152));
      v31 = sub_10022AB14((uint64_t)v8) * v30;
      v32 = sub_10022AAF0((uint64_t)v8);
      if ((int)(v32 - sub_10022AB44((uint64_t)v8)) >= v31)
      {
        v64 = v14;
        v65 = v11;
        *(_BYTE *)(a1 + 97) = 0;
        v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData data](NSMutableData, "data"));
        v37 = sub_10022AB44((uint64_t)v8);
        v38 = sub_10022AAE4((uint64_t)v8);
        v66 = v8;
        v69 = sub_10022AB14((uint64_t)v8);
        if (sub_10022AAD8(*(_QWORD *)(a1 + 152)) >= 2)
        {
          v39 = 0;
          v68 = v37 - v38;
          v67 = v22;
          while (1)
          {
            v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "subdataWithRange:", (unsigned __int16)(v68 + v39 * v69), v69));
            v41 = sub_10022C7A4((uint64_t)KmlTlv, v40);
            v42 = (void *)objc_claimAutoreleasedReturnValue(v41);
            v72 = 0u;
            v73 = 0u;
            v74 = 0u;
            v75 = 0u;
            v43 = v42;
            v44 = objc_msgSend(v43, "countByEnumeratingWithState:objects:count:", &v72, v77, 16);
            if (!v44)
              break;
            v45 = v44;
            v70 = v40;
            v46 = 0;
            v47 = *(_QWORD *)v73;
            v71 = v39;
            v48 = v39 + 48;
            do
            {
              for (i = 0; i != v45; i = (char *)i + 1)
              {
                if (*(_QWORD *)v73 != v47)
                  objc_enumerationMutation(v43);
                v50 = *(_QWORD *)(*((_QWORD *)&v72 + 1) + 8 * (_QWORD)i);
                if (sub_100055868(v50) == 32565)
                {
                  v51 = sub_10022D014(v50);
                  v52 = (void *)objc_claimAutoreleasedReturnValue(v51);
                  v53 = sub_10022CB3C((uint64_t)KmlTlv, v48, v52);
                  v54 = (void *)objc_claimAutoreleasedReturnValue(v53);

                  v55 = sub_10022D014((uint64_t)v54);
                  v56 = (void *)objc_claimAutoreleasedReturnValue(v55);
                  objc_msgSend(v29, "appendData:", v56);

                  ++*(_BYTE *)(a1 + 97);
                  v46 = 1;
                }
              }
              v45 = objc_msgSend(v43, "countByEnumeratingWithState:objects:count:", &v72, v77, 16);
            }
            while (v45);

            v22 = v67;
            if ((v46 & 1) != 0)
            {
              v39 = v71 + 1;
              if ((int)(sub_10022AAD8(*(_QWORD *)(a1 + 152)) - 1) > (unsigned __int16)(v71 + 1))
                continue;
            }
            goto LABEL_29;
          }

        }
LABEL_29:
        v57 = objc_retainAutorelease(*(id *)(a1 + 200));
        v58 = objc_msgSend(v57, "UTF8String");
        v59 = *(unsigned __int8 *)(a1 + 97);

        KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 919, (uint64_t)v58, CFSTR("Number of additional attestations found : %u"), v60, v61, v62, v59);
        v11 = v65;
        v8 = v66;
        v14 = v64;
        v15 = 0;
        goto LABEL_10;
      }
      v33 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 200)), "UTF8String");
      sub_10022AAF0((uint64_t)v8);
      sub_10022AB44((uint64_t)v8);
      KmlSharingLogFunc(OS_LOG_TYPE_ERROR, (uint64_t)"KmlOwnerSharingSession.m", 887, (uint64_t)v33, CFSTR("Max size of attestations (%02X) exceeds actual length (%02X)"), v34, v35, v36, v31);
    }
    else
    {
      v24 = objc_retainAutorelease(*(id *)(a1 + 200));
      v25 = objc_msgSend(v24, "UTF8String");
      sub_10022AAD8(*(_QWORD *)(a1 + 152));

      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 881, (uint64_t)v25, CFSTR("No additional attestations to add. Signaling Bitmpap (%02X); MaxOfflineAttestations (%02X)"),
        v26,
        v27,
        v28,
        v23);
    }
  }
  v29 = 0;
LABEL_10:

  return v29;
}

id sub_100210F14(_QWORD *a1)
{
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  void *v8;
  char v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v19;

  v1 = (uint64_t)a1;
  if (a1)
  {
    if (sub_10022DC4C(a1[19]))
    {
      v2 = objc_msgSend(objc_retainAutorelease(*(id *)(v1 + 200)), "UTF8String");
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 929, (uint64_t)v2, CFSTR("ImmoTokens/slotIds will be obtained from server. No need to set signaling bitmap"), v3, v4, v5, v19);
LABEL_6:
      v1 = 0;
      return (id)v1;
    }
    v6 = sub_10023E06C((uint64_t)KmlSharingManager);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    v8 = *(void **)(v1 + 104);
    v9 = sub_10024DE58(*(_QWORD *)(v1 + 24));
    v10 = sub_10023E61C((uint64_t)v7, v8, v9);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);

    if (!v11)
      goto LABEL_6;
    v12 = objc_msgSend(objc_retainAutorelease(*(id *)(v1 + 200)), "UTF8String");
    KmlSharingLogFunc(OS_LOG_TYPE_ERROR, (uint64_t)"KmlOwnerSharingSession.m", 936, (uint64_t)v12, CFSTR("Error while setting signaling bitmap %@"), v13, v14, v15, (uint64_t)v11);
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "userInfo"));
    v1 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v16, 204, v17));

  }
  return (id)v1;
}

id *sub_100211058(id *result, void *a2)
{
  if (result)
    return (id *)objc_storeWeak(result + 23, a2);
  return result;
}

id *sub_100211068(id *result, void *a2)
{
  if (result)
    return (id *)objc_storeWeak(result + 24, a2);
  return result;
}

uint64_t sub_100211078(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 208);
  return result;
}

BOOL isEndOfKeyConfigTag(int a1)
{
  return a1 == 0x7FFF || a1 == 24415;
}

BOOL isDeviceKeyAttestationTag(int a1)
{
  return (a1 & 0xFFFFDFFF) == 24410;
}

void sub_100211BC8(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  v8 = a2;
  v3 = (id)objc_opt_self(a1);
  objc_sync_enter(v3);
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlAnalyticsLogger postKmlSharingEvent:]", 27, CFSTR("Sharing Event = %@"), v4, v5, v6, v7, (uint64_t)v8);
  if (v8)
    +[CALogger postCAEventFor:eventInput:](CALogger, "postCAEventFor:eventInput:", CFSTR("com.apple.kml.keySharingEvent"), v8);
  objc_sync_exit(v3);

}

void sub_100211C5C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100211C70(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  v8 = a2;
  v3 = (id)objc_opt_self(a1);
  objc_sync_enter(v3);
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlAnalyticsLogger postKmlOwnerPairingEvent:]", 38, CFSTR(" Pairing Event = %@"), v4, v5, v6, v7, (uint64_t)v8);
  if (v8)
    +[CALogger postCAEventFor:eventInput:](CALogger, "postCAEventFor:eventInput:", CFSTR("com.apple.kml.keyPairingEvent"), v8);
  objc_sync_exit(v3);

}

void sub_100211D04(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100211D18(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  v8 = a2;
  v3 = (id)objc_opt_self(a1);
  objc_sync_enter(v3);
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlAnalyticsLogger postKmlKeyTrackingEvent:]", 48, CFSTR(" Tracking Event = %@"), v4, v5, v6, v7, (uint64_t)v8);
  if (v8)
    +[CALogger postCAEventFor:eventInput:](CALogger, "postCAEventFor:eventInput:", CFSTR("com.apple.kml.keyTrackingEvent"), v8);
  objc_sync_exit(v3);

}

void sub_100211DAC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100211DC0(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  v8 = a2;
  v3 = (id)objc_opt_self(a1);
  objc_sync_enter(v3);
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlAnalyticsLogger postKmlKeyUpgradeEvent:]", 58, CFSTR(" Upgrade Event = %@"), v4, v5, v6, v7, (uint64_t)v8);
  if (v8)
    +[CALogger postCAEventFor:eventInput:](CALogger, "postCAEventFor:eventInput:", CFSTR("com.apple.kml.keyUpgradeEvent"), v8);
  objc_sync_exit(v3);

}

void sub_100211E54(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100211E68(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  v8 = a2;
  v3 = (id)objc_opt_self(a1);
  objc_sync_enter(v3);
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlAnalyticsLogger postKmlOwnerRevokesFriendKeysEvent:]", 69, CFSTR(" Initiator revokes recipient Event = %@"), v4, v5, v6, v7, (uint64_t)v8);
  if (v8)
    +[CALogger postCAEventFor:eventInput:](CALogger, "postCAEventFor:eventInput:", CFSTR("com.apple.kml.ownerRevokesFriendKeysEvent"), v8);
  objc_sync_exit(v3);

}

void sub_100211EFC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100211F10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t CAGeneralStatisticsInfo;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  _QWORD v36[5];
  _QWORD v37[5];

  v11 = (id)objc_opt_self(a1);
  objc_sync_enter(v11);
  v12 = objc_msgSend(objc_alloc((Class)NSUserDefaults), "initWithSuiteName:", CFSTR("com.apple.seserviced"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "dictionaryForKey:", CFSTR("kml.ca.generalStatistics")));
  if (!v13)
    v13 = sub_100212228((uint64_t)KmlAnalyticsLogger);
  v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("probingSessionCount")));
  if (a3 | a2 | a4 | a5 || objc_msgSend(v34, "unsignedIntegerValue"))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlAnalyticsLogger postKmlGeneralStatisticsWithOwnerCarKeyCount:friendCarKeyCount:unifiedAccessHomeKeyCount:unifiedAccessHydraKeyCount:isProductionEnvironment:]", 94, CFSTR("We have stats to report"), v14, v15, v16, v17, v32);
    v36[0] = CFSTR("ownerCarKeyCount");
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a2));
    v37[0] = v18;
    v36[1] = CFSTR("friendCarKeyCount");
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a3));
    v37[1] = v19;
    v36[2] = CFSTR("unifiedAccessHomeKeyCount");
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a4));
    v37[2] = v20;
    v36[3] = CFSTR("unifiedAccessHydraKeyCount");
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a5));
    v37[3] = v21;
    v36[4] = CFSTR("production");
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a6));
    v37[4] = v22;
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v37, v36, 5));
    v24 = objc_msgSend(v23, "mutableCopy");

    v35 = 0;
    CAGeneralStatisticsInfo = SESEndPointGetCAGeneralStatisticsInfo(&v35);
    v26 = (void *)objc_claimAutoreleasedReturnValue(CAGeneralStatisticsInfo);
    v31 = v35;
    if (v31 || !v26)
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"+[KmlAnalyticsLogger postKmlGeneralStatisticsWithOwnerCarKeyCount:friendCarKeyCount:unifiedAccessHomeKeyCount:unifiedAccessHydraKeyCount:isProductionEnvironment:]", 112, CFSTR("Failed to retrieve SES general statistics"), v27, v28, v29, v30, v33);
    else
      objc_msgSend(v24, "addEntriesFromDictionary:", v26);
    objc_msgSend(v24, "addEntriesFromDictionary:", v13);
    +[CALogger postCAEventFor:eventInput:](CALogger, "postCAEventFor:eventInput:", CFSTR("com.apple.kml.generalStatisticsEvent"), v24);
    objc_msgSend(v12, "removeObjectForKey:", CFSTR("kml.ca.generalStatistics"));

  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlAnalyticsLogger postKmlGeneralStatisticsWithOwnerCarKeyCount:friendCarKeyCount:unifiedAccessHomeKeyCount:unifiedAccessHydraKeyCount:isProductionEnvironment:]", 96, CFSTR("No stats to report"), v14, v15, v16, v17, v32);
  }

  objc_sync_exit(v11);
}

void sub_1002121FC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void *sub_100212228(uint64_t a1)
{
  void *v1;

  objc_opt_self(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  objc_msgSend(v1, "setObject:forKeyedSubscript:", &off_100323010, CFSTR("probingSessionCount"));
  return v1;
}

void sub_100212270(uint64_t a1)
{
  id v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  id obj;

  obj = (id)objc_opt_self(a1);
  objc_sync_enter(obj);
  v1 = objc_msgSend(objc_alloc((Class)NSUserDefaults), "initWithSuiteName:", CFSTR("com.apple.seserviced"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "dictionaryForKey:", CFSTR("kml.ca.generalStatistics")));
  v3 = objc_msgSend(v2, "mutableCopy");

  if (!v3)
    v3 = sub_100212228((uint64_t)KmlAnalyticsLogger);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("probingSessionCount")));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", (char *)objc_msgSend(v4, "unsignedIntegerValue") + 1));
  objc_msgSend(v3, "setObject:forKeyedSubscript:", v5, CFSTR("probingSessionCount"));

  objc_msgSend(v1, "setObject:forKey:", v3, CFSTR("kml.ca.generalStatistics"));
  objc_sync_exit(obj);

}

void sub_100212374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

id sub_100212390(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void (**v9)(id, uint64_t, _QWORD);
  id v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v24;
  id v25;
  id v26;
  void *v27;
  uint64_t v28;
  void *i;
  void *v30;
  void *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  void (**v39)(id, uint64_t, _QWORD);
  id v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  id v45;
  _BYTE v46[128];

  v7 = a2;
  v8 = a3;
  v9 = a4;
  objc_opt_self(a1);
  v10 = sub_100253C20((uint64_t)v7);
  v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  v12 = v11;
  if (v11)
  {
    v13 = 0;
    v14 = 1;
  }
  else
  {
    v45 = 0;
    v16 = SESEndPointList(&v45);
    v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    v18 = v45;
    if (v18)
    {
      v15 = v18;
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"+[KmlAnalyticsLogger getHUPDataSourceAndVehicleCapabilitiesWithConfig:keyIdentifier:callback:]", 163, CFSTR("Error in getting endpoint list: %@"), v19, v20, v21, v22, (uint64_t)v18);

      goto LABEL_6;
    }
    v39 = v9;
    v40 = v7;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v24 = v17;
    v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v41, v46, 16);
    if (v25)
    {
      v26 = v25;
      v27 = 0;
      v28 = *(_QWORD *)v42;
      do
      {
        for (i = 0; i != v26; i = (char *)i + 1)
        {
          if (*(_QWORD *)v42 != v28)
            objc_enumerationMutation(v24);
          v30 = *(void **)(*((_QWORD *)&v41 + 1) + 8 * (_QWORD)i);
          v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "publicKeyIdentifier"));
          v32 = objc_msgSend(v31, "isEqualToData:", v8);

          if (v32)
          {
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlAnalyticsLogger getHUPDataSourceAndVehicleCapabilitiesWithConfig:keyIdentifier:callback:]", 169, CFSTR("Found our endpoint"), v33, v34, v35, v36, v38);
            v37 = v30;

            v27 = v37;
          }
        }
        v26 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v41, v46, 16);
      }
      while (v26);
    }
    else
    {
      v27 = 0;
    }

    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "hupData"));
    if (!v13)
    {
      v9 = v39;
      v39[2](v39, 0, 0);
      v15 = 0;
      v7 = v40;
      v12 = 0;
      goto LABEL_6;
    }
    v14 = 2;
    v11 = v13;
    v9 = v39;
    v7 = v40;
    v12 = 0;
  }
  v9[2](v9, v14, objc_msgSend(v11, "u16BE:", 7));

  v15 = 0;
LABEL_6:

  return v15;
}

uint64_t sub_10021266C(uint64_t a1)
{
  int v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (!a1)
    return 0;
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 != 6 && v1 != 1)
    return 0;
  v3 = 4279897;
  v4 = MGGetProductType();
  if (v4 > 2132302343)
  {
    if (v4 <= 2979575959)
    {
      if (v4 > 2311900305)
      {
        if (v4 > 2751865417)
        {
          if (v4 == 2751865418)
            return 1;
          v5 = 2943112657;
          goto LABEL_58;
        }
        if (v4 != 2311900306)
        {
          v5 = 2722529672;
          goto LABEL_58;
        }
      }
      else
      {
        if (v4 <= 2270970152)
        {
          if (v4 == 2132302344)
            return 1;
          v5 = 2159747553;
          goto LABEL_58;
        }
        if (v4 != 2270970153)
        {
          v5 = 2309863438;
          goto LABEL_58;
        }
      }
    }
    else
    {
      if (v4 > 3585085678)
      {
        if (v4 <= 3767261005)
        {
          if (v4 == 3585085679)
            return 1;
          v5 = 3743999268;
        }
        else
        {
          if (v4 == 3767261006 || v4 == 3885279870)
            return 1;
          v5 = 4201643249;
        }
        goto LABEL_58;
      }
      if (v4 <= 3242623366)
      {
        if (v4 == 2979575960)
          return 1;
        v5 = 3001488778;
        goto LABEL_58;
      }
      if (v4 != 3242623367)
      {
        v5 = 3571532206;
        goto LABEL_58;
      }
    }
  }
  else if (v4 <= 1408738133)
  {
    if (v4 > 1169082143)
    {
      if (v4 > 1280909811)
      {
        if (v4 == 1280909812)
          return 1;
        v5 = 1371389549;
      }
      else
      {
        if (v4 == 1169082144)
          return 1;
        v5 = 1234705395;
      }
      goto LABEL_58;
    }
    if (v4 > 910181309)
    {
      if (v4 == 910181310)
        return 1;
      v5 = 1060988941;
      goto LABEL_58;
    }
    if (v4 != 502329937)
    {
      v5 = 689804742;
      goto LABEL_58;
    }
  }
  else
  {
    if (v4 > 1644180311)
    {
      if (v4 <= 1756509289)
      {
        if (v4 != 1644180312)
        {
          if (v4 != 1721691077)
            return v3;
          return 0;
        }
        return 1;
      }
      if (v4 == 1756509290 || v4 == 2032616841)
        return 1;
      v5 = 2080700391;
LABEL_58:
      if (v4 != v5)
        return v3;
      return 1;
    }
    if (v4 <= 1429914405)
    {
      if (v4 == 1408738134)
        return 1;
      v5 = 1419435331;
      goto LABEL_58;
    }
    if (v4 != 1429914406)
    {
      v5 = 1602181456;
      goto LABEL_58;
    }
  }
  return 0;
}

void sub_100213058(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  v7 = (id)objc_claimAutoreleasedReturnValue(+[KmlClientReporterFactory getTestReporter](KmlClientReporterFactory, "getTestReporter"));
  objc_msgSend(v7, "registerOwnerSideSharingTestInvitations:callback:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlXpcService registerOwnerSideSharingTestInvitations:callback:]_block_invoke", 343, &stru_100316BD0, v2, v3, v4, v5, v6);

}

void sub_100213154(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  v7 = (id)objc_claimAutoreleasedReturnValue(+[KmlClientReporterFactory getTestReporter](KmlClientReporterFactory, "getTestReporter"));
  objc_msgSend(v7, "registerOwnerSideInvitationRequestHandler:", *(_QWORD *)(a1 + 32));
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlXpcService registerOwnerSideInvitationRequestHandler:]_block_invoke", 353, &stru_100316BD0, v2, v3, v4, v5, v6);

}

void sub_100213250(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  v7 = (id)objc_claimAutoreleasedReturnValue(+[KmlClientReporterFactory getTestReporter](KmlClientReporterFactory, "getTestReporter"));
  objc_msgSend(v7, "registerFriendSideSharingTestInvitationUUIDHandler:", *(_QWORD *)(a1 + 32));
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlXpcService registerFriendSideSharingTestInvitationUUIDHandler:]_block_invoke", 363, &stru_100316BD0, v2, v3, v4, v5, v6);

}

void sub_10021334C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  v7 = (id)objc_claimAutoreleasedReturnValue(+[KmlClientReporterFactory getTestReporter](KmlClientReporterFactory, "getTestReporter"));
  objc_msgSend(v7, "registerFriendSideSharingTestCompletion:", *(_QWORD *)(a1 + 32));
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlXpcService registerFriendSideSharingTestCompletion:]_block_invoke", 373, &stru_100316BD0, v2, v3, v4, v5, v6);

}

void sub_100213448(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  v7 = (id)objc_claimAutoreleasedReturnValue(+[KmlClientReporterFactory getTestReporter](KmlClientReporterFactory, "getTestReporter"));
  objc_msgSend(v7, "registerFriendSideInvitationUnusableHandler:", *(_QWORD *)(a1 + 32));
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlXpcService registerFriendSideInvitationUnusableHandler:]_block_invoke", 383, &stru_100316BD0, v2, v3, v4, v5, v6);

}

void sub_100213544(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  v2 = sub_1002342C4((uint64_t)KmlSharingTransport);
  v8 = (id)objc_claimAutoreleasedReturnValue(v2);
  sub_100234F80((uint64_t)v8, *(void **)(a1 + 32));
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlXpcService registerCrossPlatformTestMessageOverIDSHandler:]_block_invoke", 393, &stru_100316BD0, v3, v4, v5, v6, v7);

}

void sub_100213640(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  v7 = (id)objc_claimAutoreleasedReturnValue(+[KmlClientReporterFactory getTestReporter](KmlClientReporterFactory, "getTestReporter"));
  objc_msgSend(v7, "registerCrossPlatformMessageSendHandler:", *(_QWORD *)(a1 + 32));
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlXpcService registerCrossPlatformTestMessageSendHandler:]_block_invoke", 403, &stru_100316BD0, v2, v3, v4, v5, v6);

}

void sub_100213764(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  v2 = sub_1002342C4((uint64_t)KmlSharingTransport);
  v8 = (id)objc_claimAutoreleasedReturnValue(v2);
  sub_10023506C((uint64_t)v8, *(void **)(a1 + 32), *(void **)(a1 + 40));
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlXpcService sendCrossPlatformTestData:toIdsIdentifier:]_block_invoke", 413, &stru_100316BD0, v3, v4, v5, v6, v7);

}

void sub_100213860(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  v7 = (id)objc_claimAutoreleasedReturnValue(+[KmlClientReporterFactory getTestReporter](KmlClientReporterFactory, "getTestReporter"));
  objc_msgSend(v7, "registerFriendSidePasscodeRetryRequestHandler:", *(_QWORD *)(a1 + 32));
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlXpcService registerFriendSidePasscodeRetryRequestHandler:]_block_invoke", 423, &stru_100316BD0, v2, v3, v4, v5, v6);

}

void sub_100213904(id a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  +[KmlClientReporterFactory removeTestReporter](KmlClientReporterFactory, "removeTestReporter");
  v1 = sub_1002342C4((uint64_t)KmlSharingTransport);
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  sub_100235178((uint64_t)v2);

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlXpcService unregisterSharingTestHandlers]_block_invoke", 433, &stru_100316BD0, v3, v4, v5, v6, v7);
}

void sub_10021395C(void *a1, char *newValue)
{
  if (a1)
    objc_setProperty_atomic(a1, newValue, newValue, 16);
}

id KmlLogger()
{
  if (qword_100354858 != -1)
    dispatch_once(&qword_100354858, &stru_10030EDA8);
  return (id)qword_100354850;
}

void sub_1002139BC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.sesd.kml", "GeneralLogging");
  v2 = (void *)qword_100354850;
  qword_100354850 = (uint64_t)v1;

}

void KmlLogFunc2(os_log_type_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v12;
  id v13;
  id v14;
  id v15;
  NSObject *v16;
  uint8_t buf[4];
  id v18;

  v12 = a4;
  v13 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:arguments:", v12, &a9);

  v14 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s : %d : %@"), a2, a3, v13);
  v15 = KmlLogger();
  v16 = objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, a1))
  {
    *(_DWORD *)buf = 138543362;
    v18 = v14;
    _os_log_impl((void *)&_mh_execute_header, v16, a1, "%{public}@", buf, 0xCu);
  }

}

void KmlSharingLogFunc(os_log_type_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v13;
  id v14;
  id v15;
  id v16;
  NSObject *v17;
  uint8_t buf[4];
  id v19;

  v13 = a5;
  v14 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:arguments:", v13, &a9);

  v15 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s : %d : %s : %@"), a2, a3, a4, v14);
  v16 = KmlLogger();
  v17 = objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v17, a1))
  {
    *(_DWORD *)buf = 138543362;
    v19 = v15;
    _os_log_impl((void *)&_mh_execute_header, v17, a1, "%{public}@", buf, 0xCu);
  }

}

void KmlLogFunc_InternalOnly(os_log_type_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v12;
  id v13;
  id v14;
  id v15;
  NSObject *v16;
  uint8_t buf[4];
  id v18;

  v12 = a4;
  if (qword_100354878 != -1)
    dispatch_once(&qword_100354878, &stru_10030EDE8);
  if (byte_100354870)
  {
    v13 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:arguments:", v12, &a9);
    v14 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%s : %d : %@"), a2, a3, v13);
    v15 = KmlLogger();
    v16 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, a1))
    {
      *(_DWORD *)buf = 138543362;
      v18 = v14;
      _os_log_impl((void *)&_mh_execute_header, v16, a1, "%{public}@", buf, 0xCu);
    }

  }
}

id KmlSignpostLogger()
{
  if (qword_100354868 != -1)
    dispatch_once(&qword_100354868, &stru_10030EDC8);
  return (id)qword_100354860;
}

void sub_100213DA4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.sesd.kml", "SignpostLogging");
  v2 = (void *)qword_100354860;
  qword_100354860 = (uint64_t)v1;

}

void sub_100213DD4(id a1)
{
  byte_100354870 = os_variant_has_internal_diagnostics("com.apple.kml");
}

id *sub_100213DF8(id *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v10;
  id v11;
  id v12;
  id v13;
  id *v14;
  uint64_t v15;
  id v16;
  objc_super v18;

  v10 = a2;
  v11 = a3;
  v12 = a4;
  v13 = a5;
  if (a1)
  {
    v18.receiver = a1;
    v18.super_class = (Class)KmlKeyDataTransmitter;
    v14 = (id *)objc_msgSendSuper2(&v18, "init");
    a1 = v14;
    if (v14)
    {
      objc_storeStrong(v14 + 1, a2);
      objc_storeStrong(a1 + 2, a3);
      objc_storeStrong(a1 + 3, a4);
      objc_storeStrong(a1 + 4, a5);
      v15 = objc_claimAutoreleasedReturnValue(+[NSMutableData data](NSMutableData, "data"));
      v16 = a1[5];
      a1[5] = (id)v15;

      *((_DWORD *)a1 + 12) = 0;
    }
  }

  return a1;
}

id sub_100213EF8(uint64_t a1, void *a2, _QWORD *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  NSString *v14;
  void *v15;
  void *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  void *v30;
  void *v31;
  _WORD *v32;
  void *v33;
  id v34;
  void *v35;
  id *v36;
  uint64_t v38;
  NSErrorUserInfoKey v39;
  void *v40;

  v5 = a2;
  if (!a1)
    goto LABEL_18;
  if (!objc_msgSend(*(id *)(a1 + 40), "length"))
  {
    v17 = sub_10022C5E4(v5);
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeyDataTransmitter handleGetDataCommand:error:]", 65, CFSTR("KeyDataTransmitter: Requested tag (%02x)"), v18, v19, v20, v21, v17);
    if (v17 > 32545)
    {
      if (v17 == 32546)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeyDataTransmitter handleGetDataCommand:error:]", 72, CFSTR("Sending Instance attestation"), v22, v23, v24, v25, v38);
        v26 = *(void **)(a1 + 40);
        v27 = *(_QWORD *)(a1 + 16);
        goto LABEL_15;
      }
      if (v17 == 32548)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeyDataTransmitter handleGetDataCommand:error:]", 76, CFSTR("Sending Key attestation"), v22, v23, v24, v25, v38);
        v26 = *(void **)(a1 + 40);
        v27 = *(_QWORD *)(a1 + 24);
        goto LABEL_15;
      }
    }
    else
    {
      if (v17 == 211)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeyDataTransmitter handleGetDataCommand:error:]", 80, CFSTR("Sending FriendlyName"), v22, v23, v24, v25, v38);
        v30 = *(void **)(a1 + 40);
        v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataUsingEncoding:", 4));
        v32 = sub_10022CB3C((uint64_t)KmlTlv, 211, v31);
        v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
        v34 = sub_10022D014((uint64_t)v33);
        v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
        objc_msgSend(v30, "appendData:", v35);

LABEL_16:
        v36 = sub_100214220((id *)a1);
        v29 = objc_claimAutoreleasedReturnValue(v36);
        goto LABEL_17;
      }
      if (v17 == 32544)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeyDataTransmitter handleGetDataCommand:error:]", 68, CFSTR("Sending device certificate"), v22, v23, v24, v25, v38);
        v26 = *(void **)(a1 + 40);
        v27 = *(_QWORD *)(a1 + 8);
LABEL_15:
        objc_msgSend(v26, "appendData:", v27);
        goto LABEL_16;
      }
    }
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeyDataTransmitter handleGetDataCommand:error:]", 84, CFSTR("KeyDataTransmitter: Received invalid tag"), v22, v23, v24, v25, v38);
    v28 = sub_100229B10((uint64_t)KmlApduResponse, 34922, 0);
    v29 = objc_claimAutoreleasedReturnValue(v28);
LABEL_17:
    a1 = v29;
    goto LABEL_18;
  }
  v6 = sub_10022C49C(v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeyDataTransmitter handleGetDataCommand:error:]", 55, CFSTR("KeyDataTransmitter: Received GET_DATA (%@) while we are expecting GET_RESPONSE"), v8, v9, v10, v11, (uint64_t)v7);

  v12 = sub_100229B10((uint64_t)KmlApduResponse, 34153, 0);
  a1 = objc_claimAutoreleasedReturnValue(v12);
  if (a3)
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
    v39 = NSLocalizedDescriptionKey;
    v14 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(206));
    v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    v40 = v15;
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v40, &v39, 1));
    *a3 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v13, 206, v16));

  }
LABEL_18:

  return (id)a1;
}

id *sub_100214220(id *a1)
{
  id *v1;
  unint64_t v2;
  int v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  int v8;
  unsigned int v9;
  __int16 v10;
  id v11;
  void *v12;
  id v13;

  v1 = a1;
  if (a1)
  {
    v2 = 239 * *((int *)a1 + 12);
    if ((unint64_t)objc_msgSend(a1[5], "length") <= v2)
    {
      v11 = sub_100229B10((uint64_t)KmlApduResponse, 144, 0);
      v1 = (id *)objc_claimAutoreleasedReturnValue(v11);
    }
    else
    {
      v3 = 239 * *((_DWORD *)v1 + 12) + 239;
      v4 = objc_msgSend(v1[5], "length");
      v5 = v1[5];
      if ((unint64_t)v4 <= v3)
      {
        objc_msgSend(v5, "length");
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1[5], "subdataWithRange:"));
        v7 = objc_msgSend(v12, "copy");

        objc_msgSend(v1[5], "setLength:", 0);
        *((_DWORD *)v1 + 12) = 0;
        v10 = 144;
      }
      else
      {
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "subdataWithRange:", 239 * *((int *)v1 + 12), 239));
        v7 = objc_msgSend(v6, "copy");

        v8 = *((_DWORD *)v1 + 12);
        *((_DWORD *)v1 + 12) = v8 + 1;
        v9 = 24832;
        if ((unint64_t)objc_msgSend(v1[5], "length") < 239 * v8 + 478)
          v9 = (17 * *((_BYTE *)v1 + 48) + objc_msgSend(v1[5], "length")) | 0x6100;
        v10 = __rev16(v9);
      }
      v13 = sub_100229D44((uint64_t)KmlApduResponse, v10, v7);
      v1 = (id *)objc_claimAutoreleasedReturnValue(v13);

    }
  }
  return v1;
}

id *sub_100214380(id *a1, void *a2, _QWORD *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id *v10;
  id v11;
  void *v12;
  NSString *v13;
  void *v14;
  void *v15;
  uint64_t v17;
  NSErrorUserInfoKey v18;
  void *v19;

  v5 = a2;
  if (a1)
  {
    if (objc_msgSend(a1[5], "length"))
    {
      v10 = sub_100214220(a1);
      a1 = (id *)objc_claimAutoreleasedReturnValue(v10);
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeyDataTransmitter handleGetResponseCommand:error:]", 96, CFSTR("KeyDataTransmitter: Received GET_RESPONSE while we have not data left"), v6, v7, v8, v9, v17);
      v11 = sub_100229B10((uint64_t)KmlApduResponse, 34153, 0);
      a1 = (id *)objc_claimAutoreleasedReturnValue(v11);
      if (a3)
      {
        v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
        v18 = NSLocalizedDescriptionKey;
        v13 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(206));
        v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
        v19 = v14;
        v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v19, &v18, 1));
        *a3 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v12, 206, v15));

      }
    }
  }

  return a1;
}

void **sub_100214568(void **a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  dispatch_queue_attr_t v18;
  NSObject *v19;
  dispatch_queue_t v20;
  void *v21;
  char *v22;
  void *v23;
  id *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  objc_super v31;

  v9 = a2;
  v10 = a3;
  v11 = a5;
  if (a1)
  {
    v31.receiver = a1;
    v31.super_class = (Class)KmlDataExchangeManager;
    a1 = (void **)objc_msgSendSuper2(&v31, "init");
    if (a1)
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager initWithDelegate:pairingPassword:transport:versionInformation:]", 95, CFSTR("let's init"), v12, v13, v14, v15, (uint64_t)v31.receiver);
      a1[1] = 0;
      a1[2] = 0;
      if (v10)
      {
        v16 = objc_msgSend(v10, "copy");
        v17 = a1[4];
        a1[4] = v16;
      }
      else
      {
        v17 = a1[4];
        a1[4] = 0;
      }

      a1[5] = 0;
      objc_storeWeak(a1 + 14, v9);
      v18 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
      v19 = objc_claimAutoreleasedReturnValue(v18);
      v20 = dispatch_queue_create("com.apple.sesd.kml.dxmanager", v19);
      v21 = a1[8];
      a1[8] = v20;

      v22 = sub_10024C4F8([KmlSecureChannel alloc], 0);
      v23 = a1[3];
      a1[3] = v22;

      objc_storeStrong(a1 + 10, a5);
      v24 = sub_10022FE78((id *)[KmlCommandHandler alloc], a1[3], a1[4], a4, a1[10]);
      v25 = a1[9];
      a1[9] = v24;

      a1[18] = a4;
      *((_BYTE *)a1 + 96) = -1;
      a1[13] = (void *)0xFFFF;
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager initWithDelegate:pairingPassword:transport:versionInformation:]", 115, CFSTR("ready to roll"), v26, v27, v28, v29, (uint64_t)v31.receiver);
    }
  }

  return a1;
}

void sub_10021470C(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD v3[6];

  if (a1)
  {
    v2 = *(NSObject **)(a1 + 64);
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100214768;
    v3[3] = &unk_100304AD0;
    v3[4] = a1;
    v3[5] = a2;
    dispatch_async(v2, v3);
  }
}

void sub_100214768(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = a1 + 32;
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(v11 + 8);
  if (v10 <= *(_QWORD *)(v9 + 8))
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager setCurrentState:]_block_invoke", 127, CFSTR("Current state higher than new state. Do nothing"), a5, a6, a7, a8, a9);
  else
    sub_100214798(v9, v10, a3, a4, a5, a6, a7, a8);
}

void sub_100214798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  uint64_t v17;
  __CFString *v18;
  uint64_t v19;
  id WeakRetained;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  NSString *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  const __CFString *v40;
  id v41;
  void *v42;
  void *v43;
  NSString *v44;
  void *v45;
  void *v46;
  void *v47;
  id v48;
  KmlBluetoothPairingTransport *v49;
  void *v50;
  uint64_t v51;
  id v52;
  NSErrorUserInfoKey v53;
  void *v54;
  NSErrorUserInfoKey v55;
  void *v56;

  if (a1)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager setCurrentState_sync:]", 136, CFSTR("Current state %ld, new state %ld"), a5, a6, a7, a8, *(_QWORD *)(a1 + 8));
    v14 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v14;
    switch(a2)
    {
      case 1:
        v15 = *(_QWORD *)(a1 + 144);
        if (v15 >= 2)
        {
          if (v15 != 2)
            goto LABEL_30;
          v49 = sub_10022BDE4(0x100343000, (void *)a1);
          v17 = objc_claimAutoreleasedReturnValue(v49);
        }
        else
        {
          v16 = sub_10022BD98(0x100343000, (void *)a1);
          v17 = objc_claimAutoreleasedReturnValue(v16);
        }
        v50 = *(void **)(a1 + 88);
        *(_QWORD *)(a1 + 88) = v17;

LABEL_30:
        _objc_msgSend(*(id *)(a1 + 88), "startSession");
        break;
      case 2:
        v18 = CFSTR("waiting for remote reader to select our AID");
        v19 = 159;
        goto LABEL_22;
      case 3:
        v18 = CFSTR("waiting for secure channel init from remote reader");
        v19 = 164;
        goto LABEL_22;
      case 4:
        v18 = CFSTR("waiting for secure channel config from remote reader");
        v19 = 169;
        goto LABEL_22;
      case 5:
        WeakRetained = objc_loadWeakRetained((id *)(a1 + 112));
        objc_msgSend(WeakRetained, "handlePairingDidStart");

        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager setCurrentState_sync:]", 177, CFSTR("Secure Channel requested. Configuring it."), v21, v22, v23, v24, v51);
        sub_10024C590(*(_QWORD *)(a1 + 24));
        v25 = sub_1002225C4(*(_QWORD *)(a1 + 24));
        v26 = objc_claimAutoreleasedReturnValue(v25);
        v27 = *(void **)(a1 + 120);
        *(_QWORD *)(a1 + 120) = v26;

        v28 = sub_10022ADBC(*(_QWORD *)(a1 + 24));
        v29 = objc_claimAutoreleasedReturnValue(v28);
        v30 = *(void **)(a1 + 128);
        *(_QWORD *)(a1 + 128) = v29;

        v31 = sub_10022ADB0(*(_QWORD *)(a1 + 24));
        v32 = objc_claimAutoreleasedReturnValue(v31);
        v33 = *(void **)(a1 + 136);
        *(_QWORD *)(a1 + 136) = v32;

        v18 = CFSTR("waiting for key configuration from remote reader");
        v19 = 183;
        goto LABEL_22;
      case 6:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager setCurrentState_sync:]", 188, CFSTR("Received key configuration, pause session"), v10, v11, v12, v13, v51);
        objc_msgSend(*(id *)(a1 + 88), "readApdu");
        _objc_msgSend(*(id *)(a1 + 88), "pauseSession");
        return;
      case 7:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager setCurrentState_sync:]", 194, CFSTR("Wait for SE interaction"), v10, v11, v12, v13, v51);
        v52 = objc_loadWeakRetained((id *)(a1 + 112));
        objc_msgSend(v52, "handleRemoteConfigurationReceived");
        goto LABEL_24;
      case 8:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager setCurrentState_sync:]", 199, CFSTR("Received key from SE, resume session to send it to remote reader"), v10, v11, v12, v13, v51);
        _objc_msgSend(*(id *)(a1 + 88), "resumeSessionWithTimeout");
        return;
      case 9:
        v18 = CFSTR("Wait for remote reader to retrieve data");
        v19 = 204;
        goto LABEL_22;
      case 10:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager setCurrentState_sync:]", 209, CFSTR("Sent all key data to remote reader"), v10, v11, v12, v13, v51);
        objc_msgSend(*(id *)(a1 + 88), "readApdu");
        objc_msgSend(*(id *)(a1 + 88), "endSession");
        return;
      case 11:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager setCurrentState_sync:]", 215, CFSTR("Wait for mailbox configuration to complete."), v10, v11, v12, v13, v51);
        v52 = objc_loadWeakRetained((id *)(a1 + 112));
        objc_msgSend(v52, "handleKeysExchangeDoneWaitForMailboxes");
        goto LABEL_24;
      case 12:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager setCurrentState_sync:]", 221, CFSTR("Mailboxes configured successfully"), v10, v11, v12, v13, v51);
        v52 = objc_loadWeakRetained((id *)(a1 + 112));
        objc_msgSend(v52, "handleMailboxConfigurationDone");
        goto LABEL_24;
      case 13:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager setCurrentState_sync:]", 226, CFSTR("First transaction cancelled"), v10, v11, v12, v13, v51);
        objc_msgSend(*(id *)(a1 + 88), "reset");
        v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
        v55 = NSLocalizedDescriptionKey;
        v35 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(8));
        v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
        v56 = v36;
        v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v56, &v55, 1));
        v38 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v34, 8, v37));
        v39 = *(void **)(a1 + 48);
        *(_QWORD *)(a1 + 48) = v38;

        sub_10021470C(a1, 14);
        return;
      case 14:
        v40 = *(const __CFString **)(a1 + 48);
        if (!v40)
          v40 = CFSTR("success");
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager setCurrentState_sync:]", 233, CFSTR("First transaction done with %@"), v10, v11, v12, v13, (uint64_t)v40);
        v41 = objc_loadWeakRetained((id *)(a1 + 112));
        objc_msgSend(v41, "handleFirstPostPairingTransactionEndResult:", *(_QWORD *)(a1 + 48));

        objc_msgSend(*(id *)(a1 + 88), "reset");
        return;
      case 15:
        objc_msgSend(*(id *)(a1 + 88), "reset");
        v52 = objc_loadWeakRetained((id *)(a1 + 112));
        objc_msgSend(v52, "handleProbingCompletionWithBrandCode:error:", *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 48));
        goto LABEL_24;
      case 16:
        v18 = CFSTR("Error occured. Waiting for Op Control Flow from remote reader to finish this pairing attempt.");
        v19 = 244;
LABEL_22:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager setCurrentState_sync:]", v19, v18, v10, v11, v12, v13, v51);
        objc_msgSend(*(id *)(a1 + 88), "readApdu");
        return;
      case 17:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager setCurrentState_sync:]", 249, CFSTR("Encountered error in Data Exchange interaction, error: %@"), v10, v11, v12, v13, *(_QWORD *)(a1 + 48));
        objc_msgSend(*(id *)(a1 + 88), "pairingEndedWithResult:", *(_QWORD *)(a1 + 48));
        objc_msgSend(*(id *)(a1 + 88), "reset");
        v52 = objc_loadWeakRetained((id *)(a1 + 112));
        objc_msgSend(v52, "handlePairingTransportSessionFailedWithError:", *(_QWORD *)(a1 + 48));
LABEL_24:

        return;
      case 18:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager setCurrentState_sync:]", 256, CFSTR("Pairing cancelled"), v10, v11, v12, v13, v51);
        v42 = *(void **)(a1 + 88);
        v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
        v53 = NSLocalizedDescriptionKey;
        v44 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(1));
        v45 = (void *)objc_claimAutoreleasedReturnValue(v44);
        v54 = v45;
        v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v54, &v53, 1));
        v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v43, 1, v46));
        objc_msgSend(v42, "pairingEndedWithResult:", v47);

        objc_msgSend(*(id *)(a1 + 88), "reset");
        v48 = objc_loadWeakRetained((id *)(a1 + 112));
        objc_msgSend(v48, "handleOwnerPairingCancellationWithResult:", 1);

        return;
      default:
        return;
    }
  }
}

uint64_t sub_100214EA8(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  _QWORD v5[5];
  _QWORD block[6];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;

  v1 = a1;
  if (a1)
  {
    dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 64));
    v7 = 0;
    v8 = &v7;
    v9 = 0x2020000000;
    v10 = 1;
    v2 = *(NSObject **)(v1 + 64);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100214F98;
    block[3] = &unk_1003044E0;
    block[4] = v1;
    block[5] = &v7;
    dispatch_sync(v2, block);
    if (*((_BYTE *)v8 + 24))
    {
      v3 = *(NSObject **)(v1 + 64);
      v5[0] = _NSConcreteStackBlock;
      v5[1] = 3221225472;
      v5[2] = sub_100214FB4;
      v5[3] = &unk_100302AA0;
      v5[4] = v1;
      dispatch_async(v3, v5);
      v1 = *((_BYTE *)v8 + 24) != 0;
    }
    else
    {
      v1 = 0;
    }
    _Block_object_dispose(&v7, 8);
  }
  return v1;
}

uint64_t sub_100214F98(uint64_t result)
{
  if (*(_QWORD *)(*(_QWORD *)(result + 32) + 8))
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = 0;
  return result;
}

void sub_100214FB4(uint64_t a1)
{
  sub_10022FF8C(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 72));
  sub_10021470C(*(_QWORD *)(a1 + 32), 1);
}

void sub_100214FE4(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  NSObject *v13;
  _QWORD block[5];
  id v15;
  id v16;
  id v17;
  id v18;

  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  if (a1)
  {
    v13 = *(NSObject **)(a1 + 64);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002150D8;
    block[3] = &unk_100304790;
    block[4] = a1;
    v15 = v9;
    v16 = v10;
    v17 = v11;
    v18 = v12;
    dispatch_async(v13, block);

  }
}

void sub_1002150D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id *v10;

  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) == 7)
  {
    v10 = sub_100213DF8((id *)[KmlKeyDataTransmitter alloc], *(void **)(a1 + 40), *(void **)(a1 + 48), *(void **)(a1 + 56), *(void **)(a1 + 64));
    sub_10022B4F4(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 72), v10);
    sub_10021470C(*(_QWORD *)(a1 + 32), 8);

  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager continueKeyExchangeWithDeviceCertificate:instanceAttestation:keyAttestation:keyName:]_block_invoke", 293, CFSTR("We are not waiting for SE interaction. ignore request to exchange owner key"), a5, a6, a7, a8, a9);
  }
}

void sub_100215170(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[5];

  if (a1)
  {
    v1 = *(NSObject **)(a1 + 64);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002151CC;
    block[3] = &unk_100302AA0;
    block[4] = a1;
    dispatch_async(v1, block);
  }
}

void sub_1002151CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  id WeakRetained;

  v9 = *(_QWORD *)(a1 + 32);
  if (*(uint64_t *)(v9 + 8) > 11)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager cancelOwnerPairing]_block_invoke", 310, CFSTR("pairing already done, can't cancel"), a5, a6, a7, a8, v10);
    WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 112));
    objc_msgSend(WeakRetained, "handleOwnerPairingCancellationWithResult:", 0);

  }
  else
  {
    sub_10021470C(v9, 18);
  }
}

void sub_10021524C(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[5];

  if (a1)
  {
    v1 = *(NSObject **)(a1 + 64);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002152A8;
    block[3] = &unk_100302AA0;
    block[4] = a1;
    dispatch_async(v1, block);
  }
}

void sub_1002152A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;
  NSString *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSErrorUserInfoKey v23;
  void *v24;

  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) == 7)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
    v23 = NSLocalizedDescriptionKey;
    v11 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(15));
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    v24 = v12;
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v24, &v23, 1));
    v14 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v10, 15, v13));
    v15 = *(_QWORD *)(a1 + 32);
    v16 = *(void **)(v15 + 48);
    *(_QWORD *)(v15 + 48) = v14;

    sub_100215418(*(_QWORD *)(a1 + 32), 7, v17, v18, v19, v20, v21, v22);
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager reportKeyCreationFailed]_block_invoke", 320, CFSTR("We are not waiting for SE interaction. ignore request to report key creation failure"), a5, a6, a7, a8, a9);
  }
}

void sub_100215418(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;

  if (a1)
  {
    *(_QWORD *)(a1 + 40) = a2;
    if (a2 == 7)
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager reportErrorOnMessage:]", 457, CFSTR("Reporting key creation error in get data, needs transport session established."), a5, a6, a7, a8, v10);
      v9 = 8;
    }
    else
    {
      v9 = 16;
    }
    sub_10021470C(a1, v9);
  }
}

id sub_100215474(void *a1)
{
  id **v1;
  id *v2;
  void *v3;

  if (a1)
  {
    v1 = a1;
    objc_sync_enter(v1);
    v2 = sub_100232A94(v1[9]);
    v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
    objc_sync_exit(v1);

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

void sub_1002154C4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id *sub_1002154D8(id *a1)
{
  if (a1)
    a1 = (id *)a1[7];
  return a1;
}

id *sub_1002154F4(id *a1)
{
  if (a1)
    a1 = (id *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[11], "getSecureElementSession"));
  return a1;
}

void sub_100215514(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  _QWORD v6[5];
  id v7;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = *(NSObject **)(a1 + 64);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1002155A0;
    v6[3] = &unk_100304370;
    v6[4] = a1;
    v7 = v3;
    dispatch_async(v5, v6);

  }
}

void sub_1002155A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  v9 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v9 + 8) == 11)
    _objc_msgSend(*(id *)(v9 + 88), "startTransactionForKeyWithIdentifier:", *(_QWORD *)(a1 + 40));
  else
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager startMailboxConfigurationForKeyIdentifier:]_block_invoke", 350, CFSTR("Key exchange is not done to configure mailboxes"), a5, a6, a7, a8, a9);
}

uint64_t sub_1002155DC(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  NSObject *v5;
  _QWORD v7[5];
  id v8;
  _QWORD block[6];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;

  v3 = a2;
  if (a1)
  {
    dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 64));
    v10 = 0;
    v11 = &v10;
    v12 = 0x2020000000;
    v13 = 1;
    v4 = *(NSObject **)(a1 + 64);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002156F4;
    block[3] = &unk_1003044E0;
    block[4] = a1;
    block[5] = &v10;
    dispatch_sync(v4, block);
    if (*((_BYTE *)v11 + 24))
    {
      v5 = *(NSObject **)(a1 + 64);
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      v7[2] = sub_100215748;
      v7[3] = &unk_100304370;
      v7[4] = a1;
      v8 = v3;
      dispatch_async(v5, v7);

      a1 = *((_BYTE *)v11 + 24) != 0;
    }
    else
    {
      a1 = 0;
    }
    _Block_object_dispose(&v10, 8);
  }

  return a1;
}

void sub_1002156F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) != 12)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager startFirstPostPairingTransactionForKeyIdentifier:]_block_invoke", 365, CFSTR("pairing not done yet, can't start first transaction."), a5, a6, a7, a8, v9);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
  }
}

id sub_100215748(uint64_t a1)
{
  return _objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 88), "startTransactionForKeyWithIdentifier:", *(_QWORD *)(a1 + 40));
}

void sub_100215754(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[5];

  if (a1)
  {
    v1 = *(NSObject **)(a1 + 64);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002157B0;
    block[3] = &unk_100302AA0;
    block[4] = a1;
    dispatch_async(v1, block);
  }
}

void sub_1002157B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  v9 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v9 + 8) == 12)
    sub_10021470C(v9, 13);
  else
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager cancelFirstPostPairingTransaction]_block_invoke", 383, CFSTR("First transaction hasn't started. Nothing to cancel"), a5, a6, a7, a8, a9);
}

uint64_t sub_1002157E4(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;

  v1 = a1;
  if (a1)
  {
    dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 64));
    v5 = 0;
    v6 = &v5;
    v7 = 0x2020000000;
    v8 = 1;
    v2 = *(NSObject **)(v1 + 64);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_1002158AC;
    v4[3] = &unk_1003044E0;
    v4[4] = v1;
    v4[5] = &v5;
    dispatch_sync(v2, v4);
    if (*((_BYTE *)v6 + 24))
    {
      sub_10021470C(v1, 1);
      v1 = *((_BYTE *)v6 + 24) != 0;
    }
    else
    {
      v1 = 0;
    }
    _Block_object_dispose(&v5, 8);
  }
  return v1;
}

void sub_1002158AC(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v1 + 8))
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
  else
    sub_10022FF8C(*(_QWORD *)(v1 + 72));
}

void sub_1002158D0(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[5];

  if (a1)
  {
    v1 = *(NSObject **)(a1 + 64);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10021592C;
    block[3] = &unk_100302AA0;
    block[4] = a1;
    dispatch_async(v1, block);
  }
}

void sub_10021592C(uint64_t a1)
{
  void *v2;
  NSString *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  NSErrorUserInfoKey v9;
  void *v10;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
  v9 = NSLocalizedDescriptionKey;
  v3 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(31));
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v10 = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v10, &v9, 1));
  v6 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v2, 31, v5));
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(void **)(v7 + 48);
  *(_QWORD *)(v7 + 48) = v6;

  sub_10021470C(*(_QWORD *)(a1 + 32), 15);
}

void sub_100215A44(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[5];

  if (a1)
  {
    v1 = *(NSObject **)(a1 + 64);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100215AA0;
    block[3] = &unk_100302AA0;
    block[4] = a1;
    dispatch_async(v1, block);
  }
}

id sub_100215AA0(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 88), "reset");
}

void sub_100215AAC(uint64_t a1, void *a2, char a3, void *a4)
{
  id v7;
  id v8;
  NSObject *v9;
  _QWORD v10[4];
  id v11;
  uint64_t v12;
  id v13;
  char v14;

  v7 = a2;
  v8 = a4;
  if (a1)
  {
    v9 = *(NSObject **)(a1 + 64);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100215B64;
    v10[3] = &unk_10030EE10;
    v14 = a3;
    v11 = v7;
    v12 = a1;
    v13 = v8;
    dispatch_async(v9, v10);

  }
}

id sub_100215B64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v11;

  v9 = *(_QWORD *)(a1 + 32);
  if (!v9)
  {
    if (*(_BYTE *)(a1 + 56) && *(_QWORD *)(*(_QWORD *)(a1 + 40) + 144) == 1)
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager pairingEndedWithResult:uwbSupport:keyIdentifier:]_block_invoke", 431, CFSTR("Paired UWB capable key over NFC. Kick first approach."), a5, a6, a7, a8, v11);
      sub_10022BE30(0x100343000, *(void **)(a1 + 48));
      v9 = *(_QWORD *)(a1 + 32);
    }
    else
    {
      v9 = 0;
    }
  }
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 88), "pairingEndedWithResult:", v9);
}

uint64_t sub_100215BE0(uint64_t result)
{
  if (result)
    return (*(_DWORD *)(result + 16) << 16) | (*(unsigned __int8 *)(result + 96) << 8) | objc_msgSend(*(id *)(result + 88), "stepForAnalytics");
  return result;
}

void sub_100215C20(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  KmlApduRequest *v9;
  id v10;
  _BYTE *v11;
  id v12;
  void *v13;
  uint64_t *v14;
  id v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  id v33;
  id v34;
  id v35;
  void *v36;
  id v37;
  void *v38;
  uint64_t v39;
  id v40;
  id v41;
  id v42;
  char v43;

  v3 = a2;
  v8 = v3;
  if (a1)
  {
    v43 = 1;
    if (v3)
    {
      v9 = [KmlApduRequest alloc];
      v10 = objc_retainAutorelease(v8);
      v11 = objc_msgSend(v10, "bytes");
      v12 = objc_msgSend(v10, "length");
      v13 = *(void **)(a1 + 24);
      v42 = 0;
      v14 = sub_10022BED8((uint64_t *)v9, v11, (unint64_t)v12, v13, &v42);
      v15 = v42;
      if (sub_10022C73C((_BOOL8)v14))
      {
        v16 = sub_100050680((uint64_t)v14);
        v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
        v18 = sub_1002225AC((uint64_t)v14);
        v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
        +[CertificationLogging logEncryptedAPDU:decrypted:](CertificationLogging, "logEncryptedAPDU:decrypted:", v17, v19);

      }
      v20 = sub_10022C49C(v14);
      v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager handleReceivedAPDU:]", 479, CFSTR("APDU Payload is : %@"), v22, v23, v24, v25, (uint64_t)v21);

      if (v15)
      {
        v26 = objc_msgSend(v15, "code");
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager handleReceivedAPDU:]", 482, CFSTR("KmlApduRequest got error: code = 0x%02lx"), v27, v28, v29, v30, (uint64_t)v26);
        v31 = sub_100229B10((uint64_t)KmlApduResponse, bswap32(objc_msgSend(v15, "code")) >> 16, 0);
        v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
      }
      else
      {
        if (*(_QWORD *)(a1 + 40))
        {
          v41 = 0;
          v33 = sub_100215E78(a1, v14, &v43, &v41);
          v32 = (void *)objc_claimAutoreleasedReturnValue(v33);
          v34 = v41;
        }
        else
        {
          v40 = 0;
          v35 = sub_100216038(a1, v14, &v43, &v40);
          v32 = (void *)objc_claimAutoreleasedReturnValue(v35);
          v34 = v40;
        }
        v15 = v34;
      }
      if (sub_10022C468((_BOOL8)v14))
        v36 = *(void **)(a1 + 24);
      else
        v36 = 0;
      v37 = sub_100229E2C((uint64_t)v32, v36);
      v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
      objc_msgSend(*(id *)(a1 + 88), "sendApdu:", v38);
      if (v43)
        objc_msgSend(*(id *)(a1 + 88), "readApdu");

    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager handleReceivedAPDU:]", 470, CFSTR("received nil apdu. Nothing to be done"), v4, v5, v6, v7, v39);
    }
  }

}

id sub_100215E78(uint64_t a1, void *a2, _BYTE *a3, id *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  __CFString *v12;
  uint64_t v13;
  id v14;
  void *v15;
  id v17;
  id v18;
  id v19;
  uint64_t v20;

  v11 = a2;
  if (a1)
  {
    switch(*(_QWORD *)(a1 + 40))
    {
      case 0:
        v12 = CFSTR("Strangely not expecting a command to communicate error");
        v13 = 577;
        goto LABEL_4;
      case 1:
      case 2:
      case 3:
      case 4:
      case 6:
      case 8:
        v12 = CFSTR("We should never expect one of these commands when waiting for reporting error.");
        v13 = 605;
LABEL_4:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager handleBail:continueReading:error:]", v13, v12, v7, v8, v9, v10, v20);
        goto LABEL_5;
      case 5:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager handleBail:continueReading:error:]", 592, CFSTR("Expecting OpControlFlow"), v7, v8, v9, v10, v20);
        if (!sub_10022C3E4((_BOOL8)v11))
          goto LABEL_5;
        v17 = sub_100216038(a1, v11, a3, a4);
        v15 = (void *)objc_claimAutoreleasedReturnValue(v17);
        *a3 = 0;
        goto LABEL_14;
      case 7:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager handleBail:continueReading:error:]", 580, CFSTR("Expecting Select followed by Get Data"), v7, v8, v9, v10, v20);
        if (sub_10022C320((_BOOL8)v11))
        {
          sub_10022FF8C(*(_QWORD *)(a1 + 72));
          v18 = sub_100216038(a1, v11, a3, a4);
          v15 = (void *)objc_claimAutoreleasedReturnValue(v18);
        }
        else
        {
          if (!sub_10022C36C((_BOOL8)v11))
          {
LABEL_5:
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager handleBail:continueReading:error:]", 610, CFSTR("Did not receive expected command"), v7, v8, v9, v10, v20);
            v14 = sub_100229B10((uint64_t)KmlApduResponse, 34153, 0);
            v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
            sub_10021470C(a1, 17);
            break;
          }
          v19 = sub_100229B10((uint64_t)KmlApduResponse, 100, 0);
          v15 = (void *)objc_claimAutoreleasedReturnValue(v19);
LABEL_14:
          sub_10021470C(a1, 17);
        }
        if (!v15)
          goto LABEL_5;
        break;
      default:
        goto LABEL_5;
    }
  }
  else
  {
    v15 = 0;
  }

  return v15;
}

id sub_100216038(uint64_t a1, void *a2, _BYTE *a3, id *a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id result;
  uint64_t *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  NSString *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  void *v39;
  uint64_t v40;
  NSErrorUserInfoKey v41;
  void *v42;

  if (!a1)
    return 0;
  v7 = sub_100230494(*(_QWORD **)(a1 + 72), a2, a4);
  v12 = (void *)objc_claimAutoreleasedReturnValue(v7);
  if (*a4)
  {
    if (*(_QWORD *)(a1 + 8) == 4)
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager handleIncomingCommand:continueReading:error:]", 507, CFSTR("Did not receive successful PakeVerify - %@"), v8, v9, v10, v11, (uint64_t)*a4);
      objc_storeStrong((id *)(a1 + 48), *a4);
      if (sub_1002225C4(*(_QWORD *)(a1 + 72)) != 5 || sub_10022ADBC(*(_QWORD *)(a1 + 72)) != 3)
      {
        *a3 = 1;
        *(_QWORD *)(a1 + 40) = 5;
        v22 = a1;
        v23 = 16;
LABEL_12:
        sub_10021470C(v22, v23);
        return v12;
      }
      *(_BYTE *)(a1 + 96) = sub_100232AB0(*(_QWORD *)(a1 + 72));
    }
    else
    {
      objc_storeStrong((id *)(a1 + 48), *a4);
      v17 = sub_1002225C4(*(_QWORD *)(a1 + 72));
      objc_msgSend(*a4, "code");
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager handleIncomingCommand:continueReading:error:]", 520, CFSTR("commandType = %ld, got error code = 0x%02lx, stop reading."), v18, v19, v20, v21, v17);
    }
    *a3 = 0;
    v22 = a1;
    v23 = 17;
    goto LABEL_12;
  }
  switch(sub_1002225C4(*(_QWORD *)(a1 + 72)))
  {
    case 0:
    case 4:
    case 7:
    case 8:
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager handleIncomingCommand:continueReading:error:]", 564, CFSTR("No state change needed."), v13, v14, v15, v16, v40);
      return v12;
    case 1:
      v22 = a1;
      v23 = 3;
      goto LABEL_12;
    case 2:
      if (*(_QWORD *)(a1 + 32))
      {
        v22 = a1;
        v23 = 4;
      }
      else
      {
        *(_QWORD *)(a1 + 104) = sub_10022ADD4(*(_QWORD *)(a1 + 72));
        *a3 = 0;
        v22 = a1;
        v23 = 15;
      }
      goto LABEL_12;
    case 3:
      v22 = a1;
      v23 = 5;
      goto LABEL_12;
    case 5:
    case 6:
      if (sub_10022ADBC(*(_QWORD *)(a1 + 72)) != 2)
      {
        if (sub_10022ADBC(*(_QWORD *)(a1 + 72)) == 4 && *(_QWORD *)(a1 + 8) == 5)
        {
          sub_10021470C(a1, 6);
          sub_10022FF8C(*(_QWORD *)(a1 + 72));
        }
        return v12;
      }
      if (*(_QWORD *)(a1 + 8) == 9)
      {
        v25 = sub_100232A74(*(uint64_t **)(a1 + 72));
        v26 = objc_claimAutoreleasedReturnValue(v25);
        v27 = *(void **)(a1 + 56);
        *(_QWORD *)(a1 + 56) = v26;

        v22 = a1;
        v23 = 10;
        goto LABEL_12;
      }
      v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
      v41 = NSLocalizedDescriptionKey;
      v29 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(14));
      v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
      v42 = v30;
      v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v42, &v41, 1));
      v32 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v28, 14, v31));
      v33 = *(void **)(a1 + 48);
      *(_QWORD *)(a1 + 48) = v32;

      sub_10021470C(a1, 17);
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager handleIncomingCommand:continueReading:error:]", 538, CFSTR("Remote Reader sent end message in wrong state. Treating it as abort, stop reading."), v34, v35, v36, v37, v40);
      *a3 = 0;
      v38 = sub_100229B10((uint64_t)KmlApduResponse, 32874, 0);
      v39 = (void *)objc_claimAutoreleasedReturnValue(v38);

      result = v39;
      break;
    default:
      return v12;
  }
  return result;
}

void sub_10021644C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  void *v10;
  NSString *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  NSErrorUserInfoKey v18;
  void *v19;

  v9 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v9 + 8) == 1)
  {
    if (*(_QWORD *)(a1 + 40))
    {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlDataExchangeManager handleSessionStartResult:]_block_invoke", 633, CFSTR("Error in starting session - %@"), a5, a6, a7, a8, *(_QWORD *)(a1 + 40));
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
      v18 = NSLocalizedDescriptionKey;
      v11 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(9));
      v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      v19 = v12;
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v19, &v18, 1));
      v14 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v10, 9, v13));
      v15 = *(_QWORD *)(a1 + 32);
      v16 = *(void **)(v15 + 48);
      *(_QWORD *)(v15 + 48) = v14;

      sub_10021470C(*(_QWORD *)(a1 + 32), 17);
    }
    else
    {
      sub_10021470C(v9, 2);
    }
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager handleSessionStartResult:]_block_invoke", 627, CFSTR("Not expecting session start. Ignore it."), a5, a6, a7, a8, v17);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 88), "readApdu");
  }
}

void sub_1002166C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  void *v10;
  NSString *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  NSErrorUserInfoKey v19;
  void *v20;

  v9 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v9 + 8) == 8)
  {
    if (*(_QWORD *)(a1 + 40))
    {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlDataExchangeManager handleSessionResumeResult:]_block_invoke", 655, CFSTR("Error in resuming session - %@"), a5, a6, a7, a8, *(_QWORD *)(a1 + 40));
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
      v19 = NSLocalizedDescriptionKey;
      v11 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(9));
      v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      v20 = v12;
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v20, &v19, 1));
      v14 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v10, 9, v13));
      v15 = *(_QWORD *)(a1 + 32);
      v16 = *(void **)(v15 + 48);
      *(_QWORD *)(v15 + 48) = v14;

      sub_10021470C(*(_QWORD *)(a1 + 32), 17);
    }
    else
    {
      if (*(_QWORD *)(v9 + 40) == 7)
        v17 = 16;
      else
        v17 = 9;
      sub_10021470C(v9, v17);
    }
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager handleSessionResumeResult:]_block_invoke", 649, CFSTR("Not expecting session start. Ignore it."), a5, a6, a7, a8, v18);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 88), "readApdu");
  }
}

void sub_100216970(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  void *v11;
  NSString *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  NSErrorUserInfoKey v19;
  void *v20;

  if (*(_QWORD *)(a1 + 32))
  {
    KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlDataExchangeManager handleSessionPauseResult:]_block_invoke", 674, CFSTR("Error in session disconnect - %@"), a5, a6, a7, a8, *(_QWORD *)(a1 + 32));
    v9 = *(_QWORD *)(a1 + 40);
    if (!*(_QWORD *)(v9 + 48))
    {
      objc_storeStrong((id *)(v9 + 48), *(id *)(a1 + 32));
      v9 = *(_QWORD *)(a1 + 40);
    }
    v10 = 17;
    goto LABEL_7;
  }
  v9 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(v9 + 8) == 6)
  {
    v10 = 7;
LABEL_7:
    sub_10021470C(v9, v10);
    return;
  }
  KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlDataExchangeManager handleSessionPauseResult:]_block_invoke", 685, CFSTR("received pause in wrong state."), a5, a6, a7, a8, v18);
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
  v19 = NSLocalizedDescriptionKey;
  v12 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(24));
  v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  v20 = v13;
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v20, &v19, 1));
  v15 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v11, 24, v14));
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(void **)(v16 + 48);
  *(_QWORD *)(v16 + 48) = v15;

  sub_10021470C(*(_QWORD *)(a1 + 40), 17);
}

void sub_100216BF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  NSString *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  NSErrorUserInfoKey v20;
  void *v21;

  v10 = *(void **)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  if (v10)
  {
    if (!*(_QWORD *)(v9 + 48))
    {
      objc_storeStrong((id *)(v9 + 48), v10);
      v9 = *(_QWORD *)(a1 + 40);
    }
    v11 = 17;
    goto LABEL_7;
  }
  if (*(_QWORD *)(v9 + 8) == 10)
  {
    v11 = 11;
LABEL_7:
    sub_10021470C(v9, v11);
    return;
  }
  KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlDataExchangeManager handleSessionEndResult:]_block_invoke", 707, CFSTR("received end in wrong state."), a5, a6, a7, a8, v19);
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
  v20 = NSLocalizedDescriptionKey;
  v13 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(24));
  v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
  v21 = v14;
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v21, &v20, 1));
  v16 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v12, 24, v15));
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(void **)(v17 + 48);
  *(_QWORD *)(v17 + 48) = v16;

  sub_10021470C(*(_QWORD *)(a1 + 40), 17);
}

void sub_100216E50(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void **)(a1 + 32);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 40);
    if (*(_QWORD *)(v3 + 8) == 11)
    {
      objc_storeStrong((id *)(v3 + 48), v1);
      v3 = *(_QWORD *)(a1 + 40);
      v4 = 17;
    }
    else
    {
      v4 = 14;
    }
    sub_10021470C(v3, v4);
  }
}

void sub_100216F24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  int v18;
  NSString *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  NSErrorUserInfoKey v26;
  void *v27;

  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (v10 == 12)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager handleTransactionEndResult:]_block_invoke", 743, CFSTR("Received didEndTransaction during first transaction. Error: %@"), a5, a6, a7, a8, *(_QWORD *)(a1 + 40));
    if (*(_QWORD *)(a1 + 40))
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
      if (objc_msgSend(*(id *)(a1 + 40), "code") == (id)23)
        v17 = 10;
      else
        v17 = 7;
      v26 = NSLocalizedDescriptionKey;
      if (objc_msgSend(*(id *)(a1 + 40), "code") == (id)23)
        v18 = 10;
      else
        v18 = 7;
      v19 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(v18));
      v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
      v27 = v20;
      v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v27, &v26, 1));
      v22 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v16, v17, v21));
      v23 = *(_QWORD *)(a1 + 32);
      v24 = *(void **)(v23 + 48);
      *(_QWORD *)(v23 + 48) = v22;

    }
    sub_10021470C(*(_QWORD *)(a1 + 32), 14);
  }
  else if (v10 == 11)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager handleTransactionEndResult:]_block_invoke", 734, CFSTR("While waiting for mailboxes, transaction session ended with - %@."), a5, a6, a7, a8, *(_QWORD *)(a1 + 40));
    v15 = *(void **)(a1 + 40);
    if (v15)
    {
      objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 48), v15);
      sub_10021470C(*(_QWORD *)(a1 + 32), 17);
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager handleTransactionEndResult:]_block_invoke", 739, CFSTR("Transaction was successful"), v11, v12, v13, v14, v25);
      sub_10021470C(*(_QWORD *)(a1 + 32), 12);
    }
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager handleTransactionEndResult:]_block_invoke", 749, CFSTR("Received didEndTransaction callback, but we don't care about it in this state. Ignore"), a5, a6, a7, a8, a9);
  }
}

void sub_100217258(uint64_t a1)
{
  sub_100215C20(*(_QWORD *)(a1 + 32), *(void **)(a1 + 40));
}

id *sub_100217264(id *result, void *a2)
{
  if (result)
    return (id *)objc_storeWeak(result + 14, a2);
  return result;
}

uint64_t sub_100217274(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 120);
  return result;
}

uint64_t sub_100217280(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 128);
  return result;
}

uint64_t sub_10021728C(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 136);
  return result;
}

uint64_t sub_100217298(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 144);
  return result;
}

id sub_100217520(_QWORD *a1)
{
  return _objc_msgSend(*(id *)(a1[4] + 16), "didReceiveSharingInvitationWithIdentifier:fromOriginatorIDSHandle:sharingSessionIdentifier:metadata:completion:", a1[5], a1[6], a1[7], a1[8], &stru_10030EE50);
}

void sub_100217540(id a1, BOOL a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFString *v6;

  v6 = CFSTR("un-");
  if (a2)
    v6 = &stru_100316BD0;
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlWalletReporter didReceiveSharingInvitationWithIdentifier:uuid:metadata:ownerIdsId:]_block_invoke_2", 53, CFSTR("Reported to wallet %@%@"), v2, v3, v4, v5, (uint64_t)v6);
}

id sub_100217640(uint64_t a1)
{
  return _objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "finishedKeyExchangeForCredential:withCompletion:", *(_QWORD *)(a1 + 40), &stru_10030EE70);
}

void sub_100217654(id a1, BOOL a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFString *v6;

  v6 = CFSTR("un-");
  if (a2)
    v6 = &stru_100316BD0;
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlWalletReporter finishedSharingForKey:result:]_block_invoke_2", 68, CFSTR("Reported to wallet %@%@"), v2, v3, v4, v5, (uint64_t)v6);
}

id sub_10021774C(_QWORD *a1)
{
  return _objc_msgSend(*(id *)(a1[4] + 16), "didUpdateSharingInvitationWithIdentifier:reason:completion:", a1[5], a1[6], &stru_10030EE90);
}

void sub_100217768(id a1, BOOL a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFString *v6;

  v6 = CFSTR("un-");
  if (a2)
    v6 = &stru_100316BD0;
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlWalletReporter reportUnusableInvitation:reason:]_block_invoke_2", 81, CFSTR("Reported to wallet %@%@"), v2, v3, v4, v5, (uint64_t)v6);
}

id sub_1002178A4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlWalletReporter sharingCompleteForInvitationIdentifier:friendKeyIdentifier:status:]_block_invoke", 95, CFSTR("Invitation ID: %@, friendKeyID : %@"), a5, a6, a7, a8, a1[4]);
  return _objc_msgSend(*(id *)(a1[6] + 16), "sharingInvitationWasInvalidated:withCredentialIdentifier:error:completion:", a1[4], a1[5], a1[7], &stru_10030EEB0);
}

void sub_100217900(id a1, BOOL a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFString *v6;

  v6 = CFSTR("un-");
  if (a2)
    v6 = &stru_100316BD0;
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlWalletReporter sharingCompleteForInvitationIdentifier:friendKeyIdentifier:status:]_block_invoke_2", 97, CFSTR("Reported to wallet %@%@"), v2, v3, v4, v5, (uint64_t)v6);
}

void sub_100217A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100217AB0(_QWORD *a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v4[5];

  v1 = a1[5];
  v2 = *(void **)(a1[4] + 16);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100217B10;
  v4[3] = &unk_10030EF00;
  v4[4] = a1[6];
  return objc_msgSend(v2, "didReceiveSharingInvitationRequest:withCompletion:", v1, v4);
}

void sub_100217B10(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  const __CFString *v10;

  v8 = a2;
  v10 = CFSTR("un-");
  if (a2)
    v10 = &stru_100316BD0;
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlWalletReporter didReceiveInvitationRequestWithUuid:ownerKeyIdentifier:friendKeyIdentifier:targetType:]_block_invoke_2", 115, CFSTR("Reported to wallet %@%@"), a5, a6, a7, a8, (uint64_t)v10);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v8;
}

id sub_100217D04(_QWORD *a1)
{
  return _objc_msgSend(*(id *)(a1[4] + 16), "sendSharingMessageTo:message:completion:", a1[5], a1[6], &stru_10030EF68);
}

void sub_100217D20(id a1, BOOL a2, NSError *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const __CFString *v7;

  v7 = CFSTR("un-");
  if (a2)
    v7 = &stru_100316BD0;
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlWalletReporter sendCrossPlatformSharingMessage:toMailboxIdentifier:]_block_invoke_2", 150, CFSTR("Handed the message to wallet %@%@; error - %@"),
    v3,
    v4,
    v5,
    v6,
    (uint64_t)v7);
}

id sub_100217E08(_QWORD *a1)
{
  return _objc_msgSend(*(id *)(a1[4] + 16), "didReceiveActivationCodeFailureForCredentialIdentifier:attemptsRemaining:completion:", a1[5], a1[6], &stru_10030EF88);
}

void sub_100217E24(id a1, BOOL a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFString *v6;

  v6 = CFSTR("un-");
  if (a2)
    v6 = &stru_100316BD0;
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlWalletReporter passcodeRetryRequestedFor:retriesLeft:]_block_invoke_2", 159, CFSTR("Reported passcode verification failure to wallet %@%@"), v2, v3, v4, v5, (uint64_t)v6);
}

void sub_100217EEC(id a1)
{
  KmlVersionOverride *v1;
  void *v2;

  v1 = objc_alloc_init(KmlVersionOverride);
  v2 = (void *)qword_100354880;
  qword_100354880 = (uint64_t)v1;

}

uint64_t sub_10021804C(uint64_t a1, void *a2)
{
  id v4;
  char *v5;
  id *v6;
  void *v7;
  void *v8;
  id v9;
  SESConfigDCK *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  objc_super v33;

  v4 = a2;
  if (a1)
  {
    v33.receiver = (id)a1;
    v33.super_class = (Class)KmlVersions;
    v5 = (char *)objc_msgSendSuper2(&v33, "init");
    a1 = (uint64_t)v5;
    if (v5)
    {
      *((_WORD *)v5 + 8) = 0;
      v6 = (id *)(v5 + 8);
      objc_storeStrong((id *)v5 + 1, a2);
      v7 = *(void **)(a1 + 8);
      if (v7)
      {
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "readerInfo"));
        v9 = objc_msgSend(objc_alloc((Class)KmlRoutingInformation), "initWithReaderInformation:", v8);
        v10 = objc_opt_new(SESConfigDCK);
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "manufacturer"));
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "brand"));
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v6, "readerConfigID"));
        v14 = (void *)objc_claimAutoreleasedReturnValue(-[SESConfigDCK BOOLValueForSetting:manufacturer:brand:uuid:error:](v10, "BOOLValueForSetting:manufacturer:brand:uuid:error:", 1, v11, v12, v13, 0));

        if (v14)
          *(_BYTE *)(a1 + 17) = objc_msgSend(v14, "BOOLValue");
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "manufacturer"));
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "brand"));
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v6, "readerConfigID"));
        v18 = (void *)objc_claimAutoreleasedReturnValue(-[SESConfigDCK BOOLValueForSetting:manufacturer:brand:uuid:error:](v10, "BOOLValueForSetting:manufacturer:brand:uuid:error:", 3, v15, v16, v17, 0));

        if (v18)
          *(_BYTE *)(a1 + 16) = objc_msgSend(v18, "BOOLValue");

      }
      v19 = (void *)objc_claimAutoreleasedReturnValue(+[KmlVersionOverride sharedVersionsOverrides](KmlVersionOverride, "sharedVersionsOverrides"));
      *(_WORD *)(a1 + 32) = (unsigned __int16)objc_msgSend(v19, "keyRoleToShare");
      v20 = *(void **)(a1 + 112);
      *(_QWORD *)(a1 + 112) = &off_100322B20;

      *(_WORD *)(a1 + 22) = 256;
      if (objc_msgSend(v19, "kmlOverrideVersion") == 768 && !*(_BYTE *)(a1 + 17))
      {
        v28 = *(void **)(a1 + 96);
        *(_QWORD *)(a1 + 96) = &off_100322B38;

        v29 = *(void **)(a1 + 104);
        *(_QWORD *)(a1 + 104) = &off_100322B50;

        *(_WORD *)(a1 + 18) = 768;
        v30 = *(void **)(a1 + 120);
        *(_QWORD *)(a1 + 120) = &off_100322B68;

        v31 = *(void **)(a1 + 128);
        *(_QWORD *)(a1 + 128) = &off_100322B80;

        *(_WORD *)(a1 + 26) = 768;
      }
      else
      {
        sub_1002182D4(a1);
      }
      sub_100218350(a1, v21, v22, v23, v24, v25, v26, v27, (uint64_t)v33.receiver);

    }
  }

  return a1;
}

void sub_1002182D4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  if (a1)
  {
    v2 = *(void **)(a1 + 96);
    *(_QWORD *)(a1 + 96) = &off_100322B98;

    v3 = *(void **)(a1 + 104);
    *(_QWORD *)(a1 + 104) = &off_100322BB0;

    *(_WORD *)(a1 + 18) = 256;
    v4 = *(void **)(a1 + 120);
    *(_QWORD *)(a1 + 120) = &off_100322BC8;

    v5 = *(void **)(a1 + 128);
    *(_QWORD *)(a1 + 128) = &off_100322BE0;

    *(_WORD *)(a1 + 26) = 256;
  }
}

void sub_100218350(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a1)
  {
    sub_10021A2C0(a1);
    sub_100219254(a1);
    sub_10021A414(a1);
    sub_10021A194(a1, v10, v11, v12, v13, v14, v15, v16, a9);
  }
}

void sub_100218584(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a1)
  {
    if (*(_WORD *)(a1 + 18) == 256)
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlVersions downgradePreferredVersion]", 196, CFSTR("We are already at v1, nothing to downgrade"), a5, a6, a7, a8, a9);
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlVersions downgradePreferredVersion]", 200, CFSTR("Let's downgrade to v1"), a5, a6, a7, a8, v17);
      *(_BYTE *)(a1 + 17) = 1;
      sub_1002182D4(a1);
      sub_100218350(a1, v10, v11, v12, v13, v14, v15, v16, a9);
    }
  }
}

id sub_100218608(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  id *v10;
  id *v11;
  void *v12;
  NSString *v13;
  void *v14;
  void *v15;
  void *v16;
  NSString *v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  NSErrorUserInfoKey v23;
  void *v24;
  _BYTE v25[128];
  NSErrorUserInfoKey v26;
  id v27;

  v3 = a2;
  v4 = v3;
  if (!a1)
  {
    v16 = 0;
    goto LABEL_19;
  }
  if (objc_msgSend(v3, "length"))
  {
    v5 = sub_10022C7A4((uint64_t)KmlTlv, v4);
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    v6 = (id)objc_claimAutoreleasedReturnValue(v5);
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v19, v25, 16);
    if (v7)
    {
      v8 = *(_QWORD *)v20;
      while (2)
      {
        for (i = 0; i != v7; i = (char *)i + 1)
        {
          if (*(_QWORD *)v20 != v8)
            objc_enumerationMutation(v6);
          v10 = *(id **)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)i);
          if (sub_100055868((uint64_t)v10) == 93)
          {
            v11 = sub_10022CD6C(v10);
            v7 = (id)objc_claimAutoreleasedReturnValue(v11);
            goto LABEL_13;
          }
        }
        v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v19, v25, 16);
        if (v7)
          continue;
        break;
      }
    }
LABEL_13:

    if ((unint64_t)objc_msgSend(v7, "length", (_QWORD)v19) > 1)
    {
      v7 = objc_retainAutorelease(v7);
      v16 = 0;
      *(_WORD *)(a1 + 28) = sub_1002188DC(a1, bswap32(*(unsigned __int16 *)objc_msgSend(v7, "bytes")) >> 16);
      goto LABEL_18;
    }
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
    v23 = NSLocalizedDescriptionKey;
    v13 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(22));
    v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    v24 = v14;
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v24, &v23, 1));
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v12, 22, v15));

  }
  else
  {
    v6 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
    v26 = NSLocalizedDescriptionKey;
    v17 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(22));
    v7 = (id)objc_claimAutoreleasedReturnValue(v17);
    v27 = v7;
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v27, &v26, 1));
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v6, 22, v12));
  }

LABEL_18:
LABEL_19:

  return v16;
}

uint64_t sub_1002188DC(uint64_t a1, uint64_t a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  if (!a1)
    return 0;
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v3 = *(id *)(a1 + 120);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v10;
LABEL_4:
    v7 = 0;
    while (1)
    {
      if (*(_QWORD *)v10 != v6)
        objc_enumerationMutation(v3);
      if (objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * v7), "unsignedShortValue", (_QWORD)v9) == (_DWORD)a2)
        break;
      if (v5 == (id)++v7)
      {
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
        if (v5)
          goto LABEL_4;
        goto LABEL_10;
      }
    }
  }
  else
  {
LABEL_10:
    a2 = 768;
  }

  return a2;
}

id sub_1002189E4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  id *v10;
  id *v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  NSString *v17;
  void *v18;
  void *v19;
  void *v20;
  NSString *v21;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  NSErrorUserInfoKey v27;
  void *v28;
  _BYTE v29[128];
  NSErrorUserInfoKey v30;
  id v31;

  v3 = a2;
  v4 = v3;
  if (!a1)
  {
    v20 = 0;
    goto LABEL_19;
  }
  if (objc_msgSend(v3, "length"))
  {
    v5 = sub_10022C7A4((uint64_t)KmlTlv, v4);
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v6 = (id)objc_claimAutoreleasedReturnValue(v5);
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v23, v29, 16);
    if (v7)
    {
      v8 = *(_QWORD *)v24;
      while (2)
      {
        for (i = 0; i != v7; i = (char *)i + 1)
        {
          if (*(_QWORD *)v24 != v8)
            objc_enumerationMutation(v6);
          v10 = *(id **)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)i);
          if (sub_100055868((uint64_t)v10) == 92)
          {
            v11 = sub_10022CD6C(v10);
            v7 = (id)objc_claimAutoreleasedReturnValue(v11);
            v12 = sub_10022D014((uint64_t)v10);
            v13 = objc_claimAutoreleasedReturnValue(v12);
            v14 = *(void **)(a1 + 80);
            *(_QWORD *)(a1 + 80) = v13;

            goto LABEL_13;
          }
        }
        v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v23, v29, 16);
        if (v7)
          continue;
        break;
      }
    }
LABEL_13:

    if ((unint64_t)objc_msgSend(v7, "length", (_QWORD)v23) > 1)
    {
      v7 = objc_retainAutorelease(v7);
      v20 = 0;
      *(_WORD *)(a1 + 24) = sub_100218CDC(a1, bswap32(*(unsigned __int16 *)objc_msgSend(v7, "bytes")) >> 16);
      goto LABEL_18;
    }
    v15 = *(void **)(a1 + 80);
    *(_QWORD *)(a1 + 80) = 0;

    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
    v27 = NSLocalizedDescriptionKey;
    v17 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(22));
    v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
    v28 = v18;
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v28, &v27, 1));
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v16, 22, v19));

  }
  else
  {
    v6 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
    v30 = NSLocalizedDescriptionKey;
    v21 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(22));
    v7 = (id)objc_claimAutoreleasedReturnValue(v21);
    v31 = v7;
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v31, &v30, 1));
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v6, 22, v16));
  }

LABEL_18:
LABEL_19:

  return v20;
}

uint64_t sub_100218CDC(uint64_t a1, uint64_t a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  if (!a1)
    return 0;
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v3 = *(id *)(a1 + 112);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v10;
LABEL_4:
    v7 = 0;
    while (1)
    {
      if (*(_QWORD *)v10 != v6)
        objc_enumerationMutation(v3);
      if (objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * v7), "unsignedShortValue", (_QWORD)v9) == (_DWORD)a2)
        break;
      if (v5 == (id)++v7)
      {
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
        if (v5)
          goto LABEL_4;
        goto LABEL_10;
      }
    }
  }
  else
  {
LABEL_10:
    a2 = 0;
  }

  return a2;
}

id sub_100218DE4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  id *v10;
  id *v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  NSString *v17;
  void *v18;
  void *v19;
  NSString *v20;
  void *v21;
  unsigned __int16 *v22;
  unsigned int v23;
  void *v24;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  NSErrorUserInfoKey v30;
  void *v31;
  _BYTE v32[128];
  NSErrorUserInfoKey v33;
  id v34;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    if (objc_msgSend(v3, "length"))
    {
      v5 = sub_10022C7A4((uint64_t)KmlTlv, v4);
      v26 = 0u;
      v27 = 0u;
      v28 = 0u;
      v29 = 0u;
      v6 = (id)objc_claimAutoreleasedReturnValue(v5);
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v26, v32, 16);
      if (v7)
      {
        v8 = *(_QWORD *)v27;
        while (2)
        {
          for (i = 0; i != v7; i = (char *)i + 1)
          {
            if (*(_QWORD *)v27 != v8)
              objc_enumerationMutation(v6);
            v10 = *(id **)(*((_QWORD *)&v26 + 1) + 8 * (_QWORD)i);
            if (sub_100055868((uint64_t)v10) == 91)
            {
              v11 = sub_10022CD6C(v10);
              v7 = (id)objc_claimAutoreleasedReturnValue(v11);
              v12 = sub_10022D014((uint64_t)v10);
              v13 = objc_claimAutoreleasedReturnValue(v12);
              v14 = *(void **)(a1 + 64);
              *(_QWORD *)(a1 + 64) = v13;

              goto LABEL_13;
            }
          }
          v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v26, v32, 16);
          if (v7)
            continue;
          break;
        }
      }
LABEL_13:

      if ((unint64_t)objc_msgSend(v7, "length") > 1)
      {
        v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString string](NSMutableString, "string"));
        v7 = objc_retainAutorelease(v7);
        v22 = (unsigned __int16 *)objc_msgSend(v7, "bytes");
        v23 = sub_10021914C(a1, bswap32(*v22) >> 16);
        *(_WORD *)(a1 + 20) = v23;
        objc_msgSend(v21, "appendFormat:", CFSTR("%04X"), v23);
        if ((unint64_t)objc_msgSend(v7, "length") >= 4)
          objc_msgSend(v21, "appendFormat:", CFSTR(",%04X"), __rev16(v22[1]));
        v24 = *(void **)(a1 + 72);
        *(_QWORD *)(a1 + 72) = v21;

        if (*(_WORD *)(a1 + 20) == 768)
          *(_WORD *)(a1 + 28) = 768;
        sub_100219254(a1);
        a1 = 0;
        goto LABEL_22;
      }
      v15 = *(void **)(a1 + 64);
      *(_QWORD *)(a1 + 64) = 0;

      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
      v30 = NSLocalizedDescriptionKey;
      v17 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(22));
      v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
      v31 = v18;
      v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v31, &v30, 1));
      a1 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v16, 22, v19));

    }
    else
    {
      v6 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
      v33 = NSLocalizedDescriptionKey;
      v20 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(22));
      v7 = (id)objc_claimAutoreleasedReturnValue(v20);
      v34 = v7;
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v34, &v33, 1));
      a1 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v6, 22, v16));
    }

LABEL_22:
  }

  return (id)a1;
}

uint64_t sub_10021914C(uint64_t a1, uint64_t a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  if (!a1)
    return 0;
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v3 = *(id *)(a1 + 96);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v10;
LABEL_4:
    v7 = 0;
    while (1)
    {
      if (*(_QWORD *)v10 != v6)
        objc_enumerationMutation(v3);
      if (objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * v7), "unsignedShortValue", (_QWORD)v9) == (_DWORD)a2)
        break;
      if (v5 == (id)++v7)
      {
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
        if (v5)
          goto LABEL_4;
        goto LABEL_10;
      }
    }
  }
  else
  {
LABEL_10:
    a2 = 0;
  }

  return a2;
}

void sub_100219254(uint64_t a1)
{
  _WORD *v2;
  uint64_t v3;
  void *v4;

  if (a1)
  {
    v2 = sub_10022CBF0((uint64_t)KmlTlv, 84, *(unsigned __int16 *)(a1 + 20));
    v3 = objc_claimAutoreleasedReturnValue(v2);
    v4 = *(void **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v3;

  }
}

id sub_100219298(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  void *i;
  id *v15;
  id v16;
  id *v17;
  NSString *v18;
  void *v19;
  void *v20;
  NSString *v21;
  void *v22;
  void *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  NSErrorUserInfoKey v40;
  void *v41;
  _BYTE v42[128];
  NSErrorUserInfoKey v43;
  id v44;

  v3 = a2;
  v4 = v3;
  if (!a1)
  {
    v20 = 0;
    goto LABEL_23;
  }
  if (objc_msgSend(v3, "length"))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlVersions updateSupportedFrameworkVersionsForSharing:]", 316, CFSTR("versionData: %@"), v5, v6, v7, v8, (uint64_t)v4);
    v9 = sub_10022C7A4((uint64_t)KmlTlv, v4);
    v36 = 0u;
    v37 = 0u;
    v38 = 0u;
    v39 = 0u;
    v10 = (id)objc_claimAutoreleasedReturnValue(v9);
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v36, v42, 16);
    if (v11)
    {
      v12 = v11;
      v13 = *(_QWORD *)v37;
      while (2)
      {
        for (i = 0; i != v12; i = (char *)i + 1)
        {
          if (*(_QWORD *)v37 != v13)
            objc_enumerationMutation(v10);
          v15 = *(id **)(*((_QWORD *)&v36 + 1) + 8 * (_QWORD)i);
          if (sub_100055868((uint64_t)v15) == 84 || sub_100055868((uint64_t)v15) == 85)
          {
            v17 = sub_10022CD6C(v15);
            v16 = (id)objc_claimAutoreleasedReturnValue(v17);
            goto LABEL_16;
          }
        }
        v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v36, v42, 16);
        v16 = 0;
        if (v12)
          continue;
        break;
      }
    }
    else
    {
      v16 = 0;
    }
LABEL_16:

    if ((unint64_t)objc_msgSend(v16, "length") > 1)
    {
      v16 = objc_retainAutorelease(v16);
      v24 = sub_10021914C(a1, bswap32(*(unsigned __int16 *)objc_msgSend(v16, "bytes")) >> 16);
      *(_WORD *)(a1 + 22) = v24;
      if (v24
        || (KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlVersions updateSupportedFrameworkVersionsForSharing:]", 337, CFSTR("Treating unknown sharing version as v1 for sharing"), v25, v26, v27, v28, v34), *(_WORD *)(a1 + 22) = 256, *(_WORD *)(a1 + 20)))
      {
        v20 = 0;
      }
      else
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlVersions updateSupportedFrameworkVersionsForSharing:]", 340, CFSTR("Sync agreed vehicle version to v1"), v29, v30, v31, v32, v35);
        v20 = 0;
        *(_WORD *)(a1 + 20) = 256;
      }
      goto LABEL_22;
    }
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
    v40 = NSLocalizedDescriptionKey;
    v21 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(22));
    v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
    v41 = v22;
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v41, &v40, 1));
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v19, 22, v23));

  }
  else
  {
    v10 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
    v43 = NSLocalizedDescriptionKey;
    v18 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(22));
    v16 = (id)objc_claimAutoreleasedReturnValue(v18);
    v44 = v16;
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v44, &v43, 1));
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v10, 22, v19));
  }

LABEL_22:
LABEL_23:

  return v20;
}

id sub_100219600(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  id *v10;
  id *v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  NSString *v17;
  void *v18;
  void *v19;
  void *v20;
  NSString *v21;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  NSErrorUserInfoKey v27;
  void *v28;
  _BYTE v29[128];
  NSErrorUserInfoKey v30;
  id v31;

  v3 = a2;
  v4 = v3;
  if (!a1)
  {
    v20 = 0;
    goto LABEL_19;
  }
  if (objc_msgSend(v3, "length"))
  {
    v5 = sub_10022C7A4((uint64_t)KmlTlv, v4);
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v6 = (id)objc_claimAutoreleasedReturnValue(v5);
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v23, v29, 16);
    if (v7)
    {
      v8 = *(_QWORD *)v24;
      while (2)
      {
        for (i = 0; i != v7; i = (char *)i + 1)
        {
          if (*(_QWORD *)v24 != v8)
            objc_enumerationMutation(v6);
          v10 = *(id **)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)i);
          if (sub_100055868((uint64_t)v10) == 94)
          {
            v11 = sub_10022CD6C(v10);
            v7 = (id)objc_claimAutoreleasedReturnValue(v11);
            v12 = sub_10022D014((uint64_t)v10);
            v13 = objc_claimAutoreleasedReturnValue(v12);
            v14 = *(void **)(a1 + 136);
            *(_QWORD *)(a1 + 136) = v13;

            goto LABEL_13;
          }
        }
        v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v23, v29, 16);
        if (v7)
          continue;
        break;
      }
    }
LABEL_13:

    if ((unint64_t)objc_msgSend(v7, "length", (_QWORD)v23) > 1)
    {
      v20 = 0;
      *(_WORD *)(a1 + 30) = 256;
      goto LABEL_18;
    }
    v15 = *(void **)(a1 + 136);
    *(_QWORD *)(a1 + 136) = 0;

    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
    v27 = NSLocalizedDescriptionKey;
    v17 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(22));
    v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
    v28 = v18;
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v28, &v27, 1));
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v16, 22, v19));

  }
  else
  {
    v6 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
    v30 = NSLocalizedDescriptionKey;
    v21 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(22));
    v7 = (id)objc_claimAutoreleasedReturnValue(v21);
    v31 = v7;
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v31, &v30, 1));
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v6, 22, v16));
  }

LABEL_18:
LABEL_19:

  return v20;
}

id sub_1002198D8(id a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  void *v5;

  v1 = a1;
  if (a1)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData data](NSMutableData, "data"));
    v3 = v2;
    if (*((_QWORD *)v1 + 8))
      objc_msgSend(v2, "appendData:");
    if (*((_QWORD *)v1 + 10))
      objc_msgSend(v3, "appendData:");
    v4 = sub_100219990((uint64_t)v1);
    v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    objc_msgSend(v3, "appendData:", v5);

    if (objc_msgSend(*((id *)v1 + 17), "length"))
      objc_msgSend(v3, "appendData:", *((_QWORD *)v1 + 17));
    if (objc_msgSend(v3, "length"))
      v1 = v3;
    else
      v1 = 0;

  }
  return v1;
}

id sub_100219990(uint64_t a1)
{
  _WORD *v1;
  void *v2;
  id v3;
  void *v4;

  if (a1)
  {
    v1 = sub_10022CBF0((uint64_t)KmlTlv, 93, *(unsigned __int16 *)(a1 + 28));
    v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
    v3 = sub_10022D014((uint64_t)v2);
    v4 = (void *)objc_claimAutoreleasedReturnValue(v3);

  }
  else
  {
    v4 = 0;
  }
  return v4;
}

unsigned __int16 *sub_1002199E8(unsigned __int16 *a1)
{
  _WORD *v1;

  if (a1)
  {
    v1 = sub_10022CBF0((uint64_t)KmlTlv, 85, a1[11]);
    a1 = (unsigned __int16 *)objc_claimAutoreleasedReturnValue(v1);
  }
  return a1;
}

unsigned __int16 *sub_100219A18(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _WORD *v8;
  uint64_t vars0;

  if (a1)
  {
    if (a1[15])
    {
      v8 = sub_10022CBF0((uint64_t)KmlTlv, 95, a1[15]);
      a1 = (unsigned __int16 *)objc_claimAutoreleasedReturnValue(v8);
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlVersions getAgreedBluetoothVersionsTlv]", 412, CFSTR("Vehicle never provided a supported versiosn list"), a5, a6, a7, a8, vars0);
      a1 = 0;
    }
  }
  return a1;
}

BOOL sub_100219A6C(_BOOL8 result)
{
  int v1;

  if (result)
  {
    v1 = *(unsigned __int16 *)(result + 20);
    return v1 == 257 || v1 == 768;
  }
  return result;
}

id sub_100219A88(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  if (!a1)
    return 0;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString string](NSMutableString, "string"));
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v3 = *(id *)(a1 + 96);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v10;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v10 != v6)
          objc_enumerationMutation(v3);
        objc_msgSend(v2, "appendFormat:", CFSTR("%04X,"), objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)v7), "unsignedShortValue"));
        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v5);
  }

  return v2;
}

void sub_100219BBC(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  id v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  void *i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  id v23;
  id v24;
  uint64_t v25;
  void *j;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  id v38;
  uint64_t v39;
  void *k;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  id obj;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  _BYTE v63[128];
  _BYTE v64[128];
  _BYTE v65[128];

  v7 = a3;
  if (!a1)
  {
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    goto LABEL_38;
  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString string](NSMutableString, "string"));
  v59 = 0u;
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  v9 = v7;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v59, v65, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v60;
    do
    {
      for (i = 0; i != v11; i = (char *)i + 1)
      {
        if (*(_QWORD *)v60 != v12)
          objc_enumerationMutation(v9);
        objc_msgSend(v8, "appendFormat:", CFSTR("0x%04lx, "), objc_msgSend(*(id *)(*((_QWORD *)&v59 + 1) + 8 * (_QWORD)i), "longValue"));
      }
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v59, v65, 16);
    }
    while (v11);
  }

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlVersions hasUpgradeForVersionType:versions:]", 447, CFSTR("Requested Versions = { %@ }"), v14, v15, v16, v17, (uint64_t)v8);
  *(_QWORD *)(a4 + 16) = 0;
  v22 = (_QWORD *)(a4 + 16);
  *(_QWORD *)a4 = a2;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 24) = 0;
  if (*(_BYTE *)(a1 + 16))
  {
    if (a2 != 2)
    {
      if (a2)
        goto LABEL_37;
      *v22 = *(unsigned __int16 *)(a1 + 20);
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlVersions hasUpgradeForVersionType:versions:]", 459, CFSTR("Looking for available upgrade of Framework version"), v18, v19, v20, v21, v47);
      if (*(unsigned __int16 *)(a1 + 18) == *(unsigned __int16 *)(a1 + 20))
        goto LABEL_37;
      v49 = v7;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      obj = *(id *)(a1 + 104);
      v23 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v55, v64, 16);
      if (v23)
      {
        v24 = v23;
        v25 = *(_QWORD *)v56;
        while (2)
        {
          for (j = 0; j != v24; j = (char *)j + 1)
          {
            if (*(_QWORD *)v56 != v25)
              objc_enumerationMutation(obj);
            v27 = *(void **)(*((_QWORD *)&v55 + 1) + 8 * (_QWORD)j);
            v28 = *(unsigned __int16 *)(a1 + 20);
            objc_msgSend(v27, "longValue");
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlVersions hasUpgradeForVersionType:versions:]", 462, CFSTR("Checking availability: Framework upgrade from : 0x%04hx, to : 0x%04lx"), v29, v30, v31, v32, v28);
            if (objc_msgSend(v9, "containsObject:", v27))
            {
              v46 = 464;
              goto LABEL_35;
            }
          }
          v24 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v55, v64, 16);
          if (v24)
            continue;
          break;
        }
      }
      goto LABEL_36;
    }
    *v22 = *(unsigned __int16 *)(a1 + 28);
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlVersions hasUpgradeForVersionType:versions:]", 474, CFSTR("Looking for available upgrade of VehicleServer version"), v18, v19, v20, v21, v47);
    if (*(unsigned __int16 *)(a1 + 26) != *(unsigned __int16 *)(a1 + 28))
    {
      v49 = v7;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      obj = *(id *)(a1 + 128);
      v37 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v51, v63, 16);
      if (v37)
      {
        v38 = v37;
        v39 = *(_QWORD *)v52;
        while (2)
        {
          for (k = 0; k != v38; k = (char *)k + 1)
          {
            if (*(_QWORD *)v52 != v39)
              objc_enumerationMutation(obj);
            v27 = *(void **)(*((_QWORD *)&v51 + 1) + 8 * (_QWORD)k);
            v41 = *(unsigned __int16 *)(a1 + 28);
            objc_msgSend(v27, "longValue");
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlVersions hasUpgradeForVersionType:versions:]", 477, CFSTR("Checking availability: VehicleServer upgrade from : 0x%04hx, to : 0x%04lx"), v42, v43, v44, v45, v41);
            if (objc_msgSend(v9, "containsObject:", v27))
            {
              v46 = 479;
LABEL_35:
              KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlVersions hasUpgradeForVersionType:versions:]", v46, CFSTR("Upgrade eligible"), v33, v34, v35, v36, v48);
              *(_QWORD *)(a4 + 24) = objc_msgSend(v27, "longValue");
              *(_BYTE *)(a4 + 8) = 1;
              goto LABEL_36;
            }
          }
          v38 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v51, v63, 16);
          if (v38)
            continue;
          break;
        }
      }
LABEL_36:

      v7 = v49;
    }
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlVersions hasUpgradeForVersionType:versions:]", 452, CFSTR("Upgrade disabled by settings"), v18, v19, v20, v21, v47);
  }
LABEL_37:

LABEL_38:
}

void sub_100219FC8(uint64_t a1, uint64_t a2, unsigned __int16 a3)
{
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *i;
  id *v11;
  id *v12;
  void *v13;
  _WORD *v14;
  void *v15;
  id v16;
  uint64_t v17;
  void *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];

  if (a1)
  {
    if (a2 == 2)
    {
      *(_WORD *)(a1 + 28) = sub_1002188DC(a1, a3);
    }
    else if (!a2)
    {
      *(_WORD *)(a1 + 20) = sub_10021914C(a1, a3);
      v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData data](NSMutableData, "data"));
      objc_msgSend(v4, "appendU16BE:", *(unsigned __int16 *)(a1 + 20));
      v5 = sub_10022C7A4((uint64_t)KmlTlv, *(void **)(a1 + 80));
      v19 = 0u;
      v20 = 0u;
      v21 = 0u;
      v22 = 0u;
      v6 = (id)objc_claimAutoreleasedReturnValue(v5);
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
      if (v7)
      {
        v8 = v7;
        v9 = *(_QWORD *)v20;
        while (2)
        {
          for (i = 0; i != v8; i = (char *)i + 1)
          {
            if (*(_QWORD *)v20 != v9)
              objc_enumerationMutation(v6);
            v11 = *(id **)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)i);
            if (sub_100055868((uint64_t)v11) == 91)
            {
              v12 = sub_10022CD6C(v11);
              v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
              objc_msgSend(v4, "appendData:", v13, (_QWORD)v19);

              goto LABEL_15;
            }
          }
          v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
          if (v8)
            continue;
          break;
        }
      }
LABEL_15:

      v14 = sub_10022CB3C((uint64_t)KmlTlv, 91, v4);
      v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
      v16 = sub_10022D014((uint64_t)v15);
      v17 = objc_claimAutoreleasedReturnValue(v16);
      v18 = *(void **)(a1 + 64);
      *(_QWORD *)(a1 + 64) = v17;

      sub_100219254(a1);
    }
  }
}

void sub_10021A194(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  id v28;

  if (a1)
  {
    *(_WORD *)(a1 + 20) = 256;
    *(_WORD *)(a1 + 24) = 256;
    *(_DWORD *)(a1 + 28) = 256;
    v10 = *(void **)(a1 + 80);
    *(_QWORD *)(a1 + 80) = 0;

    v11 = *(void **)(a1 + 64);
    *(_QWORD *)(a1 + 64) = 0;

    v12 = *(void **)(a1 + 136);
    *(_QWORD *)(a1 + 136) = 0;

    v17 = *(void **)(a1 + 8);
    if (v17
      && (v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "revocationAttestation")),
          v18,
          !v18))
    {
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 8), "vehicleSupportedVersionsData"));
      v28 = v19;
      if (v19 && objc_msgSend(v19, "length"))
      {
        v24 = sub_100218DE4(a1, v28);
        v25 = sub_1002189E4(a1, v28);
        v26 = sub_100218608(a1, v28);
      }
      else
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlVersions parseVehicleSupportedVersions]", 543, CFSTR("No vehicle supported versions data"), v20, v21, v22, v23, v27);
      }

    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlVersions parseVehicleSupportedVersions]", 536, CFSTR("Valid endpoint not set"), v13, v14, v15, v16, a9);
    }
  }
}

void sub_10021A2C0(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  _WORD *v9;
  uint64_t v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];

  if (a1)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData data](NSMutableData, "data"));
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v3 = *(id *)(a1 + 96);
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v13;
      do
      {
        for (i = 0; i != v5; i = (char *)i + 1)
        {
          if (*(_QWORD *)v13 != v6)
            objc_enumerationMutation(v3);
          v8 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)i);
          if (objc_msgSend(v8, "unsignedShortValue", (_QWORD)v12) != 257)
            objc_msgSend(v2, "appendU16BE:", objc_msgSend(v8, "unsignedShortValue"));
        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      }
      while (v5);
    }

    v9 = sub_10022CB3C((uint64_t)KmlTlv, 90, v2);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    v11 = *(void **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v10;

  }
}

void sub_10021A414(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  _WORD *v8;
  uint64_t v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];

  if (a1)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData data](NSMutableData, "data"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = *(id *)(a1 + 112);
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          objc_msgSend(v2, "appendU16BE:", objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)v7), "unsignedShortValue", (_QWORD)v11));
          v7 = (char *)v7 + 1;
        }
        while (v5 != v7);
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    v8 = sub_10022CB3C((uint64_t)KmlTlv, 92, v2);
    v9 = objc_claimAutoreleasedReturnValue(v8);
    v10 = *(void **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v9;

  }
}

id sub_10021A6C0(id a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  dispatch_queue_attr_t v15;
  NSObject *v16;
  dispatch_queue_t v17;
  void *v18;
  dispatch_queue_attr_t v19;
  NSObject *v20;
  dispatch_queue_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  objc_super v31;

  v3 = a2;
  if (a1)
  {
    v31.receiver = a1;
    v31.super_class = (Class)KmlNfcPairingTransport;
    v4 = objc_msgSendSuper2(&v31, "init");
    a1 = v4;
    if (v4)
    {
      objc_msgSend(v4, "setDelegate:", v3);
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport initWithDelegate:]", 85, CFSTR("let's init"), v5, v6, v7, v8, (uint64_t)v31.receiver);
      v9 = (void *)*((_QWORD *)a1 + 4);
      *((_QWORD *)a1 + 4) = 0;

      v10 = (void *)*((_QWORD *)a1 + 5);
      *((_QWORD *)a1 + 5) = 0;

      v11 = (void *)*((_QWORD *)a1 + 6);
      *((_QWORD *)a1 + 6) = 0;

      *((_BYTE *)a1 + 56) = 0;
      v12 = (void *)*((_QWORD *)a1 + 8);
      *((_QWORD *)a1 + 8) = 0;

      *((_QWORD *)a1 + 1) = 0;
      *((_DWORD *)a1 + 4) = 0;
      v13 = objc_claimAutoreleasedReturnValue(+[NFHardwareManager sharedHardwareManager](NFHardwareManager, "sharedHardwareManager"));
      v14 = (void *)*((_QWORD *)a1 + 3);
      *((_QWORD *)a1 + 3) = v13;

      v15 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
      v16 = objc_claimAutoreleasedReturnValue(v15);
      v17 = dispatch_queue_create("com.apple.sesd.kml.readApdu", v16);
      v18 = (void *)*((_QWORD *)a1 + 9);
      *((_QWORD *)a1 + 9) = v17;

      v19 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
      v20 = objc_claimAutoreleasedReturnValue(v19);
      v21 = dispatch_queue_create("com.apple.sesd.kml.nfcTransport", v20);
      v22 = (void *)*((_QWORD *)a1 + 10);
      *((_QWORD *)a1 + 10) = v21;

      v23 = (void *)*((_QWORD *)a1 + 11);
      *((_QWORD *)a1 + 11) = 0;

      v24 = (void *)*((_QWORD *)a1 + 12);
      *((_QWORD *)a1 + 12) = 0;

      *((_BYTE *)a1 + 104) = 0;
      v25 = (void *)*((_QWORD *)a1 + 14);
      *((_QWORD *)a1 + 14) = 0;

      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport initWithDelegate:]", 102, CFSTR("ready to roll"), v26, v27, v28, v29, (uint64_t)v31.receiver);
    }
  }

  return a1;
}

void sub_10021A8A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10021A8B0(*(_QWORD **)(a1 + 32), a2, a3, a4, a5, a6, a7, a8);
}

void sub_10021A8B0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  NSString *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  NSErrorUserInfoKey v16;
  void *v17;

  if (a1)
  {
    if (a1[1])
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport startSession_sync]", 536, CFSTR("Transport not ready to create session"), a5, a6, a7, a8, v15);
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
      v16 = NSLocalizedDescriptionKey;
      v10 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(25));
      v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      v17 = v11;
      v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v17, &v16, 1));
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v9, 25, v12));

      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "delegate"));
      objc_msgSend(v14, "handleSessionStartResult:", v13);

    }
    else
    {
      sub_10021B318((uint64_t)a1, 1);
    }
  }
}

void sub_10021AA88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 104) = 1;
  sub_10021A8B0(*(_QWORD **)(a1 + 32), a2, a3, a4, a5, a6, a7, a8);
}

void sub_10021AAF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10021AAFC(*(_QWORD *)(a1 + 32), a2, a3, a4, a5, a6, a7, a8, a9);
}

void sub_10021AAFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;
  BOOL v11;
  uint64_t v12;
  int v13;
  NSString *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  NSErrorUserInfoKey v19;
  void *v20;

  if (a1)
  {
    switch(*(_QWORD *)(a1 + 8))
    {
      case 2:
      case 6:
        v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
        v11 = *(_BYTE *)(a1 + 104) == 0;
        if (*(_BYTE *)(a1 + 104))
          v12 = 23;
        else
          v12 = 24;
        v19 = NSLocalizedDescriptionKey;
        if (v11)
          v13 = 24;
        else
          v13 = 23;
        v14 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(v13));
        v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
        v20 = v15;
        v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v20, &v19, 1));
        v17 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v10, v12, v16));
        v18 = *(void **)(a1 + 64);
        *(_QWORD *)(a1 + 64) = v17;

        sub_10021B318(a1, 9);
        break;
      case 3:
      case 7:
        sub_10021B318(a1, 8);
        break;
      default:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport endSession_sync]", 551, CFSTR("session is not running. Ignore request to end it"), a5, a6, a7, a8, a9);
        break;
    }
  }
}

void sub_10021AD24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10021AD2C(*(_QWORD **)(a1 + 32), a2, a3, a4, a5, a6, a7, a8);
}

void sub_10021AD2C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  void *v10;
  NSString *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  NSErrorUserInfoKey v18;
  void *v19;

  if (a1)
  {
    v9 = a1[1];
    if (v9 == 5)
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport pauseSession_sync]", 571, CFSTR("Session already paused."), a5, a6, a7, a8, (uint64_t)v16);
      v17 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "delegate"));
      objc_msgSend(v17, "handleSessionPauseResult:", 0);

    }
    else if (v9 == 3)
    {
      sub_10021B318((uint64_t)a1, 4);
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport pauseSession_sync]", 575, CFSTR("Transport not running to pause"), a5, a6, a7, a8, (uint64_t)v16);
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
      v18 = NSLocalizedDescriptionKey;
      v11 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(25));
      v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      v19 = v12;
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v19, &v18, 1));
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v10, 25, v13));

      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "delegate"));
      objc_msgSend(v15, "handleSessionPauseResult:", v14);

    }
  }
}

void sub_10021AF78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 104) = 1;
  sub_10021AF8C(*(_QWORD **)(a1 + 32), a2, a3, a4, a5, a6, a7, a8);
}

void sub_10021AF8C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  NSString *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  NSErrorUserInfoKey v16;
  void *v17;

  if (a1)
  {
    if (a1[1] == 5)
    {
      sub_10021B318((uint64_t)a1, 6);
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport resumeSession_sync]", 560, CFSTR("Transport not ready to resume session"), a5, a6, a7, a8, v15);
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
      v16 = NSLocalizedDescriptionKey;
      v10 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(25));
      v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      v17 = v11;
      v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v17, &v16, 1));
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v9, 25, v12));

      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "delegate"));
      objc_msgSend(v14, "handleSessionResumeResult:", v13);

    }
  }
}

void sub_10021B18C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  void *v10;
  NSString *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  NSErrorUserInfoKey v17;
  void *v18;

  v9 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v9 + 8))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport startTransactionForKeyWithIdentifier:]_block_invoke", 152, CFSTR("Transport not ready to start transaction"), a5, a6, a7, a8, v16);
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
    v17 = NSLocalizedDescriptionKey;
    v11 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(25));
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    v18 = v12;
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v18, &v17, 1));
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v10, 25, v13));

    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
    objc_msgSend(v15, "handleTransactionStartResult:", v14);

  }
  else
  {
    objc_storeStrong((id *)(v9 + 112), *(id *)(a1 + 40));
    sub_10021B318(*(_QWORD *)(a1 + 32), 10);
  }
}

void sub_10021B318(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD v3[6];

  if (a1)
  {
    v2 = *(NSObject **)(a1 + 80);
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_10021B860;
    v3[3] = &unk_100304AD0;
    v3[4] = a1;
    v3[5] = a2;
    dispatch_async(v2, v3);
  }
}

void sub_10021B3CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10021B3D4(*(_QWORD *)(a1 + 32), a2, a3, a4, a5, a6, a7, a8, a9);
}

void sub_10021B3D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1)
  {
    if (*(_QWORD *)(a1 + 8) == 11)
      sub_10021B318(a1, 12);
    else
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport endTransaction_sync]", 527, CFSTR("Transaction session is not running. Ignore request to end it"), a5, a6, a7, a8, a9);
  }
}

void sub_10021B464(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  _QWORD block[5];

  v9 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v9 + 56))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport readApdu]_block_invoke", 170, CFSTR("Read already in progress. Ignore another attempt"), a5, a6, a7, a8, a9);
  }
  else
  {
    *(_BYTE *)(v9 + 56) = 1;
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(NSObject **)(v10 + 72);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10021B4F4;
    block[3] = &unk_100302AA0;
    block[4] = v10;
    dispatch_async(v11, block);
  }
}

void sub_10021B4F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10021B4FC(*(_QWORD *)(a1 + 32), a2, a3, a4, a5, a6, a7, a8);
}

void sub_10021B4FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  NSObject *v16;
  id v17;
  id v18;
  uint64_t v19;
  _QWORD block[5];
  id v21;
  id v22;
  id v23;

  if (a1)
  {
    v9 = *(void **)(a1 + 40);
    if (v9)
    {
      v23 = 0;
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "readAPDU:", &v23));
      v15 = v23;
      if (v10)
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport readAPDU_sync]", 465, CFSTR("error reading APDU from active session: %@"), v11, v12, v13, v14, (uint64_t)v10);
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport readAPDU_sync]", 467, CFSTR("Received APDU %@"), v11, v12, v13, v14, (uint64_t)v15);
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport readAPDU_sync]", 461, CFSTR("No active hce session, nothing left to read"), a5, a6, a7, a8, v19);
      v10 = 0;
      v15 = 0;
    }
    v16 = *(NSObject **)(a1 + 80);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10021C940;
    block[3] = &unk_100304490;
    block[4] = a1;
    v21 = v15;
    v22 = v10;
    v17 = v10;
    v18 = v15;
    dispatch_async(v16, block);

  }
}

id sub_10021B6A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport sendApdu:]_block_invoke", 185, &stru_100316BD0, a5, a6, a7, a8, v10);
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "sendAPDU:", *(_QWORD *)(a1 + 40));
}

void sub_10021B74C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport reset]_block_invoke", 193, CFSTR("Reset requested"), a5, a6, a7, a8, v9);
  sub_10021B788(*(_QWORD *)(a1 + 32));
}

void sub_10021B788(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (a1)
  {
    v2 = objc_msgSend(*(id *)(a1 + 40), "stopEmulation");
    objc_msgSend(*(id *)(a1 + 40), "endSession");
    objc_msgSend(*(id *)(a1 + 40), "setDelegate:", 0);
    v3 = *(void **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;

    objc_msgSend(*(id *)(a1 + 48), "stopCardEmulation");
    objc_msgSend(*(id *)(a1 + 48), "endSession");
    objc_msgSend(*(id *)(a1 + 48), "setDelegate:", 0);
    v4 = *(void **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;

    v5 = *(void **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;

    sub_10021C4DC(a1, v6, v7, v8, v9, v10, v11, v12, v24);
    sub_10021C860(a1, v13, v14, v15, v16, v17, v18, v19, v25);
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport cleanup]", 427, CFSTR("Resetting state to ready"), v20, v21, v22, v23, v26);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void sub_10021B860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = a1 + 32;
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(v11 + 8);
  if (v10 <= *(_QWORD *)(v9 + 8))
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport setCurrentState:]_block_invoke", 214, CFSTR("Current state higher than new state. Do nothing"), a5, a6, a7, a8, a9);
  else
    sub_10021B890(v9, v10, a3, a4, a5, a6, a7, a8, a9);
}

void sub_10021B890(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __CFString *v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __CFString *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  NSString *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  _QWORD v58[5];
  uint8_t buf[8];
  NSErrorUserInfoKey v60;
  void *v61;

  if (a1)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport setCurrentState_sync:]", 223, CFSTR("Current state %ld, new state %ld"), a5, a6, a7, a8, *(_QWORD *)(a1 + 8));
    *(_DWORD *)(a1 + 16) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = a2;
    switch(a2)
    {
      case 0:
        v15 = CFSTR("NFC Pairing transport is ready");
        v16 = 229;
        goto LABEL_15;
      case 1:
        v17 = KmlSignpostLogger();
        v18 = objc_claimAutoreleasedReturnValue(v17);
        if (os_signpost_enabled(v18))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "NfcHceSessionCreate", "", buf, 2u);
        }

        v19 = *(void **)(a1 + 24);
        v58[0] = _NSConcreteStackBlock;
        v58[1] = 3221225472;
        v58[2] = sub_10021BE6C;
        v58[3] = &unk_10030EFD0;
        v58[4] = a1;
        v20 = objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "startSecureElementAndHCESession:", v58));
        v21 = *(void **)(a1 + 32);
        *(_QWORD *)(a1 + 32) = v20;

        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport setCurrentState_sync:]", 255, CFSTR("Waiting for session start"), v22, v23, v24, v25, v52);
        return;
      case 2:
        v26 = CFSTR("Starting Host Card Emulation");
        v27 = 260;
        goto LABEL_12;
      case 3:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport setCurrentState_sync:]", 265, CFSTR("Host Card Emulation session started"), v11, v12, v13, v14, v52);
        v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "delegate"));
        v53 = v28;
        v29 = 0;
        goto LABEL_25;
      case 4:
        v15 = CFSTR("We will pause Host Card Emulation session as soon as current session disconnects");
        v16 = 270;
        goto LABEL_15;
      case 5:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport setCurrentState_sync:]", 274, CFSTR("Host Card Emulation session paused"), v11, v12, v13, v14, v52);
        v30 = objc_msgSend(*(id *)(a1 + 40), "stopEmulation");
        v54 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "delegate"));
        objc_msgSend(v54, "handleSessionPauseResult:", *(_QWORD *)(a1 + 64));

        return;
      case 6:
        v26 = CFSTR("Resuming Host Card Emulation");
        v27 = 280;
LABEL_12:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport setCurrentState_sync:]", v27, v26, v11, v12, v13, v14, v52);
        sub_10021C080(a1, v31, v32, v33, v34, v35, v36, v37, a9);
        return;
      case 7:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport setCurrentState_sync:]", 284, CFSTR("Host Card Emulation session resumed"), v11, v12, v13, v14, v52);
        v55 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "delegate"));
        objc_msgSend(v55, "handleSessionResumeResult:", 0);

        return;
      case 8:
        v15 = CFSTR("We will stop Host Card Emulation session as soon as current session disconnects");
        v16 = 288;
LABEL_15:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport setCurrentState_sync:]", v16, v15, v11, v12, v13, v14, a9);
        return;
      case 9:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport setCurrentState_sync:]", 292, CFSTR("Host Card Emulation session stopped"), v11, v12, v13, v14, v52);
        sub_10021B788(a1);
        v56 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "delegate"));
        objc_msgSend(v56, "handleSessionEndResult:", *(_QWORD *)(a1 + 64));

        return;
      case 10:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport setCurrentState_sync:]", 298, CFSTR("Starting Loyalty and payment session"), v11, v12, v13, v14, v52);
        sub_10021C0B8(a1);
        return;
      case 11:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport setCurrentState_sync:]", 303, CFSTR("Loyalty and payment session started"), v11, v12, v13, v14, v52);
        v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "delegate"));
        objc_msgSend(v38, "handleTransactionStartResult:", *(_QWORD *)(a1 + 64));

        sub_10021C19C(a1, v39, v40, v41, v42, v43, v44, v45, a9);
        return;
      case 12:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport setCurrentState_sync:]", 309, CFSTR("Stopping Host Card Emulation session"), v11, v12, v13, v14, v52);
        objc_msgSend(*(id *)(a1 + 48), "stopCardEmulation");
        if (!*(_QWORD *)(a1 + 64))
        {
          v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
          v60 = NSLocalizedDescriptionKey;
          v47 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(24));
          v48 = (void *)objc_claimAutoreleasedReturnValue(v47);
          v61 = v48;
          v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v61, &v60, 1));
          v50 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v46, 24, v49));
          v51 = *(void **)(a1 + 64);
          *(_QWORD *)(a1 + 64) = v50;

        }
        sub_10021B318(a1, 13);
        return;
      case 13:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport setCurrentState_sync:]", 318, CFSTR("Transaction session stopped"), v11, v12, v13, v14, v52);
        sub_10021B788(a1);
        v57 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "delegate"));
        objc_msgSend(v57, "handleTransactionEndResult:", *(_QWORD *)(a1 + 64));

        return;
      case 14:
        sub_10021B788(a1);
        v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "delegate"));
        v29 = *(_QWORD *)(a1 + 64);
        v53 = v28;
LABEL_25:
        objc_msgSend(v28, "handleSessionStartResult:", v29);
        goto LABEL_27;
      case 15:
        sub_10021B788(a1);
        v53 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "delegate"));
        objc_msgSend(v53, "handleTransactionStartResult:", *(_QWORD *)(a1 + 64));
LABEL_27:

        break;
      default:
        return;
    }
  }
}

void sub_10021BE6C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  id v9;
  id v10;
  _QWORD block[4];
  id v12;
  uint64_t v13;
  id v14;

  v5 = a2;
  v6 = a3;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(NSObject **)(v7 + 80);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10021BF1C;
  block[3] = &unk_100304490;
  v12 = v6;
  v13 = v7;
  v14 = v5;
  v9 = v5;
  v10 = v6;
  dispatch_async(v8, block);

}

void sub_10021BF1C(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint8_t buf[4];
  uint64_t v18;

  v2 = KmlSignpostLogger();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_signpost_enabled(v3))
  {
    v4 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    v18 = v4;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "NfcHceSessionCreate", "error=%@", buf, 0xCu);
  }

  if (*(_QWORD *)(a1 + 32))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport setCurrentState_sync:]_block_invoke", 238, CFSTR("startHCESession Error: %@"), v5, v6, v7, v8, *(_QWORD *)(a1 + 32));
    objc_storeStrong((id *)(*(_QWORD *)(a1 + 40) + 64), *(id *)(a1 + 32));
    v9 = *(_QWORD *)(a1 + 40);
    v10 = 14;
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport setCurrentState_sync:]_block_invoke", 243, CFSTR("HCESession started"), v5, v6, v7, v8, v15);
    objc_msgSend(*(id *)(a1 + 48), "setDelegate:", *(_QWORD *)(a1 + 40));
    objc_storeStrong((id *)(*(_QWORD *)(a1 + 40) + 40), *(id *)(a1 + 48));
    v9 = *(_QWORD *)(a1 + 40);
    if (*(_QWORD *)(v9 + 8) != 1)
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport setCurrentState_sync:]_block_invoke", 247, CFSTR("state changed while we were trying to get HCE session. cleanup to make sure we are not leaking session"), v11, v12, v13, v14, v16);
      sub_10021B788(*(_QWORD *)(a1 + 40));
      return;
    }
    v10 = 2;
  }
  sub_10021B318(v9, v10);
}

void sub_10021C080(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a1)
  {
    v10 = objc_msgSend(*(id *)(a1 + 40), "startEmulation");
    sub_10021C5B4(a1, v11, v12, v13, v14, v15, v16, v17, a9);
  }
}

void sub_10021C0B8(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[5];
  uint8_t buf[16];

  if (a1)
  {
    v2 = KmlSignpostLogger();
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_signpost_enabled(v3))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "NfcLnPtxnSessionCreate", "", buf, 2u);
    }

    v4 = *(void **)(a1 + 24);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_10021C988;
    v12[3] = &unk_10030F020;
    v12[4] = a1;
    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "startLoyaltyAndContactlessPaymentSession:", v12));
    v6 = *(void **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v5;

    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport startLoyaltyAndPaymentSession]", 518, CFSTR("Waiting for contactless session start"), v7, v8, v9, v10, v11);
  }
}

void sub_10021C19C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD block[5];

  if (a1)
  {
    if (*(_QWORD *)(a1 + 88))
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport startEndTransactionTimer]", 340, CFSTR("endTransactionTimer already running. Ignore another start"), a5, a6, a7, a8, a9);
    }
    else
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10021C240;
      block[3] = &unk_100302AA0;
      block[4] = a1;
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport startEndTransactionTimer]", 353, CFSTR("endTransactionTimer started"), v9, v10, v11, v12, v13);
    }
  }
}

void sub_10021C240(uint64_t a1)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD v6[5];

  v2 = sub_10021C2CC(*(_QWORD *)(a1 + 32));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10021C344;
  v6[3] = &unk_10030EFF8;
  v6[4] = *(_QWORD *)(a1 + 32);
  v3 = objc_claimAutoreleasedReturnValue(+[NSTimer scheduledTimerWithTimeInterval:repeats:block:](NSTimer, "scheduledTimerWithTimeInterval:repeats:block:", 0, v6, v2));
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(v4 + 88);
  *(_QWORD *)(v4 + 88) = v3;

}

double sub_10021C2CC(uint64_t a1)
{
  id v1;
  double v2;
  double v4;

  if (!a1)
    return 0.0;
  v1 = objc_msgSend(objc_alloc((Class)NSUserDefaults), "initWithSuiteName:", CFSTR("com.apple.seserviced"));
  objc_msgSend(v1, "doubleForKey:", CFSTR("OPTransactionTimeout"));
  if (v2 < 1.0)
    v2 = 1.0;
  if (v2 >= 10.0 || v2 <= 1.0)
    v4 = 10.0;
  else
    v4 = v2;

  return v4;
}

void sub_10021C344(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD block[5];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 80);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10021C39C;
  block[3] = &unk_100302AA0;
  block[4] = v1;
  dispatch_async(v2, block);
}

void sub_10021C39C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  NSString *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  NSErrorUserInfoKey v27;
  void *v28;

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport startEndTransactionTimer]_block_invoke_3", 346, CFSTR("Transaction will be ended due to time out."), a5, a6, a7, a8, v25);
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
  v27 = NSLocalizedDescriptionKey;
  v10 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(23));
  v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  v28 = v11;
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v28, &v27, 1));
  v13 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v9, 23, v12));
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(void **)(v14 + 64);
  *(_QWORD *)(v14 + 64) = v13;

  sub_10021B3D4(*(_QWORD *)(a1 + 32), v16, v17, v18, v19, v20, v21, v22, v26);
  v23 = *(_QWORD *)(a1 + 32);
  v24 = *(void **)(v23 + 88);
  *(_QWORD *)(v23 + 88) = 0;

}

void sub_10021C4DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD block[5];

  if (a1)
  {
    if (*(_QWORD *)(a1 + 88))
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10021C564;
      block[3] = &unk_100302AA0;
      block[4] = a1;
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport cancelEndTransactionTimer]", 359, CFSTR("endTransactionTimer is not running."), a5, a6, a7, a8, a9);
    }
  }
}

void sub_10021C564(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 88), "invalidate");
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(void **)(v10 + 88);
  *(_QWORD *)(v10 + 88) = 0;

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport cancelEndTransactionTimer]_block_invoke", 365, CFSTR("endTransactionTimer cancelled"), v12, v13, v14, v15, a9);
}

void sub_10021C5B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __CFString *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD block[5];

  if (a1)
  {
    if (!*(_BYTE *)(a1 + 104))
    {
      v9 = CFSTR("A timeout was not requested for this hce session");
      v10 = 373;
      goto LABEL_6;
    }
    if (*(_QWORD *)(a1 + 96))
    {
      v9 = CFSTR("A hceSessionTimer already running. Ignore another start");
      v10 = 378;
LABEL_6:
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport startHceTimer]", v10, v9, a5, a6, a7, a8, a9);
      return;
    }
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10021C67C;
    block[3] = &unk_100302AA0;
    block[4] = a1;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport startHceTimer]", 396, CFSTR("hceSessionTimer started"), v11, v12, v13, v14, v15);
  }
}

void sub_10021C67C(uint64_t a1)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD v6[5];

  v2 = sub_10021C708(*(_QWORD *)(a1 + 32));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10021C784;
  v6[3] = &unk_10030EFF8;
  v6[4] = *(_QWORD *)(a1 + 32);
  v3 = objc_claimAutoreleasedReturnValue(+[NSTimer scheduledTimerWithTimeInterval:repeats:block:](NSTimer, "scheduledTimerWithTimeInterval:repeats:block:", 0, v6, v2));
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(v4 + 96);
  *(_QWORD *)(v4 + 96) = v3;

}

double sub_10021C708(uint64_t a1)
{
  id v1;
  double v2;
  double v3;
  double v4;

  if (!a1)
    return 0.0;
  v1 = objc_msgSend(objc_alloc((Class)NSUserDefaults), "initWithSuiteName:", CFSTR("com.apple.seserviced"));
  objc_msgSend(v1, "doubleForKey:", CFSTR("HceSessionTimeout"));
  if (v2 < 1.0)
    v2 = 1.0;
  v3 = fmin(v2, 10.0);
  if (v2 <= 1.0)
    v4 = 5.0;
  else
    v4 = v3;

  return v4;
}

void sub_10021C784(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD block[5];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 80);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10021C7DC;
  block[3] = &unk_100302AA0;
  block[4] = v1;
  dispatch_async(v2, block);
}

void sub_10021C7DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;

  if ((*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) | 4) == 6)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport startHceTimer]_block_invoke_3", 386, CFSTR("Ending hce session due to time out."), a5, a6, a7, a8, v19);
    sub_10021AAFC(*(_QWORD *)(a1 + 32), v10, v11, v12, v13, v14, v15, v16, v20);
    v17 = *(_QWORD *)(a1 + 32);
    v18 = *(void **)(v17 + 96);
    *(_QWORD *)(v17 + 96) = 0;

  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport startHceTimer]_block_invoke_3", 390, CFSTR("hce session timer fired, but we had moved to next state. So Ignore"), a5, a6, a7, a8, a9);
  }
}

void sub_10021C860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD block[5];

  if (a1)
  {
    if (*(_QWORD *)(a1 + 96))
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10021C8E8;
      block[3] = &unk_100302AA0;
      block[4] = a1;
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport cancelHceTimer]", 402, CFSTR("hceSessionTimer is not running."), a5, a6, a7, a8, a9);
    }
  }
}

void sub_10021C8E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 96), "invalidate");
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(void **)(v10 + 96);
  *(_QWORD *)(v10 + 96) = 0;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 104) = 0;
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport cancelHceTimer]_block_invoke", 409, CFSTR("hceSessionTimer cancelled"), v12, v13, v14, v15, a9);
}

void sub_10021C940(uint64_t a1)
{
  id v2;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 56) = 0;
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v2, "handleIncomingApdu:error:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

void sub_10021C988(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  id v9;
  id v10;
  _QWORD block[4];
  id v12;
  uint64_t v13;
  id v14;

  v5 = a2;
  v6 = a3;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(NSObject **)(v7 + 80);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10021CA38;
  block[3] = &unk_100304490;
  v12 = v6;
  v13 = v7;
  v14 = v5;
  v9 = v5;
  v10 = v6;
  dispatch_async(v8, block);

}

void sub_10021CA38(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint8_t buf[4];
  uint64_t v29;

  v2 = KmlSignpostLogger();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_signpost_enabled(v3))
  {
    v4 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    v29 = v4;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "NfcLnPtxnSessionCreate", "error=%@", buf, 0xCu);
  }

  if (*(_QWORD *)(a1 + 32))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport startLoyaltyAndPaymentSession]_block_invoke", 487, CFSTR("Error in starting loyalty and payment session - %@"), v5, v6, v7, v8, *(_QWORD *)(a1 + 32));
    objc_storeStrong((id *)(*(_QWORD *)(a1 + 40) + 64), *(id *)(a1 + 32));
    sub_10021B318(*(_QWORD *)(a1 + 40), 15);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 48), "setDelegate:", *(_QWORD *)(a1 + 40));
    objc_storeStrong((id *)(*(_QWORD *)(a1 + 40) + 48), *(id *)(a1 + 48));
    if (*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) == 10)
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport startLoyaltyAndPaymentSession]_block_invoke", 502, CFSTR("LoyaltyAndPayment session started, configuring active applet and starting card emulation mode"), v9, v10, v11, v12, v25);
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 48), "appletWithIdentifier:", CFSTR("A000000809434343444B417631")));
      if (*(_QWORD *)(*(_QWORD *)(a1 + 40) + 112))
      {
        v27 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 112);
        v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v27, 1));
        v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v14));

      }
      else
      {
        v15 = 0;
      }
      v16 = *(void **)(*(_QWORD *)(a1 + 40) + 48);
      v26 = 0;
      objc_msgSend(v16, "setActivePaymentApplet:keys:error:", v13, v15, &v26);
      v17 = v26;
      v18 = v26;
      v23 = v18;
      if (v18)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport startLoyaltyAndPaymentSession]_block_invoke", 508, CFSTR("setActivePaymentApplet Error: %@"), v19, v20, v21, v22, (uint64_t)v18);
        objc_storeStrong((id *)(*(_QWORD *)(a1 + 40) + 64), v17);
        v24 = 15;
      }
      else
      {
        v24 = 11;
      }
      sub_10021B318(*(_QWORD *)(a1 + 40), v24);
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 48), "startCardEmulation:authorization:", 1, 0);

    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport startLoyaltyAndPaymentSession]_block_invoke", 497, CFSTR("state changed while we were trying to get LoyaltyAndPayment session. cleanup to make sure we are not leaking session"), v9, v10, v11, v12, v25);
      sub_10021B788(*(_QWORD *)(a1 + 40));
    }
  }
}

void sub_10021CD1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  NSString *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  NSErrorUserInfoKey v29;
  void *v30;

  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(*(_QWORD *)(a1 + 40) + 40))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport hceSessionDidConnect:]_block_invoke", 596, CFSTR("Received SessionDidConnect callback for active session."), a5, a6, a7, a8, v27);
    v17 = *(_QWORD *)(a1 + 40);
    if ((*(_QWORD *)(v17 + 8) | 4) == 6)
    {
      sub_10021C860(v17, v10, v11, v12, v13, v14, v15, v16, v28);
      v18 = *(_QWORD *)(a1 + 40);
      if (*(_QWORD *)(v18 + 8) == 2)
        v19 = 3;
      else
        v19 = 7;
      sub_10021B318(v18, v19);
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport hceSessionDidConnect:]_block_invoke", 606, CFSTR("received connect in wrong state."), v13, v14, v15, v16, v28);
      v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
      v29 = NSLocalizedDescriptionKey;
      v21 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(24));
      v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
      v30 = v22;
      v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v30, &v29, 1));
      v24 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v20, 24, v23));
      v25 = *(_QWORD *)(a1 + 40);
      v26 = *(void **)(v25 + 64);
      *(_QWORD *)(v25 + 64) = v24;

      sub_10021B318(*(_QWORD *)(a1 + 40), 9);
    }
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport hceSessionDidConnect:]_block_invoke", 593, CFSTR("Received SessionDidConnect callback, but not for active session. Ignoring"), a5, a6, a7, a8, a9);
  }
}

void sub_10021CFBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(*(_QWORD *)(a1 + 40) + 40))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport hceSessionDidDisconnect:]_block_invoke", 621, CFSTR("Received SessionDidDisconnect callback, for active session."), a5, a6, a7, a8, v12);
    v10 = *(_QWORD *)(a1 + 40);
    if ((unint64_t)(*(_QWORD *)(v10 + 8) - 3) > 1)
      v11 = 9;
    else
      v11 = 5;
    sub_10021B318(v10, v11);
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport hceSessionDidDisconnect:]_block_invoke", 617, CFSTR("Received SessionDidDisconnect callback, but not for active session. Ignoring"), a5, a6, a7, a8, a9);
  }
}

void sub_10021D0C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;
  BOOL v11;
  uint64_t v12;
  int v13;
  NSString *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  NSErrorUserInfoKey v21;
  void *v22;

  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(*(_QWORD *)(a1 + 40) + 40))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport hceSessionDidEndUnexpectedly:]_block_invoke", 639, CFSTR("Received SessionDidEndUnexpectedly callback for active session. Bailing out."), a5, a6, a7, a8, v20);
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
    v11 = *(_BYTE *)(*(_QWORD *)(a1 + 40) + 104) == 0;
    if (*(_BYTE *)(*(_QWORD *)(a1 + 40) + 104))
      v12 = 23;
    else
      v12 = 24;
    v21 = NSLocalizedDescriptionKey;
    if (v11)
      v13 = 24;
    else
      v13 = 23;
    v14 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(v13));
    v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    v22 = v15;
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v22, &v21, 1));
    v17 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v10, v12, v16));
    v18 = *(_QWORD *)(a1 + 40);
    v19 = *(void **)(v18 + 64);
    *(_QWORD *)(v18 + 64) = v17;

    sub_10021B318(*(_QWORD *)(a1 + 40), 9);
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport hceSessionDidEndUnexpectedly:]_block_invoke", 635, CFSTR("Received SessionDidEndUnexpectedly callback, but not for active session. Ignoring"), a5, a6, a7, a8, a9);
  }
}

void sub_10021D30C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v10;
  uint64_t v11;
  id v12;

  v11 = a1[4];
  v10 = (_QWORD *)a1[5];
  if (v11 == v10[5])
  {
    v12 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "delegate"));
    objc_msgSend(v12, "handleIncomingApdu:error:", a1[6], 0);

  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport hceSession:didReceiveAPDU:]_block_invoke", 649, CFSTR("Received didReceiveAPDU callback, but not for active session. Ignoring"), a5, a6, a7, a8, a9);
  }
}

void sub_10021D400(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __CFString *v11;
  uint64_t v12;
  uint64_t vars0;

  v10 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  if (v10 == *(_QWORD *)(v9 + 48))
  {
    sub_10021C4DC(v9, a2, a3, a4, a5, a6, a7, a8, vars0);
    v11 = CFSTR("Transaction started and endTransactionTimer canceled");
    v12 = 668;
  }
  else
  {
    v11 = CFSTR("Received didStartTransaction callback, but not for active session. Ignoring");
    v12 = 664;
  }
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport loyaltyAndPaymentSession:didStartTransaction:]_block_invoke", v12, v11, a5, a6, a7, a8, a9);
}

void sub_10021D504(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  NSString *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  NSErrorUserInfoKey v22;
  void *v23;

  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(*(_QWORD *)(a1 + 40) + 48))
  {
    if (objc_msgSend(*(id *)(a1 + 48), "didError"))
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport loyaltyAndPaymentSession:didEndTransaction:]_block_invoke", 681, CFSTR("Received didEndTransaction callback reports error."), v10, v11, v12, v13, v21);
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
      v22 = NSLocalizedDescriptionKey;
      v15 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(24));
      v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
      v23 = v16;
      v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v23, &v22, 1));
      v18 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v14, 24, v17));
      v19 = *(_QWORD *)(a1 + 40);
      v20 = *(void **)(v19 + 64);
      *(_QWORD *)(v19 + 64) = v18;

    }
    sub_10021B318(*(_QWORD *)(a1 + 40), 13);
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport loyaltyAndPaymentSession:didEndTransaction:]_block_invoke", 676, CFSTR("Received didEndTransaction callback, but not for active session. Ignoring"), a5, a6, a7, a8, a9);
  }
}

void sub_10021D718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;
  NSString *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  NSErrorUserInfoKey v18;
  void *v19;

  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(*(_QWORD *)(a1 + 40) + 48))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport loyaltyAndPaymentSessionDidEndUnexpectedly:]_block_invoke", 695, CFSTR("Transaction session ended un-expectedly."), a5, a6, a7, a8, v17);
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
    v18 = NSLocalizedDescriptionKey;
    v11 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(24));
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    v19 = v12;
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v19, &v18, 1));
    v14 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v10, 24, v13));
    v15 = *(_QWORD *)(a1 + 40);
    v16 = *(void **)(v15 + 64);
    *(_QWORD *)(v15 + 64) = v14;

    sub_10021B318(*(_QWORD *)(a1 + 40), 13);
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport loyaltyAndPaymentSessionDidEndUnexpectedly:]_block_invoke", 692, CFSTR("Received SessionDidEndUnexpectedly callback, but not for active session. Ignoring"), a5, a6, a7, a8, a9);
  }
}

void sub_10021D968(uint64_t a1, void *a2, char a3, unsigned int a4)
{
  id v7;
  void *v8;
  void *v9;
  void *v10;
  _WORD *v11;
  void *v12;
  void *v13;
  _WORD *v14;
  void *v15;
  void *v16;
  _WORD *v17;
  void *v18;
  void *v19;
  _WORD *v20;
  void *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _WORD *v27;
  void *v28;
  id v29;
  void *v30;
  _WORD *v31;
  void *v32;
  _WORD *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSData *v43;
  void *v44;
  _WORD *v45;
  void *v46;
  _WORD *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  void *v59;
  _WORD *v60;
  void *v61;
  void *v62;
  _WORD *v63;
  void *v64;
  void *v65;
  id v66;
  id v67;
  id v68;
  uint64_t v69;
  void *i;
  id v71;
  void *v72;
  _WORD *v73;
  void *v74;
  id v75;
  void *v76;
  _WORD *v77;
  uint64_t v78;
  void *v79;
  void *v80;
  id v81;
  id v82;
  id v83;
  uint64_t v84;
  void *j;
  id v86;
  void *v87;
  id v88;
  __int16 v89;
  _WORD *v90;
  uint64_t v91;
  void *v92;
  void *v93;
  void *v94;
  id obja;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  _BYTE v105[128];
  _BYTE v106[128];

  v7 = a2;
  if (a1)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    *(_BYTE *)(a1 + 9) = 1;
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", a1 + 9, 1));
    v11 = sub_10022CB3C((uint64_t)KmlTlv, 2, v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    objc_msgSend(v8, "addObject:", v12);

    *(_BYTE *)(a1 + 10) = 0;
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", a1 + 10, 1));
    v14 = sub_10022CB3C((uint64_t)KmlTlv, 2, v13);
    v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    objc_msgSend(v8, "addObject:", v15);

    *(_BYTE *)(a1 + 8) = a3;
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", a1 + 8, 1));
    v17 = sub_10022CB3C((uint64_t)KmlTlv, 10, v16);
    v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
    objc_msgSend(v8, "addObject:", v18);

    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", a1 + 8, 1));
    v20 = sub_10022CB3C((uint64_t)KmlTlv, 208, v19);
    v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
    objc_msgSend(v9, "addObject:", v21);

    if (objc_msgSend(*(id *)(a1 + 40), "keyRoleToShare") != 0xFFFF)
    {
      v22 = objc_msgSend(*(id *)(a1 + 40), "keyRoleToShare");
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingKeyConfig createKeyConfigWithFriendlyName:profile:keyRole:]", 54, CFSTR("Over riding key role based on profile to :%02x"), v23, v24, v25, v26, v22);
      a4 = objc_msgSend(*(id *)(a1 + 40), "keyRoleToShare");
    }
    *(_WORD *)(a1 + 12) = a4;
    v27 = sub_10022CBF0((uint64_t)KmlTlv, 213, a4);
    v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
    objc_msgSend(v9, "addObject:", v28);

    v29 = kmlUtilTimeNow();
    v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
    v31 = sub_10022CB3C((uint64_t)KmlTlv, 24, v30);
    v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
    objc_msgSend(v8, "addObject:", v32);

    v94 = v30;
    v33 = sub_10022CB3C((uint64_t)KmlTlv, 81, v30);
    v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
    objc_msgSend(v9, "addObject:", v34);

    v43 = kmlUtilInfiniteTime(v35, v36, v37, v38, v39, v40, v41, v42);
    v44 = (void *)objc_claimAutoreleasedReturnValue(v43);
    v45 = sub_10022CB3C((uint64_t)KmlTlv, 24, v44);
    v46 = (void *)objc_claimAutoreleasedReturnValue(v45);
    objc_msgSend(v8, "addObject:", v46);

    v93 = v44;
    v47 = sub_10022CB3C((uint64_t)KmlTlv, 82, v44);
    v48 = (void *)objc_claimAutoreleasedReturnValue(v47);
    objc_msgSend(v9, "addObject:", v48);

    objc_storeStrong((id *)(a1 + 32), a2);
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingKeyConfig createKeyConfigWithFriendlyName:profile:keyRole:]", 73, CFSTR("Friendly name: %@"), v49, v50, v51, v52, *(_QWORD *)(a1 + 32));
    v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataUsingEncoding:", 4));
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingKeyConfig createKeyConfigWithFriendlyName:profile:keyRole:]", 74, CFSTR("Friendly name as UTF8 encoded data: %@"), v54, v55, v56, v57, (uint64_t)v53);

    v58 = *(void **)(a1 + 32);
    if (v58)
    {
      v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v58, "dataUsingEncoding:", 4));
      v60 = sub_10022CB3C((uint64_t)KmlTlv, 12, v59);
      v61 = (void *)objc_claimAutoreleasedReturnValue(v60);
      objc_msgSend(v8, "addObject:", v61);

      v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataUsingEncoding:", 4));
      v63 = sub_10022CB3C((uint64_t)KmlTlv, 211, v62);
      v64 = (void *)objc_claimAutoreleasedReturnValue(v63);
      objc_msgSend(v9, "addObject:", v64);

    }
    obja = v7;
    v65 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData data](NSMutableData, "data"));
    v101 = 0u;
    v102 = 0u;
    v103 = 0u;
    v104 = 0u;
    v66 = v8;
    v67 = objc_msgSend(v66, "countByEnumeratingWithState:objects:count:", &v101, v106, 16);
    if (v67)
    {
      v68 = v67;
      v69 = *(_QWORD *)v102;
      do
      {
        for (i = 0; i != v68; i = (char *)i + 1)
        {
          if (*(_QWORD *)v102 != v69)
            objc_enumerationMutation(v66);
          v71 = sub_10022D014(*(_QWORD *)(*((_QWORD *)&v101 + 1) + 8 * (_QWORD)i));
          v72 = (void *)objc_claimAutoreleasedReturnValue(v71);
          objc_msgSend(v65, "appendData:", v72);

        }
        v68 = objc_msgSend(v66, "countByEnumeratingWithState:objects:count:", &v101, v106, 16);
      }
      while (v68);
    }

    v73 = sub_10022CB3C((uint64_t)KmlTlv, 48, v65);
    v74 = (void *)objc_claimAutoreleasedReturnValue(v73);
    v75 = sub_10022D014((uint64_t)v74);
    v76 = (void *)objc_claimAutoreleasedReturnValue(v75);
    v77 = sub_10022CB3C((uint64_t)KmlTlv, 32560, v76);
    v78 = objc_claimAutoreleasedReturnValue(v77);
    v79 = *(void **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v78;

    v80 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData data](NSMutableData, "data"));
    v97 = 0u;
    v98 = 0u;
    v99 = 0u;
    v100 = 0u;
    v81 = v9;
    v82 = objc_msgSend(v81, "countByEnumeratingWithState:objects:count:", &v97, v105, 16);
    if (v82)
    {
      v83 = v82;
      v84 = *(_QWORD *)v98;
      do
      {
        for (j = 0; j != v83; j = (char *)j + 1)
        {
          if (*(_QWORD *)v98 != v84)
            objc_enumerationMutation(v81);
          v86 = sub_10022D014(*(_QWORD *)(*((_QWORD *)&v97 + 1) + 8 * (_QWORD)j));
          v87 = (void *)objc_claimAutoreleasedReturnValue(v86);
          objc_msgSend(v80, "appendData:", v87);

        }
        v83 = objc_msgSend(v81, "countByEnumeratingWithState:objects:count:", &v97, v105, 16);
      }
      while (v83);
    }

    v88 = objc_msgSend(objc_alloc((Class)NSUserDefaults), "initWithSuiteName:", CFSTR("com.apple.seserviced"));
    if (objc_msgSend(v88, "BOOLForKey:", CFSTR("UseOldKeyConfigTag")))
      v89 = 32526;
    else
      v89 = 32572;
    v90 = sub_10022CB3C((uint64_t)KmlTlv, v89, v80);
    v91 = objc_claimAutoreleasedReturnValue(v90);
    v92 = *(void **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v91;

    v7 = obja;
  }

}

BOOL sub_10021DFC8(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  id *v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  void *j;
  id *v25;
  id *v26;
  void *v27;
  id v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  void *k;
  id *v35;
  id v36;
  id *v37;
  void *v38;
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id *v45;
  void *v46;
  id v47;
  void *v48;
  id v49;
  id v50;
  id v51;
  uint64_t v52;
  void *m;
  _QWORD *v54;
  uint64_t v56;
  id v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  _BYTE v74[128];
  _BYTE v75[128];
  _BYTE v76[128];
  _BYTE v77[128];

  if (!a1)
    return 0;
  v3 = sub_10022C7A4((uint64_t)KmlTlv, a2);
  v70 = 0u;
  v71 = 0u;
  v72 = 0u;
  v73 = 0u;
  v4 = (id)objc_claimAutoreleasedReturnValue(v3);
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v70, v77, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v71;
    while (2)
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v71 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v70 + 1) + 8 * (_QWORD)i);
        if (sub_100055868((uint64_t)v9) == 32560)
        {
          objc_storeStrong((id *)(a1 + 16), v9);
          goto LABEL_15;
        }
        if (sub_100055868((uint64_t)v9) == 32526 || sub_100055868((uint64_t)v9) == 32572)
          objc_storeStrong((id *)(a1 + 24), v9);
      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v70, v77, 16);
      if (v6)
        continue;
      break;
    }
  }
LABEL_15:

  v14 = *(_QWORD *)(a1 + 16);
  v15 = v14 != 0;
  if (v14)
  {
    v16 = sub_10022CD6C(*(id **)(a1 + 16));
    v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    v18 = sub_10022C7A4((uint64_t)KmlTlv, v17);
    v19 = (void *)objc_claimAutoreleasedReturnValue(v18);

    v68 = 0u;
    v69 = 0u;
    v66 = 0u;
    v67 = 0u;
    v20 = v19;
    v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v66, v76, 16);
    if (v21)
    {
      v22 = v21;
      v23 = *(_QWORD *)v67;
      v57 = v20;
      do
      {
        for (j = 0; j != v22; j = (char *)j + 1)
        {
          if (*(_QWORD *)v67 != v23)
            objc_enumerationMutation(v20);
          v25 = *(id **)(*((_QWORD *)&v66 + 1) + 8 * (_QWORD)j);
          if (sub_100055868((uint64_t)v25) == 48)
          {
            v26 = sub_10022CD6C(v25);
            v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
            v28 = sub_10022C7A4((uint64_t)KmlTlv, v27);
            v29 = (void *)objc_claimAutoreleasedReturnValue(v28);

            v64 = 0u;
            v65 = 0u;
            v62 = 0u;
            v63 = 0u;
            v30 = v29;
            v31 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v62, v75, 16);
            if (v31)
            {
              v32 = v31;
              v33 = *(_QWORD *)v63;
              while (2)
              {
                for (k = 0; k != v32; k = (char *)k + 1)
                {
                  if (*(_QWORD *)v63 != v33)
                    objc_enumerationMutation(v30);
                  v35 = *(id **)(*((_QWORD *)&v62 + 1) + 8 * (_QWORD)k);
                  if (sub_100055868((uint64_t)v35) == 12)
                  {
                    v36 = objc_alloc((Class)NSString);
                    v37 = sub_10022CD6C(v35);
                    v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
                    v39 = objc_msgSend(v36, "initWithData:encoding:", v38, 4);
                    v40 = *(void **)(a1 + 32);
                    *(_QWORD *)(a1 + 32) = v39;

                    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingKeyConfig parseKeyConfigFromData:]", 142, CFSTR("Friendly name sent by owner: %@"), v41, v42, v43, v44, *(_QWORD *)(a1 + 32));
                    v20 = v57;
                    goto LABEL_35;
                  }
                }
                v32 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v62, v75, 16);
                if (v32)
                  continue;
                break;
              }
            }

            v20 = v57;
          }
        }
        v22 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v66, v76, 16);
      }
      while (v22);
    }
LABEL_35:

    v45 = sub_10022CD6C(*(id **)(a1 + 24));
    v46 = (void *)objc_claimAutoreleasedReturnValue(v45);
    v47 = sub_10022C7A4((uint64_t)KmlTlv, v46);
    v48 = (void *)objc_claimAutoreleasedReturnValue(v47);

    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    v49 = v48;
    v50 = objc_msgSend(v49, "countByEnumeratingWithState:objects:count:", &v58, v74, 16);
    if (v50)
    {
      v51 = v50;
      v52 = *(_QWORD *)v59;
      do
      {
        for (m = 0; m != v51; m = (char *)m + 1)
        {
          if (*(_QWORD *)v59 != v52)
            objc_enumerationMutation(v49);
          v54 = *(_QWORD **)(*((_QWORD *)&v58 + 1) + 8 * (_QWORD)m);
          if (sub_100055868((uint64_t)v54) == 213)
          {
            *(_WORD *)(a1 + 12) = sub_10022CEB0((uint64_t)v54);
          }
          else if (sub_100055868((uint64_t)v54) == 208)
          {
            *(_BYTE *)(a1 + 8) = sub_10022CE3C(v54);
          }
        }
        v51 = objc_msgSend(v49, "countByEnumeratingWithState:objects:count:", &v58, v74, 16);
      }
      while (v51);
    }

    v15 = 1;
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingKeyConfig parseKeyConfigFromData:]", 124, CFSTR("KSInvitationData: No invitation TLV found"), v10, v11, v12, v13, v56);
  }

  return v15;
}

uint64_t sub_10021E474(uint64_t result)
{
  if (result)
    return *(unsigned __int16 *)(result + 12);
  return result;
}

uint64_t sub_10021E480(uint64_t result)
{
  if (result)
    return *(unsigned __int8 *)(result + 8);
  return result;
}

void sub_10021E4E0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _WORD *v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  unsigned int v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _WORD *v19;
  void *v20;
  id v21;
  void *v22;
  _WORD *v23;
  void *v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _WORD *v31;
  void *v32;
  id v33;
  void *v34;
  char v35;
  uint64_t v36;
  _WORD *v37;
  void *v38;
  id v39;
  void *v40;
  _WORD *v41;
  void *v42;
  id v43;
  uint64_t v44;
  void *v45;
  void *v46;
  _WORD *v47;
  void *v48;
  id v49;
  void *v50;
  id v51;
  void *v52;
  _WORD *v53;
  void *v54;
  id v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  NSData *v65;
  void *v66;
  _WORD *v67;
  void *v68;
  id v69;
  uint64_t v70;
  void *v71;
  void *v72;
  id v73;
  id v74;
  id v75;
  uint64_t v76;
  void *i;
  _WORD *v78;
  void *v79;
  id v80;
  void *v81;
  void *v82;
  unsigned int v83;
  void *v84;
  unsigned int v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  _WORD *v97;
  void *v98;
  void *v99;
  _WORD *v100;
  void *v101;
  id v102;
  id v103;
  id v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  id v110;
  id v111;
  id v112;
  id v113;
  uint64_t v114;
  void *j;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  id v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  id v127;
  id *v128;
  uint64_t v129;
  id v130;
  id v131;
  uint64_t v132;
  void *v133;
  id v134;
  void *v135;
  id v136;
  id v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  id v150;
  id v151;
  void *v152;
  id v153;
  void *v154;
  id v155;
  void *v156;
  id v157;
  void *v158;
  _WORD *v159;
  void *v160;
  id v161;
  void *v162;
  void *v163;
  id v164;
  void *v165;
  _WORD *v166;
  uint64_t v167;
  void *v168;
  _WORD *v169;
  uint64_t v170;
  void *v171;
  uint64_t v172;
  void *v173;
  void *v174;
  void *v175;
  void *v176;
  void *v177;
  void *v178;
  void *v179;
  uint64_t v180;
  void *v181;
  id v182;
  void *v183;
  void *v184;
  void *v185;
  id v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int16 v195;
  unsigned __int16 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  _BYTE v201[128];
  _BYTE v202[128];
  _BYTE v203[128];

  v3 = a2;
  if (!a1)
    goto LABEL_49;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData data](NSMutableData, "data"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData data](NSMutableData, "data"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "readerIdentifier"));

  if (v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "readerIdentifier"));
    v8 = sub_10022CB3C((uint64_t)KmlTlv, 77, v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    v10 = sub_10022D014((uint64_t)v9);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);

    objc_msgSend(v4, "appendData:", v11);
    objc_msgSend(v5, "appendData:", v11);

  }
  v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "configuration"));
  v13 = objc_msgSend((id)v12, "opt1");

  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "configuration"));
  LOBYTE(v12) = objc_msgSend(v14, "opt2");

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[EndpointConfigForSharing createEndpointConfigWithSlotIdentifier:]", 184, CFSTR("SiaC : options_1: %02x; options_2: %02x"),
    v15,
    v16,
    v17,
    v18,
    v13);
  v19 = sub_10022CB90((uint64_t)KmlTlv, 70, v13);
  v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
  v21 = sub_10022D014((uint64_t)v20);
  v180 = a1;
  v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
  objc_msgSend(v5, "appendData:", v22);

  v23 = sub_10022CB90((uint64_t)KmlTlv, 71, v12);
  v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
  v25 = sub_10022D014((uint64_t)v24);
  v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
  objc_msgSend(v5, "appendData:", v26);

  LOBYTE(v26) = v12 & 0xBF;
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[EndpointConfigForSharing createEndpointConfigWithSlotIdentifier:]", 197, CFSTR("V1 : options_1: %02x; options_2: %02x"),
    v27,
    v28,
    v29,
    v30,
    v13 & 0xCF);
  v31 = sub_10022CB90((uint64_t)KmlTlv, 70, v13 & 0xCF);
  v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
  v33 = sub_10022D014((uint64_t)v32);
  v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
  objc_msgSend(v4, "appendData:", v34);

  v35 = (char)v26;
  v36 = v180;
  v37 = sub_10022CB90((uint64_t)KmlTlv, 71, v35);
  v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
  v39 = sub_10022D014((uint64_t)v38);
  v40 = (void *)objc_claimAutoreleasedReturnValue(v39);
  objc_msgSend(v4, "appendData:", v40);

  v41 = sub_10022CBF0((uint64_t)KmlTlv, 92, 0x100u);
  v42 = (void *)objc_claimAutoreleasedReturnValue(v41);
  v43 = sub_10022D014((uint64_t)v42);
  v44 = objc_claimAutoreleasedReturnValue(v43);

  objc_msgSend(v4, "appendData:", v44);
  v179 = (void *)v44;
  objc_msgSend(v5, "appendData:", v44);
  v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v180 + 40), "readerPublicKey"));

  if (v45)
  {
    v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v180 + 40), "readerPublicKey"));
    v47 = sub_10022CB3C((uint64_t)KmlTlv, 91, v46);
    v48 = (void *)objc_claimAutoreleasedReturnValue(v47);
    v49 = sub_10022D014((uint64_t)v48);
    v50 = (void *)objc_claimAutoreleasedReturnValue(v49);

    objc_msgSend(v4, "appendData:", v50);
    objc_msgSend(v5, "appendData:", v50);

  }
  v51 = kmlUtilTimeNow();
  v52 = (void *)objc_claimAutoreleasedReturnValue(v51);
  v53 = sub_10022CB3C((uint64_t)KmlTlv, 81, v52);
  v54 = (void *)objc_claimAutoreleasedReturnValue(v53);
  v55 = sub_10022D014((uint64_t)v54);
  v56 = objc_claimAutoreleasedReturnValue(v55);

  objc_msgSend(v4, "appendData:", v56);
  v178 = (void *)v56;
  v57 = objc_msgSend(v5, "appendData:", v56);
  v65 = kmlUtilInfiniteTime((uint64_t)v57, v58, v59, v60, v61, v62, v63, v64);
  v66 = (void *)objc_claimAutoreleasedReturnValue(v65);
  v67 = sub_10022CB3C((uint64_t)KmlTlv, 82, v66);
  v68 = (void *)objc_claimAutoreleasedReturnValue(v67);
  v69 = sub_10022D014((uint64_t)v68);
  v70 = objc_claimAutoreleasedReturnValue(v69);

  objc_msgSend(v4, "appendData:", v70);
  v181 = v5;
  v177 = (void *)v70;
  objc_msgSend(v5, "appendData:", v70);
  v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v180 + 40), "authorizedKeys"));
  v72 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData data](NSMutableData, "data"));
  v197 = 0u;
  v198 = 0u;
  v199 = 0u;
  v200 = 0u;
  v73 = v71;
  v74 = objc_msgSend(v73, "countByEnumeratingWithState:objects:count:", &v197, v203, 16);
  if (v74)
  {
    v75 = v74;
    v76 = *(_QWORD *)v198;
    do
    {
      for (i = 0; i != v75; i = (char *)i + 1)
      {
        if (*(_QWORD *)v198 != v76)
          objc_enumerationMutation(v73);
        objc_msgSend(v72, "appendData:", *(_QWORD *)(*((_QWORD *)&v197 + 1) + 8 * (_QWORD)i));
      }
      v75 = objc_msgSend(v73, "countByEnumeratingWithState:objects:count:", &v197, v203, 16);
    }
    while (v75);
  }

  if (v72)
  {
    v78 = sub_10022CB3C((uint64_t)KmlTlv, 73, v72);
    v79 = (void *)objc_claimAutoreleasedReturnValue(v78);
    v80 = sub_10022D014((uint64_t)v79);
    v81 = (void *)objc_claimAutoreleasedReturnValue(v80);

    objc_msgSend(v4, "appendData:", v81);
    objc_msgSend(v181, "appendData:", v81);

  }
  v82 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v180 + 40), "confidentialMailBoxSize"));
  v83 = bswap32(objc_msgSend(v82, "unsignedIntValue")) >> 16;

  v196 = v83;
  v84 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v180 + 40), "privateMailBoxSize"));
  v85 = bswap32(objc_msgSend(v84, "unsignedIntValue")) >> 16;

  v195 = v85;
  v86 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v180 + 40), "confidentialMailBoxSize"));
  objc_msgSend(v86, "unsignedIntValue");
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[EndpointConfigForSharing createEndpointConfigWithSlotIdentifier:]", 238, CFSTR("ConfMailBoxSize from endpoint: network: 0x%04x, host: 0x%04x"), v87, v88, v89, v90, v196);

  v91 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v180 + 40), "privateMailBoxSize"));
  objc_msgSend(v91, "unsignedIntValue");
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[EndpointConfigForSharing createEndpointConfigWithSlotIdentifier:]", 239, CFSTR("PrivMailBoxSize from endpoint: network: 0x%04x, host: 0x%04x"), v92, v93, v94, v95, (unsigned __int16)v85);

  v96 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", &v196, 2));
  v97 = sub_10022CB3C((uint64_t)KmlTlv, 74, v96);
  v98 = (void *)objc_claimAutoreleasedReturnValue(v97);

  v99 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", &v195, 2));
  v100 = sub_10022CB3C((uint64_t)KmlTlv, 75, v99);
  v101 = (void *)objc_claimAutoreleasedReturnValue(v100);

  v102 = v98;
  v103 = v101;
  v175 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v180 + 40), "mailboxSizesPlusAdditionalData"));
  v104 = sub_10022C7A4((uint64_t)KmlTlv, v175);
  v105 = (void *)objc_claimAutoreleasedReturnValue(v104);
  v182 = v3;
  v183 = v103;
  v176 = v73;
  v184 = v102;
  v174 = v105;
  if (!objc_msgSend(v105, "count"))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[EndpointConfigForSharing createEndpointConfigWithSlotIdentifier:]", 282, CFSTR("We don't have mailbox sizes provided by car for V1. So use sizes from endpoint"), v106, v107, v108, v109, v172);
    v130 = v102;
    v131 = v103;
    v132 = (uint64_t)v131;
    v113 = v130;
    goto LABEL_48;
  }
  v173 = v4;
  v193 = 0u;
  v194 = 0u;
  v191 = 0u;
  v192 = 0u;
  v110 = v105;
  v111 = objc_msgSend(v110, "countByEnumeratingWithState:objects:count:", &v191, v202, 16);
  if (!v111)
  {
    v185 = 0;
    v186 = 0;
    v113 = 0;
    goto LABEL_33;
  }
  v112 = v111;
  v185 = 0;
  v186 = 0;
  v113 = 0;
  v114 = *(_QWORD *)v192;
  do
  {
    for (j = 0; j != v112; j = (char *)j + 1)
    {
      if (*(_QWORD *)v192 != v114)
        objc_enumerationMutation(v110);
      v116 = *(void **)(*((_QWORD *)&v191 + 1) + 8 * (_QWORD)j);
      if (sub_100055868((uint64_t)v116) == 74)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[EndpointConfigForSharing createEndpointConfigWithSlotIdentifier:]", 259, CFSTR("Using conf mailbox size for V1 from data saved from Car"), v117, v118, v119, v120, v172);
        v121 = v116;
        v122 = v113;
        v113 = v121;
      }
      else if (sub_100055868((uint64_t)v116) == 75)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[EndpointConfigForSharing createEndpointConfigWithSlotIdentifier:]", 262, CFSTR("Using priv mailbox size for V1 from data saved from Car"), v123, v124, v125, v126, v172);
        v127 = v116;
        v122 = v186;
        v186 = v127;
      }
      else
      {
        if (sub_100055868((uint64_t)v116) != 96)
          continue;
        v128 = sub_10022CD6C((id *)v116);
        v129 = objc_claimAutoreleasedReturnValue(v128);
        v122 = v185;
        v185 = (void *)v129;
      }

    }
    v112 = objc_msgSend(v110, "countByEnumeratingWithState:objects:count:", &v191, v202, 16);
  }
  while (v112);
LABEL_33:

  v133 = v185;
  v131 = v183;
  v130 = v184;
  if (!objc_msgSend(v185, "length"))
    goto LABEL_47;
  v134 = sub_10022C7A4((uint64_t)KmlTlv, v185);
  v135 = (void *)objc_claimAutoreleasedReturnValue(v134);
  v187 = 0u;
  v188 = 0u;
  v189 = 0u;
  v190 = 0u;
  v136 = objc_msgSend(v135, "countByEnumeratingWithState:objects:count:", &v187, v201, 16);
  v131 = v183;
  v130 = v184;
  if (!v136)
    goto LABEL_46;
  v137 = v136;
  v138 = *(_QWORD *)v188;
  v131 = v183;
  v130 = v184;
  while (2)
  {
    v139 = 0;
    while (2)
    {
      if (*(_QWORD *)v188 != v138)
        objc_enumerationMutation(v135);
      v140 = *(void **)(*((_QWORD *)&v187 + 1) + 8 * v139);
      if (sub_100055868((uint64_t)v140) == 74)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[EndpointConfigForSharing createEndpointConfigWithSlotIdentifier:]", 273, CFSTR("Using conf mailbox size for V3 from data saved from Car"), v141, v142, v143, v144, v172);
        v145 = v130;
        v130 = v140;
        goto LABEL_43;
      }
      if (sub_100055868((uint64_t)v140) == 75)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[EndpointConfigForSharing createEndpointConfigWithSlotIdentifier:]", 276, CFSTR("Using priv mailbox size for V3 from data saved from Car"), v146, v147, v148, v149, v172);
        v145 = v131;
        v131 = v140;
LABEL_43:
        v150 = v140;

      }
      if (v137 != (id)++v139)
        continue;
      break;
    }
    v137 = objc_msgSend(v135, "countByEnumeratingWithState:objects:count:", &v187, v201, 16);
    if (v137)
      continue;
    break;
  }
LABEL_46:

  v133 = v185;
LABEL_47:

  v3 = v182;
  v4 = v173;
  v36 = v180;
  v132 = (uint64_t)v186;
LABEL_48:
  v151 = sub_10022D014((uint64_t)v113);
  v152 = (void *)objc_claimAutoreleasedReturnValue(v151);
  objc_msgSend(v4, "appendData:", v152);

  v153 = sub_10022D014(v132);
  v154 = (void *)objc_claimAutoreleasedReturnValue(v153);
  objc_msgSend(v4, "appendData:", v154);

  v155 = sub_10022D014((uint64_t)v130);
  v156 = (void *)objc_claimAutoreleasedReturnValue(v155);
  objc_msgSend(v181, "appendData:", v156);

  v157 = sub_10022D014((uint64_t)v131);
  v158 = (void *)objc_claimAutoreleasedReturnValue(v157);
  objc_msgSend(v181, "appendData:", v158);

  v159 = sub_10022CB3C((uint64_t)KmlTlv, 78, v3);
  v160 = (void *)objc_claimAutoreleasedReturnValue(v159);
  v161 = sub_10022D014((uint64_t)v160);
  v162 = (void *)v132;
  v163 = (void *)objc_claimAutoreleasedReturnValue(v161);
  objc_msgSend(v4, "appendData:", v163);

  v164 = sub_10022D014((uint64_t)v160);
  v165 = (void *)objc_claimAutoreleasedReturnValue(v164);
  objc_msgSend(v181, "appendData:", v165);

  v166 = sub_10022CB3C((uint64_t)KmlTlv, 32551, v4);
  v167 = objc_claimAutoreleasedReturnValue(v166);
  v168 = *(void **)(v36 + 8);
  *(_QWORD *)(v36 + 8) = v167;

  v169 = sub_10022CB3C((uint64_t)KmlTlv, 32556, v181);
  v170 = objc_claimAutoreleasedReturnValue(v169);
  v171 = *(void **)(v36 + 16);
  *(_QWORD *)(v36 + 16) = v170;

  v3 = v182;
LABEL_49:

}

id sub_10021EFAC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  _WORD *v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  _WORD *v16;
  id v17;
  void *v18;
  KmlDeviceConfigurationData *v19;
  void *v20;
  _BYTE *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  const __CFString *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _WORD *v33;
  id v34;
  void *v35;
  _BYTE *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  id v40;
  uint64_t v41;
  void *v42;
  _WORD *v43;
  void *v44;
  id v45;
  void *v46;
  uint64_t v47;
  void *v48;
  id v49;
  uint64_t v50;
  void *v51;
  _WORD *v52;
  void *v53;
  id v54;
  void *v55;
  uint64_t v56;
  void *v57;
  id v58;
  uint64_t v59;
  void *v60;
  _WORD *v61;
  void *v62;
  id v63;
  void *v64;
  unsigned int v65;
  uint64_t v66;
  void *v67;
  id v68;
  uint64_t v69;
  void *v70;
  void *v71;
  id v72;
  void *v73;
  uint64_t v74;
  void *v75;
  char v76;
  char v77;
  _WORD *v78;
  void *v79;
  id v80;
  void *v81;
  _WORD *v82;
  void *v83;
  id v84;
  void *v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  void *v89;
  void *v90;
  void *v91;
  _WORD *v92;
  void *v93;
  id v94;
  void *v95;
  uint64_t v97;

  v5 = a2;
  v6 = a3;
  if (a1)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData data](NSMutableData, "data"));
    if (sub_10024E5DC((_BOOL8)v6))
    {
      v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "readerInfo"));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "dataUsingEncoding:", 4));
      v10 = sub_10022CB3C((uint64_t)KmlTlv, 89, v9);
      v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      v12 = sub_10022D014((uint64_t)v11);
      v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      objc_msgSend(v7, "appendData:", v13);
    }
    else
    {
      v14 = objc_alloc((Class)KmlRoutingInformation);
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "readerInfo"));
      v8 = objc_msgSend(v14, "initWithReaderInformation:", v15);

      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "getRoutingInformation"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "dataUsingEncoding:", 4));
      v16 = sub_10022CB3C((uint64_t)KmlTlv, 89, v11);
      v13 = (void *)objc_claimAutoreleasedReturnValue(v16);
      v17 = sub_10022D014((uint64_t)v13);
      v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
      objc_msgSend(v7, "appendData:", v18);

    }
    v19 = [KmlDeviceConfigurationData alloc];
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "deviceConfiguration"));
    v21 = (_BYTE *)sub_10022D114((uint64_t)v19, v20);

    if (objc_msgSend(*(id *)(a1 + 48), "agreedKmlVehicleVersion") == 768)
    {
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "vehicleSupportedFrameworkVersionsTlvAsData"));

      if (v22)
      {
        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "vehicleSupportedFrameworkVersionsTlvAsData"));
        objc_msgSend(v7, "appendData:", v23);

      }
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "vehicleSupportedAppletVersionsTlvAsData"));

      if (v24)
      {
        v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "vehicleSupportedAppletVersionsTlvAsData"));
        objc_msgSend(v7, "appendData:", v25);

      }
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "subjectIdentifier"));
      v27 = sub_100254798((uint64_t)KmlEndpointManager, v26);
      v28 = (void *)objc_claimAutoreleasedReturnValue(v27);

      if (objc_msgSend(v28, "isEqualToString:", CFSTR("FRND")))
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[EndpointConfigForSharing createDeviceConfigWithSupportedRadiosData:sharingConfig:]", 334, CFSTR("Set a tag to indicate sharing from friend in SiaC"), v29, v30, v31, v32, v97);
        sub_10022F16C((uint64_t)v21, 1);
      }
    }
    else
    {
      v33 = sub_10022CBF0((uint64_t)KmlTlv, 92, 0x100u);
      v28 = (void *)objc_claimAutoreleasedReturnValue(v33);
      v34 = sub_10022D014((uint64_t)v28);
      v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
      objc_msgSend(v7, "appendData:", v35);

    }
    v36 = sub_10022DCA4(v21);
    v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
    objc_msgSend(v7, "appendData:", v37);

    if (v5)
      objc_msgSend(v7, "appendData:", v5);
    v38 = sub_10022ADBC((uint64_t)v21);
    v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
    v40 = objc_msgSend(v39, "length");

    if (v40)
    {
      v41 = sub_10022ADBC((uint64_t)v21);
      v42 = (void *)objc_claimAutoreleasedReturnValue(v41);
      v43 = sub_10022CB3C((uint64_t)KmlTlv, 74, v42);
      v44 = (void *)objc_claimAutoreleasedReturnValue(v43);
      v45 = sub_10022D014((uint64_t)v44);
      v46 = (void *)objc_claimAutoreleasedReturnValue(v45);
      objc_msgSend(v7, "appendData:", v46);

    }
    v47 = sub_1002225E0((uint64_t)v21);
    v48 = (void *)objc_claimAutoreleasedReturnValue(v47);
    v49 = objc_msgSend(v48, "length");

    if (v49)
    {
      v50 = sub_1002225E0((uint64_t)v21);
      v51 = (void *)objc_claimAutoreleasedReturnValue(v50);
      v52 = sub_10022CB3C((uint64_t)KmlTlv, 75, v51);
      v53 = (void *)objc_claimAutoreleasedReturnValue(v52);
      v54 = sub_10022D014((uint64_t)v53);
      v55 = (void *)objc_claimAutoreleasedReturnValue(v54);
      objc_msgSend(v7, "appendData:", v55);

    }
    v56 = sub_10022ADC8((uint64_t)v21);
    v57 = (void *)objc_claimAutoreleasedReturnValue(v56);
    v58 = objc_msgSend(v57, "length");

    if (v58)
    {
      v59 = sub_10022ADC8((uint64_t)v21);
      v60 = (void *)objc_claimAutoreleasedReturnValue(v59);
      objc_msgSend(v7, "appendData:", v60);

    }
    if (sub_10022F14C((_BOOL8)v21))
    {
      v61 = sub_10022CB90((uint64_t)KmlTlv, 215, 1);
      v62 = (void *)objc_claimAutoreleasedReturnValue(v61);
      v63 = sub_10022D014((uint64_t)v62);
      v64 = (void *)objc_claimAutoreleasedReturnValue(v63);
      objc_msgSend(v7, "appendData:", v64);

      if (sub_10024DE64((_BOOL8)v6))
      {
        if (sub_10022F160((uint64_t)v21))
        {
          v65 = sub_10022F160((uint64_t)v21);
          v66 = sub_100217298((uint64_t)v6);
          v67 = (void *)objc_claimAutoreleasedReturnValue(v66);
          v68 = objc_msgSend(v67, "length");

          if (v68 == (id)v65)
          {
            v69 = sub_100217274((uint64_t)v21);
            v70 = (void *)objc_claimAutoreleasedReturnValue(v69);
            objc_msgSend(v7, "appendData:", v70);

          }
        }
      }
    }
    if (objc_msgSend(*(id *)(a1 + 48), "agreedKmlVehicleVersion") == 768)
    {
      v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "kmlSupportedVersionsTlvForShareInitiator"));
      v72 = sub_10022D014((uint64_t)v71);
      v73 = (void *)objc_claimAutoreleasedReturnValue(v72);
      objc_msgSend(v7, "appendData:", v73);

    }
    v74 = sub_1002299DC((uint64_t)v6);
    v75 = (void *)objc_claimAutoreleasedReturnValue(v74);
    v76 = objc_msgSend(v75, "length");

    v77 = sub_1002299E8((uint64_t)v6);
    if (v76 && v77)
    {
      v78 = sub_10022CB90((uint64_t)KmlTlv, 40727, v77);
      v79 = (void *)objc_claimAutoreleasedReturnValue(v78);
      v80 = sub_10022D014((uint64_t)v79);
      v81 = (void *)objc_claimAutoreleasedReturnValue(v80);
      objc_msgSend(v7, "appendData:", v81);

      v82 = sub_10022CB90((uint64_t)KmlTlv, 40728, v76);
      v83 = (void *)objc_claimAutoreleasedReturnValue(v82);
      v84 = sub_10022D014((uint64_t)v83);
      v85 = (void *)objc_claimAutoreleasedReturnValue(v84);
      objc_msgSend(v7, "appendData:", v85);

    }
    v86 = sub_100217280((uint64_t)v21);
    v87 = (void *)objc_claimAutoreleasedReturnValue(v86);

    if (v87)
    {
      v88 = sub_100217280((uint64_t)v21);
      v89 = (void *)objc_claimAutoreleasedReturnValue(v88);
      objc_msgSend(v7, "appendData:", v89);

    }
    v90 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "hupData"));

    if (v90)
    {
      v91 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "hupData"));
      v92 = sub_10022CB3C((uint64_t)KmlTlv, 40736, v91);
      v93 = (void *)objc_claimAutoreleasedReturnValue(v92);
      v94 = sub_10022D014((uint64_t)v93);
      v95 = (void *)objc_claimAutoreleasedReturnValue(v94);
      objc_msgSend(v7, "appendData:", v95);

    }
    kmlUtilLogLargeData(CFSTR("DeviceConfig and other tags"), v7);

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

uint64_t sub_10021F620(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSNumber *v20;
  void *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  KmlEndpointCreationConfig *v35;
  void *v36;
  void *v37;
  id *v38;
  id v39;
  id *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  id *v47;
  id v48;
  id *v49;
  void *v50;
  void *v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  id v62;
  uint64_t v63;
  void *v64;
  void *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  _BYTE v70[128];

  v3 = a2;
  v63 = a1;
  if (!a1)
    goto LABEL_26;
  v64 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v62 = v3;
  v4 = sub_10022C7A4((uint64_t)KmlTlv, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v66 = 0u;
  v67 = 0u;
  v68 = 0u;
  v69 = 0u;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v66, v70, 16);
  v65 = v5;
  if (!v6)
    goto LABEL_17;
  v7 = v6;
  v8 = *(_QWORD *)v67;
  do
  {
    v9 = 0;
    do
    {
      if (*(_QWORD *)v67 != v8)
        objc_enumerationMutation(v5);
      v10 = *(void **)(*((_QWORD *)&v66 + 1) + 8 * (_QWORD)v9);
      if (sub_100055868((uint64_t)v10) == 32551)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[EndpointConfigForSharing parseEndpointCreationAndDeviceConfigsFromData:]", 418, CFSTR("Found endpoint config"), v11, v12, v13, v14, v61);
        v15 = (id *)(a1 + 8);
LABEL_11:
        objc_storeStrong(v15, v10);
        goto LABEL_12;
      }
      if (sub_100055868((uint64_t)v10) == 32556)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[EndpointConfigForSharing parseEndpointCreationAndDeviceConfigsFromData:]", 421, CFSTR("Found endpoint config for SiaC"), v16, v17, v18, v19, v61);
        v15 = (id *)(a1 + 16);
        goto LABEL_11;
      }
      v20 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", sub_100055868((uint64_t)v10));
      v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
      v22 = objc_msgSend(&off_100322BF8, "containsObject:", v21);

      v5 = v65;
      if (v22)
      {
        v23 = sub_100055868((uint64_t)v10);
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[EndpointConfigForSharing parseEndpointCreationAndDeviceConfigsFromData:]", 424, CFSTR("Found device config tag : 0x%x"), v24, v25, v26, v27, v23);
        objc_msgSend(v64, "addObject:", v10);
      }
LABEL_12:
      v9 = (char *)v9 + 1;
    }
    while (v7 != v9);
    v28 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v66, v70, 16);
    v7 = v28;
  }
  while (v28);
LABEL_17:
  if (objc_msgSend(v64, "count"))
    objc_storeStrong((id *)(a1 + 24), v64);
  v29 = *(id *)(a1 + 8);
  if (v29 && (v34 = *(_QWORD *)(a1 + 24), v29, v34))
  {
    v35 = objc_alloc_init(KmlEndpointCreationConfig);
    v36 = *(void **)(v63 + 32);
    *(_QWORD *)(v63 + 32) = v35;

    v37 = *(void **)(v63 + 32);
    v38 = (id *)*(id *)(v63 + 8);
    v39 = v37;
    v40 = sub_10022CD6C(v38);
    v41 = (void *)objc_claimAutoreleasedReturnValue(v40);
    sub_100250CC8((uint64_t)v39, v41);

    if (*(_QWORD *)(v63 + 16))
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[EndpointConfigForSharing parseEndpointCreationAndDeviceConfigsFromData:]", 441, CFSTR("Apply SiaC overrides"), v42, v43, v44, v45, v61);
      v46 = *(void **)(v63 + 32);
      v47 = (id *)*(id *)(v63 + 16);
      v48 = v46;
      v49 = sub_10022CD6C(v47);
      v50 = (void *)objc_claimAutoreleasedReturnValue(v49);
      sub_100250D54((uint64_t)v48, v50);

    }
    v51 = *(void **)(v63 + 24);
    v52 = *(id *)(v63 + 32);
    sub_10025112C((uint64_t)v52, v51);

    a1 = sub_1002518BC(*(_QWORD *)(v63 + 32), v53, v54, v55, v56, v57, v58, v59);
    v3 = v62;
    v5 = v65;
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[EndpointConfigForSharing parseEndpointCreationAndDeviceConfigsFromData:]", 434, CFSTR("Missing endpoint config / device config"), v30, v31, v32, v33, v61);
    a1 = 0;
    v3 = v62;
  }

LABEL_26:
  return a1;
}

void sub_10021F9A8(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 48), a2);
}

uint64_t sub_10021FA9C(void **a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id *v14;
  id *v15;
  void *v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  void *j;
  id *v27;
  uint64_t v28;
  id *v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  id v37;
  id v38;
  void **v39;
  void **v40;
  uint64_t v41;
  void *k;
  id *v43;
  void **v44;
  id *v45;
  uint64_t v46;
  void *v47;
  uint64_t v49;
  id v50;
  void **v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  unsigned __int8 v64;
  _BYTE v65[128];
  _BYTE v66[128];
  _BYTE v67[128];

  if (!a1)
    return 0;
  v3 = sub_10022C7A4((uint64_t)KmlTlv, a2);
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  v63 = 0u;
  v4 = (id)objc_claimAutoreleasedReturnValue(v3);
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v60, v67, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v61;
    while (2)
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v61 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v60 + 1) + 8 * (_QWORD)i);
        if (sub_100055868((uint64_t)v9) == 32555)
        {
          objc_storeStrong(a1 + 6, v9);
          goto LABEL_12;
        }
      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v60, v67, 16);
      if (v6)
        continue;
      break;
    }
  }
LABEL_12:

  v14 = (id *)a1[6];
  if (v14)
  {
    v15 = sub_10022CD6C(v14);
    v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    v17 = sub_10022C7A4((uint64_t)KmlTlv, v16);
    v18 = (void *)objc_claimAutoreleasedReturnValue(v17);

    if (objc_msgSend(v18, "count"))
    {
      v58 = 0u;
      v59 = 0u;
      v56 = 0u;
      v57 = 0u;
      v23 = v18;
      v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v56, v66, 16);
      if (v24)
      {
        v25 = *(_QWORD *)v57;
        while (2)
        {
          for (j = 0; j != v24; j = (char *)j + 1)
          {
            if (*(_QWORD *)v57 != v25)
              objc_enumerationMutation(v23);
            v27 = *(id **)(*((_QWORD *)&v56 + 1) + 8 * (_QWORD)j);
            if (sub_100055868((uint64_t)v27) == 48)
            {
              v29 = sub_10022CD6C(v27);
              v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
              v31 = sub_10022C7A4((uint64_t)KmlTlv, v30);
              v24 = (id)objc_claimAutoreleasedReturnValue(v31);

              goto LABEL_25;
            }
          }
          v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v56, v66, 16);
          if (v24)
            continue;
          break;
        }
      }
LABEL_25:

      if (objc_msgSend(v24, "count"))
      {
        v50 = v4;
        v54 = 0u;
        v55 = 0u;
        v52 = 0u;
        v53 = 0u;
        v36 = v24;
        v37 = objc_msgSend(v36, "countByEnumeratingWithState:objects:count:", &v52, v65, 16);
        if (v37)
        {
          v38 = v37;
          v51 = a1 + 5;
          v39 = a1 + 4;
          v40 = a1 + 3;
          v41 = *(_QWORD *)v53;
          do
          {
            for (k = 0; k != v38; k = (char *)k + 1)
            {
              if (*(_QWORD *)v53 != v41)
                objc_enumerationMutation(v36);
              v43 = *(id **)(*((_QWORD *)&v52 + 1) + 8 * (_QWORD)k);
              v44 = v40;
              if (sub_100055868((uint64_t)v43) != 32544)
              {
                v44 = v39;
                if (sub_100055868((uint64_t)v43) != 32546)
                {
                  v44 = v39;
                  if (sub_100055868((uint64_t)v43) != 32578)
                  {
                    v44 = v51;
                    if (sub_100055868((uint64_t)v43) != 32548)
                    {
                      v44 = v51;
                      if (sub_100055868((uint64_t)v43) != 32580)
                        continue;
                    }
                  }
                }
              }
              v45 = sub_10022CD6C(v43);
              v46 = objc_claimAutoreleasedReturnValue(v45);
              v47 = *v44;
              *v44 = (void *)v46;

            }
            v38 = objc_msgSend(v36, "countByEnumeratingWithState:objects:count:", &v52, v65, 16);
          }
          while (v38);
        }

        v64 = 1;
        v4 = v50;
      }
      else
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingInitiatorCertChain parseSharingInitiatorCertChainFromData:]", 506, CFSTR("Missing first cert set"), v32, v33, v34, v35, v49);
        v64 = 0;

      }
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingInitiatorCertChain parseSharingInitiatorCertChainFromData:]", 494, CFSTR("Missing cert sets"), v19, v20, v21, v22, v49);
      v64 = 0;
    }

    v28 = v64;
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingInitiatorCertChain parseSharingInitiatorCertChainFromData:]", 487, CFSTR("Share initiator cert chain not found"), v10, v11, v12, v13, v49);
    v28 = 0;
  }

  return v28;
}

void **sub_10021FE94(void **a1)
{
  void **v1;
  void *v2;
  _WORD *v3;
  void *v4;
  id v5;
  void *v6;
  _WORD *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _WORD *v15;
  void *v16;
  id v17;
  void *v18;
  _WORD *v19;
  void *v20;
  id v21;
  void *v22;
  _WORD *v23;
  void *v24;
  id v25;
  uint64_t v27;

  v1 = a1;
  if (a1)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData data](NSMutableData, "data"));
    if (objc_msgSend(v1[3], "length"))
    {
      v3 = sub_10022CB3C((uint64_t)KmlTlv, 32544, v1[3]);
      v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
      v5 = sub_10022D014((uint64_t)v4);
      v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
      objc_msgSend(v2, "appendData:", v6);

    }
    if (objc_msgSend(v1[4], "length"))
    {
      v7 = sub_10022CB3C((uint64_t)KmlTlv, 32578, v1[4]);
      v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      v9 = sub_10022D014((uint64_t)v8);
      v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
      objc_msgSend(v2, "appendData:", v10);

    }
    if (objc_msgSend(v1[5], "length"))
    {
      v15 = sub_10022CB3C((uint64_t)KmlTlv, 32580, v1[5]);
      v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
      v17 = sub_10022D014((uint64_t)v16);
      v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
      objc_msgSend(v2, "appendData:", v18);

      v19 = sub_10022CB3C((uint64_t)KmlTlv, 48, v2);
      v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
      v21 = sub_10022D014((uint64_t)v20);
      v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
      v23 = sub_10022CB3C((uint64_t)KmlTlv, 32555, v22);
      v24 = (void *)objc_claimAutoreleasedReturnValue(v23);

      v25 = sub_10022D014((uint64_t)v24);
      v1 = (void **)objc_claimAutoreleasedReturnValue(v25);

    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[SharingInitiatorCertChain certChainAsData]", 540, CFSTR("Endpoint cert is required to create cert chain"), v11, v12, v13, v14, v27);
      v1 = 0;
    }

  }
  return v1;
}

BOOL sub_100220030(uint64_t a1, void *a2)
{
  id v3;
  __SecCertificate *v4;
  __SecCertificate *v5;
  __CFString *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AuthorityKeyID;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  id *v28;
  id *v29;
  void *v30;
  _BOOL8 v31;
  id v32;
  void *v33;
  void *v34;
  id v35;
  id *v36;
  id *v37;
  void *v38;
  id v39;
  void *v40;
  const __CFString *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSMutableArray *v51;
  const __CFData *v52;
  __SecCertificate *v53;
  __SecCertificate *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  id v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  const __CFData *v67;
  __SecCertificate *v68;
  __SecCertificate *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  id v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  SESConfigDCK *v82;
  const __CFData *v83;
  __SecCertificate *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __SecCertificate *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  BOOL v99;
  id v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v107;
  void *v108;
  __CFString *v109;
  void *v110;
  NSMutableArray *v111;
  char v112;
  CFStringRef commonName;
  BOOL v114;

  v3 = a2;
  if (!a1)
  {
    v31 = 0;
    goto LABEL_39;
  }
  v4 = SecCertificateCreateWithData(0, *(CFDataRef *)(a1 + 40));
  v5 = v4;
  if (v4)
  {
    commonName = 0;
    SecCertificateCopyCommonName(v4, &commonName);
    v6 = (__CFString *)commonName;
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingInitiatorCertChain isCertChainTrustedForManufacturer:]", 565, CFSTR("Received endpointCommonName): %@"), v7, v8, v9, v10, (uint64_t)commonName);
    AuthorityKeyID = SecCertificateGetAuthorityKeyID(v5);
    v12 = (void *)objc_claimAutoreleasedReturnValue(AuthorityKeyID);
    v13 = kmlUtilHexStringFromData(v12);
    v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingInitiatorCertChain isCertChainTrustedForManufacturer:]", 568, CFSTR("Endpoint certificateAuthorityKeyID=%@"), v15, v16, v17, v18, (uint64_t)v14);

    if (!v12)
    {
      v114 = 0;
LABEL_37:

      v31 = v114;
      goto LABEL_38;
    }
    v109 = v6;
    v111 = objc_opt_new(NSMutableArray);
    -[NSMutableArray addObject:](v111, "addObject:", v5);
    v112 = 0;
    v19 = (void *)SecCertificateCopyExtensionValue(v5, CFSTR("1.3.6.1.4.1.41577.5.16"), &v112);
    v20 = kmlUtilHexStringFromData(v19);
    v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
    KmlLogFunc2(OS_LOG_TYPE_DEBUG, (uint64_t)"-[SharingInitiatorCertChain isCertChainTrustedForManufacturer:]", 582, CFSTR("Extension: %@"), v22, v23, v24, v25, (uint64_t)v21);

    v26 = sub_10022C7A4((uint64_t)KmlTlv, v19);
    v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
    v110 = v27;
    if (objc_msgSend(v27, "count"))
    {
      v28 = (id *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "objectAtIndexedSubscript:", 0));
      v29 = sub_10022CD6C(v28);
      v30 = (void *)objc_claimAutoreleasedReturnValue(v29);

    }
    else
    {
      v30 = 0;
    }
    v32 = sub_10022C7A4((uint64_t)KmlTlv, v30);
    v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
    if ((unint64_t)objc_msgSend(v33, "count") >= 3 && v112)
    {
      v34 = v30;
      v35 = objc_alloc((Class)NSString);
      v36 = (id *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "objectAtIndexedSubscript:", 2));
      v37 = sub_10022CD6C(v36);
      v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
      v39 = objc_msgSend(v35, "initWithData:encoding:", v38, 4);
      v40 = *(void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v39;

    }
    else
    {
      if (v112)
        v41 = CFSTR("Yes");
      else
        v41 = CFSTR("No");
      objc_msgSend(v33, "count");
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[SharingInitiatorCertChain isCertChainTrustedForManufacturer:]", 592, CFSTR("Endpoint certificate extension invalid: Marked Critical (%@), sequenceCount(%lu)"), v42, v43, v44, v45, (uint64_t)v41);
      v34 = v30;
      v46 = kmlUtilHexStringFromData(v30);
      v36 = (id *)objc_claimAutoreleasedReturnValue(v46);
      KmlLogFunc2(OS_LOG_TYPE_DEBUG, (uint64_t)"-[SharingInitiatorCertChain isCertChainTrustedForManufacturer:]", 593, CFSTR("Extension: %@"), v47, v48, v49, v50, (uint64_t)v36);
    }
    v51 = v111;

    v52 = *(const __CFData **)(a1 + 32);
    if (v52)
    {
      v53 = SecCertificateCreateWithData(0, v52);
      if (!v53)
        goto LABEL_31;
      v54 = v53;
      commonName = 0;
      SecCertificateCopyCommonName(v53, &commonName);
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingInitiatorCertChain isCertChainTrustedForManufacturer:]", 608, CFSTR("Intermediate certificate CommonName: %@"), v55, v56, v57, v58, (uint64_t)commonName);
      if (commonName)
        CFRelease(commonName);
      -[NSMutableArray addObject:](v111, "addObject:", v54);
      v59 = SecCertificateGetAuthorityKeyID(v54);
      v60 = (void *)objc_claimAutoreleasedReturnValue(v59);

      v61 = kmlUtilHexStringFromData(v60);
      v62 = (void *)objc_claimAutoreleasedReturnValue(v61);
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingInitiatorCertChain isCertChainTrustedForManufacturer:]", 615, CFSTR("Intermediate certificateAuthorityKeyID=%@"), v63, v64, v65, v66, (uint64_t)v62);

      v12 = v60;
    }
    v67 = *(const __CFData **)(a1 + 24);
    if (!v67)
    {
LABEL_26:
      v82 = objc_opt_new(SESConfigDCK);
      v83 = (const __CFData *)objc_claimAutoreleasedReturnValue(-[SESConfigDCK getRootCertificateFor:keyID:error:](v82, "getRootCertificateFor:keyID:error:", v3, v12, 0));

      if (v83)
      {
        v84 = SecCertificateCreateWithData(0, v83);
        v89 = v84;
        if (v84)
        {
          v108 = v19;
          commonName = 0;
          SecCertificateCopyCommonName(v84, &commonName);
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingInitiatorCertChain isCertChainTrustedForManufacturer:]", 659, CFSTR("Root certificate CommonName: %@"), v90, v91, v92, v93, (uint64_t)commonName);
          if (commonName)
            CFRelease(commonName);
          v94 = (void *)SecCertificateCopyIssuerSummary(v89);
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingInitiatorCertChain isCertChainTrustedForManufacturer:]", 664, CFSTR("rootCert certificateIssuer=%@"), v95, v96, v97, v98, (uint64_t)v94);
          v51 = v111;
          v99 = sub_1002521D0((uint64_t)KmlEndpointCreationConfig, v89, v111);

          v19 = v108;
        }
        else
        {
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingInitiatorCertChain isCertChainTrustedForManufacturer:]", 668, CFSTR("Root certificate is nil"), v85, v86, v87, v88, v107);
          v99 = 0;
        }
        v114 = v99;

      }
      else
      {
        v100 = kmlUtilHexStringFromData(v12);
        v101 = (void *)objc_claimAutoreleasedReturnValue(v100);
        KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[SharingInitiatorCertChain isCertChainTrustedForManufacturer:]", 648, CFSTR("Got nil certificate for issuer %@"), v102, v103, v104, v105, (uint64_t)v101);

        v114 = 0;
      }

      goto LABEL_36;
    }
    v68 = SecCertificateCreateWithData(0, v67);
    if (v68)
    {
      v69 = v68;
      commonName = 0;
      SecCertificateCopyCommonName(v68, &commonName);
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingInitiatorCertChain isCertChainTrustedForManufacturer:]", 628, CFSTR("Ext CA certificate CommonName: %@"), v70, v71, v72, v73, (uint64_t)commonName);
      if (commonName)
        CFRelease(commonName);
      -[NSMutableArray addObject:](v111, "addObject:", v69);
      v74 = SecCertificateGetAuthorityKeyID(v69);
      v75 = (void *)objc_claimAutoreleasedReturnValue(v74);

      v76 = kmlUtilHexStringFromData(v75);
      v77 = (void *)objc_claimAutoreleasedReturnValue(v76);
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingInitiatorCertChain isCertChainTrustedForManufacturer:]", 637, CFSTR("Ext CA certificateAuthorityKeyID=%@"), v78, v79, v80, v81, (uint64_t)v77);

      v12 = v75;
      goto LABEL_26;
    }
LABEL_31:
    v114 = 0;
LABEL_36:

    v6 = v109;
    goto LABEL_37;
  }
  v31 = 0;
LABEL_38:

LABEL_39:
  return v31;
}

id sub_1002206D4(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id *v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  char v29;
  unsigned __int16 v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  void *v38;
  id v39;
  void *v40;
  _QWORD *v41;
  void *v42;
  _WORD *v43;
  uint64_t v44;
  void *v45;
  id v46;

  v9 = a3;
  v10 = a4;
  v11 = a5;
  if (a1)
  {
    v12 = (id *)(a1 + 40);
    objc_storeStrong((id *)(a1 + 40), a5);
    v13 = a2;
    sub_100048A08(*(_QWORD *)(a1 + 8), v13);

    sub_10021F9A8(*(_QWORD *)(a1 + 8), *(void **)(a1 + 40));
    sub_100048A08(*(_QWORD *)(a1 + 16), *(void **)(a1 + 40));
    sub_100048AE8(*(_QWORD *)(a1 + 24), *(void **)(a1 + 40));
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData data](NSMutableData, "data"));
    v15 = *(_QWORD *)(a1 + 8);
    v16 = sub_10022ADE0((uint64_t)v10);
    v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    sub_10021E4E0(v15, v17);

    v18 = *(_QWORD *)(a1 + 8);
    if (v18)
      v19 = *(_QWORD *)(v18 + 8);
    else
      v19 = 0;
    v20 = sub_10022D014(v19);
    v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
    objc_msgSend(v14, "appendData:", v21);

    if (objc_msgSend(*v12, "agreedKmlVehicleVersion") == 768)
    {
      v22 = *(_QWORD *)(a1 + 8);
      if (v22)
        v23 = *(_QWORD *)(v22 + 16);
      else
        v23 = 0;
      v24 = sub_10022D014(v23);
      v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
      objc_msgSend(v14, "appendData:", v25);

    }
    v26 = *(_QWORD *)(a1 + 16);
    v27 = sub_1002225B8((uint64_t)v10);
    v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
    v29 = sub_100050680((uint64_t)v10);
    v30 = sub_1002225AC((uint64_t)v10);
    sub_10021D968(v26, v28, v29, v30);

    v31 = *(_QWORD *)(a1 + 16);
    if (v31)
      v32 = *(_QWORD *)(v31 + 16);
    else
      v32 = 0;
    v33 = sub_10022D014(v32);
    v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
    objc_msgSend(v14, "appendData:", v34);

    if (objc_msgSend(*v12, "agreedKmlVehicleVersion") == 768)
    {
      v35 = *(_QWORD *)(a1 + 16);
      if (v35)
        v36 = *(_QWORD *)(v35 + 24);
      else
        v36 = 0;
      v37 = sub_10022D014(v36);
      v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
      objc_msgSend(v14, "appendData:", v38);

    }
    v39 = sub_10021EFAC(*(_QWORD *)(a1 + 8), v9, v10);
    v40 = (void *)objc_claimAutoreleasedReturnValue(v39);
    objc_msgSend(v14, "appendData:", v40);

    v41 = sub_100220974((_QWORD *)a1);
    v42 = (void *)objc_claimAutoreleasedReturnValue(v41);
    if (objc_msgSend(v42, "length"))
      objc_msgSend(v14, "appendData:", v42);
    v43 = sub_10022CB3C((uint64_t)KmlTlv, 32561, v14);
    v44 = objc_claimAutoreleasedReturnValue(v43);
    v45 = *(void **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v44;

    v46 = sub_10022D014(*(_QWORD *)(a1 + 32));
    a1 = objc_claimAutoreleasedReturnValue(v46);

  }
  return (id)a1;
}

_QWORD *sub_100220974(_QWORD *a1)
{
  _QWORD *v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const __CFString *v26;
  void **v27;
  uint64_t v29;

  v1 = a1;
  if (a1)
  {
    if (isInternalBuild())
    {
      v2 = objc_msgSend(objc_alloc((Class)NSUserDefaults), "initWithSuiteName:", CFSTR("com.apple.seserviced"));
      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKey:", CFSTR("MockFleetEndpointCert")));
      v4 = kmlUtilDataForHexString(v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKey:", CFSTR("MockFleetIntermediateCert")));
      v7 = kmlUtilDataForHexString(v6);
      v8 = (void *)objc_claimAutoreleasedReturnValue(v7);

      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKey:", CFSTR("MockFleetExtCaCert")));
      v10 = kmlUtilDataForHexString(v9);
      v11 = (void *)objc_claimAutoreleasedReturnValue(v10);

    }
    else
    {
      v11 = 0;
      v8 = 0;
      v5 = 0;
    }
    if (objc_msgSend(v5, "length") && (objc_msgSend(v8, "length") || objc_msgSend(v11, "length")))
    {
      sub_100048A08(v1[3], v5);
      sub_100013B10(v1[3], v8);
      sub_100013B00(v1[3], v11);
      v16 = v1[1];
      if (v16)
        v17 = *(void **)(v16 + 40);
      else
        v17 = 0;
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "readerInfo"));
      v19 = objc_msgSend(objc_alloc((Class)KmlRoutingInformation), "initWithReaderInformation:", v18);
      v20 = v1[3];
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "manufacturer"));
      LODWORD(v20) = sub_100220030(v20, v21);

      v26 = CFSTR("No");
      if ((_DWORD)v20)
        v26 = CFSTR("Yes");
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KeySharingInvitation getSharerCertChain]", 807, CFSTR("Is the test cert chain trusted: %@"), v22, v23, v24, v25, (uint64_t)v26);
      v27 = sub_10021FE94((void **)v1[3]);
      v1 = (_QWORD *)objc_claimAutoreleasedReturnValue(v27);

    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KeySharingInvitation getSharerCertChain]", 796, &stru_100316BD0, v12, v13, v14, v15, v29);
      v1 = 0;
    }

  }
  return v1;
}

uint64_t sub_100220B88(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  void *i;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id *v20;
  id v21;
  id *v22;
  void *v23;
  char v24;
  void *v25;
  id *v26;
  id v27;
  id *v28;
  void *v29;
  BOOL v30;
  uint64_t v31;
  void *v32;
  id *v33;
  void **v34;
  id *v35;
  void *v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __CFString *v42;
  uint64_t v43;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _BYTE v49[128];

  if (!a1)
    return 0;
  v3 = sub_10022C7A4((uint64_t)KmlTlv, a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KeySharingInvitation parseInvitationFromData:]", 745, CFSTR("KSInvitationData: Looking for invitation TLV"), v5, v6, v7, v8, v45);
  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  v9 = v4;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v45, v49, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v46;
    do
    {
      for (i = 0; i != v11; i = (char *)i + 1)
      {
        if (*(_QWORD *)v46 != v12)
          objc_enumerationMutation(v9);
        v14 = *(void **)(*((_QWORD *)&v45 + 1) + 8 * (_QWORD)i);
        if (sub_100055868((uint64_t)v14) == 32561)
          objc_storeStrong((id *)(a1 + 32), v14);
      }
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v45, v49, 16);
    }
    while (v11);
  }

  if (*(_QWORD *)(a1 + 32))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KeySharingInvitation parseInvitationFromData:]", 757, CFSTR("KSInvitationData: Looking for Endpoint Config and Device Config TLVs"), v15, v16, v17, v18, v45);
    v19 = *(void **)(a1 + 8);
    v20 = (id *)*(id *)(a1 + 32);
    v21 = v19;
    v22 = sub_10022CD6C(v20);
    v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
    v24 = sub_10021F620((uint64_t)v21, v23);

    if ((v24 & 1) != 0)
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KeySharingInvitation parseInvitationFromData:]", 763, CFSTR("KSInvitationData: Looking for KeyConfig TLV"), v15, v16, v17, v18, v45);
      v25 = *(void **)(a1 + 16);
      v26 = (id *)*(id *)(a1 + 32);
      v27 = v25;
      v28 = sub_10022CD6C(v26);
      v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
      v30 = sub_10021DFC8((uint64_t)v27, v29);

      if (v30)
      {
        v31 = 1;
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KeySharingInvitation parseInvitationFromData:]", 769, CFSTR("KSInvitationData: Looking for Server cert chain TLV"), v15, v16, v17, v18, v45);
        v32 = *(void **)(a1 + 24);
        v33 = (id *)*(id *)(a1 + 32);
        v34 = v32;
        v35 = sub_10022CD6C(v33);
        v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
        v37 = sub_10021FA9C(v34, v36);

        if ((v37 & 1) == 0)
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KeySharingInvitation parseInvitationFromData:]", 771, CFSTR("KSInvitationData: No Cert chain TLV found"), v38, v39, v40, v41, v45);
        goto LABEL_20;
      }
      v42 = CFSTR("KSInvitationData: No KeyConfig TLV found");
      v43 = 765;
    }
    else
    {
      v42 = CFSTR("KSInvitationData: No Endpoint Config TLV found");
      v43 = 759;
    }
  }
  else
  {
    v42 = CFSTR("KSInvitationData: No invitation TLV found");
    v43 = 753;
  }
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KeySharingInvitation parseInvitationFromData:]", v43, v42, v15, v16, v17, v18, v45);
  v31 = 0;
LABEL_20:

  return v31;
}

id sub_100220ED4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  _WORD *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  _WORD *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  _WORD *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  _WORD *v25;
  uint64_t v26;
  void *v27;
  id v28;

  v8 = a3;
  v9 = a4;
  if (a1)
  {
    objc_msgSend((id)a1, "setEndpoint:", a2);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "endpoint"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "certificates"));

    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectAtIndexedSubscript:", 0));
    v13 = sub_10022CB3C((uint64_t)KmlTlv, 32544, v12);
    v14 = objc_claimAutoreleasedReturnValue(v13);
    v15 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v14;

    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectAtIndexedSubscript:", 1));
    v17 = sub_10022CB3C((uint64_t)KmlTlv, 32546, v16);
    v18 = objc_claimAutoreleasedReturnValue(v17);
    v19 = *(void **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v18;

    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectAtIndexedSubscript:", 2));
    v21 = sub_10022CB3C((uint64_t)KmlTlv, 32548, v20);
    v22 = objc_claimAutoreleasedReturnValue(v21);
    v23 = *(void **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v22;

    objc_storeStrong((id *)(a1 + 32), a3);
    if (v9)
    {
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "dataUsingEncoding:", 4));
      v25 = sub_10022CB3C((uint64_t)KmlTlv, 24383, v24);
      v26 = objc_claimAutoreleasedReturnValue(v25);
      v27 = *(void **)(a1 + 48);
      *(_QWORD *)(a1 + 48) = v26;

    }
    v28 = sub_100221078(a1);
    a1 = objc_claimAutoreleasedReturnValue(v28);

  }
  return (id)a1;
}

id sub_100221078(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  _WORD *v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  void *v18;
  id v19;
  void *v20;
  uint64_t v21;
  id v22;
  void *v23;
  _WORD *v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v29;

  v1 = a1;
  if (a1)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData data](NSMutableData, "data"));
    v3 = sub_10022D014(*(_QWORD *)(v1 + 8));
    v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    objc_msgSend(v2, "appendData:", v4);

    v5 = sub_10022D014(*(_QWORD *)(v1 + 16));
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    objc_msgSend(v2, "appendData:", v6);

    v7 = sub_10022D014(*(_QWORD *)(v1 + 24));
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    objc_msgSend(v2, "appendData:", v8);

    objc_msgSend(v2, "appendData:", *(_QWORD *)(v1 + 32));
    v9 = sub_10022CB3C((uint64_t)KmlTlv, 32592, *(void **)(v1 + 32));
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    v11 = sub_10022D014((uint64_t)v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    objc_msgSend(v2, "appendData:", v12);

    if (objc_msgSend(*(id *)(v1 + 56), "agreedKmlSharingVersion") == 768)
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KeySigningRequest getSigningRequestTLVAsData]", 918, CFSTR("Add SharingInAChain version TLV"), v13, v14, v15, v16, v29);
      v17 = sub_1002199E8(*(unsigned __int16 **)(v1 + 56));
      v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
      v19 = sub_10022D014((uint64_t)v18);
      v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
      objc_msgSend(v2, "appendData:", v20);

    }
    v21 = *(_QWORD *)(v1 + 48);
    if (v21)
    {
      v22 = sub_10022D014(v21);
      v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
      objc_msgSend(v2, "appendData:", v23);

    }
    v24 = sub_10022CB3C((uint64_t)KmlTlv, 32566, v2);
    v25 = objc_claimAutoreleasedReturnValue(v24);
    v26 = *(void **)(v1 + 40);
    *(_QWORD *)(v1 + 40) = v25;

    v27 = sub_10022D014(*(_QWORD *)(v1 + 40));
    v1 = objc_claimAutoreleasedReturnValue(v27);

  }
  return (id)v1;
}

uint64_t sub_10022121C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  void *i;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id *v21;
  void *v22;
  id v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  id v67;
  id *v68;
  id v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  _BYTE v82[128];
  _BYTE v83[128];

  if (!a1)
    return 0;
  v3 = sub_10022C7A4((uint64_t)KmlTlv, a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KeySigningRequest parseRequestFromData:]", 853, CFSTR("KeySigningData: Looking for signing request TLV"), v5, v6, v7, v8, v71);
  v80 = 0u;
  v81 = 0u;
  v78 = 0u;
  v79 = 0u;
  v9 = v4;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v78, v83, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v79;
    do
    {
      for (i = 0; i != v11; i = (char *)i + 1)
      {
        if (*(_QWORD *)v79 != v12)
          objc_enumerationMutation(v9);
        v14 = *(void **)(*((_QWORD *)&v78 + 1) + 8 * (_QWORD)i);
        if (sub_100055868((uint64_t)v14) == 32566)
          objc_storeStrong((id *)(a1 + 40), v14);
      }
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v78, v83, 16);
    }
    while (v11);
  }

  v19 = *(_QWORD *)(a1 + 40);
  v20 = v19 != 0;
  if (v19)
  {
    HIDWORD(v72) = 1;
    v21 = sub_10022CD6C(*(id **)(a1 + 40));
    v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
    v23 = sub_10022C7A4((uint64_t)KmlTlv, v22);
    v24 = (void *)objc_claimAutoreleasedReturnValue(v23);

    v76 = 0u;
    v77 = 0u;
    v74 = 0u;
    v75 = 0u;
    v25 = v24;
    v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v74, v82, 16);
    if (!v26)
      goto LABEL_37;
    v27 = v26;
    v28 = *(_QWORD *)v75;
    while (1)
    {
      v29 = 0;
      do
      {
        if (*(_QWORD *)v75 != v28)
          objc_enumerationMutation(v25);
        v30 = *(void **)(*((_QWORD *)&v74 + 1) + 8 * (_QWORD)v29);
        if (sub_100055868((uint64_t)v30) == 32544)
        {
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KeySigningRequest parseRequestFromData:]", 868, CFSTR("KeySigningData: Found Ext. CA Cert TLV"), v31, v32, v33, v34, v72);
          v35 = v30;
          v36 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v35;
        }
        else if (sub_100055868((uint64_t)v30) == 32546)
        {
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KeySigningRequest parseRequestFromData:]", 871, CFSTR("KeySigningData: Found Instance CA Cert TLV"), v37, v38, v39, v40, v72);
          v41 = v30;
          v36 = *(void **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v41;
        }
        else if (sub_100055868((uint64_t)v30) == 32548)
        {
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KeySigningRequest parseRequestFromData:]", 874, CFSTR("KeySigningData: Found Endpoint Cert TLV"), v42, v43, v44, v45, v72);
          v46 = v30;
          v36 = *(void **)(a1 + 24);
          *(_QWORD *)(a1 + 24) = v46;
        }
        else
        {
          if (sub_100055868((uint64_t)v30) == 32550)
          {
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KeySigningRequest parseRequestFromData:]", 877, CFSTR("KeySigningData: Found Endpoint Encryption Key Attestation Data"), v47, v48, v49, v50, v72);
            v51 = sub_10022D014((uint64_t)v30);
            v52 = objc_claimAutoreleasedReturnValue(v51);
LABEL_25:
            v36 = *(void **)(a1 + 32);
            *(_QWORD *)(a1 + 32) = v52;
            goto LABEL_32;
          }
          if (sub_100055868((uint64_t)v30) == 32592 && !*(_QWORD *)(a1 + 32))
          {
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KeySigningRequest parseRequestFromData:]", 880, CFSTR("KeySigningData: Getting Encryption Key Attestation data from Custom TLV"), v53, v54, v55, v56, v72);
            v68 = sub_10022CD6C((id *)v30);
            v52 = objc_claimAutoreleasedReturnValue(v68);
            goto LABEL_25;
          }
          if (sub_100055868((uint64_t)v30) == 24383)
          {
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KeySigningRequest parseRequestFromData:]", 883, CFSTR("KeySigningData: Found Passcode TLV"), v57, v58, v59, v60, v72);
            v61 = v30;
            v36 = *(void **)(a1 + 48);
            *(_QWORD *)(a1 + 48) = v61;
          }
          else
          {
            if (sub_100055868((uint64_t)v30) != 85)
              goto LABEL_33;
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KeySigningRequest parseRequestFromData:]", 886, CFSTR("Found Recipient Framework version TLV"), v62, v63, v64, v65, v72);
            v73 = *(_QWORD *)(a1 + 56);
            v66 = sub_10022D014((uint64_t)v30);
            v36 = (void *)objc_claimAutoreleasedReturnValue(v66);
            v67 = sub_100219298(v73, v36);
          }
        }
LABEL_32:

LABEL_33:
        v29 = (char *)v29 + 1;
      }
      while (v27 != v29);
      v69 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v74, v82, 16);
      v27 = v69;
      if (!v69)
      {
LABEL_37:

        v20 = HIDWORD(v72);
        goto LABEL_39;
      }
    }
  }
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KeySigningRequest parseRequestFromData:]", 861, CFSTR("KeySigningData: No signing request TLV found"), v15, v16, v17, v18, v72);
LABEL_39:

  return v20;
}

id sub_100221640(void *a1, void *a2)
{
  uint64_t v2;
  void *v3;
  _WORD *v4;
  uint64_t v5;
  void *v6;
  id v7;

  if (a1)
  {
    v2 = (uint64_t)a1;
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "dataUsingEncoding:", 4));
    v4 = sub_10022CB3C((uint64_t)KmlTlv, 24383, v3);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    v6 = *(void **)(v2 + 48);
    *(_QWORD *)(v2 + 48) = v5;

    v7 = sub_100221078(v2);
    a1 = (void *)objc_claimAutoreleasedReturnValue(v7);
  }
  return a1;
}

id sub_100221740(uint64_t a1, uint64_t a2, void *a3, void *a4, int a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  void *v40;
  id v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  id v50;
  id v51;
  int v52;
  id v53;
  void *v54;
  _WORD *v55;
  uint64_t v56;
  void *v57;
  id v58;
  void *v59;
  void *v60;
  void *v61;
  _WORD *v62;
  uint64_t v63;
  void *v64;
  id v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id MockInstanceCAData;
  void *v72;
  _WORD *v73;
  uint64_t v74;
  void *v75;
  id v76;
  uint64_t v78;

  v11 = a3;
  v12 = a4;
  v13 = a6;
  if (a1)
  {
    objc_msgSend((id)a1, "setEpAuthResponse:", a2);
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "epAuthResponse"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "endPointAttestationData"));
    v16 = kmlUtilHexStringFromData(v15);
    v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingSignedResponse createdSignedResponseWithEndpointAuthResponse:mailboxMappingData:supportedRadiosData:mockRefreshInstanceCA:additionalAttestationPackages:]", 946, CFSTR("SignedData: Auth Response Object - Attestation = %@"), v18, v19, v20, v21, (uint64_t)v17);

    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "epAuthResponse"));
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "encryptedData"));
    v24 = kmlUtilHexStringFromData(v23);
    v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingSignedResponse createdSignedResponseWithEndpointAuthResponse:mailboxMappingData:supportedRadiosData:mockRefreshInstanceCA:additionalAttestationPackages:]", 947, CFSTR("SignedData: Auth Response Object - encryptedData = %@"), v26, v27, v28, v29, (uint64_t)v25);

    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "epAuthResponse"));
    v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "encryptionPublicKeyData"));
    v32 = kmlUtilHexStringFromData(v31);
    v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingSignedResponse createdSignedResponseWithEndpointAuthResponse:mailboxMappingData:supportedRadiosData:mockRefreshInstanceCA:additionalAttestationPackages:]", 948, CFSTR("SignedData: Auth Response Object - encryptionPublicKey = %@"), v34, v35, v36, v37, (uint64_t)v33);

    v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData data](NSMutableData, "data"));
    v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "epAuthResponse"));
    v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v39, "endPointAttestationData"));
    v41 = sub_100221B10(a1, v40);
    v42 = (void *)objc_claimAutoreleasedReturnValue(v41);

    objc_msgSend(v38, "appendData:", v42);
    if (objc_msgSend(v13, "length") && objc_msgSend(*(id *)(a1 + 80), "agreedKmlSharingVersion") == 768)
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingSignedResponse createdSignedResponseWithEndpointAuthResponse:mailboxMappingData:supportedRadiosData:mockRefreshInstanceCA:additionalAttestationPackages:]", 960, CFSTR("Add additional attestation packages"), v43, v44, v45, v46, v78);
      objc_msgSend(v38, "appendData:", v13);
    }
    objc_msgSend(v38, "appendData:", v11);
    v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "epAuthResponse"));
    v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "encryptedData"));

    if (v48)
    {
      v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "epAuthResponse"));
      v50 = v13;
      v51 = v12;
      v52 = a5;
      v53 = v11;
      v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v49, "encryptedData"));
      v55 = sub_10022CB3C((uint64_t)KmlTlv, 74, v54);
      v56 = objc_claimAutoreleasedReturnValue(v55);
      v57 = *(void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v56;

      v58 = sub_10022D014(*(_QWORD *)(a1 + 16));
      v59 = (void *)objc_claimAutoreleasedReturnValue(v58);
      objc_msgSend(v38, "appendData:", v59);

      v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "epAuthResponse"));
      v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v60, "encryptionPublicKeyData"));
      v62 = sub_10022CB3C((uint64_t)KmlTlv, 151, v61);
      v63 = objc_claimAutoreleasedReturnValue(v62);
      v64 = *(void **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v63;

      v11 = v53;
      a5 = v52;
      v12 = v51;
      v13 = v50;

      v65 = sub_10022D014(*(_QWORD *)(a1 + 24));
      v66 = (void *)objc_claimAutoreleasedReturnValue(v65);
      objc_msgSend(v38, "appendData:", v66);

    }
    objc_msgSend(v38, "appendData:", v12);
    if (a5)
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingSignedResponse createdSignedResponseWithEndpointAuthResponse:mailboxMappingData:supportedRadiosData:mockRefreshInstanceCA:additionalAttestationPackages:]", 979, CFSTR("Adding mock refrehs instance CA"), v67, v68, v69, v70, v78);
      MockInstanceCAData = kmlUtilGetMockInstanceCAData();
      v72 = (void *)objc_claimAutoreleasedReturnValue(MockInstanceCAData);
      objc_msgSend(v38, "appendData:", v72);

    }
    v73 = sub_10022CB3C((uint64_t)KmlTlv, 32562, v38);
    v74 = objc_claimAutoreleasedReturnValue(v73);
    v75 = *(void **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v74;

    v76 = sub_10022D014(*(_QWORD *)(a1 + 40));
    a1 = objc_claimAutoreleasedReturnValue(v76);

  }
  return (id)a1;
}

id sub_100221B10(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  void *i;
  void *v14;
  int v15;
  id *v16;
  int v17;
  id *v18;
  id *v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  void *j;
  id v30;
  void *v31;
  _WORD *v32;
  void *v33;
  id v34;
  id v35;
  void *v36;
  id v37;
  void *v38;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _BYTE v48[128];
  _BYTE v49[128];

  v3 = a2;
  if (a1)
  {
    v4 = sub_10022C7A4((uint64_t)KmlTlv, v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    v44 = 0u;
    v45 = 0u;
    v46 = 0u;
    v47 = 0u;
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v44, v49, 16);
    if (v6)
    {
      v11 = v6;
      v12 = *(_QWORD *)v45;
      do
      {
        for (i = 0; i != v11; i = (char *)i + 1)
        {
          if (*(_QWORD *)v45 != v12)
            objc_enumerationMutation(v5);
          v14 = *(void **)(*((_QWORD *)&v44 + 1) + 8 * (_QWORD)i);
          v15 = sub_100055868((uint64_t)v14);
          v16 = (id *)(a1 + 8);
          if (v15 != 32549)
          {
            v17 = sub_100055868((uint64_t)v14);
            v16 = (id *)(a1 + 48);
            if (v17 != 158)
              continue;
          }
          objc_storeStrong(v16, v14);
        }
        v11 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v44, v49, 16);
      }
      while (v11);
    }
    v18 = *(id **)(a1 + 8);
    if (v18 && *(_QWORD *)(a1 + 48))
    {
      v19 = sub_10022CD6C(v18);
      v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
      v21 = sub_10022C7A4((uint64_t)KmlTlv, v20);
      v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
      v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithArray:](NSMutableArray, "arrayWithArray:", v22));

      objc_msgSend(v23, "addObject:", *(_QWORD *)(a1 + 48));
      v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData data](NSMutableData, "data"));
      v40 = 0u;
      v41 = 0u;
      v42 = 0u;
      v43 = 0u;
      v25 = v23;
      v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v40, v48, 16);
      if (v26)
      {
        v27 = v26;
        v28 = *(_QWORD *)v41;
        do
        {
          for (j = 0; j != v27; j = (char *)j + 1)
          {
            if (*(_QWORD *)v41 != v28)
              objc_enumerationMutation(v25);
            v30 = sub_10022D014(*(_QWORD *)(*((_QWORD *)&v40 + 1) + 8 * (_QWORD)j));
            v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
            objc_msgSend(v24, "appendData:", v31, (_QWORD)v40);

          }
          v27 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v40, v48, 16);
        }
        while (v27);
      }

      v32 = sub_10022CB3C((uint64_t)KmlTlv, 32549, v24);
      v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
      v34 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableData data](NSMutableData, "data"));
      v35 = sub_10022D014((uint64_t)v33);
      v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
      objc_msgSend(v34, "appendData:", v36);

      v37 = sub_10022D014(*(_QWORD *)(a1 + 48));
      v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
      objc_msgSend(v34, "appendData:", v38);

    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingSignedResponse getBackwardsCompatibleAttestationDataFrom:]", 1094, CFSTR("Attestation Data incomplete"), v7, v8, v9, v10, v40);
      v34 = v3;
    }

  }
  else
  {
    v34 = 0;
  }

  return v34;
}

uint64_t sub_100221E30(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  void *i;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id *v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  void *v27;
  id *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id *v67;
  _WORD *v68;
  void *v69;
  id v70;
  uint64_t v71;
  void *v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  id *v78;
  NSNumber *v79;
  void *v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v89;
  uint64_t v90;
  id v91;
  void *v92;
  void *v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  _BYTE v103[128];
  _BYTE v104[128];

  if (!a1)
    return 0;
  v3 = sub_10022C7A4((uint64_t)KmlTlv, a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingSignedResponse parseSignedResponseFromData:]", 991, CFSTR("Looking for signed response TLV"), v5, v6, v7, v8, v89);
  v101 = 0u;
  v102 = 0u;
  v99 = 0u;
  v100 = 0u;
  v9 = v4;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v99, v104, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v100;
    while (2)
    {
      for (i = 0; i != v11; i = (char *)i + 1)
      {
        if (*(_QWORD *)v100 != v12)
          objc_enumerationMutation(v9);
        v14 = *(void **)(*((_QWORD *)&v99 + 1) + 8 * (_QWORD)i);
        if (sub_100055868((uint64_t)v14) == 32562)
        {
          objc_storeStrong((id *)(a1 + 40), v14);
          goto LABEL_12;
        }
      }
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v99, v104, 16);
      if (v11)
        continue;
      break;
    }
  }
LABEL_12:

  if (!*(_QWORD *)(a1 + 40))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingSignedResponse parseSignedResponseFromData:]", 1000, CFSTR("No signed response TLV found"), v15, v16, v17, v18, v90);
    v87 = 0;
    goto LABEL_53;
  }
  v91 = v9;
  v19 = sub_10022CD6C(*(id **)(a1 + 40));
  v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
  v21 = sub_10022C7A4((uint64_t)KmlTlv, v20);
  v22 = (void *)objc_claimAutoreleasedReturnValue(v21);

  v92 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v95 = 0u;
  v96 = 0u;
  v97 = 0u;
  v98 = 0u;
  v23 = v22;
  v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v95, v103, 16);
  if (!v24)
    goto LABEL_44;
  v25 = v24;
  v26 = *(_QWORD *)v96;
  do
  {
    v27 = 0;
    do
    {
      if (*(_QWORD *)v96 != v26)
        objc_enumerationMutation(v23);
      v28 = *(id **)(*((_QWORD *)&v95 + 1) + 8 * (_QWORD)v27);
      if (sub_100055868((uint64_t)v28) == 32549)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingSignedResponse parseSignedResponseFromData:]", 1008, CFSTR("Found Key Attestation TLV"), v29, v30, v31, v32, v90);
        sub_1002223E4(a1, v28);
        goto LABEL_29;
      }
      if (sub_100055868((uint64_t)v28) == 74)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingSignedResponse parseSignedResponseFromData:]", 1011, CFSTR("Found encrypted confidential mailbox TLV"), v33, v34, v35, v36, v90);
        v37 = (id *)(a1 + 16);
LABEL_28:
        objc_storeStrong(v37, v28);
        goto LABEL_29;
      }
      if (sub_100055868((uint64_t)v28) == 151)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingSignedResponse parseSignedResponseFromData:]", 1014, CFSTR("Found Owner Encryption Key TLV"), v38, v39, v40, v41, v90);
        v37 = (id *)(a1 + 24);
        goto LABEL_28;
      }
      if (sub_100055868((uint64_t)v28) == 69)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingSignedResponse parseSignedResponseFromData:]", 1017, CFSTR("Found KTS receipt TLV"), v42, v43, v44, v45, v90);
        v37 = (id *)(a1 + 32);
        goto LABEL_28;
      }
      if (sub_100055868((uint64_t)v28) == 158)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingSignedResponse parseSignedResponseFromData:]", 1020, CFSTR("Found owner Signature TLV"), v46, v47, v48, v49, v90);
        v37 = (id *)(a1 + 48);
        goto LABEL_28;
      }
      if (sub_100055868((uint64_t)v28) == 32589)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingSignedResponse parseSignedResponseFromData:]", 1023, CFSTR("Found mailbox mapping TLV"), v50, v51, v52, v53, v90);
        v54 = sub_10022D014((uint64_t)v28);
        v55 = objc_claimAutoreleasedReturnValue(v54);
        v56 = *(void **)(a1 + 56);
        *(_QWORD *)(a1 + 56) = v55;
LABEL_42:

        goto LABEL_29;
      }
      if (sub_100055868((uint64_t)v28) == 32585)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingSignedResponse parseSignedResponseFromData:]", 1026, CFSTR("Found SupportedRadios TLV"), v57, v58, v59, v60, v90);
        v61 = sub_10022CD6C(v28);
        v62 = objc_claimAutoreleasedReturnValue(v61);
        v56 = *(void **)(a1 + 64);
        *(_QWORD *)(a1 + 64) = v62;
        goto LABEL_42;
      }
      if (sub_100055868((uint64_t)v28) == 32546)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingSignedResponse parseSignedResponseFromData:]", 1030, CFSTR("Found refreshed instance CA"), v63, v64, v65, v66, v90);
        v67 = sub_10022CD6C(v28);
        v93 = (void *)objc_claimAutoreleasedReturnValue(v67);
        v68 = sub_10022CB3C((uint64_t)KmlTlv, 32547, v93);
        v69 = (void *)objc_claimAutoreleasedReturnValue(v68);

        v70 = sub_10022D014((uint64_t)v69);
        v71 = objc_claimAutoreleasedReturnValue(v70);
        v72 = *(void **)(a1 + 72);
        *(_QWORD *)(a1 + 72) = v71;

        goto LABEL_29;
      }
      if (sub_100055868((uint64_t)v28) == 48
        || sub_100055868((uint64_t)v28) == 49
        || sub_100055868((uint64_t)v28) == 50
        || sub_100055868((uint64_t)v28) == 51)
      {
        v73 = sub_100055868((uint64_t)v28);
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingSignedResponse parseSignedResponseFromData:]", 1038, CFSTR("Found additional attestation TLV with Tag (%02X)"), v74, v75, v76, v77, v73);
        v78 = sub_10022CD6C(v28);
        v94 = objc_claimAutoreleasedReturnValue(v78);
        v79 = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", sub_100055868((uint64_t)v28));
        v80 = (void *)objc_claimAutoreleasedReturnValue(v79);
        objc_msgSend(v92, "setObject:forKeyedSubscript:", v94, v80);

        v56 = (void *)v94;
        goto LABEL_42;
      }
LABEL_29:
      v27 = (char *)v27 + 1;
    }
    while (v25 != v27);
    v81 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v95, v103, 16);
    v25 = v81;
  }
  while (v81);
LABEL_44:

  if (*(_QWORD *)(a1 + 8) && *(_QWORD *)(a1 + 48) && *(_QWORD *)(a1 + 56))
  {
    v86 = v92;
    v9 = v91;
    if (objc_msgSend(v92, "count"))
      objc_storeStrong((id *)(a1 + 88), v92);
    v87 = 1;
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingSignedResponse parseSignedResponseFromData:]", 1047, CFSTR("SignedResponse missing mandatory data"), v82, v83, v84, v85, v90);
    v87 = 0;
    v9 = v91;
    v86 = v92;
  }

LABEL_53:
  return v87;
}

void sub_1002223E4(uint64_t a1, id *a2)
{
  id *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  void *i;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  _WORD *v21;
  uint64_t v22;
  void *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];

  if (a1)
  {
    v3 = sub_10022CD6C(a2);
    v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    v5 = sub_10022C7A4((uint64_t)KmlTlv, v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData data](NSMutableData, "data"));
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v8 = v6;
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v25;
      do
      {
        for (i = 0; i != v10; i = (char *)i + 1)
        {
          if (*(_QWORD *)v25 != v11)
            objc_enumerationMutation(v8);
          v13 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * (_QWORD)i);
          if (sub_100055868((uint64_t)v13) == 158)
          {
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingSignedResponse parseKeyAttestationTLV:]", 1133, CFSTR("Found owner Signature TLV in KeyAttestationTlv"), v14, v15, v16, v17, v24);
            v18 = v13;
            v19 = *(void **)(a1 + 48);
            *(_QWORD *)(a1 + 48) = v18;
          }
          else
          {
            v20 = sub_10022D014((uint64_t)v13);
            v19 = (void *)objc_claimAutoreleasedReturnValue(v20);
            objc_msgSend(v7, "appendData:", v19);
          }

        }
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
      }
      while (v10);
    }

    v21 = sub_10022CB3C((uint64_t)KmlTlv, 32549, v7);
    v22 = objc_claimAutoreleasedReturnValue(v21);
    v23 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v22;

  }
}

uint64_t sub_1002225AC(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 56);
  return result;
}

uint64_t sub_1002225B8(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 64);
  return result;
}

uint64_t sub_1002225C4(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 72);
  return result;
}

void sub_1002225D0(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 80), a2);
}

uint64_t sub_1002225E0(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 88);
  return result;
}

void sub_1002226A8(uint64_t a1)
{
  objc_opt_self(a1);
  if (qword_100354898 != -1)
    dispatch_once(&qword_100354898, &stru_10030F040);
}

void sub_1002226E4(id a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t vars0;

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlOwnerPairingManager initOpManagerArray]_block_invoke", 87, CFSTR("OPManager: initializing opManagerArray"), v1, v2, v3, v4, vars0);
  v5 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v6 = (void *)qword_100354890;
  qword_100354890 = v5;

}

void sub_10022272C(uint64_t a1)
{
  void *v1;
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  objc_opt_self(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableIndexSet indexSet](NSMutableIndexSet, "indexSet"));
  v2 = (id)qword_100354890;
  objc_sync_enter(v2);
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v3 = (id)qword_100354890;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v4)
  {
    v5 = 0;
    v6 = *(_QWORD *)v10;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v10 != v6)
          objc_enumerationMutation(v3);
        v8 = *(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)v7);
        if (v8 && *(_QWORD *)(v8 + 208) == 52)
          objc_msgSend(v1, "addIndex:", (char *)v7 + v5, (_QWORD)v9);
        v7 = (char *)v7 + 1;
      }
      while (v4 != v7);
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      v5 += (uint64_t)v7;
    }
    while (v4);
  }

  objc_msgSend((id)qword_100354890, "removeObjectsAtIndexes:", v1);
  objc_sync_exit(v2);

}

void sub_10022288C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

KmlOwnerPairingManager *sub_1002228B4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  void *v10;
  id v11;
  unsigned int v12;
  id v13;
  KmlOwnerPairingManager *v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];

  v3 = a2;
  objc_opt_self(a1);
  sub_1002226A8((uint64_t)KmlOwnerPairingManager);
  sub_10022272C((uint64_t)KmlOwnerPairingManager);
  v4 = (id)qword_100354890;
  objc_sync_enter(v4);
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v5 = (id)qword_100354890;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v17;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v17 != v7)
          objc_enumerationMutation(v5);
        if (v3)
        {
          v9 = *(_QWORD **)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)v8);
          v10 = v9 ? (void *)v9[25] : 0;
          v11 = v10;
          v12 = objc_msgSend(v11, "isEqualToString:", v3, (_QWORD)v16);

          if (v12)
          {
            v14 = v9;

            goto LABEL_17;
          }
        }
        v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      v13 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
      v6 = v13;
    }
    while (v13);
  }

  if (v3)
  {
    v14 = 0;
  }
  else
  {
    v14 = objc_alloc_init(KmlOwnerPairingManager);
    if (v14)
      objc_msgSend((id)qword_100354890, "addObject:", v14);
  }
LABEL_17:
  objc_sync_exit(v4);

  return v14;
}

void sub_100222A68(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100222BD4(uint64_t a1, void *a2)
{
  NSObject *v3;
  id v4;
  _QWORD block[5];
  id v6;

  v4 = a2;
  if (a1)
  {
    dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 128));
    v3 = *(NSObject **)(a1 + 128);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100222C64;
    block[3] = &unk_100304370;
    block[4] = a1;
    v6 = v4;
    dispatch_sync(v3, block);

  }
}

void sub_100222C64(uint64_t a1)
{
  id *v2;
  uint64_t v3;
  void *v4;

  objc_storeWeak((id *)(*(_QWORD *)(a1 + 32) + 192), *(id *)(a1 + 40));
  v2 = sub_1002269F8((id *)[KmlSeManager alloc], *(void **)(a1 + 32));
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 16);
  *(_QWORD *)(v3 + 16) = v2;

}

uint64_t sub_100222CAC(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  _QWORD block[5];
  id v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;

  v3 = a2;
  if (a1)
  {
    dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 128));
    v9 = 0;
    v10 = &v9;
    v11 = 0x2020000000;
    v12 = 0;
    v4 = *(NSObject **)(a1 + 128);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100222D78;
    block[3] = &unk_10030EF28;
    block[4] = a1;
    v7 = v3;
    v8 = &v9;
    dispatch_sync(v4, block);
    a1 = *((_BYTE *)v10 + 24) != 0;

    _Block_object_dispose(&v9, 8);
  }

  return a1;
}

void sub_100222D78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  v9 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v9 + 208))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager preWarmForManufacturer:]_block_invoke", 201, CFSTR("Pre-warm called in wrong state"), a5, a6, a7, a8, a9);
  }
  else
  {
    objc_storeStrong((id *)(v9 + 80), *(id *)(a1 + 40));
    sub_100222DF4(*(_QWORD *)(a1 + 32), 1);
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 185) = 1;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
  }
}

void sub_100222DF4(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD v3[6];

  if (a1)
  {
    v2 = *(NSObject **)(a1 + 128);
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100223BF0;
    v3[3] = &unk_100304AD0;
    v3[4] = a1;
    v3[5] = a2;
    dispatch_async(v2, v3);
  }
}

BOOL sub_100222E50(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  NSObject *v12;
  _BOOL8 v13;
  _QWORD v15[5];
  id v16;
  id v17;
  id v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  char v24;

  v9 = a2;
  v10 = a3;
  v11 = a5;
  if (a1)
  {
    dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 128));
    v21 = 0;
    v22 = &v21;
    v23 = 0x2020000000;
    v24 = 0;
    v12 = *(NSObject **)(a1 + 128);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_100222F7C;
    v15[3] = &unk_10030F068;
    v15[4] = a1;
    v16 = v10;
    v17 = v9;
    v20 = a4;
    v18 = v11;
    v19 = &v21;
    dispatch_sync(v12, v15);
    v13 = *((_BYTE *)v22 + 24) != 0;

    _Block_object_dispose(&v21, 8);
  }
  else
  {
    v13 = 0;
  }

  return v13;
}

void sub_100222F7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  SESConfigDCK *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  uint64_t v26;
  void *v27;
  _QWORD *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;

  v9 = *(_QWORD *)(a1 + 32);
  if ((*(_QWORD *)(v9 + 208) | 2) == 2)
  {
    *(_BYTE *)(v9 + 185) = 0;
    v11 = kmlUtilSanitizeFriendlyName(*(void **)(a1 + 40));
    v12 = objc_claimAutoreleasedReturnValue(v11);
    v13 = *(_QWORD *)(a1 + 32);
    v14 = *(void **)(v13 + 56);
    *(_QWORD *)(v13 + 56) = v12;

    v15 = objc_opt_new(SESConfigDCK);
    v16 = *(_QWORD *)(a1 + 32);
    v17 = *(void **)(v16 + 176);
    *(_QWORD *)(v16 + 176) = v15;

    v18 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 176), "BOOLValueForSetting:manufacturer:brand:uuid:error:", 1, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80), 0, 0, 0));
    v48 = (id)v18;
    if (!v18
      || (KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager startOwnerPairingWithPassword:keyName:transport:bindingAttestation:]_block_invoke", 232, CFSTR("Found override for downgrade pairing version"), v21, v22, v23, v24, v45), objc_msgSend(v48, "BOOLValue")))
    {
      sub_100218584(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 152), v18, v19, v20, v21, v22, v23, v24, v45);
    }
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager startOwnerPairingWithPassword:keyName:transport:bindingAttestation:]_block_invoke", 240, CFSTR("KeyName : %@; Downgrade framework version : %@,\n versionInfo : %@"),
      v21,
      v22,
      v23,
      v24,
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56));
    v25 = sub_100214568((void **)[KmlDataExchangeManager alloc], *(void **)(a1 + 32), *(void **)(a1 + 48), *(void **)(a1 + 72), *(void **)(*(_QWORD *)(a1 + 32) + 152));
    v26 = *(_QWORD *)(a1 + 32);
    v27 = *(void **)(v26 + 8);
    *(_QWORD *)(v26 + 8) = v25;

    v28 = sub_100253E34([KmlBindingAttestation alloc], *(void **)(a1 + 56));
    v29 = sub_1002225B8((uint64_t)v28);
    v30 = (void *)objc_claimAutoreleasedReturnValue(v29);

    if (v30)
    {
      v35 = sub_1002225B8((uint64_t)v28);
      v36 = objc_claimAutoreleasedReturnValue(v35);
      v37 = *(_QWORD *)(a1 + 32);
      v38 = *(void **)(v37 + 88);
      *(_QWORD *)(v37 + 88) = v36;
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager startOwnerPairingWithPassword:keyName:transport:bindingAttestation:]_block_invoke", 253, CFSTR("We didn't get well formatted Binding Attestation."), v31, v32, v33, v34, v46);
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlOwnerPairingManager startOwnerPairingWithPassword:keyName:transport:bindingAttestation:]_block_invoke", 256, CFSTR("Workaround: Using data passed in as BA as anonymizedDsid"), v39, v40, v41, v42, v47);
      v43 = *(_QWORD *)(a1 + 32);
      v44 = *(id *)(a1 + 56);
      v38 = *(void **)(v43 + 88);
      *(_QWORD *)(v43 + 88) = v44;
    }

    sub_100222DF4(*(_QWORD *)(a1 + 32), 3);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;

  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager startOwnerPairingWithPassword:keyName:transport:bindingAttestation:]_block_invoke", 262, CFSTR("Pairing is already under progress"), a5, a6, a7, a8, a9);
  }
}

void sub_1002231B8(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[5];

  if (a1)
  {
    v1 = *(NSObject **)(a1 + 128);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100223214;
    block[3] = &unk_100302AA0;
    block[4] = a1;
    dispatch_async(v1, block);
  }
}

void sub_100223214(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(v9 + 208);
  if (v10 <= 21)
  {
    if (*(_BYTE *)(v9 + 184))
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager endOwnerPairingSession]_block_invoke", 274, CFSTR("probing cancel requested"), a5, a6, a7, a8, v12);
      sub_1002158D0(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
      return;
    }
    if (v10 == 2)
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager endOwnerPairingSession]_block_invoke", 278, CFSTR("PreWarm is done. We are not going to do pairing, so cancel it"), a5, a6, a7, a8, v12);
      v9 = *(_QWORD *)(a1 + 32);
    }
    v11 = 32;
    goto LABEL_13;
  }
  switch(v10)
  {
    case 42:
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager endOwnerPairingSession]_block_invoke", 291, CFSTR("probing session ends"), a5, a6, a7, a8, v12);
      v9 = *(_QWORD *)(a1 + 32);
      if (*(_BYTE *)(v9 + 137))
      {
        v11 = 52;
LABEL_13:
        sub_100222DF4(v9, v11);
        return;
      }
      *(_BYTE *)(v9 + 138) = 1;
      break;
    case 31:
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager endOwnerPairingSession]_block_invoke", 288, CFSTR("First post OP transaction cancel requested"), a5, a6, a7, a8, v12);
      sub_100215754(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
      break;
    case 23:
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager endOwnerPairingSession]_block_invoke", 283, CFSTR("OPManager: First transaction skip requested"), a5, a6, a7, a8, v12);
      *(_BYTE *)(*(_QWORD *)(a1 + 32) + 136) = 0;
      objc_storeWeak((id *)(*(_QWORD *)(a1 + 32) + 192), 0);
      sub_100215A44(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
      break;
  }
}

void sub_100223378(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  NSObject *v8;
  _QWORD block[4];
  id v10;
  uint64_t v11;
  id v12;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (a1)
  {
    v8 = *(NSObject **)(a1 + 128);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100223420;
    block[3] = &unk_100304490;
    v10 = v6;
    v11 = a1;
    v12 = v5;
    dispatch_async(v8, block);

  }
}

void sub_100223420(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id *v13;
  id *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  NSString *v19;
  void *v20;
  void *v21;
  id WeakRetained;
  uint64_t v23;
  NSErrorUserInfoKey v24;
  void *v25;

  KmlLogFunc2(OS_LOG_TYPE_DEBUG, (uint64_t)"-[KmlOwnerPairingManager saveTrackingReceipt:otherJSONData:]_block_invoke", 306, CFSTR("otherJsonData : %@"), a5, a6, a7, a8, *(_QWORD *)(a1 + 32));
  if (*(_QWORD *)(*(_QWORD *)(a1 + 40) + 208) == 23)
  {
    v13 = sub_100255B5C((id *)[KmlEndpointManager alloc], *(void **)(*(_QWORD *)(a1 + 40) + 200), *(void **)(*(_QWORD *)(a1 + 40) + 152));
    v14 = sub_1002562EC(v13, *(void **)(a1 + 48), *(void **)(a1 + 32));
    v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    v16 = *(_QWORD *)(a1 + 40);
    v17 = sub_10021728C((uint64_t)v13);
    v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
    sub_1002235F0(v16, v15, v18);

  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager saveTrackingReceipt:otherJSONData:]_block_invoke", 313, CFSTR("OPManager: Received tracking receipt when we don't expect. Ignore it."), v9, v10, v11, v12, v23);
    v13 = (id *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
    v24 = NSLocalizedDescriptionKey;
    v19 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(214));
    v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
    v25 = v20;
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v25, &v24, 1));
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v13, 214, v21));

  }
  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 40) + 192));
  objc_msgSend(WeakRetained, "handleKmlOwnerPairingTrackingReceiptSaveResult:", v15);

}

void sub_1002235F0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  _QWORD block[5];
  id v9;
  id v10;

  v5 = a2;
  v6 = a3;
  if (a1)
  {
    v7 = *(NSObject **)(a1 + 128);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002239FC;
    block[3] = &unk_100304490;
    block[4] = a1;
    v9 = v5;
    v10 = v6;
    dispatch_async(v7, block);

  }
}

uint64_t sub_10022369C(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;

  v1 = a1;
  if (a1)
  {
    dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 128));
    v5 = 0;
    v6 = &v5;
    v7 = 0x2020000000;
    v8 = 0;
    v2 = *(NSObject **)(v1 + 128);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_100223740;
    v4[3] = &unk_1003044E0;
    v4[4] = v1;
    v4[5] = &v5;
    dispatch_sync(v2, v4);
    v1 = *((_BYTE *)v6 + 24) != 0;
    _Block_object_dispose(&v5, 8);
  }
  return v1;
}

void sub_100223740(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager startProbing]_block_invoke", 326, CFSTR("OPManager: start Probing."), a5, a6, a7, a8, v26);
  v14 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v14 + 208))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager startProbing]_block_invoke", 342, CFSTR("Probing called in wrong state"), v10, v11, v12, v13, a9);
  }
  else
  {
    v15 = *(void **)(v14 + 56);
    *(_QWORD *)(v14 + 56) = 0;

    sub_100218584(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 152), v16, v17, v18, v19, v20, v21, v22, v27);
    v23 = sub_100214568((void **)[KmlDataExchangeManager alloc], *(void **)(a1 + 32), 0, (void *)1, *(void **)(*(_QWORD *)(a1 + 32) + 152));
    v24 = *(_QWORD *)(a1 + 32);
    v25 = *(void **)(v24 + 8);
    *(_QWORD *)(v24 + 8) = v23;

    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 184) = 1;
    sub_100222DF4(*(_QWORD *)(a1 + 32), 11);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  }
}

void sub_100223814(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[5];

  if (a1)
  {
    v1 = *(NSObject **)(a1 + 128);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100223870;
    block[3] = &unk_100302AA0;
    block[4] = a1;
    dispatch_async(v1, block);
  }
}

void sub_100223870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;
  NSString *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  NSErrorUserInfoKey v18;
  void *v19;

  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 208) == 23)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager endpointRevoked]_block_invoke", 353, CFSTR("Endpoint revoked while we were waiting for tracking receipt."), a5, a6, a7, a8, v17);
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
    v18 = NSLocalizedDescriptionKey;
    v11 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(27));
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    v19 = v12;
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v19, &v18, 1));
    v14 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v10, 27, v13));
    v15 = *(_QWORD *)(a1 + 32);
    v16 = *(void **)(v15 + 120);
    *(_QWORD *)(v15 + 120) = v14;

    sub_100222DF4(*(_QWORD *)(a1 + 32), 51);
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager endpointRevoked]_block_invoke", 357, CFSTR("Endpoint revoked but we are not in a state to take an action."), a5, a6, a7, a8, a9);
  }
}

void sub_1002239FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[12];

  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 208) == 23)
  {
    v10 = KmlSignpostLogger();
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_signpost_enabled(v11))
    {
      v12 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)v25 = 138412290;
      *(_QWORD *)&v25[4] = v12;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "OpTrackingReceiptSaved", "result = %@", v25, 0xCu);
    }

    if (*(_QWORD *)(a1 + 40))
    {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlOwnerPairingManager trackingReceiptSaveResult:ppidData:]_block_invoke", 370, CFSTR("Failed to save key tracking receipt / immoToken / slotId"), v13, v14, v15, v16, *(uint64_t *)v25);
      v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
      v18 = objc_msgSend(*(id *)(a1 + 40), "code");
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "userInfo"));
      v20 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v17, v18, v19));
      v21 = *(_QWORD *)(a1 + 32);
      v22 = *(void **)(v21 + 120);
      *(_QWORD *)(v21 + 120) = v20;

      v23 = *(_QWORD *)(a1 + 32);
      v24 = 52;
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager trackingReceiptSaveResult:ppidData:]_block_invoke", 374, CFSTR("Saved key tracking receipt"), v13, v14, v15, v16, *(uint64_t *)v25);
      sub_10022E204(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 144), *(void **)(a1 + 48));
      v23 = *(_QWORD *)(a1 + 32);
      v24 = 31;
    }
    sub_100222DF4(v23, v24);
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager trackingReceiptSaveResult:ppidData:]_block_invoke", 381, CFSTR("We are not in a state to handle tracking receipt saved notification"), a5, a6, a7, a8, a9);
  }
}

void sub_100223BF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = a1 + 32;
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(v11 + 8);
  if (v10 <= *(_QWORD *)(v9 + 208))
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState:]_block_invoke", 391, CFSTR("OPManager: Current state higher than new state. Do nothing"), a5, a6, a7, a8, a9);
  else
    sub_100223C20(v9, v10, a3, a4, a5, a6, a7, a8, a9);
}

void sub_100223C20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __CFString *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  id v28;
  void *v29;
  void *v30;
  id v31;
  NSObject *v32;
  void *v33;
  uint64_t v34;
  unsigned __int8 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  id v42;
  void *v43;
  id v44;
  NSObject *v45;
  dispatch_time_t v46;
  NSObject *v47;
  id v48;
  NSObject *v49;
  id v50;
  uint64_t v51;
  void *v52;
  KmlDeviceConfigurationData *v53;
  id *v54;
  void *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  void *v59;
  void *v60;
  uint64_t v61;
  void *v62;
  void *v63;
  void *v64;
  uint64_t v65;
  void *v66;
  void *v67;
  unsigned __int8 v68;
  void *v69;
  uint64_t v70;
  void *v71;
  void *v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  unsigned __int8 v86;
  void *v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  id v93;
  id v94;
  unsigned int v95;
  id v96;
  NSObject *v97;
  id v98;
  NSObject *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  unsigned int v105;
  dispatch_queue_t *v106;
  uint64_t v107;
  void *v108;
  void *v109;
  uint64_t v110;
  void *v111;
  id v112;
  NSObject *v113;
  id v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  id v120;
  NSObject *v121;
  void *v122;
  NSString *v123;
  void *v124;
  void *v125;
  uint64_t v126;
  id *v127;
  void *v128;
  unsigned int v129;
  void *v130;
  unsigned __int8 v131;
  id v132;
  NSObject *v133;
  void *v134;
  NSString *v135;
  void *v136;
  void *v137;
  uint64_t v138;
  void *v139;
  void *v140;
  void *v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  id v147;
  id v148;
  unsigned int v149;
  void *v150;
  NSString *v151;
  void *v152;
  void *v153;
  void *v154;
  void *v155;
  id v156;
  void *v157;
  uint64_t v158;
  void *v159;
  id *v160;
  uint64_t v161;
  void *v162;
  uint64_t v163;
  void *v164;
  uint64_t v165;
  void *v166;
  char v167;
  uint64_t v168;
  id v169;
  NSObject *v170;
  const char *v171;
  id v172;
  id v173;
  void *v174;
  NSString *v175;
  void *v176;
  void *v177;
  id WeakRetained;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  id v186;
  _QWORD block[5];
  id v188;
  uint8_t buf[4];
  uint64_t v190;
  NSErrorUserInfoKey v191;
  void *v192;
  NSErrorUserInfoKey v193;
  void *v194;
  NSErrorUserInfoKey v195;
  void *v196;
  NSErrorUserInfoKey v197;
  void *v198;

  if (!a1)
    return;
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]", 401, CFSTR("OPManager: Current state %ld, new state %ld"), a5, a6, a7, a8, *(_QWORD *)(a1 + 208));
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = a2;
  if (a2 <= 30)
  {
    switch(a2)
    {
      case 0:
        v15 = CFSTR("OPManager: Nothing to do here.");
        v16 = 407;
        goto LABEL_25;
      case 1:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]", 411, CFSTR("Ask SE to Pre-Warm."), v11, v12, v13, v14, v183);
        v31 = KmlSignpostLogger();
        v32 = objc_claimAutoreleasedReturnValue(v31);
        if (os_signpost_enabled(v32))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v32, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "OpPreWarm", "start", buf, 2u);
        }

        sub_100226AE0(*(_QWORD *)(a1 + 16), *(void **)(a1 + 80));
        return;
      case 2:
        v15 = CFSTR("Done with Pre-Warm. Waiting for request to start pairing");
        v16 = 417;
LABEL_25:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]", v16, v15, v11, v12, v13, v14, a9);
        return;
      case 3:
        *(_QWORD *)(a1 + 160) = sub_10025486C((uint64_t)KmlEndpointManager, CFSTR("OWNR"));
        v33 = *(void **)(a1 + 176);
        v34 = *(_QWORD *)(a1 + 80);
        v188 = 0;
        v35 = objc_msgSend(v33, "isDCKConfigurationAvailableFor:error:", v34, &v188);
        v40 = v188;
        v41 = *(_QWORD *)(a1 + 80);
        if ((v35 & 1) == 0 && v41)
        {
          KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]", 435, CFSTR("Paired is not supported for %@, error : %@"), v36, v37, v38, v39, *(_QWORD *)(a1 + 80));
          if (v40)
          {
            v42 = sesErrorToKmlError(v40, 0x21u);
            v43 = (void *)objc_claimAutoreleasedReturnValue(v42);
          }
          else
          {
            v134 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
            v197 = NSLocalizedDescriptionKey;
            v135 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(33));
            v136 = (void *)objc_claimAutoreleasedReturnValue(v135);
            v198 = v136;
            v137 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v198, &v197, 1));
            v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v134, 33, v137));

          }
LABEL_104:
          WeakRetained = objc_loadWeakRetained((id *)(a1 + 192));
          objc_msgSend(WeakRetained, "handleKmlOwnerPairingStartResult:", v43);

          if (v43)
          {
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]", 472, CFSTR("client should call endPairingSession to cancel and clean out"), v179, v180, v181, v182, v183);
          }
          else
          {
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]", 474, CFSTR("pre-conditions satisfied."), v179, v180, v181, v182, v183);
            sub_100222DF4(a1, 11);
          }

          return;
        }
        v128 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 176), "BOOLValueForSetting:manufacturer:brand:uuid:error:", 0, v41, 0, 0, 0));
        v129 = objc_msgSend(v128, "BOOLValue");

        v43 = 0;
        if (!v129)
          goto LABEL_104;
        v130 = (void *)objc_claimAutoreleasedReturnValue(+[NISession deviceCapabilities](NISession, "deviceCapabilities"));
        v131 = objc_msgSend(v130, "supportsPreciseDistanceMeasurement");

        if ((v131 & 1) != 0)
        {
          v43 = 0;
          goto LABEL_104;
        }
        v141 = (void *)objc_claimAutoreleasedReturnValue(+[NRPairedDeviceRegistry sharedInstance](NRPairedDeviceRegistry, "sharedInstance"));
        v142 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v141, "getActivePairedDevice"));

        if (!v142)
          goto LABEL_102;
        v147 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", CFSTR("C4F6386A-780D-40E5-9900-0A26C16273A1"));
        if ((objc_msgSend(v142, "supportsCapability:", v147) & 1) != 0)
        {
          v148 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", CFSTR("81D292E4-16D8-4630-82ED-BDF62B05E334"));
          v149 = objc_msgSend(v142, "supportsCapability:", v148);

          if (v149)
          {
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]", 460, CFSTR("Allowing NFC only phone to have owner key since there is a paired UWB-capable watch"), v143, v144, v145, v146, v183);
            v43 = 0;
LABEL_103:

            goto LABEL_104;
          }
        }
        else
        {

        }
LABEL_102:
        KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]", 463, CFSTR("NFC-only devices are blocked for (%@)"), v143, v144, v145, v146, *(_QWORD *)(a1 + 80));
        v174 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
        v195 = NSLocalizedDescriptionKey;
        v175 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(218));
        v176 = (void *)objc_claimAutoreleasedReturnValue(v175);
        v196 = v176;
        v177 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v196, &v195, 1));
        v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v174, 218, v177));

        goto LABEL_103;
      case 11:
        if (*(_BYTE *)(a1 + 184))
        {
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]", 482, CFSTR("OPManager: Ask DX Manager to start probing process."), v11, v12, v13, v14, v183);
          v44 = KmlSignpostLogger();
          v45 = objc_claimAutoreleasedReturnValue(v44);
          if (os_signpost_enabled(v45))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v45, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "OpProbing", "start", buf, 2u);
          }

          sub_1002157E4(*(_QWORD *)(a1 + 8));
          v46 = dispatch_time(0, 5000000000);
          v47 = *(NSObject **)(a1 + 128);
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_100224FB8;
          block[3] = &unk_100302AA0;
          block[4] = a1;
          dispatch_after(v46, v47, block);
        }
        else
        {
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]", 499, CFSTR("OPManager: Ask DX Manager to start pairing process."), v11, v12, v13, v14, v183);
          v132 = KmlSignpostLogger();
          v133 = objc_claimAutoreleasedReturnValue(v132);
          if (os_signpost_enabled(v133))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v133, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "OpCarConfigRx", "start", buf, 2u);
          }

          sub_100214EA8(*(_QWORD *)(a1 + 8));
        }
        return;
      case 12:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]", 506, CFSTR("OPManager: Ask SE to create keys."), v11, v12, v13, v14, v183);
        v48 = KmlSignpostLogger();
        v49 = objc_claimAutoreleasedReturnValue(v48);
        if (os_signpost_enabled(v49))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v49, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "OpKeyCreate", "start", buf, 2u);
        }

        v50 = sub_100215474(*(void **)(a1 + 8));
        v51 = objc_claimAutoreleasedReturnValue(v50);
        v52 = *(void **)(a1 + 24);
        *(_QWORD *)(a1 + 24) = v51;

        v53 = [KmlDeviceConfigurationData alloc];
        v54 = sub_100253680(*(id **)(a1 + 24));
        v55 = (void *)objc_claimAutoreleasedReturnValue(v54);
        v56 = sub_10022D114((uint64_t)v53, v55);
        v57 = *(void **)(a1 + 144);
        *(_QWORD *)(a1 + 144) = v56;

        v58 = sub_10021728C(*(_QWORD *)(a1 + 24));
        v59 = (void *)objc_claimAutoreleasedReturnValue(v58);
        v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v59, "manufacturer"));

        v61 = sub_10021728C(*(_QWORD *)(a1 + 24));
        v62 = (void *)objc_claimAutoreleasedReturnValue(v61);
        v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v62, "brand"));

        v64 = *(void **)(a1 + 176);
        v65 = sub_10021728C(*(_QWORD *)(a1 + 144));
        v66 = (void *)objc_claimAutoreleasedReturnValue(v65);
        v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v64, "BOOLValueForSetting:manufacturer:brand:uuid:error:", 7, v60, v63, v66, 0));
        v68 = objc_msgSend(v67, "BOOLValue");

        v69 = *(void **)(a1 + 176);
        v70 = sub_10021728C(*(_QWORD *)(a1 + 144));
        v71 = (void *)objc_claimAutoreleasedReturnValue(v70);
        v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v69, "BOOLValueForSetting:manufacturer:brand:uuid:error:", 0, v60, v63, v71, 0));
        v73 = objc_msgSend(v72, "BOOLValue");

        if ((v68 & 1) == 0)
        {
          sub_10022E9EC(*(_QWORD *)(a1 + 144), v74, v75, v76, v77, v78, v79, v80, v184);
          if (sub_100217298(*(_QWORD *)(a1 + 8)) == 2)
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]", 535, CFSTR("UWB is blocked for (%@,%@). We'll allow pairing over UWB, then make it NFC only key"), v81, v82, v83, v84, (uint64_t)v60);
        }
        if (!v73)
          goto LABEL_84;
        v85 = (void *)objc_claimAutoreleasedReturnValue(+[NISession deviceCapabilities](NISession, "deviceCapabilities"));
        v86 = objc_msgSend(v85, "supportsPreciseDistanceMeasurement");

        if ((v86 & 1) != 0)
          goto LABEL_84;
        v87 = (void *)objc_claimAutoreleasedReturnValue(+[NRPairedDeviceRegistry sharedInstance](NRPairedDeviceRegistry, "sharedInstance"));
        v88 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v87, "getActivePairedDevice"));

        if (!v88)
          goto LABEL_82;
        v93 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", CFSTR("C4F6386A-780D-40E5-9900-0A26C16273A1"));
        if ((objc_msgSend(v88, "supportsCapability:", v93) & 1) != 0)
        {
          v94 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", CFSTR("81D292E4-16D8-4630-82ED-BDF62B05E334"));
          v95 = objc_msgSend(v88, "supportsCapability:", v94);

          if (v95)
          {
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]", 551, CFSTR("Allowing NFC only phone to have owner key since there is a paired UWB-capable watch"), v89, v90, v91, v92, v184);

            goto LABEL_84;
          }
        }
        else
        {

        }
LABEL_82:
        KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]", 554, CFSTR("NFC-only devices are blocked for (%@,%@)"), v89, v90, v91, v92, (uint64_t)v60);
        v150 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
        v193 = NSLocalizedDescriptionKey;
        v151 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(218));
        v152 = (void *)objc_claimAutoreleasedReturnValue(v151);
        v194 = v152;
        v153 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v194, &v193, 1));
        v154 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v150, 218, v153));

        if (v154)
        {
          v155 = *(void **)(a1 + 120);
          *(_QWORD *)(a1 + 120) = v154;
          v156 = v154;

          sub_100222DF4(a1, 41);
          goto LABEL_85;
        }
LABEL_84:
        v158 = *(_QWORD *)(a1 + 16);
        v157 = *(void **)(a1 + 24);
        v159 = *(void **)(a1 + 56);
        v160 = sub_1002154F4(*(id **)(a1 + 8));
        v156 = (id)objc_claimAutoreleasedReturnValue(v160);
        v161 = sub_100217274(*(_QWORD *)(a1 + 8));
        v162 = (void *)objc_claimAutoreleasedReturnValue(v161);
        v163 = sub_100217280(*(_QWORD *)(a1 + 8));
        v164 = (void *)objc_claimAutoreleasedReturnValue(v163);
        v165 = sub_10021728C(*(_QWORD *)(a1 + 8));
        v166 = (void *)objc_claimAutoreleasedReturnValue(v165);
        v167 = sub_10022F138(*(_QWORD *)(a1 + 144));
        sub_100226C40(v158, v157, v60, v159, v156, v162, v164, v166, v167, *(void **)(a1 + 152));

LABEL_85:
        goto LABEL_86;
      case 13:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]", 578, CFSTR("OPManager: Ask DX Manager to share keys generation result with remote reader."), v11, v12, v13, v14, v183);
        v96 = KmlSignpostLogger();
        v97 = objc_claimAutoreleasedReturnValue(v96);
        if (os_signpost_enabled(v97))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v97, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "OpKeyExchange", "start", buf, 2u);
        }

        sub_100214FE4(*(_QWORD *)(a1 + 8), *(void **)(a1 + 32), *(void **)(a1 + 40), *(void **)(a1 + 48), *(void **)(a1 + 56));
        return;
      case 21:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]", 584, CFSTR("OPManager: Waiting for mailboxes to be written into."), v11, v12, v13, v14, v183);
        v98 = KmlSignpostLogger();
        v99 = objc_claimAutoreleasedReturnValue(v98);
        if (os_signpost_enabled(v99))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v99, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "OpMailboxWriteTxn", "start", buf, 2u);
        }

        sub_100215514(*(_QWORD *)(a1 + 8), *(void **)(a1 + 200));
        return;
      case 22:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]", 590, CFSTR("OPManager: Successfully exchanged key with remote reader"), v11, v12, v13, v14, v183);
        if (sub_10022F138(*(_QWORD *)(a1 + 144))
          && (v104 = (void *)objc_claimAutoreleasedReturnValue(+[NISession deviceCapabilities](NISession, "deviceCapabilities")),
              v105 = objc_msgSend(v104, "supportsPreciseDistanceMeasurement"),
              v104,
              v105)
          && (KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]", 599, CFSTR("disable full power express over nfc for uwb capable key"), v100, v101, v102, v103, v185), v106 = sub_100227D68(*(dispatch_queue_t **)(a1 + 16)), (v107 = objc_claimAutoreleasedReturnValue(v106)) != 0))
        {
          v186 = (id)v107;
          v108 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
          v109 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v186, "userInfo"));
          v110 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v108, 32, v109));
          v111 = *(void **)(a1 + 120);
          *(_QWORD *)(a1 + 120) = v110;

          sub_100222DF4(a1, 43);
        }
        else
        {
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]", 607, CFSTR("Create key tracking request"), v100, v101, v102, v103, v185);
          v126 = *(_QWORD *)(a1 + 16);
          v127 = sub_1002154D8(*(id **)(a1 + 8));
          v186 = (id)objc_claimAutoreleasedReturnValue(v127);
          sub_10022719C(v126, v186, *(void **)(a1 + 88));
        }
        v30 = v186;
        goto LABEL_65;
      case 23:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]", 615, CFSTR("OPManager: Send key tracking request and wait for tracking receipt"), v11, v12, v13, v14, v183);
        v112 = KmlSignpostLogger();
        v113 = objc_claimAutoreleasedReturnValue(v112);
        if (os_signpost_enabled(v113))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v113, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "OpTrackingRequestSent", "", buf, 2u);
        }

        v114 = objc_loadWeakRetained((id *)(a1 + 192));
        objc_msgSend(v114, "handleKmlOwnerPairingCompletionWithResult:keyInformation:keyTrackingRequest:", *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104));

        sub_10022504C(a1);
        return;
      default:
        return;
    }
  }
  switch(a2)
  {
    case ')':
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]", 657, CFSTR("OPManager: Inform remote reader about key creation failure."), v11, v12, v13, v14, v183);
      sub_10021524C(*(_QWORD *)(a1 + 8));
      return;
    case '*':
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]", 662, CFSTR("Done with probing"), v11, v12, v13, v14, v183);
      v18 = KmlSignpostLogger();
      v19 = objc_claimAutoreleasedReturnValue(v18);
      if (os_signpost_enabled(v19))
      {
        v20 = *(_QWORD *)(a1 + 120);
        *(_DWORD *)buf = 138412290;
        v190 = v20;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "OpProbing", "result=%@", buf, 0xCu);
      }

      v21 = sub_100215BE0(*(_QWORD *)(a1 + 8));
      sub_100227D58(*(_QWORD *)(a1 + 16));
      KmlLogFunc2(OS_LOG_TYPE_DEBUG, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]", 666, CFSTR("Debug states: DXManagerStep - %08x ; SEManagerStep - %08x"),
        v22,
        v23,
        v24,
        v25,
        v21);
      sub_100212270((uint64_t)KmlAnalyticsLogger);
      v26 = *(void **)(a1 + 120);
      *(_QWORD *)(a1 + 120) = 0;

      return;
    case '+':
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]", 674, CFSTR("OPManager: Encountered error in pairing phone with remote reader, error: %@"), v11, v12, v13, v14, *(_QWORD *)(a1 + 120));
      sub_100227068(*(_QWORD *)(a1 + 16));
      if (*(_BYTE *)(a1 + 184))
      {
        v27 = objc_loadWeakRetained((id *)(a1 + 192));
        objc_msgSend(v27, "handleKmlOwnerPairingProbingCompletionWithBrandCode:error:", 0xFFFFLL, *(_QWORD *)(a1 + 120));

      }
      if (!*(_BYTE *)(a1 + 185))
      {
        v28 = objc_loadWeakRetained((id *)(a1 + 192));
        objc_msgSend(v28, "handleKmlOwnerPairingCompletionWithResult:keyInformation:keyTrackingRequest:", *(_QWORD *)(a1 + 120), 0, 0);

        if (*(_BYTE *)(a1 + 184))
        {
          sub_100212270((uint64_t)KmlAnalyticsLogger);
        }
        else
        {
          v138 = *(_QWORD *)(a1 + 8);
          v139 = *(void **)(a1 + 120);
          if (sub_10022F138(*(_QWORD *)(a1 + 144)))
          {
            v140 = (void *)objc_claimAutoreleasedReturnValue(+[NISession deviceCapabilities](NISession, "deviceCapabilities"));
            sub_100215AAC(v138, v139, (char)objc_msgSend(v140, "supportsPreciseDistanceMeasurement"), *(void **)(a1 + 200));

          }
          else
          {
            sub_100215AAC(v138, v139, 0, *(void **)(a1 + 200));
          }
          sub_10022504C(a1);
        }
      }
      v168 = *(_QWORD *)(a1 + 168);
      if (v168 == 21)
      {
        v172 = KmlSignpostLogger();
        v170 = objc_claimAutoreleasedReturnValue(v172);
        if (!os_signpost_enabled(v170))
          goto LABEL_99;
        *(_WORD *)buf = 0;
        v171 = "OpMailboxWriteTxn";
        goto LABEL_98;
      }
      if (v168 == 13)
      {
        v173 = KmlSignpostLogger();
        v170 = objc_claimAutoreleasedReturnValue(v173);
        if (!os_signpost_enabled(v170))
          goto LABEL_99;
        *(_WORD *)buf = 0;
        v171 = "OpKeyExchange";
        goto LABEL_98;
      }
      if (v168 != 11)
        goto LABEL_100;
      v169 = KmlSignpostLogger();
      v170 = objc_claimAutoreleasedReturnValue(v169);
      if (os_signpost_enabled(v170))
      {
        *(_WORD *)buf = 0;
        v171 = "OpCarConfigRx";
LABEL_98:
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v170, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, v171, "end with error", buf, 2u);
      }
LABEL_99:

LABEL_100:
      sub_100222DF4(a1, 52);
      return;
    case ',':
    case '-':
    case '.':
    case '/':
    case '0':
    case '1':
    case '2':
      return;
    case '3':
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]", 714, CFSTR("Endpoint revoked."), v11, v12, v13, v14, v183);
      sub_1002256B4(a1);
      sub_100222DF4(a1, 52);
      return;
    case '4':
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]", 721, CFSTR("OPManager: Done with pairing, ready to clean up the object."), v11, v12, v13, v14, v183);
      sub_1002299C0(*(id **)(a1 + 16), 0);
      v29 = *(void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = 0;

      sub_100217264(*(id **)(a1 + 8), 0);
      v30 = *(void **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
LABEL_65:

      return;
    default:
      if (a2 == 31)
      {
        v115 = objc_loadWeakRetained((id *)(a1 + 192));
        objc_msgSend(v115, "handleKmlOwnerPairingTrackingReceiptSaveResult:", 0);

        if (!*(_BYTE *)(a1 + 136))
          goto LABEL_62;
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]", 628, CFSTR("OPManager:Trying the first transaction to get friend immo tokens."), v116, v117, v118, v119, v183);
        v120 = KmlSignpostLogger();
        v121 = objc_claimAutoreleasedReturnValue(v120);
        if (os_signpost_enabled(v121))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v121, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "PostOpFirstTxn", "start", buf, 2u);
        }

        if ((sub_1002155DC(*(_QWORD *)(a1 + 8), *(void **)(a1 + 200)) & 1) == 0)
        {
LABEL_62:
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]", 636, CFSTR("We couldn't run the first post pairing transaction"), v116, v117, v118, v119, v183);
          v122 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
          v191 = NSLocalizedDescriptionKey;
          v123 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(8));
          v124 = (void *)objc_claimAutoreleasedReturnValue(v123);
          v192 = v124;
          v125 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v192, &v191, 1));
          v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v122, 8, v125));

          objc_msgSend((id)a1, "handleFirstPostPairingTransactionEndResult:", v60);
LABEL_86:

        }
      }
      else if (a2 == 32)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]", 644, CFSTR("OPManager: Cancel requested."), v11, v12, v13, v14, v183);
        v17 = *(_QWORD *)(a1 + 8);
        if (v17)
          sub_100215170(v17);
        else
          objc_msgSend((id)a1, "handleOwnerPairingCancellationWithResult:", 1);
        sub_100226FBC(*(_QWORD *)(a1 + 16));
      }
      return;
  }
}

uint64_t sub_100224FB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v10;

  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 208) == 42)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]_block_invoke", 491, CFSTR("Probing was already done when timer fired."), a5, a6, a7, a8, v10);
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]_block_invoke", 488, CFSTR("Timer fired. End probing"), a5, a6, a7, a8, v10);
    sub_1002158D0(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 137) = 1;
  result = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(result + 138))
    return sub_100222DF4();
  return result;
}

void sub_10022504C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  _BOOL4 v9;
  _BOOL4 v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  void *v40;
  id v41;
  char v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  NSNumber *v49;
  void *v50;
  void *v51;
  unsigned int v52;
  NSNumber *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  unsigned __int8 v57;
  __CFString *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  __CFString *v63;
  __CFString *v64;
  __CFString *v65;
  void *v66;
  _QWORD v67[6];
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD v76[18];
  _QWORD v77[18];

  if (a1)
  {
    v2 = sub_100215BE0(*(_QWORD *)(a1 + 8));
    sub_100227D58(*(_QWORD *)(a1 + 16));
    KmlLogFunc2(OS_LOG_TYPE_DEBUG, (uint64_t)"-[KmlOwnerPairingManager reportPairingEventToCA]", 930, CFSTR("Debug states: DXManagerStep - %08x ; SEManagerStep - %08x"),
      v3,
      v4,
      v5,
      v6,
      v2);
    v7 = sub_100215BE0(*(_QWORD *)(a1 + 8));
    v8 = sub_100227D58(*(_QWORD *)(a1 + 16));
    v9 = sub_10022F124(*(_QWORD *)(a1 + 144));
    v10 = sub_10022F138(*(_QWORD *)(a1 + 144));
    v72 = 0;
    v73 = &v72;
    if (v10)
      v11 = 2;
    else
      v11 = 0;
    v74 = 0x2020000000;
    v75 = 0;
    v68 = 0;
    v69 = &v68;
    v70 = 0x2020000000;
    v71 = 0;
    v12 = *(void **)(a1 + 24);
    v13 = *(void **)(a1 + 64);
    v67[0] = _NSConcreteStackBlock;
    v67[1] = 3221225472;
    v67[2] = sub_1002268A4;
    v67[3] = &unk_10030F090;
    v67[4] = &v72;
    v67[5] = &v68;
    v14 = sub_100212390((uint64_t)KmlAnalyticsLogger, v12, v13, v67);
    v66 = (void *)objc_claimAutoreleasedReturnValue(v14);
    if (v66)
    {
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v66, "localizedFailureReason"));
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlOwnerPairingManager reportPairingEventToCA]", 949, CFSTR("Could not get HUP data due to error %@"), v16, v17, v18, v19, (uint64_t)v15);

    }
    v20 = 168;
    if (!*(_QWORD *)(a1 + 120))
      v20 = 208;
    v21 = *(_QWORD *)(a1 + v20);
    if (sub_100217298(*(_QWORD *)(a1 + 8)) == 2)
      v22 = 2;
    else
      v22 = 1;
    v23 = *(void **)(a1 + 120);
    if (v23)
      v24 = objc_msgSend(v23, "code");
    else
      v24 = 0;
    v25 = sub_10021728C(*(_QWORD *)(a1 + 24));
    v26 = (void *)objc_claimAutoreleasedReturnValue(v25);

    if (v26)
    {
      v31 = sub_10021728C(*(_QWORD *)(a1 + 24));
      v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
      v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "manufacturer"));
      v65 = (__CFString *)objc_msgSend(v33, "copy");

      v34 = sub_10021728C(*(_QWORD *)(a1 + 24));
      v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
      v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "brand"));
      v63 = (__CFString *)objc_msgSend(v36, "copy");

      v37 = sub_10021728C(*(_QWORD *)(a1 + 24));
      v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
      v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "regionString"));
      v64 = (__CFString *)objc_msgSend(v39, "copy");

    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager reportPairingEventToCA]", 967, CFSTR("No routing info available"), v27, v28, v29, v30, v56);
      v63 = CFSTR("Unknown");
      v64 = CFSTR("Unknown");
      v65 = CFSTR("Unknown");
    }
    v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 152), "vehicleSupportedFrameworkVersionsForCA"));
    v41 = objc_msgSend(v40, "length");

    if (v41)
      v58 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 152), "vehicleSupportedFrameworkVersionsForCA"));
    else
      v58 = CFSTR("0000");
    if (objc_msgSend(*(id *)(a1 + 152), "agreedKmlVehicleVersion") == 768)
      v42 = 0x80;
    else
      v42 = 0;
    v57 = v42;
    v77[0] = &off_1003231D8;
    v76[0] = CFSTR("type");
    v76[1] = CFSTR("step");
    v62 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v21));
    v77[1] = v62;
    v77[2] = v64;
    v76[2] = CFSTR("dataCenterCode");
    v76[3] = CFSTR("HUPDataSource");
    v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v73[3]));
    v77[3] = v61;
    v76[4] = CFSTR("vehicleCapabilities");
    v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v69[3]));
    v77[4] = v60;
    v77[5] = v65;
    v76[5] = CFSTR("manufacturer");
    v76[6] = CFSTR("brand");
    v77[6] = v63;
    v76[7] = CFSTR("pairingTransport");
    v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v22));
    v77[7] = v59;
    v76[8] = CFSTR("totalOwnerKeysPaired");
    v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 160)));
    v77[8] = v43;
    v76[9] = CFSTR("status");
    v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v24));
    v77[9] = v44;
    v76[10] = CFSTR("dataExchangeStep");
    v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v7));
    v77[10] = v45;
    v76[11] = CFSTR("seManagerState");
    v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v8));
    v77[11] = v46;
    v76[12] = CFSTR("readerSupportedTransportTypes");
    v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v11 | v9));
    v77[12] = v47;
    v76[13] = CFSTR("pairedKeyVersion");
    v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", objc_msgSend(*(id *)(a1 + 152), "agreedKmlVehicleVersion")));
    v77[13] = v48;
    v77[14] = v58;
    v76[14] = CFSTR("carSupportedFrameworkVersions");
    v76[15] = CFSTR("maxOfflineAttestationCount");
    v49 = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", sub_10022AAD8(*(_QWORD *)(a1 + 144)));
    v50 = (void *)objc_claimAutoreleasedReturnValue(v49);
    v77[15] = v50;
    v76[16] = CFSTR("mailboxVersion");
    v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v57));
    v77[16] = v51;
    v76[17] = CFSTR("keyClassOriginBitmap");
    v52 = sub_1002530BC(*(_QWORD *)(a1 + 24));
    v53 = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", kmlUtilKeyClassOriginBitmap(v52));
    v54 = (void *)objc_claimAutoreleasedReturnValue(v53);
    v77[17] = v54;
    v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v77, v76, 18));

    sub_100211C70((uint64_t)KmlAnalyticsLogger, v55);
    _Block_object_dispose(&v68, 8);
    _Block_object_dispose(&v72, 8);
  }
}

void sub_100225670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

void sub_1002256B4(uint64_t a1)
{
  void *v2;
  id v3;
  unsigned int v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  _QWORD v9[8];
  _QWORD v10[8];

  if (a1)
  {
    v2 = *(void **)(a1 + 120);
    if (v2)
      v3 = objc_msgSend(v2, "code");
    else
      v3 = 0;
    v4 = sub_1002530BC(*(_QWORD *)(a1 + 24));
    v5 = kmlUtilKeyClassOriginBitmap(v4);
    v9[0] = CFSTR("errorCode");
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v3));
    v10[0] = v6;
    v10[1] = &off_1003231F0;
    v9[1] = CFSTR("accountRole");
    v9[2] = CFSTR("didReceiveProductPlanIdentifier");
    v10[2] = &off_100323208;
    v10[3] = &off_100323208;
    v9[3] = CFSTR("didReceiveSlotIdentifier");
    v9[4] = CFSTR("didReceiveImmoToken");
    v10[4] = &off_100323208;
    v10[5] = &off_100323208;
    v9[5] = CFSTR("didReceiveOnlineBLEKeys");
    v9[6] = CFSTR("isOwner");
    v10[6] = &off_100323220;
    v9[7] = CFSTR("keyClassOriginBitmap");
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v5));
    v10[7] = v7;
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v10, v9, 8));

    sub_100211D18((uint64_t)KmlAnalyticsLogger, v8);
  }
}

void sub_1002259DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 120))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager handlePairingTransportSessionFailedWithError:]_block_invoke", 756, CFSTR("Ignoring DXM error for OPManager error: %@"), a5, a6, a7, a8, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 120));
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager handlePairingTransportSessionFailedWithError:]_block_invoke", 753, CFSTR("Propagating error from DXM session: %@"), a5, a6, a7, a8, *(_QWORD *)(a1 + 40));
    objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 120), *(id *)(a1 + 40));
  }
  sub_100222DF4(*(_QWORD *)(a1 + 32), 43);
}

void sub_100225B64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id WeakRetained;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  NSString *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  NSErrorUserInfoKey v30;
  void *v31;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 192));
  objc_msgSend(WeakRetained, "handleKmlOwnerPairingCancellationResult:", *(unsigned __int8 *)(a1 + 40));

  if (*(_BYTE *)(a1 + 40))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager handleOwnerPairingCancellationWithResult:]_block_invoke", 774, CFSTR("OPManager: Owner Pairing cancelled in DXM session"), v11, v12, v13, v14, v28);
    if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 185))
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager handleOwnerPairingCancellationWithResult:]_block_invoke", 776, CFSTR("We don't report cancel success during preWarm"), v15, v16, v17, v18, v29);
      v19 = *(_QWORD *)(a1 + 32);
      v20 = *(void **)(v19 + 120);
      *(_QWORD *)(v19 + 120) = 0;

    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager handleOwnerPairingCancellationWithResult:]_block_invoke", 779, CFSTR("Owner pairing cancel successful."), v15, v16, v17, v18, v29);
      v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
      v30 = NSLocalizedDescriptionKey;
      v22 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(1));
      v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
      v31 = v23;
      v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v31, &v30, 1));
      v25 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v21, 1, v24));
      v26 = *(_QWORD *)(a1 + 32);
      v27 = *(void **)(v26 + 120);
      *(_QWORD *)(v26 + 120) = v25;

    }
    sub_100222DF4(*(_QWORD *)(a1 + 32), 43);
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager handleOwnerPairingCancellationWithResult:]_block_invoke", 784, CFSTR("OPManager: Failed to cancel Owner Pairing"), v11, v12, v13, v14, a9);
  }
}

void sub_100225DD8(uint64_t a1)
{
  id WeakRetained;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint8_t buf[4];
  uint64_t v26;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 192));
  objc_msgSend(WeakRetained, "handleKmlOwnerPairingFirstTransactionCompletionResult:", *(_QWORD *)(a1 + 40));

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager handleFirstPostPairingTransactionEndResult:]_block_invoke", 794, CFSTR("OPManager: Done with first transaction after owner pairing with result:%@"), v3, v4, v5, v6, *(_QWORD *)(a1 + 40));
  v7 = KmlSignpostLogger();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_signpost_enabled(v8))
  {
    v9 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 138412290;
    v26 = v9;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "PostOpFirstTxn", "end with result - %@", buf, 0xCu);
  }

  v10 = sub_10021728C(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24));
  v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "manufacturer"));

  v13 = sub_10021728C(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24));
  v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "brand"));

  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(void **)(v16 + 176);
  v18 = sub_10021728C(*(_QWORD *)(v16 + 144));
  v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "BOOLValueForSetting:manufacturer:brand:uuid:error:", 7, v12, v15, v19, 0));
  v21 = objc_msgSend(v20, "BOOLValue");

  if ((v21 & 1) == 0)
    sub_100227EDC(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));
  v22 = *(_QWORD *)(a1 + 32);
  v23 = *(_QWORD *)(v22 + 8);
  if (sub_10022F138(*(_QWORD *)(v22 + 144)))
  {
    v24 = (void *)objc_claimAutoreleasedReturnValue(+[NISession deviceCapabilities](NISession, "deviceCapabilities"));
    sub_100215AAC(v23, 0, (char)objc_msgSend(v24, "supportsPreciseDistanceMeasurement"), *(void **)(*(_QWORD *)(a1 + 32) + 200));

  }
  else
  {
    sub_100215AAC(v23, 0, 0, *(void **)(*(_QWORD *)(a1 + 32) + 200));
  }
  sub_100222DF4(*(_QWORD *)(a1 + 32), 52);

}

void sub_100226084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id WeakRetained;

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager handleProbingCompletionWithBrandCode:error:]_block_invoke", 826, CFSTR("BrandCode : %ld, error: %@"), a5, a6, a7, a8, *(_QWORD *)(a1 + 48));
  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 40) + 192));
  objc_msgSend(WeakRetained, "handleKmlOwnerPairingProbingCompletionWithBrandCode:error:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 32));

  objc_storeStrong((id *)(*(_QWORD *)(a1 + 40) + 120), *(id *)(a1 + 32));
  sub_100222DF4(*(_QWORD *)(a1 + 40), 42);
}

void sub_10022615C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  id WeakRetained;

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager handlePairingDidStart]_block_invoke", 837, &stru_100316BD0, a5, a6, a7, a8, v9);
  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 192));
  objc_msgSend(WeakRetained, "handleKmlOwnerPairingDidStart");

}

void sub_100226230(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint8_t buf[4];
  uint64_t v76;

  v2 = KmlSignpostLogger();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_signpost_enabled(v3))
  {
    v4 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    v76 = v4;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "OpKeyCreate", "end with result %@", buf, 0xCu);
  }

  if (*(_QWORD *)(a1 + 32))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager handleKeyCreationCompletionResult:]_block_invoke", 870, CFSTR("OPManager: Key creation failed"), v5, v6, v7, v8, v68);
    v10 = *(_QWORD *)(a1 + 40);
    v9 = (uint64_t *)(a1 + 40);
    v11 = (id)*(v9 - 1);
    v12 = *(void **)(v10 + 120);
    *(_QWORD *)(v10 + 120) = v11;
    v13 = 41;
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager handleKeyCreationCompletionResult:]_block_invoke", 851, CFSTR("OPManager: Key creation succesful"), v5, v6, v7, v8, v68);
    v14 = *(_QWORD *)(a1 + 40);
    v9 = (uint64_t *)(a1 + 40);
    v15 = sub_1002299D0(*(_QWORD *)(v14 + 16));
    v16 = objc_claimAutoreleasedReturnValue(v15);
    v17 = *(void **)(*v9 + 32);
    *(_QWORD *)(*v9 + 32) = v16;

    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager handleKeyCreationCompletionResult:]_block_invoke", 853, CFSTR("--- Device Certificate Start ---"), v18, v19, v20, v21, v69);
    v22 = kmlUtilHexStringFromData(*(void **)(*v9 + 32));
    v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager handleKeyCreationCompletionResult:]_block_invoke", 854, CFSTR("%@"), v24, v25, v26, v27, (uint64_t)v23);

    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager handleKeyCreationCompletionResult:]_block_invoke", 855, CFSTR("--- Device Certificate End ---"), v28, v29, v30, v31, v70);
    v32 = sub_1002299DC(*(_QWORD *)(*v9 + 16));
    v33 = objc_claimAutoreleasedReturnValue(v32);
    v34 = *(void **)(*v9 + 40);
    *(_QWORD *)(*v9 + 40) = v33;

    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager handleKeyCreationCompletionResult:]_block_invoke", 857, CFSTR("--- Instance Attestation Start ---"), v35, v36, v37, v38, v71);
    v39 = kmlUtilHexStringFromData(*(void **)(*v9 + 40));
    v40 = (void *)objc_claimAutoreleasedReturnValue(v39);
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager handleKeyCreationCompletionResult:]_block_invoke", 858, CFSTR("%@"), v41, v42, v43, v44, (uint64_t)v40);

    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager handleKeyCreationCompletionResult:]_block_invoke", 859, CFSTR("--- Instance Attestation End ---"), v45, v46, v47, v48, v72);
    v49 = sub_1002299E8(*(_QWORD *)(*v9 + 16));
    v50 = objc_claimAutoreleasedReturnValue(v49);
    v51 = *(void **)(*v9 + 48);
    *(_QWORD *)(*v9 + 48) = v50;

    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager handleKeyCreationCompletionResult:]_block_invoke", 861, CFSTR("--- Key Attestation Start ---"), v52, v53, v54, v55, v73);
    kmlUtilLogLargeData(CFSTR("Key Attestation"), *(void **)(*v9 + 48));
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager handleKeyCreationCompletionResult:]_block_invoke", 863, CFSTR("--- Key Attestation End ---"), v56, v57, v58, v59, v74);
    v60 = sub_1002299F4(*(_QWORD *)(*v9 + 16));
    v61 = objc_claimAutoreleasedReturnValue(v60);
    v62 = *(void **)(*v9 + 64);
    *(_QWORD *)(*v9 + 64) = v61;

    v63 = sub_100229A00(*(_QWORD *)(*v9 + 16));
    v64 = objc_claimAutoreleasedReturnValue(v63);
    v65 = *(void **)(*v9 + 200);
    *(_QWORD *)(*v9 + 200) = v64;

    v66 = sub_100217298(*(_QWORD *)(*v9 + 16));
    v67 = objc_claimAutoreleasedReturnValue(v66);
    v12 = *(void **)(*v9 + 72);
    *(_QWORD *)(*v9 + 72) = v67;
    v13 = 13;
  }

  sub_100222DF4(*v9, v13);
}

void sub_100226624(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 208) == 22)
  {
    if (*(_QWORD *)(a1 + 40))
    {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlOwnerPairingManager handleEncryptionResult:trackingRequest:keyInformation:]_block_invoke", 898, CFSTR("OPManager: Failed to encrypt key tracking request"), a5, a6, a7, a8, v12);
      objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 120), *(id *)(a1 + 40));
      v10 = *(_QWORD *)(a1 + 32);
      v11 = 43;
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager handleEncryptionResult:trackingRequest:keyInformation:]_block_invoke", 902, CFSTR("OPManager: Encrypted the key tracking request"), a5, a6, a7, a8, v12);
      objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 104), *(id *)(a1 + 48));
      objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 96), *(id *)(a1 + 56));
      v10 = *(_QWORD *)(a1 + 32);
      v11 = 23;
    }
    sub_100222DF4(v10, v11);
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager handleEncryptionResult:trackingRequest:keyInformation:]_block_invoke", 893, CFSTR("We are not trying to create the key tracking request. Ignore"), a5, a6, a7, a8, a9);
  }
}

void sub_100226770(uint64_t a1)
{
  id WeakRetained;
  id v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t buf[4];
  uint64_t v13;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 192));
  objc_msgSend(WeakRetained, "handleKmlOwnerPairingPreWarmCompletionResult:", *(_QWORD *)(a1 + 40));

  v3 = KmlSignpostLogger();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_signpost_enabled(v4))
  {
    v5 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 138412290;
    v13 = v5;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "OpPreWarm", "result=%@", buf, 0xCu);
  }

  if (*(_QWORD *)(a1 + 40))
  {
    KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlOwnerPairingManager handlePreWarmResult:]_block_invoke", 917, CFSTR("Pre-Warm failed - %@"), v6, v7, v8, v9, *(_QWORD *)(a1 + 40));
    objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 120), *(id *)(a1 + 40));
    v10 = 43;
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager handlePreWarmResult:]_block_invoke", 921, CFSTR("OPManager: Pre-warm successful"), v6, v7, v8, v9, v11);
    v10 = 2;
  }
  sub_100222DF4(*(_QWORD *)(a1 + 32), v10);
}

uint64_t sub_1002268A4(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = a3;
  return result;
}

BOOL sub_1002268C0(_BOOL8 result)
{
  if (result)
    return *(_BYTE *)(result + 184) != 0;
  return result;
}

BOOL sub_1002268D4(_BOOL8 result)
{
  if (result)
    return *(_BYTE *)(result + 185) != 0;
  return result;
}

id *sub_1002269F8(id *a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  dispatch_queue_attr_t v8;
  NSObject *v9;
  dispatch_queue_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  objc_super v17;

  v3 = a2;
  if (a1)
  {
    v17.receiver = a1;
    v17.super_class = (Class)KmlSeManager;
    a1 = (id *)objc_msgSendSuper2(&v17, "init");
    if (a1)
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager initWithDelegate:]", 74, CFSTR("SEManager: let's init"), v4, v5, v6, v7, (uint64_t)v17.receiver);
      objc_storeWeak(a1 + 17, v3);
      a1[1] = 0;
      a1[2] = 0;
      *((_BYTE *)a1 + 96) = 1;
      v8 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      v10 = dispatch_queue_create("com.apple.sesd.kml.seManager", v9);
      v11 = a1[16];
      a1[16] = v10;

      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager initWithDelegate:]", 81, CFSTR("SEManager: ready to roll"), v12, v13, v14, v15, (uint64_t)v17.receiver);
    }
  }

  return a1;
}

void sub_100226AE0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  _QWORD v6[5];
  id v7;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = *(NSObject **)(a1 + 128);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100226B6C;
    v6[3] = &unk_100304370;
    v6[4] = a1;
    v7 = v3;
    dispatch_async(v5, v6);

  }
}

void sub_100226B6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager preWarmWithManufacturer:]_block_invoke", 91, CFSTR("SEManager: PreWarm SE for pairing with %@"), a5, a6, a7, a8, *(_QWORD *)(a1 + 40));
    objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 32), *(id *)(a1 + 40));
    sub_100226BE4(*(_QWORD *)(a1 + 32), 1);
  }
}

void sub_100226BE4(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD v3[6];

  if (a1)
  {
    v2 = *(NSObject **)(a1 + 128);
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100228138;
    v3[3] = &unk_100304AD0;
    v3[4] = a1;
    v3[5] = a2;
    dispatch_async(v2, v3);
  }
}

void sub_100226C40(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, char a9, void *a10)
{
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  NSObject *v24;
  id v25;
  _QWORD block[4];
  id v27;
  uint64_t v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  char v36;

  v25 = a2;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v20 = a6;
  v21 = a7;
  v22 = a8;
  v23 = a10;
  if (a1)
  {
    v24 = *(NSObject **)(a1 + 128);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100226DD0;
    block[3] = &unk_10030F0B8;
    v27 = v17;
    v28 = a1;
    v29 = v25;
    v30 = v18;
    v31 = v19;
    v32 = v20;
    v33 = v21;
    v34 = v22;
    v36 = a9;
    v35 = v23;
    dispatch_async(v24, block);

  }
}

void sub_100226DD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  void *v31;
  id v32;

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager createOwnerPairingKeysWithConfig:manufacturer:keyName:secureElementSession:bleIntroKey:bleOOBMasterKey:longTermSharedSecret:uwbSupported:versionInformation:]_block_invoke", 109, CFSTR("SEManager: Create keys for manufacturer: %@"), a5, a6, a7, a8, *(_QWORD *)(a1 + 32));
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 40) + 24), *(id *)(a1 + 48));
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 40) + 40), *(id *)(a1 + 56));
  v9 = *(_QWORD *)(a1 + 40);
  if (!*(_QWORD *)(v9 + 32))
  {
    objc_storeStrong((id *)(v9 + 32), *(id *)(a1 + 32));
    v9 = *(_QWORD *)(a1 + 40);
  }
  if (*(_QWORD *)(a1 + 32))
  {
    v10 = objc_msgSend(*(id *)(v9 + 32), "isEqualToString:");
    v9 = *(_QWORD *)(a1 + 40);
    if ((v10 & 1) == 0)
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager createOwnerPairingKeysWithConfig:manufacturer:keyName:secureElementSession:bleIntroKey:bleOOBMasterKey:longTermSharedSecret:uwbSupported:versionInformation:]_block_invoke", 117, CFSTR("We pre-warmed for %@, but request to create endpoint is for %@"), v11, v12, v13, v14, *(_QWORD *)(v9 + 32));
      objc_storeStrong((id *)(*(_QWORD *)(a1 + 40) + 32), *(id *)(a1 + 32));
      v9 = *(_QWORD *)(a1 + 40);
    }
  }
  objc_storeStrong((id *)(v9 + 56), *(id *)(a1 + 64));
  v32 = 0;
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NFSecureElement embeddedSecureElementWithError:](NFSecureElement, "embeddedSecureElementWithError:", &v32));
  v16 = v32;
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "info"));
  v18 = objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "serialNumber"));
  v19 = *(_QWORD *)(a1 + 40);
  v20 = *(void **)(v19 + 64);
  *(_QWORD *)(v19 + 64) = v18;

  v25 = *(_QWORD *)(a1 + 40);
  if (!*(_QWORD *)(v25 + 64) || v16)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager createOwnerPairingKeysWithConfig:manufacturer:keyName:secureElementSession:bleIntroKey:bleOOBMasterKey:longTermSharedSecret:uwbSupported:versionInformation:]_block_invoke", 128, CFSTR("Failed to retrieve SEID %@"), v21, v22, v23, v24, (uint64_t)v16);
    v27 = 7;
    v28 = 120;
    v26 = v16;
  }
  else
  {
    objc_storeStrong((id *)(v25 + 72), *(id *)(a1 + 72));
    objc_storeStrong((id *)(*(_QWORD *)(a1 + 40) + 80), *(id *)(a1 + 80));
    objc_storeStrong((id *)(*(_QWORD *)(a1 + 40) + 88), *(id *)(a1 + 88));
    *(_BYTE *)(*(_QWORD *)(a1 + 40) + 96) = *(_BYTE *)(a1 + 104);
    v26 = *(void **)(a1 + 96);
    v27 = 4;
    v28 = 104;
  }
  v29 = *(_QWORD *)(a1 + 40);
  v30 = v26;
  v31 = *(void **)(v29 + v28);
  *(_QWORD *)(v29 + v28) = v30;

  sub_100226BE4(*(_QWORD *)(a1 + 40), v27);
}

void sub_100226FBC(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[5];

  if (a1)
  {
    v1 = *(NSObject **)(a1 + 128);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100227018;
    block[3] = &unk_100302AA0;
    block[4] = a1;
    dispatch_async(v1, block);
  }
}

void sub_100227018(uint64_t a1)
{
  uint64_t v1;
  id WeakRetained;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(uint64_t *)(v1 + 8) > 4)
  {
    WeakRetained = objc_loadWeakRetained((id *)(v1 + 136));
    objc_msgSend(WeakRetained, "handleKeyCreationCancellationResult:", 0);

  }
  else
  {
    sub_100226BE4(v1, 8);
  }
}

void sub_100227068(uint64_t a1)
{
  NSObject *v2;
  _QWORD block[5];

  if (a1)
  {
    dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 128));
    v2 = *(NSObject **)(a1 + 128);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002270D4;
    block[3] = &unk_100302AA0;
    block[4] = a1;
    dispatch_sync(v2, block);
  }
}

void sub_1002270D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  id v17;

  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 184);
  if (v10)
  {
    v17 = 0;
    SESEndPointDelete(v10, &v17);
    v15 = v17;
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40);
    if (v15)
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlSeManager deleteKey_sync]_block_invoke", 169, CFSTR("SEManager: Failed to delete key with name:%@ and id:%@, due to %@"), v11, v12, v13, v14, v16);
    else
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager deleteKey_sync]_block_invoke", 171, CFSTR("SEManager: Deleted key with name: %@ and id: %@"), v11, v12, v13, v14, v16);

  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager deleteKey_sync]_block_invoke", 163, CFSTR("There is no key to delete"), a5, a6, a7, a8, a9);
  }
}

void sub_10022719C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  _QWORD block[5];
  id v9;
  id v10;

  v5 = a2;
  v6 = a3;
  if (a1)
  {
    v7 = *(NSObject **)(a1 + 128);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100227248;
    block[3] = &unk_100304490;
    block[4] = a1;
    v9 = v5;
    v10 = v6;
    dispatch_async(v7, block);

  }
}

void sub_100227248(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  id v25;
  NSString *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id WeakRetained;
  id v31;
  NSErrorUserInfoKey v32;
  void *v33;

  v9 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v9 + 8) != 5)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager createEncryptedTrackingRequestWithOpaqueAttestation:anonymizedDsid:]_block_invoke", 205, CFSTR("SEManager: Requested to create key tracking request in wrong state."), a5, a6, a7, a8, (uint64_t)v31);
    v14 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
    v32 = NSLocalizedDescriptionKey;
    v26 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(28));
    v12 = (void *)objc_claimAutoreleasedReturnValue(v26);
    v33 = v12;
    v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v33, &v32, 1));
    v27 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v14, 28, v24));
    v28 = *(_QWORD *)(a1 + 32);
    v29 = *(void **)(v28 + 120);
    *(_QWORD *)(v28 + 120) = v27;

    v18 = 0;
    v17 = 0;
    goto LABEL_7;
  }
  v10 = *(void **)(v9 + 176);
  v31 = 0;
  v11 = sub_100255878((uint64_t)KmlEndpointManager, v10, &v31);
  v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  v13 = v31;
  v14 = v13;
  v15 = *(_QWORD *)(a1 + 32);
  if (!v12)
  {
    v14 = v13;
    v18 = 0;
    v17 = 0;
    v24 = *(void **)(v15 + 120);
    *(_QWORD *)(v15 + 120) = v14;
    goto LABEL_7;
  }
  sub_100227498(*(_QWORD *)(a1 + 32), *(void **)(a1 + 40), v12, *(void **)(a1 + 48));
  v16 = sub_100227A28(*(_QWORD **)(a1 + 32), v12);
  v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
  v18 = objc_msgSend(objc_alloc((Class)DAKeyInformation), "initWithEndpoint:", v12);
  v19 = sub_100253C20(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24));
  v20 = (void *)objc_claimAutoreleasedReturnValue(v19);

  if (v20)
  {
    v21 = *(_QWORD *)(a1 + 32);
    v22 = *(_QWORD *)(v21 + 176);
    v23 = sub_100253C20(*(_QWORD *)(v21 + 24));
    v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
    v25 = (id)SESEndPointTriggerHeadUnitPairing(v22, v24);
LABEL_7:

  }
  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 136));
  objc_msgSend(WeakRetained, "handleEncryptionResult:trackingRequest:keyInformation:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 120), v17, v18);

}

void sub_100227498(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  _WORD *v18;
  void *v19;
  _WORD *v20;
  void *v21;
  KmlDeviceConfigurationData *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  _WORD *v34;
  void *v35;
  void *v36;
  _WORD *v37;
  void *v38;
  id v39;
  void *v40;
  id AccountIdHash;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _WORD *v46;
  void *v47;
  id v48;
  id v49;
  id v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  _WORD *v57;
  void *v58;
  void *v59;
  _WORD *v60;
  void *v61;
  id v62;
  id v63;
  id v64;
  uint64_t v65;
  void *i;
  uint64_t v67;
  id v69;
  void *v70;
  _WORD *v71;
  void *v72;
  id v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  id v77;
  id v78;
  id v79;
  void *v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  id v85;
  _BYTE v86[128];

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (a1)
  {
    if (objc_msgSend(*(id *)(a1 + 104), "agreedKmlVehicleVersion") != 768 && v7 != 0)
    {
      v16 = v7;
LABEL_9:
      v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
      v18 = sub_10022CB3C((uint64_t)KmlTlv, 32546, *(void **)(a1 + 160));
      v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
      objc_msgSend(v17, "addObject:", v19);

      v20 = sub_10022CB3C((uint64_t)KmlTlv, 32548, *(void **)(a1 + 168));
      v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
      objc_msgSend(v17, "addObject:", v21);

      v22 = [KmlDeviceConfigurationData alloc];
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "deviceConfiguration"));
      v24 = (void *)sub_10022D114((uint64_t)v22, v23);

      if (sub_10022DC6C((_BOOL8)v24) && sub_10022DC84((uint64_t)v24))
      {
        v25 = *(_QWORD *)(a1 + 184);
        v85 = 0;
        v26 = SESEndPointCreateEncryptionKey(v25, &v85);
        v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
        v28 = v85;
        if (v28)
        {
          v33 = v28;
          KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlSeManager buildTrackingRequestWithOpaqueAttestation:endpoint:anonymizedDsid:]", 485, CFSTR("Error getting endpoint encryption key - %@"), v29, v30, v31, v32, (uint64_t)v28);
LABEL_35:

          goto LABEL_36;
        }
        v80 = v24;
        v33 = v27;
      }
      else
      {
        v80 = v24;
        v33 = 0;
      }
      v34 = sub_10022CB3C((uint64_t)KmlTlv, 213, v16);
      v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
      objc_msgSend(v17, "addObject:", v35);

      v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "dataUsingEncoding:", 4));
      v37 = sub_10022CB3C((uint64_t)KmlTlv, 211, v36);
      v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
      objc_msgSend(v17, "addObject:", v38);

      if (objc_msgSend(*(id *)(a1 + 104), "agreedKmlVehicleVersion") == 768)
      {
        v39 = sub_100251398(*(_QWORD *)(a1 + 24));
        v40 = (void *)objc_claimAutoreleasedReturnValue(v39);
        AccountIdHash = kmlUtilGenerateAccountIdHash(v9, v40);
        v27 = (void *)objc_claimAutoreleasedReturnValue(AccountIdHash);

        if (objc_msgSend(v27, "length"))
        {
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager buildTrackingRequestWithOpaqueAttestation:endpoint:anonymizedDsid:]", 498, CFSTR("Add account info hash"), v42, v43, v44, v45, v76);
          v46 = sub_10022CB3C((uint64_t)KmlTlv, 94, v27);
          v47 = (void *)objc_claimAutoreleasedReturnValue(v46);
          objc_msgSend(v17, "addObject:", v47);

          v48 = v9;
          v49 = *(id *)(a1 + 112);
          *(_QWORD *)(a1 + 112) = v48;
        }
        else
        {
          v50 = v16;
          v49 = objc_msgSend(objc_alloc((Class)NSUserDefaults), "initWithSuiteName:", CFSTR("com.apple.seserviced"));
          v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v49, "objectForKey:", CFSTR("BypassAccountInfoHash")));
          if (!isInternalBuild() || !v51)
          {
            KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlSeManager buildTrackingRequestWithOpaqueAttestation:endpoint:anonymizedDsid:]", 508, CFSTR("Error generating account info hash"), v52, v53, v54, v55, v76);

            v16 = v50;
LABEL_34:
            v24 = v80;
            goto LABEL_35;
          }
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager buildTrackingRequestWithOpaqueAttestation:endpoint:anonymizedDsid:]", 506, CFSTR("Ignoring error in generating account info hash"), v52, v53, v54, v55, v76);

          v16 = v50;
        }

      }
      v77 = v16;
      v78 = v9;
      v79 = v7;
      v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "privacyPublicKey"));
      v57 = sub_10022CB3C((uint64_t)KmlTlv, 24393, v56);
      v58 = (void *)objc_claimAutoreleasedReturnValue(v57);
      objc_msgSend(v17, "addObject:", v58);

      v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("ECIES_v1"), "dataUsingEncoding:", 4));
      v60 = sub_10022CB3C((uint64_t)KmlTlv, 218, v59);
      v61 = (void *)objc_claimAutoreleasedReturnValue(v60);
      objc_msgSend(v17, "addObject:", v61);

      v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData data](NSMutableData, "data"));
      v81 = 0u;
      v82 = 0u;
      v83 = 0u;
      v84 = 0u;
      v62 = v17;
      v63 = objc_msgSend(v62, "countByEnumeratingWithState:objects:count:", &v81, v86, 16);
      if (v63)
      {
        v64 = v63;
        v65 = *(_QWORD *)v82;
        do
        {
          for (i = 0; i != v64; i = (char *)i + 1)
          {
            if (*(_QWORD *)v82 != v65)
              objc_enumerationMutation(v62);
            v67 = *(_QWORD *)(*((_QWORD *)&v81 + 1) + 8 * (_QWORD)i);
            if (sub_100055868(v67) == 213 && v33 != 0)
              objc_msgSend(v27, "appendData:", v33);
            v69 = sub_10022D014(v67);
            v70 = (void *)objc_claimAutoreleasedReturnValue(v69);
            objc_msgSend(v27, "appendData:", v70);

          }
          v64 = objc_msgSend(v62, "countByEnumeratingWithState:objects:count:", &v81, v86, 16);
        }
        while (v64);
      }

      v71 = sub_10022CB3C((uint64_t)KmlTlv, 32574, v27);
      v72 = (void *)objc_claimAutoreleasedReturnValue(v71);
      v73 = sub_10022D014((uint64_t)v72);
      v74 = objc_claimAutoreleasedReturnValue(v73);
      v75 = *(void **)(a1 + 48);
      *(_QWORD *)(a1 + 48) = v74;

      kmlUtilLogLargeData(CFSTR("plaintext tracking request"), *(void **)(a1 + 48));
      v9 = v78;
      v7 = v79;
      v16 = v77;
      goto LABEL_34;
    }
    v11 = sub_10022925C(a1, v8);
    v16 = (id)objc_claimAutoreleasedReturnValue(v11);
    if (v16)
      goto LABEL_9;
    KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlSeManager buildTrackingRequestWithOpaqueAttestation:endpoint:anonymizedDsid:]", 468, CFSTR("Opaue attestation missing."), v12, v13, v14, v15, v76);
  }
LABEL_36:

}

_QWORD *sub_100227A28(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  void *v21;
  NSString *v22;
  uint64_t v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v40;
  id v41;
  NSErrorUserInfoKey v42;
  void *v43;

  v7 = a2;
  if (a1)
  {
    v8 = a1[6];
    if (v8)
    {
      v9 = a1[23];
      v41 = 0;
      v10 = SESEndPointPrivacyEncryption(v9, v8, &v41);
      v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      v12 = v41;
      if (v12)
      {
        v17 = v12;
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager encryptTrackingRequestWithEndpoint:]", 559, CFSTR("SEManager: Failed to encrypt tracking reques with - %@"), v13, v14, v15, v16, (uint64_t)v12);
        v18 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "userInfo"));
        v20 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v18, 28, v19));
        v21 = (void *)a1[15];
        a1[15] = v20;

      }
      else
      {
        v25 = objc_alloc((Class)DAAlishaKeyEncryptedRequest);
        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "version"));
        v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "ephemeralPublicKeydata"));
        v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "receiverPublicKeyHash"));
        v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "cipherText"));
        v18 = objc_msgSend(v25, "initWithVersion:ephemeralPublicKey:publicKeyHash:encryptedRequest:", v26, v27, v28, v29);

        v30 = sub_100229654(a1, v18, v7);
        v31 = objc_claimAutoreleasedReturnValue(v30);
        v17 = (void *)v31;
        if (!v31)
        {
          sub_100226BE4((uint64_t)a1, 6);
          v18 = v18;
          a1 = v18;
          goto LABEL_10;
        }
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager encryptTrackingRequestWithEndpoint:]", 568, CFSTR("SEManager: Failed to save tracking reques with - %@"), v32, v33, v34, v35, v31);
        v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
        v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "userInfo"));
        v37 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v19, 28, v36));
        v38 = (void *)a1[15];
        a1[15] = v37;

      }
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager encryptTrackingRequestWithEndpoint:]", 551, CFSTR("SEManager: Failed to create tracking request"), v3, v4, v5, v6, v40);
      v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
      v42 = NSLocalizedDescriptionKey;
      v22 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(28));
      v11 = (void *)objc_claimAutoreleasedReturnValue(v22);
      v43 = v11;
      v18 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v43, &v42, 1));
      v23 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v17, 28, v18));
      v24 = (void *)a1[15];
      a1[15] = v23;

    }
    a1 = 0;
LABEL_10:

  }
  return a1;
}

uint64_t sub_100227D58(uint64_t result)
{
  if (result)
    return (*(_DWORD *)(result + 16) << 16);
  return result;
}

dispatch_queue_t *sub_100227D68(dispatch_queue_t *a1)
{
  dispatch_queue_t *v1;
  NSObject *v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  void (*v9)(uint64_t);
  id v10;

  v1 = a1;
  if (a1)
  {
    v5 = 0;
    v6 = &v5;
    v7 = 0x3032000000;
    v8 = sub_100227E40;
    v9 = sub_100227E50;
    v10 = 0;
    dispatch_assert_queue_not_V2(a1[16]);
    v2 = v1[16];
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_100227E58;
    v4[3] = &unk_1003044E0;
    v4[4] = v1;
    v4[5] = &v5;
    dispatch_sync(v2, v4);
    v1 = (dispatch_queue_t *)(id)v6[5];
    _Block_object_dispose(&v5, 8);

  }
  return v1;
}

void sub_100227E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100227E40(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100227E50(uint64_t a1)
{

}

void sub_100227E58(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id obj;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 184);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  obj = *(id *)(v3 + 40);
  SESEndPointConfigureNFCExpressInLPM(0, 0, v2, 1, &obj);
  objc_storeStrong((id *)(v3 + 40), obj);
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager disableNfcExpress_sync]_block_invoke", 225, CFSTR("disable nfc express mode in full power mode, result - %@"), v4, v5, v6, v7, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
}

void sub_100227EDC(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[5];

  if (a1)
  {
    v1 = *(NSObject **)(a1 + 128);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100227F38;
    block[3] = &unk_100302AA0;
    block[4] = a1;
    dispatch_async(v1, block);
  }
}

void sub_100227F38(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  KmlDeviceConfigurationData *v11;
  void *v12;
  id *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id *v21;
  void *v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[4];
  id v40;
  id v41;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 176);
  v41 = 0;
  v3 = sub_100255878((uint64_t)KmlEndpointManager, v2, &v41);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v5 = v41;
  v10 = v5;
  if (v4)
  {
    v11 = [KmlDeviceConfigurationData alloc];
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "deviceConfiguration"));
    v13 = (id *)sub_10022D114((uint64_t)v11, v12);

    sub_10022E9EC((uint64_t)v13, v14, v15, v16, v17, v18, v19, v20, v37);
    v21 = sub_10022D6EC(v13);
    v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
    v23 = kmlUtilHexStringFromData(v22);
    v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager disableUwbTransport]_block_invoke", 244, CFSTR("DeviceConfigData: %@"), v25, v26, v27, v28, (uint64_t)v24);

    v29 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 184);
    v39[0] = _NSConcreteStackBlock;
    v39[1] = 3221225472;
    v39[2] = sub_1002280D0;
    v39[3] = &unk_10030F0E0;
    v40 = v22;
    v30 = v22;
    v31 = SESEndPointUpdateWithBlock(v29, v39);
    v36 = (void *)objc_claimAutoreleasedReturnValue(v31);
    if (v36)
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager disableUwbTransport]_block_invoke", 258, CFSTR("SEManager: Could not update endpoint"), v32, v33, v34, v35, v38);

  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlSeManager disableUwbTransport]_block_invoke", 237, CFSTR("No endpoint found: %@"), v6, v7, v8, v9, (uint64_t)v5);
  }

}

void sub_1002280D0(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = a2;
  objc_msgSend(v3, "setDeviceConfiguration:", v2);
  objc_msgSend(v3, "setBleDCKIdentifier:", 0);
  objc_msgSend(v3, "setBleOOBKey:", 0);
  objc_msgSend(v3, "setSupportedRKEFunctions:", 0);
  objc_msgSend(v3, "setBleUUID:", 0);

}

void sub_100228138(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = a1 + 32;
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(v11 + 8);
  if (v10 <= *(_QWORD *)(v9 + 8))
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager setCurrentState:]_block_invoke", 268, CFSTR("SEManager: Current state higher than new state. Do nothing"), a5, a6, a7, a8, a9);
  else
    sub_100228168(v9, v10, a3, a4, a5, a6, a7, a8, a9);
}

void sub_100228168(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __CFString *v17;
  uint64_t v18;
  id **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id WeakRetained;
  uint64_t v27;
  uint64_t v28;
  id obj;
  id obja;
  _QWORD v31[5];

  if (a1)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager setCurrentState_sync:]", 278, CFSTR("SEManager: Current state %ld, new state %ld"), a5, a6, a7, a8, *(_QWORD *)(a1 + 8));
    v15 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v15;
    switch(a2)
    {
      case 1:
        v16 = *(_QWORD *)(a1 + 32);
        v31[0] = _NSConcreteStackBlock;
        v31[1] = 3221225472;
        v31[2] = sub_100228364;
        v31[3] = &unk_10030F108;
        v31[4] = a1;
        SESEndPointPreWarm(v16, v31);
        return;
      case 2:
        v17 = CFSTR("Done with pre-warm. Waiting for next steps.");
        v18 = 303;
        goto LABEL_11;
      case 3:
        v17 = CFSTR("SEManager: No pre-conditions currently");
        v18 = 307;
        goto LABEL_11;
      case 4:
        v19 = sub_1002284A4((id **)a1);
        v20 = objc_claimAutoreleasedReturnValue(v19);
        obj = (id)v20;
        if (v20)
        {
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager setCurrentState_sync:]", 313, CFSTR("SEManager: error while creating endpoint - %@"), v21, v22, v23, v24, v20);
          objc_storeStrong((id *)(a1 + 120), obj);
          v25 = 7;
        }
        else
        {
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager setCurrentState_sync:]", 318, CFSTR("SEManager: Endpoint created successfully. Time to track the key."), v21, v22, v23, v24, v28);
          v25 = 5;
        }
        sub_100226BE4(a1, v25);
        goto LABEL_17;
      case 5:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager setCurrentState_sync:]", 325, CFSTR("SEManager: Ready to create key tracking request."), v11, v12, v13, v14, v28);
        WeakRetained = objc_loadWeakRetained((id *)(a1 + 136));
        obj = WeakRetained;
        v27 = 0;
        goto LABEL_13;
      case 6:
        v17 = CFSTR("SEManager: Tracking request created. All Done");
        v18 = 330;
LABEL_11:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager setCurrentState_sync:]", v18, v17, v11, v12, v13, v14, a9);
        break;
      case 7:
        WeakRetained = objc_loadWeakRetained((id *)(a1 + 136));
        obj = WeakRetained;
        v27 = *(_QWORD *)(a1 + 120);
LABEL_13:
        objc_msgSend(WeakRetained, "handleKeyCreationCompletionResult:", v27);
LABEL_17:

        break;
      case 8:
        obja = objc_loadWeakRetained((id *)(a1 + 136));
        objc_msgSend(obja, "handleKeyCreationCancellationResult:", 1);

        break;
      default:
        return;
    }
  }
}

void sub_100228364(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(NSObject **)(v4 + 128);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1002283E4;
  v7[3] = &unk_100304370;
  v7[4] = v4;
  v8 = v3;
  v6 = v3;
  dispatch_async(v5, v7);

}

void sub_1002283E4(uint64_t a1)
{
  void *v2;
  void *v3;
  id WeakRetained;
  id v5;

  sub_100226BE4(*(_QWORD *)(a1 + 32), 2);
  if (*(_QWORD *)(a1 + 40))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "userInfo"));
    v5 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v2, 19, v3));

  }
  else
  {
    v5 = 0;
  }
  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 136));
  objc_msgSend(WeakRetained, "handlePreWarmResult:", v5);

}

id **sub_1002284A4(id **a1)
{
  id **v1;
  uint64_t v2;
  SEEndPointConfiguration *v3;
  void *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  id *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSNumber *v32;
  void *v33;
  NSString *v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  NSString *v39;
  NSNumber *v40;
  unsigned int v41;
  id v42;
  void *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id *v49;
  id *v50;
  id *v51;
  id *v52;
  _QWORD *v53;
  void *v54;
  id v55;
  id *v56;
  id *v57;
  id *v58;
  void *v59;
  uint64_t v60;
  void *v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  void *v68;
  uint64_t v69;
  id *v70;
  void *v71;
  uint64_t v72;
  id *v73;
  void *v74;
  uint64_t v75;
  id *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  id *v81;
  id *v82;
  id *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  id v89;
  void *v90;
  id v91;
  NSString *v92;
  void *v93;
  void *v94;
  id v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  id *v102;
  id v103;
  uint64_t v104;
  id *v105;
  id *v106;
  id *v107;
  id *v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  id **v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  void *v119;
  void *v120;
  id v121;
  id v122;
  void *v123;
  id v124;
  void *v125;
  id v126[2];
  _QWORD v127[2];
  _QWORD v128[2];
  _QWORD v129[2];
  _QWORD v130[2];
  _QWORD v131[2];
  _QWORD v132[2];

  v1 = a1;
  if (a1)
  {
    v2 = sub_100252FA4((uint64_t)a1[3]);
    v3 = +[SEEndPointConfiguration configurationWithOpt1:opt2:](SEEndPointConfiguration, "configurationWithOpt1:opt2:", v2, sub_1002530BC((uint64_t)v1[3]));
    v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    if (v4)
    {
      v5 = sub_1002530BC((uint64_t)v1[3]);
      if (!kmlUtilIsFleetKey(v5))
        goto LABEL_7;
      if (isInternalBuild())
      {
        v10 = objc_msgSend(objc_alloc((Class)NSUserDefaults), "initWithSuiteName:", CFSTR("com.apple.seserviced"));
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKey:", CFSTR("AllowFleetOP")));

        if (v11)
        {
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager createEndPoint]", 358, CFSTR("Allow Owner Pairing attempt with a fleet car"), v6, v7, v8, v9, v116);

LABEL_7:
          v12 = sub_100251280((uint64_t)v1[3]);
          v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
          v122 = objc_msgSend(v13, "copy");

          v14 = sub_100252694((uint64_t)v1[3]);
          v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
          v16 = objc_msgSend(v15, "copy");

          v17 = sub_1002527AC((uint64_t)v1[3]);
          v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
          v19 = objc_msgSend(v18, "copy");

          v20 = sub_100251398((uint64_t)v1[3]);
          v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
          v22 = objc_msgSend(v21, "copy");

          v23 = sub_10025257C((uint64_t)v1[3]);
          v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
          v125 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", v24));

          v25 = sub_100254600((uint64_t)KmlEndpointManager, CFSTR("OWNR"));
          v26 = objc_claimAutoreleasedReturnValue(v25);
          v27 = v1[18];
          v1[18] = (id *)v26;

          v124 = v19;
          v121 = v22;
          if (objc_msgSend(v1[13], "agreedKmlVehicleVersion") == 768)
          {
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager createEndPoint]", 380, CFSTR("getting v3 mailbox data sizes"), v28, v29, v30, v31, 0);
            if (sub_100252E30((uint64_t)v1[3]))
            {
              v32 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", sub_100252E30((uint64_t)v1[3]));
              v123 = (void *)objc_claimAutoreleasedReturnValue(v32);
            }
            else
            {
              v123 = 0;
            }
            if (sub_100252C04((uint64_t)v1[3]))
            {
              v41 = sub_100252C04((uint64_t)v1[3]);
LABEL_21:
              v42 = v16;
              v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v41));
              goto LABEL_23;
            }
          }
          else
          {
            if (sub_100252AF0((uint64_t)v1[3]))
            {
              v40 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", sub_100252AF0((uint64_t)v1[3]));
              v123 = (void *)objc_claimAutoreleasedReturnValue(v40);
            }
            else
            {
              v123 = 0;
            }
            if (sub_1002529DC((uint64_t)v1[3]))
            {
              v41 = sub_1002529DC((uint64_t)v1[3]);
              goto LABEL_21;
            }
          }
          v42 = v16;
          v43 = 0;
LABEL_23:
          v44 = objc_msgSend(v43, "unsignedIntValue");
          objc_msgSend(v123, "unsignedIntValue");
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager createEndPoint]", 389, CFSTR("getting mailbox data sizes: private: 0x%04x, confidential: 0x%04x"), v45, v46, v47, v48, (uint64_t)v44);
          v49 = v1[7];
          v50 = v1[8];
          v51 = v1[18];
          v52 = v1[4];
          v53 = sub_100253884(v1[3]);
          v54 = (void *)objc_claimAutoreleasedReturnValue(v53);
          v55 = sub_1002528C4((uint64_t)v1[3]);
          v126[1] = 0;
          v120 = v43;
          v119 = (void *)objc_claimAutoreleasedReturnValue(v55);
          v35 = v42;
          v56 = v51;
          v57 = v52;
          v58 = v51;
          v59 = v121;
          v33 = v122;
          v60 = SESEndPointCreateForAlishaWithSession(v49, v50, v56, v57, v58, v4, v121, v122);
          v61 = (void *)objc_claimAutoreleasedReturnValue(v60);
          v62 = 0;

          if (v62)
          {
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager createEndPoint]", 408, CFSTR("Error in creating endpoint : %@"), v63, v64, v65, v66, (uint64_t)v62);
            v67 = sesErrorToKmlError(v62, 0xFu);
            v1 = (id **)objc_claimAutoreleasedReturnValue(v67);
          }
          else
          {
            v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v61, "certificates"));
            v69 = objc_claimAutoreleasedReturnValue(objc_msgSend(v68, "objectAtIndexedSubscript:", 0));
            v70 = v1[19];
            v1[19] = (id *)v69;

            v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v61, "certificates"));
            v72 = objc_claimAutoreleasedReturnValue(objc_msgSend(v71, "objectAtIndexedSubscript:", 1));
            v73 = v1[20];
            v1[20] = (id *)v72;

            v74 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v61, "certificates"));
            v75 = objc_claimAutoreleasedReturnValue(objc_msgSend(v74, "objectAtIndexedSubscript:", 2));
            v76 = v1[21];
            v1[21] = (id *)v75;

            v81 = v1[19];
            if (v81)
            {
              if (objc_msgSend(v81, "length"))
              {
                v82 = v1[20];
                if (v82)
                {
                  if (objc_msgSend(v82, "length"))
                  {
                    v83 = v1[21];
                    if (v83)
                    {
                      if (objc_msgSend(v83, "length"))
                      {
                        v36 = v124;
                        v88 = v120;
                        if (objc_msgSend(v1[13], "agreedKmlVehicleVersion") == 768)
                        {
                          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager createEndPoint]", 427, CFSTR("getting v3 mailbox data sizes"), v84, v85, v86, v87, (uint64_t)v54);
                          v89 = sub_100253644(v1[3]);
                          v90 = (void *)objc_claimAutoreleasedReturnValue(v89);
                          v91 = sub_100253404(v1[3]);
                        }
                        else
                        {
                          v96 = sub_1002532EC((uint64_t)v1[3]);
                          v90 = (void *)objc_claimAutoreleasedReturnValue(v96);
                          v91 = sub_1002531D4((uint64_t)v1[3]);
                        }
                        v118 = (void *)objc_claimAutoreleasedReturnValue(v91);
                        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager createEndPoint]", 434, CFSTR("SEManager: EndPoint created, setting MailBoxes configuration %@ %@"), v97, v98, v99, v100, (uint64_t)v90);
                        v101 = objc_claimAutoreleasedReturnValue(objc_msgSend(v61, "publicKeyIdentifier"));
                        v102 = v1[22];
                        v1[22] = (id *)v101;

                        v103 = kmlUtilHexStringFromData(v1[22]);
                        v104 = objc_claimAutoreleasedReturnValue(v103);
                        v105 = v1[23];
                        v1[23] = (id *)v104;

                        v106 = v1[7];
                        v107 = v1[8];
                        v108 = v1[23];
                        v126[0] = 0;
                        SESEndPointConfigureMailBoxesWithSession(v106, v107, v108, v90, v118, v126);
                        v109 = v126[0];
                        if (v109)
                        {
                          v114 = v109;
                          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager createEndPoint]", 447, CFSTR("SEManager: Could not configure Mailboxes"), v110, v111, v112, v113, v117);
                        }
                        else
                        {
                          v115 = sub_100228D04(v1);
                          v114 = (void *)objc_claimAutoreleasedReturnValue(v115);
                        }
                        v62 = v114;

                        v1 = (id **)v62;
                        goto LABEL_35;
                      }
                    }
                  }
                }
              }
            }
            KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlSeManager createEndPoint]", 420, CFSTR("Missing attestations"), v77, v78, v79, v80, (uint64_t)v54);
            v62 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
            v127[0] = NSLocalizedDescriptionKey;
            v92 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(6));
            v93 = (void *)objc_claimAutoreleasedReturnValue(v92);
            v127[1] = NSLocalizedFailureReasonErrorKey;
            v128[0] = v93;
            v128[1] = CFSTR("Missing attestations");
            v94 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v128, v127, 2));
            v1 = (id **)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v62, 6, v94));

            v59 = v121;
          }
          v36 = v124;
          v88 = v120;
LABEL_35:

          goto LABEL_36;
        }
      }
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlSeManager createEndPoint]", 360, CFSTR("Owner Pairing attempt with a fleet car blocked"), v6, v7, v8, v9, v116);
      v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
      v129[0] = NSLocalizedDescriptionKey;
      v39 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(33));
      v35 = (void *)objc_claimAutoreleasedReturnValue(v39);
      v129[1] = NSLocalizedFailureReasonErrorKey;
      v130[0] = v35;
      v130[1] = CFSTR("OwnerPairing with fleet cars blocked");
      v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v130, v129, 2));
      v37 = v33;
      v38 = 33;
    }
    else
    {
      v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
      v131[0] = NSLocalizedDescriptionKey;
      v34 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(6));
      v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
      v131[1] = NSLocalizedFailureReasonErrorKey;
      v132[0] = v35;
      v132[1] = CFSTR("Invalid endpoint configuration option group values (RFU bits set)");
      v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v132, v131, 2));
      v37 = v33;
      v38 = 6;
    }
    v1 = (id **)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v37, v38, v36));
LABEL_36:

  }
  return v1;
}

id **sub_100228D04(id **a1)
{
  id **v1;
  id *v2;
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id *v11;
  id *v12;
  id *v13;
  uint64_t v14;
  uint64_t PrivateDataWithSession;
  id *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  unsigned int v23;
  char v24;
  size_t v25;
  unsigned __int8 v26;
  id *v27;
  id *v28;
  id *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  size_t v37;
  id v38;
  id v39;
  id *v40;
  id *v41;
  id *v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  KmlDeviceConfigurationData *v49;
  id *v50;
  void *v51;
  id *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id *v60;
  void *v61;
  id v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  id *v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  void *v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  id *v94;
  id v95;
  void *v96;
  id *v97;
  id v98;
  id v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD v110[4];
  id *v111;
  id v112;
  id v113;
  id **v114;
  id v115;
  id v116;
  id v117;
  char v118;
  id v119;

  v1 = a1;
  if (a1)
  {
    v2 = sub_100253664(a1[3]);
    v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
    v4 = kmlUtilHexStringFromData(v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager saveMetaDataOnEndpoint]", 666, CFSTR("MailboxMappingData: %@"), v6, v7, v8, v9, (uint64_t)v5);

    v10 = sub_10022A0B4((char *)[KmlMailboxMappingData alloc], v3, (__int16)objc_msgSend(v1[13], "agreedKmlVehicleVersion"));
    if (objc_msgSend(v1[13], "agreedKmlVehicleVersion") == 768)
    {
      v11 = v1[7];
      v12 = v1[8];
      v13 = v1[23];
      v14 = sub_10022AB38((uint64_t)v10);
      v119 = 0;
      PrivateDataWithSession = SESEndPointGetPrivateDataWithSession(v11, v12, v13, 0, v14, &v119);
      v16 = (id *)objc_claimAutoreleasedReturnValue(PrivateDataWithSession);
      v17 = v119;
      if (v17)
      {
        v22 = v17;
        KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlSeManager saveMetaDataOnEndpoint]", 684, CFSTR("Error while getting private mailbox %@"), v18, v19, v20, v21, (uint64_t)v17);
        v1 = v22;
LABEL_22:

        return v1;
      }
      v35 = objc_msgSend(objc_alloc((Class)NSMutableData), "initWithData:", v16);
      kmlUtilLogLargeData(CFSTR("Private Mailbox Data"), v35);
      v118 = 0x80;
      objc_msgSend(v35, "replaceBytesInRange:withBytes:", 0, 1, &v118);
      v36 = sub_10022AB38((uint64_t)v10);
      v37 = v36 - sub_10022AB2C((uint64_t)v10);
      v38 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithLength:](NSMutableData, "dataWithLength:", v37)));
      v39 = objc_msgSend(v38, "mutableBytes");
      memset(v39, 255, v37);
      objc_msgSend(v35, "replaceBytesInRange:withBytes:", sub_10022AB2C((uint64_t)v10), v37, v39);
      kmlUtilLogLargeData(CFSTR("Private data to set"), v35);
      v40 = v1[7];
      v41 = v1[8];
      v42 = v1[23];
      v117 = 0;
      SESEndPointSetPrivateDataWithSession(v40, v41, v42, v35, 0, &v117);
      v43 = v117;
      if (v43)
      {
        v48 = v43;
        KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlSeManager saveMetaDataOnEndpoint]", 710, CFSTR("Failed to initialize version and slotIDList in mailbox: %@"), v44, v45, v46, v47, (uint64_t)v43);
        v1 = v48;

        goto LABEL_22;
      }

      v30 = 0;
    }
    else
    {
      v23 = sub_10022AB08((uint64_t)v10);
      if (!v23)
      {
        v30 = 0;
        goto LABEL_11;
      }
      v24 = v23;
      v25 = 7 * v23;
      v16 = (id *)objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithLength:](NSMutableData, "dataWithLength:", v25)));
      memset(objc_msgSend(v16, "mutableBytes"), 255, v25);
      v26 = v24 + sub_10022AB20((uint64_t)v10);
      v27 = v1[7];
      v28 = v1[8];
      v29 = v1[23];
      v116 = 0;
      SESEndPointSetPrivateDataWithSession(v27, v28, v29, v16, v26, &v116);
      v30 = v116;
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager saveMetaDataOnEndpoint]", 737, CFSTR("Friend SlotId initialization result: %@"), v31, v32, v33, v34, (uint64_t)v30);
    }

LABEL_11:
    v49 = [KmlDeviceConfigurationData alloc];
    v50 = sub_100253680(v1[3]);
    v51 = (void *)objc_claimAutoreleasedReturnValue(v50);
    v52 = (id *)sub_10022D114((uint64_t)v49, v51);

    if (!*((_BYTE *)v1 + 96))
      sub_10022E9EC((uint64_t)v52, v53, v54, v55, v56, v57, v58, v59, v107);
    v60 = sub_10022D6EC(v52);
    v61 = (void *)objc_claimAutoreleasedReturnValue(v60);
    v62 = kmlUtilHexStringFromData(v61);
    v63 = (void *)objc_claimAutoreleasedReturnValue(v62);
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager saveMetaDataOnEndpoint]", 748, CFSTR("DeviceConfigData: %@"), v64, v65, v66, v67, (uint64_t)v63);

    if (sub_100219A6C((_BOOL8)v1[13]))
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager saveMetaDataOnEndpoint]", 751, CFSTR("Car supports online ble keys"), v68, v69, v70, v71, v108);
      v72 = sub_1002225AC((uint64_t)v52);
      v73 = (void *)objc_claimAutoreleasedReturnValue(v72);
      v74 = objc_msgSend(v73, "length");

      if (v74)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager saveMetaDataOnEndpoint]", 753, CFSTR("Override spake derived ble_intro_key with car provided one"), v75, v76, v77, v78, v109);
        v79 = sub_1002225AC((uint64_t)v52);
        v80 = objc_claimAutoreleasedReturnValue(v79);
        v81 = v1[9];
        v1[9] = (id *)v80;

      }
      v82 = sub_1002225B8((uint64_t)v52);
      v83 = objc_claimAutoreleasedReturnValue(v82);
      if (v83)
      {
        v84 = (void *)v83;
        v85 = sub_1002225B8((uint64_t)v52);
        v86 = (void *)objc_claimAutoreleasedReturnValue(v85);
        v87 = objc_msgSend(v86, "length");

        if (v87)
        {
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager saveMetaDataOnEndpoint]", 758, CFSTR("Override spake derived ble_oob_master_key with car provided one"), v88, v89, v90, v91, v109);
          v92 = sub_1002225B8((uint64_t)v52);
          v93 = objc_claimAutoreleasedReturnValue(v92);
          v94 = v1[10];
          v1[10] = (id *)v93;

        }
      }
    }
    v95 = sub_1002198D8(v1[13]);
    v96 = (void *)objc_claimAutoreleasedReturnValue(v95);
    v97 = v1[23];
    v110[0] = _NSConcreteStackBlock;
    v110[1] = 3221225472;
    v110[2] = sub_1002297EC;
    v110[3] = &unk_10030F158;
    v16 = v52;
    v111 = v16;
    v112 = v3;
    v98 = v61;
    v113 = v98;
    v114 = v1;
    v99 = v96;
    v115 = v99;
    v100 = SESEndPointUpdateWithBlock(v97, v110);
    v101 = (void *)objc_claimAutoreleasedReturnValue(v100);

    if (v101)
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlSeManager saveMetaDataOnEndpoint]", 800, CFSTR("SEManager: Could not update endpoint %@"), v102, v103, v104, v105, (uint64_t)v101);
    v1 = v101;

    goto LABEL_22;
  }
  return v1;
}

id sub_10022925C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  char *v7;
  __int16 v8;
  unsigned __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t PrivateData;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  id v43;
  uint64_t v44;
  void *i;
  id *v46;
  int v47;
  id *v48;
  void *v49;
  id v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id *v56;
  uint64_t v58;
  void *v59;
  id v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  id v65;
  char v66;
  id v67;
  _BYTE v68[128];

  v3 = a2;
  if (a1)
  {
    v4 = objc_alloc((Class)NSData);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "mailboxMapping"));
    v6 = objc_msgSend(v4, "initWithData:", v5);

    v7 = sub_10022A0B4((char *)[KmlMailboxMappingData alloc], v6, (__int16)objc_msgSend(*(id *)(a1 + 104), "agreedKmlVehicleVersion"));
    v8 = sub_10022AAF0((uint64_t)v7);
    v9 = v8 - sub_10022AAE4((uint64_t)v7);
    v10 = *(_QWORD *)(a1 + 184);
    v11 = sub_10022AAE4((uint64_t)v7);
    v67 = 0;
    PrivateData = SESEndPointGetPrivateData(v10, v11, v9, &v67);
    v13 = (void *)objc_claimAutoreleasedReturnValue(PrivateData);
    v14 = v67;
    if (v14)
    {
      v19 = v14;
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlSeManager getOpaqueFromEndpoint:]", 612, CFSTR("Error while getting signaling bitmap %@"), v15, v16, v17, v18, (uint64_t)v14);
      v20 = 0;
    }
    else
    {
      kmlUtilLogLargeData(CFSTR("Private data"), v13);
      v21 = objc_msgSend(objc_alloc((Class)NSMutableData), "initWithData:", v13);
      v22 = objc_retainAutorelease(v13);
      v23 = *(unsigned __int8 *)objc_msgSend(v22, "bytes");
      if ((sub_10022AA0C((uint64_t)v7, v23) & 1) != 0)
      {
        v66 = v23 & sub_10022AA6C((uint64_t)v7);
        objc_msgSend(v21, "replaceBytesInRange:withBytes:", 0, 1, &v66);
        v28 = sub_10022AB44((uint64_t)v7);
        v60 = v21;
        v29 = (unsigned __int16)(v28 - sub_10022AAE4((uint64_t)v7));
        v58 = sub_10022AB14((uint64_t)v7);
        KmlLogFunc2(OS_LOG_TYPE_DEBUG, (uint64_t)"-[KmlSeManager getOpaqueFromEndpoint:]", 633, CFSTR("KeyAttestation offsets: start (%02X), length(%02X)"), v30, v31, v32, v33, v29);
        v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "subdataWithRange:", v29, v58));
        objc_msgSend(v21, "resetBytesInRange:", v29, v58);
        v35 = *(_QWORD *)(a1 + 184);
        v36 = sub_10022AAE4((uint64_t)v7);
        v65 = 0;
        SESEndPointSetPrivateData(v35, v21, v36, &v65);
        v37 = v65;
        v19 = v37;
        if (v37)
        {
          KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlSeManager getOpaqueFromEndpoint:]", 645, CFSTR("Failed to read and reset keyAttestation in private mailbox %@"), v38, v39, v40, v41, (uint64_t)v37);
          v20 = 0;
        }
        else
        {
          v42 = sub_10022C7A4((uint64_t)KmlTlv, v34);
          v61 = 0u;
          v62 = 0u;
          v63 = 0u;
          v64 = 0u;
          v43 = (id)objc_claimAutoreleasedReturnValue(v42);
          v20 = objc_msgSend(v43, "countByEnumeratingWithState:objects:count:", &v61, v68, 16);
          if (v20)
          {
            v59 = v34;
            v44 = *(_QWORD *)v62;
            while (2)
            {
              for (i = 0; i != v20; i = (char *)i + 1)
              {
                if (*(_QWORD *)v62 != v44)
                  objc_enumerationMutation(v43);
                v46 = *(id **)(*((_QWORD *)&v61 + 1) + 8 * (_QWORD)i);
                v47 = sub_100055868((uint64_t)v46);
                if (isDeviceKeyAttestationTag(v47))
                {
                  v48 = sub_10022CD6C(v46);
                  v49 = (void *)objc_claimAutoreleasedReturnValue(v48);
                  v50 = kmlUtilHexStringFromData(v49);
                  v51 = (void *)objc_claimAutoreleasedReturnValue(v50);
                  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager getOpaqueFromEndpoint:]", 653, CFSTR("Opaque found in key attestation Data : %@"), v52, v53, v54, v55, (uint64_t)v51);

                  v56 = sub_10022CD6C(v46);
                  v20 = (id)objc_claimAutoreleasedReturnValue(v56);
                  goto LABEL_18;
                }
              }
              v20 = objc_msgSend(v43, "countByEnumeratingWithState:objects:count:", &v61, v68, 16);
              if (v20)
                continue;
              break;
            }
LABEL_18:
            v34 = v59;
            v21 = v60;
          }

        }
      }
      else
      {
        KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlSeManager getOpaqueFromEndpoint:]", 621, CFSTR("As per signaling bitmap (%02X), opaque attestation is not set"), v24, v25, v26, v27, v23);
        v19 = 0;
        v20 = 0;
      }

    }
  }
  else
  {
    v20 = 0;
  }

  return v20;
}

id sub_100229654(id a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  _QWORD v25[4];
  id v26;
  id v27;
  id v28;

  v5 = a3;
  if (a1)
  {
    v28 = 0;
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "encodeWithError:", &v28));
    v7 = v28;
    if (v7)
      v12 = 1;
    else
      v12 = v6 == 0;
    if (v12)
    {
      v13 = v7;
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlSeManager saveTrackingRequest:endpoint:]", 582, CFSTR("Encode key tracking request error %@, trackingRequestData=%@"), v8, v9, v10, v11, (uint64_t)v7);
      a1 = v13;
    }
    else
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "publicKeyIdentifier"));
      v15 = kmlUtilHexStringFromData(v14);
      v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
      v25[0] = _NSConcreteStackBlock;
      v25[1] = 3221225472;
      v25[2] = sub_1002297A0;
      v25[3] = &unk_10030F130;
      v26 = v6;
      v27 = a1;
      v17 = SESEndPointUpdateWithBlock(v16, v25);
      v18 = (void *)objc_claimAutoreleasedReturnValue(v17);

      if (v18)
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager saveTrackingRequest:endpoint:]", 592, CFSTR("SEManager: Could not update endpoint"), v19, v20, v21, v22, v24);
      a1 = v18;

    }
  }

  return a1;
}

void sub_1002297A0(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = a2;
  objc_msgSend(v4, "setTrackingRequest:", v3);
  objc_msgSend(v4, "setAnonymizedDsid:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 112));

}

void sub_1002297EC(_QWORD *a1, void *a2)
{
  uint64_t v3;
  id v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  id DckIdFromSlotId;
  id OOBKey;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  void *v23;
  id v24;

  v3 = a1[4];
  v4 = a2;
  v5 = sub_10021728C(v3);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  objc_msgSend(v4, "setReaderConfigID:", v6);

  objc_msgSend(v4, "setMailboxMapping:", a1[5]);
  objc_msgSend(v4, "setDeviceConfiguration:", a1[6]);
  v7 = sub_100253884(*(_QWORD **)(a1[7] + 24));
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  objc_msgSend(v4, "setReaderInfo:", v8);

  objc_msgSend(v4, "setFriendlyName:", *(_QWORD *)(a1[7] + 40));
  v9 = sub_100217298(*(_QWORD *)(a1[7] + 24));
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  objc_msgSend(v4, "setReaderLongTermPublicKeyCertificate:", v10);

  objc_msgSend(v4, "setBleIntroKey:", *(_QWORD *)(a1[7] + 72));
  objc_msgSend(v4, "setBleOOBMasterKey:", *(_QWORD *)(a1[7] + 80));
  objc_msgSend(v4, "setLongTermSharedSecret:", *(_QWORD *)(a1[7] + 88));
  v11 = sub_1002528C4(*(_QWORD *)(a1[7] + 24));
  v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  objc_msgSend(v4, "setSlotIdentifier:", v12);

  v13 = sub_1002528C4(*(_QWORD *)(a1[7] + 24));
  v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
  DckIdFromSlotId = kmlUtilGetDckIdFromSlotId(v14);
  v24 = (id)objc_claimAutoreleasedReturnValue(DckIdFromSlotId);

  OOBKey = kmlUtilGetOOBKey(*(void **)(a1[7] + 80), v24);
  v23 = (void *)objc_claimAutoreleasedReturnValue(OOBKey);
  KmlLogFunc2(OS_LOG_TYPE_DEBUG, (uint64_t)"-[KmlSeManager saveMetaDataOnEndpoint]_block_invoke", 791, CFSTR("DCK_Id : %@, OOB_Key : %@"), v17, v18, v19, v20, (uint64_t)v24);
  objc_msgSend(v4, "setBleDCKIdentifier:", v24);
  objc_msgSend(v4, "setBleOOBKey:", v23);
  objc_msgSend(v4, "setVehicleSupportedVersionsData:", a1[8]);
  v21 = sub_100252E40(*(_QWORD *)(a1[7] + 24));
  v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
  objc_msgSend(v4, "setMailboxSizesPlusAdditionalData:", v22);

}

id *sub_1002299C0(id *result, void *a2)
{
  if (result)
    return (id *)objc_storeWeak(result + 17, a2);
  return result;
}

uint64_t sub_1002299D0(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 152);
  return result;
}

uint64_t sub_1002299DC(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 160);
  return result;
}

uint64_t sub_1002299E8(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 168);
  return result;
}

uint64_t sub_1002299F4(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 176);
  return result;
}

uint64_t sub_100229A00(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 184);
  return result;
}

id sub_100229B10(uint64_t a1, __int16 a2, void *a3)
{
  id v5;
  id v6;

  v5 = a3;
  objc_opt_self(a1);
  v6 = sub_100229B6C([KmlApduResponse alloc], a2, v5);

  return v6;
}

id sub_100229B6C(id a1, __int16 a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  __int16 v25;
  id v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  objc_super v31;
  _BYTE v32[128];

  v5 = a3;
  if (a1)
  {
    v31.receiver = a1;
    v31.super_class = (Class)KmlApduResponse;
    a1 = objc_msgSendSuper2(&v31, "init");
    if (a1)
    {
      v25 = a2;
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData data](NSMutableData, "data"));
      v27 = 0u;
      v28 = 0u;
      v29 = 0u;
      v30 = 0u;
      v26 = v5;
      v7 = v5;
      v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
      if (v8)
      {
        v9 = v8;
        v10 = *(_QWORD *)v28;
        do
        {
          for (i = 0; i != v9; i = (char *)i + 1)
          {
            if (*(_QWORD *)v28 != v10)
              objc_enumerationMutation(v7);
            v12 = *(_QWORD *)(*((_QWORD *)&v27 + 1) + 8 * (_QWORD)i);
            v13 = sub_10022D014(v12);
            v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlApduResponse initWithStatus:tlvArray:]", 49, CFSTR("TLV: add tlv %@ to response"), v15, v16, v17, v18, (uint64_t)v14);

            v19 = sub_10022D014(v12);
            v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
            objc_msgSend(v6, "appendData:", v20);

          }
          v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
        }
        while (v9);
      }

      v21 = objc_msgSend(v6, "copy");
      v22 = (void *)*((_QWORD *)a1 + 2);
      *((_QWORD *)a1 + 2) = v21;

      *((_WORD *)a1 + 4) = v25;
      v23 = (void *)*((_QWORD *)a1 + 4);
      *((_QWORD *)a1 + 4) = 0;

      v5 = v26;
    }
  }

  return a1;
}

id sub_100229D44(uint64_t a1, __int16 a2, void *a3)
{
  id v5;
  id v6;

  v5 = a3;
  objc_opt_self(a1);
  v6 = sub_100229DA0([KmlApduResponse alloc], a2, v5);

  return v6;
}

id sub_100229DA0(id a1, __int16 a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  objc_super v10;

  v5 = a3;
  if (a1)
  {
    v10.receiver = a1;
    v10.super_class = (Class)KmlApduResponse;
    a1 = objc_msgSendSuper2(&v10, "init");
    if (a1)
    {
      v6 = objc_msgSend(v5, "copy");
      v7 = (void *)*((_QWORD *)a1 + 2);
      *((_QWORD *)a1 + 2) = v6;

      *((_WORD *)a1 + 4) = a2;
      v8 = (void *)*((_QWORD *)a1 + 4);
      *((_QWORD *)a1 + 4) = 0;

    }
  }

  return a1;
}

id sub_100229E2C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id *v9;
  id v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v3 = a2;
  if (!a1)
  {
    v10 = 0;
    goto LABEL_17;
  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData data](NSMutableData, "data"));
  v9 = (id *)(a1 + 32);
  if (!*(_QWORD *)(a1 + 32))
  {
    v11 = a1 + 8;
    v12 = *(unsigned __int16 *)(a1 + 8);
    v13 = __rev16(v12);
    if (v3)
    {
      if (objc_msgSend(*(id *)(a1 + 16), "length") || v12 == 144 || (unsigned __int16)(v13 - 25088) > 0xFF00u)
      {
        v18 = sub_10024D6C8(v3, *(void **)(a1 + 16), *(_WORD *)(a1 + 8));
        v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
        v20 = 0;
        goto LABEL_11;
      }
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlApduResponse responseWithSecureChannel:]", 108, CFSTR("Response has 0 length payload and error status. No encryption needed."), v14, v15, v16, v17, v46);
    }
    v19 = 0;
    v20 = 0;
LABEL_11:
    v21 = kmlUtilHexStringFromData(*(void **)(a1 + 16));
    v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlApduResponse responseWithSecureChannel:]", 114, CFSTR("ResponseAPDU: PlainText Payload: %@"), v23, v24, v25, v26, (uint64_t)v22);

    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlApduResponse responseWithSecureChannel:]", 115, CFSTR("ResponseAPDU: PlainText Payload End ---"), v27, v28, v29, v30, v47);
    if (!v19 || v20)
    {
      objc_msgSend(v8, "appendData:", *(_QWORD *)(a1 + 16));
    }
    else
    {
      objc_msgSend(v8, "appendData:", v19);
      v31 = kmlUtilHexStringFromData(v19);
      v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlApduResponse responseWithSecureChannel:]", 118, CFSTR("ResponseAPDU: Encrypted Payload: %@"), v33, v34, v35, v36, (uint64_t)v32);

      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlApduResponse responseWithSecureChannel:]", 119, CFSTR("ResponseAPDU: Encrypted Payload End ---"), v37, v38, v39, v40, v48);
    }
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlApduResponse responseWithSecureChannel:]", 124, CFSTR("ResponseAPDU: Status: 0x%02x"), v41, v42, v43, v44, v13);
    objc_msgSend(v8, "appendBytes:length:", v11, 2);
    objc_storeStrong(v9, v8);
    v10 = v8;

    goto LABEL_16;
  }
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlApduResponse responseWithSecureChannel:]", 100, CFSTR("Response was encrypted already. Just send the same one"), v4, v5, v6, v7, v46);
  v10 = *v9;
LABEL_16:

LABEL_17:
  return v10;
}

char *sub_10022A0B4(char *a1, void *a2, __int16 a3)
{
  id v5;
  char *v6;
  void *v7;
  void *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id *v24;
  void *v25;
  id v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  void *i;
  id *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  id v45;
  id *v46;
  void *v47;
  id v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  id v56;
  id v57;
  uint64_t v58;
  void *j;
  _QWORD *v60;
  unint64_t v61;
  int v62;
  int v63;
  int v64;
  int v65;
  BOOL v66;
  int v67;
  unsigned int v68;
  uint64_t v70;
  char *v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  objc_super v84;
  _BYTE v85[128];
  _BYTE v86[128];
  _BYTE v87[128];

  v5 = a2;
  if (a1)
  {
    v84.receiver = a1;
    v84.super_class = (Class)KmlMailboxMappingData;
    v6 = (char *)objc_msgSendSuper2(&v84, "init");
    a1 = v6;
    if (v6)
    {
      v7 = (void *)*((_QWORD *)v6 + 2);
      *((_QWORD *)v6 + 2) = 0;

      *(_QWORD *)(a1 + 30) = 0;
      *((_WORD *)a1 + 13) = 0;
      a1[28] = 0;
      *(_QWORD *)(a1 + 38) = 0;
      *(_DWORD *)(a1 + 46) = 0;
      v8 = (void *)*((_QWORD *)a1 + 2);
      *((_QWORD *)a1 + 2) = 0;

      *((_WORD *)a1 + 12) = a3;
      v9 = (char *)objc_msgSend(objc_alloc((Class)NSUserDefaults), "initWithSuiteName:", CFSTR("com.apple.seserviced"));
      a1[29] = objc_msgSend(v9, "BOOLForKey:", CFSTR("UseOldSignalingBitmap"));
      if (v5)
      {
        v71 = v9;
        v14 = sub_10022C7A4((uint64_t)KmlTlv, v5);
        v80 = 0u;
        v81 = 0u;
        v82 = 0u;
        v83 = 0u;
        v9 = (char *)(id)objc_claimAutoreleasedReturnValue(v14);
        v15 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v80, v87, 16);
        if (v15)
        {
          v16 = v15;
          v17 = *(_QWORD *)v81;
LABEL_6:
          v18 = 0;
          while (1)
          {
            if (*(_QWORD *)v81 != v17)
              objc_enumerationMutation(v9);
            v19 = *(id **)(*((_QWORD *)&v80 + 1) + 8 * v18);
            if (sub_100055868((uint64_t)v19) == 32589)
              break;
            if (v16 == (id)++v18)
            {
              v16 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v80, v87, 16);
              if (v16)
                goto LABEL_6;
              goto LABEL_28;
            }
          }
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlMailboxMappingData initWithData:preferredVersion:]", 69, CFSTR("Found Mailbox mapping data to parse"), v20, v21, v22, v23, v70);
          v24 = sub_10022CD6C(v19);
          v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
          v26 = sub_10022C7A4((uint64_t)KmlTlv, v25);
          v27 = objc_claimAutoreleasedReturnValue(v26);
          v28 = (void *)*((_QWORD *)a1 + 1);
          *((_QWORD *)a1 + 1) = v27;

          v33 = *((unsigned __int16 *)a1 + 12);
          if (v33 == 256)
          {
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlMailboxMappingData initWithData:preferredVersion:]", 82, CFSTR("We will use spec_v1 mailboxMapping data"), v29, v30, v31, v32, v70);
            v45 = *((id *)a1 + 1);
            v34 = (id)*((_QWORD *)a1 + 2);
            *((_QWORD *)a1 + 2) = v45;
          }
          else
          {
            if (v33 != 768)
              goto LABEL_28;
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlMailboxMappingData initWithData:preferredVersion:]", 73, CFSTR("We prefer SharingInAChain version"), v29, v30, v31, v32, v70);
            v78 = 0u;
            v79 = 0u;
            v76 = 0u;
            v77 = 0u;
            v34 = *((id *)a1 + 1);
            v35 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v76, v86, 16);
            if (v35)
            {
              v36 = v35;
              v37 = *(_QWORD *)v77;
              while (2)
              {
                for (i = 0; i != v36; i = (char *)i + 1)
                {
                  if (*(_QWORD *)v77 != v37)
                    objc_enumerationMutation(v34);
                  v39 = *(id **)(*((_QWORD *)&v76 + 1) + 8 * (_QWORD)i);
                  if (sub_100055868((uint64_t)v39) == 96)
                  {
                    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlMailboxMappingData initWithData:preferredVersion:]", 76, CFSTR("Car sent SharingInAChain version mailboxMapping Data"), v40, v41, v42, v43, v70);
                    v46 = sub_10022CD6C(v39);
                    v47 = (void *)objc_claimAutoreleasedReturnValue(v46);
                    v48 = sub_10022C7A4((uint64_t)KmlTlv, v47);
                    v49 = objc_claimAutoreleasedReturnValue(v48);
                    v50 = (void *)*((_QWORD *)a1 + 2);
                    *((_QWORD *)a1 + 2) = v49;

                    goto LABEL_27;
                  }
                }
                v36 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v76, v86, 16);
                if (v36)
                  continue;
                break;
              }
            }
          }
LABEL_27:

        }
LABEL_28:

        if (objc_msgSend(*((id *)a1 + 2), "count"))
        {
          v74 = 0u;
          v75 = 0u;
          v72 = 0u;
          v73 = 0u;
          v55 = *((id *)a1 + 2);
          v56 = objc_msgSend(v55, "countByEnumeratingWithState:objects:count:", &v72, v85, 16);
          if (v56)
          {
            v57 = v56;
            v58 = *(_QWORD *)v73;
            do
            {
              for (j = 0; j != v57; j = (char *)j + 1)
              {
                if (*(_QWORD *)v73 != v58)
                  objc_enumerationMutation(v55);
                v60 = *(_QWORD **)(*((_QWORD *)&v72 + 1) + 8 * (_QWORD)j);
                switch(sub_100055868((uint64_t)v60))
                {
                  case 0xC0u:
                    *((_WORD *)a1 + 18) = sub_10022CEB0((uint64_t)v60);
                    *((_WORD *)a1 + 20) = sub_10022CEB0((uint64_t)v60);
                    break;
                  case 0xC1u:
                    *((_WORD *)a1 + 19) = sub_10022CEB0((uint64_t)v60);
                    *((_WORD *)a1 + 24) = sub_10022CEB0((uint64_t)v60);
                    break;
                  case 0xC2u:
                    *((_WORD *)a1 + 21) = sub_10022CEB0((uint64_t)v60);
                    *((_WORD *)a1 + 23) = sub_10022CEB0((uint64_t)v60);
                    break;
                  case 0xC3u:
                    *((_WORD *)a1 + 22) = sub_10022CEB0((uint64_t)v60);
                    break;
                  case 0xD0u:
                    *((_WORD *)a1 + 15) = sub_10022CEB0((uint64_t)v60);
                    break;
                  case 0xD1u:
                    *((_WORD *)a1 + 16) = sub_10022CEB0((uint64_t)v60);
                    break;
                  case 0xD2u:
                    a1[27] = sub_10022CE3C(v60);
                    break;
                  case 0xD3u:
                    a1[28] = sub_10022CE3C(v60);
                    break;
                  case 0xD4u:
                    *((_WORD *)a1 + 17) = sub_10022CEB0((uint64_t)v60);
                    break;
                  case 0xD5u:
                    a1[26] = sub_10022CE3C(v60);
                    break;
                  default:
                    continue;
                }
              }
              v57 = objc_msgSend(v55, "countByEnumeratingWithState:objects:count:", &v72, v85, 16);
            }
            while (v57);
          }

          if (a1[26] == 128)
          {
            *((_DWORD *)a1 + 9) = 0;
            HIDWORD(v61) = *(_DWORD *)(a1 + 46);
            LODWORD(v61) = HIDWORD(v61);
            *(_DWORD *)(a1 + 42) = v61 >> 16;
            v44 = v71;
          }
          else
          {
            *((_WORD *)a1 + 20) = 0;
            *(_DWORD *)(a1 + 46) = 0;
            v62 = *((unsigned __int16 *)a1 + 22);
            v63 = *((unsigned __int16 *)a1 + 16);
            v44 = v71;
            if (!*((_WORD *)a1 + 22))
            {
              *((_WORD *)a1 + 22) = v63;
              v62 = v63;
            }
            *((_WORD *)a1 + 17) = v63 - v62;
            v64 = *((unsigned __int16 *)a1 + 21);
            if (!*((_WORD *)a1 + 21))
            {
              *((_WORD *)a1 + 21) = v62;
              v64 = v62;
            }
            v65 = *((unsigned __int16 *)a1 + 19);
            v66 = __OFSUB__(v64, v65);
            v67 = v64 - v65;
            if (v67 < 0 != v66)
              v67 += 7;
            v68 = (v67 >> 3);
            if (v68 <= 2)
              LOBYTE(v68) = 2;
            a1[28] = v68;
          }
        }
        else
        {
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlMailboxMappingData initWithData:preferredVersion:]", 90, CFSTR("Did not find version appropriate data to initalize Mailbox mapping, using defaults"), v51, v52, v53, v54, v70);
          v44 = a1;

          v9 = v71;
        }
      }
      else
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlMailboxMappingData initWithData:preferredVersion:]", 62, CFSTR("No Data to initalize Mailbox mapping, using defaults"), v10, v11, v12, v13, v70);
        v44 = a1;
      }

    }
  }

  return a1;
}

id *sub_10022A674(id *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  _WORD *v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];

  v8 = a1;
  if (!a1)
    return v8;
  if (!a1[1])
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlMailboxMappingData asData]", 173, CFSTR("Invalid MailboxMapping Data"), a5, a6, a7, a8, v28);
    v8 = 0;
    return v8;
  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData data](NSMutableData, "data"));
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v10 = v8[1];
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v30;
    do
    {
      v14 = 0;
      do
      {
        if (*(_QWORD *)v30 != v13)
          objc_enumerationMutation(v10);
        v15 = sub_10022D014(*(_QWORD *)(*((_QWORD *)&v29 + 1) + 8 * (_QWORD)v14));
        v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
        objc_msgSend(v9, "appendData:", v16);

        v14 = (char *)v14 + 1;
      }
      while (v12 != v14);
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
    }
    while (v12);
  }

  v17 = sub_10022CB3C((uint64_t)KmlTlv, 32589, v9);
  v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
  v19 = sub_10022D014((uint64_t)v18);
  v20 = (void *)objc_claimAutoreleasedReturnValue(v19);

  v21 = kmlUtilHexStringFromData(v20);
  v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlMailboxMappingData asData]", 185, CFSTR("MailboxMapping Data : %@"), v23, v24, v25, v26, (uint64_t)v22);

  return (id *)v20;
}

id *sub_10022A82C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id *v8;
  __CFString *v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  void *i;
  unsigned int v17;
  void *v18;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];

  v8 = (id *)a1;
  if (a1)
  {
    if (*(_WORD *)(a1 + 24) == 768)
    {
      if (*(unsigned __int8 *)(a1 + 26) != 128)
      {
        v20 = 128;
        v9 = CFSTR("Mismatch in expected mailbox version (0x%02X) and received version (0x%02X)");
        v10 = 200;
        goto LABEL_20;
      }
    }
    else if (!*(_WORD *)(a1 + 24))
    {
      v9 = CFSTR("Agreed KML framework version is unknown");
      v10 = 193;
LABEL_20:
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlMailboxMappingData isValid]", v10, v9, a5, a6, a7, a8, v20);
      return 0;
    }
    v11 = objc_alloc_init((Class)NSMutableSet);
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v12 = v8[2];
    v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
    if (v13)
    {
      v14 = v13;
      v15 = *(_QWORD *)v22;
      while (2)
      {
        for (i = 0; i != v14; i = (char *)i + 1)
        {
          if (*(_QWORD *)v22 != v15)
            objc_enumerationMutation(v12);
          v17 = sub_100055868(*(_QWORD *)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)i));
          if (!kmlUtilAddUniqueTagToSet(v11, v17))
          {
            v8 = 0;
            goto LABEL_18;
          }
        }
        v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
        if (v14)
          continue;
        break;
      }
    }

    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithArray:](NSMutableSet, "setWithArray:", &off_100322C10));
    v12 = v18;
    if (*((_WORD *)v8 + 12) == 768)
      objc_msgSend(v18, "addObjectsFromArray:", &off_100322C28);
    v8 = (id *)objc_msgSend(v12, "isSubsetOfSet:", v11);
LABEL_18:

  }
  return v8;
}

BOOL sub_10022AA00(uint64_t a1)
{
  return a1 != 0;
}

uint64_t sub_10022AA0C(uint64_t result, unsigned int a2)
{
  if (result)
  {
    if (*(unsigned __int8 *)(result + 26) == 128)
    {
      if (*(_BYTE *)(result + 29))
        return (a2 >> 2) & 1;
      else
        return (a2 >> 5) & 1;
    }
    else
    {
      return (a2 >> 3) & 1;
    }
  }
  return result;
}

uint64_t sub_10022AA3C(uint64_t result, unsigned int a2)
{
  if (result)
  {
    if (*(unsigned __int8 *)(result + 26) == 128)
    {
      if (*(_BYTE *)(result + 29))
        return (a2 >> 2) & 1;
      else
        return (a2 >> 4) & 1;
    }
    else
    {
      return (a2 >> 3) & 1;
    }
  }
  return result;
}

uint64_t sub_10022AA6C(uint64_t a1)
{
  if (a1)
  {
    if (*(unsigned __int8 *)(a1 + 26) == 128)
    {
      if (*(_BYTE *)(a1 + 29))
        return -5;
      else
        return -49;
    }
    else
    {
      return -9;
    }
  }
  else
  {
    return 0;
  }
}

uint64_t sub_10022AAA8(uint64_t result)
{
  if (result)
  {
    if (*(unsigned __int8 *)(result + 26) == 128)
    {
      if (*(_BYTE *)(result + 29))
        return 4;
      else
        return 16;
    }
    else
    {
      return 8;
    }
  }
  return result;
}

uint64_t sub_10022AAD8(uint64_t result)
{
  if (result)
    return *(unsigned __int8 *)(result + 26);
  return result;
}

uint64_t sub_10022AAE4(uint64_t result)
{
  if (result)
    return *(unsigned __int16 *)(result + 30);
  return result;
}

uint64_t sub_10022AAF0(uint64_t result)
{
  if (result)
    return *(unsigned __int16 *)(result + 32);
  return result;
}

uint64_t sub_10022AAFC(uint64_t result)
{
  if (result)
    return *(unsigned __int8 *)(result + 27);
  return result;
}

uint64_t sub_10022AB08(uint64_t result)
{
  if (result)
    return *(unsigned __int8 *)(result + 28);
  return result;
}

uint64_t sub_10022AB14(uint64_t result)
{
  if (result)
    return *(unsigned __int16 *)(result + 34);
  return result;
}

uint64_t sub_10022AB20(uint64_t result)
{
  if (result)
    return *(unsigned __int16 *)(result + 38);
  return result;
}

uint64_t sub_10022AB2C(uint64_t result)
{
  if (result)
    return *(unsigned __int16 *)(result + 40);
  return result;
}

uint64_t sub_10022AB38(uint64_t result)
{
  if (result)
    return *(unsigned __int16 *)(result + 42);
  return result;
}

uint64_t sub_10022AB44(uint64_t result)
{
  if (result)
    return *(unsigned __int16 *)(result + 44);
  return result;
}

uint64_t sub_10022ADB0(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 40);
  return result;
}

uint64_t sub_10022ADBC(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 80);
  return result;
}

uint64_t sub_10022ADC8(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 112);
  return result;
}

uint64_t sub_10022ADD4(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 96);
  return result;
}

uint64_t sub_10022ADE0(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 104);
  return result;
}

id sub_10022B3C4(void *a1, uint64_t a2)
{
  if (a1)
    a1 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", a1, 1, a2));
  return a1;
}

id sub_10022B3F4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;

  v5 = a2;
  objc_opt_self(a1);
  if (qword_1003548A0 != -1)
    dispatch_once(&qword_1003548A0, &stru_10030F178);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClasses:fromData:error:", qword_1003548A8, v5, a3));

  return v6;
}

void sub_10022B480(id a1)
{
  NSSet *v1;
  uint64_t v2;
  void *v3;

  v1 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(KmlSharingInvitationRecord), 0);
  v2 = objc_claimAutoreleasedReturnValue(v1);
  v3 = (void *)qword_1003548A8;
  qword_1003548A8 = v2;

}

void sub_10022B4D4(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 64), a2);
}

void sub_10022B4E4(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 72), a2);
}

void sub_10022B4F4(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 88), a2);
}

void sub_10022B504(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 96), a2);
}

void sub_10022B514(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 104), a2);
}

uint64_t sub_10022B524(uint64_t result, uint64_t a2)
{
  if (result)
    *(_QWORD *)(result + 112) = a2;
  return result;
}

uint64_t sub_10022B530(uint64_t result, uint64_t a2)
{
  if (result)
    *(_QWORD *)(result + 120) = a2;
  return result;
}

id sub_10022B5E4(uint64_t a1)
{
  objc_opt_self(a1);
  if (qword_1003548B8 != -1)
    dispatch_once(&qword_1003548B8, &stru_10030F198);
  return (id)qword_1003548B0;
}

void sub_10022B628(id a1)
{
  KmlSharingInvitationRecordsUpdater *v1;
  void *v2;

  v1 = objc_alloc_init(KmlSharingInvitationRecordsUpdater);
  v2 = (void *)qword_1003548B0;
  qword_1003548B0 = (uint64_t)v1;

}

id sub_10022B650(uint64_t a1)
{
  objc_opt_self(a1);
  if (qword_1003548C8 != -1)
    dispatch_once(&qword_1003548C8, &stru_10030F1B8);
  return (id)qword_1003548C0;
}

void sub_10022B694(id a1)
{
  dispatch_queue_attr_t v1;
  dispatch_queue_t v2;
  void *v3;
  NSObject *v4;

  v1 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v4 = objc_claimAutoreleasedReturnValue(v1);
  v2 = dispatch_queue_create("com.apple.sesd.kml.friendRecordsUpdater", v4);
  v3 = (void *)qword_1003548C0;
  qword_1003548C0 = (uint64_t)v2;

}

void sub_10022B76C(uint64_t a1)
{
  uint64_t Invitations;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  id v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  id v33;
  _BYTE v34[128];

  if (a1)
  {
    v33 = 0;
    Invitations = SESEndPointGetInvitations(&v33);
    v2 = (void *)objc_claimAutoreleasedReturnValue(Invitations);
    v3 = v33;
    if (v3)
      v8 = 1;
    else
      v8 = v2 == 0;
    if (v8)
    {
      v9 = v3;
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingInvitationRecordsUpdater unpackAllSharingInvitationRecords_sync]", 236, CFSTR("We don't have any sharing invitation records - %@"), v4, v5, v6, v7, (uint64_t)v3);
    }
    else
    {
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v10 = v2;
      v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v29, v34, 16);
      if (v11)
      {
        v12 = v11;
        v9 = 0;
        v13 = *(_QWORD *)v30;
        do
        {
          v14 = 0;
          v15 = v9;
          do
          {
            if (*(_QWORD *)v30 != v13)
              objc_enumerationMutation(v10);
            v16 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * (_QWORD)v14);
            v28 = v15;
            v17 = sub_10022B3F4((uint64_t)KmlSharingInvitationRecord, v16, (uint64_t)&v28);
            v18 = (_QWORD *)objc_claimAutoreleasedReturnValue(v17);
            v9 = v28;

            if (v9)
            {
              KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingInvitationRecordsUpdater unpackAllSharingInvitationRecords_sync]", 243, CFSTR("Found a courrupted sharing record. Discarding it"), v19, v20, v21, v22, v26);
            }
            else
            {
              if (v18)
                v23 = v18[13];
              else
                v23 = 0;
              KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingInvitationRecordsUpdater unpackAllSharingInvitationRecords_sync]", 247, CFSTR("Found sharing invitation record for invitation Id : %@"), v19, v20, v21, v22, v23);
              if (v18)
                v24 = v18[13];
              else
                v24 = 0;
              objc_msgSend(*(id *)(a1 + 8), "setObject:forKeyedSubscript:", v18, v24);
            }

            v14 = (char *)v14 + 1;
            v15 = v9;
          }
          while (v12 != v14);
          v25 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v29, v34, 16);
          v12 = v25;
        }
        while (v25);
      }
      else
      {
        v9 = 0;
      }

    }
  }
}

void sub_10022B984(uint64_t a1, void *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  uint64_t v10[4];
  _QWORD *v11;
  uint64_t v12;

  v3 = a2;
  v8 = v3;
  if (a1)
  {
    if (v3 && v3[13])
    {
      v9 = *(NSObject **)(a1 + 16);
      v10[0] = (uint64_t)_NSConcreteStackBlock;
      v10[1] = 3221225472;
      v10[2] = (uint64_t)sub_10022BA40;
      v10[3] = (uint64_t)&unk_100304370;
      v11 = v3;
      v12 = a1;
      dispatch_async(v9, v10);

    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingInvitationRecordsUpdater updateRecord:]", 174, CFSTR("Invalid sharing record. Ignore it"), v4, v5, v6, v7, v10[0]);
    }
  }

}

id sub_10022BA40(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    *(_BYTE *)(v1 + 8) = 1;
    v2 = (uint64_t *)(a1 + 40);
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(*(_QWORD *)(a1 + 40) + 8);
    if (v3)
      v5 = *(_QWORD *)(v3 + 104);
    else
      v5 = 0;
  }
  else
  {
    v3 = 0;
    v5 = 0;
    v2 = (uint64_t *)(a1 + 40);
    v4 = *(void **)(*(_QWORD *)(a1 + 40) + 8);
  }
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v3, v5);
  return sub_10022BAB0(*v2);
}

id sub_10022BAB0(uint64_t a1)
{
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  void *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v34;
  id obj;
  id v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _BYTE v41[128];

  if (!a1)
    return 0;
  v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  obj = *(id *)(a1 + 8);
  v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v37, v41, 16);
  if (v2)
  {
    v3 = v2;
    v4 = 0;
    v5 = *(_QWORD *)v38;
    do
    {
      for (i = 0; i != v3; i = (char *)i + 1)
      {
        if (*(_QWORD *)v38 != v5)
          objc_enumerationMutation(obj);
        v7 = *(_QWORD *)(*((_QWORD *)&v37 + 1) + 8 * (_QWORD)i);
        v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 8), "objectForKeyedSubscript:", v7));
        v13 = (_BYTE *)v8;
        if (v8 && *(_BYTE *)(v8 + 8))
        {
          if (*(_QWORD *)(v8 + 112) == 6)
          {
            v14 = SESEndPointDeleteInvitationWithId(v7);
            v15 = objc_claimAutoreleasedReturnValue(v14);

            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingInvitationRecordsUpdater saveSharingInvitationRecords_sync]", 206, CFSTR("Record for invitation Id %@ is ready for clean up. Removal result - %@"), v16, v17, v18, v19, v7);
            v4 = (void *)v15;
            if (!v15)
              objc_msgSend(v34, "addObject:", v7);
          }
          else
          {
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingInvitationRecordsUpdater saveSharingInvitationRecords_sync]", 211, CFSTR("For invitation Id %@, replacing old record with new one"), v9, v10, v11, v12, v7);
            v36 = v4;
            v20 = sub_10022B3C4(v13, (uint64_t)&v36);
            v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
            v22 = v36;

            if (v22)
            {
              KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlSharingInvitationRecordsUpdater saveSharingInvitationRecords_sync]", 214, CFSTR("Sharing Invitation Record with Invitation Id (%@), could not be serialized : %@"), v23, v24, v25, v26, v7);
              objc_msgSend(v34, "addObject:", v7);
              v4 = v22;
            }
            else
            {
              v27 = SESEndPointAddInvitationWithId(v7, v21);
              v28 = objc_claimAutoreleasedReturnValue(v27);
              v4 = (void *)v28;
              if (v28)
                KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlSharingInvitationRecordsUpdater saveSharingInvitationRecords_sync]", 220, CFSTR("Failed to save sharing records on endPoint : %@"), v29, v30, v31, v32, v28);
              else
                v13[8] = 0;
            }

          }
        }
        else
        {
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingInvitationRecordsUpdater saveSharingInvitationRecords_sync]", 200, CFSTR("Record for invitation Id %@, did not change"), v9, v10, v11, v12, v7);
        }

      }
      v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v37, v41, 16);
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }

  objc_msgSend(*(id *)(a1 + 8), "removeObjectsForKeys:", v34);
  return v4;
}

id *sub_10022BD48(id *a1)
{
  if (a1)
    a1 = (id *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[1], "allValues"));
  return a1;
}

id sub_10022BD98(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  objc_opt_self(a1);
  v4 = sub_10021A6C0([KmlNfcPairingTransport alloc], v3);

  return v4;
}

KmlBluetoothPairingTransport *sub_10022BDE4(uint64_t a1, void *a2)
{
  id v3;
  KmlBluetoothPairingTransport *v4;

  v3 = a2;
  objc_opt_self(a1);
  v4 = -[KmlBluetoothPairingTransport initWithDelegate:]([KmlBluetoothPairingTransport alloc], "initWithDelegate:", v3);

  return v4;
}

void sub_10022BE30(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  objc_opt_self(a1);
  +[BluetoothHCEAndTransactionSession startFirstApproachForKeyWithIdentifier:](BluetoothHCEAndTransactionSession, "startFirstApproachForKeyWithIdentifier:", v3);

}

_QWORD *sub_10022BE78(_QWORD *result)
{
  _QWORD *v1;
  id v2;
  id v3;

  if (result)
  {
    v1 = sub_10022BEB4(result);
    v2 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(v1));
    v3 = objc_msgSend(v2, "bytes");

    return v3;
  }
  return result;
}

_QWORD *sub_10022BEB4(_QWORD *a1)
{
  void *v1;

  if (a1)
  {
    v1 = (void *)a1[7];
    if (!v1)
      v1 = (void *)a1[6];
    a1 = v1;
  }
  return a1;
}

uint64_t *sub_10022BED8(uint64_t *a1, _BYTE *a2, unint64_t a3, void *a4, _QWORD *a5)
{
  id v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  __CFString *v18;
  os_log_type_t v19;
  uint64_t v20;
  void *v21;
  unsigned int v22;
  unsigned __int8 *v23;
  unsigned int v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  int v34;
  unsigned __int8 *v35;
  int v36;
  int v37;
  void *v38;
  uint64_t v39;
  void *v40;
  id v41;
  uint64_t v42;
  id v43;
  void *v44;
  void *v45;
  unsigned int v46;
  void *v47;
  uint64_t v49;
  id v50;
  objc_super v51;

  v10 = a4;
  if (!a1)
    goto LABEL_45;
  v51.receiver = a1;
  v51.super_class = (Class)KmlApduRequest;
  v11 = (uint64_t *)objc_msgSendSuper2(&v51, "init");
  a1 = v11;
  if (!v11)
    goto LABEL_45;
  v12 = v11 + 4;
  objc_storeStrong((id *)v11 + 4, a4);
  if (a3 <= 3)
  {
    if (a5)
    {
      v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
      *a5 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v17, 26368, 0));

    }
    v18 = CFSTR("APDU: command length incorrect, return code: 0x6700.");
    v19 = OS_LOG_TYPE_INFO;
    v20 = 82;
LABEL_7:
    KmlLogFunc2(v19, (uint64_t)"-[KmlApduRequest initWithBytes:length:secureChannel:error:]", v20, v18, v13, v14, v15, v16, v49);

    a1 = 0;
    goto LABEL_45;
  }
  *((_BYTE *)a1 + 8) = *a2;
  *((_BYTE *)a1 + 9) = a2[1];
  *((_BYTE *)a1 + 41) = a2[2];
  *((_BYTE *)a1 + 42) = a2[3];
  *((_BYTE *)a1 + 40) = 0;
  v21 = (void *)a1[7];
  a1[7] = 0;

  if (a3 == 4)
    goto LABEL_45;
  v22 = a2[4];
  *((_DWORD *)a1 + 3) = v22;
  if (v22)
  {
    v23 = a2 + 5;
    v24 = 5;
  }
  else
  {
    if (a3 == 5)
    {
      *((_DWORD *)a1 + 5) = 256;
      goto LABEL_45;
    }
    if ((uint64_t)(a3 - 5) <= 2)
    {
      if (a5)
      {
        v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
        *a5 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v27, 27136, 0));

      }
      v18 = CFSTR("APDU: Invalid APDU format, return code: 0x6A00");
      v19 = OS_LOG_TYPE_INFO;
      v20 = 114;
      goto LABEL_7;
    }
    v34 = a2[5];
    *((_DWORD *)a1 + 3) = v34 << 8;
    v23 = a2 + 7;
    v22 = a2[6] | (v34 << 8);
    *((_DWORD *)a1 + 3) = v22;
    v24 = 7;
  }
  v25 = a3 - v24;
  if (v25 < (unint64_t)v22)
  {
    if (a5)
    {
      v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
      *a5 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v26, 26368, 0));

    }
    v18 = CFSTR("APDU: Incorrect length or address range error, return code: 0x6700");
    v19 = OS_LOG_TYPE_INFO;
    v20 = 127;
    goto LABEL_7;
  }
  v28 = objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", a2, v23 - a2));
  v29 = (void *)a1[3];
  a1[3] = v28;

  if (*((_DWORD *)a1 + 3))
  {
    v30 = objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v23));
    v31 = (void *)a1[6];
    a1[6] = v30;

    v32 = *((int *)a1 + 3);
    v23 += v32;
    v25 = a3 - (v32 + v24);
  }
  if (v25 >= 1)
  {
    if ((unint64_t)v25 >= 4)
    {
      if (a5)
      {
        v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
        *a5 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v33, 26368, 0));

      }
      v18 = CFSTR("APDU: Incorrect length, return code: 0x6700");
      v19 = OS_LOG_TYPE_DEBUG;
      v20 = 147;
      goto LABEL_7;
    }
    v35 = v23 + 1;
    v36 = *v23;
    *((_DWORD *)a1 + 5) = v36;
    if (v36 || v25 != 3)
    {
      if (v25 != 2)
      {
        if (v36)
          goto LABEL_35;
        v37 = 256;
        goto LABEL_34;
      }
    }
    else
    {
      v35 = v23 + 2;
      v36 = v23[1];
      *((_DWORD *)a1 + 5) = v36;
    }
    v37 = *v35 | (v36 << 8);
LABEL_34:
    *((_DWORD *)a1 + 5) = v37;
  }
LABEL_35:
  v38 = (void *)a1[6];
  if (v38)
  {
    v39 = *v12;
    if (*v12)
    {
      v40 = (void *)a1[3];
      v50 = 0;
      v41 = sub_10024D53C(v39, v38, v40, &v50);
      v42 = objc_claimAutoreleasedReturnValue(v41);
      v43 = v50;
      v44 = (void *)a1[7];
      a1[7] = v42;

      if (v43)
        goto LABEL_41;
    }
  }
  v45 = (void *)a1[7];
  if (!v45)
  {
    v43 = 0;
LABEL_41:
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlApduRequest initWithBytes:length:secureChannel:error:]", 173, CFSTR("APDU: couldn't decrypt payload %@"), v13, v14, v15, v16, (uint64_t)v43);
    v47 = (void *)a1[7];
    a1[7] = 0;

    v46 = 0;
    goto LABEL_42;
  }
  *((_BYTE *)a1 + 40) = 1;
  v46 = objc_msgSend(v45, "length");
  v43 = 0;
LABEL_42:
  *((_DWORD *)a1 + 4) = v46;
  if (!sub_10024C57C((_BOOL8)v10))
    *((_BYTE *)a1 + 40) = 1;

LABEL_45:
  return a1;
}

BOOL sub_10022C320(_BOOL8 result)
{
  if (result)
    return !*(_BYTE *)(result + 8) && *(unsigned __int8 *)(result + 9) == 164;
  return result;
}

BOOL sub_10022C344(_BOOL8 result)
{
  if (result)
    return *(unsigned __int8 *)(result + 8) == 132 && *(unsigned __int8 *)(result + 9) == 212;
  return result;
}

BOOL sub_10022C36C(_BOOL8 result)
{
  if (result)
    return *(unsigned __int8 *)(result + 8) == 132 && *(unsigned __int8 *)(result + 9) == 202;
  return result;
}

BOOL sub_10022C394(_BOOL8 result)
{
  if (result)
    return *(unsigned __int8 *)(result + 8) == 132 && *(unsigned __int8 *)(result + 9) == 192;
  return result;
}

BOOL sub_10022C3BC(_BOOL8 result)
{
  if (result)
    return *(unsigned __int8 *)(result + 8) == 132 && *(unsigned __int8 *)(result + 9) == 60;
  return result;
}

BOOL sub_10022C3E4(_BOOL8 result)
{
  if (result)
    return *(unsigned __int8 *)(result + 8) == 128 && *(unsigned __int8 *)(result + 9) == 60;
  return result;
}

uint64_t sub_10022C40C(uint64_t result)
{
  if (result)
    return *(unsigned __int8 *)(result + 41);
  return result;
}

BOOL sub_10022C418(_BOOL8 result)
{
  if (result)
    return *(unsigned __int8 *)(result + 8) == 128 && *(unsigned __int8 *)(result + 9) == 48;
  return result;
}

BOOL sub_10022C440(_BOOL8 result)
{
  if (result)
    return *(unsigned __int8 *)(result + 8) == 128 && *(unsigned __int8 *)(result + 9) == 50;
  return result;
}

BOOL sub_10022C468(_BOOL8 result)
{
  if (result)
    return *(unsigned __int8 *)(result + 8) == 132 && *(unsigned __int8 *)(result + 9) == 192
        || *(_QWORD *)(result + 56) != 0;
  return result;
}

_QWORD *sub_10022C49C(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;

  v1 = a1;
  if (a1)
  {
    v2 = 16;
    if (!a1[7])
      v2 = 12;
    if (*(_DWORD *)((char *)a1 + v2)
      && (v3 = sub_10022BEB4(a1), v4 = (void *)objc_claimAutoreleasedReturnValue(v3), v4, v4))
    {
      if (v1[7])
        v5 = 16;
      else
        v5 = 12;
      v6 = 2 * *(int *)((char *)v1 + v5);
      v7 = (char *)malloc_type_malloc(v6 | 1, 0x118D526AuLL);
      v7[v6] = 0;
      v8 = sub_10022BE78(v1);
      if (v1[7])
        v9 = 16;
      else
        v9 = 12;
      if (*(int *)((char *)v1 + v9) >= 1)
      {
        v10 = v8;
        v11 = 0;
        v12 = v7;
        do
        {
          sprintf(v12, "%02X", *((unsigned __int8 *)v10 + v11++));
          if (v1[7])
            v13 = 16;
          else
            v13 = 12;
          v12 += 2;
        }
        while (v11 < *(int *)((char *)v1 + v13));
      }
      v1 = objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", v7);
      free(v7);
    }
    else
    {
      v1 = 0;
    }
  }
  return v1;
}

uint64_t sub_10022C5E4(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 v12;
  __int16 v13;

  if (!a1)
    return 0;
  v2 = sub_10022BEB4(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);

  if (!v3)
    return 0;
  v8 = 16;
  if (!a1[7])
    v8 = 12;
  if (*(_DWORD *)((char *)a1 + v8) >= 3u)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlApduRequest payloadAsUnsignedShort]", 274, CFSTR("APDU: Value too large: %@"), v4, v5, v6, v7, a1[6]);
    return 0;
  }
  v9 = sub_10022BE78(a1);
  v10 = 16;
  if (!a1[7])
    v10 = 12;
  v11 = *(unsigned int *)((char *)a1 + v10);
  if ((int)v11 < 1)
    return 0;
  v12 = 0;
  do
  {
    v13 = *(unsigned __int8 *)v9;
    v9 = (_QWORD *)((char *)v9 + 1);
    v12 = v13 | (v12 << 8);
    --v11;
  }
  while (v11);
  return v12;
}

BOOL sub_10022C6B8(_BOOL8 result)
{
  int v1;

  if (result)
  {
    v1 = *(unsigned __int8 *)(result + 8);
    return !*(_BYTE *)(result + 8) || v1 == 132 || v1 == 128;
  }
  return result;
}

uint64_t sub_10022C6E4(uint64_t result)
{
  unsigned int v1;

  if (result)
  {
    v1 = *(unsigned __int8 *)(result + 9);
    if (v1 - 164 <= 0x30 && ((1 << (v1 + 92)) & 0x1004010000001) != 0)
      return 1;
    result = 0;
    if (v1 <= 0x3C && ((1 << v1) & 0x1005000000000000) != 0)
      return 1;
  }
  return result;
}

BOOL sub_10022C73C(_BOOL8 result)
{
  if (result)
    return *(_BYTE *)(result + 40) != 0;
  return result;
}

uint64_t sub_10022C750(uint64_t result)
{
  if (result)
    return *(unsigned __int8 *)(result + 42);
  return result;
}

id sub_10022C7A4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v14;
  id v15;

  v3 = a2;
  v4 = objc_opt_self(a1);
  if (objc_msgSend(v3, "length"))
  {
    v9 = objc_retainAutorelease(v3);
    v15 = objc_msgSend(v9, "bytes");
    v10 = sub_10022C860(v4, (unint64_t *)&v15, (unint64_t)objc_msgSend(v9, "length") + (_QWORD)v15);
    v11 = objc_claimAutoreleasedReturnValue(v10);
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlTlv TLVsWithData:]", 29, CFSTR("nothing to parse"), v5, v6, v7, v8, v14);
    v11 = objc_claimAutoreleasedReturnValue(+[NSArray array](NSArray, "array"));
  }
  v12 = (void *)v11;

  return v12;
}

id sub_10022C860(uint64_t a1, unint64_t *a2, unint64_t a3)
{
  void *v5;
  unint64_t v6;
  void *v7;
  _WORD *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  char *v15;
  int v16;
  char *v17;
  int v18;
  BOOL v19;
  int v20;
  unsigned __int8 *v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  void *v25;
  _WORD *v26;
  void *v27;
  int v28;
  unsigned __int8 *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __CFString *v35;
  uint64_t v36;
  uint64_t v38;

  objc_opt_self(a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v6 = *a2;
  if (*a2 >= a3)
  {
LABEL_20:
    v30 = objc_msgSend(v5, "count");
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlTlv _parseTLVs:end:]", 304, CFSTR("TLV: found %lu tlvs"), v31, v32, v33, v34, (uint64_t)v30);
    return v5;
  }
  while (1)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v6, a3 - v6));
    v8 = sub_10022CB3C((uint64_t)KmlTlv, 0xFFFF, v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);

    v14 = (unsigned __int8 *)*a2;
    v15 = (char *)(*a2 + 1);
    *a2 = (unint64_t)v15;
    v16 = *v14;
    if ((~v16 & 0x1F) == 0)
    {
      while ((unint64_t)v15 < a3)
      {
        v17 = v15 + 1;
        *a2 = (unint64_t)(v15 + 1);
        v18 = *v15++;
        v19 = v18 < -1;
        v20 = v18 | (v16 << 8);
        v16 = v20;
        if (!v19)
          goto LABEL_7;
      }
      v35 = CFSTR("TLV: Underflow");
      v36 = 252;
      goto LABEL_26;
    }
    v17 = v15;
    LOWORD(v20) = v16;
LABEL_7:
    if ((unint64_t)v17 >= a3)
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlTlv _parseTLVs:end:]", 266, CFSTR("TLV: Underflow: tag=0x%x"), v10, v11, v12, v13, (unsigned __int16)v20);
      goto LABEL_27;
    }
    v21 = (unsigned __int8 *)(v17 + 1);
    *a2 = (unint64_t)(v17 + 1);
    v22 = *v17;
    v23 = v22;
    if (v22 < 0)
      break;
LABEL_9:
    if (!(_WORD)v20 && !v23)
    {
      v35 = CFSTR("TLV: tag and length is 0");
      v36 = 287;
LABEL_26:
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlTlv _parseTLVs:end:]", v36, v35, v10, v11, v12, v13, v38);
      goto LABEL_27;
    }
    if ((uint64_t)(a3 - (_QWORD)v21) < v23)
    {
      v38 = (unsigned __int16)v20;
      v35 = CFSTR("TLV: Underflow: tag=0x%x len=%u");
      v36 = 295;
      goto LABEL_26;
    }
    v24 = v23;
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlTlv _parseTLVs:end:]", 299, CFSTR("TLV: adding tag:0x%x, len:%u"), v10, v11, v12, v13, (unsigned __int16)v20);
    v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", *a2, v24));
    v26 = sub_10022CB3C((uint64_t)KmlTlv, v20, v25);
    v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
    objc_msgSend(v5, "addObject:", v27);

    *a2 += v24;
    v6 = *a2;
    if (*a2 >= a3)
      goto LABEL_20;
  }
  v28 = v22 & 0x7F;
  if ((v23 & 0x7F) == 0)
  {
    v23 = 0;
    goto LABEL_9;
  }
  v23 = 0;
  v29 = v21;
  while ((unint64_t)v29 < a3)
  {
    v21 = v29 + 1;
    *a2 = (unint64_t)(v29 + 1);
    v23 = *v29++ | (v23 << 8);
    if (!--v28)
      goto LABEL_9;
  }
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlTlv _parseTLVs:end:]", 276, CFSTR("TLV: Underflow: tag=0x%x"), v10, v11, v12, v13, (unsigned __int16)v20);
LABEL_27:
  objc_msgSend(v5, "addObject:", v9);

  return v5;
}

_WORD *sub_10022CB3C(uint64_t a1, __int16 a2, void *a3)
{
  id v5;
  _WORD *v6;
  void *v7;

  v5 = a3;
  v6 = objc_alloc_init((Class)objc_opt_self(a1));
  v6[4] = a2;
  v7 = (void *)*((_QWORD *)v6 + 2);
  *((_QWORD *)v6 + 2) = v5;

  return v6;
}

_WORD *sub_10022CB90(uint64_t a1, __int16 a2, char a3)
{
  _WORD *v4;
  uint64_t v5;
  void *v6;
  char v8;

  v8 = a3;
  v4 = objc_alloc_init((Class)objc_opt_self(a1));
  v4[4] = a2;
  v5 = objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", &v8, 1));
  v6 = (void *)*((_QWORD *)v4 + 2);
  *((_QWORD *)v4 + 2) = v5;

  return v4;
}

_WORD *sub_10022CBF0(uint64_t a1, __int16 a2, unsigned int a3)
{
  _WORD *v5;
  uint64_t v6;
  void *v7;
  __int16 v9;

  v5 = objc_alloc_init((Class)objc_opt_self(a1));
  v5[4] = a2;
  v9 = __rev16(a3);
  v6 = objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", &v9, 2));
  v7 = (void *)*((_QWORD *)v5 + 2);
  *((_QWORD *)v5 + 2) = v6;

  return v5;
}

_WORD *sub_10022CC60(uint64_t a1, __int16 a2)
{
  _WORD *v3;

  v3 = objc_alloc_init((Class)objc_opt_self(a1));
  v3[4] = a2;
  return v3;
}

id *sub_10022CD6C(id *a1)
{
  if (a1)
    a1 = (id *)a1[2];
  return a1;
}

uint64_t sub_10022CD88(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unint64_t v8;
  uint64_t v9;

  if (!a1)
    return 0;
  v2 = *(void **)(a1 + 16);
  if (!v2)
    return 0;
  if ((unint64_t)objc_msgSend(v2, "length") >= 5)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlTlv valueAsUnsignedLong]", 113, CFSTR("TLV: Value too large: %@"), v3, v4, v5, v6, *(_QWORD *)(a1 + 16));
    return 0;
  }
  v7 = (unsigned __int8 *)objc_msgSend(*(id *)(a1 + 16), "bytes");
  if (!objc_msgSend(*(id *)(a1 + 16), "length"))
    return 0;
  v8 = 0;
  LODWORD(v9) = 0;
  do
    v9 = v7[v8++] | ((_DWORD)v9 << 8);
  while ((unint64_t)objc_msgSend(*(id *)(a1 + 16), "length") > v8);
  return v9;
}

_QWORD *sub_10022CE3C(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (result)
  {
    v1 = result;
    result = (_QWORD *)result[2];
    if (result)
    {
      if ((unint64_t)objc_msgSend(result, "length") < 2)
      {
        return (_QWORD *)*(unsigned __int8 *)objc_msgSend((id)v1[2], "bytes");
      }
      else
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlTlv valueAsUnsignedChar]", 132, CFSTR("TLV: Value too large: %@"), v2, v3, v4, v5, v1[2]);
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_10022CEB0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unint64_t v8;
  unsigned __int16 v9;

  if (!a1)
    return 0;
  v2 = *(void **)(a1 + 16);
  if (!v2)
    return 0;
  if ((unint64_t)objc_msgSend(v2, "length") >= 3)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlTlv valueAsUnsignedShort]", 147, CFSTR("TLV: Value too large: %@"), v3, v4, v5, v6, *(_QWORD *)(a1 + 16));
    return 0;
  }
  v7 = (unsigned __int8 *)objc_msgSend(*(id *)(a1 + 16), "bytes");
  if (!objc_msgSend(*(id *)(a1 + 16), "length"))
    return 0;
  v8 = 0;
  v9 = 0;
  do
    v9 = v7[v8++] | (unsigned __int16)(v9 << 8);
  while ((unint64_t)objc_msgSend(*(id *)(a1 + 16), "length") > v8);
  return v9;
}

id sub_10022CF64(uint64_t a1, unsigned int a2)
{
  void *v3;
  void *v4;
  int v5;
  unsigned int v6;
  char v8;

  objc_opt_self(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithCapacity:](NSMutableData, "dataWithCapacity:", 4));
  v4 = v3;
  v8 = 0;
  if (a2)
  {
    v5 = 4;
    if (HIBYTE(a2))
      goto LABEL_12;
    do
    {
      v6 = HIWORD(a2);
      a2 <<= 8;
      --v5;
    }
    while (!v6 && v5);
    if (v5)
    {
LABEL_12:
      do
      {
        v8 = HIBYTE(a2);
        objc_msgSend(v4, "appendBytes:length:", &v8, 1);
        a2 <<= 8;
        --v5;
      }
      while (v5);
    }
  }
  else
  {
    objc_msgSend(v3, "appendBytes:length:", &v8, 1);
  }
  return v4;
}

id sub_10022D014(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  id v5;
  unsigned int v6;
  id v7;
  void *v8;
  void *v9;
  char v11;

  if (!a1)
    return 0;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData data](NSMutableData, "data"));
  v3 = sub_10022CF64((uint64_t)KmlTlv, *(unsigned __int16 *)(a1 + 8));
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  objc_msgSend(v2, "appendData:", v4);

  v5 = *(id *)(a1 + 16);
  v6 = objc_msgSend(v5, "length");
  v7 = sub_10022CF64((uint64_t)KmlTlv, v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  v9 = v8;
  if (v6 >= 0x80)
  {
    v11 = objc_msgSend(v8, "length") | 0x80;
    objc_msgSend(v2, "appendBytes:length:", &v11, 1);
  }
  objc_msgSend(v2, "appendData:", v9);
  if (v5)
    objc_msgSend(v2, "appendData:", v5);

  return v2;
}

uint64_t sub_10022D114(uint64_t result, void *a2)
{
  if (result)
    return sub_10022D124(result, a2, 0);
  return result;
}

uint64_t sub_10022D124(uint64_t a1, void *a2, int a3)
{
  id v5;
  _WORD *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  objc_super v23;

  v5 = a2;
  if (a1)
  {
    v23.receiver = (id)a1;
    v23.super_class = (Class)KmlDeviceConfigurationData;
    v6 = objc_msgSendSuper2(&v23, "init");
    a1 = (uint64_t)v6;
    if (v6)
    {
      v6[9] = 1;
      *((_BYTE *)v6 + 29) = 0;
      *((_BYTE *)v6 + 20) = 0;
      v7 = (void *)*((_QWORD *)v6 + 4);
      *((_QWORD *)v6 + 4) = 0;

      v8 = *(void **)(a1 + 40);
      *(_QWORD *)(a1 + 40) = 0;

      v9 = *(void **)(a1 + 48);
      *(_QWORD *)(a1 + 48) = 0;

      v10 = *(void **)(a1 + 56);
      *(_QWORD *)(a1 + 56) = 0;

      *(_WORD *)(a1 + 21) = 0;
      v11 = *(void **)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;

      v12 = *(void **)(a1 + 80);
      *(_QWORD *)(a1 + 80) = 0;

      v13 = *(void **)(a1 + 88);
      *(_QWORD *)(a1 + 88) = 0;

      v14 = *(void **)(a1 + 96);
      *(_QWORD *)(a1 + 96) = 0;

      v15 = *(void **)(a1 + 104);
      *(_QWORD *)(a1 + 104) = 0;

      v16 = *(void **)(a1 + 112);
      *(_QWORD *)(a1 + 112) = 0;

      v17 = *(void **)(a1 + 120);
      *(_QWORD *)(a1 + 120) = 0;

      *(_WORD *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 23) = 0;
      v18 = *(void **)(a1 + 144);
      *(_QWORD *)(a1 + 144) = 0;

      v19 = *(void **)(a1 + 152);
      *(_QWORD *)(a1 + 152) = 0;

      *(_WORD *)(a1 + 27) = 0;
      v20 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
      v21 = *(void **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v20;

      sub_10022D274(a1, v5, a3);
    }
  }

  return a1;
}

void sub_10022D274(uint64_t a1, void *a2, int a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  void *i;
  id *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id *v18;
  uint64_t v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  id *v27;
  int v28;
  id v29;
  uint64_t v30;
  void *v31;
  id *v32;
  void *v33;
  id v34;
  uint64_t v35;
  id *v36;
  void *v37;
  id *v38;
  uint64_t v39;
  id *v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  id *v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  void *v50;
  id *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id *v57;
  id v58;
  uint64_t v59;
  void *v60;
  id v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  _BYTE v70[128];
  _BYTE v71[128];

  v5 = a2;
  if (a1)
  {
    v61 = v5;
    v6 = v5;
    if (a3)
    {
      v7 = sub_10022C7A4((uint64_t)KmlTlv, v6);
      v66 = 0u;
      v67 = 0u;
      v68 = 0u;
      v69 = 0u;
      v8 = (id)objc_claimAutoreleasedReturnValue(v7);
      v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v66, v71, 16);
      if (!v9)
        goto LABEL_13;
      v10 = v9;
      v11 = *(_QWORD *)v67;
      do
      {
        for (i = 0; i != v10; i = (char *)i + 1)
        {
          if (*(_QWORD *)v67 != v11)
            objc_enumerationMutation(v8);
          v13 = *(id **)(*((_QWORD *)&v66 + 1) + 8 * (_QWORD)i);
          if (sub_100055868((uint64_t)v13) == 32590)
          {
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDeviceConfigurationData parseDeviceConfigData:outerTag:]", 251, CFSTR("Found device config data to parse in outer tag"), v14, v15, v16, v17, v59);
            v18 = sub_10022CD6C(v13);
            v19 = objc_claimAutoreleasedReturnValue(v18);

            v6 = (id)v19;
            goto LABEL_13;
          }
        }
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v66, v71, 16);
      }
      while (v10);
LABEL_13:

    }
    v60 = v6;
    v20 = sub_10022C7A4((uint64_t)KmlTlv, v6);
    v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
    objc_msgSend(*(id *)(a1 + 8), "removeAllObjects");
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v22 = v21;
    v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v62, v70, 16);
    if (!v23)
      goto LABEL_52;
    v24 = v23;
    v25 = *(_QWORD *)v63;
LABEL_16:
    v26 = 0;
    while (1)
    {
      if (*(_QWORD *)v63 != v25)
        objc_enumerationMutation(v22);
      v27 = *(id **)(*((_QWORD *)&v62 + 1) + 8 * v26);
      v28 = sub_100055868((uint64_t)v27);
      if (v28 > 215)
      {
        if (v28 > 32584)
        {
          switch(v28)
          {
            case 32610:
              v51 = sub_10022CD6C(v27);
              v52 = (void *)objc_claimAutoreleasedReturnValue(v51);
              sub_10022EF70(a1, v52);

              *(_BYTE *)(a1 + 29) = 1;
              objc_msgSend(*(id *)(a1 + 8), "addObject:", v27);
              KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDeviceConfigurationData parseDeviceConfigData:outerTag:]", 314, CFSTR("UWB is disabled for local use, but available for sharing."), v53, v54, v55, v56, (uint64_t)v60);
              break;
            case 32608:
              v57 = sub_10022CD6C(v27);
              v37 = (void *)objc_claimAutoreleasedReturnValue(v57);
              sub_10022E07C((_BYTE *)a1, v37);
              goto LABEL_50;
            case 32585:
              v36 = sub_10022CD6C(v27);
              v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
              sub_10022DD44((_BYTE *)a1, v37);
LABEL_50:

              break;
          }
        }
        else
        {
          switch(v28)
          {
            case 216:
              *(_BYTE *)(a1 + 22) = sub_10022CEB0((uint64_t)v27);
              v42 = sub_10022D014((uint64_t)v27);
              v43 = objc_claimAutoreleasedReturnValue(v42);
              v31 = *(void **)(a1 + 120);
              *(_QWORD *)(a1 + 120) = v43;
              goto LABEL_43;
            case 217:
              v44 = sub_10022CD6C(v27);
              v45 = objc_claimAutoreleasedReturnValue(v44);
              v31 = *(void **)(a1 + 72);
              *(_QWORD *)(a1 + 72) = v45;
              goto LABEL_43;
            case 32554:
              v32 = sub_10022CD6C(v27);
              v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
              sub_10022E3E8(a1, v33);

              v34 = sub_10022D014((uint64_t)v27);
              v35 = objc_claimAutoreleasedReturnValue(v34);
              v31 = *(void **)(a1 + 128);
              *(_QWORD *)(a1 + 128) = v35;
              goto LABEL_43;
          }
        }
      }
      else if (v28 > 90)
      {
        switch(v28)
        {
          case 91:
            v46 = sub_10022D014((uint64_t)v27);
            v47 = objc_claimAutoreleasedReturnValue(v46);
            v31 = *(void **)(a1 + 144);
            *(_QWORD *)(a1 + 144) = v47;
            goto LABEL_43;
          case 96:
            v48 = sub_10022D014((uint64_t)v27);
            v49 = objc_claimAutoreleasedReturnValue(v48);
            v50 = *(void **)(a1 + 112);
            *(_QWORD *)(a1 + 112) = v49;

            sub_10022ED10(a1);
            goto LABEL_44;
          case 215:
            *(_BYTE *)(a1 + 21) = sub_10022CEB0((uint64_t)v27) == 1;
LABEL_44:
            objc_msgSend(*(id *)(a1 + 8), "addObject:", v27, v60);
            break;
        }
      }
      else
      {
        switch(v28)
        {
          case 'J':
            v38 = sub_10022CD6C(v27);
            v39 = objc_claimAutoreleasedReturnValue(v38);
            v31 = *(void **)(a1 + 80);
            *(_QWORD *)(a1 + 80) = v39;
            goto LABEL_43;
          case 'K':
            v40 = sub_10022CD6C(v27);
            v41 = objc_claimAutoreleasedReturnValue(v40);
            v31 = *(void **)(a1 + 88);
            *(_QWORD *)(a1 + 88) = v41;
            goto LABEL_43;
          case 'T':
            v29 = sub_10022D014((uint64_t)v27);
            v30 = objc_claimAutoreleasedReturnValue(v29);
            v31 = *(void **)(a1 + 152);
            *(_QWORD *)(a1 + 152) = v30;
LABEL_43:

            goto LABEL_44;
        }
      }
      if (v24 == (id)++v26)
      {
        v58 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v62, v70, 16);
        v24 = v58;
        if (!v58)
        {
LABEL_52:

          v5 = v61;
          break;
        }
        goto LABEL_16;
      }
    }
  }

}

id *sub_10022D6EC(id *a1)
{
  id *v1;
  void *v2;
  _BYTE *v3;
  void *v4;
  _BYTE *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  id v12;
  void *v13;
  _WORD *v14;
  id *v15;
  id *v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];

  v1 = a1;
  if (a1)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData data](NSMutableData, "data"));
    if (*((_BYTE *)v1 + 16))
    {
      v3 = sub_10022D8D0(v1, 1);
      v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
      objc_msgSend(v2, "appendData:", v4);

    }
    if (*((_BYTE *)v1 + 17))
    {
      v5 = sub_10022DA14(v1, 0);
      v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
      objc_msgSend(v2, "appendData:", v6);

    }
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v7 = v1[1];
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v25;
      do
      {
        v11 = 0;
        do
        {
          if (*(_QWORD *)v25 != v10)
            objc_enumerationMutation(v7);
          v12 = sub_10022D014(*(_QWORD *)(*((_QWORD *)&v24 + 1) + 8 * (_QWORD)v11));
          v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
          objc_msgSend(v2, "appendData:", v13);

          v11 = (char *)v11 + 1;
        }
        while (v9 != v11);
        v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
      }
      while (v9);
    }

    v14 = sub_10022CB3C((uint64_t)KmlTlv, 32590, v2);
    v15 = (id *)objc_claimAutoreleasedReturnValue(v14);
    v16 = sub_10022CD6C(v15);
    v1 = (id *)objc_claimAutoreleasedReturnValue(v16);

    v17 = kmlUtilHexStringFromData(v1);
    v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDeviceConfigurationData asData]", 102, CFSTR("DeviceConfig Data : %@"), v19, v20, v21, v22, (uint64_t)v18);

  }
  return v1;
}

_BYTE *sub_10022D8D0(_BYTE *a1, int a2)
{
  _BYTE *v2;
  void *v4;
  _WORD *v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  _WORD *v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  _WORD *v17;
  void *v18;
  id v19;

  v2 = a1;
  if (a1)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData data](NSMutableData, "data"));
    if (v2[18])
    {
      v5 = sub_10022CC60((uint64_t)KmlTlv, 24400);
      v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
      v7 = sub_10022D014((uint64_t)v6);
      v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      objc_msgSend(v4, "appendData:", v8);

    }
    v9 = sub_10022EAA8((uint64_t)v2, 32594, a2);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    if (v2[19] || a2 != 1 && v2[29])
    {
      v11 = sub_10022CC60((uint64_t)KmlTlv, 24401);
      v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      v13 = sub_10022D014((uint64_t)v12);
      v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
      objc_msgSend(v4, "appendData:", v14);

      if (v10)
      {
        v15 = sub_10022D014((uint64_t)v10);
        v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
        objc_msgSend(v4, "appendData:", v16);

      }
    }
    v17 = sub_10022CB3C((uint64_t)KmlTlv, 32585, v4);
    v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
    v19 = sub_10022D014((uint64_t)v18);
    v2 = (_BYTE *)objc_claimAutoreleasedReturnValue(v19);

  }
  return v2;
}

_BYTE *sub_10022DA14(_BYTE *a1, int a2)
{
  _BYTE *v2;
  void *v4;
  int v5;
  char v6;
  void *v7;
  _WORD *v8;
  void *v9;
  id v10;
  void *v11;
  _WORD *v12;
  void *v13;
  id v14;
  void *v15;
  _WORD *v16;
  void *v17;
  id v18;
  void *v19;
  _WORD *v20;
  void *v21;
  id v22;
  void *v23;
  _WORD *v24;
  void *v25;
  id v26;
  void *v27;
  _WORD *v28;
  void *v29;
  id v30;
  void *v31;
  _WORD *v32;
  void *v33;
  id v34;
  char v36;

  v2 = a1;
  if (!a1)
    return v2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData data](NSMutableData, "data"));
  v5 = v2[23];
  v36 = v2[23];
  if (a2)
  {
    if (v5 == 5)
    {
      v6 = 3;
      goto LABEL_7;
    }
    if (v5 == 4)
    {
      v6 = 1;
LABEL_7:
      v36 = v6;
    }
  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", &v36, 1));
  v8 = sub_10022CB3C((uint64_t)KmlTlv, 218, v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v10 = sub_10022D014((uint64_t)v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  objc_msgSend(v4, "appendData:", v11);

  if (v2[24])
  {
    v12 = sub_10022CC60((uint64_t)KmlTlv, 219);
    v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    v14 = sub_10022D014((uint64_t)v13);
    v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    objc_msgSend(v4, "appendData:", v15);

  }
  if (v2[25])
  {
    v16 = sub_10022CC60((uint64_t)KmlTlv, 220);
    v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    v18 = sub_10022D014((uint64_t)v17);
    v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    objc_msgSend(v4, "appendData:", v19);

  }
  if (v2[26])
  {
    v20 = sub_10022CB90((uint64_t)KmlTlv, 221, v2[26]);
    v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
    v22 = sub_10022D014((uint64_t)v21);
    v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
    objc_msgSend(v4, "appendData:", v23);

  }
  if (v2[27])
  {
    v24 = sub_10022CC60((uint64_t)KmlTlv, 222);
    v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
    v26 = sub_10022D014((uint64_t)v25);
    v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
    objc_msgSend(v4, "appendData:", v27);

  }
  if (v2[28])
  {
    v28 = sub_10022CC60((uint64_t)KmlTlv, 192);
    v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
    v30 = sub_10022D014((uint64_t)v29);
    v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
    objc_msgSend(v4, "appendData:", v31);

  }
  v32 = sub_10022CB3C((uint64_t)KmlTlv, 32608, v4);
  v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
  v34 = sub_10022D014((uint64_t)v33);
  v2 = (_BYTE *)objc_claimAutoreleasedReturnValue(v34);

  return v2;
}

uint64_t sub_10022DC4C(uint64_t result)
{
  unsigned int v1;
  BOOL v2;
  unsigned int v3;

  if (result)
  {
    v1 = *(unsigned __int8 *)(result + 23);
    v2 = v1 > 5;
    v3 = (0x3Au >> v1) & 1;
    if (v2)
      return 0;
    else
      return v3;
  }
  return result;
}

BOOL sub_10022DC6C(_BOOL8 result)
{
  if (result)
    return (*(_BYTE *)(result + 23) & 0xFD) == 1;
  return result;
}

uint64_t sub_10022DC84(uint64_t result)
{
  unsigned int v1;
  BOOL v2;
  unsigned int v3;

  if (result)
  {
    v1 = *(unsigned __int8 *)(result + 23);
    v2 = v1 > 4;
    v3 = (0x13u >> v1) & 1;
    if (v2)
      return 0;
    else
      return v3;
  }
  return result;
}

_BYTE *sub_10022DCA4(_BYTE *a1)
{
  _BYTE *v1;

  if (a1)
  {
    v1 = sub_10022DA14(a1, 1);
    a1 = (_BYTE *)objc_claimAutoreleasedReturnValue(v1);
  }
  return a1;
}

_BYTE *sub_10022DCC4(_BYTE *a1, int a2)
{
  int v2;
  _BYTE *v3;

  if (a1)
  {
    if (a2)
      v2 = 3;
    else
      v2 = 2;
    v3 = sub_10022D8D0(a1, v2);
    a1 = (_BYTE *)objc_claimAutoreleasedReturnValue(v3);
  }
  return a1;
}

void sub_10022DCEC(_BYTE *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    if (v3)
    {
      v6 = v3;
      v5 = objc_msgSend(v3, "length");
      v4 = v6;
      if (v5)
      {
        sub_10022DD44(a1, v6);
        v4 = v6;
      }
    }
  }

}

void sub_10022DD44(_BYTE *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  char v7;
  uint64_t v8;
  void *i;
  id *v10;
  int v11;
  id *v12;
  void *v13;
  char v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];

  if (!a1)
    return;
  a1[18] = 0;
  v3 = sub_10022C7A4((uint64_t)KmlTlv, a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (!v5)
    goto LABEL_21;
  v6 = v5;
  v7 = 0;
  v8 = *(_QWORD *)v16;
  do
  {
    for (i = 0; i != v6; i = (char *)i + 1)
    {
      if (*(_QWORD *)v16 != v8)
        objc_enumerationMutation(v4);
      v10 = *(id **)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)i);
      v11 = sub_100055868((uint64_t)v10);
      if (v11 <= 32591)
      {
        if (v11 != 24400)
        {
          if (v11 != 24401)
            continue;
LABEL_14:
          v7 = 1;
          a1[19] = 1;
          a1[29] = 0;
          continue;
        }
LABEL_15:
        v7 = 1;
        a1[18] = 1;
        continue;
      }
      switch(v11)
      {
        case 32594:
          v12 = sub_10022CD6C(v10);
          v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
          sub_10022EF70((uint64_t)a1, v13);

          v7 = 1;
          break;
        case 32593:
          goto LABEL_14;
        case 32592:
          goto LABEL_15;
      }
    }
    v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  }
  while (v6);
  if ((v7 & 1) != 0)
  {
    v14 = 1;
    goto LABEL_22;
  }
LABEL_21:
  v14 = 0;
  a1[18] = 1;
LABEL_22:
  a1[16] = v14;

}

void sub_10022DF00(_BYTE *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *i;
  id *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id *v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];

  v3 = a2;
  v4 = v3;
  if (a1 && objc_msgSend(v3, "length"))
  {
    v5 = sub_10022C7A4((uint64_t)KmlTlv, v4);
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v6 = (id)objc_claimAutoreleasedReturnValue(v5);
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v19;
      while (2)
      {
        for (i = 0; i != v8; i = (char *)i + 1)
        {
          if (*(_QWORD *)v19 != v9)
            objc_enumerationMutation(v6);
          v11 = *(id **)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)i);
          if (sub_100055868((uint64_t)v11) == 32608)
          {
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDeviceConfigurationData updateSharingConfigWithData:]", 170, CFSTR("Found sharing config data"), v12, v13, v14, v15, v18);
            v16 = sub_10022CD6C(v11);
            v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
            sub_10022E07C(a1, v17);

            goto LABEL_13;
          }
        }
        v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
        if (v8)
          continue;
        break;
      }
    }
LABEL_13:

  }
}

void sub_10022E07C(_BYTE *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  _QWORD *v9;
  int v10;
  unsigned int v11;
  char v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];

  if (a1)
  {
    a1[17] = 1;
    v3 = sub_10022C7A4((uint64_t)KmlTlv, a2);
    v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v14;
      do
      {
        for (i = 0; i != v6; i = (char *)i + 1)
        {
          if (*(_QWORD *)v14 != v7)
            objc_enumerationMutation(v4);
          v9 = *(_QWORD **)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)i);
          v10 = sub_100055868((uint64_t)v9);
          switch(v10)
          {
            case 218:
              a1[23] = sub_10022CEB0((uint64_t)v9);
              break;
            case 219:
              a1[24] = 1;
              break;
            case 220:
              a1[25] = 1;
              break;
            case 221:
              v11 = sub_10022CE3C(v9);
              if (v11 >= 0x10)
                v12 = 16;
              else
                v12 = v11;
              a1[26] = v12;
              break;
            case 222:
              a1[27] = 1;
              break;
            default:
              if (v10 == 192)
                a1[28] = 1;
              break;
          }
        }
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      }
      while (v6);
    }

  }
}

void sub_10022E204(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  void *i;
  id *v15;
  id *v16;
  void *v17;
  id v18;
  uint64_t v19;
  void *v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[128];

  v3 = a2;
  v8 = v3;
  if (a1)
  {
    if (*(_QWORD *)(a1 + 136))
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDeviceConfigurationData updatePPIDWithServerProvidedData:]", 181, CFSTR("We already have car provided ppid. Ignore the server provided value"), v4, v5, v6, v7, v27);
    }
    else
    {
      if (v3 && objc_msgSend(v3, "length"))
      {
        v9 = sub_10022C7A4((uint64_t)KmlTlv, v8);
        v28 = 0u;
        v29 = 0u;
        v30 = 0u;
        v31 = 0u;
        v10 = (id)objc_claimAutoreleasedReturnValue(v9);
        v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
        if (v11)
        {
          v12 = v11;
          v13 = *(_QWORD *)v29;
          while (2)
          {
            for (i = 0; i != v12; i = (char *)i + 1)
            {
              if (*(_QWORD *)v29 != v13)
                objc_enumerationMutation(v10);
              v15 = *(id **)(*((_QWORD *)&v28 + 1) + 8 * (_QWORD)i);
              if (sub_100055868((uint64_t)v15) == 32554)
              {
                v16 = sub_10022CD6C(v15);
                v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
                sub_10022E3E8(a1, v17);

                v18 = sub_10022D014((uint64_t)v15);
                v19 = objc_claimAutoreleasedReturnValue(v18);
                v20 = *(void **)(a1 + 128);
                *(_QWORD *)(a1 + 128) = v19;

                objc_msgSend(*(id *)(a1 + 8), "addObject:", v15);
                goto LABEL_16;
              }
            }
            v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
            if (v12)
              continue;
            break;
          }
        }
LABEL_16:

      }
      v21 = kmlUtilHexStringFromData(*(void **)(a1 + 128));
      v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
      KmlLogFunc_InternalOnly(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDeviceConfigurationData updatePPIDWithServerProvidedData:]", 196, CFSTR("Server provided PPID data: %@"), v23, v24, v25, v26, (uint64_t)v22);

    }
  }

}

void sub_10022E3E8(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  id v17;
  uint64_t v18;
  id *v19;
  unsigned int v20;
  id *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id *v26;
  void *v27;
  id v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  void *v34;
  void *i;
  id *v36;
  unsigned int v37;
  id *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id *v43;
  void *v44;
  unsigned __int8 v45;
  id *v46;
  void *v47;
  id v48;
  void *v49;
  id v50;
  id v51;
  id v52;
  uint64_t v53;
  const char *v54;
  void *v55;
  uint64_t v56;
  void *j;
  id *v58;
  id *v59;
  void *v60;
  unsigned int v61;
  id *v62;
  uint64_t v63;
  id v64;
  char *v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  void *v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  id v83;
  uint64_t v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  id v92;
  id v93;
  id v94;
  char *v95;
  void *v96;
  void *v97;
  char v98;
  void *v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  _BYTE v113[128];
  _BYTE v114[128];
  _BYTE v115[128];

  v3 = a2;
  v90 = a1;
  if (!a1)
    goto LABEL_50;
  v4 = sub_10022C7A4((uint64_t)KmlTlv, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("AAPL"), "dataUsingEncoding:", 4));
  v97 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("DFLT"), "dataUsingEncoding:", 4));
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDeviceConfigurationData parseOemSpecificContent:]", 496, CFSTR("Looking for %@, or back up %@"), v7, v8, v9, v10, (uint64_t)v6);
  v111 = 0u;
  v112 = 0u;
  v109 = 0u;
  v110 = 0u;
  v11 = v5;
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v109, v115, 16);
  if (!v12)
  {
    v94 = 0;
    v76 = v11;
LABEL_48:

    goto LABEL_49;
  }
  v13 = v12;
  v89 = v3;
  v94 = 0;
  v14 = 0;
  v15 = *(_QWORD *)v110;
  v16 = "-[KmlDeviceConfigurationData parseOemSpecificContent:]";
  v91 = *(_QWORD *)v110;
  v92 = v11;
  while (2)
  {
    v17 = 0;
    v93 = v13;
    do
    {
      v18 = v14;
      if (*(_QWORD *)v110 != v15)
        objc_enumerationMutation(v11);
      v95 = (char *)v17;
      v19 = *(id **)(*((_QWORD *)&v109 + 1) + 8 * (_QWORD)v17);
      v20 = sub_100055868((uint64_t)v19);
      v21 = sub_10022CD6C(v19);
      v85 = (void *)objc_claimAutoreleasedReturnValue(v21);
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)v16, 498, CFSTR("TLV: %02x : %@"), v22, v23, v24, v25, v20);

      if (sub_100055868((uint64_t)v19) != 97)
      {
        v14 = v18;
        v65 = v95;
        goto LABEL_41;
      }
      v26 = sub_10022CD6C(v19);
      v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
      v28 = sub_10022C7A4((uint64_t)KmlTlv, v27);
      v29 = (void *)objc_claimAutoreleasedReturnValue(v28);

      v107 = 0u;
      v108 = 0u;
      v105 = 0u;
      v106 = 0u;
      v30 = v29;
      v31 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v105, v114, 16);
      v96 = v30;
      if (v31)
      {
        v32 = v31;
        v98 = 0;
        v99 = 0;
        v100 = *(_QWORD *)v106;
        v33 = v18;
        v34 = v30;
        do
        {
          for (i = 0; i != v32; i = (char *)i + 1)
          {
            if (*(_QWORD *)v106 != v100)
              objc_enumerationMutation(v34);
            v36 = *(id **)(*((_QWORD *)&v105 + 1) + 8 * (_QWORD)i);
            v37 = sub_100055868((uint64_t)v36);
            v38 = sub_10022CD6C(v36);
            v86 = (void *)objc_claimAutoreleasedReturnValue(v38);
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)v16, 503, CFSTR("TLV: %02x : %@"), v39, v40, v41, v42, v37);

            if (sub_100055868((uint64_t)v36) == 64)
            {
              v43 = sub_10022CD6C(v36);
              v44 = (void *)objc_claimAutoreleasedReturnValue(v43);
              v45 = objc_msgSend(v6, "isEqualToData:", v44);

              if ((v45 & 1) != 0)
              {
                v98 = 1;
              }
              else
              {
                v59 = sub_10022CD6C(v36);
                v60 = (void *)objc_claimAutoreleasedReturnValue(v59);
                v61 = objc_msgSend(v97, "isEqualToData:", v60);

                v33 = v61 | v33;
              }
            }
            else if (sub_100055868((uint64_t)v36) == 49)
            {
              v46 = sub_10022CD6C(v36);
              v47 = (void *)objc_claimAutoreleasedReturnValue(v46);
              v48 = sub_10022C7A4((uint64_t)KmlTlv, v47);
              v49 = (void *)objc_claimAutoreleasedReturnValue(v48);

              v103 = 0u;
              v104 = 0u;
              v101 = 0u;
              v102 = 0u;
              v50 = v49;
              v51 = objc_msgSend(v50, "countByEnumeratingWithState:objects:count:", &v101, v113, 16);
              if (v51)
              {
                v52 = v51;
                v53 = v33;
                v54 = v16;
                v55 = v6;
                v56 = *(_QWORD *)v102;
                while (2)
                {
                  for (j = 0; j != v52; j = (char *)j + 1)
                  {
                    if (*(_QWORD *)v102 != v56)
                      objc_enumerationMutation(v50);
                    v58 = *(id **)(*((_QWORD *)&v101 + 1) + 8 * (_QWORD)j);
                    if (sub_100055868((uint64_t)v58) == 80)
                    {
                      v62 = sub_10022CD6C(v58);
                      v63 = objc_claimAutoreleasedReturnValue(v62);

                      v99 = (void *)v63;
                      goto LABEL_28;
                    }
                  }
                  v52 = objc_msgSend(v50, "countByEnumeratingWithState:objects:count:", &v101, v113, 16);
                  if (v52)
                    continue;
                  break;
                }
LABEL_28:
                v6 = v55;
                v16 = v54;
                v33 = v53;
                v34 = v96;
              }

            }
          }
          v32 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v105, v114, 16);
        }
        while (v32);

        if ((v98 & 1) != 0)
        {
          v77 = kmlUtilHexStringFromData(v99);
          v88 = (void *)objc_claimAutoreleasedReturnValue(v77);
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDeviceConfigurationData parseOemSpecificContent:]", 522, CFSTR("Found oem specific data for %@ : (%@)"), v78, v79, v80, v81, (uint64_t)CFSTR("AAPL"));

          v82 = *(void **)(v90 + 136);
          *(_QWORD *)(v90 + 136) = v99;
          v83 = v99;

          v11 = v92;
          v76 = v92;
          goto LABEL_46;
        }
        v11 = v92;
        v64 = v99;
        if ((v33 & 1) == 0)
        {
          v14 = 0;
          v15 = v91;
          v13 = v93;
          goto LABEL_40;
        }
        v15 = v91;
        v13 = v93;
      }
      else
      {

        v64 = 0;
        if ((v18 & 1) == 0)
        {
          v14 = 0;
          goto LABEL_40;
        }
      }
      v66 = kmlUtilHexStringFromData(v64);
      v87 = (void *)objc_claimAutoreleasedReturnValue(v66);
      v14 = 1;
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)v16, 526, CFSTR("Found default product plan data for %@ : (%@)"), v67, v68, v69, v70, (uint64_t)CFSTR("DFLT"));

      v64 = v64;
      v94 = v64;
LABEL_40:
      v65 = v95;

LABEL_41:
      v17 = v65 + 1;
    }
    while (v17 != v13);
    v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v109, v115, 16);
    if (v13)
      continue;
    break;
  }

  if ((v14 & 1) != 0)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDeviceConfigurationData parseOemSpecificContent:]", 533, CFSTR("Only found default product plan data, so using it"), v71, v72, v73, v74, v84);
    v75 = v94;
    v76 = *(void **)(v90 + 136);
    v94 = v75;
    *(_QWORD *)(v90 + 136) = v75;
LABEL_46:
    v3 = v89;
    goto LABEL_48;
  }
  v3 = v89;
LABEL_49:

LABEL_50:
}

void sub_10022E9EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 19))
    {
      v10 = sub_10022EAA8(a1, 32610, 1);
      v16 = (id)objc_claimAutoreleasedReturnValue(v10);
      if (v16)
        objc_msgSend(*(id *)(a1 + 8), "addObject:", v16);
      *(_BYTE *)(a1 + 19) = 0;
      *(_BYTE *)(a1 + 29) = 1;
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDeviceConfigurationData removeUwbSupportLocally]", 217, CFSTR("UWB disabled locally, config saved for sharing"), v11, v12, v13, v14, v15);

    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDeviceConfigurationData removeUwbSupportLocally]", 203, CFSTR("This reader doesn't support UWB. Nothing to disable locally."), a5, a6, a7, a8, a9);
    }
  }
}

id sub_10022EAA8(uint64_t a1, __int16 a2, int a3)
{
  void *v6;
  void *v7;
  _WORD *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  _WORD *v13;
  void *v14;
  id v15;
  void *v16;
  _WORD *v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  _WORD *v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  _WORD *v27;
  void *v28;
  id v29;
  void *v30;
  _WORD *v31;
  void *v32;

  if (a1)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData data](NSMutableData, "data"));
    if (a3 != 3)
    {
      v7 = *(void **)(a1 + 32);
      if (v7)
      {
        v8 = sub_10022CB3C((uint64_t)KmlTlv, 208, v7);
        v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
        v10 = sub_10022D014((uint64_t)v9);
        v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
        objc_msgSend(v6, "appendData:", v11);

      }
      v12 = *(void **)(a1 + 40);
      if (v12)
      {
        v13 = sub_10022CB3C((uint64_t)KmlTlv, 209, v12);
        v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
        v15 = sub_10022D014((uint64_t)v14);
        v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
        objc_msgSend(v6, "appendData:", v16);

      }
    }
    if (*(_BYTE *)(a1 + 20))
    {
      v17 = sub_10022CC60((uint64_t)KmlTlv, 210);
      v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
      v19 = sub_10022D014((uint64_t)v18);
      v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
      objc_msgSend(v6, "appendData:", v20);

    }
    if (a3 != 3)
    {
      v21 = *(void **)(a1 + 48);
      if (v21)
      {
        v22 = sub_10022CB3C((uint64_t)KmlTlv, 211, v21);
        v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
        v24 = sub_10022D014((uint64_t)v23);
        v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
        objc_msgSend(v6, "appendData:", v25);

      }
      v26 = *(void **)(a1 + 56);
      if (v26)
      {
        v27 = sub_10022CB3C((uint64_t)KmlTlv, 212, v26);
        v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
        v29 = sub_10022D014((uint64_t)v28);
        v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
        objc_msgSend(v6, "appendData:", v30);

      }
    }
    if (objc_msgSend(v6, "length"))
      v31 = sub_10022CB3C((uint64_t)KmlTlv, a2, v6);
    else
      v31 = sub_10022CC60((uint64_t)KmlTlv, a2);
    v32 = (void *)objc_claimAutoreleasedReturnValue(v31);

  }
  else
  {
    v32 = 0;
  }
  return v32;
}

uint64_t sub_10022EC80(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;

  if (result)
  {
    if (a2 == 768 && (*(unsigned __int8 *)(result + 23) | 2) == 2)
    {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlDeviceConfigurationData isValidForKmlVersion:transport:]", 225, CFSTR("Sharing In a chain does not support offline immo tokens"), a5, a6, a7, a8, vars0);
      return 0;
    }
    if (a3)
    {
      if (a3 == 2)
      {
        if (!*(_BYTE *)(result + 19))
          return 0;
LABEL_10:
        if (*(_QWORD *)(result + 32))
          return *(_QWORD *)(result + 40) != 0;
        return 0;
      }
    }
    else if (*(_BYTE *)(result + 19))
    {
      goto LABEL_10;
    }
    return 1;
  }
  return result;
}

void sub_10022ED10(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  id *v7;
  id *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  void *j;
  id *v19;
  id *v20;
  uint64_t v21;
  void *v22;
  id *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[128];
  _BYTE v36[128];

  if (a1)
  {
    v2 = sub_10022C7A4((uint64_t)KmlTlv, *(void **)(a1 + 112));
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    v34 = 0u;
    v3 = (id)objc_claimAutoreleasedReturnValue(v2);
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v31, v36, 16);
    if (v4)
    {
      v5 = *(_QWORD *)v32;
      while (2)
      {
        for (i = 0; i != v4; i = (char *)i + 1)
        {
          if (*(_QWORD *)v32 != v5)
            objc_enumerationMutation(v3);
          v7 = *(id **)(*((_QWORD *)&v31 + 1) + 8 * (_QWORD)i);
          if (sub_100055868((uint64_t)v7) == 96)
          {
            v8 = sub_10022CD6C(v7);
            v4 = (id)objc_claimAutoreleasedReturnValue(v8);
            goto LABEL_12;
          }
        }
        v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v31, v36, 16);
        if (v4)
          continue;
        break;
      }
    }
LABEL_12:

    if (!objc_msgSend(v4, "length"))
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDeviceConfigurationData parseSharingInAChainDeviceConfigMailboxSettingData]", 588, CFSTR("No override found"), v9, v10, v11, v12, v26);
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDeviceConfigurationData parseSharingInAChainDeviceConfigMailboxSettingData]", 591, CFSTR("SharingInAChain override %@"), v9, v10, v11, v12, (uint64_t)v4);
    v13 = sub_10022C7A4((uint64_t)KmlTlv, v4);
    v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v27, v35, 16);
    if (v15)
    {
      v16 = v15;
      v17 = *(_QWORD *)v28;
      do
      {
        for (j = 0; j != v16; j = (char *)j + 1)
        {
          if (*(_QWORD *)v28 != v17)
            objc_enumerationMutation(v14);
          v19 = *(id **)(*((_QWORD *)&v27 + 1) + 8 * (_QWORD)j);
          if (sub_100055868((uint64_t)v19) == 74)
          {
            v20 = sub_10022CD6C(v19);
            v21 = objc_claimAutoreleasedReturnValue(v20);
            v22 = *(void **)(a1 + 96);
            *(_QWORD *)(a1 + 96) = v21;

          }
          if (sub_100055868((uint64_t)v19) == 75)
          {
            v23 = sub_10022CD6C(v19);
            v24 = objc_claimAutoreleasedReturnValue(v23);
            v25 = *(void **)(a1 + 104);
            *(_QWORD *)(a1 + 104) = v24;

          }
        }
        v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v27, v35, 16);
      }
      while (v16);
    }

  }
}

void sub_10022EF70(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  id *v9;
  id *v10;
  uint64_t v11;
  void *v12;
  id *v13;
  uint64_t v14;
  id *v15;
  uint64_t v16;
  id *v17;
  uint64_t v18;
  id *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];

  if (a1)
  {
    v3 = sub_10022C7A4((uint64_t)KmlTlv, a2);
    v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v22;
      do
      {
        for (i = 0; i != v6; i = (char *)i + 1)
        {
          if (*(_QWORD *)v22 != v7)
            objc_enumerationMutation(v4);
          v9 = *(id **)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)i);
          switch(sub_100055868((uint64_t)v9))
          {
            case 0xD0u:
              v10 = sub_10022CD6C(v9);
              v11 = objc_claimAutoreleasedReturnValue(v10);
              v12 = *(void **)(a1 + 32);
              *(_QWORD *)(a1 + 32) = v11;
              goto LABEL_14;
            case 0xD1u:
              v15 = sub_10022CD6C(v9);
              v16 = objc_claimAutoreleasedReturnValue(v15);
              v12 = *(void **)(a1 + 40);
              *(_QWORD *)(a1 + 40) = v16;
              goto LABEL_14;
            case 0xD2u:
              *(_BYTE *)(a1 + 20) = 1;
              continue;
            case 0xD3u:
              v17 = sub_10022CD6C(v9);
              v18 = objc_claimAutoreleasedReturnValue(v17);
              v12 = *(void **)(a1 + 48);
              *(_QWORD *)(a1 + 48) = v18;
              goto LABEL_14;
            case 0xD4u:
              v13 = sub_10022CD6C(v9);
              v14 = objc_claimAutoreleasedReturnValue(v13);
              v12 = *(void **)(a1 + 56);
              *(_QWORD *)(a1 + 56) = v14;
              goto LABEL_14;
            case 0xD5u:
              v19 = sub_10022CD6C(v9);
              v20 = objc_claimAutoreleasedReturnValue(v19);
              v12 = *(void **)(a1 + 64);
              *(_QWORD *)(a1 + 64) = v20;
LABEL_14:

              break;
            default:
              continue;
          }
        }
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
      }
      while (v6);
    }

  }
}

BOOL sub_10022F124(_BOOL8 result)
{
  if (result)
    return *(_BYTE *)(result + 18) != 0;
  return result;
}

BOOL sub_10022F138(_BOOL8 result)
{
  if (result)
    return *(_BYTE *)(result + 19) != 0;
  return result;
}

BOOL sub_10022F14C(_BOOL8 result)
{
  if (result)
    return *(_BYTE *)(result + 21) != 0;
  return result;
}

uint64_t sub_10022F160(uint64_t result)
{
  if (result)
    return *(unsigned __int8 *)(result + 22);
  return result;
}

uint64_t sub_10022F16C(uint64_t result, char a2)
{
  if (result)
    *(_BYTE *)(result + 28) = a2;
  return result;
}

BOOL sub_10022F178(_BOOL8 result)
{
  if (result)
    return *(_BYTE *)(result + 29) != 0;
  return result;
}

id *sub_10022FE78(id *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v10;
  id v11;
  id v12;
  id *v13;
  KmlEndpointCreationConfig *v14;
  id v15;
  id v16;
  id v17;
  objc_super v19;

  v10 = a2;
  v11 = a3;
  v12 = a5;
  if (a1)
  {
    v19.receiver = a1;
    v19.super_class = (Class)KmlCommandHandler;
    v13 = (id *)objc_msgSendSuper2(&v19, "init");
    a1 = v13;
    if (v13)
    {
      objc_storeStrong(v13 + 2, a2);
      objc_storeStrong(a1 + 3, a3);
      a1[6] = a4;
      v14 = objc_alloc_init(KmlEndpointCreationConfig);
      v15 = a1[4];
      a1[4] = v14;

      v16 = a1[11];
      a1[11] = 0;

      objc_storeStrong(a1 + 7, a5);
      *((_BYTE *)a1 + 40) = 0;
      a1[9] = 0;
      a1[10] = 0;
      *((_BYTE *)a1 + 64) = -1;
      a1[12] = (id)0xFFFF;
      v17 = a1[1];
      a1[1] = &off_100322C40;

    }
  }

  return a1;
}

void sub_10022FF8C(uint64_t a1)
{
  void *v2;

  if (a1)
  {
    *(_QWORD *)(a1 + 80) = 0;
    *(_BYTE *)(a1 + 64) = -1;
    v2 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = &off_100322CD0;

    *(_QWORD *)(a1 + 72) = 0;
  }
}

void sub_10022FFD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  _UNKNOWN **v11;
  uint64_t v12;

  if (a1)
  {
    switch(a2)
    {
      case 0:
        v10 = *(void **)(a1 + 8);
        v11 = &off_100322CD0;
        goto LABEL_10;
      case 1:
        v10 = *(void **)(a1 + 8);
        v11 = &off_100322C58;
        goto LABEL_10;
      case 2:
        v10 = *(void **)(a1 + 8);
        v11 = &off_100322C70;
        goto LABEL_10;
      case 3:
        v10 = *(void **)(a1 + 8);
        v11 = &off_100322C88;
        goto LABEL_10;
      case 4:
        v10 = *(void **)(a1 + 8);
        v11 = &off_100322CA0;
        goto LABEL_10;
      case 5:
      case 6:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler adjustExpectedAndCurrentCommands:]", 114, CFSTR("KmlCommandHandler: Not changing expected commands on OpControlFlow."), a5, a6, a7, a8, v12);
        break;
      case 7:
      case 8:
        v10 = *(void **)(a1 + 8);
        v11 = &off_100322CB8;
LABEL_10:
        *(_QWORD *)(a1 + 8) = v11;

        break;
      default:
        break;
    }
    *(_QWORD *)(a1 + 72) = a2;
  }
}

_QWORD *sub_10023009C(_QWORD *result, uint64_t a2)
{
  void *v2;
  void *v3;
  id v4;

  if (result)
  {
    v2 = (void *)result[1];
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a2));
    v4 = objc_msgSend(v2, "containsObject:", v3);

    return v4;
  }
  return result;
}

uint64_t sub_1002300EC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    if (sub_10022C320((_BOOL8)v3))
    {
      a1 = 1;
    }
    else if (sub_10022C344((_BOOL8)v4))
    {
      a1 = 4;
    }
    else if (sub_10022C418((_BOOL8)v4))
    {
      a1 = 2;
    }
    else if (sub_10022C440((_BOOL8)v4))
    {
      a1 = 3;
    }
    else if (sub_10022C3E4((_BOOL8)v4))
    {
      a1 = 5;
    }
    else if (sub_10022C3BC((_BOOL8)v4))
    {
      a1 = 6;
    }
    else if (sub_10022C36C((_BOOL8)v4))
    {
      a1 = 7;
    }
    else if (sub_10022C394((_BOOL8)v4))
    {
      a1 = 8;
    }
    else
    {
      a1 = 0;
    }
  }

  return a1;
}

uint64_t sub_1002301BC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v14;
  uint64_t v15;

  v7 = a2;
  v8 = v7;
  if (!a1)
    goto LABEL_8;
  if ((a3 & 0xFFFFFFFFFFFFFFFBLL) != 1 && !sub_10022C73C((_BOOL8)v7))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler isDataValid:commandType:error:]", 171, CFSTR("KmlCommandHandler: decrypt failed for command data."), v9, v10, v11, v12, v15);
    if (!a4)
      goto LABEL_5;
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
    *(_QWORD *)a4 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v14, 27013, 0));

LABEL_8:
    a4 = 0;
    goto LABEL_5;
  }
  a4 = 1;
LABEL_5:

  return a4;
}

uint64_t sub_100230288(_QWORD *a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v5 = a2;
  v6 = v5;
  if (!a1)
    goto LABEL_14;
  if (!sub_10022C6B8((_BOOL8)v5))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler isIncomingCommandAndDataValid:error:]", 183, CFSTR("KmlCommandHandler: class is not valid"), v7, v8, v9, v10, v39);
    if (!a3)
      goto LABEL_15;
    v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
    v31 = v30;
    v32 = 28160;
    goto LABEL_13;
  }
  if ((sub_10022C6E4((uint64_t)v6) & 1) == 0)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler isIncomingCommandAndDataValid:error:]", 191, CFSTR("KmlCommandHandler: instruction is not valid"), v11, v12, v13, v14, v39);
    if (!a3)
      goto LABEL_15;
    v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
    v31 = v30;
    v32 = 27904;
    goto LABEL_13;
  }
  v15 = sub_1002300EC((uint64_t)a1, v6);
  if ((sub_10023009C(a1, v15) & 1) == 0)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler isIncomingCommandAndDataValid:error:]", 200, CFSTR("KmlCommandHandler: command is not valid - currCommand = %ld, previous command = %ld, return code: 0x6985."), v16, v17, v18, v19, v15);
    if (!a3)
      goto LABEL_15;
    v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
    v31 = v30;
    v32 = 27013;
LABEL_13:
    *(_QWORD *)a3 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v31, v32, 0));

LABEL_14:
    a3 = 0;
    goto LABEL_15;
  }
  if ((sub_1002301BC((uint64_t)a1, v6, v15, a3) & 1) == 0)
  {
    v34 = objc_msgSend(*(id *)a3, "code");
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler isIncomingCommandAndDataValid:error:]", 208, CFSTR("KmlCommandHandler: data is not valid - error.code = 0x%02lx"), v35, v36, v37, v38, (uint64_t)v34);
    goto LABEL_14;
  }
  sub_10022FFD0((uint64_t)a1, v15, v20, v21, v22, v23, v24, v25);
  a3 = 1;
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler isIncomingCommandAndDataValid:error:]", 215, CFSTR("KmlCommandHandler: Command is valid"), v26, v27, v28, v29, v39);
LABEL_15:

  return a3;
}

_QWORD *sub_100230494(_QWORD *a1, void *a2, id *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  uint64_t v11;
  unsigned int v12;
  id v13;
  void *v14;
  NSString *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  uint64_t v25;
  NSErrorUserInfoKey v26;
  void *v27;

  v9 = a2;
  if (a1)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler handleIncomingCommand:error:]", 221, CFSTR("KmlCommandHandler:"), v5, v6, v7, v8, v25);
    if ((sub_100230288(a1, v9, (uint64_t)a3) & 1) != 0)
    {
      switch(a1[9])
      {
        case 1:
          v18 = sub_1002306F4((uint64_t)a1, v9);
          v11 = objc_claimAutoreleasedReturnValue(v18);
          goto LABEL_16;
        case 2:
          v19 = sub_100230890((uint64_t)a1, v9, a3);
          v11 = objc_claimAutoreleasedReturnValue(v19);
          goto LABEL_16;
        case 3:
          v20 = sub_1002314BC((uint64_t)a1, v9, a3);
          v11 = objc_claimAutoreleasedReturnValue(v20);
          goto LABEL_16;
        case 4:
          v21 = sub_1002318C4((uint64_t)a1, v9, a3);
          v11 = objc_claimAutoreleasedReturnValue(v21);
          goto LABEL_16;
        case 5:
        case 6:
          v10 = sub_100231D30((uint64_t)a1, v9, a3);
          v11 = objc_claimAutoreleasedReturnValue(v10);
          goto LABEL_16;
        case 7:
          v22 = sub_100231C40((uint64_t)a1, v9, a3);
          v11 = objc_claimAutoreleasedReturnValue(v22);
          goto LABEL_16;
        case 8:
          v23 = sub_100231CB8((uint64_t)a1, v9, a3);
          v11 = objc_claimAutoreleasedReturnValue(v23);
LABEL_16:
          a1 = (_QWORD *)v11;
          break;
        default:
          a1 = 0;
          break;
      }
    }
    else
    {
      if (*a3)
        v12 = bswap32(objc_msgSend(*a3, "code")) >> 16;
      else
        LOWORD(v12) = -32150;
      v13 = sub_100229B10((uint64_t)KmlApduResponse, v12, 0);
      a1 = (_QWORD *)objc_claimAutoreleasedReturnValue(v13);
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
      v26 = NSLocalizedDescriptionKey;
      v15 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(206));
      v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
      v27 = v16;
      v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v27, &v26, 1));
      *a3 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v14, 206, v17));

    }
  }

  return a1;
}

id sub_1002306F4(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  _WORD *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  void *v19;
  id v20;
  void *v21;
  uint64_t v23;
  char v24;

  if (!a1)
    return 0;
  v3 = sub_10022C49C(a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  if (objc_msgSend(v4, "isEqualToString:", CFSTR("A000000809434343444B467631")))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler handleSelectCommand:error:]", 273, CFSTR("KmlCommandHandler: our AID was selected"), v5, v6, v7, v8, v23);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "appletSupportedVersionsTlvForPairing"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "kmlSupportedVersionsTlvForPairing"));
    v24 = 2 * (*(_QWORD *)(a1 + 24) != 0);
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", &v24, 1));
    v12 = sub_10022CB3C((uint64_t)KmlTlv, 212, v11);
    v13 = (void *)objc_claimAutoreleasedReturnValue(v12);

    v18 = 144;
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler handleSelectCommand:error:]", 287, CFSTR("KmlCommandHandler: select not for us."), v5, v6, v7, v8, v23);
    v10 = 0;
    v9 = 0;
    v13 = 0;
    v18 = 33386;
  }
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler handleSelectCommand:error:]", 290, CFSTR("KmlCommandHandler: response status = 0x%02x"), v14, v15, v16, v17, __rev16(v18));
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", v10, v9, v13, 0));
  v20 = sub_100229B10((uint64_t)KmlApduResponse, v18, v19);
  v21 = (void *)objc_claimAutoreleasedReturnValue(v20);

  return v21;
}

id sub_100230890(uint64_t a1, void *a2, _QWORD *a3)
{
  id v3;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  void *i;
  id *v17;
  id *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  id v43;
  id v44;
  uint64_t v45;
  void *j;
  id *v47;
  NSNumber *v48;
  void *v49;
  id *v50;
  uint64_t v51;
  id v52;
  void *v53;
  void *v54;
  NSString *v55;
  void *v56;
  void *v57;
  void *v58;
  NSString *v59;
  void *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  id v67;
  uint64_t v68;
  void *k;
  int v70;
  NSString *v71;
  void *v72;
  void *v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  id v80;
  NSObject *v81;
  _QWORD *v82;
  void *v83;
  id v84;
  NSObject *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  NSString *v95;
  void *v96;
  void *v97;
  void *v98;
  _WORD *v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned __int16 *v108;
  void *v109;
  id v110;
  void *v111;
  NSString *v112;
  void *v113;
  void *v114;
  id v115;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  void *v121;
  unsigned __int16 v123;
  unsigned __int16 v124;
  unsigned int v125;
  id obj;
  void *v127;
  uint64_t v128;
  void *v129;
  void *v130;
  uint8_t buf[16];
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  NSErrorUserInfoKey v144;
  void *v145;
  NSErrorUserInfoKey v146;
  void *v147;
  NSErrorUserInfoKey v148;
  void *v149;
  _BYTE v150[128];
  _BYTE v151[128];
  NSErrorUserInfoKey v152;
  void *v153;
  NSErrorUserInfoKey v154;
  void *v155;
  _BYTE v156[128];

  v5 = a2;
  v128 = a1;
  if (!a1)
  {
    v3 = 0;
    goto LABEL_82;
  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData data](NSMutableData, "data"));
  v7 = sub_10022BEB4(v5);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  v9 = sub_10022C7A4((uint64_t)KmlTlv, v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);

  v142 = 0u;
  v143 = 0u;
  v140 = 0u;
  v141 = 0u;
  v11 = v10;
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v140, v156, 16);
  if (v12)
  {
    v13 = v12;
    v127 = 0;
    v130 = 0;
    v14 = 0;
    v15 = 0;
    v3 = *(id *)v141;
    do
    {
      for (i = 0; i != v13; i = (char *)i + 1)
      {
        if (*(id *)v141 != v3)
          objc_enumerationMutation(v11);
        v17 = *(id **)(*((_QWORD *)&v140 + 1) + 8 * (_QWORD)i);
        if (sub_100055868((uint64_t)v17) == 32592)
        {
          v18 = sub_10022CD6C(v17);
          v19 = objc_claimAutoreleasedReturnValue(v18);

          v15 = (void *)v19;
        }
        else if (sub_100055868((uint64_t)v17) == 91)
        {
          v20 = sub_10022D014((uint64_t)v17);
          v21 = objc_claimAutoreleasedReturnValue(v20);

          v14 = (void *)v21;
        }
        else if (sub_100055868((uint64_t)v17) == 92)
        {
          v22 = sub_10022D014((uint64_t)v17);
          v23 = objc_claimAutoreleasedReturnValue(v22);

          v130 = (void *)v23;
        }
        else if (sub_100055868((uint64_t)v17) == 214)
        {
          *(_QWORD *)(v128 + 96) = sub_10022CD88((uint64_t)v17);
        }
        else if (sub_100055868((uint64_t)v17) == 94)
        {
          v24 = sub_10022D014((uint64_t)v17);
          v25 = objc_claimAutoreleasedReturnValue(v24);

          v127 = (void *)v25;
        }
      }
      v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v140, v156, 16);
    }
    while (v13);
  }
  else
  {
    v127 = 0;
    v130 = 0;
    v14 = 0;
    v15 = 0;
  }

  if (*(_QWORD *)(v128 + 24))
  {
    v30 = v130;
    if (v14 && v130)
    {
      v31 = sub_100218DE4(*(_QWORD *)(v128 + 56), v14);
      v32 = sub_1002189E4(*(_QWORD *)(v128 + 56), v130);
      v33 = sub_100219600(*(_QWORD *)(v128 + 56), v127);
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler handlePakeRequestCommand:error:]", 342, CFSTR("VersionInformation: %@"), v34, v35, v36, v37, *(_QWORD *)(v128 + 56));
      if (objc_msgSend(*(id *)(v128 + 56), "agreedKmlVehicleVersion"))
      {
        objc_msgSend(v6, "appendData:", v14);
        objc_msgSend(v6, "appendData:", v130);
        if (v15)
        {
          v121 = v6;
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler handlePakeRequestCommand:error:]", 360, CFSTR("KmlCommandHandler: checking if pake config is in scrypt params."), v38, v39, v40, v41, v118);
          v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
          v43 = sub_10022C7A4((uint64_t)KmlTlv, v15);
          v136 = 0u;
          v137 = 0u;
          v138 = 0u;
          v139 = 0u;
          obj = (id)objc_claimAutoreleasedReturnValue(v43);
          v44 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v136, v151, 16);
          if (v44)
          {
            v3 = v44;
            v129 = 0;
            v45 = *(_QWORD *)v137;
            v124 = 8;
            v125 = 0x8000;
            v123 = 1;
            do
            {
              for (j = 0; j != v3; j = (char *)j + 1)
              {
                if (*(_QWORD *)v137 != v45)
                  objc_enumerationMutation(obj);
                v47 = *(id **)(*((_QWORD *)&v136 + 1) + 8 * (_QWORD)j);
                v48 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", sub_100055868((uint64_t)v47));
                v49 = (void *)objc_claimAutoreleasedReturnValue(v48);
                objc_msgSend(v42, "addObject:", v49);

                if (sub_100055868((uint64_t)v47) == 192)
                {
                  v50 = sub_10022CD6C(v47);
                  v51 = objc_claimAutoreleasedReturnValue(v50);

                  v129 = (void *)v51;
                }
                else if (sub_100055868((uint64_t)v47) == 193)
                {
                  v125 = sub_10022CD88((uint64_t)v47);
                }
                else if (sub_100055868((uint64_t)v47) == 194)
                {
                  v124 = sub_10022CEB0((uint64_t)v47);
                }
                else if (sub_100055868((uint64_t)v47) == 195)
                {
                  v123 = sub_10022CEB0((uint64_t)v47);
                }
              }
              v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v136, v151, 16);
            }
            while (v3);
          }
          else
          {
            v129 = 0;
            v125 = 0x8000;
            v123 = 1;
            v124 = 8;
          }
          v134 = 0u;
          v135 = 0u;
          v132 = 0u;
          v133 = 0u;
          v66 = objc_msgSend(&off_100322CE8, "countByEnumeratingWithState:objects:count:", &v132, v150, 16);
          if (v66)
          {
            v67 = v66;
            v68 = *(_QWORD *)v133;
            while (2)
            {
              for (k = 0; k != v67; k = (char *)k + 1)
              {
                if (*(_QWORD *)v133 != v68)
                  objc_enumerationMutation(&off_100322CE8);
                v3 = *(id *)(*((_QWORD *)&v132 + 1) + 8 * (_QWORD)k);
                if ((objc_msgSend(v42, "containsObject:", v3) & 1) == 0)
                {
                  if (a3)
                  {
                    v120 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
                    v148 = NSLocalizedDescriptionKey;
                    v71 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(21));
                    v72 = (void *)objc_claimAutoreleasedReturnValue(v71);
                    v149 = v72;
                    v73 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v149, &v148, 1));
                    *a3 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v120, 21, v73));

                  }
                  v74 = objc_msgSend(v3, "unsignedIntegerValue");
                  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler handlePakeRequestCommand:error:]", 386, CFSTR("KmlCommandHandler: did not receive tag: 0x%02lx"), v75, v76, v77, v78, (uint64_t)v74);
                  v79 = sub_100229B10((uint64_t)KmlApduResponse, 34922, 0);
                  v3 = (id)objc_claimAutoreleasedReturnValue(v79);
                  v70 = 0;
                  goto LABEL_63;
                }
              }
              v67 = objc_msgSend(&off_100322CE8, "countByEnumeratingWithState:objects:count:", &v132, v150, 16);
              if (v67)
                continue;
              break;
            }
            v70 = 1;
          }
          else
          {
            v70 = 1;
          }
LABEL_63:
          v6 = v121;

          if (!v70)
            goto LABEL_76;
          v30 = v130;
          if (v129)
          {
            v80 = KmlSignpostLogger();
            v81 = objc_claimAutoreleasedReturnValue(v80);
            if (os_signpost_enabled(v81))
            {
              *(_WORD *)buf = 0;
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v81, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "OpPakeRequest", "getX", buf, 2u);
            }

            v82 = sub_10024C800(*(_QWORD **)(v128 + 16), v15, *(void **)(v128 + 24), v129, v125, v124, v123, v121);
            v83 = (void *)objc_claimAutoreleasedReturnValue(v82);
            v84 = KmlSignpostLogger();
            v85 = objc_claimAutoreleasedReturnValue(v84);
            if (os_signpost_enabled(v85))
            {
              *(_WORD *)buf = 0;
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v85, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "OpPakeRequest", "getX", buf, 2u);
            }

            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler handlePakeRequestCommand:error:]", 403, CFSTR("KmlCommandHandler: CurvePointX = %@"), v86, v87, v88, v89, (uint64_t)v83);
            if (!v83)
            {
              if (a3)
              {
                v94 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
                v144 = NSLocalizedDescriptionKey;
                v6 = v121;
                v95 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(18));
                v96 = (void *)objc_claimAutoreleasedReturnValue(v95);
                v145 = v96;
                v97 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v145, &v144, 1));
                *a3 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v94, 18, v97));

              }
              KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler handlePakeRequestCommand:error:]", 409, CFSTR("KmlCommandHandler: CurvePointX is nil. Password is incorrect"), v90, v91, v92, v93, v119);
            }
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler handlePakeRequestCommand:error:]", 412, CFSTR("KmlCommandHandler: response status = 0x9000"), v90, v91, v92, v93, v119);
            v98 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
            v99 = sub_10022CB3C((uint64_t)KmlTlv, 80, v83);
            v100 = (void *)objc_claimAutoreleasedReturnValue(v99);
            objc_msgSend(v98, "addObject:", v100);

            v108 = sub_100219A18(*(unsigned __int16 **)(v128 + 56), v101, v102, v103, v104, v105, v106, v107);
            v109 = (void *)objc_claimAutoreleasedReturnValue(v108);
            if (v109)
              objc_msgSend(v98, "addObject:", v109);
            v110 = sub_100229B10((uint64_t)KmlApduResponse, 144, v98);
            v3 = (id)objc_claimAutoreleasedReturnValue(v110);

LABEL_76:
            v53 = v129;
            v30 = v130;
            goto LABEL_81;
          }
        }
        if (a3)
        {
          v111 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
          v146 = NSLocalizedDescriptionKey;
          v112 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(20));
          v113 = (void *)objc_claimAutoreleasedReturnValue(v112);
          v147 = v113;
          v114 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v147, &v146, 1));
          *a3 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v111, 20, v114));

          v30 = v130;
        }
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler handlePakeRequestCommand:error:]", 396, CFSTR("KmlCommandHandler: did not receive salt."), v38, v39, v40, v41, v118);
      }
      else
      {
        if (a3)
        {
          v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
          v152 = NSLocalizedDescriptionKey;
          v59 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(215));
          v60 = (void *)objc_claimAutoreleasedReturnValue(v59);
          v153 = v60;
          v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v153, &v152, 1));
          *a3 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v58, 215, v61));

          v30 = v130;
        }
        objc_msgSend(*(id *)(v128 + 56), "ourPreferredKmlVersion");
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler handlePakeRequestCommand:error:]", 348, CFSTR("Version mismatch. Vehicle supported version: %@, our expected version 0x%02X"), v62, v63, v64, v65, (uint64_t)v14);
      }
    }
    else
    {
      if (a3)
      {
        v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
        v154 = NSLocalizedDescriptionKey;
        v55 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(215));
        v56 = (void *)objc_claimAutoreleasedReturnValue(v55);
        v155 = v56;
        v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v155, &v154, 1));
        *a3 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v54, 215, v57));

        v30 = v130;
      }
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler handlePakeRequestCommand:error:]", 334, CFSTR("Missing tags : 0x%02x or 0x%02x"), v26, v27, v28, v29, 91);
    }
    v115 = sub_100229B10((uint64_t)KmlApduResponse, 34922, 0);
    v3 = (id)objc_claimAutoreleasedReturnValue(v115);
    v53 = 0;
    goto LABEL_81;
  }
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler handlePakeRequestCommand:error:]", 325, CFSTR("probing mode"), v26, v27, v28, v29, v117);
  v52 = sub_100229B10((uint64_t)KmlApduResponse, 33940, 0);
  v3 = (id)objc_claimAutoreleasedReturnValue(v52);
  v53 = 0;
  v30 = v130;
LABEL_81:

LABEL_82:
  return v3;
}

id sub_1002314BC(uint64_t a1, void *a2, _QWORD *a3)
{
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *i;
  id *v18;
  id *v19;
  uint64_t v20;
  void *v21;
  id *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  NSObject *v33;
  _QWORD *v34;
  void *v35;
  id v36;
  NSObject *v37;
  _WORD *v38;
  void *v39;
  void *v40;
  id v41;
  void *v42;
  void *v43;
  NSString *v44;
  void *v45;
  void *v46;
  id v47;
  uint64_t v49;
  uint8_t buf[16];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  NSErrorUserInfoKey v55;
  void *v56;
  _BYTE v57[128];

  v5 = a2;
  v6 = v5;
  if (!a1)
  {
    v42 = 0;
    goto LABEL_28;
  }
  v7 = sub_10022BEB4(v5);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  v9 = sub_10022C7A4((uint64_t)KmlTlv, v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);

  v53 = 0u;
  v54 = 0u;
  v51 = 0u;
  v52 = 0u;
  v11 = v10;
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v51, v57, 16);
  if (!v12)
  {
    v14 = 0;
    v15 = 0;
    goto LABEL_16;
  }
  v13 = v12;
  v14 = 0;
  v15 = 0;
  v16 = *(_QWORD *)v52;
  do
  {
    for (i = 0; i != v13; i = (char *)i + 1)
    {
      if (*(_QWORD *)v52 != v16)
        objc_enumerationMutation(v11);
      v18 = *(id **)(*((_QWORD *)&v51 + 1) + 8 * (_QWORD)i);
      if (sub_100055868((uint64_t)v18) == 82)
      {
        v19 = sub_10022CD6C(v18);
        v20 = objc_claimAutoreleasedReturnValue(v19);
        v21 = v15;
        v15 = (void *)v20;
      }
      else
      {
        if (sub_100055868((uint64_t)v18) != 87)
          continue;
        v22 = sub_10022CD6C(v18);
        v23 = objc_claimAutoreleasedReturnValue(v22);
        v21 = v14;
        v14 = (void *)v23;
      }

    }
    v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v51, v57, 16);
  }
  while (v13);
LABEL_16:

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler handlePakeVerifyCommand:error:]", 435, CFSTR("KmlCommandHandler: CurvePointY: %@, remoteEvidence: %@"), v24, v25, v26, v27, (uint64_t)v15);
  if (!v15 || !v14)
    goto LABEL_24;
  v32 = KmlSignpostLogger();
  v33 = objc_claimAutoreleasedReturnValue(v32);
  if (os_signpost_enabled(v33))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v33, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "OpPakeVerify", "evidence", buf, 2u);
  }

  v34 = sub_10024C748(*(_QWORD **)(a1 + 16), v15, v14);
  v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
  v36 = KmlSignpostLogger();
  v37 = objc_claimAutoreleasedReturnValue(v36);
  if (os_signpost_enabled(v37))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v37, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "OpPakeVerify", "evidence", buf, 2u);
  }

  if (v35)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler handlePakeVerifyCommand:error:]", 451, CFSTR("KmlCommandHandler: response status = 0x9000"), v28, v29, v30, v31, v49);
    v38 = sub_10022CB3C((uint64_t)KmlTlv, 88, v35);
    v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
    v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", v39, 0, v14));
    v41 = sub_100229B10((uint64_t)KmlApduResponse, 144, v40);
    v42 = (void *)objc_claimAutoreleasedReturnValue(v41);

  }
  else
  {
LABEL_24:
    if (a3)
    {
      v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
      v55 = NSLocalizedDescriptionKey;
      v44 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(5));
      v45 = (void *)objc_claimAutoreleasedReturnValue(v44);
      v56 = v45;
      v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v56, &v55, 1));
      *a3 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v43, 5, v46));

    }
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler handlePakeVerifyCommand:error:]", 447, CFSTR("KmlCommandHandler: evidence verification failed, response status = 0x6A88"), v28, v29, v30, v31, v49);
    v47 = sub_100229B10((uint64_t)KmlApduResponse, 34922, 0);
    v42 = (void *)objc_claimAutoreleasedReturnValue(v47);
  }

LABEL_28:
  return v42;
}

id sub_1002318C4(uint64_t a1, void *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  NSString *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  NSString *v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  void *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v45;
  uint64_t v46;
  NSErrorUserInfoKey v47;
  void *v48;
  NSErrorUserInfoKey v49;
  void *v50;

  v9 = a2;
  if (!a1)
  {
    v19 = 0;
    goto LABEL_19;
  }
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler handleWriteDataCommand:error:]", 535, CFSTR("KmlCommandHandler:"), v5, v6, v7, v8, v45);
  if (!*(_BYTE *)(a1 + 40))
  {
    if (sub_10022C40C((uint64_t)v9) == 128 && !sub_10022C750((uint64_t)v9))
    {
      v30 = sub_10022C40C((uint64_t)v9);
      sub_10022C750((uint64_t)v9);
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler handleWriteDataCommand:error:]", 550, CFSTR("Write data end: p1=%02x, p2=%02x"), v31, v32, v33, v34, v30);
      *(_BYTE *)(a1 + 40) = 1;
    }
    else if (sub_10022C40C((uint64_t)v9) || sub_10022C750((uint64_t)v9))
    {
      v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
      v47 = NSLocalizedDescriptionKey;
      v21 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(12));
      v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
      v48 = v22;
      v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v48, &v47, 1));
      v24 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v20, 12, v23));

      LODWORD(v20) = sub_10022C40C((uint64_t)v9);
      sub_10022C750((uint64_t)v9);
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler handleWriteDataCommand:error:]", 555, CFSTR("Wrong P1 or P2, return code: 0x6B00. p1=%02x, p2=%02x"), v25, v26, v27, v28, v20);
      v29 = 107;
      if (v24)
      {
        if (!a3)
          goto LABEL_18;
        goto LABEL_17;
      }
LABEL_15:
      v35 = *(_QWORD *)(a1 + 32);
      v36 = sub_10022BEB4(v9);
      v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
      v38 = sub_100250158(v35, v37);
      v24 = (id)objc_claimAutoreleasedReturnValue(v38);

      if (!v24)
        goto LABEL_18;
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler handleWriteDataCommand:error:]", 562, CFSTR("Received duplicated/invalid tag, return code: 0x6A80"), v39, v40, v41, v42, v46);
      v29 = -32662;
      if (!a3)
        goto LABEL_18;
LABEL_17:
      v24 = objc_retainAutorelease(v24);
      *a3 = v24;
LABEL_18:
      v43 = sub_100229B10((uint64_t)KmlApduResponse, v29, 0);
      v19 = (void *)objc_claimAutoreleasedReturnValue(v43);

      goto LABEL_19;
    }
    v29 = 144;
    goto LABEL_15;
  }
  if (a3)
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
    v49 = NSLocalizedDescriptionKey;
    v15 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(26));
    v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    v50 = v16;
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v50, &v49, 1));
    *a3 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v14, 26, v17));

  }
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler handleWriteDataCommand:error:]", 543, CFSTR("Command used out of sequence, return code: 0x6985. Got write data command while we expected OpControlFlow"), v10, v11, v12, v13, v46);
  v18 = sub_100229B10((uint64_t)KmlApduResponse, 34153, 0);
  v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
LABEL_19:

  return v19;
}

id sub_100231C40(uint64_t a1, void *a2, _QWORD *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v13;

  if (a1)
  {
    v5 = a2;
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler handleGetDataCommand:error:]", 523, CFSTR("KmlCommandHandler:"), v6, v7, v8, v9, v13);
    v10 = sub_100213EF8(*(_QWORD *)(a1 + 88), v5, a3);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);

  }
  else
  {
    v11 = 0;
  }
  return v11;
}

id sub_100231CB8(uint64_t a1, void *a2, _QWORD *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id *v10;
  void *v11;
  uint64_t v13;

  if (a1)
  {
    v5 = a2;
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler handleGetResponseCommand:error:]", 529, CFSTR("KmlCommandHandler:"), v6, v7, v8, v9, v13);
    v10 = sub_100214380(*(id **)(a1 + 88), v5, a3);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);

  }
  else
  {
    v11 = 0;
  }
  return v11;
}

id sub_100231D30(uint64_t a1, void *a2, _QWORD *a3)
{
  id v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  void *v20;
  unsigned int v21;
  void *v22;
  NSString *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  NSString *v28;
  void *v29;
  void *v30;
  id v31;
  void *v32;
  void *v34;
  NSString *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  NSErrorUserInfoKey v45;
  void *v46;
  NSErrorUserInfoKey v47;
  void *v48;
  NSErrorUserInfoKey v49;
  void *v50;

  if (a1)
  {
    v5 = a2;
    v6 = sub_10022C40C((uint64_t)v5);
    v7 = sub_10022C750((uint64_t)v5);

    v44 = 0;
    v12 = sub_100232160(a1, v6, v7, &v44, v8, v9, v10, v11);
    v13 = v44;
    v18 = v13;
    if ((v12 & 1) == 0)
    {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlCommandHandler handleOpControlFlowCommand:error:]", 469, CFSTR("KmlCommandHandler: Invalid flow control: p1:%02x p2:%02x"), v14, v15, v16, v17, v6);
      if (!v18)
      {
        v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
        v49 = NSLocalizedDescriptionKey;
        v23 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(14));
        v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
        v50 = v24;
        v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v50, &v49, 1));
        v18 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v22, 14, v25));

      }
      v21 = 107;
      if (!a3)
        goto LABEL_22;
      goto LABEL_20;
    }
    if (v6 == 17)
    {
      v26 = 2;
    }
    else
    {
      if (v6 != 16)
      {
        if (!v13)
        {
          v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
          v45 = NSLocalizedDescriptionKey;
          v28 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(17));
          v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
          v46 = v29;
          v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v46, &v45, 1));
          v18 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v27, 17, v30));

        }
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler handleOpControlFlowCommand:error:]", 507, CFSTR("KmlCommandHandler: Remote Reader sent abort message"), v14, v15, v16, v17, v43);
        *(_QWORD *)(a1 + 80) = 3;
        *(_BYTE *)(a1 + 64) = v7;
LABEL_19:
        v21 = 144;
        if (!a3)
          goto LABEL_22;
        goto LABEL_20;
      }
      if (v7 == 1)
      {
        v19 = sub_100232A38(a1);
        v20 = (void *)objc_claimAutoreleasedReturnValue(v19);

        if (*(_BYTE *)(a1 + 40) && !v20)
        {
          v18 = 0;
          *(_QWORD *)(a1 + 80) = 4;
          *(_BYTE *)(a1 + 40) = 0;
          v21 = 144;
LABEL_22:
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler handleOpControlFlowCommand:error:]", 516, CFSTR("KmlCommandHandler: response status = 0x%02x"), v14, v15, v16, v17, __rev16(v21));
          v31 = sub_100229B10((uint64_t)KmlApduResponse, v21, 0);
          v32 = (void *)objc_claimAutoreleasedReturnValue(v31);

          return v32;
        }
        if (*(_BYTE *)(a1 + 40))
        {
          KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlCommandHandler handleOpControlFlowCommand:error:]", 491, CFSTR("KmlCommandHandler: key creation config is invalid"), v14, v15, v16, v17, v43);
        }
        else
        {
          v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
          v47 = NSLocalizedDescriptionKey;
          v35 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(12));
          v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
          v48 = v36;
          v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v48, &v47, 1));
          v38 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v34, 12, v37));

          KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlCommandHandler handleOpControlFlowCommand:error:]", 489, CFSTR("KmlCommandHandler: missing end P1 P2"), v39, v40, v41, v42, v43);
          v20 = (void *)v38;
        }
        *(_QWORD *)(a1 + 80) = 1;
        v21 = 32874;
        v18 = v20;
        if (!a3)
          goto LABEL_22;
LABEL_20:
        if (v18)
        {
          v18 = objc_retainAutorelease(v18);
          *a3 = v18;
        }
        goto LABEL_22;
      }
      v26 = 1;
    }
    *(_QWORD *)(a1 + 80) = v26;
    goto LABEL_19;
  }
  return 0;
}

uint64_t sub_100232160(uint64_t a1, unsigned int a2, unsigned int a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __CFString *v8;
  uint64_t v9;
  uint64_t v10;
  void *v12;
  NSString *v13;
  void *v14;
  void *v15;
  void *v16;
  NSString *v17;
  void *v18;
  void *v19;
  void *v20;
  NSString *v21;
  void *v22;
  void *v23;
  void *v24;
  NSString *v25;
  void *v26;
  void *v27;
  void *v28;
  NSString *v29;
  void *v30;
  void *v31;
  void *v32;
  NSString *v33;
  void *v34;
  void *v35;
  void *v36;
  NSString *v37;
  void *v38;
  void *v39;
  uint64_t v41;
  _QWORD v42[2];
  _QWORD v43[2];
  _QWORD v44[2];
  _QWORD v45[2];
  _QWORD v46[2];
  _QWORD v47[2];
  _QWORD v48[2];
  _QWORD v49[2];
  _QWORD v50[2];
  _QWORD v51[2];
  _QWORD v52[2];
  _QWORD v53[2];
  _QWORD v54[2];
  _QWORD v55[2];

  if (!a1)
    return 0;
  if (a2 == 18)
  {
    switch(a3)
    {
      case 0u:
        v8 = CFSTR("KmlCommandHandler: OpControlFlow command - abort, reason - no specific reason.");
        v9 = 1;
        v10 = 632;
        goto LABEL_48;
      case 1u:
        if (a4)
        {
          v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
          v54[0] = NSLocalizedDescriptionKey;
          v17 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(215));
          v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
          v54[1] = NSLocalizedFailureReasonErrorKey;
          v55[0] = v18;
          v55[1] = CFSTR("No matching PAKE version found");
          v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v55, v54, 2));
          *a4 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v16, 215, v19));

        }
        v8 = CFSTR("KmlCommandHandler: OpControlFlow command - abort, reason - no matching PAKE version found.");
        v9 = 1;
        v10 = 638;
        goto LABEL_48;
      case 2u:
        if (a4)
        {
          v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
          v52[0] = NSLocalizedDescriptionKey;
          v21 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(215));
          v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
          v52[1] = NSLocalizedFailureReasonErrorKey;
          v53[0] = v22;
          v53[1] = CFSTR("No matching digital key applet version found");
          v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v53, v52, 2));
          *a4 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v20, 215, v23));

        }
        v8 = CFSTR("KmlCommandHandler: OpControlFlow command - abort, reason - no matching digital key applet version found.");
        v9 = 1;
        v10 = 644;
        goto LABEL_48;
      case 3u:
      case 4u:
      case 5u:
      case 6u:
      case 7u:
        if (a4)
        {
          v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
          v50[0] = NSLocalizedDescriptionKey;
          v13 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(23));
          v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
          v50[1] = NSLocalizedFailureReasonErrorKey;
          v51[0] = v14;
          v51[1] = CFSTR("Failed due to timeout");
          v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v51, v50, 2));
          *a4 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v12, 23, v15));

        }
        v8 = CFSTR("KmlCommandHandler: OpControlFlow command - abort, reason - Failed due to timeout.");
        v9 = 1;
        v10 = 650;
        goto LABEL_48;
      case 8u:
        if (a4)
        {
          v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
          v48[0] = NSLocalizedDescriptionKey;
          v25 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(11));
          v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
          v48[1] = NSLocalizedFailureReasonErrorKey;
          v49[0] = v26;
          v49[1] = CFSTR("No key support present in remote reader");
          v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v49, v48, 2));
          *a4 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v24, 11, v27));

        }
        v8 = CFSTR("KmlCommandHandler: OpControlFlow command - abort, reason - no key support present in remote reader.");
        v9 = 1;
        v10 = 657;
        goto LABEL_48;
      case 9u:
        if (a4)
        {
          v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
          v46[0] = NSLocalizedDescriptionKey;
          v29 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(5));
          v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
          v46[1] = NSLocalizedFailureReasonErrorKey;
          v47[0] = v30;
          v47[1] = CFSTR("Evidence verification on car side failed");
          v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v47, v46, 2));
          *a4 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v28, 5, v31));

        }
        v8 = CFSTR("KmlCommandHandler: OpControlFlow command - abort, reason - evidence verification on car side failed.");
        v9 = 1;
        v10 = 663;
        goto LABEL_48;
      case 0xAu:
        if (a4)
        {
          v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
          v44[0] = NSLocalizedDescriptionKey;
          v33 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(26));
          v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
          v44[1] = NSLocalizedFailureReasonErrorKey;
          v45[0] = v34;
          v45[1] = CFSTR("wrong digital key configuration");
          v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v45, v44, 2));
          *a4 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v32, 26, v35));

        }
        v8 = CFSTR("KmlCommandHandler: OpControlFlow command - abort, reason - wrong digital key configuration");
        v9 = 1;
        v10 = 669;
        goto LABEL_48;
      case 0xBu:
        if (a4)
        {
          v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
          v42[0] = NSLocalizedDescriptionKey;
          v37 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(201));
          v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
          v42[1] = NSLocalizedFailureReasonErrorKey;
          v43[0] = v38;
          v43[1] = CFSTR("certificate verification failed");
          v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v43, v42, 2));
          *a4 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v36, 201, v39));

        }
        v8 = CFSTR("KmlCommandHandler: OpControlFlow command - abort, reason - certificate verification failed");
        v9 = 1;
        v10 = 675;
        goto LABEL_48;
      case 0xCu:
        v8 = CFSTR("KmlCommandHandler: OpControlFlow command - abort, reason - curve point X zero or invalid");
        v9 = 1;
        v10 = 678;
        goto LABEL_48;
      case 0xDu:
        v8 = CFSTR("KmlCommandHandler: OpControlFlow command - abort, reason - maximum number of unsuccessful owner pairing attempts reached, vehicle will get a new verifier");
        v9 = 1;
        v10 = 681;
        goto LABEL_48;
      default:
        if (a3 == 127)
        {
          v8 = CFSTR("KmlCommandHandler: OpControlFlow command - abort, reason - pairing failed due to other reason");
          v9 = 1;
          v10 = 684;
          goto LABEL_48;
        }
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler validateOpControlFlowWithOperation:reason:error:]", 687, CFSTR("KmlCommandHandler: OpControlFlow command - abort, reason - unknown (%d)"), a5, a6, a7, a8, a3);
        break;
    }
    return 0;
  }
  if (a2 == 17)
  {
    if (a3 == 17)
    {
      v8 = CFSTR("KmlCommandHandler: OpControlFlow command - end, reason - successful end of key creation and verification, key not tracked by remote reader.");
      v9 = 1;
      v10 = 622;
      goto LABEL_48;
    }
    if (a3 == 16)
    {
      v8 = CFSTR("KmlCommandHandler: OpControlFlow command - end, reason - successful end of key creation and verification, key tracked by remote reader.");
      v9 = 1;
      v10 = 619;
      goto LABEL_48;
    }
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler validateOpControlFlowWithOperation:reason:error:]", 625, CFSTR("KmlCommandHandler: OpControlFlow command - end, reason - unknown (%d)"), a5, a6, a7, a8, a3);
    return 0;
  }
  if (a2 != 16)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler validateOpControlFlowWithOperation:reason:error:]", 693, CFSTR("KmlCommandHandler: unknown OpControlFlow command - %d"), a5, a6, a7, a8, a2);
    return 0;
  }
  if ((int)a3 > 2)
  {
    if (a3 == 3)
    {
      v8 = CFSTR("KmlCommandHandler: OpControlFlow command - continue, reason - waiting for user confirmation on reader  UI.");
      v9 = 1;
      v10 = 606;
      goto LABEL_48;
    }
    if (a3 == 15)
    {
      v8 = CFSTR("KmlCommandHandler: OpControlFlow command - continue, reason - reader waiting time extension, keep busy, no action on device side.");
      v9 = 1;
      v10 = 609;
      goto LABEL_48;
    }
    goto LABEL_22;
  }
  if (a3 == 1)
  {
    v8 = CFSTR("KmlCommandHandler: OpControlFlow command - continue, reason - key creation data transmitted to device");
    v9 = 1;
    v10 = 600;
    goto LABEL_48;
  }
  if (a3 != 2)
  {
LABEL_22:
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler validateOpControlFlowWithOperation:reason:error:]", 612, CFSTR("KmlCommandHandler: OpControlFlow command - continue, reason - unknown (%d)"), a5, a6, a7, a8, a3);
    return 0;
  }
  v8 = CFSTR("KmlCommandHandler: OpControlFlow command - continue, reason - key certificate chain received by remote reader, reeader tries to contact KTS.");
  v9 = 1;
  v10 = 603;
LABEL_48:
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler validateOpControlFlowWithOperation:reason:error:]", v10, v8, a5, a6, a7, a8, v41);
  return v9;
}

id sub_100232A38(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  if (a1)
  {
    v1 = *(_QWORD *)(a1 + 32);
    v2 = *(_QWORD *)(a1 + 48);
    v3 = objc_msgSend(*(id *)(a1 + 56), "agreedKmlVehicleVersion");
    v9 = sub_1002514B0(v1, v2, (uint64_t)v3, v4, v5, v6, v7, v8);
    a1 = objc_claimAutoreleasedReturnValue(v9);
  }
  return (id)a1;
}

uint64_t *sub_100232A74(uint64_t *a1)
{
  id v1;

  if (a1)
  {
    v1 = sub_10025369C(a1[4]);
    a1 = (uint64_t *)objc_claimAutoreleasedReturnValue(v1);
  }
  return a1;
}

id *sub_100232A94(id *a1)
{
  if (a1)
    a1 = (id *)a1[4];
  return a1;
}

uint64_t sub_100232AB0(uint64_t result)
{
  if (result)
    return *(unsigned __int8 *)(result + 64);
  return result;
}

void sub_100232B5C(id a1)
{
  KeyManagementLibrary *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = objc_alloc_init(KeyManagementLibrary);
  v2 = (void *)qword_1003548E0;
  qword_1003548E0 = (uint64_t)v1;

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KeyManagementLibrary sharedLibrary]_block_invoke", 50, CFSTR("Service created"), v3, v4, v5, v6, v7);
}

id *sub_100232D70(uint64_t a1)
{
  return sub_100232D78(*(id **)(a1 + 32));
}

id *sub_100232D78(id *a1)
{
  id *v1;
  void *v2;
  void *v3;
  _UNKNOWN **v4;
  id v5;
  uint64_t v6;
  void *v7;
  const __CFString *v8;
  objc_class *v9;
  NSString *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;

  v1 = a1;
  if (a1)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v1[3], "count")));
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v3, CFSTR("numberOfQueuedSessions"));

    if (v1[4])
      v4 = &off_100323460;
    else
      v4 = &off_100323478;
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v4, CFSTR("hasActiveSession"));
    v5 = v1[4];
    if (v5)
    {
      v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "clientName"));
      v7 = (void *)v6;
      if (v6)
        v8 = (const __CFString *)v6;
      else
        v8 = &stru_100316BD0;
      objc_msgSend(v2, "setObject:forKeyedSubscript:", v8, CFSTR("currentSessionClient"));
      v9 = (objc_class *)objc_opt_class(v1[4]);
      v10 = NSStringFromClass(v9);
      v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      objc_msgSend(v2, "setObject:forKeyedSubscript:", v11, CFSTR("currentSessionType"));

      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1[4], "dumpState"));
      if (v12)
        objc_msgSend(v2, "setObject:forKeyedSubscript:", v12, CFSTR("currentSessionState"));

    }
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSPropertyListSerialization dataWithPropertyList:format:options:error:](NSPropertyListSerialization, "dataWithPropertyList:format:options:error:", v2, 200, 0, 0));
    v14 = objc_msgSend(v13, "length");
    v1 = (id *)malloc_type_calloc(1uLL, (size_t)v14 + 200, 0xED8D9C59uLL);
    *(_DWORD *)v1 = 1;
    *((_DWORD *)v1 + 1) = (_DWORD)v14;
    __strlcpy_chk(v1 + 17, "KML state", 64, 64);
    v15 = objc_retainAutorelease(v13);
    memcpy(v1 + 25, objc_msgSend(v15, "bytes"), (size_t)v14);

  }
  return v1;
}

void sub_100233110(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100233124(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "startNextSession");
}

void sub_1002332C0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1002332D4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "startNextSession");
}

void sub_1002333E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1002335C0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1002335E8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "userInfo"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("ProxyObjects")));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithSet:](NSSet, "setWithSet:", v6));

    v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("ClientName")));
    v9 = objc_msgSend(v4, "processIdentifier");
    v24 = (void *)v8;
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KeyManagementLibrary handleCloseForConnection:]", 215, CFSTR("KmlXpcService: Goodbye from client pid=%d name=%@"), v10, v11, v12, v13, (uint64_t)v9);
    sub_1002406DC(*(_QWORD *)(a1 + 16), v4);
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v14 = v7;
    v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
    if (v15)
    {
      v16 = v15;
      v17 = *(_QWORD *)v26;
      do
      {
        v18 = 0;
        do
        {
          if (*(_QWORD *)v26 != v17)
            objc_enumerationMutation(v14);
          v19 = *(id *)(*((_QWORD *)&v25 + 1) + 8 * (_QWORD)v18);
          KmlLogFunc2(OS_LOG_TYPE_DEBUG, (uint64_t)"-[KeyManagementLibrary handleCloseForConnection:]", 222, CFSTR("Ending session %@"), v20, v21, v22, v23, (uint64_t)v19);
          objc_msgSend(v19, "endSessionWithCompletion:", &stru_10030F1F8);

          v18 = (char *)v18 + 1;
        }
        while (v16 != v18);
        v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
      }
      while (v16);
    }

  }
}

void sub_1002337D8(id a1, NSError *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSError *v6;

  v6 = (NSError *)CFSTR("No Error");
  if (a2)
    v6 = a2;
  KmlLogFunc2(OS_LOG_TYPE_DEBUG, (uint64_t)"-[KeyManagementLibrary handleCloseForConnection:]_block_invoke", 224, CFSTR("Session ended with %@"), v2, v3, v4, v5, (uint64_t)v6);
}

void sub_100233CCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location,id a24)
{
  id *v24;
  id *v25;
  id *v26;
  id *v27;

  objc_destroyWeak(v24);
  objc_destroyWeak(v27);
  objc_destroyWeak(v26);
  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a24);
  _Unwind_Resume(a1);
}

void sub_100233D1C(uint64_t a1)
{
  id v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = objc_loadWeakRetained((id *)(a1 + 40));
  sub_1002335E8((uint64_t)v2, WeakRetained);

}

void sub_100233D68(uint64_t a1)
{
  id v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = objc_loadWeakRetained((id *)(a1 + 40));
  sub_1002335E8((uint64_t)v2, WeakRetained);

}

id sub_100233F24(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "invalidate");
}

void sub_100233FD4(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;

  v14 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "userInfo"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKeyedSubscript:", CFSTR("clientName")));
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KeyManagementLibrary clientAppIsBackGrounded:]_block_invoke", 373, CFSTR("Client (%@) is backGrounded"), v3, v4, v5, v6, (uint64_t)v2);

  objc_msgSend(v14, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("BackGroundClient"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKeyedSubscript:", CFSTR("Entitlements")));
  if (sub_10023801C((_BOOL8)v7))
  {
    v12 = *(void **)(*(_QWORD *)(a1 + 40) + 32);
    if (v12)
      objc_msgSend(v12, "startBackGroundTimer");
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KeyManagementLibrary clientAppIsBackGrounded:]_block_invoke", 377, CFSTR("Client doesn't have entitlement to continue."), v8, v9, v10, v11, v13);
    objc_msgSend(*(id *)(a1 + 32), "invalidate");
  }

}

void sub_100234160(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "userInfo"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("clientName")));
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KeyManagementLibrary clientAppIsForeGrounded:]_block_invoke", 398, CFSTR("Client (%@) is foreGrounded"), v3, v4, v5, v6, (uint64_t)v2);

  objc_msgSend(v7, "setObject:forKeyedSubscript:", &__kCFBooleanFalse, CFSTR("BackGroundClient"));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 32), "cancelBackGroundTimer");

}

id sub_1002342C4(uint64_t a1)
{
  objc_opt_self(a1);
  if (qword_1003548F8 != -1)
    dispatch_once(&qword_1003548F8, &stru_10030F240);
  return (id)qword_1003548F0;
}

void sub_100234308(id a1)
{
  KmlSharingTransport *v1;
  void *v2;

  v1 = objc_alloc_init(KmlSharingTransport);
  v2 = (void *)qword_1003548F0;
  qword_1003548F0 = (uint64_t)v1;

}

void sub_100234474(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[5];

  if (a1)
  {
    v1 = *(NSObject **)(a1 + 40);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100235E44;
    block[3] = &unk_100302AA0;
    block[4] = a1;
    dispatch_async(v1, block);
  }
}

void sub_100234518(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  _QWORD block[5];
  id v9;
  id v10;

  v5 = a2;
  v6 = a3;
  if (a1)
  {
    v7 = *(NSObject **)(a1 + 40);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002345C4;
    block[3] = &unk_100304490;
    block[4] = a1;
    v9 = v5;
    v10 = v6;
    dispatch_async(v7, block);

  }
}

void sub_1002345C4(uint64_t a1)
{
  sub_1002345D4(*(_QWORD *)(a1 + 32), *(void **)(a1 + 40), *(void **)(a1 + 48));
}

void sub_1002345D4(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  if (a1)
  {
    v5 = *(void **)(a1 + 24);
    v11 = a3;
    v6 = a2;
    objc_msgSend(v5, "removeObjectForKey:", v11);
    objc_msgSend(*(id *)(a1 + 24), "setObject:forKey:", v6, v11);

    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingTransport sync_addDelegate:forSharingIdentifier:]", 397, CFSTR("KSTransport: added delegate for %@."), v7, v8, v9, v10, (uint64_t)v11);
  }
}

void sub_100234668(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  _QWORD v6[5];
  id v7;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = *(NSObject **)(a1 + 40);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1002346F4;
    v6[3] = &unk_100304370;
    v6[4] = a1;
    v7 = v3;
    dispatch_async(v5, v6);

  }
}

_QWORD *sub_1002346F4(_QWORD *result)
{
  uint64_t v1;

  v1 = result[4];
  if (v1)
    return objc_msgSend(*(id *)(v1 + 24), "removeObjectForKey:", result[5]);
  return result;
}

void sub_10023470C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  _QWORD v6[5];
  id v7;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = *(NSObject **)(a1 + 40);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100234798;
    v6[3] = &unk_100304370;
    v6[4] = a1;
    v7 = v3;
    dispatch_async(v5, v6);

  }
}

void sub_100234798(uint64_t a1)
{
  sub_10026B9FC(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(void **)(a1 + 40));
}

void sub_1002347A4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  _QWORD v6[5];
  id v7;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = *(NSObject **)(a1 + 40);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100234830;
    v6[3] = &unk_100304370;
    v6[4] = a1;
    v7 = v3;
    dispatch_async(v5, v6);

  }
}

void sub_100234830(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "addObject:", *(_QWORD *)(a1 + 40));
  sub_10026B6C8(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
}

BOOL sub_100234860(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  _BOOL8 v5;
  NSObject *v6;
  _QWORD block[5];
  id v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;

  v3 = a2;
  v4 = v3;
  v5 = 0;
  if (a1 && v3)
  {
    if (objc_msgSend(v3, "length"))
    {
      v11 = 0;
      v12 = &v11;
      v13 = 0x2020000000;
      v14 = 0;
      dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 40));
      v6 = *(NSObject **)(a1 + 40);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100234964;
      block[3] = &unk_10030F268;
      v10 = &v11;
      block[4] = a1;
      v9 = v4;
      dispatch_sync(v6, block);
      v5 = *((_BYTE *)v12 + 24) != 0;

      _Block_object_dispose(&v11, 8);
    }
    else
    {
      v5 = 0;
    }
  }

  return v5;
}

void sub_10023494C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100234964(uint64_t a1)
{
  uint64_t result;

  result = sub_10026BB14(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(void **)(a1 + 40));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = result;
  return result;
}

dispatch_queue_t *sub_100234998(dispatch_queue_t *a1)
{
  dispatch_queue_t *v1;
  NSObject *v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  void (*v9)(uint64_t);
  id v10;

  v1 = a1;
  if (a1)
  {
    v5 = 0;
    v6 = &v5;
    v7 = 0x3032000000;
    v8 = sub_100234A70;
    v9 = sub_100234A80;
    v10 = 0;
    dispatch_assert_queue_not_V2(a1[5]);
    v2 = v1[5];
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_100234A88;
    v4[3] = &unk_10030F290;
    v4[4] = v1;
    v4[5] = &v5;
    dispatch_sync(v2, v4);
    v1 = (dispatch_queue_t *)(id)v6[5];
    _Block_object_dispose(&v5, 8);

  }
  return v1;
}

void sub_100234A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100234A70(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100234A80(uint64_t a1)
{

}

void sub_100234A88(uint64_t a1)
{
  dispatch_queue_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = sub_10026BD9C(*(dispatch_queue_t **)(*(_QWORD *)(a1 + 32) + 8));
  v3 = objc_claimAutoreleasedReturnValue(v2);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_100234AC4(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, uint64_t a9, uint64_t a10)
{
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  NSObject *v23;
  id v24;
  _QWORD block[4];
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;

  v24 = a2;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v20 = a6;
  v21 = a7;
  v22 = a8;
  if (a1)
  {
    v23 = *(NSObject **)(a1 + 40);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100234C38;
    block[3] = &unk_10030F2B8;
    v26 = v19;
    v27 = v24;
    v28 = v21;
    v29 = a1;
    v34 = a9;
    v30 = v17;
    v31 = v18;
    v32 = v20;
    v35 = a10;
    v33 = v22;
    dispatch_async(v23, block);

  }
}

void sub_100234C38(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  const __CFString *v4;
  const __CFString *v5;
  const __CFString *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  const __CFString *v11;
  char v12;
  id *v13;
  id v14;

  v14 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  objc_msgSend(v14, "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 32), CFSTR("kmlMessageId"));
  objc_msgSend(v14, "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 40), CFSTR("kmlSharingData"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "UUIDString"));
  objc_msgSend(v14, "setObject:forKeyedSubscript:", v2, CFSTR("kmlSharingUuid"));

  v3 = *(_QWORD *)(a1 + 96);
  v4 = CFSTR("kmlPhone");
  if (v3 == 2)
    v4 = CFSTR("kmlWatch");
  if (v3 == 255)
    v5 = CFSTR("kmlAnyDevice");
  else
    v5 = v4;
  if (*(_QWORD *)(a1 + 56))
    v6 = v5;
  else
    v6 = 0;
  objc_msgSend(v14, "setObject:forKeyedSubscript:", v6, CFSTR("kmlDeviceType"));
  v7 = *(_QWORD *)(a1 + 64);
  if (v7)
    objc_msgSend(v14, "setObject:forKeyedSubscript:", v7, CFSTR("kmlMetaData"));
  v8 = *(_QWORD *)(a1 + 72);
  if (v8)
    objc_msgSend(v14, "setObject:forKeyedSubscript:", v8, CFSTR("kmlBindingAttestation"));
  v9 = *(_QWORD *)(a1 + 80);
  if (v9)
    objc_msgSend(v14, "setObject:forKeyedSubscript:", v9, CFSTR("kmlKeyId"));
  if (*(_QWORD *)(a1 + 56))
  {
    v10 = *(_QWORD *)(a1 + 104) - 1;
    if (v10 > 8)
      v11 = CFSTR("kmlUnknown");
    else
      v11 = off_10030F2D8[v10];
  }
  else
  {
    v11 = 0;
  }
  objc_msgSend(v14, "setObject:forKeyedSubscript:", v11, CFSTR("kmlMessageType"));
  v12 = *(_QWORD *)(a1 + 104) == 8 && *(_QWORD *)(a1 + 96) == 2;
  v13 = sub_10026A888((id *)[KmlMessageToSend alloc], v14, *(void **)(a1 + 32), *(void **)(a1 + 88));
  sub_10026AE0C(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), v13, v12);

}

void sub_100234DF8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  _QWORD v11[4];
  id v12;
  id v13;
  uint64_t v14;
  id v15;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (a1)
  {
    v10 = *(NSObject **)(a1 + 40);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100234EC8;
    v11[3] = &unk_10030EED8;
    v12 = v8;
    v13 = v9;
    v14 = a1;
    v15 = v7;
    dispatch_async(v10, v11);

  }
}

void sub_100234EC8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingTransport queueCrossPlatformSharingMessage:forInvitationIdentifier:fromMailboxIdentifier:]_block_invoke", 202, CFSTR("Invitation Identifier - %@"), a5, a6, a7, a8, a1[4]);
  KmlLogFunc_InternalOnly(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingTransport queueCrossPlatformSharingMessage:forInvitationIdentifier:fromMailboxIdentifier:]_block_invoke", 203, CFSTR("Mailbox identifier - %@"), v9, v10, v11, v12, a1[5]);
  v19 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[6] + 24), "objectForKeyedSubscript:", a1[4]));
  objc_msgSend(v19, "handleCrossPlatformSharingMessage:fromMailboxIdentifier:", a1[7], a1[5]);
  v17 = v19;
  if (!v19)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingTransport queueCrossPlatformSharingMessage:forInvitationIdentifier:fromMailboxIdentifier:]_block_invoke", 208, CFSTR("No delegate to handle message. Dropping it"), v13, v14, v15, v16, v18);
    v17 = 0;
  }

}

void sub_100234F80(uint64_t a1, void *a2)
{
  NSObject *v3;
  id v4;
  _QWORD block[5];
  id v6;

  v4 = a2;
  if (a1)
  {
    dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 40));
    v3 = *(NSObject **)(a1 + 40);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100235010;
    block[3] = &unk_100303078;
    block[4] = a1;
    v6 = v4;
    dispatch_sync(v3, block);

  }
}

void sub_100235010(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  void *v16;

  if (isInternalBuild())
  {
    v14 = objc_retainBlock(*(id *)(a1 + 40));
    v15 = *(_QWORD *)(a1 + 32);
    v16 = *(void **)(v15 + 48);
    *(_QWORD *)(v15 + 48) = v14;

  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlSharingTransport registerCrossPlatformTestMessageOverIDSHandler:]_block_invoke", 222, CFSTR("Internal build test only method"), v10, v11, v12, v13, a9);
  }
}

void sub_10023506C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  NSObject *v6;
  id v7;
  _QWORD block[5];
  id v9;
  id v10;

  v7 = a2;
  v5 = a3;
  if (a1)
  {
    dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 40));
    v6 = *(NSObject **)(a1 + 40);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100235124;
    block[3] = &unk_100304490;
    block[4] = a1;
    v9 = v7;
    v10 = v5;
    dispatch_sync(v6, block);

  }
}

void sub_100235124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (isInternalBuild())
    sub_10026BE5C(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(void **)(a1 + 40), *(void **)(a1 + 48));
  else
    KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlSharingTransport sendCrossPlatformTestData:toIdsIdentifier:]_block_invoke", 234, CFSTR("Internal build test only method"), v10, v11, v12, v13, a9);
}

void sub_100235178(uint64_t a1)
{
  NSObject *v2;
  _QWORD block[5];

  if (a1)
  {
    dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 40));
    v2 = *(NSObject **)(a1 + 40);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002351E4;
    block[3] = &unk_100302AA0;
    block[4] = a1;
    dispatch_sync(v2, block);
  }
}

void sub_1002351E4(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(v1 + 48);
  *(_QWORD *)(v1 + 48) = 0;

}

id sub_100235270(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];

  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = *(id *)(*(_QWORD *)(a1 + 32) + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v3)
  {
    v4 = v3;
    v5 = 0;
    v6 = *(_QWORD *)v11;
    do
    {
      v7 = 0;
      v8 = v5;
      do
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v2);
        v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "objectForKey:", *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)v7), (_QWORD)v10));

        objc_msgSend(v5, "handleTransportSetupResult:", *(_QWORD *)(a1 + 40));
        v7 = (char *)v7 + 1;
        v8 = v5;
      }
      while (v4 != v7);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v4);

  }
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "removeAllObjects");
}

void sub_100235450(_QWORD *a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[4] + 24), "objectForKeyedSubscript:", a1[5]));
  objc_msgSend(v2, "handleSendMessageResult:", a1[6]);

}

void sub_100235540(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingTransport handleIncomingTestData:fromRemoteIdsIdentifier:]_block_invoke", 271, CFSTR("KSTransport: received data from %@."), a5, a6, a7, a8, a1[4]);
  v14 = *(_QWORD *)(a1[5] + 48);
  if (v14)
    (*(void (**)(uint64_t, uint64_t, _QWORD))(v14 + 16))(v14, a1[6], 0);
  else
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingTransport handleIncomingTestData:fromRemoteIdsIdentifier:]_block_invoke", 275, CFSTR("KSTransport: We don't expect NSData from anyone so dropping it."), v10, v11, v12, v13, a9);
}

void sub_100235674(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  void *v28;
  id v29;
  void *v30;
  id v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id *v48;
  void *v49;
  id v50;
  id v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id *v60;
  void *v61;
  id *v62;
  uint64_t v63;
  id v64;
  id v65;
  id v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  _BYTE v72[128];

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingTransport handleIncomingMessage:fromRemoteIdsIdentifier:]_block_invoke", 283, CFSTR("KSTransport: received message from %@."), a5, a6, a7, a8, *(_QWORD *)(a1 + 32));
  v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("kmlSharingData")));

  if (v9)
  {
    v10 = objc_alloc((Class)NSData);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("kmlSharingData")));
    v9 = objc_msgSend(v10, "initWithData:", v11);

  }
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("kmlMetaData")));

  if (v12)
  {
    v13 = objc_alloc((Class)NSData);
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("kmlMetaData")));
    v15 = objc_msgSend(v13, "initWithData:", v14);

  }
  else
  {
    v15 = 0;
  }
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("kmlBindingAttestation")));

  if (v16)
  {
    v17 = objc_alloc((Class)NSData);
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("kmlBindingAttestation")));
    v19 = objc_msgSend(v17, "initWithData:", v18);

  }
  else
  {
    v19 = 0;
  }
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("kmlMessageId")));

  if (v20)
  {
    v21 = objc_alloc((Class)NSString);
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("kmlMessageId")));
    v23 = objc_msgSend(v21, "initWithString:", v22);

  }
  else
  {
    v23 = 0;
  }
  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("kmlKeyId")));

  if (v24)
  {
    v25 = objc_alloc((Class)NSString);
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("kmlKeyId")));
    v27 = objc_msgSend(v25, "initWithString:", v26);

  }
  else
  {
    v27 = 0;
  }
  v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("kmlSharingUuid")));

  if (v28)
  {
    v29 = objc_alloc((Class)NSUUID);
    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("kmlSharingUuid")));
    v31 = objc_msgSend(v29, "initWithUUIDString:", v30);

  }
  else
  {
    v31 = 0;
  }
  v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("kmlMessageType")));

  if (v32)
  {
    v33 = *(_QWORD *)(a1 + 48);
    v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("kmlMessageType")));
    v35 = sub_100235CA0(v33, v34);

  }
  else
  {
    v35 = 0;
  }
  v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("kmlDeviceType")));

  if (v36)
  {
    v41 = *(_QWORD *)(a1 + 48);
    v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("kmlDeviceType")));
    v43 = sub_100235DDC(v41, v42);

    if (!v9)
      goto LABEL_29;
  }
  else
  {
    v43 = 1;
    if (!v9)
      goto LABEL_29;
  }
  if (v31)
  {
    if (v35 == 8)
    {
      v67 = v43;
      v48 = sub_10025FD40((uint64_t)KmlOwnerSharingManager, v31);
      v49 = (void *)objc_claimAutoreleasedReturnValue(v48);
      if (!v49)
        goto LABEL_52;
    }
    else
    {
      if (v35 == 9)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingTransport handleIncomingMessage:fromRemoteIdsIdentifier:]_block_invoke", 337, CFSTR("Dropping re-invite errror response by design. It will be handled in future"), v37, v38, v39, v40, v63);
        goto LABEL_52;
      }
      if (!v23)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingTransport handleIncomingMessage:fromRemoteIdsIdentifier:]_block_invoke", 341, CFSTR("Missing messageId, dropping it."), v37, v38, v39, v40, v63);
LABEL_53:
        v49 = 0;
LABEL_54:

        goto LABEL_55;
      }
      v66 = v9;
      v67 = v43;
      v64 = v27;
      v65 = v15;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v50 = *(id *)(*(_QWORD *)(a1 + 48) + 24);
      v51 = objc_msgSend(v50, "countByEnumeratingWithState:objects:count:", &v68, v72, 16);
      if (v51)
      {
        v52 = v51;
        v53 = *(_QWORD *)v69;
LABEL_35:
        v54 = 0;
        while (1)
        {
          if (*(_QWORD *)v69 != v53)
            objc_enumerationMutation(v50);
          v55 = *(void **)(*((_QWORD *)&v68 + 1) + 8 * v54);
          if ((objc_msgSend(v55, "isEqualToString:", v23) & 1) != 0)
            break;
          if (v52 == (id)++v54)
          {
            v52 = objc_msgSend(v50, "countByEnumeratingWithState:objects:count:", &v68, v72, 16);
            if (v52)
              goto LABEL_35;
            goto LABEL_41;
          }
        }
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingTransport handleIncomingMessage:fromRemoteIdsIdentifier:]_block_invoke", 347, CFSTR("KSTransport: Found delegate that can handle the message with id %@"), v56, v57, v58, v59, (uint64_t)v23);
        v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 24), "objectForKey:", v55));

        v15 = v65;
        v9 = v66;
        v27 = v64;
        if (v49)
          goto LABEL_49;
      }
      else
      {
LABEL_41:

        v15 = v65;
        v9 = v66;
        v27 = v64;
      }
      switch(v35)
      {
        case 1:
        case 4:
          v60 = sub_100240EE0((uint64_t)KmlFriendSharingManager, v23, 1);
          v61 = (void *)objc_claimAutoreleasedReturnValue(v60);
          break;
        case 2:
        case 5:
          v62 = sub_100260A2C((uint64_t)KmlOwnerSharingManager, v23, v31);
          v61 = (void *)objc_claimAutoreleasedReturnValue(v62);
          break;
        default:
          goto LABEL_52;
      }
      v49 = v61;
      if (!v61)
      {
LABEL_52:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingTransport handleIncomingMessage:fromRemoteIdsIdentifier:]_block_invoke", 375, CFSTR("KSTransport: No delegate to handle this message. Dropping it."), v44, v45, v46, v47, v63);
        sub_10026B9FC(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8), *(void **)(a1 + 32));
        goto LABEL_53;
      }
      sub_1002345D4(*(_QWORD *)(a1 + 48), v61, v23);
    }
LABEL_49:
    objc_msgSend(v49, "handleIncomingMessage:metaData:bindingAttestation:keyIdentifier:uuid:messageType:targetDeviceType:remoteIdsIdentifier:", v9, v15, v19, v27, v31, v35, v67, *(_QWORD *)(a1 + 32));
    if (v35 == 3 || (v35 & 0xE) == 4)
      sub_10026B9FC(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8), *(void **)(a1 + 32));
    goto LABEL_54;
  }
LABEL_29:
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingTransport handleIncomingMessage:fromRemoteIdsIdentifier:]_block_invoke", 327, CFSTR("KSTransport: malformed message, dropping it."), v37, v38, v39, v40, v63);
LABEL_55:

}

uint64_t sub_100235CA0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;

  v3 = a2;
  v4 = v3;
  v5 = 0;
  if (a1 && v3)
  {
    if ((objc_msgSend(v3, "isEqualToString:", CFSTR("kmlInvitation")) & 1) != 0)
    {
      v5 = 1;
    }
    else if ((objc_msgSend(v4, "isEqualToString:", CFSTR("kmlSigningRequest")) & 1) != 0)
    {
      v5 = 2;
    }
    else if ((objc_msgSend(v4, "isEqualToString:", CFSTR("kmlSignedResponse")) & 1) != 0)
    {
      v5 = 3;
    }
    else if ((objc_msgSend(v4, "isEqualToString:", CFSTR("kmlOwnerCancel")) & 1) != 0)
    {
      v5 = 4;
    }
    else if ((objc_msgSend(v4, "isEqualToString:", CFSTR("kmlFriendCancel")) & 1) != 0)
    {
      v5 = 5;
    }
    else if ((objc_msgSend(v4, "isEqualToString:", CFSTR("kmlPinEntryRequest")) & 1) != 0)
    {
      v5 = 6;
    }
    else if ((objc_msgSend(v4, "isEqualToString:", CFSTR("kmlPinEntryValue")) & 1) != 0)
    {
      v5 = 7;
    }
    else if ((objc_msgSend(v4, "isEqualToString:", CFSTR("kmlReinviteRequest")) & 1) != 0)
    {
      v5 = 8;
    }
    else if (objc_msgSend(v4, "isEqualToString:", CFSTR("kmlReinviteErrorResponse")))
    {
      v5 = 9;
    }
    else
    {
      v5 = 0;
    }
  }

  return v5;
}

uint64_t sub_100235DDC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    if ((objc_msgSend(v3, "isEqualToString:", CFSTR("kmlWatch")) & 1) != 0)
    {
      a1 = 2;
    }
    else if (objc_msgSend(v4, "isEqualToString:", CFSTR("kmlPhone")))
    {
      a1 = 1;
    }
    else
    {
      a1 = 255;
    }
  }

  return a1;
}

id sub_100235E44(uint64_t a1)
{
  return sub_10023E174(*(id *)(*(_QWORD *)(a1 + 32) + 16));
}

void sub_100235F6C(uint64_t a1)
{
  void *v2;
  NSString *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __CFString *v11;
  uint64_t v12;
  KmlOwnerPairingManager *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  NSErrorUserInfoKey v18;
  void *v19;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
  v18 = NSLocalizedDescriptionKey;
  v3 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(13));
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v19 = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v19, &v18, 1));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v2, 13, v5));

  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56))
  {
    v11 = CFSTR("We already have Pairing in progress. Denying this request.");
    v12 = 45;
LABEL_6:
    KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlOwnerPairingSession preWarmForManufacturer:callback:]_block_invoke", v12, v11, v7, v8, v9, v10, v17);
    goto LABEL_7;
  }
  v13 = sub_1002228B4((uint64_t)KmlOwnerPairingManager, 0);
  v14 = objc_claimAutoreleasedReturnValue(v13);
  v15 = *(_QWORD *)(a1 + 32);
  v16 = *(void **)(v15 + 56);
  *(_QWORD *)(v15 + 56) = v14;

  sub_100222BD4(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56), *(void **)(a1 + 32));
  if (!sub_100222CAC(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56), *(void **)(a1 + 40)))
  {
    v11 = CFSTR("Failed to start pre-warm.");
    v12 = 56;
    goto LABEL_6;
  }
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingSession preWarmForManufacturer:callback:]_block_invoke", 53, CFSTR("Started pre-warm for pairing."), v7, v8, v9, v10, v17);

  v6 = 0;
LABEL_7:
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_100236240(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  KmlOwnerPairingManager *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  NSString *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSErrorUserInfoKey v30;
  void *v31;

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingSession startKeyPairingWithPassword:keyName:transport:bindingAttestation:callback:]_block_invoke", 73, CFSTR("Requesting Pairing to Start"), a5, a6, a7, a8, v28);
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56);
  if (!v9)
  {
    v10 = sub_1002228B4((uint64_t)KmlOwnerPairingManager, 0);
    v11 = objc_claimAutoreleasedReturnValue(v10);
    v12 = *(_QWORD *)(a1 + 32);
    v13 = *(void **)(v12 + 56);
    *(_QWORD *)(v12 + 56) = v11;

    sub_100222BD4(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56), *(void **)(a1 + 32));
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56);
  }
  if (sub_100222E50(v9, *(void **)(a1 + 40), *(void **)(a1 + 48), *(_QWORD *)(a1 + 72), *(void **)(a1 + 56)))
  {
    v14 = objc_retainBlock(*(id *)(a1 + 64));
    v15 = *(_QWORD *)(a1 + 32);
    v16 = *(void **)(v15 + 64);
    *(_QWORD *)(v15 + 64) = v14;

    v17 = *(_QWORD *)(a1 + 32);
    v18 = *(void **)(v17 + 80);
    *(_QWORD *)(v17 + 80) = 0;

    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 88) = 0;
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 89) = 0;
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 90) = 0;
  }
  else
  {
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
    v30 = NSLocalizedDescriptionKey;
    v20 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(13));
    v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
    v31 = v21;
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v31, &v30, 1));
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v19, 13, v22));

    KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlOwnerPairingSession startKeyPairingWithPassword:keyName:transport:bindingAttestation:callback:]_block_invoke", 85, CFSTR("We already have Pairing in progress. Denying this request."), v24, v25, v26, v27, v29);
    (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();

  }
}

uint64_t sub_1002364F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __CFString *v13;
  os_log_type_t v14;
  uint64_t v15;
  KmlOwnerPairingManager *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v25;
  uint64_t v26;

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingSession startProbingWithCallback:]_block_invoke", 102, &stru_100316BD0, a5, a6, a7, a8, v25);
  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56))
  {
    v13 = CFSTR("Started probing in the wrong time: opManager is not nil.");
    v14 = OS_LOG_TYPE_INFO;
    v15 = 114;
LABEL_6:
    KmlLogFunc2(v14, (uint64_t)"-[KmlOwnerPairingSession startProbingWithCallback:]_block_invoke", v15, v13, v9, v10, v11, v12, v26);
    goto LABEL_7;
  }
  v16 = sub_1002228B4((uint64_t)KmlOwnerPairingManager, 0);
  v17 = objc_claimAutoreleasedReturnValue(v16);
  v18 = *(_QWORD *)(a1 + 32);
  v19 = *(void **)(v18 + 56);
  *(_QWORD *)(v18 + 56) = v17;

  sub_100222BD4(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56), *(void **)(a1 + 32));
  if (!sub_10022369C(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56)))
  {
    v13 = CFSTR("Failed to start probing.");
    v14 = OS_LOG_TYPE_ERROR;
    v15 = 111;
    goto LABEL_6;
  }
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingSession startProbingWithCallback:]_block_invoke", 109, CFSTR("Started probing for pairing."), v9, v10, v11, v12, v26);
LABEL_7:
  v20 = *(_QWORD *)(a1 + 32);
  v21 = *(void **)(v20 + 64);
  *(_QWORD *)(v20 + 64) = 0;

  v22 = *(_QWORD *)(a1 + 32);
  v23 = *(void **)(v22 + 80);
  *(_QWORD *)(v22 + 80) = 0;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 88) = 0;
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 89) = 0;
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 90) = 0;
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1002366D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __CFString *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  void *v22;
  objc_super v23;

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingSession endSessionWithCompletion:]_block_invoke", 128, &stru_100316BD0, a5, a6, a7, a8, (uint64_t)v23.receiver);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(v9 + 56);
  if (!v10)
    goto LABEL_7;
  sub_1002231B8(v10);
  v11 = sub_1002268C0(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56));
  v9 = *(_QWORD *)(a1 + 32);
  if (v11)
    goto LABEL_7;
  v12 = sub_1002268D4(*(_QWORD *)(v9 + 56));
  v9 = *(_QWORD *)(a1 + 32);
  if (v12)
    goto LABEL_7;
  if (*(_BYTE *)(v9 + 88))
  {
    if (!*(_BYTE *)(v9 + 89) || *(_BYTE *)(v9 + 90))
    {
LABEL_7:
      v17 = *(_QWORD *)(a1 + 40);
      v23.receiver = (id)v9;
      v23.super_class = (Class)KmlOwnerPairingSession;
      objc_msgSendSuper2(&v23, "endSessionWithCompletion:", v17);
      sub_100236810(*(_QWORD *)(a1 + 32));
      return;
    }
    v18 = CFSTR("Save end session callback to be called after first post OP transaction is done.");
    v19 = 141;
  }
  else
  {
    v18 = CFSTR("Save end session callback to be called after pairing completion");
    v19 = 135;
  }
  KmlLogFunc2(OS_LOG_TYPE_DEBUG, (uint64_t)"-[KmlOwnerPairingSession endSessionWithCompletion:]_block_invoke", v19, v18, v13, v14, v15, v16, (uint64_t)v23.receiver);
  v20 = objc_retainBlock(*(id *)(a1 + 40));
  v21 = *(_QWORD *)(a1 + 32);
  v22 = *(void **)(v21 + 80);
  *(_QWORD *)(v21 + 80) = v20;

}

void sub_100236810(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  if (a1)
  {
    sub_100211068(*(id **)(a1 + 56), 0);
    v2 = *(void **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = 0;

    v3 = *(void **)(a1 + 64);
    *(_QWORD *)(a1 + 64) = 0;

    v4 = *(void **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = 0;

    v5 = *(void **)(a1 + 80);
    *(_QWORD *)(a1 + 80) = 0;

  }
}

void sub_100236998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  int v16;
  id v17;
  uint64_t v18;
  void *v19;
  void *v20;
  NSString *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  NSErrorUserInfoKey v26;
  void *v27;

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingSession consumeTrackingReceipt:otherJSONData:forKeyWithIdentifier:callback:]_block_invoke", 161, &stru_100316BD0, a5, a6, a7, a8, v25);
  KmlLogFunc2(OS_LOG_TYPE_DEBUG, (uint64_t)"-[KmlOwnerPairingSession consumeTrackingReceipt:otherJSONData:forKeyWithIdentifier:callback:]_block_invoke", 167, CFSTR("otherJsonData : %@"), v9, v10, v11, v12, *(_QWORD *)(a1 + 32));
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 56);
  if (v13)
  {
    v14 = sub_10020CAB4(v13);
    v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    if ((objc_msgSend(v15, "isEqualToString:", *(_QWORD *)(a1 + 48)) & 1) != 0)
    {
      v16 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 88);

      if (v16)
      {
        v17 = objc_retainBlock(*(id *)(a1 + 64));
        v18 = *(_QWORD *)(a1 + 40);
        v19 = *(void **)(v18 + 72);
        *(_QWORD *)(v18 + 72) = v17;

        sub_100223378(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 56), *(void **)(a1 + 56), *(void **)(a1 + 32));
        return;
      }
    }
    else
    {

    }
  }
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
  v26 = NSLocalizedDescriptionKey;
  v21 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(210));
  v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
  v27 = v22;
  v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v27, &v26, 1));
  v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v20, 210, v23));

  (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
}

void sub_100236CB4(uint64_t a1, const char *a2)
{
  id v3;
  void *v4;
  objc_super v5;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 88) = 1;
  v3 = sub_100237620(*(id *)(a1 + 32), a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  objc_msgSend(v4, "handleKeyPairingCompletionResult:keyInformation:trackingRequest:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));

  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 80))
  {
    v5.receiver = *(id *)(a1 + 32);
    v5.super_class = (Class)KmlOwnerPairingSession;
    objc_msgSendSuper2(&v5, "endSessionWithCompletion:");
    sub_100236810(*(_QWORD *)(a1 + 32));
  }
}

uint64_t sub_100236DFC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) + 16))();
}

void sub_100236E80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __CFString *v9;
  uint64_t v10;

  if (*(_BYTE *)(a1 + 32))
  {
    v9 = CFSTR("Cancel successful");
    v10 = 211;
  }
  else
  {
    v9 = CFSTR("Failed to cancel");
    v10 = 213;
  }
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingSession handleKmlOwnerPairingCancellationResult:]_block_invoke", v10, v9, a5, a6, a7, a8, a9);
}

void sub_100236F78(uint64_t a1, const char *a2)
{
  id v3;
  void *v4;
  objc_super v5;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 90) = 1;
  v3 = sub_100237620(*(id *)(a1 + 32), a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  objc_msgSend(v4, "handleFirstTransactionCompletionResult:", *(_QWORD *)(a1 + 40));

  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 80))
  {
    v5.receiver = *(id *)(a1 + 32);
    v5.super_class = (Class)KmlOwnerPairingSession;
    objc_msgSendSuper2(&v5, "endSessionWithCompletion:");
    sub_100236810(*(_QWORD *)(a1 + 32));
  }
}

uint64_t sub_1002370BC(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 89) = *(_QWORD *)(a1 + 40) == 0;
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 72) + 16))();
}

void sub_1002371A4(uint64_t a1, const char *a2)
{
  id v3;
  id v4;

  v3 = sub_100237620(*(id *)(a1 + 32), a2);
  v4 = (id)objc_claimAutoreleasedReturnValue(v3);
  objc_msgSend(v4, "handlePreWarmCompletionResult:", *(_QWORD *)(a1 + 40));

}

void sub_1002372A4(uint64_t a1, const char *a2)
{
  id v3;
  id v4;

  v3 = sub_100237620(*(id *)(a1 + 32), a2);
  v4 = (id)objc_claimAutoreleasedReturnValue(v3);
  objc_msgSend(v4, "handleProbingCompletionWithBrandCode:error:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40));

}

void sub_100237370(uint64_t a1, const char *a2)
{
  id v2;
  id v3;

  v2 = sub_100237620(*(id *)(a1 + 32), a2);
  v3 = (id)objc_claimAutoreleasedReturnValue(v2);
  objc_msgSend(v3, "handlePairingDidStart");

}

id *sub_1002374D0(id *a1)
{
  if (a1)
    a1 = (id *)a1[3];
  return a1;
}

id sub_100237620(id result, const char *a2)
{
  if (result)
    return objc_getProperty(result, a2, 48, 1);
  return result;
}

void sub_10023778C(uint64_t a1, double a2)
{
  NSObject *v2;
  _QWORD v3[6];

  if (a1)
  {
    v2 = *(NSObject **)(a1 + 32);
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1002378F4;
    v3[3] = &unk_100304AD0;
    v3[4] = a1;
    *(double *)&v3[5] = a2;
    dispatch_async(v2, v3);
  }
}

void sub_1002377EC(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[5];

  if (a1)
  {
    v1 = *(NSObject **)(a1 + 32);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100237848;
    block[3] = &unk_100302AA0;
    block[4] = a1;
    dispatch_async(v1, block);
  }
}

id sub_100237848(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSession cancelXpcConnection]_block_invoke", 121, CFSTR("Invalidating connection"), a5, a6, a7, a8, v10);
  sub_100237890(*(_QWORD *)(a1 + 32));
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "invalidate");
}

void sub_100237890(uint64_t a1)
{
  _QWORD block[5];

  if (a1)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100237AF8;
    block[3] = &unk_100302AA0;
    block[4] = a1;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  }
}

void sub_1002378F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10[6];

  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSession startBackGroundTimerWithTimeout:]_block_invoke", 135, CFSTR("Timer already running. Ignore another start"), a5, a6, a7, a8, a9);
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_DEBUG, (uint64_t)"-[KmlSession startBackGroundTimerWithTimeout:]_block_invoke", 138, CFSTR("Starting background connection timer"), a5, a6, a7, a8, v10[0]);
    v10[0] = (uint64_t)_NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = (uint64_t)sub_1002379B4;
    v10[3] = (uint64_t)&unk_100304AD0;
    v10[4] = *(_QWORD *)(a1 + 32);
    v10[5] = *(_QWORD *)(a1 + 40);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v10);
  }
}

void sub_1002379B4(uint64_t a1)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD v6[5];

  v2 = *(double *)(a1 + 40);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100237A38;
  v6[3] = &unk_10030EFF8;
  v6[4] = *(_QWORD *)(a1 + 32);
  v3 = objc_claimAutoreleasedReturnValue(+[NSTimer scheduledTimerWithTimeInterval:repeats:block:](NSTimer, "scheduledTimerWithTimeInterval:repeats:block:", 0, v6, v2));
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_100237A38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSession startBackGroundTimerWithTimeout:]_block_invoke_3", 141, CFSTR("Cancelling connection from backgrounded client due to time out."), a5, a6, a7, a8, v9);
  sub_1002377EC(*(_QWORD *)(a1 + 32));
}

void sub_100237ACC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  v9 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v9 + 40))
    sub_100237890(v9);
  else
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSession cancelBackGroundTimer]_block_invoke", 152, CFSTR("Timer is not running."), a5, a6, a7, a8, a9);
}

void sub_100237AF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  void *v10;
  uint64_t v11;

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSession cancelBackGroundTimer_internal]_block_invoke", 162, CFSTR("Stopping background timer"), a5, a6, a7, a8, v11);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "invalidate");
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = 0;

}

void sub_100237C00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id WeakRetained;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  KmlLogFunc2(OS_LOG_TYPE_DEBUG, (uint64_t)"-[KmlSession endSessionWithCompletion:]_block_invoke", 173, &stru_100316BD0, a5, a6, a7, a8, v15);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v10 = WeakRetained;
  if (WeakRetained)
  {
    v16 = WeakRetained;
    sub_100237890((uint64_t)WeakRetained);
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[KeyManagementLibrary sharedLibrary](KeyManagementLibrary, "sharedLibrary"));
    objc_msgSend(v11, "removeSession:withError:", v16, 0);
    v12 = (void *)v16[2];
    v16[2] = 0;

    v13 = *(_QWORD *)(a1 + 32);
    if (v13)
      (*(void (**)(uint64_t, _QWORD))(v13 + 16))(v13, 0);

    goto LABEL_7;
  }
  v14 = *(_QWORD *)(a1 + 32);
  if (v14)
  {
    v16 = 0;
    (*(void (**)(uint64_t, _QWORD))(v14 + 16))(v14, 0);
LABEL_7:
    v10 = v16;
  }

}

CFTypeRef sub_100237D18(uint64_t a1, const __CFString *a2, SecTaskRef task)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  CFTypeRef v7;
  CFErrorRef error;

  if (!a1)
    return 0;
  error = 0;
  v7 = SecTaskCopyValueForEntitlement(task, a2, &error);
  if (error)
  {
    KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEntitlementChecker _copyValueOfEntitlement:secTask:]", 30, CFSTR("Failed to get entitlements: %@"), v3, v4, v5, v6, (uint64_t)error);
    CFRelease(error);
  }
  return v7;
}

uint64_t sub_100237D90(uint64_t a1, void *a2, __SecTask *a3)
{
  __CFString *v5;
  const __CFBoolean *v6;
  const __CFBoolean *v7;
  CFTypeID v8;

  v5 = a2;
  if (a1)
  {
    v6 = (const __CFBoolean *)sub_100237D18(a1, v5, a3);
    if (v6)
    {
      v7 = v6;
      v8 = CFGetTypeID(v6);
      a1 = v8 == CFBooleanGetTypeID() && CFBooleanGetValue(v7) != 0;
      CFRelease(v7);
    }
    else
    {
      a1 = 0;
    }
  }

  return a1;
}

id sub_100237E20(id a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  __SecTask *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __SecTask *v11;
  audit_token_t token;
  objc_super v14;
  _OWORD buffer[16];

  v3 = a2;
  if (a1)
  {
    v14.receiver = a1;
    v14.super_class = (Class)KmlEntitlementChecker;
    a1 = objc_msgSendSuper2(&v14, "init");
    if (a1)
    {
      memset(buffer, 0, 255);
      proc_name((int)objc_msgSend(v3, "processIdentifier"), buffer, 0xFEu);
      v4 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", buffer));
      v5 = (void *)*((_QWORD *)a1 + 1);
      *((_QWORD *)a1 + 1) = v4;

      if (v3)
        objc_msgSend(v3, "auditToken");
      else
        memset(&token, 0, sizeof(token));
      v6 = SecTaskCreateWithAuditToken(kCFAllocatorDefault, &token);
      if (v6)
      {
        v11 = v6;
        *((_BYTE *)a1 + 16) = sub_100237D90((uint64_t)a1, CFSTR("com.apple.seserviced.kmlXpcService"), v6);
        *((_BYTE *)a1 + 17) = sub_100237D90((uint64_t)a1, CFSTR("com.apple.seserviced.kmlBackGroundClient"), v11);
        CFRelease(v11);
      }
      else
      {
        KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEntitlementChecker initWithConnection:]", 89, CFSTR("Cannot create SecTaskRef with XPC Connection: %@"), v7, v8, v9, v10, (uint64_t)v3);

        a1 = 0;
      }
    }
  }

  return a1;
}

BOOL sub_10023801C(_BOOL8 result)
{
  if (result)
    return *(_BYTE *)(result + 17) != 0;
  return result;
}

id sub_10023803C(_BYTE *a1, void *a2)
{
  _BYTE *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id *v14;
  id *v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  _BYTE *v29;
  unsigned __int8 v30;
  uint64_t v31;
  int v32;
  id v33;
  objc_super v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[128];
  _BYTE v45[128];

  if (!a1)
    return 0;
  v2 = a1;
  v3 = sub_10022C7A4((uint64_t)KmlTlv, a2);
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v4 = (id)objc_claimAutoreleasedReturnValue(v3);
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v40, v45, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v41;
LABEL_4:
    v8 = 0;
    while (1)
    {
      if (*(_QWORD *)v41 != v7)
        objc_enumerationMutation(v4);
      v9 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * v8);
      if (sub_100055868((uint64_t)v9) == 32620)
        break;
      if (v6 == (id)++v8)
      {
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v40, v45, 16);
        if (v6)
          goto LABEL_4;
        goto LABEL_10;
      }
    }
    v14 = v9;

    if (!v14)
      goto LABEL_22;
    v15 = sub_10022CD6C(v14);
    v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    v17 = sub_10022C7A4((uint64_t)KmlTlv, v16);
    v18 = (void *)objc_claimAutoreleasedReturnValue(v17);

    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v4 = v18;
    v19 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v36, v44, 16);
    if (!v19)
    {
LABEL_21:

LABEL_29:
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlCancelMessage initWithData:]", 120, CFSTR("Cancel code TLV not found"), v24, v25, v26, v27, (uint64_t)v35.receiver);

      goto LABEL_30;
    }
    v20 = v19;
    v21 = *(_QWORD *)v37;
LABEL_14:
    v22 = 0;
    while (1)
    {
      if (*(_QWORD *)v37 != v21)
        objc_enumerationMutation(v4);
      v23 = *(void **)(*((_QWORD *)&v36 + 1) + 8 * v22);
      if (sub_100055868((uint64_t)v23) == 109 || sub_100055868((uint64_t)v23) == 90)
        break;
      if (v20 == (id)++v22)
      {
        v20 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v36, v44, 16);
        if (v20)
          goto LABEL_14;
        goto LABEL_21;
      }
    }
    v28 = v23;

    if (!v28)
      goto LABEL_29;
    v35.receiver = v2;
    v35.super_class = (Class)KmlCancelMessage;
    v29 = objc_msgSendSuper2(&v35, "init");
    if (v29)
    {
      v30 = sub_10022CEB0((uint64_t)v28);
      v31 = 0;
      v29[8] = v30;
      while (LOBYTE(dword_10028E328[v31 + 1]) != v30)
      {
        v31 += 2;
        if (v31 == 8)
        {
          v32 = 105;
          goto LABEL_34;
        }
      }
      v32 = dword_10028E328[v31];
LABEL_34:
      *((_DWORD *)v29 + 3) = v32;
    }
    v2 = v29;

    v33 = v2;
  }
  else
  {
LABEL_10:

LABEL_22:
    KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlCancelMessage initWithData:]", 107, CFSTR("Cancel TLV not found"), v10, v11, v12, v13, (uint64_t)v35.receiver);
LABEL_30:
    v33 = 0;
  }

  return v33;
}

id sub_100238330(id result, int a2)
{
  uint64_t v3;
  char v4;
  objc_super v5;

  if (result)
  {
    v5.receiver = result;
    v5.super_class = (Class)KmlCancelMessage;
    result = objc_msgSendSuper2(&v5, "init");
    if (result)
    {
      v3 = 0;
      *((_DWORD *)result + 3) = a2;
      while (dword_10028E328[v3] != a2)
      {
        v3 += 2;
        if (v3 == 8)
        {
          v4 = -1;
          goto LABEL_8;
        }
      }
      v4 = dword_10028E328[v3 + 1];
LABEL_8:
      *((_BYTE *)result + 8) = v4;
    }
  }
  return result;
}

id sub_1002383B4(uint64_t a1)
{
  _WORD *v1;
  void *v2;
  id v3;
  void *v4;
  _WORD *v5;
  void *v6;
  id v7;
  void *v8;

  if (a1)
  {
    v1 = sub_10022CB90((uint64_t)KmlTlv, 109, *(_BYTE *)(a1 + 8));
    v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
    v3 = sub_10022D014((uint64_t)v2);
    v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    v5 = sub_10022CB3C((uint64_t)KmlTlv, 32620, v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

    v7 = sub_10022D014((uint64_t)v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);

  }
  else
  {
    v8 = 0;
  }
  return v8;
}

uint64_t sub_100238448(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 12);
  return result;
}

const char *KmlErrorString(int a1)
{
  uint64_t v2;
  const char *result;

  v2 = 0;
  result = "Unknown Error";
  while (dword_10030F3B8[v2] != a1)
  {
    v2 += 4;
    if (v2 == 328)
      return result;
  }
  return *(const char **)&dword_10030F3B8[v2 + 2];
}

id sesErrorToKmlError(void *a1, unsigned int a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v11;
  void *v12;
  unsigned __int8 v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  unsigned int v18;
  unsigned int *v19;
  id v20;
  uint64_t v21;
  const char *v22;
  void *v23;
  void *v24;
  __CFString *v25;
  void *v26;
  void *v27;
  _QWORD v28[2];
  _QWORD v29[5];
  _QWORD v30[3];

  v3 = a1;
  v4 = v3;
  if (!v3)
    goto LABEL_6;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "domain"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
  if ((objc_msgSend(v5, "isEqual:", v6) & 1) != 0)
    goto LABEL_5;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "domain"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
  if ((objc_msgSend(v7, "isEqual:", v8) & 1) != 0)
  {

LABEL_5:
LABEL_6:
    v9 = v4;
    goto LABEL_7;
  }
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "domain"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml"));
  v13 = objc_msgSend(v11, "isEqual:", v12);

  if ((v13 & 1) != 0)
    goto LABEL_6;
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "underlyingErrors"));
  if (objc_msgSend(v14, "count"))
  {
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "underlyingErrors"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "firstObject"));
    v17 = objc_msgSend(v16, "code");

  }
  else
  {
    v17 = objc_msgSend(v4, "code");
  }

  v29[2] = 3;
  v18 = 209;
  v29[3] = 209;
  v29[4] = 6;
  v30[0] = 215;
  v30[1] = -1;
  v30[2] = 0xFFFFFFFFLL;
  if (v17 != (id)3)
  {
    v19 = (unsigned int *)v30;
    while (1)
    {
      v18 = *v19;
      if (*v19 == -1)
        break;
      v20 = (id)*((_QWORD *)v19 - 1);
      v19 += 4;
      if (v20 == v17)
        goto LABEL_18;
    }
    v18 = a2;
  }
LABEL_18:
  v21 = 0;
  v22 = "Unknown Error";
  while (dword_10030F3B8[v21] != v18)
  {
    v21 += 4;
    if (v21 == 328)
      goto LABEL_23;
  }
  v22 = *(const char **)&dword_10030F3B8[v21 + 2];
LABEL_23:
  v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v22));
  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localizedFailureReason"));
  if (v24)
    v25 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localizedFailureReason"));
  else
    v25 = &stru_100316BD0;

  v28[0] = NSLocalizedDescriptionKey;
  v28[1] = NSLocalizedFailureReasonErrorKey;
  v29[0] = v23;
  v29[1] = v25;
  v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v29, v28, 2));
  v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml"));
  v9 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v27, v18, v26));

LABEL_7:
  return v9;
}

id kmlUtilDataForHexString(void *a1)
{
  id v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  char *v6;
  __darwin_ct_rune_t v7;
  __darwin_ct_rune_t v8;
  unsigned __int16 v9;
  unsigned int v10;
  int v11;
  unsigned __int16 v12;
  unsigned int v13;
  BOOL v14;
  char v15;
  char v17;

  v1 = a1;
  v2 = v1;
  if (v1 && objc_msgSend(v1, "length"))
  {
    v3 = objc_alloc_init((Class)NSMutableData);
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "stringByReplacingOccurrencesOfString:withString:", CFSTR(" "), &stru_100316BD0));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "stringByReplacingOccurrencesOfString:withString:", CFSTR("\n"), &stru_100316BD0));

    if (objc_msgSend(v5, "length") != (id)1)
    {
      v6 = 0;
      do
      {
        v17 = 0;
        v7 = objc_msgSend(v5, "characterAtIndex:", v6);
        v8 = objc_msgSend(v5, "characterAtIndex:", v6 + 1);
        v9 = __toupper(v7);
        v10 = v9 - 48;
        if (v10 >= 0xA)
          v10 = -1;
        if (v9 - 65 >= 6)
          v11 = v10;
        else
          v11 = v9 - 55;
        v12 = __toupper(v8);
        v13 = v12 - 48;
        if (v13 >= 0xA)
          v13 = -1;
        if (v12 - 65 < 6)
          v13 = v12 - 55;
        v14 = v13 == -1 || v11 == -1;
        v15 = v13 | (16 * v11);
        if (v14)
          v15 = 0;
        v17 = v15;
        objc_msgSend(v3, "appendBytes:length:", &v17, 1);
        v6 += 2;
      }
      while ((char *)objc_msgSend(v5, "length") - 1 > v6);
    }

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

id kmlUtilHexStringFromData(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  char *v4;
  id v5;
  unsigned __int8 *v6;
  unint64_t v7;
  char *v8;
  id v9;

  v1 = a1;
  v2 = v1;
  if (v1 && objc_msgSend(v1, "length"))
  {
    v3 = 2 * (_QWORD)objc_msgSend(v2, "length");
    v4 = (char *)malloc_type_malloc(v3 | 1, 0x8F3A8AADuLL);
    v4[v3] = 0;
    v5 = objc_retainAutorelease(v2);
    v6 = (unsigned __int8 *)objc_msgSend(v5, "bytes");
    if (objc_msgSend(v5, "length"))
    {
      v7 = 0;
      v8 = v4;
      do
      {
        sprintf(v8, "%02X", v6[v7++]);
        v8 += 2;
      }
      while ((unint64_t)objc_msgSend(v5, "length") > v7);
    }
    v9 = objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", v4);
    free(v4);
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

unsigned __int8 *kmlUtilSHA1(void *a1)
{
  id v1;
  id v2;
  CC_LONG v3;
  unsigned __int8 *v4;
  unsigned __int8 md[20];

  v1 = objc_retainAutorelease(a1);
  v2 = objc_msgSend(v1, "bytes");
  v3 = objc_msgSend(v1, "length");

  v4 = CC_SHA1(v2, v3, md);
  if (v4)
    v4 = (unsigned __int8 *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", md, 20));
  return v4;
}

unsigned __int8 *kmlUtilSHA256(void *a1)
{
  id v1;
  id v2;
  CC_LONG v3;
  unsigned __int8 *v4;
  unsigned __int8 md[32];

  v1 = objc_retainAutorelease(a1);
  v2 = objc_msgSend(v1, "bytes");
  v3 = objc_msgSend(v1, "length");

  v4 = CC_SHA256(v2, v3, md);
  if (v4)
    v4 = (unsigned __int8 *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", md, 32));
  return v4;
}

void kmlUtilLogLargeData(void *a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;

  v26 = a1;
  v3 = a2;
  KmlLogFunc_InternalOnly(OS_LOG_TYPE_INFO, (uint64_t)"void kmlUtilLogLargeData(NSString *__strong, NSData *__strong)", 117, CFSTR("--- start %@ ---"), v4, v5, v6, v7, (uint64_t)v26);
  v8 = kmlUtilHexStringFromData(v3);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v10 = (char *)objc_msgSend(v9, "length");
  if ((unint64_t)v10 < 0x321)
  {
    v11 = 0;
  }
  else
  {
    v11 = 0;
    do
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "substringWithRange:", v11, 800));
      KmlLogFunc_InternalOnly(OS_LOG_TYPE_INFO, (uint64_t)"void kmlUtilLogLargeData(NSString *__strong, NSData *__strong)", 122, CFSTR("%@"), v13, v14, v15, v16, (uint64_t)v12);

      v11 += 800;
      v10 -= 800;
    }
    while ((unint64_t)v10 > 0x320);
  }
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "substringWithRange:", v11, v10));
  KmlLogFunc_InternalOnly(OS_LOG_TYPE_INFO, (uint64_t)"void kmlUtilLogLargeData(NSString *__strong, NSData *__strong)", 126, CFSTR("%@"), v18, v19, v20, v21, (uint64_t)v17);

  KmlLogFunc_InternalOnly(OS_LOG_TYPE_INFO, (uint64_t)"void kmlUtilLogLargeData(NSString *__strong, NSData *__strong)", 127, CFSTR("--- end %@ ---"), v22, v23, v24, v25, (uint64_t)v26);
}

id kmlUtilUUIDToData(void *a1)
{
  _QWORD v2[2];

  v2[0] = 0;
  v2[1] = 0;
  objc_msgSend(a1, "getUUIDBytes:", v2);
  return (id)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v2, 16));
}

id kmlUtilTimeNow()
{
  void *v0;
  id v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  v1 = objc_alloc_init((Class)NSDateFormatter);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSTimeZone timeZoneWithName:](NSTimeZone, "timeZoneWithName:", CFSTR("UTC")));
  objc_msgSend(v1, "setTimeZone:", v2);

  objc_msgSend(v1, "setDateFormat:", CFSTR("yyyyMMddHHmmss'Z'"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSLocale localeWithLocaleIdentifier:](NSLocale, "localeWithLocaleIdentifier:", CFSTR("en_US_POSIX")));
  objc_msgSend(v1, "setLocale:", v3);

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "stringFromDate:", v0));
  KmlLogFunc2(OS_LOG_TYPE_DEBUG, (uint64_t)"NSData *kmlUtilTimeNow(void)", 149, CFSTR("date now %@"), v5, v6, v7, v8, (uint64_t)v4);
  v9 = objc_retainAutorelease(v4);
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", objc_msgSend(v9, "UTF8String"), objc_msgSend(v9, "length")));

  return v10;
}

NSData *kmlUtilInfiniteTime(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_DEBUG, (uint64_t)"NSData *kmlUtilInfiniteTime(void)", 175, CFSTR("infinite date %@"), a5, a6, a7, a8, (uint64_t)CFSTR("99991231235959Z"));
  return +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", objc_msgSend(CFSTR("99991231235959Z"), "UTF8String"), objc_msgSend(CFSTR("99991231235959Z"), "length"));
}

uint64_t isInternalBuild()
{
  if ((byte_100354901 & 1) == 0)
  {
    if (MGGetBoolAnswer(CFSTR("InternalBuild")))
      byte_100354900 = 1;
    byte_100354901 = 1;
  }
  return byte_100354900;
}

id randomStringWithLength(uint64_t a1)
{
  uint32_t v2;
  void *i;

  v2 = objc_msgSend(CFSTR("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"), "length");
  for (i = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString stringWithCapacity:](NSMutableString, "stringWithCapacity:", a1));
        a1;
        --a1)
  {
    objc_msgSend(i, "appendFormat:", CFSTR("%C"), objc_msgSend(CFSTR("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"), "characterAtIndex:", arc4random_uniform(v2)));
  }
  return i;
}

id kmlUtilSanitizeFriendlyName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[6];
  _QWORD v14[4];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  void (*v19)(uint64_t);
  id v20;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "dataUsingEncoding:", 4));
  if ((unint64_t)objc_msgSend(v2, "length") > 0x1E)
  {
    v15 = 0;
    v16 = &v15;
    v17 = 0x3032000000;
    v18 = sub_1002391AC;
    v19 = sub_1002391BC;
    v20 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableString string](NSMutableString, "string"));
    v14[0] = 0;
    v14[1] = v14;
    v14[2] = 0x2020000000;
    v14[3] = 0;
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_1002391C4;
    v13[3] = &unk_10030F8F0;
    v13[4] = v14;
    v13[5] = &v15;
    objc_msgSend(v1, "enumerateSubstringsInRange:options:usingBlock:", 0, objc_msgSend(v1, "length"), 2, v13);
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"NSString *kmlUtilSanitizeFriendlyName(NSString *__strong)", 234, CFSTR("Original key name: %@ ,  truncated key name: %@"), v8, v9, v10, v11, (uint64_t)v1);
    v7 = (id)v16[5];
    _Block_object_dispose(v14, 8);
    _Block_object_dispose(&v15, 8);

  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"NSString *kmlUtilSanitizeFriendlyName(NSString *__strong)", 216, CFSTR("UTF8 encoded friendly name is less than %ld chars : %@"), v3, v4, v5, v6, 30);
    v7 = v1;
  }

  return v7;
}

void sub_100239188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1002391AC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1002391BC(uint64_t a1)
{

}

void sub_1002391C4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  id v9;

  v9 = a2;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += objc_msgSend(v9, "lengthOfBytesUsingEncoding:", 4);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) > 0x1EuLL)
    *a7 = 1;
  else
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "appendString:", v9);

}

id kmlUtilGetDckIdFromSlotId(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = a1;
  v6 = v1;
  if (v1 && objc_msgSend(v1, "length"))
  {
    if (objc_msgSend(v6, "length") == (id)8)
    {
      v7 = v6;
    }
    else
    {
      if ((unint64_t)objc_msgSend(v6, "length") < 9)
      {
        v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithLength:](NSMutableData, "dataWithLength:", 8));
        objc_msgSend(v8, "replaceBytesInRange:withBytes:", 8 - (_QWORD)objc_msgSend(v6, "length"), objc_msgSend(v6, "length"), objc_msgSend(objc_retainAutorelease(v6), "bytes"));
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"NSData *kmlUtilGetDckIdFromSlotId(NSData *__strong)", 255, CFSTR("DCK Identifier : %@"), v9, v10, v11, v12, (uint64_t)v8);
        goto LABEL_10;
      }
      v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "subdataWithRange:", 0, 8));
    }
    v8 = v7;
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"NSData *kmlUtilGetDckIdFromSlotId(NSData *__strong)", 241, CFSTR("Invalid slotId %@:"), v2, v3, v4, v5, (uint64_t)v6);
    v8 = 0;
  }
LABEL_10:

  return v8;
}

id kmlUtilGetOOBKey(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v25;

  v3 = a1;
  v4 = a2;
  v9 = v4;
  if (v3 && v4)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithLength:](NSMutableData, "dataWithLength:", 64));
    v11 = ccsha256_di(v10);
    v12 = objc_msgSend(v3, "length");
    v13 = objc_msgSend(objc_retainAutorelease(v3), "bytes");
    v14 = objc_msgSend(v9, "length");
    v15 = objc_msgSend(objc_retainAutorelease(v9), "bytes");
    v16 = objc_msgSend(v10, "length");
    v17 = objc_retainAutorelease(v10);
    v18 = cchkdf(v11, v12, v13, 0, 0, v14, v15, v16, objc_msgSend(v17, "mutableBytes"));
    if ((_DWORD)v18)
    {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"NSData *kmlUtilGetOOBKey(NSData *__strong, NSData *__strong)", 273, CFSTR("cchkdf failed with %d"), v19, v20, v21, v22, v18);
      v23 = 0;
    }
    else
    {
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "subdataWithRange:", 0, 16));
    }

  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"NSData *kmlUtilGetOOBKey(NSData *__strong, NSData *__strong)", 262, CFSTR("Missing masterKey or identifier"), v5, v6, v7, v8, v25);
    v23 = 0;
  }

  return v23;
}

id kmlUtilRandomDataWithSize(size_t a1)
{
  id v2;

  v2 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithLength:](NSMutableData, "dataWithLength:", a1)));
  arc4random_buf(objc_msgSend(v2, "mutableBytes"), a1);
  return v2;
}

id kmlUtilGeneratePasscode(void *a1, void *a2, unint64_t a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  unint64_t v13;
  void *v14;
  unsigned __int8 *v15;
  id v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v31;
  id v32;
  id v33;
  unsigned __int8 v34;

  v5 = a1;
  v6 = a2;
  if (objc_msgSend(v5, "length") && (v7 = objc_msgSend(v6, "length"), a3) && v7)
  {
    v34 = 0;
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString stringWithCapacity:](NSMutableString, "stringWithCapacity:", a3));
    v13 = 0;
    v32 = v6;
    v33 = v5;
    while (1)
    {
      KmlLogFunc_InternalOnly(OS_LOG_TYPE_DEBUG, (uint64_t)"NSString *kmlUtilGeneratePasscode(NSData *__strong, NSData *__strong, NSUInteger)", 305, CFSTR("counter : %u ; digits scored : %u"),
        v8,
        v9,
        v10,
        v11,
        v34);
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithBytes:length:](NSMutableData, "dataWithBytes:length:", &v34, 1));
      objc_msgSend(v14, "appendData:", v5);
      objc_msgSend(v14, "appendData:", v6);
      v15 = kmlUtilSHA256(v14);
      v16 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(v15));
      v17 = (char *)objc_msgSend(v16, "bytes");
      if (objc_msgSend(v16, "length"))
      {
        v22 = 0;
        while (1)
        {
          if (v17[v22] <= 0xF9u)
          {
            v31 = a0123456789[*(unsigned __int16 *)&v17[v22] % 0xAu];
            objc_msgSend(v12, "appendFormat:", CFSTR("%C"));
            if (++v13 == a3)
              break;
          }
          if (++v22 >= (unint64_t)objc_msgSend(v16, "length"))
            goto LABEL_12;
        }
        v13 = a3;
      }
LABEL_12:
      if (v34 == 255)
        break;
      ++v34;

      v6 = v32;
      v5 = v33;
      if (v13 >= a3)
      {
        v23 = v12;
        goto LABEL_17;
      }
    }
    KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"NSString *kmlUtilGeneratePasscode(NSData *__strong, NSData *__strong, NSUInteger)", 326, CFSTR("Ran out of randomizer counter. Abort!"), v18, v19, v20, v21, v31);

    v23 = 0;
    v6 = v32;
    v5 = v33;
LABEL_17:
    v29 = v23;

  }
  else
  {
    v24 = objc_msgSend(v5, "length");
    objc_msgSend(v6, "length");
    KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"NSString *kmlUtilGeneratePasscode(NSData *__strong, NSData *__strong, NSUInteger)", 290, CFSTR("length of : longTermSecret:%u; seed:%u; desiredPasscode:%u"),
      v25,
      v26,
      v27,
      v28,
      (uint64_t)v24);
    v29 = 0;
  }

  return v29;
}

id kmlUtilGenerateAccountIdHash(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  unsigned __int8 *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "length") && objc_msgSend(v4, "length"))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData data](NSMutableData, "data"));
    objc_msgSend(v5, "appendData:", v3);
    objc_msgSend(v5, "appendData:", v4);
    v6 = kmlUtilSHA256(v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);

  }
  else
  {
    v8 = objc_msgSend(v3, "length");
    objc_msgSend(v4, "length");
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"NSData *kmlUtilGenerateAccountIdHash(NSData *__strong, NSData *__strong)", 340, CFSTR("anonymizedDsid.length = %lu, readerIdentifier.length = %lu"), v9, v10, v11, v12, (uint64_t)v8);
    v7 = 0;
  }

  return v7;
}

uint64_t kmlUtilIsFleetKey(unsigned int a1)
{
  return (a1 >> 3) & 1;
}

uint64_t kmlUtilIsServerIssuedKey(unsigned int a1)
{
  return (a1 >> 2) & 1;
}

uint64_t kmlUtilKeyClassOriginBitmap(unsigned int a1)
{
  return (a1 >> 2) & 3;
}

id kmlUtilGetMockInstanceCAData()
{
  void *v0;
  void *v1;
  void *v2;
  _WORD *v3;
  void *v4;
  id v5;
  void *v6;
  _WORD *v7;
  void *v8;
  id v9;
  void *v10;
  _WORD *v11;
  void *v12;
  id v13;
  void *v14;
  _WORD *v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  void *v21;
  id v22;
  void *v23;
  _WORD *v24;
  void *v25;
  id v26;
  void *v27;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData data](NSMutableData, "data"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("ECIES_v1"), "dataUsingEncoding:", 4));
  v3 = sub_10022CB3C((uint64_t)KmlTlv, 218, v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  objc_msgSend(v1, "addObject:", v4);

  v5 = kmlUtilRandomDataWithSize(0x41uLL);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v7 = sub_10022CB3C((uint64_t)KmlTlv, 69, v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  objc_msgSend(v1, "addObject:", v8);

  v9 = kmlUtilRandomDataWithSize(0x20uLL);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  v11 = sub_10022CB3C((uint64_t)KmlTlv, 70, v10);
  v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  objc_msgSend(v1, "addObject:", v12);

  v13 = kmlUtilRandomDataWithSize(0x80uLL);
  v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
  v15 = sub_10022CB3C((uint64_t)KmlTlv, 74, v14);
  v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
  objc_msgSend(v1, "addObject:", v16);

  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v17 = v1;
  v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
  if (v18)
  {
    v19 = v18;
    v20 = *(_QWORD *)v30;
    do
    {
      v21 = 0;
      do
      {
        if (*(_QWORD *)v30 != v20)
          objc_enumerationMutation(v17);
        v22 = sub_10022D014(*(_QWORD *)(*((_QWORD *)&v29 + 1) + 8 * (_QWORD)v21));
        v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
        objc_msgSend(v0, "appendData:", v23, (_QWORD)v29);

        v21 = (char *)v21 + 1;
      }
      while (v19 != v21);
      v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
    }
    while (v19);
  }

  v24 = sub_10022CB3C((uint64_t)KmlTlv, 32546, v0);
  v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
  v26 = sub_10022D014((uint64_t)v25);
  v27 = (void *)objc_claimAutoreleasedReturnValue(v26);

  return v27;
}

id kmlUtilDecodeJson(void *a1, void *a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  void *v30;
  void *v31;
  id v32;
  void *v33;
  id v34;
  uint64_t v35;
  void *i;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  id v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  void *v64;
  id v65;
  id v66;
  void *v67;
  void *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  id v73;
  _BYTE v74[128];

  v7 = a1;
  v8 = a2;
  v9 = a3;
  if (objc_msgSend(v7, "length"))
  {
    v68 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
    v73 = 0;
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSJSONSerialization JSONObjectWithData:options:error:](NSJSONSerialization, "JSONObjectWithData:options:error:", v7, 0, &v73));
    v15 = v73;
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"NSDictionary *kmlUtilDecodeJson(NSData *__strong, NSDictionary *__strong, NSString *__strong, NSError *__autoreleasing *)", 417, CFSTR("json serialization error : %@"), v16, v17, v18, v19, (uint64_t)v15);
    KmlLogFunc2(OS_LOG_TYPE_DEBUG, (uint64_t)"NSDictionary *kmlUtilDecodeJson(NSData *__strong, NSDictionary *__strong, NSString *__strong, NSError *__autoreleasing *)", 418, CFSTR("jsonObject : %@"), v20, v21, v22, v23, (uint64_t)v14);
    if (v15 || !v14)
    {
      v30 = 0;
      v29 = 0;
      if (a4)
        *a4 = objc_retainAutorelease(v15);
      goto LABEL_38;
    }
    if (objc_msgSend(v9, "length"))
    {
      v24 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKey:", v9));
      if (!v24)
      {
        v66 = 0;
        goto LABEL_37;
      }
    }
    else
    {
      v24 = v14;
    }
    v66 = v24;
    if (objc_msgSend(v24, "count"))
    {
      v64 = v14;
      v65 = v7;
      v71 = 0u;
      v72 = 0u;
      v69 = 0u;
      v70 = 0u;
      v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "allKeys"));
      v32 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v69, v74, 16);
      v33 = v66;
      if (v32)
      {
        v34 = v32;
        v35 = *(_QWORD *)v70;
        v67 = v31;
        do
        {
          for (i = 0; i != v34; i = (char *)i + 1)
          {
            if (*(_QWORD *)v70 != v35)
              objc_enumerationMutation(v31);
            v37 = *(_QWORD *)(*((_QWORD *)&v69 + 1) + 8 * (_QWORD)i);
            v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "objectForKey:", v37));
            v39 = objc_opt_class(NSString);
            if ((objc_opt_isKindOfClass(v38, v39) & 1) != 0)
            {
              v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", v37));
              if (v44 == (void *)objc_opt_class(NSString))
              {
                objc_msgSend(v68, "setObject:forKeyedSubscript:", v38, v37);
              }
              else if (v44 == (void *)objc_opt_class(NSNumber))
              {
                v49 = v8;
                v50 = objc_alloc_init((Class)NSNumberFormatter);
                v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "numberFromString:", v38));
                if (v55)
                  objc_msgSend(v68, "setObject:forKeyedSubscript:", v55, v37);
                else
                  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"NSDictionary *kmlUtilDecodeJson(NSData *__strong, NSDictionary *__strong, NSString *__strong, NSError *__autoreleasing *)", 457, CFSTR("Skip %@, since value is nil"), v51, v52, v53, v54, v37);

                v8 = v49;
                v33 = v66;
                v31 = v67;
              }
              else if (v44 == (void *)objc_opt_class(NSData))
              {
                v56 = kmlUtilDataForHexString(v38);
                v57 = (void *)objc_claimAutoreleasedReturnValue(v56);
                if (objc_msgSend(v57, "length"))
                  objc_msgSend(v68, "setObject:forKeyedSubscript:", v57, v37);
                else
                  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"NSDictionary *kmlUtilDecodeJson(NSData *__strong, NSDictionary *__strong, NSString *__strong, NSError *__autoreleasing *)", 467, CFSTR("Skip %@, since value is nil"), v58, v59, v60, v61, v37);

                v31 = v67;
              }
              else
              {
                KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"NSDictionary *kmlUtilDecodeJson(NSData *__strong, NSDictionary *__strong, NSString *__strong, NSError *__autoreleasing *)", 471, CFSTR("Skip %@, since it is expected to have value of unsupported class"), v45, v46, v47, v48, v37);
              }

            }
            else
            {
              KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"NSDictionary *kmlUtilDecodeJson(NSData *__strong, NSDictionary *__strong, NSString *__strong, NSError *__autoreleasing *)", 441, CFSTR("Skip %@, since it has non string value in json"), v40, v41, v42, v43, v37);
            }

          }
          v34 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v69, v74, 16);
        }
        while (v34);
      }

      v29 = v68;
      v7 = v65;
      v30 = v33;
      v14 = v64;
      v15 = 0;
      goto LABEL_38;
    }
LABEL_37:
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"NSDictionary *kmlUtilDecodeJson(NSData *__strong, NSDictionary *__strong, NSString *__strong, NSError *__autoreleasing *)", 434, CFSTR("Missing target dictionary with keyName : %@"), v25, v26, v27, v28, (uint64_t)v9);
    v29 = 0;
    v30 = v66;
LABEL_38:

    goto LABEL_39;
  }
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"NSDictionary *kmlUtilDecodeJson(NSData *__strong, NSDictionary *__strong, NSString *__strong, NSError *__autoreleasing *)", 407, CFSTR("json data is nil"), v10, v11, v12, v13, v63);
  v29 = 0;
LABEL_39:

  return v29;
}

uint64_t kmlUtilAddUniqueTagToSet(void *a1, unsigned int a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  v3 = a1;
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a2));
  v6 = objc_msgSend(v3, "containsObject:", v5);

  if (v6)
  {
    KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"_Bool kmlUtilAddUniqueTagToSet(NSMutableSet *__strong, uint16_t)", 480, CFSTR("Received duplicated tag: 0x%02X"), v7, v8, v9, v10, v4);
  }
  else
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v4));
    objc_msgSend(v3, "addObject:", v11);

  }
  return v6 ^ 1;
}

void sub_10023A108(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id *v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  _BOOL4 v13;
  void (**v14)(void *, _QWORD, void *);
  id v15;
  _QWORD *v16;
  void *v17;
  void *v18;
  NSString *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  NSErrorUserInfoKey v24;
  void *v25;

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeySharingSession sendSharingInviteForKeyIdentifier:toIdsIdentifier:auth:config:completionHandler:]_block_invoke", 64, CFSTR("Key Sharing requested"), a5, a6, a7, a8, v23);
  v9 = sub_10025F554((uint64_t)KmlOwnerSharingManager, a1[5], a1[6], 0);
  v10 = objc_claimAutoreleasedReturnValue(v9);
  v11 = a1[4];
  v12 = (void *)v11[8];
  v11[8] = v10;

  sub_100267524(*((id **)a1[4] + 8), a1[4]);
  v13 = sub_1002614C4(*((_QWORD *)a1[4] + 8), a1[7], 0, a1[8]);
  v14 = (void (**)(void *, _QWORD, void *))a1[9];
  if (v13)
  {
    v15 = objc_retainBlock(a1[9]);
    v16 = a1[4];
    v17 = (void *)v16[16];
    v16[16] = v15;

  }
  else
  {
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
    v24 = NSLocalizedDescriptionKey;
    v19 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(108));
    v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
    v25 = v20;
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v25, &v24, 1));
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v18, 108, v21));
    v14[2](v14, 0, v22);

  }
}

void sub_10023A3C4(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id *v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  _BOOL4 v13;
  void (**v14)(void *, _QWORD, void *);
  id v15;
  _QWORD *v16;
  void *v17;
  void *v18;
  NSString *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  NSErrorUserInfoKey v24;
  void *v25;

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeySharingSession sendSilentSharingInviteForKeyIdentifier:config:groupIdentifier:completionHandler:]_block_invoke", 81, CFSTR("Silent Key Sharing requested"), a5, a6, a7, a8, v23);
  v9 = sub_10025FD40((uint64_t)KmlOwnerSharingManager, a1[5]);
  v10 = objc_claimAutoreleasedReturnValue(v9);
  v11 = a1[4];
  v12 = (void *)v11[8];
  v11[8] = v10;

  sub_100267524(*((id **)a1[4] + 8), a1[4]);
  v13 = sub_10026187C(*((_QWORD *)a1[4] + 8), a1[6]);
  v14 = (void (**)(void *, _QWORD, void *))a1[7];
  if (v13)
  {
    v15 = objc_retainBlock(a1[7]);
    v16 = a1[4];
    v17 = (void *)v16[18];
    v16[18] = v15;

  }
  else
  {
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
    v24 = NSLocalizedDescriptionKey;
    v19 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(105));
    v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
    v25 = v20;
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v25, &v24, 1));
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v18, 105, v21));
    v14[2](v14, 0, v22);

  }
}

uint64_t sub_10023A624(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;

  KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlKeySharingSession authorizeSharingInvitationIdentifier:auth:completionHandler:]_block_invoke", 98, CFSTR("NOT IMPLEMENTED"), a5, a6, a7, a8, v10);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10023A724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  NSString *v22;
  void *v23;
  void *v24;
  void *v25;
  NSErrorUserInfoKey v26;
  void *v27;

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeySharingSession cancelSharingInvitation:completionHandler:]_block_invoke", 109, CFSTR("Cancel requested for invitation ID:%@"), a5, a6, a7, a8, *(_QWORD *)(a1 + 32));
  v9 = sub_100240EE0((uint64_t)KmlFriendSharingManager, *(void **)(a1 + 32), 0);
  v10 = objc_claimAutoreleasedReturnValue(v9);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(void **)(v11 + 80);
  *(_QWORD *)(v11 + 80) = v10;

  if (*(_QWORD *)(*(_QWORD *)(a1 + 40) + 80))
  {
    v17 = objc_retainBlock(*(id *)(a1 + 48));
    v18 = *(_QWORD *)(a1 + 40);
    v19 = *(void **)(v18 + 136);
    *(_QWORD *)(v18 + 136) = v17;

    sub_10024C28C(*(id **)(*(_QWORD *)(a1 + 40) + 80), *(void **)(a1 + 40));
    sub_100243270(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 80));
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeySharingSession cancelSharingInvitation:completionHandler:]_block_invoke", 116, CFSTR("We don't have a valid invitation with ID:%@"), v13, v14, v15, v16, *(_QWORD *)(a1 + 32));
    v20 = *(_QWORD *)(a1 + 48);
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
    v26 = NSLocalizedDescriptionKey;
    v22 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(109));
    v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
    v27 = v23;
    v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v27, &v26, 1));
    v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v21, 109, v24));
    (*(void (**)(uint64_t, void *))(v20 + 16))(v20, v25);

  }
}

void sub_10023AA2C(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id v9;
  _QWORD *v10;
  void *v11;
  id *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeySharingSession acceptSharingInvitationWithIdentifier:passcode:productPlanIdentifier:completionHandler:]_block_invoke", 128, CFSTR("KmlXpcService: Start key sharing exchange"), a5, a6, a7, a8, v16);
  v9 = objc_retainBlock(a1[8]);
  v10 = a1[4];
  v11 = (void *)v10[11];
  v10[11] = v9;

  v12 = sub_100240EE0((uint64_t)KmlFriendSharingManager, a1[5], 1);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  v14 = a1[4];
  v15 = (void *)v14[10];
  v14[10] = v13;

  sub_10024C28C(*((id **)a1[4] + 10), a1[4]);
  sub_100242400(*((_QWORD *)a1[4] + 10), a1[6], a1[7]);
}

void sub_10023AB88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  id *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  dispatch_queue_t *v14;
  uint64_t v15;
  id v16;

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeySharingSession requestInviteWithConfig:completionHandler:]_block_invoke", 139, CFSTR("Request key sharing invitation for late device"), a5, a6, a7, a8, v15);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "sharingSessionIdentifier"));
  v10 = sub_1002412BC((uint64_t)KmlFriendSharingManager, v9);
  v11 = objc_claimAutoreleasedReturnValue(v10);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(void **)(v12 + 80);
  *(_QWORD *)(v12 + 80) = v11;

  v14 = sub_1002436B0(*(dispatch_queue_t **)(*(_QWORD *)(a1 + 32) + 80), *(void **)(a1 + 40));
  v16 = (id)objc_claimAutoreleasedReturnValue(v14);
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_10023AD90(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id *v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  _BOOL4 v13;
  void (**v14)(void *, _QWORD, void *);
  id v15;
  _QWORD *v16;
  void *v17;
  void *v18;
  NSString *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  NSErrorUserInfoKey v24;
  void *v25;

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeySharingSession createSharingInvitationsForKeyIdentifier:friendIdentifier:auth:ourBindingAttestation:config:completionHandler:]_block_invoke", 155, CFSTR("Cross-platform Key Sharing requested"), a5, a6, a7, a8, v23);
  v9 = sub_10025F554((uint64_t)KmlOwnerSharingManager, a1[5], a1[6], 1);
  v10 = objc_claimAutoreleasedReturnValue(v9);
  v11 = a1[4];
  v12 = (void *)v11[8];
  v11[8] = v10;

  sub_100267524(*((id **)a1[4] + 8), a1[4]);
  v13 = sub_1002614C4(*((_QWORD *)a1[4] + 8), a1[7], a1[8], a1[9]);
  v14 = (void (**)(void *, _QWORD, void *))a1[10];
  if (v13)
  {
    v15 = objc_retainBlock(a1[10]);
    v16 = a1[4];
    v17 = (void *)v16[16];
    v16[16] = v15;

  }
  else
  {
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
    v24 = NSLocalizedDescriptionKey;
    v19 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(108));
    v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
    v25 = v20;
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v25, &v24, 1));
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v18, 108, v21));
    v14[2](v14, 0, v22);

  }
}

void sub_10023B024(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id *v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  uint64_t *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void (**v17)(void *, _QWORD, void *);
  NSString *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22[4];
  id v23;
  NSErrorUserInfoKey v24;
  void *v25;

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeySharingSession createSilentSharingInvitationWithGroupIdentifier:completionHandler:]_block_invoke", 170, CFSTR("Silent Cross-platform Key Sharing requested"), a5, a6, a7, a8, v22[0]);
  v9 = sub_10025FD40((uint64_t)KmlOwnerSharingManager, a1[5]);
  v10 = objc_claimAutoreleasedReturnValue(v9);
  v11 = a1[4];
  v12 = (void *)v11[8];
  v11[8] = v10;

  sub_100267524(*((id **)a1[4] + 8), a1[4]);
  if (sub_100261AC4(*((_QWORD *)a1[4] + 8)))
  {
    v22[0] = (uint64_t)_NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = (uint64_t)sub_10023B204;
    v22[3] = (uint64_t)&unk_10030F990;
    v23 = a1[6];
    v13 = objc_retainBlock(v22);
    v14 = a1[4];
    v15 = (void *)v14[16];
    v14[16] = v13;

    v16 = v23;
  }
  else
  {
    v17 = (void (**)(void *, _QWORD, void *))a1[6];
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
    v24 = NSLocalizedDescriptionKey;
    v18 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(108));
    v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    v25 = v19;
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v25, &v24, 1));
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v16, 108, v20));
    v17[2](v17, 0, v21);

  }
}

void sub_10023B204(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;

  v7 = a2;
  v5 = a3;
  if (objc_msgSend(v7, "count"))
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectAtIndexedSubscript:", 0));
  else
    v6 = 0;
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_10023B394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  NSString *v18;
  void *v19;
  void *v20;
  void *v21;
  dispatch_queue_t *v22;
  dispatch_queue_t *v23;
  uint64_t v24;
  NSErrorUserInfoKey v25;
  void *v26;

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeySharingSession setMailboxIdentifier:forOwnerKeyIdentifier:forInvitationIdentifier:completionHandler:]_block_invoke", 190, CFSTR("InvitationId - %@"), a5, a6, a7, a8, *(_QWORD *)(a1 + 32));
  KmlLogFunc_InternalOnly(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeySharingSession setMailboxIdentifier:forOwnerKeyIdentifier:forInvitationIdentifier:completionHandler:]_block_invoke", 191, CFSTR("MailboxId - %@"), v9, v10, v11, v12, *(_QWORD *)(a1 + 40));
  v13 = sub_10025FA94((uint64_t)KmlOwnerSharingManager, *(void **)(a1 + 56), *(void **)(a1 + 32));
  v14 = objc_claimAutoreleasedReturnValue(v13);
  v15 = *(_QWORD *)(a1 + 48);
  v16 = *(void **)(v15 + 64);
  *(_QWORD *)(v15 + 64) = v14;

  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
  v25 = NSLocalizedDescriptionKey;
  v18 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(109));
  v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
  v26 = v19;
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v26, &v25, 1));
  v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v17, 109, v20));

  v22 = *(dispatch_queue_t **)(*(_QWORD *)(a1 + 48) + 64);
  if (v22)
  {
    v23 = sub_100262070(v22, *(void **)(a1 + 40), *(void **)(a1 + 32));
    v24 = objc_claimAutoreleasedReturnValue(v23);

    v21 = (void *)v24;
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();

}

void sub_10023B6A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id *v14;
  uint64_t v15;
  id *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  NSString *v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  NSErrorUserInfoKey v33;
  void *v34;

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeySharingSession acceptSharingInvitation:withIdentifier:fromMailboxIdentifier:passcode:productPlanIdentifier:completionHandler:]_block_invoke", 209, CFSTR("InvitationIdentifier- %@"), a5, a6, a7, a8, *(_QWORD *)(a1 + 32));
  KmlLogFunc_InternalOnly(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeySharingSession acceptSharingInvitation:withIdentifier:fromMailboxIdentifier:passcode:productPlanIdentifier:completionHandler:]_block_invoke", 210, CFSTR("MailboxId - %@"), v9, v10, v11, v12, *(_QWORD *)(a1 + 40));
  if (*(_QWORD *)(a1 + 48) && (v13 = *(void **)(a1 + 40)) != 0)
  {
    v14 = sub_100241824((uint64_t)KmlFriendSharingManager, v13, 1);
    v15 = objc_claimAutoreleasedReturnValue(v14);
  }
  else
  {
    v16 = sub_100240EE0((uint64_t)KmlFriendSharingManager, *(void **)(a1 + 32), 0);
    v15 = objc_claimAutoreleasedReturnValue(v16);
  }
  v17 = *(_QWORD *)(a1 + 56);
  v18 = *(void **)(v17 + 80);
  *(_QWORD *)(v17 + 80) = v15;

  if (*(_QWORD *)(*(_QWORD *)(a1 + 56) + 80))
  {
    v23 = objc_retainBlock(*(id *)(a1 + 80));
    v24 = *(_QWORD *)(a1 + 56);
    v25 = *(void **)(v24 + 96);
    *(_QWORD *)(v24 + 96) = v23;

    sub_10024C28C(*(id **)(*(_QWORD *)(a1 + 56) + 80), *(void **)(a1 + 56));
    sub_100242E14(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 80), *(void **)(a1 + 48), *(void **)(a1 + 64), *(void **)(a1 + 72));
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlKeySharingSession acceptSharingInvitation:withIdentifier:fromMailboxIdentifier:passcode:productPlanIdentifier:completionHandler:]_block_invoke", 222, CFSTR("No manager found to handle this"), v19, v20, v21, v22, v32);
    v26 = *(_QWORD *)(a1 + 80);
    v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
    v33 = NSLocalizedDescriptionKey;
    v28 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(109));
    v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
    v34 = v29;
    v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v34, &v33, 1));
    v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v27, 109, v30));
    (*(void (**)(uint64_t, _QWORD, _QWORD, void *))(v26 + 16))(v26, 0, 0, v31);

  }
}

void sub_10023B9D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;

  KmlLogFunc_InternalOnly(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeySharingSession startShareAcceptanceFlowWithInvitation:fromMailboxIdentifier:completionHandler:]_block_invoke", 233, CFSTR("MailboxId - %@"), a5, a6, a7, a8, *(_QWORD *)(a1 + 32));
  v9 = sub_100241824((uint64_t)KmlFriendSharingManager, *(void **)(a1 + 32), 1);
  v10 = objc_claimAutoreleasedReturnValue(v9);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(void **)(v11 + 80);
  *(_QWORD *)(v11 + 80) = v10;

  v13 = objc_retainBlock(*(id *)(a1 + 56));
  v14 = *(_QWORD *)(a1 + 40);
  v15 = *(void **)(v14 + 104);
  *(_QWORD *)(v14 + 104) = v13;

  sub_10024C28C(*(id **)(*(_QWORD *)(a1 + 40) + 80), *(void **)(a1 + 40));
  sub_100242A28(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 80), *(void **)(a1 + 48));
}

void sub_10023BB64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  id v16;
  void *v17;
  NSString *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  NSErrorUserInfoKey v23;
  void *v24;

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeySharingSession handleRecipientMessage:forInvitationIdentifier:completionHandler:]_block_invoke", 248, CFSTR("invitationIdentifier: %@"), a5, a6, a7, a8, *(_QWORD *)(a1 + 32));
  v9 = sub_100240EE0((uint64_t)KmlFriendSharingManager, *(void **)(a1 + 32), 0);
  v10 = objc_claimAutoreleasedReturnValue(v9);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(void **)(v11 + 80);
  *(_QWORD *)(v11 + 80) = v10;

  if (*(_QWORD *)(*(_QWORD *)(a1 + 40) + 80))
  {
    v13 = objc_retainBlock(*(id *)(a1 + 56));
    v14 = *(_QWORD *)(a1 + 40);
    v15 = *(void **)(v14 + 112);
    *(_QWORD *)(v14 + 112) = v13;

    sub_10024C28C(*(id **)(*(_QWORD *)(a1 + 40) + 80), *(void **)(a1 + 40));
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 80), "handleCrossPlatformSharingMessage:fromMailboxIdentifier:", *(_QWORD *)(a1 + 48), 0);
  }
  else
  {
    v16 = objc_alloc((Class)DAShareRecipientResult);
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
    v23 = NSLocalizedDescriptionKey;
    v18 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(109));
    v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    v24 = v19;
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v24, &v23, 1));
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v17, 109, v20));
    v22 = objc_msgSend(v16, "initFailureResultWithCrdentialIdentifier:error:", 0, v21);

    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }
}

void sub_10023BE4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  id v16;
  void *v17;
  NSString *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  NSErrorUserInfoKey v23;
  void *v24;

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeySharingSession handleInitiatorMessage:forInvitationIdentifier:completionHandler:]_block_invoke", 270, CFSTR("invitationIdentifier: %@"), a5, a6, a7, a8, *(_QWORD *)(a1 + 32));
  v9 = sub_1002600BC((uint64_t)KmlOwnerSharingManager, *(void **)(a1 + 32));
  v10 = objc_claimAutoreleasedReturnValue(v9);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(void **)(v11 + 72);
  *(_QWORD *)(v11 + 72) = v10;

  if (*(_QWORD *)(*(_QWORD *)(a1 + 40) + 80))
  {
    v13 = objc_retainBlock(*(id *)(a1 + 56));
    v14 = *(_QWORD *)(a1 + 40);
    v15 = *(void **)(v14 + 120);
    *(_QWORD *)(v14 + 120) = v13;

    sub_100211058(*(id **)(*(_QWORD *)(a1 + 40) + 72), *(void **)(a1 + 40));
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 72), "handleCrossPlatformSharingMessage:fromMailboxIdentifier:", *(_QWORD *)(a1 + 48), 0);
  }
  else
  {
    v16 = objc_alloc((Class)DAShareInitiatorResult);
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
    v23 = NSLocalizedDescriptionKey;
    v18 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(109));
    v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    v24 = v19;
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v24, &v23, 1));
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v17, 109, v20));
    v22 = objc_msgSend(v16, "initFailureResultWithResponse:error:", 0, v21);

    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }
}

void sub_10023C110(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  NSString *v18;
  void *v19;
  void *v20;
  id v21;
  NSErrorUserInfoKey v22;
  void *v23;

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeySharingSession requestBindingAttestationDataForKeyWithIdentifier:callback:]_block_invoke", 292, CFSTR("Request Binding Attestation Data for key with id: %@"), a5, a6, a7, a8, a1[4]);
  v9 = sub_10024165C((uint64_t)KmlFriendSharingManager, (void *)a1[4]);
  v10 = objc_claimAutoreleasedReturnValue(v9);
  v11 = a1[5];
  v12 = *(void **)(v11 + 80);
  *(_QWORD *)(v11 + 80) = v10;

  v13 = *(void **)(a1[5] + 80);
  if (v13)
  {
    v21 = 0;
    v14 = sub_1002439A8(v13, &v21);
    v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    v16 = v21;
  }
  else
  {
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
    v22 = NSLocalizedDescriptionKey;
    v18 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(210));
    v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    v23 = v19;
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v23, &v22, 1));
    v16 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v17, 210, v20));

    v15 = 0;
  }
  (*(void (**)(void))(a1[6] + 16))();

}

void sub_10023C394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  NSString *v17;
  void *v18;
  void *v19;
  NSErrorUserInfoKey v20;
  void *v21;

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeySharingSession setBindingAttestation:forKeyWithIdentifier:callback:]_block_invoke", 310, CFSTR("Set Binding Attestation Data for key with id: %@"), a5, a6, a7, a8, *(_QWORD *)(a1 + 32));
  v9 = sub_10024165C((uint64_t)KmlFriendSharingManager, *(void **)(a1 + 32));
  v10 = objc_claimAutoreleasedReturnValue(v9);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(void **)(v11 + 80);
  *(_QWORD *)(v11 + 80) = v10;

  v13 = *(void **)(*(_QWORD *)(a1 + 40) + 80);
  if (v13)
  {
    v14 = sub_100243A10(v13, *(void **)(a1 + 48));
    v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
  }
  else
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
    v20 = NSLocalizedDescriptionKey;
    v17 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(210));
    v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
    v21 = v18;
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v21, &v20, 1));
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v16, 210, v19));

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

void sub_10023C5D4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  NSString *v18;
  void *v19;
  void *v20;
  id v21;
  NSErrorUserInfoKey v22;
  void *v23;

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeySharingSession getPreTrackRequestForInvitationWithIdentifier:completionHandler:]_block_invoke", 327, CFSTR("Get pre-track request for invitation with id: %@"), a5, a6, a7, a8, a1[4]);
  v9 = sub_100240EE0((uint64_t)KmlFriendSharingManager, (void *)a1[4], 0);
  v10 = objc_claimAutoreleasedReturnValue(v9);
  v11 = a1[5];
  v12 = *(void **)(v11 + 80);
  *(_QWORD *)(v11 + 80) = v10;

  v13 = *(void **)(a1[5] + 80);
  if (v13)
  {
    v21 = 0;
    v14 = sub_100243BF0(v13, &v21);
    v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    v16 = v21;
  }
  else
  {
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
    v22 = NSLocalizedDescriptionKey;
    v18 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(210));
    v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    v23 = v19;
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v23, &v22, 1));
    v16 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v17, 210, v20));

    v15 = 0;
  }
  (*(void (**)(void))(a1[6] + 16))();

}

void sub_10023C834(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  NSString *v18;
  void *v19;
  void *v20;
  id v21;
  NSErrorUserInfoKey v22;
  void *v23;

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeySharingSession getPreTrackRequestForKeyWithIdentifier:callback:]_block_invoke", 345, CFSTR("Get pre-track request for key with id: %@"), a5, a6, a7, a8, a1[4]);
  v9 = sub_10024165C((uint64_t)KmlFriendSharingManager, (void *)a1[4]);
  v10 = objc_claimAutoreleasedReturnValue(v9);
  v11 = a1[5];
  v12 = *(void **)(v11 + 80);
  *(_QWORD *)(v11 + 80) = v10;

  v13 = *(void **)(a1[5] + 80);
  if (v13)
  {
    v21 = 0;
    v14 = sub_100243BF0(v13, &v21);
    v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    v16 = v21;
  }
  else
  {
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
    v22 = NSLocalizedDescriptionKey;
    v18 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(210));
    v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    v23 = v19;
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v23, &v22, 1));
    v16 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v17, 210, v20));

    v15 = 0;
  }
  (*(void (**)(void))(a1[6] + 16))();

}

void sub_10023CAB8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  void *v21;
  NSString *v22;
  void *v23;
  void *v24;
  id v25;
  NSErrorUserInfoKey v26;
  void *v27;

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeySharingSession ppidRequestForInvitationWithIdentifier:fromMailboxIdentifier:completionHandler:]_block_invoke", 364, CFSTR("Get ppid fetch request for Invitation with id: %@"), a5, a6, a7, a8, a1[4]);
  KmlLogFunc_InternalOnly(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeySharingSession ppidRequestForInvitationWithIdentifier:fromMailboxIdentifier:completionHandler:]_block_invoke", 365, CFSTR("mailboxIdentifier : %@"), v9, v10, v11, v12, a1[5]);
  v13 = sub_100241A7C((uint64_t)KmlFriendSharingManager, (void *)a1[4], (void *)a1[5]);
  v14 = objc_claimAutoreleasedReturnValue(v13);
  v15 = a1[6];
  v16 = *(void **)(v15 + 80);
  *(_QWORD *)(v15 + 80) = v14;

  v17 = *(void **)(a1[6] + 80);
  if (v17)
  {
    v25 = 0;
    v18 = sub_100243C58(v17, &v25);
    v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    v20 = v25;
  }
  else
  {
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
    v26 = NSLocalizedDescriptionKey;
    v22 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(109));
    v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
    v27 = v23;
    v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v27, &v26, 1));
    v20 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v21, 109, v24));

    v19 = 0;
  }
  (*(void (**)(void))(a1[7] + 16))();

}

void sub_10023CD60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  dispatch_queue_t *v13;
  dispatch_queue_t *v14;
  void *v15;
  void *v16;
  NSString *v17;
  void *v18;
  void *v19;
  NSErrorUserInfoKey v20;
  void *v21;

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeySharingSession setProductPlanIdentifier:forInvitationIdentifier:completion:]_block_invoke", 387, CFSTR("invitationIdentifier: %@"), a5, a6, a7, a8, *(_QWORD *)(a1 + 32));
  v9 = sub_100240EE0((uint64_t)KmlFriendSharingManager, *(void **)(a1 + 32), 0);
  v10 = objc_claimAutoreleasedReturnValue(v9);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(void **)(v11 + 80);
  *(_QWORD *)(v11 + 80) = v10;

  v13 = *(dispatch_queue_t **)(*(_QWORD *)(a1 + 40) + 80);
  if (v13)
  {
    v14 = sub_100243CC0(v13, *(void **)(a1 + 48));
    v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
  }
  else
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
    v20 = NSLocalizedDescriptionKey;
    v17 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(109));
    v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
    v21 = v18;
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v21, &v20, 1));
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v16, 109, v19));

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

void sub_10023CFCC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  NSString *v22;
  void *v23;
  void *v24;
  NSErrorUserInfoKey v25;
  void *v26;

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeySharingSession readerInformationForInvitationWithIdentifier:fromMailboxIdentifier:completionHandler:]_block_invoke", 408, CFSTR("Get readerInformation for Invitation with id: %@"), a5, a6, a7, a8, a1[4]);
  KmlLogFunc_InternalOnly(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeySharingSession readerInformationForInvitationWithIdentifier:fromMailboxIdentifier:completionHandler:]_block_invoke", 409, CFSTR("mailboxIdentifier : %@"), v9, v10, v11, v12, a1[5]);
  v13 = sub_100241A7C((uint64_t)KmlFriendSharingManager, (void *)a1[4], (void *)a1[5]);
  v14 = objc_claimAutoreleasedReturnValue(v13);
  v15 = a1[6];
  v16 = *(void **)(v15 + 80);
  *(_QWORD *)(v15 + 80) = v14;

  v17 = *(_QWORD *)(a1[6] + 80);
  if (v17)
  {
    v18 = sub_10024C29C(v17);
    v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    v20 = 0;
  }
  else
  {
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
    v25 = NSLocalizedDescriptionKey;
    v22 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(109));
    v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
    v26 = v23;
    v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v26, &v25, 1));
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v21, 109, v24));

    v19 = 0;
  }
  (*(void (**)(void))(a1[7] + 16))();

}

void sub_10023D264(id *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id *v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  dispatch_queue_t *v11;
  dispatch_queue_t *v12;
  void *v13;
  void (**v14)(id, _QWORD, void *, void *);
  uint64_t v15;
  void *v16;
  void *v17;
  NSString *v18;
  void *v19;
  void *v20;
  id v21;
  _QWORD *v22;
  NSErrorUserInfoKey v23;
  void *v24;

  v2 = objc_msgSend(a1[4], "length");
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeySharingSession retryPasscode:forInvitationIdentifier:completionHandler:]_block_invoke", 431, CFSTR("Retry passcode (length = %d) for Invitation Identifier: %@"), v3, v4, v5, v6, (uint64_t)v2);
  v7 = sub_100240EE0((uint64_t)KmlFriendSharingManager, a1[5], 0);
  v8 = objc_claimAutoreleasedReturnValue(v7);
  v9 = a1[6];
  v10 = (void *)v9[10];
  v9[10] = v8;

  v11 = (dispatch_queue_t *)*((_QWORD *)a1[6] + 10);
  if (!v11)
  {
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
    v23 = NSLocalizedDescriptionKey;
    v18 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(210));
    v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    v24 = v19;
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v24, &v23, 1));
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v17, 210, v20));

    if (v13)
      goto LABEL_3;
LABEL_5:
    sub_10024C28C(*((id **)a1[6] + 10), a1[6]);
    v21 = objc_retainBlock(a1[7]);
    v22 = a1[6];
    v16 = (void *)v22[12];
    v22[12] = v21;
    goto LABEL_6;
  }
  v12 = sub_100243DE8(v11, a1[4]);
  v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  if (!v13)
    goto LABEL_5;
LABEL_3:
  v14 = (void (**)(id, _QWORD, void *, void *))a1[7];
  v15 = sub_10024C2A8(*((_QWORD *)a1[6] + 10));
  v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
  v14[2](v14, 0, v16, v13);
LABEL_6:

}

void sub_10023D528(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  dispatch_queue_t *v11;
  dispatch_queue_t *v12;
  void *v13;
  void *v14;
  NSString *v15;
  void *v16;
  void *v17;
  NSErrorUserInfoKey v18;
  void *v19;

  v2 = objc_msgSend(*(id *)(a1 + 32), "length");
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeySharingSession retryPasscode:forKeyIdentifier:completionHandler:]_block_invoke", 455, CFSTR("Retry passcode (length = %d) for Key ID: %@"), v3, v4, v5, v6, (uint64_t)v2);
  v7 = sub_10024165C((uint64_t)KmlFriendSharingManager, *(void **)(a1 + 40));
  v8 = objc_claimAutoreleasedReturnValue(v7);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(void **)(v9 + 80);
  *(_QWORD *)(v9 + 80) = v8;

  v11 = *(dispatch_queue_t **)(*(_QWORD *)(a1 + 48) + 80);
  if (v11)
  {
    v12 = sub_100243DE8(v11, *(void **)(a1 + 32));
    v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  }
  else
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
    v18 = NSLocalizedDescriptionKey;
    v15 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(210));
    v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    v19 = v16;
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v19, &v18, 1));
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v14, 210, v17));

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

void sub_10023D7FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(void);
  id v5;
  uint64_t v6;
  id v7;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(v2 + 128);
  if (v3)
  {
    v4 = *(void (**)(void))(v3 + 16);
LABEL_5:
    v4();
    return;
  }
  if (*(_QWORD *)(a1 + 48) || (v5 = objc_msgSend(*(id *)(a1 + 40), "count"), v2 = *(_QWORD *)(a1 + 32), !v5))
  {
    v4 = *(void (**)(void))(*(_QWORD *)(v2 + 144) + 16);
    goto LABEL_5;
  }
  v6 = *(_QWORD *)(v2 + 144);
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectAtIndexedSubscript:", 0));
  (*(void (**)(uint64_t, id, _QWORD))(v6 + 16))(v6, v7, *(_QWORD *)(a1 + 48));

}

_QWORD *sub_10023D998(_QWORD *result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result[4] + 128);
  if (v1)
    return (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v1 + 16))(*(_QWORD *)(result[4] + 128), result[5], result[6]);
  return result;
}

_QWORD *sub_10023DA9C(_QWORD *result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result[4] + 88);
  if (v1)
    return (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v1 + 16))(*(_QWORD *)(result[4] + 88), result[5], result[6]);
  return result;
}

uint64_t sub_10023DB7C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 136) + 16))();
}

_QWORD *sub_10023DC98(_QWORD *result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result[4] + 96);
  if (v1)
    return (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v1 + 16))(*(_QWORD *)(result[4] + 96), result[5], result[6], result[7]);
  return result;
}

uint64_t sub_10023DD7C(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 32) + 104);
  if (v1)
    return (*(uint64_t (**)(_QWORD, _QWORD))(v1 + 16))(*(_QWORD *)(*(_QWORD *)(result + 32) + 104), *(_QWORD *)(result + 40));
  return result;
}

uint64_t sub_10023DE5C(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 32) + 112);
  if (v1)
    return (*(uint64_t (**)(_QWORD, _QWORD))(v1 + 16))(*(_QWORD *)(*(_QWORD *)(result + 32) + 112), *(_QWORD *)(result + 40));
  return result;
}

uint64_t sub_10023DF3C(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 32) + 120);
  if (v1)
    return (*(uint64_t (**)(_QWORD, _QWORD))(v1 + 16))(*(_QWORD *)(*(_QWORD *)(result + 32) + 120), *(_QWORD *)(result + 40));
  return result;
}

id sub_10023E06C(uint64_t a1)
{
  objc_opt_self(a1);
  if (qword_100354910 != -1)
    dispatch_once(&qword_100354910, &stru_10030FA00);
  return (id)qword_100354908;
}

void sub_10023E0B0(id a1)
{
  KmlSharingManager *v1;
  void *v2;

  v1 = objc_alloc_init(KmlSharingManager);
  v2 = (void *)qword_100354908;
  qword_100354908 = (uint64_t)v1;

}

id sub_10023E174(id result)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v1 = (uint64_t)result;
    sub_10023E208((uint64_t)result);
    sub_10023E364(v1);
    v2 = +[SESAlarm registerAlarm:handler:](SESAlarm, "registerAlarm:handler:", CFSTR("com.apple.sesd.kml.sharingAuthExpiry"), v1);
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingManager regenerateSharingObjects]", 73, CFSTR("Alarm registered - %u"), v3, v4, v5, v6, v2);
    return +[SESAlarm setAlarm:secondsFromNow:](SESAlarm, "setAlarm:secondsFromNow:", CFSTR("com.apple.sesd.kml.sharingAuthExpiry"), sub_10023E4CC(v1));
  }
  return result;
}

void sub_10023E208(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __CFString *v9;
  os_log_type_t v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  void *i;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];

  if (a1)
  {
    v2 = sub_10023EBC0(a1);
    v3 = objc_claimAutoreleasedReturnValue(v2);
    v8 = (void *)v3;
    if (v3)
    {
      v17 = v3;
      v9 = CFSTR("Failed to get list of endpoints - %@");
      v10 = OS_LOG_TYPE_ERROR;
      v11 = 142;
    }
    else
    {
      if (objc_msgSend(*(id *)(a1 + 8), "count"))
      {
        v20 = 0u;
        v21 = 0u;
        v18 = 0u;
        v19 = 0u;
        v12 = *(id *)(a1 + 8);
        v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
        if (v13)
        {
          v14 = v13;
          v15 = *(_QWORD *)v19;
          do
          {
            for (i = 0; i != v14; i = (char *)i + 1)
            {
              if (*(_QWORD *)v19 != v15)
                objc_enumerationMutation(v12);
              sub_10023EE50(a1, *(void **)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)i));
            }
            v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
          }
          while (v14);
        }

        goto LABEL_14;
      }
      v9 = CFSTR("There are no valid owner endpoints that are in middle of sharing. No-op");
      v10 = OS_LOG_TYPE_INFO;
      v11 = 147;
    }
    KmlLogFunc2(v10, (uint64_t)"-[KmlSharingManager regenerateOwnerSharingObjects]", v11, v9, v4, v5, v6, v7, v17);
LABEL_14:

  }
}

void sub_10023E364(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  id *v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  void *i;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];

  if (a1)
  {
    v2 = sub_10022B5E4((uint64_t)KmlSharingInvitationRecordsUpdater);
    v3 = objc_claimAutoreleasedReturnValue(v2);
    v4 = *(void **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v3;

    v5 = sub_10022BD48(*(id **)(a1 + 16));
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v19;
      do
      {
        for (i = 0; i != v8; i = (char *)i + 1)
        {
          if (*(_QWORD *)v19 != v9)
            objc_enumerationMutation(v6);
          v11 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)i);
          v12 = sub_10022ADE0((uint64_t)v11);
          v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingManager regenerateFriendSharingObjects]", 212, CFSTR("Regenerate friend sharing session with id : %@"), v14, v15, v16, v17, (uint64_t)v13);

          sub_100241CC0((uint64_t)KmlFriendSharingManager, v11);
        }
        v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
      }
      while (v8);
    }

  }
}

double sub_10023E4CC(uint64_t a1)
{
  id v1;
  double v2;
  double v3;

  if (!a1)
    return 0.0;
  v1 = objc_msgSend(objc_alloc((Class)NSUserDefaults), "initWithSuiteName:", CFSTR("com.apple.seserviced"));
  objc_msgSend(v1, "doubleForKey:", CFSTR("AuthExpiryAlarmInitTime"));
  if (v2 < 2.0)
    v2 = 2.0;
  v3 = fmin(v2, 1200.0);

  return v3;
}

void sub_10023E540(uint64_t a1, double a2)
{
  NSObject *v2;
  _QWORD block[5];

  if (a1)
  {
    v2 = *(NSObject **)(a1 + 24);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10023E598;
    block[3] = &unk_100304448;
    *(double *)&block[4] = a2;
    dispatch_async(v2, block);
  }
}

void sub_10023E598(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (+[SESAlarm isAlarmSet:](SESAlarm, "isAlarmSet:", CFSTR("com.apple.sesd.kml.sharingAuthExpiry")))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingManager startAuthExpiryAlarmFor:]_block_invoke", 81, CFSTR("An alarm is already set. So ignore this request"), v10, v11, v12, v13, a9);
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingManager startAuthExpiryAlarmFor:]_block_invoke", 84, CFSTR("Setting alarm for auth expiry"), v10, v11, v12, v13, v14);
    +[SESAlarm setAlarm:secondsFromNow:](SESAlarm, "setAlarm:secondsFromNow:", CFSTR("com.apple.sesd.kml.sharingAuthExpiry"), *(double *)(a1 + 32) + 1.0);
  }
}

id sub_10023E61C(uint64_t a1, void *a2, char a3)
{
  id v5;
  NSObject *v6;
  id v7;
  _QWORD block[4];
  id v10;
  uint64_t *v11;
  char v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  void (*v17)(uint64_t);
  id v18;

  v5 = a2;
  if (a1)
  {
    v13 = 0;
    v14 = &v13;
    v15 = 0x3032000000;
    v16 = sub_10023E72C;
    v17 = sub_10023E73C;
    v18 = 0;
    dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 24));
    v6 = *(NSObject **)(a1 + 24);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10023E744;
    block[3] = &unk_10030FA28;
    v11 = &v13;
    v10 = v5;
    v12 = a3;
    dispatch_sync(v6, block);
    v7 = (id)v14[5];

    _Block_object_dispose(&v13, 8);
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_10023E714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10023E72C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10023E73C(uint64_t a1)
{

}

void sub_10023E744(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = sub_100254A6C((uint64_t)KmlEndpointManager, *(void **)(a1 + 32), *(_BYTE *)(a1 + 48));
  v3 = objc_claimAutoreleasedReturnValue(v2);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

id sub_10023E788(uint64_t a1, char a2, char a3, void *a4)
{
  id v7;
  NSObject *v8;
  id v9;
  _QWORD block[4];
  id v12;
  uint64_t *v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  void (*v20)(uint64_t);
  id v21;

  v7 = a4;
  if (a1)
  {
    v16 = 0;
    v17 = &v16;
    v18 = 0x3032000000;
    v19 = sub_10023E72C;
    v20 = sub_10023E73C;
    v21 = 0;
    dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 24));
    v8 = *(NSObject **)(a1 + 24);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10023E8A8;
    block[3] = &unk_10030FA50;
    v13 = &v16;
    v14 = a2;
    v15 = a3;
    v12 = v7;
    dispatch_sync(v8, block);
    v9 = (id)v17[5];

    _Block_object_dispose(&v16, 8);
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

void sub_10023E890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10023E8A8(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = sub_100254E88((uint64_t)KmlEndpointManager, *(unsigned __int8 *)(a1 + 48), *(unsigned __int8 *)(a1 + 49), *(void **)(a1 + 32));
  v3 = objc_claimAutoreleasedReturnValue(v2);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_10023E94C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFString *v8;
  _BYTE *v10;

  v8 = CFSTR("yes");
  if (!*(_BYTE *)(a1 + 40))
    v8 = CFSTR("no");
  if (*(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 33) == *(unsigned __int8 *)(a1 + 40))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingManager setAppletLockState:]_block_invoke", 121, CFSTR("Sharing block state is still : %@"), a5, a6, a7, a8, (uint64_t)v8);
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingManager setAppletLockState:]_block_invoke", 115, CFSTR("Sharing blocked by applet lock - %@"), a5, a6, a7, a8, (uint64_t)v8);
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 33) = *(_BYTE *)(a1 + 40);
    v10 = *(_BYTE **)(a1 + 32);
    if (!v10[33])
      sub_10023E174(v10);
  }
}

void sub_10023EA60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  +[SESAlarm clearAlarm:](SESAlarm, "clearAlarm:", CFSTR("com.apple.sesd.kml.sharingAuthExpiry"));
  sub_10023EA94(*(_QWORD *)(a1 + 32), v10, v11, v12, v13, v14, v15, v16, a9);
}

void sub_10023EA94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  id v27;
  double v28;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 32) && (v10 = sub_10023EBC0(a1), (v11 = objc_claimAutoreleasedReturnValue(v10)) != 0))
    {
      v27 = (id)v11;
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlSharingManager handleAuthExpiryAlarm]", 319, CFSTR("Failed to get owner endpoints due to : %@"), v12, v13, v14, v15, v11);
    }
    else
    {
      *(_BYTE *)(a1 + 32) = 1;
      if (!objc_msgSend(*(id *)(a1 + 8), "count"))
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingManager handleAuthExpiryAlarm]", 326, CFSTR("We don't have any owner endpoints. No-Op"), v16, v17, v18, v19, a9);
        return;
      }
      v28 = 1.79769313e308;
      v20 = sub_10023F698((id *)a1, &v28);
      v27 = (id)objc_claimAutoreleasedReturnValue(v20);
      if (v27 || (v28 < 1.79769313e308 ? (v25 = v28 <= 2.0) : (v25 = 1), v25))
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingManager handleAuthExpiryAlarm]", 336, CFSTR("We have no invites with expiring auths."), v21, v22, v23, v24, v26);
      else
        +[SESAlarm setAlarm:secondsFromNow:](SESAlarm, "setAlarm:secondsFromNow:", CFSTR("com.apple.sesd.kml.sharingAuthExpiry"), v28 + 1.0);
    }

  }
}

id sub_10023EBC0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  void *i;
  void *v17;
  void *v18;
  void *v19;
  const __CFString *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  id v34;
  _BYTE v35[128];

  if (!a1)
    return 0;
  objc_msgSend(*(id *)(a1 + 8), "removeAllObjects");
  v34 = 0;
  v2 = SESEndPointList(&v34);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = v34;
  if (v4)
  {
    v9 = v4;
    KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlSharingManager getFreshListOfValidShareInitiatorEndpoints]", 165, CFSTR("Error in getting endpoint list: %@"), v5, v6, v7, v8, (uint64_t)v4);
    v10 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "userInfo"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v10, 210, v11));

  }
  else
  {
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v10 = v3;
    v13 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v30, v35, 16);
    if (v13)
    {
      v14 = v13;
      v29 = v3;
      v15 = *(_QWORD *)v31;
      do
      {
        for (i = 0; i != v14; i = (char *)i + 1)
        {
          if (*(_QWORD *)v31 != v15)
            objc_enumerationMutation(v10);
          v17 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * (_QWORD)i);
          v18 = (void *)sub_10021804C((uint64_t)[KmlVersions alloc], v17);
          if (objc_msgSend(v18, "agreedKmlVehicleVersion") == 768
            || (v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "subjectIdentifier")),
                v20 = sub_100254798((uint64_t)KmlEndpointManager, v19),
                v21 = (void *)objc_claimAutoreleasedReturnValue(v20),
                v19,
                LODWORD(v19) = objc_msgSend(v21, "isEqualToString:", CFSTR("OWNR")),
                v21,
                (_DWORD)v19))
          {
            v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "revocationAttestation"));

            if (!v22)
            {
              v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "publicKeyIdentifier"));
              KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingManager getFreshListOfValidShareInitiatorEndpoints]", 184, CFSTR("Found un-revoked shareInitiator endpoint with id : %@"), v24, v25, v26, v27, (uint64_t)v23);

              objc_msgSend(*(id *)(a1 + 8), "addObject:", v17);
            }
          }

        }
        v14 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v30, v35, 16);
      }
      while (v14);
      v12 = 0;
      v3 = v29;
    }
    else
    {
      v12 = 0;
    }
  }

  return v12;
}

void sub_10023EE50(uint64_t a1, void *a2)
{
  id v3;
  KmlSharingRecordsUpdater *v4;
  dispatch_queue_t *v5;
  dispatch_queue_t *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];

  v3 = a2;
  if (a1)
  {
    v4 = sub_10024E878((uint64_t)KmlSharingRecordsUpdater, v3);
    v5 = (dispatch_queue_t *)objc_claimAutoreleasedReturnValue(v4);
    v6 = sub_10024FAF8(v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v22;
      do
      {
        for (i = 0; i != v9; i = (char *)i + 1)
        {
          if (*(_QWORD *)v22 != v10)
            objc_enumerationMutation(v7);
          v12 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)i);
          v13 = sub_10022ADD4((uint64_t)v12);
          v14 = sub_10021728C((uint64_t)v12);
          v15 = objc_claimAutoreleasedReturnValue(v14);
          v20 = (void *)v15;
          if (v13 == 4)
          {
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingManager regenerateOwnerSharingManagersForEndpoint:]", 198, CFSTR("%@ is record of successful sharing. Leave it alone."), v16, v17, v18, v19, v15);

          }
          else
          {
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingManager regenerateOwnerSharingManagersForEndpoint:]", 200, CFSTR("Regenerate owner sharing session with id : %@"), v16, v17, v18, v19, v15);

            sub_100260308((uint64_t)KmlOwnerSharingManager, v3, v12, v5);
          }
        }
        v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
      }
      while (v9);
    }

  }
}

id **sub_10023EFFC(id **a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id **v8;
  id v9;
  uint64_t v10;
  id *v11;
  id *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  void *i;
  uint64_t v19;
  id v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  unint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v31;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[128];

  v8 = a1;
  if (a1)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingManager listReceivedSharingInvitationsWithError:]", 220, &stru_100316BD0, a5, a6, a7, a8, v31);
    v9 = sub_10022B5E4((uint64_t)KmlSharingInvitationRecordsUpdater);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    v11 = v8[2];
    v8[2] = (id *)v10;

    v12 = sub_10022BD48(v8[2]);
    v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    v8 = (id **)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    v33 = 0u;
    v34 = 0u;
    v35 = 0u;
    v36 = 0u;
    v14 = v13;
    v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v33, v37, 16);
    if (v15)
    {
      v16 = v15;
      v17 = *(_QWORD *)v34;
      do
      {
        for (i = 0; i != v16; i = (char *)i + 1)
        {
          if (*(_QWORD *)v34 != v17)
            objc_enumerationMutation(v14);
          v19 = *(_QWORD *)(*((_QWORD *)&v33 + 1) + 8 * (_QWORD)i);
          if (sub_10022ADC8(v19) <= 5)
          {
            v20 = objc_alloc((Class)DAKeySharingInvitationData);
            v21 = sub_1000117DC(v19);
            v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
            v23 = sub_10022ADE0(v19);
            v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
            v25 = sub_10022ADD4(v19);
            v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
            v27 = sub_10022ADC8(v19) - 1;
            if (v27 > 5)
              v28 = 8;
            else
              v28 = qword_10028E350[v27];
            v29 = objc_msgSend(v20, "initWithSessionUUID:invitationIdentifier:friendKeyIdentifier:sharingTarget:state:vehicleEnteredPasscode:", v22, v24, v26, 1, v28, 0);

            objc_msgSend(v8, "addObject:", v29);
          }
        }
        v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v33, v37, 16);
      }
      while (v16);
    }

    if (a2)
      *a2 = 0;

  }
  return v8;
}

uint64_t sub_10023F21C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  NSObject *v9;
  uint64_t v11;
  _QWORD block[5];

  if (a1)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingManager cancelAllFriendInvitations]", 249, &stru_100316BD0, a5, a6, a7, a8, v11);
    v9 = *(NSObject **)(a1 + 24);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10023F2A0;
    block[3] = &unk_100302AA0;
    block[4] = a1;
    dispatch_async(v9, block);
  }
  return 0;
}

void sub_10023F2A0(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];

  v2 = sub_10022B5E4((uint64_t)KmlSharingInvitationRecordsUpdater);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(v4 + 16);
  *(_QWORD *)(v4 + 16) = v3;

  v6 = sub_10022BD48(*(id **)(*(_QWORD *)(a1 + 32) + 16));
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v24;
    do
    {
      for (i = 0; i != v9; i = (char *)i + 1)
      {
        if (*(_QWORD *)v24 != v10)
          objc_enumerationMutation(v7);
        v12 = *(_QWORD *)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)i);
        v13 = sub_10022ADD4(v12);
        v14 = (void *)objc_claimAutoreleasedReturnValue(v13);

        v15 = sub_10022ADE0(v12);
        if (v14)
        {
          v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingManager cancelAllFriendInvitations]_block_invoke", 261, CFSTR("Invitation (%@) can not be cancelled at this stage"), v17, v18, v19, v20, (uint64_t)v16);
        }
        else
        {
          v21 = (void *)objc_claimAutoreleasedReturnValue(v15);
          v22 = sub_100240EE0((uint64_t)KmlFriendSharingManager, v21, 1);
          v16 = (void *)objc_claimAutoreleasedReturnValue(v22);

          sub_100243270((uint64_t)v16);
        }

      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
    }
    while (v9);
  }

}

uint64_t sub_10023F454(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  _QWORD block[5];
  id v12;

  v3 = a2;
  v8 = v3;
  if (a1)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingManager removeSharingInvitationId:]", 271, CFSTR("Sharing invitation id : %@"), v4, v5, v6, v7, (uint64_t)v3);
    if (v8)
    {
      v9 = *(NSObject **)(a1 + 24);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10023F508;
      block[3] = &unk_100304370;
      block[4] = a1;
      v12 = v8;
      dispatch_async(v9, block);

    }
  }

  return 0;
}

void sub_10023F508(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id *v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  unsigned int v15;
  uint64_t v16;
  void *v17;
  id *v18;
  void *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];

  v2 = sub_10022B5E4((uint64_t)KmlSharingInvitationRecordsUpdater);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(v4 + 16);
  *(_QWORD *)(v4 + 16) = v3;

  v6 = sub_10022BD48(*(id **)(*(_QWORD *)(a1 + 32) + 16));
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v7 = (id)objc_claimAutoreleasedReturnValue(v6);
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v21;
    while (2)
    {
      for (i = 0; i != v9; i = (char *)i + 1)
      {
        if (*(_QWORD *)v21 != v10)
          objc_enumerationMutation(v7);
        v12 = *(_QWORD *)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)i);
        v13 = sub_10022ADE0(v12);
        v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
        v15 = objc_msgSend(v14, "isEqualToString:", *(_QWORD *)(a1 + 40), (_QWORD)v20);

        if (v15)
        {
          v16 = sub_10022ADE0(v12);
          v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
          v18 = sub_100240EE0((uint64_t)KmlFriendSharingManager, v17, 1);
          v19 = (void *)objc_claimAutoreleasedReturnValue(v18);

          sub_100243648((uint64_t)v19);
          goto LABEL_11;
        }
      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
      if (v9)
        continue;
      break;
    }
  }
LABEL_11:

}

id *sub_10023F698(id *a1, double *a2)
{
  id *v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  double v11;
  uint64_t v12;
  KmlSharingRecordsUpdater *v13;
  dispatch_queue_t *v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  void *v42;
  double v43;
  double v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  void *v48;
  uint64_t v50;
  id obj;
  uint64_t v53;
  id v54;
  dispatch_queue_t *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  id v59;
  id v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  id v73;
  _BYTE v74[128];
  _BYTE v75[128];
  _BYTE v76[128];

  v2 = a1;
  if (!a1)
    return v2;
  v73 = 0;
  v3 = SESEndPointListAuthorizations(&v73);
  v57 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v4 = v73;
  if (v4)
  {
    v9 = v4;
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingManager reconcileInvitationsAndAuths:]", 348, CFSTR("Error in getting saved authorizations : %@"), v5, v6, v7, v8, (uint64_t)v4);
    v10 = v9;
    goto LABEL_40;
  }
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  obj = v2[1];
  v54 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v69, v76, 16);
  if (!v54)
  {
    v11 = 1.79769313e308;
    goto LABEL_39;
  }
  v11 = 1.79769313e308;
  v53 = *(_QWORD *)v70;
  do
  {
    v12 = 0;
    do
    {
      if (*(_QWORD *)v70 != v53)
        objc_enumerationMutation(obj);
      v56 = v12;
      v13 = sub_10024E878((uint64_t)KmlSharingRecordsUpdater, *(void **)(*((_QWORD *)&v69 + 1) + 8 * v12));
      v55 = (dispatch_queue_t *)objc_claimAutoreleasedReturnValue(v13);
      v14 = sub_10024FAF8(v55);
      v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
      v65 = 0u;
      v66 = 0u;
      v67 = 0u;
      v68 = 0u;
      v60 = v15;
      v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v65, v75, 16);
      if (v16)
      {
        v17 = v16;
        v18 = *(_QWORD *)v66;
        v58 = *(_QWORD *)v66;
        do
        {
          v19 = 0;
          v59 = v17;
          do
          {
            if (*(_QWORD *)v66 != v18)
              objc_enumerationMutation(v60);
            v20 = *(_QWORD *)(*((_QWORD *)&v65 + 1) + 8 * (_QWORD)v19);
            if (sub_10022ADD4(v20) == 3)
            {
              v21 = sub_10021728C(v20);
              v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
              KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingManager reconcileInvitationsAndAuths:]", 360, CFSTR("Found in-progress sharing session with ID : %@"), v23, v24, v25, v26, (uint64_t)v22);

              v63 = 0u;
              v64 = 0u;
              v61 = 0u;
              v62 = 0u;
              v27 = v57;
              v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v61, v74, 16);
              if (v28)
              {
                v29 = v28;
                v30 = *(_QWORD *)v62;
LABEL_17:
                v31 = 0;
                while (1)
                {
                  if (*(_QWORD *)v62 != v30)
                    objc_enumerationMutation(v27);
                  v32 = *(void **)(*((_QWORD *)&v61 + 1) + 8 * v31);
                  v33 = sub_10022ADBC(v20);
                  v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
                  v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "authorizationID"));
                  v36 = objc_msgSend(v34, "isEqualToData:", v35);

                  if ((v36 & 1) != 0)
                    break;
                  if (v29 == (id)++v31)
                  {
                    v29 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v61, v74, 16);
                    if (v29)
                      goto LABEL_17;
                    goto LABEL_23;
                  }
                }
                v41 = v32;

                if (!v41)
                  goto LABEL_30;
                v17 = v59;
                if (objc_msgSend(v41, "state") == 1)
                {
                  v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v41, "remainingTime"));
                  objc_msgSend(v42, "doubleValue");
                  v44 = v43;

                  if (v11 >= v44)
                    v11 = v44;
                }
                if (v11 >= 2.0)
                  goto LABEL_32;
              }
              else
              {
LABEL_23:

                v41 = 0;
LABEL_30:
                v17 = v59;
              }
              KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingManager reconcileInvitationsAndAuths:]", 374, CFSTR("Auth for this sharing session is expired."), v37, v38, v39, v40, v50);
              v45 = sub_1000117DC(v20);
              v46 = (void *)objc_claimAutoreleasedReturnValue(v45);
              v47 = sub_10021728C(v20);
              v48 = (void *)objc_claimAutoreleasedReturnValue(v47);
              sub_100260DF0((uint64_t)KmlOwnerSharingManager, v46, v48);

LABEL_32:
              v18 = v58;
            }
            v19 = (char *)v19 + 1;
          }
          while (v19 != v17);
          v17 = objc_msgSend(v60, "countByEnumeratingWithState:objects:count:", &v65, v75, 16);
        }
        while (v17);
      }

      v12 = v56 + 1;
    }
    while ((id)(v56 + 1) != v54);
    v54 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v69, v76, 16);
  }
  while (v54);
LABEL_39:

  v9 = 0;
  *a2 = v11;
LABEL_40:

  v2 = (id *)v9;
  return v2;
}

KmlPowerAssertion *sub_10023FB04(uint64_t a1, void *a2)
{
  id v3;
  KmlPowerAssertion *v4;

  v3 = a2;
  objc_opt_self(a1);
  v4 = objc_alloc_init(KmlPowerAssertion);
  sub_10023FB50((uint64_t)v4, v3);

  return v4;
}

void sub_10023FB50(uint64_t a1, void *a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  __CFString *v11;
  uint64_t v12;
  void *v13;
  id v14;

  v4 = a2;
  if (a1)
  {
    v14 = v4;
    KmlLogFunc2(OS_LOG_TYPE_DEBUG, (uint64_t)"-[KmlPowerAssertion _holdPowerAssertion:]", 50, CFSTR("holding assertion: %@"), v5, v6, v7, v8, (uint64_t)v4);
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSProcessInfo processInfo](NSProcessInfo, "processInfo"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "processName"));
    v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@[%@]"), v10, v14));

    *(_DWORD *)(a1 + 8) = 0;
    if (IOPMAssertionCreateWithName(CFSTR("PreventUserIdleSystemSleep"), 0xFFu, v11, (IOPMAssertionID *)(a1 + 8)))
      *(_DWORD *)(a1 + 8) = 0;
    v12 = os_transaction_create("com.apple.sesd.kml.powerassertion");
    v13 = *(void **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v12;

    objc_storeStrong((id *)(a1 + 32), a2);
    v4 = v14;
  }

}

void sub_10023FCDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  IOPMAssertionID v9;
  void *v10;
  void *v11;

  if (a1)
  {
    KmlLogFunc2(OS_LOG_TYPE_DEBUG, (uint64_t)"-[KmlPowerAssertion _releasePowerAssertion]", 69, CFSTR("releasing assertion: %@"), a5, a6, a7, a8, *(_QWORD *)(a1 + 32));
    v9 = *(_DWORD *)(a1 + 8);
    if (v9)
    {
      IOPMAssertionRelease(v9);
      *(_DWORD *)(a1 + 8) = 0;
    }
    v10 = *(void **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;

    v11 = *(void **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;

  }
}

_QWORD *sub_10023FD8C(_QWORD *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  _QWORD v16[4];
  id v17;
  id v18;
  id location;
  objc_super v20;
  uint64_t v21;

  v3 = a2;
  if (a1)
  {
    v20.receiver = a1;
    v20.super_class = (Class)KmlClientAppStateObserver;
    v4 = objc_msgSendSuper2(&v20, "init");
    a1 = v4;
    if (v4)
    {
      objc_storeWeak((id *)v4 + 5, v3);
      v5 = objc_alloc_init((Class)NSMutableSet);
      v6 = (void *)a1[2];
      a1[2] = v5;

      v7 = objc_alloc_init((Class)NSMutableArray);
      v8 = (void *)a1[3];
      a1[3] = v7;

      v9 = objc_claimAutoreleasedReturnValue(+[RBSProcessMonitor monitor](RBSProcessMonitor, "monitor"));
      v10 = (void *)a1[1];
      a1[1] = v9;

      v11 = (void *)objc_claimAutoreleasedReturnValue(+[RBSProcessStateDescriptor descriptor](RBSProcessStateDescriptor, "descriptor"));
      objc_msgSend(v11, "setValues:", 1);
      v21 = FBSSceneVisibilityEndowmentNamespace;
      v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v21, 1));
      objc_msgSend(v11, "setEndowmentNamespaces:", v12);

      objc_initWeak(&location, a1);
      v13 = (void *)a1[1];
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      v16[2] = sub_10023FF80;
      v16[3] = &unk_10030FAA0;
      v14 = v11;
      v17 = v14;
      objc_copyWeak(&v18, &location);
      objc_msgSend(v13, "updateConfiguration:", v16);
      objc_destroyWeak(&v18);

      objc_destroyWeak(&location);
    }
  }

  return a1;
}

void sub_10023FF5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10023FF80(uint64_t a1, void *a2)
{
  id v3;
  _QWORD v4[4];
  id v5;

  v3 = a2;
  objc_msgSend(v3, "setStateDescriptor:", *(_QWORD *)(a1 + 32));
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100240028;
  v4[3] = &unk_10030FA78;
  objc_copyWeak(&v5, (id *)(a1 + 40));
  objc_msgSend(v3, "setUpdateHandler:", v4);
  objc_destroyWeak(&v5);

}

void sub_100240014(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100240028(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id WeakRetained;
  void *v8;
  id v9;

  v9 = a3;
  v6 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v8 = WeakRetained;
  if (WeakRetained)
    sub_10024008C((uint64_t)WeakRetained, v9, v6);

}

void sub_10024008C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  unsigned int v6;
  unsigned int v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  void *i;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  id *v18;
  void *j;
  void *v20;
  id WeakRetained;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  unsigned int v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;
  uint64_t v37;
  void *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[128];
  _BYTE v48[128];

  v36 = a2;
  v5 = a3;
  if (a1)
  {
    v6 = objc_msgSend(v36, "pid");
    v35 = v5;
    v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "state"));
    v7 = objc_msgSend(v38, "taskState");
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    v9 = *(id *)(a1 + 16);
    objc_sync_enter(v9);
    v43 = 0u;
    v44 = 0u;
    v45 = 0u;
    v46 = 0u;
    v10 = *(id *)(a1 + 16);
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v43, v48, 16);
    if (v11)
    {
      v12 = *(_QWORD *)v44;
      do
      {
        for (i = 0; i != v11; i = (char *)i + 1)
        {
          if (*(_QWORD *)v44 != v12)
            objc_enumerationMutation(v10);
          v14 = *(void **)(*((_QWORD *)&v43 + 1) + 8 * (_QWORD)i);
          if (objc_msgSend(v14, "processIdentifier") == v6)
            objc_msgSend(v8, "addObject:", v14);
        }
        v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v43, v48, 16);
      }
      while (v11);
    }

    objc_sync_exit(v9);
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v15 = v8;
    v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v39, v47, 16);
    if (v16)
    {
      v17 = *(_QWORD *)v40;
      v18 = (id *)(a1 + 40);
      v37 = FBSSceneVisibilityEndowmentNamespace;
      do
      {
        for (j = 0; j != v16; j = (char *)j + 1)
        {
          if (*(_QWORD *)v40 != v17)
            objc_enumerationMutation(v15);
          v20 = *(void **)(*((_QWORD *)&v39 + 1) + 8 * (_QWORD)j);
          WeakRetained = objc_loadWeakRetained(v18);

          if (WeakRetained)
          {
            if (v7 == 4)
            {
              v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "endowmentNamespaces"));
              v29 = objc_msgSend(v28, "containsObject:", v37);

              v30 = objc_msgSend(v20, "processIdentifier");
              if (v29)
              {
                KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlClientAppStateObserver _applicationStateChanged:stateUpdate:]", 205, CFSTR("_applicationStateChanged: clientAppIsForeGrounded - pid=%d"), v31, v32, v33, v34, (uint64_t)v30);
                v27 = objc_loadWeakRetained(v18);
                objc_msgSend(v27, "clientAppIsForeGrounded:", v20);
              }
              else
              {
                KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlClientAppStateObserver _applicationStateChanged:stateUpdate:]", 208, CFSTR("_applicationStateChanged: clientAppIsBackGrounded - pid=%d"), v31, v32, v33, v34, (uint64_t)v30);
                v27 = objc_loadWeakRetained(v18);
                objc_msgSend(v27, "clientAppIsBackGrounded:", v20);
              }
            }
            else
            {
              if (v7 != 3)
                continue;
              v22 = objc_msgSend(v20, "processIdentifier");
              KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlClientAppStateObserver _applicationStateChanged:stateUpdate:]", 196, CFSTR("_applicationStateChanged: clientAppIsSuspended - pid=%d"), v23, v24, v25, v26, (uint64_t)v22);
              v27 = objc_loadWeakRetained(v18);
              objc_msgSend(v27, "clientAppIsSuspended:", v20);
            }

          }
        }
        v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v39, v47, 16);
      }
      while (v16);
    }

    v5 = v35;
  }

}

void sub_1002403C4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100240430(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[5];
  _OWORD buffer[16];

  v3 = a2;
  v8 = v3;
  if (a1)
  {
    if (v3)
    {
      memset(buffer, 0, 255);
      proc_name((int)objc_msgSend(v3, "processIdentifier"), buffer, 0xFEu);
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlClientAppStateObserver registerForStateChangesToConnection:]", 81, CFSTR("Register for Client: %s"), v9, v10, v11, v12, (uint64_t)buffer);
      v13 = *(id *)(a1 + 16);
      objc_sync_enter(v13);
      if (objc_msgSend(*(id *)(a1 + 16), "containsObject:", v8))
      {
        objc_msgSend(v8, "processIdentifier");
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlClientAppStateObserver registerForStateChangesToConnection:]", 86, CFSTR("Duplicated register for theConnection: %@ - processIdentifier: %d"), v14, v15, v16, v17, (uint64_t)v8);
      }
      else if (objc_msgSend(v8, "processIdentifier"))
      {
        v18 = objc_msgSend(v8, "processIdentifier");
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlClientAppStateObserver registerForStateChangesToConnection:]", 94, CFSTR("Register for processIdentifier: %d"), v19, v20, v21, v22, (uint64_t)v18);
        v23 = *(void **)(a1 + 24);
        v24 = (void *)objc_claimAutoreleasedReturnValue(+[RBSProcessIdentifier identifierWithPid:](RBSProcessIdentifier, "identifierWithPid:", objc_msgSend(v8, "processIdentifier")));
        v25 = (void *)objc_claimAutoreleasedReturnValue(+[RBSProcessPredicate predicateMatchingIdentifier:](RBSProcessPredicate, "predicateMatchingIdentifier:", v24));
        objc_msgSend(v23, "addObject:", v25);

        v26 = *(void **)(a1 + 8);
        v36[0] = _NSConcreteStackBlock;
        v36[1] = 3221225472;
        v36[2] = sub_1002406CC;
        v36[3] = &unk_100305118;
        v36[4] = a1;
        objc_msgSend(v26, "updateConfiguration:", v36);
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlClientAppStateObserver registerForStateChangesToConnection:]", 101, CFSTR("After register: _predicates: %@"), v27, v28, v29, v30, *(_QWORD *)(a1 + 24));
        objc_msgSend(*(id *)(a1 + 16), "addObject:", v8);
      }
      else
      {
        v31 = objc_msgSend(v8, "processIdentifier");
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlClientAppStateObserver registerForStateChangesToConnection:]", 90, CFSTR("Could not register: theConnection.processIdentifier: %d"), v32, v33, v34, v35, (uint64_t)v31);
      }
      objc_sync_exit(v13);

    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlClientAppStateObserver registerForStateChangesToConnection:]", 75, CFSTR("Could not register: theConnection: %@"), v4, v5, v6, v7, 0);
    }
  }

}

void sub_1002406B0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

id sub_1002406CC(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "setPredicates:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24));
}

void sub_1002406DC(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  _QWORD v33[5];

  v3 = a2;
  if (a1)
  {
    v32 = v3;
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlClientAppStateObserver unregisterForStateChangesToConnection:]", 108, &stru_100316BD0, v4, v5, v6, v7, v31);
    if (v32)
    {
      v12 = *(id *)(a1 + 16);
      objc_sync_enter(v12);
      if ((objc_msgSend(*(id *)(a1 + 16), "containsObject:", v32) & 1) != 0)
      {
        v13 = objc_msgSend(v32, "processIdentifier");
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlClientAppStateObserver unregisterForStateChangesToConnection:]", 119, CFSTR("Unregister for processIdentifier: %d"), v14, v15, v16, v17, (uint64_t)v13);
        v18 = *(void **)(a1 + 24);
        v19 = (void *)objc_claimAutoreleasedReturnValue(+[RBSProcessIdentifier identifierWithPid:](RBSProcessIdentifier, "identifierWithPid:", objc_msgSend(v32, "processIdentifier")));
        v20 = (void *)objc_claimAutoreleasedReturnValue(+[RBSProcessPredicate predicateMatchingIdentifier:](RBSProcessPredicate, "predicateMatchingIdentifier:", v19));
        objc_msgSend(v18, "removeObject:", v20);

        v21 = *(void **)(a1 + 8);
        v33[0] = _NSConcreteStackBlock;
        v33[1] = 3221225472;
        v33[2] = sub_1002408C0;
        v33[3] = &unk_100305118;
        v33[4] = a1;
        objc_msgSend(v21, "updateConfiguration:", v33);
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlClientAppStateObserver unregisterForStateChangesToConnection:]", 124, CFSTR("After unregister: _predicates: %@"), v22, v23, v24, v25, *(_QWORD *)(a1 + 24));
        objc_msgSend(*(id *)(a1 + 16), "removeObject:", v32);
      }
      else
      {
        v26 = objc_msgSend(v32, "processIdentifier");
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlClientAppStateObserver unregisterForStateChangesToConnection:]", 116, CFSTR("Could not unregister: processIdentifier has not been registered: %d"), v27, v28, v29, v30, (uint64_t)v26);
      }
      objc_sync_exit(v12);

    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlClientAppStateObserver unregisterForStateChangesToConnection:]", 110, CFSTR("Could not unregister: theConnection: %@"), v8, v9, v10, v11, 0);
    }
    v3 = v32;
  }

}

void sub_1002408AC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1002408C0(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "setPredicates:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24));
}

BOOL sub_1002408D0(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  _BOOL8 v23;
  uint64_t v25;
  id v26;

  v3 = a2;
  v8 = v3;
  if (!a1)
    goto LABEL_7;
  if (!v3)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlClientAppStateObserver isClientSuspended:]", 132, CFSTR("Cannot check isClientSuspended: theConnection is nil"), v4, v5, v6, v7, v25);
LABEL_7:
    v23 = 0;
    goto LABEL_10;
  }
  v9 = *(id *)(a1 + 16);
  objc_sync_enter(v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(v8, "processIdentifier")));
  v26 = 0;
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[RBSProcessHandle handleForIdentifier:error:](RBSProcessHandle, "handleForIdentifier:error:", v10, &v26));
  v12 = v26;

  if (!v11 || v12)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlClientAppStateObserver isClientSuspended:]", 139, CFSTR("Error in getting handle: %@"), v13, v14, v15, v16, (uint64_t)v12);
    v23 = 0;
  }
  else
  {
    v17 = objc_msgSend(v8, "processIdentifier");
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlClientAppStateObserver isClientSuspended:]", 142, CFSTR("isClientSuspended check for pid: %d"), v18, v19, v20, v21, (uint64_t)v17);
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "currentState"));
    v23 = objc_msgSend(v22, "taskState") == 3;

  }
  objc_sync_exit(v9);

LABEL_10:
  return v23;
}

void sub_100240A34(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100240A48(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  unsigned int v24;
  void *v25;
  unsigned int v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  id v35;

  v3 = a2;
  v8 = v3;
  if (a1)
  {
    if (v3)
    {
      v9 = *(id *)(a1 + 16);
      objc_sync_enter(v9);
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(v8, "processIdentifier")));
      v35 = 0;
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[RBSProcessHandle handleForIdentifier:error:](RBSProcessHandle, "handleForIdentifier:error:", v10, &v35));
      v12 = v35;

      if (!v11 || v12)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlClientAppStateObserver isClientBackground:]", 157, CFSTR("Error in getting handle: %@"), v13, v14, v15, v16, (uint64_t)v12);
        v32 = 4279897;
      }
      else
      {
        v17 = objc_msgSend(v8, "processIdentifier");
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlClientAppStateObserver isClientBackground:]", 161, CFSTR("isClientBackground check for pid: %d"), v18, v19, v20, v21, (uint64_t)v17);
        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "currentState"));
        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "currentState"));
        v24 = objc_msgSend(v23, "taskState");

        if (v24 == 4)
        {
          v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "endowmentNamespaces"));
          v26 = objc_msgSend(v25, "containsObject:", FBSSceneVisibilityEndowmentNamespace);

          v27 = objc_msgSend(v8, "processIdentifier");
          if (v26)
          {
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlClientAppStateObserver isClientBackground:]", 167, CFSTR("pid: %d is in foreground"), v28, v29, v30, v31, (uint64_t)v27);
            v32 = 0;
          }
          else
          {
            v32 = 1;
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlClientAppStateObserver isClientBackground:]", 170, CFSTR("pid: %d is backgrounded"), v28, v29, v30, v31, (uint64_t)v27);
          }
        }
        else
        {
          v32 = 4279897;
        }

      }
      objc_sync_exit(v9);

    }
    else
    {
      v32 = 4279897;
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlClientAppStateObserver isClientBackground:]", 150, CFSTR("Cannot check isClientBackground: theConnection is nil"), v4, v5, v6, v7, v34);
    }
  }
  else
  {
    v32 = 0;
  }

  return v32;
}

void sub_100240C70(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100240CD4(uint64_t a1)
{
  objc_opt_self(a1);
  if (qword_100354920 != -1)
    dispatch_once(&qword_100354920, &stru_10030FAC0);
}

void sub_100240D10(id a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t vars0;

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlFriendSharingManager initFsManagerArray]_block_invoke", 130, CFSTR("FriendSharingManager: initializing fsManagerArray"), v1, v2, v3, v4, vars0);
  v5 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v6 = (void *)qword_100354918;
  qword_100354918 = v5;

}

void sub_100240D58(uint64_t a1)
{
  void *v1;
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  objc_opt_self(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableIndexSet indexSet](NSMutableIndexSet, "indexSet"));
  v2 = (id)qword_100354918;
  objc_sync_enter(v2);
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v3 = (id)qword_100354918;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v4)
  {
    v5 = 0;
    v6 = *(_QWORD *)v10;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v10 != v6)
          objc_enumerationMutation(v3);
        v8 = *(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)v7);
        if (v8 && *(_QWORD *)(v8 + 8) == 52)
          objc_msgSend(v1, "addIndex:", (char *)v7 + v5, (_QWORD)v9);
        v7 = (char *)v7 + 1;
      }
      while (v4 != v7);
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      v5 += (uint64_t)v7;
    }
    while (v4);
  }

  objc_msgSend((id)qword_100354918, "removeObjectsAtIndexes:", v1);
  objc_sync_exit(v2);

}

void sub_100240EB8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id *sub_100240EE0(uint64_t a1, void *a2, int a3)
{
  id v4;
  id v5;
  id v6;
  id *v7;
  uint64_t v8;
  id *v9;
  _QWORD *v10;
  void *v11;
  id v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];

  v4 = a2;
  objc_opt_self(a1);
  sub_100240CD4((uint64_t)KmlFriendSharingManager);
  sub_100240D58((uint64_t)KmlFriendSharingManager);
  v5 = (id)qword_100354918;
  objc_sync_enter(v5);
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v6 = (id)qword_100354918;
  v7 = (id *)objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
  if (v7)
  {
    v8 = *(_QWORD *)v26;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v26 != v8)
          objc_enumerationMutation(v6);
        if (v4)
        {
          v10 = *(_QWORD **)(*((_QWORD *)&v25 + 1) + 8 * (_QWORD)v9);
          v11 = v10 ? (void *)v10[41] : 0;
          v12 = v11;
          v13 = objc_msgSend(v12, "isEqualToString:", v4);

          if (v13)
          {
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlFriendSharingManager getFriendSharingManagerForInvitationIdentifier:createIfNil:]", 162, CFSTR("FriendSharingManager: found manager to handle invitationId:%@"), v14, v15, v16, v17, (uint64_t)v4);
            v7 = v10;
            goto LABEL_16;
          }
        }
        v9 = (id *)((char *)v9 + 1);
      }
      while (v7 != v9);
      v18 = (id *)objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
      v7 = v18;
    }
    while (v18);
  }
LABEL_16:

  if (!v7)
  {
    if (a3)
    {
      v7 = sub_100241108((id *)[KmlFriendSharingManager alloc], v4, 0);
      if (v7)
      {
        objc_msgSend((id)qword_100354918, "addObject:", v7);
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlFriendSharingManager getFriendSharingManagerForInvitationIdentifier:createIfNil:]", 172, CFSTR("FriendSharingManager: created new manager to handle invitationId:%@"), v19, v20, v21, v22, (uint64_t)v4);
      }
    }
  }
  objc_sync_exit(v5);

  return v7;
}

void sub_1002410E0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id *sub_100241108(id *a1, void *a2, void *a3)
{
  id v6;
  id v7;
  id *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  NSObject *v15;
  NSObject *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  id v23;
  KmlSharingInvitationRecord *v24;
  id v25;
  uint64_t v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  objc_super v33;

  v6 = a2;
  v7 = a3;
  if (a1)
  {
    v33.receiver = a1;
    v33.super_class = (Class)KmlFriendSharingManager;
    v8 = (id *)objc_msgSendSuper2(&v33, "init");
    a1 = v8;
    if (v8)
    {
      v9 = objc_msgSend(objc_retainAutorelease(v8[41]), "UTF8String");
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 327, (uint64_t)v9, CFSTR("FriendSharingManager: let's init"), v10, v11, v12, (uint64_t)v33.receiver);
      *(int64x2_t *)(a1 + 1) = vdupq_n_s64(2uLL);
      a1[3] = (id)2;
      objc_storeStrong(a1 + 41, a2);
      objc_storeStrong(a1 + 43, a3);
      *((_WORD *)a1 + 116) = 0;
      v13 = a1[41];
      v14 = KmlSignpostLogger();
      v15 = objc_claimAutoreleasedReturnValue(v14);
      v16 = v15;
      v17 = 41;
      if (!v13)
        v17 = 43;
      a1[32] = (id)os_signpost_id_make_with_pointer(v15, a1[v17]);

      v18 = sub_1002422AC((uint64_t)KmlFriendSharingManager);
      v19 = objc_claimAutoreleasedReturnValue(v18);
      v20 = a1[35];
      a1[35] = (id)v19;

      v21 = sub_1002342C4((uint64_t)KmlSharingTransport);
      v22 = objc_claimAutoreleasedReturnValue(v21);
      v23 = a1[30];
      a1[30] = (id)v22;

      v24 = objc_alloc_init(KmlSharingInvitationRecord);
      v25 = a1[31];
      a1[31] = v24;

      a1[36] = 0;
      a1[37] = 0;
      v26 = sub_10021804C((uint64_t)[KmlVersions alloc], 0);
      v27 = a1[27];
      a1[27] = (id)v26;

      v28 = objc_msgSend(objc_retainAutorelease(a1[41]), "UTF8String");
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 355, (uint64_t)v28, CFSTR("FriendSharingManager:  ready to roll"), v29, v30, v31, (uint64_t)v33.receiver);
    }
  }

  return a1;
}

id *sub_1002412BC(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  void *v10;
  id v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];

  v3 = a2;
  objc_opt_self(a1);
  sub_100240CD4((uint64_t)KmlFriendSharingManager);
  sub_100240D58((uint64_t)KmlFriendSharingManager);
  v4 = (id)qword_100354918;
  objc_sync_enter(v4);
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v5 = (id)qword_100354918;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v25;
    while (2)
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v25 != v7)
          objc_enumerationMutation(v5);
        if (v3)
        {
          v9 = *(_QWORD **)(*((_QWORD *)&v24 + 1) + 8 * (_QWORD)v8);
          v10 = v9 ? (void *)v9[44] : 0;
          v11 = v10;
          v12 = objc_msgSend(v11, "isEqual:", v3);

          if (v12)
          {
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlFriendSharingManager getFriendSharingManagerForUuid:]", 191, CFSTR("FriendSharingManager: found manager to handle UUID:%@"), v13, v14, v15, v16, (uint64_t)v3);
            v18 = v9;

            if (v9)
              goto LABEL_18;
            goto LABEL_16;
          }
        }
        v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      v17 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
      v6 = v17;
      if (v17)
        continue;
      break;
    }
  }

LABEL_16:
  v18 = sub_1002414E0((id *)[KmlFriendSharingManager alloc], v3);
  if (v18)
  {
    objc_msgSend((id)qword_100354918, "addObject:", v18);
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlFriendSharingManager getFriendSharingManagerForUuid:]", 201, CFSTR("FriendSharingManager: created new manager to handle UUID:%@"), v19, v20, v21, v22, (uint64_t)v3);
  }
LABEL_18:
  objc_sync_exit(v4);

  return v18;
}

void sub_1002414B8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id *sub_1002414E0(id *a1, void *a2)
{
  id v4;
  id *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  NSObject *v13;
  id v14;
  uint64_t v15;
  id v16;
  KmlSharingInvitationRecord *v17;
  id v18;
  id v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  objc_super v29;

  v4 = a2;
  if (a1)
  {
    v29.receiver = a1;
    v29.super_class = (Class)KmlFriendSharingManager;
    v5 = (id *)objc_msgSendSuper2(&v29, "init");
    a1 = v5;
    if (v5)
    {
      v6 = objc_msgSend(objc_retainAutorelease(v5[41]), "UTF8String");
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 364, (uint64_t)v6, CFSTR("let's init"), v7, v8, v9, (uint64_t)v29.receiver);
      a1[1] = 0;
      a1[2] = 0;
      a1[3] = 0;
      objc_storeStrong(a1 + 44, a2);
      v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1[44], "UUIDString"));
      v11 = a1[41];
      a1[41] = (id)v10;

      *((_WORD *)a1 + 116) = 0;
      v12 = KmlSignpostLogger();
      v13 = objc_claimAutoreleasedReturnValue(v12);
      a1[32] = (id)os_signpost_id_make_with_pointer(v13, a1[41]);

      v14 = sub_1002422AC((uint64_t)KmlFriendSharingManager);
      v15 = objc_claimAutoreleasedReturnValue(v14);
      v16 = a1[35];
      a1[35] = (id)v15;

      v17 = objc_alloc_init(KmlSharingInvitationRecord);
      v18 = a1[31];
      a1[31] = v17;

      v19 = sub_1002342C4((uint64_t)KmlSharingTransport);
      v20 = objc_claimAutoreleasedReturnValue(v19);
      v21 = a1[30];
      a1[30] = (id)v20;

      v22 = sub_10021804C((uint64_t)[KmlVersions alloc], 0);
      v23 = a1[27];
      a1[27] = (id)v22;

      v24 = objc_msgSend(objc_retainAutorelease(a1[41]), "UTF8String");
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 384, (uint64_t)v24, CFSTR("ready to roll"), v25, v26, v27, (uint64_t)v29.receiver);
    }
  }

  return a1;
}

_QWORD *sub_10024165C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  void *v10;
  id v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];

  v3 = a2;
  objc_opt_self(a1);
  sub_100240CD4((uint64_t)KmlFriendSharingManager);
  sub_100240D58((uint64_t)KmlFriendSharingManager);
  v4 = (id)qword_100354918;
  objc_sync_enter(v4);
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v5 = (id)qword_100354918;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v20;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v20 != v7)
          objc_enumerationMutation(v5);
        if (v3)
        {
          v9 = *(_QWORD **)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)v8);
          v10 = v9 ? (void *)v9[42] : 0;
          v11 = v10;
          v12 = objc_msgSend(v11, "isEqualToString:", v3);

          if (v12)
          {
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlFriendSharingManager getFriendSharingManagerForKeyIdentifier:]", 220, CFSTR("Found manager to handle KeyId :%@"), v13, v14, v15, v16, (uint64_t)v3);
            v6 = v9;
            goto LABEL_16;
          }
        }
        v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      v17 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
      v6 = v17;
    }
    while (v17);
  }
LABEL_16:

  objc_sync_exit(v4);
  return v6;
}

void sub_100241800(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id *sub_100241824(uint64_t a1, void *a2, int a3)
{
  id v4;
  id v5;
  id v6;
  id *v7;
  uint64_t v8;
  id *v9;
  _QWORD *v10;
  void *v11;
  id v12;
  unsigned int v13;
  id *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[128];

  v4 = a2;
  objc_opt_self(a1);
  sub_100240CD4((uint64_t)KmlFriendSharingManager);
  sub_100240D58((uint64_t)KmlFriendSharingManager);
  v5 = (id)qword_100354918;
  objc_sync_enter(v5);
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v6 = (id)qword_100354918;
  v7 = (id *)objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
  if (v7)
  {
    v8 = *(_QWORD *)v28;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v28 != v8)
          objc_enumerationMutation(v6);
        if (v4)
        {
          v10 = *(_QWORD **)(*((_QWORD *)&v27 + 1) + 8 * (_QWORD)v9);
          v11 = v10 ? (void *)v10[43] : 0;
          v12 = v11;
          v13 = objc_msgSend(v12, "isEqualToString:", v4);

          if (v13)
          {
            v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "substringToIndex:", 4));
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlFriendSharingManager getFriendSharingManagerWithMailboxIdentifier:createIfNil:]", 242, CFSTR("FriendSharingManager: found manager to handle mailboxId:%@"), v16, v17, v18, v19, (uint64_t)v15);

            v7 = v10;
            goto LABEL_16;
          }
        }
        v9 = (id *)((char *)v9 + 1);
      }
      while (v7 != v9);
      v14 = (id *)objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
      v7 = v14;
    }
    while (v14);
  }
LABEL_16:

  if (!v7)
  {
    if (a3)
    {
      v7 = sub_100241108((id *)[KmlFriendSharingManager alloc], 0, v4);
      if (v7)
      {
        objc_msgSend((id)qword_100354918, "addObject:", v7);
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "substringToIndex:", 4));
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlFriendSharingManager getFriendSharingManagerWithMailboxIdentifier:createIfNil:]", 252, CFSTR("FriendSharingManager: created new manager to handle mailboxId:%@"), v21, v22, v23, v24, (uint64_t)v20);

      }
    }
  }
  objc_sync_exit(v5);

  return v7;
}

void sub_100241A54(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100241A7C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  _QWORD *v12;
  void *v13;
  id v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  unsigned int v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[128];

  v5 = a2;
  v6 = a3;
  objc_opt_self(a1);
  sub_100240CD4((uint64_t)KmlFriendSharingManager);
  sub_100240D58((uint64_t)KmlFriendSharingManager);
  v7 = (id)qword_100354918;
  objc_sync_enter(v7);
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v8 = (id)qword_100354918;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
  if (v9)
  {
    v10 = *(_QWORD *)v31;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v31 != v10)
          objc_enumerationMutation(v8);
        v12 = *(_QWORD **)(*((_QWORD *)&v30 + 1) + 8 * (_QWORD)v11);
        if (v5)
        {
          v13 = v12 ? (void *)v12[41] : 0;
          v14 = v13;
          v15 = objc_msgSend(v14, "isEqualToString:", v5);

          if (v15)
          {
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlFriendSharingManager getFriendSharingManagerForInvitationIdentifier:orMailboxIdentifier:]", 272, CFSTR("FriendSharingManager: found manager to handle invitationId:%@"), v16, v17, v18, v19, (uint64_t)v5);
LABEL_22:
            v9 = v12;
            goto LABEL_23;
          }
        }
        if (v6)
        {
          v20 = v12 ? (void *)v12[43] : 0;
          v21 = v20;
          v22 = objc_msgSend(v21, "isEqualToString:", v6);

          if (v22)
          {
            v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "substringToIndex:", 4));
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlFriendSharingManager getFriendSharingManagerForInvitationIdentifier:orMailboxIdentifier:]", 277, CFSTR("FriendSharingManager: found manager to handle mailboxId:%@"), v25, v26, v27, v28, (uint64_t)v24);

            goto LABEL_22;
          }
        }
        v11 = (char *)v11 + 1;
      }
      while (v9 != v11);
      v23 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
      v9 = v23;
    }
    while (v23);
  }
LABEL_23:

  objc_sync_exit(v7);
  return v9;
}

void sub_100241C9C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100241CC0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  void *v14;
  unsigned int v15;
  id v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id obj;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[128];

  v3 = a2;
  objc_opt_self(a1);
  sub_100240CD4((uint64_t)KmlFriendSharingManager);
  obj = (id)qword_100354918;
  objc_sync_enter(obj);
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v4 = (id)qword_100354918;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v32;
    while (2)
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v32 != v6)
          objc_enumerationMutation(v4);
        v8 = *(_QWORD **)(*((_QWORD *)&v31 + 1) + 8 * (_QWORD)v7);
        v9 = sub_10022ADE0((uint64_t)v3);
        v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
        if (v10)
        {
          v11 = v8 ? (void *)v8[41] : 0;
          v12 = v11;
          v13 = sub_10022ADE0((uint64_t)v3);
          v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
          v15 = objc_msgSend(v12, "isEqualToString:", v14);

          if (v15)
          {
            v17 = sub_10022ADE0((uint64_t)v3);
            v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlFriendSharingManager regenerateFriendSharingForInvitationRecord:]", 296, CFSTR("found manager to handle invitationId:%@"), v19, v20, v21, v22, (uint64_t)v18);

            v23 = v8;
            if (v8)
              goto LABEL_18;
            goto LABEL_16;
          }
        }
        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v16 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
      v5 = v16;
      if (v16)
        continue;
      break;
    }
  }

LABEL_16:
  v23 = (_QWORD *)sub_100241F38((uint64_t)[KmlFriendSharingManager alloc], v3);
  if (v23)
  {
    objc_msgSend((id)qword_100354918, "addObject:", v23);
    v24 = sub_10022ADE0((uint64_t)v3);
    v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlFriendSharingManager regenerateFriendSharingForInvitationRecord:]", 306, CFSTR("created new manager to handle invitationId:%@"), v26, v27, v28, v29, (uint64_t)v25);

  }
LABEL_18:
  objc_sync_exit(obj);

}

void sub_100241F10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

uint64_t sub_100241F38(uint64_t a1, void *a2)
{
  id v3;
  id *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;
  void *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  id v58;
  void *v59;
  id v60;
  uint64_t v61;
  void *v62;
  id v63;
  uint64_t v64;
  void *v65;
  id v66;
  NSObject *v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  id v73;
  id v74;
  objc_super v75;

  v3 = a2;
  if (a1)
  {
    v75.receiver = (id)a1;
    v75.super_class = (Class)KmlFriendSharingManager;
    v4 = (id *)objc_msgSendSuper2(&v75, "init");
    a1 = (uint64_t)v4;
    if (v4)
    {
      v5 = objc_msgSend(objc_retainAutorelease(v4[41]), "UTF8String");
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 393, (uint64_t)v5, CFSTR("let's init"), v6, v7, v8, (uint64_t)v73);
      v9 = objc_msgSend(v3, "copy");
      v10 = *(void **)(a1 + 248);
      *(_QWORD *)(a1 + 248) = v9;

      v11 = sub_10022ADE0(*(_QWORD *)(a1 + 248));
      v12 = objc_claimAutoreleasedReturnValue(v11);
      v13 = *(void **)(a1 + 328);
      *(_QWORD *)(a1 + 328) = v12;

      v14 = sub_10002BA88(*(_QWORD *)(a1 + 248));
      v15 = objc_claimAutoreleasedReturnValue(v14);
      v16 = *(void **)(a1 + 72);
      *(_QWORD *)(a1 + 72) = v15;

      v17 = sub_100016AC8(*(_QWORD *)(a1 + 248));
      v18 = objc_claimAutoreleasedReturnValue(v17);
      v19 = *(void **)(a1 + 344);
      *(_QWORD *)(a1 + 344) = v18;

      v20 = sub_1000117DC(*(_QWORD *)(a1 + 248));
      v21 = objc_claimAutoreleasedReturnValue(v20);
      v22 = *(void **)(a1 + 352);
      *(_QWORD *)(a1 + 352) = v21;

      v23 = sub_10022ADD4(*(_QWORD *)(a1 + 248));
      v24 = objc_claimAutoreleasedReturnValue(v23);
      v25 = *(void **)(a1 + 336);
      *(_QWORD *)(a1 + 336) = v24;

      v26 = kmlUtilDataForHexString(*(void **)(a1 + 336));
      v27 = objc_claimAutoreleasedReturnValue(v26);
      v28 = *(void **)(a1 + 96);
      *(_QWORD *)(a1 + 96) = v27;

      v29 = sub_10022ADC8(*(_QWORD *)(a1 + 248)) - 1;
      if (v29 <= 5)
        *(_QWORD *)(a1 + 8) = qword_10028E398[v29];
      v30 = sub_100050680(*(_QWORD *)(a1 + 248));
      v31 = objc_claimAutoreleasedReturnValue(v30);
      v32 = *(void **)(a1 + 136);
      *(_QWORD *)(a1 + 136) = v31;

      if (*(_QWORD *)(a1 + 136))
      {
        v33 = sub_100253E34([KmlBindingAttestation alloc], *(void **)(a1 + 136));
        v34 = sub_1002225B8((uint64_t)v33);
        v35 = objc_claimAutoreleasedReturnValue(v34);
        v36 = *(void **)(a1 + 224);
        *(_QWORD *)(a1 + 224) = v35;

      }
      v37 = *(void **)(a1 + 144);
      *(_QWORD *)(a1 + 144) = 0;

      v38 = sub_1002225AC(*(_QWORD *)(a1 + 248));
      v39 = objc_claimAutoreleasedReturnValue(v38);
      v40 = *(void **)(a1 + 48);
      *(_QWORD *)(a1 + 48) = v39;

      v41 = sub_1002225B8(*(_QWORD *)(a1 + 248));
      v42 = objc_claimAutoreleasedReturnValue(v41);
      v43 = *(void **)(a1 + 160);
      *(_QWORD *)(a1 + 160) = v42;

      v44 = sub_1002225C4(*(_QWORD *)(a1 + 248));
      v45 = objc_claimAutoreleasedReturnValue(v44);
      v46 = *(void **)(a1 + 168);
      *(_QWORD *)(a1 + 168) = v45;

      v47 = sub_10022ADBC(*(_QWORD *)(a1 + 248));
      v48 = (id)objc_claimAutoreleasedReturnValue(v47);

      if (v48)
      {
        v49 = sub_10022ADBC(*(_QWORD *)(a1 + 248));
        v50 = (void *)objc_claimAutoreleasedReturnValue(v49);
        v74 = 0;
        v51 = objc_claimAutoreleasedReturnValue(+[DAAlishaKeyEncryptedRequest decodeWithData:error:](DAAlishaKeyEncryptedRequest, "decodeWithData:error:", v50, &v74));
        v48 = v74;
        v52 = *(void **)(a1 + 192);
        *(_QWORD *)(a1 + 192) = v51;

      }
      v53 = sub_1002225E0(*(_QWORD *)(a1 + 248));
      v54 = (void *)objc_claimAutoreleasedReturnValue(v53);

      if (v54)
      {
        v55 = sub_1002225E0(*(_QWORD *)(a1 + 248));
        v56 = (void *)objc_claimAutoreleasedReturnValue(v55);
        v73 = v48;
        v57 = objc_claimAutoreleasedReturnValue(+[DAAlishaKeyEncryptedRequest decodeWithData:error:](DAAlishaKeyEncryptedRequest, "decodeWithData:error:", v56, &v73));
        v58 = v73;

        v59 = *(void **)(a1 + 184);
        *(_QWORD *)(a1 + 184) = v57;

        v48 = v58;
      }
      *(_QWORD *)(a1 + 296) = sub_100217274(*(_QWORD *)(a1 + 248));
      v60 = sub_1002422AC((uint64_t)KmlFriendSharingManager);
      v61 = objc_claimAutoreleasedReturnValue(v60);
      v62 = *(void **)(a1 + 280);
      *(_QWORD *)(a1 + 280) = v61;

      v63 = sub_1002342C4((uint64_t)KmlSharingTransport);
      v64 = objc_claimAutoreleasedReturnValue(v63);
      v65 = *(void **)(a1 + 240);
      *(_QWORD *)(a1 + 240) = v64;

      *(_WORD *)(a1 + 232) = 0;
      v66 = KmlSignpostLogger();
      v67 = objc_claimAutoreleasedReturnValue(v66);
      *(_QWORD *)(a1 + 256) = os_signpost_id_make_with_pointer(v67, *(const void **)(a1 + 328));

      sub_100242340(a1);
      v68 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 328)), "UTF8String");
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 443, (uint64_t)v68, CFSTR("ready to roll"), v69, v70, v71, (uint64_t)v73);

    }
  }

  return a1;
}

id sub_1002422AC(uint64_t a1)
{
  objc_opt_self(a1);
  if (qword_100354930 != -1)
    dispatch_once(&qword_100354930, &stru_10030FAE0);
  return (id)qword_100354928;
}

void sub_1002422F0(id a1)
{
  dispatch_queue_attr_t v1;
  dispatch_queue_t v2;
  void *v3;
  NSObject *v4;

  v1 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v4 = objc_claimAutoreleasedReturnValue(v1);
  v2 = dispatch_queue_create("com.apple.sesd.kml.friendSharingManager", v4);
  v3 = (void *)qword_100354928;
  qword_100354928 = (uint64_t)v2;

}

void sub_100242340(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[5];

  if (a1)
  {
    v1 = *(NSObject **)(a1 + 280);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10024C194;
    block[3] = &unk_100302AA0;
    block[4] = a1;
    dispatch_async(v1, block);
  }
}

void sub_100242400(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  _QWORD block[5];
  id v9;
  id v10;

  v5 = a2;
  v6 = a3;
  if (a1)
  {
    v7 = *(NSObject **)(a1 + 280);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002424AC;
    block[3] = &unk_100304490;
    block[4] = a1;
    v9 = v5;
    v10 = v6;
    dispatch_async(v7, block);

  }
}

void sub_1002424AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  NSObject *v12;
  os_signpost_id_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id WeakRetained;
  void *v22;
  NSString *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint8_t buf[8];
  NSErrorUserInfoKey v34;
  void *v35;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(v2 + 8);
  v4 = objc_retainAutorelease(*(id *)(v2 + 328));
  if (v3 == 11)
  {
    v5 = v4;
    v6 = objc_msgSend(v5, "UTF8String");
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 470, (uint64_t)v6, CFSTR("FriendSharingManager: Prepare for key sharing from %@"), v7, v8, v9, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 72));

    v10 = KmlSignpostLogger();
    v11 = objc_claimAutoreleasedReturnValue(v10);
    v12 = v11;
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 256);
    if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, v13, "FriendSharingAccepted", "client", buf, 2u);
    }

    objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 144), *(id *)(a1 + 40));
    v14 = sub_100242724(*(_QWORD *)(a1 + 32), *(void **)(a1 + 48));
    v15 = *(_QWORD *)(a1 + 32);
    v16 = 12;
    goto LABEL_8;
  }
  v17 = objc_msgSend(v4, "UTF8String");
  KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 476, (uint64_t)v17, CFSTR("FriendSharingManager: Not waiting on User acceptance"), v18, v19, v20, v31);
  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 304));
  v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
  v34 = NSLocalizedDescriptionKey;
  v23 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(214));
  v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
  v35 = v24;
  v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v35, &v34, 1));
  v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v22, 214, v25));
  objc_msgSend(WeakRetained, "handleExchangeStartedWithFriendKey:status:", 0, v26);

  v15 = *(_QWORD *)(a1 + 32);
  if (*(uint64_t *)(v15 + 8) <= 10)
  {
    v16 = 52;
LABEL_8:
    sub_1002429CC(v15, v16);
    return;
  }
  v27 = objc_msgSend(objc_retainAutorelease(*(id *)(v15 + 328)), "UTF8String");
  KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 481, (uint64_t)v27, CFSTR("Let sharing finish normally"), v28, v29, v30, v32);
}

id sub_100242724(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __CFString *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  NSString *v33;
  void *v34;
  uint64_t v35;
  id v36;
  NSErrorUserInfoKey v37;
  id v38;

  v3 = a2;
  v8 = v3;
  if (a1)
  {
    if (*(_QWORD *)(a1 + 152))
    {
      v9 = CFSTR("We already have PPID from server");
      v10 = 1965;
LABEL_11:
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlFriendSharingManager getDecryptedPPID:]", v10, v9, v4, v5, v6, v7, v35);
      a1 = 0;
      goto LABEL_12;
    }
    if (!*(_QWORD *)(a1 + 160) || !*(_QWORD *)(a1 + 168))
    {
      v9 = CFSTR("Need keyPair to decrypt encrypted data");
      v10 = 1970;
      goto LABEL_11;
    }
    if (v3
      && (v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "encryptedRequest"))) != 0
      && (v12 = (void *)v11,
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "ephemeralPublicKey")),
          v13,
          v12,
          v13))
    {
      v14 = objc_msgSend(objc_alloc((Class)SESKeyPair), "initWithPublicKey:secretKey:", *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 168));
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "encryptedRequest"));
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "ephemeralPublicKey"));
      v36 = 0;
      v17 = SESEndPointPrivacyDecryptionWithKeyPair(v14, v15, v16, &v36);
      v18 = objc_claimAutoreleasedReturnValue(v17);
      v19 = v36;
      v20 = *(void **)(a1 + 152);
      *(_QWORD *)(a1 + 152) = v18;

      v21 = kmlUtilHexStringFromData(*(void **)(a1 + 152));
      v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
      KmlLogFunc_InternalOnly(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlFriendSharingManager getDecryptedPPID:]", 1984, CFSTR("Decrypted PPID : %@"), v23, v24, v25, v26, (uint64_t)v22);

      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlFriendSharingManager getDecryptedPPID:]", 1985, CFSTR("PPID decryption result: %@"), v27, v28, v29, v30, (uint64_t)v19);
      v31 = sesErrorToKmlError(v19, 0xDBu);
      a1 = objc_claimAutoreleasedReturnValue(v31);
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlFriendSharingManager getDecryptedPPID:]", 1975, CFSTR("PPID from server not usable"), v4, v5, v6, v7, v35);
      v14 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
      v37 = NSLocalizedDescriptionKey;
      v33 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(219));
      v19 = (id)objc_claimAutoreleasedReturnValue(v33);
      v38 = v19;
      v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v38, &v37, 1));
      a1 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v14, 219, v34));

    }
  }
LABEL_12:

  return (id)a1;
}

void sub_1002429CC(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD v3[6];

  if (a1)
  {
    v2 = *(NSObject **)(a1 + 280);
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100246254;
    v3[3] = &unk_100304AD0;
    v3[4] = a1;
    v3[5] = a2;
    dispatch_async(v2, v3);
  }
}

void sub_100242A28(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  _QWORD v6[5];
  id v7;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = *(NSObject **)(a1 + 280);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100242AB4;
    v6[3] = &unk_100304370;
    v6[4] = a1;
    v7 = v3;
    dispatch_async(v5, v6);

  }
}

void sub_100242AB4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id WeakRetained;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(v2 + 8);
  v4 = objc_msgSend(objc_retainAutorelease(*(id *)(v2 + 328)), "UTF8String");
  if (v3 == 2)
  {
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 491, (uint64_t)v4, CFSTR("Parse cross-platform key sharing invitation"), v5, v6, v7, v12);
    KmlLogFunc_InternalOnly(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlFriendSharingManager parseCrossPlatformInvitation:]_block_invoke", 492, CFSTR("from %@"), v8, v9, v10, v11, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 344));
    sub_100242B80(*(_QWORD *)(a1 + 32), *(void **)(a1 + 40));
  }
  else
  {
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 497, (uint64_t)v4, CFSTR("Not expecting to parse cross-platform sharing invitation. Ignore"), v5, v6, v7, v12);
    WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 304));
    objc_msgSend(WeakRetained, "handleCrossPlatformParseInvitationStatus:", 0);

  }
}

void sub_100242B80(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  char v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  NSString *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  NSErrorUserInfoKey v30;
  void *v31;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    if (v3
      && (v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "genericData")),
          v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "message")),
          v7 = sub_100244B58(a1, v6),
          v6,
          v5,
          (v7 & 1) != 0))
    {
      v8 = *(void **)(a1 + 40);
      *(_QWORD *)(a1 + 40) = 0;

      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "genericData"));
      v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "sharingIdentifier"));
      v11 = *(void **)(a1 + 328);
      *(_QWORD *)(a1 + 328) = v10;

      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "genericData"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "message"));
      sub_100048A08(*(_QWORD *)(a1 + 248), v13);

      sub_10022B514(*(_QWORD *)(a1 + 248), *(void **)(a1 + 328));
      sub_100013B10(*(_QWORD *)(a1 + 248), *(void **)(a1 + 344));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "additionalData"));

      if (v14)
      {
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "additionalData"));
        v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "sharingSessionUUID"));
        v17 = *(void **)(a1 + 352);
        *(_QWORD *)(a1 + 352) = v16;

        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "additionalData"));
        *(_QWORD *)(a1 + 360) = objc_msgSend(v18, "targetDeviceType");

      }
      else
      {
        *(_QWORD *)(a1 + 360) = 255;
      }
      v27 = *(void **)(a1 + 352);
      if (!v27)
      {
        v28 = objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
        v29 = *(void **)(a1 + 352);
        *(_QWORD *)(a1 + 352) = v28;

        v27 = *(void **)(a1 + 352);
      }
      sub_100012A68(*(_QWORD *)(a1 + 248), v27);
      v25 = a1;
      v26 = 3;
    }
    else
    {
      v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
      v30 = NSLocalizedDescriptionKey;
      v20 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(109));
      v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
      v31 = v21;
      v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v31, &v30, 1));
      v23 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v19, 109, v22));
      v24 = *(void **)(a1 + 264);
      *(_QWORD *)(a1 + 264) = v23;

      v25 = a1;
      if (*(_BYTE *)(a1 + 233))
        v26 = 42;
      else
        v26 = 44;
    }
    sub_1002429CC(v25, v26);
  }

}

void sub_100242E14(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  NSObject *v11;
  _QWORD v12[5];
  id v13;
  id v14;
  id v15;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = v9;
  if (a1)
  {
    v11 = *(NSObject **)(a1 + 280);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_100242EE8;
    v12[3] = &unk_10030EED8;
    v12[4] = a1;
    v13 = v9;
    v14 = v8;
    v15 = v7;
    dispatch_async(v11, v12);

  }
}

void sub_100242EE8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id WeakRetained;
  void *v9;
  NSString *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  NSString *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  NSErrorUserInfoKey v41;
  void *v42;
  NSErrorUserInfoKey v43;
  void *v44;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(v2 + 8);
  v4 = objc_msgSend(objc_retainAutorelease(*(id *)(v2 + 328)), "UTF8String");
  if (v3 < 12)
  {
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 512, (uint64_t)v4, CFSTR("User accepted cross-platform key sharing invitation"), v5, v6, v7, v39);
    KmlLogFunc_InternalOnly(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlFriendSharingManager acceptCrossPlatformInvitation:passcode:productPlanIdentifier:]_block_invoke", 513, CFSTR("from %@"), v14, v15, v16, v17, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 344));
    KmlLogFunc_InternalOnly(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlFriendSharingManager acceptCrossPlatformInvitation:passcode:productPlanIdentifier:]_block_invoke", 514, CFSTR("PPID from server : %@"), v18, v19, v20, v21, *(_QWORD *)(a1 + 40));
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 233) = 1;
    objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 144), *(id *)(a1 + 48));
    v22 = sub_100242724(*(_QWORD *)(a1 + 32), *(void **)(a1 + 40));
    v23 = *(_QWORD *)(a1 + 32);
    v24 = *(void **)(a1 + 56);
    if (*(_QWORD *)(v23 + 8) == 2)
    {
      sub_100242B80(v23, v24);
      return;
    }
    if (v24)
    {
      v25 = *(void **)(v23 + 328);
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "genericData"));
      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "sharingIdentifier"));
      LODWORD(v25) = objc_msgSend(v25, "isEqualToString:", v27);

      if (!(_DWORD)v25)
      {
        KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlFriendSharingManager acceptCrossPlatformInvitation:passcode:productPlanIdentifier:]_block_invoke", 524, CFSTR("Parse invite and accepted invite don't match"), v28, v29, v30, v31, v40);
        v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
        v41 = NSLocalizedDescriptionKey;
        v33 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(109));
        v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
        v42 = v34;
        v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v42, &v41, 1));
        v36 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v32, 109, v35));
        v37 = *(_QWORD *)(a1 + 32);
        v38 = *(void **)(v37 + 264);
        *(_QWORD *)(v37 + 264) = v36;

        sub_1002429CC(*(_QWORD *)(a1 + 32), 42);
        return;
      }
      v23 = *(_QWORD *)(a1 + 32);
    }
    sub_1002429CC(v23, 12);
    return;
  }
  KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 509, (uint64_t)v4, CFSTR("Sharing for this mailbox already under progress. Let sharing finish normally"), v5, v6, v7, v39);
  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 304));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
  v43 = NSLocalizedDescriptionKey;
  v10 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(214));
  v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  v44 = v11;
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v44, &v43, 1));
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v9, 214, v12));
  objc_msgSend(WeakRetained, "handleCrossPlatformSigningRequest:status:keyInformation:", 0, v13, 0);

}

void sub_100243270(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[5];

  if (a1)
  {
    v1 = *(NSObject **)(a1 + 280);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002432CC;
    block[3] = &unk_100302AA0;
    block[4] = a1;
    dispatch_async(v1, block);
  }
}

void sub_1002432CC(uint64_t a1)
{
  void *v2;
  NSString *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  NSString *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  NSObject *v20;
  NSObject *v21;
  os_signpost_id_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id WeakRetained;
  uint64_t v27;
  NSErrorUserInfoKey v28;
  void *v29;
  NSErrorUserInfoKey v30;
  void *v31;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 232) = 1;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
  v30 = NSLocalizedDescriptionKey;
  v3 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(102));
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v31 = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v31, &v30, 1));
  v6 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v2, 102, v5));
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(void **)(v7 + 264);
  *(_QWORD *)(v7 + 264) = v6;

  v9 = *(_QWORD *)(a1 + 32);
  if (*(uint64_t *)(v9 + 8) < 31)
  {
    v19 = KmlSignpostLogger();
    v20 = objc_claimAutoreleasedReturnValue(v19);
    v21 = v20;
    v22 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 256);
    if (v22 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v20))
    {
      LOWORD(v27) = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v21, OS_SIGNPOST_EVENT, v22, "FriendSharingCancelled", "client", (uint8_t *)&v27, 2u);
    }

    v23 = *(_QWORD *)(a1 + 32);
    if (*(_QWORD *)(v23 + 80))
    {
      sub_100243588(v23);
      v23 = *(_QWORD *)(a1 + 32);
    }
    v24 = *(_QWORD *)(v23 + 8);
    if (v24 > 20)
    {
      if (v24 == 21)
      {
LABEL_13:
        v18 = 0;
        goto LABEL_14;
      }
      v25 = 43;
    }
    else
    {
      v25 = 21;
    }
    sub_1002429CC(v23, v25);
    goto LABEL_13;
  }
  v10 = objc_msgSend(objc_retainAutorelease(*(id *)(v9 + 328)), "UTF8String");
  KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 547, (uint64_t)v10, CFSTR("Sharing at stage where it can not be cancelled"), v11, v12, v13, v27);
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
  v28 = NSLocalizedDescriptionKey;
  v15 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(101));
  v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
  v29 = v16;
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v29, &v28, 1));
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v14, 101, v17));

LABEL_14:
  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 304));
  objc_msgSend(WeakRetained, "handleFriendSideKeySharingCancelStatus:", v18);

}

void sub_100243588(uint64_t a1)
{
  uint64_t v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 336);
    v9 = 0;
    SESEndPointDelete(v2, &v9);
    v3 = v9;
    v4 = objc_retainAutorelease(*(id *)(a1 + 328));
    v5 = objc_msgSend(v4, "UTF8String");
    if (v3)
      KmlSharingLogFunc(OS_LOG_TYPE_ERROR, (uint64_t)"KmlFriendSharingManager.m", 1232, (uint64_t)v5, CFSTR("Failed to delete key with name: %@, and idStr: %@, due to %@"), v6, v7, v8, *(_QWORD *)(a1 + 88));
    else
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1234, (uint64_t)v5, CFSTR("Deleted key with name: %@, and idStr: %@"), v6, v7, v8, *(_QWORD *)(a1 + 88));

  }
}

void sub_100243648(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[5];

  if (a1)
  {
    v1 = *(NSObject **)(a1 + 280);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002436A4;
    block[3] = &unk_100302AA0;
    block[4] = a1;
    dispatch_async(v1, block);
  }
}

void sub_1002436A4(uint64_t a1)
{
  sub_1002429CC(*(_QWORD *)(a1 + 32), 52);
}

dispatch_queue_t *sub_1002436B0(dispatch_queue_t *a1, void *a2)
{
  id v3;
  NSObject *v4;
  _QWORD block[5];
  id v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  void (*v13)(uint64_t);
  id v14;

  v3 = a2;
  if (a1)
  {
    dispatch_assert_queue_not_V2(a1[35]);
    v9 = 0;
    v10 = &v9;
    v11 = 0x3032000000;
    v12 = sub_10024379C;
    v13 = sub_1002437AC;
    v14 = 0;
    v4 = a1[35];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002437B4;
    block[3] = &unk_10030FB08;
    block[4] = a1;
    v8 = &v9;
    v7 = v3;
    dispatch_sync(v4, block);
    a1 = (dispatch_queue_t *)(id)v10[5];

    _Block_object_dispose(&v9, 8);
  }

  return a1;
}

uint64_t sub_10024379C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1002437AC(uint64_t a1)
{

}

void sub_1002437B4(uint64_t a1)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  NSString *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSErrorUserInfoKey v25;
  void *v26;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v2 + 8))
  {
    v3 = objc_msgSend(objc_retainAutorelease(*(id *)(v2 + 328)), "UTF8String");
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 582, (uint64_t)v3, CFSTR("Not ready to request invite"), v4, v5, v6, v24);
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
    v25 = NSLocalizedDescriptionKey;
    v8 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(214));
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    v26 = v9;
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v26, &v25, 1));
    v11 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v7, 214, v10));
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v13 = *(void **)(v12 + 40);
    *(_QWORD *)(v12 + 40) = v11;

  }
  else
  {
    v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ownerIdsIdentifier"));
    v15 = *(_QWORD *)(a1 + 32);
    v16 = *(void **)(v15 + 72);
    *(_QWORD *)(v15 + 72) = v14;

    v17 = *(_QWORD *)(a1 + 32);
    if (v17)
      v18 = *(void **)(v17 + 328);
    else
      v18 = 0;
    v19 = objc_retainAutorelease(v18);
    v20 = objc_msgSend(v19, "UTF8String");
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 586, (uint64_t)v20, CFSTR("Ready to request invite from %@"), v21, v22, v23, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 72));

    sub_1002429CC(*(_QWORD *)(a1 + 32), 1);
  }
}

id sub_1002439A8(void *a1, _QWORD *a2)
{
  id *v3;
  id v4;
  id v5;

  if (a1)
  {
    v3 = a1;
    objc_sync_enter(v3);
    v4 = v3[25];
    if (a2 && !v4)
    {
      *a2 = objc_retainAutorelease(v3[34]);
      v4 = v3[25];
    }
    v5 = v4;
    objc_sync_exit(v3);

  }
  else
  {
    v5 = 0;
  }
  return v5;
}

id sub_100243A10(void *a1, void *a2)
{
  id v3;
  void **v4;
  void *v5;
  NSString *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD v17[2];
  _QWORD v18[2];

  v3 = a2;
  if (a1)
  {
    v4 = a1;
    objc_sync_enter(v4);
    if (v4[17])
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
      v17[0] = NSLocalizedDescriptionKey;
      v6 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(214));
      v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      v17[1] = NSLocalizedFailureReasonErrorKey;
      v18[0] = v7;
      v18[1] = CFSTR("Binding attestation already set");
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v18, v17, 2));
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v5, 214, v8));

    }
    else
    {
      v10 = objc_msgSend(objc_alloc((Class)NSData), "initWithData:", v3);
      v11 = v4[17];
      v4[17] = v10;

      if (v4[17])
      {
        v12 = sub_100253E34([KmlBindingAttestation alloc], v4[17]);
        v13 = sub_1002225B8((uint64_t)v12);
        v14 = objc_claimAutoreleasedReturnValue(v13);
        v15 = v4[28];
        v4[28] = (void *)v14;

      }
      sub_1002429CC((uint64_t)v4, 21);
      v9 = 0;
    }
    objc_sync_exit(v4);

  }
  else
  {
    v9 = 0;
  }

  return v9;
}

void sub_100243BD0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100243BF0(void *a1, _QWORD *a2)
{
  id *v3;
  id v4;
  id v5;

  if (a1)
  {
    v3 = a1;
    objc_sync_enter(v3);
    v4 = v3[23];
    if (a2 && !v4)
    {
      *a2 = objc_retainAutorelease(v3[34]);
      v4 = v3[23];
    }
    v5 = v4;
    objc_sync_exit(v3);

  }
  else
  {
    v5 = 0;
  }
  return v5;
}

id sub_100243C58(void *a1, _QWORD *a2)
{
  id *v3;
  id v4;
  id v5;

  if (a1)
  {
    v3 = a1;
    objc_sync_enter(v3);
    v4 = v3[24];
    if (a2 && !v4)
    {
      *a2 = objc_retainAutorelease(v3[34]);
      v4 = v3[24];
    }
    v5 = v4;
    objc_sync_exit(v3);

  }
  else
  {
    v5 = 0;
  }
  return v5;
}

dispatch_queue_t *sub_100243CC0(dispatch_queue_t *a1, void *a2)
{
  id v3;
  NSObject *v4;
  _QWORD block[5];
  id v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  void (*v13)(uint64_t);
  id v14;

  v3 = a2;
  if (a1)
  {
    dispatch_assert_queue_not_V2(a1[35]);
    v9 = 0;
    v10 = &v9;
    v11 = 0x3032000000;
    v12 = sub_10024379C;
    v13 = sub_1002437AC;
    v14 = 0;
    v4 = a1[35];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100243DAC;
    block[3] = &unk_10030F268;
    v8 = &v9;
    block[4] = a1;
    v7 = v3;
    dispatch_sync(v4, block);
    a1 = (dispatch_queue_t *)(id)v10[5];

    _Block_object_dispose(&v9, 8);
  }

  return a1;
}

void sub_100243DAC(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = sub_100242724(*(_QWORD *)(a1 + 32), *(void **)(a1 + 40));
  v3 = objc_claimAutoreleasedReturnValue(v2);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

dispatch_queue_t *sub_100243DE8(dispatch_queue_t *a1, void *a2)
{
  id v3;
  NSObject *v4;
  _QWORD block[5];
  id v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  void (*v13)(uint64_t);
  id v14;

  v3 = a2;
  if (a1)
  {
    dispatch_assert_queue_not_V2(a1[35]);
    v9 = 0;
    v10 = &v9;
    v11 = 0x3032000000;
    v12 = sub_10024379C;
    v13 = sub_1002437AC;
    v14 = 0;
    v4 = a1[35];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100243ED0;
    block[3] = &unk_10030EF28;
    block[4] = a1;
    v7 = v3;
    v8 = &v9;
    dispatch_sync(v4, block);
    a1 = (dispatch_queue_t *)(id)v10[5];

    _Block_object_dispose(&v9, 8);
  }

  return a1;
}

void sub_100243ED0(uint64_t a1)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  NSString *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  NSErrorUserInfoKey v15;
  void *v16;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v2 + 8) == 23 && *(_QWORD *)(v2 + 48))
  {
    objc_storeStrong((id *)(v2 + 144), *(id *)(a1 + 40));
    sub_100244064(*(_QWORD *)(a1 + 32));
  }
  else
  {
    v3 = objc_msgSend(objc_retainAutorelease(*(id *)(v2 + 328)), "UTF8String");
    KmlSharingLogFunc(OS_LOG_TYPE_ERROR, (uint64_t)"KmlFriendSharingManager.m", 675, (uint64_t)v3, CFSTR("Not ready to retry passcode"), v4, v5, v6, v14);
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
    v15 = NSLocalizedDescriptionKey;
    v8 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(119));
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    v16 = v9;
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v16, &v15, 1));
    v11 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v7, 119, v10));
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v13 = *(void **)(v12 + 40);
    *(_QWORD *)(v12 + 40) = v11;

  }
}

void sub_100244064(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[5];

  if (a1)
  {
    v1 = *(NSObject **)(a1 + 280);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10024B188;
    block[3] = &unk_100302AA0;
    block[4] = a1;
    dispatch_async(v1, block);
  }
}

void sub_1002440C0(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[5];

  if (a1)
  {
    v1 = *(NSObject **)(a1 + 280);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10024411C;
    block[3] = &unk_100302AA0;
    block[4] = a1;
    dispatch_async(v1, block);
  }
}

void sub_10024411C(uint64_t a1)
{
  void *v2;
  NSString *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  NSErrorUserInfoKey v9;
  void *v10;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
  v9 = NSLocalizedDescriptionKey;
  v3 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(211));
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v10 = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v10, &v9, 1));
  v6 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v2, 211, v5));
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(void **)(v7 + 264);
  *(_QWORD *)(v7 + 264) = v6;

  sub_1002429CC(*(_QWORD *)(a1 + 32), 43);
}

void sub_100244364(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  void *v23;
  unsigned __int8 v24;
  uint64_t v25;
  _QWORD *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  uint64_t v33;
  int v34;
  NSString *v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __CFString *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  void *v55;
  id *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 v59;
  void *v60;
  id v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  NSString *v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  void *v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  const char *v86;
  void *v87;
  NSString *v88;
  void *v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  id v99;
  id v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  const char *v105;
  uint64_t v106;
  NSErrorUserInfoKey v107;
  void *v108;
  NSErrorUserInfoKey v109;
  void *v110;
  NSErrorUserInfoKey v111;
  void *v112;

  v9 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(a1 + 32))
  {
    if (v9)
      v11 = *(void **)(v9 + 328);
    else
      v11 = 0;
    v12 = objc_retainAutorelease(v11);
    v13 = objc_msgSend(v12, "UTF8String");
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 709, (uint64_t)v13, CFSTR("FriendSharingManager: Received message from : %@"), v14, v15, v16, *(_QWORD *)(a1 + 32));

    v17 = *(_QWORD *)(a1 + 40);
    if (*(_QWORD *)(v17 + 8) == 2 && *(_QWORD *)(a1 + 80) == 1)
    {
      if (sub_100244B58(v17, *(void **)(a1 + 48)) && *(_QWORD *)(a1 + 56))
      {
        v18 = objc_msgSend(objc_alloc((Class)NSData), "initWithData:", *(_QWORD *)(a1 + 56));
        v19 = *(_QWORD *)(a1 + 40);
        v20 = *(void **)(v19 + 40);
        *(_QWORD *)(v19 + 40) = v18;

        v21 = objc_msgSend(objc_alloc((Class)NSString), "initWithString:", *(_QWORD *)(a1 + 32));
        v22 = *(_QWORD *)(a1 + 40);
        v23 = *(void **)(v22 + 72);
        *(_QWORD *)(v22 + 72) = v21;

        objc_storeStrong((id *)(*(_QWORD *)(a1 + 40) + 352), *(id *)(a1 + 64));
        *(_QWORD *)(*(_QWORD *)(a1 + 40) + 360) = *(_QWORD *)(a1 + 88);
        sub_100012A68(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 248), *(void **)(a1 + 64));
        sub_100048A08(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 248), *(void **)(a1 + 48));
        sub_10022B514(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 248), *(void **)(*(_QWORD *)(a1 + 40) + 328));
        sub_100013B00(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 248), *(void **)(*(_QWORD *)(a1 + 40) + 72));
        sub_1002429CC(*(_QWORD *)(a1 + 40), 3);
        return;
      }
      v54 = *(_QWORD *)(a1 + 40);
      if (v54)
        v55 = *(void **)(v54 + 328);
      else
        v55 = 0;
      v46 = objc_msgSend(objc_retainAutorelease(v55), "UTF8String");
      v50 = CFSTR("FriendSharingManager: incorrect data received, ignoring it");
      v51 = 725;
      goto LABEL_28;
    }
    v24 = objc_msgSend(*(id *)(v17 + 72), "isEqualToString:", *(_QWORD *)(a1 + 32));
    v25 = *(_QWORD *)(a1 + 40);
    if ((v24 & 1) != 0)
    {
      if ((objc_msgSend(*(id *)(v25 + 352), "isEqual:", *(_QWORD *)(a1 + 64)) & 1) != 0)
      {
        v26 = *(_QWORD **)(a1 + 40);
        if (*(_QWORD *)(a1 + 80) == 4)
        {
          if (v26)
            v26 = (_QWORD *)v26[41];
          v27 = objc_msgSend(objc_retainAutorelease(v26), "UTF8String");
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 744, (uint64_t)v27, CFSTR("FriendSharingManager: Owner cancelled sharing request"), v28, v29, v30, v106);
          v31 = sub_10023803C([KmlCancelMessage alloc], *(void **)(a1 + 48));
          v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
          if (v31)
          {
            v33 = sub_100238448((uint64_t)v31);
            v111 = NSLocalizedDescriptionKey;
            v34 = sub_100238448((uint64_t)v31);
            v35 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(v34));
            v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
            v112 = v36;
            v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v112, &v111, 1));
            v38 = v32;
            v39 = v33;
          }
          else
          {
            v109 = NSLocalizedDescriptionKey;
            v70 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(103));
            v36 = (void *)objc_claimAutoreleasedReturnValue(v70);
            v110 = v36;
            v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v110, &v109, 1));
            v38 = v32;
            v39 = 103;
          }
          v71 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v38, v39, v37));
          v72 = *(_QWORD *)(a1 + 40);
          v73 = *(void **)(v72 + 264);
          *(_QWORD *)(v72 + 264) = v71;

          v68 = *(_QWORD *)(a1 + 40);
          v74 = *(_QWORD *)(v68 + 8);
          if (v74 != 11)
          {
            if (v74 <= 32)
            {
LABEL_40:
              v69 = 51;
              goto LABEL_49;
            }
            goto LABEL_50;
          }
        }
        else
        {
          v56 = sub_100244D30((id *)v26, *(void **)(a1 + 48));
          v31 = (id)objc_claimAutoreleasedReturnValue(v56);
          v57 = *(_QWORD *)(a1 + 40);
          if (!v31)
          {
            if (v57)
              v75 = *(void **)(v57 + 328);
            else
              v75 = 0;
            v76 = objc_msgSend(objc_retainAutorelease(v75), "UTF8String");
            KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 762, (uint64_t)v76, CFSTR("We will only handle signed request at this point. This message is not that so dropping"), v77, v78, v79, v106);
            sub_10023470C(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 240), *(void **)(a1 + 32));
            goto LABEL_50;
          }
          v58 = *(_QWORD *)(v57 + 8);
          if ((unint64_t)(v58 - 22) < 2)
          {
            if (!*(_QWORD *)(v57 + 80))
            {
              v94 = objc_msgSend(objc_retainAutorelease(*(id *)(v57 + 328)), "UTF8String");
              KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 769, (uint64_t)v94, CFSTR("Failed to look up endpoint"), v95, v96, v97, v106);
              v68 = *(_QWORD *)(a1 + 40);
              v69 = 43;
              goto LABEL_49;
            }
            if (!*(_QWORD *)(v57 + 336))
              goto LABEL_35;
            v59 = objc_msgSend(*(id *)(a1 + 72), "isEqualToString:");
            v57 = *(_QWORD *)(a1 + 40);
            if ((v59 & 1) == 0)
            {
              if (v57)
                v98 = *(void **)(v57 + 328);
              else
                v98 = 0;
              v99 = objc_retainAutorelease(v98);
              v100 = objc_msgSend(v99, "UTF8String");
              v101 = *(_QWORD *)(a1 + 88);

              v105 = "watch";
              if (v101 == 1)
                v105 = "phone";
              KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 775, (uint64_t)v100, CFSTR("Signed response is not for our keyID. Other %s on our account must have accepted the invite."), v102, v103, v104, (uint64_t)v105);
              sub_10023470C(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 240), *(void **)(a1 + 32));
              v68 = *(_QWORD *)(a1 + 40);
              goto LABEL_40;
            }
            if (!v57)
              v60 = 0;
            else
LABEL_35:
              v60 = *(void **)(v57 + 328);
            v61 = objc_retainAutorelease(v60);
            v62 = objc_msgSend(v61, "UTF8String");
            v63 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);

            KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 781, (uint64_t)v62, CFSTR("Received signed response in state - %ld"), v64, v65, v66, v63);
            objc_storeStrong((id *)(*(_QWORD *)(a1 + 40) + 56), v31);
            v67 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("SignedResponse - %@"), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 328)));
            kmlUtilLogLargeData(v67, *(void **)(a1 + 48));

            v68 = *(_QWORD *)(a1 + 40);
            v69 = 31;
LABEL_49:
            sub_1002429CC(v68, v69);
            goto LABEL_50;
          }
          if (v58 != 11)
          {
LABEL_50:

            return;
          }
          v80 = objc_retainAutorelease(*(id *)(v57 + 328));
          v81 = objc_msgSend(v80, "UTF8String");
          v82 = *(_QWORD *)(a1 + 88);

          v86 = "watch";
          if (v82 == 1)
            v86 = "phone";
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 790, (uint64_t)v81, CFSTR("It appears that other %s on our account has used this invitation."), v83, v84, v85, (uint64_t)v86);
          v87 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
          v107 = NSLocalizedDescriptionKey;
          v88 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(110));
          v89 = (void *)objc_claimAutoreleasedReturnValue(v88);
          v108 = v89;
          v90 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v108, &v107, 1));
          v91 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v87, 110, v90));
          v92 = *(_QWORD *)(a1 + 40);
          v93 = *(void **)(v92 + 264);
          *(_QWORD *)(v92 + 264) = v91;

          v68 = *(_QWORD *)(a1 + 40);
        }
        v69 = 41;
        goto LABEL_49;
      }
      v52 = *(_QWORD *)(a1 + 40);
      if (v52)
        v53 = *(void **)(v52 + 328);
      else
        v53 = 0;
      v46 = objc_msgSend(objc_retainAutorelease(v53), "UTF8String");
      v50 = CFSTR("Unknown uuid. Dropping message");
      v51 = 738;
    }
    else
    {
      if (v25)
        v45 = *(void **)(v25 + 328);
      else
        v45 = 0;
      v46 = objc_msgSend(objc_retainAutorelease(v45), "UTF8String");
      v50 = CFSTR("Unexpected sender. Dropping message");
      v51 = 732;
    }
LABEL_28:
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", v51, (uint64_t)v46, v50, v47, v48, v49, v106);
    sub_10023470C(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 240), *(void **)(a1 + 32));
    return;
  }
  if (v9)
    v40 = *(void **)(v9 + 328);
  else
    v40 = 0;
  v41 = objc_msgSend(objc_retainAutorelease(v40), "UTF8String");
  KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 705, (uint64_t)v41, CFSTR("FriendSharingManager: missing remote IDS identifier"), v42, v43, v44, a9);
}

uint64_t sub_100244B58(uint64_t a1, void *a2)
{
  id v3;
  KeySharingInvitation *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  id v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;

  v3 = a2;
  if (a1)
  {
    v4 = objc_alloc_init(KeySharingInvitation);
    v5 = sub_100220B88((uint64_t)v4, v3);
    if ((v5 & 1) != 0)
    {
      objc_storeStrong((id *)(a1 + 32), v4);
      v6 = sub_1000117D0(*(_QWORD *)(a1 + 32));
      v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      v8 = sub_100016AC8((uint64_t)v7);
      v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      v10 = sub_100251398((uint64_t)v9);
      v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      v12 = kmlUtilHexStringFromData(v11);
      v13 = (void *)objc_claimAutoreleasedReturnValue(v12);

      v14 = sub_1000117D0(*(_QWORD *)(a1 + 32));
      v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
      v16 = sub_100016AC8((uint64_t)v15);
      v17 = (_QWORD *)objc_claimAutoreleasedReturnValue(v16);
      v18 = sub_100253884(v17);
      v19 = (void *)objc_claimAutoreleasedReturnValue(v18);

      v20 = objc_msgSend(objc_alloc((Class)KmlRoutingInformation), "initWithInformation:readerIdentifier:", v19, v13);
      v21 = *(void **)(a1 + 104);
      *(_QWORD *)(a1 + 104) = v20;

      v22 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 104), "getReaderInformation"));
      v23 = *(void **)(a1 + 312);
      *(_QWORD *)(a1 + 312) = v22;

      v24 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 104), "manufacturer"));
      v25 = *(void **)(a1 + 112);
      *(_QWORD *)(a1 + 112) = v24;

      v26 = objc_retainAutorelease(*(id *)(a1 + 328));
      v27 = objc_msgSend(v26, "UTF8String");
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1425, (uint64_t)v27, CFSTR("Received valid sharing invitation for manufacturer - %@"), v28, v29, v30, *(_QWORD *)(a1 + 112));

      kmlUtilLogLargeData(CFSTR("Invitation"), v3);
    }
    else
    {
      v31 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 328)), "UTF8String");
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1413, (uint64_t)v31, CFSTR("Received sharing invitation is invalid"), v32, v33, v34, v36);
    }

  }
  else
  {
    v5 = 0;
  }

  return v5;
}

id *sub_100244D30(id *a1, void *a2)
{
  id *v2;
  id v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  SharingSignedResponse *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v2 = a1;
  if (a1)
  {
    v4 = objc_retainAutorelease(a1[41]);
    v5 = a2;
    v6 = objc_msgSend(v4, "UTF8String");
    v7 = kmlUtilHexStringFromData(v5);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1433, (uint64_t)v6, CFSTR("FriendSharingManager: incoming message %@"), v9, v10, v11, v8);

    v12 = objc_alloc_init(SharingSignedResponse);
    LOBYTE(v8) = sub_100221E30((uint64_t)v12, v5);

    if ((v8 & 1) != 0)
    {
      v2 = v12;
    }
    else
    {
      v13 = objc_msgSend(objc_retainAutorelease(v2[41]), "UTF8String");
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1437, (uint64_t)v13, CFSTR("FriendSharingManager: Still waiting for signed response"), v14, v15, v16, v18);
      v2 = 0;
    }

  }
  return v2;
}

void sub_100244EA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v9 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v9 + 8) == 21)
  {
    v11 = *(_QWORD *)(a1 + 40);
    v12 = objc_retainAutorelease(*(id *)(v9 + 328));
    if (v11)
    {
      v13 = v12;
      v14 = objc_msgSend(v13, "UTF8String");
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 809, (uint64_t)v14, CFSTR("FriendSharingManager: error setting up transport %@"), v15, v16, v17, *(_QWORD *)(a1 + 40));

      v18 = *(_QWORD *)(a1 + 32);
      if (*(_BYTE *)(v18 + 232))
      {
        sub_100244FC4(v18);
        v19 = *(_QWORD *)(a1 + 32);
        v20 = 52;
      }
      else
      {
        objc_storeStrong((id *)(v18 + 264), *(id *)(a1 + 40));
        v19 = *(_QWORD *)(a1 + 32);
        v20 = 42;
      }
    }
    else
    {
      v25 = objc_msgSend(v12, "UTF8String");
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 818, (uint64_t)v25, CFSTR("FriendSharingManager: transport set up"), v26, v27, v28, v29);
      v19 = *(_QWORD *)(a1 + 32);
      if (*(_BYTE *)(v19 + 232))
        v20 = 43;
      else
        v20 = 22;
    }
    sub_1002429CC(v19, v20);
  }
  else
  {
    v21 = objc_msgSend(objc_retainAutorelease(*(id *)(v9 + 328)), "UTF8String");
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 803, (uint64_t)v21, CFSTR("FriendSharingManager: Ignore transport setup result when in wrong state."), v22, v23, v24, a9);
  }
}

void sub_100244FC4(uint64_t a1)
{
  int v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id *v6;
  id *v7;
  void *v8;
  uint64_t v9;
  _BOOL8 v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  _BOOL4 v16;
  _BOOL4 v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BOOL8 v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  const __CFString *v35;
  void *v36;
  const __CFString *v37;
  void *v38;
  const __CFString *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  void *v43;
  unsigned int v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const __CFString *v49;
  uint64_t v50;
  void *v51;
  void *v52;
  uint64_t v53;
  void *v54;
  NSNumber *v55;
  void *v56;
  void *v57;
  void *v58;
  uint64_t v59;
  void *v60;
  NSNumber *v61;
  void *v62;
  void *v63;
  void *v64;
  uint64_t v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  id v71;
  void *v72;
  unsigned int v73;
  void *v74;
  int v75;
  void *v76;
  uint64_t v77;
  void *v78;
  unsigned int v79;
  void *v80;
  void *v81;
  void *v82;
  __CFString *v83;
  __CFString *v84;
  void *v85;
  __CFString *v86;
  unsigned int v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  _QWORD v92[27];
  _QWORD v93[27];

  if (a1)
  {
    if (sub_100234860(*(_QWORD *)(a1 + 240), *(void **)(a1 + 72)))
      v2 = 1;
    else
      v2 = 2;
    v87 = v2;
    v3 = sub_1000117D0(*(_QWORD *)(a1 + 32));
    v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    v5 = sub_100016AC8((uint64_t)v4);
    v6 = (id *)objc_claimAutoreleasedReturnValue(v5);
    v7 = sub_100253680(v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);

    v91 = v8;
    v9 = sub_10022D114((uint64_t)[KmlDeviceConfigurationData alloc], v8);
    v10 = sub_10022F124(v9);
    if (sub_10022F138(v9))
      v11 = 2;
    else
      v11 = 0;
    v12 = sub_1000117D0(*(_QWORD *)(a1 + 32));
    v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    v14 = sub_100016AC8((uint64_t)v13);
    v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    v16 = sub_1002539E0((uint64_t)v15) != 0;

    v90 = (void *)v9;
    v17 = sub_10022F160(v9) != 0;
    v18 = sub_1000117D0(*(_QWORD *)(a1 + 32));
    v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    v20 = sub_100016AC8((uint64_t)v19);
    v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
    v22 = sub_100253C20((uint64_t)v21);
    v23 = (void *)objc_claimAutoreleasedReturnValue(v22);

    v28 = v23 != 0;
    if (v23)
      v29 = objc_msgSend(v23, "u16BE:", 7);
    else
      v29 = 0;
    v77 = v11 | v10;
    v73 = v17 | (2 * v16);
    v30 = *(void **)(a1 + 264);
    if (v30)
    {
      v31 = 24;
      if (!*(_BYTE *)(a1 + 232))
        v31 = 16;
      v32 = *(_QWORD *)(a1 + v31);
      v71 = objc_msgSend(v30, "code");
    }
    else
    {
      v71 = 0;
      v32 = *(_QWORD *)(a1 + 8);
    }
    v33 = *(void **)(a1 + 104);
    v89 = v23;
    if (v33)
    {
      v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "manufacturer"));
      v35 = (const __CFString *)objc_msgSend(v34, "copy");

      v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 104), "brand"));
      v37 = (const __CFString *)objc_msgSend(v36, "copy");

      v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 104), "regionString"));
      v39 = (const __CFString *)objc_msgSend(v38, "copy");

    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlFriendSharingManager reportSharingEventToCA]", 1280, CFSTR("No routing info available"), v24, v25, v26, v27, v65);
      v39 = CFSTR("Unknown");
      v37 = CFSTR("Unknown");
      v35 = CFSTR("Unknown");
    }
    v75 = objc_msgSend(*(id *)(a1 + 216), "agreedKmlVehicleVersion") == 768;
    v40 = sub_1000117D0(*(_QWORD *)(a1 + 32));
    v41 = (void *)objc_claimAutoreleasedReturnValue(v40);
    v42 = sub_100016AC8((uint64_t)v41);
    v43 = (void *)objc_claimAutoreleasedReturnValue(v42);
    v44 = sub_1002530BC((uint64_t)v43);
    v79 = kmlUtilKeyClassOriginBitmap(v44);

    v45 = sub_100219A88(*(_QWORD *)(a1 + 216));
    v46 = objc_claimAutoreleasedReturnValue(v45);
    v92[0] = CFSTR("destination");
    v88 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v87));
    v93[0] = v88;
    v93[1] = &off_100323490;
    v92[1] = CFSTR("type");
    v92[2] = CFSTR("targetDeviceType");
    v85 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 360)));
    v93[2] = v85;
    v92[3] = CFSTR("step");
    v82 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v32));
    v93[3] = v82;
    v93[4] = v39;
    v86 = (__CFString *)v39;
    v92[4] = CFSTR("dataCenterCode");
    v92[5] = CFSTR("HUPDataSource");
    v81 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v28));
    v93[5] = v81;
    v92[6] = CFSTR("vehicleCapabilities");
    v80 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v29));
    v93[6] = v80;
    v93[7] = v35;
    v83 = (__CFString *)v37;
    v84 = (__CFString *)v35;
    v92[7] = CFSTR("manufacturer");
    v92[8] = CFSTR("brand");
    v93[8] = v37;
    v92[9] = CFSTR("transportSupported");
    v78 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v77));
    v93[9] = v78;
    v92[10] = CFSTR("totalSharedKeysOnFriendDevice");
    v76 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 288)));
    v93[10] = v76;
    v92[11] = CFSTR("status");
    v72 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v71));
    v93[11] = v72;
    v92[12] = CFSTR("activationOption");
    v74 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v73));
    v93[12] = v74;
    v92[13] = CFSTR("sharingTransport");
    if (*(_QWORD *)(a1 + 344))
      v47 = 2;
    else
      v47 = 1;
    v69 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v47));
    v93[13] = v69;
    v92[14] = CFSTR("pinAttempts");
    v68 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 296)));
    v93[14] = v68;
    v92[15] = CFSTR("appleToApple");
    v67 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(_QWORD *)(a1 + 72) != 0));
    v93[15] = v67;
    v92[16] = CFSTR("senderSupportedFrameworkVersions");
    v48 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%04X"), objc_msgSend(*(id *)(a1 + 216), "agreedKmlSharingVersion")));
    v66 = (void *)v48;
    v49 = &stru_100316BD0;
    v70 = (void *)v46;
    if (v46)
      v49 = (const __CFString *)v46;
    v93[16] = v48;
    v93[17] = v49;
    v92[17] = CFSTR("receiverSupportedFrameworkVersions");
    v92[18] = CFSTR("attestationChainLength");
    v50 = sub_1002225E0(*(_QWORD *)(a1 + 56));
    v51 = (void *)objc_claimAutoreleasedReturnValue(v50);
    v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v51, "count")));
    v93[18] = v52;
    v93[19] = &off_1003234A8;
    v92[19] = CFSTR("certificateChainLength");
    v92[20] = CFSTR("accountRole");
    v53 = sub_1000117DC(*(_QWORD *)(a1 + 32));
    v54 = (void *)objc_claimAutoreleasedReturnValue(v53);
    v55 = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", sub_10021E474((uint64_t)v54));
    v56 = (void *)objc_claimAutoreleasedReturnValue(v55);
    v93[20] = v56;
    v93[21] = &off_1003234A8;
    v92[21] = CFSTR("isIntraAccountShare");
    v92[22] = CFSTR("wasUserAuthRequired");
    v93[22] = &off_1003234A8;
    v92[23] = CFSTR("mailboxVersion");
    v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", (v75 << 7)));
    v93[23] = v57;
    v92[24] = CFSTR("frameworkVersion");
    v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", objc_msgSend(*(id *)(a1 + 216), "agreedKmlSharingVersion")));
    v93[24] = v58;
    v92[25] = CFSTR("accessProfile");
    v59 = sub_1000117DC(*(_QWORD *)(a1 + 32));
    v60 = (void *)objc_claimAutoreleasedReturnValue(v59);
    v61 = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", sub_10021E480((uint64_t)v60));
    v62 = (void *)objc_claimAutoreleasedReturnValue(v61);
    v93[25] = v62;
    v92[26] = CFSTR("keyClassOriginBitmap");
    v63 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v79));
    v93[26] = v63;
    v64 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v93, v92, 27));

    sub_100211BC8((uint64_t)KmlAnalyticsLogger, v64);
  }
}

void sub_1002457AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(v2 + 8);
  switch(v3)
  {
    case 43:
      if (!*(_QWORD *)(a1 + 40))
      {
LABEL_13:
        v23 = 52;
LABEL_14:
        sub_1002429CC(v2, v23);
        return;
      }
      v11 = objc_retainAutorelease(*(id *)(v2 + 328));
      v12 = objc_msgSend(v11, "UTF8String");
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 858, (uint64_t)v12, CFSTR("error sending cancel message over transport %@"), v13, v14, v15, *(_QWORD *)(a1 + 40));

LABEL_12:
      v2 = *(_QWORD *)(a1 + 32);
      goto LABEL_13;
    case 22:
      v16 = *(_QWORD *)(a1 + 40);
      v17 = objc_retainAutorelease(*(id *)(v2 + 328));
      if (v16)
      {
        v18 = v17;
        v19 = objc_msgSend(v18, "UTF8String");
        KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 846, (uint64_t)v19, CFSTR("error sending message over transport %@"), v20, v21, v22, *(_QWORD *)(a1 + 40));

        objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 264), *(id *)(a1 + 40));
        v2 = *(_QWORD *)(a1 + 32);
        v23 = 42;
      }
      else
      {
        v28 = objc_msgSend(v17, "UTF8String");
        KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 850, (uint64_t)v28, CFSTR("FriendSharingManager: Sharing request sent successfully"), v29, v30, v31, v32);
        v2 = *(_QWORD *)(a1 + 32);
        v23 = 23;
      }
      goto LABEL_14;
    case 1:
      v4 = *(_QWORD *)(a1 + 40);
      v5 = objc_retainAutorelease(*(id *)(v2 + 328));
      if (v4)
      {
        v6 = v5;
        v7 = objc_msgSend(v6, "UTF8String");
        KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 833, (uint64_t)v7, CFSTR("error sending message over transport %@"), v8, v9, v10, *(_QWORD *)(a1 + 40));

        objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 264), *(id *)(a1 + 40));
      }
      else
      {
        v24 = objc_msgSend(v5, "UTF8String");
        KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 837, (uint64_t)v24, CFSTR("Sharing invite request sent successfully"), v25, v26, v27, v32);
      }
      goto LABEL_12;
  }
}

void sub_1002459E0(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  KmlCancelMessage *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;
  int v16;
  NSString *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  unint64_t v33;
  uint64_t v34;
  void *v35;
  id v36;
  void *v37;
  void *v38;
  id *v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  NSString *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  void *v68;
  NSString *v69;
  void *v70;
  void *v71;
  void *v72;
  id v73;
  id v74;
  void *v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  void *v82;
  NSString *v83;
  void *v84;
  void *v85;
  void *v86;
  id v87;
  id WeakRetained;
  id v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  id v95;
  NSErrorUserInfoKey v96;
  void *v97;
  NSErrorUserInfoKey v98;
  void *v99;
  NSErrorUserInfoKey v100;
  void *v101;
  NSErrorUserInfoKey v102;
  void *v103;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "genericData"));
  v3 = objc_msgSend(v2, "messageType");

  if (v3 == (id)4)
  {
    v4 = *(_QWORD *)(a1 + 40);
    if (v4)
      v5 = *(void **)(v4 + 328);
    else
      v5 = 0;
    v6 = objc_msgSend(objc_retainAutorelease(v5), "UTF8String");
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 873, (uint64_t)v6, CFSTR("FriendSharingManager: Owner cancelled sharing request"), v7, v8, v9, v93);
    v10 = [KmlCancelMessage alloc];
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "genericData"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "message"));
    v13 = sub_10023803C(v10, v12);

    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
    if (v13)
    {
      v15 = sub_100238448((uint64_t)v13);
      v102 = NSLocalizedDescriptionKey;
      v16 = sub_100238448((uint64_t)v13);
      v17 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(v16));
      v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
      v103 = v18;
      v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v103, &v102, 1));
      v20 = v14;
      v21 = v15;
    }
    else
    {
      v100 = NSLocalizedDescriptionKey;
      v58 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(103));
      v18 = (void *)objc_claimAutoreleasedReturnValue(v58);
      v101 = v18;
      v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v101, &v100, 1));
      v20 = v14;
      v21 = 103;
    }
    v59 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v20, v21, v19));
    v60 = *(_QWORD *)(a1 + 40);
    v61 = *(void **)(v60 + 264);
    *(_QWORD *)(v60 + 264) = v59;

    goto LABEL_17;
  }
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "genericData"));
  v23 = objc_msgSend(v22, "messageType");

  v24 = *(_QWORD *)(a1 + 40);
  if (v23 != (id)6)
  {
    v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "genericData"));
    v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "message"));
    v39 = sub_100244D30((id *)v24, v38);
    v13 = (id)objc_claimAutoreleasedReturnValue(v39);

    v40 = *(_QWORD *)(a1 + 40);
    if (!v13)
    {
      if (v40)
        v75 = *(void **)(v40 + 328);
      else
        v75 = 0;
      v76 = objc_msgSend(objc_retainAutorelease(v75), "UTF8String");
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 907, (uint64_t)v76, CFSTR("We will only handle signed request at this point. This message is not that"), v77, v78, v79, v93);
      v80 = objc_alloc((Class)DAShareRecipientResult);
      v81 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 336);
      v82 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
      v96 = NSLocalizedDescriptionKey;
      v83 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(214));
      v84 = (void *)objc_claimAutoreleasedReturnValue(v83);
      v97 = v84;
      v85 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v97, &v96, 1));
      v86 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v82, 214, v85));
      v87 = objc_msgSend(v80, "initFailureResultWithCrdentialIdentifier:error:", v81, v86);

      WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 40) + 304));
      objc_msgSend(WeakRetained, "handleRecipientMessageResult:", v87);

      goto LABEL_19;
    }
    if (*(_QWORD *)(v40 + 8) != 23)
    {
LABEL_19:

      return;
    }
    v41 = *(_QWORD *)(v40 + 80);
    v42 = objc_retainAutorelease(*(id *)(v40 + 328));
    if (v41)
    {
      v43 = v42;
      v44 = objc_msgSend(v43, "UTF8String");
      v45 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);

      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 920, (uint64_t)v44, CFSTR("Received signed response in state - %ld"), v46, v47, v48, v45);
      v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("SignedResponse - %@"), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 328)));
      v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "genericData"));
      v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "message"));
      kmlUtilLogLargeData(v49, v51);

      objc_storeStrong((id *)(*(_QWORD *)(a1 + 40) + 56), v13);
      v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "additionalData"));
      v53 = objc_claimAutoreleasedReturnValue(objc_msgSend(v52, "initiatorIdsPseudonym"));
      v54 = *(_QWORD *)(a1 + 40);
      v55 = *(void **)(v54 + 72);
      *(_QWORD *)(v54 + 72) = v53;

      sub_100013B00(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 248), *(void **)(*(_QWORD *)(a1 + 40) + 72));
      v56 = *(_QWORD *)(a1 + 40);
      v57 = 31;
LABEL_18:
      sub_1002429CC(v56, v57);
      goto LABEL_19;
    }
    v89 = objc_msgSend(v42, "UTF8String");
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 915, (uint64_t)v89, CFSTR("Failed to look up endpoint"), v90, v91, v92, v93);
LABEL_17:
    v56 = *(_QWORD *)(a1 + 40);
    v57 = 51;
    goto LABEL_18;
  }
  if (v24)
    v25 = *(void **)(v24 + 328);
  else
    v25 = 0;
  v26 = objc_msgSend(objc_retainAutorelease(v25), "UTF8String");
  KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 887, (uint64_t)v26, CFSTR("Owner is requesting password re-entry"), v27, v28, v29, v93);
  v30 = *(_QWORD *)(a1 + 40);
  v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "genericData"));
  v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "message"));
  v33 = sub_100246124(v30, v32);

  v34 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(v34 + 8) == 23)
  {
    v35 = (void *)objc_claimAutoreleasedReturnValue(+[KmlClientReporterFactory getReporter](KmlClientReporterFactory, "getReporter"));
    objc_msgSend(v35, "passcodeRetryRequestedFor:retriesLeft:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 336), v33);

    v95 = objc_msgSend(objc_alloc((Class)DAShareRecipientResult), "initPasscodeFailureResultWithCredentialIdentifier:retryCount:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 336), v33);
    v36 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 40) + 304));
    objc_msgSend(v36, "handleRecipientMessageResult:", v95);

  }
  else
  {
    v62 = objc_msgSend(objc_retainAutorelease(*(id *)(v34 + 328)), "UTF8String");
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 897, (uint64_t)v62, CFSTR("We are not waiting for signedResponse, it needs to be ignored"), v63, v64, v65, v94);
    v66 = objc_alloc((Class)DAShareRecipientResult);
    v67 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 336);
    v68 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
    v98 = NSLocalizedDescriptionKey;
    v69 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(214));
    v70 = (void *)objc_claimAutoreleasedReturnValue(v69);
    v99 = v70;
    v71 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v99, &v98, 1));
    v72 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v68, 214, v71));
    v73 = objc_msgSend(v66, "initFailureResultWithCrdentialIdentifier:error:", v67, v72);

    v74 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 40) + 304));
    objc_msgSend(v74, "handleRecipientMessageResult:", v73);

  }
}

unint64_t sub_100246124(uint64_t a1, void *a2)
{
  id v2;
  id v3;
  unint64_t v4;
  uint64_t v5;
  void *i;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  if (!a1)
    return 0;
  v2 = sub_10022C7A4((uint64_t)KmlTlv, a2);
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v3 = (id)objc_claimAutoreleasedReturnValue(v2);
  v4 = (unint64_t)objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v10;
    while (2)
    {
      for (i = 0; i != (void *)v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v10 != v5)
          objc_enumerationMutation(v3);
        v7 = *(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)i);
        if (sub_100055868(v7) == 40727)
        {
          v4 = sub_10022CEB0(v7);
          goto LABEL_12;
        }
      }
      v4 = (unint64_t)objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      if (v4)
        continue;
      break;
    }
  }
LABEL_12:

  return v4;
}

void sub_100246254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v11 = a1 + 32;
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(v11 + 8);
  if (v10 <= *(_QWORD *)(v9 + 8))
  {
    v12 = objc_msgSend(objc_retainAutorelease(*(id *)(v9 + 328)), "UTF8String");
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 940, (uint64_t)v12, CFSTR("FriendSharingManager: Current state higher than new state. Do nothing"), v13, v14, v15, a9);
  }
  else
  {
    sub_1002462A4(v9, v10, a3, a4, a5, a6, a7, a8, a9);
  }
}

void sub_1002462A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  NSObject *v23;
  NSObject *v24;
  os_signpost_id_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  id v45;
  void *v46;
  id v47;
  void *v48;
  id v49;
  NSObject *v50;
  NSObject *v51;
  os_signpost_id_t v52;
  id v53;
  void *v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  NSObject *v65;
  NSObject *v66;
  os_signpost_id_t v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  NSObject *v73;
  NSObject *WeakRetained;
  os_signpost_id_t v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  NSObject *v81;
  NSObject *v82;
  os_signpost_id_t v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  NSObject *v89;
  NSObject *v90;
  os_signpost_id_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  id v99;
  uint64_t v100;
  void *v101;
  id v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  id v107;
  NSObject *v108;
  NSObject *v109;
  os_signpost_id_t v110;
  id v111;
  void *v112;
  id v113;
  id v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  id v119;
  id v120;
  id v121;
  id v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  id v126;
  NSObject *v127;
  NSObject *v128;
  os_signpost_id_t v129;
  uint64_t v130;
  id v131;
  id v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  id v136;
  NSObject *v137;
  NSObject *v138;
  os_signpost_id_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  id v143;
  NSObject *v144;
  NSObject *v145;
  os_signpost_id_t v146;
  uint64_t v147;
  id v148;
  id v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  id v153;
  id v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  id v158;
  NSObject *v159;
  NSObject *v160;
  os_signpost_id_t v161;
  uint64_t v162;
  void *v163;
  id v164;
  id v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  id v169;
  NSObject *v170;
  NSObject *v171;
  os_signpost_id_t v172;
  uint64_t v173;
  void *v174;
  id v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  id v182;
  _QWORD v183[5];
  uint8_t buf[4];
  uint64_t v185;

  if (a1)
  {
    v11 = objc_retainAutorelease(*(id *)(a1 + 328));
    v12 = objc_msgSend(v11, "UTF8String");
    v13 = *(_QWORD *)(a1 + 8);

    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 950, (uint64_t)v12, CFSTR("FriendSharingManager: Current state %ld, new state %ld"), v14, v15, v16, v13);
    v17 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v17;
    if (a2 <= 20)
    {
      switch(a2)
      {
        case 1:
          v22 = KmlSignpostLogger();
          v23 = objc_claimAutoreleasedReturnValue(v22);
          v24 = v23;
          v25 = *(_QWORD *)(a1 + 256);
          if (v25 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v23))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v24, OS_SIGNPOST_EVENT, v25, "FriendSilentSharingRequest", "", buf, 2u);
          }

          sub_100247260(a1);
          return;
        case 2:
          v30 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 328)), "UTF8String");
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 965, (uint64_t)v30, CFSTR("Waiting to receive sharing invite"), v31, v32, v33, a9);
          return;
        case 3:
          sub_10024733C(a1);
          return;
        case 11:
          v34 = *(_QWORD *)(a1 + 112);
          v183[0] = _NSConcreteStackBlock;
          v183[1] = 3221225472;
          v183[2] = sub_1002476BC;
          v183[3] = &unk_10030F108;
          v183[4] = a1;
          SESEndPointPreWarm(v34, v183);
          sub_100247738(a1);
          if (*(_QWORD *)(a1 + 344))
          {
            v35 = *(unsigned __int8 *)(a1 + 233);
            v36 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 328)), "UTF8String");
            if (v35)
            {
              KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 985, (uint64_t)v36, CFSTR("This Cross platform sharing invitation was accepted by user first."), v37, v38, v39, v179);
              sub_1002429CC(a1, 12);
              goto LABEL_87;
            }
            KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 988, (uint64_t)v36, CFSTR("This Cross platform sharing invitation was parsed first. Waiting for user to accept."), v37, v38, v39, v179);
            WeakRetained = objc_loadWeakRetained((id *)(a1 + 304));
            -[NSObject handleCrossPlatformParseInvitationStatus:](WeakRetained, "handleCrossPlatformParseInvitationStatus:", 0);
          }
          else
          {
            v165 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 328)), "UTF8String");
            KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 993, (uint64_t)v165, CFSTR("Received sharing invite intended for us. Pop it up to user."), v166, v167, v168, v179);
            v169 = KmlSignpostLogger();
            v170 = objc_claimAutoreleasedReturnValue(v169);
            v171 = v170;
            v172 = *(_QWORD *)(a1 + 256);
            if (v172 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v170))
            {
              *(_WORD *)buf = 0;
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v171, OS_SIGNPOST_EVENT, v172, "FriendSharingInviteReceived", "", buf, 2u);
            }

            WeakRetained = objc_claimAutoreleasedReturnValue(+[KmlClientReporterFactory getReporter](KmlClientReporterFactory, "getReporter"));
            -[NSObject didReceiveSharingInvitationWithIdentifier:uuid:metadata:ownerIdsId:](WeakRetained, "didReceiveSharingInvitationWithIdentifier:uuid:metadata:ownerIdsId:", *(_QWORD *)(a1 + 328), *(_QWORD *)(a1 + 352), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 72));
          }
LABEL_86:

LABEL_87:
          sub_100247BDC(a1);
          break;
        case 12:
          *(_QWORD *)(a1 + 288) = sub_10025486C((uint64_t)KmlEndpointManager, CFSTR("FRND"));
          v40 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 328)), "UTF8String");
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1009, (uint64_t)v40, CFSTR("Generate signing request"), v41, v42, v43, v179);
          sub_100247BDC(a1);
          v44 = *(void **)(a1 + 264);
          *(_QWORD *)(a1 + 264) = 0;

          v45 = sub_100247DC4(a1);
          v46 = (void *)objc_claimAutoreleasedReturnValue(v45);
          v182 = v46;
          if (v46)
          {
            v47 = v46;
            v48 = *(void **)(a1 + 264);
            *(_QWORD *)(a1 + 264) = v47;
          }
          else
          {
            sub_1002496DC(a1);
            sub_1002497E0(a1);
            sub_10024998C(a1);
            v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("SigningRequest - %@"), *(_QWORD *)(a1 + 328), a2, 0));
            kmlUtilLogLargeData(v48, *(void **)(a1 + 48));
          }

          if (*(_QWORD *)(a1 + 264))
            v173 = 42;
          else
            v173 = 13;
          sub_1002429CC(a1, v173);

          return;
        case 13:
          v49 = KmlSignpostLogger();
          v50 = objc_claimAutoreleasedReturnValue(v49);
          v51 = v50;
          v52 = *(_QWORD *)(a1 + 256);
          if (v52 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v50))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v51, OS_SIGNPOST_EVENT, v52, "FriendSharingWaitForBindingAttestation", "", buf, 2u);
          }

          v53 = objc_msgSend(objc_alloc((Class)DAKeyInformation), "initWithEndpoint:", *(_QWORD *)(a1 + 80));
          v54 = *(void **)(a1 + 320);
          *(_QWORD *)(a1 + 320) = v53;

          sub_100249B50(a1);
          v55 = *(_QWORD *)(a1 + 344);
          v56 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 328)), "UTF8String");
          if (v55)
          {
            KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1044, (uint64_t)v56, CFSTR("Not waiting For binding attestation in cross-platform case"), v57, v58, v59, v179);
            sub_1002429CC(a1, 21);
          }
          else
          {
            KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1048, (uint64_t)v56, CFSTR("Wait For binding attestation"), v57, v58, v59, v179);
            sub_100247BDC(a1);
          }
          if (isInternalBuild())
          {
            v119 = objc_msgSend(objc_alloc((Class)NSUserDefaults), "initWithSuiteName:", CFSTR("com.apple.seserviced"));
            v174 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v119, "objectForKey:", CFSTR("BindingAttestationSkip")));
            if (v174)
            {
              v175 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 328)), "UTF8String");
              KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1056, (uint64_t)v175, CFSTR("User default is asking to skip binding attestation. Rolling through this state"), v176, v177, v178, v180);
              sub_1002429CC(a1, 21);
            }

            goto LABEL_68;
          }
          return;
        default:
          return;
      }
    }
    else
    {
      switch(a2)
      {
        case 21:
          v18 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 328)), "UTF8String");
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1063, (uint64_t)v18, CFSTR("Check connection"), v19, v20, v21, v179);
          sub_100234518(*(_QWORD *)(a1 + 240), (void *)a1, *(void **)(a1 + 328));
          if (*(_QWORD *)(a1 + 344))
          {
            if (*(_BYTE *)(a1 + 232))
              sub_1002429CC(a1, 43);
            else
              sub_1002429CC(a1, 23);
          }
          else
          {
            sub_100247BDC(a1);
            sub_1002347A4(*(_QWORD *)(a1 + 240), *(void **)(a1 + 328));
          }
          return;
        case 22:
          v60 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 328)), "UTF8String");
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1081, (uint64_t)v60, CFSTR("Send signing request"), v61, v62, v63, v179);
          v64 = KmlSignpostLogger();
          v65 = objc_claimAutoreleasedReturnValue(v64);
          v66 = v65;
          v67 = *(_QWORD *)(a1 + 256);
          if (v67 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v65))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v66, OS_SIGNPOST_EVENT, v67, "FriendSharingSendRequest", "", buf, 2u);
          }

          sub_100234AC4(*(_QWORD *)(a1 + 240), *(void **)(a1 + 48), 0, *(void **)(a1 + 136), *(void **)(a1 + 328), *(void **)(a1 + 336), *(void **)(a1 + 352), *(void **)(a1 + 72), 1, 2);
          return;
        case 23:
          v68 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 328)), "UTF8String");
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1097, (uint64_t)v68, CFSTR("Wait for signed response from the owner"), v69, v70, v71, v179);
          v72 = KmlSignpostLogger();
          v73 = objc_claimAutoreleasedReturnValue(v72);
          WeakRetained = v73;
          v75 = *(_QWORD *)(a1 + 256);
          if (v75 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v73))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, WeakRetained, OS_SIGNPOST_EVENT, v75, "FriendSharingWaitForSignedRequest", "", buf, 2u);
          }
          goto LABEL_86;
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
          return;
        case 31:
          v76 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 328)), "UTF8String");
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1104, (uint64_t)v76, CFSTR("Preparing mailbox data based on signed response from owner"), v77, v78, v79, v179);
          v80 = KmlSignpostLogger();
          v81 = objc_claimAutoreleasedReturnValue(v80);
          v82 = v81;
          v83 = *(_QWORD *)(a1 + 256);
          if (v83 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v81))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v82, OS_SIGNPOST_EVENT, v83, "FriendSharingReceivedSignedRequest", "", buf, 2u);
          }

          sub_100249CA4(a1);
          return;
        case 32:
          v84 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 328)), "UTF8String");
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1110, (uint64_t)v84, CFSTR("Create and save tracking request"), v85, v86, v87, v179);
          v88 = KmlSignpostLogger();
          v89 = objc_claimAutoreleasedReturnValue(v88);
          v90 = v89;
          v91 = *(_QWORD *)(a1 + 256);
          if (v91 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v89))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v90, OS_SIGNPOST_EVENT, v91, "FriendSharingBuildTrackingRequest", "", buf, 2u);
          }

          sub_10024A470(a1, v92, v93, v94, v95, v96, v97, v98, v181);
          v99 = sub_10024A964(a1);
          v100 = objc_claimAutoreleasedReturnValue(v99);
          v101 = *(void **)(a1 + 264);
          *(_QWORD *)(a1 + 264) = v100;

          if (*(_QWORD *)(a1 + 264))
          {
            v102 = objc_retainAutorelease(*(id *)(a1 + 328));
            v103 = objc_msgSend(v102, "UTF8String");
            KmlSharingLogFunc(OS_LOG_TYPE_ERROR, (uint64_t)"KmlFriendSharingManager.m", 1116, (uint64_t)v103, CFSTR("Failed to Create and save tracking request - %@"), v104, v105, v106, *(_QWORD *)(a1 + 264));

LABEL_55:
            v141 = a1;
            v142 = 51;
          }
          else
          {
            v141 = a1;
            v142 = 33;
          }
          sub_1002429CC(v141, v142);
          return;
        case 33:
          v107 = KmlSignpostLogger();
          v108 = objc_claimAutoreleasedReturnValue(v107);
          v109 = v108;
          v110 = *(_QWORD *)(a1 + 256);
          if (v110 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v108))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v109, OS_SIGNPOST_EVENT, v110, "FriendSharingSuccess", "", buf, 2u);
          }

          v111 = objc_msgSend(objc_alloc((Class)DAKeyInformation), "initWithEndpoint:", *(_QWORD *)(a1 + 80));
          v112 = *(void **)(a1 + 320);
          *(_QWORD *)(a1 + 320) = v111;

          v113 = objc_retainAutorelease(*(id *)(a1 + 328));
          v114 = objc_msgSend(v113, "UTF8String");
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1129, (uint64_t)v114, CFSTR("Successfully received key as friend - %@"), v115, v116, v117, *(_QWORD *)(a1 + 320));

          v118 = (void *)objc_claimAutoreleasedReturnValue(+[KmlClientReporterFactory getReporter](KmlClientReporterFactory, "getReporter"));
          objc_msgSend(v118, "finishedSharingForKey:result:", *(_QWORD *)(a1 + 320), 0);

          v119 = objc_msgSend(objc_alloc((Class)DAShareRecipientResult), "initCredentialProvisionedResultWithCredentialIdentifier:keyInformation:", *(_QWORD *)(a1 + 336), *(_QWORD *)(a1 + 320));
          v120 = objc_loadWeakRetained((id *)(a1 + 304));
          objc_msgSend(v120, "handleRecipientMessageResult:", v119);

          goto LABEL_67;
        case 41:
          v121 = objc_retainAutorelease(*(id *)(a1 + 328));
          v122 = objc_msgSend(v121, "UTF8String");
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1145, (uint64_t)v122, CFSTR("Invite is no longer usable due to : %@"), v123, v124, v125, *(_QWORD *)(a1 + 264));

          v126 = KmlSignpostLogger();
          v127 = objc_claimAutoreleasedReturnValue(v126);
          v128 = v127;
          v129 = *(_QWORD *)(a1 + 256);
          if (v129 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v127))
          {
            v130 = *(_QWORD *)(a1 + 264);
            *(_DWORD *)buf = 138412290;
            v185 = v130;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v128, OS_SIGNPOST_EVENT, v129, "FriendSharingInviteUnusable", "reason - %@", buf, 0xCu);
          }

          v119 = (id)objc_claimAutoreleasedReturnValue(+[KmlClientReporterFactory getReporter](KmlClientReporterFactory, "getReporter"));
          objc_msgSend(v119, "reportUnusableInvitation:reason:", *(_QWORD *)(a1 + 328), *(_QWORD *)(a1 + 264));
          goto LABEL_67;
        case 42:
          v131 = objc_retainAutorelease(*(id *)(a1 + 328));
          v132 = objc_msgSend(v131, "UTF8String");
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1156, (uint64_t)v132, CFSTR("Failed to start exchange due to : %@"), v133, v134, v135, *(_QWORD *)(a1 + 264));

          v136 = KmlSignpostLogger();
          v137 = objc_claimAutoreleasedReturnValue(v136);
          v138 = v137;
          v139 = *(_QWORD *)(a1 + 256);
          if (v139 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v137))
          {
            v140 = *(_QWORD *)(a1 + 264);
            *(_DWORD *)buf = 138412290;
            v185 = v140;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v138, OS_SIGNPOST_EVENT, v139, "FriendSharingFailedToSend", "reason - %@", buf, 0xCu);
          }

          sub_100249B50(a1);
          goto LABEL_55;
        case 43:
          v143 = KmlSignpostLogger();
          v144 = objc_claimAutoreleasedReturnValue(v143);
          v145 = v144;
          v146 = *(_QWORD *)(a1 + 256);
          if (v146 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v144))
          {
            v147 = *(_QWORD *)(a1 + 264);
            *(_DWORD *)buf = 138412290;
            v185 = v147;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v145, OS_SIGNPOST_EVENT, v146, "FriendSharingCancelled", "reason - %@", buf, 0xCu);
          }

          sub_100247BDC(a1);
          sub_100244FC4(a1);
          sub_10024AE0C(a1);
          return;
        case 44:
          v148 = objc_retainAutorelease(*(id *)(a1 + 328));
          v149 = objc_msgSend(v148, "UTF8String");
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1174, (uint64_t)v149, CFSTR("Failed to parse invite due to : %@"), v150, v151, v152, *(_QWORD *)(a1 + 264));

          v153 = objc_loadWeakRetained((id *)(a1 + 304));
          objc_msgSend(v153, "handleCrossPlatformParseInvitationStatus:", *(_QWORD *)(a1 + 264));

          sub_1002429CC(a1, 52);
          return;
        default:
          if (a2 != 51)
          {
            if (a2 == 52)
            {
              v26 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 328)), "UTF8String");
              KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1200, (uint64_t)v26, CFSTR("FriendSharingManager: Ready for cleanup."), v27, v28, v29, v179);
              sub_100234668(*(_QWORD *)(a1 + 240), *(void **)(a1 + 328));
              sub_100247BDC(a1);
            }
            return;
          }
          v154 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 328)), "UTF8String");
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1182, (uint64_t)v154, CFSTR("Error while receiving shared key."), v155, v156, v157, v179);
          v158 = KmlSignpostLogger();
          v159 = objc_claimAutoreleasedReturnValue(v158);
          v160 = v159;
          v161 = *(_QWORD *)(a1 + 256);
          if (v161 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v159))
          {
            v162 = *(_QWORD *)(a1 + 264);
            *(_DWORD *)buf = 138412290;
            v185 = v162;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v160, OS_SIGNPOST_EVENT, v161, "FriendSharingFailed", "error - %@", buf, 0xCu);
          }

          v163 = (void *)objc_claimAutoreleasedReturnValue(+[KmlClientReporterFactory getReporter](KmlClientReporterFactory, "getReporter"));
          objc_msgSend(v163, "finishedSharingForKey:result:", *(_QWORD *)(a1 + 320), *(_QWORD *)(a1 + 264));

          v119 = objc_msgSend(objc_alloc((Class)DAShareRecipientResult), "initFailureResultWithCrdentialIdentifier:error:", *(_QWORD *)(a1 + 336), *(_QWORD *)(a1 + 264));
          v164 = objc_loadWeakRetained((id *)(a1 + 304));
          objc_msgSend(v164, "handleRecipientMessageResult:", v119);

          sub_100243588(a1);
LABEL_67:
          sub_100244FC4(a1);
          sub_1002429CC(a1, 52);
          break;
      }
LABEL_68:

    }
  }
}

void sub_100247260(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;

  if (a1)
  {
    v2 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 328)), "UTF8String");
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1212, (uint64_t)v2, CFSTR("Sending invite request message."), v3, v4, v5, v11);
    v12 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithLength:](NSMutableData, "dataWithLength:", 32));
    v6 = *(_QWORD *)(a1 + 240);
    v7 = *(void **)(a1 + 328);
    v8 = *(void **)(a1 + 352);
    v9 = *(void **)(a1 + 72);
    if (MGGetSInt32Answer(CFSTR("DeviceClassNumber"), 0xFFFFFFFFLL) == 6)
      v10 = 2;
    else
      v10 = 1;
    sub_100234AC4(v6, v12, 0, 0, v7, 0, v8, v9, v10, 8);

  }
}

void sub_10024733C(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __CFString *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  NSString *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSErrorUserInfoKey v39;
  void *v40;

  if (!a1)
    return;
  v2 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 328)), "UTF8String");
  KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 2144, (uint64_t)v2, CFSTR("Validating if the invite is for this device."), v3, v4, v5, v36);
  v6 = MGGetSInt32Answer(CFSTR("DeviceClassNumber"), 0xFFFFFFFFLL);
  if (v6 == 1)
  {
    v14 = *(_QWORD *)(a1 + 360);
    switch(v14)
    {
      case 255:
        goto LABEL_10;
      case 2:
        if (!*(_QWORD *)(a1 + 344))
        {
          v15 = (void *)objc_claimAutoreleasedReturnValue(+[NRPairedDeviceRegistry sharedInstance](NRPairedDeviceRegistry, "sharedInstance"));
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "getActivePairedDevice"));

          v17 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 328)), "UTF8String");
          if (!v16)
          {
            KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 2171, (uint64_t)v17, CFSTR("Invite is intended for watch. But we don't have a paired watch. Check for a watch logged into our iCloud account."), v18, v19, v20, v37);
            sub_10024B7DC(a1);
            return;
          }
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 2175, (uint64_t)v17, CFSTR("We do have a watch paired with this phone. Let the watch handle it's copy of invite."), v18, v19, v20, v37);

        }
        break;
      case 1:
LABEL_10:
        *(_QWORD *)(a1 + 360) = 1;
        v8 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 328)), "UTF8String");
        v12 = CFSTR("Invite is intended for phone. Good to go on phone");
        v13 = 2160;
        goto LABEL_11;
    }
  }
  else if (v6 == 6)
  {
    v7 = *(_QWORD *)(a1 + 360);
    if (v7 == 255 || v7 == 2)
    {
      *(_QWORD *)(a1 + 360) = 2;
      v8 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 328)), "UTF8String");
      v12 = CFSTR("Invite is intended for watch. Good to go on watch");
      v13 = 2152;
LABEL_11:
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", v13, (uint64_t)v8, v12, v9, v10, v11, v37);
      sub_1002429CC(a1, 11);
      return;
    }
  }
  v21 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 328)), "UTF8String");
  KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 2184, (uint64_t)v21, CFSTR("We are not supposed to handle this invite."), v22, v23, v24, v37);
  if (*(_QWORD *)(a1 + 344))
  {
    v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
    v39 = NSLocalizedDescriptionKey;
    v26 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(115));
    v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
    v40 = v27;
    v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v40, &v39, 1));
    v29 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v25, 115, v28));
    v30 = *(void **)(a1 + 264);
    *(_QWORD *)(a1 + 264) = v29;

    if (*(_BYTE *)(a1 + 233))
      v31 = 42;
    else
      v31 = 44;
    sub_1002429CC(a1, v31);
  }
  else
  {
    v32 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 328)), "UTF8String");
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 2194, (uint64_t)v32, CFSTR("clean up"), v33, v34, v35, v38);
    sub_10023470C(*(_QWORD *)(a1 + 240), *(void **)(a1 + 72));
    sub_1002429CC(a1, 52);
  }
}

void sub_1002476BC(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
    v4 = *(void **)(v3 + 328);
  else
    v4 = 0;
  v5 = objc_retainAutorelease(v4);
  v10 = a2;
  v6 = objc_msgSend(v5, "UTF8String");
  KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 974, (uint64_t)v6, CFSTR("Prewarm result : %@"), v7, v8, v9, (uint64_t)v10);

}

void sub_100247738(uint64_t a1)
{
  void *v2;
  KmlDeviceConfigurationData *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id *v7;
  id *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  _WORD *v26;
  void *v27;
  _WORD *v28;
  void *v29;
  void *v30;
  _WORD *v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  void *i;
  id v39;
  void *v40;
  _WORD *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  id v46;
  void *v47;
  uint64_t v48;
  id v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  void *v56;
  id v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  id v62;
  void *v63;
  uint64_t v64;
  void *v65;
  void *v66;
  void *v67;
  id v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[128];

  if (a1)
  {
    v2 = *(void **)(a1 + 272);
    *(_QWORD *)(a1 + 272) = 0;

    v3 = [KmlDeviceConfigurationData alloc];
    v4 = sub_1000117D0(*(_QWORD *)(a1 + 32));
    v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    v6 = sub_100016AC8((uint64_t)v5);
    v7 = (id *)objc_claimAutoreleasedReturnValue(v6);
    v8 = sub_100253680(v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    v10 = (void *)sub_10022D114((uint64_t)v3, v9);

    v11 = sub_10021728C((uint64_t)v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);

    if (v12)
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlFriendSharingManager createPpidFetchRequest]", 1899, CFSTR("We received Product Plan Identifier from invite. Not need to fetch from server."), v13, v14, v15, v16, v64);
      v17 = *(void **)(a1 + 192);
      *(_QWORD *)(a1 + 192) = 0;

    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlFriendSharingManager createPpidFetchRequest]", 1904, CFSTR("We need to construct Product Plan Identifier request to fetch from server."), v13, v14, v15, v16, v64);
      v18 = sub_10024B4E0(a1);
      v19 = objc_claimAutoreleasedReturnValue(v18);
      if (v19)
      {
        v20 = (id)v19;
        v21 = 0;
      }
      else
      {
        v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 104), "readerIdentifier"));
        v24 = kmlUtilDataForHexString(v23);
        v25 = (void *)objc_claimAutoreleasedReturnValue(v24);

        v67 = v25;
        v26 = sub_10022CB3C((uint64_t)KmlTlv, 77, v25);
        v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
        objc_msgSend(v22, "addObject:", v27);

        v28 = sub_10022CB3C((uint64_t)KmlTlv, 24393, *(void **)(a1 + 160));
        v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
        objc_msgSend(v22, "addObject:", v29);

        v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("ECIES_v1"), "dataUsingEncoding:", 4));
        v31 = sub_10022CB3C((uint64_t)KmlTlv, 218, v30);
        v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
        objc_msgSend(v22, "addObject:", v32);

        v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData data](NSMutableData, "data"));
        v69 = 0u;
        v70 = 0u;
        v71 = 0u;
        v72 = 0u;
        v34 = v22;
        v35 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
        if (v35)
        {
          v36 = v35;
          v37 = *(_QWORD *)v70;
          do
          {
            for (i = 0; i != v36; i = (char *)i + 1)
            {
              if (*(_QWORD *)v70 != v37)
                objc_enumerationMutation(v34);
              v39 = sub_10022D014(*(_QWORD *)(*((_QWORD *)&v69 + 1) + 8 * (_QWORD)i));
              v40 = (void *)objc_claimAutoreleasedReturnValue(v39);
              objc_msgSend(v33, "appendData:", v40);

            }
            v36 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v69, v73, 16);
          }
          while (v36);
        }

        v41 = sub_10022CB3C((uint64_t)KmlTlv, 32595, v33);
        v65 = (void *)objc_claimAutoreleasedReturnValue(v41);
        v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 104), "regionString"));
        v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "substringWithRange:", 0, 2));
        v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "substringWithRange:", 2, 1));
        v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 104), "manufacturer"));
        v46 = sub_10022D014((uint64_t)v65);
        v47 = (void *)objc_claimAutoreleasedReturnValue(v46);
        v68 = 0;
        v48 = SESEndPointPrivacyEncryptionWithManufacturer(v45, v44, v43, v47, &v68);
        v66 = (void *)objc_claimAutoreleasedReturnValue(v48);
        v20 = v68;

        if (!v20)
        {
          v57 = objc_alloc((Class)DAAlishaKeyEncryptedRequest);
          v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v66, "version"));
          v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v66, "ephemeralPublicKeydata"));
          v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v66, "receiverPublicKeyHash"));
          v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v66, "cipherText"));
          v62 = objc_msgSend(v57, "initWithVersion:ephemeralPublicKey:publicKeyHash:encryptedRequest:", v58, v59, v60, v61);
          v63 = *(void **)(a1 + 192);
          *(_QWORD *)(a1 + 192) = v62;

          goto LABEL_16;
        }
        v21 = v66;
      }
      v49 = objc_retainAutorelease(*(id *)(a1 + 328));
      v50 = objc_msgSend(v49, "UTF8String");
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1933, (uint64_t)v50, CFSTR("Failed to encrypt pre-track request with - %@"), v51, v52, v53, (uint64_t)v20);

      v54 = sesErrorToKmlError(v20, 0x78u);
      v55 = objc_claimAutoreleasedReturnValue(v54);
      v56 = *(void **)(a1 + 272);
      *(_QWORD *)(a1 + 272) = v55;

    }
LABEL_16:

  }
}

void sub_100247BDC(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  id v17;

  if (a1)
  {
    v2 = objc_retainAutorelease(*(id *)(a1 + 328));
    v3 = objc_msgSend(v2, "UTF8String");
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 2380, (uint64_t)v3, CFSTR("Saving sharing record for invitation (%@)"), v4, v5, v6, *(_QWORD *)(a1 + 328));

    v7 = sub_10024BD68(a1);
    sub_10022B524(*(_QWORD *)(a1 + 248), v7);
    sub_10022B504(*(_QWORD *)(a1 + 248), *(void **)(a1 + 336));
    sub_10022B530(*(_QWORD *)(a1 + 248), *(_QWORD *)(a1 + 296));
    if (*(uint64_t *)(a1 + 8) < 24)
    {
      sub_10021F9A8(*(_QWORD *)(a1 + 248), *(void **)(a1 + 136));
      sub_1000536E4(*(_QWORD *)(a1 + 248), *(void **)(a1 + 48));
      sub_10022B4D4(*(_QWORD *)(a1 + 248), *(void **)(a1 + 160));
      sub_10022B4E4(*(_QWORD *)(a1 + 248), *(void **)(a1 + 168));
      v8 = *(void **)(a1 + 192);
      if (v8)
      {
        v17 = 0;
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "encodeWithError:", &v17));
        v10 = v17;
        sub_1002225D0(*(_QWORD *)(a1 + 248), v9);

      }
      else
      {
        sub_1002225D0(*(_QWORD *)(a1 + 248), 0);
        v10 = 0;
      }
      v11 = *(void **)(a1 + 184);
      if (v11)
      {
        v16 = v10;
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "encodeWithError:", &v16));
        v13 = v16;

        sub_10022B4F4(*(_QWORD *)(a1 + 248), v12);
        v10 = v13;
      }
      else
      {
        sub_10022B4F4(*(_QWORD *)(a1 + 248), 0);
      }

    }
    else
    {
      sub_10021F9A8(*(_QWORD *)(a1 + 248), 0);
      sub_1000536E4(*(_QWORD *)(a1 + 248), 0);
      sub_10022B4D4(*(_QWORD *)(a1 + 248), 0);
      sub_10022B4E4(*(_QWORD *)(a1 + 248), 0);
      sub_1002225D0(*(_QWORD *)(a1 + 248), 0);
      sub_10022B4F4(*(_QWORD *)(a1 + 248), 0);
    }
    v14 = sub_10022B5E4((uint64_t)KmlSharingInvitationRecordsUpdater);
    v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    sub_10022B984((uint64_t)v15, *(void **)(a1 + 248));

  }
}

id sub_100247DC4(uint64_t a1)
{
  KmlDeviceConfigurationData *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id *v6;
  id *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  SESConfigDCK *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  unsigned __int8 v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  id v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  void *v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  id v68;
  void *v69;
  unsigned __int8 v70;
  uint64_t v71;
  void *v72;
  void *v73;
  BOOL v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  void *v78;
  void *v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  void *v83;
  unsigned __int8 v84;
  id v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  void *v91;
  NSString *v92;
  void *v93;
  id v94;
  void *v95;
  uint64_t v96;
  NSString *v97;
  void *v98;
  void *v99;
  id v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  NSString *v104;
  id v105;
  id v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  id v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  id v118;
  uint64_t v119;
  void *v120;
  void *v121;
  unsigned __int8 v122;
  void *v123;
  void *v124;
  uint64_t v125;
  void *v126;
  void *v127;
  unsigned int v128;
  void *v129;
  unsigned __int8 v130;
  void *v131;
  NSString *v132;
  void *v133;
  void *v134;
  int v135;
  void *v136;
  void *v137;
  id v138;
  id v139;
  unsigned int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  id v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  NSString *v149;
  void *v150;
  id v151;
  id v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  NSString *v157;
  void *v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  id v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  void *v170;
  void *v171;
  uint64_t v172;
  void *v173;
  void *v174;
  unsigned __int8 v175;
  id v176;
  id v177;
  void *v178;
  void *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  void *v190;
  id *v191;
  void *v192;
  id v193;
  id v194;
  id v195;
  void *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  id v200;
  id v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  void *v206;
  uint64_t v207;
  void *v208;
  uint64_t v209;
  uint64_t v210;
  void *v211;
  uint64_t v212;
  void *v213;
  uint64_t v214;
  uint64_t v215;
  void *v216;
  uint64_t v217;
  void *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  void *v227;
  uint64_t v228;
  void *v229;
  id v230;
  void *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  id v235;
  uint64_t v236;
  uint64_t v237;
  id v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  id v242;
  uint64_t v243;
  uint64_t v244;
  id v245;
  uint64_t v246;
  uint64_t v247;
  void *v248;
  id v249;
  void *v250;
  void *v251;
  void *v252;
  uint64_t v253;
  uint64_t v254;
  id v255;
  void *v256;
  id v257;
  id v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  id v262;
  id v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  void *v268;
  uint64_t v269;
  void *v270;
  id v271;
  void *v272;
  uint64_t v273;
  void *v274;
  uint64_t v275;
  void *v276;
  id v277;
  uint64_t v278;
  void *v279;
  uint64_t v280;
  void *v281;
  id v282;
  uint64_t v283;
  uint64_t v284;
  void *v285;
  id v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  void *v291;
  id v292;
  uint64_t v293;
  void *v294;
  uint64_t v295;
  id v296;
  void *v297;
  id v298;
  id v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  void *v303;
  void *v304;
  void *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  id v309;
  void *v310;
  id v311;
  id v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  id v316;
  id v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  id v321;
  void *v322;
  id v323;
  id v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  id v329;
  uint64_t v330;
  id v331;
  id v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  void *v336;
  void *v337;
  void *v338;
  id v339;
  id v340;
  uint64_t v341;
  void *v342;
  uint64_t v343;
  void *v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  void *v348;
  void *v349;
  uint64_t v350;
  id v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  NSString *v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  void *v365;
  void *v366;
  void *v367;
  void *v368;
  void *v369;
  void *v370;
  void *v371;
  void *v372;
  void *v373;
  unsigned int v374;
  int v375;
  void *v376;
  void *v377;
  void *v378;
  void *v379;
  void *v380;
  void *v381;
  void *v382;
  void *v383;
  uint64_t v384;
  void *v385;
  id v386;
  char v387;
  _QWORD v388[5];
  id v389;
  id v390;
  id v391;
  id v392;
  id v393;
  id v394;
  id v395;
  id v396;
  id v397;
  NSErrorUserInfoKey v398;
  void *v399;
  NSErrorUserInfoKey v400;
  id v401;
  NSErrorUserInfoKey v402;
  void *v403;
  NSErrorUserInfoKey v404;
  id v405;
  NSErrorUserInfoKey v406;
  id v407;
  _QWORD v408[2];
  _QWORD v409[2];
  _QWORD v410[2];
  _QWORD v411[2];

  if (a1)
  {
    v2 = [KmlDeviceConfigurationData alloc];
    v3 = sub_1000117D0(*(_QWORD *)(a1 + 32));
    v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    v5 = sub_100016AC8((uint64_t)v4);
    v6 = (id *)objc_claimAutoreleasedReturnValue(v5);
    v7 = sub_100253680(v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    v9 = sub_10022D114((uint64_t)v2, v8);
    v10 = *(void **)(a1 + 208);
    *(_QWORD *)(a1 + 208) = v9;

    sub_10022E204(*(_QWORD *)(a1 + 208), *(void **)(a1 + 152));
    v11 = objc_opt_new(SESConfigDCK);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 104), "manufacturer"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 104), "brand"));
    v14 = sub_10021728C(*(_QWORD *)(a1 + 208));
    v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    v397 = 0;
    v16 = (void *)objc_claimAutoreleasedReturnValue(-[SESConfigDCK BOOLValueForSetting:manufacturer:brand:uuid:error:](v11, "BOOLValueForSetting:manufacturer:brand:uuid:error:", 5, v12, v13, v15, &v397));
    v17 = v397;
    v18 = objc_msgSend(v16, "BOOLValue");

    if ((v18 & 1) == 0)
    {
      v85 = objc_retainAutorelease(*(id *)(a1 + 328));
      v86 = objc_msgSend(v85, "UTF8String");
      KmlSharingLogFunc(OS_LOG_TYPE_ERROR, (uint64_t)"KmlFriendSharingManager.m", 1480, (uint64_t)v86, CFSTR("Sharing is blocked by configuration %d error %@"), v87, v88, v89, 1);

      if (v17)
      {
        v90 = sesErrorToKmlError(v17, 0x79u);
        v91 = (void *)objc_claimAutoreleasedReturnValue(v90);
      }
      else
      {
        v17 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
        v410[0] = NSLocalizedDescriptionKey;
        v97 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(121));
        v98 = (void *)objc_claimAutoreleasedReturnValue(v97);
        v410[1] = NSLocalizedFailureReasonErrorKey;
        v411[0] = v98;
        v411[1] = CFSTR("Sharing is blocked by configuration");
        v99 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v411, v410, 2));
        v91 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v17, 121, v99));

      }
      goto LABEL_83;
    }
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 104), "manufacturer"));
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 104), "brand"));
    v21 = sub_10021728C(*(_QWORD *)(a1 + 208));
    v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
    v396 = v17;
    v23 = (void *)objc_claimAutoreleasedReturnValue(-[SESConfigDCK BOOLValueForSetting:manufacturer:brand:uuid:error:](v11, "BOOLValueForSetting:manufacturer:brand:uuid:error:", 1, v19, v20, v22, &v396));
    v24 = v396;

    if (v24
      || !v23
      || (KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlFriendSharingManager generateFriendEndpoint]", 1497, CFSTR("Found override for downgrade pairing version"), v28, v29, v30, v31, v357), objc_msgSend(v23, "BOOLValue")))
    {
      sub_100218584(*(_QWORD *)(a1 + 216), v25, v26, v27, v28, v29, v30, v31, v357);
    }
    v32 = *(_QWORD *)(a1 + 216);
    v33 = sub_100217298(*(_QWORD *)(a1 + 208));
    v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
    v35 = sub_100218DE4(v32, v34);

    v36 = *(_QWORD *)(a1 + 216);
    v37 = sub_1002299D0(*(_QWORD *)(a1 + 208));
    v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
    v39 = sub_100219298(v36, v38);

    v40 = sub_1000117D0(*(_QWORD *)(a1 + 32));
    v41 = (void *)objc_claimAutoreleasedReturnValue(v40);
    v42 = sub_100016AC8((uint64_t)v41);
    v43 = (void *)objc_claimAutoreleasedReturnValue(v42);
    v44 = sub_100252FA4((uint64_t)v43);

    v45 = sub_1000117D0(*(_QWORD *)(a1 + 32));
    v46 = (void *)objc_claimAutoreleasedReturnValue(v45);
    v47 = sub_100016AC8((uint64_t)v46);
    v48 = (void *)objc_claimAutoreleasedReturnValue(v47);
    v49 = sub_1002530BC((uint64_t)v48);

    if (objc_msgSend(*(id *)(a1 + 216), "agreedKmlSharingVersion") == 768)
    {
      v50 = sub_1000117D0(*(_QWORD *)(a1 + 32));
      v51 = (void *)objc_claimAutoreleasedReturnValue(v50);
      v52 = sub_100016AC8((uint64_t)v51);
      v53 = (void *)objc_claimAutoreleasedReturnValue(v52);
      v44 = sub_100253D44((uint64_t)v53);

      v54 = sub_1000117D0(*(_QWORD *)(a1 + 32));
      v55 = (void *)objc_claimAutoreleasedReturnValue(v54);
      v56 = sub_100016AC8((uint64_t)v55);
      v57 = (void *)objc_claimAutoreleasedReturnValue(v56);
      v49 = sub_100253D50((uint64_t)v57);

    }
    v58 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 328)), "UTF8String");
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1517, (uint64_t)v58, CFSTR("options_1: %02x; options_2: %02x"),
      v59,
      v60,
      v61,
      v44);
    v62 = (void *)objc_claimAutoreleasedReturnValue(+[SEEndPointConfiguration configurationWithOpt1:opt2:](SEEndPointConfiguration, "configurationWithOpt1:opt2:", v44, v49));
    if (v62)
    {
      if (kmlUtilIsFleetKey(v49))
      {
        v63 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 328)), "UTF8String");
        KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1524, (uint64_t)v63, CFSTR("We have received an invitation for a fleet vehicle"), v64, v65, v66, v358);
        v395 = v24;
        v67 = (void *)objc_claimAutoreleasedReturnValue(-[SESConfigDCK getSettingForKey:error:](v11, "getSettingForKey:error:", CFSTR("AllowedFleetManufacturers"), &v395));
        v68 = v395;

        if (v68
          || (v69 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 104), "manufacturer")),
              v70 = objc_msgSend(v67, "containsObject:", v69),
              v69,
              (v70 & 1) == 0))
        {
          v105 = objc_retainAutorelease(*(id *)(a1 + 328));
          v106 = objc_msgSend(v105, "UTF8String");
          v107 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 104), "manufacturer"));

          KmlSharingLogFunc(OS_LOG_TYPE_ERROR, (uint64_t)"KmlFriendSharingManager.m", 1528, (uint64_t)v106, CFSTR("%@ is not in allow list for fleet cars"), v108, v109, v110, (uint64_t)v107);
          v93 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
          v94 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v68, "userInfo"));
          v91 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v93, 223, v94));
          v24 = v68;
          goto LABEL_82;
        }
        if (!kmlUtilIsServerIssuedKey(v49))
          goto LABEL_19;
        v71 = sub_10002BA88(*(_QWORD *)(a1 + 32));
        v72 = (void *)objc_claimAutoreleasedReturnValue(v71);
        v73 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 104), "manufacturer"));
        v74 = sub_100220030((uint64_t)v72, v73);

        if (v74)
        {
          v75 = sub_10002BA88(*(_QWORD *)(a1 + 32));
          v76 = (void *)objc_claimAutoreleasedReturnValue(v75);
          v77 = sub_1000117DC((uint64_t)v76);
          v78 = (void *)objc_claimAutoreleasedReturnValue(v77);

          if (v78)
          {
            v394 = 0;
            v79 = (void *)objc_claimAutoreleasedReturnValue(-[SESConfigDCK getSettingForKey:error:](v11, "getSettingForKey:error:", CFSTR("AllowedFleetServiceProviders"), &v394));
            v24 = v394;
            if (v24
              || (v80 = sub_10002BA88(*(_QWORD *)(a1 + 32)),
                  v81 = (void *)objc_claimAutoreleasedReturnValue(v80),
                  v82 = sub_1000117DC((uint64_t)v81),
                  v83 = (void *)objc_claimAutoreleasedReturnValue(v82),
                  v84 = objc_msgSend(v79, "containsObject:", v83),
                  v83,
                  v81,
                  (v84 & 1) == 0))
            {
              v339 = objc_retainAutorelease(*(id *)(a1 + 328));
              v340 = objc_msgSend(v339, "UTF8String");
              v341 = sub_10002BA88(*(_QWORD *)(a1 + 32));
              v342 = (void *)objc_claimAutoreleasedReturnValue(v341);

              v343 = sub_1000117DC((uint64_t)v342);
              v344 = (void *)objc_claimAutoreleasedReturnValue(v343);
              KmlSharingLogFunc(OS_LOG_TYPE_ERROR, (uint64_t)"KmlFriendSharingManager.m", 1546, (uint64_t)v340, CFSTR("%@ is not in allow list for fleet car service provider"), v345, v346, v347, (uint64_t)v344);

              v94 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
              v348 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "userInfo"));
              v93 = v79;
              v91 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v94, 225, v348));

              goto LABEL_82;
            }

LABEL_19:
            v24 = 0;
LABEL_28:
            v111 = sub_1000117DC(*(_QWORD *)(a1 + 32));
            v112 = (void *)objc_claimAutoreleasedReturnValue(v111);
            v113 = sub_100016AC8((uint64_t)v112);
            v67 = (void *)objc_claimAutoreleasedReturnValue(v113);

            v114 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 328)), "UTF8String");
            KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1561, (uint64_t)v114, CFSTR("FriendSharingManager: Received valid sharing invitation with keyname %@"), v115, v116, v117, (uint64_t)v67);
            v385 = v62;
            if (v67)
            {
              v118 = kmlUtilSanitizeFriendlyName(v67);
              v119 = objc_claimAutoreleasedReturnValue(v118);
              v120 = *(void **)(a1 + 88);
              *(_QWORD *)(a1 + 88) = v119;
            }
            else
            {
              v120 = *(void **)(a1 + 88);
              *(_QWORD *)(a1 + 88) = CFSTR("MyFriend1");
            }

            if (sub_10022F124(*(_QWORD *)(a1 + 208))
              || (v121 = (void *)objc_claimAutoreleasedReturnValue(+[NISession deviceCapabilities](NISession, "deviceCapabilities")),
                  v122 = objc_msgSend(v121, "supportsPreciseDistanceMeasurement"),
                  v121,
                  (v122 & 1) != 0))
            {
              v378 = v67;
              v123 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 104), "manufacturer"));
              v124 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 104), "brand"));
              v125 = sub_10021728C(*(_QWORD *)(a1 + 208));
              v126 = (void *)objc_claimAutoreleasedReturnValue(v125);
              v127 = (void *)objc_claimAutoreleasedReturnValue(-[SESConfigDCK BOOLValueForSetting:manufacturer:brand:uuid:error:](v11, "BOOLValueForSetting:manufacturer:brand:uuid:error:", 0, v123, v124, v126, 0));
              v128 = objc_msgSend(v127, "BOOLValue");

              if (!v128)
                goto LABEL_49;
              v129 = (void *)objc_claimAutoreleasedReturnValue(+[NISession deviceCapabilities](NISession, "deviceCapabilities"));
              v130 = objc_msgSend(v129, "supportsPreciseDistanceMeasurement");

              if ((v130 & 1) != 0)
                goto LABEL_49;
              v131 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
              v398 = NSLocalizedDescriptionKey;
              v132 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(218));
              v133 = (void *)objc_claimAutoreleasedReturnValue(v132);
              v399 = v133;
              v134 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v399, &v398, 1));
              v91 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v131, 218, v134));

              v135 = MGGetSInt32Answer(CFSTR("DeviceClassNumber"), 0xFFFFFFFFLL);
              if (v135 == 6)
              {
                if (sub_10006AD24())
                {
                  KmlLogFunc_InternalOnly(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlFriendSharingManager generateFriendEndpoint]", 1620, CFSTR("Allowing NFC only watch to have friend key since there is a paired UWB-capable phone"), v161, v162, v163, v164, v360);

                  goto LABEL_49;
                }
LABEL_47:
                if (v91)
                {
                  v94 = objc_retainAutorelease(*(id *)(a1 + 328));
                  v165 = objc_msgSend(v94, "UTF8String");
                  v166 = *(_QWORD *)(a1 + 112);
                  v93 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 104), "brand"));
                  KmlSharingLogFunc(OS_LOG_TYPE_ERROR, (uint64_t)"KmlFriendSharingManager.m", 1626, (uint64_t)v165, CFSTR("We don't allow CarKey on NFC only device for (%@, %@)"), v167, v168, v169, v166);
                  v62 = v385;
                  v67 = v378;
                  goto LABEL_82;
                }
LABEL_49:
                v170 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 104), "manufacturer"));
                v171 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 104), "brand"));
                v172 = sub_10021728C(*(_QWORD *)(a1 + 208));
                v173 = (void *)objc_claimAutoreleasedReturnValue(v172);
                v174 = (void *)objc_claimAutoreleasedReturnValue(-[SESConfigDCK BOOLValueForSetting:manufacturer:brand:uuid:error:](v11, "BOOLValueForSetting:manufacturer:brand:uuid:error:", 7, v170, v171, v173, 0));
                v175 = objc_msgSend(v174, "BOOLValue");

                if ((v175 & 1) == 0)
                {
                  v176 = objc_retainAutorelease(*(id *)(a1 + 328));
                  v177 = objc_msgSend(v176, "UTF8String");
                  v178 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 104), "manufacturer"));
                  v179 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 104), "brand"));

                  KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1638, (uint64_t)v177, CFSTR("UWB is blocked for %@, %@"), v180, v181, v182, (uint64_t)v178);
                  sub_10022E9EC(*(_QWORD *)(a1 + 208), v183, v184, v185, v186, v187, v188, v189, v361);
                }
                v190 = v23;
                v191 = sub_10022D6EC(*(id **)(a1 + 208));
                v192 = (void *)objc_claimAutoreleasedReturnValue(v191);
                v193 = objc_retainAutorelease(*(id *)(a1 + 328));
                v194 = objc_msgSend(v193, "UTF8String");
                v377 = v192;
                v195 = kmlUtilHexStringFromData(v192);
                v196 = (void *)objc_claimAutoreleasedReturnValue(v195);

                KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1643, (uint64_t)v194, CFSTR("DeviceConfigData: %@"), v197, v198, v199, (uint64_t)v196);
                v200 = sub_100254600((uint64_t)KmlEndpointManager, CFSTR("FRND"));
                v384 = objc_claimAutoreleasedReturnValue(v200);
                if (objc_msgSend(*(id *)(a1 + 216), "agreedKmlSharingVersion") == 768)
                {
                  v201 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 328)), "UTF8String");
                  KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1650, (uint64_t)v201, CFSTR("using v3 mailbox sizes"), v202, v203, v204, v362);
                  v205 = sub_1000117D0(*(_QWORD *)(a1 + 32));
                  v206 = (void *)objc_claimAutoreleasedReturnValue(v205);
                  v207 = sub_100016AC8((uint64_t)v206);
                  v208 = (void *)objc_claimAutoreleasedReturnValue(v207);
                  v209 = sub_100252E30((uint64_t)v208);

                  v210 = sub_1000117D0(*(_QWORD *)(a1 + 32));
                  v211 = (void *)objc_claimAutoreleasedReturnValue(v210);
                  v212 = sub_100016AC8((uint64_t)v211);
                  v213 = (void *)objc_claimAutoreleasedReturnValue(v212);
                  v214 = sub_100252C04((uint64_t)v213);
                }
                else
                {
                  v215 = sub_1000117D0(*(_QWORD *)(a1 + 32));
                  v216 = (void *)objc_claimAutoreleasedReturnValue(v215);
                  v217 = sub_100016AC8((uint64_t)v216);
                  v218 = (void *)objc_claimAutoreleasedReturnValue(v217);
                  v209 = (uint64_t)sub_100252AF0((uint64_t)v218);

                  v219 = sub_1000117D0(*(_QWORD *)(a1 + 32));
                  v211 = (void *)objc_claimAutoreleasedReturnValue(v219);
                  v220 = sub_100016AC8((uint64_t)v211);
                  v213 = (void *)objc_claimAutoreleasedReturnValue(v220);
                  v214 = (uint64_t)sub_1002529DC((uint64_t)v213);
                }
                v221 = v214;
                v376 = v190;

                v374 = v221;
                KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlFriendSharingManager generateFriendEndpoint]", 1658, CFSTR("getting mailbox data sizes: private: 0x%04x, confidential: 0x%04x"), v222, v223, v224, v225, v221);
                v226 = sub_1000117D0(*(_QWORD *)(a1 + 32));
                v227 = (void *)objc_claimAutoreleasedReturnValue(v226);
                v228 = sub_100016AC8((uint64_t)v227);
                v229 = (void *)objc_claimAutoreleasedReturnValue(v228);
                v230 = sub_10025257C((uint64_t)v229);
                v231 = (void *)objc_claimAutoreleasedReturnValue(v230);
                v383 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", v231, 0, v209));

                v232 = *(_QWORD *)(a1 + 112);
                v233 = sub_1000117D0(*(_QWORD *)(a1 + 32));
                v373 = (void *)objc_claimAutoreleasedReturnValue(v233);
                v234 = sub_100016AC8((uint64_t)v373);
                v372 = (void *)objc_claimAutoreleasedReturnValue(v234);
                v235 = sub_100251398((uint64_t)v372);
                v382 = (void *)objc_claimAutoreleasedReturnValue(v235);
                v236 = sub_1000117D0(*(_QWORD *)(a1 + 32));
                v371 = (void *)objc_claimAutoreleasedReturnValue(v236);
                v237 = sub_100016AC8((uint64_t)v371);
                v370 = (void *)objc_claimAutoreleasedReturnValue(v237);
                v238 = sub_100251280((uint64_t)v370);
                v381 = (void *)objc_claimAutoreleasedReturnValue(v238);
                v239 = *(_QWORD *)(a1 + 312);
                v240 = sub_1000117D0(*(_QWORD *)(a1 + 32));
                v369 = (void *)objc_claimAutoreleasedReturnValue(v240);
                v241 = sub_100016AC8((uint64_t)v369);
                v368 = (void *)objc_claimAutoreleasedReturnValue(v241);
                v242 = sub_100252694((uint64_t)v368);
                v380 = (void *)objc_claimAutoreleasedReturnValue(v242);
                v243 = sub_1000117D0(*(_QWORD *)(a1 + 32));
                v367 = (void *)objc_claimAutoreleasedReturnValue(v243);
                v244 = sub_100016AC8((uint64_t)v367);
                v366 = (void *)objc_claimAutoreleasedReturnValue(v244);
                v245 = sub_1002527AC((uint64_t)v366);
                v379 = (void *)objc_claimAutoreleasedReturnValue(v245);
                v246 = sub_1000117D0(*(_QWORD *)(a1 + 32));
                v365 = (void *)objc_claimAutoreleasedReturnValue(v246);
                v247 = sub_100016AC8((uint64_t)v365);
                v248 = (void *)objc_claimAutoreleasedReturnValue(v247);
                v249 = sub_1002528C4((uint64_t)v248);
                v250 = (void *)objc_claimAutoreleasedReturnValue(v249);
                v375 = v209;
                if ((_DWORD)v209)
                  v251 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v209));
                else
                  v251 = 0;
                if (v374)
                  v252 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v374));
                else
                  v252 = 0;
                v393 = v24;
                v363 = v239;
                v253 = SESEndPointCreateForAlishaWithSession(0, 0, v384, v232, v384, v385, v382, v381);
                v254 = objc_claimAutoreleasedReturnValue(v253);
                v255 = v24;

                v256 = *(void **)(a1 + 80);
                *(_QWORD *)(a1 + 80) = v254;

                if (v374)
                if (v375)

                v62 = v385;
                if (v255)
                {
                  v257 = objc_retainAutorelease(*(id *)(a1 + 328));
                  v258 = objc_msgSend(v257, "UTF8String", v363, v380, v379, v250, v383, v251, v252, &v393);
                  KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1680, (uint64_t)v258, CFSTR("FriendSharingManager: Failed to create friend key - %@"), v259, v260, v261, (uint64_t)v255);

                  v262 = sesErrorToKmlError(v255, 0x69u);
                  v91 = (void *)objc_claimAutoreleasedReturnValue(v262);
                  v23 = v376;
                  v93 = v377;
                  v67 = v378;
                }
                else
                {
                  v23 = v376;
                  v67 = v378;
                  if (objc_msgSend(*(id *)(a1 + 216), "agreedKmlSharingVersion") == 768)
                  {
                    v263 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 328)), "UTF8String");
                    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1687, (uint64_t)v263, CFSTR("using v3 mailbox sizes"), v264, v265, v266, v363);
                    v267 = sub_1000117D0(*(_QWORD *)(a1 + 32));
                    v268 = (void *)objc_claimAutoreleasedReturnValue(v267);
                    v269 = sub_100016AC8((uint64_t)v268);
                    v270 = (void *)objc_claimAutoreleasedReturnValue(v269);
                    v271 = sub_100253644(v270);
                    v272 = (void *)objc_claimAutoreleasedReturnValue(v271);

                    v273 = sub_1000117D0(*(_QWORD *)(a1 + 32));
                    v274 = (void *)objc_claimAutoreleasedReturnValue(v273);
                    v275 = sub_100016AC8((uint64_t)v274);
                    v276 = (void *)objc_claimAutoreleasedReturnValue(v275);
                    v277 = sub_100253404(v276);
                  }
                  else
                  {
                    v278 = sub_1000117D0(*(_QWORD *)(a1 + 32));
                    v279 = (void *)objc_claimAutoreleasedReturnValue(v278);
                    v280 = sub_100016AC8((uint64_t)v279);
                    v281 = (void *)objc_claimAutoreleasedReturnValue(v280);
                    v282 = sub_1002532EC((uint64_t)v281);
                    v272 = (void *)objc_claimAutoreleasedReturnValue(v282);

                    v283 = sub_1000117D0(*(_QWORD *)(a1 + 32));
                    v274 = (void *)objc_claimAutoreleasedReturnValue(v283);
                    v284 = sub_100016AC8((uint64_t)v274);
                    v276 = (void *)objc_claimAutoreleasedReturnValue(v284);
                    v277 = sub_1002531D4((uint64_t)v276);
                  }
                  v285 = (void *)objc_claimAutoreleasedReturnValue(v277);

                  v286 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 328)), "UTF8String");
                  KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1694, (uint64_t)v286, CFSTR("Setting MailBoxes configuration %@ %@"), v287, v288, v289, (uint64_t)v272);
                  v290 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 80), "publicKeyIdentifier"));
                  v291 = *(void **)(a1 + 96);
                  *(_QWORD *)(a1 + 96) = v290;

                  v292 = kmlUtilHexStringFromData(*(void **)(a1 + 96));
                  v293 = objc_claimAutoreleasedReturnValue(v292);
                  v294 = *(void **)(a1 + 336);
                  *(_QWORD *)(a1 + 336) = v293;

                  v295 = *(_QWORD *)(a1 + 336);
                  v392 = 0;
                  SESEndPointConfigureMailBoxes(v295, v272, v285, &v392);
                  v296 = v392;
                  if (v296)
                  {
                    v297 = v296;
                    v298 = objc_retainAutorelease(*(id *)(a1 + 328));
                    v299 = objc_msgSend(v298, "UTF8String");
                    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1704, (uint64_t)v299, CFSTR("FriendSharingManager: Failed to configure friend mailboxes - %@"), v300, v301, v302, (uint64_t)v297);

                    v303 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
                    v304 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v297, "userInfo"));
                    v305 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v303, 105, v304));

                    v255 = v305;
                  }
                  else
                  {
                    v306 = *(_QWORD *)(a1 + 336);
                    v391 = 0;
                    v307 = SESEndPointCreateEncryptionKey(v306, &v391);
                    v308 = objc_claimAutoreleasedReturnValue(v307);
                    v309 = v391;
                    v310 = *(void **)(a1 + 64);
                    *(_QWORD *)(a1 + 64) = v308;

                    v311 = objc_retainAutorelease(*(id *)(a1 + 328));
                    v312 = objc_msgSend(v311, "UTF8String");
                    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1710, (uint64_t)v312, CFSTR("FriendSharingManager: encryption attestation %@"), v313, v314, v315, *(_QWORD *)(a1 + 64));

                    if (v309)
                    {
                      v316 = objc_retainAutorelease(*(id *)(a1 + 328));
                      v317 = objc_msgSend(v316, "UTF8String");
                      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1713, (uint64_t)v317, CFSTR("FriendSharingManager: Failed to create encryption key - %@"), v318, v319, v320, (uint64_t)v309);

                    }
                    v321 = sub_1002198D8(*(id *)(a1 + 216));
                    v322 = (void *)objc_claimAutoreleasedReturnValue(v321);
                    v323 = objc_retainAutorelease(*(id *)(a1 + 328));
                    v324 = objc_msgSend(v323, "UTF8String");
                    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1717, (uint64_t)v324, CFSTR("Saving friendly name (%@), reader info (%@) and invitationId (%@)"), v325, v326, v327, *(_QWORD *)(a1 + 88));

                    v328 = *(_QWORD *)(a1 + 336);
                    v388[0] = _NSConcreteStackBlock;
                    v388[1] = 3221225472;
                    v388[2] = sub_10024AF88;
                    v388[3] = &unk_10030FB58;
                    v388[4] = a1;
                    v389 = v377;
                    v329 = v322;
                    v390 = v329;
                    v330 = SESEndPointUpdateWithBlock(v328, v388);
                    v331 = (id)objc_claimAutoreleasedReturnValue(v330);

                    if (v331
                      || objc_msgSend(*(id *)(a1 + 216), "agreedKmlSharingVersion") == 768
                      && (v387 = 0x80,
                          v349 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", &v387, 1)), v350 = *(_QWORD *)(a1 + 336), v386 = 0, SESEndPointSetPrivateDataWithSession(0, 0, v350, v349, 0, &v386), v331 = v386, v349, v331))
                    {
                      v332 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 328)), "UTF8String");
                      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1765, (uint64_t)v332, CFSTR("Could not update endpoint"), v333, v334, v335, v364);
                      v336 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
                      v337 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v331, "userInfo"));
                      v338 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v336, 105, v337));

                    }
                    else
                    {
                      v338 = 0;
                    }
                    v255 = v338;

                    v67 = v378;
                  }
                  v93 = v377;

                  v91 = v255;
                }

                v24 = v255;
                v94 = (id)v384;
                goto LABEL_82;
              }
              if (v135 != 1)
                goto LABEL_47;
              v136 = (void *)objc_claimAutoreleasedReturnValue(+[NRPairedDeviceRegistry sharedInstance](NRPairedDeviceRegistry, "sharedInstance"));
              v137 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v136, "getActivePairedDevice"));

              if (v137)
              {
                v138 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", CFSTR("C4F6386A-780D-40E5-9900-0A26C16273A1"));
                if (!objc_msgSend(v137, "supportsCapability:", v138))
                {
LABEL_41:

                  goto LABEL_42;
                }
                v139 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", CFSTR("81D292E4-16D8-4630-82ED-BDF62B05E334"));
                v140 = objc_msgSend(v137, "supportsCapability:", v139);

                if (v140)
                {
                  KmlLogFunc_InternalOnly(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlFriendSharingManager generateFriendEndpoint]", 1614, CFSTR("Allowing NFC only phone to have friend key since there is a paired UWB-capable watch"), v141, v142, v143, v144, v360);
                  v138 = v91;
                  v91 = 0;
                  goto LABEL_41;
                }
              }
LABEL_42:

              goto LABEL_47;
            }
            v145 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 328)), "UTF8String");
            KmlSharingLogFunc(OS_LOG_TYPE_ERROR, (uint64_t)"KmlFriendSharingManager.m", 1581, (uint64_t)v145, CFSTR("We have a UWB only reader and NFC only device. Incompatible. Don't create endpoint."), v146, v147, v148, v360);
            v93 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
            v400 = NSLocalizedDescriptionKey;
            v149 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(114));
            v94 = (id)objc_claimAutoreleasedReturnValue(v149);
            v401 = v94;
            v150 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v401, &v400, 1));
            v91 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v93, 114, v150));

LABEL_82:
            v17 = v24;
LABEL_83:

            return v91;
          }
          v352 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 328)), "UTF8String");
          KmlSharingLogFunc(OS_LOG_TYPE_ERROR, (uint64_t)"KmlFriendSharingManager.m", 1539, (uint64_t)v352, CFSTR("Server endpoint cert missing service provider extension"), v353, v354, v355, v359);
          v93 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
          v404 = NSLocalizedDescriptionKey;
          v356 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(225));
          v94 = (id)objc_claimAutoreleasedReturnValue(v356);
          v405 = v94;
          v158 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v405, &v404, 1));
          v159 = v93;
          v160 = 225;
        }
        else
        {
          v151 = objc_retainAutorelease(*(id *)(a1 + 328));
          v152 = objc_msgSend(v151, "UTF8String");
          v153 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 104), "manufacturer"));

          KmlSharingLogFunc(OS_LOG_TYPE_ERROR, (uint64_t)"KmlFriendSharingManager.m", 1534, (uint64_t)v152, CFSTR("Server cert chain is not signed by %@"), v154, v155, v156, (uint64_t)v153);
          v93 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
          v406 = NSLocalizedDescriptionKey;
          v157 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(224));
          v94 = (id)objc_claimAutoreleasedReturnValue(v157);
          v407 = v94;
          v158 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v407, &v406, 1));
          v159 = v93;
          v160 = 224;
        }
        v91 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v159, v160, v158));

        v24 = 0;
        goto LABEL_82;
      }
      if (!kmlUtilIsServerIssuedKey(v49))
        goto LABEL_28;
      v100 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 328)), "UTF8String");
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1555, (uint64_t)v100, CFSTR("We have received an invitation for private car from server"), v101, v102, v103, v358);
      v67 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
      v402 = NSLocalizedDescriptionKey;
      v104 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(225));
      v93 = (void *)objc_claimAutoreleasedReturnValue(v104);
      v403 = v93;
      v94 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v403, &v402, 1));
      v95 = v67;
      v96 = 225;
    }
    else
    {
      v67 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
      v408[0] = NSLocalizedDescriptionKey;
      v92 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(105));
      v93 = (void *)objc_claimAutoreleasedReturnValue(v92);
      v408[1] = NSLocalizedFailureReasonErrorKey;
      v409[0] = v93;
      v409[1] = CFSTR("Invalid endpoint configuration option group values (RFU bits set)");
      v94 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v409, v408, 2));
      v95 = v67;
      v96 = 105;
    }
    v91 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v95, v96, v94));
    goto LABEL_82;
  }
  return 0;
}

void sub_1002496DC(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  int v10;
  int v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  KeySigningRequest *v16;

  if (!a1)
    return;
  v2 = sub_1000117D0(*(_QWORD *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = sub_100016AC8((uint64_t)v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  if (!sub_1002539E0((uint64_t)v5))
  {

    goto LABEL_6;
  }
  v6 = sub_1000117D0(*(_QWORD *)(a1 + 32));
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = sub_100016AC8((uint64_t)v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v10 = sub_100253B00((uint64_t)v9);

  if (!v10)
  {
LABEL_6:
    v11 = 0;
    goto LABEL_7;
  }
  ++*(_QWORD *)(a1 + 296);
  v11 = 1;
LABEL_7:
  v16 = objc_alloc_init(KeySigningRequest);
  sub_1000536E4((uint64_t)v16, *(void **)(a1 + 216));
  if (v11)
    v12 = *(void **)(a1 + 144);
  else
    v12 = 0;
  v13 = sub_100220ED4((uint64_t)v16, *(_QWORD *)(a1 + 80), *(void **)(a1 + 64), v12);
  v14 = objc_claimAutoreleasedReturnValue(v13);
  v15 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v14;

}

void sub_1002497E0(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t BindingAttestationRequestWithSession;
  void *v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;

  if (a1)
  {
    v2 = *(void **)(a1 + 272);
    *(_QWORD *)(a1 + 272) = 0;

    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 104), "manufacturer"));
    v21 = 0;
    BindingAttestationRequestWithSession = SESEndpointGetBindingAttestationRequestWithSession(0, 0, v3, &v21);
    v5 = (void *)objc_claimAutoreleasedReturnValue(BindingAttestationRequestWithSession);
    v6 = v21;

    if (v6)
    {
      v7 = objc_retainAutorelease(*(id *)(a1 + 328));
      v8 = objc_msgSend(v7, "UTF8String");
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1855, (uint64_t)v8, CFSTR("Failed to get binding attestation data with error : %@"), v9, v10, v11, (uint64_t)v6);

      v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "userInfo"));
      v14 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v12, 112, v13));
      v15 = *(void **)(a1 + 272);
      *(_QWORD *)(a1 + 272) = v14;
    }
    else
    {
      v16 = objc_alloc((Class)DAKeyBindingAttestationRequestData);
      v17 = *(_QWORD *)(a1 + 352);
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "subCAAttestation"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "casdECDSACertificate"));
      v18 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "casdRSACertificate"));
      v19 = objc_msgSend(v16, "initWithSharingSessionIdentifier:subCaAttestation:casd:rsaCertData:", v17, v12, v13, v18);
      v20 = *(void **)(a1 + 200);
      *(_QWORD *)(a1 + 200) = v19;

      v15 = 0;
      v6 = (id)v18;
    }

  }
}

void sub_10024998C(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  _WORD *v6;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  id v28;

  if (a1)
  {
    v2 = *(void **)(a1 + 272);
    *(_QWORD *)(a1 + 272) = 0;

    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 104), "readerIdentifier"));
    v4 = kmlUtilDataForHexString(v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

    v6 = sub_10022CB3C((uint64_t)KmlTlv, 77, v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    v8 = *(_QWORD *)(a1 + 336);
    v9 = sub_10022D014((uint64_t)v7);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    v28 = 0;
    v11 = SESEndPointPrivacyEncryption(v8, v10, &v28);
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    v13 = v28;

    if (v13)
    {
      v14 = objc_retainAutorelease(*(id *)(a1 + 328));
      v15 = objc_msgSend(v14, "UTF8String");
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1878, (uint64_t)v15, CFSTR("Failed to encrypt pre-track request with - %@"), v16, v17, v18, (uint64_t)v13);

      v19 = sesErrorToKmlError(v13, 0x78u);
      v20 = objc_claimAutoreleasedReturnValue(v19);
      v21 = *(void **)(a1 + 272);
      *(_QWORD *)(a1 + 272) = v20;
    }
    else
    {
      v22 = objc_alloc((Class)DAAlishaKeyEncryptedRequest);
      v23 = objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "version"));
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "ephemeralPublicKeydata"));
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "receiverPublicKeyHash"));
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "cipherText"));
      v26 = objc_msgSend(v22, "initWithVersion:ephemeralPublicKey:publicKeyHash:encryptedRequest:", v23, v21, v24, v25);
      v27 = *(void **)(a1 + 184);
      *(_QWORD *)(a1 + 184) = v26;

      v13 = (id)v23;
    }

  }
}

void sub_100249B50(uint64_t a1)
{
  uint64_t v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id WeakRetained;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 264);
    if (*(_QWORD *)(a1 + 344))
    {
      if (v2)
      {
        WeakRetained = objc_loadWeakRetained((id *)(a1 + 304));
        objc_msgSend(WeakRetained, "handleCrossPlatformSigningRequest:status:keyInformation:", 0, *(_QWORD *)(a1 + 264), 0);
      }
      else
      {
        WeakRetained = objc_msgSend(objc_alloc((Class)DACarKeyGenericCrossPlatformSharingData), "initWithSharingIdentifier:friendKeyIdentifier:sharingMessageType:message:", *(_QWORD *)(a1 + 328), *(_QWORD *)(a1 + 336), 2, *(_QWORD *)(a1 + 48));
        v4 = objc_msgSend(objc_alloc((Class)DACarKeyAdditionalCrossPlatformSharingData), "initWithSharingSessionUUID:bindingAttestation:targetDeviceType:initiatorIdsPseudonym:", *(_QWORD *)(a1 + 352), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 360), 0);
        v5 = objc_msgSend(objc_alloc((Class)DACarKeyPrivateCrossPlatformSharingData), "initWithVehicleEnteredPasscode:pairedEntityIdentifier:", 0, *(_QWORD *)(a1 + 312));
        v6 = objc_msgSend(objc_alloc((Class)DACarKeySharingMessage), "initWithGenericCrossPlatformSharingData:additionalData:privateData:", WeakRetained, v4, v5);
        v7 = objc_loadWeakRetained((id *)(a1 + 304));
        objc_msgSend(v7, "handleCrossPlatformSigningRequest:status:keyInformation:", v6, 0, *(_QWORD *)(a1 + 320));

      }
    }
    else
    {
      if (v2)
      {
        v3 = objc_loadWeakRetained((id *)(a1 + 304));
        objc_msgSend(v3, "handleExchangeStartedWithFriendKey:status:", 0, *(_QWORD *)(a1 + 264));

      }
      WeakRetained = objc_loadWeakRetained((id *)(a1 + 304));
      objc_msgSend(WeakRetained, "handleExchangeStartedWithFriendKey:status:", *(_QWORD *)(a1 + 320), 0);
    }

  }
}

void sub_100249CA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  id *v33;
  id *v34;
  void *v35;
  id v36;
  uint64_t v37;
  id v38;
  id v39;
  uint64_t v40;
  void *i;
  void *v42;
  id v43;
  id v44;
  id v45;
  uint64_t v46;
  void *j;
  uint64_t v48;
  int v49;
  id v50;
  void *v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  id v58;
  void *v59;
  id v60;
  id v61;
  id v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  id v68;
  id v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  _BYTE *v76;
  uint64_t v77;
  void *v78;
  SESConfigDCK *v79;
  void *v80;
  void *v81;
  uint64_t v82;
  void *v83;
  void *v84;
  unsigned __int8 v85;
  id v86;
  id v87;
  void *v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  id v101;
  id v102;
  uint64_t v103;
  void *v104;
  void *v105;
  unsigned int v106;
  void *v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  id v113;
  id v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  id v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  id v127;
  void *v128;
  void *v129;
  id v130;
  _QWORD v131[4];
  id v132;
  id v133;
  uint64_t v134;
  BOOL v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  _BYTE v148[128];
  _BYTE v149[128];
  _BYTE v150[128];

  if (a1)
  {
    v1 = a1;
    v2 = sub_1002225AC(*(_QWORD *)(a1 + 56));
    v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
    v4 = objc_retainAutorelease(*(id *)(v1 + 328));
    v5 = objc_msgSend(v4, "UTF8String");
    v6 = kmlUtilHexStringFromData(v3);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);

    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1994, (uint64_t)v5, CFSTR("MailboxMappingData: %@"), v8, v9, v10, (uint64_t)v7);
    v11 = objc_retainAutorelease(*(id *)(v1 + 328));
    v12 = objc_msgSend(v11, "UTF8String");
    v13 = sub_1000117D0(*(_QWORD *)(v1 + 56));
    v14 = (void *)objc_claimAutoreleasedReturnValue(v13);

    v15 = sub_10022D014((uint64_t)v14);
    v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    v17 = kmlUtilHexStringFromData(v16);
    v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1996, (uint64_t)v12, CFSTR("Key attestation - %@"), v19, v20, v21, (uint64_t)v18);

    v128 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData data](NSMutableData, "data"));
    v22 = sub_1000117D0(*(_QWORD *)(v1 + 56));
    v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
    v24 = sub_10022D014((uint64_t)v23);
    v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
    v26 = sub_10022C7A4((uint64_t)KmlTlv, v25);
    v27 = (void *)objc_claimAutoreleasedReturnValue(v26);

    v146 = 0u;
    v147 = 0u;
    v144 = 0u;
    v145 = 0u;
    v28 = v27;
    v29 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v144, v150, 16);
    v126 = v3;
    v127 = v28;
    if (v29)
    {
      v30 = v29;
      v31 = *(_QWORD *)v145;
LABEL_4:
      v32 = 0;
      while (1)
      {
        if (*(_QWORD *)v145 != v31)
          objc_enumerationMutation(v28);
        v33 = *(id **)(*((_QWORD *)&v144 + 1) + 8 * v32);
        if (sub_100055868((uint64_t)v33) == 32549)
          break;
        if (v30 == (id)++v32)
        {
          v30 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v144, v150, 16);
          if (v30)
            goto LABEL_4;
          goto LABEL_10;
        }
      }
      v34 = sub_10022CD6C(v33);
      v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
      v36 = sub_10022C7A4((uint64_t)KmlTlv, v35);
      v37 = objc_claimAutoreleasedReturnValue(v36);

      v129 = (void *)v37;
      if (!v37)
        goto LABEL_30;
      v125 = v1;
      v142 = 0u;
      v143 = 0u;
      v140 = 0u;
      v141 = 0u;
      v38 = objc_msgSend(&off_100322D00, "countByEnumeratingWithState:objects:count:", &v140, v149, 16);
      if (v38)
      {
        v39 = v38;
        v40 = *(_QWORD *)v141;
        do
        {
          for (i = 0; i != v39; i = (char *)i + 1)
          {
            if (*(_QWORD *)v141 != v40)
              objc_enumerationMutation(&off_100322D00);
            v42 = *(void **)(*((_QWORD *)&v140 + 1) + 8 * (_QWORD)i);
            v136 = 0u;
            v137 = 0u;
            v138 = 0u;
            v139 = 0u;
            v43 = v129;
            v44 = objc_msgSend(v43, "countByEnumeratingWithState:objects:count:", &v136, v148, 16);
            if (v44)
            {
              v45 = v44;
              v46 = *(_QWORD *)v137;
              while (2)
              {
                for (j = 0; j != v45; j = (char *)j + 1)
                {
                  if (*(_QWORD *)v137 != v46)
                    objc_enumerationMutation(v43);
                  v48 = *(_QWORD *)(*((_QWORD *)&v136 + 1) + 8 * (_QWORD)j);
                  v49 = sub_100055868(v48);
                  if (v49 == objc_msgSend(v42, "unsignedIntValue"))
                  {
                    v50 = sub_10022D014(v48);
                    v51 = (void *)objc_claimAutoreleasedReturnValue(v50);
                    objc_msgSend(v128, "appendData:", v51);

                    goto LABEL_27;
                  }
                }
                v45 = objc_msgSend(v43, "countByEnumeratingWithState:objects:count:", &v136, v148, 16);
                if (v45)
                  continue;
                break;
              }
            }
LABEL_27:

          }
          v39 = objc_msgSend(&off_100322D00, "countByEnumeratingWithState:objects:count:", &v140, v149, 16);
        }
        while (v39);
      }

      v1 = v125;
    }
    else
    {
LABEL_10:

LABEL_30:
      v52 = objc_msgSend(objc_retainAutorelease(*(id *)(v1 + 328)), "UTF8String");
      KmlSharingLogFunc(OS_LOG_TYPE_ERROR, (uint64_t)"KmlFriendSharingManager.m", 2010, (uint64_t)v52, CFSTR("Signed request validation needs to catch this, at this point we just continue"), v53, v54, v55, v122);
    }
    v56 = sub_100050680(*(_QWORD *)(v1 + 56));
    v57 = (void *)objc_claimAutoreleasedReturnValue(v56);
    v58 = sub_10022D014((uint64_t)v57);
    v59 = (void *)objc_claimAutoreleasedReturnValue(v58);
    objc_msgSend(v128, "appendData:", v59);

    v60 = objc_retainAutorelease(*(id *)(v1 + 328));
    v61 = objc_msgSend(v60, "UTF8String");
    v62 = kmlUtilHexStringFromData(v128);
    v63 = (void *)objc_claimAutoreleasedReturnValue(v62);

    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 2029, (uint64_t)v61, CFSTR("Key attestation Data - %@"), v64, v65, v66, (uint64_t)v63);
    objc_storeStrong((id *)(v1 + 120), v128);
    v67 = objc_retainAutorelease(*(id *)(v1 + 328));
    v68 = objc_msgSend(v67, "UTF8String");
    v69 = kmlUtilHexStringFromData(*(void **)(v1 + 120));
    v70 = (void *)objc_claimAutoreleasedReturnValue(v69);

    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 2032, (uint64_t)v68, CFSTR("Friend Attestation Package data %@"), v71, v72, v73, (uint64_t)v70);
    v74 = sub_1002225B8(*(_QWORD *)(v1 + 56));
    v75 = (void *)objc_claimAutoreleasedReturnValue(v74);

    if (v75)
    {
      v76 = *(_BYTE **)(v1 + 208);
      v77 = sub_1002225B8(*(_QWORD *)(v1 + 56));
      v78 = (void *)objc_claimAutoreleasedReturnValue(v77);
      sub_10022DCEC(v76, v78);

      v79 = objc_opt_new(SESConfigDCK);
      v80 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 104), "manufacturer"));
      v81 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 104), "brand"));
      v82 = sub_10021728C(*(_QWORD *)(v1 + 208));
      v83 = (void *)objc_claimAutoreleasedReturnValue(v82);
      v84 = (void *)objc_claimAutoreleasedReturnValue(-[SESConfigDCK BOOLValueForSetting:manufacturer:brand:uuid:error:](v79, "BOOLValueForSetting:manufacturer:brand:uuid:error:", 7, v80, v81, v83, 0));
      v85 = objc_msgSend(v84, "BOOLValue");

      if ((v85 & 1) == 0)
      {
        v86 = objc_retainAutorelease(*(id *)(v1 + 328));
        v87 = objc_msgSend(v86, "UTF8String");
        v88 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 104), "manufacturer"));
        v89 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 104), "brand"));

        KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 2044, (uint64_t)v87, CFSTR("UWB is blocked for %@, %@"), v90, v91, v92, (uint64_t)v88);
        sub_10022E9EC(*(_QWORD *)(v1 + 208), v93, v94, v95, v96, v97, v98, v99, v124);
      }
    }
    v100 = *(_QWORD *)(v1 + 336);
    v131[0] = _NSConcreteStackBlock;
    v131[1] = 3221225472;
    v131[2] = sub_10024B59C;
    v131[3] = &unk_10030FB80;
    v101 = v126;
    v132 = v101;
    v102 = v128;
    v133 = v102;
    v134 = v1;
    v135 = v75 != 0;
    v103 = SESEndPointUpdateWithBlock(v100, v131);
    v104 = (void *)objc_claimAutoreleasedReturnValue(v103);
    if (sub_10022F138(*(_QWORD *)(v1 + 208)))
    {
      v105 = (void *)objc_claimAutoreleasedReturnValue(+[NISession deviceCapabilities](NISession, "deviceCapabilities"));
      v106 = objc_msgSend(v105, "supportsPreciseDistanceMeasurement");

      v107 = v127;
      if (v106)
      {
        v108 = objc_msgSend(objc_retainAutorelease(*(id *)(v1 + 328)), "UTF8String");
        KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 2089, (uint64_t)v108, CFSTR("disable full power express over nfc for uwb capable key"), v109, v110, v111, v123);
        v112 = *(_QWORD *)(v1 + 336);
        v130 = v104;
        SESEndPointConfigureNFCExpressInLPM(0, 0, v112, 1, &v130);
        v113 = v130;

        v104 = v113;
      }
    }
    else
    {
      v107 = v127;
    }
    if (v104)
    {
      v114 = objc_msgSend(objc_retainAutorelease(*(id *)(v1 + 328)), "UTF8String");
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 2094, (uint64_t)v114, CFSTR("Could not update endpoint"), v115, v116, v117, v123);
    }
    v118 = objc_msgSend(objc_retainAutorelease(*(id *)(v1 + 328)), "UTF8String");
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 2098, (uint64_t)v118, CFSTR("FriendSharingManager: Saved Mailbox Data from signed request successfully"), v119, v120, v121, v123);
    sub_1002429CC(v1, 32);

  }
}

void sub_10024A470(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;
  _WORD *v11;
  void *v12;
  void *v13;
  void *v14;
  _WORD *v15;
  void *v16;
  void *v17;
  _WORD *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  _WORD *v30;
  void *v31;
  void *v32;
  _WORD *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  id v41;
  void *v42;
  id AccountIdHash;
  void *v44;
  _WORD *v45;
  void *v46;
  void *v47;
  id v48;
  id v49;
  id v50;
  uint64_t v51;
  void *i;
  uint64_t v53;
  id v55;
  void *v56;
  uint64_t v57;
  void *v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  _WORD *v65;
  void *v66;
  id v67;
  uint64_t v68;
  void *v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  id v79;
  _BYTE v80[128];

  if (a1)
  {
    if (*(_QWORD *)(a1 + 80))
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
      v11 = sub_10022CB3C((uint64_t)KmlTlv, 32565, *(void **)(a1 + 120));
      v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      objc_msgSend(v10, "addObject:", v12);

      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 80), "certificates"));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectAtIndexedSubscript:", 2));
      v15 = sub_10022CB3C((uint64_t)KmlTlv, 32548, v14);
      v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
      objc_msgSend(v10, "addObject:", v16);

      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectAtIndexedSubscript:", 1));
      v18 = sub_10022CB3C((uint64_t)KmlTlv, 32546, v17);
      v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
      objc_msgSend(v10, "addObject:", v19);

      if (sub_10022DC4C(*(_QWORD *)(a1 + 208)) && sub_10022DC84(*(_QWORD *)(a1 + 208)))
      {
        v20 = *(_QWORD *)(a1 + 336);
        v79 = 0;
        v21 = SESEndPointCreateEncryptionKey(v20, &v79);
        v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
        v23 = v79;
        if (v23)
        {
          v24 = objc_retainAutorelease(*(id *)(a1 + 328));
          v25 = objc_msgSend(v24, "UTF8String");
          KmlSharingLogFunc(OS_LOG_TYPE_ERROR, (uint64_t)"KmlFriendSharingManager.m", 2282, (uint64_t)v25, CFSTR("Error getting endpoint encryption key - %@"), v26, v27, v28, (uint64_t)v23);

          v22 = 0;
        }

      }
      else
      {
        v22 = 0;
      }
      v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 80), "privacyPublicKey"));
      v30 = sub_10022CB3C((uint64_t)KmlTlv, 24393, v29);
      v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
      objc_msgSend(v10, "addObject:", v31);

      v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("ECIES_v1"), "dataUsingEncoding:", 4));
      v33 = sub_10022CB3C((uint64_t)KmlTlv, 218, v32);
      v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
      objc_msgSend(v10, "addObject:", v34);

      if (objc_msgSend(*(id *)(a1 + 216), "agreedKmlSharingVersion") == 768)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlFriendSharingManager buildTrackingRequest]", 2295, CFSTR("Add account info hash"), v35, v36, v37, v38, v74);
        v39 = *(void **)(a1 + 224);
        v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 104), "readerIdentifier"));
        v41 = kmlUtilDataForHexString(v40);
        v42 = (void *)objc_claimAutoreleasedReturnValue(v41);
        AccountIdHash = kmlUtilGenerateAccountIdHash(v39, v42);
        v44 = (void *)objc_claimAutoreleasedReturnValue(AccountIdHash);

        v45 = sub_10022CB3C((uint64_t)KmlTlv, 94, v44);
        v46 = (void *)objc_claimAutoreleasedReturnValue(v45);
        objc_msgSend(v10, "addObject:", v46);

      }
      v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData data](NSMutableData, "data"));
      v75 = 0u;
      v76 = 0u;
      v77 = 0u;
      v78 = 0u;
      v48 = v10;
      v49 = objc_msgSend(v48, "countByEnumeratingWithState:objects:count:", &v75, v80, 16);
      if (v49)
      {
        v50 = v49;
        v51 = *(_QWORD *)v76;
        do
        {
          for (i = 0; i != v50; i = (char *)i + 1)
          {
            if (*(_QWORD *)v76 != v51)
              objc_enumerationMutation(v48);
            v53 = *(_QWORD *)(*((_QWORD *)&v75 + 1) + 8 * (_QWORD)i);
            if (sub_100055868(v53) == 24393 && v22 != 0)
              objc_msgSend(v47, "appendData:", v22);
            v55 = sub_10022D014(v53);
            v56 = (void *)objc_claimAutoreleasedReturnValue(v55);
            objc_msgSend(v47, "appendData:", v56);

          }
          v50 = objc_msgSend(v48, "countByEnumeratingWithState:objects:count:", &v75, v80, 16);
        }
        while (v50);
      }

      v57 = sub_1002225C4(*(_QWORD *)(a1 + 56));
      v58 = (void *)objc_claimAutoreleasedReturnValue(v57);

      if (v58)
      {
        v59 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 328)), "UTF8String");
        KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 2313, (uint64_t)v59, CFSTR("refreshed instance CA cert received from owner. Adding it to tracking request"), v60, v61, v62, v74);
        v63 = sub_1002225C4(*(_QWORD *)(a1 + 56));
        v64 = (void *)objc_claimAutoreleasedReturnValue(v63);
        objc_msgSend(v47, "appendData:", v64);

      }
      v65 = sub_10022CB3C((uint64_t)KmlTlv, 32568, v47);
      v66 = (void *)objc_claimAutoreleasedReturnValue(v65);
      v67 = sub_10022D014((uint64_t)v66);
      v68 = objc_claimAutoreleasedReturnValue(v67);
      v69 = *(void **)(a1 + 128);
      *(_QWORD *)(a1 + 128) = v68;

      kmlUtilLogLargeData(CFSTR("plaintext tracking request"), *(void **)(a1 + 128));
    }
    else
    {
      v70 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 328)), "UTF8String");
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 2259, (uint64_t)v70, CFSTR("We don't have an endpoint to create tracking request."), v71, v72, v73, a9);
    }
  }
}

id sub_10024A964(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  NSString *v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  void *v34;
  id v35;
  void *v36;
  uint64_t v37;
  void *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  void *v45;
  id v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  void *v53;
  uint64_t v55;
  _QWORD v56[4];
  id v57;
  uint64_t v58;
  id v59;
  id v60;
  NSErrorUserInfoKey v61;
  void *v62;

  if (!a1)
    return 0;
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 336);
    v60 = 0;
    v4 = SESEndPointPrivacyEncryption(v3, v2, &v60);
    v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    v6 = v60;
    if (v6)
    {
      v7 = v6;
      v8 = objc_retainAutorelease(*(id *)(a1 + 328));
      v9 = objc_msgSend(v8, "UTF8String");
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 2331, (uint64_t)v9, CFSTR("Failed to encrypt friend tracking request with - %@"), v10, v11, v12, (uint64_t)v7);

      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "userInfo"));
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v13, 105, v14));

      v16 = v15;
      v17 = v16;
    }
    else
    {
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "version"));
      if (objc_msgSend(*(id *)(a1 + 216), "agreedKmlSharingVersion") == 768)
      {
        v21 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 328)), "UTF8String");
        KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 2353, (uint64_t)v21, CFSTR("Version string : %@"), v22, v23, v24, (uint64_t)v20);
      }
      v25 = objc_alloc((Class)DAAlishaKeyEncryptedRequest);
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "ephemeralPublicKeydata"));
      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "receiverPublicKeyHash"));
      v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "cipherText"));
      v29 = objc_msgSend(v25, "initWithVersion:ephemeralPublicKey:publicKeyHash:encryptedRequest:", v20, v26, v27, v28);
      v30 = *(void **)(a1 + 176);
      *(_QWORD *)(a1 + 176) = v29;

      v31 = *(void **)(a1 + 176);
      v59 = 0;
      v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "encodeWithError:", &v59));
      v33 = v59;
      if (v33 || !v32)
      {
        v46 = objc_retainAutorelease(*(id *)(a1 + 328));
        v47 = objc_msgSend(v46, "UTF8String");
        KmlSharingLogFunc(OS_LOG_TYPE_ERROR, (uint64_t)"KmlFriendSharingManager.m", 2360, (uint64_t)v47, CFSTR("Encode key tracking request error %@, trackingRequestData=%@"), v48, v49, v50, (uint64_t)v33);

        v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
        v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "userInfo"));
        v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v51, 105, v52));

        v16 = v53;
      }
      else
      {
        v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 80), "publicKeyIdentifier"));
        v35 = kmlUtilHexStringFromData(v34);
        v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
        v56[0] = _NSConcreteStackBlock;
        v56[1] = 3221225472;
        v56[2] = sub_10024BD30;
        v56[3] = &unk_10030F130;
        v57 = v32;
        v58 = a1;
        v37 = SESEndPointUpdateWithBlock(v36, v56);
        v38 = (void *)objc_claimAutoreleasedReturnValue(v37);

        if (v38)
        {
          v39 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 328)), "UTF8String");
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 2372, (uint64_t)v39, CFSTR("Could not update endpoint"), v40, v41, v42, v55);
          v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
          v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "userInfo"));
          v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v43, 105, v44));

        }
        else
        {
          v45 = 0;
        }
        v16 = v45;

      }
      v17 = v16;
    }
  }
  else
  {
    v16 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
    v61 = NSLocalizedDescriptionKey;
    v18 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(104));
    v5 = (void *)objc_claimAutoreleasedReturnValue(v18);
    v62 = v5;
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v62, &v61, 1));
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v16, 104, v19));

  }
  return v17;
}

void sub_10024AE0C(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  id v13;

  if (a1)
  {
    v2 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 328)), "UTF8String");
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 2215, (uint64_t)v2, CFSTR("Sending cancel message."), v3, v4, v5, v12);
    v6 = sub_100238330([KmlCancelMessage alloc], (int)objc_msgSend(*(id *)(a1 + 264), "code"));
    v7 = sub_1002383B4((uint64_t)v6);
    v13 = (id)objc_claimAutoreleasedReturnValue(v7);

    if (*(_QWORD *)(a1 + 344))
    {
      v8 = objc_msgSend(objc_alloc((Class)DACarKeyGenericCrossPlatformSharingData), "initWithSharingIdentifier:friendKeyIdentifier:sharingMessageType:message:", *(_QWORD *)(a1 + 328), 0, 5, v13);
      v9 = objc_msgSend(objc_alloc((Class)DACarKeyAdditionalCrossPlatformSharingData), "initWithSharingSessionUUID:bindingAttestation:targetDeviceType:initiatorIdsPseudonym:", *(_QWORD *)(a1 + 352), 0, *(_QWORD *)(a1 + 360), 0);
      v10 = objc_msgSend(objc_alloc((Class)DACarKeySharingMessage), "initWithGenericCrossPlatformSharingData:additionalData:privateData:", v8, v9, 0);
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[KmlClientReporterFactory getReporter](KmlClientReporterFactory, "getReporter"));
      objc_msgSend(v11, "sendCrossPlatformSharingMessage:toMailboxIdentifier:", v10, *(_QWORD *)(a1 + 344));
      sub_1002429CC(a1, 52);

    }
    else
    {
      sub_100234AC4(*(_QWORD *)(a1 + 240), v13, 0, 0, *(void **)(a1 + 328), 0, *(void **)(a1 + 352), *(void **)(a1 + 72), *(_QWORD *)(a1 + 360), 5);
    }

  }
}

void sub_10024AF88(_QWORD *a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;
  id DckIdFromSlotId;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  id v27;
  void *v28;
  uint64_t v29;
  void *v30;

  v3 = a2;
  v4 = sub_10021728C(*(_QWORD *)(a1[4] + 208));
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  objc_msgSend(v3, "setReaderConfigID:", v5);

  objc_msgSend(v3, "setFriendlyName:", *(_QWORD *)(a1[4] + 88));
  objc_msgSend(v3, "setReaderInfo:", *(_QWORD *)(a1[4] + 312));
  objc_msgSend(v3, "setInvitationIdentifier:", *(_QWORD *)(a1[4] + 328));
  v6 = (uint64_t *)a1[4];
  v7 = (void *)v6[44];
  if (v7)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "UUIDString"));
    objc_msgSend(v3, "setSharingSessionUUID:", v8);

    v6 = (uint64_t *)a1[4];
  }
  if (v6[9])
  {
    objc_msgSend(v3, "setOwnerIDSIdentifier:");
    v6 = (uint64_t *)a1[4];
  }
  v9 = sub_1000117D0(v6[4]);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  v11 = sub_100016AC8((uint64_t)v10);
  v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  v13 = sub_1002528C4((uint64_t)v12);
  v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
  DckIdFromSlotId = kmlUtilGetDckIdFromSlotId(v14);
  v16 = (void *)objc_claimAutoreleasedReturnValue(DckIdFromSlotId);
  objc_msgSend(v3, "setBleDCKIdentifier:", v16);

  objc_msgSend(v3, "setDeviceConfiguration:", a1[5]);
  v17 = sub_1002225AC(*(_QWORD *)(a1[4] + 208));
  v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
  objc_msgSend(v3, "setBleIntroKey:", v18);

  v19 = sub_100050680(*(_QWORD *)(a1[4] + 208));
  v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
  objc_msgSend(v3, "setBleOOBKey:", v20);

  v21 = sub_10022ADB0(*(_QWORD *)(a1[4] + 208));
  v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
  objc_msgSend(v3, "setBleAddress:", v22);

  objc_msgSend(v3, "setVehicleSupportedVersionsData:", a1[6]);
  v23 = sub_1000117D0(*(_QWORD *)(a1[4] + 32));
  v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
  v25 = sub_100016AC8((uint64_t)v24);
  v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
  v27 = sub_100252E40((uint64_t)v26);
  v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
  objc_msgSend(v3, "setMailboxSizesPlusAdditionalData:", v28);

  v29 = a1[4];
  if (*(_QWORD *)(v29 + 224))
  {
    objc_msgSend(v3, "setAnonymizedDsid:");
    v29 = a1[4];
  }
  v30 = *(void **)(v29 + 80);
  *(_QWORD *)(v29 + 80) = v3;

}

void sub_10024B188(uint64_t a1)
{
  KeySigningRequest *v2;
  char v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  id WeakRetained;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSString *v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  NSErrorUserInfoKey v33;
  void *v34;

  v2 = objc_alloc_init(KeySigningRequest);
  sub_1000536E4((uint64_t)v2, *(void **)(*(_QWORD *)(a1 + 32) + 216));
  v3 = sub_10022121C((uint64_t)v2, *(void **)(*(_QWORD *)(a1 + 32) + 48));
  v4 = *(_QWORD *)(a1 + 32);
  if ((v3 & 1) != 0)
  {
    v5 = sub_100221640(v2, *(void **)(v4 + 144));
    v6 = objc_claimAutoreleasedReturnValue(v5);
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(void **)(v7 + 48);
    *(_QWORD *)(v7 + 48) = v6;

    ++*(_QWORD *)(*(_QWORD *)(a1 + 32) + 296);
    sub_100247BDC(*(_QWORD *)(a1 + 32));
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
      v10 = *(void **)(v9 + 328);
    else
      v10 = 0;
    v11 = objc_msgSend(objc_retainAutorelease(v10), "UTF8String");
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1803, (uint64_t)v11, CFSTR("Sending signing request with new passcode"), v12, v13, v14, v32);
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Passcode Retry SigningRequest - %@"), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 328)));
    kmlUtilLogLargeData(v15, *(void **)(*(_QWORD *)(a1 + 32) + 48));

    v16 = *(_QWORD *)(a1 + 32);
    if (!*(_QWORD *)(v16 + 344))
    {
      sub_100234AC4(*(_QWORD *)(v16 + 240), *(void **)(v16 + 48), 0, *(void **)(v16 + 136), *(void **)(v16 + 328), *(void **)(v16 + 336), *(void **)(v16 + 352), *(void **)(v16 + 72), 1, 7);
      goto LABEL_12;
    }
    v17 = objc_msgSend(objc_alloc((Class)DACarKeyGenericCrossPlatformSharingData), "initWithSharingIdentifier:friendKeyIdentifier:sharingMessageType:message:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 328), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 336), 7, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48));
    v18 = objc_msgSend(objc_alloc((Class)DACarKeyAdditionalCrossPlatformSharingData), "initWithSharingSessionUUID:bindingAttestation:targetDeviceType:initiatorIdsPseudonym:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 352), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 136), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 360), 0);
    v19 = objc_msgSend(objc_alloc((Class)DACarKeySharingMessage), "initWithGenericCrossPlatformSharingData:additionalData:privateData:", v17, v18, 0);
    WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 304));
    objc_msgSend(WeakRetained, "handleCrossPlatformSigningRequest:status:keyInformation:", v19, 0, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 320));

    v21 = (void *)objc_claimAutoreleasedReturnValue(+[KmlClientReporterFactory getReporter](KmlClientReporterFactory, "getReporter"));
    objc_msgSend(v21, "sendCrossPlatformSharingMessage:toMailboxIdentifier:", v19, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 344));

    goto LABEL_10;
  }
  if (v4)
    v22 = *(void **)(v4 + 328);
  else
    v22 = 0;
  v23 = objc_msgSend(objc_retainAutorelease(v22), "UTF8String");
  KmlSharingLogFunc(OS_LOG_TYPE_ERROR, (uint64_t)"KmlFriendSharingManager.m", 1790, (uint64_t)v23, CFSTR("Failed to parse signingRequest that we just built"), v24, v25, v26, v32);
  v27 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v27 + 344))
  {
    v17 = objc_loadWeakRetained((id *)(v27 + 304));
    v18 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
    v33 = NSLocalizedDescriptionKey;
    v28 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(109));
    v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
    v34 = v29;
    v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v34, &v33, 1));
    v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v18, 109, v30));
    objc_msgSend(v17, "handleCrossPlatformSigningRequest:status:keyInformation:", 0, v31, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 320));

LABEL_10:
  }
LABEL_12:

}

id sub_10024B4E0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v15;
  id v16;

  if (!a1)
    return 0;
  v16 = 0;
  v2 = SESEndPointCreateKeyPair(&v16);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v8 = v16;
  if (v8)
  {
    KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlFriendSharingManager createEphemeralPrivacyEncryptionKeys]", 1952, CFSTR("Failed to create ephemeral key pair"), v4, v5, v6, v7, v15);
    v9 = v8;
  }
  else
  {
    v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "publicKey"));
    v11 = *(void **)(a1 + 160);
    *(_QWORD *)(a1 + 160) = v10;

    v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "secretKey"));
    v13 = *(void **)(a1 + 168);
    *(_QWORD *)(a1 + 168) = v12;

  }
  return v8;
}

void sub_10024B59C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id *v15;
  id *v16;
  void *v17;
  uint64_t v18;
  id *v19;
  id *v20;
  void *v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  void *v36;

  v3 = a2;
  objc_msgSend(v3, "setMailboxMapping:", *(_QWORD *)(a1 + 32));
  objc_msgSend(v3, "setSharingAttestationData:", *(_QWORD *)(a1 + 40));
  v4 = sub_1002225E0(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 56));
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = objc_msgSend(v5, "count");

  if (v6)
  {
    v7 = sub_1002225E0(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 56));
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    objc_msgSend(v3, "setAdditionalAttestationsDict:", v8);

  }
  v9 = sub_10002BA88(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 56));
  v10 = objc_claimAutoreleasedReturnValue(v9);
  if (v10)
  {
    v11 = (void *)v10;
    v12 = sub_1000117DC(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 56));
    v13 = (void *)objc_claimAutoreleasedReturnValue(v12);

    if (v13)
    {
      v14 = sub_10002BA88(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 56));
      v15 = (id *)objc_claimAutoreleasedReturnValue(v14);
      v16 = sub_10022CD6C(v15);
      v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
      objc_msgSend(v3, "setOwnerEphemeralKey:", v17);

      v18 = sub_1000117DC(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 56));
      v19 = (id *)objc_claimAutoreleasedReturnValue(v18);
      v20 = sub_10022CD6C(v19);
      v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
      objc_msgSend(v3, "setSharingEncryptedData:", v21);

    }
  }
  v22 = *(_QWORD *)(a1 + 48);
  if (*(_QWORD *)(v22 + 344) && *(_QWORD *)(v22 + 72))
  {
    v23 = objc_retainAutorelease(*(id *)(v22 + 328));
    v24 = objc_msgSend(v23, "UTF8String");
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 2067, (uint64_t)v24, CFSTR("Owner is apple device with IDS ID %@"), v25, v26, v27, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 72));

    objc_msgSend(v3, "setOwnerIDSIdentifier:", *(_QWORD *)(*(_QWORD *)(a1 + 48) + 72));
    v22 = *(_QWORD *)(a1 + 48);
  }
  if (*(_BYTE *)(a1 + 56))
  {
    v28 = sub_10022D6EC(*(id **)(v22 + 208));
    v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
    objc_msgSend(v3, "setDeviceConfiguration:", v29);

    v30 = sub_1002225AC(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 208));
    v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
    objc_msgSend(v3, "setBleIntroKey:", v31);

    v32 = sub_100050680(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 208));
    v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
    objc_msgSend(v3, "setBleOOBKey:", v33);

    v34 = sub_10022ADB0(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 208));
    v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
    objc_msgSend(v3, "setBleAddress:", v35);

    v22 = *(_QWORD *)(a1 + 48);
  }
  v36 = *(void **)(v22 + 80);
  *(_QWORD *)(v22 + 80) = v3;

}

void sub_10024B7DC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  BOOL v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t v21;
  _QWORD v22[5];
  id v23;
  uint64_t v24;
  uint64_t v25;

  if (a1)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore defaultStore](ACAccountStore, "defaultStore"));
    v25 = ACAccountTypeIdentifierAppleAccount;
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v25, 1));
    v23 = 0;
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "accountsWithAccountTypeIdentifiers:error:", v3, &v23));
    v5 = v23;
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "firstObject"));

    if (v6)
      v7 = v5 == 0;
    else
      v7 = 0;
    if (v7)
    {
      v17 = objc_alloc_init((Class)AKDeviceListRequestContext);
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "aa_altDSID"));
      objc_msgSend(v17, "setAltDSID:", v18);

      objc_msgSend(v17, "setIncludeUntrustedDevices:", 1);
      v24 = AKServiceNameiCloud;
      v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v24, 1));
      objc_msgSend(v17, "setServices:", v19);

      objc_msgSend(v17, "setOperatingSystems:", &off_100322D18);
      v20 = objc_alloc_init((Class)AKAppleIDAuthenticationController);
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472;
      v22[2] = sub_10024BA38;
      v22[3] = &unk_10030FBA8;
      v22[4] = a1;
      objc_msgSend(v20, "deviceListWithContext:completion:", v17, v22);

      v5 = v17;
    }
    else
    {
      v8 = objc_retainAutorelease(*(id *)(a1 + 328));
      v9 = objc_msgSend(v8, "UTF8String");
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 2111, (uint64_t)v9, CFSTR("Failed to lookup account : %@"), v10, v11, v12, (uint64_t)v5);

      v13 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 328)), "UTF8String");
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 2112, (uint64_t)v13, CFSTR("We are not going to handle this invite. clean up"), v14, v15, v16, v21);
      sub_1002429CC(a1, 52);
    }

  }
}

void sub_10024BA38(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD block[5];
  id v26;

  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "deviceList"));
  v7 = v6;
  if (v5 || !objc_msgSend(v6, "count"))
  {
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(NSObject **)(v8 + 280);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10024BBAC;
    block[3] = &unk_100304370;
    block[4] = v8;
    v26 = v5;
    dispatch_async(v9, block);

  }
  else
  {
    v10 = *(_QWORD *)(a1 + 32);
    if (v10)
      v11 = *(void **)(v10 + 328);
    else
      v11 = 0;
    v12 = objc_msgSend(objc_retainAutorelease(v11), "UTF8String");
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectAtIndexedSubscript:", 0));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "name"));
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 2126, (uint64_t)v12, CFSTR("Found at least one watch on our account with device name %@"), v15, v16, v17, (uint64_t)v14);

    v18 = *(_QWORD *)(a1 + 32);
    if (v18)
      v19 = *(void **)(v18 + 328);
    else
      v19 = 0;
    v20 = objc_msgSend(objc_retainAutorelease(v19), "UTF8String");
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 2127, (uint64_t)v20, CFSTR("We are not going to handle this invite. clean up"), v21, v22, v23, v24);
    sub_1002429CC(*(_QWORD *)(a1 + 32), 52);
  }

}

uint64_t sub_10024BBAC(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  NSString *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  NSErrorUserInfoKey v17;
  void *v18;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    v3 = *(void **)(v2 + 328);
  else
    v3 = 0;
  v4 = objc_retainAutorelease(v3);
  v5 = objc_msgSend(v4, "UTF8String");
  KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 2131, (uint64_t)v5, CFSTR("No watch found on our account %@"), v6, v7, v8, *(_QWORD *)(a1 + 40));

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 232) = 1;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
  v17 = NSLocalizedDescriptionKey;
  v10 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(113));
  v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  v18 = v11;
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v18, &v17, 1));
  v13 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v9, 113, v12));
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(void **)(v14 + 264);
  *(_QWORD *)(v14 + 264) = v13;

  return sub_1002429CC(*(_QWORD *)(a1 + 32), 21);
}

void sub_10024BD30(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;

  v3 = a2;
  objc_msgSend(v3, "setTrackingRequest:", *(_QWORD *)(a1 + 32));
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(void **)(v4 + 80);
  *(_QWORD *)(v4 + 80) = v3;

}

uint64_t sub_10024BD68(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = *(_QWORD *)(result + 8);
    result = 1;
    switch(v1)
    {
      case 0:
      case 1:
      case 2:
      case 3:
        return result;
      case 11:
        result = 2;
        break;
      case 12:
      case 13:
        result = 3;
        break;
      case 21:
      case 22:
        result = 4;
        break;
      case 23:
        result = 5;
        break;
      default:
        result = 6;
        break;
    }
  }
  return result;
}

void sub_10024BDE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __CFString *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  void *i;
  void *v37;
  void *v38;
  unsigned int v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  KmlDeviceConfigurationData *v46;
  void *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  id v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  id v70;
  _BYTE v71[128];

  if (a1)
  {
    v10 = (id *)(a1 + 80);
    if (*(_QWORD *)(a1 + 80))
    {
      v11 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 328)), "UTF8String");
      v15 = CFSTR("We already have our endpoint. No need to look up endpoint");
      v16 = 2473;
LABEL_4:
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", v16, (uint64_t)v11, v15, v12, v13, v14, a9);
      return;
    }
    v17 = *(_QWORD *)(a1 + 336);
    v18 = objc_retainAutorelease(*(id *)(a1 + 328));
    if (!v17)
    {
      v11 = objc_msgSend(v18, "UTF8String");
      v15 = CFSTR("We have no way to look up our endpoint for re-generated object");
      v16 = 2478;
      goto LABEL_4;
    }
    v19 = v18;
    v20 = objc_msgSend(v19, "UTF8String");
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 2482, (uint64_t)v20, CFSTR("Looking for endpoint with id %@"), v21, v22, v23, *(_QWORD *)(a1 + 336));

    v70 = 0;
    v24 = SESEndPointList(&v70);
    v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
    v26 = v70;
    if (v26)
    {
      v27 = objc_retainAutorelease(*(id *)(a1 + 328));
      v28 = objc_msgSend(v27, "UTF8String");
      KmlSharingLogFunc(OS_LOG_TYPE_ERROR, (uint64_t)"KmlFriendSharingManager.m", 2486, (uint64_t)v28, CFSTR("Error in getting endpoint list: %@"), v29, v30, v31, (uint64_t)v26);

    }
    else
    {
      v68 = 0u;
      v69 = 0u;
      v66 = 0u;
      v67 = 0u;
      v65 = v25;
      v32 = v25;
      v33 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v66, v71, 16);
      if (v33)
      {
        v34 = v33;
        v35 = *(_QWORD *)v67;
        while (2)
        {
          for (i = 0; i != v34; i = (char *)i + 1)
          {
            if (*(_QWORD *)v67 != v35)
              objc_enumerationMutation(v32);
            v37 = *(void **)(*((_QWORD *)&v66 + 1) + 8 * (_QWORD)i);
            v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "publicKeyIdentifier"));
            v39 = objc_msgSend(v38, "isEqualToData:", *(_QWORD *)(a1 + 96));

            if (v39)
            {
              v40 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 328)), "UTF8String");
              KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 2492, (uint64_t)v40, CFSTR("Found our endpoint"), v41, v42, v43, v64);
              objc_storeStrong(v10, v37);
              goto LABEL_19;
            }
          }
          v34 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v66, v71, 16);
          if (v34)
            continue;
          break;
        }
      }
LABEL_19:

      if (*v10)
      {
        v44 = objc_claimAutoreleasedReturnValue(objc_msgSend(*v10, "friendlyName"));
        v45 = *(void **)(a1 + 88);
        *(_QWORD *)(a1 + 88) = v44;

        v46 = [KmlDeviceConfigurationData alloc];
        v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 80), "deviceConfiguration"));
        v48 = sub_10022D114((uint64_t)v46, v47);
        v49 = *(void **)(a1 + 208);
        *(_QWORD *)(a1 + 208) = v48;

        v50 = sub_10021804C((uint64_t)[KmlVersions alloc], *(void **)(a1 + 80));
        v51 = *(void **)(a1 + 216);
        *(_QWORD *)(a1 + 216) = v50;

        v52 = *(_QWORD *)(a1 + 216);
        v53 = sub_100217298(*(_QWORD *)(a1 + 208));
        v54 = (void *)objc_claimAutoreleasedReturnValue(v53);
        v55 = sub_100218DE4(v52, v54);

        v56 = *(_QWORD *)(a1 + 216);
        v57 = sub_1002299D0(*(_QWORD *)(a1 + 208));
        v58 = (void *)objc_claimAutoreleasedReturnValue(v57);
        v59 = sub_100219298(v56, v58);

      }
      else
      {
        v60 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 328)), "UTF8String");
        KmlSharingLogFunc(OS_LOG_TYPE_ERROR, (uint64_t)"KmlFriendSharingManager.m", 2499, (uint64_t)v60, CFSTR("Failed to find endpoint"), v61, v62, v63, v64);
      }
      v25 = v65;
    }

  }
}

void sub_10024C194(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = sub_10022ADB0(*(_QWORD *)(v2 + 248));
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_100244B58(v2, v4);

  sub_10024BDE0(*(_QWORD *)(a1 + 32), v5, v6, v7, v8, v9, v10, v11, v22);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_QWORD *)(v12 + 8);
  if (v13 == 11 || (v13 == 23 || v13 == 21) && *(_QWORD *)(v12 + 80))
  {
    v14 = objc_msgSend(objc_retainAutorelease(*(id *)(v12 + 328)), "UTF8String");
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 2520, (uint64_t)v14, CFSTR("session is worth restoring"), v15, v16, v17, v23);
  }
  else
  {
    v18 = objc_msgSend(objc_retainAutorelease(*(id *)(v12 + 328)), "UTF8String");
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 2522, (uint64_t)v18, CFSTR("Our Client can not revive sharing in this state. So cancel sharing to clean it out."), v19, v20, v21, v23);
    sub_100243270(*(_QWORD *)(a1 + 32));
  }
  sub_100234518(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 240), *(void **)(a1 + 32), *(void **)(*(_QWORD *)(a1 + 32) + 328));
  sub_1002347A4(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 240), *(void **)(*(_QWORD *)(a1 + 32) + 328));
}

id *sub_10024C28C(id *result, void *a2)
{
  if (result)
    return (id *)objc_storeWeak(result + 38, a2);
  return result;
}

uint64_t sub_10024C29C(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 312);
  return result;
}

uint64_t sub_10024C2A8(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 320);
  return result;
}

char *sub_10024C4F8(void *a1, char a2)
{
  char *v3;
  id v4;
  void *v5;
  objc_super v7;

  if (!a1)
    return 0;
  v7.receiver = a1;
  v7.super_class = (Class)KmlSecureChannel;
  v3 = (char *)objc_msgSendSuper2(&v7, "init");
  if (v3)
  {
    v4 = objc_msgSend(objc_alloc((Class)NSMutableData), "initWithLength:", 16);
    v5 = (void *)*((_QWORD *)v3 + 11);
    *((_QWORD *)v3 + 11) = v4;

    v3[8] = a2;
    *(_WORD *)(v3 + 9) = 256;
  }
  return v3;
}

BOOL sub_10024C57C(_BOOL8 result)
{
  if (result)
    return *(_QWORD *)(result + 48) != 0;
  return result;
}

void sub_10024C590(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  if (a1)
  {
    v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 104), "alishaKey"));
    v3 = *(void **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v2;

    KmlLogFunc_InternalOnly(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel configurePakeKeys]", 87, CFSTR("SecureChannel: Ksc = %@"), v4, v5, v6, v7, *(_QWORD *)(a1 + 32));
    v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 104), "KEnc"));
    v9 = *(void **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v8;

    KmlLogFunc_InternalOnly(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel configurePakeKeys]", 90, CFSTR("SecureChannel: Kenc = %@"), v10, v11, v12, v13, *(_QWORD *)(a1 + 48));
    v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 104), "KMac"));
    v15 = *(void **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v14;

    KmlLogFunc_InternalOnly(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel configurePakeKeys]", 93, CFSTR("SecureChannel: Kmac = %@"), v16, v17, v18, v19, *(_QWORD *)(a1 + 56));
    v20 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 104), "KRMac"));
    v21 = *(void **)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v20;

    KmlLogFunc_InternalOnly(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel configurePakeKeys]", 96, CFSTR("SecureChannel: Krmac = %@"), v22, v23, v24, v25, *(_QWORD *)(a1 + 64));
    v26 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 104), "SymmetricLTS"));
    v27 = *(void **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v26;

    KmlLogFunc_InternalOnly(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel configurePakeKeys]", 99, CFSTR("SecureChannel: LTS = %@"), v28, v29, v30, v31, *(_QWORD *)(a1 + 40));
    v32 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 104), "Kble_intro"));
    v33 = *(void **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v32;

    KmlLogFunc_InternalOnly(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel configurePakeKeys]", 103, CFSTR("SecureChannel: Kble_intro = %@"), v34, v35, v36, v37, *(_QWORD *)(a1 + 72));
    v38 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 104), "Kble_oob_master"));
    v39 = *(void **)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v38;

    KmlLogFunc_InternalOnly(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel configurePakeKeys]", 106, CFSTR("SecureChannel: Kble_oob_master = %@"), v40, v41, v42, v43, *(_QWORD *)(a1 + 80));
  }
}

_QWORD *sub_10024C748(_QWORD *a1, void *a2, void *a3)
{
  _QWORD *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v15;

  if (a1)
  {
    v4 = a1;
    v5 = (void *)a1[12];
    v6 = a3;
    v7 = a2;
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "debugDescription"));
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel handlePakeVerifyWithCurvepointY:remoteEvidence:]", 112, CFSTR("SecureChannel: curvePointY - %@, remoteEvidence - %@, pakeClient - %@"), v8, v9, v10, v11, (uint64_t)v7);

    v12 = objc_claimAutoreleasedReturnValue(objc_msgSend((id)v4[12], "processResponseWithY:M1:", v7, v6));
    v13 = (void *)v4[13];
    v4[13] = v12;

    a1 = (_QWORD *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v4[13], "M2"));
  }
  return a1;
}

_QWORD *sub_10024C800(_QWORD *a1, void *a2, void *a3, void *a4, unsigned int a5, uint64_t a6, uint64_t a7, void *a8)
{
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v29;

  v13 = a2;
  v14 = a3;
  v15 = a4;
  v20 = a8;
  if (a1)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel handlePakeRequestWithScrypt:pairingPassword:salt:cpuCost:blocksize:parallelization:pakeVersion:]", 119, CFSTR("SecureChannel: pairingPassword - %@, salt - %@, pakeVersion - %@"), v16, v17, v18, v19, (uint64_t)v14);
    v21 = objc_msgSend(objc_alloc((Class)_TtC16CryptoKitPrivate18AlishaSPAKE2Prover), "initWithPassword:salt:authenticatedData:keyDerivationCost:", v14, v15, v20, a5);
    v22 = (void *)a1[12];
    a1[12] = v21;

    v27 = (void *)a1[12];
    if (v27)
    {
      a1 = (_QWORD *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "getX"));
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel handlePakeRequestWithScrypt:pairingPassword:salt:cpuCost:blocksize:parallelization:pakeVersion:]", 123, CFSTR("SecureChannel: Failed to create PAKE prover"), v23, v24, v25, v26, v29);
      a1 = 0;
    }
  }

  return a1;
}

id sub_10024C904(uint64_t a1, void *a2, void *a3, __int16 a4)
{
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t v21;
  __int16 v22;

  v7 = a2;
  v8 = a3;
  v22 = a4;
  if (a1)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithLength:](NSMutableData, "dataWithLength:", 16));
    v14 = objc_msgSend(*(id *)(a1 + 88), "mutableCopy");
    if (v8 && objc_msgSend(v8, "length"))
      objc_msgSend(v14, "appendData:", v8);
    if (!*(_BYTE *)(a1 + 8))
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel generateMacWithKey:forPayload:statusWord:error:]", 199, CFSTR("SecureChannel: Status word included in ResponseMac calculation."), v10, v11, v12, v13, v21);
      objc_msgSend(v14, "appendBytes:length:", &v22, 2);
    }
    v15 = objc_msgSend(objc_retainAutorelease(v7), "bytes");
    v16 = objc_retainAutorelease(v14);
    v17 = objc_msgSend(v16, "bytes");
    v18 = objc_msgSend(v16, "length");
    v19 = objc_retainAutorelease(v9);
    CCAESCmac(v15, v17, v18, objc_msgSend(v19, "mutableBytes"));

  }
  else
  {
    v19 = 0;
  }

  return v19;
}

BOOL sub_10024CA40(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  _BOOL8 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  id v59;

  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  if (!a1)
    goto LABEL_9;
  if (objc_msgSend(v9, "length") != (id)8)
  {
    v52 = objc_msgSend(v9, "length");
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel verifyMac:withKey:forPayload:header:error:]", 211, CFSTR("SecureChannel: provided mac is %lu bytes"), v53, v54, v55, v56, (uint64_t)v52);
LABEL_9:
    v28 = 0;
    goto LABEL_10;
  }
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithLength:](NSMutableData, "dataWithLength:", 16));
  v18 = objc_msgSend(*(id *)(a1 + 88), "mutableCopy");
  if (!*(_BYTE *)(a1 + 8))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel verifyMac:withKey:forPayload:header:error:]", 220, CFSTR("SecureChannel: Header included in CommandMac calculation."), v14, v15, v16, v17, v58);
    objc_msgSend(v18, "appendData:", v12);
  }
  v59 = v12;
  objc_msgSend(v18, "appendData:", v11);
  v19 = objc_retainAutorelease(v10);
  v20 = objc_msgSend(v19, "bytes");
  v21 = objc_retainAutorelease(v18);
  v22 = objc_msgSend(v21, "bytes");
  v23 = objc_msgSend(v21, "length");
  v24 = objc_retainAutorelease(v13);
  CCAESCmac(v20, v22, v23, objc_msgSend(v24, "mutableBytes"));
  v25 = objc_retainAutorelease(v9);
  v26 = objc_msgSend(v25, "bytes");
  v27 = objc_retainAutorelease(v24);
  LODWORD(v26) = timingsafe_bcmp(v26, objc_msgSend(v27, "bytes"), 8uLL);
  v28 = (_DWORD)v26 == 0;
  KmlLogFunc_InternalOnly(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel verifyMac:withKey:forPayload:header:error:]", 229, CFSTR("SecureChannel:   mac key = %@"), v29, v30, v31, v32, (uint64_t)v19);
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel verifyMac:withKey:forPayload:header:error:]", 230, CFSTR("SecureChannel:  payload  = %@"), v33, v34, v35, v36, (uint64_t)v21);
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel verifyMac:withKey:forPayload:header:error:]", 231, CFSTR("SecureChannel: their mac = %@"), v37, v38, v39, v40, (uint64_t)v25);
  v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "subdataWithRange:", 0, 8));
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel verifyMac:withKey:forPayload:header:error:]", 232, CFSTR("SecureChannel:    my mac = %@"), v42, v43, v44, v45, (uint64_t)v41);

  if (!(_DWORD)v26)
  {
    v46 = objc_msgSend(v27, "copy");
    v47 = *(void **)(a1 + 88);
    *(_QWORD *)(a1 + 88) = v46;

    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel verifyMac:withKey:forPayload:header:error:]", 236, CFSTR("SecureChannel: new chaining value = %@"), v48, v49, v50, v51, *(_QWORD *)(a1 + 88));
    *(_BYTE *)(a1 + 9) = 0;
  }

  v12 = v59;
LABEL_10:

  return v28;
}

id sub_10024CCE4(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  size_t v18;

  if (!a1)
    return 0;
  v2 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithLength:](NSMutableData, "dataWithLength:", 16)));
  *((_BYTE *)objc_msgSend(v2, "mutableBytes") + 15) = *(_BYTE *)(a1 + 10);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithLength:](NSMutableData, "dataWithLength:", 16));
  v18 = 0;
  v4 = objc_retainAutorelease(*(id *)(a1 + 48));
  v5 = objc_msgSend(v4, "bytes");
  v6 = objc_msgSend(*(id *)(a1 + 48), "length");
  v7 = objc_retainAutorelease(v2);
  v8 = objc_msgSend(v7, "mutableBytes");
  v9 = objc_msgSend(v7, "length");
  v10 = objc_retainAutorelease(v3);
  v11 = CCCrypt(0, 0, 0, v5, (size_t)v6, 0, v8, (size_t)v9, objc_msgSend(v10, "mutableBytes"), (size_t)objc_msgSend(v10, "length"), &v18);

  if ((_DWORD)v11)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel generateCommandICV]", 263, CFSTR("SecureChannel: generateICV failed with %d"), v12, v13, v14, v15, v11);
    v16 = 0;
  }
  else
  {
    v16 = v10;
  }

  return v16;
}

id sub_10024CE48(uint64_t a1)
{
  id v2;
  _BYTE *v3;
  int v4;
  BOOL v5;
  char v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  size_t v22;

  if (!a1)
    return 0;
  v2 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithLength:](NSMutableData, "dataWithLength:", 16)));
  v3 = objc_msgSend(v2, "mutableBytes");
  *v3 = 0x80;
  v4 = *(unsigned __int8 *)(a1 + 10);
  v5 = v4 != 0;
  v6 = v4 - 1;
  if (!v5)
    v6 = 0;
  v3[15] = v6;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithLength:](NSMutableData, "dataWithLength:", 16));
  v22 = 0;
  v8 = objc_retainAutorelease(*(id *)(a1 + 48));
  v9 = objc_msgSend(v8, "bytes");
  v10 = objc_msgSend(*(id *)(a1 + 48), "length");
  v11 = objc_retainAutorelease(v2);
  v12 = objc_msgSend(v11, "mutableBytes");
  v13 = objc_msgSend(v11, "length");
  v14 = objc_retainAutorelease(v7);
  v15 = CCCrypt(0, 0, 0, v9, (size_t)v10, 0, v12, (size_t)v13, objc_msgSend(v14, "mutableBytes"), (size_t)objc_msgSend(v14, "length"), &v22);

  if ((_DWORD)v15)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel generateResponseICV]", 285, CFSTR("SecureChannel: generateICV failed with %d"), v16, v17, v18, v19, v15);
    v20 = 0;
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel generateResponseICV]", 281, CFSTR("SecureChannel: Response ICV : %@"), v16, v17, v18, v19, (uint64_t)v14);
    v20 = v14;
  }

  return v20;
}

id sub_10024CFDC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  int v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *dataOut;
  id key;
  size_t v30;
  char v31;

  v5 = a2;
  v10 = a3;
  if (!a1)
    goto LABEL_9;
  if (!v5 || !objc_msgSend(v5, "length"))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel encryptData:withICV:error:]", 293, CFSTR("SecureChannel: encryptData: nothing to encrypt"), v6, v7, v8, v9, (uint64_t)dataOut);
LABEL_9:
    v26 = 0;
    goto LABEL_12;
  }
  v11 = objc_msgSend(v5, "mutableCopy");
  v31 = 0x80;
  objc_msgSend(v11, "appendBytes:length:", &v31, 1);
  v12 = objc_msgSend(v11, "length") & 0xF;
  if (v12)
    objc_msgSend(v11, "increaseLengthBy:", (16 - v12));
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithLength:](NSMutableData, "dataWithLength:", objc_msgSend(v11, "length")));
  v30 = 0;
  v14 = objc_retainAutorelease(*(id *)(a1 + 48));
  key = objc_msgSend(v14, "bytes");
  v15 = objc_msgSend(*(id *)(a1 + 48), "length");
  v16 = objc_msgSend(objc_retainAutorelease(v10), "bytes");
  v17 = objc_retainAutorelease(v11);
  v18 = objc_msgSend(v17, "bytes");
  v19 = objc_msgSend(v17, "length");
  v20 = objc_retainAutorelease(v13);
  v21 = CCCrypt(0, 0, 0, key, (size_t)v15, v16, v18, (size_t)v19, objc_msgSend(v20, "mutableBytes"), (size_t)objc_msgSend(v20, "length"), &v30);

  if ((_DWORD)v21)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel encryptData:withICV:error:]", 320, CFSTR("SecureChannel: encrypt returned %d"), v22, v23, v24, v25, v21);
    v26 = 0;
  }
  else
  {
    objc_msgSend(v20, "setLength:", v30);
    v26 = v20;
  }

LABEL_12:
  return v26;
}

uint64_t sub_10024D1D4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  char *v6;
  uint64_t v7;
  int v8;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    if (objc_msgSend(v3, "length"))
    {
      v5 = objc_retainAutorelease(v4);
      v6 = (char *)objc_msgSend(v5, "bytes");
      v7 = objc_msgSend(v5, "length");
      while (v7)
      {
        v8 = v6[--v7];
        if (v8)
        {
          if (v8 == 128)
          {
            objc_msgSend(v5, "setLength:");
            goto LABEL_8;
          }
          break;
        }
      }
      a1 = 0;
    }
    else
    {
LABEL_8:
      a1 = 1;
    }
  }

  return a1;
}

id sub_10024D26C(uint64_t a1, void *a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v33;
  NSString *v34;
  void *v35;
  void *v36;
  void *dataOut;
  void *dataOuta;
  _QWORD *v39;
  id v40;
  size_t v41;
  NSErrorUserInfoKey v42;
  void *v43;

  v7 = a2;
  v8 = a3;
  if (!a1)
    goto LABEL_4;
  if (((unint64_t)objc_msgSend(v7, "length") & 0xF) == 0)
  {
    v39 = a4;
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithLength:](NSMutableData, "dataWithLength:", objc_msgSend(v7, "length")));
    v41 = 0;
    v15 = objc_retainAutorelease(*(id *)(a1 + 48));
    v16 = objc_msgSend(v15, "bytes");
    v17 = objc_msgSend(*(id *)(a1 + 48), "length");
    v40 = v8;
    v18 = objc_msgSend(objc_retainAutorelease(v8), "bytes");
    v19 = objc_retainAutorelease(v7);
    v20 = objc_msgSend(v19, "bytes");
    v21 = objc_msgSend(v19, "length");
    v22 = objc_retainAutorelease(v14);
    v23 = CCCrypt(1u, 0, 0, v16, (size_t)v17, v18, v20, (size_t)v21, objc_msgSend(v22, "mutableBytes"), (size_t)objc_msgSend(v22, "length"), &v41);

    if ((_DWORD)v23)
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel decryptData:withICV:error:]", 366, CFSTR("SecureChannel: decrypt returned %d"), v24, v25, v26, v27, v23);
      v13 = 0;
    }
    else
    {
      objc_msgSend(v22, "setLength:", v41);
      if ((sub_10024D1D4(a1, v22) & 1) == 0)
      {
        KmlLogFunc_InternalOnly(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel decryptData:withICV:error:]", 373, CFSTR("SecureChannel: decryption failed"), v28, v29, v30, v31, (uint64_t)dataOuta);
        v8 = v40;
        if (v39)
        {
          v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
          v42 = NSLocalizedDescriptionKey;
          v34 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(202));
          v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
          v43 = v35;
          v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v43, &v42, 1));
          *v39 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v33, 202, v36));

        }
        v13 = 0;
        goto LABEL_10;
      }
      v13 = v22;
    }
    v8 = v40;
LABEL_10:

    goto LABEL_11;
  }
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel decryptData:withICV:error:]", 354, CFSTR("SecureChannel: ciphertext isn't a multiple of block size"), v9, v10, v11, v12, (uint64_t)dataOut);
LABEL_4:
  v13 = 0;
LABEL_11:

  return v13;
}

id sub_10024D53C(uint64_t a1, void *a2, void *a3, _QWORD *a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;

  v7 = a2;
  v12 = a3;
  if (!a1)
    goto LABEL_6;
  if (!*(_QWORD *)(a1 + 48))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel decryptAndVerifyCommandPayload:header:error:]", 386, CFSTR("SecureChannel: SecureChannel not ready."), v8, v9, v10, v11, v31);
    goto LABEL_6;
  }
  v13 = objc_msgSend(v7, "length");
  v14 = (char *)objc_msgSend(v7, "length");
  if ((unint64_t)v13 <= 7)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel decryptAndVerifyCommandPayload:header:error:]", 391, CFSTR("SecureChannel: payload is too short (%lu bytes)"), v15, v16, v17, v18, (uint64_t)v14);
LABEL_6:
    v19 = 0;
    goto LABEL_10;
  }
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "subdataWithRange:", v14 - 8, 8));
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "subdataWithRange:", 0, (char *)objc_msgSend(v7, "length") - 8));
  v19 = 0;
  if (sub_10024CA40(a1, v20, *(void **)(a1 + 56), v21, v12))
  {
    v22 = sub_10024CCE4(a1);
    v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
    v24 = sub_10024D26C(a1, v21, v23, a4);
    v19 = (void *)objc_claimAutoreleasedReturnValue(v24);

    v25 = *(_BYTE *)(a1 + 10) + 1;
    *(_BYTE *)(a1 + 10) = v25;
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel decryptAndVerifyCommandPayload:header:error:]", 406, CFSTR("SecureChannel: new command counter = %u"), v26, v27, v28, v29, v25);
  }

LABEL_10:
  return v19;
}

id sub_10024D6C8(id a1, void *a2, __int16 a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v27;

  v5 = a2;
  if (a1)
  {
    if (*((_BYTE *)a1 + 9))
      sub_10024D854((uint64_t)a1);
    v6 = sub_10024CE48((uint64_t)a1);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    v8 = sub_10024CFDC((uint64_t)a1, v5, v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);

    if (!v9)
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel encryptResponsePayload:statusWord:error:]", 419, CFSTR("SecureChannel: Nothing to encrypt"), v10, v11, v12, v13, v27);
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData data](NSMutableData, "data"));
    }
    v14 = sub_10024C904((uint64_t)a1, *((void **)a1 + 8), v9, a3);
    v19 = (void *)objc_claimAutoreleasedReturnValue(v14);
    if (v19)
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel encryptResponsePayload:statusWord:error:]", 428, CFSTR("SecureChannel: chaining value = %@"), v15, v16, v17, v18, *((_QWORD *)a1 + 11));
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "subdataWithRange:", 0, 8));
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel encryptResponsePayload:statusWord:error:]", 429, CFSTR("SecureChannel:         my mac = %@"), v21, v22, v23, v24, (uint64_t)v20);

      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "subdataWithRange:", 0, 8));
      objc_msgSend(v9, "appendData:", v25);

      *((_BYTE *)a1 + 9) = 1;
      a1 = v9;
    }
    else
    {
      a1 = 0;
    }

  }
  return a1;
}

void sub_10024D854(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;

  if (a1)
  {
    v2 = *(id *)(a1 + 56);
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithLength:](NSMutableData, "dataWithLength:", 16));
    v4 = objc_msgSend(*(id *)(a1 + 88), "mutableCopy");
    v5 = objc_retainAutorelease(v2);
    v6 = objc_msgSend(v5, "bytes");
    v7 = objc_retainAutorelease(v4);
    v8 = objc_msgSend(v7, "bytes");
    v9 = objc_msgSend(v7, "length");
    v21 = objc_retainAutorelease(v3);
    CCAESCmac(v6, v8, v9, objc_msgSend(v21, "mutableBytes"));
    v10 = objc_msgSend(v21, "copy");
    v11 = *(void **)(a1 + 88);
    *(_QWORD *)(a1 + 88) = v10;

    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel updateMacChainingValueForZeroPayloadRequest]", 449, CFSTR("SecureChannel: new chaining value for command with 0 payload = %@"), v12, v13, v14, v15, *(_QWORD *)(a1 + 88));
    v16 = *(_BYTE *)(a1 + 10) + 1;
    *(_BYTE *)(a1 + 10) = v16;
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel updateMacChainingValueForZeroPayloadRequest]", 452, CFSTR("SecureChannel: new command counter = %u"), v17, v18, v19, v20, v16);
    *(_BYTE *)(a1 + 9) = 0;

  }
}

uint64_t sub_10024DE4C(uint64_t result)
{
  if (result)
    return *(unsigned __int16 *)(result + 14);
  return result;
}

uint64_t sub_10024DE58(uint64_t result)
{
  if (result)
    return *(unsigned __int8 *)(result + 9);
  return result;
}

BOOL sub_10024DE64(_BOOL8 result)
{
  if (result)
    return *(_BYTE *)(result + 12) != 0;
  return result;
}

BOOL sub_10024DE78(_BOOL8 result)
{
  if (result)
    return *(_BYTE *)(result + 13) != 0;
  return result;
}

id sub_10024E4FC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;

  v5 = a2;
  objc_opt_self(a1);
  if (qword_100354938 != -1)
    dispatch_once(&qword_100354938, &stru_10030FBC8);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClasses:fromData:error:", qword_100354940, v5, a3));

  return v6;
}

void sub_10024E588(id a1)
{
  NSSet *v1;
  uint64_t v2;
  void *v3;

  v1 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(KmlSharingConfig), 0);
  v2 = objc_claimAutoreleasedReturnValue(v1);
  v3 = (void *)qword_100354940;
  qword_100354940 = v2;

}

BOOL sub_10024E5DC(_BOOL8 result)
{
  if (result)
    return *(_QWORD *)(result + 24) && *(_QWORD *)(result + 32) == 0;
  return result;
}

uint64_t sub_10024E600(uint64_t result, uint64_t a2)
{
  if (result)
    *(_QWORD *)(result + 48) = a2;
  return result;
}

uint64_t sub_10024E60C(uint64_t result, uint64_t a2)
{
  if (result)
    *(_QWORD *)(result + 56) = a2;
  return result;
}

uint64_t sub_10024E618(uint64_t result, uint64_t a2)
{
  if (result)
    *(_QWORD *)(result + 88) = a2;
  return result;
}

uint64_t sub_10024E624(uint64_t result, uint64_t a2)
{
  if (result)
    *(_QWORD *)(result + 96) = a2;
  return result;
}

uint64_t sub_10024E630(uint64_t result, char a2)
{
  if (result)
    *(_BYTE *)(result + 8) = a2;
  return result;
}

uint64_t sub_10024E63C(uint64_t result, __int16 a2)
{
  if (result)
    *(_WORD *)(result + 14) = a2;
  return result;
}

uint64_t sub_10024E648(uint64_t result, char a2)
{
  if (result)
    *(_BYTE *)(result + 9) = a2;
  return result;
}

uint64_t sub_10024E654(uint64_t result, char a2)
{
  if (result)
    *(_BYTE *)(result + 10) = a2;
  return result;
}

uint64_t sub_10024E660(uint64_t result, char a2)
{
  if (result)
    *(_BYTE *)(result + 11) = a2;
  return result;
}

void sub_10024E66C(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 112), a2);
}

void sub_10024E67C(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 120), a2);
}

void sub_10024E68C(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 128), a2);
}

void sub_10024E69C(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 136), a2);
}

uint64_t sub_10024E6AC(uint64_t result, char a2)
{
  if (result)
    *(_BYTE *)(result + 12) = a2;
  return result;
}

void sub_10024E6B8(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 144), a2);
}

void sub_10024E6C8(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 152), a2);
}

void sub_10024E6D8(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 160), a2);
}

uint64_t sub_10024E6E8(uint64_t result, uint64_t a2)
{
  if (result)
    *(_QWORD *)(result + 168) = a2;
  return result;
}

uint64_t sub_10024E6F4(uint64_t result, uint64_t a2)
{
  if (result)
    *(_QWORD *)(result + 176) = a2;
  return result;
}

uint64_t sub_10024E700(uint64_t result, char a2)
{
  if (result)
    *(_BYTE *)(result + 13) = a2;
  return result;
}

void sub_10024E7D8(uint64_t a1)
{
  objc_opt_self(a1);
  if (qword_100354950 != -1)
    dispatch_once(&qword_100354950, &stru_10030FBE8);
}

void sub_10024E814(id a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlSharingRecordsUpdater initRecordUpdaterTable]_block_invoke", 183, CFSTR("initializing recordUpdaterTable"), v1, v2, v3, v4, v7);
  if (!qword_100354948)
  {
    v5 = objc_claimAutoreleasedReturnValue(+[NSHashTable weakObjectsHashTable](NSHashTable, "weakObjectsHashTable"));
    v6 = (void *)qword_100354948;
    qword_100354948 = v5;

  }
}

KmlSharingRecordsUpdater *sub_10024E878(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  unsigned __int8 v16;
  KmlSharingRecordsUpdater *v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];

  v3 = a2;
  objc_opt_self(a1);
  if (v3)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "subjectIdentifier"));
    if (v8)
    {
      sub_10024E7D8((uint64_t)KmlSharingRecordsUpdater);
      v9 = (id)qword_100354948;
      objc_sync_enter(v9);
      v19 = 0u;
      v20 = 0u;
      v21 = 0u;
      v22 = 0u;
      v10 = (id)qword_100354948;
      v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
      if (v11)
      {
        v12 = *(_QWORD *)v20;
LABEL_5:
        v13 = 0;
        while (1)
        {
          if (*(_QWORD *)v20 != v12)
            objc_enumerationMutation(v10);
          v14 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * v13);
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "endpointIdentifier", (_QWORD)v19));
          v16 = objc_msgSend(v15, "isEqualToString:", v8);

          if ((v16 & 1) != 0)
            break;
          if (v11 == (id)++v13)
          {
            v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
            if (v11)
              goto LABEL_5;
            goto LABEL_11;
          }
        }
        v17 = v14;

        if (v17)
          goto LABEL_16;
      }
      else
      {
LABEL_11:

      }
      v17 = -[KmlSharingRecordsUpdater initWithEndpoint:]([KmlSharingRecordsUpdater alloc], "initWithEndpoint:", v3);
      if (v17)
        objc_msgSend((id)qword_100354948, "addObject:", v17);
LABEL_16:
      objc_sync_exit(v9);

    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlSharingRecordsUpdater getSharingRecordsUpdaterForEndpoint:]", 200, CFSTR("endpoint has nil identifier. Can't get updater for such endpoint"), v4, v5, v6, v7, v19);
      v17 = 0;
    }

  }
  else
  {
    v17 = 0;
  }

  return v17;
}

void sub_10024EA60(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_10024EA88(uint64_t a1)
{
  objc_opt_self(a1);
  if (qword_100354960 != -1)
    dispatch_once(&qword_100354960, &stru_10030FC08);
  return (id)qword_100354958;
}

void sub_10024EACC(id a1)
{
  dispatch_queue_attr_t v1;
  dispatch_queue_t v2;
  void *v3;
  NSObject *v4;

  v1 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v4 = objc_claimAutoreleasedReturnValue(v1);
  v2 = dispatch_queue_create("com.apple.sesd.kml.ownerRecordsUpdater", v4);
  v3 = (void *)qword_100354958;
  qword_100354958 = (uint64_t)v2;

}

void sub_10024EBE4(uint64_t a1)
{
  NSObject *v2;
  _QWORD block[5];

  if (a1)
  {
    dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 24));
    v2 = *(NSObject **)(a1 + 24);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10024F348;
    block[3] = &unk_100302AA0;
    block[4] = a1;
    dispatch_sync(v2, block);
  }
}

void sub_10024EC50(uint64_t a1, void *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  uint64_t v10[5];
  _QWORD *v11;

  v3 = a2;
  v8 = v3;
  if (a1)
  {
    if (v3 && v3[17])
    {
      v9 = *(NSObject **)(a1 + 24);
      v10[0] = (uint64_t)_NSConcreteStackBlock;
      v10[1] = 3221225472;
      v10[2] = (uint64_t)sub_10024ED10;
      v10[3] = (uint64_t)&unk_100304370;
      v10[4] = a1;
      v11 = v3;
      dispatch_async(v9, v10);

    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingRecordsUpdater updateConfig:]", 252, CFSTR("Invalid sharing config. Ignore it"), v4, v5, v6, v7, v10[0]);
    }
  }

}

id sub_10024ED10(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 16);
  if (v1)
    v3 = *(_QWORD *)(v1 + 136);
  else
    v3 = 0;
  return objc_msgSend(v2, "setObject:forKeyedSubscript:", v1, v3);
}

uint64_t sub_10024ED2C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10024ED3C(uint64_t a1)
{

}

dispatch_queue_t *sub_10024ED44(dispatch_queue_t *a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  uint64_t v11;
  _QWORD block[5];
  id v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  void (*v19)(uint64_t);
  id v20;

  v3 = a2;
  v8 = v3;
  if (a1)
  {
    if (v3)
    {
      v15 = 0;
      v16 = &v15;
      v17 = 0x3032000000;
      v18 = sub_10024ED2C;
      v19 = sub_10024ED3C;
      v20 = 0;
      dispatch_assert_queue_not_V2(a1[3]);
      v9 = a1[3];
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10024EE6C;
      block[3] = &unk_10030EF28;
      block[4] = a1;
      v13 = v8;
      v14 = &v15;
      dispatch_sync(v9, block);
      a1 = (dispatch_queue_t *)(id)v16[5];

      _Block_object_dispose(&v15, 8);
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlSharingRecordsUpdater getConfigWithFriendKeyIdentifier:]", 274, CFSTR("keyIdentifier is nil"), v4, v5, v6, v7, v11);
      a1 = 0;
    }
  }

  return a1;
}

void sub_10024EE54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10024EE6C(_QWORD *a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  v2 = (void *)a1[5];
  v3 = *(void **)(a1[4] + 16);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10024EEE0;
  v6[3] = &unk_10030FC30;
  v4 = v2;
  v5 = a1[6];
  v7 = v4;
  v8 = v5;
  objc_msgSend(v3, "enumerateKeysAndObjectsUsingBlock:", v6);

}

void sub_10024EEE0(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  _QWORD *v7;
  id v8;

  v7 = a3;
  v8 = v7;
  if (v7)
    v7 = (_QWORD *)v7[16];
  if (objc_msgSend(v7, "isEqualToString:", *(_QWORD *)(a1 + 32)))
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a3);
    *a4 = 1;
  }

}

void sub_10024EF50(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[5];

  if (a1)
  {
    v1 = *(NSObject **)(a1 + 24);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10024EFAC;
    block[3] = &unk_100302AA0;
    block[4] = a1;
    dispatch_sync(v1, block);
  }
}

void sub_10024EFAC(uint64_t a1)
{
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  void *i;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  void *v29;
  id v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  id obj;
  void *v40;
  _QWORD v41[4];
  id v42;
  id v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _BYTE v48[128];

  v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  obj = *(id *)(*(_QWORD *)(a1 + 32) + 16);
  v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v44, v48, 16);
  if (v2)
  {
    v3 = v2;
    v4 = 0;
    v5 = *(_QWORD *)v45;
    do
    {
      for (i = 0; i != v3; i = (char *)i + 1)
      {
        if (*(_QWORD *)v45 != v5)
          objc_enumerationMutation(obj);
        v7 = *(_QWORD *)(*((_QWORD *)&v44 + 1) + 8 * (_QWORD)i);
        v8 = (_QWORD *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "objectForKeyedSubscript:", v7));
        v13 = v8;
        if (v8 && v8[12] == 5)
        {
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingRecordsUpdater saveSharingRecords]_block_invoke", 300, CFSTR("The record is ready for clean up. Removing it"), v9, v10, v11, v12, v37);
          if (v13[16])
          {
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingRecordsUpdater saveSharingRecords]_block_invoke", 302, CFSTR("Removing un-claimed authorization for previously shared key."), v14, v15, v16, v17, v37);
            sub_10024F294(*(_QWORD *)(a1 + 32), (void *)v13[10]);
          }
          objc_msgSend(v40, "addObject:", v7);
        }
        else
        {
          v43 = v4;
          v18 = sub_10022B3C4(v8, (uint64_t)&v43);
          v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
          v20 = v43;

          if (v20)
          {
            KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlSharingRecordsUpdater saveSharingRecords]_block_invoke", 310, CFSTR("Sharing config with Invitation Id (%@), could not be serialized : %@"), v21, v22, v23, v24, v7);
            v25 = v40;
            v26 = (void *)v7;
          }
          else
          {
            v25 = v38;
            v26 = v19;
          }
          objc_msgSend(v25, "addObject:", v26);

          v4 = v20;
        }

      }
      v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v44, v48, 16);
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }

  v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "publicKeyIdentifier"));
  v28 = kmlUtilHexStringFromData(v27);
  v29 = (void *)objc_claimAutoreleasedReturnValue(v28);

  v41[0] = _NSConcreteStackBlock;
  v41[1] = 3221225472;
  v41[2] = sub_10024F33C;
  v41[3] = &unk_10030F0E0;
  v30 = v38;
  v42 = v30;
  v31 = SESEndPointUpdateWithBlock(v29, v41);
  v32 = (void *)objc_claimAutoreleasedReturnValue(v31);

  if (v32)
    KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlSharingRecordsUpdater saveSharingRecords]_block_invoke", 323, CFSTR("Failed to save sharing records on endPoint : %@"), v33, v34, v35, v36, (uint64_t)v32);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "removeObjectsForKeys:", v40);

}

void sub_10024F294(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;

  v3 = a2;
  if (a1 && v3)
  {
    v16 = v3;
    v4 = SESEndPointDeleteAuthorizationID();
    v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    v10 = v5;
    if (v5)
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "description"));
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingRecordsUpdater deleteAuthWithId:]", 459, CFSTR("Failed in delete Auth. error: %@"), v12, v13, v14, v15, (uint64_t)v11);

    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingRecordsUpdater deleteAuthWithId:]", 461, CFSTR("Deleted auth with Id : %@"), v6, v7, v8, v9, (uint64_t)v16);
    }

    v3 = v16;
  }

}

id sub_10024F33C(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "setSharingRecords:", *(_QWORD *)(a1 + 32));
}

void sub_10024F348(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  __CFString *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  id v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "sharingRecords"));
  v6 = v1;
  if (!v1)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingRecordsUpdater unpackAllConfigsOnEndpoint]_block_invoke", 335, CFSTR("We don't have any sharing records"), v2, v3, v4, v5, v23);
    goto LABEL_21;
  }
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v7 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v27;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v27 != v9)
          objc_enumerationMutation(v6);
        v11 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * (_QWORD)v10);
        v25 = 0;
        v12 = sub_10024E4FC((uint64_t)KmlSharingConfig, v11, (uint64_t)&v25);
        v13 = (_QWORD *)objc_claimAutoreleasedReturnValue(v12);
        v18 = v25;
        if (v18)
        {
          v19 = 343;
          v20 = CFSTR("Found a courrupted sharing record. Discarding it");
LABEL_12:
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingRecordsUpdater unpackAllConfigsOnEndpoint]_block_invoke", v19, v20, v14, v15, v16, v17, v23);
          goto LABEL_13;
        }
        if (v13)
        {
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingRecordsUpdater unpackAllConfigsOnEndpoint]_block_invoke", 347, CFSTR("Found sharing record for invitation Id : %@"), v14, v15, v16, v17, v13[17]);
          if (v13[12] == 5)
          {
            v19 = 349;
            v20 = CFSTR("The record is ready for clean up. Removing it");
            goto LABEL_12;
          }
          v21 = v13[17];
        }
        else
        {
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingRecordsUpdater unpackAllConfigsOnEndpoint]_block_invoke", 347, CFSTR("Found sharing record for invitation Id : %@"), v14, v15, v16, v17, 0);
          v21 = 0;
        }
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "setObject:forKeyedSubscript:", v13, v21);
LABEL_13:

        v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      v22 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
      v8 = v22;
    }
    while (v22);
  }
LABEL_21:

}

dispatch_queue_t *sub_10024F554(dispatch_queue_t *a1)
{
  dispatch_queue_t *v1;
  NSObject *v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  void (*v9)(uint64_t);
  id v10;

  v1 = a1;
  if (a1)
  {
    v5 = 0;
    v6 = &v5;
    v7 = 0x3032000000;
    v8 = sub_10024ED2C;
    v9 = sub_10024ED3C;
    v10 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    dispatch_assert_queue_not_V2(v1[3]);
    v2 = v1[3];
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_10024F63C;
    v4[3] = &unk_1003044E0;
    v4[4] = v1;
    v4[5] = &v5;
    dispatch_sync(v2, v4);
    v1 = (dispatch_queue_t *)(id)v6[5];
    _Block_object_dispose(&v5, 8);

  }
  return v1;
}

void sub_10024F624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10024F63C(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v4[5];

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 16);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10024F694;
  v4[3] = &unk_10030FC58;
  v4[4] = v1;
  return objc_msgSend(v2, "enumerateKeysAndObjectsUsingBlock:", v4);
}

void sub_10024F694(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  unint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  id *v13;

  v13 = a3;
  v4 = objc_alloc((Class)DAKeySharingInvitationData);
  if (v13)
  {
    v5 = v13[2];
    v6 = v13[17];
    v7 = v13[16];
    v8 = v13[11];
    v9 = (unint64_t)v13[12] - 3;
    if (v9 > 2)
      v10 = 1;
    else
      v10 = qword_10028E3C8[v9];
    v11 = v13[18];
  }
  else
  {
    v10 = 0;
    v7 = 0;
    v5 = 0;
    v6 = 0;
    v8 = 0;
    v11 = 0;
  }
  v12 = objc_msgSend(v4, "initWithSessionUUID:invitationIdentifier:friendKeyIdentifier:sharingTarget:state:vehicleEnteredPasscode:", v5, v6, v7, v8, v10, v11);

  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "addObject:", v12);
}

uint64_t sub_10024F79C(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = a1;
  if (a1)
  {
    v5 = 0;
    v6 = &v5;
    v7 = 0x2020000000;
    v8 = 0;
    dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 24));
    v2 = *(NSObject **)(v1 + 24);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_10024F850;
    v4[3] = &unk_1003044E0;
    v4[4] = v1;
    v4[5] = &v5;
    dispatch_sync(v2, v4);
    v1 = v6[3];
    _Block_object_dispose(&v5, 8);
  }
  return v1;
}

void sub_10024F838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10024F850(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v4[5];

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 16);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10024F8A8;
  v4[3] = &unk_10030FC58;
  v4[4] = v1;
  return objc_msgSend(v2, "enumerateKeysAndObjectsUsingBlock:", v4);
}

uint64_t sub_10024F8A8(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    if (*(_QWORD *)(a3 + 128))
      ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24);
  }
  return result;
}

dispatch_queue_t *sub_10024F8D8(dispatch_queue_t *a1, void *a2)
{
  id v3;
  NSObject *v4;
  _QWORD block[5];
  id v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  void (*v13)(uint64_t);
  id v14;

  v3 = a2;
  if (a1)
  {
    v9 = 0;
    v10 = &v9;
    v11 = 0x3032000000;
    v12 = sub_10024ED2C;
    v13 = sub_10024ED3C;
    v14 = 0;
    dispatch_assert_queue_not_V2(a1[3]);
    v4 = a1[3];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10024F9D8;
    block[3] = &unk_10030EF28;
    block[4] = a1;
    v7 = v3;
    v8 = &v9;
    dispatch_sync(v4, block);
    a1 = (dispatch_queue_t *)(id)v10[5];

    _Block_object_dispose(&v9, 8);
  }

  return a1;
}

void sub_10024F9C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10024F9D8(_QWORD *a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  v2 = (void *)a1[5];
  v3 = *(void **)(a1[4] + 16);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10024FA4C;
  v6[3] = &unk_10030FC30;
  v4 = v2;
  v5 = a1[6];
  v7 = v4;
  v8 = v5;
  objc_msgSend(v3, "enumerateKeysAndObjectsUsingBlock:", v6);

}

void sub_10024FA4C(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  _QWORD *v7;
  void *v8;
  id v9;
  uint64_t v10;
  _QWORD *v11;

  v7 = a3;
  v11 = v7;
  if (v7)
    v8 = (void *)v7[2];
  else
    v8 = 0;
  v9 = v8;
  if ((objc_msgSend(v9, "isEqual:", *(_QWORD *)(a1 + 32)) & 1) != 0)
  {
    if (v11)
      v10 = v11[16];
    else
      v10 = 0;

    if (v10)
    {
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a3);
      *a4 = 1;
    }
  }
  else
  {

  }
}

dispatch_queue_t *sub_10024FAF8(dispatch_queue_t *a1)
{
  dispatch_queue_t *v1;
  NSObject *v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  void (*v9)(uint64_t);
  id v10;

  v1 = a1;
  if (a1)
  {
    v5 = 0;
    v6 = &v5;
    v7 = 0x3032000000;
    v8 = sub_10024ED2C;
    v9 = sub_10024ED3C;
    v10 = 0;
    dispatch_assert_queue_not_V2(a1[3]);
    v2 = v1[3];
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_10024FBD0;
    v4[3] = &unk_10030F290;
    v4[4] = v1;
    v4[5] = &v5;
    dispatch_sync(v2, v4);
    v1 = (dispatch_queue_t *)(id)v6[5];
    _Block_object_dispose(&v5, 8);

  }
  return v1;
}

void sub_10024FBB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10024FBD0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "allValues"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_10024FC0C(uint64_t a1, void *a2)
{
  NSObject *v3;
  id v4;
  _QWORD block[5];
  id v6;

  v4 = a2;
  if (a1)
  {
    dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 24));
    v3 = *(NSObject **)(a1 + 24);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10024FC9C;
    block[3] = &unk_100304370;
    block[4] = a1;
    v6 = v4;
    dispatch_sync(v3, block);

  }
}

void sub_10024FC9C(uint64_t a1)
{
  void *v1;
  void *v2;
  _QWORD v3[4];
  id v4;

  v1 = *(void **)(a1 + 40);
  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 16);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10024FD08;
  v3[3] = &unk_10030FC80;
  v4 = v1;
  objc_msgSend(v2, "enumerateKeysAndObjectsUsingBlock:", v3);

}

void sub_10024FD08(uint64_t a1, void *a2, void *a3)
{
  id v5;
  _QWORD *v6;
  id v7;
  void *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;

  v14 = a2;
  v5 = a3;
  v6 = v5;
  if (v5)
  {
    v7 = *((id *)v5 + 16);
    if (v7)
    {
      v8 = v7;
      v9 = objc_msgSend(*(id *)(a1 + 32), "containsObject:", v6[16]);

      if (v9)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingRecordsUpdater removeConfigsWithSharedKeyIdentifiers:]_block_invoke_2", 426, CFSTR("Found record with shared key Identifier : %@"), v10, v11, v12, v13, v6[16]);
        v6[12] = 5;
      }
    }
  }

}

dispatch_queue_t *sub_10024FDA8(dispatch_queue_t *a1, void *a2)
{
  id v3;
  NSObject *v4;
  _QWORD block[5];
  id v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  void (*v13)(uint64_t);
  id v14;

  v3 = a2;
  if (a1)
  {
    v9 = 0;
    v10 = &v9;
    v11 = 0x3032000000;
    v12 = sub_10024ED2C;
    v13 = sub_10024ED3C;
    v14 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
    dispatch_assert_queue_not_V2(a1[3]);
    v4 = a1[3];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10024FEB8;
    block[3] = &unk_10030EF28;
    block[4] = a1;
    v7 = v3;
    v8 = &v9;
    dispatch_sync(v4, block);
    a1 = (dispatch_queue_t *)(id)v10[5];

    _Block_object_dispose(&v9, 8);
  }

  return a1;
}

void sub_10024FEA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10024FEB8(_QWORD *a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  v2 = (void *)a1[5];
  v3 = *(void **)(a1[4] + 16);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10024FF2C;
  v6[3] = &unk_10030FC30;
  v4 = v2;
  v5 = a1[6];
  v7 = v4;
  v8 = v5;
  objc_msgSend(v3, "enumerateKeysAndObjectsUsingBlock:", v6);

}

void sub_10024FF2C(uint64_t a1, void *a2, void *a3)
{
  id *v5;
  id *v6;
  id v7;
  void *v8;
  unsigned int v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;

  v15 = a2;
  v5 = a3;
  v6 = v5;
  if (v5)
  {
    v7 = v5[16];
    if (v7)
    {
      v8 = v7;
      v9 = objc_msgSend(*(id *)(a1 + 32), "containsObject:", v6[16]);

      if (v9)
      {
        v10 = v6[16];
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingRecordsUpdater getUUIDsForSharedKeyIdentifiers:]_block_invoke_2", 441, CFSTR("Found record with shared key Identifier : %@, uuid : %@"), v11, v12, v13, v14, (uint64_t)v10);

        objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "addObject:", v6[2]);
      }
    }
  }

}

id sub_100250158(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  if (a1)
  {
    if (*(_BYTE *)(a1 + 104))
    {
      objc_msgSend(*(id *)(a1 + 16), "appendData:", v3);
      a1 = 0;
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 8), "appendData:", v3);
      v4 = sub_1002501C0(a1);
      a1 = objc_claimAutoreleasedReturnValue(v4);
    }
  }

  return (id)a1;
}

id sub_1002501C0(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id *v9;
  void *v10;
  NSString *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  id *v15;
  void *v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  NSString *v24;
  void *v25;
  void *v26;
  id *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  NSString *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __CFString *v46;
  id *v47;
  void *v48;
  id v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id *v55;
  uint64_t v56;
  void *v57;
  id v58;
  void *v59;
  uint64_t v60;
  void *v61;
  id v62;
  uint64_t v63;
  void *v64;
  id v65;
  void *v66;
  id v67;
  uint64_t v68;
  void *v69;
  void *v70;
  NSString *v71;
  void *v72;
  void *v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id *v79;
  void *v80;
  id *v81;
  uint64_t v82;
  void *v83;
  void *v84;
  NSString *v85;
  void *v86;
  void *v87;
  id *v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  id *v94;
  uint64_t v95;
  int v96;
  void *v97;
  NSString *v98;
  void *v99;
  void *v100;
  id v101;
  uint64_t v102;
  void *v103;
  id v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  NSString *v114;
  void *v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  id *v121;
  void *v122;
  id v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  id *v129;
  uint64_t v130;
  void *v131;
  id v132;
  uint64_t v133;
  id *v134;
  void *v135;
  id v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  NSString *v142;
  void *v143;
  void *v144;
  void *v145;
  id *v146;
  void *v147;
  id v148;
  uint64_t v150;
  uint64_t v151;
  id obj;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  NSErrorUserInfoKey v157;
  void *v158;
  NSErrorUserInfoKey v159;
  void *v160;
  NSErrorUserInfoKey v161;
  void *v162;
  NSErrorUserInfoKey v163;
  void *v164;
  NSErrorUserInfoKey v165;
  void *v166;
  NSErrorUserInfoKey v167;
  void *v168;
  NSErrorUserInfoKey v169;
  void *v170;
  NSErrorUserInfoKey v171;
  void *v172;
  _BYTE v173[128];

  if (a1)
  {
    v2 = sub_10022C7A4((uint64_t)KmlTlv, *(void **)(a1 + 8));
    v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
    objc_msgSend(*(id *)(a1 + 8), "setLength:", 0);
    v155 = 0u;
    v156 = 0u;
    v153 = 0u;
    v154 = 0u;
    obj = v3;
    v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v153, v173, 16);
    if (!v4)
    {
      v6 = 0;
      goto LABEL_47;
    }
    v5 = v4;
    v6 = 0;
    v7 = *(_QWORD *)v154;
    while (1)
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v154 != v7)
          objc_enumerationMutation(obj);
        v9 = *(id **)(*((_QWORD *)&v153 + 1) + 8 * (_QWORD)v8);
        if (sub_100055868((uint64_t)v9) == 32586)
        {
          if (*(_QWORD *)(a1 + 56))
          {
            v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
            v171 = NSLocalizedDescriptionKey;
            v11 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(3));
            v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
            v172 = v12;
            v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v172, &v171, 1));
            v14 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v10, 3, v13));

            v15 = sub_10022CD6C(v9);
            v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
            v17 = kmlUtilHexStringFromData(v16);
            v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig parseKeyConfigData]", 236, CFSTR("KeyCreationConfig: Received Duplicated Endpoint creation Data : %@"), v19, v20, v21, v22, (uint64_t)v18);
            goto LABEL_13;
          }
          v47 = sub_10022CD6C(v9);
          v48 = (void *)objc_claimAutoreleasedReturnValue(v47);
          v49 = kmlUtilHexStringFromData(v48);
          v50 = (void *)objc_claimAutoreleasedReturnValue(v49);
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig parseKeyConfigData]", 229, CFSTR("KeyCreationConfig: Received Endpoint creation Data : %@"), v51, v52, v53, v54, (uint64_t)v50);

          v55 = sub_10022CD6C(v9);
          v56 = objc_claimAutoreleasedReturnValue(v55);
          v57 = *(void **)(a1 + 56);
          *(_QWORD *)(a1 + 56) = v56;

          v58 = sub_10022C7A4((uint64_t)KmlTlv, *(void **)(a1 + 56));
          v59 = (void *)objc_claimAutoreleasedReturnValue(v58);
          v60 = objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithArray:](NSMutableArray, "arrayWithArray:", v59));
          v61 = *(void **)(a1 + 72);
          *(_QWORD *)(a1 + 72) = v60;

          v62 = sub_100251280(a1);
          v63 = objc_claimAutoreleasedReturnValue(v62);
          v64 = *(void **)(a1 + 96);
          *(_QWORD *)(a1 + 96) = v63;

          v65 = sub_100251398(a1);
          v66 = (void *)objc_claimAutoreleasedReturnValue(v65);
          v67 = kmlUtilHexStringFromData(v66);
          v68 = objc_claimAutoreleasedReturnValue(v67);
          v69 = *(void **)(a1 + 112);
          *(_QWORD *)(a1 + 112) = v68;

LABEL_21:
          goto LABEL_38;
        }
        if (sub_100055868((uint64_t)v9) == 32587)
        {
          if (*(_QWORD *)(a1 + 144))
          {
            v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
            v169 = NSLocalizedDescriptionKey;
            v24 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(3));
            v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
            v170 = v25;
            v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v170, &v169, 1));
            v14 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v23, 3, v26));

            v27 = sub_10022CD6C(v9);
            v16 = (void *)objc_claimAutoreleasedReturnValue(v27);
            v28 = kmlUtilHexStringFromData(v16);
            v18 = (void *)objc_claimAutoreleasedReturnValue(v28);
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig parseKeyConfigData]", 244, CFSTR("KeyCreationConfig: Received Duplicated remote public key : %@"), v29, v30, v31, v32, (uint64_t)v18);
            goto LABEL_13;
          }
          v79 = sub_10022CD6C(v9);
          v80 = (void *)objc_claimAutoreleasedReturnValue(v79);
          kmlUtilLogLargeData(CFSTR("Received remote public key"), v80);

          v81 = sub_10022CD6C(v9);
          v82 = objc_claimAutoreleasedReturnValue(v81);
          v83 = *(void **)(a1 + 144);
          *(_QWORD *)(a1 + 144) = v82;
          goto LABEL_37;
        }
        if (sub_100055868((uint64_t)v9) == 32588)
        {
          if (*(_QWORD *)(a1 + 24))
          {
            v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
            v167 = NSLocalizedDescriptionKey;
            v38 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(3));
            v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
            v168 = v39;
            v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v168, &v167, 1));
            v14 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v37, 3, v40));

            v45 = 252;
            v46 = CFSTR("KeyCreationConfig: Received Duplicated chain cert part.");
            goto LABEL_19;
          }
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig parseKeyConfigData]", 248, CFSTR("KeyCreationConfig: Received chain cert part."), v33, v34, v35, v36, v150);
          v94 = sub_10022CD6C(v9);
          v95 = objc_claimAutoreleasedReturnValue(v94);
          v83 = *(void **)(a1 + 24);
          *(_QWORD *)(a1 + 24) = v95;
LABEL_37:

          goto LABEL_38;
        }
        if (sub_100055868((uint64_t)v9) == 32589)
        {
          if (*(_QWORD *)(a1 + 40))
          {
            v70 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
            v165 = NSLocalizedDescriptionKey;
            v71 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(3));
            v72 = (void *)objc_claimAutoreleasedReturnValue(v71);
            v166 = v72;
            v73 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v166, &v165, 1));
            v14 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v70, 3, v73));

            v74 = kmlUtilHexStringFromData(*(void **)(a1 + 40));
            v16 = (void *)objc_claimAutoreleasedReturnValue(v74);
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig parseKeyConfigData]", 260, CFSTR("KeyCreationConfig: Received Duplicated Mailbox mapping : %@"), v75, v76, v77, v78, (uint64_t)v16);
            goto LABEL_14;
          }
          v101 = sub_10022D014((uint64_t)v9);
          v102 = objc_claimAutoreleasedReturnValue(v101);
          v103 = *(void **)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v102;

          v104 = kmlUtilHexStringFromData(*(void **)(a1 + 40));
          v66 = (void *)objc_claimAutoreleasedReturnValue(v104);
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig parseKeyConfigData]", 257, CFSTR("KeyCreationConfig: Received Mailbox mapping : %@"), v105, v106, v107, v108, (uint64_t)v66);
          goto LABEL_21;
        }
        if (sub_100055868((uint64_t)v9) == 32590)
        {
          if (*(_QWORD *)(a1 + 48))
          {
            v84 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
            v163 = NSLocalizedDescriptionKey;
            v85 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(3));
            v86 = (void *)objc_claimAutoreleasedReturnValue(v85);
            v164 = v86;
            v87 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v164, &v163, 1));
            v14 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v84, 3, v87));

            v88 = sub_10022CD6C(v9);
            v16 = (void *)objc_claimAutoreleasedReturnValue(v88);
            v89 = kmlUtilHexStringFromData(v16);
            v18 = (void *)objc_claimAutoreleasedReturnValue(v89);
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig parseKeyConfigData]", 269, CFSTR("KeyCreationConfig: Received Duplicated device config : %@"), v90, v91, v92, v93, (uint64_t)v18);
LABEL_13:

LABEL_14:
            goto LABEL_15;
          }
          v121 = sub_10022CD6C(v9);
          v122 = (void *)objc_claimAutoreleasedReturnValue(v121);
          v123 = kmlUtilHexStringFromData(v122);
          v124 = (void *)objc_claimAutoreleasedReturnValue(v123);
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig parseKeyConfigData]", 264, CFSTR("KeyCreationConfig: Received device config : %@"), v125, v126, v127, v128, (uint64_t)v124);

          v129 = sub_10022CD6C(v9);
          v130 = objc_claimAutoreleasedReturnValue(v129);
          v131 = *(void **)(a1 + 48);
          *(_QWORD *)(a1 + 48) = v130;

          v132 = sub_10022C7A4((uint64_t)KmlTlv, *(void **)(a1 + 48));
          v133 = objc_claimAutoreleasedReturnValue(v132);
          v83 = *(void **)(a1 + 80);
          *(_QWORD *)(a1 + 80) = v133;
          goto LABEL_37;
        }
        v96 = sub_100055868((uint64_t)v9);
        if (isEndOfKeyConfigTag(v96))
        {
          if (*(_BYTE *)(a1 + 128))
          {
            v97 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
            v159 = NSLocalizedDescriptionKey;
            v98 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(3));
            v99 = (void *)objc_claimAutoreleasedReturnValue(v98);
            v160 = v99;
            v100 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v160, &v159, 1));
            v14 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v97, 3, v100));

            v45 = 282;
            v46 = CFSTR("KeyCreationConfig: Received Duplicated Data Complete TLV");
            goto LABEL_19;
          }
          v134 = sub_10022CD6C(v9);
          v135 = (void *)objc_claimAutoreleasedReturnValue(v134);
          v136 = objc_msgSend(v135, "length");

          if (v136)
          {
            v141 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
            v161 = NSLocalizedDescriptionKey;
            v142 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(4));
            v143 = (void *)objc_claimAutoreleasedReturnValue(v142);
            v162 = v143;
            v144 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v162, &v161, 1));
            v14 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v141, 4, v144));

            v45 = 275;
            v46 = CFSTR("KeyCreationConfig: Received Invalid Data after EndOfKeyConfigTag");
LABEL_19:
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig parseKeyConfigData]", v45, v46, v41, v42, v43, v44, v150);
LABEL_15:
            v6 = (void *)v14;
            goto LABEL_38;
          }
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig parseKeyConfigData]", 277, CFSTR("KeyCreationConfig: Received Data Complete TLV"), v137, v138, v139, v140, v150);
          *(_BYTE *)(a1 + 128) = 1;
        }
        else
        {
          if (sub_100055868((uint64_t)v9) != 0xFFFF)
          {
            v113 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
            v157 = NSLocalizedDescriptionKey;
            v114 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(4));
            v115 = (void *)objc_claimAutoreleasedReturnValue(v114);
            v158 = v115;
            v116 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v158, &v157, 1));
            v14 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v113, 4, v116));

            v151 = sub_100055868((uint64_t)v9);
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig parseKeyConfigData]", 289, CFSTR("KeyCreationConfig: TLV with un-expected tag (0x%04x)"), v117, v118, v119, v120, v151);
            goto LABEL_15;
          }
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig parseKeyConfigData]", 285, CFSTR("KeyCreationConfig: Received partial data TLV"), v109, v110, v111, v112, v150);
          v145 = *(void **)(a1 + 8);
          v146 = sub_10022CD6C(v9);
          v147 = (void *)objc_claimAutoreleasedReturnValue(v146);
          objc_msgSend(v145, "appendData:", v147);

        }
LABEL_38:
        v8 = (char *)v8 + 1;
      }
      while (v5 != v8);
      v148 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v153, v173, 16);
      v5 = v148;
      if (!v148)
      {
LABEL_47:

        return v6;
      }
    }
  }
  return 0;
}

void sub_100250CC8(uint64_t a1, void *a2)
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;

  v8 = a2;
  if (a1)
  {
    objc_storeStrong((id *)(a1 + 56), a2);
    v4 = sub_10022C7A4((uint64_t)KmlTlv, *(void **)(a1 + 56));
    v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    v6 = objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithArray:](NSMutableArray, "arrayWithArray:", v5));
    v7 = *(void **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v6;

  }
}

void sub_100250D54(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  _WORD *v21;
  void *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];

  v3 = a2;
  if (a1)
  {
    if (!objc_msgSend(*(id *)(a1 + 56), "length"))
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig setEndpointConfigSiacDataForSharing:]", 177, CFSTR("We don't have endpointCreationData, so first absorb all SiaC data"), v4, v5, v6, v7, v23);
      sub_100250CC8(a1, v3);
    }
    v8 = sub_10022C7A4((uint64_t)KmlTlv, v3);
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData data](NSMutableData, "data"));
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v11 = v9;
    v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
    if (v12)
    {
      v13 = v12;
      v14 = *(_QWORD *)v24;
      do
      {
        v15 = 0;
        do
        {
          if (*(_QWORD *)v24 != v14)
            objc_enumerationMutation(v11);
          v16 = *(_QWORD **)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)v15);
          if (sub_100055868((uint64_t)v16) == 74 || sub_100055868((uint64_t)v16) == 75)
          {
            v17 = sub_10022D014((uint64_t)v16);
            v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
            objc_msgSend(v10, "appendData:", v18, (_QWORD)v23);

          }
          else if (sub_100055868((uint64_t)v16) == 70)
          {
            *(_BYTE *)(a1 + 129) = sub_10022CE3C(v16);
          }
          else if (sub_100055868((uint64_t)v16) == 71)
          {
            *(_BYTE *)(a1 + 130) = sub_10022CE3C(v16);
          }
          v15 = (char *)v15 + 1;
        }
        while (v13 != v15);
        v19 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
        v13 = v19;
      }
      while (v19);
    }

    v20 = *(void **)(a1 + 72);
    v21 = sub_10022CB3C((uint64_t)KmlTlv, 96, v10);
    v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
    objc_msgSend(v20, "addObject:", v22);

  }
}

void sub_100250F70(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  id *v9;
  id *v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id *v18;
  uint64_t v19;
  void *v20;
  id v21;
  void *v22;
  uint64_t v23;
  void *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];

  if (a1)
  {
    v3 = sub_10022C7A4((uint64_t)KmlTlv, a2);
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v4 = (id)objc_claimAutoreleasedReturnValue(v3);
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v26;
      while (2)
      {
        for (i = 0; i != v6; i = (char *)i + 1)
        {
          if (*(_QWORD *)v26 != v7)
            objc_enumerationMutation(v4);
          v9 = *(id **)(*((_QWORD *)&v25 + 1) + 8 * (_QWORD)i);
          if (sub_100055868((uint64_t)v9) == 32586)
          {
            v10 = sub_10022CD6C(v9);
            v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
            v12 = kmlUtilHexStringFromData(v11);
            v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig setEndpointConfigSiacDataForUpgrade:]", 203, CFSTR("Received Endpoint creation Data for Upgrade: %@"), v14, v15, v16, v17, (uint64_t)v13);

            v18 = sub_10022CD6C(v9);
            v19 = objc_claimAutoreleasedReturnValue(v18);
            v20 = *(void **)(a1 + 56);
            *(_QWORD *)(a1 + 56) = v19;

            v21 = sub_10022C7A4((uint64_t)KmlTlv, *(void **)(a1 + 56));
            v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
            v23 = objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithArray:](NSMutableArray, "arrayWithArray:", v22));
            v24 = *(void **)(a1 + 72);
            *(_QWORD *)(a1 + 72) = v23;

            goto LABEL_12;
          }
        }
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
        if (v6)
          continue;
        break;
      }
    }
LABEL_12:

  }
}

void sub_10025112C(uint64_t a1, void *a2)
{
  id v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];

  v4 = a2;
  if (a1)
  {
    objc_storeStrong((id *)(a1 + 80), a2);
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData data](NSMutableData, "data"));
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v6 = *(id *)(a1 + 80);
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v15;
      do
      {
        v10 = 0;
        do
        {
          if (*(_QWORD *)v15 != v9)
            objc_enumerationMutation(v6);
          v11 = sub_10022D014(*(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)v10));
          v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
          objc_msgSend(v5, "appendData:", v12, (_QWORD)v14);

          v10 = (char *)v10 + 1;
        }
        while (v8 != v10);
        v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      }
      while (v8);
    }

    v13 = *(void **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v5;

  }
}

id sub_100251280(uint64_t a1)
{
  id v1;
  id v2;
  uint64_t v3;
  void *i;
  id *v5;
  id *v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];

  if (!a1)
    return 0;
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v1 = *(id *)(a1 + 72);
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v2)
  {
    v3 = *(_QWORD *)v9;
    while (2)
    {
      for (i = 0; i != v2; i = (char *)i + 1)
      {
        if (*(_QWORD *)v9 != v3)
          objc_enumerationMutation(v1);
        v5 = *(id **)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)i);
        if (sub_100055868((uint64_t)v5) == 91)
        {
          v6 = sub_10022CD6C(v5);
          v2 = (id)objc_claimAutoreleasedReturnValue(v6);
          goto LABEL_12;
        }
      }
      v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v2)
        continue;
      break;
    }
  }
LABEL_12:

  return v2;
}

id sub_100251398(uint64_t a1)
{
  id v1;
  id v2;
  uint64_t v3;
  void *i;
  id *v5;
  id *v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];

  if (!a1)
    return 0;
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v1 = *(id *)(a1 + 72);
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v2)
  {
    v3 = *(_QWORD *)v9;
    while (2)
    {
      for (i = 0; i != v2; i = (char *)i + 1)
      {
        if (*(_QWORD *)v9 != v3)
          objc_enumerationMutation(v1);
        v5 = *(id **)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)i);
        if (sub_100055868((uint64_t)v5) == 77)
        {
          v6 = sub_10022CD6C(v5);
          v2 = (id)objc_claimAutoreleasedReturnValue(v6);
          goto LABEL_12;
        }
      }
      v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v2)
        continue;
      break;
    }
  }
LABEL_12:

  return v2;
}

id sub_1002514B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v31;
  NSString *v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  NSString *v37;
  NSString *v38;
  NSString *v39;
  NSString *v40;
  void *v41;
  uint64_t v42;
  NSErrorUserInfoKey v43;
  void *v44;
  NSErrorUserInfoKey v45;
  void *v46;
  NSErrorUserInfoKey v47;
  void *v48;
  NSErrorUserInfoKey v49;
  void *v50;
  NSErrorUserInfoKey v51;
  void *v52;

  if (!a1)
    return 0;
  v8 = a3;
  if ((sub_1002518BC(a1, a2, a3, a4, a5, a6, a7, a8) & 1) != 0)
  {
    if ((sub_100251A6C(a1) & 1) != 0)
    {
      if ((sub_100251EAC(a1, v8, v15, v16, v17, v18, v19, v20) & 1) != 0)
      {
        if ((sub_100251F28(a1, a2, v8, v21, v22, v23, v24, v25) & 1) != 0)
        {
          if (*(_BYTE *)(a1 + 128))
          {
            *(_BYTE *)(a1 + 104) = 1;
            return 0;
          }
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig isAllDataValidForTransport:kmlVersion:]", 323, CFSTR("KeyCreationConfig: Missing Completion tag"), v26, v27, v28, v29, v42);
          v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
          v43 = NSLocalizedDescriptionKey;
          v40 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(21));
          v33 = (void *)objc_claimAutoreleasedReturnValue(v40);
          v44 = v33;
          v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v44, &v43, 1));
          v35 = v31;
          v36 = 21;
        }
        else
        {
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig isAllDataValidForTransport:kmlVersion:]", 318, CFSTR("KeyCreationConfig: Invalid device config"), v26, v27, v28, v29, v42);
          v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
          v45 = NSLocalizedDescriptionKey;
          v39 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(2));
          v33 = (void *)objc_claimAutoreleasedReturnValue(v39);
          v46 = v33;
          v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v46, &v45, 1));
          v35 = v31;
          v36 = 2;
        }
      }
      else
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig isAllDataValidForTransport:kmlVersion:]", 313, CFSTR("KeyCreationConfig: Invalid Mailbox mapping"), v22, v23, v24, v25, v42);
        v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
        v47 = NSLocalizedDescriptionKey;
        v38 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(212));
        v33 = (void *)objc_claimAutoreleasedReturnValue(v38);
        v48 = v33;
        v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v48, &v47, 1));
        v35 = v31;
        v36 = 212;
      }
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig isAllDataValidForTransport:kmlVersion:]", 307, CFSTR("KeyCreationConfig: Failed to validate Remote Long Term Certificate"), v17, v18, v19, v20, v42);
      v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
      v49 = NSLocalizedDescriptionKey;
      v37 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(201));
      v33 = (void *)objc_claimAutoreleasedReturnValue(v37);
      v50 = v33;
      v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v50, &v49, 1));
      v35 = v31;
      v36 = 201;
    }
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig isAllDataValidForTransport:kmlVersion:]", 302, CFSTR("KeyCreationConfig: Invalid Endpoint creation Data"), v11, v12, v13, v14, v42);
    v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
    v51 = NSLocalizedDescriptionKey;
    v32 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(4));
    v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
    v52 = v33;
    v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v52, &v51, 1));
    v35 = v31;
    v36 = 4;
  }
  v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v35, v36, v34));

  return v41;
}

uint64_t sub_1002518BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  void *i;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];

  v8 = a1;
  if (a1)
  {
    if (*(_QWORD *)(a1 + 56))
    {
      v9 = objc_alloc_init((Class)NSMutableSet);
      v21 = 0u;
      v22 = 0u;
      v23 = 0u;
      v24 = 0u;
      v10 = *(id *)(v8 + 72);
      v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
      if (v11)
      {
        v12 = v11;
        v13 = *(_QWORD *)v22;
        while (2)
        {
          for (i = 0; i != v12; i = (char *)i + 1)
          {
            if (*(_QWORD *)v22 != v13)
              objc_enumerationMutation(v10);
            v15 = sub_100055868(*(_QWORD *)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)i));
            if ((kmlUtilAddUniqueTagToSet(v9, v15) & 1) == 0)
            {

              goto LABEL_16;
            }
          }
          v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
          if (v12)
            continue;
          break;
        }
      }

      if (objc_msgSend(*(id *)(v8 + 120), "isSubsetOfSet:", v9))
      {
        v8 = 1;
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig isEndpointCreationDataValid]", 473, CFSTR("isEndpointCreationDataValid: Received all the required tags."), v16, v17, v18, v19, v21);
      }
      else
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig isEndpointCreationDataValid]", 478, CFSTR("isEndpointCreationDataValid: Missing required tags"), v16, v17, v18, v19, v21);
        sub_100252418(v8, *(void **)(v8 + 120), v9);
LABEL_16:
        v8 = 0;
      }

    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig isEndpointCreationDataValid]", 461, CFSTR("isEndpointCreationDataValid: _endpointCreationData is nil"), a5, a6, a7, a8, v21);
      return 0;
    }
  }
  return v8;
}

uint64_t sub_100251A6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __SecCertificate *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  const __CFString *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  unsigned __int8 v29;
  uint64_t AuthorityKeyID;
  void *v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSMutableArray *v38;
  const __CFData *v39;
  __SecCertificate *v40;
  __SecCertificate *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  id v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  SESConfigDCK *v60;
  void *v61;
  uint64_t v62;
  void *v63;
  const __CFData *v64;
  __SecCertificate *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __SecCertificate *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  id v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  CFStringRef commonName;
  BOOL v90;

  v1 = a1;
  if (a1)
  {
    v8 = SecCertificateCreateWithData(0, *(CFDataRef *)(a1 + 144));
    if (v8)
    {
      v13 = sub_1002520B8((id *)v1, v8, v2, v3, v4, v5, v6, v7);
      v14 = CFSTR("NO");
      if (v13)
        v14 = CFSTR("YES");
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig isRemoteCertValid]", 345, CFSTR("validatePublicKeyInLeafCert?  %@"), v9, v10, v11, v12, (uint64_t)v14);
      if (v13)
      {
        commonName = 0;
        SecCertificateCopyCommonName(v8, &commonName);
        v15 = *(void **)(v1 + 88);
        *(_QWORD *)(v1 + 88) = commonName;

        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig isRemoteCertValid]", 353, CFSTR("Received readerInfo(CommonName): %@"), v16, v17, v18, v19, *(_QWORD *)(v1 + 88));
        v20 = objc_msgSend(objc_alloc((Class)KmlRoutingInformation), "initWithReaderInformation:", *(_QWORD *)(v1 + 88));
        v21 = *(void **)(v1 + 136);
        *(_QWORD *)(v1 + 136) = v20;

        if (*(_QWORD *)(v1 + 112))
        {
          v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 136), "readerIdentifier"));
          v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "uppercaseString"));
          v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 112), "uppercaseString"));
          v29 = objc_msgSend(v27, "isEqualToString:", v28);

          if ((v29 & 1) != 0)
          {
            AuthorityKeyID = SecCertificateGetAuthorityKeyID(v8);
            v31 = (void *)objc_claimAutoreleasedReturnValue(AuthorityKeyID);
            v32 = kmlUtilHexStringFromData(v31);
            v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig isRemoteCertValid]", 364, CFSTR("Leaf certificateAuthorityKeyID=%@"), v34, v35, v36, v37, (uint64_t)v33);

            if (!v31)
            {
              v90 = 0;
LABEL_31:
              v1 = v90;
              goto LABEL_16;
            }
            v38 = objc_opt_new(NSMutableArray);
            -[NSMutableArray addObject:](v38, "addObject:", v8);
            v39 = *(const __CFData **)(v1 + 24);
            if (v39)
            {
              v40 = SecCertificateCreateWithData(0, v39);
              if (!v40)
              {
                v90 = 0;
LABEL_30:

                goto LABEL_31;
              }
              v41 = v40;
              commonName = 0;
              SecCertificateCopyCommonName(v40, &commonName);
              KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig isRemoteCertValid]", 382, CFSTR("Intermediate certificate CommonName: %@"), v42, v43, v44, v45, (uint64_t)commonName);
              if (commonName)
                CFRelease(commonName);
              -[NSMutableArray addObject:](v38, "addObject:", v41);
              v46 = SecCertificateGetAuthorityKeyID(v41);
              v47 = (void *)objc_claimAutoreleasedReturnValue(v46);

              v48 = kmlUtilHexStringFromData(v47);
              v49 = (void *)objc_claimAutoreleasedReturnValue(v48);
              KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig isRemoteCertValid]", 389, CFSTR("Intermediate certificateAuthorityKeyID=%@"), v50, v51, v52, v53, (uint64_t)v49);

              v31 = v47;
            }
            else
            {
              v41 = 0;
            }
            v60 = objc_opt_new(SESConfigDCK);
            v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 136), "manufacturer"));
            v62 = objc_claimAutoreleasedReturnValue(-[SESConfigDCK getRootCertificateFor:keyID:error:](v60, "getRootCertificateFor:keyID:error:", v61, v31, 0));
            v63 = *(void **)(v1 + 32);
            *(_QWORD *)(v1 + 32) = v62;

            v64 = *(const __CFData **)(v1 + 32);
            if (v64)
            {
              v65 = SecCertificateCreateWithData(0, v64);
              v70 = v65;
              if (v65)
              {
                commonName = 0;
                SecCertificateCopyCommonName(v65, &commonName);
                KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig isRemoteCertValid]", 414, CFSTR("Root certificate CommonName: %@"), v71, v72, v73, v74, (uint64_t)commonName);
                if (commonName)
                  CFRelease(commonName);
                v75 = (void *)SecCertificateCopyIssuerSummary(v70);
                KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig isRemoteCertValid]", 419, CFSTR("rootCert certificateIssuer=%@"), v76, v77, v78, v79, (uint64_t)v75);
                v80 = sub_1002521D0((uint64_t)KmlEndpointCreationConfig, v70, v38);

              }
              else
              {
                KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig isRemoteCertValid]", 423, CFSTR("Root certificate is nil"), v66, v67, v68, v69, v88);
                v80 = 0;
              }
              v90 = v80;

            }
            else
            {
              v81 = kmlUtilHexStringFromData(v31);
              v82 = (void *)objc_claimAutoreleasedReturnValue(v81);
              KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointCreationConfig isRemoteCertValid]", 398, CFSTR("Got nil certificate for issuer %@"), v83, v84, v85, v86, (uint64_t)v82);

              v90 = 0;
            }

            goto LABEL_30;
          }
        }
        KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointCreationConfig isRemoteCertValid]", 358, CFSTR("Reader Id mismatch."), v22, v23, v24, v25, v87);
        v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 136), "readerIdentifier"));
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig isRemoteCertValid]", 359, CFSTR("In leaf cert:%@ and in endpoint creation config: %@"), v55, v56, v57, v58, (uint64_t)v54);

      }
    }
    v1 = 0;
LABEL_16:

  }
  return v1;
}

id *sub_100251EAC(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id *v16;
  uint64_t v18;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 40))
    {
      v8 = sub_10022A0B4((char *)[KmlMailboxMappingData alloc], *(void **)(a1 + 40), a2);
      v16 = sub_10022A82C((uint64_t)v8, v9, v10, v11, v12, v13, v14, v15);

      return v16;
    }
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig isMailboxMappingDataValidForVersion:]", 486, CFSTR("isMailboxMappingDataValid: _mailboxMappingData is nil"), a5, a6, a7, a8, v18);
  }
  return 0;
}

uint64_t sub_100251F28(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  void *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];

  if (!a1)
    return 0;
  if (!*(_QWORD *)(a1 + 48))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig isDeviceConfigDataValidForTransport:version:]", 499, CFSTR("isDeviceConfigDataValid: _deviceConfigData is nil"), a5, a6, a7, a8, v25);
    return 0;
  }
  v11 = objc_alloc_init((Class)NSMutableSet);
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v12 = *(id *)(a1 + 80);
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)v26;
    while (2)
    {
      v16 = 0;
      do
      {
        if (*(_QWORD *)v26 != v15)
          objc_enumerationMutation(v12);
        v17 = sub_100055868(*(_QWORD *)(*((_QWORD *)&v25 + 1) + 8 * (_QWORD)v16));
        if (!kmlUtilAddUniqueTagToSet(v11, v17))
        {
          v23 = 0;
          goto LABEL_13;
        }
        v16 = (char *)v16 + 1;
      }
      while (v14 != v16);
      v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
      if (v14)
        continue;
      break;
    }
  }

  v12 = (id)sub_10022D114((uint64_t)[KmlDeviceConfigurationData alloc], *(void **)(a1 + 48));
  v23 = sub_10022EC80((uint64_t)v12, a3, a2, v18, v19, v20, v21, v22);
LABEL_13:

  return v23;
}

id *sub_1002520B8(id *a1, __SecCertificate *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id *v8;
  id v10;
  __SecKey *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __SecKey *v16;
  CFDataRef v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CFDataRef v22;
  CFErrorRef v24;
  uint64_t v25;
  CFErrorRef error;

  v8 = a1;
  if (!a1)
    return v8;
  if (!a2 || (v10 = a1[12]) == 0 || !objc_msgSend(v10, "length"))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig validatePublicKeyInLeafCert:]", 432, CFSTR("leafCert or/and readerPK is nil"), a5, a6, a7, a8, v25);
    return 0;
  }
  if (*(_BYTE *)objc_msgSend(v8[12], "bytes") != 4)
    return 0;
  v11 = SecCertificateCopyKey(a2);
  v16 = v11;
  if (v11)
  {
    error = 0;
    v17 = SecKeyCopyExternalRepresentation(v11, &error);
    v22 = v17;
    if (v17)
    {
      v8 = (id *)-[__CFData isEqualToData:](v17, "isEqualToData:", v8[12]);
    }
    else
    {
      v24 = error;
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig validatePublicKeyInLeafCert:]", 451, CFSTR("SecKeyCopyExternalRepresentation() failed. error: %@"), v18, v19, v20, v21, (uint64_t)error);

      v8 = 0;
    }

  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig validatePublicKeyInLeafCert:]", 443, CFSTR("SecCertificateCopyPublicKey() failed."), v12, v13, v14, v15, v25);
    v8 = 0;
  }

  return v8;
}

BOOL sub_1002521D0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  SecPolicyRef BasicX509;
  __CFString *v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __SecTrust *v22;
  const __CFArray *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  CFStringRef v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  CFStringRef v40;
  uint64_t v41;
  CFErrorRef error;
  SecTrustRef trust;

  v5 = a2;
  v6 = a3;
  objc_opt_self(a1);
  if (v6)
  {
    v7 = objc_msgSend(objc_alloc((Class)NSUserDefaults), "initWithSuiteName:", CFSTR("com.apple.seserviced"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKey:", CFSTR("SecurityPolicy")));
    if (isInternalBuild() && v8)
    {
      BasicX509 = SecPolicyCreateBasicX509();
      v14 = CFSTR("Using basic policy");
      v15 = 926;
    }
    else
    {
      BasicX509 = (SecPolicyRef)SecPolicyCreateAlisha();
      v41 = isInternalBuild();
      v14 = CFSTR("Using Alisha policy (%d) (%d)");
      v15 = 929;
    }
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlEndpointCreationConfig isCertificateChainValid:chain:]", v15, v14, v9, v10, v11, v12, v41);
    if (!BasicX509)
      goto LABEL_10;
    trust = 0;
    v17 = SecTrustCreateWithCertificates(v6, BasicX509, &trust);
    if ((_DWORD)v17)
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlEndpointCreationConfig isCertificateChainValid:chain:]", 939, CFSTR("Cannot create trust for certificate evaluation, error code = %d"), v18, v19, v20, v21, v17);
LABEL_10:
      v16 = 0;
LABEL_17:

      goto LABEL_18;
    }
    v22 = trust;
    v23 = (const __CFArray *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObject:](NSArray, "arrayWithObject:", v5));
    v24 = SecTrustSetAnchorCertificates(v22, v23);
    if ((_DWORD)v24)
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlEndpointCreationConfig isCertificateChainValid:chain:]", 949, CFSTR("SecTrustSetAnchorCertificates failed, error code = %d"), v25, v26, v27, v28, v24);
    }
    else
    {
      v29 = SecTrustSetAnchorCertificatesOnly(v22, 1u);
      if (!(_DWORD)v29)
      {
        error = 0;
        v16 = SecTrustEvaluateWithError(v22, &error);
        if (!v16)
        {
          v35 = CFErrorCopyDescription(error);
          if (v35)
          {
            v40 = v35;
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlEndpointCreationConfig isCertificateChainValid:chain:]", 964, CFSTR("Trust evaluation failed: %@"), v36, v37, v38, v39, (uint64_t)v35);
            CFRelease(v40);
          }
        }
        if (error)
          CFRelease(error);
        goto LABEL_16;
      }
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlEndpointCreationConfig isCertificateChainValid:chain:]", 954, CFSTR("SecTrustSetAnchorCertificatesOnly failed, error code = %d"), v30, v31, v32, v33, v29);
    }
    v16 = 0;
LABEL_16:

    goto LABEL_17;
  }
  v16 = 0;
LABEL_18:

  return v16;
}

void sub_100252418(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];

  v5 = a2;
  v6 = a3;
  if (a1)
  {
    v7 = objc_msgSend(objc_alloc((Class)NSMutableSet), "initWithSet:", v5);
    objc_msgSend(v7, "minusSet:", v6);
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v8 = v7;
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v19;
      do
      {
        v12 = 0;
        do
        {
          if (*(_QWORD *)v19 != v11)
            objc_enumerationMutation(v8);
          v13 = objc_msgSend(*(id *)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)v12), "unsignedIntegerValue");
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig logMissingRequiredTags:receivedTagsSet:]", 891, CFSTR("KmlEndpointCreationConfig: Missing required tag: 0x%lx"), v14, v15, v16, v17, (uint64_t)v13);
          v12 = (char *)v12 + 1;
        }
        while (v10 != v12);
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
      }
      while (v10);
    }

  }
}

id sub_10025257C(uint64_t a1)
{
  id v1;
  id v2;
  uint64_t v3;
  void *i;
  id *v5;
  id *v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];

  if (!a1)
    return 0;
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v1 = *(id *)(a1 + 72);
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v2)
  {
    v3 = *(_QWORD *)v9;
    while (2)
    {
      for (i = 0; i != v2; i = (char *)i + 1)
      {
        if (*(_QWORD *)v9 != v3)
          objc_enumerationMutation(v1);
        v5 = *(id **)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)i);
        if (sub_100055868((uint64_t)v5) == 73)
        {
          v6 = sub_10022CD6C(v5);
          v2 = (id)objc_claimAutoreleasedReturnValue(v6);
          goto LABEL_12;
        }
      }
      v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v2)
        continue;
      break;
    }
  }
LABEL_12:

  return v2;
}

id sub_100252694(uint64_t a1)
{
  id v1;
  id v2;
  uint64_t v3;
  void *i;
  id *v5;
  id *v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];

  if (!a1)
    return 0;
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v1 = *(id *)(a1 + 72);
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v2)
  {
    v3 = *(_QWORD *)v9;
    while (2)
    {
      for (i = 0; i != v2; i = (char *)i + 1)
      {
        if (*(_QWORD *)v9 != v3)
          objc_enumerationMutation(v1);
        v5 = *(id **)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)i);
        if (sub_100055868((uint64_t)v5) == 81)
        {
          v6 = sub_10022CD6C(v5);
          v2 = (id)objc_claimAutoreleasedReturnValue(v6);
          goto LABEL_12;
        }
      }
      v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v2)
        continue;
      break;
    }
  }
LABEL_12:

  return v2;
}

id sub_1002527AC(uint64_t a1)
{
  id v1;
  id v2;
  uint64_t v3;
  void *i;
  id *v5;
  id *v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];

  if (!a1)
    return 0;
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v1 = *(id *)(a1 + 72);
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v2)
  {
    v3 = *(_QWORD *)v9;
    while (2)
    {
      for (i = 0; i != v2; i = (char *)i + 1)
      {
        if (*(_QWORD *)v9 != v3)
          objc_enumerationMutation(v1);
        v5 = *(id **)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)i);
        if (sub_100055868((uint64_t)v5) == 82)
        {
          v6 = sub_10022CD6C(v5);
          v2 = (id)objc_claimAutoreleasedReturnValue(v6);
          goto LABEL_12;
        }
      }
      v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v2)
        continue;
      break;
    }
  }
LABEL_12:

  return v2;
}

id sub_1002528C4(uint64_t a1)
{
  id v1;
  id v2;
  uint64_t v3;
  void *i;
  id *v5;
  id *v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];

  if (!a1)
    return 0;
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v1 = *(id *)(a1 + 72);
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v2)
  {
    v3 = *(_QWORD *)v9;
    while (2)
    {
      for (i = 0; i != v2; i = (char *)i + 1)
      {
        if (*(_QWORD *)v9 != v3)
          objc_enumerationMutation(v1);
        v5 = *(id **)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)i);
        if (sub_100055868((uint64_t)v5) == 78)
        {
          v6 = sub_10022CD6C(v5);
          v2 = (id)objc_claimAutoreleasedReturnValue(v6);
          goto LABEL_12;
        }
      }
      v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v2)
        continue;
      break;
    }
  }
LABEL_12:

  return v2;
}

id sub_1002529DC(uint64_t a1)
{
  id v1;
  id v2;
  uint64_t v3;
  void *i;
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];

  if (!a1)
    return 0;
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v1 = *(id *)(a1 + 72);
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v2)
  {
    v3 = *(_QWORD *)v8;
    while (2)
    {
      for (i = 0; i != v2; i = (char *)i + 1)
      {
        if (*(_QWORD *)v8 != v3)
          objc_enumerationMutation(v1);
        v5 = *(_QWORD *)(*((_QWORD *)&v7 + 1) + 8 * (_QWORD)i);
        if (sub_100055868(v5) == 75)
        {
          v2 = (id)sub_10022CEB0(v5);
          goto LABEL_12;
        }
      }
      v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      if (v2)
        continue;
      break;
    }
  }
LABEL_12:

  return v2;
}

id sub_100252AF0(uint64_t a1)
{
  id v1;
  id v2;
  uint64_t v3;
  void *i;
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];

  if (!a1)
    return 0;
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v1 = *(id *)(a1 + 72);
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v2)
  {
    v3 = *(_QWORD *)v8;
    while (2)
    {
      for (i = 0; i != v2; i = (char *)i + 1)
      {
        if (*(_QWORD *)v8 != v3)
          objc_enumerationMutation(v1);
        v5 = *(_QWORD *)(*((_QWORD *)&v7 + 1) + 8 * (_QWORD)i);
        if (sub_100055868(v5) == 74)
        {
          v2 = (id)sub_10022CEB0(v5);
          goto LABEL_12;
        }
      }
      v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      if (v2)
        continue;
      break;
    }
  }
LABEL_12:

  return v2;
}

uint64_t sub_100252C04(uint64_t result)
{
  if (result)
    return sub_100252C14(result, 75);
  return result;
}

uint64_t sub_100252C14(uint64_t a1, int a2)
{
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  id *v7;
  id *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  void *j;
  uint64_t v19;
  uint64_t v20;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];
  _BYTE v31[128];

  if (!a1)
    return 0;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v3 = *(id *)(a1 + 72);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v26, v31, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v27;
    while (2)
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v27 != v5)
          objc_enumerationMutation(v3);
        v7 = *(id **)(*((_QWORD *)&v26 + 1) + 8 * (_QWORD)i);
        if (sub_100055868((uint64_t)v7) == 96)
        {
          v8 = sub_10022CD6C(v7);
          v4 = (id)objc_claimAutoreleasedReturnValue(v8);
          goto LABEL_12;
        }
      }
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v26, v31, 16);
      if (v4)
        continue;
      break;
    }
  }
LABEL_12:

  if (objc_msgSend(v4, "length"))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig sharingInChainMailboxSizeForTag:]", 655, CFSTR("found override %@"), v9, v10, v11, v12, (uint64_t)v4);
    v13 = sub_10022C7A4((uint64_t)KmlTlv, v4);
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v14 = (id)objc_claimAutoreleasedReturnValue(v13);
    v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v22, v30, 16);
    if (v15)
    {
      v16 = v15;
      v17 = *(_QWORD *)v23;
      while (2)
      {
        for (j = 0; j != v16; j = (char *)j + 1)
        {
          if (*(_QWORD *)v23 != v17)
            objc_enumerationMutation(v14);
          v19 = *(_QWORD *)(*((_QWORD *)&v22 + 1) + 8 * (_QWORD)j);
          if (sub_100055868(v19) == a2)
          {
            v20 = sub_10022CEB0(v19);
            goto LABEL_23;
          }
        }
        v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v22, v30, 16);
        if (v16)
          continue;
        break;
      }
    }
    v20 = 0;
LABEL_23:

  }
  else
  {
    v20 = 0;
  }

  return v20;
}

uint64_t sub_100252E30(uint64_t result)
{
  if (result)
    return sub_100252C14(result, 74);
  return result;
}

id sub_100252E40(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  uint64_t v8;
  id v9;
  void *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];

  if (!a1)
    return 0;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData data](NSMutableData, "data"));
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v3 = *(id *)(a1 + 72);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v13 != v6)
          objc_enumerationMutation(v3);
        v8 = *(_QWORD *)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)i);
        if (sub_100055868(v8) == 74
          || sub_100055868(v8) == 75
          || sub_100055868(v8) == 96)
        {
          v9 = sub_10022D014(v8);
          v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
          objc_msgSend(v2, "appendData:", v10, (_QWORD)v12);

        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v5);
  }

  return v2;
}

uint64_t sub_100252FA4(uint64_t a1)
{
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  void *i;
  uint64_t v6;
  unsigned __int8 v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  if (a1)
  {
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v1 = *(id *)(a1 + 72);
    v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    if (v2)
    {
      v3 = v2;
      v4 = *(_QWORD *)v10;
      while (2)
      {
        for (i = 0; i != v3; i = (char *)i + 1)
        {
          if (*(_QWORD *)v10 != v4)
            objc_enumerationMutation(v1);
          v6 = *(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)i);
          if (sub_100055868(v6) == 70)
          {
            v7 = sub_10022CEB0(v6);
            goto LABEL_12;
          }
        }
        v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
        if (v3)
          continue;
        break;
      }
    }
    v7 = -1;
LABEL_12:

  }
  else
  {
    return 0;
  }
  return v7;
}

uint64_t sub_1002530BC(uint64_t a1)
{
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  void *i;
  uint64_t v6;
  unsigned __int8 v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  if (a1)
  {
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v1 = *(id *)(a1 + 72);
    v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    if (v2)
    {
      v3 = v2;
      v4 = *(_QWORD *)v10;
      while (2)
      {
        for (i = 0; i != v3; i = (char *)i + 1)
        {
          if (*(_QWORD *)v10 != v4)
            objc_enumerationMutation(v1);
          v6 = *(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)i);
          if (sub_100055868(v6) == 71)
          {
            v7 = sub_10022CEB0(v6);
            goto LABEL_12;
          }
        }
        v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
        if (v3)
          continue;
        break;
      }
    }
    v7 = 47;
LABEL_12:

  }
  else
  {
    return 0;
  }
  return v7;
}

id sub_1002531D4(uint64_t a1)
{
  id v1;
  id v2;
  uint64_t v3;
  void *i;
  id *v5;
  id *v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];

  if (!a1)
    return 0;
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v1 = *(id *)(a1 + 80);
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v2)
  {
    v3 = *(_QWORD *)v9;
    while (2)
    {
      for (i = 0; i != v2; i = (char *)i + 1)
      {
        if (*(_QWORD *)v9 != v3)
          objc_enumerationMutation(v1);
        v5 = *(id **)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)i);
        if (sub_100055868((uint64_t)v5) == 74)
        {
          v6 = sub_10022CD6C(v5);
          v2 = (id)objc_claimAutoreleasedReturnValue(v6);
          goto LABEL_12;
        }
      }
      v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v2)
        continue;
      break;
    }
  }
LABEL_12:

  return v2;
}

id sub_1002532EC(uint64_t a1)
{
  id v1;
  id v2;
  uint64_t v3;
  void *i;
  id *v5;
  id *v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];

  if (!a1)
    return 0;
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v1 = *(id *)(a1 + 80);
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v2)
  {
    v3 = *(_QWORD *)v9;
    while (2)
    {
      for (i = 0; i != v2; i = (char *)i + 1)
      {
        if (*(_QWORD *)v9 != v3)
          objc_enumerationMutation(v1);
        v5 = *(id **)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)i);
        if (sub_100055868((uint64_t)v5) == 75)
        {
          v6 = sub_10022CD6C(v5);
          v2 = (id)objc_claimAutoreleasedReturnValue(v6);
          goto LABEL_12;
        }
      }
      v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v2)
        continue;
      break;
    }
  }
LABEL_12:

  return v2;
}

id sub_100253404(void *a1)
{
  id v1;

  if (a1)
  {
    v1 = sub_100253424((uint64_t)a1, 74);
    a1 = (void *)objc_claimAutoreleasedReturnValue(v1);
  }
  return a1;
}

id sub_100253424(uint64_t a1, int a2)
{
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  id *v7;
  id *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  void *j;
  id *v19;
  void *v20;
  id *v21;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[128];
  _BYTE v32[128];

  if (!a1)
    return 0;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v3 = *(id *)(a1 + 80);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v28;
    while (2)
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v28 != v5)
          objc_enumerationMutation(v3);
        v7 = *(id **)(*((_QWORD *)&v27 + 1) + 8 * (_QWORD)i);
        if (sub_100055868((uint64_t)v7) == 96)
        {
          v8 = sub_10022CD6C(v7);
          v4 = (id)objc_claimAutoreleasedReturnValue(v8);
          goto LABEL_12;
        }
      }
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
      if (v4)
        continue;
      break;
    }
  }
LABEL_12:

  if (objc_msgSend(v4, "length"))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig sharingInAChainDeviceConfigMailboxSettingDataForTag:]", 789, CFSTR("found override %@"), v9, v10, v11, v12, (uint64_t)v4);
    v13 = sub_10022C7A4((uint64_t)KmlTlv, v4);
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v14 = (id)objc_claimAutoreleasedReturnValue(v13);
    v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
    if (v15)
    {
      v16 = v15;
      v17 = *(_QWORD *)v24;
      while (2)
      {
        for (j = 0; j != v16; j = (char *)j + 1)
        {
          if (*(_QWORD *)v24 != v17)
            objc_enumerationMutation(v14);
          v19 = *(id **)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)j);
          if (sub_100055868((uint64_t)v19) == a2)
          {
            v21 = sub_10022CD6C(v19);
            v20 = (void *)objc_claimAutoreleasedReturnValue(v21);
            goto LABEL_23;
          }
        }
        v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
        if (v16)
          continue;
        break;
      }
    }
    v20 = 0;
LABEL_23:

  }
  else
  {
    v20 = 0;
  }

  return v20;
}

id sub_100253644(void *a1)
{
  id v1;

  if (a1)
  {
    v1 = sub_100253424((uint64_t)a1, 75);
    a1 = (void *)objc_claimAutoreleasedReturnValue(v1);
  }
  return a1;
}

id *sub_100253664(id *a1)
{
  if (a1)
    a1 = (id *)objc_msgSend(a1[5], "copy");
  return a1;
}

id *sub_100253680(id *a1)
{
  if (a1)
    a1 = (id *)objc_msgSend(a1[6], "copy");
  return a1;
}

id sub_10025369C(uint64_t a1)
{
  id v1;
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  id *v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id *v20;
  void *v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id *v28;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[128];

  if (!a1)
    return 0;
  v1 = sub_10022C7A4((uint64_t)KmlTlv, *(void **)(a1 + 16));
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v2 = (id)objc_claimAutoreleasedReturnValue(v1);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v32;
    while (2)
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v32 != v5)
          objc_enumerationMutation(v2);
        v7 = *(id **)(*((_QWORD *)&v31 + 1) + 8 * (_QWORD)i);
        v8 = sub_100055868((uint64_t)v7);
        if (isDeviceKeyAttestationTag(v8))
        {
          v20 = sub_10022CD6C(v7);
          v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
          v22 = kmlUtilHexStringFromData(v21);
          v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig getKeyAttestation]", 818, CFSTR("KeyCreationConfig: Received key attestation Data : %@"), v24, v25, v26, v27, (uint64_t)v23);

          v28 = sub_10022CD6C(v7);
          v19 = (void *)objc_claimAutoreleasedReturnValue(v28);
          goto LABEL_15;
        }
        v9 = sub_100055868((uint64_t)v7);
        if (isEndOfKeyConfigTag(v9))
        {
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig getKeyAttestation]", 821, CFSTR("KeyCreationConfig: Received Data Complete TLV"), v10, v11, v12, v13, v30);
          goto LABEL_14;
        }
        v14 = sub_100055868((uint64_t)v7);
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig getKeyAttestation]", 824, CFSTR("KeyCreationConfig: TLV with un-expected tag (%d)"), v15, v16, v17, v18, v14);
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
      v19 = 0;
      if (v4)
        continue;
      break;
    }
  }
  else
  {
LABEL_14:
    v19 = 0;
  }
LABEL_15:

  return v19;
}

_QWORD *sub_100253884(_QWORD *a1)
{
  _QWORD *v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  id *v8;
  id v9;
  id *v10;
  void *v11;
  id v12;
  void *v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];

  if (a1)
  {
    v1 = a1;
    v2 = (void *)a1[11];
    if (!v2)
    {
      v17 = 0u;
      v18 = 0u;
      v15 = 0u;
      v16 = 0u;
      v3 = (id)v1[10];
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      if (v4)
      {
        v5 = v4;
        v6 = *(_QWORD *)v16;
        do
        {
          for (i = 0; i != v5; i = (char *)i + 1)
          {
            if (*(_QWORD *)v16 != v6)
              objc_enumerationMutation(v3);
            v8 = *(id **)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)i);
            if (sub_100055868((uint64_t)v8) == 89)
            {
              v9 = objc_alloc((Class)NSString);
              v10 = sub_10022CD6C(v8);
              v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
              v12 = objc_msgSend(v9, "initWithData:encoding:", v11, 4, (_QWORD)v15);
              v13 = (void *)v1[11];
              v1[11] = v12;

            }
          }
          v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
        }
        while (v5);
      }

      v2 = (void *)v1[11];
    }
    a1 = objc_msgSend(v2, "copy", (_QWORD)v15);
  }
  return a1;
}

uint64_t sub_1002539E0(uint64_t a1)
{
  id v1;
  id v2;
  uint64_t v3;
  void *i;
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];

  if (a1)
  {
    v9 = 0u;
    v10 = 0u;
    v7 = 0u;
    v8 = 0u;
    v1 = *(id *)(a1 + 80);
    v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    if (v2)
    {
      v3 = *(_QWORD *)v8;
      while (2)
      {
        for (i = 0; i != v2; i = (char *)i + 1)
        {
          if (*(_QWORD *)v8 != v3)
            objc_enumerationMutation(v1);
          v5 = *(_QWORD *)(*((_QWORD *)&v7 + 1) + 8 * (_QWORD)i);
          if (sub_100055868(v5) == 40728)
          {
            LOBYTE(v2) = sub_10022CEB0(v5);
            goto LABEL_12;
          }
        }
        v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
        if (v2)
          continue;
        break;
      }
    }
LABEL_12:

  }
  else
  {
    LOBYTE(v2) = 0;
  }
  return v2;
}

uint64_t sub_100253B00(uint64_t a1)
{
  id v1;
  id v2;
  uint64_t v3;
  void *i;
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];

  if (a1)
  {
    v9 = 0u;
    v10 = 0u;
    v7 = 0u;
    v8 = 0u;
    v1 = *(id *)(a1 + 80);
    v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    if (v2)
    {
      v3 = *(_QWORD *)v8;
      while (2)
      {
        for (i = 0; i != v2; i = (char *)i + 1)
        {
          if (*(_QWORD *)v8 != v3)
            objc_enumerationMutation(v1);
          v5 = *(_QWORD *)(*((_QWORD *)&v7 + 1) + 8 * (_QWORD)i);
          if (sub_100055868(v5) == 40727)
          {
            LOBYTE(v2) = sub_10022CEB0(v5);
            goto LABEL_12;
          }
        }
        v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
        if (v2)
          continue;
        break;
      }
    }
LABEL_12:

  }
  else
  {
    LOBYTE(v2) = 0;
  }
  return v2;
}

id sub_100253C20(uint64_t a1)
{
  id v1;
  id v2;
  uint64_t v3;
  void *i;
  id *v5;
  id *v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];

  if (!a1)
    return 0;
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v1 = *(id *)(a1 + 80);
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v2)
  {
    v3 = *(_QWORD *)v9;
    while (2)
    {
      for (i = 0; i != v2; i = (char *)i + 1)
      {
        if (*(_QWORD *)v9 != v3)
          objc_enumerationMutation(v1);
        v5 = *(id **)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)i);
        if (sub_100055868((uint64_t)v5) == 40736)
        {
          v6 = sub_10022CD6C(v5);
          v2 = (id)objc_claimAutoreleasedReturnValue(v6);
          goto LABEL_12;
        }
      }
      v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v2)
        continue;
      break;
    }
  }
LABEL_12:

  return v2;
}

uint64_t sub_100253D44(uint64_t result)
{
  if (result)
    return *(unsigned __int8 *)(result + 129);
  return result;
}

uint64_t sub_100253D50(uint64_t result)
{
  if (result)
    return *(unsigned __int8 *)(result + 130);
  return result;
}

_QWORD *sub_100253E34(_QWORD *a1, void *a2)
{
  id v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int v22;
  id *v23;
  id *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  objc_super v42;

  v3 = a2;
  if (a1)
  {
    v42.receiver = a1;
    v42.super_class = (Class)KmlBindingAttestation;
    v4 = objc_msgSendSuper2(&v42, "init");
    a1 = v4;
    if (v4)
    {
      v5 = (void *)v4[1];
      v4[1] = 0;

      v6 = (void *)a1[2];
      a1[2] = 0;

      v7 = (void *)a1[3];
      a1[3] = 0;

      if (objc_msgSend(v3, "length"))
      {
        v12 = sub_10022C7A4((uint64_t)KmlTlv, v3);
        v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
        if (objc_msgSend(v13, "count"))
        {
          v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectAtIndexedSubscript:", 0));
          v22 = sub_100055868((uint64_t)v21);

          if (v22 == 48)
          {
            v23 = (id *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectAtIndexedSubscript:", 0));
            v24 = sub_10022CD6C(v23);
            v25 = objc_claimAutoreleasedReturnValue(v24);
            v26 = (void *)a1[1];
            a1[1] = v25;

          }
        }
        sub_100253F80((uint64_t)a1, v14, v15, v16, v17, v18, v19, v20, (uint64_t)v42.receiver);
        sub_100254194((uint64_t)a1, v27, v28, v29, v30, v31, v32, v33, (uint64_t)v42.receiver);
        sub_1002543F0((uint64_t)a1, v34, v35, v36, v37, v38, v39, v40, (uint64_t)v42.receiver);

      }
      else
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBindingAttestation initWithData:]", 37, CFSTR("Null data provided"), v8, v9, v10, v11, (uint64_t)v42.receiver);
      }
    }
  }

  return a1;
}

void sub_100253F80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  int v20;
  id *v21;
  id *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  int v26;
  id *v27;
  id *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  int v32;
  id *v33;
  id *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  int v38;
  id *v39;
  id *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  id v44;

  if (a1)
  {
    if (objc_msgSend(*(id *)(a1 + 8), "length"))
    {
      v14 = sub_10022C7A4((uint64_t)KmlTlv, *(void **)(a1 + 8));
      v44 = (id)objc_claimAutoreleasedReturnValue(v14);
      if ((unint64_t)objc_msgSend(v44, "count") > 3)
      {
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "objectAtIndexedSubscript:", 0));
        v20 = sub_100055868((uint64_t)v19);

        if (v20 == 48)
        {
          v21 = (id *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "objectAtIndexedSubscript:", 0));
          v22 = sub_10022CD6C(v21);
          v23 = objc_claimAutoreleasedReturnValue(v22);
          v24 = *(void **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v23;

        }
        v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "objectAtIndexedSubscript:", 1));
        v26 = sub_100055868((uint64_t)v25);

        if (v26 == 48)
        {
          v27 = (id *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "objectAtIndexedSubscript:", 1));
          v28 = sub_10022CD6C(v27);
          v29 = objc_claimAutoreleasedReturnValue(v28);
          v30 = *(void **)(a1 + 56);
          *(_QWORD *)(a1 + 56) = v29;

        }
        v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "objectAtIndexedSubscript:", 2));
        v32 = sub_100055868((uint64_t)v31);

        if (v32 == 48)
        {
          v33 = (id *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "objectAtIndexedSubscript:", 2));
          v34 = sub_10022CD6C(v33);
          v35 = objc_claimAutoreleasedReturnValue(v34);
          v36 = *(void **)(a1 + 48);
          *(_QWORD *)(a1 + 48) = v35;

        }
        v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "objectAtIndexedSubscript:", 3));
        v38 = sub_100055868((uint64_t)v37);

        if (v38 == 4)
        {
          v39 = (id *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "objectAtIndexedSubscript:", 3));
          v40 = sub_10022CD6C(v39);
          v41 = objc_claimAutoreleasedReturnValue(v40);
          v42 = *(void **)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v41;

        }
      }
      else
      {
        KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlBindingAttestation parseBindingAttestationSequence]", 66, CFSTR("Not enough elements in the BindingAttestation Sequence"), v15, v16, v17, v18, v43);
      }

    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlBindingAttestation parseBindingAttestationSequence]", 58, CFSTR("Missing Binding Attestation sequence"), v10, v11, v12, v13, a9);
    }
  }
}

void sub_100254194(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  int v20;
  id *v21;
  id *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  int v26;
  id *v27;
  id *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  int v32;
  void *v33;
  id *v34;
  id *v35;
  void *v36;
  id v37;
  void *v38;
  void *v39;
  int v40;
  id *v41;
  id *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  id v46;

  if (a1)
  {
    if (!objc_msgSend(*(id *)(a1 + 16), "length"))
    {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlBindingAttestation parseAttestationDataSequence]", 90, CFSTR("Missing Attestation Data Sequence"), v10, v11, v12, v13, a9);
      return;
    }
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBindingAttestation parseAttestationDataSequence]", 94, CFSTR("attestationDataSequence : %@"), v10, v11, v12, v13, *(_QWORD *)(a1 + 16));
    v14 = sub_10022C7A4((uint64_t)KmlTlv, *(void **)(a1 + 16));
    v46 = (id)objc_claimAutoreleasedReturnValue(v14);
    if ((unint64_t)objc_msgSend(v46, "count") > 4)
    {
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "objectAtIndexedSubscript:", 0));
      v20 = sub_100055868((uint64_t)v19);

      if (v20 == 4)
      {
        v21 = (id *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "objectAtIndexedSubscript:", 0));
        v22 = sub_10022CD6C(v21);
        v23 = objc_claimAutoreleasedReturnValue(v22);
        v24 = *(void **)(a1 + 64);
        *(_QWORD *)(a1 + 64) = v23;

      }
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "objectAtIndexedSubscript:", 3));
      v26 = sub_100055868((uint64_t)v25);

      if (v26 == 4)
      {
        v27 = (id *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "objectAtIndexedSubscript:", 3));
        v28 = sub_10022CD6C(v27);
        v29 = objc_claimAutoreleasedReturnValue(v28);
        v30 = *(void **)(a1 + 72);
        *(_QWORD *)(a1 + 72) = v29;

      }
      v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "objectAtIndexedSubscript:", 4));
      v32 = sub_100055868((uint64_t)v31);

      v33 = v46;
      if (v32 != 4)
        goto LABEL_16;
      v34 = (id *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "objectAtIndexedSubscript:", 4));
      v35 = sub_10022CD6C(v34);
      v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
      v37 = sub_10022C7A4((uint64_t)KmlTlv, v36);
      v38 = (void *)objc_claimAutoreleasedReturnValue(v37);

      if (objc_msgSend(v38, "count"))
      {
        v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "objectAtIndexedSubscript:", 0));
        v40 = sub_100055868((uint64_t)v39);

        if (v40 == 48)
        {
          v41 = (id *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "objectAtIndexedSubscript:", 0));
          v42 = sub_10022CD6C(v41);
          v43 = objc_claimAutoreleasedReturnValue(v42);
          v44 = *(void **)(a1 + 24);
          *(_QWORD *)(a1 + 24) = v43;

        }
      }

    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlBindingAttestation parseAttestationDataSequence]", 100, CFSTR("Not enough elements in the AttestationData Sequence"), v15, v16, v17, v18, v45);
    }
    v33 = v46;
LABEL_16:

  }
}

void sub_1002543F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  int v20;
  id *v21;
  id *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  int v26;
  _QWORD *v27;
  uint64_t v28;
  id v29;

  if (a1)
  {
    if (objc_msgSend(*(id *)(a1 + 24), "length"))
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBindingAttestation parseExtensionsSequence]", 135, CFSTR("extensionSequence : %@"), v10, v11, v12, v13, *(_QWORD *)(a1 + 24));
      v14 = sub_10022C7A4((uint64_t)KmlTlv, *(void **)(a1 + 24));
      v29 = (id)objc_claimAutoreleasedReturnValue(v14);
      if ((unint64_t)objc_msgSend(v29, "count") > 2)
      {
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "objectAtIndexedSubscript:", 1));
        v20 = sub_100055868((uint64_t)v19);

        if (v20 == 4)
        {
          v21 = (id *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "objectAtIndexedSubscript:", 1));
          v22 = sub_10022CD6C(v21);
          v23 = objc_claimAutoreleasedReturnValue(v22);
          v24 = *(void **)(a1 + 80);
          *(_QWORD *)(a1 + 80) = v23;

        }
        v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "objectAtIndexedSubscript:", 2));
        v26 = sub_100055868((uint64_t)v25);

        if (v26 == 1)
        {
          v27 = (_QWORD *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "objectAtIndexedSubscript:", 2));
          *(_BYTE *)(a1 + 32) = sub_10022CE3C(v27) != 0;

        }
      }
      else
      {
        KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlBindingAttestation parseExtensionsSequence]", 141, CFSTR("Not enough elements in the Extensions Sequence"), v15, v16, v17, v18, v28);
      }

    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlBindingAttestation parseExtensionsSequence]", 131, CFSTR("Missing Extensions Sequence Data"), v10, v11, v12, v13, a9);
    }
  }
}

id sub_100254600(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  unsigned int v5;
  const __CFString *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = a2;
  objc_opt_self(a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString stringWithString:](NSMutableString, "stringWithString:", CFSTR("DIGK.")));
  v5 = objc_msgSend(v3, "isEqualToString:", CFSTR("FRND"));

  if (v5)
    v6 = CFSTR("FRND");
  else
    v6 = CFSTR("OWNR");
  objc_msgSend(v4, "appendString:", v6);
  v7 = randomStringWithLength(4);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  objc_msgSend(v4, "appendFormat:", CFSTR(".%@="), v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  v10 = objc_alloc_init((Class)NSDateFormatter);
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSTimeZone timeZoneWithName:](NSTimeZone, "timeZoneWithName:", CFSTR("UTC")));
  objc_msgSend(v10, "setTimeZone:", v11);

  objc_msgSend(v10, "setDateFormat:", CFSTR("yyMMddHHmm"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSLocale localeWithLocaleIdentifier:](NSLocale, "localeWithLocaleIdentifier:", CFSTR("en_US_POSIX")));
  objc_msgSend(v10, "setLocale:", v12);

  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "stringFromDate:", v9));
  objc_msgSend(v4, "appendString:", v13);

  KmlLogFunc2(OS_LOG_TYPE_DEBUG, (uint64_t)"+[KmlEndpointManager kmlUniqueEndpointId:]", 116, CFSTR("Unique Endpoint ID: %@"), v14, v15, v16, v17, (uint64_t)v4);
  return v4;
}

const __CFString *sub_100254798(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  const __CFString *v6;
  unsigned __int8 v7;
  void *v8;
  unsigned int v9;

  v3 = a2;
  objc_opt_self(a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "componentsSeparatedByString:", CFSTR(".")));

  if ((unint64_t)objc_msgSend(v4, "count") < 3)
  {
    v6 = 0;
  }
  else
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectAtIndexedSubscript:", 1));
    v6 = CFSTR("OWNR");
    v7 = objc_msgSend(v5, "isEqualToString:", CFSTR("OWNR"));

    if ((v7 & 1) == 0)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectAtIndexedSubscript:", 1));
      v9 = objc_msgSend(v8, "isEqualToString:", CFSTR("FRND"));

      if (v9)
        v6 = CFSTR("FRND");
      else
        v6 = 0;
    }
  }

  return v6;
}

uint64_t sub_10025486C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  void *i;
  void *v26;
  const __CFString *v27;
  void *v28;
  void *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  id v35;
  _BYTE v36[128];

  v3 = a2;
  objc_opt_self(a1);
  if (v3)
  {
    v35 = 0;
    v8 = SESEndPointList(&v35);
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    v10 = v35;
    v15 = v10;
    if (v10)
    {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"+[KmlEndpointManager getTotalKeysFor:]", 153, CFSTR("Error in getting endpoint list: %@"), v11, v12, v13, v14, (uint64_t)v10);
      v20 = 0;
    }
    else
    {
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v30 = v9;
      v21 = v9;
      v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v31, v36, 16);
      if (v22)
      {
        v23 = v22;
        v20 = 0;
        v24 = *(_QWORD *)v32;
        do
        {
          for (i = 0; i != v23; i = (char *)i + 1)
          {
            if (*(_QWORD *)v32 != v24)
              objc_enumerationMutation(v21);
            v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v31 + 1) + 8 * (_QWORD)i), "subjectIdentifier"));
            v27 = sub_100254798((uint64_t)KmlEndpointManager, v26);
            v28 = (void *)objc_claimAutoreleasedReturnValue(v27);

            v20 += objc_msgSend(v28, "isEqualToString:", v3);
          }
          v23 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v31, v36, 16);
        }
        while (v23);
      }
      else
      {
        v20 = 0;
      }

      v9 = v30;
    }
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlEndpointManager getTotalKeysFor:]", 156, CFSTR("Total keys for %@ is %ld"), v16, v17, v18, v19, (uint64_t)v3);

  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlEndpointManager getTotalKeysFor:]", 137, CFSTR("Invalid keyType - %@"), v4, v5, v6, v7, 0);
    v20 = 0;
  }

  return v20;
}

id sub_100254A6C(uint64_t a1, void *a2, char a3)
{
  id v5;
  void *v6;
  void *v7;
  char *v8;
  void *v9;
  NSString *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  void *v19;
  NSString *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  void *v38;
  id v39;
  void *v40;
  uint64_t v41;
  __int16 v42;
  __int16 v43;
  uint64_t PrivateData;
  void *v45;
  id v46;
  id v48;
  id v49;
  char v50;
  uint64_t v51;
  id v52;
  char v53;
  char v54;
  id v55;
  NSErrorUserInfoKey v56;
  void *v57;
  NSErrorUserInfoKey v58;
  void *v59;

  v5 = a2;
  objc_opt_self(a1);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "mailboxMapping"));
  v7 = (void *)sub_10021804C((uint64_t)[KmlVersions alloc], v5);
  v8 = sub_10022A0B4((char *)[KmlMailboxMappingData alloc], v6, (__int16)objc_msgSend(v7, "agreedKmlVehicleVersion"));
  if (sub_10022AAD8((uint64_t)v8) == 128)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml"));
    v58 = NSLocalizedDescriptionKey;
    v10 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(212));
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    v59 = v11;
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v59, &v58, 1));
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v9, 212, v12));

    KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"+[KmlEndpointManager updateMailboxForEndpoint:withUsedSlotIdentifierIndex:]", 171, CFSTR("Can not update used slot identifiers due to : %@"), v14, v15, v16, v17, (uint64_t)v13);
LABEL_5:
    v37 = v13;
    goto LABEL_10;
  }
  v18 = sub_10022AB38((uint64_t)v8);
  if (v18 < sub_10022AAE4((uint64_t)v8))
  {
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml"));
    v56 = NSLocalizedDescriptionKey;
    v20 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(212));
    v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
    v57 = v21;
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v57, &v56, 1));
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v19, 212, v22));

    v30 = sub_10022A674((id *)v8, v23, v24, v25, v26, v27, v28, v29);
    v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "asHexString"));
    KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"+[KmlEndpointManager updateMailboxForEndpoint:withUsedSlotIdentifierIndex:]", 177, CFSTR("Underflow detected in mailbox offsets %@"), v33, v34, v35, v36, (uint64_t)v32);

    goto LABEL_5;
  }
  v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "publicKeyIdentifier"));
  v39 = kmlUtilHexStringFromData(v38);
  v40 = (void *)objc_claimAutoreleasedReturnValue(v39);

  v41 = sub_10022AAE4((uint64_t)v8);
  v42 = sub_10022AB38((uint64_t)v8);
  v43 = sub_10022AAE4((uint64_t)v8);
  v55 = 0;
  PrivateData = SESEndPointGetPrivateData(v40, v41, (unsigned __int16)(v42 - v43), &v55);
  v45 = (void *)objc_claimAutoreleasedReturnValue(PrivateData);
  v46 = v55;
  if (v46 || (unint64_t)objc_msgSend(v45, "length") <= 1)
  {
    v37 = v46;
  }
  else
  {
    v48 = objc_msgSend(objc_alloc((Class)NSMutableData), "initWithData:", v45);
    v49 = objc_retainAutorelease(v45);
    v50 = *(_BYTE *)objc_msgSend(v49, "bytes");
    v54 = v50 | sub_10022AA00((uint64_t)v8);
    objc_msgSend(v48, "replaceBytesInRange:withBytes:", 0, 1, &v54);
    v53 = *((_BYTE *)objc_msgSend(objc_retainAutorelease(v49), "bytes") + 1) & ~(1 << a3);
    objc_msgSend(v48, "replaceBytesInRange:withBytes:", 1, 1, &v53);
    v51 = sub_10022AAE4((uint64_t)v8);
    v52 = 0;
    SESEndPointSetPrivateData(v40, v48, v51, &v52);
    v37 = v52;

  }
LABEL_10:

  return v37;
}

id sub_100254E88(uint64_t a1, unsigned int a2, unsigned int a3, void *a4)
{
  id v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  void *v47;
  NSString *v48;
  void *v49;
  void **v50;
  NSErrorUserInfoKey *v51;
  NSString *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  id v69;
  void *v70;
  uint64_t v71;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  _QWORD v76[4];
  char v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  id v82;
  NSErrorUserInfoKey v83;
  void *v84;
  _BYTE v85[128];
  NSErrorUserInfoKey v86;
  void *v87;

  v7 = a4;
  objc_opt_self(a1);
  v82 = 0;
  v8 = SESEndPointList(&v82);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v10 = v82;
  if (v10)
  {
    v15 = v10;
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlEndpointManager freeSlotIdIndices:reserveSlotIdIndices:forEndpointId:]", 227, CFSTR("Error in getting endpoint list: %@"), v11, v12, v13, v14, (uint64_t)v10);
    goto LABEL_21;
  }
  if (!objc_msgSend(v9, "count"))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlEndpointManager freeSlotIdIndices:reserveSlotIdIndices:forEndpointId:]", 232, CFSTR("No keys in the SE database"), v16, v17, v18, v19, v73);
    v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
    v86 = NSLocalizedDescriptionKey;
    v52 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(210));
    v49 = (void *)objc_claimAutoreleasedReturnValue(v52);
    v87 = v49;
    v50 = &v87;
    v51 = &v86;
LABEL_18:
    v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v50, v51, 1));
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v47, 210, v53));

    goto LABEL_21;
  }
  v74 = a3;
  v75 = a2;
  v80 = 0u;
  v81 = 0u;
  v78 = 0u;
  v79 = 0u;
  v20 = v9;
  v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v78, v85, 16);
  if (!v21)
  {
LABEL_12:

LABEL_16:
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlEndpointManager freeSlotIdIndices:reserveSlotIdIndices:forEndpointId:]", 247, CFSTR("Owner key with id %@, does not exist"), v31, v32, v33, v34, (uint64_t)v7);
    v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
    v83 = NSLocalizedDescriptionKey;
    v48 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(210));
    v49 = (void *)objc_claimAutoreleasedReturnValue(v48);
    v84 = v49;
    v50 = &v84;
    v51 = &v83;
    goto LABEL_18;
  }
  v22 = v21;
  v23 = *(_QWORD *)v79;
LABEL_6:
  v24 = 0;
  while (1)
  {
    if (*(_QWORD *)v79 != v23)
      objc_enumerationMutation(v20);
    v25 = *(void **)(*((_QWORD *)&v78 + 1) + 8 * v24);
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "publicKeyIdentifier"));
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlEndpointManager freeSlotIdIndices:reserveSlotIdIndices:forEndpointId:]", 238, CFSTR("checking key with id: %@"), v27, v28, v29, v30, (uint64_t)v26);
    if ((objc_msgSend(v26, "isEqual:", v7) & 1) != 0)
      break;

    if (v22 == (id)++v24)
    {
      v22 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v78, v85, 16);
      if (v22)
        goto LABEL_6;
      goto LABEL_12;
    }
  }
  v35 = v25;
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlEndpointManager freeSlotIdIndices:reserveSlotIdIndices:forEndpointId:]", 241, CFSTR("key with id %@ exists"), v36, v37, v38, v39, (uint64_t)v7);

  if (!v35)
    goto LABEL_16;
  v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "sharingTokenAvailabilityBitmap"));

  if (v40)
  {
    v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "sharingTokenAvailabilityBitmap"));
    v46 = (uint64_t)objc_msgSend(v45, "unsignedCharValue");

  }
  else
  {
    v46 = 254;
  }
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlEndpointManager freeSlotIdIndices:reserveSlotIdIndices:forEndpointId:]", 256, CFSTR("Available bitmap: %02X"), v41, v42, v43, v44, v46);
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlEndpointManager freeSlotIdIndices:reserveSlotIdIndices:forEndpointId:]", 258, CFSTR("Reserved indices %02X"), v54, v55, v56, v57, v74);
  v58 = v46 & ~v74;
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlEndpointManager freeSlotIdIndices:reserveSlotIdIndices:forEndpointId:]", 261, CFSTR("Freed up indices %02X"), v59, v60, v61, v62, v75);
  v63 = v58 | v75;
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlEndpointManager freeSlotIdIndices:reserveSlotIdIndices:forEndpointId:]", 264, CFSTR("BitMap with 0s for pending invitations: %02X"), v64, v65, v66, v67, v58 | v75);
  v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "publicKeyIdentifier"));
  v69 = kmlUtilHexStringFromData(v68);
  v70 = (void *)objc_claimAutoreleasedReturnValue(v69);
  v76[0] = _NSConcreteStackBlock;
  v76[1] = 3221225472;
  v76[2] = sub_1002552F8;
  v76[3] = &unk_10030FCA0;
  v77 = v63;
  v71 = SESEndPointUpdateWithBlock(v70, v76);
  v15 = (void *)objc_claimAutoreleasedReturnValue(v71);

LABEL_21:
  return v15;
}

void sub_1002552F8(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v3;
  id v4;

  v2 = *(unsigned __int8 *)(a1 + 32);
  v3 = a2;
  v4 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v2));
  objc_msgSend(v3, "setSharingTokenAvailabilityBitmap:", v4);

}

id sub_10025535C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v8;

  objc_opt_self(a1);
  byte_100354970 = 1;
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlEndpointManager handleFirstUnlockNotification]", 274, CFSTR("Set up statistics reporting"), v1, v2, v3, v4, v8);
  v5 = objc_msgSend(objc_alloc((Class)NSBackgroundActivityScheduler), "initWithIdentifier:", CFSTR("com.apple.sesd.kml.statsReportingActivity"));
  v6 = (void *)qword_100354968;
  qword_100354968 = (uint64_t)v5;

  objc_msgSend((id)qword_100354968, "setPreregistered:", 1);
  return _objc_msgSend((id)qword_100354968, "scheduleWithBlock:", &stru_10030FCE0);
}

void sub_1002553E0(id a1, id a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  v7 = a2;
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlEndpointManager handleFirstUnlockNotification]_block_invoke", 278, CFSTR("Handling statistics reporting"), v2, v3, v4, v5, v6);
  sub_100255430((uint64_t)KmlEndpointManager, v7);

}

void sub_100255430(uint64_t a1, void *a2)
{
  id v3;
  dispatch_queue_global_t global_queue;
  NSObject *v5;
  id v6;
  _QWORD block[4];
  id v8;

  v3 = a2;
  objc_opt_self(a1);
  global_queue = dispatch_get_global_queue(21, 0);
  v5 = objc_claimAutoreleasedReturnValue(global_queue);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002554CC;
  block[3] = &unk_100303300;
  v8 = v3;
  v6 = v3;
  dispatch_async(v5, block);

}

void sub_1002554CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  int v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  id *v27;
  void *i;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const __CFString *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  id v54;
  _BYTE v55[128];

  if (byte_100354970)
  {
    v54 = 0;
    v9 = SESEndPointList(&v54);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    v15 = v54;
    if (v15)
    {
      LOBYTE(v16) = 0;
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 1;
    }
    else
    {
      v44 = 0;
      v45 = v10;
      v46 = a1;
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      v23 = v10;
      v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v50, v55, 16);
      if (v24)
      {
        v25 = v24;
        v16 = 0;
        v47 = 0;
        v19 = 0;
        v20 = 0;
        v21 = 0;
        v26 = *(_QWORD *)v51;
        v49 = 1;
        v27 = (id *)&unk_100354000;
        while (2)
        {
          for (i = 0; i != v25; i = (char *)i + 1)
          {
            if (*(_QWORD *)v51 != v26)
              objc_enumerationMutation(v23);
            v29 = *(void **)(*((_QWORD *)&v50 + 1) + 8 * (_QWORD)i);
            if ((objc_msgSend(v27[301], "shouldDefer", v44) & 1) != 0)
            {
              KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlEndpointManager reportEndpointStatistics:]_block_invoke", 299, CFSTR("Honor Defer request from system"), v30, v31, v32, v33, v44);
              (*(void (**)(void))(*(_QWORD *)(v46 + 32) + 16))();

              return;
            }
            v34 = objc_msgSend(v29, "endPointType");
            if (v34 == (id)3)
            {
              ++v19;
            }
            else if (v34 == (id)2)
            {
              ++v20;
            }
            else if (v34 == (id)1)
            {
              v35 = v23;
              v48 = v20;
              v36 = v19;
              v37 = v16;
              v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "subjectIdentifier"));
              v39 = sub_100254798((uint64_t)KmlEndpointManager, v38);
              v40 = (void *)objc_claimAutoreleasedReturnValue(v39);

              if (objc_msgSend(v40, "isEqualToString:", CFSTR("OWNR")))
              {
                v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "bleAddress"));

                if (v41)
                  v37 = (v37 + 1);
                else
                  ++v21;
              }
              else if (objc_msgSend(v40, "isEqualToString:", CFSTR("FRND")))
              {
                v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "bleAddress"));

                if (v42)
                  ++BYTE4(v47);
                else
                  LODWORD(v47) = v47 + 1;
              }
              if ((v49 & 1) != 0)
              {
                v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "environment"));
                v49 = objc_msgSend(v43, "isEqualToString:", CFSTR("P"));

              }
              else
              {
                v49 = 0;
              }
              v23 = v35;

              v16 = v37;
              v19 = v36;
              v20 = v48;
              v27 = (id *)&unk_100354000;
            }
          }
          v25 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v50, v55, 16);
          if (v25)
            continue;
          break;
        }
      }
      else
      {
        LOBYTE(v16) = 0;
        v47 = 0;
        v19 = 0;
        v20 = 0;
        v21 = 0;
        v49 = 1;
      }

      v10 = v45;
      a1 = v46;
      v15 = (id)v44;
      v17 = v47;
      v18 = BYTE4(v47);
      v22 = v49;
    }
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlEndpointManager reportEndpointStatistics:]_block_invoke", 337, CFSTR("Reporting general statistics"), v11, v12, v13, v14, v44);
    sub_100211F10((uint64_t)KmlAnalyticsLogger, (v16 << 16) | (v21 << 24), (v17 << 24) | (v18 << 16), v19, v20, v22 & 1);

  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlEndpointManager reportEndpointStatistics:]_block_invoke", 344, CFSTR("Statistics reporting can only happen after first unlock"), a5, a6, a7, a8, v44);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

_QWORD *sub_100255878(uint64_t a1, void *a2, _QWORD *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  void *i;
  void *v20;
  void *v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSString *v31;
  void *v32;
  void *v33;
  uint64_t v35;
  void *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  id v41;
  NSErrorUserInfoKey v42;
  void *v43;
  _BYTE v44[128];

  v5 = a2;
  objc_opt_self(a1);
  v41 = 0;
  v6 = SESEndPointList(&v41);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = v41;
  v13 = v8;
  if (!v8)
  {
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v36 = v7;
    v14 = v7;
    v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v37, v44, 16);
    if (v16)
    {
      v17 = v16;
      v18 = *(_QWORD *)v38;
      while (2)
      {
        for (i = 0; i != v17; i = (char *)i + 1)
        {
          if (*(_QWORD *)v38 != v18)
            objc_enumerationMutation(v14);
          v20 = *(void **)(*((_QWORD *)&v37 + 1) + 8 * (_QWORD)i);
          v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "publicKeyIdentifier"));
          v22 = objc_msgSend(v21, "isEqualToData:", v5);

          if ((v22 & 1) != 0)
          {
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlEndpointManager getEndpointForKeyIdentifier:withError:]", 366, CFSTR("Found our endpoint"), v23, v24, v25, v26, v35);
            a3 = v20;
            goto LABEL_15;
          }
        }
        v17 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v37, v44, 16);
        if (v17)
          continue;
        break;
      }
    }

    KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"+[KmlEndpointManager getEndpointForKeyIdentifier:withError:]", 372, CFSTR("Failed to find endpoint"), v27, v28, v29, v30, v35);
    if (!a3)
    {
      v7 = v36;
      goto LABEL_17;
    }
    v14 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml"));
    v42 = NSLocalizedDescriptionKey;
    v31 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(210));
    v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
    v43 = v32;
    v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v43, &v42, 1));
    *a3 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v14, 210, v33));

    a3 = 0;
LABEL_15:
    v7 = v36;
    goto LABEL_16;
  }
  KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"+[KmlEndpointManager getEndpointForKeyIdentifier:withError:]", 357, CFSTR("Error in getting endpoint list: %@"), v9, v10, v11, v12, (uint64_t)v8);
  if (a3)
  {
    v14 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "userInfo"));
    *a3 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v14, 210, v15));

    a3 = 0;
LABEL_16:

  }
LABEL_17:

  return a3;
}

id *sub_100255B5C(id *a1, void *a2, void *a3)
{
  id v6;
  id v7;
  id *v8;
  id v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  objc_super v25;

  v6 = a2;
  v7 = a3;
  if (a1)
  {
    v25.receiver = a1;
    v25.super_class = (Class)KmlEndpointManager;
    v8 = (id *)objc_msgSendSuper2(&v25, "init");
    a1 = v8;
    if (v8)
    {
      objc_storeStrong(v8 + 1, a2);
      v9 = kmlUtilDataForHexString(a1[1]);
      v10 = objc_claimAutoreleasedReturnValue(v9);
      v11 = a1[2];
      a1[2] = (id)v10;

      v12 = a1[3];
      a1[3] = 0;

      v13 = a1[5];
      a1[5] = 0;

      v14 = a1[4];
      a1[4] = 0;

      v15 = a1[6];
      a1[6] = 0;

      v16 = a1[7];
      a1[7] = 0;

      v17 = a1[8];
      a1[8] = 0;

      v18 = a1[9];
      a1[9] = 0;

      v19 = a1[10];
      a1[10] = 0;

      v20 = a1[11];
      a1[11] = 0;

      v21 = a1[12];
      a1[12] = 0;

      v22 = a1[13];
      a1[13] = 0;

      objc_storeStrong(a1 + 16, a3);
      *((_BYTE *)a1 + 113) = 0;
      v23 = a1[15];
      a1[15] = 0;

    }
  }

  return a1;
}

id sub_100255CA0(uint64_t a1, _QWORD *a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  KmlOwnerPairingManager *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  NSString *v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  uint64_t v49;
  id v50;
  id v51;
  NSErrorUserInfoKey v52;
  void *v53;

  if (!a1)
    return 0;
  v4 = sub_100256044(a1);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (!v5)
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 24), "publicKeyIdentifier"));
    objc_msgSend(*(id *)(a1 + 24), "endPointType");
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager revokeOrDeleteKeyWithError:]", 423, CFSTR("Revoke or delete key %@ with type %d"), v13, v14, v15, v16, (uint64_t)v12);

    v17 = (unint64_t)objc_msgSend(*(id *)(a1 + 24), "endPointType");
    if (v17 <= 5)
    {
      if (((1 << v17) & 0x26) != 0)
      {
        v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithLength:](NSMutableData, "dataWithLength:", 16));
        v19 = *(_QWORD *)(a1 + 8);
        v51 = 0;
        v20 = SESEndPointRevoke(v19, v18, 0, &v51);
        v11 = (void *)objc_claimAutoreleasedReturnValue(v20);
        v10 = v51;
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager revokeOrDeleteKeyWithError:]", 434, CFSTR("Asking seld to initiate delete with TSM"), v21, v22, v23, v24, v49);
        v25 = (void *)objc_claimAutoreleasedReturnValue(+[NFRemoteAdminManager sharedRemoteAdminManager](NFRemoteAdminManager, "sharedRemoteAdminManager"));
        objc_msgSend(v25, "queueServerConnection:", 0);

        v26 = sub_1002228B4((uint64_t)KmlOwnerPairingManager, *(void **)(a1 + 8));
        v27 = objc_claimAutoreleasedReturnValue(v26);
        v28 = (void *)v27;
        if (v27)
        {
          sub_100223814(v27);
        }
        else
        {
          v30 = sub_10024165C((uint64_t)KmlFriendSharingManager, *(void **)(a1 + 8));
          v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
          sub_1002440C0((uint64_t)v31);

        }
        goto LABEL_17;
      }
      if (((1 << v17) & 0x18) != 0)
      {
        v29 = *(_QWORD *)(a1 + 8);
        v50 = 0;
        SESEndPointDelete(v29, &v50);
        v10 = v50;
        v11 = 0;
LABEL_17:
        v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "userInfo"));
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager revokeOrDeleteKeyWithError:]", 462, CFSTR("revokeOrDeleteKey error %@"), v42, v43, v44, v45, (uint64_t)v41);

        if (a2 && v10)
        {
          v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml"));
          v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "userInfo"));
          *a2 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v46, 211, v47));

        }
        goto LABEL_20;
      }
    }
    v32 = objc_msgSend(*(id *)(a1 + 24), "endPointType");
    KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager revokeOrDeleteKeyWithError:]", 455, CFSTR("Unknown endpoint of type %d could not be deleted"), v33, v34, v35, v36, (uint64_t)v32);
    if (a2)
    {
      v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml"));
      v52 = NSLocalizedDescriptionKey;
      v38 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(214));
      v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
      v53 = v39;
      v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v53, &v52, 1));
      *a2 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v37, 214, v40));

    }
    v11 = 0;
    v10 = 0;
    goto LABEL_17;
  }
  v10 = (id)v5;
  KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager revokeOrDeleteKeyWithError:]", 416, CFSTR("Error getting endpoint - %@"), v6, v7, v8, v9, v5);
  if (a2)
  {
    v10 = objc_retainAutorelease(v10);
    v11 = 0;
    *a2 = v10;
  }
  else
  {
    v11 = 0;
  }
LABEL_20:

  return v11;
}

id sub_100256044(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  NSString *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  id v22;
  NSErrorUserInfoKey v23;
  void *v24;

  if (!a1)
    return 0;
  v2 = *(void **)(a1 + 16);
  v22 = 0;
  v3 = sub_100255878((uint64_t)KmlEndpointManager, v2, &v22);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  v5 = v22;
  v6 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v4;

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 24), "revocationAttestation"));
  if (v7)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager getUnRevokedEndpoint]", 1432, CFSTR("Found endpoint, but it's revoked"), v8, v9, v10, v11, (uint64_t)v22);
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml"));
    v23 = NSLocalizedDescriptionKey;
    v13 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(211));
    v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    v24 = v14;
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v24, &v23, 1));
    v16 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v12, 211, v15));

    v5 = (id)v16;
  }
  if (!v5 && !*(_QWORD *)(a1 + 128))
  {
    v17 = sub_10021804C((uint64_t)[KmlVersions alloc], *(void **)(a1 + 24));
    v18 = *(void **)(a1 + 128);
    *(_QWORD *)(a1 + 128) = v17;

  }
  v19 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 24), "deviceConfiguration"));
  v20 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v19;

  return v5;
}

uint64_t *sub_10025620C(uint64_t *a1)
{
  uint64_t *v1;
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v13;
  id v14;

  v1 = a1;
  if (a1)
  {
    v2 = (void *)a1[2];
    v14 = 0;
    v3 = sub_100255878((uint64_t)KmlEndpointManager, v2, &v14);
    v4 = objc_claimAutoreleasedReturnValue(v3);
    v5 = v14;
    v6 = (void *)v1[3];
    v1[3] = v4;

    if (v5)
    {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager localDeleteKey]", 476, CFSTR("Error getting endpoint - %@"), v7, v8, v9, v10, (uint64_t)v5);
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager localDeleteKey]", 480, CFSTR("Found Key with id %@, deleting it"), v7, v8, v9, v10, v1[1]);
      v11 = v1[1];
      v13 = 0;
      SESEndPointDelete(v11, &v13);
      v5 = v13;
    }
    v1 = (uint64_t *)v5;

  }
  return v1;
}

id *sub_1002562EC(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __CFString *v23;
  id v24;
  void *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  void *v38;
  NSString *v39;
  void *v40;
  void *v41;
  const __CFString *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const __CFString *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  void *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  const __CFString *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  id *v72;
  id *v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  id v86;
  void *v87;
  void *v88;
  NSString *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  SESConfigDCK *v94;
  void *v95;
  void *v96;
  uint64_t v97;
  void *v98;
  void *v99;
  NSObject *v100;
  unsigned int v101;
  NSObject *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  id v111;
  id v112;
  id v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  id v118;
  uint64_t v119;
  id v120;
  id v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  id v126;
  id v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  id v132;
  void *v133;
  _WORD *v134;
  void *v135;
  id v136;
  uint64_t v137;
  id v138;
  id v139;
  id v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void *v147;
  id v148;
  id v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  id v155;
  void *v156;
  uint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void *v163;
  unsigned int v164;
  dispatch_queue_global_t global_queue;
  uint64_t v166;
  NSString *v167;
  void *v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  void *v172;
  void *v173;
  void *v174;
  void *v175;
  void *v176;
  uint64_t v177;
  id v178;
  void *v179;
  void *v180;
  _QWORD block[5];
  id v182;
  id v183;
  id v184;
  id v185;
  _QWORD v186[2];
  _QWORD v187[2];
  NSErrorUserInfoKey v188;
  void *v189;
  NSErrorUserInfoKey v190;
  void *v191;

  v5 = a2;
  v6 = a3;
  if (a1)
  {
    v7 = sub_100256044((uint64_t)a1);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (v8)
    {
      v16 = (void *)v8;
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager saveTrackingReceipt:otherJSONData:]", 492, CFSTR("Error getting endpoint - %@"), v12, v13, v14, v15, v8);
LABEL_15:
      sub_100257018((uint64_t)a1, v16);
      a1 = v16;
LABEL_16:

      goto LABEL_17;
    }
    if ((sub_100257284((uint64_t)a1, v9, v10, v11, v12, v13, v14, v15) & 1) == 0)
    {
      v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml"));
      v190 = NSLocalizedDescriptionKey;
      v39 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(214));
      v40 = (void *)objc_claimAutoreleasedReturnValue(v39);
      v191 = v40;
      v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v191, &v190, 1));
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v38, 214, v41));

      goto LABEL_15;
    }
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
    objc_msgSend(v17, "setObject:forKeyedSubscript:", objc_opt_class(NSData), CFSTR("additionalData"));
    objc_msgSend(v17, "setObject:forKeyedSubscript:", objc_opt_class(NSData), CFSTR("confidentialMailboxData"));
    objc_msgSend(v17, "setObject:forKeyedSubscript:", objc_opt_class(NSString), CFSTR("deviceType"));
    objc_msgSend(v17, "setObject:forKeyedSubscript:", objc_opt_class(NSData), CFSTR("ephemeralPublicKey"));
    objc_msgSend(v17, "setObject:forKeyedSubscript:", objc_opt_class(NSData), CFSTR("groupIdentifier"));
    objc_msgSend(v17, "setObject:forKeyedSubscript:", objc_opt_class(NSData), CFSTR("kBleIntroKey"));
    objc_msgSend(v17, "setObject:forKeyedSubscript:", objc_opt_class(NSData), CFSTR("kBleOobKey"));
    objc_msgSend(v17, "setObject:forKeyedSubscript:", objc_opt_class(NSData), CFSTR("ktsSignature"));
    objc_msgSend(v17, "setObject:forKeyedSubscript:", objc_opt_class(NSData), CFSTR("slotIdentifier"));
    KmlLogFunc2(OS_LOG_TYPE_DEBUG, (uint64_t)"-[KmlEndpointManager saveTrackingReceipt:otherJSONData:]", 520, CFSTR("otherJsonData : %@"), v18, v19, v20, v21, (uint64_t)v6);
    if (objc_msgSend(a1[16], "agreedKmlVehicleVersion") != 768 || v6 == 0)
      v23 = 0;
    else
      v23 = CFSTR("keyData");
    v185 = 0;
    v24 = kmlUtilDecodeJson(v6, v17, v23, &v185);
    v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
    v178 = v185;
    if (objc_msgSend(a1[16], "agreedKmlVehicleVersion") != 768)
    {
LABEL_28:
      v53 = objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "objectForKey:", CFSTR("slotIdentifier")));
      v54 = a1[12];
      a1[12] = (id)v53;

      kmlUtilLogLargeData(CFSTR("slot"), a1[12]);
      v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "objectForKey:", CFSTR("confidentialMailboxData")));
      kmlUtilLogLargeData(CFSTR("confidentialMailBox"), v55);
      v180 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "objectForKey:", CFSTR("ephemeralPublicKey")));
      kmlUtilLogLargeData(CFSTR("ephemeralPublicKey"), v180);
      v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "objectForKey:", CFSTR("additionalData")));
      kmlUtilLogLargeData(CFSTR("productPlanIdentifier"), v56);
      if (!v5)
        v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "objectForKey:", CFSTR("ktsSignature")));
      if (v5)
        v61 = CFSTR("Yes");
      else
        v61 = CFSTR("No");
      if (v55)
        *((_BYTE *)a1 + 113) = 1;
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager saveTrackingReceipt:otherJSONData:]", 563, CFSTR("Received: Tracking receipt - %@; SlotId - %@; ImmoTokens - %@;"),
        v57,
        v58,
        v59,
        v60,
        (uint64_t)v61);
      v62 = v56;
      v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v56, "asHexString"));
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager saveTrackingReceipt:otherJSONData:]", 565, CFSTR("PPID: %@"), v64, v65, v66, v67, (uint64_t)v63);

      objc_storeStrong(a1 + 4, v5);
      v179 = v62;
      if (!a1[4])
      {
        KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager saveTrackingReceipt:otherJSONData:]", 571, CFSTR("Missing Tracking Receipt"), v68, v69, v70, v71, v170);
        v87 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml"));
        v188 = NSLocalizedDescriptionKey;
        v88 = v25;
        v89 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(208));
        v90 = (void *)objc_claimAutoreleasedReturnValue(v89);
        v189 = v90;
        v91 = v55;
        v92 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v189, &v188, 1));
        v93 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v87, 208, v92));

        v55 = v91;
        v25 = v88;

        sub_100257018((uint64_t)a1, v93);
        a1 = v93;
        v85 = v180;
LABEL_74:

        goto LABEL_16;
      }
      v72 = (id *)sub_10022D114((uint64_t)[KmlDeviceConfigurationData alloc], a1[8]);
      sub_10022E204((uint64_t)v72, v62);
      v73 = sub_10022D6EC(v72);
      v74 = objc_claimAutoreleasedReturnValue(v73);
      v75 = a1[8];
      a1[8] = (id)v74;

      if (v62)
      {
        v76 = sub_10021728C((uint64_t)v72);
        v77 = objc_claimAutoreleasedReturnValue(v76);
        v78 = a1[9];
        a1[9] = (id)v77;

        objc_storeStrong(a1 + 17, v62);
      }
      v79 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1[3], "readerInfo"));
      v80 = objc_msgSend(objc_alloc((Class)KmlRoutingInformation), "initWithReaderInformation:", v79);
      v175 = v80;
      v176 = (void *)v79;
      if (sub_100257338((uint64_t)a1))
      {
        v85 = v180;
        if (sub_10022DC84((uint64_t)v72) && sub_10022DC4C((uint64_t)v72))
        {
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager saveTrackingReceipt:otherJSONData:]", 594, CFSTR("Encrypted data in confidentia mailbox for friend key was obtained from server"), v81, v82, v83, v84, v170);
          objc_storeStrong(a1 + 7, v180);
          v86 = v55;
        }
        else
        {
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager saveTrackingReceipt:otherJSONData:]", 598, CFSTR("Encrypted data in confidentia mailbox for friend key was obtained from owner"), v81, v82, v83, v84, v170);
          v119 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1[3], "ownerEphemeralKey"));
          v120 = a1[7];
          a1[7] = (id)v119;

          v86 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[3], "sharingEncryptedData"));
        }
        v121 = a1[6];
        a1[6] = v86;

        if (objc_msgSend(a1[12], "length"))
        {
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager saveTrackingReceipt:otherJSONData:]", 603, CFSTR("Update slot Id for friend to server provided value"), v122, v123, v124, v125, v171);
          v126 = a1[1];
          v127 = a1[12];
          v184 = v178;
          SESEndPointConfigureKeySlot(v126, v127, &v184);
          v118 = v184;

          if (v118)
          {
            KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager saveTrackingReceipt:otherJSONData:]", 606, CFSTR("Failed to save friend slotId - %@"), v128, v129, v130, v131, (uint64_t)v118);
            goto LABEL_55;
          }
          v177 = (uint64_t)v72;
          v133 = 0;
        }
        else
        {
          v177 = (uint64_t)v72;
          v133 = v178;
        }
        v145 = (uint64_t)a1[16];
        v146 = sub_1002299D0(v177);
        v147 = (void *)objc_claimAutoreleasedReturnValue(v146);
        v148 = sub_100219298(v145, v147);

        v149 = sub_1002573BC((uint64_t)a1);
        v118 = (id)objc_claimAutoreleasedReturnValue(v149);

        if (v118)
        {
          KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager saveTrackingReceipt:otherJSONData:]", 618, CFSTR("Failed to create attestation package - %@"), v150, v151, v152, v153, (uint64_t)v118);
LABEL_72:
          sub_100257018((uint64_t)a1, v118);
          v72 = (id *)v177;
          goto LABEL_73;
        }
        v154 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1[3], "additionalAttestationsDict"));
        v140 = a1[15];
        a1[15] = (id)v154;
      }
      else
      {
        v173 = v55;
        v174 = v17;
        v172 = v25;
        v94 = objc_opt_new(SESConfigDCK);
        v95 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v80, "manufacturer"));
        v96 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v80, "brand"));
        v177 = (uint64_t)v72;
        v97 = sub_10021728C((uint64_t)v72);
        v98 = (void *)objc_claimAutoreleasedReturnValue(v97);
        v183 = v178;
        v99 = (void *)objc_claimAutoreleasedReturnValue(-[SESConfigDCK BOOLValueForSetting:manufacturer:brand:uuid:error:](v94, "BOOLValueForSetting:manufacturer:brand:uuid:error:", 5, v95, v96, v98, &v183));
        v100 = v183;

        v101 = objc_msgSend(v99, "BOOLValue");
        v102 = v100;

        if (v100 || (v101 & 1) == 0)
        {
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager saveTrackingReceipt:otherJSONData:]", 635, CFSTR("Pairing is blocked by configuration %d error %@"), v103, v104, v105, v106, v101 ^ 1);
          v55 = v173;
          v17 = v174;
          v85 = v180;
          if (v102)
          {
            v132 = sesErrorToKmlError(v102, 0x21u);
            v118 = (id)objc_claimAutoreleasedReturnValue(v132);
          }
          else
          {
            v166 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
            v186[0] = NSLocalizedDescriptionKey;
            v167 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(33));
            v168 = (void *)objc_claimAutoreleasedReturnValue(v167);
            v186[1] = NSLocalizedFailureReasonErrorKey;
            v187[0] = v168;
            v187[1] = CFSTR("Pairing is blocked by configuration");
            v169 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v187, v186, 2));
            v102 = v166;
            v17 = v174;
            v118 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v102, 33, v169));

            v85 = v180;
          }
          v25 = v172;
LABEL_71:

          goto LABEL_72;
        }
        v72 = (id *)v177;
        v25 = v172;
        v55 = v173;
        v85 = v180;
        v17 = v174;
        if (sub_10022DC84(v177) && sub_10022DC6C(v177))
        {
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager saveTrackingReceipt:otherJSONData:]", 647, CFSTR("Encrypted data in confidentia mailbox for owner key was ontained from server"), v107, v108, v109, v110, v170);
          objc_storeStrong(a1 + 7, v180);
          objc_storeStrong(a1 + 6, v173);
        }
        if (a1[12])
        {
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager saveTrackingReceipt:otherJSONData:]", 652, CFSTR("Update slot Id for owner to server provided value - %@"), v107, v108, v109, v110, (uint64_t)a1[12]);
          v111 = a1[1];
          v112 = a1[12];
          v182 = 0;
          SESEndPointConfigureKeySlot(v111, v112, &v182);
          v113 = v182;
          if (v113)
          {
            v118 = v113;
            KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager saveTrackingReceipt:otherJSONData:]", 655, CFSTR("Failed to save owner slotId - %@"), v114, v115, v116, v117, (uint64_t)v113);
LABEL_55:
            sub_100257018((uint64_t)a1, v118);
LABEL_73:
            a1 = (id *)v118;

            goto LABEL_74;
          }
        }
        v134 = sub_10022CB3C((uint64_t)KmlTlv, 69, a1[4]);
        v135 = (void *)objc_claimAutoreleasedReturnValue(v134);
        v136 = sub_10022D014((uint64_t)v135);
        v137 = objc_claimAutoreleasedReturnValue(v136);
        v138 = a1[5];
        a1[5] = (id)v137;

        v139 = kmlUtilHexStringFromData(a1[5]);
        v140 = (id)objc_claimAutoreleasedReturnValue(v139);
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager saveTrackingReceipt:otherJSONData:]", 663, CFSTR("Owner Attestation Package %@"), v141, v142, v143, v144, (uint64_t)v140);
      }

      v155 = sub_1002576B0((uint64_t)a1);
      v118 = (id)objc_claimAutoreleasedReturnValue(v155);
      if (v118)
        goto LABEL_72;
      v156 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[3], "publicKeyIdentifier"));
      v157 = SESEndpointNotifyTracked();
      v158 = (void *)objc_claimAutoreleasedReturnValue(v157);

      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager saveTrackingReceipt:otherJSONData:]", 670, CFSTR("SES notified about new tracked endpoint with error %@"), v159, v160, v161, v162, (uint64_t)v158);
      if (!sub_100257338((uint64_t)a1))
        goto LABEL_72;
      if (!sub_10022F138(v177))
        goto LABEL_72;
      v163 = (void *)objc_claimAutoreleasedReturnValue(+[NISession deviceCapabilities](NISession, "deviceCapabilities"));
      v164 = objc_msgSend(v163, "supportsPreciseDistanceMeasurement");

      if (!v164)
        goto LABEL_72;
      global_queue = dispatch_get_global_queue(21, 0);
      v102 = objc_claimAutoreleasedReturnValue(global_queue);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100258238;
      block[3] = &unk_100302AA0;
      block[4] = a1;
      dispatch_async(v102, block);
      goto LABEL_71;
    }
    v26 = objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "objectForKey:", CFSTR("kBleIntroKey")));
    v27 = a1[10];
    a1[10] = (id)v26;

    v28 = objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "objectForKey:", CFSTR("kBleOobKey")));
    v29 = a1[11];
    a1[11] = (id)v28;

    v30 = objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "objectForKey:", CFSTR("groupIdentifier")));
    v31 = a1[13];
    a1[13] = (id)v30;

    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "objectForKey:", CFSTR("deviceType")));
    *((_BYTE *)a1 + 112) = -1;
    if ((objc_msgSend(v32, "isEqualToString:", CFSTR("PHONE")) & 1) != 0)
    {
      v37 = 1;
    }
    else
    {
      if (!objc_msgSend(v32, "isEqualToString:", CFSTR("WATCH")))
      {
LABEL_21:
        if (a1[10])
          v43 = CFSTR("Yes");
        else
          v43 = CFSTR("No");
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager saveTrackingReceipt:otherJSONData:]", 541, CFSTR("Received: BleIntroKey - %@; BleOOBKey - %@;"),
          v33,
          v34,
          v35,
          v36,
          (uint64_t)v43);
        if (a1[13])
          v48 = CFSTR("Yes");
        else
          v48 = CFSTR("No");
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager saveTrackingReceipt:otherJSONData:]", 542, CFSTR("Received: groupIdentifier - %@;"),
          v44,
          v45,
          v46,
          v47,
          (uint64_t)v48);
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager saveTrackingReceipt:otherJSONData:]", 543, CFSTR("Received: deviceType - %@;"),
          v49,
          v50,
          v51,
          v52,
          (uint64_t)v32);

        goto LABEL_28;
      }
      v37 = 2;
    }
    *((_BYTE *)a1 + 112) = v37;
    goto LABEL_21;
  }
LABEL_17:

  return a1;
}

void sub_100257018(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _BOOL8 v6;
  _BOOL8 v7;
  _BOOL8 v8;
  id v9;
  void *v10;
  unsigned int v11;
  uint64_t v12;
  void *v13;
  _UNKNOWN **v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  NSNumber *v20;
  void *v21;
  void *v22;
  _QWORD v23[8];
  _QWORD v24[8];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    if (v3)
      v5 = objc_msgSend(v3, "code");
    else
      v5 = 0;
    if (*(_QWORD *)(a1 + 88))
      v6 = *(_QWORD *)(a1 + 80) != 0;
    else
      v6 = 0;
    v7 = *(_QWORD *)(a1 + 96) != 0;
    v8 = *(_QWORD *)(a1 + 72) != 0;
    v9 = sub_100258FA4(a1);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 24), "configuration"));
    v11 = objc_msgSend(v10, "opt2");

    v23[0] = CFSTR("errorCode");
    v12 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v5));
    v13 = (void *)v12;
    v14 = &off_100323610;
    if ((_DWORD)v9)
      v14 = &off_1003235F8;
    v24[0] = v12;
    v24[1] = v14;
    v23[1] = CFSTR("accountRole");
    v23[2] = CFSTR("didReceiveProductPlanIdentifier");
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v8));
    v24[2] = v15;
    v23[3] = CFSTR("didReceiveSlotIdentifier");
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v7));
    v24[3] = v16;
    v23[4] = CFSTR("didReceiveImmoToken");
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 113)));
    v24[4] = v17;
    v23[5] = CFSTR("didReceiveOnlineBLEKeys");
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v6));
    v24[5] = v18;
    v23[6] = CFSTR("isOwner");
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v9));
    v24[6] = v19;
    v23[7] = CFSTR("keyClassOriginBitmap");
    v20 = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", kmlUtilKeyClassOriginBitmap(v11));
    v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
    v24[7] = v21;
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v24, v23, 8));

    sub_100211D18((uint64_t)KmlAnalyticsLogger, v22);
  }

}

uint64_t sub_100257284(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  __CFString *v12;
  uint64_t v13;
  uint64_t v14;

  if (result)
  {
    v8 = result;
    v9 = *(void **)(result + 24);
    if (v9)
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "trackingRequest"));

      if (v10)
      {
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v8 + 24), "trackingReceipt"));

        if (!v11)
          return 1;
        v12 = CFSTR("We already have saved a tracking receipt. Not doing it again.");
        v13 = 1482;
      }
      else
      {
        v12 = CFSTR("We have not sent tracking request. Can't save a tracking receipt.");
        v13 = 1477;
      }
    }
    else
    {
      v12 = CFSTR("We don't have an endpoint to save tracking receipt");
      v13 = 1472;
    }
    KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager isEndpointReadyForTrackingReceipt]", v13, v12, a5, a6, a7, a8, v14);
    return 0;
  }
  return result;
}

id sub_100257338(uint64_t a1)
{
  void *v1;
  void *v2;
  const __CFString *v3;
  void *v4;
  void *v5;
  id v6;

  if (!a1)
    return 0;
  v1 = *(void **)(a1 + 24);
  if (!v1)
    return 0;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "subjectIdentifier"));
  v3 = sub_100254798((uint64_t)KmlEndpointManager, v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v5 = v4;
  if (v4)
    v6 = objc_msgSend(v4, "isEqualToString:", CFSTR("FRND"));
  else
    v6 = 0;

  return v6;
}

id sub_1002573BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  _WORD *v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _WORD *v18;
  void *v19;
  id v20;
  void *v21;
  _WORD *v22;
  void *v23;
  id v24;
  void *v25;
  _WORD *v26;
  void *v27;
  id v28;
  void *v29;
  _WORD *v30;
  void *v31;
  id v32;
  uint64_t v33;
  void *v34;
  id v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  NSString *v43;
  void *v44;
  void *v45;
  uint64_t v47;
  NSErrorUserInfoKey v48;
  void *v49;

  if (!a1)
    return 0;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 24), "sharingAttestationData"));
  if (v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithData:](NSMutableData, "dataWithData:", v6));
    v8 = *(void **)(a1 + 96);
    if (v8)
    {
      v9 = sub_10022CB3C((uint64_t)KmlTlv, 78, v8);
      v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
      v11 = sub_10022D014((uint64_t)v10);
      v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      objc_msgSend(v7, "appendData:", v12);

    }
    if (objc_msgSend(*(id *)(a1 + 128), "agreedKmlSharingVersion") == 768)
    {
      v17 = *(void **)(a1 + 104);
      if (v17)
      {
        v18 = sub_10022CB3C((uint64_t)KmlTlv, 79, v17);
        v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
        v20 = sub_10022D014((uint64_t)v19);
        v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
        objc_msgSend(v7, "appendData:", v21);

      }
      if (*(unsigned __int8 *)(a1 + 112) != 255)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager generateFriendAttestationPackage]", 1520, CFSTR("Using device type from tracking receipt: %u"), v13, v14, v15, v16, *(unsigned __int8 *)(a1 + 112));
        v22 = sub_10022CB90((uint64_t)KmlTlv, 72, *(_BYTE *)(a1 + 112));
        v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
        v24 = sub_10022D014((uint64_t)v23);
        v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
        objc_msgSend(v7, "appendData:", v25);

      }
    }
    v26 = sub_10022CB3C((uint64_t)KmlTlv, 69, *(void **)(a1 + 32));
    v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
    v28 = sub_10022D014((uint64_t)v27);
    v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
    objc_msgSend(v7, "appendData:", v29);

    v30 = sub_10022CB3C((uint64_t)KmlTlv, 32565, v7);
    v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
    v32 = sub_10022D014((uint64_t)v31);
    v33 = objc_claimAutoreleasedReturnValue(v32);
    v34 = *(void **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v33;

    v35 = kmlUtilHexStringFromData(*(void **)(a1 + 40));
    v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager generateFriendAttestationPackage]", 1528, CFSTR("Friend Attestation Package %@"), v37, v38, v39, v40, (uint64_t)v36);

    v41 = 0;
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager generateFriendAttestationPackage]", 1493, CFSTR("Missing saved attestation data"), v2, v3, v4, v5, v47);
    v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml"));
    v48 = NSLocalizedDescriptionKey;
    v43 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(214));
    v44 = (void *)objc_claimAutoreleasedReturnValue(v43);
    v49 = v44;
    v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v49, &v48, 1));
    v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v42, 214, v45));

  }
  return v41;
}

id sub_1002576B0(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  char *v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  unsigned __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t PrivateData;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  NSString *v37;
  void *v38;
  id v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  size_t v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 v69;
  _UNKNOWN **v70;
  void *v71;
  void *v72;
  void *v73;
  id v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  unsigned __int16 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  void *v87;
  id v88;
  __int16 v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  unsigned __int16 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  NSString *v102;
  void *v103;
  void *v104;
  void *v105;
  id v106;
  uint64_t v107;
  uint64_t v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  NSString *v130;
  void *v131;
  void *v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  id v138;
  void *v139;
  id v140;
  __int16 v141;
  unsigned int v142;
  int v143;
  unsigned __int8 v144;
  unsigned int v145;
  void *v146;
  _QWORD v147[5];
  id v148;
  char v149;
  char v150;
  id v151[2];
  _QWORD v152[2];
  _QWORD v153[2];
  _QWORD v154[2];
  _QWORD v155[2];
  NSErrorUserInfoKey v156;
  id v157;

  if (!a1)
    return 0;
  if ((sub_100257338(a1) & 1) == 0 && (sub_100258FA4(a1) & 1) == 0)
  {
    v9 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml"));
    v156 = NSLocalizedDescriptionKey;
    v37 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(210));
    v10 = (id)objc_claimAutoreleasedReturnValue(v37);
    v157 = v10;
    v8 = (char *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v157, &v156, 1));
    v11 = v9;
    v12 = 210;
    v13 = v8;
    goto LABEL_11;
  }
  if (*(_QWORD *)(a1 + 48))
  {
    if (*(_QWORD *)(a1 + 56))
    {
      v2 = *(_QWORD *)(a1 + 8);
      v151[1] = 0;
      SESEndPointSetConfidentialDataWithOffset(v2);
      v3 = (char *)0;
      if (v3)
      {
        v8 = v3;
        KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager updateEndpointWithTrackingData]", 1548, CFSTR("Failed to set confidential mailbox - %@"), v4, v5, v6, v7, (uint64_t)v3);
        v9 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml"));
        v10 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "userInfo"));
        v11 = v9;
        v12 = 207;
        v13 = (char *)v10;
LABEL_11:
        v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v11, v12, v13));
        goto LABEL_48;
      }
    }
  }
  v14 = objc_alloc((Class)NSData);
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 24), "mailboxMapping"));
  v10 = objc_msgSend(v14, "initWithData:", v15);

  v16 = kmlUtilHexStringFromData(v10);
  v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager updateEndpointWithTrackingData]", 1555, CFSTR("MailboxMappingData:%@"), v18, v19, v20, v21, (uint64_t)v17);

  v8 = sub_10022A0B4((char *)[KmlMailboxMappingData alloc], v10, (__int16)objc_msgSend(*(id *)(a1 + 128), "agreedKmlVehicleVersion"));
  v22 = sub_10022AAF0((uint64_t)v8);
  v23 = v22 - sub_10022AAE4((uint64_t)v8);
  v24 = *(_QWORD *)(a1 + 8);
  v25 = sub_10022AAE4((uint64_t)v8);
  v151[0] = 0;
  PrivateData = SESEndPointGetPrivateData(v24, v25, v23, v151);
  v27 = (void *)objc_claimAutoreleasedReturnValue(PrivateData);
  v28 = v151[0];
  if (v28)
  {
    v33 = v28;
    KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager updateEndpointWithTrackingData]", 1567, CFSTR("Error while getting signaling bitmap %@"), v29, v30, v31, v32, (uint64_t)v28);
    v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml"));
    v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "userInfo"));
    v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v34, 6, v35));

    v9 = v36;
    goto LABEL_47;
  }
  v39 = objc_msgSend(objc_alloc((Class)NSMutableData), "initWithData:", v27);
  kmlUtilLogLargeData(CFSTR("Private Mailbox Data"), v39);
  v40 = *(unsigned __int8 *)objc_msgSend(objc_retainAutorelease(v27), "bytes");
  v41 = sub_10022AAA8((uint64_t)v8);
  v42 = v40 | v41;
  v150 = v40 | v41;
  if (*(_QWORD *)(a1 + 48) && *(_QWORD *)(a1 + 56) && sub_10022AAD8((uint64_t)v8) != 128)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager updateEndpointWithTrackingData]", 1581, CFSTR("Updating immo token bitmap"), v43, v44, v45, v46, v134);
    v149 = 1;
    objc_msgSend(v39, "replaceBytesInRange:withBytes:", 1, 1, &v149);
  }
  v47 = sub_10022AB44((uint64_t)v8);
  v48 = v47 - sub_10022AAE4((uint64_t)v8);
  v49 = sub_10022AB14((uint64_t)v8);
  if (sub_10022AAD8((uint64_t)v8) != 128)
  {
    v69 = 0;
    goto LABEL_40;
  }
  v54 = sub_10022AB2C((uint64_t)v8);
  LODWORD(v55) = v54 - sub_10022AAE4((uint64_t)v8);
  v145 = sub_10022AB08((uint64_t)v8);
  v146 = v39;
  if (!sub_100257338(a1)
    || objc_msgSend(*(id *)(a1 + 128), "agreedKmlSharingVersion") != 768)
  {
    v69 = 0;
LABEL_32:
    v86 = sub_10025BFEC(a1, *(void **)(a1 + 40));
    v87 = (void *)objc_claimAutoreleasedReturnValue(v86);
    if (!objc_msgSend(v87, "length"))
    {
      v144 = v69;
      v88 = v10;
      v89 = (__int16)v55;
      if (objc_msgSend(*(id *)(a1 + 96), "length"))
        v90 = *(void **)(a1 + 96);
      else
        v90 = 0;
      v55 = v90;

      v87 = v55;
      LOWORD(v55) = v89;
      v10 = v88;
      v69 = v144;
    }
    if (objc_msgSend(v87, "length"))
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager updateEndpointWithTrackingData]", 1660, CFSTR("Set ourSlotId (%@)"), v91, v92, v93, v94, (uint64_t)v87);
      v39 = v146;
      objc_msgSend(v146, "replaceBytesInRange:withBytes:", (unsigned __int16)((_WORD)v55 + v69 * (_WORD)v145), v145, objc_msgSend(objc_retainAutorelease(v87), "bytes"));
      v95 = sub_10022AA00((uint64_t)v8);
      v150 |= v95;
    }

LABEL_40:
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager updateEndpointWithTrackingData]", 1668, CFSTR("Set our own attestation package"), v50, v51, v52, v53, v134);
    v96 = (unsigned __int16)objc_msgSend(*(id *)(a1 + 40), "length");
    if (v96 <= v49)
    {
      objc_msgSend(v39, "replaceBytesInRange:withBytes:", (unsigned __int16)(v48 + v49 * v69), v96, objc_msgSend(*(id *)(a1 + 40), "bytes"));
      objc_msgSend(v39, "replaceBytesInRange:withBytes:", 0, 1, &v150);
      kmlUtilLogLargeData(CFSTR("Private data to set"), v39);
      v107 = *(_QWORD *)(a1 + 8);
      v108 = sub_10022AAE4((uint64_t)v8);
      v148 = 0;
      SESEndPointSetPrivateData(v107, v39, v108, &v148);
      v109 = v148;
      if (v109)
      {
        v114 = v109;
        KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager updateEndpointWithTrackingData]", 1693, CFSTR("Failed to set attestation package in private mailbox %@"), v110, v111, v112, v113, (uint64_t)v109);
        v115 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml"));
        v116 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v114, "userInfo"));
        v117 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v115, 208, v116));

        v106 = v117;
        goto LABEL_45;
      }
      v119 = *(_QWORD *)(a1 + 8);
      v147[0] = _NSConcreteStackBlock;
      v147[1] = 3221225472;
      v147[2] = sub_10025C238;
      v147[3] = &unk_10030F0E0;
      v147[4] = a1;
      v120 = SESEndPointUpdateWithBlock(v119, v147);
      v121 = objc_claimAutoreleasedReturnValue(v120);
      if (v121)
      {
        v126 = (void *)v121;
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager updateEndpointWithTrackingData]", 1737, CFSTR("Could not update endpoint"), v122, v123, v124, v125, v136);
        v127 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml"));
        v128 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v126, "userInfo"));
        v105 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v127, 208, v128));

      }
      else
      {
        v105 = 0;
      }
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager updateEndpointWithTrackingData]", 1673, CFSTR("Attestation length (%d) > max allowed length (%d)"), v97, v98, v99, v100, v96);
      v101 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml"));
      v152[0] = NSLocalizedDescriptionKey;
      v102 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(212));
      v103 = (void *)objc_claimAutoreleasedReturnValue(v102);
      v152[1] = NSLocalizedFailureReasonErrorKey;
      v153[0] = v103;
      v153[1] = CFSTR("Max attestation length not enough");
      v104 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v153, v152, 2));
      v105 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v101, 212, v104));

    }
    v106 = v105;
LABEL_45:
    v9 = v106;
    goto LABEL_46;
  }
  v143 = v42;
  v141 = v48;
  v142 = v49;
  v139 = v27;
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager updateEndpointWithTrackingData]", 1600, CFSTR("Initialize slotIDs to all FF bytes"), v56, v57, v58, v59, v134);
  v60 = sub_10022AB38((uint64_t)v8);
  v61 = v39;
  v62 = v60 - sub_10022AB2C((uint64_t)v8);
  v138 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithLength:](NSMutableData, "dataWithLength:", v62)));
  v63 = objc_msgSend(v138, "mutableBytes");
  memset(v63, 255, v62);
  objc_msgSend(v61, "replaceBytesInRange:withBytes:", (unsigned __int16)v55, v62, v63);
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager updateEndpointWithTrackingData]", 1609, CFSTR("Look for additional attestations"), v64, v65, v66, v67, v135);
  v137 = (void *)sub_10022D114((uint64_t)[KmlDeviceConfigurationData alloc], *(void **)(a1 + 64));
  v68 = (sub_10022AAD8((uint64_t)v137) + 46);
  if (v68 < 0x30)
  {
    v69 = 0;
LABEL_31:

    v27 = v139;
    v39 = v146;
    v49 = v142;
    LOWORD(v48) = v141;
    goto LABEL_32;
  }
  v69 = 0;
  v140 = v10;
  v70 = &_ss018_bridgeAnyObjectToB0yypyXlSgF_ptr;
  while (1)
  {
    v71 = *(void **)(a1 + 120);
    v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70[324], "numberWithUnsignedChar:", v68));
    v73 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v71, "objectForKeyedSubscript:", v72));

    v74 = sub_10025BFEC(a1, v73);
    v75 = (void *)objc_claimAutoreleasedReturnValue(v74);
    if (!objc_msgSend(v73, "length") || !objc_msgSend(v75, "length"))
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager updateEndpointWithTrackingData]", 1644, CFSTR("No additional attestations found with tag : %02x"), v76, v77, v78, v79, v68);
      goto LABEL_26;
    }
    v80 = objc_retainAutorelease(v75);
    objc_msgSend(v146, "replaceBytesInRange:withBytes:", (unsigned __int16)((_WORD)v55 + v69 * (_WORD)v145), v145, objc_msgSend(v80, "bytes"));
    v81 = (unsigned __int16)objc_msgSend(v73, "length");
    if (v81 > v142)
      break;
    objc_msgSend(v146, "replaceBytesInRange:withBytes:", (unsigned __int16)(v141 + v142 * v69), v81, objc_msgSend(objc_retainAutorelease(v73), "bytes"));
    v143 |= sub_10022AA00((uint64_t)v8);
    v150 = v143;
    ++v69;
    v10 = v140;
    v70 = &_ss018_bridgeAnyObjectToB0yypyXlSgF_ptr;
LABEL_26:

    v68 = (v68 - 1);
    if (v68 <= 0x2Fu)
      goto LABEL_31;
  }
  KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager updateEndpointWithTrackingData]", 1636, CFSTR("Attestation length (%d) > max allowed length (%d)"), v82, v83, v84, v85, v81);
  v129 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml"));
  v154[0] = NSLocalizedDescriptionKey;
  v130 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(212));
  v131 = (void *)objc_claimAutoreleasedReturnValue(v130);
  v154[1] = NSLocalizedFailureReasonErrorKey;
  v155[0] = v131;
  v155[1] = CFSTR("Max attestation length not enough");
  v132 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v155, v154, 2));
  v133 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v129, 212, v132));

  v9 = v133;
  v27 = v139;
  v39 = v146;
  v10 = v140;
LABEL_46:

LABEL_47:
  v38 = v9;
LABEL_48:

  return v38;
}

void sub_100258238(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager saveTrackingReceipt:otherJSONData:]_block_invoke", 681, CFSTR("Received tracking receipt for UWB capable friend key. Kick first approach."), a5, a6, a7, a8, v9);
  sub_10022BE30(0x100343000, *(void **)(*(_QWORD *)(a1 + 32) + 8));
}

id sub_100258280(uint64_t a1, void *a2, void *a3, void *a4, _QWORD *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  _UNKNOWN **v20;
  void *v21;
  _WORD *v22;
  id v23;
  void *v24;
  KmlSharingRecordsUpdater *v25;
  void *v26;
  id v27;
  id v28;
  uint64_t v29;
  void *k;
  void *v31;
  dispatch_queue_t *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  _WORD *v41;
  id v42;
  void *v43;
  _WORD *v44;
  void *v45;
  id v46;
  id v47;
  void *v48;
  id v49;
  id v50;
  void *v51;
  _WORD *v52;
  void *v53;
  id v54;
  void *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _WORD *v61;
  void *v62;
  id v63;
  void *v64;
  void *v65;
  void *v66;
  id v67;
  id v68;
  uint64_t v69;
  void *i;
  id v71;
  void *v72;
  _WORD *v73;
  void *v74;
  id v75;
  id v76;
  void *v77;
  id v78;
  _WORD *v79;
  void *v80;
  id v81;
  void *v82;
  _WORD *v83;
  void *v84;
  id v85;
  void *v86;
  id v87;
  id v88;
  uint64_t v89;
  void *j;
  id v91;
  void *v92;
  _WORD *v93;
  void *v94;
  id v95;
  id v96;
  void *v97;
  id v98;
  _WORD *v99;
  void *v100;
  id v101;
  void *v102;
  _WORD *v103;
  void *v104;
  id v105;
  void *v106;
  _WORD *v107;
  id v108;
  _QWORD *v109;
  unsigned __int8 *v110;
  uint64_t v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  _WORD *v116;
  uint64_t v117;
  id v118;
  void *v119;
  _WORD *v120;
  uint64_t v121;
  id v122;
  void *v123;
  id v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  id v131;
  void *v132;
  uint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  id v139;
  _BOOL8 v140;
  _BOOL4 v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void *v147;
  const __CFString *v148;
  void *v149;
  const __CFString *v150;
  void *v151;
  const __CFString *v152;
  void *v153;
  const __CFString *v154;
  unsigned __int16 v155;
  void *v156;
  id v157;
  void *v158;
  void *v159;
  void *v160;
  void *v161;
  void *v162;
  void *v163;
  void *v164;
  void *v165;
  void *v166;
  NSString *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  void *v172;
  __CFString *v173;
  __CFString *v174;
  __CFString *v175;
  void *v176;
  void *v177;
  void *v178;
  _QWORD *v179;
  void *v180;
  void *v181;
  void *v182;
  void *v183;
  void *v184;
  void *v185;
  id obj;
  id obja;
  void *v188;
  void *v189;
  uint64_t v190;
  id v191;
  id v192;
  id v193;
  id v194;
  uint64_t v195;
  id v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  _QWORD v209[10];
  _QWORD v210[10];
  _BYTE v211[128];
  _BYTE v212[128];
  NSErrorUserInfoKey v213;
  void *v214;
  _BYTE v215[128];

  v9 = a2;
  v10 = a3;
  v11 = a4;
  if (!a1)
  {
    v19 = 0;
    goto LABEL_60;
  }
  v12 = sub_100256044(a1);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (v13)
  {
    v18 = (id)v13;
    KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager generateRemoteTerminationRequestForKeys:nodes:trees:withError:]", 699, CFSTR("Error getting endpoint - %@"), v14, v15, v16, v17, v13);
    if (a5)
    {
      v18 = objc_retainAutorelease(v18);
      v19 = 0;
      *a5 = v18;
    }
    else
    {
      v19 = 0;
    }
    goto LABEL_59;
  }
  v179 = a5;
  v182 = v11;
  v188 = (void *)sub_10022D114((uint64_t)[KmlDeviceConfigurationData alloc], *(void **)(a1 + 64));
  v20 = &_ss018_bridgeAnyObjectToB0yypyXlSgF_ptr;
  v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData data](NSMutableData, "data"));
  v22 = sub_10022CB3C((uint64_t)KmlTlv, 24353, *(void **)(a1 + 16));
  v181 = (void *)objc_claimAutoreleasedReturnValue(v22);
  v23 = sub_10022D014((uint64_t)v181);
  v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
  v184 = v21;
  objc_msgSend(v21, "appendData:", v24);

  v185 = v9;
  v195 = a1;
  if (!objc_msgSend(v9, "count"))
  {
    v66 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData data](NSMutableData, "data"));
    v201 = 0u;
    v202 = 0u;
    v203 = 0u;
    v204 = 0u;
    v192 = v10;
    v67 = objc_msgSend(v192, "countByEnumeratingWithState:objects:count:", &v201, v212, 16);
    if (v67)
    {
      v68 = v67;
      v69 = *(_QWORD *)v202;
      do
      {
        for (i = 0; i != v68; i = (char *)i + 1)
        {
          if (*(_QWORD *)v202 != v69)
            objc_enumerationMutation(v192);
          v71 = kmlUtilDataForHexString(*(void **)(*((_QWORD *)&v201 + 1) + 8 * (_QWORD)i));
          v72 = (void *)objc_claimAutoreleasedReturnValue(v71);
          v73 = sub_10022CB3C((uint64_t)KmlTlv, 79, v72);
          v74 = (void *)objc_claimAutoreleasedReturnValue(v73);

          v75 = objc_alloc((Class)NSMutableData);
          v76 = sub_10022D014((uint64_t)v74);
          v77 = (void *)objc_claimAutoreleasedReturnValue(v76);
          v78 = objc_msgSend(v75, "initWithData:", v77);

          v79 = sub_10022CB90((uint64_t)KmlTlv, 71, 0);
          v80 = (void *)objc_claimAutoreleasedReturnValue(v79);
          v81 = sub_10022D014((uint64_t)v80);
          v82 = (void *)objc_claimAutoreleasedReturnValue(v81);
          objc_msgSend(v78, "appendData:", v82);

          v83 = sub_10022CB3C((uint64_t)KmlTlv, 97, v78);
          v84 = (void *)objc_claimAutoreleasedReturnValue(v83);
          v85 = sub_10022D014((uint64_t)v84);
          v86 = (void *)objc_claimAutoreleasedReturnValue(v85);
          objc_msgSend(v66, "appendData:", v86);

          v20 = &_ss018_bridgeAnyObjectToB0yypyXlSgF_ptr;
        }
        v68 = objc_msgSend(v192, "countByEnumeratingWithState:objects:count:", &v201, v212, 16);
      }
      while (v68);
    }

    v199 = 0u;
    v200 = 0u;
    v197 = 0u;
    v198 = 0u;
    v193 = v182;
    v87 = objc_msgSend(v193, "countByEnumeratingWithState:objects:count:", &v197, v211, 16);
    if (v87)
    {
      v88 = v87;
      v89 = *(_QWORD *)v198;
      do
      {
        for (j = 0; j != v88; j = (char *)j + 1)
        {
          if (*(_QWORD *)v198 != v89)
            objc_enumerationMutation(v193);
          v91 = kmlUtilDataForHexString(*(void **)(*((_QWORD *)&v197 + 1) + 8 * (_QWORD)j));
          v92 = (void *)objc_claimAutoreleasedReturnValue(v91);
          v93 = sub_10022CB3C((uint64_t)KmlTlv, 79, v92);
          v94 = (void *)objc_claimAutoreleasedReturnValue(v93);

          v95 = objc_alloc((Class)v20[318]);
          v96 = sub_10022D014((uint64_t)v94);
          v97 = (void *)objc_claimAutoreleasedReturnValue(v96);
          v98 = objc_msgSend(v95, "initWithData:", v97);

          v99 = sub_10022CB90((uint64_t)KmlTlv, 71, 1);
          v100 = (void *)objc_claimAutoreleasedReturnValue(v99);
          v101 = sub_10022D014((uint64_t)v100);
          v102 = (void *)objc_claimAutoreleasedReturnValue(v101);
          objc_msgSend(v98, "appendData:", v102);

          v103 = sub_10022CB3C((uint64_t)KmlTlv, 97, v98);
          v104 = (void *)objc_claimAutoreleasedReturnValue(v103);
          v105 = sub_10022D014((uint64_t)v104);
          v106 = (void *)objc_claimAutoreleasedReturnValue(v105);
          objc_msgSend(v66, "appendData:", v106);

          v20 = &_ss018_bridgeAnyObjectToB0yypyXlSgF_ptr;
        }
        v88 = objc_msgSend(v193, "countByEnumeratingWithState:objects:count:", &v197, v211, 16);
      }
      while (v88);
    }

    v26 = v66;
    v107 = sub_10022CB3C((uint64_t)KmlTlv, 65315, v66);
    v56 = (void *)objc_claimAutoreleasedReturnValue(v107);
    v108 = sub_10022D014((uint64_t)v56);
    v62 = (void *)objc_claimAutoreleasedReturnValue(v108);
    v65 = v184;
    objc_msgSend(v184, "appendData:", v62);
LABEL_40:
    v109 = v179;

    v110 = kmlUtilSHA256(v65);
    v190 = objc_claimAutoreleasedReturnValue(v110);
    v111 = SESEndPointSignDataWithAuth(*(_QWORD *)(v195 + 8));
    v112 = (void *)objc_claimAutoreleasedReturnValue(v111);
    v113 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithData:](NSMutableData, "dataWithData:", v65));
    v114 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v112, "signedData"));
    objc_msgSend(v113, "appendData:", v114);

    v115 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v112, "signature"));
    v116 = sub_10022CB3C((uint64_t)KmlTlv, 158, v115);
    v117 = objc_claimAutoreleasedReturnValue(v116);

    v178 = (void *)v117;
    v118 = sub_10022D014(v117);
    v119 = (void *)objc_claimAutoreleasedReturnValue(v118);
    objc_msgSend(v113, "appendData:", v119);

    v180 = v113;
    v120 = sub_10022CB3C((uint64_t)KmlTlv, 32576, v113);
    v121 = objc_claimAutoreleasedReturnValue(v120);
    v122 = sub_10022D014(v121);
    v123 = (void *)objc_claimAutoreleasedReturnValue(v122);
    v124 = kmlUtilHexStringFromData(v123);
    v125 = (void *)objc_claimAutoreleasedReturnValue(v124);
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager generateRemoteTerminationRequestForKeys:nodes:trees:withError:]", 798, CFSTR("Remote Termination Request structure: %@"), v126, v127, v128, v129, (uint64_t)v125);

    v130 = *(_QWORD *)(v195 + 8);
    v177 = (void *)v121;
    v131 = sub_10022D014(v121);
    v132 = (void *)objc_claimAutoreleasedReturnValue(v131);
    v196 = 0;
    v133 = SESEndPointPrivacyEncryption(v130, v132, &v196);
    v134 = (void *)objc_claimAutoreleasedReturnValue(v133);
    v18 = v196;

    if (v18)
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager generateRemoteTerminationRequestForKeys:nodes:trees:withError:]", 803, CFSTR("Failed to encrypt friend tracking request with - %@"), v135, v136, v137, v138, (uint64_t)v18);
      if (v109)
        *v109 = objc_retainAutorelease(v18);

      obja = 0;
    }
    else
    {
      obja = v134;
    }
    v183 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v195 + 24), "readerInfo"));
    v139 = objc_msgSend(objc_alloc((Class)KmlRoutingInformation), "initWithReaderInformation:", v183);
    v140 = sub_10022F124((_BOOL8)v188);
    v141 = sub_10022F138((_BOOL8)v188);
    v146 = 2;
    if (!v141)
      v146 = 0;
    v171 = v146 | v140;
    v176 = v139;
    if (v139)
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager generateRemoteTerminationRequestForKeys:nodes:trees:withError:]", 822, CFSTR(" routingInfo = %@"), v142, v143, v144, v145, (uint64_t)v139);
      v147 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v139, "manufacturer"));
      v148 = (const __CFString *)objc_msgSend(v147, "copy");

      v149 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v139, "brand"));
      v150 = (const __CFString *)objc_msgSend(v149, "copy");

      v151 = v139;
      v152 = v150;
      v153 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v151, "regionString"));
      v154 = (const __CFString *)objc_msgSend(v153, "copy");

    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager generateRemoteTerminationRequestForKeys:nodes:trees:withError:]", 827, CFSTR("No routing info available"), v142, v143, v144, v145, v170);
      v148 = CFSTR("Unknown");
      v152 = CFSTR("Unknown");
      v154 = CFSTR("Unknown");
    }
    if (sub_100258FA4(v195))
      v155 = -30561;
    else
      v155 = 0;
    v209[0] = CFSTR("numFriendKeys");
    v172 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v185, "count")));
    v210[0] = v172;
    v210[1] = v154;
    v209[1] = CFSTR("dataCenterCode");
    v209[2] = CFSTR("manufacturer");
    v210[2] = v148;
    v210[3] = v152;
    v174 = (__CFString *)v152;
    v209[3] = CFSTR("brand");
    v209[4] = CFSTR("transportSupported");
    v156 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v171));
    v210[4] = v156;
    v209[5] = CFSTR("status");
    v194 = v112;
    v175 = (__CFString *)v148;
    v173 = (__CFString *)v154;
    if (v18)
      v157 = objc_msgSend(v18, "code");
    else
      v157 = 0;
    v158 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v157));
    v210[5] = v158;
    v209[6] = CFSTR("numGroupIDs");
    v159 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v10, "count")));
    v210[6] = v159;
    v209[7] = CFSTR("numSubTrees");
    v160 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v182, "count")));
    v210[7] = v160;
    v209[8] = CFSTR("accountRole");
    v161 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v155));
    v210[8] = v161;
    v209[9] = CFSTR("keyVersion");
    v162 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", objc_msgSend(*(id *)(v195 + 128), "agreedKmlVehicleVersion")));
    v210[9] = v162;
    v163 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v210, v209, 10));

    v11 = v182;
    sub_100211E68((uint64_t)KmlAnalyticsLogger, v163);

    v164 = v184;
    v9 = v185;
    v26 = (void *)v190;
    v56 = v194;
    v165 = v180;
    v166 = v177;
LABEL_57:

    goto LABEL_58;
  }
  v25 = sub_10024E878((uint64_t)KmlSharingRecordsUpdater, *(void **)(a1 + 24));
  v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
  v191 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableData data](NSMutableData, "data"));
  v205 = 0u;
  v206 = 0u;
  v207 = 0u;
  v208 = 0u;
  obj = v9;
  v27 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v205, v215, 16);
  if (!v27)
    goto LABEL_22;
  v28 = v27;
  v29 = *(_QWORD *)v206;
  v189 = v26;
  do
  {
    for (k = 0; k != v28; k = (char *)k + 1)
    {
      if (*(_QWORD *)v206 != v29)
        objc_enumerationMutation(obj);
      v31 = *(void **)(*((_QWORD *)&v205 + 1) + 8 * (_QWORD)k);
      v32 = sub_10024ED44((dispatch_queue_t *)v26, v31);
      v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
      if (v33 && (sub_10022DC4C((uint64_t)v188) & 1) == 0)
      {
        v39 = sub_10022ADE0((uint64_t)v33);
        v40 = (void *)objc_claimAutoreleasedReturnValue(v39);
        v41 = sub_10022CB3C((uint64_t)KmlTlv, 87, v40);
        v38 = (void *)objc_claimAutoreleasedReturnValue(v41);

      }
      else
      {
        if (objc_msgSend(v31, "isEqualToString:", *(_QWORD *)(a1 + 8)))
        {
          KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager generateRemoteTerminationRequestForKeys:nodes:trees:withError:]", 726, CFSTR("We don't allow creating RTR for our own key."), v34, v35, v36, v37, v169);
          goto LABEL_20;
        }
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager generateRemoteTerminationRequestForKeys:nodes:trees:withError:]", 729, CFSTR("This is either owner swap or friend with online tokens."), v34, v35, v36, v37, v169);
        v38 = 0;
      }
      v42 = kmlUtilDataForHexString(v31);
      v43 = (void *)objc_claimAutoreleasedReturnValue(v42);
      v44 = sub_10022CB3C((uint64_t)KmlTlv, 80, v43);
      v45 = (void *)objc_claimAutoreleasedReturnValue(v44);

      v46 = objc_alloc((Class)NSMutableData);
      v47 = sub_10022D014((uint64_t)v45);
      v48 = (void *)objc_claimAutoreleasedReturnValue(v47);
      v49 = objc_msgSend(v46, "initWithData:", v48);

      if (v38)
      {
        v50 = sub_10022D014((uint64_t)v38);
        v51 = (void *)objc_claimAutoreleasedReturnValue(v50);
        objc_msgSend(v49, "appendData:", v51);

      }
      v52 = sub_10022CB3C((uint64_t)KmlTlv, 97, v49);
      v53 = (void *)objc_claimAutoreleasedReturnValue(v52);
      v54 = sub_10022D014((uint64_t)v53);
      v55 = (void *)objc_claimAutoreleasedReturnValue(v54);
      objc_msgSend(v191, "appendData:", v55);

      v26 = v189;
      a1 = v195;
LABEL_20:

    }
    v28 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v205, v215, 16);
  }
  while (v28);
LABEL_22:

  v56 = v191;
  if (objc_msgSend(v191, "length"))
  {
    v61 = sub_10022CB3C((uint64_t)KmlTlv, 32547, v191);
    v62 = (void *)objc_claimAutoreleasedReturnValue(v61);
    v63 = sub_10022D014((uint64_t)v62);
    v64 = (void *)objc_claimAutoreleasedReturnValue(v63);
    v65 = v184;
    objc_msgSend(v184, "appendData:", v64);

    goto LABEL_40;
  }
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager generateRemoteTerminationRequestForKeys:nodes:trees:withError:]", 747, CFSTR("There is nothing to create RTR"), v57, v58, v59, v60, v169);
  v164 = v184;
  v9 = v185;
  if (v179)
  {
    v165 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml"));
    v213 = NSLocalizedDescriptionKey;
    v168 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(206));
    v178 = (void *)objc_claimAutoreleasedReturnValue(v168);
    v214 = v178;
    v166 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v214, &v213, 1));
    v18 = 0;
    obja = 0;
    *v179 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v165, 206, v166));
    v11 = v182;
    goto LABEL_57;
  }
  v18 = 0;
  obja = 0;
  v11 = v182;
LABEL_58:

  v19 = obja;
LABEL_59:

LABEL_60:
  return v19;
}

id sub_100258FA4(uint64_t a1)
{
  void *v1;
  void *v2;
  const __CFString *v3;
  void *v4;
  void *v5;
  id v6;

  if (!a1)
    return 0;
  v1 = *(void **)(a1 + 24);
  if (!v1)
    return 0;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "subjectIdentifier"));
  v3 = sub_100254798((uint64_t)KmlEndpointManager, v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v5 = v4;
  if (v4)
    v6 = objc_msgSend(v4, "isEqualToString:", CFSTR("OWNR"));
  else
    v6 = 0;

  return v6;
}

void **sub_100259028(uint64_t a1, _QWORD *a2)
{
  void **v2;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  KmlSharingRecordsUpdater *v11;
  dispatch_queue_t *v12;
  dispatch_queue_t *v13;

  v2 = (void **)a1;
  if (a1)
  {
    v4 = sub_100256044(a1);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    v10 = (void *)v5;
    if (v5)
    {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager listSharingInvitationsWithError:]", 855, CFSTR("Error getting endpoint - %@"), v6, v7, v8, v9, v5);
      v2 = 0;
      if (a2)
        *a2 = objc_retainAutorelease(v10);
    }
    else
    {
      v11 = sub_10024E878((uint64_t)KmlSharingRecordsUpdater, v2[3]);
      v12 = (dispatch_queue_t *)objc_claimAutoreleasedReturnValue(v11);
      v13 = sub_10024F554(v12);
      v2 = (void **)objc_claimAutoreleasedReturnValue(v13);

    }
  }
  return v2;
}

id sub_1002590E0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  KmlSharingRecordsUpdater *v12;
  dispatch_queue_t *v13;
  dispatch_queue_t *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = a2;
  if (a1)
  {
    v4 = sub_100256044(a1);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    v10 = (void *)v5;
    if (v5)
    {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager removeSharedKeysWithIdentifiers:]", 870, CFSTR("Error getting endpoint - %@"), v6, v7, v8, v9, v5);
      v11 = v10;
    }
    else
    {
      v12 = sub_10024E878((uint64_t)KmlSharingRecordsUpdater, *(void **)(a1 + 24));
      v13 = (dispatch_queue_t *)objc_claimAutoreleasedReturnValue(v12);
      v14 = sub_10024FDA8(v13, v3);
      v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
      sub_10024FC0C((uint64_t)v13, v3);
      sub_10024EF50((uint64_t)v13);
      if (objc_msgSend(v15, "count"))
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager removeSharedKeysWithIdentifiers:]", 879, CFSTR("cancelling pending invitations for uuid set: %@"), v16, v17, v18, v19, (uint64_t)v15);
        sub_100261094((uint64_t)KmlOwnerSharingManager, v15);
      }
      else
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager removeSharedKeysWithIdentifiers:]", 882, CFSTR("Nothing to cancel - %@"), v16, v17, v18, v19, 0);
      }

    }
  }
  else
  {
    v10 = 0;
  }

  return v10;
}

void sub_10025920C(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  char *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;
  __int16 v33;
  uint64_t PrivateData;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  unsigned int v42;
  KmlDeviceConfigurationData *v43;
  uint64_t v44;
  void *v45;
  void *v46;
  id v47;
  unsigned int v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unint64_t v55;
  __CFString *v56;
  os_log_type_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  int8x8_t v65;
  void *v66;
  unsigned __int8 v67;
  uint8x8_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int16 v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int16 v86;
  __int16 v87;
  __int16 v88;
  id v89;
  void *v90;
  unsigned int v91;
  void *v92;
  unsigned int v93;
  int v94;
  id v95;

  if (a1)
  {
    *a3 = 0;
    *a2 = 0;
    v6 = sub_100256044(a1);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (v7)
    {
      v12 = (void *)v7;
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager countImmoTokensToShare:remainingDepth:]", 894, CFSTR("Error getting endpoint - %@"), v8, v9, v10, v11, v7);
LABEL_28:

      return;
    }
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 24), "mailboxMapping"));
    v14 = sub_10022A0B4((char *)[KmlMailboxMappingData alloc], v13, (__int16)objc_msgSend(*(id *)(a1 + 128), "agreedKmlVehicleVersion"));
    v15 = sub_10022AB38((uint64_t)v14);
    if (v15 < sub_10022AAE4((uint64_t)v14))
    {
      v23 = sub_10022A674((id *)v14, v16, v17, v18, v19, v20, v21, v22);
      v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "asHexString"));
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager countImmoTokensToShare:remainingDepth:]", 903, CFSTR("Underflow detected in mailbox offsets %@"), v26, v27, v28, v29, (uint64_t)v25);

      v12 = 0;
LABEL_27:

      goto LABEL_28;
    }
    v30 = *(_QWORD *)(a1 + 8);
    v31 = sub_10022AAE4((uint64_t)v14);
    v32 = sub_10022AB38((uint64_t)v14);
    v33 = sub_10022AAE4((uint64_t)v14);
    v95 = 0;
    PrivateData = SESEndPointGetPrivateData(v30, v31, (unsigned __int16)(v32 - v33), &v95);
    v35 = (void *)objc_claimAutoreleasedReturnValue(PrivateData);
    v36 = v95;
    v12 = v36;
    if (v36)
    {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager countImmoTokensToShare:remainingDepth:]", 912, CFSTR("Error while getting signaling bitmap from mailbox %@"), v37, v38, v39, v40, (uint64_t)v36);
LABEL_26:

      goto LABEL_27;
    }
    v41 = objc_retainAutorelease(v35);
    v42 = *(unsigned __int8 *)objc_msgSend(v41, "bytes");
    v43 = [KmlDeviceConfigurationData alloc];
    v44 = (uint64_t)v43;
    v45 = *(void **)(a1 + 64);
    if (v45)
    {
      v46 = (void *)sub_10022D114((uint64_t)v43, v45);
    }
    else
    {
      v92 = v35;
      v47 = v41;
      v48 = v42;
      v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 24), "deviceConfiguration"));
      v46 = (void *)sub_10022D114(v44, v49);

      v42 = v48;
      v41 = v47;
      v35 = v92;
    }
    if (sub_10022AAD8((uint64_t)v14) == 128
      && objc_msgSend(*(id *)(a1 + 128), "agreedKmlVehicleVersion") == 768)
    {
      if (sub_10022DC4C((uint64_t)v46) && sub_10022AAD8((uint64_t)v46) > 1)
      {
        v93 = v42;
        v87 = sub_10022AB2C((uint64_t)v14);
        v86 = sub_10022AAE4((uint64_t)v14);
        v54 = sub_10022AB08((uint64_t)v14);
        v55 = (unint64_t)objc_msgSend(v41, "length");
        v91 = v54;
        if (v55 >= sub_10022AAD8((uint64_t)v46) * v54)
        {
          if (sub_10022AA3C((uint64_t)v14, v93))
          {
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager countImmoTokensToShare:remainingDepth:]", 939, CFSTR("Attestation(s) set. Let's count them"), v69, v70, v71, v72, v84);
            v90 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithLength:](NSMutableData, "dataWithLength:", v54));
            v89 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithLength:](NSMutableData, "dataWithLength:", v54)));
            memset(objc_msgSend(v89, "mutableBytes"), 255, v54);
            if (sub_10022AAD8((uint64_t)v46))
            {
              v73 = 0;
              v94 = 0;
              v88 = v87 - v86;
              while (1)
              {
                v74 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v41, "subdataWithRange:", (unsigned __int16)(v88 + v73), v91));
                if ((objc_msgSend(v74, "isEqualToData:", v90) & 1) != 0
                  || objc_msgSend(v74, "isEqualToData:", v89))
                {
                  break;
                }

                v73 += v91;
                if (++v94 >= sub_10022AAD8((uint64_t)v46))
                  goto LABEL_40;
              }
              KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager countImmoTokensToShare:remainingDepth:]", 948, CFSTR("Found an empty slot"), v75, v76, v77, v78, v85);

            }
            else
            {
              LOBYTE(v94) = 0;
            }
LABEL_40:

            v79 = v94;
          }
          else
          {
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager countImmoTokensToShare:remainingDepth:]", 955, CFSTR("No attestations set in the mailbox"), v69, v70, v71, v72, v84);
            v79 = 0;
          }
          *a3 = sub_10022AAD8((uint64_t)v46) - v79;
          *a2 = 7;
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager countImmoTokensToShare:remainingDepth:]", 964, CFSTR("SharingInAChain capable endpoint. Tokens toShare = %lu, remainingDepth = %lu"), v80, v81, v82, v83, 7);
          goto LABEL_25;
        }
        v56 = CFSTR("Private data doesn't have enough length for slotIDs");
        v57 = OS_LOG_TYPE_ERROR;
        v58 = 933;
      }
      else
      {
        v56 = CFSTR("Sharing in a Chain must support online slots/tokens with max offline count of at least 2");
        v57 = OS_LOG_TYPE_ERROR;
        v58 = 924;
      }
    }
    else
    {
      *a3 = 1;
      if (sub_10022DC4C((uint64_t)v46))
      {
        *a2 = 7;
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager countImmoTokensToShare:remainingDepth:]", 974, CFSTR("Tokens are online, report all available for simplicity. Tokens toShare = %lu, remainingDepth = %lu"), v59, v60, v61, v62, 7);
LABEL_25:

        goto LABEL_26;
      }
      v63 = *((unsigned __int8 *)objc_msgSend(objc_retainAutorelease(v41), "bytes") + 1);
      v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 24), "sharingTokenAvailabilityBitmap"));

      if (v64)
      {
        v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 24), "sharingTokenAvailabilityBitmap"));
        v67 = objc_msgSend(v66, "unsignedCharValue");

      }
      else
      {
        v67 = -2;
      }
      v65.i32[0] = v63 & v67 & 0xFE;
      v68 = (uint8x8_t)vcnt_s8(v65);
      v68.i16[0] = vaddlv_u8(v68);
      *a2 = v68.u32[0];
      v84 = v63;
      v56 = CFSTR("BitmapInMailbox: %02X; BitmapOfOpenInvitations: %02X; toShare = %lu, remainingDepth = %lu");
      v57 = OS_LOG_TYPE_INFO;
      v58 = 994;
    }
    KmlLogFunc2(v57, (uint64_t)"-[KmlEndpointManager countImmoTokensToShare:remainingDepth:]", v58, v56, v50, v51, v52, v53, v84);
    goto LABEL_25;
  }
}

void sub_100259774(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, _QWORD *a4@<X3>, uint64_t *a5@<X8>)
{
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  __int128 v17;
  _OWORD v18[2];

  v9 = a3;
  if (a1)
  {
    *a5 = a2;
    a5[1] = 0;
    a5[2] = 0;
    a5[3] = 0;
    v10 = sub_100256044(a1);
    v11 = objc_claimAutoreleasedReturnValue(v10);
    v16 = (void *)v11;
    if (v11)
    {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager hasUpgradeAvailableForType:versions:withError:]", 1005, CFSTR("Error getting endpoint - %@"), v12, v13, v14, v15, v11);
      if (a4)
        *a4 = objc_retainAutorelease(v16);
    }
    else
    {
      sub_100219BBC(*(_QWORD *)(a1 + 128), a2, v9, (uint64_t)v18);
      v17 = v18[1];
      *(_OWORD *)a5 = v18[0];
      *((_OWORD *)a5 + 1) = v17;
    }

  }
  else
  {
    *(_OWORD *)a5 = 0u;
    *((_OWORD *)a5 + 1) = 0u;
  }

}

_QWORD *sub_100259840(_QWORD *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD *v15;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  NSString *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  uint64_t v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  id v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  id v65;
  void *v66;
  _QWORD v67[4];
  id v68;
  id v69;
  _QWORD *v70;
  id v71;
  id v72;
  __int128 v73;
  __int128 v74;
  NSErrorUserInfoKey v75;
  void *v76;
  void *v77;

  v7 = a4;
  if (a1)
  {
    v8 = sub_100256044((uint64_t)a1);
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (v9)
    {
      v14 = (void *)v9;
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager upgradeVersionType:version:upgradeInformation:]", 1022, CFSTR("Error getting endpoint - %@"), v10, v11, v12, v13, v9);
      v15 = v14;
      a1 = v15;
LABEL_4:

      goto LABEL_5;
    }
    v73 = 0u;
    v74 = 0u;
    v17 = a1[16];
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a3));
    v77 = v18;
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v77, 1));
    sub_100219BBC(v17, a2, v19, (uint64_t)&v73);

    if (!BYTE8(v73))
    {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager upgradeVersionType:version:upgradeInformation:]", 1029, CFSTR("There is no upgrade available from current version: 0x%04lx"), v20, v21, v22, v23, v74);
      v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml"));
      v75 = NSLocalizedDescriptionKey;
      v25 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(220));
      v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
      v76 = v26;
      v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v76, &v75, 1));
      a1 = (_QWORD *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v24, 220, v27));

      v15 = 0;
      goto LABEL_4;
    }
    if (a2)
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager upgradeVersionType:version:upgradeInformation:]", 1034, CFSTR("Only Framework version upgrade needs further work"), v20, v21, v22, v23, v64);
      v15 = 0;
      a1 = 0;
      goto LABEL_4;
    }
    v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
    objc_msgSend(v28, "setObject:forKeyedSubscript:", objc_opt_class(NSData), CFSTR("endpointCreationData"));
    objc_msgSend(v28, "setObject:forKeyedSubscript:", objc_opt_class(NSData), CFSTR("mailboxMapping"));
    objc_msgSend(v28, "setObject:forKeyedSubscript:", objc_opt_class(NSData), CFSTR("deviceConfiguration"));
    objc_msgSend(v28, "setObject:forKeyedSubscript:", objc_opt_class(NSData), CFSTR("sharingConfiguration"));
    v72 = 0;
    v29 = kmlUtilDecodeJson(v7, v28, 0, &v72);
    v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
    v15 = v72;
    v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "objectForKey:", CFSTR("endpointCreationData")));
    kmlUtilLogLargeData(CFSTR("endpointCreationData"), v31);
    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "objectForKey:", CFSTR("mailboxMapping")));
    kmlUtilLogLargeData(CFSTR("mailboxMappingData"), v32);
    v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "objectForKey:", CFSTR("deviceConfiguration")));
    kmlUtilLogLargeData(CFSTR("deviceConfigData"), v33);
    v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "objectForKey:", CFSTR("sharingConfiguration")));
    kmlUtilLogLargeData(CFSTR("sharingConfigData"), v34);
    if (!v15
      && objc_msgSend(v31, "length")
      && objc_msgSend(v32, "length")
      && (objc_msgSend(v33, "length") || objc_msgSend(v34, "length")))
    {
      v66 = v31;
      v44 = a1[1];
      v45 = kmlUtilTimeNow();
      v46 = (void *)objc_claimAutoreleasedReturnValue(v45);
      v47 = SESEndpointConvertWithSession(0, 0, v44, v46);
      v15 = (_QWORD *)objc_claimAutoreleasedReturnValue(v47);

      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager upgradeVersionType:version:upgradeInformation:]", 1074, CFSTR("upgrade result : %@"), v48, v49, v50, v51, (uint64_t)v15);
      if (v15)
      {
        v52 = sesErrorToKmlError(v15, 0xDEu);
        a1 = (_QWORD *)objc_claimAutoreleasedReturnValue(v52);
        v43 = v66;
        goto LABEL_13;
      }
      v53 = sub_100256044((uint64_t)a1);
      v54 = objc_claimAutoreleasedReturnValue(v53);
      v43 = v66;
      if (v54)
      {
        v15 = (_QWORD *)v54;
        v35 = 0;
      }
      else
      {
        v71 = 0;
        v55 = sub_100259E20((uint64_t)a1, &v71);
        v35 = (id)objc_claimAutoreleasedReturnValue(v55);
        v15 = v71;
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager upgradeVersionType:version:upgradeInformation:]", 1085, CFSTR("Tracking request creation result: %@"), v56, v57, v58, v59, (uint64_t)v15);
        if (!v15)
        {
          if (objc_msgSend(v7, "length") && objc_msgSend(v35, "length"))
          {
            v60 = a1[1];
            v67[0] = _NSConcreteStackBlock;
            v67[1] = 3221225472;
            v67[2] = sub_10025A4A0;
            v67[3] = &unk_10030FB58;
            v68 = v7;
            v35 = v35;
            v69 = v35;
            v70 = a1;
            v61 = v60;
            v43 = v66;
            v62 = SESEndPointUpdateWithBlock(v61, v67);
            v15 = (_QWORD *)objc_claimAutoreleasedReturnValue(v62);

          }
          else
          {
            v15 = 0;
          }
        }
      }
      v63 = sesErrorToKmlError(v15, 0xDEu);
      a1 = (_QWORD *)objc_claimAutoreleasedReturnValue(v63);
    }
    else
    {
      v35 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml"));
      v65 = v7;
      v36 = v28;
      v37 = v30;
      v38 = v34;
      v39 = v33;
      v40 = v32;
      v41 = v31;
      v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "userInfo"));
      a1 = (_QWORD *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v35, 221, v42));

      v43 = v41;
      v32 = v40;
      v33 = v39;
      v34 = v38;
      v30 = v37;
      v28 = v36;
      v7 = v65;
    }

LABEL_13:
    goto LABEL_4;
  }
LABEL_5:

  return a1;
}

id sub_100259E20(uint64_t a1, _QWORD *a2)
{
  void *v4;
  id v5;
  unsigned int v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  _WORD *v14;
  void *v15;
  id v16;
  id v17;
  NSString *v18;
  void *v19;
  void *v20;
  id v21;
  __int16 v22;
  void *v23;
  id v24;
  SESConfigDCK *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int16 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  _WORD *v39;
  void *v40;
  void *v41;
  _WORD *v42;
  void *v43;
  void *v44;
  _WORD *v45;
  void *v46;
  id v47;
  id v48;
  id v49;
  uint64_t v50;
  void *i;
  id v52;
  void *v53;
  _WORD *v54;
  void *v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  id v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  id v70;
  void *v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  uint64_t v79;
  _QWORD *v80;
  __int16 v81;
  void *v82;
  id v83;
  id v84;
  id v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  id v90;
  _BYTE v91[128];
  NSErrorUserInfoKey v92;
  void *v93;

  if (a1)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    v5 = objc_msgSend(objc_alloc((Class)NSUserDefaults), "initWithSuiteName:", CFSTR("com.apple.seserviced"));
    v6 = objc_msgSend(v5, "BOOLForKey:", CFSTR("UseOldKeyTrackingTag"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 24), "certificates"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectAtIndexedSubscript:", 2));

    if (objc_msgSend(v8, "length"))
    {
      v80 = a2;
      v82 = v8;
      v83 = v5;
      if (v6)
        v13 = 32574;
      else
        v13 = 32581;
      v14 = sub_10022CB3C((uint64_t)KmlTlv, 32548, v8);
      v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
      objc_msgSend(v4, "addObject:", v15);

      if ((sub_100258FA4(a1) & 1) != 0)
      {
        v81 = v13;
        v16 = 0;
      }
      else
      {
        if (v6)
          v22 = 32568;
        else
          v22 = 32584;
        v81 = v22;
        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 24), "readerInfo"));
        v24 = objc_msgSend(objc_alloc((Class)KmlRoutingInformation), "initWithReaderInformation:", v23);
        v25 = objc_opt_new(SESConfigDCK);
        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "manufacturer"));
        v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "brand"));
        v90 = 0;
        v28 = (void *)objc_claimAutoreleasedReturnValue(-[SESConfigDCK intValueForSetting:manufacturer:brand:uuid:error:](v25, "intValueForSetting:manufacturer:brand:uuid:error:", 0, v26, v27, 0, &v90));
        v16 = v90;

        if (v16 || !v28)
        {
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager buildAndEncryptUpgradeTrackingRequestWithError:]", 1816, CFSTR("We don't have a default yet"), v29, v30, v31, v32, v79);
          v33 = 2207;
        }
        else
        {
          v33 = (unsigned __int16)objc_msgSend(v28, "unsignedIntValue");
        }
        v38 = v33;
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager buildAndEncryptUpgradeTrackingRequestWithError:]", 1821, CFSTR("Key role added :%02x"), v34, v35, v36, v37, v33);
        v39 = sub_10022CBF0((uint64_t)KmlTlv, 213, v38);
        v40 = (void *)objc_claimAutoreleasedReturnValue(v39);
        objc_msgSend(v4, "addObject:", v40);

      }
      v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 24), "privacyPublicKey"));
      v42 = sub_10022CB3C((uint64_t)KmlTlv, 24393, v41);
      v43 = (void *)objc_claimAutoreleasedReturnValue(v42);
      objc_msgSend(v4, "addObject:", v43);

      v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("ECIES_v1"), "dataUsingEncoding:", 4));
      v45 = sub_10022CB3C((uint64_t)KmlTlv, 218, v44);
      v46 = (void *)objc_claimAutoreleasedReturnValue(v45);
      objc_msgSend(v4, "addObject:", v46);

      v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData data](NSMutableData, "data"));
      v86 = 0u;
      v87 = 0u;
      v88 = 0u;
      v89 = 0u;
      v47 = v4;
      v48 = objc_msgSend(v47, "countByEnumeratingWithState:objects:count:", &v86, v91, 16);
      if (v48)
      {
        v49 = v48;
        v50 = *(_QWORD *)v87;
        do
        {
          for (i = 0; i != v49; i = (char *)i + 1)
          {
            if (*(_QWORD *)v87 != v50)
              objc_enumerationMutation(v47);
            v52 = sub_10022D014(*(_QWORD *)(*((_QWORD *)&v86 + 1) + 8 * (_QWORD)i));
            v53 = (void *)objc_claimAutoreleasedReturnValue(v52);
            objc_msgSend(v19, "appendData:", v53);

          }
          v49 = objc_msgSend(v47, "countByEnumeratingWithState:objects:count:", &v86, v91, 16);
        }
        while (v49);
      }

      v54 = sub_10022CB3C((uint64_t)KmlTlv, v81, v19);
      v55 = (void *)objc_claimAutoreleasedReturnValue(v54);
      v56 = sub_10022D014((uint64_t)v55);
      v20 = (void *)objc_claimAutoreleasedReturnValue(v56);

      kmlUtilLogLargeData(CFSTR("plaintext tracking request"), v20);
      v57 = *(_QWORD *)(a1 + 8);
      v85 = v16;
      v58 = SESEndPointPrivacyEncryption(v57, v20, &v85);
      v59 = (void *)objc_claimAutoreleasedReturnValue(v58);
      v17 = v85;

      if (v17)
      {
        KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager buildAndEncryptUpgradeTrackingRequestWithError:]", 1845, CFSTR("Failed to encrypt tracking request with - %@"), v60, v61, v62, v63, (uint64_t)v17);
        if (v80)
        {
          v64 = sesErrorToKmlError(v17, 0xDEu);
          v21 = 0;
          *v80 = (id)objc_claimAutoreleasedReturnValue(v64);
        }
        else
        {
          v21 = 0;
        }
      }
      else
      {
        v65 = objc_alloc((Class)DAAlishaKeyEncryptedRequest);
        v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v59, "version"));
        v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v59, "ephemeralPublicKeydata"));
        v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v59, "receiverPublicKeyHash"));
        v69 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v59, "cipherText"));
        v70 = objc_msgSend(v65, "initWithVersion:ephemeralPublicKey:publicKeyHash:encryptedRequest:", v66, v67, v68, v69);

        v84 = 0;
        v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "encodeWithError:", &v84));
        v72 = v84;
        v17 = v72;
        if (v72 || !v71)
        {
          KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager buildAndEncryptUpgradeTrackingRequestWithError:]", 1860, CFSTR("Encode key tracking request error %@, trackingRequestData=%@"), v73, v74, v75, v76, (uint64_t)v72);
          v5 = v83;
          if (v80)
          {
            v77 = sesErrorToKmlError(v17, 0xDEu);
            v21 = 0;
            *v80 = (id)objc_claimAutoreleasedReturnValue(v77);
          }
          else
          {
            v21 = 0;
          }
        }
        else
        {
          v21 = v71;
          v5 = v83;
        }

      }
      v8 = v82;

    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager buildAndEncryptUpgradeTrackingRequestWithError:]", 1791, CFSTR("Missing Endpoint certificate"), v9, v10, v11, v12, v79);
      if (!a2)
      {
        v21 = 0;
LABEL_39:

        return v21;
      }
      v17 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml"));
      v92 = NSLocalizedDescriptionKey;
      v18 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(222));
      v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
      v93 = v19;
      v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v93, &v92, 1));
      v21 = 0;
      *a2 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v17, 222, v20));
    }

    goto LABEL_39;
  }
  return 0;
}

void sub_10025A4A0(_QWORD *a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;

  v3 = a2;
  objc_msgSend(v3, "setUpgradeEndpointJSONData:", a1[4]);
  objc_msgSend(v3, "setTrackingRequest:", a1[5]);
  v4 = a1[6];
  v5 = *(void **)(v4 + 24);
  *(_QWORD *)(v4 + 24) = v3;

}

id sub_10025A4E4(id a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id v8;
  const __CFString *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  NSString *v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  id v51;
  void *v52;
  id v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  NSString *v63;
  void *v64;
  void *v65;
  void *v66;
  KmlEndpointCreationConfig *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _BYTE *v91;
  void *v92;
  NSString *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  NSString *v98;
  void *v99;
  void *v100;
  void *v101;
  char *v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _BOOL4 v112;
  _BOOL4 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  id v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  id *v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  void *v132;
  id v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  id v138;
  void *v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  id v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  id v151;
  void *v152;
  uint64_t v153;
  NSString *v154;
  void *v155;
  void *v156;
  void *v157;
  void *v158;
  id v159;
  void *v160;
  id v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  void *v166;
  id v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  void *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  id v176;
  void *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  void *v181;
  void *v182;
  void *v183;
  void *v184;
  char *v185;
  KmlEndpointCreationConfig *v186;
  void *v187;
  void *v188;
  void *v189;
  _QWORD v190[4];
  id v191;
  id v192;
  id v193;
  id v194;
  KmlEndpointCreationConfig *v195;
  id v196;
  id v197;
  id v198;
  id v199;
  _QWORD v200[4];
  id v201;
  id v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  _QWORD v207[5];
  NSErrorUserInfoKey v208;
  void *v209;
  NSErrorUserInfoKey v210;
  void *v211;
  NSErrorUserInfoKey v212;
  void *v213;
  NSErrorUserInfoKey v214;
  void *v215;
  NSErrorUserInfoKey v216;
  void *v217;
  void *v218;

  v8 = a1;
  if (a1)
  {
    v12 = CFSTR("Upgrade");
    if (a4)
      v12 = CFSTR("Revert");
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager finalizeVersionType:version:revert:]", 1101, CFSTR("Requested %@ for type:0x%04lx, version: 0x%04lx"), a5, a6, a7, a8, (uint64_t)v12);
    v13 = sub_100256044((uint64_t)v8);
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (v14)
    {
      v19 = (void *)v14;
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager finalizeVersionType:version:revert:]", 1104, CFSTR("Error getting endpoint - %@"), v15, v16, v17, v18, v14);
      v20 = v19;
LABEL_15:
      v8 = v20;
LABEL_16:

      return v8;
    }
    if (a4)
    {
      if (a2)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager finalizeVersionType:version:revert:]", 1116, CFSTR("Revert is a no-op for VehicleServer upgrade"), v15, v16, v17, v18, v178);
        v21 = 0;
      }
      else
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager finalizeVersionType:version:revert:]", 1110, CFSTR("Throw away saved info for framework upgrade"), v15, v16, v17, v18, v178);
        v38 = *((_QWORD *)v8 + 1);
        v207[0] = _NSConcreteStackBlock;
        v207[1] = 3221225472;
        v207[2] = sub_10025B390;
        v207[3] = &unk_10030F0E0;
        v207[4] = v8;
        v39 = SESEndPointUpdateWithBlock(v38, v207);
        v21 = (void *)objc_claimAutoreleasedReturnValue(v39);
      }
      v20 = v21;
      goto LABEL_15;
    }
    v205 = 0u;
    v206 = 0u;
    v22 = *((_QWORD *)v8 + 16);
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a3));
    v218 = v23;
    v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v218, 1));
    sub_100219BBC(v22, a2, v24, (uint64_t)&v205);

    if (!BYTE8(v205))
    {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager finalizeVersionType:version:revert:]", 1125, CFSTR("There is no upgrade available from current version: 0x%04lx"), v25, v26, v27, v28, v206);
      v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml"));
      v216 = NSLocalizedDescriptionKey;
      v41 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(220));
      v42 = (void *)objc_claimAutoreleasedReturnValue(v41);
      v217 = v42;
      v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v217, &v216, 1));
      v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v40, 220, v43));

      v203 = v205;
      v204 = v206;
      sub_10025B3C8((uint64_t)v8, v44, &v203);
      v20 = v44;
      goto LABEL_15;
    }
    sub_100219FC8(*((_QWORD *)v8 + 16), a2, a3);
    v29 = sub_1002198D8(*((id *)v8 + 16));
    v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
    v31 = v30;
    if (a2 == 2)
    {
      v32 = *((_QWORD *)v8 + 1);
      v200[0] = _NSConcreteStackBlock;
      v200[1] = 3221225472;
      v200[2] = sub_10025B528;
      v200[3] = &unk_10030F130;
      v201 = v30;
      v202 = v8;
      v33 = SESEndPointUpdateWithBlock(v32, v200);
      v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
      v35 = sesErrorToKmlError(v34, 0xDEu);
      v36 = (void *)objc_claimAutoreleasedReturnValue(v35);

      v203 = v205;
      v204 = v206;
      sub_10025B3C8((uint64_t)v8, v36, &v203);
      v8 = v36;
      v37 = v201;
LABEL_23:

      goto LABEL_16;
    }
    v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)v8 + 3), "upgradeEndpointJSONData"));
    if (!objc_msgSend(v37, "length"))
    {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager finalizeVersionType:version:revert:]", 1150, CFSTR("We don't have upgrade info saved on endpoint"), v46, v47, v48, v49, v178);
      v62 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml"));
      v214 = NSLocalizedDescriptionKey;
      v63 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(221));
      v64 = (void *)objc_claimAutoreleasedReturnValue(v63);
      v215 = v64;
      v65 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v215, &v214, 1));
      v66 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v62, 221, v65));

      v203 = v205;
      v204 = v206;
      sub_10025B3C8((uint64_t)v8, v66, &v203);
      v8 = v66;
      goto LABEL_23;
    }
    v188 = v31;
    v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
    objc_msgSend(v50, "setObject:forKeyedSubscript:", objc_opt_class(NSData), CFSTR("endpointCreationData"));
    objc_msgSend(v50, "setObject:forKeyedSubscript:", objc_opt_class(NSData), CFSTR("mailboxMapping"));
    objc_msgSend(v50, "setObject:forKeyedSubscript:", objc_opt_class(NSData), CFSTR("deviceConfiguration"));
    objc_msgSend(v50, "setObject:forKeyedSubscript:", objc_opt_class(NSData), CFSTR("sharingConfiguration"));
    v199 = 0;
    v51 = kmlUtilDecodeJson(v37, v50, 0, &v199);
    v52 = (void *)objc_claimAutoreleasedReturnValue(v51);
    v53 = v199;
    v189 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v52, "objectForKey:", CFSTR("endpointCreationData")));
    kmlUtilLogLargeData(CFSTR("endpointCreationData"), v189);
    v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v52, "objectForKey:", CFSTR("mailboxMapping")));
    kmlUtilLogLargeData(CFSTR("mailboxMappingData"), v54);
    v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v52, "objectForKey:", CFSTR("deviceConfiguration")));
    kmlUtilLogLargeData(CFSTR("deviceConfigData"), v55);
    v187 = v52;
    v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v52, "objectForKey:", CFSTR("sharingConfiguration")));
    kmlUtilLogLargeData(CFSTR("sharingConfigData"), v56);
    if (v53
      || !objc_msgSend(v189, "length")
      || !objc_msgSend(v54, "length")
      || !objc_msgSend(v55, "length") && !objc_msgSend(v56, "length"))
    {
      v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml"));
      v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "userInfo"));
      v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v57, 221, v58));

      v60 = v56;
      v203 = v205;
      v204 = v206;
      sub_10025B3C8((uint64_t)v8, v59, &v203);
      v8 = v59;
      v61 = v187;
      v31 = v188;
LABEL_21:

      goto LABEL_23;
    }
    v67 = objc_alloc_init(KmlEndpointCreationConfig);
    sub_100250F70((uint64_t)v67, v189);
    v186 = v67;
    if ((sub_1002518BC((uint64_t)v67, v68, v69, v70, v71, v72, v73, v74) & 1) == 0)
    {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager finalizeVersionType:version:revert:]", 1191, CFSTR("Endpoint creation data invalid"), v75, v76, v77, v78, v178);
      v92 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml"));
      v212 = NSLocalizedDescriptionKey;
      v93 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(4));
      v94 = (void *)objc_claimAutoreleasedReturnValue(v93);
      v213 = v94;
      v95 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v213, &v212, 1));
      v96 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v92, 4, v95));

      v60 = v56;
      v203 = v205;
      v204 = v206;
      sub_10025B3C8((uint64_t)v8, v96, &v203);
      v8 = v96;
      v61 = v187;
      v31 = v188;
LABEL_57:

      goto LABEL_21;
    }
    v185 = sub_10022A0B4((char *)[KmlMailboxMappingData alloc], v54, a3);
    if ((sub_10022A82C((uint64_t)v185, v79, v80, v81, v82, v83, v84, v85) & 1) == 0)
    {
      v97 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml"));
      v210 = NSLocalizedDescriptionKey;
      v98 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(212));
      v99 = (void *)objc_claimAutoreleasedReturnValue(v98);
      v211 = v99;
      v100 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v211, &v210, 1));
      v101 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v97, 212, v100));

      v60 = v56;
      v203 = v205;
      v204 = v206;
      sub_10025B3C8((uint64_t)v8, v101, &v203);
      v8 = v101;
      v61 = v187;
      v31 = v188;
      v102 = v185;
LABEL_56:

      goto LABEL_57;
    }
    v86 = sub_10022D114((uint64_t)[KmlDeviceConfigurationData alloc], *((void **)v8 + 8));
    if (objc_msgSend(v55, "length"))
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager finalizeVersionType:version:revert:]", 1212, CFSTR("Full device config was received. So that will be used."), v87, v88, v89, v90, v178);
      v91 = (_BYTE *)sub_10022D124((uint64_t)[KmlDeviceConfigurationData alloc], v55, 1);
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager finalizeVersionType:version:revert:]", 1215, CFSTR("Only sharing config provided. Rest remains same"), v87, v88, v89, v90, v178);
      v91 = (_BYTE *)sub_10022D114((uint64_t)[KmlDeviceConfigurationData alloc], *((void **)v8 + 8));
      sub_10022DF00(v91, v56);
    }
    v103 = sub_100217280(v86);
    v104 = (void *)objc_claimAutoreleasedReturnValue(v103);
    sub_10022E204((uint64_t)v91, v104);

    if (sub_10022F178(v86))
      sub_10022E9EC((uint64_t)v91, v105, v106, v107, v108, v109, v110, v111, v179);
    v112 = sub_10022F138(v86);
    v183 = (void *)v86;
    v184 = v91;
    if (v112 != sub_10022F138((_BOOL8)v91))
    {
      v113 = sub_10022F138(v86);
      sub_10022F138((_BOOL8)v91);
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager finalizeVersionType:version:revert:]", 1226, CFSTR("Mismatch in BT/UWB support, Current (%d), New (%d)"), v114, v115, v116, v117, v113);
      v118 = objc_msgSend(objc_alloc((Class)NSUserDefaults), "initWithSuiteName:", CFSTR("com.apple.seserviced"));
      v119 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v118, "objectForKey:", CFSTR("AllowRadioMismatchInUpgrade")));
      if (!isInternalBuild() || !v119)
      {
        v182 = v118;
        v153 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml"));
        v208 = NSLocalizedDescriptionKey;
        v154 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(221));
        v155 = (void *)objc_claimAutoreleasedReturnValue(v154);
        v209 = v155;
        v156 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v209, &v208, 1));
        v181 = v119;
        v157 = (void *)v153;
        v158 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v153, 221, v156));

        v60 = v56;
        v203 = v205;
        v204 = v206;
        sub_10025B3C8((uint64_t)v8, v158, &v203);
        v8 = v158;

        v61 = v187;
        v31 = v188;
LABEL_55:
        v102 = v185;

        goto LABEL_56;
      }
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager finalizeVersionType:version:revert:]", 1232, CFSTR("Allow upgrade to proceed based on user default"), v120, v121, v122, v123, v180);

      v91 = v184;
    }
    v124 = v56;
    v125 = sub_10022D6EC((id *)v91);
    v126 = objc_claimAutoreleasedReturnValue(v125);
    v127 = (void *)*((_QWORD *)v8 + 8);
    *((_QWORD *)v8 + 8) = v126;

    if ((sub_10022DC4C(v86) & 1) == 0)
      sub_10025B560((uint64_t)v8);
    v128 = *((_QWORD *)v8 + 1);
    v129 = sub_10022ADE0((uint64_t)v91);
    v130 = (void *)objc_claimAutoreleasedReturnValue(v129);
    v131 = sub_10022ADD4((uint64_t)v91);
    v132 = (void *)objc_claimAutoreleasedReturnValue(v131);
    v198 = 0;
    SESEndPointConfigureMailBoxes(v128, v130, v132, &v198);
    v133 = v198;

    if (v133)
    {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager finalizeVersionType:version:revert:]", 1256, CFSTR("Upgrade commit failed with : %@"), v134, v135, v136, v137, (uint64_t)v133);
      v138 = sesErrorToKmlError(v133, 0xDEu);
      v139 = (void *)objc_claimAutoreleasedReturnValue(v138);

      v203 = v205;
      v204 = v206;
      sub_10025B3C8((uint64_t)v8, v139, &v203);
      v8 = v139;
      v61 = v187;
      v31 = v188;
    }
    else
    {
      v31 = v188;
      if (objc_msgSend(*((id *)v8 + 16), "agreedKmlVehicleVersion") != 768)
        goto LABEL_49;
      v140 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithLength:](NSMutableData, "dataWithLength:", 2));
      LOBYTE(v203) = 0x80;
      objc_msgSend(v140, "replaceBytesInRange:withBytes:", 0, 1, &v203);
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager finalizeVersionType:version:revert:]", 1271, CFSTR("First two bytes: %@"), v141, v142, v143, v144, (uint64_t)v140);
      v145 = *((_QWORD *)v8 + 1);
      v197 = 0;
      SESEndPointSetPrivateDataWithSession(0, 0, v145, v140, 0, &v197);
      v146 = v197;

      if (v146)
      {
        KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager finalizeVersionType:version:revert:]", 1282, CFSTR("Upgrade commit failed with : %@"), v147, v148, v149, v150, (uint64_t)v146);
        v151 = sesErrorToKmlError(v146, 0xDEu);
        v152 = (void *)objc_claimAutoreleasedReturnValue(v151);

        v203 = v205;
        v204 = v206;
        sub_10025B3C8((uint64_t)v8, v152, &v203);
        v8 = v152;
      }
      else
      {
LABEL_49:
        v196 = 0;
        v159 = sub_100259E20((uint64_t)v8, &v196);
        v160 = (void *)objc_claimAutoreleasedReturnValue(v159);
        v161 = v196;
        if (v161)
        {
          v166 = v161;
          KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager finalizeVersionType:version:revert:]", 1290, CFSTR("Failed to create tracking request : %@"), v162, v163, v164, v165, (uint64_t)v161);
          v167 = sesErrorToKmlError(v166, 0xDEu);
          v168 = (void *)objc_claimAutoreleasedReturnValue(v167);

          v203 = v205;
          v204 = v206;
          sub_10025B3C8((uint64_t)v8, v168, &v203);
          v8 = v168;
        }
        else
        {
          v169 = *((_QWORD *)v8 + 1);
          v190[0] = _NSConcreteStackBlock;
          v190[1] = 3221225472;
          v190[2] = sub_10025B700;
          v190[3] = &unk_10030F158;
          v191 = v54;
          v192 = v8;
          v193 = v188;
          v194 = v160;
          v195 = v186;
          v170 = SESEndPointUpdateWithBlock(v169, v190);
          v171 = (void *)objc_claimAutoreleasedReturnValue(v170);
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager finalizeVersionType:version:revert:]", 1306, CFSTR("Upgrade commit result : %@"), v172, v173, v174, v175, (uint64_t)v171);
          v176 = sesErrorToKmlError(v171, 0xDEu);
          v177 = (void *)objc_claimAutoreleasedReturnValue(v176);

          v203 = v205;
          v204 = v206;
          sub_10025B3C8((uint64_t)v8, v177, &v203);
          v8 = v177;

        }
      }
      v61 = v187;
    }
    v60 = v124;
    goto LABEL_55;
  }
  return v8;
}

void sub_10025B390(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;

  v3 = a2;
  objc_msgSend(v3, "setUpgradeEndpointJSONData:", 0);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(v4 + 24);
  *(_QWORD *)(v4 + 24) = v3;

}

void sub_10025B3C8(uint64_t a1, void *a2, _QWORD *a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD v13[4];
  _QWORD v14[4];

  v5 = a2;
  v6 = v5;
  if (a1)
  {
    if (v5)
      v7 = objc_msgSend(v5, "code");
    else
      v7 = 0;
    v13[0] = CFSTR("status");
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v7));
    v14[0] = v8;
    v13[1] = CFSTR("versionType");
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *a3));
    v14[1] = v9;
    v13[2] = CFSTR("toVersion");
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a3[3]));
    v14[2] = v10;
    v13[3] = CFSTR("fromVersion");
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a3[2]));
    v14[3] = v11;
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v14, v13, 4));

    sub_100211DC0((uint64_t)KmlAnalyticsLogger, v12);
  }

}

void sub_10025B528(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;

  v3 = a2;
  objc_msgSend(v3, "setVehicleSupportedVersionsData:", *(_QWORD *)(a1 + 32));
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(void **)(v4 + 24);
  *(_QWORD *)(v4 + 24) = v3;

}

void sub_10025B560(uint64_t a1)
{
  KmlSharingRecordsUpdater *v1;
  dispatch_queue_t *v2;
  dispatch_queue_t *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *i;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];

  if (a1)
  {
    v1 = sub_10024E878((uint64_t)KmlSharingRecordsUpdater, *(void **)(a1 + 24));
    v2 = (dispatch_queue_t *)objc_claimAutoreleasedReturnValue(v1);
    v3 = sub_10024F554(v2);
    v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v6 = v4;
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v17;
      do
      {
        for (i = 0; i != v8; i = (char *)i + 1)
        {
          if (*(_QWORD *)v17 != v9)
            objc_enumerationMutation(v6);
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)i), "sharingSessionIdentifier", (_QWORD)v16));
          objc_msgSend(v5, "addObject:", v11);

        }
        v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
      }
      while (v8);
    }

    if (objc_msgSend(v5, "count"))
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager cancelAllPendingInvitations]", 1880, CFSTR("canceling pending invitations"), v12, v13, v14, v15, v16);
      sub_100261094((uint64_t)KmlOwnerSharingManager, v5);
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager cancelAllPendingInvitations]", 1883, CFSTR("No Pending invitations to cancel"), v12, v13, v14, v15, v16);
    }

  }
}

void sub_10025B700(_QWORD *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;

  v3 = a2;
  objc_msgSend(v3, "setMailboxMapping:", a1[4]);
  objc_msgSend(v3, "setDeviceConfiguration:", *(_QWORD *)(a1[5] + 64));
  objc_msgSend(v3, "setVehicleSupportedVersionsData:", a1[6]);
  objc_msgSend(v3, "setTrackingRequest:", a1[7]);
  v4 = sub_100252E40(a1[8]);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  objc_msgSend(v3, "setMailboxSizesPlusAdditionalData:", v5);

  v6 = a1[5];
  v7 = *(void **)(v6 + 24);
  *(_QWORD *)(v6 + 24) = v3;

}

void **sub_10025B788(void **a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BOOL4 v37;
  _BOOL4 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  NSString *v55;
  void *v56;
  void *v57;
  void *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  void *v75;
  uint64_t v76;
  void *v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  NSString *v83;
  void *v84;
  void *v85;
  void *v86;
  NSString *v87;
  void *v88;
  void *v89;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  void *v95;
  id obj;
  id obja;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  _QWORD v103[5];
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  id v108[2];
  NSErrorUserInfoKey v109;
  void *v110;
  NSErrorUserInfoKey v111;
  void *v112;
  NSErrorUserInfoKey v113;
  void *v114;

  v3 = a2;
  if (a1)
  {
    v4 = sub_100256044((uint64_t)a1);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (v5)
    {
      v10 = (void *)v5;
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager updateConfiguration:]", 1318, CFSTR("Error getting endpoint - %@"), v6, v7, v8, v9, v5);
      a1 = v10;
LABEL_29:

      goto LABEL_30;
    }
    v102 = objc_msgSend(a1[16], "agreedKmlVehicleVersion");
    v11 = objc_msgSend(a1[16], "agreedKmlVehicleVersion");
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
    objc_msgSend(v12, "setObject:forKeyedSubscript:", objc_opt_class(NSData), CFSTR("deviceConfiguration"));
    objc_msgSend(v12, "setObject:forKeyedSubscript:", objc_opt_class(NSData), CFSTR("sharingConfiguration"));
    memset(v108, 0, 15);
    v13 = kmlUtilDecodeJson(v3, v12, 0, v108);
    v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    v15 = v108[0];
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKey:", CFSTR("deviceConfiguration")));
    kmlUtilLogLargeData(CFSTR("deviceConfigData"), v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKey:", CFSTR("sharingConfiguration")));
    kmlUtilLogLargeData(CFSTR("sharingConfigData"), v17);
    if (v15 || !objc_msgSend(v16, "length") && !objc_msgSend(v17, "length"))
    {
      v99 = (uint64_t)a1;
      v18 = v11;
      v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml"));
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "userInfo"));
      v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v19, 226, v20));

      v104 = 0;
      v105 = 0;
      v106 = v102;
      v107 = v18;
      sub_10025B3C8(v99, v21, &v104);
      a1 = v21;
LABEL_28:

      goto LABEL_29;
    }
    v22 = a1 + 8;
    v101 = (void *)sub_10022D114((uint64_t)[KmlDeviceConfigurationData alloc], a1[8]);
    v98 = v11;
    if (objc_msgSend(v16, "length"))
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager updateConfiguration:]", 1352, CFSTR("Full device config was received. So that will be used."), v23, v24, v25, v26, v91);
      v27 = (_BYTE *)sub_10022D124((uint64_t)[KmlDeviceConfigurationData alloc], v16, 1);
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager updateConfiguration:]", 1355, CFSTR("Only sharing config provided. Rest remains same"), v23, v24, v25, v26, v91);
      v27 = (_BYTE *)sub_10022D114((uint64_t)[KmlDeviceConfigurationData alloc], *v22);
      sub_10022DF00(v27, v17);
    }
    v28 = sub_100217280((uint64_t)v101);
    v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
    sub_10022E204((uint64_t)v27, v29);

    if (sub_10022F178((_BOOL8)v101))
      sub_10022E9EC((uint64_t)v27, v30, v31, v32, v33, v34, v35, v36, v92);
    v37 = sub_10022F138((_BOOL8)v101);
    v100 = v27;
    if (v37 != sub_10022F138((_BOOL8)v27))
    {
      v38 = sub_10022F138((_BOOL8)v101);
      sub_10022F138((_BOOL8)v27);
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager updateConfiguration:]", 1366, CFSTR("Mismatch in BT/UWB support, Current (%d), New (%d)"), v39, v40, v41, v42, v38);
      v43 = objc_msgSend(objc_alloc((Class)NSUserDefaults), "initWithSuiteName:", CFSTR("com.apple.seserviced"));
      v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "objectForKey:", CFSTR("AllowRadioMismatchInUpgrade")));
      if (!isInternalBuild() || !v44)
      {
        v95 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml"));
        v113 = NSLocalizedDescriptionKey;
        v83 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(226));
        v94 = (void *)objc_claimAutoreleasedReturnValue(v83);
        v114 = v94;
        v84 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v114, &v113, 1));
        obja = v44;
        v85 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v95, 226, v84));

        v104 = 0;
        LOBYTE(v105) = 0;
        *(_DWORD *)((char *)&v105 + 1) = v108[1];
        HIDWORD(v105) = *(_DWORD *)((char *)&v108[1] + 3);
        v106 = v102;
        v107 = v98;
        sub_10025B3C8((uint64_t)a1, v85, &v104);
        a1 = v85;

LABEL_27:
        goto LABEL_28;
      }
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager updateConfiguration:]", 1372, CFSTR("Allow update to proceed based on user default"), v45, v46, v47, v48, v93);

      v27 = v100;
    }
    v49 = sub_10022D6EC((id *)v27);
    obj = (id)objc_claimAutoreleasedReturnValue(v49);
    if (objc_msgSend(obj, "isEqualToData:", *v22))
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager updateConfiguration:]", 1383, CFSTR("New device config is identical to existing device config. Ignoring the update."), v50, v51, v52, v53, v92);
      v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml"));
      v111 = NSLocalizedDescriptionKey;
      v55 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(226));
      v56 = (void *)objc_claimAutoreleasedReturnValue(v55);
      v112 = v56;
      v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v112, &v111, 1));
      v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v54, 226, v57));

    }
    else
    {
      v59 = objc_msgSend(a1[16], "agreedKmlVehicleVersion");
      if ((sub_10022EC80((uint64_t)v27, v59, 0, v60, v61, v62, v63, v64) & 1) != 0)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager updateConfiguration:]", 1396, CFSTR("New device config is different. Saving it"), v65, v66, v67, v68, v92);
        objc_storeStrong(a1 + 8, obj);
        v69 = sub_100050680((uint64_t)v27);
        v70 = objc_claimAutoreleasedReturnValue(v69);
        v71 = a1[11];
        a1[11] = (void *)v70;

        v72 = sub_1002225AC((uint64_t)v27);
        v73 = objc_claimAutoreleasedReturnValue(v72);
        v74 = a1[10];
        a1[10] = (void *)v73;

        v75 = a1[1];
        v103[0] = _NSConcreteStackBlock;
        v103[1] = 3221225472;
        v103[2] = sub_10025BF70;
        v103[3] = &unk_10030F0E0;
        v103[4] = a1;
        v76 = SESEndPointUpdateWithBlock(v75, v103);
        v77 = (void *)objc_claimAutoreleasedReturnValue(v76);
        if ((sub_10022DC4C((uint64_t)v101) & 1) == 0 && sub_10022DC4C((uint64_t)v100))
          sub_10025B560((uint64_t)a1);
        v78 = sesErrorToKmlError(v77, 0xE2u);
        v58 = (void *)objc_claimAutoreleasedReturnValue(v78);

        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager updateConfiguration:]", 1417, CFSTR("Update endpoint result : %@"), v79, v80, v81, v82, (uint64_t)v58);
      }
      else
      {
        KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager updateConfiguration:]", 1390, CFSTR("New device config is invalid."), v65, v66, v67, v68, v92);
        v86 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml"));
        v109 = NSLocalizedDescriptionKey;
        v87 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(226));
        v88 = (void *)objc_claimAutoreleasedReturnValue(v87);
        v110 = v88;
        v89 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v110, &v109, 1));
        v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v86, 226, v89));

      }
    }
    v104 = 0;
    LOBYTE(v105) = 0;
    *(_DWORD *)((char *)&v105 + 1) = v108[1];
    HIDWORD(v105) = *(_DWORD *)((char *)&v108[1] + 3);
    v106 = v102;
    v107 = v98;
    sub_10025B3C8((uint64_t)a1, v58, &v104);
    a1 = v58;
    v43 = obj;
    goto LABEL_27;
  }
LABEL_30:

  return a1;
}

void sub_10025BF70(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;

  v3 = a2;
  objc_msgSend(v3, "setDeviceConfiguration:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64));
  if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 80), "length"))
    objc_msgSend(v3, "setBleIntroKey:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80));
  if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 88), "length"))
    objc_msgSend(v3, "setBleOOBKey:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 88));
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(v4 + 24);
  *(_QWORD *)(v4 + 24) = v3;

}

id sub_10025BFEC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  id *v10;
  id *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  void *j;
  id *v21;
  id *v22;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[128];
  _BYTE v33[128];

  v3 = a2;
  v4 = v3;
  if (a1 && objc_msgSend(v3, "length"))
  {
    v5 = sub_10022C7A4((uint64_t)KmlTlv, v4);
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v6 = (id)objc_claimAutoreleasedReturnValue(v5);
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v28, v33, 16);
    if (v7)
    {
      v8 = *(_QWORD *)v29;
      while (2)
      {
        for (i = 0; i != v7; i = (char *)i + 1)
        {
          if (*(_QWORD *)v29 != v8)
            objc_enumerationMutation(v6);
          v10 = *(id **)(*((_QWORD *)&v28 + 1) + 8 * (_QWORD)i);
          if (sub_100055868((uint64_t)v10) == 32565)
          {
            v11 = sub_10022CD6C(v10);
            v7 = (id)objc_claimAutoreleasedReturnValue(v11);
            goto LABEL_13;
          }
        }
        v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v28, v33, 16);
        if (v7)
          continue;
        break;
      }
    }
LABEL_13:

    if (objc_msgSend(v7, "length"))
    {
      v16 = sub_10022C7A4((uint64_t)KmlTlv, v7);
      v24 = 0u;
      v25 = 0u;
      v26 = 0u;
      v27 = 0u;
      v17 = (id)objc_claimAutoreleasedReturnValue(v16);
      v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v24, v32, 16);
      if (v18)
      {
        v19 = *(_QWORD *)v25;
        while (2)
        {
          for (j = 0; j != v18; j = (char *)j + 1)
          {
            if (*(_QWORD *)v25 != v19)
              objc_enumerationMutation(v17);
            v21 = *(id **)(*((_QWORD *)&v24 + 1) + 8 * (_QWORD)j);
            if (sub_100055868((uint64_t)v21) == 78)
            {
              v22 = sub_10022CD6C(v21);
              v18 = (id)objc_claimAutoreleasedReturnValue(v22);
              goto LABEL_25;
            }
          }
          v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v24, v32, 16);
          if (v18)
            continue;
          break;
        }
      }
LABEL_25:

    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager getSlotIdFromAttestationPackage:]", 1763, CFSTR("Could not find friend attestation package in the data"), v12, v13, v14, v15, v24);
      v18 = 0;
    }

  }
  else
  {
    v18 = 0;
  }

  return v18;
}

void sub_10025C238(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id DckIdFromSlotId;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;

  v3 = a2;
  objc_msgSend(v3, "setTrackingReceipt:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32));
  objc_msgSend(v3, "setDeviceConfiguration:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64));
  v4 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v4 + 72))
  {
    objc_msgSend(v3, "setReaderConfigID:");
    v4 = *(_QWORD *)(a1 + 32);
  }
  if (objc_msgSend(*(id *)(v4 + 80), "length"))
    objc_msgSend(v3, "setBleIntroKey:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80));
  if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 88), "length"))
    objc_msgSend(v3, "setBleOOBKey:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 88));
  if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 96), "length"))
  {
    objc_msgSend(v3, "setSlotIdentifier:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 96));
    if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 88), "length"))
    {
      if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 80), "length"))
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager updateEndpointWithTrackingData]_block_invoke", 1717, CFSTR("Calculate and save DCK ID"), v5, v6, v7, v8, v17);
        DckIdFromSlotId = kmlUtilGetDckIdFromSlotId(*(void **)(*(_QWORD *)(a1 + 32) + 96));
        v10 = (void *)objc_claimAutoreleasedReturnValue(DckIdFromSlotId);
        objc_msgSend(v3, "setBleDCKIdentifier:", v10);

      }
    }
  }
  if (sub_100257338(*(_QWORD *)(a1 + 32)))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager updateEndpointWithTrackingData]_block_invoke", 1726, CFSTR("Removing sharing data that is no longer needed"), v11, v12, v13, v14, v17);
    objc_msgSend(v3, "setSharingAttestationData:", 0);
    objc_msgSend(v3, "setOwnerEphemeralKey:", 0);
    objc_msgSend(v3, "setSharingEncryptedData:", 0);
    objc_msgSend(v3, "setAdditionalAttestationsDict:", 0);
  }
  v15 = *(_QWORD *)(a1 + 32);
  v16 = *(void **)(v15 + 24);
  *(_QWORD *)(v15 + 24) = v3;

}

void sub_10025C654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10025C65C(*(_QWORD **)(a1 + 32), a2, a3, a4, a5, a6, a7, a8);
}

void sub_10025C65C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  NSString *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  NSErrorUserInfoKey v16;
  void *v17;

  if (a1)
  {
    if (a1[1])
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport startSession_sync]", 473, CFSTR("Transport not ready to create session"), a5, a6, a7, a8, v15);
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
      v16 = NSLocalizedDescriptionKey;
      v10 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(25));
      v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      v17 = v11;
      v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v17, &v16, 1));
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v9, 25, v12));

      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "delegate"));
      objc_msgSend(v14, "handleSessionStartResult:", v13);

    }
    else
    {
      sub_10025D0E4((uint64_t)a1, 1);
    }
  }
}

void sub_10025C834(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 80) = 1;
  sub_10025C65C(*(_QWORD **)(a1 + 32), a2, a3, a4, a5, a6, a7, a8);
}

void sub_10025C8A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10025C8A8(*(_QWORD *)(a1 + 32), a2, a3, a4, a5, a6, a7, a8, a9);
}

void sub_10025C8A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;
  BOOL v11;
  uint64_t v12;
  int v13;
  NSString *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  NSErrorUserInfoKey v19;
  void *v20;

  if (a1)
  {
    switch(*(_QWORD *)(a1 + 8))
    {
      case 2:
      case 6:
        v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
        v11 = *(_BYTE *)(a1 + 80) == 0;
        if (*(_BYTE *)(a1 + 80))
          v12 = 23;
        else
          v12 = 24;
        v19 = NSLocalizedDescriptionKey;
        if (v11)
          v13 = 24;
        else
          v13 = 23;
        v14 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(v13));
        v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
        v20 = v15;
        v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v20, &v19, 1));
        v17 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v10, v12, v16));
        v18 = *(void **)(a1 + 48);
        *(_QWORD *)(a1 + 48) = v17;

        sub_10025D0E4(a1, 9);
        break;
      case 3:
      case 7:
        sub_10025D0E4(a1, 8);
        break;
      default:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport endSession_sync]", 488, CFSTR("session is not running. Ignore request to end it"), a5, a6, a7, a8, a9);
        break;
    }
  }
}

void sub_10025CAD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10025CAD8(*(_QWORD **)(a1 + 32), a2, a3, a4, a5, a6, a7, a8);
}

void sub_10025CAD8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  void *v10;
  NSString *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  NSErrorUserInfoKey v18;
  void *v19;

  if (a1)
  {
    v9 = a1[1];
    if (v9 == 5)
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport pauseSession_sync]", 508, CFSTR("Session already paused."), a5, a6, a7, a8, (uint64_t)v16);
      v17 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "delegate"));
      objc_msgSend(v17, "handleSessionPauseResult:", 0);

    }
    else if (v9 == 3)
    {
      sub_10025D0E4((uint64_t)a1, 4);
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport pauseSession_sync]", 512, CFSTR("Transport not running to pause"), a5, a6, a7, a8, (uint64_t)v16);
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
      v18 = NSLocalizedDescriptionKey;
      v11 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(25));
      v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      v19 = v12;
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v19, &v18, 1));
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v10, 25, v13));

      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "delegate"));
      objc_msgSend(v15, "handleSessionPauseResult:", v14);

    }
  }
}

void sub_10025CD24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 80) = 1;
  sub_10025CD38(*(_QWORD **)(a1 + 32), a2, a3, a4, a5, a6, a7, a8);
}

void sub_10025CD38(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  NSString *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  NSErrorUserInfoKey v16;
  void *v17;

  if (a1)
  {
    if (a1[1] == 5)
    {
      sub_10025D0E4((uint64_t)a1, 6);
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport resumeSession_sync]", 497, CFSTR("Transport not ready to resume session"), a5, a6, a7, a8, v15);
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
      v16 = NSLocalizedDescriptionKey;
      v10 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(25));
      v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      v17 = v11;
      v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v17, &v16, 1));
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v9, 25, v12));

      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "delegate"));
      objc_msgSend(v14, "handleSessionResumeResult:", v13);

    }
  }
}

void sub_10025CF38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  void *v11;
  NSString *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  NSErrorUserInfoKey v18;
  void *v19;

  v9 = *(_QWORD *)(a1 + 32);
  if ((*(_QWORD *)(v9 + 8) | 4) == 0xD)
  {
    objc_storeStrong((id *)(v9 + 88), *(id *)(a1 + 40));
    v10 = *(_QWORD *)(a1 + 32);
    if (*(_QWORD *)(v10 + 8) == 13)
    {
      *(_QWORD *)(v10 + 8) = 9;
      v10 = *(_QWORD *)(a1 + 32);
    }
    sub_10025D0E4(v10, 10);
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport startTransactionForKeyWithIdentifier:]_block_invoke", 162, CFSTR("Transport not ready to start transaction"), a5, a6, a7, a8, v17);
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
    v18 = NSLocalizedDescriptionKey;
    v12 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(25));
    v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    v19 = v13;
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v19, &v18, 1));
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v11, 25, v14));

    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
    objc_msgSend(v16, "handleTransactionStartResult:", v15);

  }
}

void sub_10025D0E4(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD v3[6];

  if (a1)
  {
    v2 = *(NSObject **)(a1 + 56);
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_10025D528;
    v3[3] = &unk_100304AD0;
    v3[4] = a1;
    v3[5] = a2;
    dispatch_async(v2, v3);
  }
}

void sub_10025D198(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10025D1A0(*(_QWORD *)(a1 + 32), a2, a3, a4, a5, a6, a7, a8, a9);
}

void sub_10025D1A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1)
  {
    if ((*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFFELL) == 0xA)
      sub_10025D0E4(a1, 12);
    else
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport endTransaction_sync]", 464, CFSTR("Transaction session is not running. Ignore request to end it"), a5, a6, a7, a8, a9);
  }
}

id sub_10025D234(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "readAPDU");
}

id sub_10025D2D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport sendApdu:]_block_invoke", 186, &stru_100316BD0, a5, a6, a7, a8, v10);
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "sendAPDU:", *(_QWORD *)(a1 + 40));
}

void sub_10025D378(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport reset]_block_invoke", 194, CFSTR("Reset requested"), a5, a6, a7, a8, v9);
  sub_10025D3B4(*(_QWORD *)(a1 + 32));
}

void sub_10025D3B4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (a1)
  {
    objc_msgSend(*(id *)(a1 + 40), "endSession");
    objc_msgSend(*(id *)(a1 + 40), "setDelegate:", 0);
    v2 = *(void **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;

    objc_msgSend(*(id *)(a1 + 24), "stopHceEmulation");
    objc_msgSend(*(id *)(a1 + 24), "stopTransactionEmulation");
    objc_msgSend(*(id *)(a1 + 24), "endSession");
    v3 = *(void **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;

    v4 = *(void **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;

    sub_10025DE24(a1, v5, v6, v7, v8, v9, v10, v11, v23);
    sub_10025E12C(a1, v12, v13, v14, v15, v16, v17, v18, v24);
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport cleanup]", 429, CFSTR("Resetting state to ready"), v19, v20, v21, v22, v25);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

id sub_10025D4D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport pairingEndedWithResult:]_block_invoke", 202, CFSTR("Report pairing result (%@) to BT transport"), a5, a6, a7, a8, *(_QWORD *)(a1 + 32));
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 24), "pairingEndedWithResult:", *(_QWORD *)(a1 + 32));
}

void sub_10025D528(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = a1 + 32;
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(v11 + 8);
  if (v10 <= *(_QWORD *)(v9 + 8))
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport setCurrentState:]_block_invoke", 218, CFSTR("Current state higher than new state. Do nothing"), a5, a6, a7, a8, a9);
  else
    sub_10025D558(v9, v10, a3, a4, a5, a6, a7, a8, a9);
}

void sub_10025D558(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  BluetoothHCEAndTransactionSession *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __CFString *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  _QWORD v48[5];

  if (a1)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport setCurrentState_sync:]", 227, CFSTR("Current state %ld, new state %ld"), a5, a6, a7, a8, *(_QWORD *)(a1 + 8));
    *(_DWORD *)(a1 + 16) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = a2;
    switch(a2)
    {
      case 0:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport setCurrentState_sync:]", 233, CFSTR("BT Pairing transport is ready"), v11, v12, v13, v14, a9);
        return;
      case 1:
        v15 = (void *)objc_claimAutoreleasedReturnValue(+[NFHardwareManager sharedHardwareManager](NFHardwareManager, "sharedHardwareManager"));
        v48[0] = _NSConcreteStackBlock;
        v48[1] = 3221225472;
        v48[2] = sub_10025D958;
        v48[3] = &unk_100304D88;
        v48[4] = a1;
        v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "startSecureElementManagerSession:", v48));
        v17 = *(void **)(a1 + 32);
        *(_QWORD *)(a1 + 32) = v16;

        v18 = -[BluetoothHCEAndTransactionSession initWithDelegate:]([BluetoothHCEAndTransactionSession alloc], "initWithDelegate:", a1);
        v19 = *(void **)(a1 + 24);
        *(_QWORD *)(a1 + 24) = v18;

        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport setCurrentState_sync:]", 259, CFSTR("Waiting to get SEM session"), v20, v21, v22, v23, v41);
        return;
      case 2:
        v24 = CFSTR("Starting BT Host Card Emulation");
        v25 = 264;
        goto LABEL_11;
      case 3:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport setCurrentState_sync:]", 269, CFSTR("BT Host Card Emulation session started"), v11, v12, v13, v14, v41);
        goto LABEL_21;
      case 4:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport setCurrentState_sync:]", 274, CFSTR("Pause Hce session"), v11, v12, v13, v14, v41);
        goto LABEL_14;
      case 5:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport setCurrentState_sync:]", 279, CFSTR("BT Host Card Emulation session paused"), v11, v12, v13, v14, v41);
        v42 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "delegate"));
        objc_msgSend(v42, "handleSessionPauseResult:", *(_QWORD *)(a1 + 48));

        return;
      case 6:
        v24 = CFSTR("Resuming Host Card Emulation");
        v25 = 284;
LABEL_11:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport setCurrentState_sync:]", v25, v24, v11, v12, v13, v14, v41);
        objc_msgSend(*(id *)(a1 + 24), "startHceEmulation");
        sub_10025DEFC(a1, v26, v27, v28, v29, v30, v31, v32, a9);
        return;
      case 7:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport setCurrentState_sync:]", 289, CFSTR("BT Host Card Emulation session resumed"), v11, v12, v13, v14, v41);
        v43 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "delegate"));
        objc_msgSend(v43, "handleSessionResumeResult:", 0);

        return;
      case 8:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport setCurrentState_sync:]", 294, CFSTR("Stopping BT Host Card Emulation session"), v11, v12, v13, v14, v41);
        objc_msgSend(*(id *)(a1 + 40), "endSession");
LABEL_14:
        objc_msgSend(*(id *)(a1 + 24), "stopHceEmulation");
        break;
      case 9:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport setCurrentState_sync:]", 300, CFSTR("BT Host Card Emulation session stopped"), v11, v12, v13, v14, v41);
        v44 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "delegate"));
        objc_msgSend(v44, "handleSessionEndResult:", *(_QWORD *)(a1 + 48));

        break;
      case 10:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport setCurrentState_sync:]", 305, CFSTR("Starting BT transaction session"), v11, v12, v13, v14, v41);
        _objc_msgSend(*(id *)(a1 + 24), "startTransactionEmulationForKeyWithIdentifier:", *(_QWORD *)(a1 + 88));
        break;
      case 11:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport setCurrentState_sync:]", 310, CFSTR("BT transaction session started"), v11, v12, v13, v14, v41);
        v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "delegate"));
        objc_msgSend(v33, "handleTransactionStartResult:", *(_QWORD *)(a1 + 48));

        sub_10025DAE0(a1, v34, v35, v36, v37, v38, v39, v40, a9);
        break;
      case 12:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport setCurrentState_sync:]", 316, CFSTR("BT transaction session stop requested"), v11, v12, v13, v14, v41);
        objc_msgSend(*(id *)(a1 + 24), "stopTransactionEmulation");
        sub_10025D0E4(a1, 13);
        break;
      case 13:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport setCurrentState_sync:]", 322, CFSTR("BT Transaction session stopped"), v11, v12, v13, v14, v41);
        v45 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "delegate"));
        objc_msgSend(v45, "handleTransactionEndResult:", *(_QWORD *)(a1 + 48));

        break;
      case 14:
        sub_10025D3B4(a1);
LABEL_21:
        v46 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "delegate"));
        objc_msgSend(v46, "handleSessionStartResult:", *(_QWORD *)(a1 + 48));

        break;
      case 15:
        sub_10025D3B4(a1);
        v47 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "delegate"));
        objc_msgSend(v47, "handleTransactionStartResult:", *(_QWORD *)(a1 + 48));

        break;
      default:
        return;
    }
  }
}

void sub_10025D958(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  id v9;
  id v10;
  _QWORD block[4];
  id v12;
  uint64_t v13;
  id v14;

  v5 = a2;
  v6 = a3;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(NSObject **)(v7 + 56);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10025DA08;
  block[3] = &unk_100304490;
  v12 = v6;
  v13 = v7;
  v14 = v5;
  v9 = v5;
  v10 = v6;
  dispatch_async(v8, block);

}

void sub_10025DA08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (*(_QWORD *)(a1 + 32))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport setCurrentState_sync:]_block_invoke_2", 241, CFSTR("startSecureElementManagerSession Error: %@"), a5, a6, a7, a8, *(_QWORD *)(a1 + 32));
    objc_storeStrong((id *)(*(_QWORD *)(a1 + 40) + 48), *(id *)(a1 + 32));
    v9 = *(_QWORD *)(a1 + 40);
    v10 = 14;
LABEL_5:
    sub_10025D0E4(v9, v10);
    return;
  }
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport setCurrentState_sync:]_block_invoke_2", 246, CFSTR("SecureElementManagerSession started"), a5, a6, a7, a8, v15);
  objc_msgSend(*(id *)(a1 + 48), "setDelegate:", *(_QWORD *)(a1 + 40));
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 40) + 40), *(id *)(a1 + 48));
  v9 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(v9 + 8) == 1)
  {
    v10 = 2;
    goto LABEL_5;
  }
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport setCurrentState_sync:]_block_invoke_2", 250, CFSTR("state changed while we were trying to get SEM session. cleanup to make sure we are not leaking session"), v11, v12, v13, v14, v16);
  sub_10025D3B4(*(_QWORD *)(a1 + 40));
}

void sub_10025DAE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD block[5];

  if (a1)
  {
    if (*(_QWORD *)(a1 + 64))
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport startEndTransactionTimer]", 343, CFSTR("endTransactionTimer already running. Ignore another start"), a5, a6, a7, a8, a9);
    }
    else
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10025DB84;
      block[3] = &unk_100302AA0;
      block[4] = a1;
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport startEndTransactionTimer]", 356, CFSTR("endTransactionTimer started"), v9, v10, v11, v12, v13);
    }
  }
}

void sub_10025DB84(uint64_t a1)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD v6[5];

  v2 = sub_10025DC10(*(_QWORD *)(a1 + 32));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10025DC8C;
  v6[3] = &unk_10030EFF8;
  v6[4] = *(_QWORD *)(a1 + 32);
  v3 = objc_claimAutoreleasedReturnValue(+[NSTimer scheduledTimerWithTimeInterval:repeats:block:](NSTimer, "scheduledTimerWithTimeInterval:repeats:block:", 0, v6, v2));
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(v4 + 64);
  *(_QWORD *)(v4 + 64) = v3;

}

double sub_10025DC10(uint64_t a1)
{
  id v1;
  double v2;
  double v3;
  double v4;

  if (!a1)
    return 0.0;
  v1 = objc_msgSend(objc_alloc((Class)NSUserDefaults), "initWithSuiteName:", CFSTR("com.apple.seserviced"));
  objc_msgSend(v1, "doubleForKey:", CFSTR("OPTransactionTimeout"));
  if (v2 < 1.0)
    v2 = 1.0;
  v3 = fmin(v2, 30.0);
  if (v2 <= 1.0)
    v4 = 20.0;
  else
    v4 = v3;

  return v4;
}

void sub_10025DC8C(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD block[5];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 56);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10025DCE4;
  block[3] = &unk_100302AA0;
  block[4] = v1;
  dispatch_async(v2, block);
}

void sub_10025DCE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  NSString *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  NSErrorUserInfoKey v27;
  void *v28;

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport startEndTransactionTimer]_block_invoke_3", 349, CFSTR("Transaction will be ended due to time out."), a5, a6, a7, a8, v25);
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
  v27 = NSLocalizedDescriptionKey;
  v10 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(23));
  v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  v28 = v11;
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v28, &v27, 1));
  v13 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v9, 23, v12));
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(void **)(v14 + 48);
  *(_QWORD *)(v14 + 48) = v13;

  sub_10025D1A0(*(_QWORD *)(a1 + 32), v16, v17, v18, v19, v20, v21, v22, v26);
  v23 = *(_QWORD *)(a1 + 32);
  v24 = *(void **)(v23 + 64);
  *(_QWORD *)(v23 + 64) = 0;

}

void sub_10025DE24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD block[5];

  if (a1)
  {
    if (*(_QWORD *)(a1 + 64))
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10025DEAC;
      block[3] = &unk_100302AA0;
      block[4] = a1;
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport cancelEndTransactionTimer]", 362, CFSTR("endTransactionTimer is not running."), a5, a6, a7, a8, a9);
    }
  }
}

void sub_10025DEAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "invalidate");
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(void **)(v10 + 64);
  *(_QWORD *)(v10 + 64) = 0;

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport cancelEndTransactionTimer]_block_invoke", 368, CFSTR("endTransactionTimer cancelled"), v12, v13, v14, v15, a9);
}

void sub_10025DEFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __CFString *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD block[5];

  if (a1)
  {
    if (!*(_BYTE *)(a1 + 80))
    {
      v9 = CFSTR("A timeout was not requested for this hce session");
      v10 = 376;
      goto LABEL_6;
    }
    if (*(_QWORD *)(a1 + 72))
    {
      v9 = CFSTR("A hceSessionTimer already running. Ignore another start");
      v10 = 381;
LABEL_6:
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport startHceTimer]", v10, v9, a5, a6, a7, a8, a9);
      return;
    }
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10025DFC4;
    block[3] = &unk_100302AA0;
    block[4] = a1;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport startHceTimer]", 399, CFSTR("hceSessionTimer started"), v11, v12, v13, v14, v15);
  }
}

void sub_10025DFC4(uint64_t a1)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD v6[5];

  v2 = sub_10021C708(*(_QWORD *)(a1 + 32));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10025E050;
  v6[3] = &unk_10030EFF8;
  v6[4] = *(_QWORD *)(a1 + 32);
  v3 = objc_claimAutoreleasedReturnValue(+[NSTimer scheduledTimerWithTimeInterval:repeats:block:](NSTimer, "scheduledTimerWithTimeInterval:repeats:block:", 0, v6, v2));
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(v4 + 72);
  *(_QWORD *)(v4 + 72) = v3;

}

void sub_10025E050(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD block[5];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 56);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10025E0A8;
  block[3] = &unk_100302AA0;
  block[4] = v1;
  dispatch_async(v2, block);
}

void sub_10025E0A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;

  if ((*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) | 4) == 6)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport startHceTimer]_block_invoke_3", 389, CFSTR("Ending hce session due to time out."), a5, a6, a7, a8, v19);
    sub_10025C8A8(*(_QWORD *)(a1 + 32), v10, v11, v12, v13, v14, v15, v16, v20);
    v17 = *(_QWORD *)(a1 + 32);
    v18 = *(void **)(v17 + 72);
    *(_QWORD *)(v17 + 72) = 0;

  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport startHceTimer]_block_invoke_3", 393, CFSTR("hce session timer fired, but we had moved to next state. So Ignore"), a5, a6, a7, a8, a9);
  }
}

void sub_10025E12C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD block[5];

  if (a1)
  {
    if (*(_QWORD *)(a1 + 72))
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10025E1B4;
      block[3] = &unk_100302AA0;
      block[4] = a1;
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport cancelHceTimer]", 405, CFSTR("hceSessionTimer is not running."), a5, a6, a7, a8, a9);
    }
  }
}

void sub_10025E1B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "invalidate");
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(void **)(v10 + 72);
  *(_QWORD *)(v10 + 72) = 0;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 80) = 0;
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport cancelHceTimer]_block_invoke", 412, CFSTR("hceSessionTimer cancelled"), v12, v13, v14, v15, a9);
}

void sub_10025E288(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;
  BOOL v11;
  uint64_t v12;
  int v13;
  NSString *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  NSErrorUserInfoKey v21;
  void *v22;

  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(*(_QWORD *)(a1 + 40) + 40))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport secureElementManagerSessionDidEndUnexpectedly:]_block_invoke", 535, CFSTR("Received SessionDidEndUnexpectedly callback for active session. Bailing out."), a5, a6, a7, a8, v20);
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
    v11 = *(_BYTE *)(*(_QWORD *)(a1 + 40) + 80) == 0;
    if (*(_BYTE *)(*(_QWORD *)(a1 + 40) + 80))
      v12 = 23;
    else
      v12 = 24;
    v21 = NSLocalizedDescriptionKey;
    if (v11)
      v13 = 24;
    else
      v13 = 23;
    v14 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(v13));
    v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    v22 = v15;
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v22, &v21, 1));
    v17 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v10, v12, v16));
    v18 = *(_QWORD *)(a1 + 40);
    v19 = *(void **)(v18 + 48);
    *(_QWORD *)(v18 + 48) = v17;

    sub_10025D0E4(*(_QWORD *)(a1 + 40), 9);
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport secureElementManagerSessionDidEndUnexpectedly:]_block_invoke", 531, CFSTR("Received SessionDidEndUnexpectedly callback, but not for active session. Ignoring"), a5, a6, a7, a8, a9);
  }
}

void sub_10025E4A4(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v2, "handleIncomingApdu:error:", *(_QWORD *)(a1 + 40), 0);

}

void sub_10025E590(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __CFString *v9;
  uint64_t v10;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;

  if (*(_QWORD *)(a1 + 32) != *(_QWORD *)(*(_QWORD *)(a1 + 40) + 24))
  {
    v9 = CFSTR("Received DidStartTransaction callback, but not for active session. Ignoring");
    v10 = 556;
LABEL_8:
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport btTxnSessionDidStartTransaction:result:]_block_invoke", v10, v9, a5, a6, a7, a8, a9);
    return;
  }
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport btTxnSessionDidStartTransaction:result:]_block_invoke", 559, CFSTR("Received DidStartTransaction callback for active session."), a5, a6, a7, a8, v18);
  v12 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(v12 + 8) != 10)
  {
    v9 = CFSTR("We are not waiting for transaction to start. Ignore.");
    v10 = 566;
    goto LABEL_8;
  }
  if (*(_QWORD *)(a1 + 48))
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "userInfo"));
    v15 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v13, 24, v14));
    v16 = *(_QWORD *)(a1 + 40);
    v17 = *(void **)(v16 + 48);
    *(_QWORD *)(v16 + 48) = v15;

    v12 = *(_QWORD *)(a1 + 40);
  }
  sub_10025D0E4(v12, 11);
}

void sub_10025E750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __CFString *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;

  if (*(_QWORD *)(a1 + 32) != *(_QWORD *)(*(_QWORD *)(a1 + 40) + 24))
  {
    v9 = CFSTR("Received DidEndTransaction callback, but not for active session. Ignoring");
    v10 = 575;
LABEL_8:
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport btTxnSessionDidEndTransaction:result:]_block_invoke", v10, v9, a5, a6, a7, a8, a9);
    return;
  }
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport btTxnSessionDidEndTransaction:result:]_block_invoke", 578, CFSTR("Received DidEndTransaction callback for active session."), a5, a6, a7, a8, v25);
  sub_10025DE24(*(_QWORD *)(a1 + 40), v12, v13, v14, v15, v16, v17, v18, v26);
  v19 = *(_QWORD *)(a1 + 40);
  if ((unint64_t)(*(_QWORD *)(v19 + 8) - 11) > 1)
  {
    v9 = CFSTR("We are not waiting for transaction to stop. Ignore.");
    v10 = 586;
    goto LABEL_8;
  }
  if (*(_QWORD *)(a1 + 48))
  {
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "userInfo"));
    v22 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v20, 24, v21));
    v23 = *(_QWORD *)(a1 + 40);
    v24 = *(void **)(v23 + 48);
    *(_QWORD *)(v23 + 48) = v22;

    v19 = *(_QWORD *)(a1 + 40);
  }
  sub_10025D0E4(v19, 12);
}

void sub_10025E91C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;

  v9 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(v9 + 24))
  {
    if ((*(_QWORD *)(v9 + 8) | 4) == 6)
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport btHceTxnSessionDidStartEmulation:result:]_block_invoke", 600, CFSTR("Received DidStartEmulation callback for Hce session."), a5, a6, a7, a8, v30);
      sub_10025E12C(*(_QWORD *)(a1 + 40), v11, v12, v13, v14, v15, v16, v17, v31);
      if (*(_QWORD *)(a1 + 48))
      {
        v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "userInfo"));
        v20 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v18, 24, v19));
        v21 = *(_QWORD *)(a1 + 40);
        v22 = *(void **)(v21 + 48);
        *(_QWORD *)(v21 + 48) = v20;

      }
      v23 = *(_QWORD *)(a1 + 40);
      if (*(_QWORD *)(v23 + 8) == 2)
        v24 = 3;
      else
        v24 = 7;
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport btHceTxnSessionDidStartEmulation:result:]_block_invoke", 611, CFSTR("DidStartEmulation callback received  in wrong state."), a5, a6, a7, a8, v30);
      v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "userInfo"));
      v27 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v25, 24, v26));
      v28 = *(_QWORD *)(a1 + 40);
      v29 = *(void **)(v28 + 48);
      *(_QWORD *)(v28 + 48) = v27;

      v23 = *(_QWORD *)(a1 + 40);
      v24 = 9;
    }
    sub_10025D0E4(v23, v24);
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport btHceTxnSessionDidStartEmulation:result:]_block_invoke", 595, CFSTR("Received DidStartEmulation callback, but not for active session. Ignoring"), a5, a6, a7, a8, a9);
  }
}

void sub_10025EB60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __CFString *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;

  if (*(_QWORD *)(a1 + 32) != *(_QWORD *)(*(_QWORD *)(a1 + 40) + 24))
  {
    v9 = CFSTR("Received DidStopEmulation callback, but not for active session. Ignoring");
    v10 = 622;
LABEL_3:
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport btHceTxnSessionDidStopEmulation:result:]_block_invoke", v10, v9, a5, a6, a7, a8, a9);
    return;
  }
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport btHceTxnSessionDidStopEmulation:result:]_block_invoke", 625, CFSTR("Received DidStopEmulation callback for active session."), a5, a6, a7, a8, v20);
  v12 = *(_QWORD *)(a1 + 40);
  v13 = *(_QWORD *)(v12 + 8);
  if ((unint64_t)(v13 - 3) < 2)
  {
    v14 = 5;
  }
  else if (v13 == 12)
  {
    v14 = 13;
  }
  else
  {
    if (v13 == 13)
    {
      v9 = CFSTR("Transaction emulation is already stopped. No-op.");
      v10 = 631;
      goto LABEL_3;
    }
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport btHceTxnSessionDidStopEmulation:result:]_block_invoke", 633, CFSTR("DidStopEmulation callback received  in wrong state."), a5, a6, a7, a8, v21);
    if (*(_QWORD *)(a1 + 48))
    {
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "userInfo"));
      v17 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v15, 24, v16));
      v18 = *(_QWORD *)(a1 + 40);
      v19 = *(void **)(v18 + 48);
      *(_QWORD *)(v18 + 48) = v17;

    }
    v12 = *(_QWORD *)(a1 + 40);
    v14 = 9;
  }
  sub_10025D0E4(v12, v14);
}

void sub_10025ED58(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  if (a1[4] == *(_QWORD *)(a1[5] + 24))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport btHceTxnSessionDidEndUnexpectedly:result:]_block_invoke", 649, CFSTR("Received DidEndUnexpectedly callback for active session. Result - %@"), a5, a6, a7, a8, a1[6]);
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1[6], "userInfo"));
    v12 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v10, 24, v11));
    v13 = a1[5];
    v14 = *(void **)(v13 + 48);
    *(_QWORD *)(v13 + 48) = v12;

    v15 = a1[5];
    if (*(uint64_t *)(v15 + 8) > 8)
      v16 = 13;
    else
      v16 = 9;
    sub_10025D0E4(v15, v16);
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport btHceTxnSessionDidEndUnexpectedly:result:]_block_invoke", 646, CFSTR("Received DidEndUnexpectedly callback, but not for active session. Ignoring"), a5, a6, a7, a8, a9);
  }
}

void sub_10025EEE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;
  NSString *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSErrorUserInfoKey v20;
  void *v21;

  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(*(_QWORD *)(a1 + 40) + 24))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport btHceTxnSessionRadioIsDisabled:]_block_invoke", 668, CFSTR("Received Radio disabled callback for active session"), a5, a6, a7, a8, v19);
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
    v20 = NSLocalizedDescriptionKey;
    v11 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(29));
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    v21 = v12;
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v21, &v20, 1));
    v14 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v10, 29, v13));
    v15 = *(_QWORD *)(a1 + 40);
    v16 = *(void **)(v15 + 48);
    *(_QWORD *)(v15 + 48) = v14;

    v17 = *(_QWORD *)(a1 + 40);
    if (*(uint64_t *)(v17 + 8) > 8)
      v18 = 13;
    else
      v18 = 9;
    sub_10025D0E4(v17, v18);
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport btHceTxnSessionRadioIsDisabled:]_block_invoke", 664, CFSTR("Received Radio Disabled callback, but not for active session. Ignoring"), a5, a6, a7, a8, a9);
  }
}

void sub_10025F0FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;
  NSString *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSErrorUserInfoKey v20;
  void *v21;

  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(*(_QWORD *)(a1 + 40) + 24))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport btHceTxnSessionUwbUnavailable:]_block_invoke", 687, CFSTR("Received UWB unavailable callback for active session"), a5, a6, a7, a8, v19);
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing"));
    v20 = NSLocalizedDescriptionKey;
    v11 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(30));
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    v21 = v12;
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v21, &v20, 1));
    v14 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v10, 30, v13));
    v15 = *(_QWORD *)(a1 + 40);
    v16 = *(void **)(v15 + 48);
    *(_QWORD *)(v15 + 48) = v14;

    v17 = *(_QWORD *)(a1 + 40);
    if (*(uint64_t *)(v17 + 8) > 8)
      v18 = 13;
    else
      v18 = 9;
    sub_10025D0E4(v17, v18);
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport btHceTxnSessionUwbUnavailable:]_block_invoke", 683, CFSTR("Received UWB unavailable, but not for active session. Ignoring"), a5, a6, a7, a8, a9);
  }
}

void sub_10025F348(uint64_t a1)
{
  objc_opt_self(a1);
  if (qword_100354980 != -1)
    dispatch_once(&qword_100354980, &stru_10030FD00);
}

void sub_10025F384(id a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t vars0;

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlOwnerSharingManager initOsManagerArray]_block_invoke", 110, CFSTR("OwnerSharingManager: initializing osManagerArray"), v1, v2, v3, v4, vars0);
  v5 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v6 = (void *)qword_100354978;
  qword_100354978 = v5;

}

void sub_10025F3CC(uint64_t a1)
{
  void *v1;
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  objc_opt_self(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableIndexSet indexSet](NSMutableIndexSet, "indexSet"));
  v2 = (id)qword_100354978;
  objc_sync_enter(v2);
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v3 = (id)qword_100354978;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v4)
  {
    v5 = 0;
    v6 = *(_QWORD *)v10;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v10 != v6)
          objc_enumerationMutation(v3);
        v8 = *(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)v7);
        if (v8 && *(_QWORD *)(v8 + 8) == 14)
          objc_msgSend(v1, "addIndex:", (char *)v7 + v5, (_QWORD)v9);
        v7 = (char *)v7 + 1;
      }
      while (v4 != v7);
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      v5 += (uint64_t)v7;
    }
    while (v4);
  }

  objc_msgSend((id)qword_100354978, "removeObjectsAtIndexes:", v1);
  objc_sync_exit(v2);

}

void sub_10025F52C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id *sub_10025F554(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v4;
  id v8;
  id v9;
  int v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  id v17;
  unsigned int v18;
  void *v19;
  void *v20;
  id v21;
  unsigned __int8 v22;
  id v23;
  id *v24;
  BOOL v25;
  int v26;
  uint64_t v28;
  void *v29;
  id obj;
  id v31;
  void *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[128];

  v8 = a2;
  v9 = a3;
  objc_opt_self(a1);
  v28 = a4;
  v29 = v9;
  if (!v9 || a4)
  {
    if (a4 == 1)
    {
      v31 = v9;
      v32 = 0;
      v10 = 1;
    }
    else
    {
      v10 = 0;
      v31 = 0;
      v32 = 0;
    }
  }
  else
  {
    v31 = 0;
    v32 = (void *)IDSCopyRawAddressForDestination(v9);
    v10 = 0;
  }
  sub_10025F348((uint64_t)KmlOwnerSharingManager);
  sub_10025F3CC((uint64_t)KmlOwnerSharingManager);
  obj = (id)qword_100354978;
  objc_sync_enter(obj);
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v11 = (id)qword_100354978;
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v33, v37, 16);
  if (v12)
  {
    v13 = *(_QWORD *)v34;
LABEL_9:
    v14 = 0;
    while (1)
    {
      if (*(_QWORD *)v34 != v13)
        objc_enumerationMutation(v11);
      if (v8)
      {
        v15 = *(_QWORD **)(*((_QWORD *)&v33 + 1) + 8 * v14);
        v16 = v15 ? (void *)v15[25] : 0;
        v17 = v16;
        v18 = objc_msgSend(v17, "isEqualToString:", v8);

        if (v18)
        {
          if (v32)
          {
            if (v15)
              v19 = (void *)v15[26];
            else
              v19 = 0;
            v4 = v19;
            if (objc_msgSend(v4, "isEqualToString:", v32))
            {

LABEL_36:
              v24 = v15;

              if (v15)
                goto LABEL_46;
              goto LABEL_37;
            }
            if (v31)
            {
LABEL_23:
              if (v15)
                v20 = (void *)v15[27];
              else
                v20 = 0;
              v21 = v20;
              v22 = objc_msgSend(v21, "isEqualToString:", v31);

              if (v32)
              if ((v22 & 1) != 0)
                goto LABEL_36;
              goto LABEL_28;
            }

          }
          else if (v31)
          {
            goto LABEL_23;
          }
        }
      }
LABEL_28:
      if (v12 == (id)++v14)
      {
        v23 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v33, v37, 16);
        v12 = v23;
        if (v23)
          goto LABEL_9;
        break;
      }
    }
  }

LABEL_37:
  if (v28)
    v25 = 1;
  else
    v25 = v32 == 0;
  v26 = v10;
  if (!v25)
    v26 = 1;
  if (v26 == 1)
  {
    v24 = sub_10025F860((id *)[KmlOwnerSharingManager alloc], v8, v32, v31);
    if (v24)
      objc_msgSend((id)qword_100354978, "addObject:", v24);
  }
  else
  {
    v24 = 0;
  }
LABEL_46:
  objc_sync_exit(obj);

  return v24;
}

void sub_10025F838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

id *sub_10025F860(id *a1, void *a2, void *a3, void *a4)
{
  id v8;
  id v9;
  id v10;
  id *v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  id v26;
  id v27;
  NSObject *v28;
  id v29;
  uint64_t v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  objc_super v39;

  v8 = a2;
  v9 = a3;
  v10 = a4;
  if (a1)
  {
    v39.receiver = a1;
    v39.super_class = (Class)KmlOwnerSharingManager;
    v11 = (id *)objc_msgSendSuper2(&v39, "init");
    a1 = v11;
    if (v11)
    {
      v12 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v11[24], "UUIDString")));
      v13 = objc_msgSend(v12, "UTF8String");
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 374, (uint64_t)v13, CFSTR("let's init"), v14, v15, v16, (uint64_t)v39.receiver);

      a1[1] = 0;
      objc_storeStrong(a1 + 25, a2);
      v17 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
      v18 = a1[28];
      a1[28] = (id)v17;

      v19 = objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
      v20 = a1[24];
      a1[24] = (id)v19;

      objc_storeStrong(a1 + 26, a3);
      objc_storeStrong(a1 + 27, a4);
      if (a1[26])
      {
        v21 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
        v22 = a1[14];
        a1[14] = (id)v21;

        v23 = a1[15];
        a1[15] = 0;
      }
      else
      {
        v24 = a1[14];
        a1[14] = 0;

        v25 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
        v26 = a1[15];
        a1[15] = (id)v25;

        if (a1[27])
          goto LABEL_7;
        v38 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1[24], "UUIDString"));
        v23 = a1[27];
        a1[27] = (id)v38;
      }

LABEL_7:
      v27 = KmlSignpostLogger();
      v28 = objc_claimAutoreleasedReturnValue(v27);
      a1[20] = (id)os_signpost_id_make_with_pointer(v28, a1[24]);

      *((_BYTE *)a1 + 168) = 0;
      a1[12] = (id)1;
      *((_BYTE *)a1 + 128) = -2;
      *((_BYTE *)a1 + 88) = 0;
      v29 = sub_100261288((uint64_t)KmlOwnerSharingManager);
      v30 = objc_claimAutoreleasedReturnValue(v29);
      v31 = a1[10];
      a1[10] = (id)v30;

      v32 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[24], "UUIDString")));
      v33 = objc_msgSend(v32, "UTF8String");
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 408, (uint64_t)v33, CFSTR("ready to roll"), v34, v35, v36, (uint64_t)v39.receiver);

    }
  }

  return a1;
}

_QWORD *sub_10025FA94(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD *v7;
  id v8;
  void *v9;
  _QWORD *v10;
  void *v11;
  id v12;
  unsigned int v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  unsigned __int8 v21;
  id v22;
  id v24;
  id obj;
  uint64_t v26;
  void *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[128];
  _BYTE v37[128];

  v5 = a2;
  v6 = a3;
  objc_opt_self(a1);
  v7 = 0;
  v27 = v5;
  if (v5 && v6)
  {
    sub_10025F348((uint64_t)KmlOwnerSharingManager);
    sub_10025F3CC((uint64_t)KmlOwnerSharingManager);
    v24 = (id)qword_100354978;
    objc_sync_enter(v24);
    v32 = 0u;
    v33 = 0u;
    v34 = 0u;
    v35 = 0u;
    obj = (id)qword_100354978;
    v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v32, v37, 16);
    if (v8)
    {
      v26 = *(_QWORD *)v33;
      do
      {
        v9 = 0;
        do
        {
          if (*(_QWORD *)v33 != v26)
            objc_enumerationMutation(obj);
          v10 = *(_QWORD **)(*((_QWORD *)&v32 + 1) + 8 * (_QWORD)v9);
          if (v10)
            v11 = (void *)v10[25];
          else
            v11 = 0;
          v12 = v11;
          v13 = objc_msgSend(v12, "isEqualToString:", v27);

          if (v13)
          {
            v30 = 0u;
            v31 = 0u;
            v28 = 0u;
            v29 = 0u;
            if (v10)
              v14 = (void *)v10[28];
            else
              v14 = 0;
            v15 = v14;
            v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v28, v36, 16);
            if (v16)
            {
              v17 = *(_QWORD *)v29;
LABEL_15:
              v18 = 0;
              while (1)
              {
                if (*(_QWORD *)v29 != v17)
                  objc_enumerationMutation(v15);
                v19 = sub_10020CAB4(*(_QWORD *)(*((_QWORD *)&v28 + 1) + 8 * v18));
                v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
                v21 = objc_msgSend(v20, "isEqualToString:", v6);

                if ((v21 & 1) != 0)
                  break;
                if (v16 == (id)++v18)
                {
                  v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v28, v36, 16);
                  if (v16)
                    goto LABEL_15;
                  goto LABEL_21;
                }
              }
              v7 = v10;

              if (v10)
                goto LABEL_29;
            }
            else
            {
LABEL_21:

            }
          }
          v9 = (char *)v9 + 1;
        }
        while (v9 != v8);
        v22 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v32, v37, 16);
        v8 = v22;
      }
      while (v22);
    }
    v7 = 0;
LABEL_29:

    objc_sync_exit(v24);
  }

  return v7;
}

void sub_10025FD10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

id *sub_10025FD40(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  void *v10;
  id v11;
  unsigned int v12;
  id v13;
  id *v14;
  id *v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];

  v3 = a2;
  objc_opt_self(a1);
  sub_10025F348((uint64_t)KmlOwnerSharingManager);
  sub_10025F3CC((uint64_t)KmlOwnerSharingManager);
  v4 = (id)qword_100354978;
  objc_sync_enter(v4);
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v5 = (id)qword_100354978;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v18;
    while (2)
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v18 != v7)
          objc_enumerationMutation(v5);
        if (v3)
        {
          v9 = *(_QWORD **)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)v8);
          v10 = v9 ? (void *)v9[24] : 0;
          v11 = v10;
          v12 = objc_msgSend(v11, "isEqual:", v3, (_QWORD)v17);

          if (v12)
          {
            v15 = v9;
            if (!v9)
              goto LABEL_14;
            v14 = v15;
            *((_BYTE *)v15 + 168) = 1;

            goto LABEL_18;
          }
        }
        v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      v13 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
      v6 = v13;
      if (v13)
        continue;
      break;
    }
  }
LABEL_14:

  v14 = sub_10025FF24((id *)[KmlOwnerSharingManager alloc], v3);
  if (v14)
    objc_msgSend((id)qword_100354978, "addObject:", v14);
LABEL_18:
  objc_sync_exit(v4);

  return v14;
}

void sub_10025FEFC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id *sub_10025FF24(id *a1, void *a2)
{
  id v4;
  const void **v5;
  const void **v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  NSObject *v18;
  id v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  objc_super v28;

  v4 = a2;
  if (a1)
  {
    v28.receiver = a1;
    v28.super_class = (Class)KmlOwnerSharingManager;
    v5 = (const void **)objc_msgSendSuper2(&v28, "init");
    a1 = (id *)v5;
    if (v5)
    {
      v6 = v5 + 24;
      v7 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v5[24], "UUIDString")));
      v8 = objc_msgSend(v7, "UTF8String");
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 417, (uint64_t)v8, CFSTR("let's init"), v9, v10, v11, (uint64_t)v28.receiver);

      a1[1] = 0;
      v12 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
      v13 = a1[28];
      a1[28] = (id)v12;

      v14 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
      v15 = a1[14];
      a1[14] = (id)v14;

      v16 = a1[15];
      a1[15] = 0;

      objc_storeStrong(a1 + 24, a2);
      v17 = KmlSignpostLogger();
      v18 = objc_claimAutoreleasedReturnValue(v17);
      a1[20] = (id)os_signpost_id_make_with_pointer(v18, *v6);

      *((_BYTE *)a1 + 168) = 1;
      a1[12] = (id)2;
      *((_BYTE *)a1 + 128) = -2;
      *((_BYTE *)a1 + 88) = 0;
      v19 = sub_100261288((uint64_t)KmlOwnerSharingManager);
      v20 = objc_claimAutoreleasedReturnValue(v19);
      v21 = a1[10];
      a1[10] = (id)v20;

      v22 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend((id)*v6, "UUIDString")));
      v23 = objc_msgSend(v22, "UTF8String");
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 442, (uint64_t)v23, CFSTR("ready to roll"), v24, v25, v26, (uint64_t)v28.receiver);

    }
  }

  return a1;
}

id sub_1002600BC(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *i;
  _QWORD *v6;
  _QWORD *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  unsigned __int8 v14;
  id v15;
  id v17;
  id obj;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];
  _BYTE v29[128];

  v3 = a2;
  objc_opt_self(a1);
  sub_10025F348((uint64_t)KmlOwnerSharingManager);
  sub_10025F3CC((uint64_t)KmlOwnerSharingManager);
  v17 = (id)qword_100354978;
  objc_sync_enter(v17);
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  obj = (id)qword_100354978;
  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v24, v29, 16);
  if (v4)
  {
    v19 = *(_QWORD *)v25;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v25 != v19)
          objc_enumerationMutation(obj);
        v6 = *(_QWORD **)(*((_QWORD *)&v24 + 1) + 8 * (_QWORD)i);
        v20 = 0u;
        v21 = 0u;
        v22 = 0u;
        v23 = 0u;
        if (v6)
          v6 = (_QWORD *)v6[28];
        v7 = v6;
        v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v20, v28, 16);
        if (v8)
        {
          v9 = *(_QWORD *)v21;
LABEL_10:
          v10 = 0;
          while (1)
          {
            if (*(_QWORD *)v21 != v9)
              objc_enumerationMutation(v7);
            v11 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * v10);
            v12 = sub_10020CAB4((uint64_t)v11);
            v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
            v14 = objc_msgSend(v13, "isEqualToString:", v3);

            if ((v14 & 1) != 0)
              break;
            if (v8 == (id)++v10)
            {
              v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v20, v28, 16);
              if (v8)
                goto LABEL_10;
              goto LABEL_16;
            }
          }
          v15 = v11;

          if (v15)
            goto LABEL_21;
        }
        else
        {
LABEL_16:

        }
      }
      v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v24, v29, 16);
    }
    while (v4);
  }
  v15 = 0;
LABEL_21:

  objc_sync_exit(v17);
  return v15;
}

void sub_1002602D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_100260308(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  _QWORD *v12;
  void *v13;
  id v14;
  uint64_t v15;
  void *v16;
  unsigned __int8 v17;
  id v18;
  id *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  void *i;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  unsigned __int8 v37;
  id obj;
  id v39;
  id v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _BYTE v49[128];
  _BYTE v50[128];

  v39 = a2;
  v7 = a3;
  v40 = a4;
  objc_opt_self(a1);
  sub_10025F348((uint64_t)KmlOwnerSharingManager);
  obj = (id)qword_100354978;
  objc_sync_enter(obj);
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v8 = (id)qword_100354978;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v45, v50, 16);
  if (v9)
  {
    v10 = *(_QWORD *)v46;
    while (2)
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v46 != v10)
          objc_enumerationMutation(v8);
        v12 = *(_QWORD **)(*((_QWORD *)&v45 + 1) + 8 * (_QWORD)v11);
        if (v12)
          v13 = (void *)v12[24];
        else
          v13 = 0;
        v14 = v13;
        v15 = sub_1000117DC((uint64_t)v7);
        v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
        v17 = objc_msgSend(v14, "isEqual:", v16);

        if ((v17 & 1) != 0)
        {
          v19 = v12;

          if (!v12)
            goto LABEL_25;
          v20 = sub_1000117DC((uint64_t)v7);
          v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlOwnerSharingManager regenerateOwnerSharingForEndpoint:config:updater:]", 280, CFSTR("Sharing Manager for  %@ already exists"), v22, v23, v24, v25, (uint64_t)v21);

          v43 = 0u;
          v44 = 0u;
          v41 = 0u;
          v42 = 0u;
          v26 = v19[28];
          v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v41, v49, 16);
          if (v27)
          {
            v28 = *(_QWORD *)v42;
            while (2)
            {
              for (i = 0; i != v27; i = (char *)i + 1)
              {
                if (*(_QWORD *)v42 != v28)
                  objc_enumerationMutation(v26);
                v30 = *(_QWORD *)(*((_QWORD *)&v41 + 1) + 8 * (_QWORD)i);
                v31 = sub_10020CAB4(v30);
                v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
                if (v32)
                {
                  v33 = sub_10021728C((uint64_t)v7);
                  v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
                  v35 = sub_10020CAB4(v30);
                  v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
                  v37 = objc_msgSend(v34, "isEqualToString:", v36);

                  if ((v37 & 1) != 0)
                  {

                    goto LABEL_29;
                  }
                }
              }
              v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v41, v49, 16);
              if (v27)
                continue;
              break;
            }
          }

          goto LABEL_27;
        }
        v11 = (char *)v11 + 1;
      }
      while (v9 != v11);
      v18 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v45, v50, 16);
      v9 = v18;
      if (v18)
        continue;
      break;
    }
  }

LABEL_25:
  v19 = sub_10026065C((id *)[KmlOwnerSharingManager alloc], v39, v7, v40);
  if (v19)
  {
    objc_msgSend((id)qword_100354978, "addObject:", v19);
LABEL_27:
    sub_1002609A4((uint64_t)v19, v7);
  }
LABEL_29:
  objc_sync_exit(obj);

}

void sub_100260628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

id *sub_10026065C(id *a1, void *a2, void *a3, void *a4)
{
  id v8;
  id v9;
  id v10;
  id *v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  KmlDeviceConfigurationData *v49;
  void *v50;
  uint64_t v51;
  id v52;
  id v53;
  NSObject *v54;
  void *v55;
  void *v56;
  id v57;
  uint64_t v58;
  id v59;
  id v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  objc_super v66;

  v8 = a2;
  v9 = a3;
  v10 = a4;
  if (a1)
  {
    v66.receiver = a1;
    v66.super_class = (Class)KmlOwnerSharingManager;
    v11 = (id *)objc_msgSendSuper2(&v66, "init");
    a1 = v11;
    if (v11)
    {
      v12 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v11[24], "UUIDString")));
      v13 = objc_msgSend(v12, "UTF8String");
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 451, (uint64_t)v13, CFSTR("let's init"), v14, v15, v16, (uint64_t)v66.receiver);

      if (sub_10022ADD4((uint64_t)v9) == 3)
        a1[1] = (id)8;
      objc_storeStrong(a1 + 2, a2);
      v17 = sub_10021804C((uint64_t)[KmlVersions alloc], a1[2]);
      v18 = a1[19];
      a1[19] = (id)v17;

      v19 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1[2], "publicKeyIdentifier"));
      v20 = a1[3];
      a1[3] = (id)v19;

      v21 = kmlUtilHexStringFromData(a1[3]);
      v22 = objc_claimAutoreleasedReturnValue(v21);
      v23 = a1[25];
      a1[25] = (id)v22;

      v24 = sub_10002BA88((uint64_t)v9);
      v25 = objc_claimAutoreleasedReturnValue(v24);
      v26 = a1[26];
      a1[26] = (id)v25;

      v27 = sub_100016AC8((uint64_t)v9);
      v28 = objc_claimAutoreleasedReturnValue(v27);
      v29 = a1[27];
      a1[27] = (id)v28;

      v30 = sub_10022ADBC((uint64_t)v9);
      v31 = objc_claimAutoreleasedReturnValue(v30);
      v32 = a1[5];
      a1[5] = (id)v31;

      v33 = sub_1002299D0((uint64_t)v9);
      v34 = objc_claimAutoreleasedReturnValue(v33);
      v35 = a1[7];
      a1[7] = (id)v34;

      v36 = sub_100217298((uint64_t)v9);
      v37 = objc_claimAutoreleasedReturnValue(v36);
      v38 = a1[8];
      a1[8] = (id)v37;

      *((_BYTE *)a1 + 88) = 0;
      v39 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
      v40 = a1[28];
      a1[28] = (id)v39;

      if (a1[27])
      {
        v41 = a1[14];
        a1[14] = 0;

        v42 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
      }
      else
      {
        v43 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
        v44 = a1[14];
        a1[14] = (id)v43;

        v42 = 0;
      }
      v45 = a1[15];
      a1[15] = (id)v42;

      v46 = sub_1000117DC((uint64_t)v9);
      v47 = objc_claimAutoreleasedReturnValue(v46);
      v48 = a1[24];
      a1[24] = (id)v47;

      objc_storeStrong(a1 + 17, a4);
      v49 = [KmlDeviceConfigurationData alloc];
      v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[2], "deviceConfiguration"));
      v51 = sub_10022D114((uint64_t)v49, v50);
      v52 = a1[18];
      a1[18] = (id)v51;

      v53 = KmlSignpostLogger();
      v54 = objc_claimAutoreleasedReturnValue(v53);
      a1[20] = (id)os_signpost_id_make_with_pointer(v54, a1[24]);

      *((_WORD *)a1 + 84) = 0;
      a1[12] = (id)2;
      *((_BYTE *)a1 + 128) = -2;
      v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[2], "sharingTokenAvailabilityBitmap"));

      if (v55)
      {
        v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[2], "sharingTokenAvailabilityBitmap"));
        *((_BYTE *)a1 + 128) = objc_msgSend(v56, "unsignedCharValue");

      }
      v57 = sub_100261288((uint64_t)KmlOwnerSharingManager);
      v58 = objc_claimAutoreleasedReturnValue(v57);
      v59 = a1[10];
      a1[10] = (id)v58;

      v60 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[24], "UUIDString")));
      v61 = objc_msgSend(v60, "UTF8String");
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 501, (uint64_t)v61, CFSTR("ready to roll"), v62, v63, v64, (uint64_t)v66.receiver);

    }
  }

  return a1;
}

void sub_1002609A4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = *(NSObject **)(a1 + 80);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100261374;
    v6[3] = &unk_100304370;
    v7 = v3;
    v8 = a1;
    dispatch_async(v5, v6);

  }
}

id *sub_100260A2C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  _QWORD *v12;
  void *v13;
  id v14;
  unsigned __int8 v15;
  id v16;
  id *v17;
  id *v18;
  id *v19;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];

  v5 = a2;
  v6 = a3;
  objc_opt_self(a1);
  sub_10025F348((uint64_t)KmlOwnerSharingManager);
  sub_10025F3CC((uint64_t)KmlOwnerSharingManager);
  v7 = (id)qword_100354978;
  objc_sync_enter(v7);
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v8 = (id)qword_100354978;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
  if (v9)
  {
    v10 = *(_QWORD *)v22;
    while (2)
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v22 != v10)
          objc_enumerationMutation(v8);
        v12 = *(_QWORD **)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)v11);
        if (v12)
          v13 = (void *)v12[24];
        else
          v13 = 0;
        v14 = v13;
        v15 = objc_msgSend(v14, "isEqual:", v6, (_QWORD)v21);

        if ((v15 & 1) != 0)
        {
          v17 = v12;

          if (!v12)
            goto LABEL_17;
          v18 = sub_100260C30(v17, v5);
          v19 = (id *)objc_claimAutoreleasedReturnValue(v18);
          if (v19)
          {
            objc_sync_exit(v7);

            goto LABEL_19;
          }
          goto LABEL_18;
        }
        v11 = (char *)v11 + 1;
      }
      while (v9 != v11);
      v16 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
      v9 = v16;
      if (v16)
        continue;
      break;
    }
  }

LABEL_17:
  v17 = 0;
LABEL_18:
  objc_sync_exit(v7);

  v17 = v17;
  v19 = v17;
LABEL_19:

  return v19;
}

void sub_100260C08(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id *sub_100260C30(id *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  void *v10;
  uint64_t v11;
  void *v12;
  unsigned __int8 v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    if (v3)
    {
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v5 = a1[28];
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
      if (v6)
      {
        v7 = v6;
        v8 = *(_QWORD *)v25;
        while (2)
        {
          for (i = 0; i != v7; i = (char *)i + 1)
          {
            if (*(_QWORD *)v25 != v8)
              objc_enumerationMutation(v5);
            v10 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * (_QWORD)i);
            v11 = sub_10020CAB4((uint64_t)v10);
            v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
            v13 = objc_msgSend(v12, "isEqualToString:", v4);

            if ((v13 & 1) != 0)
            {
              v14 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[24], "UUIDString")));
              v15 = objc_msgSend(v14, "UTF8String");
              KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 548, (uint64_t)v15, CFSTR("Found a session"), v16, v17, v18, v24);

              a1 = v10;
              goto LABEL_15;
            }
          }
          v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
          if (v7)
            continue;
          break;
        }
      }
    }
    else
    {
      v5 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[24], "UUIDString")));
      v19 = objc_msgSend(v5, "UTF8String");
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 542, (uint64_t)v19, CFSTR("Invitation ID needs to be non nil"), v20, v21, v22, v24);
    }

    a1 = 0;
  }
LABEL_15:

  return a1;
}

void sub_100260DF0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  _QWORD *v12;
  void *v13;
  id v14;
  unsigned __int8 v15;
  id v16;
  _QWORD *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];

  v5 = a2;
  v6 = a3;
  objc_opt_self(a1);
  sub_10025F348((uint64_t)KmlOwnerSharingManager);
  v7 = (id)qword_100354978;
  objc_sync_enter(v7);
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v8 = (id)qword_100354978;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (v9)
  {
    v10 = *(_QWORD *)v19;
    while (2)
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v19 != v10)
          objc_enumerationMutation(v8);
        v12 = *(_QWORD **)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)v11);
        if (v12)
          v13 = (void *)v12[24];
        else
          v13 = 0;
        v14 = v13;
        v15 = objc_msgSend(v14, "isEqual:", v5, (_QWORD)v18);

        if ((v15 & 1) != 0)
        {
          v17 = v12;

          if (!v12)
            goto LABEL_16;
          sub_100260FC4((uint64_t)v17, v6);
          goto LABEL_17;
        }
        v11 = (char *)v11 + 1;
      }
      while (v9 != v11);
      v16 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
      v9 = v16;
      if (v16)
        continue;
      break;
    }
  }

LABEL_16:
  v17 = 0;
LABEL_17:
  objc_sync_exit(v7);

}

void sub_100260F9C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100260FC4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11[5];
  id v12;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    if (v3)
    {
      v5 = *(NSObject **)(a1 + 80);
      v11[0] = (uint64_t)_NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = (uint64_t)sub_100265674;
      v11[3] = (uint64_t)&unk_100304370;
      v11[4] = a1;
      v12 = v3;
      dispatch_async(v5, v11);

    }
    else
    {
      v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 192), "UUIDString")));
      v7 = objc_msgSend(v6, "UTF8String");
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 892, (uint64_t)v7, CFSTR("Missing invitation ID"), v8, v9, v10, v11[0]);

    }
  }

}

void sub_100261094(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  unsigned int v12;
  id v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];

  v3 = a2;
  objc_opt_self(a1);
  sub_10025F348((uint64_t)KmlOwnerSharingManager);
  v4 = (id)qword_100354978;
  objc_sync_enter(v4);
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v5 = (id)qword_100354978;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v15;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v15 != v7)
          objc_enumerationMutation(v5);
        v9 = *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)v8);
        if (v9)
          v10 = *(void **)(v9 + 192);
        else
          v10 = 0;
        v11 = v10;
        v12 = objc_msgSend(v3, "containsObject:", v11, (_QWORD)v14);

        if (v12)
          sub_10026122C(v9);
        v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      v13 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      v6 = v13;
    }
    while (v13);
  }

  objc_sync_exit(v4);
}

void sub_100261208(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10026122C(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[5];

  if (a1)
  {
    v1 = *(NSObject **)(a1 + 80);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002658B4;
    block[3] = &unk_100302AA0;
    block[4] = a1;
    dispatch_async(v1, block);
  }
}

id sub_100261288(uint64_t a1)
{
  objc_opt_self(a1);
  if (qword_100354990 != -1)
    dispatch_once(&qword_100354990, &stru_10030FD20);
  return (id)qword_100354988;
}

void sub_1002612CC(id a1)
{
  dispatch_queue_attr_t v1;
  dispatch_queue_t v2;
  void *v3;
  NSObject *v4;

  v1 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v4 = objc_claimAutoreleasedReturnValue(v1);
  v2 = dispatch_queue_create("com.apple.sesd.kml.ownerSharingManager", v4);
  v3 = (void *)qword_100354988;
  qword_100354988 = (uint64_t)v2;

}

void sub_100261374(uint64_t a1)
{
  void *v2;
  void *v3;
  NSString *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  NSErrorUserInfoKey v10;
  void *v11;

  v2 = (void *)sub_10020C61C((uint64_t)[KmlOwnerSharingSession alloc], *(void **)(a1 + 32), *(void **)(*(_QWORD *)(a1 + 40) + 16), *(void **)(a1 + 40), 1u, *(void **)(*(_QWORD *)(a1 + 40) + 152), 0);
  if (v2)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 224), "addObject:", v2);
  }
  else
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
    v10 = NSLocalizedDescriptionKey;
    v4 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(104));
    v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    v11 = v5;
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v11, &v10, 1));
    v7 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v3, 104, v6));
    v8 = *(_QWORD *)(a1 + 40);
    v9 = *(void **)(v8 + 72);
    *(_QWORD *)(v8 + 72) = v7;

  }
}

BOOL sub_1002614C4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  _BOOL8 v11;
  NSObject *v12;
  _QWORD v14[5];
  id v15;
  id v16;
  id v17;
  _QWORD block[6];
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  char v22;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (a1)
  {
    dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 80));
    v19 = 0;
    v20 = &v19;
    v21 = 0x2020000000;
    v22 = 1;
    v10 = *(NSObject **)(a1 + 80);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100261624;
    block[3] = &unk_1003044E0;
    block[4] = a1;
    block[5] = &v19;
    dispatch_sync(v10, block);
    v11 = *((_BYTE *)v20 + 24) != 0;
    if (*((_BYTE *)v20 + 24))
    {
      v12 = *(NSObject **)(a1 + 80);
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      v14[2] = sub_100261698;
      v14[3] = &unk_10030EED8;
      v14[4] = a1;
      v15 = v7;
      v16 = v8;
      v17 = v9;
      dispatch_async(v12, v14);

    }
    _Block_object_dispose(&v19, 8);
  }
  else
  {
    v11 = 0;
  }

  return v11;
}

void sub_100261624(uint64_t a1)
{
  uint64_t v1;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(uint64_t *)(v1 + 8) >= 2)
  {
    v3 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 192), "UUIDString")));
    v4 = objc_msgSend(v3, "UTF8String");
    KmlSharingLogFunc(OS_LOG_TYPE_ERROR, (uint64_t)"KmlOwnerSharingManager.m", 566, (uint64_t)v4, CFSTR("Sharing already in progress, can't start again"), v5, v6, v7, v8);

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
  }
}

void sub_100261698(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  NSObject *v16;
  NSObject *v17;
  os_signpost_id_t v18;
  uint8_t buf[16];

  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
    v2 = (_QWORD *)v2[24];
  v3 = v2;
  v4 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "UUIDString")));
  v5 = objc_msgSend(v4, "UTF8String");
  KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 576, (uint64_t)v5, CFSTR("Start sharing Key: %@ with : %@"), v6, v7, v8, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 200));

  v9 = kmlUtilDataForHexString(*(void **)(*(_QWORD *)(a1 + 32) + 200));
  v10 = objc_claimAutoreleasedReturnValue(v9);
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(void **)(v11 + 24);
  *(_QWORD *)(v11 + 24) = v10;

  v13 = objc_msgSend(*(id *)(a1 + 40), "length");
  if (v13)
    v14 = objc_msgSend(objc_alloc((Class)NSData), "initWithData:", *(_QWORD *)(a1 + 40));
  else
    v14 = 0;
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 32), v14);
  if (v13)

  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 48), *(id *)(a1 + 48));
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 104), *(id *)(a1 + 56));
  sub_100261820(*(_QWORD *)(a1 + 32), 2);
  v15 = KmlSignpostLogger();
  v16 = objc_claimAutoreleasedReturnValue(v15);
  v17 = v16;
  v18 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 160);
  if (v18 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v16))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_EVENT, v18, "OwnerSharingInit", "client", buf, 2u);
  }

}

void sub_100261820(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD v3[6];

  if (a1)
  {
    v2 = *(NSObject **)(a1 + 80);
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100262478;
    v3[3] = &unk_100304AD0;
    v3[4] = a1;
    v3[5] = a2;
    dispatch_async(v2, v3);
  }
}

BOOL sub_10026187C(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  _BOOL8 v5;
  NSObject *v6;
  _QWORD v8[5];
  id v9;
  _QWORD block[6];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;

  v3 = a2;
  if (a1)
  {
    dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 80));
    v11 = 0;
    v12 = &v11;
    v13 = 0x2020000000;
    v14 = 1;
    v4 = *(NSObject **)(a1 + 80);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100261994;
    block[3] = &unk_1003044E0;
    block[4] = a1;
    block[5] = &v11;
    dispatch_sync(v4, block);
    v5 = *((_BYTE *)v12 + 24) != 0;
    if (*((_BYTE *)v12 + 24))
    {
      v6 = *(NSObject **)(a1 + 80);
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      v8[2] = sub_100261A0C;
      v8[3] = &unk_100304370;
      v8[4] = a1;
      v9 = v3;
      dispatch_async(v6, v8);

    }
    _Block_object_dispose(&v11, 8);
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

void sub_100261994(uint64_t a1)
{
  uint64_t v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v2 + 168) || *(_QWORD *)(v2 + 104))
  {
    v3 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v2 + 192), "UUIDString")));
    v4 = objc_msgSend(v3, "UTF8String");
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 596, (uint64_t)v4, CFSTR("We are not ready for silent sharing"), v5, v6, v7, v8);

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
  }
}

void sub_100261A0C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  os_signpost_id_t v8;
  uint8_t v9[16];

  v2 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObject:](NSArray, "arrayWithObject:", *(_QWORD *)(a1 + 40)));
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 104);
  *(_QWORD *)(v3 + 104) = v2;

  sub_100261820(*(_QWORD *)(a1 + 32), 4);
  v5 = KmlSignpostLogger();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  v7 = v6;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 160);
  if (v8 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v6))
  {
    *(_WORD *)v9 = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, v8, "OwnerSharingInit", "silent", v9, 2u);
  }

}

BOOL sub_100261AC4(uint64_t a1)
{
  NSObject *v2;
  _BOOL8 v3;
  NSObject *v4;
  _QWORD v6[5];
  _QWORD block[6];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;

  if (!a1)
    return 0;
  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 80));
  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 1;
  v2 = *(NSObject **)(a1 + 80);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100261BB4;
  block[3] = &unk_1003044E0;
  block[4] = a1;
  block[5] = &v8;
  dispatch_sync(v2, block);
  v3 = *((_BYTE *)v9 + 24) != 0;
  if (*((_BYTE *)v9 + 24))
  {
    v4 = *(NSObject **)(a1 + 80);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100261C2C;
    v6[3] = &unk_100302AA0;
    v6[4] = a1;
    dispatch_async(v4, v6);
  }
  _Block_object_dispose(&v8, 8);
  return v3;
}

void sub_100261BB4(uint64_t a1)
{
  uint64_t v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v2 + 168) || *(_QWORD *)(v2 + 8))
  {
    v3 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v2 + 192), "UUIDString")));
    v4 = objc_msgSend(v3, "UTF8String");
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 622, (uint64_t)v4, CFSTR("We are not ready for silent sharing over Cross Platform channel"), v5, v6, v7, v8);

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
  }
}

void sub_100261C2C(uint64_t a1)
{
  id v2;
  NSObject *v3;
  NSObject *v4;
  os_signpost_id_t v5;
  uint8_t v6[16];

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 169) = 1;
  sub_100261820(*(_QWORD *)(a1 + 32), 1);
  v2 = KmlSignpostLogger();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  v4 = v3;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 160);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v3))
  {
    *(_WORD *)v6 = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, v5, "OwnerSharingInit", "silentCrossPlatform", v6, 2u);
  }

}

void sub_100261CCC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  _QWORD v6[5];
  id v7;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = *(NSObject **)(a1 + 80);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100261D58;
    v6[3] = &unk_100304370;
    v6[4] = a1;
    v7 = v3;
    dispatch_async(v5, v6);

  }
}

void sub_100261D58(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  char v12;
  uint64_t v13;
  void *i;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  id v21;
  id v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  NSString *v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  void *v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id WeakRetained;
  uint64_t v41;
  uint64_t v42;
  id v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  NSErrorUserInfoKey v48;
  void *v49;
  _BYTE v50[128];

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    v3 = *(void **)(v2 + 192);
  else
    v3 = 0;
  v4 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "UUIDString")));
  v5 = objc_msgSend(v4, "UTF8String");
  KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 644, (uint64_t)v5, CFSTR("Key sharing cancel requested"), v6, v7, v8, v41);

  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  v9 = *(id *)(*(_QWORD *)(a1 + 32) + 224);
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v44, v50, 16);
  if (!v10)
  {

LABEL_17:
    v33 = *(_QWORD *)(a1 + 32);
    if (v33)
      v34 = *(void **)(v33 + 192);
    else
      v34 = 0;
    v35 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "UUIDString")));
    v36 = objc_msgSend(v35, "UTF8String");
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 660, (uint64_t)v36, CFSTR("No Sharing session to cancel"), v37, v38, v39, v42);

    WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 176));
    objc_msgSend(WeakRetained, "handleOwnerKeySharingCancelStatus:", 0);

    return;
  }
  v11 = v10;
  v12 = 0;
  v13 = *(_QWORD *)v45;
  v43 = v9;
  do
  {
    for (i = 0; i != v11; i = (char *)i + 1)
    {
      if (*(_QWORD *)v45 != v13)
        objc_enumerationMutation(v9);
      v15 = *(_QWORD *)(*((_QWORD *)&v44 + 1) + 8 * (_QWORD)i);
      v16 = *(void **)(a1 + 40);
      v17 = sub_10020CAB4(v15);
      v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
      LODWORD(v16) = objc_msgSend(v16, "containsObject:", v18);

      if ((_DWORD)v16)
      {
        v19 = *(_QWORD **)(a1 + 32);
        if (v19)
          v19 = (_QWORD *)v19[24];
        v20 = v19;
        v21 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "UUIDString")));
        v22 = objc_msgSend(v21, "UTF8String");
        v23 = sub_10020CAB4(v15);
        v24 = (void *)objc_claimAutoreleasedReturnValue(v23);

        v12 = 1;
        KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 651, (uint64_t)v22, CFSTR("Cancelling session with ID: %@"), v25, v26, v27, (uint64_t)v24);

        v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
        v48 = NSLocalizedDescriptionKey;
        v29 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(103));
        v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
        v49 = v30;
        v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v49, &v48, 1));
        v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v28, 103, v31));
        sub_10020CF7C(v15, v32);

        v9 = v43;
      }
    }
    v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v44, v50, 16);
  }
  while (v11);

  if ((v12 & 1) == 0)
    goto LABEL_17;
}

dispatch_queue_t *sub_100262070(dispatch_queue_t *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  _QWORD v9[5];
  id v10;
  id v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  void (*v17)(uint64_t);
  id v18;

  v5 = a2;
  v6 = a3;
  if (a1)
  {
    dispatch_assert_queue_not_V2(a1[10]);
    v13 = 0;
    v14 = &v13;
    v15 = 0x3032000000;
    v16 = sub_10026217C;
    v17 = sub_10026218C;
    v18 = 0;
    v7 = a1[10];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100262194;
    v9[3] = &unk_10030FD48;
    v9[4] = a1;
    v12 = &v13;
    v10 = v6;
    v11 = v5;
    dispatch_sync(v7, v9);
    a1 = (dispatch_queue_t *)(id)v14[5];

    _Block_object_dispose(&v13, 8);
  }

  return a1;
}

uint64_t sub_10026217C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10026218C(uint64_t a1)
{

}

void sub_100262194(uint64_t a1)
{
  uint64_t v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  NSString *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id *v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  NSString *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  NSErrorUserInfoKey v40;
  void *v41;
  NSErrorUserInfoKey v42;
  void *v43;

  v2 = *(_QWORD *)(a1 + 32);
  if (!*(_QWORD *)(v2 + 216))
  {
    v3 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v2 + 192), "UUIDString")));
    v4 = objc_msgSend(v3, "UTF8String");
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 675, (uint64_t)v4, CFSTR("We are not initialized fo cross-platform sharing"), v5, v6, v7, v38);

    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
    v42 = NSLocalizedDescriptionKey;
    v9 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(115));
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    v43 = v10;
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v43, &v42, 1));
    v12 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v8, 115, v11));
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v14 = *(void **)(v13 + 40);
    *(_QWORD *)(v13 + 40) = v12;

    v2 = *(_QWORD *)(a1 + 32);
  }
  v15 = sub_100260C30((id *)v2, *(void **)(a1 + 40));
  v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
  if (v16)
  {
    v17 = *(_QWORD **)(a1 + 32);
    if (v17)
      v17 = (_QWORD *)v17[24];
    v18 = v17;
    v19 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "UUIDString")));
    v20 = objc_msgSend(v19, "UTF8String");
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 685, (uint64_t)v20, CFSTR("updating xp mailbox identifier: %@ forInvitation:%@"), v21, v22, v23, *(_QWORD *)(a1 + 48));

    sub_10020D194((uint64_t)v16, *(void **)(a1 + 48));
    v24 = *(_QWORD *)(a1 + 32);
    if (v24)
      v25 = *(void **)(v24 + 192);
    else
      v25 = 0;
    v26 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "UUIDString")));
    v27 = objc_msgSend(v26, "UTF8String");
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 687, (uint64_t)v27, CFSTR("saving sharing records"), v28, v29, v30, v39);

    sub_10024EF50(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 136));
  }
  else
  {
    v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
    v40 = NSLocalizedDescriptionKey;
    v32 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(109));
    v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
    v41 = v33;
    v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v41, &v40, 1));
    v35 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v31, 109, v34));
    v36 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v37 = *(void **)(v36 + 40);
    *(_QWORD *)(v36 + 40) = v35;

  }
}

void sub_100262478(uint64_t a1)
{
  sub_100262484(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void sub_100262484(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  NSObject *v19;
  NSObject *v20;
  os_signpost_id_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  NSObject *v51;
  NSObject *v52;
  os_signpost_id_t v53;
  const char *v54;
  id v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  NSObject *v61;
  id v62;
  id v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  NSObject *v69;
  NSObject *v70;
  os_signpost_id_t v71;
  uint64_t v72;
  uint64_t v73;
  id WeakRetained;
  void *v75;
  uint64_t v76;
  id v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  NSObject *v83;
  NSObject *v84;
  os_signpost_id_t v85;
  uint64_t v86;
  id v87;
  void *v88;
  id v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  NSObject *v95;
  NSObject *v96;
  os_signpost_id_t v97;
  id v98;
  id v99;
  id v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  id v104;
  NSObject *v105;
  NSObject *v106;
  os_signpost_id_t v107;
  id v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  id v113;
  NSObject *v114;
  NSObject *v115;
  os_signpost_id_t v116;
  uint64_t v117;
  id v118;
  id v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  void *v125;
  void *v126;
  void *v127;
  uint64_t v128;
  void *v129;
  void *v130;
  uint64_t v131;
  void *v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  id v136;
  uint8_t buf[4];
  uint64_t v138;

  if (a1)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(void **)(a1 + 192);
    if (v4 >= a2)
    {
      v136 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "UUIDString")));
      v22 = objc_msgSend(v136, "UTF8String");
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 707, (uint64_t)v22, CFSTR("Current state higher than new state. Do nothing"), v23, v24, v25, v134);

    }
    else
    {
      v6 = v5;
      v7 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "UUIDString")));
      v8 = objc_msgSend(v7, "UTF8String");
      v9 = *(_QWORD *)(a1 + 8);

      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 711, (uint64_t)v8, CFSTR("Current state %ld, new state %ld"), v10, v11, v12, v9);
      *(_QWORD *)(a1 + 8) = a2;
      switch(a2)
      {
        case 1:
          v26 = *(void **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = 0;

          v27 = *(void **)(a1 + 24);
          *(_QWORD *)(a1 + 24) = 0;

          v28 = *(void **)(a1 + 200);
          *(_QWORD *)(a1 + 200) = 0;

          v29 = *(void **)(a1 + 144);
          *(_QWORD *)(a1 + 144) = 0;

          v30 = *(void **)(a1 + 72);
          *(_QWORD *)(a1 + 72) = 0;

          v31 = *(void **)(a1 + 104);
          *(_QWORD *)(a1 + 104) = 0;

          objc_msgSend(*(id *)(a1 + 224), "removeAllObjects");
          v32 = *(void **)(a1 + 136);
          *(_QWORD *)(a1 + 136) = 0;

          v33 = *(void **)(a1 + 216);
          *(_QWORD *)(a1 + 216) = 0;

          if (*(_BYTE *)(a1 + 169))
          {
            v34 = *(void **)(a1 + 120);
            if (v34)
            {
              objc_msgSend(v34, "removeAllObjects");
            }
            else
            {
              v124 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
              v125 = *(void **)(a1 + 120);
              *(_QWORD *)(a1 + 120) = v124;

            }
            v126 = *(void **)(a1 + 112);
            if (v126)
            {
              objc_msgSend(v126, "removeAllObjects");
              v127 = *(void **)(a1 + 112);
            }
            else
            {
              v127 = 0;
            }
            *(_QWORD *)(a1 + 112) = 0;

            v128 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 192), "UUIDString"));
            v129 = *(void **)(a1 + 216);
            *(_QWORD *)(a1 + 216) = v128;

            v130 = *(void **)(a1 + 208);
            *(_QWORD *)(a1 + 208) = 0;

          }
          else
          {
            objc_storeWeak((id *)(a1 + 176), 0);
            v123 = *(void **)(a1 + 112);
            if (v123)
            {
              objc_msgSend(v123, "removeAllObjects");
            }
            else
            {
              v131 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
              v132 = *(void **)(a1 + 112);
              *(_QWORD *)(a1 + 112) = v131;

            }
            v133 = *(void **)(a1 + 120);
            if (v133)
              objc_msgSend(v133, "removeAllObjects");
            else
              *(_QWORD *)(a1 + 120) = 0;
          }
          sub_100262EC0(a1);
          return;
        case 2:
          v35 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 192), "UUIDString")));
          v36 = objc_msgSend(v35, "UTF8String");
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 781, (uint64_t)v36, CFSTR("Check for owner key"), v37, v38, v39, v135);

          sub_10026301C(a1);
          return;
        case 3:
          sub_100263138(a1);
          return;
        case 4:
          v40 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 192), "UUIDString")));
          v41 = objc_msgSend(v40, "UTF8String");
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 790, (uint64_t)v41, CFSTR("Check if everything is ready to initiate sharing"), v42, v43, v44, v135);

          sub_10026359C(a1);
          return;
        case 5:
          v45 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 192), "UUIDString")));
          v46 = objc_msgSend(v45, "UTF8String");
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 795, (uint64_t)v46, CFSTR("Ready to create sharing sessions"), v47, v48, v49, v135);

          sub_100263934(a1);
          v50 = KmlSignpostLogger();
          v51 = objc_claimAutoreleasedReturnValue(v50);
          v52 = v51;
          v53 = *(_QWORD *)(a1 + 160);
          if (v53 - 1 > 0xFFFFFFFFFFFFFFFDLL || !os_signpost_enabled(v51))
            goto LABEL_22;
          *(_WORD *)buf = 0;
          v54 = "OwnerSharingCreateSessions";
          goto LABEL_21;
        case 6:
          v55 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 192), "UUIDString")));
          v56 = objc_msgSend(v55, "UTF8String");
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 801, (uint64_t)v56, CFSTR("Create invitations"), v57, v58, v59, v135);

          sub_1002648AC(a1);
          v60 = KmlSignpostLogger();
          v61 = objc_claimAutoreleasedReturnValue(v60);
          v52 = v61;
          v53 = *(_QWORD *)(a1 + 160);
          if (v53 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v61))
          {
            *(_WORD *)buf = 0;
            v54 = "OwnerSharingCreateInvitations";
LABEL_21:
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v52, OS_SIGNPOST_EVENT, v53, v54, "", buf, 2u);
          }
LABEL_22:

          return;
        case 7:
          v62 = *(id *)(a1 + 192);
          v63 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v62, "UUIDString")));
          v64 = objc_msgSend(v63, "UTF8String");
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 813, (uint64_t)v64, CFSTR("Failed to start sharing with error: %@"), v65, v66, v67, *(_QWORD *)(a1 + 72));

          v68 = KmlSignpostLogger();
          v69 = objc_claimAutoreleasedReturnValue(v68);
          v70 = v69;
          v71 = *(_QWORD *)(a1 + 160);
          if (v71 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v69))
          {
            v72 = *(_QWORD *)(a1 + 72);
            *(_DWORD *)buf = 138412290;
            v138 = v72;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v70, OS_SIGNPOST_EVENT, v71, "OwnerSharingFailedToStart", "error - %@", buf, 0xCu);
          }

          v73 = *(_QWORD *)(a1 + 208);
          WeakRetained = objc_loadWeakRetained((id *)(a1 + 176));
          v75 = WeakRetained;
          v76 = *(_QWORD *)(a1 + 72);
          if (v73)
            objc_msgSend(WeakRetained, "handleOwnerKeySharingInvitations:withError:", 0, v76);
          else
            objc_msgSend(WeakRetained, "handleOwnerCrossPlatformInvitations:withError:", 0, v76);

          sub_100264B90(a1);
          sub_10026508C((id *)a1);
          if (!*(_BYTE *)(a1 + 168))
            sub_100265184(a1);
          goto LABEL_51;
        case 8:
          v77 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 192), "UUIDString")));
          v78 = objc_msgSend(v77, "UTF8String");
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 832, (uint64_t)v78, CFSTR("Let's send invitations"), v79, v80, v81, v135);

          v82 = KmlSignpostLogger();
          v83 = objc_claimAutoreleasedReturnValue(v82);
          v84 = v83;
          v85 = *(_QWORD *)(a1 + 160);
          if (v85 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v83))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v84, OS_SIGNPOST_EVENT, v85, "OwnerSharingStartSessions", "", buf, 2u);
          }

          *(_QWORD *)(a1 + 184) = sub_10024F79C(*(_QWORD *)(a1 + 136));
          v86 = *(_QWORD *)(a1 + 208);
          v87 = objc_loadWeakRetained((id *)(a1 + 176));
          v88 = v87;
          if (v86)
            objc_msgSend(v87, "handleOwnerKeySharingInvitations:withError:", *(_QWORD *)(a1 + 112), 0);
          else
            objc_msgSend(v87, "handleOwnerCrossPlatformInvitations:withError:", *(_QWORD *)(a1 + 120), 0);

          sub_100265284(a1);
          sub_10024EF50(*(_QWORD *)(a1 + 136));
          return;
        case 9:
          v89 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 192), "UUIDString")));
          v90 = objc_msgSend(v89, "UTF8String");
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 850, (uint64_t)v90, CFSTR("At least one sharing session finished successfully"), v91, v92, v93, v135);

          v94 = KmlSignpostLogger();
          v95 = objc_claimAutoreleasedReturnValue(v94);
          v96 = v95;
          v97 = *(_QWORD *)(a1 + 160);
          if (v97 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v95))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v96, OS_SIGNPOST_EVENT, v97, "OwnerSharingOneSuccessfulSharing", "", buf, 2u);
          }

          v98 = (id)SESEndPointAddEndpointIdWithUuid(*(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 192));
          return;
        case 10:
        case 11:
          v13 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 192), "UUIDString")));
          v14 = objc_msgSend(v13, "UTF8String");
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 858, (uint64_t)v14, CFSTR("Cancel pending sessions"), v15, v16, v17, v135);

          v18 = KmlSignpostLogger();
          v19 = objc_claimAutoreleasedReturnValue(v18);
          v20 = v19;
          v21 = *(_QWORD *)(a1 + 160);
          if (v21 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v19))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v20, OS_SIGNPOST_EVENT, v21, "OwnerSharingCancelPending", "", buf, 2u);
          }

          sub_10026538C(a1);
          return;
        case 12:
          v99 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 192), "UUIDString")));
          v100 = objc_msgSend(v99, "UTF8String");
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 865, (uint64_t)v100, CFSTR("Cancel silent invite request"), v101, v102, v103, v135);

          v104 = KmlSignpostLogger();
          v105 = objc_claimAutoreleasedReturnValue(v104);
          v106 = v105;
          v107 = *(_QWORD *)(a1 + 160);
          if (v107 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v105))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v106, OS_SIGNPOST_EVENT, v107, "OwnerSharingCancelSilentInvite", "", buf, 2u);
          }

          sub_100265578(a1);
          goto LABEL_51;
        case 13:
          v108 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 192), "UUIDString")));
          v109 = objc_msgSend(v108, "UTF8String");
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 871, (uint64_t)v109, CFSTR("OKSManager: Error while sharing key."), v110, v111, v112, v135);

          v113 = KmlSignpostLogger();
          v114 = objc_claimAutoreleasedReturnValue(v113);
          v115 = v114;
          v116 = *(_QWORD *)(a1 + 160);
          if (v116 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v114))
          {
            v117 = *(_QWORD *)(a1 + 72);
            *(_DWORD *)buf = 138412290;
            v138 = v117;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v115, OS_SIGNPOST_EVENT, v116, "OwnerSharingError", "error - %@", buf, 0xCu);
          }

LABEL_51:
          sub_100261820(a1, 14);
          break;
        case 14:
          v118 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 192), "UUIDString")));
          v119 = objc_msgSend(v118, "UTF8String");
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 879, (uint64_t)v119, CFSTR("OKSManager object can be safely removed."), v120, v121, v122, v135);

          objc_msgSend(*(id *)(a1 + 112), "removeAllObjects");
          objc_msgSend(*(id *)(a1 + 120), "removeAllObjects");
          break;
        default:
          return;
      }
    }
  }
}

void sub_100262EC0(uint64_t a1)
{
  uint64_t v2;
  uint64_t EndpointIdWithUuid;
  void *v4;
  id v5;
  void *v6;
  BOOL v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 192);
    v25 = 0;
    EndpointIdWithUuid = SESEndPointGetEndpointIdWithUuid(v2, &v25);
    v4 = (void *)objc_claimAutoreleasedReturnValue(EndpointIdWithUuid);
    v5 = v25;
    v6 = v5;
    if (v4)
      v7 = v5 == 0;
    else
      v7 = 0;
    if (v7)
    {
      objc_storeStrong((id *)(a1 + 200), v4);
      v18 = kmlUtilDataForHexString(*(void **)(a1 + 200));
      v19 = objc_claimAutoreleasedReturnValue(v18);
      v16 = *(id *)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v19;
      v17 = 2;
    }
    else
    {
      v8 = *(id *)(a1 + 192);
      v9 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "UUIDString")));
      v10 = objc_msgSend(v9, "UTF8String");
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 920, (uint64_t)v10, CFSTR("We have no record of sharing with uuid : %@"), v11, v12, v13, *(_QWORD *)(a1 + 192));

      if (*(_BYTE *)(a1 + 169))
      {
        v14 = sesErrorToKmlError(v6, 0xD2u);
        v15 = objc_claimAutoreleasedReturnValue(v14);
        v16 = *(id *)(a1 + 72);
        *(_QWORD *)(a1 + 72) = v15;
        v17 = 7;
      }
      else
      {
        v16 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 192), "UUIDString")));
        v20 = objc_msgSend(v16, "UTF8String");
        KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 925, (uint64_t)v20, CFSTR("Dropping the re-invite request over IDS. Nothing to do here"), v21, v22, v23, v24);
        v17 = 13;
      }
    }

    sub_100261820(a1, v17);
  }
}

void sub_10026301C(uint64_t a1)
{
  id v2;
  void *v3;
  uint64_t v4;
  KmlSharingRecordsUpdater *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  KmlDeviceConfigurationData *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  void *v16;
  id v17;

  if (a1)
  {
    v2 = sub_1002658BC(a1);
    v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
    v17 = v3;
    if (v3)
    {
      objc_storeStrong((id *)(a1 + 72), v3);
      v4 = 4;
    }
    else
    {
      v5 = sub_10024E878((uint64_t)KmlSharingRecordsUpdater, *(void **)(a1 + 16));
      v6 = objc_claimAutoreleasedReturnValue(v5);
      v7 = *(void **)(a1 + 136);
      *(_QWORD *)(a1 + 136) = v6;

      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 16), "sharingTokenAvailabilityBitmap"));
      if (v8)
      {
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 16), "sharingTokenAvailabilityBitmap"));
        *(_BYTE *)(a1 + 128) = objc_msgSend(v9, "unsignedCharValue");

      }
      v10 = [KmlDeviceConfigurationData alloc];
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 16), "deviceConfiguration"));
      v12 = sub_10022D114((uint64_t)v10, v11);
      v13 = *(void **)(a1 + 144);
      *(_QWORD *)(a1 + 144) = v12;

      v14 = sub_100265E70(a1);
      v15 = objc_claimAutoreleasedReturnValue(v14);
      v16 = *(void **)(a1 + 72);
      *(_QWORD *)(a1 + 72) = v15;

      if (*(_QWORD *)(a1 + 72))
        v4 = 4;
      else
        v4 = 3;
    }
    sub_100261820(a1, v4);

  }
}

void sub_100263138(uint64_t a1)
{
  dispatch_queue_t *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  const __CFString *v55;
  void *v56;
  uint64_t v57;
  _BOOL8 v58;
  id v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  id v72;

  if (a1)
  {
    if (!*(_BYTE *)(a1 + 168))
    {
      v29 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 192), "UUIDString")));
      v30 = objc_msgSend(v29, "UTF8String");
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1008, (uint64_t)v30, CFSTR("In regular sharing, we should have configs handed to us by client."), v31, v32, v33, v68);

      sub_100261820(a1, 4);
      return;
    }
    v2 = sub_10024F8D8(*(dispatch_queue_t **)(a1 + 136), *(void **)(a1 + 192));
    v72 = (id)objc_claimAutoreleasedReturnValue(v2);
    v3 = *(id *)(a1 + 192);
    v4 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "UUIDString")));
    v5 = objc_msgSend(v4, "UTF8String");
    if (v72)
    {
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1029, (uint64_t)v5, CFSTR("We have a record of successful sharing with uuid : %@"), v6, v7, v8, *(_QWORD *)(a1 + 192));

      v9 = sub_10022ADBC((uint64_t)v72);
      v10 = objc_claimAutoreleasedReturnValue(v9);
      v11 = *(void **)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v10;

      v12 = sub_1002299D0((uint64_t)v72);
      v13 = objc_claimAutoreleasedReturnValue(v12);
      v14 = *(void **)(a1 + 56);
      *(_QWORD *)(a1 + 56) = v13;

      v15 = sub_100217298((uint64_t)v72);
      v16 = objc_claimAutoreleasedReturnValue(v15);
      v17 = *(void **)(a1 + 64);
      *(_QWORD *)(a1 + 64) = v16;

      if ((sub_1002661C8(a1) & 1) != 0)
      {
        if (sub_10024E5DC((_BOOL8)v72))
        {
          v18 = *(void **)(a1 + 208);
          v19 = sub_10002BA88((uint64_t)v72);
          v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
          LOBYTE(v18) = objc_msgSend(v18, "isEqualToString:", v20);

          if ((v18 & 1) != 0)
            goto LABEL_15;
          v21 = *(id *)(a1 + 192);
          v22 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "UUIDString")));
          v23 = objc_msgSend(v22, "UTF8String");
          v24 = *(_QWORD *)(a1 + 208);
          v25 = sub_10002BA88((uint64_t)v72);
          v71 = (void *)objc_claimAutoreleasedReturnValue(v25);
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1050, (uint64_t)v23, CFSTR("Reinvite Request is from: %@, but in the past we shared with : %@"), v26, v27, v28, v24);

        }
        else
        {
          v22 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 192), "UUIDString")));
          v36 = objc_msgSend(v22, "UTF8String");
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1054, (uint64_t)v36, CFSTR("Previous share was over cross platform channel."), v37, v38, v39, v69);
        }

LABEL_15:
        v40 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 192), "UUIDString")));
        v41 = objc_msgSend(v40, "UTF8String");
        KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1057, (uint64_t)v41, CFSTR("Proceed and let bindingAttestation validation verify the friend account"), v42, v43, v44, v69);

        if (*(_BYTE *)(a1 + 169))
        {
          v45 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 192), "UUIDString")));
          v46 = objc_msgSend(v45, "UTF8String");
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1060, (uint64_t)v46, CFSTR("For silent re-share over CrossPlatform channel, generate sharing config from reference"), v47, v48, v49, v70);

          v50 = objc_alloc((Class)DAKeySharingConfiguration);
          v51 = sub_100050680((uint64_t)v72);
          v52 = sub_1002225B8((uint64_t)v72);
          v53 = objc_claimAutoreleasedReturnValue(v52);
          v54 = (void *)v53;
          if (v53)
            v55 = (const __CFString *)v53;
          else
            v55 = CFSTR("car key");
          v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSData data](NSData, "data"));
          v57 = *(_QWORD *)(a1 + 96);
          v58 = sub_10024DE64((_BOOL8)v72);
          v59 = objc_msgSend(v50, "initWithProfile:displayName:metaData:targetDeviceType:enableVehiclePasscode:maxRetriesForDevicePasscode:deviceEnteredPasscode:proprietaryEntitlements:", v51, v55, v56, v57, v58, sub_1002299F4((uint64_t)v72), 0, 0);

          v60 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObject:](NSArray, "arrayWithObject:", v59));
          v61 = *(void **)(a1 + 104);
          *(_QWORD *)(a1 + 104) = v60;

          v62 = a1;
          v63 = 4;
        }
        else
        {
          v59 = (id)objc_claimAutoreleasedReturnValue(+[KmlClientReporterFactory getReporter](KmlClientReporterFactory, "getReporter"));
          v64 = *(_QWORD *)(a1 + 192);
          v65 = *(_QWORD *)(a1 + 200);
          v66 = sub_100217280((uint64_t)v72);
          v67 = (void *)objc_claimAutoreleasedReturnValue(v66);
          LOBYTE(v64) = objc_msgSend(v59, "didReceiveInvitationRequestWithUuid:ownerKeyIdentifier:friendKeyIdentifier:targetType:", v64, v65, v67, *(_QWORD *)(a1 + 96));

          if ((v64 & 1) != 0)
          {
LABEL_25:

            goto LABEL_26;
          }
          v62 = a1;
          v63 = 12;
        }
        sub_100261820(v62, v63);
        goto LABEL_25;
      }
      if (!*(_BYTE *)(a1 + 169))
      {
        v34 = a1;
        v35 = 12;
        goto LABEL_21;
      }
    }
    else
    {
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1018, (uint64_t)v5, CFSTR("We don't have a record of successful sharing with uuid : %@"), v6, v7, v8, *(_QWORD *)(a1 + 192));

      if (!*(_BYTE *)(a1 + 169))
      {
        v34 = a1;
        v35 = 14;
LABEL_21:
        sub_100261820(v34, v35);
LABEL_26:

        return;
      }
    }
    v34 = a1;
    v35 = 4;
    goto LABEL_21;
  }
}

uint64_t sub_10026359C(uint64_t location)
{
  uint64_t v1;
  void *v2;
  void **v3;
  void *v4;
  NSString *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  void *i;
  void *v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  void *v24;
  NSString *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  NSErrorUserInfoKey v47;
  void *v48;
  _BYTE v49[128];
  NSErrorUserInfoKey v50;
  void *v51;

  if (location)
  {
    v1 = location;
    if (!*(_QWORD *)(location + 104))
    {
      v3 = (void **)(location + 72);
      v2 = *(void **)(location + 72);
      if (v2)
      {
        objc_storeStrong((id *)(location + 72), v2);
      }
      else
      {
        v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
        v50 = NSLocalizedDescriptionKey;
        v5 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(104));
        v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
        v51 = v6;
        v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v51, &v50, 1));
        v8 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v4, 104, v7));
        v9 = *v3;
        *v3 = (void *)v8;

      }
    }
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v10 = *(id *)(v1 + 104);
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v43, v49, 16);
    if (v11)
    {
      v12 = v11;
      v13 = *(_QWORD *)v44;
      while (2)
      {
        for (i = 0; i != v12; i = (char *)i + 1)
        {
          if (*(_QWORD *)v44 != v13)
            objc_enumerationMutation(v10);
          v15 = *(void **)(*((_QWORD *)&v43 + 1) + 8 * (_QWORD)i);
          v16 = *(id *)(v1 + 192);
          v17 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "UUIDString")));
          v18 = objc_msgSend(v17, "UTF8String");
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1089, (uint64_t)v18, CFSTR("Config : %@"), v19, v20, v21, (uint64_t)v15);

          if (objc_msgSend(v15, "enableVehicleEnteredPasscode") && !sub_10022F14C(*(_QWORD *)(v1 + 144)))
          {
            v22 = *(void **)(v1 + 72);
            if (v22)
            {
              v23 = v22;
              v24 = *(void **)(v1 + 72);
              *(_QWORD *)(v1 + 72) = v23;
            }
            else
            {
              v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
              v47 = NSLocalizedDescriptionKey;
              v25 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(117));
              v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
              v48 = v26;
              v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v48, &v47, 1));
              v28 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v24, 117, v27));
              v29 = *(void **)(v1 + 72);
              *(_QWORD *)(v1 + 72) = v28;

            }
            goto LABEL_20;
          }
        }
        v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v43, v49, 16);
        if (v12)
          continue;
        break;
      }
    }
LABEL_20:

    v30 = *(void **)(v1 + 192);
    if (*(_QWORD *)(v1 + 72))
    {
      v31 = v30;
      v32 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "UUIDString")));
      v33 = objc_msgSend(v32, "UTF8String");
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1097, (uint64_t)v33, CFSTR("Sharing can't proceed due to : %@"), v34, v35, v36, *(_QWORD *)(v1 + 72));

      v37 = 7;
    }
    else
    {
      v32 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "UUIDString")));
      v38 = objc_msgSend(v32, "UTF8String");
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1100, (uint64_t)v38, CFSTR("All is well, begin sharing"), v39, v40, v41, v42);
      v37 = 5;
    }

    return sub_100261820(v1, v37);
  }
  return location;
}

void sub_100263934(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  NSString *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  __int16 v41;
  __int16 v42;
  uint64_t PrivateData;
  void *v44;
  id v45;
  id v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  uint64_t v54;
  void *v55;
  unsigned int v56;
  int v57;
  id v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  void *v71;
  void *v72;
  void *v73;
  unsigned int v74;
  id Passcode;
  uint64_t v76;
  void *v77;
  id v78;
  id v79;
  id v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  KmlSharingConfig *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  id v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  id v101;
  void *v102;
  uint64_t v103;
  unsigned __int16 v104;
  int v105;
  int v107;
  id v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  id v113;
  void *v114;
  char v115;
  char v116;
  int v117;
  char v118;
  int v119;
  id v120;
  id v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  id v125;
  id v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  id v130;
  id v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  id v135;
  id v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  id v140;
  id v141;
  uint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  void *v149;
  const __CFString *v150;
  void *v151;
  unsigned int v152;
  unsigned int v153;
  id v154;
  id v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  NSString *v159;
  void *v160;
  void *v161;
  uint64_t v162;
  void *v163;
  id v164;
  id v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  NSString *v169;
  uint64_t v170;
  void *v171;
  id v172;
  id v173;
  uint8x8_t v174;
  id v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  id v179;
  uint64_t v180;
  uint64_t v181;
  id v182;
  id v183;
  id v184;
  id v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  void *v189;
  NSString *v190;
  void *v191;
  void *v192;
  uint64_t v193;
  void *v194;
  void *v195;
  uint64_t v196;
  void *v197;
  void *v198;
  uint64_t v199;
  unsigned __int8 v200;
  unsigned int v201;
  unsigned __int8 v202;
  int v203;
  unsigned __int8 v204;
  id v205;
  NSErrorUserInfoKey v206;
  void *v207;
  NSErrorUserInfoKey v208;
  void *v209;
  NSErrorUserInfoKey v210;
  void *v211;
  NSErrorUserInfoKey v212;
  void *v213;

  if (a1)
  {
    v2 = *(id *)(a1 + 192);
    v3 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "UUIDString")));
    v4 = objc_msgSend(v3, "UTF8String");
    v5 = objc_msgSend(*(id *)(a1 + 104), "count");

    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1107, (uint64_t)v4, CFSTR("Number of sharing sessions requested : %ld"), v6, v7, v8, (uint64_t)v5);
    *(_QWORD *)(a1 + 184) = sub_10024F79C(*(_QWORD *)(a1 + 136));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 16), "mailboxMapping"));
    v10 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 192), "UUIDString")));
    v11 = objc_msgSend(v10, "UTF8String");
    v12 = kmlUtilHexStringFromData(v9);
    v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1114, (uint64_t)v11, CFSTR("Raw Mapping Data:%@"), v14, v15, v16, (uint64_t)v13);

    v17 = sub_10022A0B4((char *)[KmlMailboxMappingData alloc], v9, (__int16)objc_msgSend(*(id *)(a1 + 152), "agreedKmlVehicleVersion"));
    LODWORD(v11) = sub_10022AB38((uint64_t)v17);
    if (v11 < sub_10022AAE4((uint64_t)v17))
    {
      v18 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 192), "UUIDString")));
      v19 = objc_msgSend(v18, "UTF8String");
      v27 = sub_10022A674((id *)v17, v20, v21, v22, v23, v24, v25, v26);
      v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
      v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "asHexString"));
      KmlSharingLogFunc(OS_LOG_TYPE_ERROR, (uint64_t)"KmlOwnerSharingManager.m", 1120, (uint64_t)v19, CFSTR("Underflow detected in mailbox offsets %@"), v30, v31, v32, (uint64_t)v29);

      v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
      v212 = NSLocalizedDescriptionKey;
      v34 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(105));
      v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
      v213 = v35;
      v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v213, &v212, 1));
      v37 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v33, 105, v36));
      v38 = *(void **)(a1 + 72);
      *(_QWORD *)(a1 + 72) = v37;

      sub_100261820(a1, 7);
LABEL_64:

      return;
    }
    v39 = *(_QWORD *)(a1 + 200);
    v40 = sub_10022AAE4((uint64_t)v17);
    v41 = sub_10022AB38((uint64_t)v17);
    v42 = sub_10022AAE4((uint64_t)v17);
    v205 = 0;
    PrivateData = SESEndPointGetPrivateData(v39, v40, (unsigned __int16)(v41 - v42), &v205);
    v44 = (void *)objc_claimAutoreleasedReturnValue(PrivateData);
    v45 = v205;
    if (v45)
    {
      v46 = *(id *)(a1 + 192);
      v47 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "UUIDString")));
      v48 = objc_msgSend(v47, "UTF8String");
      KmlSharingLogFunc(OS_LOG_TYPE_ERROR, (uint64_t)"KmlOwnerSharingManager.m", 1131, (uint64_t)v48, CFSTR("Error while getting signaling bitmap %@"), v49, v50, v51, (uint64_t)v45);

      v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
      v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "userInfo"));
      v54 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v52, 105, v53));
      v55 = *(void **)(a1 + 72);
      *(_QWORD *)(a1 + 72) = v54;

      sub_100261820(a1, 7);
LABEL_63:

      goto LABEL_64;
    }
    if (sub_10022AAD8((uint64_t)v17) == 128)
      v56 = 0;
    else
      v56 = *((unsigned __int8 *)objc_msgSend(objc_retainAutorelease(v44), "bytes") + 1);
    v203 = sub_10022AAFC((uint64_t)v17);
    v201 = sub_10022AB08((uint64_t)v17);
    v204 = *(_BYTE *)(a1 + 128);
    v57 = sub_10022DC4C(*(_QWORD *)(a1 + 144));
    v58 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 192), "UUIDString")));
    v59 = objc_msgSend(v58, "UTF8String");
    v197 = v9;
    if (v57)
    {
      v204 = -2;
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1154, (uint64_t)v59, CFSTR("The config says OnlineImmoTokens. Pretend like immoTokenAvailability is : %02X"), v60, v61, v62, 254);
      v56 = 254;
    }
    else
    {
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1156, (uint64_t)v59, CFSTR("immoToken/slotId BitMap from mailbox          : %02X"), v60, v61, v62, v56);

      v63 = *(id *)(a1 + 192);
      v58 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "UUIDString")));
      v64 = objc_msgSend(v58, "UTF8String");
      v65 = *(unsigned __int8 *)(a1 + 128);

      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1157, (uint64_t)v64, CFSTR("immoToken/slotId BitMap available for sharing : %02X"), v66, v67, v68, v65);
    }

    if (!*(_QWORD *)(a1 + 56))
    {
      v69 = kmlUtilRandomDataWithSize(8uLL);
      v70 = objc_claimAutoreleasedReturnValue(v69);
      v71 = *(void **)(a1 + 56);
      *(_QWORD *)(a1 + 56) = v70;

    }
    if (!*(_QWORD *)(a1 + 64))
    {
      v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 16), "longTermSharedSecret"));
      v73 = *(void **)(a1 + 56);
      v74 = sub_10022F160(*(_QWORD *)(a1 + 144));
      Passcode = kmlUtilGeneratePasscode(v72, v73, v74);
      v76 = objc_claimAutoreleasedReturnValue(Passcode);
      v77 = *(void **)(a1 + 64);
      *(_QWORD *)(a1 + 64) = v76;

    }
    v198 = v44;
    v199 = (uint64_t)v17;
    v78 = *(id *)(a1 + 192);
    v79 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v78, "UUIDString")));
    v80 = objc_msgSend(v79, "UTF8String");
    v81 = objc_msgSend(*(id *)(a1 + 64), "length");

    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1170, (uint64_t)v80, CFSTR("Length of VehicleEnteredPasscode : %d"), v82, v83, v84, (uint64_t)v81);
    if (objc_msgSend(*(id *)(a1 + 104), "count"))
    {
      v85 = 0;
      v86 = 0;
      v202 = 0;
      v200 = 0;
      while (2)
      {
        v87 = objc_alloc_init(KmlSharingConfig);
        sub_100012A68((uint64_t)v87, *(void **)(a1 + 192));
        sub_100013B00((uint64_t)v87, *(void **)(a1 + 208));
        sub_100013B10((uint64_t)v87, *(void **)(a1 + 216));
        v88 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 104), "objectAtIndexedSubscript:", v85));
        sub_10024E600((uint64_t)v87, (uint64_t)objc_msgSend(v88, "profile"));

        v89 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 104), "objectAtIndexedSubscript:", v85));
        sub_10024E60C((uint64_t)v87, (uint64_t)objc_msgSend(v89, "keyRole"));

        v90 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 104), "objectAtIndexedSubscript:", v85));
        v91 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v90, "displayName"));
        v92 = kmlUtilSanitizeFriendlyName(v91);
        v93 = (void *)objc_claimAutoreleasedReturnValue(v92);
        sub_10022B4D4((uint64_t)v87, v93);

        v94 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 104), "objectAtIndexedSubscript:", v85));
        v95 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v94, "metaData"));
        sub_10022B4E4((uint64_t)v87, v95);

        sub_1002225D0((uint64_t)v87, *(void **)(a1 + 40));
        if (*(_BYTE *)(a1 + 168))
        {
          sub_10024E618((uint64_t)v87, *(_QWORD *)(a1 + 96));
        }
        else
        {
          v96 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 104), "objectAtIndexedSubscript:", v85));
          sub_10024E618((uint64_t)v87, (uint64_t)objc_msgSend(v96, "targetDeviceType"));

        }
        sub_10024E624((uint64_t)v87, 2);
        v97 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 104), "objectAtIndexedSubscript:", v85));
        sub_10024E6AC((uint64_t)v87, (char)objc_msgSend(v97, "enableVehicleEnteredPasscode"));

        sub_10024E6C8((uint64_t)v87, *(void **)(a1 + 56));
        sub_10024E6B8((uint64_t)v87, *(void **)(a1 + 64));
        v98 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 104), "objectAtIndexedSubscript:", v85));
        v99 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v98, "deviceEnteredPasscode"));
        sub_10024E6D8((uint64_t)v87, v99);

        v100 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 104), "objectAtIndexedSubscript:", v85));
        v101 = objc_msgSend(v100, "maxRetriesForDeviceEnteredPasscode");
        sub_10024E6E8((uint64_t)v87, (uint64_t)v101);
        sub_10024E6F4((uint64_t)v87, (uint64_t)v101);

        v102 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 104), "objectAtIndexedSubscript:", v85));
        sub_10024E700((uint64_t)v87, (char)objc_msgSend(v102, "mockRefreshInstanceCA"));

        v103 = 1;
        v104 = v203;
        while (1)
        {
          v105 = 1 << v103;
          if (((1 << v103) & v56) != 0 && ((1 << v103) & v204) != 0)
            break;
          v103 = (v103 + 1);
          v104 += v203;
          if ((_DWORD)v103 == 8)
            goto LABEL_41;
        }
        v107 = sub_10022DC4C(*(_QWORD *)(a1 + 144));
        v108 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 192), "UUIDString")));
        v109 = objc_msgSend(v108, "UTF8String");
        if (v107)
        {
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1211, (uint64_t)v109, CFSTR("Get random slotId for online slotId case"), v110, v111, v112, v196);

          v113 = kmlUtilRandomDataWithSize(v201);
          v114 = (void *)objc_claimAutoreleasedReturnValue(v113);
        }
        else
        {
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1214, (uint64_t)v109, CFSTR("Get slotId from private mailbox"), v110, v111, v112, v196);

          v115 = sub_10022AB20(v199);
          v116 = sub_10022AAE4(v199);
          v117 = (v115 - v116 + v201 * v103);
          v114 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v198, "subdataWithRange:", (v115 - v116 + v201 * v103), v201));
          v200 = v117;
        }
        if (sub_10022DC84(*(_QWORD *)(a1 + 144)))
        {
          v118 = sub_10022DC4C(*(_QWORD *)(a1 + 144));
          if ((v118 & 1) != 0)
            v104 = 0;
          v119 = v203;
          if ((v118 & 1) != 0)
            v119 = 0;
        }
        else
        {
          v104 = 0;
          v119 = 0;
        }
        v202 |= v105;
        v204 &= ~(_BYTE)v105;
        v203 = v119;
        sub_10024E630((uint64_t)v87, v119);
        sub_10024E63C((uint64_t)v87, v104);
        sub_10024E654((uint64_t)v87, v201);
        sub_10024E648((uint64_t)v87, v103);
        sub_10022B514((uint64_t)v87, v114);
        sub_10024E660((uint64_t)v87, v200);
        v120 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 192), "UUIDString")));
        v121 = objc_msgSend(v120, "UTF8String");
        KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1235, (uint64_t)v121, CFSTR("ImmoToken index        : %d"), v122, v123, v124, v103);

        v125 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 192), "UUIDString")));
        v126 = objc_msgSend(v125, "UTF8String");
        KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1236, (uint64_t)v126, CFSTR("ImmoToken offset       : %d"), v127, v128, v129, v104);

        v130 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 192), "UUIDString")));
        v131 = objc_msgSend(v130, "UTF8String");
        KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1237, (uint64_t)v131, CFSTR("SlotIdentifier offset  : %d"), v132, v133, v134, v200);

        v135 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 192), "UUIDString")));
        v136 = objc_msgSend(v135, "UTF8String");
        KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1238, (uint64_t)v136, CFSTR("SlotIdentifier         : %@"), v137, v138, v139, (uint64_t)v114);

        v140 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 192), "UUIDString")));
        v141 = objc_msgSend(v140, "UTF8String");
        v142 = sub_1002225B8((uint64_t)v87);
        v143 = (void *)objc_claimAutoreleasedReturnValue(v142);
        KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1239, (uint64_t)v141, CFSTR("Display name of key: %@"), v144, v145, v146, (uint64_t)v143);

        v147 = sub_10020C61C((uint64_t)[KmlOwnerSharingSession alloc], v87, *(void **)(a1 + 16), (void *)a1, 0, *(void **)(a1 + 152), *(void **)(a1 + 48));
        if (v147)
        {
          v148 = (void *)v147;
          objc_msgSend(*(id *)(a1 + 224), "addObject:", v147);

LABEL_41:
          v149 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 16), "subjectIdentifier"));
          v150 = sub_100254798((uint64_t)KmlEndpointManager, v149);
          v151 = (void *)objc_claimAutoreleasedReturnValue(v150);

          v152 = objc_msgSend(v151, "isEqualToString:", CFSTR("OWNR"));
          if (!sub_10024DE64((_BOOL8)v87)
            || !sub_10022F14C(*(_QWORD *)(a1 + 144))
            || !sub_10022F160(*(_QWORD *)(a1 + 144))
            || (!*(_QWORD *)(a1 + 64) ? (v153 = v152) : (v153 = 0), v153 != 1))
          {

            v85 = ++v86;
            if ((unint64_t)objc_msgSend(*(id *)(a1 + 104), "count") > v86)
              continue;
LABEL_54:
            v172 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 192), "UUIDString")));
            v173 = objc_msgSend(v172, "UTF8String");
            v174 = (uint8x8_t)vcnt_s8((int8x8_t)v202);
            v174.i16[0] = vaddlv_u8(v174);
            v175 = (id)v174.u32[0];
            KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1272, (uint64_t)v173, CFSTR("%u tokens reserved"), v176, v177, v178, v174.u32[0]);

            v179 = objc_msgSend(*(id *)(a1 + 104), "count");
            v180 = *(_QWORD *)(a1 + 72);
            v17 = (char *)v199;
            if (v179 == v175)
            {
              v9 = v197;
              v45 = 0;
              v44 = v198;
              if (!v180)
              {
                if ((sub_10022DC4C(*(_QWORD *)(a1 + 144)) & 1) == 0)
                {
                  *(_BYTE *)(a1 + 128) = v204;
                  sub_100266420(a1, 0, v202);
                }
                v181 = 6;
                goto LABEL_62;
              }
            }
            else
            {
              v9 = v197;
              v45 = 0;
              v44 = v198;
              if (!v180)
              {
                v182 = *(id *)(a1 + 192);
                v183 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v182, "UUIDString")));
                v184 = objc_msgSend(v183, "UTF8String");
                v185 = objc_msgSend(*(id *)(a1 + 104), "count");

                KmlSharingLogFunc(OS_LOG_TYPE_ERROR, (uint64_t)"KmlOwnerSharingManager.m", 1276, (uint64_t)v184, CFSTR("Failed to reserve %d tokens"), v186, v187, v188, (uint64_t)v185);
                v189 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
                v206 = NSLocalizedDescriptionKey;
                v45 = 0;
                v190 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(111));
                v191 = (void *)objc_claimAutoreleasedReturnValue(v190);
                v207 = v191;
                v192 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v207, &v206, 1));
                v193 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v189, 111, v192));
                v194 = *(void **)(a1 + 72);
                *(_QWORD *)(a1 + 72) = v193;

              }
            }
            v181 = 7;
LABEL_62:
            sub_100261820(a1, v181);
            v195 = *(void **)(a1 + 104);
            *(_QWORD *)(a1 + 104) = 0;

            goto LABEL_63;
          }
          v164 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 192), "UUIDString")));
          v165 = objc_msgSend(v164, "UTF8String");
          KmlSharingLogFunc(OS_LOG_TYPE_ERROR, (uint64_t)"KmlOwnerSharingManager.m", 1266, (uint64_t)v165, CFSTR("VEP is supported by vehicle, required for this share. But we failed to calculate it"), v166, v167, v168, v196);

          v160 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
          v208 = NSLocalizedDescriptionKey;
          v169 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(116));
          v161 = (void *)objc_claimAutoreleasedReturnValue(v169);
          v209 = v161;
          v163 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v209, &v208, 1));
          v170 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v160, 116, v163));
          v171 = *(void **)(a1 + 72);
          *(_QWORD *)(a1 + 72) = v170;

        }
        else
        {
          v154 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 192), "UUIDString")));
          v155 = objc_msgSend(v154, "UTF8String");
          KmlSharingLogFunc(OS_LOG_TYPE_ERROR, (uint64_t)"KmlOwnerSharingManager.m", 1253, (uint64_t)v155, CFSTR("Failed to create sharing session due to invalid config"), v156, v157, v158, v196);

          v151 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
          v210 = NSLocalizedDescriptionKey;
          v159 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(104));
          v160 = (void *)objc_claimAutoreleasedReturnValue(v159);
          v211 = v160;
          v161 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v211, &v210, 1));
          v162 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v151, 104, v161));
          v163 = *(void **)(a1 + 72);
          *(_QWORD *)(a1 + 72) = v162;
        }
        break;
      }

      goto LABEL_54;
    }
    v202 = 0;
    goto LABEL_54;
  }
}

void sub_1002648AC(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  dispatch_queue_t *v7;
  dispatch_queue_t *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[128];

  if (a1)
  {
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v2 = *(id *)(a1 + 224);
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)v33;
      while (2)
      {
        for (i = 0; i != v4; i = (char *)i + 1)
        {
          if (*(_QWORD *)v33 != v5)
            objc_enumerationMutation(v2);
          v7 = *(dispatch_queue_t **)(*((_QWORD *)&v32 + 1) + 8 * (_QWORD)i);
          v8 = sub_10020CB8C(v7);
          v9 = objc_claimAutoreleasedReturnValue(v8);
          if (v9)
          {
            v23 = (void *)v9;
            v24 = *(id *)(a1 + 192);
            v25 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "UUIDString")));
            v26 = objc_msgSend(v25, "UTF8String");
            KmlSharingLogFunc(OS_LOG_TYPE_ERROR, (uint64_t)"KmlOwnerSharingManager.m", 1299, (uint64_t)v26, CFSTR("Failed to create invitation : %@"), v27, v28, v29, (uint64_t)v23);

            v30 = *(void **)(a1 + 72);
            *(_QWORD *)(a1 + 72) = v23;
            v31 = v23;

            sub_100261820(a1, 7);
            return;
          }
          if (*(_QWORD *)(a1 + 208))
          {
            v10 = objc_alloc((Class)DAKeySharingInvitationData);
            v11 = *(_QWORD *)(a1 + 192);
            v12 = sub_10020CAB4((uint64_t)v7);
            v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
            v14 = objc_msgSend(v10, "initWithSessionUUID:invitationIdentifier:friendKeyIdentifier:sharingTarget:state:vehicleEnteredPasscode:", v11, v13, 0, sub_10020D3F8(v7), 1, *(_QWORD *)(a1 + 64));

            objc_msgSend(*(id *)(a1 + 112), "addObject:", v14);
          }
          else
          {
            v15 = objc_alloc((Class)DACarKeyGenericCrossPlatformSharingData);
            v16 = sub_10020CAB4((uint64_t)v7);
            v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
            v18 = sub_100211078((uint64_t)v7);
            v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
            v14 = objc_msgSend(v15, "initWithSharingIdentifier:friendKeyIdentifier:sharingMessageType:message:", v17, 0, 1, v19);

            v20 = objc_msgSend(objc_alloc((Class)DACarKeyAdditionalCrossPlatformSharingData), "initWithSharingSessionUUID:bindingAttestation:targetDeviceType:initiatorIdsPseudonym:", *(_QWORD *)(a1 + 192), 0, sub_10020D3F8(v7), 0);
            v21 = objc_msgSend(objc_alloc((Class)DACarKeyPrivateCrossPlatformSharingData), "initWithVehicleEnteredPasscode:pairedEntityIdentifier:", *(_QWORD *)(a1 + 64), 0);
            v22 = objc_msgSend(objc_alloc((Class)DACarKeySharingMessage), "initWithGenericCrossPlatformSharingData:additionalData:privateData:", v14, v20, v21);
            objc_msgSend(*(id *)(a1 + 120), "addObject:", v22);

          }
        }
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
        if (v4)
          continue;
        break;
      }
    }

    sub_100261820(a1, 8);
  }
}

void sub_100264B90(uint64_t a1)
{
  id v2;
  void *v3;
  _BOOL4 v4;
  uint64_t v5;
  id v6;
  _BOOL8 v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const __CFString *v16;
  void *v17;
  __CFString *v18;
  void *v19;
  const __CFString *v20;
  int v21;
  void *v22;
  id v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  const __CFString *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  void *v38;
  __CFString *v39;
  __CFString *v40;
  unsigned int v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  _QWORD v46[25];
  _QWORD v47[25];

  if (a1)
  {
    if (*(_QWORD *)(a1 + 208))
    {
      v2 = sub_1002342C4((uint64_t)KmlSharingTransport);
      v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
      v4 = sub_100234860((uint64_t)v3, *(void **)(a1 + 208));

      if (v4)
        v5 = 1;
      else
        v5 = 2;
    }
    else
    {
      v5 = 2;
    }
    v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 16), "readerInfo"));
    v6 = objc_msgSend(objc_alloc((Class)KmlRoutingInformation), "initWithReaderInformation:", v45);
    v7 = sub_10022F124(*(_QWORD *)(a1 + 144));
    v8 = sub_10022F138(*(_QWORD *)(a1 + 144));
    v13 = 2;
    if (!v8)
      v13 = 0;
    v14 = v13 | v7;
    v44 = v6;
    if (v6)
    {
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "manufacturer"));
      v16 = (const __CFString *)objc_msgSend(v15, "copy");

      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "brand"));
      v18 = (__CFString *)objc_msgSend(v17, "copy");

      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "regionString"));
      v20 = (const __CFString *)objc_msgSend(v19, "copy");

    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerSharingManager postStatistics]", 1525, CFSTR("No routing info available"), v9, v10, v11, v12, v37);
      v16 = CFSTR("Unknown");
      v18 = CFSTR("Unknown");
      v20 = CFSTR("Unknown");
    }
    v39 = (__CFString *)v20;
    v40 = (__CFString *)v16;
    v21 = objc_msgSend(*(id *)(a1 + 152), "agreedKmlVehicleVersion") == 768;
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 16), "configuration"));
    v41 = kmlUtilKeyClassOriginBitmap(objc_msgSend(v22, "opt2"));

    v23 = sub_100219A88(*(_QWORD *)(a1 + 152));
    v24 = objc_claimAutoreleasedReturnValue(v23);
    v46[0] = CFSTR("destination");
    v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v5));
    v47[0] = v43;
    v47[1] = &off_100323628;
    v46[1] = CFSTR("type");
    v46[2] = CFSTR("targetDeviceType");
    v47[2] = &off_100323640;
    v47[3] = &off_100323658;
    v46[3] = CFSTR("step");
    v46[4] = CFSTR("dataCenterCode");
    v47[4] = v20;
    v47[5] = v16;
    v46[5] = CFSTR("manufacturer");
    v46[6] = CFSTR("brand");
    v47[6] = v18;
    v46[7] = CFSTR("transportSupported");
    v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v14));
    v47[7] = v42;
    v46[8] = CFSTR("totalSharedKeysForOwnerKey");
    v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 184)));
    v47[8] = v25;
    v46[9] = CFSTR("status");
    v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(*(id *)(a1 + 72), "code")));
    v47[9] = v26;
    v47[10] = &off_100323670;
    v46[10] = CFSTR("activationOption");
    v46[11] = CFSTR("sharingTransport");
    if (*(_QWORD *)(a1 + 216))
      v27 = 2;
    else
      v27 = 1;
    v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v27));
    v47[11] = v28;
    v47[12] = &off_100323688;
    v46[12] = CFSTR("pinAttempts");
    v46[13] = CFSTR("appleToApple");
    v29 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(_QWORD *)(a1 + 208) != 0));
    v30 = (void *)v29;
    v31 = &stru_100316BD0;
    v38 = (void *)v24;
    if (v24)
      v31 = (const __CFString *)v24;
    v47[13] = v29;
    v47[14] = v31;
    v46[14] = CFSTR("senderSupportedFrameworkVersions");
    v46[15] = CFSTR("receiverSupportedFrameworkVersions");
    v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%04X"), objc_msgSend(*(id *)(a1 + 152), "agreedKmlSharingVersion")));
    v47[15] = v32;
    v47[16] = &off_100323688;
    v46[16] = CFSTR("attestationChainLength");
    v46[17] = CFSTR("certificateChainLength");
    v47[17] = &off_100323688;
    v47[18] = &off_100323688;
    v46[18] = CFSTR("accountRole");
    v46[19] = CFSTR("isIntraAccountShare");
    v47[19] = &off_100323688;
    v47[20] = &off_100323688;
    v46[20] = CFSTR("wasUserAuthRequired");
    v46[21] = CFSTR("mailboxVersion");
    v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", (v21 << 7)));
    v47[21] = v33;
    v46[22] = CFSTR("frameworkVersion");
    v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", objc_msgSend(*(id *)(a1 + 152), "agreedKmlSharingVersion")));
    v47[22] = v34;
    v47[23] = &off_100323688;
    v46[23] = CFSTR("accessProfile");
    v46[24] = CFSTR("keyClassOriginBitmap");
    v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v41));
    v47[24] = v35;
    v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v47, v46, 25));

    sub_100211BC8((uint64_t)KmlAnalyticsLogger, v36);
  }
}

id *sub_10026508C(id *result)
{
  id *v1;
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];

  if (result)
  {
    v1 = result;
    v9 = 0u;
    v10 = 0u;
    v7 = 0u;
    v8 = 0u;
    v2 = result[28];
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)v8;
      do
      {
        v6 = 0;
        do
        {
          if (*(_QWORD *)v8 != v5)
            objc_enumerationMutation(v2);
          sub_10020D4B8(*(_QWORD *)(*((_QWORD *)&v7 + 1) + 8 * (_QWORD)v6));
          v6 = (char *)v6 + 1;
        }
        while (v4 != v6);
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      }
      while (v4);
    }

    return (id *)objc_msgSend(v1[28], "removeAllObjects", (_QWORD)v7);
  }
  return result;
}

void sub_100265184(uint64_t a1)
{
  uint64_t v2;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;

  if (a1 && *(_QWORD *)(a1 + 40))
  {
    v2 = SESEndPointDeleteAuthorizationID();
    v15 = (id)objc_claimAutoreleasedReturnValue(v2);
    if (v15)
    {
      v3 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 192), "UUIDString")));
      v4 = objc_msgSend(v3, "UTF8String");
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "description"));
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1440, (uint64_t)v4, CFSTR("Failed in delete Auth. error: %@"), v6, v7, v8, (uint64_t)v5);

    }
    else
    {
      v9 = *(void **)(a1 + 40);
      *(_QWORD *)(a1 + 40) = 0;

      v3 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 192), "UUIDString")));
      v10 = objc_msgSend(v3, "UTF8String");
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1443, (uint64_t)v10, CFSTR("Auth deleted"), v11, v12, v13, v14);
    }

  }
}

void sub_100265284(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];

  if (a1)
  {
    v10 = 0u;
    v11 = 0u;
    v8 = 0u;
    v9 = 0u;
    v2 = *(id *)(a1 + 224);
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)v9;
      do
      {
        for (i = 0; i != v4; i = (char *)i + 1)
        {
          if (*(_QWORD *)v9 != v5)
            objc_enumerationMutation(v2);
          v7 = *(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)i);
          sub_10020D230(v7, *(void **)(a1 + 136));
          sub_10020CF6C(v7);
        }
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      }
      while (v4);
    }

  }
}

void sub_10026538C(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  NSString *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  id obj;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  NSErrorUserInfoKey v23;
  void *v24;
  _BYTE v25[128];

  if (a1)
  {
    v2 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 192), "UUIDString")));
    v3 = objc_msgSend(v2, "UTF8String");
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1357, (uint64_t)v3, CFSTR("Cancelling all sessions"), v4, v5, v6, v17);

    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    obj = *(id *)(a1 + 224);
    v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v19, v25, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v20;
      do
      {
        v10 = 0;
        do
        {
          if (*(_QWORD *)v20 != v9)
            objc_enumerationMutation(obj);
          v11 = *(_QWORD *)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)v10);
          v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
          v23 = NSLocalizedDescriptionKey;
          v13 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(123));
          v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
          v24 = v14;
          v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v24, &v23, 1));
          v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v12, 123, v15));
          sub_10020CF7C(v11, v16);

          v10 = (char *)v10 + 1;
        }
        while (v8 != v10);
        v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v19, v25, 16);
      }
      while (v8);
    }

  }
}

void sub_100265578(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  id v11;

  if (a1)
  {
    v2 = *(id *)(a1 + 192);
    v3 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "UUIDString")));
    v4 = objc_msgSend(v3, "UTF8String");
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1483, (uint64_t)v4, CFSTR("Sending invite request error response for uuid: %@"), v5, v6, v7, *(_QWORD *)(a1 + 192));

    v11 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithLength:](NSMutableData, "dataWithLength:", 32));
    v8 = sub_1002342C4((uint64_t)KmlSharingTransport);
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 192), "UUIDString"));
    sub_100234AC4((uint64_t)v9, v11, 0, 0, v10, 0, *(void **)(a1 + 192), *(void **)(a1 + 208), *(_QWORD *)(a1 + 96), 9);

  }
}

void sub_100265674(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unsigned int v10;
  _QWORD *v11;
  _QWORD *v12;
  id v13;
  id v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  NSString *v21;
  void *v22;
  void *v23;
  void *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  NSErrorUserInfoKey v29;
  void *v30;
  _BYTE v31[128];

  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v2 = *(id *)(*(_QWORD *)(a1 + 32) + 224);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v25, v31, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v26;
    while (2)
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v26 != v5)
          objc_enumerationMutation(v2);
        v7 = *(_QWORD *)(*((_QWORD *)&v25 + 1) + 8 * (_QWORD)i);
        v8 = sub_10020CAB4(v7);
        v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
        v10 = objc_msgSend(v9, "isEqualToString:", *(_QWORD *)(a1 + 40));

        if (v10)
        {
          v11 = *(_QWORD **)(a1 + 32);
          if (v11)
            v11 = (_QWORD *)v11[24];
          v12 = v11;
          v13 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "UUIDString")));
          v14 = objc_msgSend(v13, "UTF8String");
          v15 = sub_10020CAB4(v7);
          v16 = (void *)objc_claimAutoreleasedReturnValue(v15);

          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 899, (uint64_t)v14, CFSTR("Cancelling session with ID: %@"), v17, v18, v19, (uint64_t)v16);
          v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
          v29 = NSLocalizedDescriptionKey;
          v21 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(123));
          v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
          v30 = v22;
          v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v30, &v29, 1));
          v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v20, 123, v23));
          sub_10020CF7C(v7, v24);

          goto LABEL_13;
        }
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v25, v31, 16);
      if (v4)
        continue;
      break;
    }
  }
LABEL_13:

}

void sub_1002658B4(uint64_t a1)
{
  sub_10026538C(*(_QWORD *)(a1 + 32));
}

id sub_1002658BC(uint64_t a1)
{
  void *v2;
  id *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  id v19;
  id v20;
  uint64_t v21;
  void *i;
  void *v23;
  void *v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  NSString *v31;
  id v32;
  void *v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSString *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  id v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSString *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  id obj;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  id v66;
  NSErrorUserInfoKey v67;
  id v68;
  NSErrorUserInfoKey v69;
  id v70;
  _BYTE v71[128];
  NSErrorUserInfoKey v72;
  id v73;

  if (!a1)
    return 0;
  v3 = (id *)(a1 + 16);
  v2 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;

  v66 = 0;
  v4 = SESEndPointList(&v66);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = v66;
  if (v6)
  {
    v7 = v6;
    v8 = *(id *)(a1 + 192);
    v9 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "UUIDString")));
    v10 = objc_msgSend(v9, "UTF8String");
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 943, (uint64_t)v10, CFSTR("Error in getting endpoint list: %@"), v11, v12, v13, (uint64_t)v7);

    v14 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "userInfo"));
    v16 = v14;
  }
  else
  {
    if (objc_msgSend(v5, "count"))
    {
      v64 = 0u;
      v65 = 0u;
      v62 = 0u;
      v63 = 0u;
      obj = v5;
      v19 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v62, v71, 16);
      if (v19)
      {
        v20 = v19;
        v60 = v5;
        v21 = *(_QWORD *)v63;
        while (2)
        {
          for (i = 0; i != v20; i = (char *)i + 1)
          {
            if (*(_QWORD *)v63 != v21)
              objc_enumerationMutation(obj);
            v23 = *(void **)(*((_QWORD *)&v62 + 1) + 8 * (_QWORD)i);
            v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "publicKeyIdentifier"));
            v25 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 192), "UUIDString")));
            v26 = objc_msgSend(v25, "UTF8String");
            KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 954, (uint64_t)v26, CFSTR("checking key with id: %@"), v27, v28, v29, (uint64_t)v24);

            if (objc_msgSend(v24, "isEqual:", *(_QWORD *)(a1 + 24)))
            {
              v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "revocationAttestation"));

              if (v17)
              {
                v30 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
                v69 = NSLocalizedDescriptionKey;
                v31 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(211));
                v32 = (id)objc_claimAutoreleasedReturnValue(v31);
                v70 = v32;
                v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v70, &v69, 1));
                v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v30, 211, v33));

              }
              else
              {
                objc_storeStrong(v3, v23);
                v32 = *(id *)(a1 + 192);
                v30 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "UUIDString")));
                v40 = objc_msgSend(v30, "UTF8String");
                KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 961, (uint64_t)v40, CFSTR("key with id %@ exists"), v41, v42, v43, *(_QWORD *)(a1 + 200));
              }

              goto LABEL_23;
            }

          }
          v20 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v62, v71, 16);
          if (v20)
            continue;
          break;
        }
        v17 = 0;
LABEL_23:
        v5 = v60;
      }
      else
      {
        v17 = 0;
      }

      if (*v3)
      {
        v44 = sub_10021804C((uint64_t)[KmlVersions alloc], *(void **)(a1 + 16));
        v45 = *(void **)(a1 + 152);
        *(_QWORD *)(a1 + 152) = v44;

        v14 = *(id *)(a1 + 192);
        v7 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "UUIDString")));
        v46 = objc_msgSend(v7, "UTF8String");
        KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 971, (uint64_t)v46, CFSTR("Version Information : %@"), v47, v48, v49, *(_QWORD *)(a1 + 152));
      }
      else
      {
        v50 = *(id *)(a1 + 192);
        v51 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "UUIDString")));
        v52 = objc_msgSend(v51, "UTF8String");
        KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 967, (uint64_t)v52, CFSTR("Owner key with id %@, does not exist"), v53, v54, v55, *(_QWORD *)(a1 + 200));

        v7 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
        v67 = NSLocalizedDescriptionKey;
        v56 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(210));
        v14 = (id)objc_claimAutoreleasedReturnValue(v56);
        v68 = v14;
        v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v68, &v67, 1));
        v58 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v7, 210, v57));

        v17 = (void *)v58;
      }
      goto LABEL_5;
    }
    v34 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 192), "UUIDString")));
    v35 = objc_msgSend(v34, "UTF8String");
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 948, (uint64_t)v35, CFSTR("No keys in the SE database"), v36, v37, v38, v59);

    v7 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
    v72 = NSLocalizedDescriptionKey;
    v39 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(210));
    v14 = (id)objc_claimAutoreleasedReturnValue(v39);
    v73 = v14;
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v73, &v72, 1));
    v16 = v7;
  }
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v16, 210, v15));

LABEL_5:
  return v17;
}

id sub_100265E70(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  void *v14;
  unsigned int v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  void *v27;
  id v28;
  void *v29;
  void *v30;
  double v31;
  NSString *v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  _QWORD v48[2];
  _QWORD v49[2];

  if (!a1)
    return 0;
  if (*(_BYTE *)(a1 + 168))
  {
    v2 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 192), "UUIDString")));
    v3 = objc_msgSend(v2, "UTF8String");
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1399, (uint64_t)v3, CFSTR("For silent sharing retrieve AuthorizationId from saved sharing config."), v4, v5, v6, v45);

    return 0;
  }
  *(_BYTE *)(a1 + 88) = 0;
  v8 = sub_100253E34([KmlBindingAttestation alloc], *(void **)(a1 + 48));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 16), "anonymizedDsid"));
  if (objc_msgSend(v9, "length"))
  {
    v10 = sub_1002225B8((uint64_t)v8);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    v12 = objc_msgSend(v11, "length");

    if (v12)
    {
      v13 = sub_1002225B8((uint64_t)v8);
      v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
      v15 = objc_msgSend(v9, "isEqualToData:", v14);

      if (v15)
      {
        v16 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 192), "UUIDString")));
        v17 = objc_msgSend(v16, "UTF8String");
        KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1408, (uint64_t)v17, CFSTR("Saved Anonymized DSID matches Anonymized DSID in ourBindingAttestation. Authless share possible"), v18, v19, v20, v45);

        *(_BYTE *)(a1 + 88) = 1;
      }
    }
  }
  v21 = *(_QWORD *)(a1 + 200);
  v22 = *(_QWORD *)(a1 + 32);
  v47 = 0;
  v23 = SESEndPointCreateAuthorizationID(v21, v22, &v47);
  v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
  v25 = v47;
  if (!v25)
  {
    if (v24)
    {
      v26 = objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "authorizationID"));
      v27 = *(void **)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v26;

      v28 = sub_10023E06C((uint64_t)KmlSharingManager);
      v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
      v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "authorizationInterval"));
      objc_msgSend(v30, "doubleValue");
      sub_10023E540((uint64_t)v29, v31);
      v25 = 0;
    }
    else
    {
      v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.sharing"));
      v48[0] = NSLocalizedDescriptionKey;
      v32 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", KmlErrorString(105));
      v30 = (void *)objc_claimAutoreleasedReturnValue(v32);
      v48[1] = NSLocalizedFailureReasonErrorKey;
      v49[0] = v30;
      v49[1] = CFSTR("Failed to get authorization from externalized auth");
      v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v49, v48, 2));
      v25 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v29, 105, v33));

    }
  }
  v34 = *(id *)(a1 + 192);
  v35 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "UUIDString")));
  v36 = objc_msgSend(v35, "UTF8String");
  KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1424, (uint64_t)v36, CFSTR("Status of getting authorization - %@"), v37, v38, v39, (uint64_t)v25);

  if (*(_BYTE *)(a1 + 88))
  {
    v40 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 192), "UUIDString")));
    v41 = objc_msgSend(v40, "UTF8String");
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1427, (uint64_t)v41, CFSTR("authless share is possible, so ignore error (if any) in saving auth"), v42, v43, v44, v46);

    v25 = 0;
  }

  return v25;
}

